{"map":{"version":3,"sources":["static/js/41.fc2212d8.chunk.js"],"names":["this","push","140","module","__webpack_exports__","__webpack_require__","d","PrismCode","_home_mukeshs_Projects_edurights_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_home_mukeshs_Projects_edurights_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","_home_mukeshs_Projects_edurights_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_mukeshs_Projects_edurights_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","_home_mukeshs_Projects_edurights_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","react__WEBPACK_IMPORTED_MODULE_5__","react__WEBPACK_IMPORTED_MODULE_5___default","n","prismjs__WEBPACK_IMPORTED_MODULE_6__","prismjs__WEBPACK_IMPORTED_MODULE_6___default","_React$Component","props","_this","Object","call","highlight","ref","current","a","highlightElement","createRef","key","value","_this$props","code","language","plugins","createElement","className","concat","trim","Component","141","exports","152","Sidebar","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","react_router_dom__WEBPACK_IMPORTED_MODULE_1__","_material_ui_core_MenuItem__WEBPACK_IMPORTED_MODULE_2__","_material_ui_core_MenuList__WEBPACK_IMPORTED_MODULE_3__","_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_4__","useStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","classes","to","157","p","447","r","_material_ui_core__WEBPACK_IMPORTED_MODULE_7__","_material_ui_core__WEBPACK_IMPORTED_MODULE_8__","_material_ui_core__WEBPACK_IMPORTED_MODULE_9__","_material_ui_core__WEBPACK_IMPORTED_MODULE_10__","_sidebar__WEBPACK_IMPORTED_MODULE_12__","_ReactJs_prismCode__WEBPACK_IMPORTED_MODULE_13__","titles","backgroundColor","padding","fontSize","generateTrees","isValidBST","recoverTree","isSameTree","isSymmetric","sortedArrayToBST","sortedListToBST","minDepth","hasPathSum","connect","Trees","_Component","apply","arguments","setTimeout","highlightAll","container","item","xs","style","margin","smMargin","actionDiv","textAlign"],"mappings":"CAACA,KAAK,iCAAmCA,KAAK,kCAAoC,IAAIC,KAAK,CAAC,CAAC,IAAI,CAE3FC,IACA,SAAUC,EAAQC,EAAqBC,GAE7C,aAC+BA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAOG,KAC9E,IAAIC,EAAsHH,EAAoB,IAC1II,EAAmHJ,EAAoB,IACvIK,EAAiIL,EAAoB,KACrJM,EAAsHN,EAAoB,KAC1IO,EAAgHP,EAAoB,KACpIQ,EAAqCR,EAAoB,GACzDS,EAA0DT,EAAoBU,EAAEF,GAChFG,EAAuCX,EAAoB,KAC3DY,EAA4DZ,EAAoBU,EAAEC,GAGvGT,GAF+EF,EAAoB,IAE5E,SAASa,GAAuL,SAASX,EAAUY,GAAO,IAAIC,EAA2sB,OAArsBC,OAAOb,EAAqI,EAA5Ia,CAA+IrB,KAAKO,IAAWa,EAAMC,OAAOX,EAAgJ,EAAvJW,CAA0JrB,KAAKqB,OAAOV,EAAqI,EAA5IU,CAA+Id,GAAWe,KAAKtB,KAAKmB,KAAcI,UAAU,WAAcH,EAAMI,KAAKJ,EAAMI,IAAIC,SAASR,EAA6CS,EAAEC,iBAAiBP,EAAMI,IAAIC,UAAYL,EAAMI,IAAIV,EAA2CY,EAAEE,YAAmBR,EAA6rB,OAAllDC,OAAOT,EAA+H,EAAtIS,CAAyId,EAAUW,GAAywBG,OAAOZ,EAAkI,EAAzIY,CAA4Id,EAAU,CAAC,CAACsB,IAAI,oBAAoBC,MAAM,WAA6B9B,KAAKuB,cAAe,CAACM,IAAI,qBAAqBC,MAAM,WAA8B9B,KAAKuB,cAAe,CAACM,IAAI,SAASC,MAAM,WAAkB,IAAIC,EAAY/B,KAAKmB,MAAMa,EAAKD,EAAYC,KAAiCC,GAApBF,EAAYG,QAAiBH,EAAYE,UAAS,OAAOnB,EAA2CY,EAAES,cAAc,MAAM,CAACC,UAAU,cAActB,EAA2CY,EAAES,cAAc,OAAO,CAACX,IAAIxB,KAAKwB,IAAIY,UAAU,YAAYC,OAAOJ,IAAWD,EAAKM,aAAqB/B,EAApnD,CAAgoDO,EAA2CY,EAAEa,aAIlsDC,IACA,SAAUrC,EAAQsC,EAASpC,KAM3BqC,IACA,SAAUvC,EAAQC,EAAqBC,GAE7C,aAC+BA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAOuC,KAC9E,IAAIC,EAAqCvC,EAAoB,GACzDwC,EAA0DxC,EAAoBU,EAAE6B,GAChFE,EAAgDzC,EAAoB,IACpE0C,EAA0D1C,EAAoB,KAC9E2C,EAA0D3C,EAAoB,KAC9E4C,EAAwD5C,EAAoB,KACjG6C,EAAU7B,OAAO4B,EAAuE,EAA9E5B,EAAiF,SAAS8B,GAAO,MAAM,CAACC,KAAK,CAACC,QAAQ,QAAQC,MAAM,CAACC,YAAYJ,EAAMK,QAAQ,IAAIC,KAAK,CAACC,eAAe,YAAY,SAASf,IAAU,IAAIgB,EAAQT,IAAY,OAAOL,EAA2CnB,EAAES,cAAc,MAAM,CAACC,UAAUuB,EAAQP,MAAMP,EAA2CnB,EAAES,cAAca,EAAyE,EAAE,KAAKH,EAA2CnB,EAAES,cAAcY,EAAyE,EAAE,KAAKF,EAA2CnB,EAAES,cAAcW,EAA4D,EAAE,CAACc,GAAG,aAAaxB,UAAUuB,EAAQF,MAAM,aAAaZ,EAA2CnB,EAAES,cAAcY,EAAyE,EAAE,KAAKF,EAA2CnB,EAAES,cAAcW,EAA4D,EAAE,CAACc,GAAG,SAASxB,UAAUuB,EAAQF,MAAM,UAAUZ,EAA2CnB,EAAES,cAAcY,EAAyE,EAAE,KAAKF,EAA2CnB,EAAES,cAAcW,EAA4D,EAAE,CAACc,GAAG,SAASxB,UAAUuB,EAAQF,MAAM,UAAUZ,EAA2CnB,EAAES,cAAcY,EAAyE,EAAE,KAAKF,EAA2CnB,EAAES,cAAcW,EAA4D,EAAE,CAACc,GAAG,cAAcxB,UAAUuB,EAAQF,MAAM,eAAeZ,EAA2CnB,EAAES,cAAcY,EAAyE,EAAE,KAAKF,EAA2CnB,EAAES,cAAcW,EAA4D,EAAE,CAACc,GAAG,QAAQxB,UAAUuB,EAAQF,MAAM,SAASZ,EAA2CnB,EAAES,cAAcY,EAAyE,EAAE,KAAKF,EAA2CnB,EAAES,cAAcW,EAA4D,EAAE,CAACc,GAAG,SAASxB,UAAUuB,EAAQF,MAAM,SAASZ,EAA2CnB,EAAES,cAAcY,EAAyE,EAAE,KAAKF,EAA2CnB,EAAES,cAAcW,EAA4D,EAAE,CAACc,GAAG,SAASxB,UAAUuB,EAAQF,MAAM,UAAUZ,EAA2CnB,EAAES,cAAcY,EAAyE,EAAE,KAAKF,EAA2CnB,EAAES,cAAcW,EAA4D,EAAE,CAACc,GAAG,QAAQxB,UAAUuB,EAAQF,MAAM,cAAcZ,EAA2CnB,EAAES,cAAcY,EAAyE,EAAE,KAAKF,EAA2CnB,EAAES,cAAcW,EAA4D,EAAE,CAACc,GAAG,cAAcxB,UAAUuB,EAAQF,MAAM,WAAWZ,EAA2CnB,EAAES,cAAcY,EAAyE,EAAE,KAAKF,EAA2CnB,EAAES,cAAcW,EAA4D,EAAE,CAACc,GAAG,WAAWxB,UAAUuB,EAAQF,MAAM,YAAYZ,EAA2CnB,EAAES,cAAcY,EAAyE,EAAE,KAAKF,EAA2CnB,EAAES,cAAcW,EAA4D,EAAE,CAACc,GAAG,cAAcxB,UAAUuB,EAAQF,MAAM,WAAWZ,EAA2CnB,EAAES,cAAcY,EAAyE,EAAE,KAAKF,EAA2CnB,EAAES,cAAcW,EAA4D,EAAE,CAACc,GAAG,aAAaxB,UAAUuB,EAAQF,MAAM,UAAUZ,EAA2CnB,EAAES,cAAcY,EAAyE,EAAE,KAAKF,EAA2CnB,EAAES,cAAcW,EAA4D,EAAE,CAACc,GAAG,kBAAkBxB,UAAUuB,EAAQF,MAAM,kBAAkBZ,EAA2CnB,EAAES,cAAcY,EAAyE,EAAE,KAAKF,EAA2CnB,EAAES,cAAcW,EAA4D,EAAE,CAACc,GAAG,eAAexB,UAAUuB,EAAQF,MAAM,YAAYZ,EAA2CnB,EAAES,cAAcY,EAAyE,EAAE,KAAKF,EAA2CnB,EAAES,cAAcW,EAA4D,EAAE,CAACc,GAAG,YAAYxB,UAAUuB,EAAQF,MAAM,SAASZ,EAA2CnB,EAAES,cAAcY,EAAyE,EAAE,KAAKF,EAA2CnB,EAAES,cAAcW,EAA4D,EAAE,CAACc,GAAG,gBAAgBxB,UAAUuB,EAAQF,MAAM,aAAaZ,EAA2CnB,EAAES,cAAcY,EAAyE,EAAE,KAAKF,EAA2CnB,EAAES,cAAcW,EAA4D,EAAE,CAACc,GAAG,gBAAgBxB,UAAUuB,EAAQF,MAAM,aAAaZ,EAA2CnB,EAAES,cAAcY,EAAyE,EAAE,KAAKF,EAA2CnB,EAAES,cAAcW,EAA4D,EAAE,CAACc,GAAG,YAAYxB,UAAUuB,EAAQF,MAAM,YAAYZ,EAA2CnB,EAAES,cAAc,MAAM,SAInhM0B,IACA,SAAU1D,EAAQsC,EAASpC,GAEjCF,EAAOsC,QAAUpC,EAAoByD,EAAI,mCAInCC,IACA,SAAU5D,EAAQC,EAAqBC,GAE7C,aACAA,EAAoB2D,EAAE5D,GACD,IAAII,EAAsHH,EAAoB,IAC1II,EAAmHJ,EAAoB,IACvIK,EAAiIL,EAAoB,KACrJM,EAAsHN,EAAoB,KAC1IO,EAAgHP,EAAoB,KACpIQ,EAAqCR,EAAoB,GACzDS,EAA0DT,EAAoBU,EAAEF,GAChFG,EAAuCX,EAAoB,KAC3DY,EAA4DZ,EAAoBU,EAAEC,GAClFiD,EAAiD5D,EAAoB,KACrE6D,EAAiD7D,EAAoB,IACrE8D,EAAiD9D,EAAoB,KACrE+D,EAAkD/D,EAAoB,GAGtEgE,GAFoDhE,EAAoB,KAE/BA,EAAoB,MAC7DiE,EAAmDjE,EAAoB,KAG5FkE,GAFuElE,EAAoB,KAEpF,CAACmE,gBAAgB,UAAUC,QAAQ,MAAMC,SAAS,SAAuNC,EAAc,gmCAAgmCrC,OAAWsC,EAAW,4pBAA4pBtC,OAAWuC,EAAY,kjBAAkjBvC,OAAWwC,EAAW,mUAAmUxC,OAAWyC,EAAY,qxBAAqxBzC,OAAW0C,EAAiB,2aAA2a1C,OAAW2C,EAAgB,shBAAshB3C,OAAW4C,EAAS,2jBAA2jB5C,OAAW6C,EAAW,4dAA4d7C,OAAW8C,EAAQ,+gBAA+gB9C,OAAW+C,EAAmB,SAASC,GAAuK,SAASD,IAAmK,OAA3JhE,OAAOb,EAAqI,EAA5Ia,CAA+IrB,KAAKqF,GAAchE,OAAOX,EAAgJ,EAAvJW,CAA0JrB,KAAKqB,OAAOV,EAAqI,EAA5IU,CAA+IgE,GAAOE,MAAMvF,KAAKwF,YAAy4V,OAAvhXnE,OAAOT,EAA+H,EAAtIS,CAAyIgE,EAAMC,GAA4gBjE,OAAOZ,EAAkI,EAAzIY,CAA4IgE,EAAM,CAAC,CAACxD,IAAI,oBAAoBC,MAAM,WAA6B2D,YAAW,WAAW,OAAOxE,EAA6CS,EAAEgE,iBAAiB,KAAM,CAAC7D,IAAI,SAASC,MAAM,WAAkB,IAAI6B,EAAQ3D,KAAKmB,MAAMwC,QAAQ,OAAO7C,EAA2CY,EAAES,cAAc8B,EAAgE,EAAE,CAAC0B,WAAU,GAAM7E,EAA2CY,EAAES,cAAc8B,EAAgE,EAAE,CAAC2B,MAAK,EAAKC,GAAG,GAAG/E,EAA2CY,EAAES,cAAc+B,EAAgE,EAAE,CAAC9B,UAAUuB,EAAQL,OAAOxC,EAA2CY,EAAES,cAAc,KAAK,KAAKrB,EAA2CY,EAAES,cAAckC,EAAwD,EAAE,SAASvD,EAA2CY,EAAES,cAAc8B,EAAgE,EAAE,CAAC2B,MAAK,EAAKC,GAAG,IAAI/E,EAA2CY,EAAES,cAAc+B,EAAgE,EAAE,CAAC9B,UAAUuB,EAAQL,OAAOxC,EAA2CY,EAAES,cAAcgC,EAAgE,EAAE,KAAKrD,EAA2CY,EAAES,cAAc,KAAK,KAAK,kCAAkCrB,EAA2CY,EAAES,cAAc,IAAI,KAAK,WAAW,IAAIrB,EAA2CY,EAAES,cAAc,KAAK,MAAMrB,EAA2CY,EAAES,cAAc,IAAI,KAAK,YAAY,IAAIrB,EAA2CY,EAAES,cAAc,KAAK,MAAM,gBAAgBrB,EAA2CY,EAAES,cAAc,KAAK,MAAM,gBAAgBrB,EAA2CY,EAAES,cAAc,KAAK,MAAM,qBAAqBrB,EAA2CY,EAAES,cAAc,KAAK,MAAM,WAAWrB,EAA2CY,EAAES,cAAc,KAAK,MAAM,sBAAsBrB,EAA2CY,EAAES,cAAc,MAAM,CAAC2D,MAAMvB,GAAQzD,EAA2CY,EAAES,cAAcmC,EAAkE,EAAE,CAACtC,KAAK2C,EAAc1C,SAAS,KAAKC,QAAQ,CAAC,mBAAmBpB,EAA2CY,EAAES,cAAc,KAAK,MAAMrB,EAA2CY,EAAES,cAAc,KAAK,KAAK,mCAAmC,4EAA4ErB,EAA2CY,EAAES,cAAc,KAAK,MAAM,sCAAsCrB,EAA2CY,EAAES,cAAc,KAAK,KAAKrB,EAA2CY,EAAES,cAAc,KAAK,KAAK,sFAAsFrB,EAA2CY,EAAES,cAAc,KAAK,KAAK,0FAA0FrB,EAA2CY,EAAES,cAAc,KAAK,KAAK,uEAAuErB,EAA2CY,EAAES,cAAc,KAAK,MAAMrB,EAA2CY,EAAES,cAAc,IAAI,KAAK,WAAW,WAAWrB,EAA2CY,EAAES,cAAc,IAAI,KAAK,YAAY,QAAQrB,EAA2CY,EAAES,cAAc,KAAK,MAAMrB,EAA2CY,EAAES,cAAc,KAAK,MAAMrB,EAA2CY,EAAES,cAAc,IAAI,KAAK,eAAerB,EAA2CY,EAAES,cAAc,IAAI,KAAK,WAAW,wBAAwBrB,EAA2CY,EAAES,cAAc,KAAK,MAAMrB,EAA2CY,EAAES,cAAc,IAAI,KAAK,YAAY,QAAQrB,EAA2CY,EAAES,cAAc,KAAK,MAAMrB,EAA2CY,EAAES,cAAc,IAAI,KAAK,iBAAiB,+DAA+DrB,EAA2CY,EAAES,cAAc,MAAM,CAAC2D,MAAMvB,GAAQzD,EAA2CY,EAAES,cAAcmC,EAAkE,EAAE,CAACtC,KAAK4C,EAAW3C,SAAS,KAAKC,QAAQ,CAAC,mBAAmBpB,EAA2CY,EAAES,cAAc,KAAK,MAAMrB,EAA2CY,EAAES,cAAc,KAAK,KAAK,kCAAkC,qEAAqErB,EAA2CY,EAAES,cAAc,KAAK,MAAM,oDAAoDrB,EAA2CY,EAAES,cAAc,KAAK,MAAMrB,EAA2CY,EAAES,cAAc,KAAK,MAAMrB,EAA2CY,EAAES,cAAc,IAAI,KAAK,WAAW,uBAAuBrB,EAA2CY,EAAES,cAAc,KAAK,MAAMrB,EAA2CY,EAAES,cAAc,IAAI,KAAK,YAAY,uBAAuBrB,EAA2CY,EAAES,cAAc,MAAM,CAAC2D,MAAMvB,GAAQzD,EAA2CY,EAAES,cAAcmC,EAAkE,EAAE,CAACtC,KAAK6C,EAAY5C,SAAS,KAAKC,QAAQ,CAAC,mBAAmBpB,EAA2CY,EAAES,cAAc,KAAK,MAAMrB,EAA2CY,EAAES,cAAc,KAAK,KAAK,iBAAiB,iFAAiFrB,EAA2CY,EAAES,cAAc,KAAK,MAAM,iHAAiHrB,EAA2CY,EAAES,cAAc,MAAM,CAAC2D,MAAMvB,GAAQzD,EAA2CY,EAAES,cAAcmC,EAAkE,EAAE,CAACtC,KAAK8C,EAAW7C,SAAS,KAAKC,QAAQ,CAAC,mBAAmBpB,EAA2CY,EAAES,cAAc,KAAK,MAAMrB,EAA2CY,EAAES,cAAc,KAAK,KAAK,sBAAsB,iGAAiGrB,EAA2CY,EAAES,cAAc,MAAM,CAAC2D,MAAMvB,GAAQzD,EAA2CY,EAAES,cAAcmC,EAAkE,EAAE,CAACtC,KAAK+C,EAAY9C,SAAS,KAAKC,QAAQ,CAAC,mBAAmBpB,EAA2CY,EAAES,cAAc,KAAK,MAAMrB,EAA2CY,EAAES,cAAc,KAAK,KAAK,kDAAkD,oGAAoGrB,EAA2CY,EAAES,cAAc,KAAK,MAAM,gKAAgKrB,EAA2CY,EAAES,cAAc,MAAM,CAAC2D,MAAMvB,GAAQzD,EAA2CY,EAAES,cAAcmC,EAAkE,EAAE,CAACtC,KAAKgD,EAAiB/C,SAAS,KAAKC,QAAQ,CAAC,mBAAmBpB,EAA2CY,EAAES,cAAc,KAAK,MAAMrB,EAA2CY,EAAES,cAAc,KAAK,KAAK,iDAAiD,4HAA4HrB,EAA2CY,EAAES,cAAc,KAAK,MAAM,gKAAgKrB,EAA2CY,EAAES,cAAc,KAAK,MAAMrB,EAA2CY,EAAES,cAAc,KAAK,MAAMrB,EAA2CY,EAAES,cAAc,IAAI,KAAK,WAAW,wBAAwBrB,EAA2CY,EAAES,cAAc,KAAK,MAAMrB,EAA2CY,EAAES,cAAc,IAAI,KAAK,YAAY,sBAAsBrB,EAA2CY,EAAES,cAAc,MAAM,CAAC2D,MAAMvB,GAAQzD,EAA2CY,EAAES,cAAcmC,EAAkE,EAAE,CAACtC,KAAKiD,EAAgBhD,SAAS,KAAKC,QAAQ,CAAC,mBAAmBpB,EAA2CY,EAAES,cAAc,KAAK,MAAMrB,EAA2CY,EAAES,cAAc,KAAK,KAAK,oCAAoC,qHAAqHrB,EAA2CY,EAAES,cAAc,MAAM,CAAC2D,MAAMvB,GAAQzD,EAA2CY,EAAES,cAAcmC,EAAkE,EAAE,CAACtC,KAAKkD,EAASjD,SAAS,KAAKC,QAAQ,CAAC,mBAAmBpB,EAA2CY,EAAES,cAAc,KAAK,MAAMrB,EAA2CY,EAAES,cAAc,KAAK,KAAK,gBAAgB,uJAAuJrB,EAA2CY,EAAES,cAAc,MAAM,CAAC2D,MAAMvB,GAAQzD,EAA2CY,EAAES,cAAcmC,EAAkE,EAAE,CAACtC,KAAKmD,EAAWlD,SAAS,KAAKC,QAAQ,CAAC,mBAAmBpB,EAA2CY,EAAES,cAAc,KAAK,MAAMrB,EAA2CY,EAAES,cAAc,KAAK,KAAK,oDAAoD,sIAAsIrB,EAA2CY,EAAES,cAAc,KAAK,MAAM,gDAAgDrB,EAA2CY,EAAES,cAAc,KAAK,MAAMrB,EAA2CY,EAAES,cAAc,KAAK,KAAKrB,EAA2CY,EAAES,cAAc,KAAK,KAAK,0CAA0CrB,EAA2CY,EAAES,cAAc,KAAK,KAAK,oHAAoHrB,EAA2CY,EAAES,cAAc,MAAM,CAAC2D,MAAMvB,GAAQzD,EAA2CY,EAAES,cAAcmC,EAAkE,EAAE,CAACtC,KAAKoD,EAAQnD,SAAS,KAAKC,QAAQ,CAAC,2BAAmCmD,EAAnjX,CAA2jXxE,EAA8C,WAAgCT,EAA6B,QAAKiB,OAAO+C,EAAiE,EAAxE/C,EAAl7jB,SAAgB8B,GAAO,MAAM,CAACG,MAAM,CAACyC,OAAO5C,EAAMK,QAAQ,GAAGiB,QAAQtB,EAAMK,QAAQ,IAAIwC,SAAS,CAACD,OAAO5C,EAAMK,QAAQ,IAAIyC,UAAU,CAACC,UAAU,aAAkyjB,CAAoFb"},"code":"(this[\"webpackJsonpmern-stack-client\"]=this[\"webpackJsonpmern-stack-client\"]||[]).push([[41],{140:function(e,n,t){\"use strict\";t.d(n,\"a\",(function(){return h}));var l=t(45),a=t(28),r=t(136),i=t(137),o=t(139),u=t(0),s=t.n(u),c=t(138),m=t.n(c),h=(t(59),function(e){function n(e){var t;return Object(l.a)(this,n),(t=Object(r.a)(this,Object(i.a)(n).call(this,e))).highlight=function(){t.ref&&t.ref.current&&m.a.highlightElement(t.ref.current)},t.ref=s.a.createRef(),t}return Object(o.a)(n,e),Object(a.a)(n,[{key:\"componentDidMount\",value:function(){this.highlight()}},{key:\"componentDidUpdate\",value:function(){this.highlight()}},{key:\"render\",value:function(){var e=this.props,n=e.code,t=(e.plugins,e.language);return s.a.createElement(\"pre\",{className:\"code-prism\"},s.a.createElement(\"code\",{ref:this.ref,className:\"language-\".concat(t)},n.trim()))}}]),n}(s.a.Component))},141:function(e,n,t){},152:function(e,n,t){\"use strict\";t.d(n,\"a\",(function(){return c}));var l=t(0),a=t.n(l),r=t(26),i=t(297),o=t(295),u=t(114),s=Object(u.a)((function(e){return{root:{display:\"flex\"},paper:{marginRight:e.spacing(2)},line:{textDecoration:\"none\"}}}));function c(){var e=s();return a.a.createElement(\"div\",{className:e.root},a.a.createElement(o.a,null,a.a.createElement(i.a,null,a.a.createElement(r.b,{to:\"/introAlgo\",className:e.line},\"Deadlock\")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:\"/Stack\",className:e.line},\"Stack\")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:\"/Queue\",className:e.line},\"Queue\")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:\"/linkedList\",className:e.line},\"LinkedList\")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:\"/heap\",className:e.line},\"Heap\")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:\"/trees\",className:e.line},\"Tree\")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:\"/graph\",className:e.line},\"Graph\")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:\"/sort\",className:e.line},\"QuickSort\")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:\"/searchAlgo\",className:e.line},\"Search\")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:\"/topTech\",className:e.line},\"TopTech\")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:\"/stringAlgo\",className:e.line},\"String\")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:\"/arrayAlgo\",className:e.line},\"Array\")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:\"/nestingArrAlgo\",className:e.line},\"Nesting Array\")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:\"/numbersAlgo\",className:e.line},\"Numbers\")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:\"/gameAlgo\",className:e.line},\"Game\")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:\"/arrayStrAlgo\",className:e.line},\"ArrayStr\")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:\"/arrayNumAlgo\",className:e.line},\"ArrayNum\")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:\"/dslogic8\",className:e.line},\"Logic8\"))),a.a.createElement(\"div\",null))}},157:function(e,n,t){e.exports=t.p+\"static/media/stcks.7efa3b78.png\"},447:function(e,n,t){\"use strict\";t.r(n);var l=t(45),a=t(28),r=t(136),i=t(137),o=t(139),u=t(0),s=t.n(u),c=t(138),m=t.n(c),h=t(120),d=t(57),f=t(296),g=t(5),E=(t(141),t(152)),p=t(140),b=(t(157),{backgroundColor:\"#F0F8FF\",padding:\"1px\",fontSize:\"16px\"}),v=\"\\nfunction TreeNode(val) {\\n  this.val = val\\n  this.left = null\\n  this.right = null\\n}\\n\\nconst generateTrees = (n) => {\\n  if (n === 0) return [];\\n\\n  const numbers = new Array(n).fill(0).map((v, index) => index + 1)\\n  const memo = {}\\n\\n  const compose = (number, left, right) => {\\n    const result = []\\n    for (let i = 0; i < left.length; i++) {\\n      for (let j = 0; j < right.length; j++) {\\n            const node = new TreeNode(number)\\n            node.left = left[i]\\n            node.right = right[j]\\n            result.push(node)\\n          }\\n        }\\n        return result\\n      }\\n\\n  const aux = (list = []) => {\\n    const key = list.toString()\\n    if (memo[key] !== undefined) {\\n      return memo[list.toString()]\\n    }\\n\\n    if (list.length === 0) return [null]\\n\\n    memo[key] = list.reduce((acc, number) => {\\n        acc.push(...compose(number, aux(list.filter(x => x < number)), aux(list.filter(x => x > number)),\\n          ),\\n        )\\n        return acc\\n      },\\n      [],\\n    )\\n    return memo[key]\\n  }\\n  \\n  return aux(numbers)\\n}\\n\\nconsole.log(generateTrees(3))\\n\".trim(),y=\"\\nfunction isValidBST(root) {\\n  const aux = (node) => {\\n    if (!node) return [true, null, null];\\n\\n    const [leftValid, leftMin, leftMax] = aux(node.left)\\n    const [rightValid, rightMin, rightMax] = aux(node.right)\\n    let valid = leftValid && rightValid\\n\\n    if (leftMax !== null && leftMax >= node.val) {\\n      valid = false\\n    }\\n    if (rightMin !== null && rightMin <= node.val) {\\n      valid = false\\n    }\\n    \\n    const currentMin = leftMin === null ? node.val : leftMin\\n    const currentMax = rightMax === null ? node.val : rightMax\\n    return [valid, currentMin, currentMax]\\n  }\\n  return aux(root)[0]\\n}\\n\\nconsole.log(isValidBST(3))\\n\".trim(),x=\"\\nfunction recoverTree(root) {\\n  let first = null\\n  let second = null\\n  let prev = null\\n\\n  const aux = (node) => {\\n    if (node) {\\n      aux(node.left)\\n      if (prev && prev.val > node.val) {\\n        if (!first) {\\n          first = prev\\n          second = node\\n        } else {\\n          second = node\\n        }\\n      }\\n      prev = node\\n      aux(node.right)\\n    }\\n  }\\n  aux(root)\\n\\n  if (first && second) {\\n    const temp = first.val\\n    first.val = second.val\\n    second.val = temp\\n  }\\n}\\n\\nconsole.log(recoverTree([1,3,null,2]))\".trim(),S=\"\\nfunction isSameTree(p, q) {\\n  if ((p && !q) || (!p && q)) return false;\\n  if (!p && !q) return true;\\n\\n  const leftSame = isSameTree(p.left, q.left)\\n  const rightSame = isSameTree(p.right, q.right)\\n  \\n  return leftSame && rightSame && (p.val === q.val)\\n}\\n\\nconsole.log(isSameTree([1,3,null,2], [1,3,null,2]))\\n\".trim(),T=\"\\nfunction isSymmetric(root){\\n  function aux (node, level, result){\\n    if (!result[level]) {\\n      result[level] = []\\n    }\\n\\n    if (!node) {\\n      result[level].push(null)\\n      return result\\n    }\\n\\n    result[level].push(node.val)\\n    aux(node.left, level + 1, result)\\n    aux(node.right, level + 1, result)\\n    return result\\n  }\\n\\n  function isSymmetricHelper (values = []){\\n    for (let i = 0; i <= values.length / 2; i++) {\\n      if (values[i] !== values[values.length - 1 - i]) {\\n        return false\\n      }\\n    }\\n    return true\\n  }\\n\\n  const result = aux(root, 0, [])\\n  for (let i = 0; i < result.length; i++) {\\n    if (!isSymmetricHelper(result[i])) {\\n      return false\\n    }\\n  }\\n  return true\\n}\\n\\nconsole.log(isSymmetric([1,2,2,3,4,4,3]))\\n \".trim(),N=\"\\nfunction sortedArrayToBST (nums = []){\\n  const aux = (low, high) => {\\n    if (low <= high) {\\n      const middle = Math.floor((low + high) / 2)\\n      const node = { val: nums[middle] }\\n      \\n      node.left = aux(low, middle - 1)\\n      node.right = aux(middle + 1, high)\\n      return node\\n    }\\n    return null\\n  }\\n  return aux(0, nums.length - 1)\\n}\\n\\nconsole.log(sortedArrayToBST([3,9,20,null,null,15,7]))\\n\".trim(),w=\"\\nfunction sortedListToBST(head) {\\n  const nodes = []\\n\\n  while (head) {\\n    head.left = null\\n    head.right = null\\n    nodes.push(head)\\n    head = head.next\\n  }\\n\\n  const aux = (nodes, low, high) => { \\n    if (low > high) return null;\\n\\n    const middle = Math.floor((low + high) / 2)\\n    nodes[middle].left = aux(nodes, low, middle - 1)\\n    nodes[middle].right = aux(nodes, middle + 1, high)\\n    return nodes[middle]\\n  }\\n  return aux(nodes, 0, nodes.length - 1)\\n}\\n\\nconsole.log(sortedListToBST([-10,-3,0,5,9]))\\n\".trim(),k=\"\\nfunction minDepth (root){\\n  if (!root) return 0;\\n\\n  const aux = (node, depth) => {\\n    if (!node || (!node.left && !node.right)) return depth;\\n\\n    if (node.left && !node.right) {\\n      return aux(node.left, depth + 1)\\n    }\\n\\n    if (node.right && !node.left) {\\n      return aux(node.right, depth + 1)\\n    }\\n\\n    const leftDepth = aux(node.left, depth + 1)\\n    const rightDepth = aux(node.right, depth + 1)\\n    return leftDepth < rightDepth ? leftDepth : rightDepth\\n  }\\n\\n  return aux(root, 1)\\n}\\n\\nconsole.log(minDepth([3,9,20,null,null,15,7]))\\n\".trim(),j=\"\\nfunction hasPathSum (root, sum){\\n  function aux (node, currentSum){\\n    if (!node) return false;\\n\\n    if (node && !node.left && !node.right) {\\n      return (currentSum + node.val) === sum\\n    }\\n    const isLeftHas = aux(node.left, currentSum + node.val)\\n    const isRightHas = aux(node.right, currentSum + node.val)\\n    return (isLeftHas || isRightHas)\\n  }\\n\\n  if (root === null) return false;\\n  return aux(root, 0)\\n}\\n\\nconsole.log(hasPathSum([5,4,1],10))\\n\".trim(),M=\"\\nfunction connect (root){\\n  if (!root) return null;\\n  let frontier = [root];\\n\\n  while (frontier.length) {\\n    const next = []\\n    frontier.forEach((node, index) => {\\n      if (frontier[index + 1]) {\\n        node.next = frontier[index + 1]\\n      } else {\\n        node.next = null\\n      }\\n      if (node.left) {\\n        next.push(node.left)\\n      }\\n      if (node.right) {\\n        next.push(node.right)\\n      }\\n    })\\n    frontier = next\\n  }\\n  return root\\n}\\n\\nconsole.log(connect([1,2,3,4,5,null,7]))\\n\".trim(),A=function(e){function n(){return Object(l.a)(this,n),Object(r.a)(this,Object(i.a)(n).apply(this,arguments))}return Object(o.a)(n,e),Object(a.a)(n,[{key:\"componentDidMount\",value:function(){setTimeout((function(){return m.a.highlightAll()}),0)}},{key:\"render\",value:function(){var e=this.props.classes;return s.a.createElement(h.a,{container:!0},s.a.createElement(h.a,{item:!0,xs:2},s.a.createElement(d.a,{className:e.paper},s.a.createElement(\"h4\",null,s.a.createElement(E.a,null)))),s.a.createElement(h.a,{item:!0,xs:10},s.a.createElement(d.a,{className:e.paper},s.a.createElement(f.a,null,s.a.createElement(\"h3\",null,\"1. Unique Binary Search Trees.\"),s.a.createElement(\"b\",null,\"Input: \"),\"3\",s.a.createElement(\"br\",null),s.a.createElement(\"b\",null,\"Output: \"),\"[\",s.a.createElement(\"br\",null),\"[1,null,3,2],\",s.a.createElement(\"br\",null),\"[3,2,null,1],\",s.a.createElement(\"br\",null),\"[3,1,null,null,2],\",s.a.createElement(\"br\",null),\"[2,1,3],\",s.a.createElement(\"br\",null),\"[1,null,2,null,3] ]\",s.a.createElement(\"div\",{style:b},s.a.createElement(p.a,{code:v,language:\"js\",plugins:[\"line-numbers\"]})),s.a.createElement(\"br\",null),s.a.createElement(\"h3\",null,\"2. Validate Binary Search Tree.\"),\"Given a binary tree, determine if it is a valid binary search tree (BST).\",s.a.createElement(\"br\",null),\"Assume a BST is defined as follows:\",s.a.createElement(\"ul\",null,s.a.createElement(\"li\",null,\"The left subtree of a node contains only nodes with keys less than the node's key.\"),s.a.createElement(\"li\",null,\"The right subtree of a node contains only nodes with keys greater than the node's key.\"),s.a.createElement(\"li\",null,\"Both the left and right subtrees must also be binary search trees.\")),s.a.createElement(\"br\",null),s.a.createElement(\"b\",null,\"Input: \"),\" [2,1,3]\",s.a.createElement(\"b\",null,\"Output: \"),\" true\",s.a.createElement(\"br\",null),s.a.createElement(\"br\",null),s.a.createElement(\"b\",null,\"Example 2: \"),s.a.createElement(\"b\",null,\"Input: \"),\"[5,1,4,null,null,3,6]\",s.a.createElement(\"br\",null),s.a.createElement(\"b\",null,\"Output: \"),\"false\",s.a.createElement(\"br\",null),s.a.createElement(\"b\",null,\"Explanation: \"),\"The root node's value is 5 but its right child's value is 4.\",s.a.createElement(\"div\",{style:b},s.a.createElement(p.a,{code:y,language:\"js\",plugins:[\"line-numbers\"]})),s.a.createElement(\"br\",null),s.a.createElement(\"h3\",null,\"3. Recover Binary Search Tree.\"),\"Two elements of a binary search tree (BST) are swapped by mistake.\",s.a.createElement(\"br\",null),\"Recover the tree without changing its structure. \",s.a.createElement(\"br\",null),s.a.createElement(\"br\",null),s.a.createElement(\"b\",null,\"Input: \"),\" [3,1,4,null,null,2]\",s.a.createElement(\"br\",null),s.a.createElement(\"b\",null,\"Output: \"),\" [2,1,4,null,null,3]\",s.a.createElement(\"div\",{style:b},s.a.createElement(p.a,{code:x,language:\"js\",plugins:[\"line-numbers\"]})),s.a.createElement(\"br\",null),s.a.createElement(\"h3\",null,\"4. Same Tree.\"),\"Given two binary trees, write a function to check if they are the same or not.\",s.a.createElement(\"br\",null),\"Two binary trees are considered the same if they are structurally identical and the nodes have the same value.\",s.a.createElement(\"div\",{style:b},s.a.createElement(p.a,{code:S,language:\"js\",plugins:[\"line-numbers\"]})),s.a.createElement(\"br\",null),s.a.createElement(\"h3\",null,\"5. Symmetric Tree.\"),\"Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\",s.a.createElement(\"div\",{style:b},s.a.createElement(p.a,{code:T,language:\"js\",plugins:[\"line-numbers\"]})),s.a.createElement(\"br\",null),s.a.createElement(\"h3\",null,\"6. Convert Sorted Array to Binary Search Tree.\"),\"Given an array where elements are sorted in ascending order, convert it to a height balanced BST.\",s.a.createElement(\"br\",null),\"For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\",s.a.createElement(\"div\",{style:b},s.a.createElement(p.a,{code:N,language:\"js\",plugins:[\"line-numbers\"]})),s.a.createElement(\"br\",null),s.a.createElement(\"h3\",null,\"7. Convert Sorted List to Binary Search Tree.\"),\"Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.\",s.a.createElement(\"br\",null),\"For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\",s.a.createElement(\"br\",null),s.a.createElement(\"br\",null),s.a.createElement(\"b\",null,\"Input: \"),\"head = [-10,-3,0,5,9]\",s.a.createElement(\"br\",null),s.a.createElement(\"b\",null,\"Output: \"),\"[0,-3,9,-10,null,5]\",s.a.createElement(\"div\",{style:b},s.a.createElement(p.a,{code:w,language:\"js\",plugins:[\"line-numbers\"]})),s.a.createElement(\"br\",null),s.a.createElement(\"h3\",null,\"8. Minimum Depth of Binary Tree.\"),\"The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\",s.a.createElement(\"div\",{style:b},s.a.createElement(p.a,{code:k,language:\"js\",plugins:[\"line-numbers\"]})),s.a.createElement(\"br\",null),s.a.createElement(\"h3\",null,\"9. Path Sum.\"),\"Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.\",s.a.createElement(\"div\",{style:b},s.a.createElement(p.a,{code:j,language:\"js\",plugins:[\"line-numbers\"]})),s.a.createElement(\"br\",null),s.a.createElement(\"h3\",null,\"10. Populating Next Right Pointers in Each Node.\"),\"Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\",s.a.createElement(\"br\",null),\"Initially, all next pointers are set to NULL.\",s.a.createElement(\"br\",null),s.a.createElement(\"ul\",null,s.a.createElement(\"li\",null,\"You may only use constant extra space.\"),s.a.createElement(\"li\",null,\"Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.\")),s.a.createElement(\"div\",{style:b},s.a.createElement(p.a,{code:M,language:\"js\",plugins:[\"line-numbers\"]}))))))}}]),n}(u.Component);n.default=Object(g.a)((function(e){return{paper:{margin:e.spacing(1),padding:e.spacing(1)},smMargin:{margin:e.spacing(1)},actionDiv:{textAlign:\"center\"}}}))(A)}}]);","extractedComments":[]}