{"map":{"version":3,"sources":["static/js/45.5f91e159.chunk.js"],"names":["this","push","344","module","__webpack_exports__","__webpack_require__","d","Sidebar","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_router_dom__WEBPACK_IMPORTED_MODULE_1__","_material_ui_core_MenuItem__WEBPACK_IMPORTED_MODULE_2__","_material_ui_core_MenuList__WEBPACK_IMPORTED_MODULE_3__","_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_4__","useStyles","Object","theme","root","display","paper","marginRight","spacing","line","textDecoration","classes","a","createElement","className","to","470","r","_home_mukeshs_Projects_edurights_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_home_mukeshs_Projects_edurights_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","_home_mukeshs_Projects_edurights_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_mukeshs_Projects_edurights_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","_home_mukeshs_Projects_edurights_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","react__WEBPACK_IMPORTED_MODULE_5__","react__WEBPACK_IMPORTED_MODULE_5___default","prismjs__WEBPACK_IMPORTED_MODULE_6__","prismjs__WEBPACK_IMPORTED_MODULE_6___default","_material_ui_core__WEBPACK_IMPORTED_MODULE_7__","_material_ui_core__WEBPACK_IMPORTED_MODULE_8__","_material_ui_core__WEBPACK_IMPORTED_MODULE_9__","_material_ui_core__WEBPACK_IMPORTED_MODULE_10__","_sidebar__WEBPACK_IMPORTED_MODULE_12__","_ReactJs_prismCode__WEBPACK_IMPORTED_MODULE_13__","titles","backgroundColor","padding","fontSize","childsFile","trim","realize","visualization","columns","convert","encoding","split","tensorflow","precision","childsFiles","predictions","Customer","_Component","apply","arguments","key","value","setTimeout","highlightAll","props","container","item","xs","style","code","language","plugins","margin","smMargin","actionDiv","textAlign"],"mappings":"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"},"code":"(this[\"webpackJsonpmern-stack-client\"]=this[\"webpackJsonpmern-stack-client\"]||[]).push([[45],{344:function(e,n,a){\"use strict\";a.d(n,\"a\",(function(){return u}));var t=a(0),l=a.n(t),r=a(12),o=a(14),i=a(50),s=a(49),c=Object(s.a)((function(e){return{root:{display:\"flex\"},paper:{marginRight:e.spacing(2)},line:{textDecoration:\"none\"}}}));function u(){var e=c();return l.a.createElement(\"div\",{className:e.root},l.a.createElement(i.a,null,l.a.createElement(o.a,null,l.a.createElement(r.b,{to:\"/introAngular\",className:e.line},\"AI\")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:\"/tensorflow\",className:e.line},\"Tensorflow\")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:\"/tensors\",className:e.line},\"Tensorboards\")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:\"/angCompiler\",className:e.line},\"Compiler\")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:\"/neural\",className:e.line},\"NeuralKeras\")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:\"/activationFunctions\",className:e.line},\"activationFuncs\")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:\"/loss\",className:e.line},\"Loss\")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:\"/gradientNeural\",className:e.line},\"GradientNeural\")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:\"/stochastic\",className:e.line},\"Stochastic\")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:\"/benchmarking\",className:e.line},\"Benchmarking\")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:\"/customer\",className:e.line},\"Customer\")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:\"/regularizationDeep\",className:e.line},\"Regularization Deep\")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:\"/imbalanced\",className:e.line},\"Imbalanced\")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:\"/imbalanced2\",className:e.line},\"Imbalanced2\")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:\"/convolutionals\",className:e.line},\"Convolutionals\")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:\"/data_augmentation\",className:e.line},\"data Augmentation\")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:\"/transfer\",className:e.line},\"Transfer\")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:\"/word_embedding\",className:e.line},\"Embedding\"))),l.a.createElement(\"div\",null))}},470:function(e,n,a){\"use strict\";a.r(n);var t=a(4),l=a(3),r=a(5),o=a(6),i=a(8),s=a(0),c=a.n(s),u=a(7),m=a.n(u),d=a(2),p=a(9),g=a(13),f=a(11),h=(a(16),a(344)),b=a(1),E={backgroundColor:\"#F0F8FF\",padding:\"1px\",fontSize:\"16px\"},_=\"\\nimport numpy as np\\nimport pandas as pd\\nfrom matplotlib import pyplot as plt\\n%matplotlib inline\\n\\ndf = pd.read_csv(\\\"customer_churn.csv\\\")\\n\\ndf.drop('customerID',axis='columns',inplace=True)\\ndf.dtypes\\n\".trim(),y=\"\\ndf.TotalCharges.values\\npd.to_numeric(df.TotalCharges)                                                   #string Convert it to numbers.\\n\\npd.to_numeric(df.TotalCharges,errors='coerce').isnull()                          #some values not numbers but blank string.\\n\\ndf[pd.to_numeric(df.TotalCharges,errors='coerce').isnull()]\\ndf.iloc[488].TotalCharges\\ndf[df.TotalCharges!=' '].shape\\n\\ndf1 = df[df.TotalCharges!=' ']                                                   #Remove rows with space in TotalCharges.\\ndf1.TotalCharges = pd.to_numeric(df1.TotalCharges)\\ndf1.TotalCharges.values\\ndf1[df1.Churn=='No']\\n\".trim(),N=\"\\ntenure_churn_no = df1[df1.Churn=='No'].tenure\\ntenure_churn_yes = df1[df1.Churn=='Yes'].tenure\\n\\nplt.xlabel(\\\"tenure\\\")\\nplt.ylabel(\\\"Number Of Customers\\\")\\nplt.title(\\\"Customer Churn Prediction Visualiztion\\\")\\n\\nblood_sugar_men = [113, 85, 90, 150, 149, 88, 93, 115, 135, 80, 77, 82, 129]\\nblood_sugar_women = [67, 98, 89, 120, 133, 150, 84, 69, 89, 79, 120, 112, 100]\\n\\nplt.hist([tenure_churn_yes, tenure_churn_no], rwidth=0.95, color=['green','red'],label=['Churn=Yes','Churn=No'])\\nplt.legend()\\n\\n\\nmc_churn_no = df1[df1.Churn=='No'].MonthlyCharges      \\nmc_churn_yes = df1[df1.Churn=='Yes'].MonthlyCharges      \\n\\nplt.xlabel(\\\"Monthly Charges\\\")\\nplt.ylabel(\\\"Number Of Customers\\\")\\nplt.title(\\\"Customer Churn Prediction Visualiztion\\\")\\n\\nblood_sugar_men = [113, 85, 90, 150, 149, 88, 93, 115, 135, 80, 77, 82, 129]\\nblood_sugar_women = [67, 98, 89, 120, 133, 150, 84, 69, 89, 79, 120, 112, 100]\\n\\nplt.hist([mc_churn_yes, mc_churn_no], rwidth=0.95, color=['green','red'],label=['Churn=Yes','Churn=No'])\\nplt.legend()\\n\".trim(),v=\"\\ndef print_unique_col_values(df):\\n       for column in df:\\n            if df[column].dtypes=='object':\\n                print(f'{column}: {df[column].unique()}') \\n                \\nprint_unique_col_values(df1)\\n\\n#Some columns have no internet service or no phone service, that can be replaced with No.\\ndf1.replace('No internet service','No',inplace=True)\\ndf1.replace('No phone service','No',inplace=True)\\n\\nprint_unique_col_values(df1)\\n\".trim(),C=\"\\nyes_no_columns = ['Partner','Dependents','PhoneService','MultipleLines','OnlineSecurity','OnlineBackup',\\n                  'DeviceProtection','TechSupport','StreamingTV','StreamingMovies','PaperlessBilling','Churn']\\n                  \\nfor col in yes_no_columns:\\n    df1[col].replace({'Yes': 1,'No': 0},inplace=True)\\n    \\nfor col in df1:\\n    print(f'{col}: {df1[col].unique()}') \\n    \\ndf1['gender'].replace({'Female':1,'Male':0},inplace=True)\\ndf1.gender.unique()\\n\".trim(),T=\"\\nfrom sklearn.preprocessing import MinMaxScaler\\n\\ndf2 = pd.get_dummies(data=df1, columns=['InternetService','Contract','PaymentMethod'])\\ndf2.columns\\n\\ncols_to_scale = ['tenure','MonthlyCharges','TotalCharges']\\n\\nscaler = MinMaxScaler()\\ndf2[cols_to_scale] = scaler.fit_transform(df2[cols_to_scale])\\n\\nfor col in df2:\\n    print(f'{col}: {df2[col].unique()}')\\n\".trim(),k=\"\\nfrom sklearn.model_selection import train_test_split\\n\\nX = df2.drop('Churn',axis='columns')\\ny = df2['Churn']\\n\\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=5)\\nlen(X_train.columns)\\n\".trim(),D=\"\\nimport tensorflow as tf\\nfrom tensorflow import keras\\n\\nmodel = keras.Sequential([\\n    keras.layers.Dense(26, input_shape=(26,), activation='relu'),\\n    keras.layers.Dense(15, activation='relu'),\\n    keras.layers.Dense(1, activation='sigmoid')\\n])\\n\\n# opt = keras.optimizers.Adam(learning_rate=0.01)\\n\\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\\nmodel.fit(X_train, y_train, epochs=100)\\n\\nmodel.evaluate(X_test, y_test)\\n\\nyp = model.predict(X_test)\\nyp[:5]\\n\".trim(),w=(\"\\ny_pred = []\\nfor element in yp:\\n    if element > 0.5:\\n        y_pred.append(1)\\n    else:\\n        y_pred.append(0)\\n        \\n        \\ny_pred[:10]\\ny_test[:10]\\n\\n\\nfrom sklearn.metrics import confusion_matrix , classification_report\\nprint(classification_report(y_test,y_pred))\\n\\nimport seaborn as sn\\ncm = tf.math.confusion_matrix(labels=y_test,predictions=y_pred)\\n\\nplt.figure(figsize = (10,7))\\nsn.heatmap(cm, annot=True, fmt='d')\\nplt.xlabel('Predicted')\\nplt.ylabel('Truth')\\n\\ny_test.shape\\nround((862+229)/(862+229+137+179),2)                      #Accuracy\\n\".trim(),\"\\nround(862/(862+179),2)\\nround(229/(229+137),2)                             #Precision for 1 class. i.e.Precision for customers who actually churned.\\n\\nround(229/(229+137),2)\\nround(862/(862+137),2)                             #Recall for 0 class.\\n\\nround(862/(862+137),2)\\nround(229/(229+179),2)\\n\".trim()),P='\\nfrom matplotlib import pyplot as plt\\nfrom sklearn.metrics import confusion_matrix , classification_report\\nimport pandas as pd\\n\\ntruth = [\"Dog\",\"Not a dog\",\"Dog\",\"Dog\", \"Dog\", \"Not a dog\", \"Not a dog\", \"Dog\", \"Dog\", \"Not a dog\"]\\nprediction = [\"Dog\",\"Dog\", \"Dog\",\"Not a dog\",\"Dog\", \"Not a dog\", \"Dog\", \"Not a dog\", \"Dog\", \"Dog\"]\\n\\ncm = confusion_matrix(truth,prediction)\\nprint_confusion_matrix(cm,[\"Dog\",\"Not a dog\"])\\n\\nprint(classification_report(truth, prediction))\\n\\n2*(0.57*0.67/(0.57+0.67))                                                                 #f1 score for Dog class.\\n2*(0.33*0.25/(0.33+0.25))                                                                 #f1 score for Not a dog class.\\n'.trim(),j=\"\\nPrecision =  True Positive(TP)/ (TP+FP)\\n\\nRecall = TP/ (TP + FN)\\n\".trim(),x=function(e){function n(){return Object(t.a)(this,n),Object(r.a)(this,Object(o.a)(n).apply(this,arguments))}return Object(i.a)(n,e),Object(l.a)(n,[{key:\"componentDidMount\",value:function(){setTimeout((function(){return m.a.highlightAll()}),0)}},{key:\"render\",value:function(){var e=this.props.classes;return c.a.createElement(d.a,{container:!0},c.a.createElement(d.a,{item:!0,xs:2},c.a.createElement(p.a,{className:e.paper},c.a.createElement(\"h4\",null,c.a.createElement(h.a,null)))),c.a.createElement(d.a,{item:!0,xs:10},c.a.createElement(p.a,{className:e.paper},c.a.createElement(g.a,null,c.a.createElement(\"h3\",null,\"Customer Churn Prediction Using Artificial Neural Network (ANN)\"),\"Neural networks/ ANNs/ simulated neural networks (SNNs), are a subset of ML and are at the heart of DL algorithms. Their name and structure are inspired by the human brain, mimicking the way that biological neurons signal to one another.\",c.a.createElement(\"br\",null),c.a.createElement(\"br\",null),c.a.createElement(\"i\",null,\"Customer churn prediction is to measure why customers are leaving a business. we look customer churn in telecom business. We will build a deep learning model to predict the churn and use precision,recall, f1-score to measure performance of our model.\"),c.a.createElement(\"br\",null),c.a.createElement(\"br\",null),c.a.createElement(\"div\",{style:E},c.a.createElement(b.a,{code:_,language:\"js\",plugins:[\"line-numbers\"]})),c.a.createElement(\"br\",null),c.a.createElement(\"br\",null),c.a.createElement(\"b\",null,\"Quick glance at above makes me realize that TotalCharges should be float but it is an object.\"),c.a.createElement(\"br\",null),c.a.createElement(\"br\",null),c.a.createElement(\"div\",{style:E},c.a.createElement(b.a,{code:y,language:\"js\",plugins:[\"line-numbers\"]})),c.a.createElement(\"br\",null),c.a.createElement(\"h3\",null,\"Data Visualization\"),c.a.createElement(\"div\",{style:E},c.a.createElement(b.a,{code:N,language:\"js\",plugins:[\"line-numbers\"]})),c.a.createElement(\"br\",null),c.a.createElement(\"h3\",null,\"Many of the columns are yes, no etc. Print unique values in object columns to see data values\"),c.a.createElement(\"div\",{style:E},c.a.createElement(b.a,{code:v,language:\"js\",plugins:[\"line-numbers\"]})),c.a.createElement(\"br\",null),c.a.createElement(\"h3\",null,\"Convert Yes and No to 1 or 0\"),c.a.createElement(\"div\",{style:E},c.a.createElement(b.a,{code:C,language:\"js\",plugins:[\"line-numbers\"]})),c.a.createElement(\"br\",null),c.a.createElement(\"h3\",null,\"One hot encoding for categorical columns\"),c.a.createElement(\"div\",{style:E},c.a.createElement(b.a,{code:T,language:\"js\",plugins:[\"line-numbers\"]})),c.a.createElement(\"br\",null),c.a.createElement(\"h3\",null,\"Train test split\"),c.a.createElement(\"div\",{style:E},c.a.createElement(b.a,{code:k,language:\"js\",plugins:[\"line-numbers\"]})),c.a.createElement(\"br\",null),c.a.createElement(\"h3\",null,\"Build a model (ANN) in tensorflow/keras\"),c.a.createElement(\"div\",{style:E},c.a.createElement(b.a,{code:D,language:\"js\",plugins:[\"line-numbers\"]})),c.a.createElement(\"br\",null),c.a.createElement(\"br\",null),c.a.createElement(\"b\",null,\"Precision for 0 class. i.e. Precision for customers who did not churn.\"),c.a.createElement(\"br\",null),c.a.createElement(\"div\",{style:E},c.a.createElement(b.a,{code:w,language:\"js\",plugins:[\"line-numbers\"]})),c.a.createElement(\"br\",null),c.a.createElement(\"h3\",null),c.a.createElement(\"div\",{style:E},c.a.createElement(b.a,{code:D,language:\"js\",plugins:[\"line-numbers\"]})),c.a.createElement(\"br\",null),c.a.createElement(\"h3\",null,\"Precision Recall\"),c.a.createElement(\"ul\",null,c.a.createElement(\"li\",null,c.a.createElement(\"b\",null,\"Precision:\"),\"Is out of all Prediction how many got it right.\"),c.a.createElement(\"ul\",null,c.a.createElement(\"li\",null,\"Think about Prediction as base.\")),c.a.createElement(\"br\",null),c.a.createElement(\"li\",null,c.a.createElement(\"b\",null,\"Recall:\"),\"Is out of all True how many got it right.\"),c.a.createElement(\"ul\",null,c.a.createElement(\"li\",null,\"Think about truth is base.\"))),c.a.createElement(\"br\",null),c.a.createElement(\"div\",{style:E},c.a.createElement(b.a,{code:j,language:\"js\",plugins:[\"line-numbers\"]})),c.a.createElement(\"br\",null),c.a.createElement(\"br\",null),c.a.createElement(\"div\",{style:E},c.a.createElement(b.a,{code:P,language:\"js\",plugins:[\"line-numbers\"]}))))))}}]),n}(s.Component);n.default=Object(f.a)((function(e){return{paper:{margin:e.spacing(1),padding:e.spacing(1)},smMargin:{margin:e.spacing(1)},actionDiv:{textAlign:\"center\"}}}))(x)}}]);","extractedComments":[]}