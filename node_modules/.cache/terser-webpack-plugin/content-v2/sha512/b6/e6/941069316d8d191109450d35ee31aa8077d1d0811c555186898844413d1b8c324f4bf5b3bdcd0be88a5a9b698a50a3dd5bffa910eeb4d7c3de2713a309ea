{"map":{"version":3,"sources":["static/js/50.b540c5de.chunk.js"],"names":["this","push","140","module","__webpack_exports__","__webpack_require__","d","PrismCode","_home_mukeshs_Projects_edurights_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_home_mukeshs_Projects_edurights_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","_home_mukeshs_Projects_edurights_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_mukeshs_Projects_edurights_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","_home_mukeshs_Projects_edurights_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","react__WEBPACK_IMPORTED_MODULE_5__","react__WEBPACK_IMPORTED_MODULE_5___default","n","prismjs__WEBPACK_IMPORTED_MODULE_6__","prismjs__WEBPACK_IMPORTED_MODULE_6___default","_React$Component","props","_this","Object","call","highlight","ref","current","a","highlightElement","createRef","key","value","_this$props","code","language","plugins","createElement","className","concat","trim","Component","141","exports","156","Sidebar","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","react_router_dom__WEBPACK_IMPORTED_MODULE_1__","_material_ui_core_MenuItem__WEBPACK_IMPORTED_MODULE_2__","_material_ui_core_MenuList__WEBPACK_IMPORTED_MODULE_3__","_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_4__","useStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","classes","to","159","p","323","r","_material_ui_core__WEBPACK_IMPORTED_MODULE_7__","_material_ui_core__WEBPACK_IMPORTED_MODULE_8__","_material_ui_core__WEBPACK_IMPORTED_MODULE_9__","_material_ui_core__WEBPACK_IMPORTED_MODULE_10__","_sidebar__WEBPACK_IMPORTED_MODULE_12__","_ReactJs_prismCode__WEBPACK_IMPORTED_MODULE_13__","titles","backgroundColor","padding","fontSize","shallowFull","Enzymes2","_Component","apply","arguments","setTimeout","highlightAll","container","item","xs","style","margin","smMargin","actionDiv","textAlign"],"mappings":"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"},"code":"(this[\"webpackJsonpmern-stack-client\"]=this[\"webpackJsonpmern-stack-client\"]||[]).push([[50],{140:function(n,e,t){\"use strict\";t.d(e,\"a\",(function(){return u}));var o=t(45),a=t(28),r=t(136),s=t(137),p=t(139),i=t(0),l=t.n(i),c=t(138),d=t.n(c),u=(t(59),function(n){function e(n){var t;return Object(o.a)(this,e),(t=Object(r.a)(this,Object(s.a)(e).call(this,n))).highlight=function(){t.ref&&t.ref.current&&d.a.highlightElement(t.ref.current)},t.ref=l.a.createRef(),t}return Object(p.a)(e,n),Object(a.a)(e,[{key:\"componentDidMount\",value:function(){this.highlight()}},{key:\"componentDidUpdate\",value:function(){this.highlight()}},{key:\"render\",value:function(){var n=this.props,e=n.code,t=(n.plugins,n.language);return l.a.createElement(\"pre\",{className:\"code-prism\"},l.a.createElement(\"code\",{ref:this.ref,className:\"language-\".concat(t)},e.trim()))}}]),e}(l.a.Component))},141:function(n,e,t){},156:function(n,e,t){\"use strict\";t.d(e,\"a\",(function(){return c}));var o=t(0),a=t.n(o),r=t(26),s=t(296),p=t(294),i=t(114),l=Object(i.a)((function(n){return{root:{display:\"flex\"},paper:{marginRight:n.spacing(2)},line:{textDecoration:\"none\"}}}));function c(){var n=l();return a.a.createElement(\"div\",{className:n.root},a.a.createElement(p.a,null,a.a.createElement(s.a,null,a.a.createElement(r.b,{to:\"/devtools\",className:n.line},\"Devtools\")),a.a.createElement(s.a,null,a.a.createElement(r.b,{to:\"/cssbasics\",className:n.line},\"CSS\")),a.a.createElement(s.a,null,a.a.createElement(r.b,{to:\"/csscodes\",className:n.line},\"Css Codes\")),a.a.createElement(s.a,null,a.a.createElement(r.b,{to:\"/sass\",className:n.line},\"SASS\")),a.a.createElement(s.a,null,a.a.createElement(r.b,{to:\"/html_1\",className:n.line},\"html 1\")),a.a.createElement(s.a,null,a.a.createElement(r.b,{to:\"/restApi\",className:n.line},\"RestApi\")),a.a.createElement(s.a,null,a.a.createElement(r.b,{to:\"/jest\",className:n.line},\"Jest\")),a.a.createElement(s.a,null,a.a.createElement(r.b,{to:\"/matchers\",className:n.line},\"Matchers\")),a.a.createElement(s.a,null,a.a.createElement(r.b,{to:\"/enzymes\",className:n.line},\"Enzymes\")),a.a.createElement(s.a,null,a.a.createElement(r.b,{to:\"/enzyme2\",className:n.line},\"Enzymes2\")),a.a.createElement(s.a,null,a.a.createElement(r.b,{to:\"/enzyme3\",className:n.line},\"Enzymes3\"))),a.a.createElement(\"div\",null))}},159:function(n,e,t){n.exports=t.p+\"static/media/css1.cf9107ca.PNG\"},323:function(n,e,t){\"use strict\";t.r(e);var o=t(45),a=t(28),r=t(136),s=t(137),p=t(139),i=t(0),l=t.n(i),c=t(138),d=t.n(c),u=t(120),m=t(57),f=t(295),h=t(5),w=(t(141),t(156)),v=t(140),x=(t(159),{backgroundColor:\"#F0F8FF\",padding:\"1px\",fontSize:\"16px\"}),b='\\nimport { mount, shallow } from \"enzyme\";\\nimport React from \"react\";\\nimport PropTypes from \"prop-types\";\\n\\nfunction Foo(props) {\\n  return (\\n    <div>\\n      <button\\n        id=\"foo-button\"\\n        onClick={() => props.onButtonClick && props.onButtonClick()}\\n      />\\n    </div>\\n  );\\n}\\n\\nfunction MyComponent(props) {\\n  return (\\n    <div id=\"root\">\\n      <div className=\"parent\">\\n        <Foo anum={3} abool={false} />\\n        <Foo anum=\"3\" abool=\"false\" />\\n        <Foo id=\"foo-id\" abool={undefined} />\\n        <div className=\"icon-star\"></div>\\n        <a href=\"foo\">Foo</a>\\n        <div id=\"list\">\\n          {[1, 2, 3].map(item => (\\n            <div id=\"list-item\" key={item}>\\n              {item}\\n            </div>\\n          ))}\\n        </div>\\n      </div>\\n      <div className=\"parent\">{props.children}</div>\\n    </div>\\n  );\\n}\\n\\nMyComponent.displayName = \"My Component\";\\n\\ntest(\"at(index)\", () => {\\n  const wrapper = mount(<MyComponent />);\\n  expect(wrapper.find(Foo).at(2)).toMatchInlineSnapshot(\\'\\n    <Foo\\n      id=\"foo-id\"\\n    >\\n      <div>\\n        <button\\n          id=\"foo-button\"\\n          onClick={[Function]}\\n        />\\n      </div>\\n    </Foo>\\n  \\');\\n});\\n\\ntest(\"childAt()\", () => {\\n  const wrapper = mount(<MyComponent />);\\n  expect(\\n    wrapper\\n      .find(\".parent\")\\n      .first()\\n      .childAt(2)\\n  ).toMatchInlineSnapshot(\\'\\n    <Foo\\n      id=\"foo-id\"\\n    >\\n      <div>\\n        <button\\n          id=\"foo-button\"\\n          onClick={[Function]}\\n        />\\n      </div>\\n    </Foo>\\n  \\');\\n});\\n\\ntest(\"children()\", () => {\\n  const wrapper = mount(<MyComponent />);\\n  expect(wrapper.find(\"#list\").children()).toHaveLength(3);\\n});\\n\\ntest(\"closest(selector)\", () => {\\n  const wrapper = mount(<MyComponent />);\\n  expect(\\n    wrapper\\n      .find(Foo)\\n      .first()\\n      .closest(\".parent\")\\n      .children()\\n  ).toHaveLength(6);\\n});\\n\\ntest(\"contains(nodeOrNodes)\", () => {\\n  const wrapper = shallow(\\n    <div>\\n      <span>Hello</span>\\n      <div>Goodbye</div>\\n      <span>Again</span>\\n    </div>\\n  );\\n\\n  expect(wrapper.contains([<span>Hello</span>, <div>Goodbye</div>])).toEqual(\\n    true\\n  );\\n\\n  expect(wrapper.contains([<span>Hello</span>, <div>World</div>])).toEqual(\\n    false\\n  );\\n});\\n\\ntest(\"containsMatchingElement(node)\", () => {\\n  const wrapper = shallow(\\n    <div>\\n      <div data-foo=\"foo\" data-bar=\"bar\">\\n        Hello\\n      </div>\\n    </div>\\n  );\\n\\n  expect(\\n    wrapper.containsMatchingElement(\\n      <div data-foo=\"foo\" data-bar=\"bar\">\\n        Hello\\n      </div>\\n    )\\n  ).toBe(true);\\n\\n  expect(wrapper.containsMatchingElement(<div data-foo=\"foo\">Hello</div>)).toBe(\\n    true\\n  );\\n\\n  expect(\\n    wrapper.containsMatchingElement(\\n      <div data-foo=\"foo\" data-bar=\"bar\" data-baz=\"baz\">\\n        Hello\\n      </div>\\n    )\\n  ).toBe(false);\\n\\n  expect(\\n    wrapper.containsMatchingElement(\\n      <div data-foo=\"foo\" data-bar=\"Hello\">\\n        Hello\\n      </div>\\n    )\\n  ).toBe(false);\\n\\n  expect(\\n    wrapper.containsMatchingElement(<div data-foo=\"foo\" data-bar=\"bar\" />)\\n  ).toBe(false);\\n});\\n\\ntest(\"containsAllMatchingElements(nodes)\", () => {\\n  const style = { fontSize: 13 };\\n  const wrapper = shallow(\\n    <div>\\n      <span className=\"foo\">Hello</span>\\n      <div style={style}>Goodbye</div>\\n      <span>Again</span>\\n    </div>\\n  );\\n\\n  expect(\\n    wrapper.containsAllMatchingElements([\\n      <span>Hello</span>,\\n      <div>Goodbye</div>\\n    ])\\n  ).toBe(true);\\n});\\n\\ntest(\"containsAnyMatchingElements(nodes)\", () => {\\n  const style = { fontSize: 13 };\\n  const wrapper = shallow(\\n    <div>\\n      <span className=\"foo\">Hello</span>\\n      <div style={style}>Goodbye</div>\\n      <span>Again</span>\\n    </div>\\n  );\\n\\n  expect(\\n    wrapper.containsAnyMatchingElements([\\n      <span>Bonjour</span>,\\n      <div>Goodbye</div>\\n    ])\\n  ).toBe(true);\\n});\\n\\ntest.skip(\"context([key])\", () => {\\n  const wrapper = shallow(<MyComponent />, { context: { foo: 10 } });\\n  expect(wrapper.context().foo).toEqual(10);\\n  expect(wrapper.context(\"foo\")).toEqual(10);\\n});\\n\\ntest(\"debug()\", () => {\\n  function NumberOfPages(props) {\\n    return <div />;\\n  }\\n\\n  function Book({ title, pages }) {\\n    return (\\n      <div>\\n        <h1 className=\"title\">{title}</h1>\\n        {pages && <NumberOfPages pages={pages} object={{ a: 1, b: 2 }} />}\\n      </div>\\n    );\\n  }\\n\\n  let wrapper = shallow(<Book title=\"Huckleberry Finn\" />);\\n  console.log(wrapper.debug());\\n\\n  wrapper = shallow(<Book title=\"Huckleberry Finn\" pages=\"633 pages\" />);\\n  console.log(wrapper.debug());\\n\\n  console.log(wrapper.debug({ ignoreProps: true }));\\n\\n  console.log(wrapper.debug({ verbose: true }));\\n});\\n\\ntest(\"equals(node)\", () => {\\n  const wrapper = mount(<MyComponent />);\\n  expect(\\n    wrapper\\n      .find(Foo)\\n      .first()\\n      .equals(<Foo anum={3} abool={false} anundefined={undefined} />)\\n  ).toBe(true);\\n});\\n\\ntest(\"every(selector)\", () => {\\n  const wrapper = shallow(\\n    <div>\\n      <div className=\"foo qoo\" />\\n      <div className=\"foo boo\" />\\n      <div className=\"foo hoo\" />\\n    </div>\\n  );\\n  expect(wrapper.find(\".foo\").every(\".foo\")).toBe(true);\\n  expect(wrapper.find(\".foo\").every(\".qoo\")).toBe(false);\\n  expect(wrapper.find(\".foo\").every(\".bar\")).toBe(false);\\n});\\n\\ntest(\"everyWhere(predicate)\", () => {\\n  const wrapper = shallow(\\n    <div>\\n      <div className=\"foo qoo\" />\\n      <div className=\"foo boo\" />\\n      <div className=\"foo hoo\" />\\n    </div>\\n  );\\n\\n  expect(wrapper.find(\".foo\").everyWhere(n => n.hasClass(\"foo\"))).toBe(true);\\n  expect(wrapper.find(\".foo\").everyWhere(n => n.hasClass(\"qoo\"))).toEqual(\\n    false\\n  );\\n  expect(wrapper.find(\".foo\").everyWhere(n => n.hasClass(\"bar\"))).toEqual(\\n    false\\n  );\\n});\\n\\ntest(\"exists([selector])\", () => {\\n  const wrapper = mount(<div className=\"some-class\" />);\\n  expect(wrapper.exists(\".some-class\")).toBe(true);\\n  expect(wrapper.find(\".other-class\").exists()).toBe(false);\\n});\\n\\ntest(\"filter(selector)\", () => {\\n  const wrapper = mount(<MyComponent />);\\n  expect(wrapper.find(Foo).filter(\"#foo-id\")).toHaveLength(1);\\n});\\n\\ntest(\"filterWhere(predicate)\", () => {\\n  const wrapper = mount(<MyComponent />);\\n  expect(wrapper.find(Foo).filterWhere(n => n.is(\"#foo-id\"))).toHaveLength(1);\\n});\\n\\ntest(\"find(selector)\", () => {\\n  const wrapper = mount(<MyComponent />);\\n  expect(wrapper.find(Foo)).toHaveLength(3);\\n});\\n\\ntest(\"findWhere(predicate)\", () => {\\n  const wrapper = mount(<MyComponent />);\\n  expect(wrapper.findWhere(n => n.is(Foo))).toHaveLength(3);\\n});\\n\\ntest(\"first()\", () => {\\n  const wrapper = mount(<MyComponent />);\\n  expect(\\n    wrapper\\n      .find(Foo)\\n      .first()\\n      .equals(<Foo anum={3} abool={false} anundefined={undefined} />)\\n  ).toBe(true);\\n});\\n\\ntest(\"forEach(fn)\", () => {\\n  const wrapper = shallow(\\n    <div>\\n      <div className=\"foo bax\" />\\n      <div className=\"foo bar\" />\\n      <div className=\"foo baz\" />\\n    </div>\\n  );\\n\\n  wrapper.find(\".foo\").forEach(node => {\\n    expect(node.hasClass(\"foo\")).toBe(true);\\n  });\\n});\\n\\ntest(\"get(index)\", () => {\\n  const wrapper = mount(<MyComponent />);\\n  expect(wrapper.find(Foo).get(0).props.anum).toBe(3);\\n});\\n\\ntest(\"getWrappingComponent()\", () => {\\n  // Ver src/__tests__/3-full-dom-rendering/2-options.test.js linha 58\\n});\\n\\ntest(\"getElement(index)\", () => {\\n  const element = (\\n    <div>\\n      <span />\\n      <span />\\n    </div>\\n  );\\n\\n  function MyComponent() {\\n    return element;\\n  }\\n\\n  const wrapper = shallow(<MyComponent />);\\n  expect(wrapper.getElement()).toEqual(element);\\n});\\n\\ntest(\"getElements(index)\", () => {\\n  const one = <span />;\\n  const two = <span />;\\n\\n  function Test() {\\n    return (\\n      <div>\\n        {one}\\n        {two}\\n      </div>\\n    );\\n  }\\n\\n  const wrapper = shallow(<Test />);\\n  expect(wrapper.find(\"span\").getElements()).toEqual([one, two]);\\n});\\n\\ntest(\"hasClass(className)\", () => {\\n  const wrapper = shallow(<MyComponent />);\\n  expect(\\n    wrapper\\n      .find(\"#root\")\\n      .childAt(0)\\n      .hasClass(\"parent\")\\n  ).toBe(true);\\n});\\n\\ntest(\"hostNodes()\", () => {\\n  const wrapper = shallow(\\n    <div>\\n      <MyComponent className=\"foo\" />\\n      <span className=\"foo\" />\\n    </div>\\n  );\\n  const twoNodes = wrapper.find(\".foo\");\\n  expect(twoNodes.hostNodes()).toHaveLength(1);\\n});\\n\\ntest(\"html()\", () => {\\n  function Foo() {\\n    return <div className=\"in-foo\" />;\\n  }\\n\\n  function Bar() {\\n    return (\\n      <div className=\"in-bar\">\\n        <Foo />\\n      </div>\\n    );\\n  }\\n\\n  let wrapper = shallow(<Bar />);\\n  expect(wrapper.html()).toBe(\\n    \\'<div class=\"in-bar\"><div class=\"in-foo\"></div></div>\\'\\n  );\\n\\n  expect(wrapper.find(Foo).html()).toBe(\\'<div class=\"in-foo\"></div>\\');\\n\\n  wrapper = shallow(\\n    <div>\\n      <b>important</b>\\n    </div>\\n  );\\n\\n  expect(wrapper.html()).toBe(\"<div><b>important</b></div>\");\\n});\\n\\ndescribe(\"instance()\", () => {\\n  function Stateless() {\\n    return <div>Stateless</div>;\\n  }\\n\\n  class Stateful extends React.Component {\\n    state = {\\n      value: true\\n    };\\n\\n    render() {\\n      return <div>Stateful</div>;\\n    }\\n  }\\n\\n  test(\"shallow wrapper instance should be null\", () => {\\n    const wrapper = shallow(<Stateless />);\\n    const instance = wrapper.instance();\\n\\n    expect(instance).toBe(null);\\n  });\\n\\n  test(\"shallow wrapper instance should not be null\", () => {\\n    const wrapper = shallow(<Stateful />);\\n    const instance = wrapper.instance();\\n\\n    expect(instance).toBeInstanceOf(Stateful);\\n    expect(instance.state.value).toBe(true);\\n  });\\n});\\n\\ntest(\"invoke(propName)\", () => {\\n  class Foo extends React.Component {\\n    state = {\\n      loaded: false\\n    };\\n\\n    loadData() {\\n      return new Promise(resolve => {\\n        this.setState({ loaded: true });\\n        resolve();\\n      });\\n    }\\n\\n    render() {\\n      return (\\n        <div>\\n          <button type=\"button\" onClick={() => this.loadData()}>\\n            Load more\\n          </button>\\n        </div>\\n      );\\n    }\\n  }\\n\\n  const wrapper = shallow(<Foo />);\\n\\n  expect(wrapper.instance().state.loaded).toBe(false);\\n\\n  return wrapper\\n    .find(\"button\")\\n    .invoke(\"onClick\")(null)\\n    .then(() => {\\n      expect(wrapper.instance().state.loaded).toBe(true);\\n    });\\n});\\n\\ntest(\"is(selector)\", () => {\\n  const wrapper = shallow(<div className=\"some-class other-class\" />);\\n  expect(wrapper.is(\".some-class\")).toBe(true);\\n});\\n\\ntest(\"isEmpty()\", () => {\\n  const wrapper = shallow(<div className=\"some-class\" />);\\n  expect(wrapper.find(\".other-class\").isEmpty()).toBe(true);\\n});\\n\\ntest(\"isEmptyRender()\", () => {\\n  function Foo() {\\n    return null;\\n  }\\n\\n  const wrapper = shallow(<Foo />);\\n  expect(wrapper.isEmptyRender()).toBe(true);\\n});\\n\\ntest(\"key()\", () => {\\n  const wrapper = shallow(\\n    <ul>\\n      {[\"foo\", \"bar\"].map(s => (\\n        <li key={s}>{s}</li>\\n      ))}\\n    </ul>\\n  ).find(\"li\");\\n\\n  expect(wrapper.at(0).key()).toBe(\"foo\");\\n  expect(wrapper.at(1).key()).toBe(\"bar\");\\n});\\n\\ntest(\"last()\", () => {\\n  const wrapper = mount(<MyComponent />);\\n  expect(\\n    wrapper\\n      .find(Foo)\\n      .last()\\n      .equals(<Foo id=\"foo-id\" abool={undefined} />)\\n  ).toBe(true);\\n});\\n\\ntest(\"map(fn)\", () => {\\n  const wrapper = shallow(\\n    <div>\\n      <div className=\"foo\">bax</div>\\n      <div className=\"foo\">bar</div>\\n      <div className=\"foo\">baz</div>\\n    </div>\\n  );\\n\\n  const texts = wrapper.find(\".foo\").map(node => node.text());\\n  expect(texts).toEqual([\"bax\", \"bar\", \"baz\"]);\\n});\\n\\ntest(\"matchesElement(node)\", () => {\\n  class MyComponent extends React.Component {\\n    constructor(props) {\\n      super(props);\\n      this.handleClick = this.handleClick.bind(this);\\n    }\\n\\n    handleClick() {\\n      // ...\\n    }\\n\\n    render() {\\n      return (\\n        <button type=\"button\" onClick={this.handleClick} className=\"foo bar\">\\n          Hello\\n        </button>\\n      );\\n    }\\n  }\\n\\n  const wrapper = shallow(<MyComponent />);\\n  expect(wrapper.matchesElement(<button>Hello</button>)).toBe(true);\\n  expect(\\n    wrapper.matchesElement(<button className=\"foo bar\">Hello</button>)\\n  ).toBe(true);\\n});\\n\\ntest(\"name()\", () => {\\n  function Foo() {\\n    return <div></div>;\\n  }\\n\\n  let wrapper = shallow(<div />);\\n  expect(wrapper.name()).toBe(\"div\");\\n\\n  function SomeWrappingComponent() {\\n    return <Foo />;\\n  }\\n  wrapper = shallow(<SomeWrappingComponent />);\\n  expect(wrapper.name()).toBe(\"Foo\");\\n\\n  Foo.displayName = \"A cool custom name\";\\n  function SomeWrappingComponent() {\\n    return <Foo />;\\n  }\\n\\n  wrapper = shallow(<SomeWrappingComponent />);\\n  expect(wrapper.name()).toBe(\"A cool custom name\");\\n});\\n\\ntest(\"not(selector)\", () => {\\n  const wrapper = shallow(<MyComponent />);\\n  expect(wrapper.find(Foo).not(\"#foo-id\")).toHaveLength(2);\\n});\\n\\ntest(\"parent()\", () => {\\n  const wrapper = shallow(<MyComponent />);\\n  expect(\\n    wrapper\\n      .find(\"Foo\")\\n      .first()\\n      .parent()\\n      .is(\"div\")\\n  ).toBe(true);\\n});\\n\\ntest(\"parents()\", () => {\\n  const wrapper = shallow(<MyComponent />);\\n  const parents = wrapper\\n    .find(\"Foo\")\\n    .first()\\n    .parents();\\n  expect(parents.at(0).is(\".parent\")).toBe(true);\\n  expect(parents.at(1).is(\"#root\")).toBe(true);\\n});\\n\\ndescribe(\"prop(key)\", () => {\\n  let wrapper;\\n\\n  beforeEach(() => {\\n    wrapper = shallow(<MyComponent />);\\n  });\\n\\n  const ValidateNumberInputComponent = props => <div></div>;\\n\\n  class MyComponent extends React.Component {\\n    constructor(...args) {\\n      super(...args);\\n\\n      this.state = {\\n        number: 0\\n      };\\n\\n      this.onValidNumberInput = this.onValidNumberInput.bind(this);\\n    }\\n\\n    onValidNumberInput(number) {\\n      if (!number || typeof number === \"number\") {\\n        this.setState({ number });\\n      }\\n    }\\n\\n    render() {\\n      const { includedProp } = this.props;\\n      const { number } = this.state;\\n      return (\\n        <div className=\"foo bar\" includedProp={includedProp}>\\n          <ValidateNumberInputComponent\\n            onChangeHandler={n => this.onValidNumberInput(n)}\\n            number={number}\\n          />\\n        </div>\\n      );\\n    }\\n  }\\n  MyComponent.propTypes = {\\n    includedProp: PropTypes.string.isRequired\\n  };\\n\\n  test(\"\", () => {\\n    const wrapper = shallow(\\n      <MyComponent includedProp=\"Success!\" excludedProp=\"I\\'m not included\" />\\n    );\\n\\n    expect(wrapper.prop(\"includedProp\")).toEqual(\"Success!\");\\n\\n    console.log(wrapper.prop(\"includedProp\"));\\n    // \"Success!\"\\n    console.log(wrapper.prop(\"excludedProp\"));\\n    // undefined\\n    console.log(wrapper.instance().props.excludedProp);\\n    // \"I\\'m not included\"\\n  });\\n\\n  test(\"valid\", () => {\\n    const validInput = 1;\\n    wrapper.find(\"ValidateNumberInputComponent\").prop(\"onChangeHandler\")(\\n      validInput\\n    );\\n    expect(wrapper.state(\"number\")).toEqual(validInput);\\n  });\\n\\n  test(\"invalid\", () => {\\n    const invalidInput = \"invalid input\";\\n    wrapper.find(\"ValidateNumberInputComponent\").prop(\"onChangeHandler\")(\\n      invalidInput\\n    );\\n    expect(wrapper.state(\"number\")).toEqual(0);\\n  });\\n});\\n\\ntest(\"props()\", () => {\\n  function MyComponent(props) {\\n    const { includedProp } = props;\\n    return (\\n      <div className=\"foo bar\" includedProp={includedProp}>\\n        Hello\\n      </div>\\n    );\\n  }\\n  MyComponent.propTypes = {\\n    includedProp: PropTypes.string.isRequired\\n  };\\n\\n  const wrapper = shallow(\\n    <MyComponent includedProp=\"Success!\" excludedProp=\"I\\'m not included\" />\\n  );\\n\\n  // Warning: .props() only returns props that are passed to the root node,\\n  // which does not include excludedProp in this example.\\n\\n  expect(wrapper.props()).toEqual({\\n    children: \"Hello\",\\n    className: \"foo bar\",\\n    includedProp: \"Success!\"\\n  });\\n});\\n\\ntest(\"reduce(fn[, initialValue])\", () => {\\n  function Bar(props) {\\n    return <div>{props.amount}</div>;\\n  }\\n\\n  function Foo() {\\n    return (\\n      <div>\\n        <Bar amount={2} />\\n        <Bar amount={4} />\\n        <Bar amount={8} />\\n      </div>\\n    );\\n  }\\n\\n  const wrapper = shallow(<Foo />);\\n\\n  const total = wrapper\\n    .find(Bar)\\n    .reduce((amount, n) => amount + n.prop(\"amount\"), 0);\\n\\n  expect(total).toBe(14);\\n});\\n\\ntest(\"reduceRight(fn[, initialValue])\", () => {\\n  function Bar(props) {\\n    return <div>{props.amount}</div>;\\n  }\\n\\n  function Foo() {\\n    return (\\n      <div>\\n        <Bar amount={2} />\\n        <Bar amount={4} />\\n        <Bar amount={8} />\\n      </div>\\n    );\\n  }\\n\\n  const wrapper = shallow(<Foo />);\\n\\n  const total = wrapper\\n    .find(Bar)\\n    .reduce((amount, n) => amount + n.prop(\"amount\"), 0);\\n\\n  expect(total).toBe(14);\\n});\\n\\ntest(\"render()\", () => {\\n  function Foo() {\\n    return <div className=\"in-foo\" />;\\n  }\\n\\n  function Bar() {\\n    return (\\n      <div className=\"in-bar\">\\n        <Foo />\\n      </div>\\n    );\\n  }\\n\\n  const wrapper = shallow(<Bar />);\\n  expect(wrapper.find(\".in-foo\")).toHaveLength(0);\\n  expect(\\n    wrapper\\n      .find(Foo)\\n      .render()\\n      .filter(\".in-foo\")\\n  ).toHaveLength(1);\\n});\\n\\ntest(\"renderProp(key)\", () => {\\n  class Mouse extends React.Component {\\n    constructor() {\\n      super();\\n      this.state = { x: 0, y: 0 };\\n    }\\n\\n    render() {\\n      const { render } = this.props;\\n      return (\\n        <div\\n          style={{ height: \"100%\" }}\\n          onMouseMove={event => {\\n            this.setState({\\n              x: event.clientX,\\n              y: event.clientY\\n            });\\n          }}\\n        >\\n          {render(this.state)}\\n        </div>\\n      );\\n    }\\n  }\\n\\n  Mouse.propTypes = {\\n    render: PropTypes.func.isRequired\\n  };\\n\\n  const App = () => (\\n    <div style={{ height: \"100%\" }}>\\n      <Mouse\\n        render={(x = 0, y = 0) => (\\n          <h1>\\n            The mouse position is ({x}, {y})\\n          </h1>\\n        )}\\n      />\\n    </div>\\n  );\\n\\n  let wrapper = shallow(<App />)\\n    .find(Mouse)\\n    .renderProp(\"render\")();\\n\\n  expect(wrapper.equals(<h1>The mouse position is (0, 0)</h1>)).toEqual(true);\\n\\n  wrapper = shallow(<App />)\\n    .find(Mouse)\\n    .renderProp(\"render\")(10, 20);\\n\\n  expect(wrapper).toMatchInlineSnapshot(\\'\\n    <h1>\\n      The mouse position is (\\n      10\\n      , \\n      20\\n      )\\n    </h1>\\n  \\');\\n\\n  expect(wrapper.equals(<h1>The mouse position is (10, 20)</h1>)).toEqual(true);\\n});\\n\\ntest(\"setContext(context)\", () => {\\n  function SimpleComponent(props, context) {\\n    const { name } = context;\\n    return <div>{name}</div>;\\n  }\\n\\n  SimpleComponent.contextTypes = {\\n    name: PropTypes.string\\n  };\\n\\n  const context = { name: \"foo\" };\\n  const wrapper = shallow(<SimpleComponent />, { context });\\n  expect(wrapper.text()).toBe(\"foo\");\\n  wrapper.setContext({ name: \"bar\" });\\n  expect(wrapper.text()).toBe(\"bar\");\\n  wrapper.setContext({ name: \"baz\" });\\n  expect(wrapper.text()).toBe(\"baz\");\\n});\\n\\ntest(\"setProps(nextProps)\", () => {\\n  class Foo extends React.Component {\\n    componentWillReceiveProps(props) {\\n      // ...\\n    }\\n\\n    render() {\\n      return <div className={this.props.name} />;\\n    }\\n  }\\n\\n  Foo.propTypes = {\\n    name: PropTypes.string.isRequired\\n  };\\n\\n  let wrapper = shallow(<Foo name=\"foo\" />);\\n  expect(wrapper.find(\".foo\")).toHaveLength(1);\\n  expect(wrapper.find(\".bar\")).toHaveLength(0);\\n  wrapper.setProps({ name: \"bar\" });\\n  expect(wrapper.find(\".foo\")).toHaveLength(0);\\n  expect(wrapper.find(\".bar\")).toHaveLength(1);\\n\\n  wrapper = shallow(<Foo name=\"foo\" />);\\n  const spy = jest.spyOn(wrapper.instance(), \"componentWillReceiveProps\");\\n  expect(spy).not.toHaveBeenCalled();\\n  wrapper.setProps({ name: \"bar\" });\\n  expect(spy).toHaveBeenCalled();\\n});\\n\\ntest(\"setState(nextState[, callback])\", () => {\\n  class Foo extends React.Component {\\n    constructor(props) {\\n      super(props);\\n      this.state = { name: \"foo\" };\\n    }\\n\\n    render() {\\n      const { name } = this.state;\\n      return <div className={name} />;\\n    }\\n  }\\n\\n  const wrapper = shallow(<Foo />);\\n  expect(wrapper.find(\".foo\")).toHaveLength(1);\\n  expect(wrapper.find(\".bar\")).toHaveLength(0);\\n  wrapper.setState({ name: \"bar\" });\\n  expect(wrapper.find(\".foo\")).toHaveLength(0);\\n  expect(wrapper.find(\".bar\")).toHaveLength(1);\\n});\\n\\ntest(\"simulate(event[, data])\", () => {\\n  class Foo extends React.Component {\\n    constructor(props) {\\n      super(props);\\n      this.state = { count: 0 };\\n    }\\n\\n    render() {\\n      const { count } = this.state;\\n      return (\\n        <div>\\n          <div className={\\'clicks-\\'$\\'{count}\\'}>{count} clicks</div>\\n          <a\\n            href=\"url\"\\n            onClick={() => {\\n              this.setState({ count: count + 1 });\\n            }}\\n          >\\n            Increment\\n          </a>\\n        </div>\\n      );\\n    }\\n  }\\n\\n  const wrapper = shallow(<Foo />);\\n\\n  expect(wrapper.find(\".clicks-0\").length).toBe(1);\\n  wrapper.find(\"a\").simulate(\"click\");\\n  expect(wrapper.find(\".clicks-1\").length).toBe(1);\\n});\\n\\ntest(\"simulateError(error)\", () => {\\n  function Something() {\\n    // this is just a placeholder\\n    return null;\\n  }\\n\\n  class ErrorBoundary extends React.Component {\\n    static getDerivedStateFromError(error) {\\n      return {\\n        hasError: true\\n      };\\n    }\\n\\n    constructor(props) {\\n      super(props);\\n      this.state = { hasError: false };\\n    }\\n\\n    componentDidCatch(error, info) {\\n      const { spy } = this.props;\\n      spy(error, info);\\n    }\\n\\n    render() {\\n      const { children } = this.props;\\n      const { hasError } = this.state;\\n      return <React.Fragment>{hasError ? \"Error\" : children}</React.Fragment>;\\n    }\\n  }\\n  ErrorBoundary.propTypes = {\\n    children: PropTypes.node.isRequired,\\n    spy: PropTypes.func.isRequired\\n  };\\n\\n  const spy = jest.fn();\\n  const wrapper = shallow(\\n    <ErrorBoundary spy={spy}>\\n      <Something />\\n    </ErrorBoundary>\\n  );\\n  const error = new Error(\"hi!\");\\n  wrapper.find(Something).simulateError(error);\\n\\n  expect(wrapper.state()).toHaveProperty(\"hasError\", true);\\n  expect(spy).toHaveBeenCalledTimes(1);\\n  expect(spy.mock.calls[0]).toEqual([\\n    error,\\n    {\\n      componentStack: \\'\\n    in Something (created by Fragment)\\n    in Fragment (created by ErrorBoundary)\\n    in ErrorBoundary (created by WrapperComponent)\\n    in WrapperComponent\\'\\n    }\\n  ]);\\n});\\n\\ntest(\"slice([begin[, end]])\", () => {\\n  let wrapper = shallow(\\n    <div>\\n      <div className=\"foo bax\" />\\n      <div className=\"foo bar\" />\\n      <div className=\"foo baz\" />\\n    </div>\\n  );\\n\\n  expect(wrapper.find(\".foo\").slice(1)).toHaveLength(2);\\n\\n  expect(\\n    wrapper\\n      .find(\".foo\")\\n      .slice(1)\\n      .at(0)\\n      .hasClass(\"bar\")\\n  ).toBe(true);\\n\\n  expect(\\n    wrapper\\n      .find(\".foo\")\\n      .slice(1)\\n      .at(1)\\n      .hasClass(\"baz\")\\n  ).toBe(true);\\n\\n  wrapper = shallow(\\n    <div>\\n      <div className=\"foo bax\" />\\n      <div className=\"foo bar\" />\\n      <div className=\"foo baz\" />\\n    </div>\\n  );\\n\\n  expect(wrapper.find(\".foo\").slice(1, 2)).toHaveLength(1);\\n\\n  expect(\\n    wrapper\\n      .find(\".foo\")\\n      .slice(1, 2)\\n      .at(0)\\n      .hasClass(\"bar\")\\n  ).toBe(true);\\n});\\n\\ntest(\"some(selector)\", () => {\\n  const wrapper = shallow(\\n    <div>\\n      <div className=\"foo qoo\" />\\n      <div className=\"foo boo\" />\\n      <div className=\"foo hoo\" />\\n    </div>\\n  );\\n\\n  expect(wrapper.find(\".foo\").some(\".qoo\")).toBe(true);\\n  expect(wrapper.find(\".foo\").some(\".foo\")).toBe(true);\\n  expect(wrapper.find(\".foo\").some(\".bar\")).toBe(false);\\n});\\n\\ntest(\"someWhere(predicate)\", () => {\\n  const wrapper = shallow(\\n    <div>\\n      <div className=\"foo qoo\" />\\n      <div className=\"foo boo\" />\\n      <div className=\"foo hoo\" />\\n    </div>\\n  );\\n  expect(wrapper.find(\".foo\").someWhere(n => n.hasClass(\"qoo\"))).toBe(true);\\n  expect(wrapper.find(\".foo\").someWhere(n => n.hasClass(\"foo\"))).toBe(true);\\n  expect(wrapper.find(\".foo\").someWhere(n => n.hasClass(\"bar\"))).toBe(false);\\n});\\n\\ntest(\"state([key])\", () => {\\n  class StatefulComponent extends React.Component {\\n    state = {\\n      foo: 10\\n    };\\n\\n    render() {\\n      return <div>{this.state.foo}</div>;\\n    }\\n  }\\n\\n  const wrapper = shallow(<StatefulComponent />);\\n  expect(wrapper.state().foo).toBe(10);\\n  expect(wrapper.state(\"foo\")).toBe(10);\\n});\\n\\ntest(\"tap(intercepter)\", () => {\\n  shallow(\\n    <ul>\\n      <li>xxx</li>\\n      <li>yyy</li>\\n      <li>zzz</li>\\n    </ul>\\n  )\\n    .find(\"li\")\\n    .tap(n => console.log(n.debug()))\\n    .map(n => n.text());\\n});\\n\\ntest(\"text()\", () => {\\n  let wrapper = shallow(\\n    <div>\\n      <b>important</b>\\n    </div>\\n  );\\n  expect(wrapper.text()).toEqual(\"important\");\\n\\n  wrapper = shallow(\\n    <div>\\n      <Foo />\\n      <b>important</b>\\n    </div>\\n  );\\n  expect(wrapper.text()).toEqual(\"<Foo />important\");\\n});\\n\\ndescribe(\"type()\", () => {\\n  test(\"div\", () => {\\n    function Foo() {\\n      return <div />;\\n    }\\n\\n    const wrapper = shallow(<Foo />);\\n    expect(wrapper.type()).toBe(\"div\");\\n  });\\n\\n  test(\"button\", () => {\\n    function Foo() {\\n      return (\\n        <div>\\n          <button type=\"button\" className=\"btn\">\\n            Button\\n          </button>\\n        </div>\\n      );\\n    }\\n\\n    const wrapper = shallow(<Foo />);\\n    expect(wrapper.find(\".btn\").type()).toEqual(\"button\");\\n  });\\n\\n  test(\"Bar\", () => {\\n    function Bar() {\\n      return <Foo />;\\n    }\\n\\n    const wrapper = shallow(<Bar />);\\n    expect(wrapper.type()).toBe(Foo);\\n  });\\n\\n  test(\"Null\", () => {\\n    function Null() {\\n      return null;\\n    }\\n\\n    const wrapper = shallow(<Null />);\\n    expect(wrapper.type()).toBeNull();\\n  });\\n});\\n\\ntest.skip(\"update()\", () => {\\n  class ImpureRender extends React.Component {\\n    constructor(props) {\\n      super(props);\\n      this.count = 0;\\n    }\\n\\n    render() {\\n      this.count += 1;\\n      return <div>{this.count}</div>;\\n    }\\n  }\\n\\n  const wrapper = mount(<ImpureRender />);\\n  expect(wrapper.text()).toBe(\"0\");\\n  wrapper.update();\\n  expect(wrapper.text()).toBe(\"1\");\\n});\\n'.trim(),y=function(n){function e(){return Object(o.a)(this,e),Object(r.a)(this,Object(s.a)(e).apply(this,arguments))}return Object(p.a)(e,n),Object(a.a)(e,[{key:\"componentDidMount\",value:function(){setTimeout((function(){return d.a.highlightAll()}),0)}},{key:\"render\",value:function(){var n=this.props.classes;return l.a.createElement(u.a,{container:!0},l.a.createElement(u.a,{item:!0,xs:2},l.a.createElement(m.a,{className:n.paper},l.a.createElement(\"h4\",null,l.a.createElement(w.a,null)))),l.a.createElement(u.a,{item:!0,xs:10},l.a.createElement(m.a,{className:n.paper},l.a.createElement(f.a,null,l.a.createElement(\"h3\",null,\"6-shallow-and-full-dom-methods\"),l.a.createElement(\"div\",{style:x},l.a.createElement(v.a,{code:b,language:\"js\",plugins:[\"line-numbers\"]}))))))}}]),e}(i.Component);e.default=Object(h.a)((function(n){return{paper:{margin:n.spacing(1),padding:n.spacing(1)},smMargin:{margin:n.spacing(1)},actionDiv:{textAlign:\"center\"}}}))(y)}}]);","extractedComments":[]}