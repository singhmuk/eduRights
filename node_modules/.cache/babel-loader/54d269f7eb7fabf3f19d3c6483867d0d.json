{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import\"../../ReactJs/styles.css\";import Sidebar from\"../sidebar\";import PrismCode from\"../../ReactJs/prismCode\";import EventLoop from\"../../../assets/imgs.svg\";var titles={backgroundColor:\"#F0F8FF\",padding:\"1px\",fontSize:\"16px\"};var redesign={height:350,width:600};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var undeclaredVar=\"\\nvar a\\nconsole.log('Undefined variables', a)\\nconsole.log('Undeclared variables', b)\".trim();var varConst=\"\\nvar obj = Object.freeze({ name: 'Mukesh' });\\nobj.name = 'Rakesh';\\n\\nconsole.log(obj.name);                                                  \\n\".trim();var iifes=\"\\nvar x = 23; \\n  (function(){   \\n      var x = 43;   \\n      (function random(){     \\n          x++;     \\n          console.log(x);     \\n          var x = 21;   \\n      })(); \\n  })();                                                           \\n\".trim();var spreadRests=\"\\nfunction obj(name) {\\n  this.name = name;\\n}\\n\\nobj.prototype.greet = function() {\\n  console.log('hello, '$'{this.name}');\\n};\\n\\nconst obj1 = new obj('John');\\nconst obj2 = new obj('Jane');\\n\\nobj1.greet(); \\nobj2.greet();\\n\".trim();var spreadRest=\"\\n//Rest\\nfunction add(a,b,c,...other){\\n  console.log(other);\\n  console.log(other[0]);\\n  return a+b+c;\\n}\\n\\nconsole.log(add(3,4,5,1,2));\\n\\n\\n//2\\nconst num = [1,2,3,4,5,6]\\nfunction addSpread(num, num2, num3){\\n  console.log(num, num2, num3);\\n}\\n\\n// console.log(addSpread(num[0], num[1], num[2]));\\naddSpread(...num);\\naddSpread(num);\\n\".trim();var currying=\"\\n//clousers implements in curry\\nfunction sum(a){\\n  return function(b){\\n    return function(c){\\n      return a+b+c;\\n    }\\n  }\\n}\\n\\nlet sumcall = sum(2)(3)(4);\\nconsole.log(sumcall)\\n\\n\\n//2\\nvar prism = l => w => h => l * w * h;\\nconsole.log(prism(2)(3)(5))\\n\".trim();var generator=\"\\n  function* generator_function() {\\n      yield 1;\\n      yield 2;\\n    }\\n    \\n   let generator = generator_function();\\n   \\n   console.log(generator.next().value);\\n   console.log(generator.return(22).value);\\n   console.log(generator.next().value);\\n   \\n   generator = generator_function();\\n   let iterable = generator[Symbol.iterator]();\\n   \\n   console.log(iterable.next().value);\\n   console.log(iterable.next().done);\\n \".trim();var yields=\"\\nfunction* generator_function_1(){\\n  yield 2;\\n  yield 3;\\n}\\n\\nfunction* generator_function_2() {\\n   yield 1;\\n   yield* generator_function_1();\\n   yield* [4, 5];\\n }\\n\\nvar generator = generator_function_2();\\nconsole.log(generator.next().value);\\nconsole.log(generator.next().value);\".trim();var stricts=\"\\n'use strict';\\ndelete Object.prototype;                                                                    // throws a TypeError.\\n\\n\\n//2\\nfunction sum(a, a, c) {                                                                     // syntax error.\\n  'use strict';\\n  return a + a + c;                                                                  // wrong if this code ran.\\n}\\n\".trim();var eventLoop=\"\\nconsole.log(\\\"Start\\\");\\n\\n// Asynchronous setTimeout function\\nsetTimeout(function() {\\n  console.log(\\\"Timeout callback executed\\\");\\n}, 1000);\\n\\n// Synchronous loop\\nfor (let i = 0; i < 5; i++) {\\n  console.log(\\\"Loop iteration:\\\", i);\\n}\\n\\nconsole.log(\\\"End\\\");\\n \".trim();var security=\"\\n//async\\n<script async src=\\\"js/script2.js\\\"></script>\\n<script async src=\\\"js/script3.js\\\"></script>\\n\\n\\n//defer\\n<script defer src=\\\"js/script2.js\\\"></script>\\n<script defer src=\\\"js/script3.js\\\"></script>\\n\".trim();var proxies=\"\\nlet handler = {\\n  get: function(target, name) {\\n    return name in target? target[name] : 42\\n  }\\n}\\n\\nlet p = new Proxy({}, handler)\\np.a = 1\\nconsole.log(p.a, p.b) \".trim();var features=\"import * as Module from './modules/module.js';\".trim();var exportsing=\"export { name, draw, reportArea, reportPerimeter };\".trim();var loading=\"\\nimport('/index.js')\\n  .then((module) => {\\n    // Do something with the module.\\n  });\\n\".trim();var debouncing=\"\\n<input typt=\\\"text\\\" onkeyup=\\\"betterDebouncing()\\\" />\\n\\n\\n---------------------------------------------js-------------------\\n\\nlet counter = 0\\nconst getData = () => {\\n  fetch(\\\"https://jsonplaceholder.typicode.com/users\\\")\\n            .then(res => res.json()) \\n            .then(responseData => {\\n                console.log('dddd',responseData,\\\"---\\\",counter++);\\n            });\\n}\\n\\nconst debounced = function (fn ,d){\\n  let timer;\\n  return function(){\\n    let context = this,\\n    args = arguments;\\n    clearTimeout(timer);\\n    timer = setTimeout(() => {\\n      getData.apply(context, args)\\n    }, d)\\n  }\\n}\\n\\nconst betterDebouncing = debounced(getData, 300);\\n\".trim();var throttle=\"\\nconst loggerFunc = () => {\\n  console.count(\\\"Throttled Function\\\");\\n}\\n\\nconst throttle = (fn, limit) => {\\n  let flag = true;\\n  return function(){\\n    let context = this;\\n    let args = arguments;\\n    if(flag){\\n      fn.apply(context, args);\\n      flag = false;\\n      setTimeout(() => {\\n        flag=true;\\n      }, limit);\\n    }\\n  }\\n}\\n\\nconst betterLoggerFunction = throttle(loggerFunc, 1000);\\n\\nwindow.addEventListener(\\\"resize\\\",betterLoggerFunction);\\n\\n// This is the normal Function without Throttling\\nconst normalFunc = () => {\\n  console.count(\\\"Normal Function\\\");\\n}\\n\\nwindow.addEventListener(\\\"resize\\\",normalFunc);\\n\".trim();var execution=\"\\nfunction foo() { }                                                             // function statement.\\n\\n\\nvar foo = function() { }                                                       // function expression.\\n\".trim();var code=\"\\nconst outerFun = (a) => {\\n  let b=2;\\n  const innerFun = () => {\\n      let sum = a+b;\\n      console.log('sum is',sum)\\n    }\\n  innerFun();\\n}\\n\\nouterFun(1);\\n \".trim();var variables=\"\\n//1. Using an Object Literal\\nConst emp={id:102,name:\\\"Shyam Kumar\\\",salary:40000}\\n\\n\\n//2. Constructor functions\\nfunction Person(name, age) {\\n  this.name = name;\\n  this.age = age;\\n}\\n\\nconst john = new Person('John', 30);\\n\\n\\n//3. ES6 Classes\\nclass Person {\\n  constructor(name, age) {\\n    this.name = name;\\n  }\\n}\\n\\nconst john = new Person('John');\\n\\n\\n//4. Object.create()\\nconst obj = Object.create(emp);\\n\".trim();var proCallbacks=\"\\nconst mocks=[\\n  {name:'A', Profession:'SE'},\\n  {name:'B', Profession:'SE'},\\n]\\n\\nfunction fun(){\\n  setTimeout(()=>{\\n    let result='';\\n    mocks.forEach(data=>(\\n      result += data.name+\\\",\\\"\\n    ))\\n    console.log(result)\\n  },1000)\\n}\\n\\nfunction main(newdata){\\n  setTimeout(()=>{\\n    mocks.push(newdata)\\n  },2000);\\n}\\n\\nfun();\\nmain({name:'C', Profession:'Developer'})\\n\\n\\n//Solve by callback.\\nfunction fun(){\\n  setTimeout(()=>{\\n    let result='';\\n    mocks.forEach(data=>(\\n      result += data.name+\\\",\\\"\\n    ))\\n    console.log(result)\\n  },1000)\\n}\\n\\nfunction main(newdata, cb){\\n  setTimeout(()=>{\\n    mocks.push(newdata)\\n    cb();\\n  },2000);\\n}\\n\\nmain({name:'C', Profession:'Developer'}, fun)\\n\".trim();var promisePro=\"\\nconst mocks=[\\n  {name:'A', Profession:'SE'},\\n  {name:'B', Profession:'SE'},\\n]\\n\\nfunction fun(){\\n  setTimeout(()=>{\\n    let result='';\\n    mocks.forEach(data=>(\\n      result += data.name+\\\",\\\"\\n    ))\\n    console.log(result)\\n  },1000)\\n}\\n\\nfunction main(newdata){\\n  return new Promise((resolve, reject) => {\\n    setTimeout(()=>{\\n      mocks.push(newdata)\\n      let err=false;\\n      if(!err){\\n        resolve();\\n      }else{\\n        reject('Error ocuur')\\n      }\\n    },2000);\\n  })\\n  \\n}\\n\\nmain({name:'C', Profession:'Developer'}).then(fun).catch(err=>console.log(err));\\n\".trim();var callbackJs=\"\\nconst mocks=[\\n  {name:'A', Profession:'SE'},\\n  {name:'B', Profession:'SE'},\\n]\\n\\nfunction fun(){\\n  setTimeout(()=>{\\n    let result='';\\n    mocks.forEach(data=>(\\n      result += data.name+\\\",\\\"\\n    ))\\n    console.log(result)\\n  },1000)\\n}\\n\\nfunction main(newdata){\\n  return new Promise((resolve, reject) => {\\n    setTimeout(()=>{\\n      mocks.push(newdata)\\n      let err=false;\\n      if(!err){\\n        resolve();\\n      }else{\\n        reject('Error ocuur')\\n      }\\n    },2000);\\n  })\\n  \\n}\\n\\nasync function demo(){\\n  await main({name:'C', Profession:'Developer'});\\n  fun()\\n}\\n\\ndemo();\\n\".trim();var chaineds=\"\\n //Promises Chaning\\n new Promise((resolve, reject) => {\\n  setTimeout(() => resolve(1), 1000);\\n    })\\n    \\n.then((result) => {\\n    alert(result); return result * 3;\\n    })\\n.then((result) => {\\n    alert(result); return result * 4;\\n    })\\n.then((result) => {\\n    alert(result); return result * 6;\\n});\\n\".trim();var thisKey=\"\\nconst person = {\\n  name: 'John',\\n  greet() {\\n    console.log(this.name);\\n  }\\n};\\n\\nperson.greet(); \\n\".trim();var thisKey2=\"\\nfunction greet() {\\n  console.log(this.name);\\n}\\n\\nconst person = {\\n  name: 'John'\\n};\\n\\nconst boundGreet = greet.bind(person);\\nboundGreet();\".trim();var thisKey3=\"\\n<button id=\\\"myButton\\\">Click me</button>\\n\\n<script>\\n  const button = document.querySelector('#myButton');\\n  button.addEventListener('click', function() {\\n    console.log(this === button); // true\\n  });\\n</script>\\n\".trim();var bind_2=\"\\nconst obj={\\n  name:'Krishana',\\n  address:'Gokul',\\n}\\n\\nfunction show(){\\n  console.log(this);\\n}\\n\\nconst newObj=show.bind(obj);\\nnewObj();\\n\".trim();var calls=\"\\n//call use to borrow function.\\nconst obj={\\n  name:'Krishana',\\n  address:'Gokul',\\n}\\n\\nconst obj2={\\n  name:'Ram',\\n  address:'Gokul',\\n}\\n\\nfunction show(){\\n  console.log(this.name);\\n}\\n\\nshow.call(obj);\\nshow.call(obj2);\\n\".trim();var applys=\"\\nconst obj={\\n  name:'Krishana',\\n  address:'Gokul',\\n}\\n\\nconst obj2={\\n  name:'Ram',\\n  address:'Gokul',\\n}\\n\\nfunction show(state,country){\\n  console.log(this.name,\\\"---\\\",state,'---',country);\\n}\\n\\nshow.apply(obj, [\\\"Delhi\\\", \\\"India\\\"]);\\nshow.apply(obj2, [\\\"Ranchi\\\", \\\"India\\\"]);\\n\".trim();var convertObj=\"\\nlet obj = { id: \\\"1\\\", name: \\\"Test User\\\", age: \\\"25\\\", profession: \\\"Developer\\\" };\\n\\n\\nconsole.log(Object.keys(obj));                     //Convert the keys to Array using - Object.keys().\\n\\nconsole.log(Object.values(obj));                   //Converts the Values to Array using - Object.values().\\n\\nconsole.log(Object.entries(obj));                  //Converts both keys and values using - Object.entries().\\n\".trim();var convertArr=\"\\nlet arr = [\\\"1\\\", \\\"Test User\\\", \\\"25\\\", \\\"Developer\\\"];\\nlet arr1 = [\\n  [\\\"id\\\", \\\"1\\\"],\\n  [\\\"name\\\", \\\"Test User\\\"],\\n  [\\\"age\\\", \\\"25\\\"],\\n  [\\\"profession\\\", \\\"Developer\\\"],\\n];\\n\\nconsole.log(Object.assign({}, arr));\\nconsole.log({ ...arr });\\nconsole.log(Object.fromEntries(arr1));\".trim();var shallow=\"\\n\\n\".trim();var argumentsk=\"\\nfunction outer() {\\n  const innerArrow = () => {\\n    console.log(arguments);\\n  };\\n\\n  innerArrow(1, 2, 3);\\n}\\n\\nouter(4, 5, 6);\\n\".trim();var firstClass=\"\\nfunction fun(){\\n  return 'Argument';\\n}\\n\\nfunction main(cb, name){\\n  console.log(cb(), name)\\n}\\n\\nmain(fun, 'Krishans')\\n\\n\\n//2\\nfunction main(){\\n  return function fun(){\\n    console.log('Return bt another function.');\\n  }\\n}\\n\\nconst obj = main();\\nobj();\\n\\n\\n//3\\nconst main = function (){\\n  console.log('Assigned as a value.');\\n}\\n\\nmain();\\n\".trim();var hoFunction=\"\\nfunction fun(arr, cal) {\\n  const result = [];\\n\\n  for (let i = 0; i < arr.length; i++) {\\n    result.push(cal(arr[i]));\\n  }\\n\\n  return result;\\n}\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\nconst double = fun(numbers, (num) => num * 2);\\nconst square = fun(numbers, (num) => num ** 2);\\n\\nconsole.log(double); \\nconsole.log(square); \\n\".trim();var IntroJs=/*#__PURE__*/function(_Component){_inherits(IntroJs,_Component);function IntroJs(){_classCallCheck(this,IntroJs);return _possibleConstructorReturn(this,_getPrototypeOf(IntroJs).apply(this,arguments));}_createClass(IntroJs,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. What are JavaScript Data Types?\"),\"Default javaScript is Synchronous.\",React.createElement(\"br\",null),React.createElement(\"i\",null,\"In JavaScript null is \",React.createElement(\"b\",null,\"nothing\"),\". It is supposed to be something that\",React.createElement(\"b\",null,\" doesn't exist\"),\". In JavaScript, the data type of null is an \",React.createElement(\"b\",null,\"object\"),\".\"),React.createElement(\"br\",null),React.createElement(\"ol\",null,React.createElement(\"li\",null,\"Number\"),React.createElement(\"li\",null,\"String\"),React.createElement(\"li\",null,\"Boolean\"),React.createElement(\"li\",null,\"Object\"),React.createElement(\"li\",null,\"Undefined\"),React.createElement(\"li\",null,\"Null\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"What is first class object in javascript\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Can be passed as an argument.\"),React.createElement(\"li\",null,\"Can be return by another function.\"),React.createElement(\"li\",null,\"Can be assigned as a value to a variable, object or array.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:firstClass,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. What are undeclared and undefined variables?\"),React.createElement(\"i\",null,React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Undeclared variables: \"),\" Are those that do not exist in a program and are not declared. If the program tries to read the value of an undeclared variable, then a runtime error is encountered.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Undefined variables: \"),\" are those that are declared in the program but have not been given any value. If the program tries to read the value of an undefined variable, an undefined value is returned.\"))),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:undeclaredVar,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Objects\"),\"An object is a collection of related data/ functionality (properties and methods).\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"JavaScript Objects?\"),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"A javaScript object is an entity having state and behavior.\"),React.createElement(\"li\",null,\"JavaScript is an object-based language. Everything is an object in JavaScript.\"),React.createElement(\"li\",null,\"JavaScript is template based.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"i\",null,\"There are 4 ways to create objects.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:variables,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. How to convert an Object \",\" into an Array [] \"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:convertObj,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. How to convert an Array [] to Object \"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:convertArr,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"7. Difference between local storage, cookies and Session.\"),\"There are three common ways to store data on the client-side: local storage, cookies, and session storage. Each has its own advantages and disadvantages, and the choice of which to use depends on the specific needs of the application.\",React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Local Storage: \"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Local storage is a web storage API in modern web browsers.\"),React.createElement(\"li\",null,\"Data stored in it is not automatically sent to the server with HTTP requests.\"),React.createElement(\"li\",null,\"Local storage is a key-value store that allows data to be stored on the client-side in a persistent manner. The data stored in local storage is accessible even after the browser is closed, and can be accessed by any page in the same domain. Local storage is a good option for storing large amounts of data that need to persist between sessions.\"))),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Cookies: \"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Sent data to the server with every HTTP request to provide information about the client's state and identity. \"),React.createElement(\"li\",null,\"Cookies are small text files that are stored on the client-side by the browser. Cookies can be used to store small amounts of data, such as user preferences or authentication tokens. Cookies are accessible by any page in the same domain and can be set to expire after a certain period of time.\"))),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Session Storage: \"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Sessions store data on the server-side and use a session identifier (usually stored in a cookie) to associate the client's request with the corresponding session data on the server. Unlike cookies and local storage, session data is stored on the server, and only a session identifier is stored on the client-side. \"),React.createElement(\"li\",null,\"Session storage is similar to local storage, but the data stored in session storage is only accessible within the current browser session. Once the browser is closed, the data is deleted. Session storage is a good option for storing data that needs to be accessible across multiple pages within the same session, but does not need to persist between sessions.\")))),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:shallow,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"8. Difference between Object.freeze() vs const\"),React.createElement(\"b\",null,\"const\"),\" and \",React.createElement(\"b\",null,\"Object.freeze\"),\" are two completely different things.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"i\",null,React.createElement(\"ul\",null,React.createElement(\"li\",null,\"const applies to bindings \",React.createElement(\"b\",null,\"variables\"),\". It creates an immutable binding.\"),React.createElement(\"li\",null,\"Object.freeze works on values. It makes an object immutable, i.e. cannot change its properties.\"))),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:varConst,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"9. Why do we use arrow function.\"),React.createElement(\"p\",null,React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Implicit returns: \"),\"If the body of an arrow function consists of a single expression, that expression is automatically returned.\",\" \"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Lexical this binding: \"),\"Inherit the this value from the enclosing context in which they are defined.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"No binding of arguments: \"),\" Arrow functions do not have their own arguments object. Instead, they inherit the arguments object from the enclosing scope. This makes it easier to access the arguments passed to the surrounding function without the need for the arguments keyword.\"),React.createElement(\"br\",null)),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:argumentsk,language:\"js\",plugins:[\"line-numbers\"]}))),React.createElement(\"h3\",null,\"10. Object prototypes\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Prototypes are the mechanism by which\",\" \",React.createElement(\"b\",null,\"JavaScript objects inherit features\"),\" from one another.\"),React.createElement(\"li\",null,\"Every object in JavaScript has a prototype, which is like a blueprint or a template that defines the shared properties and methods for objects of a particular type. When you access a property or method on an object, JavaScript first looks for it in the object itself. If it doesn't find it there, it continues searching for it in the object's prototype, and so on, forming a chain known as the prototype chain.\"),React.createElement(\"li\",null,\"By definition, null has no prototype, and acts as the final link in this prototype chain.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:spreadRests,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"11. Spread & Rest Operator\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Rest & Spread both use in object and array.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Rest: \"),\"The rest operator is used to put the rest of some specific user-supplied values into a JavaScript array.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Spread: \"),\"Allows us to quickly copy all or part of an existing array or object into another array or object.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:spreadRest,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"12. Hosting\"),\"Hoisting is JavaScript's default behavior of moving declarations to the top.\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Hosting in JavaScript refers to the behavior of how variable and function declarations are processed by the JavaScript engine. It allows you to access and use variables and functions before they are physically declared in your code.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"In JavaScript, when the JavaScript engine executes your code, it goes through two main phases: the creation phase and the execution phase.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"During the creation phase, the JavaScript engine sets up the environment for your code execution. One important step in this phase is the process of hoisting. Hoisting moves variable and function declarations to the top of their respective scopes, allowing you to use them before they appear in the code.\")),React.createElement(\"br\",null),\"Hosting mainly relate to Memory management.\",React.createElement(\"br\",null),React.createElement(\"h3\",null,\"13. What are closures? Explain with example.\"),React.createElement(\"b\",null,\"scope: \"),\" Local, Global, Lexical.\",React.createElement(\"br\",null),\"In normal programming when we call function after than any varriables or parameter declared in that function we can't use again. But with help of closers we can use function variables after function excuite in lexicalScop.\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"A closure is the combination of a function bundled together with references to its surrounding state (lexical environment).\"),React.createElement(\"li\",null,\"Or a closure gives access to an outer function\\u2019s scope from an inner function.\"),React.createElement(\"li\",null,\"In JavaScript, closures are created every time a function is created, at function creation time.\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:code,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Closers\"),React.createElement(\"br\",null),\"Clouser is a function bundled together in a lexical scope.\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Uses: Module Design Pattern\"),React.createElement(\"li\",null,\"Currying\"),React.createElement(\"li\",null,\"Functions like once\"),React.createElement(\"li\",null,\"Memoize\"),React.createElement(\"li\",null,\"Maintaining state in async world\"),React.createElement(\"li\",null,\"setTimeouts\"),React.createElement(\"li\",null,\"Iterators\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"14. Function Express & Function Statement\"),\"function expressions and function statements are very similar in JavaScript, the difference is how the browser loads them into the execution context.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:execution,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"p\",null,React.createElement(\"b\",null,\"function statement: \"),\" loads before any code is executed. This behavior of function statements is called hoisting, which allows a function to be used before it is defined.\"),React.createElement(\"p\",null,React.createElement(\"b\",null,\"function expression: \"),\"associates a value with a variable, just like any other assignment statement. function expressions load only when the interpreter reaches the definition of the function.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Difference between Function Statement and Function Expression is the \\\"Hosting\\\".\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"15. What is 'this' keyword in JavaScript?\"),\"this refers to the current execution context. The value of this depends on how a function is called.\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Global context: \"),\"In the global context, this refers to the global object (e.g., window in a web browser).\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Object context: \"),\"In the context of an object method, this refers to the object itself\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:thisKey,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Function context: \"),\"In the context of a regular function, this refers to the global object by default, but it can be bound to a different value using bind, call, or apply\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:thisKey2,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Event context: \"),\" In the context of an event handler function, this refers to the element that triggered the event:\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:thisKey3,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null)),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"16. Bind()\"),\"The bind() is used to create a new function with a specified this value and, optionally, initial arguments. It allows you to control the context in which a function is invoked.\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:bind_2,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"17. call(), apply()\"),React.createElement(\"b\",null,\"Call: \"),\"Method is a built-in method in JavaScript that is used to call a function with a specified this value and arguments provided individually.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"The call() method is used to change the context (this value) of a function. When a function is called using call(), the first argument passed to the method is used to set the this value for the function.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"call: accept two properties:\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"(i) what is context of this.\"),React.createElement(\"li\",null,\"(ii) Parameter.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:calls,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Apply: \"),\"function is a built-in function in JavaScript that allows you to call a function with a specified this value and arguments provided as an array or an array-like object.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"The apply() function takes two arguments:\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"The value to use as this inside the function being called.\"),React.createElement(\"li\",null,\"An array or an array-like object containing the arguments to pass to the function.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:applys,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"18. Polyfill\"),\"A polyfill is a browser fallback, made in JavaScript, that allows functionality expect to work in modern browsers also work in older browsers.\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"It \\u201Cfills in\\u201D the gap and adds missing implementations in old browser.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"19. What is Functional Programming?\"),\"functional programming:\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Pure functions\"),React.createElement(\"li\",null,\"Function composition\"),React.createElement(\"li\",null,\"Avoid shared state\"),React.createElement(\"li\",null,\"Avoid mutating state\"),React.createElement(\"li\",null,\"Avoid side effects\")),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Function composition: \"),\"is the process of combining two/ more functions in order to produce a new function or perform some computation.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"A pure function or first class function has following properties:\"),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"The function always returns the same result if the same arguments are passed in. It does not depend on any state, or data, change during a program's execution. It must only depend on its input arguments.\"),React.createElement(\"li\",null,\"The function does not produce any observable side effects such as network requests, input and output devices, or data mutation.\"),React.createElement(\"li\",null,\"The same arguments must always lead to the same outcome.\"),React.createElement(\"li\",null,\"A pure function cannot depend on any variable declared outside its scope.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"21. Combinators\"),\"Combinators are similar to pure functions. With one more a combinator contains no free variables.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"A free variable is any variable whose values cannot be accessed independently. Every variable in a combinator must be passed through parameters.\",React.createElement(\"br\",null),React.createElement(\"h3\",null,\"21. Callback\"),React.createElement(\"b\",null,\"Callback: \"),\"A callback is a function that is passed as an argument to another function and is executed at a later time or when a certain event occurs. It allows you to define what should happen once a specific task or operation is completed.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"with Callback function javaScript build an asynchronous wold of a synchronous single-threaded language.\"),React.createElement(\"li\",null,\"Almost anything that has to pull data into your app or push data out will always be asynchronous because it\\u2019s not going to be running in the same thread. callbacks do not work with try-catch.\"),React.createElement(\"li\",null,\"Although, if your callback is synchronous, then you can catch errors using try-catch\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:proCallbacks,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Promises\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"promise is an object that represents the eventual completion (or failure) of an asynchronous operation and allows you to handle the result as either a resolved value or an error. Promises provide a more structured and elegant way to work with asynchronous code compared to callbacks.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:promisePro,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"22. Async-Await\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Async/await introduces two new keywords: async and await. The async keyword is used to define an asynchronous function, while the await keyword is used to pause the execution of an async function until a promise is resolved or rejected.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"By default any function without \",React.createElement(\"b\",null,\"return\"),\" statement return\",\" \",React.createElement(\"b\",null,\"undefined\"),\" in javascript.\"),React.createElement(\"li\",null,\"By writing async function don't need to write return statement.\"),React.createElement(\"li\",null,\"await make sure to wait till a Promise is settled, be resolved/ rejected.\"),React.createElement(\"li\",null,\"The way we write then() for handling promise, now in await we can remove than() and replace it with await.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:callbackJs,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Chaining\"),React.createElement(\"br\",null),\"A common need is to execute two/ more asynchronous operations back to back, where each subsequent operation starts when the previous operation succeeds, with the result from the previous step. This is promise chain.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Chained Callback\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:chaineds,language:\"js\",plugins:[\"line-numbers\"]})),\"Always return results, otherwise callbacks won't catch the result of a previous promise.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Unlike old-fashioned passed-in callbacks, a promise comes with some guarantees:\"),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Callbacks will never be called before the completion of the current run of the JavaScript event loop.\"),React.createElement(\"li\",null,\"Callbacks added with then(), will be called even after the success/ failure of the asynchronous operation.\"),React.createElement(\"li\",null,\"Multiple callbacks may be added by calling then() several times. Each callback is executed one after another, in the order in which they were inserted.\"),React.createElement(\"li\",null,\"One of the great things about using promises is chaining.\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"How are observables different from promises?\"),React.createElement(\"br\",null),\"The first difference is that an Observable is\\xA0lazy\\xA0whereas a Promise is\\xA0eager.\",React.createElement(\"br\",null),React.createElement(\"table\",null,React.createElement(\"tr\",null,React.createElement(\"th\",null,\"Observables\"),React.createElement(\"th\",null,\"Promises\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"Handle a sequence of asynchronous events over a period of time.\"),React.createElement(\"td\",null,\"Deal with one asynchronous event at a time\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"Lazy. An observable is not called until we subscribe() to the observable\"),React.createElement(\"td\",null,\"Not Lazy, Execute immediately after creation.\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"Can be cancelled by using the unsubscribe() method\"),React.createElement(\"td\",null,\"Cannot be cancelled\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"Observable provides operators like map, forEach, filter, reduce, retry, retryWhen etc.\"))),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"23. Difference between Map and foreach.\"),React.createElement(\"table\",null,React.createElement(\"tr\",null,React.createElement(\"th\",null,\"Value\"),React.createElement(\"th\",null,\"foreach\"),React.createElement(\"th\",null,\"Map\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,React.createElement(\"b\",null,\"Functionality\")),React.createElement(\"td\",null,\"Performs given operation on each element of the array\"),React.createElement(\"td\",null,\"Performs given \\\"transformation\\\" on \\\"copy\\\" of each element\",\" \")),React.createElement(\"tr\",null,React.createElement(\"td\",null,React.createElement(\"b\",null,\"Return value\")),React.createElement(\"td\",null,\"undefined\"),React.createElement(\"td\",null,\"new array with tranformed elements leaving back original array unchanged.\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,React.createElement(\"b\",null,\"Processing\")),React.createElement(\"td\",null,\"Performing non-transformation like processing on each element.\"),React.createElement(\"td\",null,\"Obtaining array containing output of some processing done on each element of the array.\"))),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"map() is chainable. This means we can attach reduce(), sort(), filter() and so on after performing a map() method on an array.\"),React.createElement(\"li\",null,\"But we can't do with forEach()\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"24. Hoc:\"),\"A higher order function is a function either:\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"1. Accept a function as an argument.\"),React.createElement(\"li\",null,\"2.Return a function.\")),React.createElement(\"br\",null),\"HOF are:\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"forEach\"),React.createElement(\"li\",null,\"map\"),React.createElement(\"li\",null,\"filter\"),React.createElement(\"li\",null,\"sort\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:hoFunction,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"25. Event loop\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"The event loop is a fundamental concept in JavaScript that handles the execution of code and manages asynchronous operations. It ensures that JavaScript remains responsive and non-blocking, allowing for the execution of multiple tasks simultaneously.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"In JavaScript, code execution occurs in an event loop, which continuously checks for tasks to execute. The event loop has a simple purpose: to handle tasks and events. It follows a specific order of operations to process and execute tasks efficiently.\"),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"li\",null,\"The event loop starts by checking the call stack, which keeps track of the functions that need to be executed. If the call stack is empty, the event loop moves to the next step.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"The event loop checks the task queue, where asynchronous tasks (such as timer events, network requests, or user interactions) are queued for execution.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"If there are tasks in the task queue, the event loop takes the first task and moves it to the call stack, allowing it to be executed.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"The task in the call stack is executed. If the task is synchronous, it runs to completion. If the task is asynchronous, it may initiate a web API call, such as a setTimeout or fetch, and move to the next step.\"),React.createElement(\"li\",null,\"While the asynchronous task is being handled by the web API, the event loop continues to check the call stack and task queue. If the call stack is empty and there are pending tasks in the task queue, the event loop moves the next task from the task queue to the call stack for execution.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"Once the web API call (asynchronous task) is completed or when a specified time interval elapses, the task is added to the task queue for execution.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"The event loop repeats this process indefinitely, continuously checking for tasks in the task queue and executing them when the call stack is empty.\"),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"br\",null),\"The event loop ensures that JavaScript can handle both synchronous and asynchronous tasks efficiently without blocking the execution of other code. It allows JavaScript to remain responsive by handling tasks in an ordered manner and avoiding the risk of long-running operations freezing the entire program.\"),React.createElement(\"br\",null),\"EventLoop is an array that acts as a queue (first-in, first-out).\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:eventLoop,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"26. Concurrency model and the event loop\"),\"JavaScript has a concurrency model based on an event loop, which is responsible for executing the code, collecting and processing events, and executing queued sub-tasks.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"img\",{src:EventLoop,alt:\"\",className:\"responsive\",style:redesign}),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"27. Event bubbling and Capturing\"),\"Event bubbling and capturing are two ways of event propagation in the HTML DOM API, when an event occurs in an element inside another element, and both elements have registered a handle for that event.\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"bubbling: \"),\"the event is first captured and handled by the innermost element and then propagated to outer elements.\"),React.createElement(\"br\",null),\"When an event occurs on an element, such as a click or a keypress, the event is first handled on the element that triggered it. Then, the event is propagated to the parent element, and if there are event handlers attached to that parent element, they are also triggered. This process continues upwards through the DOM hierarchy until reaching the root element, like the document or window.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"capturing: \"),\"the event is first captured by the outermost element and propagated to the inner elements.\"),React.createElement(\"li\",null,\"Event bubbling set by default. If we pass true parameter in callback function than it became event capturing\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"28. What is the JavaScript Event Delegation Model?\"),\"When we are bubbling and capturing, it permit functions to apply a single handler to several elements at a specific time then it\\u2019s called Event Delegation. \",React.createElement(\"br\",null),\"It basically permits you to put event listeners to single parent instead of particular nodes. That specific listener analyzes the bubbled events to get a match on the child elements.\",React.createElement(\"br\",null),React.createElement(\"h3\",null,\"29. event.stopPropagation\"),\"event.stopPropagation and event.preventDefault, seem to be doing the same thing.\",React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"stopPropagation: \"),\"Stops the event from bubbling up the event chain.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"preventDefault: \"),\"Prevents the default action the browser makes on that event.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"30. Event Debouncing\"),\"Debouncing in JavaScript is a practice used to improve browser performance. There might be some functionality in a web page which requires time-consuming computations. If such a method is invoked frequently, it might greatly affect the performance of the browser, as JavaScript is a single threaded language. Debouncing is a programming practice used to ensure that time-consuming tasks do not fire so often, that it stalls the performance of the web page. In other words, it limits the rate at which a function gets invoked.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:debouncing,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"31. Throttling/ Throttle function \"),\"Throttling is a practice used in websites. Throttling is used to call a function after every millisecond or a particular interval of time only the first click is executed immediately.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:throttle,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"32. IIFE\"),\"Because our application could include many functions and global variables from different source files, it's important to limit the number of global variables.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"IIFE used to solve scoping problem.\"),React.createElement(\"li\",null,\"Any variables declared inside the IIFE are not visible to the outside world.\"),React.createElement(\"li\",null,\"IIFE return a value that can be assigned to a variable.\"),React.createElement(\"li\",null,\"Parentheses around the function expression basically force the function to become an expression instead of a statement.\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:iifes,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"33. Curry\"),\"Curring is a process in functional programming in which we can transform a function with multiple arguments into a sequence of nesting functions. It returns a new function that expects the next argument inline.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:currying,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"34. Generator\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Generators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.\"),React.createElement(\"li\",null,\"Generator functions are written using the function* syntax.\"),React.createElement(\"li\",null,\"When called initially, generator functions do not execute any of their code, instead returning a type of iterator called a Generator.\"),React.createElement(\"li\",null,\"When a value is consumed by calling the generator's next method, the Generator function executes until it encounters the yield keyword.\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"When should we use generators:\"),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"1.one can choose to jump out of a function and let outer code to determine when to jump back into the function.\"),React.createElement(\"li\",null,\"2.the control of asynchronous call can be done outside of your code The most important feature in generators\\u2014we can get the next value in only when we really need it, not all the values at once.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:generator,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"35. Yield\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:yields,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"36. Strict mode\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Makes debugging easier. Code errors that have been ignored/ failed silently now generate errors.\"),React.createElement(\"li\",null,\"Prevents accidental globals. Without strict mode, assigning a value to an undeclared variable automatically creates a global variable with that name. In strict mode, attempting to do so throws an error.\"),React.createElement(\"li\",null,\"Eliminates this coercion. Without strict mode, a reference to a this value of null/ undefined is automatically coerced to the global.\"),React.createElement(\"li\",null,\"Fixes mistakes that make it difficult for JavaScript engines to perform optimizations.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Strict mode for scripts\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:stricts,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"37. Modules\"),React.createElement(\"b\",null,\"Differences between modules and standard scripts\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"If we try to load the HTML file locally, will run into CORS errors due to JavaScript module security requirements.\"),React.createElement(\"li\",null,\"modules use strict mode automatically.\"),React.createElement(\"li\",null,\"Modules are only executed once, even if they have been referenced in multiple \\\"script\\\" tags.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Creating a module object\"),React.createElement(\"br\",null),\"To import each module's features inside a module object. The following syntax form does that:\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:features,language:\"js\",plugins:[\"line-numbers\"]})),\"This grabs all the exports available inside module.js, and makes them available as members of an object Module, effectively giving it its own namespace.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"the exports are all\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:exportsing,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Dynamic module loading\"),React.createElement(\"br\",null),\"The newest part of the JavaScript modules functionality to be available in browsers is dynamic module loading. This allows you to dynamically load modules only when they are needed, rather than having to load everything.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:loading,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"38. JavaScript static Method:\"),\"The JavaScript provides static methods that belong to the class instead. These methods are called directly on the class itself.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"static keyword is used to declare a static method.\"),React.createElement(\"li\",null,\"A class can contain more than one static method.\"),React.createElement(\"li\",null,\"If we declare more than one static method with a similar name, the JavaScript always invokes the last one.\"),React.createElement(\"li\",null,\"static method can be used to create utility functions.\"),React.createElement(\"li\",null,\"We can use this keyword to call a static method within another static method.\"),React.createElement(\"li\",null,\"We cannot use this keyword directly to call a static method within the non-static method. In such case, we can call the static method either using the class name or as the property of the constructor.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"39. Proxies\"),\"Proxy objects allow you to intercept certain operations and to implement custom behaviors.\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:proxies,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"i\",null,\"The Proxy object defines a target (an empty object here) and a handler object, in which a get trap is implemented. Here, an object that is proxied will not return undefined when getting undefined properties, but will instead return the number 42.\"),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"The following terms are used when talking about the functionality of proxies:\"),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"handler: \"),\"Placeholder object which contains traps.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"traps: \"),\"Methods that provide property access. (This is analogous to the concept of traps in operating systems.)\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"target: \"),\"Object which the proxy virtualizes. It is often used as storage backend for the proxy. Invariants (semantics that remain unchanged) regarding object non-extensibility or non-configurable properties are verified against the target.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"invariants: \"),\"Semantics that remain unchanged when implementing custom operations are called invariants. If we violate the invariants of a handler, a TypeError will be thrown.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"40. What is the function of close () in JavaScript?\"),\"The function of close () is mainly used to close the latest window. You have to write window.close() to make sure that this command is clearly associated with a window object and not the other JavaScript object.\",React.createElement(\"br\",null),React.createElement(\"h3\",null,\"41. Memory Management\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"JavaScript will automatically allocate memory when values are initially declared.\"),React.createElement(\"li\",null,\"The purpose of a garbage collector is to monitor memory allocation and determine when a block of allocated memory is no longer needed and reclaim it.\",\" \"),React.createElement(\"li\",null,\"A JavaScript object has a reference to its prototype (implicit reference) and to its properties values (explicit reference).\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"43. async and defer\"),\"Two modern features we can use to bypass the problem of the blocking script \\u2014 async and defer.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Scripts loaded using the \\\"async\\\" attribute will download the script without blocking rendering the page and will execute it as soon as the script finishes downloading.\"),React.createElement(\"li\",null,\"No guarantee that scripts will run in any specific order, only that they will not stop the rest of the page from displaying.\"),React.createElement(\"li\",null,\"It is best to use async when the scripts in the page run independently from each other and depend on no other script on the page.\"),React.createElement(\"li\",null,\"async should be used when we have a bunch of background scripts to load in, and we just want to get them in place as soon as possible.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Scripts loaded using the \\\"defer\\\" attribute will run in the order they appear in the page and execute them as soon as the script and content are downloaded.\"),React.createElement(\"li\",null,\"All the scripts with the defer attribute will load in the order they appear on the page.\"),React.createElement(\"li\",null,\"They won't run until the page content has all loaded, which is useful if our scripts depend on the DOM being in place.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"44. async and defer both instruct the browser to download the scripts in a separate thread, while the rest of the page is downloading, so the page loading is not blocked by the scripts.\"),React.createElement(\"li\",null,\"2. If our scripts should be run immediately and they don't have any dependencies, then use async.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),\"If your scripts need to wait for parsing and depend on other scripts and/or the DOM being in place, load them using defer.\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:security,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return IntroJs;}(Component);export default withStyles(styles)(IntroJs);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/javaScripts/deepJs/introJs.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","undeclaredVar","trim","varConst","iifes","spreadRests","spreadRest","currying","generator","yields","stricts","eventLoop","security","proxies","features","exportsing","loading","debouncing","throttle","execution","code","variables","proCallbacks","promisePro","callbackJs","chaineds","thisKey","thisKey2","thisKey3","bind_2","calls","applys","convertObj","convertArr","shallow","argumentsk","firstClass","hoFunction","IntroJs","setTimeout","highlightAll","classes","props","EventLoop"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nimport EventLoop from \"../../../assets/imgs.svg\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst redesign = {\n  height: 350,\n  width: 600,\n};\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst undeclaredVar = `\nvar a\nconsole.log('Undefined variables', a)\nconsole.log('Undeclared variables', b)`.trim();\n\nconst varConst = `\nvar obj = Object.freeze({ name: 'Mukesh' });\nobj.name = 'Rakesh';\n\nconsole.log(obj.name);                                                  \n`.trim();\n\nconst iifes = `\nvar x = 23; \n  (function(){   \n      var x = 43;   \n      (function random(){     \n          x++;     \n          console.log(x);     \n          var x = 21;   \n      })(); \n  })();                                                           \n`.trim();\n\nconst spreadRests = `\nfunction obj(name) {\n  this.name = name;\n}\n\nobj.prototype.greet = function() {\n  console.log('hello, '$'{this.name}');\n};\n\nconst obj1 = new obj('John');\nconst obj2 = new obj('Jane');\n\nobj1.greet(); \nobj2.greet();\n`.trim();\n\nconst spreadRest = `\n//Rest\nfunction add(a,b,c,...other){\n  console.log(other);\n  console.log(other[0]);\n  return a+b+c;\n}\n\nconsole.log(add(3,4,5,1,2));\n\n\n//2\nconst num = [1,2,3,4,5,6]\nfunction addSpread(num, num2, num3){\n  console.log(num, num2, num3);\n}\n\n// console.log(addSpread(num[0], num[1], num[2]));\naddSpread(...num);\naddSpread(num);\n`.trim();\n\nconst currying = `\n//clousers implements in curry\nfunction sum(a){\n  return function(b){\n    return function(c){\n      return a+b+c;\n    }\n  }\n}\n\nlet sumcall = sum(2)(3)(4);\nconsole.log(sumcall)\n\n\n//2\nvar prism = l => w => h => l * w * h;\nconsole.log(prism(2)(3)(5))\n`.trim();\n\nconst generator = `\n  function* generator_function() {\n      yield 1;\n      yield 2;\n    }\n    \n   let generator = generator_function();\n   \n   console.log(generator.next().value);\n   console.log(generator.return(22).value);\n   console.log(generator.next().value);\n   \n   generator = generator_function();\n   let iterable = generator[Symbol.iterator]();\n   \n   console.log(iterable.next().value);\n   console.log(iterable.next().done);\n `.trim();\n\nconst yields = `\nfunction* generator_function_1(){\n  yield 2;\n  yield 3;\n}\n\nfunction* generator_function_2() {\n   yield 1;\n   yield* generator_function_1();\n   yield* [4, 5];\n }\n\nvar generator = generator_function_2();\nconsole.log(generator.next().value);\nconsole.log(generator.next().value);`.trim();\n\nconst stricts = `\n'use strict';\ndelete Object.prototype;                                                                    // throws a TypeError.\n\n\n//2\nfunction sum(a, a, c) {                                                                     // syntax error.\n  'use strict';\n  return a + a + c;                                                                  // wrong if this code ran.\n}\n`.trim();\n\nconst eventLoop = `\nconsole.log(\"Start\");\n\n// Asynchronous setTimeout function\nsetTimeout(function() {\n  console.log(\"Timeout callback executed\");\n}, 1000);\n\n// Synchronous loop\nfor (let i = 0; i < 5; i++) {\n  console.log(\"Loop iteration:\", i);\n}\n\nconsole.log(\"End\");\n `.trim();\n\nconst security = `\n//async\n<script async src=\"js/script2.js\"></script>\n<script async src=\"js/script3.js\"></script>\n\n\n//defer\n<script defer src=\"js/script2.js\"></script>\n<script defer src=\"js/script3.js\"></script>\n`.trim();\n\nconst proxies = `\nlet handler = {\n  get: function(target, name) {\n    return name in target? target[name] : 42\n  }\n}\n\nlet p = new Proxy({}, handler)\np.a = 1\nconsole.log(p.a, p.b) `.trim();\n\nconst features = `import * as Module from './modules/module.js';`.trim();\n\nconst exportsing = `export { name, draw, reportArea, reportPerimeter };`.trim();\n\nconst loading = `\nimport('/index.js')\n  .then((module) => {\n    // Do something with the module.\n  });\n`.trim();\n\nconst debouncing = `\n<input typt=\"text\" onkeyup=\"betterDebouncing()\" />\n\n\n---------------------------------------------js-------------------\n\nlet counter = 0\nconst getData = () => {\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n            .then(res => res.json()) \n            .then(responseData => {\n                console.log('dddd',responseData,\"---\",counter++);\n            });\n}\n\nconst debounced = function (fn ,d){\n  let timer;\n  return function(){\n    let context = this,\n    args = arguments;\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      getData.apply(context, args)\n    }, d)\n  }\n}\n\nconst betterDebouncing = debounced(getData, 300);\n`.trim();\n\nconst throttle = `\nconst loggerFunc = () => {\n  console.count(\"Throttled Function\");\n}\n\nconst throttle = (fn, limit) => {\n  let flag = true;\n  return function(){\n    let context = this;\n    let args = arguments;\n    if(flag){\n      fn.apply(context, args);\n      flag = false;\n      setTimeout(() => {\n        flag=true;\n      }, limit);\n    }\n  }\n}\n\nconst betterLoggerFunction = throttle(loggerFunc, 1000);\n\nwindow.addEventListener(\"resize\",betterLoggerFunction);\n\n// This is the normal Function without Throttling\nconst normalFunc = () => {\n  console.count(\"Normal Function\");\n}\n\nwindow.addEventListener(\"resize\",normalFunc);\n`.trim();\n\nconst execution = `\nfunction foo() { }                                                             // function statement.\n\n\nvar foo = function() { }                                                       // function expression.\n`.trim();\n\nconst code = `\nconst outerFun = (a) => {\n  let b=2;\n  const innerFun = () => {\n      let sum = a+b;\n      console.log('sum is',sum)\n    }\n  innerFun();\n}\n\nouterFun(1);\n `.trim();\n\nconst variables = `\n//1. Using an Object Literal\nConst emp={id:102,name:\"Shyam Kumar\",salary:40000}\n\n\n//2. Constructor functions\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\nconst john = new Person('John', 30);\n\n\n//3. ES6 Classes\nclass Person {\n  constructor(name, age) {\n    this.name = name;\n  }\n}\n\nconst john = new Person('John');\n\n\n//4. Object.create()\nconst obj = Object.create(emp);\n`.trim();\n\nconst proCallbacks = `\nconst mocks=[\n  {name:'A', Profession:'SE'},\n  {name:'B', Profession:'SE'},\n]\n\nfunction fun(){\n  setTimeout(()=>{\n    let result='';\n    mocks.forEach(data=>(\n      result += data.name+\",\"\n    ))\n    console.log(result)\n  },1000)\n}\n\nfunction main(newdata){\n  setTimeout(()=>{\n    mocks.push(newdata)\n  },2000);\n}\n\nfun();\nmain({name:'C', Profession:'Developer'})\n\n\n//Solve by callback.\nfunction fun(){\n  setTimeout(()=>{\n    let result='';\n    mocks.forEach(data=>(\n      result += data.name+\",\"\n    ))\n    console.log(result)\n  },1000)\n}\n\nfunction main(newdata, cb){\n  setTimeout(()=>{\n    mocks.push(newdata)\n    cb();\n  },2000);\n}\n\nmain({name:'C', Profession:'Developer'}, fun)\n`.trim();\n\nconst promisePro = `\nconst mocks=[\n  {name:'A', Profession:'SE'},\n  {name:'B', Profession:'SE'},\n]\n\nfunction fun(){\n  setTimeout(()=>{\n    let result='';\n    mocks.forEach(data=>(\n      result += data.name+\",\"\n    ))\n    console.log(result)\n  },1000)\n}\n\nfunction main(newdata){\n  return new Promise((resolve, reject) => {\n    setTimeout(()=>{\n      mocks.push(newdata)\n      let err=false;\n      if(!err){\n        resolve();\n      }else{\n        reject('Error ocuur')\n      }\n    },2000);\n  })\n  \n}\n\nmain({name:'C', Profession:'Developer'}).then(fun).catch(err=>console.log(err));\n`.trim();\n\nconst callbackJs = `\nconst mocks=[\n  {name:'A', Profession:'SE'},\n  {name:'B', Profession:'SE'},\n]\n\nfunction fun(){\n  setTimeout(()=>{\n    let result='';\n    mocks.forEach(data=>(\n      result += data.name+\",\"\n    ))\n    console.log(result)\n  },1000)\n}\n\nfunction main(newdata){\n  return new Promise((resolve, reject) => {\n    setTimeout(()=>{\n      mocks.push(newdata)\n      let err=false;\n      if(!err){\n        resolve();\n      }else{\n        reject('Error ocuur')\n      }\n    },2000);\n  })\n  \n}\n\nasync function demo(){\n  await main({name:'C', Profession:'Developer'});\n  fun()\n}\n\ndemo();\n`.trim();\n\nconst chaineds = `\n //Promises Chaning\n new Promise((resolve, reject) => {\n  setTimeout(() => resolve(1), 1000);\n    })\n    \n.then((result) => {\n    alert(result); return result * 3;\n    })\n.then((result) => {\n    alert(result); return result * 4;\n    })\n.then((result) => {\n    alert(result); return result * 6;\n});\n`.trim();\n\nconst thisKey = `\nconst person = {\n  name: 'John',\n  greet() {\n    console.log(this.name);\n  }\n};\n\nperson.greet(); \n`.trim();\n\nconst thisKey2 = `\nfunction greet() {\n  console.log(this.name);\n}\n\nconst person = {\n  name: 'John'\n};\n\nconst boundGreet = greet.bind(person);\nboundGreet();`.trim();\n\nconst thisKey3 = `\n<button id=\"myButton\">Click me</button>\n\n<script>\n  const button = document.querySelector('#myButton');\n  button.addEventListener('click', function() {\n    console.log(this === button); // true\n  });\n</script>\n`.trim();\n\nconst bind_2 = `\nconst obj={\n  name:'Krishana',\n  address:'Gokul',\n}\n\nfunction show(){\n  console.log(this);\n}\n\nconst newObj=show.bind(obj);\nnewObj();\n`.trim();\n\nconst calls = `\n//call use to borrow function.\nconst obj={\n  name:'Krishana',\n  address:'Gokul',\n}\n\nconst obj2={\n  name:'Ram',\n  address:'Gokul',\n}\n\nfunction show(){\n  console.log(this.name);\n}\n\nshow.call(obj);\nshow.call(obj2);\n`.trim();\n\nconst applys = `\nconst obj={\n  name:'Krishana',\n  address:'Gokul',\n}\n\nconst obj2={\n  name:'Ram',\n  address:'Gokul',\n}\n\nfunction show(state,country){\n  console.log(this.name,\"---\",state,'---',country);\n}\n\nshow.apply(obj, [\"Delhi\", \"India\"]);\nshow.apply(obj2, [\"Ranchi\", \"India\"]);\n`.trim();\n\nconst convertObj = `\nlet obj = { id: \"1\", name: \"Test User\", age: \"25\", profession: \"Developer\" };\n\n\nconsole.log(Object.keys(obj));                     //Convert the keys to Array using - Object.keys().\n\nconsole.log(Object.values(obj));                   //Converts the Values to Array using - Object.values().\n\nconsole.log(Object.entries(obj));                  //Converts both keys and values using - Object.entries().\n`.trim();\n\nconst convertArr = `\nlet arr = [\"1\", \"Test User\", \"25\", \"Developer\"];\nlet arr1 = [\n  [\"id\", \"1\"],\n  [\"name\", \"Test User\"],\n  [\"age\", \"25\"],\n  [\"profession\", \"Developer\"],\n];\n\nconsole.log(Object.assign({}, arr));\nconsole.log({ ...arr });\nconsole.log(Object.fromEntries(arr1));`.trim();\n\nconst shallow = `\n\n`.trim();\n\nconst argumentsk=`\nfunction outer() {\n  const innerArrow = () => {\n    console.log(arguments);\n  };\n\n  innerArrow(1, 2, 3);\n}\n\nouter(4, 5, 6);\n`.trim();\n\nconst firstClass = `\nfunction fun(){\n  return 'Argument';\n}\n\nfunction main(cb, name){\n  console.log(cb(), name)\n}\n\nmain(fun, 'Krishans')\n\n\n//2\nfunction main(){\n  return function fun(){\n    console.log('Return bt another function.');\n  }\n}\n\nconst obj = main();\nobj();\n\n\n//3\nconst main = function (){\n  console.log('Assigned as a value.');\n}\n\nmain();\n`.trim();\n\nconst hoFunction = `\nfunction fun(arr, cal) {\n  const result = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    result.push(cal(arr[i]));\n  }\n\n  return result;\n}\n\nconst numbers = [1, 2, 3, 4, 5];\n\nconst double = fun(numbers, (num) => num * 2);\nconst square = fun(numbers, (num) => num ** 2);\n\nconsole.log(double); \nconsole.log(square); \n`.trim();\n\nclass IntroJs extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. What are JavaScript Data Types?</h3>\n              Default javaScript is Synchronous.\n              <br />\n              <i>\n                In JavaScript null is <b>nothing</b>. It is supposed to be\n                something that\n                <b> doesn't exist</b>. In JavaScript, the data type of null is\n                an <b>object</b>.\n              </i>\n              <br />\n              <ol>\n                <li>Number</li>\n                <li>String</li>\n                <li>Boolean</li>\n                <li>Object</li>\n                <li>Undefined</li>\n                <li>Null</li>\n              </ol>\n              <br />\n\n              <h3>What is first class object in javascript</h3>\n              <ul>\n                <li>Can be passed as an argument.</li>\n                <li>Can be return by another function.</li>\n                <li>Can be assigned as a value to a variable, object or array.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={firstClass}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>2. What are undeclared and undefined variables?</h3>\n              <i>\n                <ul>\n                  <li>\n                    <b>Undeclared variables: </b> Are those that do not exist in\n                    a program and are not declared. If the program tries to read\n                    the value of an undeclared variable, then a runtime error is\n                    encountered.\n                  </li>\n                  <li>\n                    <b>Undefined variables: </b> are those that are declared in\n                    the program but have not been given any value. If the\n                    program tries to read the value of an undefined variable, an\n                    undefined value is returned.\n                  </li>\n                </ul>\n              </i>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={undeclaredVar}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>3. Objects</h3>\n              An object is a collection of related data/ functionality\n              (properties and methods).\n              <br />\n              <br />\n              <b>JavaScript Objects?</b>\n              <br />\n              <ul>\n                <li>\n                  A javaScript object is an entity having state and behavior.\n                </li>\n                <li>\n                  JavaScript is an object-based language. Everything is an\n                  object in JavaScript.\n                </li>\n                <li>JavaScript is template based.</li>\n              </ul>\n              <br />\n              <br />\n              <i>There are 4 ways to create objects.</i>\n              <div style={titles}>\n                <PrismCode\n                  code={variables}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>5. How to convert an Object {} into an Array [] </h3>\n              <div style={titles}>\n                <PrismCode\n                  code={convertObj}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>6. How to convert an Array [] to Object {}</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={convertArr}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>7. Difference between local storage, cookies and Session.</h3>\n              There are three common ways to store data on the\n              client-side: local storage, cookies, and session storage. Each has\n              its own advantages and disadvantages, and the choice of which to\n              use depends on the specific needs of the application.\n              <ul>\n                <li>\n                  <b>Local Storage: </b>\n                  <ul>\n                    <li>Local storage is a web storage API in modern web browsers.</li>\n                    <li>Data stored in it is not automatically sent to the server with HTTP requests.</li>\n                    <li>Local storage is a key-value store that\n                  allows data to be stored on the client-side in a persistent\n                  manner. The data stored in local storage is accessible even\n                  after the browser is closed, and can be accessed by any page\n                  in the same domain. Local storage is a good option for storing\n                  large amounts of data that need to persist between sessions.</li>\n                  </ul>\n                </li>\n                <br />\n                <li>\n                  <b>Cookies: </b>\n                  <ul>\n                    <li>Sent data to the server with every HTTP request to provide information about the client's state and identity. </li>\n                    <li>Cookies are small text files that are stored\n                  on the client-side by the browser. Cookies can be used to\n                  store small amounts of data, such as user preferences or\n                  authentication tokens. Cookies are accessible by any page in\n                  the same domain and can be set to expire after a certain\n                  period of time.</li>\n                  </ul>\n                  \n                </li>\n                <br />\n                <li>\n                  <b>Session Storage: </b>\n                  <ul>\n                    <li>Sessions store data on the server-side and use a session identifier (usually stored in a cookie) to associate the client's request with the corresponding session data on the server. Unlike cookies and local storage, session data is stored on the server, and only a session identifier is stored on the client-side. </li>\n                    <li>Session storage is similar to local\n                  storage, but the data stored in session storage is only\n                  accessible within the current browser session. Once the\n                  browser is closed, the data is deleted. Session storage is a\n                  good option for storing data that needs to be accessible\n                  across multiple pages within the same session, but does not\n                  need to persist between sessions.</li>\n                  </ul>\n                </li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={shallow}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>8. Difference between Object.freeze() vs const</h3>\n              <b>const</b> and <b>Object.freeze</b> are two completely different\n              things.\n              <br />\n              <br />\n              <i>\n                <ul>\n                  <li>\n                    const applies to bindings <b>variables</b>. It creates an\n                    immutable binding.\n                  </li>\n                  <li>\n                    Object.freeze works on values. It makes an object immutable,\n                    i.e. cannot change its properties.\n                  </li>\n                </ul>\n              </i>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={varConst}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>9. Why do we use arrow function.</h3>\n              <p>\n                <ul>\n                  <li>\n                    <b>Implicit returns: </b>If the body of an arrow function\n                    consists of a single expression, that expression is\n                    automatically returned.{\" \"}\n                  </li>\n                  <br />\n                  <li>\n                    <b>Lexical this binding: </b>Inherit the this value from the enclosing context in which they are defined.\n                  </li>\n                  <br />\n                  <li><b>No binding of arguments: </b> Arrow functions do not have their own arguments object. Instead, they inherit the arguments object from the enclosing scope. This makes it easier to access the arguments passed to the surrounding function without the need for the arguments keyword.</li>\n                  <br />\n                </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={argumentsk}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              </p>\n              <h3>10. Object prototypes</h3>\n              <ul>\n                <li>\n                  Prototypes are the mechanism by which{\" \"}\n                  <b>JavaScript objects inherit features</b> from one another.\n                </li>\n                <li>\n                Every object in JavaScript has a prototype, which is like a blueprint or a template that defines the shared properties and methods for objects of a particular type. When you access a property or method on an object, JavaScript first looks for it in the object itself. If it doesn't find it there, it continues searching for it in the object's prototype, and so on, forming a chain known as the prototype chain.\n                </li>\n                <li>\n                  By definition, null has no prototype, and acts as the final\n                  link in this prototype chain.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={spreadRests}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>11. Spread & Rest Operator</h3>\n              <ul>\n                <li>Rest & Spread both use in object and array.</li>\n                <li>\n                  <b>Rest: </b>The rest operator is used to put the rest of some\n                  specific user-supplied values into a JavaScript array.\n                </li>\n                <li>\n                  <b>Spread: </b>Allows us to quickly copy all or part of an\n                  existing array or object into another array or object.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={spreadRest}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>12. Hosting</h3>\n              Hoisting is JavaScript's default behavior of moving declarations\n              to the top.\n              <br />\n              <ul>\n                <li>\n                Hosting in JavaScript refers to the behavior of how variable and function declarations are processed by the JavaScript engine. It allows you to access and use variables and functions before they are physically declared in your code.\n                </li>\n                <br />\n                <li>\n                In JavaScript, when the JavaScript engine executes your code, it goes through two main phases: the creation phase and the execution phase.\n                </li>\n                <br />\n                <li>During the creation phase, the JavaScript engine sets up the environment for your code execution. One important step in this phase is the process of hoisting. Hoisting moves variable and function declarations to the top of their respective scopes, allowing you to use them before they appear in the code.</li>\n              </ul>\n              <br />\n              Hosting mainly relate to Memory management.\n              <br />\n\n              <h3>13. What are closures? Explain with example.</h3>\n              <b>scope: </b> Local, Global, Lexical.\n              <br />\n              In normal programming when we call function after than any\n              varriables or parameter declared in that function we can't use\n              again. But with help of closers we can use function variables\n              after function excuite in lexicalScop.\n              <br />\n              <ul>\n                <li>\n                  A closure is the combination of a function bundled together\n                  with references to its surrounding state (lexical\n                  environment).\n                </li>\n                <li>\n                  Or a closure gives access to an outer function’s scope from an\n                  inner function.\n                </li>\n                <li>\n                  In JavaScript, closures are created every time a function is\n                  created, at function creation time.\n                </li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={code}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Closers</b>\n              <br />\n              Clouser is a function bundled together in a lexical scope.\n              <br />\n              <ul>\n                <li>Uses: Module Design Pattern</li>\n                <li>Currying</li>\n                <li>Functions like once</li>\n                <li>Memoize</li>\n                <li>Maintaining state in async world</li>\n                <li>setTimeouts</li>\n                <li>Iterators</li>\n              </ul>\n              <br />\n              <br />\n              <h3>14. Function Express & Function Statement</h3>\n              function expressions and function statements are very similar in\n              JavaScript, the difference is how the browser loads them into the\n              execution context.\n              <div style={titles}>\n                <PrismCode\n                  code={execution}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <p>\n                <b>function statement: </b> loads before any code is executed.\n                This behavior of function statements is called hoisting, which\n                allows a function to be used before it is defined.\n              </p>\n              <p>\n                <b>function expression: </b>associates a value with a variable,\n                just like any other assignment statement. function expressions\n                load only when the interpreter reaches the definition of the\n                function.\n              </p>\n              <ul>\n                <li>\n                  Difference between Function Statement and Function Expression\n                  is the \"Hosting\".\n                </li>\n              </ul>\n              <br />\n              <h3>15. What is 'this' keyword in JavaScript?</h3>\n              this refers to the current execution context. The value of this\n              depends on how a function is called.\n              <br />\n              <ul>\n                <li>\n                  <b>Global context: </b>In the global context, this refers to\n                  the global object (e.g., window in a web browser).\n                </li>\n                <br />\n                <li>\n                  <b>Object context: </b>In the context of an object method,\n                  this refers to the object itself\n                </li>\n                <div style={titles}>\n                  <PrismCode\n                    code={thisKey}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n                <br />\n                <li>\n                  <b>Function context: </b>In the context of a regular function,\n                  this refers to the global object by default, but it can be\n                  bound to a different value using bind, call, or apply\n                </li>\n                <div style={titles}>\n                  <PrismCode\n                    code={thisKey2}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n                <br />\n                <li>\n                  <b>Event context: </b> In the context of an event handler\n                  function, this refers to the element that triggered the event:\n                </li>\n                <div style={titles}>\n                  <PrismCode\n                    code={thisKey3}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n                <br />\n              </ul>\n              <br />\n              <br />\n              <h3>16. Bind()</h3>\n              The bind() is used to create a new function with a specified this value and, optionally, initial arguments. It allows you to control the context in which a function is invoked. \n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={bind_2}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>17. call(), apply()</h3>\n              <b>Call: </b>Method is a built-in method in JavaScript that is\n              used to call a function with a specified this value and arguments\n              provided individually.\n              <br />\n              <br />\n              The call() method is used to change the context (this value) of a\n              function. When a function is called using call(), the first\n              argument passed to the method is used to set the this value for\n              the function.\n              <br />\n              <br />\n              call: accept two properties:\n              <ul>\n                <li>(i) what is context of this.</li>\n                <li>(ii) Parameter.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={calls}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Apply: </b>function is a built-in function in JavaScript that\n              allows you to call a function with a specified this value and\n              arguments provided as an array or an array-like object.\n              <br />\n              <br />\n              The apply() function takes two arguments:\n              <ul>\n                <li>\n                  The value to use as this inside the function being called.\n                </li>\n                <li>\n                  An array or an array-like object containing the arguments to\n                  pass to the function.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={applys}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>18. Polyfill</h3>\n              A polyfill is a browser fallback, made in JavaScript, that allows\n              functionality expect to work in modern browsers also work in older\n              browsers.\n              <br />\n              <ul>\n                <li>\n                  It “fills in” the gap and adds missing implementations in old\n                  browser.\n                </li>\n              </ul>\n              <br />\n              <h3>19. What is Functional Programming?</h3>\n              functional programming:\n              <br />\n              <ul>\n                <li>Pure functions</li>\n                <li>Function composition</li>\n                <li>Avoid shared state</li>\n                <li>Avoid mutating state</li>\n                <li>Avoid side effects</li>\n              </ul>\n              <br />\n              <ul>\n                <li>\n                  <b>Function composition: </b>is the process of combining two/\n                  more functions in order to produce a new function or perform\n                  some computation.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <b>\n                A pure function or first class function has following\n                properties:\n              </b>\n              <br />\n              <ul>\n                <li>\n                  The function always returns the same result if the same\n                  arguments are passed in. It does not depend on any state, or\n                  data, change during a program's execution. It must only depend\n                  on its input arguments.\n                </li>\n                <li>\n                  The function does not produce any observable side effects such\n                  as network requests, input and output devices, or data\n                  mutation.\n                </li>\n                <li>\n                  The same arguments must always lead to the same outcome.\n                </li>\n                <li>\n                  A pure function cannot depend on any variable declared outside\n                  its scope.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>21. Combinators</h3>\n              Combinators are similar to pure functions. With one more a\n              combinator contains no free variables.\n              <br />\n              <br />\n              A free variable is any variable whose values cannot be accessed\n              independently. Every variable in a combinator must be passed\n              through parameters.\n              <br />\n              <h3>21. Callback</h3>\n              <b>Callback: </b>A callback is a function that is passed as an argument to another function and is executed at a later time or when a certain event occurs. It allows you to define what should happen once a specific task or operation is completed. \n              <br />\n              <br />\n              <ul>\n                <li>\n                  with Callback function javaScript build an asynchronous wold\n                  of a synchronous single-threaded language.\n                </li>\n                <li>\n                  Almost anything that has to pull data into your app or push\n                  data out will always be asynchronous because it’s not going to\n                  be running in the same thread. callbacks do not work with\n                  try-catch.\n                </li>\n                <li>\n                  Although, if your callback is synchronous, then you can catch\n                  errors using try-catch\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={proCallbacks}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>Promises</h3>\n              <ul>\n                <li>\n                promise is an object that represents the eventual completion (or failure) of an asynchronous operation and allows you to handle the result as either a resolved value or an error. Promises provide a more structured and elegant way to work with asynchronous code compared to callbacks. \n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={promisePro}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>22. Async-Await</h3>\n              <ul>\n                <li>\n                Async/await introduces two new keywords: async and await. The async keyword is used to define an asynchronous function, while the await keyword is used to pause the execution of an async function until a promise is resolved or rejected.\n                </li>\n                <br/>\n                <li>\n                  By default any function without <b>return</b> statement return{\" \"}\n                  <b>undefined</b> in javascript.\n                </li>\n                <li>\n                  By writing async function don't need to write return\n                  statement.\n                </li>\n                <li>\n                  await make sure to wait till a Promise is settled, be\n                  resolved/ rejected.\n                </li>\n                <li>\n                  The way we write then() for handling promise, now in await we\n                  can remove than() and replace it with await.\n                </li>\n              </ul>\n              <br />\n              <br />\n              \n              <div style={titles}>\n                <PrismCode\n                  code={callbackJs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Chaining</b>\n              <br />\n              A common need is to execute two/ more asynchronous operations back\n              to back, where each subsequent operation starts when the previous\n              operation succeeds, with the result from the previous step. This\n              is promise chain.\n              <br />\n              <br />\n              <b>Chained Callback</b>\n              <div style={titles}>\n                <PrismCode\n                  code={chaineds}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              Always return results, otherwise callbacks won't catch the result\n              of a previous promise.\n              <br />\n              <br />\n              <b>\n                Unlike old-fashioned passed-in callbacks, a promise comes with\n                some guarantees:\n              </b>\n              <br />\n              <ul>\n                <li>\n                  Callbacks will never be called before the completion of the\n                  current run of the JavaScript event loop.\n                </li>\n                <li>\n                  Callbacks added with then(), will be called even after the\n                  success/ failure of the asynchronous operation.\n                </li>\n                <li>\n                  Multiple callbacks may be added by calling then() several\n                  times. Each callback is executed one after another, in the\n                  order in which they were inserted.\n                </li>\n                <li>\n                  One of the great things about using promises is chaining.\n                </li>\n              </ul>\n              <br />\n              <b>How are observables different from promises?</b>\n              <br />\n              The first difference is that an Observable is lazy whereas a\n              Promise is eager.\n              <br />\n              <table>\n                <tr>\n                  <th>Observables</th>\n                  <th>Promises</th>\n                </tr>\n                <tr>\n                  <td>\n                    Handle a sequence of asynchronous events over a period of\n                    time.\n                  </td>\n                  <td>Deal with one asynchronous event at a time</td>\n                </tr>\n                <tr>\n                  <td>\n                    Lazy. An observable is not called until we subscribe() to\n                    the observable\n                  </td>\n                  <td>Not Lazy, Execute immediately after creation.</td>\n                </tr>\n                <tr>\n                  <td>Can be cancelled by using the unsubscribe() method</td>\n                  <td>Cannot be cancelled</td>\n                </tr>\n                <tr>\n                  <td>\n                    Observable provides operators like map, forEach, filter,\n                    reduce, retry, retryWhen etc.\n                  </td>\n                </tr>\n              </table>\n              <br />\n              <h3>23. Difference between Map and foreach.</h3>\n              <table>\n                <tr>\n                  <th>Value</th>\n                  <th>foreach</th>\n                  <th>Map</th>\n                </tr>\n                <tr>\n                  <td>\n                    <b>Functionality</b>\n                  </td>\n                  <td>Performs given operation on each element of the array</td>\n                  <td>\n                    Performs given \"transformation\" on \"copy\" of each element{\" \"}\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <b>Return value</b>\n                  </td>\n                  <td>undefined</td>\n                  <td>\n                    new array with tranformed elements leaving back original\n                    array unchanged.\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <b>Processing</b>\n                  </td>\n                  <td>\n                    Performing non-transformation like processing on each\n                    element.\n                  </td>\n                  <td>\n                    Obtaining array containing output of some processing done on\n                    each element of the array.\n                  </td>\n                </tr>\n              </table>\n              <br />\n              <ul>\n                <li>\n                  map() is chainable. This means we can attach reduce(), sort(),\n                  filter() and so on after performing a map() method on an\n                  array.\n                </li>\n                <li>But we can't do with forEach()</li>\n              </ul>\n              <br />\n              <h3>24. Hoc:</h3>\n              A higher order function is a function either:\n              <br />\n              <ul>\n                <li>1. Accept a function as an argument.</li>\n                <li>2.Return a function.</li>\n              </ul>\n              <br />\n              HOF are:\n              <br />\n              <ul>\n                <li>forEach</li>\n                <li>map</li>\n                <li>filter</li>\n                <li>sort</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={hoFunction}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>25. Event loop</h3>\n              <ul>\n                <li>\n                  The event loop is a fundamental concept in JavaScript that handles the execution of code and manages asynchronous operations. It ensures that JavaScript remains responsive and non-blocking, allowing for the execution of multiple tasks simultaneously. \n                </li>\n                <br />\n                <li>\n                In JavaScript, code execution occurs in an event loop, which continuously checks for tasks to execute. The event loop has a simple purpose: to handle tasks and events. It follows a specific order of operations to process and execute tasks efficiently.\n                </li>\n                <br />\n                <br />\n                <li>\n                The event loop starts by checking the call stack, which keeps track of the functions that need to be executed. If the call stack is empty, the event loop moves to the next step.\n                </li>\n                <br />\n                <li>\n                The event loop checks the task queue, where asynchronous tasks (such as timer events, network requests, or user interactions) are queued for execution.\n                </li>\n                <br />\n                <li>\n                If there are tasks in the task queue, the event loop takes the first task and moves it to the call stack, allowing it to be executed.\n                </li>\n                <br/>\n                <li>The task in the call stack is executed. If the task is synchronous, it runs to completion. If the task is asynchronous, it may initiate a web API call, such as a setTimeout or fetch, and move to the next step.</li>\n                <li>While the asynchronous task is being handled by the web API, the event loop continues to check the call stack and task queue. If the call stack is empty and there are pending tasks in the task queue, the event loop moves the next task from the task queue to the call stack for execution.</li><br/>\n                <li>Once the web API call (asynchronous task) is completed or when a specified time interval elapses, the task is added to the task queue for execution.</li><br/>\n                <li>The event loop repeats this process indefinitely, continuously checking for tasks in the task queue and executing them when the call stack is empty.</li><br/>\n                <br/>\n                <br/>\n                The event loop ensures that JavaScript can handle both synchronous and asynchronous tasks efficiently without blocking the execution of other code. It allows JavaScript to remain responsive by handling tasks in an ordered manner and avoiding the risk of long-running operations freezing the entire program.\n              </ul>\n              <br />\n              EventLoop is an array that acts as a queue (first-in, first-out).\n              <div style={titles}>\n                <PrismCode\n                  code={eventLoop}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>26. Concurrency model and the event loop</h3>\n              JavaScript has a concurrency model based on an event loop, which\n              is responsible for executing the code, collecting and processing\n              events, and executing queued sub-tasks.\n              <br />\n              <br />\n              <img\n                src={EventLoop}\n                alt=\"\"\n                className=\"responsive\"\n                style={redesign}\n              />\n              <br />\n              <br />\n              <h3>27. Event bubbling and Capturing</h3>\n              Event bubbling and capturing are two ways of event propagation in\n              the HTML DOM API, when an event occurs in an element inside\n              another element, and both elements have registered a handle for\n              that event.\n              <br />\n              <ul>\n                <li>\n                  <b>bubbling: </b>the event is first captured and handled by\n                  the innermost element and then propagated to outer elements.\n                </li>\n                <br/>\n                When an event occurs on an element, such as a click or a keypress, the event is first handled on the element that triggered it. Then, the event is propagated to the parent element, and if there are event handlers attached to that parent element, they are also triggered. This process continues upwards through the DOM hierarchy until reaching the root element, like the document or window.\n                <br/>\n                <br/>\n                <li>\n                  <b>capturing: </b>the event is first captured by the outermost\n                  element and propagated to the inner elements.\n                </li>\n                <li>\n                  Event bubbling set by default. If we pass true parameter in\n                  callback function than it became event capturing\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>28. What is the JavaScript Event Delegation Model?</h3>\n              When we are bubbling and capturing, it permit functions to apply a\n              single handler to several elements at a specific time then it’s\n              called Event Delegation. <br />\n              It basically permits you to put event listeners to single parent\n              instead of particular nodes. That specific listener analyzes the\n              bubbled events to get a match on the child elements.\n              <br />\n              <h3>29. event.stopPropagation</h3>\n              event.stopPropagation and event.preventDefault, seem to be doing\n              the same thing.\n              <ul>\n                <li>\n                  <b>stopPropagation: </b>Stops the event from bubbling up the\n                  event chain.\n                </li>\n                <li>\n                  <b>preventDefault: </b>Prevents the default action the browser\n                  makes on that event.\n                </li>\n              </ul>\n              <br />\n              <h3>30. Event Debouncing</h3>\n              Debouncing in JavaScript is a practice used to improve browser\n              performance. There might be some functionality in a web page which\n              requires time-consuming computations. If such a method is invoked\n              frequently, it might greatly affect the performance of the\n              browser, as JavaScript is a single threaded language. Debouncing\n              is a programming practice used to ensure that time-consuming tasks\n              do not fire so often, that it stalls the performance of the web\n              page. In other words, it limits the rate at which a function gets\n              invoked.\n              <div style={titles}>\n                <PrismCode\n                  code={debouncing}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>31. Throttling/ Throttle function </h3>\n              Throttling is a practice used in websites. Throttling is used to\n              call a function after every millisecond or a particular interval\n              of time only the first click is executed immediately.\n              <div style={titles}>\n                <PrismCode\n                  code={throttle}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>32. IIFE</h3>\n              Because our application could include many functions and global\n              variables from different source files, it's important to limit the\n              number of global variables.\n              <br />\n              <br />\n              <ul>\n                <li>IIFE used to solve scoping problem.</li>\n                <li>\n                  Any variables declared inside the IIFE are not visible to the\n                  outside world.\n                </li>\n                <li>IIFE return a value that can be assigned to a variable.</li>\n                <li>\n                  Parentheses around the function expression basically force the\n                  function to become an expression instead of a statement.\n                </li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={iifes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>33. Curry</h3>\n              Curring is a process in functional programming in which we can\n              transform a function with multiple arguments into a sequence of\n              nesting functions. It returns a new function that expects the next\n              argument inline.\n              <div style={titles}>\n                <PrismCode\n                  code={currying}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>34. Generator</h3>\n              <ul>\n                <li>\n                  Generators are functions which can be exited and later\n                  re-entered. Their context (variable bindings) will be saved\n                  across re-entrances.\n                </li>\n                <li>\n                  Generator functions are written using the function* syntax.\n                </li>\n                <li>\n                  When called initially, generator functions do not execute any\n                  of their code, instead returning a type of iterator called a\n                  Generator.\n                </li>\n                <li>\n                  When a value is consumed by calling the generator's next\n                  method, the Generator function executes until it encounters\n                  the yield keyword.\n                </li>\n              </ul>\n              <br />\n              <b>When should we use generators:</b>\n              <br />\n              <ul>\n                <li>\n                  1.one can choose to jump out of a function and let outer code\n                  to determine when to jump back into the function.\n                </li>\n                <li>\n                  2.the control of asynchronous call can be done outside of your\n                  code The most important feature in generators—we can get the\n                  next value in only when we really need it, not all the values\n                  at once.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={generator}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>35. Yield</b>\n              <div style={titles}>\n                <PrismCode\n                  code={yields}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>36. Strict mode</h3>\n              <ul>\n                <li>\n                  Makes debugging easier. Code errors that have been ignored/\n                  failed silently now generate errors.\n                </li>\n                <li>\n                  Prevents accidental globals. Without strict mode, assigning a\n                  value to an undeclared variable automatically creates a global\n                  variable with that name. In strict mode, attempting to do so\n                  throws an error.\n                </li>\n                <li>\n                  Eliminates this coercion. Without strict mode, a reference to\n                  a this value of null/ undefined is automatically coerced to\n                  the global.\n                </li>\n                <li>\n                  Fixes mistakes that make it difficult for JavaScript engines\n                  to perform optimizations.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <b>Strict mode for scripts</b>\n              <div style={titles}>\n                <PrismCode\n                  code={stricts}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>37. Modules</h3>\n              <b>Differences between modules and standard scripts</b>\n              <ul>\n                <li>\n                  If we try to load the HTML file locally, will run into CORS\n                  errors due to JavaScript module security requirements.\n                </li>\n                <li>modules use strict mode automatically.</li>\n                <li>\n                  Modules are only executed once, even if they have been\n                  referenced in multiple \"script\" tags.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <b>Creating a module object</b>\n              <br />\n              To import each module's features inside a module object. The\n              following syntax form does that:\n              <div style={titles}>\n                <PrismCode\n                  code={features}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              This grabs all the exports available inside module.js, and makes\n              them available as members of an object Module, effectively giving\n              it its own namespace.\n              <br />\n              <br />\n              <b>the exports are all</b>\n              <div style={titles}>\n                <PrismCode\n                  code={exportsing}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Dynamic module loading</b>\n              <br />\n              The newest part of the JavaScript modules functionality to be\n              available in browsers is dynamic module loading. This allows you\n              to dynamically load modules only when they are needed, rather than\n              having to load everything.\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={loading}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>38. JavaScript static Method:</h3>\n              The JavaScript provides static methods that belong to the class\n              instead. These methods are called directly on the class itself.\n              <br />\n              <br />\n              <ul>\n                <li>static keyword is used to declare a static method.</li>\n                <li>A class can contain more than one static method.</li>\n                <li>\n                  If we declare more than one static method with a similar name,\n                  the JavaScript always invokes the last one.\n                </li>\n                <li>static method can be used to create utility functions.</li>\n                <li>\n                  We can use this keyword to call a static method within another\n                  static method.\n                </li>\n                <li>\n                  We cannot use this keyword directly to call a static method\n                  within the non-static method. In such case, we can call the\n                  static method either using the class name or as the property\n                  of the constructor.\n                </li>\n              </ul>\n              <br />\n              <h3>39. Proxies</h3>\n              Proxy objects allow you to intercept certain operations and to\n              implement custom behaviors.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={proxies}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <i>\n                The Proxy object defines a target (an empty object here) and a\n                handler object, in which a get trap is implemented. Here, an\n                object that is proxied will not return undefined when getting\n                undefined properties, but will instead return the number 42.\n              </i>\n              <br />\n              <br />\n              <b>\n                The following terms are used when talking about the\n                functionality of proxies:\n              </b>\n              <br />\n              <ul>\n                <li>\n                  <b>handler: </b>Placeholder object which contains traps.\n                </li>\n                <li>\n                  <b>traps: </b>Methods that provide property access. (This is\n                  analogous to the concept of traps in operating systems.)\n                </li>\n                <li>\n                  <b>target: </b>Object which the proxy virtualizes. It is often\n                  used as storage backend for the proxy. Invariants (semantics\n                  that remain unchanged) regarding object non-extensibility or\n                  non-configurable properties are verified against the target.\n                </li>\n                <li>\n                  <b>invariants: </b>Semantics that remain unchanged when\n                  implementing custom operations are called invariants. If we\n                  violate the invariants of a handler, a TypeError will be\n                  thrown.\n                </li>\n              </ul>\n              <br />\n              <h3>40. What is the function of close () in JavaScript?</h3>\n              The function of close () is mainly used to close the latest\n              window. You have to write window.close() to make sure that this\n              command is clearly associated with a window object and not the\n              other JavaScript object.\n              <br />\n              <h3>41. Memory Management</h3>\n              <ul>\n                <li>\n                  JavaScript will automatically allocate memory when values are\n                  initially declared.\n                </li>\n                <li>\n                  The purpose of a garbage collector is to monitor memory\n                  allocation and determine when a block of allocated memory is\n                  no longer needed and reclaim it.{\" \"}\n                </li>\n                <li>\n                  A JavaScript object has a reference to its prototype (implicit\n                  reference) and to its properties values (explicit reference).\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>43. async and defer</h3>\n              Two modern features we can use to bypass the problem of the\n              blocking script — async and defer.\n              <br />\n              <br />\n              <ul>\n                <li>\n                  Scripts loaded using the \"async\" attribute will download the\n                  script without blocking rendering the page and will execute it\n                  as soon as the script finishes downloading.\n                </li>\n                <li>\n                  No guarantee that scripts will run in any specific order, only\n                  that they will not stop the rest of the page from displaying.\n                </li>\n                <li>\n                  It is best to use async when the scripts in the page run\n                  independently from each other and depend on no other script on\n                  the page.\n                </li>\n                <li>\n                  async should be used when we have a bunch of background\n                  scripts to load in, and we just want to get them in place as\n                  soon as possible.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <ul>\n                <li>\n                  Scripts loaded using the \"defer\" attribute will run in the\n                  order they appear in the page and execute them as soon as the\n                  script and content are downloaded.\n                </li>\n                <li>\n                  All the scripts with the defer attribute will load in the\n                  order they appear on the page.\n                </li>\n                <li>\n                  They won't run until the page content has all loaded, which is\n                  useful if our scripts depend on the DOM being in place.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <ul>\n                <li>\n                  44. async and defer both instruct the browser to download the\n                  scripts in a separate thread, while the rest of the page is\n                  downloading, so the page loading is not blocked by the\n                  scripts.\n                </li>\n                <li>\n                  2. If our scripts should be run immediately and they don't\n                  have any dependencies, then use async.\n                </li>\n              </ul>\n              <br />\n              <br />\n              If your scripts need to wait for parsing and depend on other\n              scripts and/or the DOM being in place, load them using defer.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={security}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(IntroJs);\n"]},"metadata":{},"sourceType":"module"}