{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/filterPlace.js\";\nimport React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\nconst titles = {\n  backgroundColor: \"#F0F8FF\",\n  padding: \"1px\",\n  fontSize: \"16px\"\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst filters = `\n//html\n  <input type = \"text\" [(ngModel)] = \"filterBy\" (keyup) = \"getUsers()\">\n    <div *ngFor=\"let user of filtersUser\"> {{user.name}}</div>',  })\n\n\nexport class AppComponent  {\n users: any[];\n filtersUser: any[];\n filterBy;\n\n constructor(private http:HttpClient){}\n\n ngOnInit(){\n   this.http.get('https://jsonplaceholder.typicode.com/users')\n        .subscribe(user=>{\n          this.users=user;\n          this.filtersUser=[...this.users]\n        })\n }\n getUsers(){\n     this.filtersUser = [...this.users.filter(user => {\n       user.name.includes(this.filterBy)})];\n  }\n}\n`.trim();\nconst liveInput = `\n//app.component.ts\n@Component({\n  selector: 'my-app',\n  template: '\n  <input #box (keyup) = 'onKey(box.value)' >\n    {{result}}',\n            })\n\nexport class HomeComponent {\n  values = '';\n  result = '';\n\n  constructor() { }\n\n  onKey(value: string) {\n    this.values=String(value).replace('a','');\n    this.result =(this.values).replace('a','');\n  }\n}\n`.trim();\nconst setname = `\n//app.component.ts\n@Component({\n  selector: 'app-root',\n  template: '\n  <p> Master controls {{names.length}} names</p>\n    <app-voters *ngFor=\"let name of names\" [name] = \"name\"></app-voters>\n        '})\n\nexport class AppComponent {\n  names = ['Dr IQ', '   ', '  Bombasto  '];\n}\n\n\n//voters.component.ts\n@Component({\n  selector: 'app-voters',\n  template: '<h4>{{name}}</h4>'\n})\n\nexport class VotersComponent {\n  @Input()\n  get name(): string { return this._name; }\n  set name(name: string) {\n    this._name = (name && name.trim()) || '<no name set>';\n  }\n  private _name = '';\n}\n`.trim();\nconst excell = `\n//app.component.ts\nimport * as XLSX from 'xlsx';\n\n@Component({\n  selector: 'app-root',\n  template: '<div>\n  <button (click) = \"exportexcel()\" > Export to Excel</button >\n\n    <table id=\"excel-table\">\n      <tr>\n        <th>Id</th>\n        <th>Name</th>\n        <th>Username</th>\n        <th>Email</th>\n      </tr>\n      <tr *ngFor=\"let item of userList\">\n      <td>{{ item.id }}</td>\n      <td>{{ item.name }}</td>\n      <td>{{ item.username }}</td>\n      <td>{{ item.email }}</td>\n                  </tr>\n                </table>\n              </div>',})\n\nexport class AppComponent {\n  fileName= 'ExcelSheet.xlsx';\n  userList = [\n    { \"id\": 1, \"name\": \"Leanne\", \"username\": \"Bret\", \"email\": \"Sincere@april.biz\" },\n    { \"id\": 2,\"name\": \"Ervin\", \"username\": \"Antonette\", \"email\": \"Shanna@melissa.tv\" },\n    { \"id\": 3,\"name\": \"Clement\",\"username\": \"Samantha\",\"email\": \"Nathan@yesenia.net\" },\n    { \"id\": 4,\"name\": \"Patricia\",\"username\": \"Karianne\",\"email\": \"Julianne@kory.org\" },\n    { \"id\": 5,\"name\": \"Chelsey\",\"username\": \"Kamren\",\"email\": \"Lucio@annie.ca\" }\n  ]\n\n  exportexcel(): void {\n       /* table id is passed over here */\n       let element = document.getElementById('excel-table');\n       const ws: XLSX.WorkSheet =XLSX.utils.table_to_sheet(element);\n\n       /* generate workbook and add the worksheet */\n       const wb: XLSX.WorkBook = XLSX.utils.book_new();\n       XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\n\n       /* save to file */\n       XLSX.writeFile(wb, this.fileName);\n\n    }\n}\n`.trim();\n\nclass FilterPlace extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"Filter-jsonPlaceholder\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: filters,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"Live Input\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: liveInput,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"No Name Set\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: setname,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"Export Excel\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: excell,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(FilterPlace);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/filterPlace.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","filters","trim","liveInput","setname","excell","FilterPlace","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst filters = `\n//html\n  <input type = \"text\" [(ngModel)] = \"filterBy\" (keyup) = \"getUsers()\">\n    <div *ngFor=\"let user of filtersUser\"> {{user.name}}</div>',  })\n\n\nexport class AppComponent  {\n users: any[];\n filtersUser: any[];\n filterBy;\n\n constructor(private http:HttpClient){}\n\n ngOnInit(){\n   this.http.get('https://jsonplaceholder.typicode.com/users')\n        .subscribe(user=>{\n          this.users=user;\n          this.filtersUser=[...this.users]\n        })\n }\n getUsers(){\n     this.filtersUser = [...this.users.filter(user => {\n       user.name.includes(this.filterBy)})];\n  }\n}\n`.trim();\n\nconst liveInput = `\n//app.component.ts\n@Component({\n  selector: 'my-app',\n  template: '\n  <input #box (keyup) = 'onKey(box.value)' >\n    {{result}}',\n            })\n\nexport class HomeComponent {\n  values = '';\n  result = '';\n\n  constructor() { }\n\n  onKey(value: string) {\n    this.values=String(value).replace('a','');\n    this.result =(this.values).replace('a','');\n  }\n}\n`.trim();\n\nconst setname = `\n//app.component.ts\n@Component({\n  selector: 'app-root',\n  template: '\n  <p> Master controls {{names.length}} names</p>\n    <app-voters *ngFor=\"let name of names\" [name] = \"name\"></app-voters>\n        '})\n\nexport class AppComponent {\n  names = ['Dr IQ', '   ', '  Bombasto  '];\n}\n\n\n//voters.component.ts\n@Component({\n  selector: 'app-voters',\n  template: '<h4>{{name}}</h4>'\n})\n\nexport class VotersComponent {\n  @Input()\n  get name(): string { return this._name; }\n  set name(name: string) {\n    this._name = (name && name.trim()) || '<no name set>';\n  }\n  private _name = '';\n}\n`.trim();\n\nconst excell = `\n//app.component.ts\nimport * as XLSX from 'xlsx';\n\n@Component({\n  selector: 'app-root',\n  template: '<div>\n  <button (click) = \"exportexcel()\" > Export to Excel</button >\n\n    <table id=\"excel-table\">\n      <tr>\n        <th>Id</th>\n        <th>Name</th>\n        <th>Username</th>\n        <th>Email</th>\n      </tr>\n      <tr *ngFor=\"let item of userList\">\n      <td>{{ item.id }}</td>\n      <td>{{ item.name }}</td>\n      <td>{{ item.username }}</td>\n      <td>{{ item.email }}</td>\n                  </tr>\n                </table>\n              </div>',})\n\nexport class AppComponent {\n  fileName= 'ExcelSheet.xlsx';\n  userList = [\n    { \"id\": 1, \"name\": \"Leanne\", \"username\": \"Bret\", \"email\": \"Sincere@april.biz\" },\n    { \"id\": 2,\"name\": \"Ervin\", \"username\": \"Antonette\", \"email\": \"Shanna@melissa.tv\" },\n    { \"id\": 3,\"name\": \"Clement\",\"username\": \"Samantha\",\"email\": \"Nathan@yesenia.net\" },\n    { \"id\": 4,\"name\": \"Patricia\",\"username\": \"Karianne\",\"email\": \"Julianne@kory.org\" },\n    { \"id\": 5,\"name\": \"Chelsey\",\"username\": \"Kamren\",\"email\": \"Lucio@annie.ca\" }\n  ]\n\n  exportexcel(): void {\n       /* table id is passed over here */\n       let element = document.getElementById('excel-table');\n       const ws: XLSX.WorkSheet =XLSX.utils.table_to_sheet(element);\n\n       /* generate workbook and add the worksheet */\n       const wb: XLSX.WorkBook = XLSX.utils.book_new();\n       XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\n\n       /* save to file */\n       XLSX.writeFile(wb, this.fileName);\n\n    }\n}\n`.trim();\n\nclass FilterPlace extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Filter-jsonPlaceholder</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={filters}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Live Input</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={liveInput}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <h3>No Name Set</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={setname}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Export Excel</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={excell}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(FilterPlace);\n"]},"metadata":{},"sourceType":"module"}