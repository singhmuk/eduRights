{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/ml/deepMl/leanearRegression.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport ScatterPlot from '../../../assets/ML/scatterplot.JPG';\nimport ErrorEqu from '../../../assets/ML/error_equation.jpg';\nimport LinearEqu from '../../../assets/ML/linear_equation.png';\nimport Equations from '../../../assets/ML/equation.jpg';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst redesign = {\n  height: 350,\n  width: 600\n};\nconst oneVarri = `\nimport pandas as pd\nimport numpy as np\nfrom sklearn import linear_model\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('homeprices.csv')\n\n%matplotlib inline\nplt.xlabel('area')\nplt.ylabel('price')\nplt.scatter(df.area,df.price,color='red',marker='+')\n\nnew_df = df.drop('price',axis='columns')\nprice = df.price\n\nreg = linear_model.LinearRegression()                         # Create linear regression object\nreg.fit(new_df,price)\n\nreg.predict([[3300]])                                         #Predict price of a home with area = 3300 sqr ft.\nreg.coef_\nreg.intercept_\n\n\n#Y = m * X + b (m is coefficient and b is intercept)\n3300*135.78767123 + 180616.43835616432\n\nreg.predict([[5000]])\n\n#Generate CSV file with list of home price predictions\narea_df = pd.read_csv(\"areas.csv\")\np = reg.predict(area_df)\narea_df['prices']=p\n\narea_df.to_csv(\"prediction.csv\")\n`.trim();\nconst linearPy = `\n# Data Preprocessing Template\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndataset = pd.read_csv('Data.csv')\n\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, 3].values\n\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n\nfrom sklearn.preprocessing import StandardScaler                                    # Feature Scaling\nsc_X = StandardScaler()\nsc_y = StandardScaler()\n\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\n\ny_train = sc_y.fit_transform(y_train)\n`.trim();\nconst independent = `\nimport pandas as pd\nimport numpy as np\nfrom sklearn import linear_model\n\ndf = pd.read_csv('homeprices.csv')\n\ndf.bedrooms.median()                                                          #Fill NA values with median value of a column.\ndf.bedrooms = df.bedrooms.fillna(df.bedrooms.median())\n\nreg = linear_model.LinearRegression()\nreg.fit(df.drop('price',axis='columns'),df.price)\n\nreg.predict([[3000, 3, 40]])\n112.06244194*3000 + 23388.88007794*3 + -3231.71790863*40 + 221323.00186540384\n\nreg.predict([[2500, 4, 5]])\n`.trim();\nconst testings = `\nif __name__ == \"__main__\":\n    import matplotlib.pyplot as plt\n    from sklearn.model_selection import train_test_split\n    from sklearn import datasets\n\n    def mean_squared_error(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n\n    X, y = datasets.make_regression(n_samples=100, n_features=1, noise=20, random_state=4)\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1234)\n\n    regressor = LinearRegression(learning_rate=0.01, n_iters=1000)\n    regressor.fit(X_train, y_train)\n    predictions = regressor.predict(X_test)\n\n    mse = mean_squared_error(y_test, predictions)\n    print(\"MSE:\", mse)\n\n    accu = r2_score(y_test, predictions)\n    print(\"Accuracy:\", accu)\n\n    y_pred_line = regressor.predict(X)\n    cmap = plt.get_cmap(\"viridis\")\n    fig = plt.figure(figsize=(8, 6))\n    m1 = plt.scatter(X_train, y_train, color=cmap(0.9), s=10)\n    m2 = plt.scatter(X_test, y_test, color=cmap(0.5), s=10)\n    plt.plot(X, y_pred_line, color=\"black\", linewidth=2, label=\"Prediction\")\n    plt.show()`.trim();\n\nclass LeanearRegression extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"Regression\"), \"Used to find the relationship between variables.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, \"R-Squared: \"), \" If there are no relationship between the values of x-axis and the values of y-axis then linear regression can not be used to predict anything.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), \"The relationship is measured with a value of r-squared. The r-squared value ranges from -1 to 1, where 0 means no relationship, and 1, or -1, means 100% related.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"Predict Future Values: \"), \"Now we can use the information we have gathered to predict future values.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"Ex.\"), \" Predict the speed of a 10 years old car. \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"Logistic regression\"), \"It is a classification algorithm, used to predict binary outcomes for a given set of Independent Variables. The dependent Variables outcome is discrete.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"How is linear and logistic regression different\"), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"Linear Regration\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, \"Logistic Regression\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"Used to solve Regression problems. The response Variable are continuous in nature. It helps estimate the dependent Variable in the Independent Variable. Is a straight line.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"Used to solve classification Problems. The response variable is categorical in nature. It helps calculate the possibility of a particular event taking place. An\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, \" S-curve (S = Sigmoid)\"), \".\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"Linear regression is used to predict the continuous dependent variable using a given set of independent variables.\"))), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, \"Logistic Regression is used to predict the categorical dependent variable using a given set of independent variables.\")))), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \"We predict the value of continuous variables.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, \"We predict the values of categorical variables.\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, \"We find the best fit line, by which we can easily predict the output.\"))), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, \"We find the S-curve by which we can classify the samples.\")))), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, \"Least square estimation method is used for estimation of accuracy.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Maximum likelihood estimation method is used for estimation of accuracy.\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, \"The output must be a continuous value, such as price, age, etc.\"))), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, \"The output must be a Categorical value such as 0 or 1, Yes or No, etc.\")))), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"There may be collinearity between the independent variables.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, \"There should not be collinearity between the independent variable.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, \"Applications of Logistic Regression\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, \"Image Segmentation and Categorization Geographic Image Processing.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, \"Handwriting recognition Healthcare.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, \"Analyzing a group of over million people for myocardial infarction within a period of 10 years.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, \"Prediction whether a person is depressed/ not based on bag of words from the corpus seems to be conveniently solvable using logistic regression and SVM.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, \"Linear Regression With One Variable\"), \"Below table represents current home prices in monroe township based on square feet area, new jersey.\", React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, \"2600\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, \"550000\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, \"3000\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \"565000\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, \"3200\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, \"610000\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, \"3600\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, \"680000\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, \"4000\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, \"725000\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, \"Problem Statement :\"), \" Given above data build a machine learning model that can predict home prices based on square feet area.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }), \"You can represent values in above table as a scatter plot (values are shown in red markers). After that one can draw a straight line that best fits values on chart.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: ScatterPlot,\n      alt: \"ScatterPlot\",\n      className: \"responsive\",\n      style: redesign,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }), \"You can draw multiple lines like this but we choose the one where total sum of error is minimum.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: ErrorEqu,\n      alt: \"ErrorEqu\",\n      className: \"responsive\",\n      style: redesign,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }), \"Home prices can be presented as following equation.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, \"home price = m * (area) + b\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }), \"Generic form of same equation is,\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: LinearEqu,\n      alt: \"LinearEqu\",\n      className: \"responsive\",\n      style: redesign,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: oneVarri,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, \"with Python\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: linearPy,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, \"Linear Regression With Multi Variable\"), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, \"Area\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, \"Bedroom\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, \"Age\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, \"Price\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, \"2600\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, \"3\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, \"20\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, \"550000\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, \"3000\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, \"4\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, \"15\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, \"565000\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, \"3200\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, \" \"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, \"18\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, \"610000\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, \"3600\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, \"3\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, \"30\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, \"595000\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, \"4000\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, \"5\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, \"8\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, \"760000\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, \"4100\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, \"6\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, \"8\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, \"810000\"))), \"Given the Home Price find out price of a home that has, 3000 sqr ft area, 3 bedroom, 40 years old 2500 sqr ft area, 5 bedroom, 5 years old\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }), \"We will use regression with multiple varriables, So price can be calculated using.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: Equations,\n      alt: \"Equations\",\n      className: \"responsive\",\n      style: redesign,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }), \"Here, area, bedroom, age are independent varriable or features whereas price is dependent varriable.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: independent,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, \"Testing\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: testings,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(LeanearRegression);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/ml/deepMl/leanearRegression.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","ScatterPlot","ErrorEqu","LinearEqu","Equations","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","redesign","height","width","oneVarri","trim","linearPy","independent","testings","LeanearRegression","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport ScatterPlot from '../../../assets/ML/scatterplot.JPG'\nimport ErrorEqu from '../../../assets/ML/error_equation.jpg'\nimport LinearEqu from '../../../assets/ML/linear_equation.png'\nimport Equations from '../../../assets/ML/equation.jpg'\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst redesign = {\n  height: 350,\n  width: 600\n}\n\nconst oneVarri = `\nimport pandas as pd\nimport numpy as np\nfrom sklearn import linear_model\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('homeprices.csv')\n\n%matplotlib inline\nplt.xlabel('area')\nplt.ylabel('price')\nplt.scatter(df.area,df.price,color='red',marker='+')\n\nnew_df = df.drop('price',axis='columns')\nprice = df.price\n\nreg = linear_model.LinearRegression()                         # Create linear regression object\nreg.fit(new_df,price)\n\nreg.predict([[3300]])                                         #Predict price of a home with area = 3300 sqr ft.\nreg.coef_\nreg.intercept_\n\n\n#Y = m * X + b (m is coefficient and b is intercept)\n3300*135.78767123 + 180616.43835616432\n\nreg.predict([[5000]])\n\n#Generate CSV file with list of home price predictions\narea_df = pd.read_csv(\"areas.csv\")\np = reg.predict(area_df)\narea_df['prices']=p\n\narea_df.to_csv(\"prediction.csv\")\n`.trim();\n\nconst linearPy = `\n# Data Preprocessing Template\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndataset = pd.read_csv('Data.csv')\n\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, 3].values\n\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n\nfrom sklearn.preprocessing import StandardScaler                                    # Feature Scaling\nsc_X = StandardScaler()\nsc_y = StandardScaler()\n\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\n\ny_train = sc_y.fit_transform(y_train)\n`.trim();\n\nconst independent = `\nimport pandas as pd\nimport numpy as np\nfrom sklearn import linear_model\n\ndf = pd.read_csv('homeprices.csv')\n\ndf.bedrooms.median()                                                          #Fill NA values with median value of a column.\ndf.bedrooms = df.bedrooms.fillna(df.bedrooms.median())\n\nreg = linear_model.LinearRegression()\nreg.fit(df.drop('price',axis='columns'),df.price)\n\nreg.predict([[3000, 3, 40]])\n112.06244194*3000 + 23388.88007794*3 + -3231.71790863*40 + 221323.00186540384\n\nreg.predict([[2500, 4, 5]])\n`.trim();\n\n\n\n\nconst testings = `\nif __name__ == \"__main__\":\n    import matplotlib.pyplot as plt\n    from sklearn.model_selection import train_test_split\n    from sklearn import datasets\n\n    def mean_squared_error(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n\n    X, y = datasets.make_regression(n_samples=100, n_features=1, noise=20, random_state=4)\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1234)\n\n    regressor = LinearRegression(learning_rate=0.01, n_iters=1000)\n    regressor.fit(X_train, y_train)\n    predictions = regressor.predict(X_test)\n\n    mse = mean_squared_error(y_test, predictions)\n    print(\"MSE:\", mse)\n\n    accu = r2_score(y_test, predictions)\n    print(\"Accuracy:\", accu)\n\n    y_pred_line = regressor.predict(X)\n    cmap = plt.get_cmap(\"viridis\")\n    fig = plt.figure(figsize=(8, 6))\n    m1 = plt.scatter(X_train, y_train, color=cmap(0.9), s=10)\n    m2 = plt.scatter(X_test, y_test, color=cmap(0.5), s=10)\n    plt.plot(X, y_pred_line, color=\"black\", linewidth=2, label=\"Prediction\")\n    plt.show()`.trim();\n\n\nclass LeanearRegression extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Regression</h3>\n              Used to find the relationship between variables.\n              <br />\n              <ul>\n                <li><b>R-Squared: </b> If there are no relationship between the values of x-axis and the values of\n                  y-axis then linear regression can not be used to predict anything.\n                  <br />\n                  The relationship is measured with a value of r-squared. The r-squared value ranges from -1 to 1, where 0 means no relationship,\n                  and 1, or -1, means 100% related.</li>\n                <br />\n\n                <li><b>Predict Future Values: </b>Now we can use the information we have gathered to predict future values.\n                  <br />\n                  <b>Ex.</b> Predict the speed of a 10 years old car. </li>\n              </ul>\n              <br />\n\n              <h3>Logistic regression</h3>\n              It is a classification algorithm, used to predict binary outcomes for a given set of Independent Variables. The\n              dependent Variables outcome is discrete.\n              <br />\n              <br />\n\n              <b>How is linear and logistic regression different</b>\n\n              <table>\n                <tr>\n                  <th>Linear Regration</th>\n                  <th>Logistic Regression</th>\n                </tr>\n                <tr>\n                  <td>Used to solve Regression problems. The response Variable are continuous in nature. It helps\n                    estimate the dependent Variable in the Independent Variable. Is a straight line.</td>\n                  <td>Used to solve classification Problems. The response variable is categorical in nature. It helps calculate the possibility of a\n                    particular event taking place. An<b> S-curve (S = Sigmoid)</b>.</td>\n                </tr>\n                <tr>\n                  <td><i><b>Linear regression is used to predict the continuous dependent variable using a given set of independent variables.</b></i></td>\n                  <td><i><b>Logistic Regression is used to predict the categorical dependent variable using a given set of independent variables.</b></i></td>\n                </tr>\n                <tr>\n                  <td>We predict the value of continuous variables.</td>\n                  <td>We predict the values of categorical variables.</td>\n                </tr>\n                <tr>\n                  <td><i><b>We find the best fit line, by which we can easily predict the output.</b></i></td>\n                  <td><i><b>We find the S-curve by which we can classify the samples.</b></i></td>\n                </tr>\n                <tr>\n                  <td>Least square estimation method is used for estimation of accuracy.</td>\n                  <td>Maximum likelihood estimation method is used for estimation of accuracy.</td>\n                </tr>\n                <tr>\n                  <td><i><b>The output must be a continuous value, such as price, age, etc.</b></i></td>\n                  <td><i><b>The output must be a Categorical value such as 0 or 1, Yes or No, etc.</b></i></td>\n                </tr>\n                <tr>\n                  <td>There may be collinearity between the independent variables.</td>\n                  <td>There should not be collinearity between the independent variable.</td>\n                </tr>\n              </table>\n              <br />\n\n              <h3>Applications of Logistic Regression</h3>\n              <ul>\n                <li>Image Segmentation and Categorization Geographic Image Processing.</li>\n                <li>Handwriting recognition Healthcare.</li>\n                <li>Analyzing a group of over million people for myocardial infarction within a period of 10 years.</li>\n                <li>Prediction whether a person is depressed/ not based on bag of words from the corpus seems to be\n                  conveniently solvable using logistic regression and SVM.</li>\n              </ul>\n              <br />\n\n              <h3>Linear Regression With One Variable</h3>\n              Below table represents current home prices in monroe township based on square feet area,\n              new jersey.\n              <table>\n                <tr>\n                  <th>2600</th>\n                  <th>550000</th>\n                </tr>\n                <tr>\n                  <td>3000</td>\n                  <td>565000</td>\n                </tr>\n                <tr>\n                  <td>3200</td>\n                  <td>610000</td>\n                </tr>\n                <tr>\n                  <td>3600</td>\n                  <td>680000</td>\n                </tr>\n                <tr>\n                  <td>4000</td>\n                  <td>725000</td>\n                </tr>\n              </table>\n              <br />\n\n              <b>Problem Statement :</b> Given above data build a machine learning model that can predict\n              home prices based on square feet area.\n              <br />\n              You can represent values in above table as a scatter plot (values are shown in red markers).\n              After that one can draw a straight line that best fits values on chart.\n              <br />\n              <img src={ScatterPlot} alt=\"ScatterPlot\" className=\"responsive\" style={redesign} />\n              <br />\n              You can draw multiple lines like this but we choose the one where total sum of error is\n              minimum.\n              <br />\n              <img src={ErrorEqu} alt=\"ErrorEqu\" className=\"responsive\" style={redesign} />\n              <br />\n              Home prices can be presented as following equation.\n              <br />\n              <i><b>home price = m * (area) + b</b></i>\n              <br />\n              Generic form of same equation is,\n              <br />\n              <img src={LinearEqu} alt=\"LinearEqu\" className=\"responsive\" style={redesign} />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={oneVarri}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>with Python</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={linearPy}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Linear Regression With Multi Variable</h3>\n              <table>\n                <tr>\n                  <th>Area</th>\n                  <th>Bedroom</th>\n                  <th>Age</th>\n                  <th>Price</th>\n                </tr>\n                <tr>\n                  <td>2600</td>\n                  <td>3</td>\n                  <td>20</td>\n                  <td>550000</td>\n                </tr>\n                <tr>\n                  <td>3000</td>\n                  <td>4</td>\n                  <td>15</td>\n                  <td>565000</td>\n                </tr>\n                <tr>\n                  <td>3200</td>\n                  <td> </td>\n                  <td>18</td>\n                  <td>610000</td>\n                </tr>\n                <tr>\n                  <td>3600</td>\n                  <td>3</td>\n                  <td>30</td>\n                  <td>595000</td>\n                </tr>\n                <tr>\n                  <td>4000</td>\n                  <td>5</td>\n                  <td>8</td>\n                  <td>760000</td>\n                </tr>\n                <tr>\n                  <td>4100</td>\n                  <td>6</td>\n                  <td>8</td>\n                  <td>810000</td>\n                </tr>\n              </table>\n              Given the Home Price find out price of a home that has,\n              3000 sqr ft area, 3 bedroom, 40 years old\n              2500 sqr ft area, 5 bedroom, 5 years old\n              <br />\n              <br />\n              We will use regression with multiple varriables, So price can be calculated using.\n              <br />\n              <img src={Equations} alt=\"Equations\" className=\"responsive\" style={redesign} />\n              <br />\n              Here, area, bedroom, age are independent varriable or features whereas price is dependent varriable.\n              <br />\n\n\n              <div style={titles}>\n                <PrismCode\n                  code={independent}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n\n\n              <b>Testing</b>\n              <div style={titles}>\n                <PrismCode\n                  code={testings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(LeanearRegression));\n"]},"metadata":{},"sourceType":"module"}