{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var serverApp=\"\\nimport React, { useState, useRef } from 'react';\\nimport { Container, Card, CardContent, makeStyles, Grid, TextField, Button } from '@material-ui/core';\\nimport QRCode from 'qrcode';\\nimport QrReader from 'react-qr-reader';\\n\\n\\nfunction App() {\\n  const [text, setText] = useState('');\\n  const [imageUrl, setImageUrl] = useState('');\\n  const [scanResultFile, setScanResultFile] = useState('');\\n  const [scanResultWebCam, setScanResultWebCam] = useState('');\\n  const classes = useStyles();\\n  const qrRef = useRef(null);\\n\\n  const generateQrCode = async () => {\\n    try {\\n      const response = await QRCode.toDataURL(text);\\n      setImageUrl(response);\\n    }\\n    catch (err) { console.log(err); }\\n  }\\n  const handleErrorFile = (err) => { console.log(err); }\\n  const handleScanFile = (result) => {\\n    if (result) { setScanResultFile(result); }\\n  }\\n  const onScanFile = () => { qrRef.current.openImageDialog(); }\\n  const handleErrorWebCam = (error) => { console.log(error); }\\n  const handleScanWebCam = (result) => {\\n    if (result) { setScanResultWebCam(result); }\\n  }\\n\\n  return (\\n    <Container className={classes.conatiner}>\\n      <Card>\\n        <h2 className={classes.title}>Generate Download & Scan QR Code</h2>\\n        <CardContent>\\n          <Grid container spacing={2}>\\n            <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\\n              <TextField label=\\\"Enter Text\\\" onChange={(e) => setText(e.target.value)} />\\n              <Button className={classes.btn} variant=\\\"contained\\\"\\n                color=\\\"primary\\\" onClick={() => generateQrCode()}>Generate</Button>\\n              <br />\\n              <br />\\n              <br />\\n              {imageUrl ? (\\n                <a href={imageUrl} download>\\n                  <img src={imageUrl} alt=\\\"img\\\" />\\n                </a>) : null}\\n            </Grid>\\n\\n            <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\\n              <Button className={classes.btn} variant=\\\"contained\\\" onClick={onScanFile}>Scan Qr Code</Button>\\n              <QrReader\\n                ref={qrRef}\\n                delay={300}\\n                style={{ width: '100%' }}\\n                onError={handleErrorFile}\\n                onScan={handleScanFile}\\n                legacyMode\\n              />\\n              <h3>Scanned Code: {scanResultFile}</h3>\\n            </Grid>\\n            <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\\n              <h3>Qr Code Scan by Web Cam</h3>\\n              <QrReader\\n                delay={300}\\n                style={{ width: '100%' }}\\n                onError={handleErrorWebCam}\\n                onScan={handleScanWebCam}\\n              />\\n              <h3>Scanned By WebCam Code: {scanResultWebCam}</h3>\\n            </Grid>\\n          </Grid>\\n        </CardContent>\\n      </Card>\\n    </Container>\\n  );\\n}\\n\\nconst useStyles = makeStyles((theme) => ({\\n  conatiner: {\\n    marginTop: 10\\n  },\\n  title: {\\n    display: 'flex',\\n    justifyContent: 'center',\\n    alignItems: 'center',\\n    background: '#3f51b5',\\n    color: '#fff',\\n    padding: 20\\n  },\\n  btn: {\\n    marginTop: 10,\\n    marginBottom: 20\\n  }\\n}));\\n\".trim();var reCapcha=\"\\nimport React from \\\"react\\\";\\nimport ReCAPTCHA from \\\"react-google-recaptcha\\\";\\n\\nconst DELAY = 1500;\\n\\nclass App extends React.Component {\\n  constructor(props, ...args) {\\n    super(props, ...args);\\n    this.state = {\\n      callback: \\\"not fired\\\",\\n      value: \\\"[empty]\\\",\\n      load: false,\\n      expired: \\\"false\\\"\\n    };\\n    this._reCaptchaRef = React.createRef();\\n  }\\n\\n  componentDidMount() {\\n    setTimeout(() => {\\n      this.setState({ load: true });\\n    }, DELAY);\\n  }\\n\\n  handleChange = value => {\\n    this.setState({ value });\\n    // if value is null recaptcha expired\\n    if (value === null) this.setState({ expired: \\\"true\\\" });\\n  };\\n\\n  asyncScriptOnLoad = () => { this.setState({ callback: \\\"called!\\\" }); };\\n\\n  render() {\\n    const { value, callback, load, expired } = this.state || {};\\n    return (\\n      <div className=\\\"App\\\">\\n        <h3>Recaptcha loaded callback: {callback}</h3>\\n        <h5>Recaptcha value: {value}</h5>\\n        <h5>Expired: {expired}</h5>\\n        {load && (\\n          <ReCAPTCHA\\n            style={{ display: \\\"inline-block\\\" }}\\n            theme=\\\"dark\\\"\\n            ref={this._reCaptchaRef}\\n            sitekey={\\\"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\\\"}\\n            onChange={this.handleChange}\\n            asyncScriptOnLoad={this.asyncScriptOnLoad}\\n          />\\n        )}\\n      </div>\\n    );\\n  }\\n}\\n\".trim();var QrCode=/*#__PURE__*/function(_Component){_inherits(QrCode,_Component);function QrCode(){_classCallCheck(this,QrCode);return _possibleConstructorReturn(this,_getPrototypeOf(QrCode).apply(this,arguments));}_createClass(QrCode,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"react qrcode generation scanner\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:serverApp,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"React reCapcha\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:reCapcha,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return QrCode;}(Component);export default withStyles(styles)(QrCode);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/mern/projects/qrSccaners.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","serverApp","trim","reCapcha","QrCode","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,0BAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CAGA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,eAAe,CAAE,SAAnB,CAA8BC,OAAO,CAAE,KAAvC,CAA8CC,QAAQ,CAAE,MAAxD,CAAf,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,KAAK,CAAE,CACLC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH,CAELN,OAAO,CAAEG,KAAK,CAACG,OAAN,CAAc,CAAd,CAFJ,CADgB,CAKvBC,QAAQ,CAAE,CACRF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA,CALa,CAQvBE,SAAS,CAAE,CACTC,SAAS,CAAE,QADF,CARY,CAAL,EAApB,CAcA,GAAMC,CAAAA,SAAS,CAAG,smGAiGhBC,IAjGgB,EAAlB,CAmGA,GAAMC,CAAAA,QAAQ,CAAG,s3CAqDfD,IArDe,EAAjB,C,GAwDME,CAAAA,M,sRACgB,CAClBC,UAAU,CAAC,iBAAMvB,CAAAA,KAAK,CAACwB,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAACZ,KAA1B,EACE,8BAAI,oBAAC,OAAD,MAAJ,CADF,CADF,CADF,CAME,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEY,OAAO,CAACZ,KAA1B,EACE,oBAAC,IAAD,MACE,gEADF,CAEE,2BAAK,KAAK,CAAEN,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEY,SADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAFF,CASE,8BATF,CAWE,+CAXF,CAYE,2BAAK,KAAK,CAAEZ,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEc,QADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAZF,CADF,CADF,CANF,CADF,CAiCD,C,oBAvCkBtB,S,EA0CrB,cAAgBI,CAAAA,UAAU,CAACQ,MAAD,CAAV,CAAmBW,MAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst serverApp = `\nimport React, { useState, useRef } from 'react';\nimport { Container, Card, CardContent, makeStyles, Grid, TextField, Button } from '@material-ui/core';\nimport QRCode from 'qrcode';\nimport QrReader from 'react-qr-reader';\n\n\nfunction App() {\n  const [text, setText] = useState('');\n  const [imageUrl, setImageUrl] = useState('');\n  const [scanResultFile, setScanResultFile] = useState('');\n  const [scanResultWebCam, setScanResultWebCam] = useState('');\n  const classes = useStyles();\n  const qrRef = useRef(null);\n\n  const generateQrCode = async () => {\n    try {\n      const response = await QRCode.toDataURL(text);\n      setImageUrl(response);\n    }\n    catch (err) { console.log(err); }\n  }\n  const handleErrorFile = (err) => { console.log(err); }\n  const handleScanFile = (result) => {\n    if (result) { setScanResultFile(result); }\n  }\n  const onScanFile = () => { qrRef.current.openImageDialog(); }\n  const handleErrorWebCam = (error) => { console.log(error); }\n  const handleScanWebCam = (result) => {\n    if (result) { setScanResultWebCam(result); }\n  }\n\n  return (\n    <Container className={classes.conatiner}>\n      <Card>\n        <h2 className={classes.title}>Generate Download & Scan QR Code</h2>\n        <CardContent>\n          <Grid container spacing={2}>\n            <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n              <TextField label=\"Enter Text\" onChange={(e) => setText(e.target.value)} />\n              <Button className={classes.btn} variant=\"contained\"\n                color=\"primary\" onClick={() => generateQrCode()}>Generate</Button>\n              <br />\n              <br />\n              <br />\n              {imageUrl ? (\n                <a href={imageUrl} download>\n                  <img src={imageUrl} alt=\"img\" />\n                </a>) : null}\n            </Grid>\n\n            <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n              <Button className={classes.btn} variant=\"contained\" onClick={onScanFile}>Scan Qr Code</Button>\n              <QrReader\n                ref={qrRef}\n                delay={300}\n                style={{ width: '100%' }}\n                onError={handleErrorFile}\n                onScan={handleScanFile}\n                legacyMode\n              />\n              <h3>Scanned Code: {scanResultFile}</h3>\n            </Grid>\n            <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n              <h3>Qr Code Scan by Web Cam</h3>\n              <QrReader\n                delay={300}\n                style={{ width: '100%' }}\n                onError={handleErrorWebCam}\n                onScan={handleScanWebCam}\n              />\n              <h3>Scanned By WebCam Code: {scanResultWebCam}</h3>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n    </Container>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  conatiner: {\n    marginTop: 10\n  },\n  title: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    background: '#3f51b5',\n    color: '#fff',\n    padding: 20\n  },\n  btn: {\n    marginTop: 10,\n    marginBottom: 20\n  }\n}));\n`.trim();\n\nconst reCapcha = `\nimport React from \"react\";\nimport ReCAPTCHA from \"react-google-recaptcha\";\n\nconst DELAY = 1500;\n\nclass App extends React.Component {\n  constructor(props, ...args) {\n    super(props, ...args);\n    this.state = {\n      callback: \"not fired\",\n      value: \"[empty]\",\n      load: false,\n      expired: \"false\"\n    };\n    this._reCaptchaRef = React.createRef();\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({ load: true });\n    }, DELAY);\n  }\n\n  handleChange = value => {\n    this.setState({ value });\n    // if value is null recaptcha expired\n    if (value === null) this.setState({ expired: \"true\" });\n  };\n\n  asyncScriptOnLoad = () => { this.setState({ callback: \"called!\" }); };\n\n  render() {\n    const { value, callback, load, expired } = this.state || {};\n    return (\n      <div className=\"App\">\n        <h3>Recaptcha loaded callback: {callback}</h3>\n        <h5>Recaptcha value: {value}</h5>\n        <h5>Expired: {expired}</h5>\n        {load && (\n          <ReCAPTCHA\n            style={{ display: \"inline-block\" }}\n            theme=\"dark\"\n            ref={this._reCaptchaRef}\n            sitekey={\"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\"}\n            onChange={this.handleChange}\n            asyncScriptOnLoad={this.asyncScriptOnLoad}\n          />\n        )}\n      </div>\n    );\n  }\n}\n`.trim();\n\n\nclass QrCode extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>react qrcode generation scanner</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={serverApp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>React reCapcha</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={reCapcha}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(QrCode));\n"]},"metadata":{},"sourceType":"module"}