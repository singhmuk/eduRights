{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import\"../../ReactJs/styles.css\";import Sidebar from\"../sidebar\";import PrismCode from\"../../ReactJs/prismCode\";var titles={backgroundColor:\"#F0F8FF\",padding:\"1px\",fontSize:\"16px\"};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var myProvider=\"\\nexport class ViewProvider {\\n  name: string = 'Mukesh';\\n}\\n\\nexport class ViewProvider2 {\\n  name: string = 'Rakesh';\\n  getName() {\\n    console.log(this.name);\\n  }\\n}\\n\\n@Component({\\n  viewProviders: [ViewProvider, ViewProvider2],\\n})\\nexport class AppComponent {\\n  constructor(public pr: ViewProvider, public pr2: ViewProvider2) {\\n    console.log(pr.name);\\n    pr2.getName();\\n  }\\n}\\n\".trim();var custEle=\"\\n@Component({\\n  selector: 'my-custom-element',\\n  template: '<h1>Hello, World!</h1>'\\n})\\nexport class MyCustomElementComponent {}\".trim();var custEle2=\"\\nimport { NgModule } from '@angular/core';\\nimport { BrowserModule } from '@angular/platform-browser';\\nimport { createCustomElement } from '@angular/elements';\\nimport { MyCustomElementComponent } from './my-custom-element.component';\\n\\n@NgModule({\\n  imports: [BrowserModule],\\n  declarations: [MyCustomElementComponent],\\n  entryComponents: [MyCustomElementComponent]\\n})\\nexport class MyCustomElementModule {\\n  constructor() {\\n    const customElement = createCustomElement(MyCustomElementComponent, { injector: this.injector });\\n    customElements.define('my-custom-element', customElement);\\n  }\\n  ngDoBootstrap() {}\\n}\\n\".trim();var custEle3=\"\\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\\nimport { MyCustomElementModule } from './my-custom-element.module';\\n\\nplatformBrowserDynamic().bootstrapModule(MyCustomElementModule);\\n\".trim();var custEle4=\"<my-custom-element></my-custom-element>\".trim();var transferCust=\"\\nimport { Component, Input, Injector } from '@angular/core';\\nimport { createCustomElement } from '@angular/elements';\\n\\n@Component({\\n  selector: 'my-angular-component',\\n  templateUrl: './my-angular-component.component.html',\\n  styleUrls: ['./my-angular-component.component.css']\\n})\\nexport class MyAngularComponent {\\n  @Input() title: string;\\n}\\n\".trim();var transferCust2=\"\\n@Component({\\n  selector: 'my-angular-component',\\n  templateUrl: './my-angular-component.component.html',\\n  styleUrls: ['./my-angular-component.component.css'],\\n  // Use \\\"viewProviders\\\" to make the component available to its own template\\n  viewProviders: [{ provide: MyAngularComponent, useValue: MyAngularComponent }]\\n})\\nexport class MyAngularComponent extends HTMLElement {\\n  @Input() title: string;\\n\\n  constructor(private injector: Injector) {\\n    super();\\n  }\\n\\n  connectedCallback() {\\n    // Create the Angular element and attach it to the custom element's shadow DOM\\n    const angularElement = createCustomElement(MyAngularComponent, { injector: this.injector });\\n    customElements.define('my-custom-element', angularElement);\\n    const shadowRoot = this.attachShadow({ mode: 'open' });\\n    shadowRoot.appendChild(document.createElement('my-custom-element'));\\n  }\\n}\\n\".trim();var transferCust3=\"<my-angular-component title=\\\"Hello World\\\"></my-angular-component>\".trim();var viewChilds=\"\\n//html\\n{{ empSalery }}\\n\\n\\n//child.ts\\nexport class ChildCompo {\\n  empSalery = 0;\\n\\n  childMethod() {\\n    this.empSalery += 500;\\n  }\\n\\n  childMethod2() {\\n    this.empSalery -= 500;\\n  }\\n}\\n  \\n  \\n//app.component.ts\\n//html\\n<button (click)=\\\"empIncreaseSalery()\\\">Inc</button>\\n<button (click)=\\\"empDecreSalery()\\\">Din</button>\\n    <child></child>\\n\\n\\nimport { ChildCompo } from './child';\\nexport class AppComponent {\\n  @ViewChild(ChildCompo)\\n  ChildCompo!: ChildCompo;\\n\\n  empIncreaseSalery() {\\n    this.ChildCompo.childMethod();\\n  }\\n\\n  empDecreSalery() {\\n    this.ChildCompo.childMethod2();\\n  }\\n}\\n  \".trim();var ViewContainerRef=\"let componentRef = viewContainerRef.createComponent(componentFactory);\".trim();var AngularDir=/*#__PURE__*/function(_Component){_inherits(AngularDir,_Component);function AngularDir(){_classCallCheck(this,AngularDir);return _possibleConstructorReturn(this,_getPrototypeOf(AngularDir).apply(this,arguments));}_createClass(AngularDir,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Custom Element : npm install @angular/elements\"),\"Angular Custom Elements is a feature that allows Angular components to be used as standalone custom elements in HTML. This means that an Angular component can be used in any HTML page, regardless of whether it is an Angular application or not.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"To create an Angular custom element, we can use the @angular/elements package and the createCustomElement function. Here is an example of how to create a simple Angular custom element:\",React.createElement(\"br\",null),React.createElement(\"ol\",null,React.createElement(\"li\",null,\"First, create a new Angular component using the @Component decorator:\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:custEle,language:\"js\",plugins:[\"line-numbers\"]}))),React.createElement(\"br\",null),React.createElement(\"li\",null,\"Next, convert the component into a custom element using the createCustomElement function from the @angular/elements package:\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:custEle2,language:\"js\",plugins:[\"line-numbers\"]})),\" \"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"Finally, we need to bootstrap our custom element using the bootstrapModule function:\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:custEle3,language:\"js\",plugins:[\"line-numbers\"]}))),React.createElement(\"br\",null),React.createElement(\"li\",null,\"Once we have completed these steps, we can use our custom element in any HTML page like this:\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:custEle4,language:\"js\",plugins:[\"line-numbers\"]}))),React.createElement(\"br\",null)),\"Overall, Angular Custom Elements provides a powerful way to reuse Angular components in non-Angular applications or web pages. By following these simple steps, developers can create custom elements that encapsulate their Angular components and make them available for use in any HTML page.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Do I need to bootstrap custom elements\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Yes, you need to bootstrap custom elements in Angular if you want to use them in your application. Bootstraping is the process of starting up an application and preparing it for use. In the context of Angular, bootstrapping refers to the process of initializing the root module of the application and preparing it for use by the browser.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"When using custom elements in Angular, you need to create a new module that imports the custom element and sets it up for use in your application. This module needs to be bootstrapped in your application to ensure that the custom element is properly initialized and can be used by other components in your application.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"To bootstrap a custom element in Angular, you can use the createCustomElement function from the @angular/elements package. This function takes a component class and returns a new custom element class that can be used in your application.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"Once you have created the custom element class, you can add it to the entryComponents array of your root module, and then bootstrap the module using the platformBrowserDynamic().bootstrapModule() function.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"Overall, bootstrapping custom elements in Angular is an important step in using them in your application. By properly initializing the custom element, you can ensure that it behaves as expected and can be used by other components in your application.\"),React.createElement(\"br\",null)),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. How to transfer components to custom elements\"),\"To transfer Angular components to custom elements, we can use Angular's built-in support for web components. This involves creating a custom element that wraps the Angular component and registers it as a custom element.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"Here are the steps to transfer an Angular component to a custom element:\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Install the @angular/elements package.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"In the Angular component that you want to transfer to a custom element, import the necessary dependencies:\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"Decorate the component with the @Component decorator as usual:\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:transferCust,language:\"js\",plugins:[\"line-numbers\"]}))),React.createElement(\"br\",null),React.createElement(\"li\",null,\"Modify the component's class to extend the HTMLElement class, so that it can be used as a custom element:\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:transferCust2,language:\"js\",plugins:[\"line-numbers\"]}))),React.createElement(\"br\",null),React.createElement(\"li\",null,\"Register the custom element using the customElements.define() method, and attach the Angular component to the custom element's shadow DOM.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"Use the custom element in your HTML as follows:\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:transferCust3,language:\"js\",plugins:[\"line-numbers\"]}))),React.createElement(\"br\",null)),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. Animations\"),\"Angular Animations is a powerful feature of the Angular framework that allows developers to create rich and dynamic user interfaces by adding animations and transitions to the application's components. With Angular Animations, developers can create animations that respond to user interactions, changes in component state, or changes in the data displayed by the application.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"Angular Animations is based on the Web Animations API, which is a native browser API that allows developers to create and control animations directly in the browser. Angular Animations provides a higher-level API that makes it easier to create and manage complex animations and transitions.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"Angular Animations is based on three key concepts:\",React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Triggers: \"),\"A trigger is a named animation state that defines a set of animations that are applied to a component when the state is active. For example, a trigger can be used to define the animations that are played when a button is clicked, or when a component is added or removed from the DOM.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"States: \"),\"A state is a named configuration of a component that can be used as the target of an animation. For example, a state can be used to define the appearance of a component when it is in a particular state, such as when it is active or inactive.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Transitions: \"),\"A transition is a set of animations that are applied when a component transitions between two states. For example, a transition can be used to animate the transition from an inactive to an active state, or from one set of styles to another.\")),React.createElement(\"br\",null),\"Overall, Angular Animations provides a powerful way to create dynamic and engaging user interfaces by adding animations and transitions to components. By using triggers, states, and transitions.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. JQuery\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"first install jquery as npm install jquery\"),React.createElement(\"li\",null,\"inside ./angular-cli.json file, find script, and include the path to jQuery as \",React.createElement(\"br\",null),\"\\\"script\\\":[\\\"./node_moules/jquery/dist/jquery.min.js\\\"]\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Note:\"),\" jQuery should be before bootstrap, if use both.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. ViewProvider\"),React.createElement(\"p\",null,\"view provider is a provider that is defined at the component level and is only available to the component and its descendants in the component tree.\"),\"view provider used to provide services or values that are specific to a component and its view, without exposing them to the rest of the application.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:myProvider,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"7. Providers have services list which use by component.\"),\"If component need any service than it ask to injector not to Promises, Injector will create that service by getting blue-print from Promises, But if injector have that service instance than directly provide to component.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"8. ViewChild\"),\"ViewChild is a decorator for Angular component variables, which allow to bind child component data and method.\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"There may be situation where we want to access a directive, child component or a DOM element from a parent component class. @ViewChild decorator returns the first element that matches a give directive, component or template.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:viewChilds,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"9. ViewContainerRef\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"ViewContainerRef represents a container where we can attach one or more views to a component and also show an API to create components. Some important methods of ViewContainerRef are:\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"createEmbeddedView()\"),React.createElement(\"li\",null,\"clear()\"),React.createElement(\"li\",null,\"get()\"),React.createElement(\"li\",null,\"insert()\"),React.createElement(\"li\",null,\"move()\"),React.createElement(\"li\",null,\"createComponent()\"))),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"CreateEmbeddedView()\"),\" instantiates an embedded view and inserts it into container.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"createComponent()\"),\" instantiates a single component and inserts its host view into the container at a specified index.\")),React.createElement(\"br\",null),\"In dynamic component loader, load component using createComponent() of ViewContainerRef.\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:ViewContainerRef,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),\"clear() method of ViewContainerRef destroys all existing views in the container.\"))));}}]);return AngularDir;}(Component);export default withStyles(styles)(AngularDir);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/angularDir.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","myProvider","trim","custEle","custEle2","custEle3","custEle4","transferCust","transferCust2","transferCust3","viewChilds","ViewContainerRef","AngularDir","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst myProvider = `\nexport class ViewProvider {\n  name: string = 'Mukesh';\n}\n\nexport class ViewProvider2 {\n  name: string = 'Rakesh';\n  getName() {\n    console.log(this.name);\n  }\n}\n\n@Component({\n  viewProviders: [ViewProvider, ViewProvider2],\n})\nexport class AppComponent {\n  constructor(public pr: ViewProvider, public pr2: ViewProvider2) {\n    console.log(pr.name);\n    pr2.getName();\n  }\n}\n`.trim();\n\nconst custEle = `\n@Component({\n  selector: 'my-custom-element',\n  template: '<h1>Hello, World!</h1>'\n})\nexport class MyCustomElementComponent {}`.trim();\n\nconst custEle2 = `\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { createCustomElement } from '@angular/elements';\nimport { MyCustomElementComponent } from './my-custom-element.component';\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [MyCustomElementComponent],\n  entryComponents: [MyCustomElementComponent]\n})\nexport class MyCustomElementModule {\n  constructor() {\n    const customElement = createCustomElement(MyCustomElementComponent, { injector: this.injector });\n    customElements.define('my-custom-element', customElement);\n  }\n  ngDoBootstrap() {}\n}\n`.trim();\n\nconst custEle3 = `\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { MyCustomElementModule } from './my-custom-element.module';\n\nplatformBrowserDynamic().bootstrapModule(MyCustomElementModule);\n`.trim();\n\nconst custEle4 = `<my-custom-element></my-custom-element>`.trim();\n\nconst transferCust = `\nimport { Component, Input, Injector } from '@angular/core';\nimport { createCustomElement } from '@angular/elements';\n\n@Component({\n  selector: 'my-angular-component',\n  templateUrl: './my-angular-component.component.html',\n  styleUrls: ['./my-angular-component.component.css']\n})\nexport class MyAngularComponent {\n  @Input() title: string;\n}\n`.trim();\n\nconst transferCust2 = `\n@Component({\n  selector: 'my-angular-component',\n  templateUrl: './my-angular-component.component.html',\n  styleUrls: ['./my-angular-component.component.css'],\n  // Use \"viewProviders\" to make the component available to its own template\n  viewProviders: [{ provide: MyAngularComponent, useValue: MyAngularComponent }]\n})\nexport class MyAngularComponent extends HTMLElement {\n  @Input() title: string;\n\n  constructor(private injector: Injector) {\n    super();\n  }\n\n  connectedCallback() {\n    // Create the Angular element and attach it to the custom element's shadow DOM\n    const angularElement = createCustomElement(MyAngularComponent, { injector: this.injector });\n    customElements.define('my-custom-element', angularElement);\n    const shadowRoot = this.attachShadow({ mode: 'open' });\n    shadowRoot.appendChild(document.createElement('my-custom-element'));\n  }\n}\n`.trim();\n\nconst transferCust3 =\n  `<my-angular-component title=\"Hello World\"></my-angular-component>`.trim();\n\nconst viewChilds = `\n//html\n{{ empSalery }}\n\n\n//child.ts\nexport class ChildCompo {\n  empSalery = 0;\n\n  childMethod() {\n    this.empSalery += 500;\n  }\n\n  childMethod2() {\n    this.empSalery -= 500;\n  }\n}\n  \n  \n//app.component.ts\n//html\n<button (click)=\"empIncreaseSalery()\">Inc</button>\n<button (click)=\"empDecreSalery()\">Din</button>\n    <child></child>\n\n\nimport { ChildCompo } from './child';\nexport class AppComponent {\n  @ViewChild(ChildCompo)\n  ChildCompo!: ChildCompo;\n\n  empIncreaseSalery() {\n    this.ChildCompo.childMethod();\n  }\n\n  empDecreSalery() {\n    this.ChildCompo.childMethod2();\n  }\n}\n  `.trim();\n\nconst ViewContainerRef =\n  `let componentRef = viewContainerRef.createComponent(componentFactory);`.trim();\n\nclass AngularDir extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Custom Element : npm install @angular/elements</h3>\n              Angular Custom Elements is a feature that allows Angular\n              components to be used as standalone custom elements in HTML. This\n              means that an Angular component can be used in any HTML page,\n              regardless of whether it is an Angular application or not.\n              <br />\n              <br />\n              To create an Angular custom element, we can use the\n              @angular/elements package and the createCustomElement function.\n              Here is an example of how to create a simple Angular custom\n              element:\n              <br />\n              <ol>\n                <li>\n                  First, create a new Angular component using the @Component\n                  decorator:\n                  <div style={titles}>\n                    <PrismCode\n                      code={custEle}\n                      language=\"js\"\n                      plugins={[\"line-numbers\"]}\n                    />\n                  </div>\n                </li>\n                <br />\n                <li>\n                  Next, convert the component into a custom element using the\n                  createCustomElement function from the @angular/elements\n                  package:\n                  <div style={titles}>\n                    <PrismCode\n                      code={custEle2}\n                      language=\"js\"\n                      plugins={[\"line-numbers\"]}\n                    />\n                  </div>{\" \"}\n                </li>\n                <br />\n                <li>\n                  Finally, we need to bootstrap our custom element using the\n                  bootstrapModule function:\n                  <div style={titles}>\n                    <PrismCode\n                      code={custEle3}\n                      language=\"js\"\n                      plugins={[\"line-numbers\"]}\n                    />\n                  </div>\n                </li>\n                <br />\n                <li>\n                  Once we have completed these steps, we can use our custom\n                  element in any HTML page like this:\n                  <div style={titles}>\n                    <PrismCode\n                      code={custEle4}\n                      language=\"js\"\n                      plugins={[\"line-numbers\"]}\n                    />\n                  </div>\n                </li>\n                <br />\n              </ol>\n              Overall, Angular Custom Elements provides a powerful way to reuse\n              Angular components in non-Angular applications or web pages. By\n              following these simple steps, developers can create custom\n              elements that encapsulate their Angular components and make them\n              available for use in any HTML page.\n              <br />\n              <br />\n              <h3>2. Do I need to bootstrap custom elements</h3>\n              <ul>\n                <li>\n                  Yes, you need to bootstrap custom elements in Angular if you\n                  want to use them in your application. Bootstraping is the\n                  process of starting up an application and preparing it for\n                  use. In the context of Angular, bootstrapping refers to the\n                  process of initializing the root module of the application and\n                  preparing it for use by the browser.\n                </li>\n                <br />\n                <li>\n                  When using custom elements in Angular, you need to create a\n                  new module that imports the custom element and sets it up for\n                  use in your application. This module needs to be bootstrapped\n                  in your application to ensure that the custom element is\n                  properly initialized and can be used by other components in\n                  your application.\n                </li>\n                <br />\n                <li>\n                  To bootstrap a custom element in Angular, you can use the\n                  createCustomElement function from the @angular/elements\n                  package. This function takes a component class and returns a\n                  new custom element class that can be used in your application.\n                </li>\n                <br />\n                <li>\n                  Once you have created the custom element class, you can add it\n                  to the entryComponents array of your root module, and then\n                  bootstrap the module using the\n                  platformBrowserDynamic().bootstrapModule() function.\n                </li>\n                <br />\n                <li>\n                  Overall, bootstrapping custom elements in Angular is an\n                  important step in using them in your application. By properly\n                  initializing the custom element, you can ensure that it\n                  behaves as expected and can be used by other components in\n                  your application.\n                </li>\n                <br />\n              </ul>\n              <br />\n              <br />\n              <h3>3. How to transfer components to custom elements</h3>\n              To transfer Angular components to custom elements, we can use\n              Angular's built-in support for web components. This involves\n              creating a custom element that wraps the Angular component and\n              registers it as a custom element.\n              <br />\n              <br />\n              Here are the steps to transfer an Angular component to a custom\n              element:\n              <ul>\n                <li>Install the @angular/elements package.</li>\n                <br />\n                <li>\n                  In the Angular component that you want to transfer to a custom\n                  element, import the necessary dependencies:\n                </li>\n                <br />\n                <li>\n                  Decorate the component with the @Component decorator as usual:\n                  <div style={titles}>\n                    <PrismCode\n                      code={transferCust}\n                      language=\"js\"\n                      plugins={[\"line-numbers\"]}\n                    />\n                  </div>\n                </li>\n                <br />\n                <li>\n                  Modify the component's class to extend the HTMLElement class,\n                  so that it can be used as a custom element:\n                  <div style={titles}>\n                    <PrismCode\n                      code={transferCust2}\n                      language=\"js\"\n                      plugins={[\"line-numbers\"]}\n                    />\n                  </div>\n                </li>\n                <br />\n                <li>\n                  Register the custom element using the customElements.define()\n                  method, and attach the Angular component to the custom\n                  element's shadow DOM.\n                </li>\n                <br />\n                <li>\n                  Use the custom element in your HTML as follows:\n                  <div style={titles}>\n                    <PrismCode\n                      code={transferCust3}\n                      language=\"js\"\n                      plugins={[\"line-numbers\"]}\n                    />\n                  </div>\n                </li>\n                <br />\n              </ul>\n              <br />\n              <br />\n              <h3>4. Animations</h3>\n              Angular Animations is a powerful feature of the Angular framework\n              that allows developers to create rich and dynamic user interfaces\n              by adding animations and transitions to the application's\n              components. With Angular Animations, developers can create\n              animations that respond to user interactions, changes in component\n              state, or changes in the data displayed by the application.\n              <br />\n              <br />\n              Angular Animations is based on the Web Animations API, which is a\n              native browser API that allows developers to create and control\n              animations directly in the browser. Angular Animations provides a\n              higher-level API that makes it easier to create and manage complex\n              animations and transitions.\n              <br />\n              <br />\n              Angular Animations is based on three key concepts:\n              <ul>\n                <li>\n                  <b>Triggers: </b>A trigger is a named animation state that\n                  defines a set of animations that are applied to a component\n                  when the state is active. For example, a trigger can be used\n                  to define the animations that are played when a button is\n                  clicked, or when a component is added or removed from the DOM.\n                </li>\n                <br />\n                <li>\n                  <b>States: </b>A state is a named configuration of a component\n                  that can be used as the target of an animation. For example, a\n                  state can be used to define the appearance of a component when\n                  it is in a particular state, such as when it is active or\n                  inactive.\n                </li>\n                <br />\n                <li>\n                  <b>Transitions: </b>A transition is a set of animations that\n                  are applied when a component transitions between two states.\n                  For example, a transition can be used to animate the\n                  transition from an inactive to an active state, or from one\n                  set of styles to another.\n                </li>\n              </ul>\n              <br />\n              Overall, Angular Animations provides a powerful way to create\n              dynamic and engaging user interfaces by adding animations and\n              transitions to components. By using triggers, states, and\n              transitions.\n              <br />\n              <br />\n              <h3>5. JQuery</h3>\n              <ul>\n                <li>first install jquery as npm install jquery</li>\n                <li>\n                  inside ./angular-cli.json file, find script, and include the\n                  path to jQuery as <br />\n                  \"script\":[\"./node_moules/jquery/dist/jquery.min.js\"]\n                </li>\n                <li>\n                  <b>Note:</b> jQuery should be before bootstrap, if use both.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>6. ViewProvider</h3>\n              <p>\n                view provider is a provider that is defined at the component\n                level and is only available to the component and its descendants\n                in the component tree.\n              </p>\n              view provider used to provide services or values that are specific\n              to a component and its view, without exposing them to the rest of\n              the application.\n              <div style={titles}>\n                <PrismCode\n                  code={myProvider}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>7. Providers have services list which use by component.</h3>\n              If component need any service than it ask to injector not to\n              Promises, Injector will create that service by getting blue-print\n              from Promises, But if injector have that service instance than\n              directly provide to component.\n              <br />\n              <br />\n              <h3>8. ViewChild</h3>\n              ViewChild is a decorator for Angular component variables, which\n              allow to bind child component data and method.\n              <br />\n              <ul>\n                <li>\n                  There may be situation where we want to access a directive,\n                  child component or a DOM element from a parent component\n                  class. @ViewChild decorator returns the first element that\n                  matches a give directive, component or template.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={viewChilds}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>9. ViewContainerRef</h3>\n              <ul>\n                <li>\n                  ViewContainerRef represents a container where we can attach\n                  one or more views to a component and also show an API to\n                  create components. Some important methods of ViewContainerRef\n                  are:\n                  <ul>\n                    <li>createEmbeddedView()</li>\n                    <li>clear()</li>\n                    <li>get()</li>\n                    <li>insert()</li>\n                    <li>move()</li>\n                    <li>createComponent()</li>\n                  </ul>\n                </li>\n                <br />\n\n                <li>\n                  <b>CreateEmbeddedView()</b> instantiates an embedded view and\n                  inserts it into container.\n                </li>\n                <li>\n                  <b>createComponent()</b> instantiates a single component and\n                  inserts its host view into the container at a specified index.\n                </li>\n              </ul>\n              <br />\n              In dynamic component loader, load component using\n              createComponent() of ViewContainerRef.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={ViewContainerRef}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              clear() method of ViewContainerRef destroys all existing views in\n              the container.\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(AngularDir);\n"]},"metadata":{},"sourceType":"module"}