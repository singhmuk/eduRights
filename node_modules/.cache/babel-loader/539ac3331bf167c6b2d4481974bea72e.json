{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/mern/projects/propsModel.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst Previews = `\nconst postSchema = new Schema({\n  text: String,\n  title: String,\n});\n\nconst Post = mongoose.model(\"Post\", postSchema);\nmodule.exports = Post\n\n\n//Controllers\nconst Post = require('./model.js');\n\nrouter.post('/',async (req,res) =>{\n  const posts = new Post({\n    text: req.body.text,\n    title: req.body.title\n  })\n      await posts.save()\n      res.status(201).send(posts)\n})\n\n\n//Routes\nrouter.get(\"/posts\", async (req, res) => {\n  const sort = {}\n  \n  const PAGE_SIZE = 3;                                                           //data per page\n  const page = parseInt(req.query.page || \"0\");\n  const total = await Post.countDocuments({});\n  const posts = await Post.find({})\n\n    .limit(PAGE_SIZE)                                                            //data limit get from mongodb\n    .skip(PAGE_SIZE * page);\n    res.json({\n      totalPages: Math.ceil(total / PAGE_SIZE),\n      posts,\n    });\n  \n \n  if(req.query.sortBy){                                             //localhost:5000/posts?sortBy=createdAt:true\n    const str = req.query.sortBy.split(':')\n    sort[str[0]] = str[1] === 'desc' ? -1:1\n    console.log('sort',str)\n}\n});\n\n\nrouter.get(\"/search/:text\", (req, res) => {\n  var regex = new RegExp(req.params.text,'i');\n  Post.find({name:regex}).then(result => {\n    res.status(200).json(result)\n  })\n})\n\nmodule.exports = router;\n\n\n//server.js\nconst morgan = require(\"morgan\");\nconst mongoose = require(\"mongoose\");\nconst cors = require(\"cors\");\nconst cookieParser = require(\"cookie-parser\");\n\nmongoose.Promise = global.Promise;\nif (process.env.NODE_ENV === \"test\") {\n  mongoose.connect(\"mongodb://localhost/APIAuthenticationTEST\", {\n    useNewUrlParser: true\n  });\n} else {\n  mongoose.connect(\"mongodb://localhost/APIAuthentication\", {\n    useNewUrlParser: true\n  });\n}\n\nconst app = express();\napp.use(cookieParser());\napp.use(\n  cors({\n    origin: \"http://localhost:3000\",\n    credentials: true\n  })\n);\n\n\nif (!process.env.NODE_ENV === \"test\") {\n  app.use(morgan(\"dev\"));\n}\n\napp.use(express.json());\n\napp.use(\"/users\", require(\"./routes/users\"));\n\nconst port = process.env.PORT || 5000\n\napp.listen(port, () => {\n  console.log('Server Listening on')\n});\n`.trim();\nconst ViewDetails = `\nfunction App() {\n  const [pageNumber, setPageNumber] = useState(0);\n  const [numberOfPages, setNumberOfPages] = useState(0);\n  const [posts, setPosts] = useState([]);\n\n  const pages = new Array(numberOfPages).fill(null).map((v, i) => i);\n\n  useEffect(() => {\n    fetch(http://localhost:5000/posts?page='$'{pageNumber})\n      .then((res) => res.json())\n      .then(({ totalPages, posts }) => {\n        setPosts(posts);\n        console.log('eeeee',posts)\n        setNumberOfPages(totalPages);\n      });\n  }, [pageNumber]);\n\n  const gotoPrevious = () => {\n    setPageNumber(Math.max(0, pageNumber - 1));\n  };\n\n  const gotoNext = () => {\n    setPageNumber(Math.min(numberOfPages - 1, pageNumber + 1));\n  };\n\n  return (\n    <div className=\"App\">\n      <h3>Page of {pageNumber + 1}</h3>\n\n      {posts.map((post) => (\n        <div key={post._id} className=\"post\">\n          <h4>{post.title}</h4>\n          <p>{post.text}</p>\n        </div>\n      ))}\n\n      <button onClick={gotoPrevious}>Previous</button>\n      {pages.map((pageIndex) => (\n        <button key={pageIndex} onClick={() => setPageNumber(pageIndex)}>\n          {pageIndex + 1}\n        </button>\n      ))}\n      <button onClick={gotoNext}>Next</button>\n    </div>\n  );\n}\n\nexport default App;\n`.trim();\nconst captcha = `\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst fetch = require('node-fetch');\nconst { stringify } = require('querystring');\nconst app = express();\n\napp.use(express.json());\n\napp.get('/', (_, res) => res.sendFile(__dirname + '/index.html'));\n\napp.post('/subscribe', async (req, res) => {\n  if (!req.body.captcha)\n    return res.json({ success: false, msg: 'Please select captcha' });\n\n  // Secret key\n  const secretKey = '6LdpvDEUAAAAAHszsgB_nnal29BIKDsxwAqEbZzU';\n\n  // Verify URL\n  const query = stringify({\n    secret: secretKey,\n    response: req.body.captcha,\n    remoteip: req.connection.remoteAddress\n  });\n  const verifyURL = https://google.com/recaptcha/api/siteverify?'$'{query};\n\n  const body = await fetch(verifyURL).then(res => res.json());\n\n  if (body.success !== undefined && !body.success)\n    return res.json({ success: false, msg: 'Failed captcha verification' });\n\n  return res.json({ success: true, msg: 'Captcha passed' });\n});\n\napp.listen(3000, () => console.log('Server started on port 3000'));\n`.trim();\n\nclass PropsModel extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, \"1.Server Side Pagination\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, \"Server\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Previews,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"Client\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: ViewDetails,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, \"2. Captcha\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: captcha,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(PropsModel);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/mern/projects/propsModel.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","Previews","trim","ViewDetails","captcha","PropsModel","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst Previews = `\nconst postSchema = new Schema({\n  text: String,\n  title: String,\n});\n\nconst Post = mongoose.model(\"Post\", postSchema);\nmodule.exports = Post\n\n\n//Controllers\nconst Post = require('./model.js');\n\nrouter.post('/',async (req,res) =>{\n  const posts = new Post({\n    text: req.body.text,\n    title: req.body.title\n  })\n      await posts.save()\n      res.status(201).send(posts)\n})\n\n\n//Routes\nrouter.get(\"/posts\", async (req, res) => {\n  const sort = {}\n  \n  const PAGE_SIZE = 3;                                                           //data per page\n  const page = parseInt(req.query.page || \"0\");\n  const total = await Post.countDocuments({});\n  const posts = await Post.find({})\n\n    .limit(PAGE_SIZE)                                                            //data limit get from mongodb\n    .skip(PAGE_SIZE * page);\n    res.json({\n      totalPages: Math.ceil(total / PAGE_SIZE),\n      posts,\n    });\n  \n \n  if(req.query.sortBy){                                             //localhost:5000/posts?sortBy=createdAt:true\n    const str = req.query.sortBy.split(':')\n    sort[str[0]] = str[1] === 'desc' ? -1:1\n    console.log('sort',str)\n}\n});\n\n\nrouter.get(\"/search/:text\", (req, res) => {\n  var regex = new RegExp(req.params.text,'i');\n  Post.find({name:regex}).then(result => {\n    res.status(200).json(result)\n  })\n})\n\nmodule.exports = router;\n\n\n//server.js\nconst morgan = require(\"morgan\");\nconst mongoose = require(\"mongoose\");\nconst cors = require(\"cors\");\nconst cookieParser = require(\"cookie-parser\");\n\nmongoose.Promise = global.Promise;\nif (process.env.NODE_ENV === \"test\") {\n  mongoose.connect(\"mongodb://localhost/APIAuthenticationTEST\", {\n    useNewUrlParser: true\n  });\n} else {\n  mongoose.connect(\"mongodb://localhost/APIAuthentication\", {\n    useNewUrlParser: true\n  });\n}\n\nconst app = express();\napp.use(cookieParser());\napp.use(\n  cors({\n    origin: \"http://localhost:3000\",\n    credentials: true\n  })\n);\n\n\nif (!process.env.NODE_ENV === \"test\") {\n  app.use(morgan(\"dev\"));\n}\n\napp.use(express.json());\n\napp.use(\"/users\", require(\"./routes/users\"));\n\nconst port = process.env.PORT || 5000\n\napp.listen(port, () => {\n  console.log('Server Listening on')\n});\n`.trim();\n\nconst ViewDetails = `\nfunction App() {\n  const [pageNumber, setPageNumber] = useState(0);\n  const [numberOfPages, setNumberOfPages] = useState(0);\n  const [posts, setPosts] = useState([]);\n\n  const pages = new Array(numberOfPages).fill(null).map((v, i) => i);\n\n  useEffect(() => {\n    fetch(http://localhost:5000/posts?page='$'{pageNumber})\n      .then((res) => res.json())\n      .then(({ totalPages, posts }) => {\n        setPosts(posts);\n        console.log('eeeee',posts)\n        setNumberOfPages(totalPages);\n      });\n  }, [pageNumber]);\n\n  const gotoPrevious = () => {\n    setPageNumber(Math.max(0, pageNumber - 1));\n  };\n\n  const gotoNext = () => {\n    setPageNumber(Math.min(numberOfPages - 1, pageNumber + 1));\n  };\n\n  return (\n    <div className=\"App\">\n      <h3>Page of {pageNumber + 1}</h3>\n\n      {posts.map((post) => (\n        <div key={post._id} className=\"post\">\n          <h4>{post.title}</h4>\n          <p>{post.text}</p>\n        </div>\n      ))}\n\n      <button onClick={gotoPrevious}>Previous</button>\n      {pages.map((pageIndex) => (\n        <button key={pageIndex} onClick={() => setPageNumber(pageIndex)}>\n          {pageIndex + 1}\n        </button>\n      ))}\n      <button onClick={gotoNext}>Next</button>\n    </div>\n  );\n}\n\nexport default App;\n`.trim();\n\nconst captcha = `\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst fetch = require('node-fetch');\nconst { stringify } = require('querystring');\nconst app = express();\n\napp.use(express.json());\n\napp.get('/', (_, res) => res.sendFile(__dirname + '/index.html'));\n\napp.post('/subscribe', async (req, res) => {\n  if (!req.body.captcha)\n    return res.json({ success: false, msg: 'Please select captcha' });\n\n  // Secret key\n  const secretKey = '6LdpvDEUAAAAAHszsgB_nnal29BIKDsxwAqEbZzU';\n\n  // Verify URL\n  const query = stringify({\n    secret: secretKey,\n    response: req.body.captcha,\n    remoteip: req.connection.remoteAddress\n  });\n  const verifyURL = https://google.com/recaptcha/api/siteverify?'$'{query};\n\n  const body = await fetch(verifyURL).then(res => res.json());\n\n  if (body.success !== undefined && !body.success)\n    return res.json({ success: false, msg: 'Failed captcha verification' });\n\n  return res.json({ success: true, msg: 'Captcha passed' });\n});\n\napp.listen(3000, () => console.log('Server started on port 3000'));\n`.trim();\n\n\nclass PropsModel extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1.Server Side Pagination</h3>\n              <b>Server</b>\n              <div style={titles}>\n                <PrismCode\n                  code={Previews}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Client</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={ViewDetails}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Captcha</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={captcha}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(PropsModel));\n"]},"metadata":{},"sourceType":"module"}