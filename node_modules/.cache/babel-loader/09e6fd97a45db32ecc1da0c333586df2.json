{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var hasCycle=\"\\nconst hasCycle = (head) => {\\n  const aux = (current, next) => {\\n    if (!current || !next || !next.next || !next.next.next) {\\n      return false\\n    }\\n    if (current === next) {\\n      return true\\n    }\\n    return aux(current.next, next.next.next)\\n  }\\n  if (!head || !head.next) {\\n    return false\\n  }\\n  return aux(head, head.next)\\n}\\n\\nconsole.log(hasCycle(3,2,0,-4, 1))\".trim();var removeNthFromEnd=\"\\nconst removeNthFromEnd = (head, n) => {\\n  let h1 = head\\n  let h2 = null\\n  let count = 0\\n  while (h1) {\\n    count += 1\\n    h1 = h1.next\\n    if (h2) {\\n      h2 = h2.next\\n    }\\n    if (count === n + 1) {\\n      h2 = head\\n    }\\n  }\\n  if (!h2) {\\n    return head ? head.next : null\\n  }\\n  h2.next = h2.next.next\\n  return head\\n}\".trim();var mergeTwoLists=\"\\nconst mergeTwoLists = (l1, l2) => {\\n  const aux = (current1, current2, acc) => {\\n    if (!current1) {\\n      acc.next = current2\\n      return acc\\n    }\\n    if (!current2) {\\n      acc.next = current1\\n      return acc\\n    }\\n    if (current1.val < current2.val) {\\n      acc.next = {\\n        val: current1.val,\\n        next: null,\\n      }\\n      return aux(current1.next, current2, acc.next)\\n    }\\n    acc.next = {\\n      val: current2.val,\\n      next: null,\\n    }\\n    return aux(current2.next, current1, acc.next)\\n  }\\n  const head = { val: null, next: null }\\n  aux(l1, l2, head)\\n    return head.next\\n}\".trim();var swap=\"const swap = (a, b, arr) => { \\n  if (a !== b) {\\n    const temp = arr[a]\\n    arr[a] = arr[b] \\n    arr[b] = temp \\n  }\\n}\\n\\nconst Heap = compareFn => (arr = []) => {\\n  const left = index => 2 * index + 1\\n  const right = index => 2 * index + 2\\n  const parent = index => Math.floor((index - 1) / 2)\\n  const size = () => arr.length\\n\\n  // log(n)\\n  const heapify = (index) => {\\n    const l = left(index)\\n    const r = right(index)\\n    let current = index\\n    if ((l < size()) && compareFn(arr[current], arr[l]) > 0) {\\n      current = l\\n    }\\n    if ((r < size()) && compareFn(arr[current], arr[r]) > 0) {\\n      current = r\\n    }\\n    if (current !== index) {\\n      swap(current, index, arr)\\n      heapify(current)\\n    }\\n  }\\n  // log(n)\\n  const heapifyUp = (index) => {\\n    const p = parent(index)\\n    if (p >= 0 && compareFn(arr[p], arr[index]) > 0) {\\n      swap(p, index, arr)\\n      heapifyUp(p)\\n    }\\n  }\\n  // O(n)\\n  const buildHeap = () => {\\n    for (let i = Math.floor(arr.length / 2); i >= 0; i--) {\\n      heapify(i)\\n    }\\n  }\\n  const extract = () => {\\n    swap(0, arr.length - 1, arr)\\n    const top = arr.pop()\\n    heapify(0)\\n    return top\\n  }\\n  const remove = (item) => {\\n    const index = arr.findIndex(x => compareFn(x, item) === 0)\\n    if (index === -1) {\\n      return\\n    }\\n    arr[index] = arr.pop() // eslint-disable-line\\n    const p = parent(index)\\n    if (p < 0 || compareFn(p, arr[index]) < 0) {\\n      heapify(index)\\n    } else {\\n      heapifyUp(index)\\n    }\\n  }\\n  buildHeap()\\n  return {\\n    getHeap: () => arr,\\n    peek: () => {\\n      if (arr.length === 0) {\\n        return null\\n      }\\n      return arr[0]\\n    },\\n    add: (item) => {\\n      arr.push(item)\\n      heapifyUp(arr.length - 1)\\n    },\\n    extract,\\n    remove,\\n    size,\\n  }\\n}\\n\\nconst mergeKLists = (lists = []) => {\\n  const minHeap = Heap((a, b) => a.val - b.val)([])\\n  lists.forEach((node) => {\\n    if (node) {\\n      minHeap.add(node)\\n    }\\n  })\\n  const head = minHeap.extract() || null\\n  let current = head\\n  while (minHeap.size() > 0) {\\n      console.log(minHeap.size())\\n    if (current.next) {\\n      minHeap.add(current.next)\\n    }\\n    current.next = minHeap.extract()\\n    current = current.next\\n  }\\n  return head\\n}\\n\\nconsole.log(swap([[1,4,5],[1,3,4],[2,6]]))\".trim();var LinkedList=/*#__PURE__*/function(_Component){_inherits(LinkedList,_Component);function LinkedList(){_classCallCheck(this,LinkedList);return _possibleConstructorReturn(this,_getPrototypeOf(LinkedList).apply(this,arguments));}_createClass(LinkedList,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Linked List\"),React.createElement(\"ol\",null,React.createElement(\"li\",null,\"Like arrays, Linked Lists store data elements in sequential order. Instead of keeping indexes, linked lists hold pointers to other elements. The first node is called the head while the last node is called the tail.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"Linked lists have constant-time insertions and deletions because we can just change the pointers. To do the same operations in arrays requires linear time because subsequent items need to be shifted over.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"Like arrays, linked lists can operate as stacks. It\\u2019s as simple as having the head be the only place for insertion and removal.\",React.createElement(\"br\",null),\"Linked lists can also operate as queues with the help of doubly-linked list, where insertion occurs at the tail and removal occurs at the head.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"Linked lists are useful on both the client and server.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"On the client, state management libraries like Redux structure its middleware logic in a linked-list fashion. When actions are dispatched, they are piped from one middleware to the next until all is visited before reaching the reducers.\"),React.createElement(\"li\",null,\"On the server, web frameworks like Express also structure its middleware logic in a similar fashion. When a request is received, it is piped from one middleware to the next until a response is issued.\")),React.createElement(\"br\",null),React.createElement(\"li\",null,\"Links in a linked list do not have indexes.\"),React.createElement(\"li\",null,\"A linked list grows and shrinks as it is edited. Do not need to predetermine it's size.\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Functions -\"),\" add, remove, indexOf, elementAt, addAt, removeAt, view.\",React.createElement(\"br\",null),React.createElement(\"h3\",null,\"1. Linked List Cycle.\"),\"Given head, the head of a linked list, determine if the linked list has a cycle in it.\",React.createElement(\"br\",null),\"There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.\",React.createElement(\"br\",null),\"Return true if there is a cycle in the linked list. Otherwise, return false\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:hasCycle,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. Remove Nth Node From End of List\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:removeNthFromEnd,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. Merge Two Sorted Lists.\"),\"Merge two sorted linked lists and return it as a new sorted list. The new list should be made by splicing together the nodes of the first two lists.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:mergeTwoLists,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"8. Merge k Sorted Lists.\"),\"You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\",React.createElement(\"br\",null),\"Merge all the linked-lists into one sorted linked-list and return it.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Example: \"),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Input: \"),\"lists = [[1,4,5],[1,3,4],[2,6]]\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"[1,1,2,3,4,4,5,6]\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:swap,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return LinkedList;}(Component);export default withStyles(styles)(LinkedList);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/linkedList.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","hasCycle","trim","removeNthFromEnd","mergeTwoLists","swap","LinkedList","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst hasCycle = `\nconst hasCycle = (head) => {\n  const aux = (current, next) => {\n    if (!current || !next || !next.next || !next.next.next) {\n      return false\n    }\n    if (current === next) {\n      return true\n    }\n    return aux(current.next, next.next.next)\n  }\n  if (!head || !head.next) {\n    return false\n  }\n  return aux(head, head.next)\n}\n\nconsole.log(hasCycle(3,2,0,-4, 1))`.trim();\n\nconst removeNthFromEnd = `\nconst removeNthFromEnd = (head, n) => {\n  let h1 = head\n  let h2 = null\n  let count = 0\n  while (h1) {\n    count += 1\n    h1 = h1.next\n    if (h2) {\n      h2 = h2.next\n    }\n    if (count === n + 1) {\n      h2 = head\n    }\n  }\n  if (!h2) {\n    return head ? head.next : null\n  }\n  h2.next = h2.next.next\n  return head\n}`.trim();\n\nconst mergeTwoLists = `\nconst mergeTwoLists = (l1, l2) => {\n  const aux = (current1, current2, acc) => {\n    if (!current1) {\n      acc.next = current2\n      return acc\n    }\n    if (!current2) {\n      acc.next = current1\n      return acc\n    }\n    if (current1.val < current2.val) {\n      acc.next = {\n        val: current1.val,\n        next: null,\n      }\n      return aux(current1.next, current2, acc.next)\n    }\n    acc.next = {\n      val: current2.val,\n      next: null,\n    }\n    return aux(current2.next, current1, acc.next)\n  }\n  const head = { val: null, next: null }\n  aux(l1, l2, head)\n    return head.next\n}`.trim();\n\nconst swap = `const swap = (a, b, arr) => { \n  if (a !== b) {\n    const temp = arr[a]\n    arr[a] = arr[b] \n    arr[b] = temp \n  }\n}\n\nconst Heap = compareFn => (arr = []) => {\n  const left = index => 2 * index + 1\n  const right = index => 2 * index + 2\n  const parent = index => Math.floor((index - 1) / 2)\n  const size = () => arr.length\n\n  // log(n)\n  const heapify = (index) => {\n    const l = left(index)\n    const r = right(index)\n    let current = index\n    if ((l < size()) && compareFn(arr[current], arr[l]) > 0) {\n      current = l\n    }\n    if ((r < size()) && compareFn(arr[current], arr[r]) > 0) {\n      current = r\n    }\n    if (current !== index) {\n      swap(current, index, arr)\n      heapify(current)\n    }\n  }\n  // log(n)\n  const heapifyUp = (index) => {\n    const p = parent(index)\n    if (p >= 0 && compareFn(arr[p], arr[index]) > 0) {\n      swap(p, index, arr)\n      heapifyUp(p)\n    }\n  }\n  // O(n)\n  const buildHeap = () => {\n    for (let i = Math.floor(arr.length / 2); i >= 0; i--) {\n      heapify(i)\n    }\n  }\n  const extract = () => {\n    swap(0, arr.length - 1, arr)\n    const top = arr.pop()\n    heapify(0)\n    return top\n  }\n  const remove = (item) => {\n    const index = arr.findIndex(x => compareFn(x, item) === 0)\n    if (index === -1) {\n      return\n    }\n    arr[index] = arr.pop() // eslint-disable-line\n    const p = parent(index)\n    if (p < 0 || compareFn(p, arr[index]) < 0) {\n      heapify(index)\n    } else {\n      heapifyUp(index)\n    }\n  }\n  buildHeap()\n  return {\n    getHeap: () => arr,\n    peek: () => {\n      if (arr.length === 0) {\n        return null\n      }\n      return arr[0]\n    },\n    add: (item) => {\n      arr.push(item)\n      heapifyUp(arr.length - 1)\n    },\n    extract,\n    remove,\n    size,\n  }\n}\n\nconst mergeKLists = (lists = []) => {\n  const minHeap = Heap((a, b) => a.val - b.val)([])\n  lists.forEach((node) => {\n    if (node) {\n      minHeap.add(node)\n    }\n  })\n  const head = minHeap.extract() || null\n  let current = head\n  while (minHeap.size() > 0) {\n      console.log(minHeap.size())\n    if (current.next) {\n      minHeap.add(current.next)\n    }\n    current.next = minHeap.extract()\n    current = current.next\n  }\n  return head\n}\n\nconsole.log(swap([[1,4,5],[1,3,4],[2,6]]))`.trim();\n\n\nclass LinkedList extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Linked List</h3>\n              <ol>\n                <li>\n                  Like arrays, Linked Lists store data elements in sequential order. Instead of keeping\n                  indexes, linked lists hold pointers to other elements. The first node is called the\n                  head while the last node is called the tail.\n                </li>\n                <br />\n\n                <li>\n                  Linked lists have constant-time insertions and deletions because we can just change the\n                  pointers. To do the same operations in arrays requires linear time because subsequent\n                  items need to be shifted over.\n                </li>\n                <br />\n\n                <li>\n                  Like arrays, linked lists can operate as stacks. It’s as simple as having the head be the\n                  only place for insertion and removal.\n                  <br />\n\n                  Linked lists can also operate as queues with the help of doubly-linked list, where insertion occurs at the tail and removal\n                  occurs at the head.\n                </li>\n                <br />\n\n                <li>\n                  Linked lists are useful on both the client and server.</li>\n                <ul>\n                  <li>On the client, state management libraries like Redux structure its middleware logic in a linked-list fashion. When\n                    actions are dispatched, they are piped from one middleware to the next until all is visited before reaching the reducers.</li>\n                  <li>On the server, web frameworks like Express also structure its middleware logic in a similar fashion. When a request is received,\n                    it is piped from one middleware to the next until a response is issued.</li>\n                </ul>\n                <br />\n\n                <li>Links in a linked list do not have indexes.</li>\n                <li>A linked list grows and shrinks as it is edited. Do not need to predetermine it's size.</li>\n              </ol>\n              <br />\n\n              <b>Functions -</b> add, remove, indexOf, elementAt, addAt, removeAt, view.\n              <br />\n              \n              <h3>1. Linked List Cycle.</h3>\n              Given head, the head of a linked list, determine if the linked list has a cycle in it.\n              <br />\n              There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.\n              <br />\n              Return true if there is a cycle in the linked list. Otherwise, return false\n              <div style={titles}>\n                <PrismCode\n                  code={hasCycle}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Remove Nth Node From End of List</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={removeNthFromEnd}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>6. Merge Two Sorted Lists.</h3>\n              Merge two sorted linked lists and return it as a new sorted list. The new list should be made by splicing together the nodes of the first two lists.\n              <div style={titles}>\n                <PrismCode\n                  code={mergeTwoLists}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>8. Merge k Sorted Lists.</h3>\n                You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\n                <br/>\n                Merge all the linked-lists into one sorted linked-list and return it.<br/><br/>\n\n                <b>Example: </b><br/>\n\n                <b>Input: </b>lists = [[1,4,5],[1,3,4],[2,6]]<br/>\n                <b>Output: </b>[1,1,2,3,4,4,5,6]\n              <div style={titles}>\n                <PrismCode\n                  code={swap}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(LinkedList));\n"]},"metadata":{},"sourceType":"module"}