{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/mainCompo.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst sliderBox = `\n 0.4s ease;\n}\n\n\n#s1:checked ~ #slide3, #s2:checked ~ #slide1,\n#s3:checked ~ #slide2 {\n  box-shadow: 0 6px 10px 0 rgba(0,0,0,.3), 0 2px 2px 0 rgba(0,0,0,.2);\n  transform: translate3d(-50%,0,-100px);\n}\n\n#s1:checked ~ #slide1, #s2:checked ~ #slide2,\n#s3:checked ~ #slide3 {\n  box-shadow: 0 13px 25px 0 rgba(0,0,0,.3), 0 11px 7px 0 rgba(0,0,0,.19);\n  transform: translate3d(0,0,0);\n}\n\n#s1:checked ~ #slide2, #s2:checked ~ #slide3,\n#s3:checked ~ #slide1 {\n  box-shadow: 0 6px 10px 0 rgba(0,0,0,.3), 0 2px 2px 0 rgba(0,0,0,.2);\n  transform: translate3d(50%,0,-100px);\n}\n`.trim();\nconst editForm = `\nimport EditUserForm from \"./EditUserForm\";\n\nconst App = () => {\n  const usersData = [\n    { id: 1, name: \"AAA\", username: \"aiueo\" }\n  ];\n\n  const initialFormState = { id: null, name: \"\", username: \"\" };\n  const [mockData, setMockData] = useState(usersData);\n  const [user, setUser] = useState(initialFormState);\n\n  const [editing, setEditing] = useState(false);\n  const [currentUser, setCurrentUser] = useState(initialFormState);\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setUser({ ...user, [name]: value });\n  };\n\n  const addUser = user => {\n    user.id = mockData.length + 1;\n    setMockData([...mockData, user]);\n    setUser(initialFormState);\n  };\n\n  const deleteUser = id => {\n    setMockData(mockData.filter(user => user.id !== id));\n  };\n\n  const editRow = user => {\n    setEditing(true);\n    setCurrentUser({ id: user.id, name: user.name, username: user.username });\n  };\n\n  const updateUser = (id, updateUser) => {\n    setEditing(false);\n    setMockData(mockData.map(user => (user.id === id ? updateUser : user)));\n  };\n\n  return (\n    <div className=\"container\">\n      {editing?\n      <EditUserForm\n      editing={editing}\n      setEditing={setEditing}\n      currentUser={currentUser}\n      updateUser={updateUser}\n    />:\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          addUser(user);\n        }}\n      >\n        <input type=\"text\" name=\"name\" value={user.name} placeholder=\"Name\" onChange={handleInputChange} />\n        <input type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\n        <button>Add new user</button>\n      </form>\n}\n          {mockData.map(user => (\n            <li key={user.id}>\n              {user.name}---\n              {user.username}\n              <button onClick={() => editRow(user)}>Edit</button>\n              <button onClick={() => deleteUser(user.id)}>Delete</button>\n            </li>\n          ))\n        }\n    </div>\n  );\n};\n\n\n//EditUserForm.js\nconst EditUserForm = props => {\n  const [user, setUser] = useState(props.currentUser);\n\n  useEffect(() => { setUser(props.currentUser) },\n    [props]\n  );\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setUser({ ...user, [name]: value });\n  };\n\n  return (\n    <form onSubmit={e => { e.preventDefault(); props.updateUser(user.id, user) }} >\n      <label>Name</label>\n      <input type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange} />\n      <label>Username</label>\n      <input type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\n      <button>Update user</button>\n      <button onClick={() => props.setEditing(false)}>Cancel</button>\n    </form>\n  );\n};\n`.trim();\nconst curdcom = `\nclass App extends Component {\n  state = {\n    mockData: [],\n    text: \"\",\n    id: Math.random(1,100),\n    editItem: false\n  };\n  \n  handleChange = e => {\n    this.setState({text: e.target.value});\n  };\n  \n  handleAdd = e => {\n    e.preventDefault();\n    if (this.state.text.length === 0) return;\n\n    const newItem = {\n      id: this.state.id,\n      title: this.state.text\n    };\n    \n    const updatedItems = [...this.state.mockData].concat(newItem);\n\n    this.setState({\n      mockData: updatedItems,\n      text: \"\",\n      id: Math.random(1,100),\n      editItem: false\n    });\n  };\n  \n  clearList = () => {\n    this.setState({ mockData: [] });\n    };\n    \n  handleDelete = (id) => {\n      this.setState({ mockData: this.state.mockData.filter(item => item.id !== id) });\n    };\n    \n  handleEdit = id => {\n    const filteredItems = this.state.mockData.filter(item => item.id !== id);\n    const selectedItem = this.state.mockData.find(item => item.id === id);\n\n    this.setState({\n      mockData: filteredItems,\n      text: selectedItem.title,\n      editItem: true,\n      id: id\n    });\n  };\n  \n  render() {\n    return (\n      <div>\n         <form onSubmit={this.handleAdd}>\n          <div>\n            <input type=\"text\" value={this.state.text} onChange={this.handleChange} />\n          </div>\n          <button>{this.state.editItem ? \"edit item\" : \"add item\"}</button>\n        </form>\n            \n        <ul>\n        {this.state.mockData.map(item => {\n          return (\n            <div>\n              <h1>{item.title}</h1>\n            \n              <button onClick={() => this.handleEdit(item.id)}>edit</button>\n              <button onClick={() => this.handleDelete(item.id)}>delete</button>\n            </div>\n          );\n        })}\n\n        <button onClick={this.clearList}>clear list</button>\n        </ul>\n      </div>\n    );\n  }\n}`.trim();\nconst localStorage = `\nimport React, { useState, useEffect } from \"react\";\n\nconst App = () => {\n  const [todos, setTodos] = useState([]);\n  const [todo, setTodo] = useState(\"\");\n  const [todoEditing, setTodoEditing] = useState(null);\n  const [editingText, setEditingText] = useState(\"\");\n\n  useEffect(() => {\n    const json = localStorage.getItem(\"todos\");\n    const loadedTodos = JSON.parse(json);\n    if (loadedTodos) {\n      setTodos(loadedTodos);\n    }\n  }, []);\n\n  useEffect(() => {\n    const json = JSON.stringify(todos);\n    localStorage.setItem(\"todos\", json);\n  }, [todos]);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    const newTodo = {\n      id: new Date().getTime(),\n      text: todo,\n      completed: false,\n    };\n    setTodos([...todos].concat(newTodo));\n    setTodo(\"\");\n  }\n\n  function deleteTodo(id) {\n    let updatedTodos = [...todos].filter((todo) => todo.id !== id);\n    setTodos(updatedTodos);\n  }\n\n  function toggleComplete(id) {\n    let updatedTodos = [...todos].map((todo) => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  }\n\n  function submitEdits(id) {\n    const updatedTodos = [...todos].map((todo) => {\n      if (todo.id === id) {\n        todo.text = editingText;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n    setTodoEditing(null);\n  }\n\n  return (\n    <div id=\"todo-list\">\n      <h1>Todo List</h1>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          onChange={(e) => setTodo(e.target.value)}\n          value={todo}\n        />\n        <button type=\"submit\">Add Todo</button>\n      </form>\n      {todos.map((todo) => (\n        <div key={todo.id} className=\"todo\">\n          <div className=\"todo-text\">\n            <input\n              type=\"checkbox\"\n              id=\"completed\"\n              checked={todo.completed}\n              onChange={() => toggleComplete(todo.id)}\n            />\n            {todo.id === todoEditing ? (\n              <input\n                type=\"text\"\n                onChange={(e) => setEditingText(e.target.value)}\n              />\n            ) : (\n              <div>{todo.text}</div>\n            )}\n          </div>\n          <div className=\"todo-actions\">\n            {todo.id === todoEditing ? (\n              <button onClick={() => submitEdits(todo.id)}>Submit Edits</button>\n            ) : (\n              <button onClick={() => setTodoEditing(todo.id)}>Edit</button>\n            )}\n\n            <button onClick={() => deleteTodo(todo.id)}>Delete</button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n`.trim();\n\nclass MainCompo extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, \"1. Curd Component\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: curdcom,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }, \"2. Curd\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: editForm,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }, \"3. Curd Local Storage\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: localStorage,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, \"4. Slider on click\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: sliderBox,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(MainCompo);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/mainCompo.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","sliderBox","trim","editForm","curdcom","localStorage","MainCompo","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst sliderBox = `\n 0.4s ease;\n}\n\n\n#s1:checked ~ #slide3, #s2:checked ~ #slide1,\n#s3:checked ~ #slide2 {\n  box-shadow: 0 6px 10px 0 rgba(0,0,0,.3), 0 2px 2px 0 rgba(0,0,0,.2);\n  transform: translate3d(-50%,0,-100px);\n}\n\n#s1:checked ~ #slide1, #s2:checked ~ #slide2,\n#s3:checked ~ #slide3 {\n  box-shadow: 0 13px 25px 0 rgba(0,0,0,.3), 0 11px 7px 0 rgba(0,0,0,.19);\n  transform: translate3d(0,0,0);\n}\n\n#s1:checked ~ #slide2, #s2:checked ~ #slide3,\n#s3:checked ~ #slide1 {\n  box-shadow: 0 6px 10px 0 rgba(0,0,0,.3), 0 2px 2px 0 rgba(0,0,0,.2);\n  transform: translate3d(50%,0,-100px);\n}\n`.trim();\n\nconst editForm = `\nimport EditUserForm from \"./EditUserForm\";\n\nconst App = () => {\n  const usersData = [\n    { id: 1, name: \"AAA\", username: \"aiueo\" }\n  ];\n\n  const initialFormState = { id: null, name: \"\", username: \"\" };\n  const [mockData, setMockData] = useState(usersData);\n  const [user, setUser] = useState(initialFormState);\n\n  const [editing, setEditing] = useState(false);\n  const [currentUser, setCurrentUser] = useState(initialFormState);\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setUser({ ...user, [name]: value });\n  };\n\n  const addUser = user => {\n    user.id = mockData.length + 1;\n    setMockData([...mockData, user]);\n    setUser(initialFormState);\n  };\n\n  const deleteUser = id => {\n    setMockData(mockData.filter(user => user.id !== id));\n  };\n\n  const editRow = user => {\n    setEditing(true);\n    setCurrentUser({ id: user.id, name: user.name, username: user.username });\n  };\n\n  const updateUser = (id, updateUser) => {\n    setEditing(false);\n    setMockData(mockData.map(user => (user.id === id ? updateUser : user)));\n  };\n\n  return (\n    <div className=\"container\">\n      {editing?\n      <EditUserForm\n      editing={editing}\n      setEditing={setEditing}\n      currentUser={currentUser}\n      updateUser={updateUser}\n    />:\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          addUser(user);\n        }}\n      >\n        <input type=\"text\" name=\"name\" value={user.name} placeholder=\"Name\" onChange={handleInputChange} />\n        <input type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\n        <button>Add new user</button>\n      </form>\n}\n          {mockData.map(user => (\n            <li key={user.id}>\n              {user.name}---\n              {user.username}\n              <button onClick={() => editRow(user)}>Edit</button>\n              <button onClick={() => deleteUser(user.id)}>Delete</button>\n            </li>\n          ))\n        }\n    </div>\n  );\n};\n\n\n//EditUserForm.js\nconst EditUserForm = props => {\n  const [user, setUser] = useState(props.currentUser);\n\n  useEffect(() => { setUser(props.currentUser) },\n    [props]\n  );\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setUser({ ...user, [name]: value });\n  };\n\n  return (\n    <form onSubmit={e => { e.preventDefault(); props.updateUser(user.id, user) }} >\n      <label>Name</label>\n      <input type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange} />\n      <label>Username</label>\n      <input type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\n      <button>Update user</button>\n      <button onClick={() => props.setEditing(false)}>Cancel</button>\n    </form>\n  );\n};\n`.trim();\n\nconst curdcom = `\nclass App extends Component {\n  state = {\n    mockData: [],\n    text: \"\",\n    id: Math.random(1,100),\n    editItem: false\n  };\n  \n  handleChange = e => {\n    this.setState({text: e.target.value});\n  };\n  \n  handleAdd = e => {\n    e.preventDefault();\n    if (this.state.text.length === 0) return;\n\n    const newItem = {\n      id: this.state.id,\n      title: this.state.text\n    };\n    \n    const updatedItems = [...this.state.mockData].concat(newItem);\n\n    this.setState({\n      mockData: updatedItems,\n      text: \"\",\n      id: Math.random(1,100),\n      editItem: false\n    });\n  };\n  \n  clearList = () => {\n    this.setState({ mockData: [] });\n    };\n    \n  handleDelete = (id) => {\n      this.setState({ mockData: this.state.mockData.filter(item => item.id !== id) });\n    };\n    \n  handleEdit = id => {\n    const filteredItems = this.state.mockData.filter(item => item.id !== id);\n    const selectedItem = this.state.mockData.find(item => item.id === id);\n\n    this.setState({\n      mockData: filteredItems,\n      text: selectedItem.title,\n      editItem: true,\n      id: id\n    });\n  };\n  \n  render() {\n    return (\n      <div>\n         <form onSubmit={this.handleAdd}>\n          <div>\n            <input type=\"text\" value={this.state.text} onChange={this.handleChange} />\n          </div>\n          <button>{this.state.editItem ? \"edit item\" : \"add item\"}</button>\n        </form>\n            \n        <ul>\n        {this.state.mockData.map(item => {\n          return (\n            <div>\n              <h1>{item.title}</h1>\n            \n              <button onClick={() => this.handleEdit(item.id)}>edit</button>\n              <button onClick={() => this.handleDelete(item.id)}>delete</button>\n            </div>\n          );\n        })}\n\n        <button onClick={this.clearList}>clear list</button>\n        </ul>\n      </div>\n    );\n  }\n}`.trim();\n\nconst localStorage = `\nimport React, { useState, useEffect } from \"react\";\n\nconst App = () => {\n  const [todos, setTodos] = useState([]);\n  const [todo, setTodo] = useState(\"\");\n  const [todoEditing, setTodoEditing] = useState(null);\n  const [editingText, setEditingText] = useState(\"\");\n\n  useEffect(() => {\n    const json = localStorage.getItem(\"todos\");\n    const loadedTodos = JSON.parse(json);\n    if (loadedTodos) {\n      setTodos(loadedTodos);\n    }\n  }, []);\n\n  useEffect(() => {\n    const json = JSON.stringify(todos);\n    localStorage.setItem(\"todos\", json);\n  }, [todos]);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    const newTodo = {\n      id: new Date().getTime(),\n      text: todo,\n      completed: false,\n    };\n    setTodos([...todos].concat(newTodo));\n    setTodo(\"\");\n  }\n\n  function deleteTodo(id) {\n    let updatedTodos = [...todos].filter((todo) => todo.id !== id);\n    setTodos(updatedTodos);\n  }\n\n  function toggleComplete(id) {\n    let updatedTodos = [...todos].map((todo) => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  }\n\n  function submitEdits(id) {\n    const updatedTodos = [...todos].map((todo) => {\n      if (todo.id === id) {\n        todo.text = editingText;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n    setTodoEditing(null);\n  }\n\n  return (\n    <div id=\"todo-list\">\n      <h1>Todo List</h1>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          onChange={(e) => setTodo(e.target.value)}\n          value={todo}\n        />\n        <button type=\"submit\">Add Todo</button>\n      </form>\n      {todos.map((todo) => (\n        <div key={todo.id} className=\"todo\">\n          <div className=\"todo-text\">\n            <input\n              type=\"checkbox\"\n              id=\"completed\"\n              checked={todo.completed}\n              onChange={() => toggleComplete(todo.id)}\n            />\n            {todo.id === todoEditing ? (\n              <input\n                type=\"text\"\n                onChange={(e) => setEditingText(e.target.value)}\n              />\n            ) : (\n              <div>{todo.text}</div>\n            )}\n          </div>\n          <div className=\"todo-actions\">\n            {todo.id === todoEditing ? (\n              <button onClick={() => submitEdits(todo.id)}>Submit Edits</button>\n            ) : (\n              <button onClick={() => setTodoEditing(todo.id)}>Edit</button>\n            )}\n\n            <button onClick={() => deleteTodo(todo.id)}>Delete</button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n`.trim();\n\nclass MainCompo extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Curd Component</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={curdcom}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Curd</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={editForm}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Curd Local Storage</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={localStorage}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <h3>4. Slider on click</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={sliderBox}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(MainCompo));\n"]},"metadata":{},"sourceType":"module"}