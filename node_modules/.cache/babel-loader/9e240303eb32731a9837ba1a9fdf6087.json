{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';import Neural from'../../../assets/AI/digits_nn.jpg';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var redesign={height:200,width:500};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var childsFile=\"\\nimport tensorflow as tf\\nfrom tensorflow import keras\\nimport matplotlib.pyplot as plt\\n%matplotlib inline\\nimport numpy as np\\n\\n(X_train, y_train) , (X_test, y_test) = keras.datasets.mnist.load_data()\\nX_train[0].shape\\nplt.matshow(X_train[0])\\n\\nX_train = X_train / 255\\nX_test = X_test / 255\\n\\nX_train_flattened = X_train.reshape(len(X_train), 28*28)\\nX_test_flattened = X_test.reshape(len(X_test), 28*28)\\n\\nX_train_flattened.shape\\nX_train_flattened[0]\\n\".trim();var neural=\"\\nmodel = keras.Sequential([keras.layers.Dense(10, input_shape=(784,), activation='sigmoid')])\\n\\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\\n\\nmodel.fit(X_train_flattened, y_train, epochs=5)\\n\\nmodel.evaluate(X_test_flattened, y_test)\\ny_predicted = model.predict(X_test_flattened)\\n\\nplt.matshow(X_test[0])\\n\".trim();var seaborn=\"\\nimport seaborn as sn\\n\\nplt.figure(figsize = (10,7))\\nsn.heatmap(cm, annot=True, fmt='d')\\nplt.xlabel('Predicted')\\nplt.ylabel('Truth')\\n\".trim();var hidden=\"\\nmodel = keras.Sequential([\\n  keras.layers.Dense(100, input_shape=(784,), activation='relu'),\\n  keras.layers.Dense(10, activation='sigmoid')\\n])\\n\\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\\n\\nmodel.fit(X_train_flattened, y_train, epochs=5)\\nmodel.evaluate(X_test_flattened,y_test)\\n\\ny_predicted = model.predict(X_test_flattened)\\ny_predicted_labels = [np.argmax(i) for i in y_predicted]\\ncm = tf.math.confusion_matrix(labels=y_test,predictions=y_predicted_labels)\\n\\nplt.figure(figsize = (10,7))\\nsn.heatmap(cm, annot=True, fmt='d')\\nplt.xlabel('Predicted')\\nplt.ylabel('Truth')\\n\".trim();var reshape=\"\\nmodel = keras.Sequential([\\n  keras.layers.Flatten(input_shape=(28, 28)),\\n  keras.layers.Dense(100, activation='relu'),\\n  keras.layers.Dense(10, activation='sigmoid')\\n])\\n\\nmodel.compile(optimizer='adam',\\n            loss='sparse_categorical_crossentropy',\\n            metrics=['accuracy'])\\n\\nmodel.fit(X_train, y_train, epochs=10)\\n\\n\\nmodel.evaluate(X_test,y_test)\\n\".trim();var AngularCompile=/*#__PURE__*/function(_Component){_inherits(AngularCompile,_Component);function AngularCompile(){_classCallCheck(this,AngularCompile);return _possibleConstructorReturn(this,_getPrototypeOf(AngularCompile).apply(this,arguments));}_createClass(AngularCompile,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Handwritten digits classification using neural network\"),React.createElement(\"b\",null,\"we will classify handwritten digits using a simple neural network which has only input and output layers. We will than add a hidden layer and see how the performance of the model improves\"),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:childsFile,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Very simple neural network with no hidden layers\"),React.createElement(\"img\",{src:Neural,alt:\"Theata\",className:\"responsive2\",style:redesign}),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:neural,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Seaborn\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Seaborn library used for making statistical graphics in Python. It builds on top of matplotlib and integrates with pandas data structures.\"),React.createElement(\"li\",null,\"Seaborn helps to explore and understand our data.\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:seaborn,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Using hidden layer\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:hidden,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Using Flatten layer so that we don't have to call .reshape on input dataset\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:reshape,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return AngularCompile;}(Component);export default withStyles(styles)(AngularCompile);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjs/deepAngularjs/angCompiler.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Neural","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","childsFile","trim","neural","seaborn","hidden","reshape","AngularCompile","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Neural from '../../../assets/AI/digits_nn.jpg'\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst childsFile = `\nimport tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport numpy as np\n\n(X_train, y_train) , (X_test, y_test) = keras.datasets.mnist.load_data()\nX_train[0].shape\nplt.matshow(X_train[0])\n\nX_train = X_train / 255\nX_test = X_test / 255\n\nX_train_flattened = X_train.reshape(len(X_train), 28*28)\nX_test_flattened = X_test.reshape(len(X_test), 28*28)\n\nX_train_flattened.shape\nX_train_flattened[0]\n`.trim();\n\nconst neural = `\nmodel = keras.Sequential([keras.layers.Dense(10, input_shape=(784,), activation='sigmoid')])\n\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n\nmodel.fit(X_train_flattened, y_train, epochs=5)\n\nmodel.evaluate(X_test_flattened, y_test)\ny_predicted = model.predict(X_test_flattened)\n\nplt.matshow(X_test[0])\n`.trim();\n\nconst seaborn = `\nimport seaborn as sn\n\nplt.figure(figsize = (10,7))\nsn.heatmap(cm, annot=True, fmt='d')\nplt.xlabel('Predicted')\nplt.ylabel('Truth')\n`.trim();\n\nconst hidden = `\nmodel = keras.Sequential([\n  keras.layers.Dense(100, input_shape=(784,), activation='relu'),\n  keras.layers.Dense(10, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n\nmodel.fit(X_train_flattened, y_train, epochs=5)\nmodel.evaluate(X_test_flattened,y_test)\n\ny_predicted = model.predict(X_test_flattened)\ny_predicted_labels = [np.argmax(i) for i in y_predicted]\ncm = tf.math.confusion_matrix(labels=y_test,predictions=y_predicted_labels)\n\nplt.figure(figsize = (10,7))\nsn.heatmap(cm, annot=True, fmt='d')\nplt.xlabel('Predicted')\nplt.ylabel('Truth')\n`.trim();\n\nconst reshape = `\nmodel = keras.Sequential([\n  keras.layers.Flatten(input_shape=(28, 28)),\n  keras.layers.Dense(100, activation='relu'),\n  keras.layers.Dense(10, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam',\n            loss='sparse_categorical_crossentropy',\n            metrics=['accuracy'])\n\nmodel.fit(X_train, y_train, epochs=10)\n\n\nmodel.evaluate(X_test,y_test)\n`.trim();\n\n\nclass AngularCompile extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Handwritten digits classification using neural network</h3>\n              <b>we will classify handwritten digits using a simple neural network which has only input and output\n                layers. We will than add a hidden layer and see how the performance of the model improves</b>\n              <br />\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={childsFile}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Very simple neural network with no hidden layers</h3>\n              <img src={Neural} alt=\"Theata\" className=\"responsive2\" style={redesign} />\n              <br />\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={neural}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Seaborn</h3>\n              <ul>\n                <li>Seaborn library used for making statistical graphics in Python. It builds on top of matplotlib and integrates with pandas data structures.</li>\n                <li>Seaborn helps to explore and understand our data.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={seaborn}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Using hidden layer</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={hidden}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Using Flatten layer so that we don't have to call .reshape on input dataset</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={reshape}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(AngularCompile));\n"]},"metadata":{},"sourceType":"module"}