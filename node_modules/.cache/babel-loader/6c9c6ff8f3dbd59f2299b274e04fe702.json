{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/ReactJs/reactJs_hooks/dropdownSelect.js\";\nimport React, { Component } from 'react';\nimport PrismCode from '../prismCode';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../styles.css';\nimport Sidebar from '../sidebar';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst dropSelect = `\nclass App extends Component {\n  state = {\n      mockData: [],\n      name: \"\"\n    };\n\n  handleSubmitCourse = (e) => {\n    alert(\"Your selected value is: \" + this.state.name);\n    e.preventDefault();\n  }\n\n  handleChange = e => {\n    this.setState({ value: e.target.value });\n  };\n\n  handleChangeCourse = e => {\n    this.setState({ name: e.target.value });\n  };\n\n  getUnique(arr, comp) {\n    const unique = arr\n      //store the comparison values in array\n      .map(e => e[comp])\n\n      // store the keys of the unique objects\n      .map((e, i, final) => final.indexOf(e) === i && i)\n\n      // eliminate the dead keys & store unique objects\n      .filter(e => arr[e])\n\n      .map(e => arr[e]);\n\n    return unique;\n  }\n  \ncomponentDidMount(){\n  let url=\"https://jsonplaceholder.typicode.com/users/?q=\";\n    axios.get(url)\n     .then(res => {\n        const mockData= res.data\n        this.setState({ mockData: mockData })\n    })\n  }\n\n\n  render() {\n    const uniqueCouse = this.getUnique(this.state.mockData, \"username\");\n\n    const mockData = this.state.mockData;\n    const name = this.state.name;\n\n    const filterDropdown = mockData.filter(function(result) {\n      return result.username === name;\n    });\n\n    return (\n      <div>\n        <form onSubmit={this.handleSubmitCourse}>\n            <select value={name} onChange={this.handleChangeCourse}>\n              {uniqueCouse.map(name => (\n                <option key={name.id} value={name.username}>\n                  {name.username}\n                </option>\n              ))}\n            </select>\n            \n          <div>\n            {filterDropdown.map(name => (\n              <div key={name.id}>{name.name}</div>\n            ))}\n          </div>\n        </form>\n      </div>\n    );\n  }\n}`.trim();\nconst checkFilter = `\n//App.js\n\nimport FilterableProductTable from './FilterableProductTable'\n\nconst App =() =>{\n//   const [PRODUCTS, setData ] = useState([]);\n  \n//   useEffect(() => {\n//     loadData();\n//  }, [])\n \n//  const loadData = async () => {\n//    await fetch(\"https://jsonplaceholder.typicode.com/posts\")\n//          .then(res => res.json())\n//          .then(receivedData => setData(receivedData));\n//  }\n//  console.log('ssss',PRODUCTS)\n  \n  const PRODUCTS = [\n    {category: 'Sporting Goods', price: '$49.99', stocked: true, name: 'Football'},\n    {category: 'Sporting Goods', price: '$9.99', stocked: true, name: 'Baseball'},\n    {category: 'Sporting Goods', price: '$29.99', stocked: false, name: 'Basketball'},\n    {category: 'Electronics', price: '$99.99', stocked: true, name: 'iPod Touch'},\n    {category: 'Electronics', price: '$399.99', stocked: false, name: 'iPhone 5'},\n    {category: 'Electronics', price: '$199.99', stocked: true, name: 'Nexus 7'}\n  ];\n  return (\n    <div>\n      <FilterableProductTable products={PRODUCTS} />\n    </div>\n  );\n}\n\n\n//FilterableProductTable.js\nimport SearchBar from './SearchBar';\nimport ProductTable from './ProductTable';\n\nclass FilterableProductTable extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        filterText: '',\n        inStockOnly: false\n      };\n    }\n  \n    handleFilterTextChange = (filterText)=> {\n      this.setState({\n        filterText: filterText\n      });\n    }\n    \n    handleInStockChange = (inStockOnly) => {\n      this.setState({\n        inStockOnly: inStockOnly\n      })\n    }\n  \n    render() {\n      return (\n        <>\n          <SearchBar\n            filterText={this.state.filterText}\n            inStockOnly={this.state.inStockOnly}\n            onFilterTextChange={this.handleFilterTextChange}\n            onInStockChange={this.handleInStockChange}\n          />\n          <ProductTable\n            products={this.props.products}\n            filterText={this.state.filterText}\n            inStockOnly={this.state.inStockOnly}\n          />\n        </>\n      );\n    }\n  }\n  \n  \n  //SearchBar.js\n  const SearchBar =(props)=> {\n    const  handleFilterTextChange =(e)=> {\n        props.onFilterTextChange(e.target.value);\n      }\n      \n      const handleInStockChange=(e) => {\n        props.onInStockChange(e.target.checked);\n      }\n      \n        return (\n          <form>\n            <input\n              type=\"text\"\n              placeholder=\"Search...\"\n              value={props.filterText}\n              onChange={handleFilterTextChange}\n            />\n            <p>\n              <input\n                type=\"checkbox\"\n                checked={props.inStockOnly}\n                onChange={handleInStockChange}\n              />\n              {' '}\n              Only show products in stock\n            </p>\n          </form>\n        );\n    }\n    \n    \n//ProductTable.js\nconst ProductCategoryRow =(props)=> {\n  const category = props.category;\n  return (\n    <tr>\n      <th colSpan=\"2\">\n        {category}\n      </th>\n    </tr>\n  );\n}\n\nconst ProductRow = (props)=>{\n  const product = props.product;\n  const name = product.stocked ?\n    product.name :\n    <span style={{color: 'red'}}>\n      {product.name}\n    </span>;\n\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{product.price}</td>\n    </tr>\n  );\n}\n\nconst ProductTable = (props)=> {\n      const filterText = props.filterText;\n      const inStockOnly = props.inStockOnly;\n  \n      const rows = [];\n      let lastCategory = null;\n  \n      props.products.forEach((product) => {\n        if ((product.name).toLowerCase().indexOf(filterText.toLowerCase()) === -1) {\n          return;\n        }\n        if (inStockOnly && !product.stocked) {\n          return;\n        }\n        if (product.category !== lastCategory) {\n          rows.push(\n            <ProductCategoryRow\n              category={product.category}\n              key={product.category} />\n          );\n        }\n        rows.push(\n          <ProductRow\n            product={product}\n            key={product.name}\n          />\n        );\n        lastCategory = product.category;\n      });\n  \n      return (\n        <table>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Price</th>\n            </tr>\n          </thead>\n          <tbody>{rows}</tbody>\n        </table>\n      );\n  }`.trim();\nconst countAdd = `\nclass App extends Component{\n  state={ mockData:[] }\n  \ncomponentDidMount(){\n  let url=\"https://jsonplaceholder.typicode.com/users\";\n    axios.get(url)\n     .then(res => {\n        const mockData= res.data\n        this.setState({ mockData })\n    })\n}\n\nrender() {\n  return ( \n   <div>\n      {this.state.mockData.map((value) => (\n          <Previews data={value}/> \n      ))}\n    </div>\n  );\n}\n}\n\n  // Previews.js\n  class Previews extends Component {\n    state = { count: 0 };\n    \n    handleCount = () => {\n      this.setState({ count: this.state.count + 1 })\n    }\n\n    render() {\n      return (\n       <div>\n         {this.state.count}\n         <button onClick={this.handleCount}>btn</button>\n            \n            <div>{this.props.data.name}</div>\n         </div>\n       );\n     }\n   }`.trim();\n\nclass DropdownSelect extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, \"1. Dropdown filter data on the basis of select key\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: dropSelect,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, \"2. Check Filter\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: checkFilter,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, \"3. Update single card count onClick\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: countAdd,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(DropdownSelect);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/ReactJs/reactJs_hooks/dropdownSelect.js"],"names":["React","Component","PrismCode","Prism","Grid","Paper","withStyles","List","Sidebar","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","dropSelect","trim","checkFilter","countAdd","DropdownSelect","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PrismCode from '../prismCode';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../styles.css'\nimport Sidebar from '../sidebar';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst dropSelect = `\nclass App extends Component {\n  state = {\n      mockData: [],\n      name: \"\"\n    };\n\n  handleSubmitCourse = (e) => {\n    alert(\"Your selected value is: \" + this.state.name);\n    e.preventDefault();\n  }\n\n  handleChange = e => {\n    this.setState({ value: e.target.value });\n  };\n\n  handleChangeCourse = e => {\n    this.setState({ name: e.target.value });\n  };\n\n  getUnique(arr, comp) {\n    const unique = arr\n      //store the comparison values in array\n      .map(e => e[comp])\n\n      // store the keys of the unique objects\n      .map((e, i, final) => final.indexOf(e) === i && i)\n\n      // eliminate the dead keys & store unique objects\n      .filter(e => arr[e])\n\n      .map(e => arr[e]);\n\n    return unique;\n  }\n  \ncomponentDidMount(){\n  let url=\"https://jsonplaceholder.typicode.com/users/?q=\";\n    axios.get(url)\n     .then(res => {\n        const mockData= res.data\n        this.setState({ mockData: mockData })\n    })\n  }\n\n\n  render() {\n    const uniqueCouse = this.getUnique(this.state.mockData, \"username\");\n\n    const mockData = this.state.mockData;\n    const name = this.state.name;\n\n    const filterDropdown = mockData.filter(function(result) {\n      return result.username === name;\n    });\n\n    return (\n      <div>\n        <form onSubmit={this.handleSubmitCourse}>\n            <select value={name} onChange={this.handleChangeCourse}>\n              {uniqueCouse.map(name => (\n                <option key={name.id} value={name.username}>\n                  {name.username}\n                </option>\n              ))}\n            </select>\n            \n          <div>\n            {filterDropdown.map(name => (\n              <div key={name.id}>{name.name}</div>\n            ))}\n          </div>\n        </form>\n      </div>\n    );\n  }\n}`.trim();\n\nconst checkFilter = `\n//App.js\n\nimport FilterableProductTable from './FilterableProductTable'\n\nconst App =() =>{\n//   const [PRODUCTS, setData ] = useState([]);\n  \n//   useEffect(() => {\n//     loadData();\n//  }, [])\n \n//  const loadData = async () => {\n//    await fetch(\"https://jsonplaceholder.typicode.com/posts\")\n//          .then(res => res.json())\n//          .then(receivedData => setData(receivedData));\n//  }\n//  console.log('ssss',PRODUCTS)\n  \n  const PRODUCTS = [\n    {category: 'Sporting Goods', price: '$49.99', stocked: true, name: 'Football'},\n    {category: 'Sporting Goods', price: '$9.99', stocked: true, name: 'Baseball'},\n    {category: 'Sporting Goods', price: '$29.99', stocked: false, name: 'Basketball'},\n    {category: 'Electronics', price: '$99.99', stocked: true, name: 'iPod Touch'},\n    {category: 'Electronics', price: '$399.99', stocked: false, name: 'iPhone 5'},\n    {category: 'Electronics', price: '$199.99', stocked: true, name: 'Nexus 7'}\n  ];\n  return (\n    <div>\n      <FilterableProductTable products={PRODUCTS} />\n    </div>\n  );\n}\n\n\n//FilterableProductTable.js\nimport SearchBar from './SearchBar';\nimport ProductTable from './ProductTable';\n\nclass FilterableProductTable extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        filterText: '',\n        inStockOnly: false\n      };\n    }\n  \n    handleFilterTextChange = (filterText)=> {\n      this.setState({\n        filterText: filterText\n      });\n    }\n    \n    handleInStockChange = (inStockOnly) => {\n      this.setState({\n        inStockOnly: inStockOnly\n      })\n    }\n  \n    render() {\n      return (\n        <>\n          <SearchBar\n            filterText={this.state.filterText}\n            inStockOnly={this.state.inStockOnly}\n            onFilterTextChange={this.handleFilterTextChange}\n            onInStockChange={this.handleInStockChange}\n          />\n          <ProductTable\n            products={this.props.products}\n            filterText={this.state.filterText}\n            inStockOnly={this.state.inStockOnly}\n          />\n        </>\n      );\n    }\n  }\n  \n  \n  //SearchBar.js\n  const SearchBar =(props)=> {\n    const  handleFilterTextChange =(e)=> {\n        props.onFilterTextChange(e.target.value);\n      }\n      \n      const handleInStockChange=(e) => {\n        props.onInStockChange(e.target.checked);\n      }\n      \n        return (\n          <form>\n            <input\n              type=\"text\"\n              placeholder=\"Search...\"\n              value={props.filterText}\n              onChange={handleFilterTextChange}\n            />\n            <p>\n              <input\n                type=\"checkbox\"\n                checked={props.inStockOnly}\n                onChange={handleInStockChange}\n              />\n              {' '}\n              Only show products in stock\n            </p>\n          </form>\n        );\n    }\n    \n    \n//ProductTable.js\nconst ProductCategoryRow =(props)=> {\n  const category = props.category;\n  return (\n    <tr>\n      <th colSpan=\"2\">\n        {category}\n      </th>\n    </tr>\n  );\n}\n\nconst ProductRow = (props)=>{\n  const product = props.product;\n  const name = product.stocked ?\n    product.name :\n    <span style={{color: 'red'}}>\n      {product.name}\n    </span>;\n\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{product.price}</td>\n    </tr>\n  );\n}\n\nconst ProductTable = (props)=> {\n      const filterText = props.filterText;\n      const inStockOnly = props.inStockOnly;\n  \n      const rows = [];\n      let lastCategory = null;\n  \n      props.products.forEach((product) => {\n        if ((product.name).toLowerCase().indexOf(filterText.toLowerCase()) === -1) {\n          return;\n        }\n        if (inStockOnly && !product.stocked) {\n          return;\n        }\n        if (product.category !== lastCategory) {\n          rows.push(\n            <ProductCategoryRow\n              category={product.category}\n              key={product.category} />\n          );\n        }\n        rows.push(\n          <ProductRow\n            product={product}\n            key={product.name}\n          />\n        );\n        lastCategory = product.category;\n      });\n  \n      return (\n        <table>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Price</th>\n            </tr>\n          </thead>\n          <tbody>{rows}</tbody>\n        </table>\n      );\n  }`.trim();\n\nconst countAdd = `\nclass App extends Component{\n  state={ mockData:[] }\n  \ncomponentDidMount(){\n  let url=\"https://jsonplaceholder.typicode.com/users\";\n    axios.get(url)\n     .then(res => {\n        const mockData= res.data\n        this.setState({ mockData })\n    })\n}\n\nrender() {\n  return ( \n   <div>\n      {this.state.mockData.map((value) => (\n          <Previews data={value}/> \n      ))}\n    </div>\n  );\n}\n}\n\n  // Previews.js\n  class Previews extends Component {\n    state = { count: 0 };\n    \n    handleCount = () => {\n      this.setState({ count: this.state.count + 1 })\n    }\n\n    render() {\n      return (\n       <div>\n         {this.state.count}\n         <button onClick={this.handleCount}>btn</button>\n            \n            <div>{this.props.data.name}</div>\n         </div>\n       );\n     }\n   }`.trim();\n\n\nclass DropdownSelect extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Dropdown filter data on the basis of select key</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={dropSelect}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Check Filter</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={checkFilter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>3. Update single card count onClick</b>\n              <div style={titles}>\n                <PrismCode\n                  code={countAdd}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DropdownSelect));"]},"metadata":{},"sourceType":"module"}