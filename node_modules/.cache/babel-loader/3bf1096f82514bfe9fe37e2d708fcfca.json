{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic3.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst rotate = `\nconst rotate = (matrix = []) => {\n  const n = matrix.length\n  for (let i = 0; i < Math.floor(n / 2); i++) {\n    const temp = matrix[i]\n    matrix[i] = matrix[n - 1 - i]\n    matrix[n - 1 - i] = temp\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      const temp = matrix[i][j]\n      matrix[i][j] = matrix[j][i]\n      matrix[j][i] = temp\n    }\n  }\n  return matrix\n}\n\nconsole.log(rotate([[1,2,3],[4,5,6],[7,8,9]]))`.trim();\nconst groupAnagrams = `\nconst groupAnagrams = function (strs) {\n  const sortStr = str => str.split('').sort((a, b) => a.localeCompare(b)).join('')\n  const sortedMap = strs.map(sortStr).reduce(\n    (map, current, index) => {\n      if (map[current]) {\n        map[current].push(strs[index])\n      } else {\n        map[current] = [strs[index]]\n      }\n      return map\n    },\n    {},\n  )\n  return Object.keys(sortedMap).map(key => sortedMap[key])\n}\n\nconsole.log(groupAnagrams([\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]))`.trim();\nconst myPow = `\nconst myPow = (x, n) => {\n  if (n === 0) {\n    return 1\n  }\n  const temp = myPow(x, Math.floor(Math.abs(n / 2)))\n  const result = n % 2 === 0 ? temp * temp : x * temp * temp\n  return n < 0 ? 1 / result : result\n}\n\nconsole.log(myPow(2.00000, 10))`.trim();\nconst spiralOrder = `\nvar spiralOrder = function(matrix) {\n  let result = []\n  if(!matrix.length) {\n      return result\n  }\n  let rowMin = 0\n  let rowMax = matrix.length -1\n  let columnMin = 0\n  let columnMax = matrix[0].length - 1\n  \n  let i = 0\n  let j = 0\n  let direction = \"right\"\n  while(result.length < matrix.length * matrix[0].length) {\n\n      result.push(matrix[i][j])\n      if(direction === \"right\") {\n         \n          if(j === columnMax) {\n              rowMin += 1\n              i = rowMin\n              direction = \"down\"\n          } else {\n              j++\n          }\n      } else if(direction === \"down\") {\n          if(i === rowMax) {\n              direction = \"left\"\n              columnMax -= 1\n              j = columnMax\n          } else {\n              i++\n          }\n      } else if(direction === \"left\") {\n\n          if(j === columnMin) {\n              direction = \"up\"\n              rowMax -= 1\n               i = rowMax\n          } else {\n              j--\n          }\n      } else {\n          if(i === rowMin) {\n              direction = \"right\"\n              columnMin += 1\n               j = columnMin\n          } else {\n              i--\n          }\n      }\n  }\n  return result \n};\n\n\nconsole.log(spiralOrder([\n  [ 1, 2, 3 ],\n  [ 4, 5, 6 ],\n  [ 7, 8, 9 ]\n ]))`.trim();\nconst uniquePaths = `\nconst uniquePaths = (m, n) => {\n  const memo = {}\n  const aux = (rowIndex, columnIndex) => {\n    if (memo[rowIndex] !== undefined && memo[rowIndex][columnIndex] !== undefined) {\n      return memo[rowIndex][columnIndex]\n    }\n    if (rowIndex >= m || columnIndex >= n) {\n      return 0\n    }\n    if (rowIndex === m - 1 && columnIndex === n - 1) {\n      return 1\n    }\n    memo[rowIndex] = memo[rowIndex] || {}\n    memo[rowIndex][columnIndex] = aux(rowIndex + 1, columnIndex) + aux(rowIndex, columnIndex + 1)\n    return memo[rowIndex][columnIndex]\n  }\n  return aux(0, 0)\n}\n\nconsole.log(uniquePaths(7,3))`.trim();\nconst addBinary = `\nconst addBinary = function (a, b) {\n  const reverse = x => x.split('').reverse()\n  const { shorter, longer } = a.length > b.length\n    ? { shorter: reverse(b), longer: reverse(a) }\n    : { shorter: reverse(a), longer: reverse(b) }\n\n  let reminder = 0\n  const digits = longer.map((num1, index) => {\n    let res = parseInt(num1, 10) + reminder\n      + (parseInt(shorter[index], 10) ? parseInt(shorter[index], 10) : 0)\n    if (res >= 2) {\n      res -= 2\n      reminder = 1\n    } else {\n      reminder = 0\n    }\n    return res\n  })\n  if (reminder === 1) {\n    digits.push(reminder)\n  }\n  return digits.reverse().join('')\n}\n\nconsole.log(addBinary(\"1010\", \"1011\"))`.trim();\nconst mySqrt = `\nconst mySqrt = (x) => {\n  let r = x\n  while (r * r > x) {\n    r = Math.floor((r + x / r) / 2)\n  }\n\n  return r\n}\n\nconsole.log(mySqrt(4))`.trim();\nconst climbStairs = `\nconst climbStairs = (n) => {\n  const memo = {}\n  const aux = (count = 0) => {\n    if (memo[count] !== undefined) {\n      return memo[count]\n    }\n    if (count === n) {\n      return 1\n    }\n    if (count > n) {\n      return 0\n    }\n    memo[count] = aux(count + 1) + aux(count + 2)\n    return memo[count]\n  }\n  return aux()\n}\n\nconsole.log(climbStairs(3))`.trim();\n\nclass DSLogic3 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, \"1. Rotate Image.\"), \"You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }), \"You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }), \"Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }), \"Output: [[7,4,1],[8,5,2],[9,6,3]]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: rotate,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, \"2. Group Anagrams.\"), \"Given an array of strings strs, group the anagrams together. You can return the answer in any order.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }), \"An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }), \"Input: strs = [\\\"eat\\\",\\\"tea\\\",\\\"tan\\\",\\\"ate\\\",\\\"nat\\\",\\\"bat\\\"]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }), \"Output: [[\\\"bat\\\"],[\\\"nat\\\",\\\"tan\\\"],[\\\"ate\\\",\\\"eat\\\",\\\"tea\\\"]]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: groupAnagrams,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, \"3. Pow(x, n).\"), \"Input: x = 2.00000, n = 10\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }), \"Output: 1024.00000\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: myPow,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, \"5. Spiral Matrix.\"), \"Input: [\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }), \"[ 1, 2, 3 ],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }), \"[ 4, 5, 6 ],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }), \"[ 7, 8, 9 ]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }), \"]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }), \"Output: [1,2,3,6,9,8,7,4,5]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: spiralOrder,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, \"6. Unique Paths.\"), \"A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }), \"The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }), \"How many possible unique paths are there? \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }), \"Input: m = 7, n = 3\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }), \"Output: 28\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: uniquePaths,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, \"8. Add Binary\"), \"Given two binary strings, return their sum (also a binary string).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }), \"The input strings are both non-empty and contains only characters 1 or 0.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }), \"Input: a = \\\"1010\\\", b = \\\"1011\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }), \"Output: \\\"10101\\\"\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: addBinary,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, \"9. Sqrt(x).\"), \"Input: 4\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }), \"Output: 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }), \"Input: 8\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }), \"Output: 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }), \"Explanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: mySqrt,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }, \"10. Climbing Stairs.\"), \"You are climbing a stair case. It takes n steps to reach to the top.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }), \"Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }), \"Input: 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }), \"Output: 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }), \"Explanation: There are two ways to climb to the top.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }), \"1. 1 step + 1 step\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }), \"2. 2 steps\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }), \"Input: 3\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }), \"Output: 3\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }), \"Explanation: There are three ways to climb to the top.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }), \"1. 1 step + 1 step + 1 step\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }), \"2. 1 step + 2 steps\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }), \"3. 2 steps + 1 step\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: climbStairs,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(DSLogic3);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic3.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","rotate","trim","groupAnagrams","myPow","spiralOrder","uniquePaths","addBinary","mySqrt","climbStairs","DSLogic3","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst rotate = `\nconst rotate = (matrix = []) => {\n  const n = matrix.length\n  for (let i = 0; i < Math.floor(n / 2); i++) {\n    const temp = matrix[i]\n    matrix[i] = matrix[n - 1 - i]\n    matrix[n - 1 - i] = temp\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      const temp = matrix[i][j]\n      matrix[i][j] = matrix[j][i]\n      matrix[j][i] = temp\n    }\n  }\n  return matrix\n}\n\nconsole.log(rotate([[1,2,3],[4,5,6],[7,8,9]]))`.trim();\n\nconst groupAnagrams = `\nconst groupAnagrams = function (strs) {\n  const sortStr = str => str.split('').sort((a, b) => a.localeCompare(b)).join('')\n  const sortedMap = strs.map(sortStr).reduce(\n    (map, current, index) => {\n      if (map[current]) {\n        map[current].push(strs[index])\n      } else {\n        map[current] = [strs[index]]\n      }\n      return map\n    },\n    {},\n  )\n  return Object.keys(sortedMap).map(key => sortedMap[key])\n}\n\nconsole.log(groupAnagrams([\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]))`.trim();\n\nconst myPow = `\nconst myPow = (x, n) => {\n  if (n === 0) {\n    return 1\n  }\n  const temp = myPow(x, Math.floor(Math.abs(n / 2)))\n  const result = n % 2 === 0 ? temp * temp : x * temp * temp\n  return n < 0 ? 1 / result : result\n}\n\nconsole.log(myPow(2.00000, 10))`.trim();\n\n\n\nconst spiralOrder = `\nvar spiralOrder = function(matrix) {\n  let result = []\n  if(!matrix.length) {\n      return result\n  }\n  let rowMin = 0\n  let rowMax = matrix.length -1\n  let columnMin = 0\n  let columnMax = matrix[0].length - 1\n  \n  let i = 0\n  let j = 0\n  let direction = \"right\"\n  while(result.length < matrix.length * matrix[0].length) {\n\n      result.push(matrix[i][j])\n      if(direction === \"right\") {\n         \n          if(j === columnMax) {\n              rowMin += 1\n              i = rowMin\n              direction = \"down\"\n          } else {\n              j++\n          }\n      } else if(direction === \"down\") {\n          if(i === rowMax) {\n              direction = \"left\"\n              columnMax -= 1\n              j = columnMax\n          } else {\n              i++\n          }\n      } else if(direction === \"left\") {\n\n          if(j === columnMin) {\n              direction = \"up\"\n              rowMax -= 1\n               i = rowMax\n          } else {\n              j--\n          }\n      } else {\n          if(i === rowMin) {\n              direction = \"right\"\n              columnMin += 1\n               j = columnMin\n          } else {\n              i--\n          }\n      }\n  }\n  return result \n};\n\n\nconsole.log(spiralOrder([\n  [ 1, 2, 3 ],\n  [ 4, 5, 6 ],\n  [ 7, 8, 9 ]\n ]))`.trim();\n\nconst uniquePaths = `\nconst uniquePaths = (m, n) => {\n  const memo = {}\n  const aux = (rowIndex, columnIndex) => {\n    if (memo[rowIndex] !== undefined && memo[rowIndex][columnIndex] !== undefined) {\n      return memo[rowIndex][columnIndex]\n    }\n    if (rowIndex >= m || columnIndex >= n) {\n      return 0\n    }\n    if (rowIndex === m - 1 && columnIndex === n - 1) {\n      return 1\n    }\n    memo[rowIndex] = memo[rowIndex] || {}\n    memo[rowIndex][columnIndex] = aux(rowIndex + 1, columnIndex) + aux(rowIndex, columnIndex + 1)\n    return memo[rowIndex][columnIndex]\n  }\n  return aux(0, 0)\n}\n\nconsole.log(uniquePaths(7,3))`.trim();\n\n\n\nconst addBinary = `\nconst addBinary = function (a, b) {\n  const reverse = x => x.split('').reverse()\n  const { shorter, longer } = a.length > b.length\n    ? { shorter: reverse(b), longer: reverse(a) }\n    : { shorter: reverse(a), longer: reverse(b) }\n\n  let reminder = 0\n  const digits = longer.map((num1, index) => {\n    let res = parseInt(num1, 10) + reminder\n      + (parseInt(shorter[index], 10) ? parseInt(shorter[index], 10) : 0)\n    if (res >= 2) {\n      res -= 2\n      reminder = 1\n    } else {\n      reminder = 0\n    }\n    return res\n  })\n  if (reminder === 1) {\n    digits.push(reminder)\n  }\n  return digits.reverse().join('')\n}\n\nconsole.log(addBinary(\"1010\", \"1011\"))`.trim();\n\nconst mySqrt = `\nconst mySqrt = (x) => {\n  let r = x\n  while (r * r > x) {\n    r = Math.floor((r + x / r) / 2)\n  }\n\n  return r\n}\n\nconsole.log(mySqrt(4))`.trim();\n\nconst climbStairs = `\nconst climbStairs = (n) => {\n  const memo = {}\n  const aux = (count = 0) => {\n    if (memo[count] !== undefined) {\n      return memo[count]\n    }\n    if (count === n) {\n      return 1\n    }\n    if (count > n) {\n      return 0\n    }\n    memo[count] = aux(count + 1) + aux(count + 2)\n    return memo[count]\n  }\n  return aux()\n}\n\nconsole.log(climbStairs(3))`.trim();\n\n\nclass DSLogic3 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Rotate Image.</h3>\n              You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\n<br/>\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\n<br/><br/>Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]<br/>\nOutput: [[7,4,1],[8,5,2],[9,6,3]]\n              <div style={titles}>\n                <PrismCode\n                  code={rotate}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>2. Group Anagrams.</h3>\n              Given an array of strings strs, group the anagrams together. You can return the answer in any order.\n              <br/>\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n<br/> <br/>\nInput: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]<br/>\nOutput: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n              <div style={titles}>\n                <PrismCode\n                  code={groupAnagrams}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>3. Pow(x, n).</h3>\n              Input: x = 2.00000, n = 10<br/>\nOutput: 1024.00000\n              <div style={titles}>\n                <PrismCode\n                  code={myPow}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              \n\n              <h3>5. Spiral Matrix.</h3>\n              Input:\n[<br/>\n [ 1, 2, 3 ],<br/>\n [ 4, 5, 6 ],<br/>\n [ 7, 8, 9 ]<br/>\n]<br/><br/>\nOutput: [1,2,3,6,9,8,7,4,5]\n              <div style={titles}>\n                <PrismCode\n                  code={spiralOrder}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>6. Unique Paths.</h3>\n              A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\n              <br/>\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\n<br/>\nHow many possible unique paths are there? <br/> <br/>\nInput: m = 7, n = 3<br/>\nOutput: 28\n              <div style={titles}>\n                <PrismCode\n                  code={uniquePaths}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              \n\n              <h3>8. Add Binary</h3>\n              Given two binary strings, return their sum (also a binary string).\n              <br/>\nThe input strings are both non-empty and contains only characters 1 or 0.<br/>\nInput: a = \"1010\", b = \"1011\"<br/>\nOutput: \"10101\"\n              <div style={titles}>\n                <PrismCode\n                  code={addBinary}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>9. Sqrt(x).</h3>\n              Input: 4<br/>\nOutput: 2<br/><br/>\nExample 2:<br/>\n\nInput: 8<br/>\nOutput: 2<br/>\nExplanation: The square root of 8 is 2.82842..., and since \n             the decimal part is truncated, 2 is returned.\n\n              <div style={titles}>\n                <PrismCode\n                  code={mySqrt}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>10. Climbing Stairs.</h3>\n              You are climbing a stair case. It takes n steps to reach to the top.<br/>\n\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?<br/>\n\nExample 1:<br/>\n\nInput: 2<br/>\nOutput: 2<br/>\nExplanation: There are two ways to climb to the top.<br/>\n1. 1 step + 1 step<br/>\n2. 2 steps<br/><br/>\nExample 2:<br/>\n\nInput: 3<br/>\nOutput: 3<br/>\nExplanation: There are three ways to climb to the top.<br/>\n1. 1 step + 1 step + 1 step<br/>\n2. 1 step + 2 steps<br/>\n3. 2 steps + 1 step\n\n              <div style={titles}>\n                <PrismCode\n                  code={climbStairs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic3));\n"]},"metadata":{},"sourceType":"module"}