{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var output=\"\\nx = ['ab', 'cd']\\nprint(len(list(map(list, x))))\\n\".trim();var find=\"1.\\tset([[1,2],[3,4],[4,5]])\\n2.\\tset([1,2,2,3,4,5])\\n3.\\t{1,2,3,4}\\n4.\\tset((1,2,3,4))\\n\".trim();var palindrome=\"s1 = string\\ns = string[::-1]\\n\\nif(s1 == s):\\n    return 'true'\\nelse:\\n    return 'false'\\n\\nprint(fun('madam'))\\n\".trim();var sum=\"\\ndef sum(num):\\n    if len(num) == 1:\\n        return num[0]\\n    else:\\n        return num[0] + sum(num[1:])\\n\\nprint(sum([2, 4, 5, 6, 7]))\\n\".trim();var random=\"import random\\n\\ndef read_random(fname):\\n    lines = open(fname).read().splitlines()\\n    return random.choice(lines)\\n\".trim();var randomize=\"\\n#random() have <shuffle(<list>)> which can randomize any input sequence.\\n\\nimport random\\n\\nlist = [2, 18, 8, 4]\\n\\nprint(\\\"Prior Shuffling - 0\\\", list)\\nrandom.shuffle(list)\\n\\nprint(\\\"After Shuffling - 1\\\", list)\\nrandom.shuffle(list)\\n\\nprint(\\\"After Shuffling - 2\\\", list)\\n\".trim();var output_2=\"\\ndef fast (items= []):\\n    items.append (1)\\n    return items\\n\\nprint (fast ())\\nprint (fast ())\\n\".trim();var blue=\"name = input('what is your name? ')\\nfavorite_color = input('What is your favorite color')\\nprint(name + ' Likes ' + favorite_color)\\n\".trim();var For=\"\\nfor item in ['Python', 'javaScrupt', 'NodeJs']:\\n    print(item)\\n\\nfor item in range(10):\\n    print(item)\\n\\nfor item in range(5, 10):\\n    print(item)\\n\\nfor item in range(5, 10, 2):\\n    print(item)\\n\".trim();var Nested_loop=\"\\nfor x in range(4):\\n    for y in range(3):\\n        print(f'({x}, {y})')\\n\\n\\nnumbers = [5, 2, 5, 2, 2]\\nfor x_count in numbers:\\n    output = ''\\n    for count in range(x_count):\\n            output += 'X'\\n            print(output)\\n\".trim();var matrix=\"matrix = [\\n  [1,2,3],\\n  [4,5,6],\\n  [7,8,9]\\n]\\n\\nfor row in matrix:\\n  for item in row:\\n      print(item)\\n\".trim();var unpacking=\"coordinates = (1, 2, 3)\\nx, y, z = coordinates\\nprint(x)\\nprint(y)\\n\\ncoordinates = [1, 2, 3]\\nx, y, z = coordinates\\nprint(z)\\n\".trim();var words=\"\\nphone = input(\\\"Phone: \\\")\\ndigits_mapping = {\\n    \\\"1\\\": \\\"One\\\",\\n    \\\"2\\\": \\\"Two\\\",\\n    \\\"3\\\": \\\"Three\\\",\\n    \\\"4\\\": \\\"Four\\\"\\n  }\\n  \\noutput = \\\"\\\"\\nfor ch in phone:\\n  output += digits_mapping.get(ch, \\\"!\\\") + \\\" \\\"\\nprint(output)\\n  \".trim();var EMOJ=\"message = input(\\\">\\\")\\nwords = message.split(' ')\\nemojis = {\\n    \\\":)\\\":\\\"*\\\",\\n    \\\":(\\\":\\\"%\\\"\\n}\\noutput = \\\"\\\"\\nfor word in words:\\n    output += emojis.get(word, word) + \\\" \\\"\\nprint(output)\\n\".trim();var reusable=\"def emoji_converter(message):\\nwords = message.split(\\\" \\\")\\nemojis = {\\n    \\\":)\\\": \\\"*\\\",\\n    \\\":(\\\": \\\"%\\\"\\n}\\noutput = \\\"\\\"\\nfor word in words:\\n    output += emojis.get(word, word) + \\\" \\\"\\nreturn  output\\n\\n\\nmessage = input(\\\">\\\")\\nprint(emoji_converter(message))\\n\".trim();var random_=\"import random\\n\\nfor i in range(3):\\n    print(random.randint(10, 20))\\nprint(random.randint(10, 20))\\n\\n\\nimport random \\n\\nclass Dice:\\n    def roll(self):\\n        first = random.randint(1, 6)\\n        second = random.randint(1, 6)\\n        return first, second\\n\\ndice = Dice()\\nprint(dice.roll())\\n\".trim();var spreadsheet=\"\\nimport openpyxl as xl\\n\\nwb = xl.load_workbook('transactions.xlsx')\\nsheet = wb['Sheet1']\\ncell = sheet['a1']\\ncell = sheet.cell(1, 1)\\nprint(cell.value)\\n\\nprint(sheet.max_row)\\n\\nfor row in range(1, sheet.max_row + 1):\\n    print(row)\\n\\nfor row in range(2, sheet.max_row + 1):\\n    cell = sheet.cell(row, 3)\\n    print(cell.value)\\n\".trim();var openpyxl=\"import openpyxl as xl\\n\\nwb = xl.load_workbook('transactions.xlsx')\\nsheet = wb['Sheet1']\\ncell = sheet['a1']\\ncell = sheet.cell(1, 1)\\n\\nfor row in range(2, sheet.max_row + 1):\\n    cell = sheet.cell(row, 3)\\n    corrected_price = cell.value * 2\\n    corrected_price_cell = sheet.cell(row, 4)\\n    corrected_price_cell = corrected_price\\n\\nwb.save('transactions2.xlsx')\\n\".trim();var primeMus=\"\\ndef nextPrime(n):\\n    while True:\\n        n+=1\\n        for i in range(2,n):\\n\\n            if(n%i==0):\\n                break\\n            else:\\n                print(n)\\n                return n\\n\\nnextPrime(13)\".trim();var homogeneous=\"\\nx=(30,4.5,26,3+4j,'abc', True, 5.6,2-1j)\\nt1,t2,t3,t4,t5=[], [], [], [], []\\n\\nfor e in x:\\n    if type(e) == int:\\n        t1.append(e)\\n    elif type(e) == float:\\n        t2.append(e)\\n    elif type(e) == complex:\\n        t3.append(e)\\n    elif type(e) == str:\\n        t4.append(e)\\n    elif type(e) == bool:\\n        t5.append(e)\\n\\nt1=tuple(t1)\\nt2=tuple(t2)\\nt3=tuple(t3)\\nt4=tuple(t4)\\nt5=tuple(t5)\\n\\nprint(t1, t2, t3, t4, t5, sep='nL')\\n\".trim();var greatest=\"\\nprint('Enter number')\\nt1 = tuple([int(e) for e in input().split(',')])\\nprint('Enter Greatest number', max(t1))\".trim();var sorted=\"\\nt1=(10,20,30,40)\\nt2=(5,9,12,18,22,25)\\nt3=[]\\ni,j,k=0,0,0\\n\\nwhile i<len(t1) and j<len(t2):\\n    if t1[i]<t2[j]:\\n        t3.append(t1[i])\\n        i+=1\\n        k+=1\\n    else:\\n        t3.append(t2[j])\\n        j+=1\\n        k+=1\\n        \\nif i==len(t1):\\n    while j<len(t2):\\n        t3.append(t2[j])\\n        j+=1\\n        k+=1\\n        \\nelif j==len(t2):\\n    while i<len(t1):\\n        t3.append(t1[i])\\n        i+=1\\n        k+=1\\n        \\nt3=tuple(t3)\\nprint(t3)\".trim();var occurrence=\"\\nl=[eval(x) for x in input(\\\"Enter list elements\\\").split(',')]\\nelement=eval(input(\\\"Enter element value\\\"))\\nindex=0\\nwhile index<len(l):\\n    if l[index]==element:\\n        print(index, end='')\\n    index+=1\".trim();var sequence=\"\\ndef sum(n):\\n    if n==1:\\n        return 1\\n    return n**2+sum(n-1)\\n\\nsum(4)\".trim();var multiple=\"\\ndef fun():\\n    return 1,2,3\\n\\nx=fun()\\nprint(x)\".trim();var ascii=\"\\nc = input(\\\"Enter a character: \\\")\\n\\nprint(\\\"The ASCII value of '\\\" + c + \\\"' is\\\",ord(c)) \".trim();var conversion=\"\\ndec = int(input(\\\"Enter a decimal number: \\\"))\\n\\nprint(bin(dec), \\\"in binary.\\\")\\nprint(oct(dec), \\\"in octal.\\\")\\nprint(hex(dec), \\\"in hexadecimal.\\\" )\".trim();var matrixs=\"\\nX = [[12,7,3],\\n    [4 ,5,6],\\n    [7 ,8,9]]\\n\\nY = [[5,8,1,2],\\n    [6,7,3,0],\\n    [4,5,9,1]]\\n\\nresult = [[0,0,0,0],\\n         [0,0,0,0],\\n         [0,0,0,0]]\\n\\n\\nfor i in range(len(X)):                                                             // iterate through rows of X.\\n   for j in range(len(Y[0])):                                                       // iterate through columns of Y.\\n       for k in range(len(Y)):                                                      // iterate through rows of Y.\\n           result[i][j] += X[i][k] * Y[k][j]\\n\\nfor r in result:\\n   print(r)\\n\".trim();var towerOfHanoi=\"\\ndef TowerOfHanoi(n , source, destination, auxilliary):\\n    if n==1:\\n        print (\\\"Move disk 1 from source\\\",source,\\\"to destination\\\",destination)\\n        return\\n    TowerOfHanoi(n-1, source, auxilliary, destination)\\n    print (\\\"Move disk\\\",n,\\\"from source\\\",source,\\\"to destination\\\",destination)\\n    TowerOfHanoi(n-1, auxilliary, destination, source)\\n\\nn = 4\\nTowerOfHanoi(n,'A','B','C')\".trim();var calculator=\"\\ndef add(x, y):\\n    return x + y\\n\\ndef subtract(x, y):\\n    return x - y\\n\\ndef multiply(x, y):\\n    return x * y\\n\\ndef divide(x, y):\\n    return x / y\\n\\n\\nprint(\\\"Select operation.\\\")\\nprint(\\\"1.Add\\\")\\nprint(\\\"2.Subtract\\\")\\nprint(\\\"3.Multiply\\\")\\nprint(\\\"4.Divide\\\")\\n\\nwhile True:\\n    choice = input(\\\"Enter choice(1/2/3/4): \\\")\\n\\n    if choice in ('1', '2', '3', '4'):                                      // Check if choice is one of the four options.\\n        num1 = float(input(\\\"Enter first number: \\\"))\\n        num2 = float(input(\\\"Enter second number: \\\"))\\n\\n        if choice == '1':\\n            print(num1, \\\"+\\\", num2, \\\"=\\\", add(num1, num2))\\n\\n        elif choice == '2':\\n            print(num1, \\\"-\\\", num2, \\\"=\\\", subtract(num1, num2))\\n\\n        elif choice == '3':\\n            print(num1, \\\"*\\\", num2, \\\"=\\\", multiply(num1, num2))\\n\\n        elif choice == '4':\\n            print(num1, \\\"/\\\", num2, \\\"=\\\", divide(num1, num2))\\n        break\\n    else:\\n        print(\\\"Invalid Input\\\")\\n\".trim();var PyLogic=/*#__PURE__*/function(_Component){_inherits(PyLogic,_Component);function PyLogic(){_classCallCheck(this,PyLogic);return _possibleConstructorReturn(this,_getPrototypeOf(PyLogic).apply(this,arguments));}_createClass(PyLogic,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"b\",null,\"1. What is the output of the following?\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:output,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"i\",null,\"Each element of x is converted into a list.\"),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"2. Write a Python program to check whether a given string is a palindrome or not, without using an iterative method. \"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:palindrome,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"3. Write a Python program to calculate the sum of a list of numbers.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:sum,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"4. How will you read a random line in a file?\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:random,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"5. What is the function to randomize the items of a list in-place?\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:randomize,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"6. What is the result of the below lines of code?\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:output_2,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"i\",null,\"The function fast evaluates its arguments only once after the function gets defined. However, since items is a list, so it\\u2019ll get modified by appending a 1 to it.\"),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"7. Mukesh likes blue\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:blue,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"8. For\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:For,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"9. Nested loop\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Nested_loop,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"10. Unpacking\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:unpacking,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"11. Enter Digit o/p words\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:words,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"12. Print EMOJ\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:EMOJ,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"13. Creating a reusable Functions\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:reusable,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"14. Generating random Values\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:random_,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"15. Excel spreadsheet\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:spreadsheet,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"16. Create new colom and new excel sheet\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:openpyxl,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"17. Python function to return next Prime number\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:primeMus,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"18. Create tuples with homogeneous elements from a tuple containing homogeneous elements.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:homogeneous,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"19. Fing greatest number from a tuple of ini values.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:greatest,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"20. Merge two sorted tuple.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:sorted,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"21. Print indices of all the occurrence of a given element in a given list.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:occurrence,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"22. Recursive function to calculate sum of sequence of first N natural numbers.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:sequence,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"23. Return multiple values.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:multiple,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"24. Ascii\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:ascii,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"25. Conversion\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:conversion,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"26. Matrix\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:matrix,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Multilpy 2 Matrix\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:matrixs,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"27. Tower Of Hanoi\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:towerOfHanoi,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"28. Calculator\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:calculator,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return PyLogic;}(Component);export default withStyles(styles)(PyLogic);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/pythone/deeppy/pyLogic.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","output","trim","find","palindrome","sum","random","randomize","output_2","blue","For","Nested_loop","matrix","unpacking","words","EMOJ","reusable","random_","spreadsheet","openpyxl","primeMus","homogeneous","greatest","sorted","occurrence","sequence","multiple","ascii","conversion","matrixs","towerOfHanoi","calculator","PyLogic","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,0BAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CAGA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,eAAe,CAAE,SAAnB,CAA8BC,OAAO,CAAE,KAAvC,CAA8CC,QAAQ,CAAE,MAAxD,CAAf,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,KAAK,CAAE,CACLC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH,CAELN,OAAO,CAAEG,KAAK,CAACG,OAAN,CAAc,CAAd,CAFJ,CADgB,CAKvBC,QAAQ,CAAE,CACRF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA,CALa,CAQvBE,SAAS,CAAE,CACTC,SAAS,CAAE,QADF,CARY,CAAL,EAApB,CAcA,GAAMC,CAAAA,MAAM,CAAG,uDAGbC,IAHa,EAAf,CAKA,GAAMC,CAAAA,IAAI,CAAG,4FAIXD,IAJW,EAAb,CAMA,GAAME,CAAAA,UAAU,CAAG,uHASjBF,IATiB,EAAnB,CAWA,GAAMG,CAAAA,GAAG,CAAG,kJAQVH,IARU,EAAZ,CAUA,GAAMI,CAAAA,MAAM,CAAG,2HAKbJ,IALa,EAAf,CAOA,GAAMK,CAAAA,SAAS,CAAG,4RAchBL,IAdgB,EAAlB,CAgBA,GAAMM,CAAAA,QAAQ,CAAG,wGAOfN,IAPe,EAAjB,CASA,GAAMO,CAAAA,IAAI,CAAG,yIAGXP,IAHW,EAAb,CAKA,GAAMQ,CAAAA,GAAG,CAAG,iNAYVR,IAZU,EAAZ,CAcA,GAAMS,CAAAA,WAAW,CAAG,gPAYlBT,IAZkB,EAApB,CAcA,GAAMU,CAAAA,MAAM,CAAG,kHASbV,IATa,EAAf,CAWA,GAAMW,CAAAA,SAAS,CAAG,mIAQhBX,IARgB,EAAlB,CAUA,GAAMY,CAAAA,KAAK,CAAG,yPAaVZ,IAbU,EAAd,CAeA,GAAMa,CAAAA,IAAI,CAAG,2MAUXb,IAVW,EAAb,CAYA,GAAMc,CAAAA,QAAQ,CAAG,oRAcfd,IAde,EAAjB,CAgBA,GAAMe,CAAAA,OAAO,CAAG,kTAiBdf,IAjBc,EAAhB,CAmBA,GAAMgB,CAAAA,WAAW,CAAG,oVAiBlBhB,IAjBkB,EAApB,CAmBA,GAAMiB,CAAAA,QAAQ,CAAG,uXAcfjB,IAde,EAAjB,CAgBA,GAAMkB,CAAAA,QAAQ,CAAG,6NAYFlB,IAZE,EAAjB,CAcA,GAAMmB,CAAAA,WAAW,CAAG,qcAuBlBnB,IAvBkB,EAApB,CAyBA,GAAMoB,CAAAA,QAAQ,CAAG,qHAGwBpB,IAHxB,EAAjB,CAKA,GAAMqB,CAAAA,MAAM,CAAG,8dA6BJrB,IA7BI,EAAf,CA+BA,GAAMsB,CAAAA,UAAU,CAAG,sNAOLtB,IAPK,EAAnB,CASA,GAAMuB,CAAAA,QAAQ,CAAG,oFAMTvB,IANS,EAAjB,CAQA,GAAMwB,CAAAA,QAAQ,CAAG,sDAKPxB,IALO,EAAjB,CAOA,GAAMyB,CAAAA,KAAK,CAAG,iGAGsCzB,IAHtC,EAAd,CAKA,GAAM0B,CAAAA,UAAU,CAAG,6JAKkB1B,IALlB,EAAnB,CAOA,GAAM2B,CAAAA,OAAO,CAAG,ulBAqBd3B,IArBc,EAAhB,CAuBA,GAAM4B,CAAAA,YAAY,CAAG,qZAUQ5B,IAVR,EAArB,CAYA,GAAM6B,CAAAA,UAAU,CAAG,+/BAyCjB7B,IAzCiB,EAAnB,C,GA4CM8B,CAAAA,O,2RACgB,CAClBC,UAAU,CAAC,iBAAMnD,CAAAA,KAAK,CAACoD,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAACxC,KAA1B,EACE,8BAAI,oBAAC,OAAD,MAAJ,CADF,CADF,CADF,CAME,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEwC,OAAO,CAACxC,KAA1B,EACE,oBAAC,IAAD,MACE,uEADF,CAEE,2BAAK,KAAK,CAAEN,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEY,MADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAFF,CASE,2EATF,CAUE,8BAVF,CAWE,8BAXF,CAaE,qJAbF,CAcE,2BAAK,KAAK,CAAEZ,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEe,UADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAdF,CAqBE,8BArBF,CAsBE,8BAtBF,CAwBE,oGAxBF,CAyBE,2BAAK,KAAK,CAAEf,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEgB,GADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAzBF,CAgCE,8BAhCF,CAiCE,8BAjCF,CAmCE,6EAnCF,CAoCE,2BAAK,KAAK,CAAEhB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEiB,MADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CApCF,CA2CE,8BA3CF,CA4CE,8BA5CF,CA8CE,kGA9CF,CA+CE,2BAAK,KAAK,CAAEjB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEkB,SADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CA/CF,CAsDE,8BAtDF,CAuDE,8BAvDF,CAyDE,iFAzDF,CA0DE,2BAAK,KAAK,CAAElB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEmB,QADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CA1DF,CAiEE,8BAjEF,CAkEE,uMAlEF,CAmEE,8BAnEF,CAoEE,8BApEF,CAsEE,oDAtEF,CAuEE,2BAAK,KAAK,CAAEnB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEoB,IADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAvEF,CA8EE,8BA9EF,CA+EE,8BA/EF,CAiFE,sCAjFF,CAkFE,2BAAK,KAAK,CAAEpB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEqB,GADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAlFF,CAyFE,8BAzFF,CA0FE,8BA1FF,CA4FE,8CA5FF,CA6FE,2BAAK,KAAK,CAAErB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEsB,WADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CA7FF,CAoGE,8BApGF,CAqGE,8BArGF,CAuGE,6CAvGF,CAwGE,2BAAK,KAAK,CAAEtB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEwB,SADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAxGF,CA+GE,8BA/GF,CAiHE,yDAjHF,CAkHE,2BAAK,KAAK,CAAExB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEyB,KADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAlHF,CAyHE,8BAzHF,CA0HE,8BA1HF,CA4HE,8CA5HF,CA6HE,2BAAK,KAAK,CAAEzB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAE0B,IADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CA7HF,CAoIE,8BApIF,CAqIE,8BArIF,CAuIE,iEAvIF,CAwIE,2BAAK,KAAK,CAAE1B,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAE2B,QADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAxIF,CA+IE,8BA/IF,CAgJE,8BAhJF,CAkJE,4DAlJF,CAmJE,2BAAK,KAAK,CAAE3B,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAE4B,OADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAnJF,CA0JE,8BA1JF,CA2JE,8BA3JF,CA6JE,qDA7JF,CA8JE,2BAAK,KAAK,CAAE5B,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAE6B,WADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CA9JF,CAqKE,8BArKF,CAsKE,8BAtKF,CAwKE,wEAxKF,CAyKE,2BAAK,KAAK,CAAE7B,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAE8B,QADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAzKF,CAgLE,8BAhLF,CAkLE,gFAlLF,CAmLE,2BAAK,KAAK,CAAE9B,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAE+B,QADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAnLF,CA0LE,8BA1LF,CA4LE,0HA5LF,CA6LE,2BAAK,KAAK,CAAE/B,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEgC,WADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CA7LF,CAoME,8BApMF,CAsME,qFAtMF,CAuME,2BAAK,KAAK,CAAEhC,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEiC,QADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAvMF,CA8ME,8BA9MF,CAgNE,4DAhNF,CAiNE,2BAAK,KAAK,CAAEjC,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEkC,MADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAjNF,CAwNE,8BAxNF,CA0NE,4GA1NF,CA2NE,2BAAK,KAAK,CAAElC,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEmC,UADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CA3NF,CAkOE,8BAlOF,CAoOE,gHApOF,CAqOE,2BAAK,KAAK,CAAEnC,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEoC,QADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CArOF,CA4OE,8BA5OF,CA8OE,4DA9OF,CA+OE,2BAAK,KAAK,CAAEpC,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEqC,QADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CA/OF,CAsPE,8BAtPF,CAwPE,0CAxPF,CAyPE,2BAAK,KAAK,CAAErC,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEsC,KADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAzPF,CAgQE,8BAhQF,CAkQE,+CAlQF,CAmQE,2BAAK,KAAK,CAAEtC,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEuC,UADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAnQF,CA0QE,8BA1QF,CA4QE,2CA5QF,CA6QE,2BAAK,KAAK,CAAEvC,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEuB,MADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CA7QF,CAoRE,8BApRF,CAsRE,iDAtRF,CAuRE,2BAAK,KAAK,CAAEvB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEwC,OADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAvRF,CA8RE,8BA9RF,CAgSE,mDAhSF,CAiSE,2BAAK,KAAK,CAAExC,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEyC,YADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAjSF,CAwSE,8BAxSF,CA0SE,+CA1SF,CA2SE,2BAAK,KAAK,CAAEzC,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAE0C,UADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CA3SF,CADF,CADF,CANF,CADF,CAgUD,C,qBAtUmBlD,S,EAyUtB,cAAgBI,CAAAA,UAAU,CAACQ,MAAD,CAAV,CAAmBuC,OAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst output = `\nx = ['ab', 'cd']\nprint(len(list(map(list, x))))\n`.trim()\n\nconst find = `1.\tset([[1,2],[3,4],[4,5]])\n2.\tset([1,2,2,3,4,5])\n3.\t{1,2,3,4}\n4.\tset((1,2,3,4))\n`.trim()\n\nconst palindrome = `s1 = string\ns = string[::-1]\n\nif(s1 == s):\n    return 'true'\nelse:\n    return 'false'\n\nprint(fun('madam'))\n`.trim()\n\nconst sum = `\ndef sum(num):\n    if len(num) == 1:\n        return num[0]\n    else:\n        return num[0] + sum(num[1:])\n\nprint(sum([2, 4, 5, 6, 7]))\n`.trim()\n\nconst random = `import random\n\ndef read_random(fname):\n    lines = open(fname).read().splitlines()\n    return random.choice(lines)\n`.trim()\n\nconst randomize = `\n#random() have <shuffle(<list>)> which can randomize any input sequence.\n\nimport random\n\nlist = [2, 18, 8, 4]\n\nprint(\"Prior Shuffling - 0\", list)\nrandom.shuffle(list)\n\nprint(\"After Shuffling - 1\", list)\nrandom.shuffle(list)\n\nprint(\"After Shuffling - 2\", list)\n`.trim()\n\nconst output_2 = `\ndef fast (items= []):\n    items.append (1)\n    return items\n\nprint (fast ())\nprint (fast ())\n`.trim()\n\nconst blue = `name = input('what is your name? ')\nfavorite_color = input('What is your favorite color')\nprint(name + ' Likes ' + favorite_color)\n`.trim()\n\nconst For = `\nfor item in ['Python', 'javaScrupt', 'NodeJs']:\n    print(item)\n\nfor item in range(10):\n    print(item)\n\nfor item in range(5, 10):\n    print(item)\n\nfor item in range(5, 10, 2):\n    print(item)\n`.trim()\n\nconst Nested_loop = `\nfor x in range(4):\n    for y in range(3):\n        print(f'({x}, {y})')\n\n\nnumbers = [5, 2, 5, 2, 2]\nfor x_count in numbers:\n    output = ''\n    for count in range(x_count):\n            output += 'X'\n            print(output)\n`.trim()\n\nconst matrix = `matrix = [\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n]\n\nfor row in matrix:\n  for item in row:\n      print(item)\n`.trim()\n\nconst unpacking = `coordinates = (1, 2, 3)\nx, y, z = coordinates\nprint(x)\nprint(y)\n\ncoordinates = [1, 2, 3]\nx, y, z = coordinates\nprint(z)\n`.trim()\n\nconst words = `\nphone = input(\"Phone: \")\ndigits_mapping = {\n    \"1\": \"One\",\n    \"2\": \"Two\",\n    \"3\": \"Three\",\n    \"4\": \"Four\"\n  }\n  \noutput = \"\"\nfor ch in phone:\n  output += digits_mapping.get(ch, \"!\") + \" \"\nprint(output)\n  `.trim()\n\nconst EMOJ = `message = input(\">\")\nwords = message.split(' ')\nemojis = {\n    \":)\":\"*\",\n    \":(\":\"%\"\n}\noutput = \"\"\nfor word in words:\n    output += emojis.get(word, word) + \" \"\nprint(output)\n`.trim()\n\nconst reusable = `def emoji_converter(message):\nwords = message.split(\" \")\nemojis = {\n    \":)\": \"*\",\n    \":(\": \"%\"\n}\noutput = \"\"\nfor word in words:\n    output += emojis.get(word, word) + \" \"\nreturn  output\n\n\nmessage = input(\">\")\nprint(emoji_converter(message))\n`.trim()\n\nconst random_ = `import random\n\nfor i in range(3):\n    print(random.randint(10, 20))\nprint(random.randint(10, 20))\n\n\nimport random \n\nclass Dice:\n    def roll(self):\n        first = random.randint(1, 6)\n        second = random.randint(1, 6)\n        return first, second\n\ndice = Dice()\nprint(dice.roll())\n`.trim()\n\nconst spreadsheet = `\nimport openpyxl as xl\n\nwb = xl.load_workbook('transactions.xlsx')\nsheet = wb['Sheet1']\ncell = sheet['a1']\ncell = sheet.cell(1, 1)\nprint(cell.value)\n\nprint(sheet.max_row)\n\nfor row in range(1, sheet.max_row + 1):\n    print(row)\n\nfor row in range(2, sheet.max_row + 1):\n    cell = sheet.cell(row, 3)\n    print(cell.value)\n`.trim()\n\nconst openpyxl = `import openpyxl as xl\n\nwb = xl.load_workbook('transactions.xlsx')\nsheet = wb['Sheet1']\ncell = sheet['a1']\ncell = sheet.cell(1, 1)\n\nfor row in range(2, sheet.max_row + 1):\n    cell = sheet.cell(row, 3)\n    corrected_price = cell.value * 2\n    corrected_price_cell = sheet.cell(row, 4)\n    corrected_price_cell = corrected_price\n\nwb.save('transactions2.xlsx')\n`.trim()\n\nconst primeMus = `\ndef nextPrime(n):\n    while True:\n        n+=1\n        for i in range(2,n):\n\n            if(n%i==0):\n                break\n            else:\n                print(n)\n                return n\n\nnextPrime(13)`.trim();\n\nconst homogeneous = `\nx=(30,4.5,26,3+4j,'abc', True, 5.6,2-1j)\nt1,t2,t3,t4,t5=[], [], [], [], []\n\nfor e in x:\n    if type(e) == int:\n        t1.append(e)\n    elif type(e) == float:\n        t2.append(e)\n    elif type(e) == complex:\n        t3.append(e)\n    elif type(e) == str:\n        t4.append(e)\n    elif type(e) == bool:\n        t5.append(e)\n\nt1=tuple(t1)\nt2=tuple(t2)\nt3=tuple(t3)\nt4=tuple(t4)\nt5=tuple(t5)\n\nprint(t1, t2, t3, t4, t5, sep='nL')\n`.trim();\n\nconst greatest = `\nprint('Enter number')\nt1 = tuple([int(e) for e in input().split(',')])\nprint('Enter Greatest number', max(t1))`.trim();\n\nconst sorted = `\nt1=(10,20,30,40)\nt2=(5,9,12,18,22,25)\nt3=[]\ni,j,k=0,0,0\n\nwhile i<len(t1) and j<len(t2):\n    if t1[i]<t2[j]:\n        t3.append(t1[i])\n        i+=1\n        k+=1\n    else:\n        t3.append(t2[j])\n        j+=1\n        k+=1\n        \nif i==len(t1):\n    while j<len(t2):\n        t3.append(t2[j])\n        j+=1\n        k+=1\n        \nelif j==len(t2):\n    while i<len(t1):\n        t3.append(t1[i])\n        i+=1\n        k+=1\n        \nt3=tuple(t3)\nprint(t3)`.trim();\n\nconst occurrence = `\nl=[eval(x) for x in input(\"Enter list elements\").split(',')]\nelement=eval(input(\"Enter element value\"))\nindex=0\nwhile index<len(l):\n    if l[index]==element:\n        print(index, end='')\n    index+=1`.trim();\n\nconst sequence = `\ndef sum(n):\n    if n==1:\n        return 1\n    return n**2+sum(n-1)\n\nsum(4)`.trim();\n\nconst multiple = `\ndef fun():\n    return 1,2,3\n\nx=fun()\nprint(x)`.trim();\n\nconst ascii = `\nc = input(\"Enter a character: \")\n\nprint(\"The ASCII value of '\" + c + \"' is\",ord(c)) `.trim();\n\nconst conversion = `\ndec = int(input(\"Enter a decimal number: \"))\n\nprint(bin(dec), \"in binary.\")\nprint(oct(dec), \"in octal.\")\nprint(hex(dec), \"in hexadecimal.\" )`.trim();\n\nconst matrixs = `\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\n\nresult = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\n\n\nfor i in range(len(X)):                                                             // iterate through rows of X.\n   for j in range(len(Y[0])):                                                       // iterate through columns of Y.\n       for k in range(len(Y)):                                                      // iterate through rows of Y.\n           result[i][j] += X[i][k] * Y[k][j]\n\nfor r in result:\n   print(r)\n`.trim();\n\nconst towerOfHanoi = `\ndef TowerOfHanoi(n , source, destination, auxilliary):\n    if n==1:\n        print (\"Move disk 1 from source\",source,\"to destination\",destination)\n        return\n    TowerOfHanoi(n-1, source, auxilliary, destination)\n    print (\"Move disk\",n,\"from source\",source,\"to destination\",destination)\n    TowerOfHanoi(n-1, auxilliary, destination, source)\n\nn = 4\nTowerOfHanoi(n,'A','B','C')`.trim();\n\nconst calculator = `\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    return x / y\n\n\nprint(\"Select operation.\")\nprint(\"1.Add\")\nprint(\"2.Subtract\")\nprint(\"3.Multiply\")\nprint(\"4.Divide\")\n\nwhile True:\n    choice = input(\"Enter choice(1/2/3/4): \")\n\n    if choice in ('1', '2', '3', '4'):                                      // Check if choice is one of the four options.\n        num1 = float(input(\"Enter first number: \"))\n        num2 = float(input(\"Enter second number: \"))\n\n        if choice == '1':\n            print(num1, \"+\", num2, \"=\", add(num1, num2))\n\n        elif choice == '2':\n            print(num1, \"-\", num2, \"=\", subtract(num1, num2))\n\n        elif choice == '3':\n            print(num1, \"*\", num2, \"=\", multiply(num1, num2))\n\n        elif choice == '4':\n            print(num1, \"/\", num2, \"=\", divide(num1, num2))\n        break\n    else:\n        print(\"Invalid Input\")\n`.trim();\n\n\nclass PyLogic extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <b>1. What is the output of the following?</b>\n              <div style={titles}>\n                <PrismCode\n                  code={output}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <i>Each element of x is converted into a list.</i>\n              <br />\n              <br />\n\n              <b>2. Write a Python program to check whether a given string is a palindrome or not, without using an iterative method. </b>\n              <div style={titles}>\n                <PrismCode\n                  code={palindrome}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>3. Write a Python program to calculate the sum of a list of numbers.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={sum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>4. How will you read a random line in a file?</b>\n              <div style={titles}>\n                <PrismCode\n                  code={random}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>5. What is the function to randomize the items of a list in-place?</b>\n              <div style={titles}>\n                <PrismCode\n                  code={randomize}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>6. What is the result of the below lines of code?</b>\n              <div style={titles}>\n                <PrismCode\n                  code={output_2}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>The function fast evaluates its arguments only once after the function gets defined. However, since items is a list, so it’ll get modified by appending a 1 to it.</i>\n              <br />\n              <br />\n\n              <b>7. Mukesh likes blue</b>\n              <div style={titles}>\n                <PrismCode\n                  code={blue}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>8. For</b>\n              <div style={titles}>\n                <PrismCode\n                  code={For}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>9. Nested loop</b>\n              <div style={titles}>\n                <PrismCode\n                  code={Nested_loop}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>10. Unpacking</b>\n              <div style={titles}>\n                <PrismCode\n                  code={unpacking}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>11. Enter Digit o/p words</b>\n              <div style={titles}>\n                <PrismCode\n                  code={words}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>12. Print EMOJ</b>\n              <div style={titles}>\n                <PrismCode\n                  code={EMOJ}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>13. Creating a reusable Functions</b>\n              <div style={titles}>\n                <PrismCode\n                  code={reusable}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>14. Generating random Values</b>\n              <div style={titles}>\n                <PrismCode\n                  code={random_}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>15. Excel spreadsheet</b>\n              <div style={titles}>\n                <PrismCode\n                  code={spreadsheet}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>16. Create new colom and new excel sheet</b>\n              <div style={titles}>\n                <PrismCode\n                  code={openpyxl}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>17. Python function to return next Prime number</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={primeMus}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>18. Create tuples with homogeneous elements from a tuple containing homogeneous elements.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={homogeneous}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>19. Fing greatest number from a tuple of ini values.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={greatest}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>20. Merge two sorted tuple.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={sorted}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>21. Print indices of all the occurrence of a given element in a given list.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={occurrence}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>22. Recursive function to calculate sum of sequence of first N natural numbers.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={sequence}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>23. Return multiple values.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={multiple}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>24. Ascii</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={ascii}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>25. Conversion</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={conversion}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>26. Matrix</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={matrix}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Multilpy 2 Matrix</b>\n              <div style={titles}>\n                <PrismCode\n                  code={matrixs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>27. Tower Of Hanoi</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={towerOfHanoi}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>28. Calculator</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={calculator}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(PyLogic));\n"]},"metadata":{},"sourceType":"module"}