{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic4.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst factorial = `\nvar factorial = function(n){\n  if(n === 1) return 1\n  return n * factorial(n-1)\n }\n \n console.log(factorial(4));\n `.trim();\nconst prime = `\n function prime(){\n   let i, j, result=[];\n   for(i=0; i<100; i++){\n     var count=0\n     for(j=2; j<i; j++){\n       if(i%j == 0){\n         count += 1;\n       }\n     }\n     if(count==0){\n       result.push(i);\n     }\n   }\n   \n   console.log(result);\n }\n \n prime();\n `.trim();\nconst magicNumber = `\n function magicNum(){\n   const random = Math.random(0,1)\n   return random;\n }\n \n function main(){\n   const result = Math.random(0, magicNum);\n   console.log(result);\n }\n \n main();\n `.trim();\nconst possible = `\nfunction isInt(value) {\n  var x;\n  if (isNaN(value)) {\n    return false;\n  }\n  x = parseFloat(value);\n  return (x | 0) === x;\n}\n\nconsole.log(isInt(0));`.trim();\nconst longestCommonPrefix = `\nconst longestCommonPrefix = (strs = []) => {\n  let prefix = ''\n  let minLength = strs.reduce(\n    (acc, str) => (acc < str.length ? acc : str.length), Infinity,\n  )\n  minLength = minLength === Infinity ? 0 : minLength\n  for (let i = 0; i < minLength; i++) {\n    const current = strs[0][i]\n    const isSame = strs.every(str => str[i] === current)\n    if (isSame) {\n      prefix += current\n    } else {\n      return prefix\n    }\n  }\n  return prefix\n}`.trim();\nconst threeSum = `\nconst threeSum = function (nums) {\n  nums.sort((a, b) => a - b)\n  const result = []\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === nums[i - 1]) {\n      continue\n    }\n    let left = i + 1\n    let right = nums.length - 1\n    while (left < right) {\n      if (left > i + 1 && nums[left] === nums[left - 1]) {\n        left += 1\n        continue\n      }\n      const sum = nums[left] + nums[right] + nums[i]\n      if (sum === 0) {\n        result.push([nums[i], nums[left], nums[right]])\n        left += 1\n        right -= 1\n      } else if (sum > 0) {\n        right -= 1\n      } else {\n        left += 1\n      }\n    }\n  }\n  return result\n}\n\n\nconsole.log(threeSum([-1,0,1,2,-1,-4]))`.trim();\nconst threeSumClosest = `\nconst threeSumClosest = function (nums, target) {\n  let diff = Infinity\n  let result = 0\n  nums.sort((a, b) => a - b)\n  for (let i = 0; i < nums.length; i++) {\n    let left = i + 1\n    let right = nums.length - 1\n    while (left < right) {\n      const sum = nums[i] + nums[left] + nums[right]\n      const currentDiff = sum - target\n      if (currentDiff > 0) {\n        right -= 1\n      } else {\n        left += 1\n      }\n      if (Math.abs(currentDiff) < diff) {\n        result = sum\n      }\n      diff = Math.min(Math.abs(currentDiff), diff)\n    }\n  }\n  return result\n}\n\nconsole.log(threeSumClosest([-1,2,1,-4]))`.trim();\nconst letterCombinations = `\nconst letterCombinations = (digits = '') => {\n  const map = {\n    2: ['a', 'b', 'c'],\n    3: ['d', 'e', 'f'],\n    4: ['g', 'h', 'i'],\n    5: ['j', 'k', 'l'],\n    6: ['m', 'n', 'o'],\n    7: ['p', 'q', 'r', 's'],\n    8: ['t', 'u', 'v'],\n    9: ['w', 'x', 'y', 'z'],\n  }\n  if (!digits.length) {\n    return []\n  }\n  let result = ['']\n  let index = 0\n  while (index < digits.length) {\n    const next = map[digits[index]]\n    const nextResult = []\n    for (let i = 0; i < result.length; i++) {\n      for (let j = 0; j < next.length; j++) {\n        nextResult.push(result[i] + next[j])\n      }\n    }\n    result = nextResult\n    index++\n  }\n  return result\n}\n\nconsole.log(letterCombinations(\"23\"))`.trim();\nconst removeNthFromEnd = `\nconst removeNthFromEnd = (head, n) => {\n  let h1 = head\n  let h2 = null\n  let count = 0\n  while (h1) {\n    count += 1\n    h1 = h1.next\n    if (h2) {\n      h2 = h2.next\n    }\n    if (count === n + 1) {\n      h2 = head\n    }\n  }\n  if (!h2) {\n    return head ? head.next : null\n  }\n  h2.next = h2.next.next\n  return head\n}`.trim();\nconst isValid = `\nconst isValid = function (s) {\n  const stack = []\n  const pair = {\n    '[': ']',\n    '{': '}',\n    '(': ')',\n  }\n  const isPaired = (a, b) => pair[a] === b\n\n  for (c of s) {\n    if (isPaired(stack[stack.length - 1], c)) {\n      stack.pop()\n    } else {\n      stack.push(c)\n    }\n  }\n  return stack.length === 0\n}\n\nconsole.log(isValid(\"()\"))`.trim();\nconst mergeTwoLists = `\nconst mergeTwoLists = (l1, l2) => {\n  const aux = (current1, current2, acc) => {\n    if (!current1) {\n      acc.next = current2\n      return acc\n    }\n    if (!current2) {\n      acc.next = current1\n      return acc\n    }\n    if (current1.val < current2.val) {\n      acc.next = {\n        val: current1.val,\n        next: null,\n      }\n      return aux(current1.next, current2, acc.next)\n    }\n    acc.next = {\n      val: current2.val,\n      next: null,\n    }\n    return aux(current2.next, current1, acc.next)\n  }\n  const head = { val: null, next: null }\n  aux(l1, l2, head)\n    return head.next\n}`.trim();\nconst generateParenthesis = `\nconst generateParenthesis = function (n) {\n  const result = []\n  const aux = (current, left, right) => {\n    if (left === n && right === n) {\n      result.push(current)\n      return\n    }\n    if (left < right || left > n || right > n) {\n      return\n    }\n    aux('$'{current}(', left + 1, right)\n    aux('$'{current})', left, right + 1)\n  }\n  aux('', 0, 0)\n  return result\n}\n`.trim();\nconst swap = `const swap = (a, b, arr) => { // eslint-disable-line\n  if (a !== b) {\n    const temp = arr[a]\n    arr[a] = arr[b] // eslint-disable-line\n    arr[b] = temp // eslint-disable-line\n  }\n}\n\nconst Heap = compareFn => (arr = []) => {\n  const left = index => 2 * index + 1\n  const right = index => 2 * index + 2\n  const parent = index => Math.floor((index - 1) / 2)\n  const size = () => arr.length\n\n  // log(n)\n  const heapify = (index) => {\n    const l = left(index)\n    const r = right(index)\n    let current = index\n    if ((l < size()) && compareFn(arr[current], arr[l]) > 0) {\n      current = l\n    }\n    if ((r < size()) && compareFn(arr[current], arr[r]) > 0) {\n      current = r\n    }\n    if (current !== index) {\n      swap(current, index, arr)\n      heapify(current)\n    }\n  }\n  // log(n)\n  const heapifyUp = (index) => {\n    const p = parent(index)\n    if (p >= 0 && compareFn(arr[p], arr[index]) > 0) {\n      swap(p, index, arr)\n      heapifyUp(p)\n    }\n  }\n  // O(n)\n  const buildHeap = () => {\n    for (let i = Math.floor(arr.length / 2); i >= 0; i--) {\n      heapify(i)\n    }\n  }\n  const extract = () => {\n    swap(0, arr.length - 1, arr)\n    const top = arr.pop()\n    heapify(0)\n    return top\n  }\n  const remove = (item) => {\n    const index = arr.findIndex(x => compareFn(x, item) === 0)\n    if (index === -1) {\n      return\n    }\n    arr[index] = arr.pop() // eslint-disable-line\n    const p = parent(index)\n    if (p < 0 || compareFn(p, arr[index]) < 0) {\n      heapify(index)\n    } else {\n      heapifyUp(index)\n    }\n  }\n  buildHeap()\n  return {\n    getHeap: () => arr,\n    peek: () => {\n      if (arr.length === 0) {\n        return null\n      }\n      return arr[0]\n    },\n    add: (item) => {\n      arr.push(item)\n      heapifyUp(arr.length - 1)\n    },\n    extract,\n    remove,\n    size,\n  }\n}\n\nconst mergeKLists = (lists = []) => {\n  const minHeap = Heap((a, b) => a.val - b.val)([])\n  lists.forEach((node) => {\n    if (node) {\n      minHeap.add(node)\n    }\n  })\n  const head = minHeap.extract() || null\n  let current = head\n  while (minHeap.size() > 0) {\n      console.log(minHeap.size())\n    if (current.next) {\n      minHeap.add(current.next)\n    }\n    current.next = minHeap.extract()\n    current = current.next\n  }\n  return head\n}\n\n\nconsole.log(swap([[1,4,5],[1,3,4],[2,6]]))`.trim();\n\nclass DSLogic4 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }, \"9. Factorial\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: factorial,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }, \"10. Prime\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: prime,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    }, \"17.Given a function magicNumber() that returns a random integer 1 or 0, write a new function that will generate a random number that uses this magicNumber() function.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: magicNumber,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    }, \"18.Discuss possible ways to write a function isInteger(x) that determines if x is an integer.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: possible,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }, \"25. Array Counter\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: arrayCounter,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    }, \"1. Longest Common Prefix\"), \"Write a function to find the longest common prefix string amongst an array of strings.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }), \"If there is no common prefix, return an empty string \\\"\\\".\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    }), \"Input: [\\\"flower\\\",\\\"flow\\\",\\\"flight\\\"]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }), \"Output: \\\"fl\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }), \"Input: [\\\"dog\\\",\\\"racecar\\\",\\\"car\\\"]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }), \"Output: \\\"\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480\n      },\n      __self: this\n    }), \"Explanation: There is no common prefix among the input strings.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    }, \"N: \"), \"All given inputs are in lowercase letters a-z.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: longestCommonPrefix,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }, \"2. 3Sum\"), \"Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    }), \"Notice that the solution set must not contain duplicate triplets.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499\n      },\n      __self: this\n    }), \"Input: nums = [-1,0,1,2,-1,-4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501\n      },\n      __self: this\n    }), \"Output: [[-1,-1,2],[-1,0,1]]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }), \"Input: nums = []\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }), \"Output: []\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: threeSum,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }, \"2. 3Sum Closest\"), \"Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }), \"Input: nums = [-1,2,1,-4], target = 1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }), \"Output: 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }), \"Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: threeSumClosest,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }, \"3. Letter Combinations of a Phone Number.\"), \"Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }), \"A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }), \"Example:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    }), \"Input: \\\"23\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    }), \"Output: [\\\"ad\\\", \\\"ae\\\", \\\"af\\\", \\\"bd\\\", \\\"be\\\", \\\"bf\\\", \\\"cd\\\", \\\"ce\\\", \\\"cf\\\"].\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: letterCombinations,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    }, \"4. Remove Nth Node From End of List\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: removeNthFromEnd,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561\n      },\n      __self: this\n    }, \"5. Valid Parentheses\"), \"Given a string s containing just the characters '(', ')', '\", ', ', \"', '[' and ']', determine if the input string is valid.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563\n      },\n      __self: this\n    }), \"An input string is valid if:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    }), \"Open brackets must be closed by the same type of brackets.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    }), \"Open brackets must be closed in the correct order.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569\n      },\n      __self: this\n    }), \"Input: s = \\\"()\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }), \"Output: true\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573\n      },\n      __self: this\n    }), \"Input: s = \\\"()[]\", \"\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575\n      },\n      __self: this\n    }), \"Output: true\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576\n      },\n      __self: this\n    }), \"Example 3:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    }), \"Input: s = \\\"(]\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579\n      },\n      __self: this\n    }), \"Output: false\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isValid,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590\n      },\n      __self: this\n    }, \"6. Merge Two Sorted Lists.\"), \"Merge two sorted linked lists and return it as a new sorted list. The new list should be made by splicing together the nodes of the first two lists.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: mergeTwoLists,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601\n      },\n      __self: this\n    }, \"7. Generate Parentheses.\"), \"Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603\n      },\n      __self: this\n    }), \"For example, given n = 3, a solution set is: \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604\n      },\n      __self: this\n    }), \"[ \\\"((()))\\\", \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607\n      },\n      __self: this\n    }), \"\\\"(()())\\\", \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608\n      },\n      __self: this\n    }), \"\\\"(())()\\\", \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609\n      },\n      __self: this\n    }), \"\\\"()(())\\\", \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610\n      },\n      __self: this\n    }), \"\\\"()()()\\\" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611\n      },\n      __self: this\n    }), \"]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: generateParenthesis,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622\n      },\n      __self: this\n    }, \"8. Merge k Sorted Lists.\"), \"You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624\n      },\n      __self: this\n    }), \"Merge all the linked-lists into one sorted linked-list and return it.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629\n      },\n      __self: this\n    }), \"Input: lists = [[1,4,5],[1,3,4],[2,6]]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631\n      },\n      __self: this\n    }), \"Output: [1,1,2,3,4,4,5,6]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 633\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: swap,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 634\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(DSLogic4);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic4.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","factorial","trim","prime","magicNumber","possible","longestCommonPrefix","threeSum","threeSumClosest","letterCombinations","removeNthFromEnd","isValid","mergeTwoLists","generateParenthesis","swap","DSLogic4","componentDidMount","setTimeout","highlightAll","render","classes","props","arrayCounter"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,UAAtB,EAAkCC,IAAlC,QAA8C,mBAA9C;AAEA,OAAO,0BAAP;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AAEA,OAAOC,QAAP,MAAqB,2BAArB;AAEA,MAAMC,MAAM,GAAG;AAAEC,EAAAA,eAAe,EAAE,SAAnB;AAA8BC,EAAAA,OAAO,EAAE,KAAvC;AAA8CC,EAAAA,QAAQ,EAAE;AAAxD,CAAf;AAEA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,MAAM,EAAE,GADO;AAEfC,EAAAA,KAAK,EAAE;AAFQ,CAAjB;;AAKA,MAAMC,MAAM,GAAGC,KAAK,KAAK;AACvBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH;AAELT,IAAAA,OAAO,EAAEM,KAAK,CAACG,OAAN,CAAc,CAAd;AAFJ,GADgB;AAKvBC,EAAAA,QAAQ,EAAE;AACRF,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd;AADA,GALa;AAQvBE,EAAAA,SAAS,EAAE;AACTC,IAAAA,SAAS,EAAE;AADF;AARY,CAAL,CAApB;;AAcA,MAAMC,SAAS,GAAI;;;;;;;EAAD,CAOfC,IAPe,EAAlB;AASA,MAAMC,KAAK,GAAI;;;;;;;;;;;;;;;;;;;EAAD,CAmBXD,IAnBW,EAAd;AAqBA,MAAME,WAAW,GAAI;;;;;;;;;;;;EAAD,CAYjBF,IAZiB,EAApB;AAcA,MAAMG,QAAQ,GAAI;;;;;;;;;;uBAAD,CAUOH,IAVP,EAAjB;AAYA,MAAMI,mBAAmB,GAAI;;;;;;;;;;;;;;;;;EAAD,CAiBzBJ,IAjByB,EAA5B;AAmBA,MAAMK,QAAQ,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wCAAD,CA+BwBL,IA/BxB,EAAjB;AAiCA,MAAMM,eAAe,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;0CAAD,CAyBmBN,IAzBnB,EAAxB;AA2BA,MAAMO,kBAAkB,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sCAAD,CA+BYP,IA/BZ,EAA3B;AAiCA,MAAMQ,gBAAgB,GAAI;;;;;;;;;;;;;;;;;;;;EAAD,CAoBtBR,IApBsB,EAAzB;AAsBA,MAAMS,OAAO,GAAI;;;;;;;;;;;;;;;;;;;;2BAAD,CAoBYT,IApBZ,EAAhB;AAsBA,MAAMU,aAAa,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAD,CA2BnBV,IA3BmB,EAAtB;AA6BA,MAAMW,mBAAmB,GAAI;;;;;;;;;;;;;;;;;CAAD,CAiB1BX,IAjB0B,EAA5B;AAmBA,MAAMY,IAAI,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2CAAD,CAuG+BZ,IAvG/B,EAAb;;AA0GA,MAAMa,QAAN,SAAuBtC,SAAvB,CAAiC;AAC/BuC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,UAAU,CAAC,MAAMvC,KAAK,CAACwC,YAAN,EAAP,EAA6B,CAA7B,CAAV;AACD;;AACDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB;AACA,WACE,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAED,OAAO,CAACzB,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAJ,CADF,CADF,CADF,EAME,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAEyB,OAAO,CAACzB,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADA,EAEE;AAAK,MAAA,KAAK,EAAET,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEe,SADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAFF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAXF,EAYE;AAAK,MAAA,KAAK,EAAEf,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEiB,KADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAZF,EAmBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnBF,EAqBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gLArBF,EAsBE;AAAK,MAAA,KAAK,EAAEjB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEkB,WADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAtBF,EA6BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7BF,EA8BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9BF,EAgCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uGAhCF,EAiCE;AAAK,MAAA,KAAK,EAAElB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEmB,QADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAjCF,EAwCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxCF,EAyCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzCF,EA6CE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BA7CF,EA8CE;AAAK,MAAA,KAAK,EAAEnB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEoC,YADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA9CF,EAqDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArDF,EAuDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAvDF,4FAyDZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzDY,gEA2DZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3DY,EA2DP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3DO,gBA4DF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5DE,6CA8DqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9DrB,oBA+DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/DA,EA+DK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/DL,gBAgEF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhEE,0CAkEkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlElB,kBAmEF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnEE,qEAoEmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApEnD,EAoEwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApExD,EAqEZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aArEY,oDAsEE;AAAK,MAAA,KAAK,EAAEpC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEoB,mBADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAtEF,EA6EE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7EF,EA+EE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBA/EF,uKAiFE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjFF,uEAkFqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlFrD,gBAsFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtFE,oCAwFkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxFlB,kCAyFgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzFhB,EAyFqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzFrB,gBA0FF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1FE,sBA4FI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5FJ,gBA+FE;AAAK,MAAA,KAAK,EAAEpB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEqB,QADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA/FF,EAsGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtGF,EAwGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAxGF,wOA0GE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1GF,gBA2GF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3GE,2CA6GyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7GzB,eA8GH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9GG,gFAgHE;AAAK,MAAA,KAAK,EAAErB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEsB,eADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAhHF,EAuHE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvHF,EAyHE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAzHF,mIA2HE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3HF,EA2HO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3HP,iIA4H+G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5H/G,EA4HoH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5HpH,cA6HJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7HI,mBA+HD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/HC,uFAiIE;AAAK,MAAA,KAAK,EAAEtB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEuB,kBADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAjIF,EAwIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxIF,EA0IE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CA1IF,EA2IE;AAAK,MAAA,KAAK,EAAEvB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEwB,gBADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA3IF,EAkJE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlJF,EAoJE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BApJF,iEAqJ8D,IArJ9D,6DAsJE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtJF,kCAuJgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvJhB,gEAyJ8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzJ9C,wDA0JsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1JtC,EA0J2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1J3C,gBA4JF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5JE,uBA8JG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9JH,kBA+JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/JA,EA+JK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/JL,gBAgKF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhKE,6BAkKO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlKP,kBAmKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnKA,EAmKK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnKL,gBAoKF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApKE,uBAsKG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtKH,mBAwKE;AAAK,MAAA,KAAK,EAAExB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEyB,OADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAxKF,EA+KE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/KF,EAiLE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAjLF,0JAmLE;AAAK,MAAA,KAAK,EAAEzB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAE0B,aADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAnLF,EA0LE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1LF,EA4LE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCA5LF,6GA8LE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9LF,mDA+LiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/LjC,oBAkMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlMA,kBAmMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnMA,kBAoMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApMA,kBAqMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArMA,iBAsMD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtMC,OAwME;AAAK,MAAA,KAAK,EAAE1B,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAE2B,mBADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAxMF,EA+ME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/MF,EAiNE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAjNF,oGAmNE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnNF,2EAoNyD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApNzD,gBAwNF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxNE,4CA0N0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1N1B,+BA4NE;AAAK,MAAA,KAAK,EAAE3B,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAE4B,IADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA5NF,CADF,CADF,CANF,CADF;AAiPD;;AAvP8B;;AA0PjC,eAAgBjC,UAAU,CAACY,MAAD,CAAV,CAAmBsB,QAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst factorial = `\nvar factorial = function(n){\n  if(n === 1) return 1\n  return n * factorial(n-1)\n }\n \n console.log(factorial(4));\n `.trim()\n\nconst prime = `\n function prime(){\n   let i, j, result=[];\n   for(i=0; i<100; i++){\n     var count=0\n     for(j=2; j<i; j++){\n       if(i%j == 0){\n         count += 1;\n       }\n     }\n     if(count==0){\n       result.push(i);\n     }\n   }\n   \n   console.log(result);\n }\n \n prime();\n `.trim()\n\nconst magicNumber = `\n function magicNum(){\n   const random = Math.random(0,1)\n   return random;\n }\n \n function main(){\n   const result = Math.random(0, magicNum);\n   console.log(result);\n }\n \n main();\n `.trim();\n\nconst possible = `\nfunction isInt(value) {\n  var x;\n  if (isNaN(value)) {\n    return false;\n  }\n  x = parseFloat(value);\n  return (x | 0) === x;\n}\n\nconsole.log(isInt(0));`.trim();\n\nconst longestCommonPrefix = `\nconst longestCommonPrefix = (strs = []) => {\n  let prefix = ''\n  let minLength = strs.reduce(\n    (acc, str) => (acc < str.length ? acc : str.length), Infinity,\n  )\n  minLength = minLength === Infinity ? 0 : minLength\n  for (let i = 0; i < minLength; i++) {\n    const current = strs[0][i]\n    const isSame = strs.every(str => str[i] === current)\n    if (isSame) {\n      prefix += current\n    } else {\n      return prefix\n    }\n  }\n  return prefix\n}`.trim();\n\nconst threeSum = `\nconst threeSum = function (nums) {\n  nums.sort((a, b) => a - b)\n  const result = []\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === nums[i - 1]) {\n      continue\n    }\n    let left = i + 1\n    let right = nums.length - 1\n    while (left < right) {\n      if (left > i + 1 && nums[left] === nums[left - 1]) {\n        left += 1\n        continue\n      }\n      const sum = nums[left] + nums[right] + nums[i]\n      if (sum === 0) {\n        result.push([nums[i], nums[left], nums[right]])\n        left += 1\n        right -= 1\n      } else if (sum > 0) {\n        right -= 1\n      } else {\n        left += 1\n      }\n    }\n  }\n  return result\n}\n\n\nconsole.log(threeSum([-1,0,1,2,-1,-4]))`.trim();\n\nconst threeSumClosest = `\nconst threeSumClosest = function (nums, target) {\n  let diff = Infinity\n  let result = 0\n  nums.sort((a, b) => a - b)\n  for (let i = 0; i < nums.length; i++) {\n    let left = i + 1\n    let right = nums.length - 1\n    while (left < right) {\n      const sum = nums[i] + nums[left] + nums[right]\n      const currentDiff = sum - target\n      if (currentDiff > 0) {\n        right -= 1\n      } else {\n        left += 1\n      }\n      if (Math.abs(currentDiff) < diff) {\n        result = sum\n      }\n      diff = Math.min(Math.abs(currentDiff), diff)\n    }\n  }\n  return result\n}\n\nconsole.log(threeSumClosest([-1,2,1,-4]))`.trim();\n\nconst letterCombinations = `\nconst letterCombinations = (digits = '') => {\n  const map = {\n    2: ['a', 'b', 'c'],\n    3: ['d', 'e', 'f'],\n    4: ['g', 'h', 'i'],\n    5: ['j', 'k', 'l'],\n    6: ['m', 'n', 'o'],\n    7: ['p', 'q', 'r', 's'],\n    8: ['t', 'u', 'v'],\n    9: ['w', 'x', 'y', 'z'],\n  }\n  if (!digits.length) {\n    return []\n  }\n  let result = ['']\n  let index = 0\n  while (index < digits.length) {\n    const next = map[digits[index]]\n    const nextResult = []\n    for (let i = 0; i < result.length; i++) {\n      for (let j = 0; j < next.length; j++) {\n        nextResult.push(result[i] + next[j])\n      }\n    }\n    result = nextResult\n    index++\n  }\n  return result\n}\n\nconsole.log(letterCombinations(\"23\"))`.trim();\n\nconst removeNthFromEnd = `\nconst removeNthFromEnd = (head, n) => {\n  let h1 = head\n  let h2 = null\n  let count = 0\n  while (h1) {\n    count += 1\n    h1 = h1.next\n    if (h2) {\n      h2 = h2.next\n    }\n    if (count === n + 1) {\n      h2 = head\n    }\n  }\n  if (!h2) {\n    return head ? head.next : null\n  }\n  h2.next = h2.next.next\n  return head\n}`.trim();\n\nconst isValid = `\nconst isValid = function (s) {\n  const stack = []\n  const pair = {\n    '[': ']',\n    '{': '}',\n    '(': ')',\n  }\n  const isPaired = (a, b) => pair[a] === b\n\n  for (c of s) {\n    if (isPaired(stack[stack.length - 1], c)) {\n      stack.pop()\n    } else {\n      stack.push(c)\n    }\n  }\n  return stack.length === 0\n}\n\nconsole.log(isValid(\"()\"))`.trim();\n\nconst mergeTwoLists = `\nconst mergeTwoLists = (l1, l2) => {\n  const aux = (current1, current2, acc) => {\n    if (!current1) {\n      acc.next = current2\n      return acc\n    }\n    if (!current2) {\n      acc.next = current1\n      return acc\n    }\n    if (current1.val < current2.val) {\n      acc.next = {\n        val: current1.val,\n        next: null,\n      }\n      return aux(current1.next, current2, acc.next)\n    }\n    acc.next = {\n      val: current2.val,\n      next: null,\n    }\n    return aux(current2.next, current1, acc.next)\n  }\n  const head = { val: null, next: null }\n  aux(l1, l2, head)\n    return head.next\n}`.trim();\n\nconst generateParenthesis = `\nconst generateParenthesis = function (n) {\n  const result = []\n  const aux = (current, left, right) => {\n    if (left === n && right === n) {\n      result.push(current)\n      return\n    }\n    if (left < right || left > n || right > n) {\n      return\n    }\n    aux('$'{current}(', left + 1, right)\n    aux('$'{current})', left, right + 1)\n  }\n  aux('', 0, 0)\n  return result\n}\n`.trim();\n\nconst swap = `const swap = (a, b, arr) => { // eslint-disable-line\n  if (a !== b) {\n    const temp = arr[a]\n    arr[a] = arr[b] // eslint-disable-line\n    arr[b] = temp // eslint-disable-line\n  }\n}\n\nconst Heap = compareFn => (arr = []) => {\n  const left = index => 2 * index + 1\n  const right = index => 2 * index + 2\n  const parent = index => Math.floor((index - 1) / 2)\n  const size = () => arr.length\n\n  // log(n)\n  const heapify = (index) => {\n    const l = left(index)\n    const r = right(index)\n    let current = index\n    if ((l < size()) && compareFn(arr[current], arr[l]) > 0) {\n      current = l\n    }\n    if ((r < size()) && compareFn(arr[current], arr[r]) > 0) {\n      current = r\n    }\n    if (current !== index) {\n      swap(current, index, arr)\n      heapify(current)\n    }\n  }\n  // log(n)\n  const heapifyUp = (index) => {\n    const p = parent(index)\n    if (p >= 0 && compareFn(arr[p], arr[index]) > 0) {\n      swap(p, index, arr)\n      heapifyUp(p)\n    }\n  }\n  // O(n)\n  const buildHeap = () => {\n    for (let i = Math.floor(arr.length / 2); i >= 0; i--) {\n      heapify(i)\n    }\n  }\n  const extract = () => {\n    swap(0, arr.length - 1, arr)\n    const top = arr.pop()\n    heapify(0)\n    return top\n  }\n  const remove = (item) => {\n    const index = arr.findIndex(x => compareFn(x, item) === 0)\n    if (index === -1) {\n      return\n    }\n    arr[index] = arr.pop() // eslint-disable-line\n    const p = parent(index)\n    if (p < 0 || compareFn(p, arr[index]) < 0) {\n      heapify(index)\n    } else {\n      heapifyUp(index)\n    }\n  }\n  buildHeap()\n  return {\n    getHeap: () => arr,\n    peek: () => {\n      if (arr.length === 0) {\n        return null\n      }\n      return arr[0]\n    },\n    add: (item) => {\n      arr.push(item)\n      heapifyUp(arr.length - 1)\n    },\n    extract,\n    remove,\n    size,\n  }\n}\n\nconst mergeKLists = (lists = []) => {\n  const minHeap = Heap((a, b) => a.val - b.val)([])\n  lists.forEach((node) => {\n    if (node) {\n      minHeap.add(node)\n    }\n  })\n  const head = minHeap.extract() || null\n  let current = head\n  while (minHeap.size() > 0) {\n      console.log(minHeap.size())\n    if (current.next) {\n      minHeap.add(current.next)\n    }\n    current.next = minHeap.extract()\n    current = current.next\n  }\n  return head\n}\n\n\nconsole.log(swap([[1,4,5],[1,3,4],[2,6]]))`.trim();\n\n\nclass DSLogic4 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n            <h3>9. Factorial</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={factorial}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>10. Prime</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={prime}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>17.Given a function magicNumber() that returns a random integer 1 or 0, write a new function that will generate a random number that uses this magicNumber() function.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={magicNumber}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>18.Discuss possible ways to write a function isInteger(x) that determines if x is an integer.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={possible}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              \n\n              <h3>25. Array Counter</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={arrayCounter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>1. Longest Common Prefix</h3>\n              Write a function to find the longest common prefix string amongst an array of strings.\n<br/>\nIf there is no common prefix, return an empty string \"\".\n<br/><br/>\nExample 1:<br/>\n\nInput: [\"flower\",\"flow\",\"flight\"]<br/>\nOutput: \"fl\"<br/><br/>\nExample 2:<br/>\n\nInput: [\"dog\",\"racecar\",\"car\"]<br/>\nOutput: \"\"<br/>\nExplanation: There is no common prefix among the input strings.<br/><br/>\n<b>N: </b>All given inputs are in lowercase letters a-z.\n              <div style={titles}>\n                <PrismCode\n                  code={longestCommonPrefix}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>2. 3Sum</h3>\n              Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\n              <br/>\nNotice that the solution set must not contain duplicate triplets.<br/>\n\n \n\nExample 1:<br/>\n\nInput: nums = [-1,0,1,2,-1,-4]<br/>\nOutput: [[-1,-1,2],[-1,0,1]]<br/><br/>\nExample 2:<br/>\n\nInput: nums = []<br/>\nOutput: []\n\n              <div style={titles}>\n                <PrismCode\n                  code={threeSum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>2. 3Sum Closest</h3>\n              Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.\n              <br/>\nExample 1:<br/>\n\nInput: nums = [-1,2,1,-4], target = 1<br/>\nOutput: 2<br/>\nExplanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n              <div style={titles}>\n                <PrismCode\n                  code={threeSumClosest}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>3. Letter Combinations of a Phone Number.</h3>\n              Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.\n              <br/><br/>\nA mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.<br/><br/>\nExample:<br/>\n\nInput: \"23\"<br/>\nOutput: [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\n              <div style={titles}>\n                <PrismCode\n                  code={letterCombinations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>4. Remove Nth Node From End of List</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={removeNthFromEnd}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>5. Valid Parentheses</h3>\n              Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n              <br/>\nAn input string is valid if:<br/>\n\nOpen brackets must be closed by the same type of brackets.<br/>\nOpen brackets must be closed in the correct order.<br/><br/>\n\nExample 1:<br/>\n\nInput: s = \"()\"<br/>\nOutput: true<br/><br/>\nExample 2:<br/>\n\nInput: s = \"()[]{}\"<br/>\nOutput: true<br/><br/>\nExample 3:<br/>\n\nInput: s = \"(]\"<br/>\nOutput: false\n              <div style={titles}>\n                <PrismCode\n                  code={isValid}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>6. Merge Two Sorted Lists.</h3>\n              Merge two sorted linked lists and return it as a new sorted list. The new list should be made by splicing together the nodes of the first two lists.\n              <div style={titles}>\n                <PrismCode\n                  code={mergeTwoLists}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>7. Generate Parentheses.</h3>\n              Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n              <br/>\nFor example, given n = 3, a solution set is: <br/>\n\n[\n  \"((()))\", <br/>\n  \"(()())\", <br/>\n  \"(())()\", <br/>\n  \"()(())\", <br/>\n  \"()()()\" <br/>\n]\n              <div style={titles}>\n                <PrismCode\n                  code={generateParenthesis}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>8. Merge k Sorted Lists.</h3>\n              You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\n              <br/>\nMerge all the linked-lists into one sorted linked-list and return it.<br/>\n\n \n\nExample 1:<br/>\n\nInput: lists = [[1,4,5],[1,3,4],[2,6]]<br/>\nOutput: [1,1,2,3,4,4,5,6]\n              <div style={titles}>\n                <PrismCode\n                  code={swap}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic4));\n"]},"metadata":{},"sourceType":"module"}