{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/javaScripts/deepJs/introJs.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport EventLoop from \"../../../assets/imgs.svg\";\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 350,\n  width: 600\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst dataTypes = `\nvar x1 = 34.00;                                                                     //34\nvar x2 = 35;                                                                        //35\nlet num = 1.0023;                                                                   //1.0023\nlet str = \"He was 40\";\n                                                                     \n  let resultNum = parseInt(num);                                                    //Convert decimal to number.\n  let resultNum = parseInt(str);                                                    //NaN\n`.trim();\nconst undeclaredVar = `\nvar a\nconsole.log('Undefined variables', a)\nconsole.log('Undeclared variables', b)`.trim();\nconst varConst = `\nvar obj = Object.freeze({ name: 'Mukesh' });\nobj.name = 'Rakesh';\n\nconst obj2 = { name: 'Mukesh' }\nobj2.name = 'Rakesh'\n\nconsole.log(obj.name);                                                              //Mukesh\nconsole.log(obj2.name);                                                             //Rakesh\n`.trim();\nconst Temporal = ` \nvar foo = 'first';\nfunction main() {\n  console.log(foo);                                                                 //undefined\n  var foo = 'second';\n}\n\n\nlet foo = 'first';\nfunction main() {\n  console.log(foo);                                                                 //ReferenceError\n  let foo = 'second';\n}\n\nmain()\n`.trim();\nconst evals = `\nfunction foo(str, a) {\n  eval(str);                                                          // cheating!\n  console.log(a, b);\n}\n\nvar b = 2;\nfoo(\"var b = 3;\", 1);                                                 // 1 3\n`.trim();\nconst forIn = `\nconst object = { a: 1, b: 2, c: 3 };\n\nfor (const property in object) {\n  console.log('$'{property}: '$'{object[property]});\n}`.trim();\nconst forEach = `\nvar arr = [\"C\", \"C++\", \"Python\"];\narr.forEach(val => console.log(val))\n`.trim();\nconst continues = `\nfunction continueFun() {\n  foo: for (var i = 0; i < 4; i++) {\n    for (var j = 0; j < 4; j++) {\n      if (i == j) {\n        console.log(\"continue\", i, j);\n        continue foo;\n      }\n\n      if ((j * i) % 2 == 1) {\n        continue;\n      }\n\n      if ((i * j) >= 3) {\n        console.log(\"break\", i, j);\n        break foo;\n      }\n    }\n  }\n}\n\ncontinueFun()\n`.trim();\nconst nonLabeledBlock = `function nonLabeledBlock(){\n  bar: {\n    console.log('hello');\n    break bar;\n    console.log('never runs');\n}\nconsole.log('welcome');\n}`.trim();\nconst conditions = `\nvar arr = [];\nvar result = [];\n\nresult = arr > 10 ? 'Good' : 'Average'\nconsole.log('ternary', result)\n\n\n//2\ntoCelsius(40)\n\nfunction toCelsius(f) {\n  return console.log((5 / 9) * (f - 32));\n}\n\n\n//3. Template Literals\nconsole.log('string text line 1 \nstring text line 2');\n`.trim();\nconst jsonsObj = `\nvar a = prompt('please enter first number');\nvar b = prompt('please enter second number');\nvar sum = a + b\n\ndocument.write(\"Sum is\",sum)`.trim();\nconst iifes = `\n//1\n(function IIFE_initGame() {                             // Private variables that no one has access to outside this IIFE.\n    var lives;\n    var weapons;\n\n  init();\n\n  \n  function init() {                                     // Private function that no one has access to outside this IIFE.\n    lives = 5;\n    weapons = 10;\n  }\n}());\n\n\n\n//2 We add two functions on the object that we return from the IIFE.\n  var Sequence = (function sequenceIIFE() {\n    var current = 0;                                      //Private variable to store current counter value.\n    \n    return {                                              //Object that's returned from the IIFE.\n      getCurrentValue: function() {\n      return current;\n    },\n\n    getNextValue: function() {\n      current = current + 1;\n      return current;\n    }\n  };\n}());\n\nconsole.log(Sequence.getNextValue());                                     // 1\nconsole.log(Sequence.getNextValue());                                     // 2\nconsole.log(Sequence.getCurrentValue());                                  // 2\n`.trim();\nconst currying = `\nvar prism = l => w => h => l * w * h;\nconsole.log(prism(2)(3)(5))\n\n\n//2\n(function (message) {\n  alert(message);\n}(\"Hello World!\"));\n\n\n//3\nconst sum2 = function(a){\n  return function(b){\n    if(b){\n      return sum2(a+b);\n    }\n    return a;\n  }\n}\n\nconsole.log(sum2(1)(2)(3)(5)());\n`.trim();\nconst generator = `\n  function* generator_function() {\n      yield 1;\n      yield 2;\n    }\n    \n   let generator = generator_function();\n   \n   console.log(generator.next().value);\n   console.log(generator.return(22).value);\n   console.log(generator.next().value);\n   \n   generator = generator_function();\n   let iterable = generator[Symbol.iterator]();\n   \n   console.log(iterable.next().value);\n   console.log(iterable.next().done);\n `.trim();\nconst iterable = `\nlet obj = { array: [1, 2, 3, 4, 5],\n    nextIndex: 0,\n    [Symbol.iterator]:\n    \n  function(){\n  return {\n    array: this.array,\n    nextIndex: this.nextIndex,\n    next: function(){\n        return this.nextIndex < this.array.length ?\n        {value: this.array[this.nextIndex++], done: false} :\n        {done: true};\n      }}}\n    };\n    \n let iterable = obj[Symbol.iterator]()\n console.log(iterable.next().value);\n console.log(iterable.next().value);`.trim();\nconst yields = `\nfunction* generator_function_1(){\n  yield 2;\n  yield 3;\n}\n\nfunction* generator_function_2() {\n   yield 1;\n   yield* generator_function_1();\n   yield* [4, 5];\n }\n\nvar generator = generator_function_2();\nconsole.log(generator.next().value);\nconsole.log(generator.next().value);`.trim();\nconst stricts = `\n//Throw error\n\"use strict\"\nx=3;\nconsole.log(x);\n\n\n//3\n'use strict';\ndelete Object.prototype;                                                                    // throws a TypeError.\n\n\n//4\n'use strict';\nvar o = { p: 1, p: 2 };                                                                     // syntax error.\n\n\n//5\nfunction sum(a, a, c) {                                                                     // syntax error.\n  'use strict';\n  return a + a + c;                                                                         // wrong if this code ran.\n}\n`.trim();\nconst functions = `\nfunction strict() {                                                                  // Function-level strict mode syntax.\n  'use strict';\n  function nested() { return 'And so am I!'; }\n  return console.log(\"Strict mode function!  \" + nested());\n}\n\nfunction notStrict() { return console.log(\"Not strict.\"); }\n\nstrict();\nnotStrict();`.trim();\nconst memorizations = `\nconst memoizedAdd = () => {\n  let cache = {};\n  return (value) => {\n      if (value in cache) {\n          console.log('Fetching from cache');\n          return cache[value];\n      } else {\n          console.log('Calculating result');\n          let result = value + 10;\n          cache[value] = result;\n          return result;\n      }\n  }\n}\nconst main = memoizedAdd();\nconsole.log(main(9));                                                             //output: 19 calculated.\nconsole.log(main(9));                                                             //output: 19 cached.\n`.trim();\nconst management = `\nvar x = { a: { b: 2 } };\n\nvar y = x;                                                          \nx = 1;                                      \n\nvar z = y.a;                                 \ny = 'mozilla';                               \nz = null;                                    \n`.trim();\nconst circular = `\nfunction f() {\n  var x = {};\n  var y = {};\n  x.a = y;                                                                              // x references y.\n  y.a = x;                                                                              // y references x.\n\n  return 'azerty';\n}\nf();\n`.trim();\nconst eventLoop = `var eventLoop =[];\n var event;\n while(true){\n    if (eventLoop.length > 0) {\n      event = eventLoop.shift();\n        try {\n        event();\n        }\n      catch (err){\n      reportError(err);\n      }\n    }\n  }\n `.trim();\nconst window = `\n  var a = 2;\n  \n  (function IIFE(def) {\n     def(window);\n  })(function def(global) {\n     var a = 3;\n     console.log(a);                                                                              // 3\n     console.log(global.a);                                                                       // 2\n  });\n`.trim();\nconst stack = `\nfunction foo(b) {\n  let a = 10\n  return a + b + 11\n}\n\nfunction bar(x) {\n  let y = 3\n  return foo(x * y)\n}\n\nconsole.log(bar(7))`.trim();\nconst messages = `\nconst s = new Date().getSeconds();\n\nsetTimeout(function() {\n  console.log(\"Ran after \" + (new Date().getSeconds() - s) + \" seconds\");\n}, 500)\n\nwhile (true) {\n  if (new Date().getSeconds() - s >= 2) {\n    console.log(\"Good, looped for 2 seconds\")\n    break;\n  }\n}`.trim();\nconst security = `\n//async\n<script async src=\"js/script2.js\"></script>\n<script async src=\"js/script3.js\"></script>\n\n\n//defer\n<script defer src=\"js/script2.js\"></script>\n<script defer src=\"js/script3.js\"></script>\n`.trim();\nconst proxies = `\nlet handler = {\n  get: function(target, name) {\n    return name in target? target[name] : 42\n  }\n}\n\nlet p = new Proxy({}, handler)\np.a = 1\nconsole.log(p.a, p.b) `.trim();\nconst features = `import * as Module from './modules/module.js';`.trim();\nconst exportsing = `export { name, draw, reportArea, reportPerimeter };`.trim();\nconst loading = `\nimport('/index.js')\n  .then((module) => {\n    // Do something with the module.\n  });\n`.trim();\nconst listeners = `\n\n<button id=\"clickMe\">Click me</button>\n\n//1\ndocument.getElementById(\"clickMe\")\n.addEventListener(\"click\", () => {\n  console.log('button clicked')\n});\n\n\n//2 Couser With Event Listeners\nfunction attachedEventListeners(){\n  let count = 0;\ndocument.getElementById(\"clickMe\")\n.addEventListener(\"click\", () => {\n  console.log('button clicked', count++)\n  });\n}\n\nattachedEventListeners();`.trim();\nconst Bubblings = `\n<style>\ndiv {\n  min-width:100px;\n  min-height: 100px;\n  padding: 30px;\n  border: 1px solid black;\n}\n</style>\n</head>\n<body>\n<div id=\"grandParrent\">\n  <div id=\"parent\">\n    <div id=\"child\">\n    </div>\n  </div>\n</div>\n<script src=\"input.js\"></script>\n</body> \n\n\n---------------------------------------------js-------------------\n\ndocument.querySelector('#grandParrent')\n  .addEventListener('click', ()=> {\n    console.log('GrandParent Clicked')                                    // Event Bubbling\n  }, false);                                                              //If don't pass 3rd argument it default false.\n                                                                                \n  \n  document.querySelector('#parent')\n  .addEventListener('click', (e)=> {\n    console.log('parent Clicked')\n    e.stopPropagation();                                                        //Stop Bubbling/Capturing\n  },false);                                                                     // Event Bubbling\n  \n  document.querySelector('#child')\n  .addEventListener('click', ()=> {\n    console.log('child Clicked')\n  },true);                                                                      // Event Capturing\n  `.trim();\nconst stopPropagation = `\nvar div = document.querySelector(\"div\");\nvar section = document.querySelector(\"section\");\nvar button = document.querySelector(\"button\");\n\ndiv.addEventListener(\"click\", () => {\n\tconsole.log('div')\n}, true)\n\ndiv.addEventListener(\"click\", () => {\n\tconsole.log('section')\n}, true)\n\ndiv.addEventListener(\"click\", (event) => {\n\tevent.stopPropagation();\n\tconsole.log('button')\n}, true)`.trim();\nconst debouncing = `\n<input typt=\"text\" onkeyup=\"betterDebouncing()\" />\n\n\n---------------------------------------------js-------------------\n\nlet counter = 0\nconst getData = () => {\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n            .then(res => res.json()) \n            .then(responseData => {\n                console.log('dddd',responseData,\"---\",counter++);\n            });\n}\n\nconst debounced = function (fn ,d){\n  let timer;\n  return function(){\n    let context = this,\n    args = arguments;\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      getData.apply(context, args)\n    }, d)\n  }\n}\n\nconst betterDebouncing = debounced(getData, 300);\n`.trim();\nconst execution = `\nfunction foo() { }                                                             // function statement.\n\n\nvar foo = function() { }                                                       // function expression.\n`.trim();\nconst textContent = `\n<body> \n<h3>Differences between innerText & textContent.</h3> \n<p id=\"demo\"> This element has extra\t spacing and contains \n<span>a span element</span>.</p> \n\n<button onclick=\"getInnerText()\">Get innerText</button> \n<button onclick=\"getTextContent()\">Get textContent</button> \n\n<p id=\"demo\"></p> \n<script> \n\tfunction getInnerText() { \n\talert(document.getElementById(\"demo\").innerText) \n\t} \n\n\tfunction getTextContent() { \n\talert(document.getElementById(\"demo\").textContent) \n\t} \n</script> \n</body> \n`.trim();\nconst HTMLCollection = `\nconst fruits = document.getElementsByClassName(‘fruits’);\nfruits.item(0).classList.add(‘fruit__01’)`.trim();\nconst NodeList = `\n const fruits = document.querySelectorAll(‘.fruits’);                           // returns static collection.\n\n const fruits = document.querySelector(‘.fruits’);                              // returns live collection.\n const childFruit = fruits.childNodes;`.trim();\nconst traversed = `\nArray.proptotype.map.call(p, tag => {\n  console.log(tag.innerText)\n})`.trim();\nconst childNodes = `\n<script type='text/javascript'>\n$(window).load(function(){\n    console.log(document.getElementById('dd').children.length);\n    console.log(document.getElementById('dd').childNodes.length);\n});\n</script>\n</head>\n<body>\n  <div id=\"dd\">\n    <p>Test paragraph.</p>\n    <div>\n      <p>Test paragraph 2.</p>\n    </div>\n    Text.\n  </div>\n</body>`.trim();\nconst firstElementChild = `\n<ul id=\"list\"><!-- a list item -->\n<li>Item1</li>\n<li>Item2</li>\n</ul>\n\n\n//js\n  var list = document.getElementById(\"list\");\n   \n  console.log(\"First child value is\",list.firstChild);\n   \n  console.log(\"First element child value is\",list.firstElementChild);\n`.trim();\nconst dynamically = `\n<body>\n    <button onclick=\"create()\">Create Heading</button>\n    <script>\n      function create() {\n        var h1 = document.createElement('h1');\n        h1.textContent = \"New Heading!!!\";\n        h1.setAttribute('class', 'note');\n        document.body.appendChild(h1);\n      }\n    </script>\n  </body>`.trim();\nconst removeChild = `\n//RemoveChild.\nlet p = document.querySelector( 'p' )\nlet removed = p.removeChild( p.firstChild )\nconsole.log( removed )                                                      //<i>Hi</i>\n\n\n//Remove\nlet p = document.querySelector( 'p' )\nlet removed = p.childNodes[0].remove()\nconsole.log( removed )                                                      // undefined\n`.trim();\n\nclass IntroJs extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679\n      },\n      __self: this\n    }, \"1. What are JavaScript Data Types?\"), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680\n      },\n      __self: this\n    }, \"In JavaScript null is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680\n      },\n      __self: this\n    }, \"nothing\"), \". It is supposed to be something that\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681\n      },\n      __self: this\n    }, \" doesn't exist\"), \". In JavaScript, the data type of null is an \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681\n      },\n      __self: this\n    }, \"object\"), \".\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682\n      },\n      __self: this\n    }), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684\n      },\n      __self: this\n    }, \"Number\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685\n      },\n      __self: this\n    }, \"String\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 686\n      },\n      __self: this\n    }, \"Boolean\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687\n      },\n      __self: this\n    }, \"Object\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688\n      },\n      __self: this\n    }, \"Undefined\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689\n      },\n      __self: this\n    }, \"Null\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691\n      },\n      __self: this\n    }), \"Numbers can be written with, or without \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692\n      },\n      __self: this\n    }, \"decimals\"), \".\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 695\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 696\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: dataTypes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 697\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705\n      },\n      __self: this\n    }, \"2. What are undeclared and undefined variables?\"), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 706\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 707\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 708\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 708\n      },\n      __self: this\n    }, \"Undeclared variables: \"), \" Are those that do not exist in a program and are not declared. If the program tries to read the value of an undeclared variable, then a runtime error is encountered.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710\n      },\n      __self: this\n    }, \"Undefined variables: \"), \" are those that are declared in the program but have not been given any value. If the program tries to read the value of an undefined variable, an undefined value is returned.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 714\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: undeclaredVar,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 716\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 722\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724\n      },\n      __self: this\n    }, \"3.difference between Object.freeze() vs const\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725\n      },\n      __self: this\n    }, \"const\"), \" and \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725\n      },\n      __self: this\n    }, \"Object.freeze\"), \" are two completely different things.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 726\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 727\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 728\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 729\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 730\n      },\n      __self: this\n    }, \"const applies to bindings \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 730\n      },\n      __self: this\n    }, \"variables\"), \". It creates an immutable binding.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732\n      },\n      __self: this\n    }, \"Object.freeze works on values. It makes an object immutable, i.e. cannot change its properties.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 736\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: varConst,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 737\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 743\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 744\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 745\n      },\n      __self: this\n    }, \"4. What is the Temporal Dead Zone(TDZ) in ES6.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 747\n      },\n      __self: this\n    }, \"let and const are hoisted, but there is a period between entering scope and being declared where they cannot be accessed. This period is the TDZ.\"), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 749\n      },\n      __self: this\n    }, \"There is a misconception that says let/ const are not hoisted in JavaScript. According to ES6 specification, The variables are created when their containing Lexical Environment is instantiated but may not be accessed in any way until the variable\\u2019s LexicalBinding is evaluated.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 755\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Temporal,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 756\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 762\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 763\n      },\n      __self: this\n    }, \"The variable is in a \\\"temporal dead zone\\\" from the start of the block until the initialization is processed.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 764\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 766\n      },\n      __self: this\n    }, \"5. What is JSON Web Token?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 767\n      },\n      __self: this\n    }, \"Is a open standard(RFC) that securely transmitting information between parties as a JSON object. This information can be verifed and trusted because it is a digitally signed. JWTs can be signed using a secret or a public/ private key pair using RSA.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 771\n      },\n      __self: this\n    }, \"When should you use JSON Web Token? \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 772\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 773\n      },\n      __self: this\n    }, \"Authentication is the most scenario for using JWT. Once the user is logged in, each subsequent resquest will include the JWT.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 775\n      },\n      __self: this\n    }, \"Information exchange, JWT is a good way of securely transmitting information between parties.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 777\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 779\n      },\n      __self: this\n    }, \"What is the JSON Web Token structure?\"), \"JSON Web Tokens consist of three parts separated by dots (.), which are:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 781\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 782\n      },\n      __self: this\n    }, \"Header\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 783\n      },\n      __self: this\n    }, \"Payload\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 784\n      },\n      __self: this\n    }, \"Signature\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 786\n      },\n      __self: this\n    }), \"Therefore, a JWT typically looks like.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 788\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 789\n      },\n      __self: this\n    }, \"xxxxx.yyyyy.zzzzz\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 790\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 792\n      },\n      __self: this\n    }, \"6. Eval\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 793\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: evals,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 794\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 800\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 802\n      },\n      __self: this\n    }, \"7. For...In\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 803\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 804\n      },\n      __self: this\n    }, \"A for...in loop will not find any property on the array.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 805\n      },\n      __self: this\n    }, \"A for...in loop only iterates over enumerable, non-Symbol properties. Objects created from built\\u2013in constructors like Array and Object have inherited non\\u2013enumerable properties from Object.prototype and String.prototype, such as String's indexOf() method or Object's toString() method. The loop will iterate over all enumerable properties of the object itself and those the object inherits from its prototype chain.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 811\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 813\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: forIn,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 814\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 820\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 822\n      },\n      __self: this\n    }, \"8. Enumerable\"), \"An enumerable property in JavaScript means that a property can be viewed if it is iterated using the for\\u2026in loop or Object.keys() method. All the properties which are created by simple assignment or property initializer are enumerable by default.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 826\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 828\n      },\n      __self: this\n    }, \"9. forEach():\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 829\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 830\n      },\n      __self: this\n    }, \"The function passed to forEach is executed once for every item in the array, with the array item passed as the argument to the function.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 833\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 833\n      },\n      __self: this\n    }, \"Note:\"), \" Elements of an array that are omitted when the array is defined are not listed when iterating by forEach, but are listed when undefined has been manually assigned to the element.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 837\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 838\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 839\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: forEach,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 840\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 846\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 848\n      },\n      __self: this\n    }, \"10. continue and break\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 849\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: continues,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 850\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 856\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 858\n      },\n      __self: this\n    }, \"11. non-labeled block\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 859\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: nonLabeledBlock,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 860\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 866\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 867\n      },\n      __self: this\n    }, \"12. Ternary Conditions\"), \"Accessing a function without () will return the function object instead of the function result.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 869\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: conditions,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 870\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 876\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 878\n      },\n      __self: this\n    }, \"13. Prompt\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 879\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: jsonsObj,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 880\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 886\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 887\n      },\n      __self: this\n    }, \"14. IIFE\"), \"The function on the right-hand side of the assignment operator is often called a \\u201Cfunction expression\\u201D.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 889\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 890\n      },\n      __self: this\n    }, \"Any variables declared inside the IIFE are not visible to the outside world.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 891\n      },\n      __self: this\n    }, \"When creating a bunch of variables and functions in global scope that no one uses outside your code, just wrap all of that in an IIFE.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 895\n      },\n      __self: this\n    }, \"IIFE return a value that can be assigned to a variable.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 896\n      },\n      __self: this\n    }, \"Parentheses around the function expression basically force the function to become an expression instead of a statement.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 901\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 902\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: iifes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 903\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 909\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 910\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 911\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 912\n      },\n      __self: this\n    }, \"Since current variable is private to the IIFE, no one but the functions that have access to it through closure can modify or access the current variable.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 916\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 918\n      },\n      __self: this\n    }, \"15. Curry\"), \"Curring is a process in functional programming in which we can transform a function with multiple arguments into a sequence of nesting functions. It returns a new function that expects the next argument inline.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 922\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: currying,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 923\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 929\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 931\n      },\n      __self: this\n    }, \"16. Generator\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 932\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 933\n      },\n      __self: this\n    }, \"Generators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 936\n      },\n      __self: this\n    }, \"Generator functions are written using the function* syntax.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 937\n      },\n      __self: this\n    }, \"When called initially, generator functions do not execute any of their code, instead returning a type of iterator called a Generator.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 940\n      },\n      __self: this\n    }, \"When a value is consumed by calling the generator's next method, the Generator function executes until it encounters the yield keyword.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 944\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 945\n      },\n      __self: this\n    }, \"When should we use generators:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 946\n      },\n      __self: this\n    }), \"To put it simple, generator has two features:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 948\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 949\n      },\n      __self: this\n    }, \"1.one can choose to jump out of a function and let outer code to determine when to jump back into the function.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 952\n      },\n      __self: this\n    }, \"2.the control of asynchronous call can be done outside of your code The most important feature in generators\\u2014we can get the next value in only when we really need it, not all the values at once. And in some situations it can be very convenient.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 957\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 958\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 959\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: generator,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 960\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 966\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 968\n      },\n      __self: this\n    }, \"17. Iterable\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 969\n      },\n      __self: this\n    }), \"Any object that implements the iterable protocol is known as an iterable.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 971\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: iterable,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 972\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 978\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 980\n      },\n      __self: this\n    }, \"18. Yield\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 981\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: yields,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 982\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 988\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 990\n      },\n      __self: this\n    }, \"19. Strict mode\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 991\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 992\n      },\n      __self: this\n    }, \"Makes debugging easier. Code errors that have been ignored/ failed silently now generate errors or throw exceptions.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 994\n      },\n      __self: this\n    }, \"Prevents accidental globals. Without strict mode, assigning a value to an undeclared variable automatically creates a global variable with that name. In strict mode, attempting to do so throws an error.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 996\n      },\n      __self: this\n    }, \"Eliminates this coercion. Without strict mode, a reference to a this value of null/ undefined is automatically coerced to the global.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 997\n      },\n      __self: this\n    }, \"Fixes mistakes that make it difficult for JavaScript engines to perform optimizations. strict mode code can sometimes be made to run faster than identical code that's not strict mode.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1000\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1002\n      },\n      __self: this\n    }, \"Converting mistakes into errors\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1003\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1004\n      },\n      __self: this\n    }, \"Strict mode makes it impossible to accidentally create global variables.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1005\n      },\n      __self: this\n    }, \"In normal code assigning to NaN does nothing, no receives failure feedback. In strict mode assigning to NaN throws an exception.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1007\n      },\n      __self: this\n    }, \"all properties named in an object literal be unique. The normal code may duplicate property names, with the last one determining the property's value. Duplicate property names are a syntax error in strict mode:\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1010\n      },\n      __self: this\n    }, \"strict mode requires that function parameter names be unique.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1011\n      },\n      __self: this\n    }, \"Primitive values. Without strict mode, setting properties is ignored, with strict mode, however, a TypeError is thrown.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1014\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1016\n      },\n      __self: this\n    }, \"Invoking strict mode\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1017\n      },\n      __self: this\n    }), \"Strict mode applies to entire scripts or to individual functions. It doesn't apply to block statements enclosed in \", \" braces.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1020\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1021\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1023\n      },\n      __self: this\n    }, \"Strict mode for scripts\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1024\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: stricts,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1025\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1031\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1032\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1034\n      },\n      __self: this\n    }, \"Strict mode for functions\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1035\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: functions,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1036\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1042\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1044\n      },\n      __self: this\n    }, \"20. Memoization\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1045\n      },\n      __self: this\n    }, \"Memoization is a programming technique that attempts to increase a function\\u2019s performance by caching its previously computed results. Because JavaScript objects behave like associative arrays, they are ideal candidates to act as caches. Each time a memoized function is called, its parameters are used to index the cache. If the data is present, then it can be returned, without executing the entire function. However, if the data is not cached, then the function is executed, and the result is added to the cache.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1052\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: memorizations,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1053\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1059\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1061\n      },\n      __self: this\n    }, \"21. Memory Management\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1062\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1063\n      },\n      __self: this\n    }, \"JavaScript will automatically allocate memory when values are initially declared.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1064\n      },\n      __self: this\n    }, \"The purpose of a garbage collector is to monitor memory allocation and determine when a block of allocated memory is no longer needed and reclaim it. \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1066\n      },\n      __self: this\n    }, \"A JavaScript object has a reference to its prototype (implicit reference) and to its properties values (explicit reference).\")), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1069\n      },\n      __self: this\n    }, \"Reference-counting garbage collection\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1070\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1071\n      },\n      __self: this\n    }, \"This algorithm reduces the problem from determining whether or not an object is still needed to determining if an object still has any other objects referencing it. An object is said to be \\\"garbage\\\", if there are zero references pointing to it.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1074\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1074\n      },\n      __self: this\n    }, \"2 objects are created. One is referenced by the other as one of its properties. The other is referenced by virtue of being assigned to the 'x' variable. Obviously, none can be garbage-collected.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1078\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1080\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: management,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1081\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1087\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1089\n      },\n      __self: this\n    }, \"22. Limitation: Circular references\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1090\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: circular,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1091\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1097\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1099\n      },\n      __self: this\n    }, \"23. Mark-and-sweep algorithm\"), \"This algorithm reduces the definition of \\\"an object is no longer needed\\\" to \\\"an object is unreachable\\\".\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1101\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1102\n      },\n      __self: this\n    }), \"The root is the global object. Periodically, the garbage collector will start from these roots, find all objects that are referenced from these roots, then all objects referenced from these, etc. Starting from the roots, the garbage collector will thus find all reachable objects and collect all non-reachable objects.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1106\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1108\n      },\n      __self: this\n    }, \"25.window\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1109\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: window,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1110\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1116\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1118\n      },\n      __self: this\n    }, \"26.Event loop\"), \"Browser have a mechanism in them that handles executing multiple chunks of program over time, at each moment invoking the JS engine, called the \\\"event loop.\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1121\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1122\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1123\n      },\n      __self: this\n    }, \"Scheduled \\\"events\\\" :\"), \"The browser is then set up to listen for the response from the network, and when it has something to give you, it schedules the callback function to be, executed by inserting it into the event loop.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1127\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1128\n      },\n      __self: this\n    }), \"Now chunk runs right away, as soon as you execute your program. But setTimeout(..) also sets up an event to happen later(1000 ms).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1131\n      },\n      __self: this\n    }), \"EventLoop is an array that acts as a queue (first-in, first-out).\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1133\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: eventLoop,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1134\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1140\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1142\n      },\n      __self: this\n    }, \"27. Concurrency model and the event loop\"), \"JavaScript has a concurrency model based on an event loop, which is responsible for executing the code, collecting and processing events, and executing queued sub-tasks.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1145\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1146\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: EventLoop,\n      alt: \"\",\n      className: \"responsive\",\n      style: redesign,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1147\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1148\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1149\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1151\n      },\n      __self: this\n    }, \"28. Stack\"), \"Function calls form a stack of frames.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1153\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: stack,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1154\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1160\n      },\n      __self: this\n    }), \"When calling bar, a first frame is created containing bar's arguments and local variables. When bar calls foo, a second frame is created and pushed on top of the first one containing foo's arguments and local variables. When foo returns, the top frame element is popped out of the stack (leaving only bar). When bar returns, the stack is empty.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1165\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1167\n      },\n      __self: this\n    }, \"29. Heap\"), \"Objects are allocated in a heap which is just a name to denote a large (mostly unstructured) region of memory.\", React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1169\n      },\n      __self: this\n    }, \"Queue\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1170\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1171\n      },\n      __self: this\n    }, \"At some point during the event loop, the runtime starts handling the messages on the queue, starting with the oldest one. To do so, the message is removed from the queue and its corresponding function is called with the message as an input parameter. As always, calling a function creates a new stack frame for that function's use.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1174\n      },\n      __self: this\n    }, \"The processing of functions continues until the stack is once again empty. Then, the event loop will process the next message in the queue (if there is one).\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1177\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1179\n      },\n      __self: this\n    }, \"30. Run-to-completion\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1180\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1181\n      },\n      __self: this\n    }, \"Each message is processed completely before any other message is processed.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1182\n      },\n      __self: this\n    }, \"If a function runs in a thread, it may be stopped at any point by the runtime system to run some other code in another thread.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1184\n      },\n      __self: this\n    }, \"A downside of this model is that if a message takes too long to complete, the web application is unable to process user interactions like click/ scroll. The browser mitigates this with the \\\"a script is taking too long to run\\\" dialog. A good practice to follow is to make message processing short and if possible cut down one message into several messages.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1189\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1190\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1192\n      },\n      __self: this\n    }, \"Adding messages\"), \"In web browsers, messages are added anytime an event occurs and there is an event listener attached to it. If there is no listener, the event is lost. So a click on an element with a click event handler will add a message.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1195\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1196\n      },\n      __self: this\n    }), \"The function setTimeout is called with 2 arguments. a message to add to the queue, and a time value (defaults 0). The time value represents the (minimum) delay after which the message will actually be pushed into the queue. If there is no other message in the queue, and the stack is empty, the message is processed right after the delay. However, if there are messages, the setTimeout message will have to wait for other messages to be processed. For this reason, the second argument indicates a minimum time\\u2014not a guaranteed time.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1203\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: messages,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1204\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1210\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1212\n      },\n      __self: this\n    }, \"31. Zero delays\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1213\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1214\n      },\n      __self: this\n    }, \"Zero delay doesn't actually mean the call back will fire-off after zero milliseconds. Calling setTimeout with a delay of 0 milliseconds doesn't execute the callback function after the given interval.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1216\n      },\n      __self: this\n    }, \"The execution depends on the number of waiting tasks in the queue.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1217\n      },\n      __self: this\n    }, \"Basically, the setTimeout needs to wait for all the code for queued messages to complete even though you specified a particular time limit for your setTimeout.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1220\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1222\n      },\n      __self: this\n    }, \"32.Browser security\"), \"Each browser tab has its own separate bucket for running code (called execution environments) - this means that in most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab \\u2014 or on another website.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1226\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1227\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1228\n      },\n      __self: this\n    }, \"Interpreted versus compiled code:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1229\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1230\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1231\n      },\n      __self: this\n    }, \"In interpreted languages, the code is run from top to bottom and the result of running the code is immediately returned. You don't have to transform the code into a different form before the browser runs it. The code is received in its programmer-friendly text form and processed directly from that.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1236\n      },\n      __self: this\n    }, \"Compiled languages on the other hand are transformed (compiled) into another form before they are run by the computer. For example, C/C++ are compiled into machine code that is then run by the computer. The program is executed from a binary format, which was generated from the original program source code.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1242\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1244\n      },\n      __self: this\n    }, \"33. Server-side versus client-side code\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1245\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1246\n      },\n      __self: this\n    }, \"Client-side code is code that is run on the user's computer \\u2014 when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1249\n      },\n      __self: this\n    }, \"Server-side code on the other hand is run on the server, then its results are downloaded and displayed in the browser.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1252\n      },\n      __self: this\n    }, \"A web page with no dynamically updating content is referred to as static \\u2014 it just shows the same content all the time.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1256\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1258\n      },\n      __self: this\n    }, \"34. async and defer\"), \"Two modern features we can use to bypass the problem of the blocking script \\u2014 async and defer.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1260\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1261\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1262\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1263\n      },\n      __self: this\n    }, \"Scripts loaded using the \\\"async\\\" attribute will download the script without blocking rendering the page and will execute it as soon as the script finishes downloading.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1265\n      },\n      __self: this\n    }, \"No guarantee that scripts will run in any specific order, only that they will not stop the rest of the page from displaying.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1266\n      },\n      __self: this\n    }, \"It is best to use async when the scripts in the page run independently from each other and depend on no other script on the page.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1267\n      },\n      __self: this\n    }, \"async should be used when we have a bunch of background scripts to load in, and we just want to get them in place as soon as possible.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1269\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1270\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1272\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1273\n      },\n      __self: this\n    }, \"Scripts loaded using the \\\"defer\\\" attribute will run in the order they appear in the page and execute them as soon as the script and content are downloaded.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1275\n      },\n      __self: this\n    }, \"All the scripts with the defer attribute will load in the order they appear on the page.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1276\n      },\n      __self: this\n    }, \"They won't run until the page content has all loaded, which is useful if our scripts depend on the DOM being in place.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1280\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1281\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1283\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1284\n      },\n      __self: this\n    }, \"1. async and defer both instruct the browser to download the scripts in a separate thread, while the rest of the page is downloading, so the page loading is not blocked by the scripts.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1287\n      },\n      __self: this\n    }, \"2. If our scripts should be run immediately and they don't have any dependencies, then use async.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1289\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1290\n      },\n      __self: this\n    }), \"If your scripts need to wait for parsing and depend on other scripts and/or the DOM being in place, load them using defer.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1294\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: security,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1295\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1301\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1303\n      },\n      __self: this\n    }, \"35. Proxies\"), \"Proxy objects allow you to intercept certain operations and to implement custom behaviors.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1305\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1307\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: proxies,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1308\n      },\n      __self: this\n    })), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1314\n      },\n      __self: this\n    }, \"The Proxy object defines a target (an empty object here) and a handler object, in which a get trap is implemented. Here, an object that is proxied will not return undefined when getting undefined properties, but will instead return the number 42.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1317\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1318\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1319\n      },\n      __self: this\n    }, \"The following terms are used when talking about the functionality of proxies:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1320\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1321\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1322\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1322\n      },\n      __self: this\n    }, \"handler: \"), \"Placeholder object which contains traps.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1323\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1323\n      },\n      __self: this\n    }, \"traps: \"), \"Methods that provide property access. (This is analogous to the concept of traps in operating systems.)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1324\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1324\n      },\n      __self: this\n    }, \"target: \"), \"Object which the proxy virtualizes. It is often used as storage backend for the proxy. Invariants (semantics that remain unchanged) regarding object non-extensibility or non-configurable properties are verified against the target.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1327\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1327\n      },\n      __self: this\n    }, \"invariants: \"), \"Semantics that remain unchanged when implementing custom operations are called invariants. If we violate the invariants of a handler, a TypeError will be thrown.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1330\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1332\n      },\n      __self: this\n    }, \"36. Modules\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1333\n      },\n      __self: this\n    }, \"Differences between modules and standard scripts\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1334\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1335\n      },\n      __self: this\n    }, \"If we try to load the HTML file locally, will run into CORS errors due to JavaScript module security requirements.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1336\n      },\n      __self: this\n    }, \"Also might get different behavior from sections of script defined inside modules as opposed to in standard scripts. This is because modules use strict mode automatically.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1338\n      },\n      __self: this\n    }, \"Modules are only executed once, even if they have been referenced in multiple \\\"script\\\" tags.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1340\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1341\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1343\n      },\n      __self: this\n    }, \"Default exports versus named exports\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1344\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1345\n      },\n      __self: this\n    }, \"Named exports are useful to export several values. During the import, one will be able to use the same name to refer to the corresponding value.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1347\n      },\n      __self: this\n    }, \"In default export, there is only a single default export per module. A default export can be a function, a class or an object. This value is to be considered as the \\u201Cmain\\u201D exported value.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1351\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1352\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1354\n      },\n      __self: this\n    }, \"Creating a module object\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1355\n      },\n      __self: this\n    }), \"To import each module's features inside a module object. The following syntax form does that:\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1357\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: features,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1358\n      },\n      __self: this\n    })), \"This grabs all the exports available inside module.js, and makes them available as members of an object Module, effectively giving it its own namespace.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1366\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1367\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1368\n      },\n      __self: this\n    }, \"the exports are all\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1369\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: exportsing,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1370\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1376\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1377\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1379\n      },\n      __self: this\n    }, \"Dynamic module loading\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1380\n      },\n      __self: this\n    }), \"The newest part of the JavaScript modules functionality to be available in browsers is dynamic module loading. This allows you to dynamically load modules only when they are needed, rather than having to load everything. This has some obvious performance advantages.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1384\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1385\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1386\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: loading,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1387\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1393\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1395\n      },\n      __self: this\n    }, \"37.Event Listeners\"), \"Real interactivity on a website requires event handlers. These are code structures that listen for activity in the browser, and run code in response.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1398\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: listeners,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1399\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1405\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1407\n      },\n      __self: this\n    }, \"38.Event bubbling and Capturing\"), \"Event bubbling and capturing are two ways of event propagation in the HTML DOM API, when an event occurs in an element inside another element, and both elements have registered a handle for that event.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1410\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1411\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1412\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1413\n      },\n      __self: this\n    }, \"bubbling: \"), \"the event is first captured and handled by the innermost element and then propagated to outer elements.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1416\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1417\n      },\n      __self: this\n    }, \"capturing: \"), \"the event is first captured by the outermost element and propagated to the inner elements.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1419\n      },\n      __self: this\n    }, \"Event bubbling set by default. If we pass true parameter in callback function than it became event capturing\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1423\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1424\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Bubblings,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1425\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1431\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1433\n      },\n      __self: this\n    }, \"39.event.stopPropagation\"), \"event.stopPropagation and event.preventDefault, seem to be doing the same thing.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1435\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1436\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1436\n      },\n      __self: this\n    }, \"stopPropagation: \"), \"Stops the event from bubbling up the event chain.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1437\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1437\n      },\n      __self: this\n    }, \"preventDefault: \"), \"Prevents the default action the browser makes on that event.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1439\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1440\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: stopPropagation,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1441\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1447\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1449\n      },\n      __self: this\n    }, \"40.Event Debouncing\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1450\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: debouncing,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1451\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1457\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1459\n      },\n      __self: this\n    }, \"41.Function Express & Function Statement\"), \"function expressions and function statements are very similar in JavaScript, the difference is how the browser loads them into the execution context.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1462\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: execution,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1463\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1469\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1470\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1471\n      },\n      __self: this\n    }, \"function statement: \"), \" loads before any code is executed. This behavior of function statements is called hoisting, which allows a function to be used before it is defined.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1474\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1475\n      },\n      __self: this\n    }, \"function expression: \"), \"associates a value with a variable, just like any other assignment statement. function expressions load only when the interpreter reaches the definition of the function.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1478\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1479\n      },\n      __self: this\n    }, \"Difference between Function Statement and Function Expression is the \\\"Hosting\\\".\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1480\n      },\n      __self: this\n    }, \"Function Statement also called Function Declaration.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1481\n      },\n      __self: this\n    }, \"Annonninous Function Doesnt have their own Identity.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1483\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1485\n      },\n      __self: this\n    }, \"42.Difference between textContent and innerText.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1486\n      },\n      __self: this\n    }, \"textContent: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1487\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1488\n      },\n      __self: this\n    }, \"Used to set/ return the text value of the selected node and all its descendants.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1489\n      },\n      __self: this\n    }, \"While setting the textContent property, any child nodes are removed. It is replaced by a single Text node containing the specified string.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1491\n      },\n      __self: this\n    }), \"To set the text of node \\u2013\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1492\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1493\n      },\n      __self: this\n    }, \"node.textContent = text\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1494\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1495\n      },\n      __self: this\n    }), \"To return the text of node \\u2013\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1496\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1497\n      },\n      __self: this\n    }, \"node.textContent\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1498\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1500\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: textContent,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1501\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1507\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1508\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1509\n      },\n      __self: this\n    }, \"innerText: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1510\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1511\n      },\n      __self: this\n    }, \"This property also sets/ returns the text value of the selected node and all its descendants.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1512\n      },\n      __self: this\n    }, \"The innerText property returns the text, without spacing and the textContent property returns the text along with spacing.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1514\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1515\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1516\n      },\n      __self: this\n    }, \"Other differences:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1517\n      },\n      __self: this\n    }), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1518\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1519\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1520\n      },\n      __self: this\n    }, \"innerText\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1521\n      },\n      __self: this\n    }, \"textContent\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1523\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1524\n      },\n      __self: this\n    }, \"Returns the visible text contained in a node.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1525\n      },\n      __self: this\n    }, \"Returns the full text.\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1527\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1528\n      },\n      __self: this\n    }, \"Much more performance-heavy, as it requires layout information to return the result.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1529\n      },\n      __self: this\n    }, \"It is not so much performance-heavy, as it doesn\\u2019t requires layout information to return the result.\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1531\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1532\n      },\n      __self: this\n    }, \"Defined only for HTMLElement objects.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1533\n      },\n      __self: this\n    }, \"Defined for all Node objects.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1536\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1538\n      },\n      __self: this\n    }, \"43.What is the difference between HTMLCollection and NodeList\"), \"The main difference between an HTMLCollection and a NodeList is that one is live and one is static. This means that when an element is appended to the DOM, a live node will recognize the new element while a static node will not.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1541\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1542\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1543\n      },\n      __self: this\n    }, \"HTMLCollection:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1544\n      },\n      __self: this\n    }), \"The element methods \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1545\n      },\n      __self: this\n    }, \"getElementsByClassName()\"), \" and \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1545\n      },\n      __self: this\n    }, \"getElementsByTagName()\"), \" return a live HTMLCollection. It only includes the matching elements (e.g. class name or tag name) and does not include text nodes, it provides only two methods \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1546\n      },\n      __self: this\n    }, \"item\"), \" and \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1546\n      },\n      __self: this\n    }, \"namedItem\"), \".\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1547\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1548\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1549\n      },\n      __self: this\n    }, \"Ex. \"), \"All the elements with the class name of fruits is selected. The item() method is then used to access the fruit at index 0 and a class name of fruit__01 is added to that element.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1552\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: HTMLCollection,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1553\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1559\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1560\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1561\n      },\n      __self: this\n    }, \"NodeList: \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1562\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1563\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1564\n      },\n      __self: this\n    }, \"The element method \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1564\n      },\n      __self: this\n    }, \"querySelectorAll()\"), \" returns a static NodeList. They look like arrays but are not.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1565\n      },\n      __self: this\n    }, \"NodeLists have a defined forEach method as well as a few other methods including item, entries, keys, and values.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1566\n      },\n      __self: this\n    }, \"NodeLists behave differently depending on how we access them. if we access elements using \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1566\n      },\n      __self: this\n    }, \"childNodes\"), \", the returned list is live and will update as more elements are added to the node. If it\\u2019s accessed using \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1567\n      },\n      __self: this\n    }, \"querySelectorAll()\"), \", the returned list is static and will not update if more elements are added to the node.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1571\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1572\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: NodeList,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1573\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1579\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1581\n      },\n      __self: this\n    }, \"44.How can an HTMLCollection be traversed?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1582\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1583\n      },\n      __self: this\n    }, \"If use .map, .filter, or .forEach on an HTML collection got this friendly error.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1584\n      },\n      __self: this\n    }, \"Ex. \"), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1584\n      },\n      __self: this\n    }, \"Uncatch TypeError: p.forEach is not a function at 'anonymous':1:3\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1585\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1586\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1588\n      },\n      __self: this\n    }, \"We can interact with an HTML Collection as if it\\u2019s an array in many other ways. We can use index numbers to access data. It looks like an array. But it functions a bit differently. NodeList and HTMLCollection used somewhat interchangeably. They\\u2019re both DOM lists, but HTMLCollection contains DOM elements that are the same, whereas a nodeList can contain a variety of DOM elements. That\\u2019s why \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1591\n      },\n      __self: this\n    }, \"querySelectorAll\"), \" returns a nodeList but \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1591\n      },\n      __self: this\n    }, \"getElementsByTagName\"), \" returns an HTMLCollection. forEach works on a nodeList but not an HTMLCollection.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1594\n      },\n      __self: this\n    }, \"Iterate over an HTMLCollection. With for loop/ while loop.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1595\n      },\n      __self: this\n    }, \"Our HTMLCollection variable can now be iterated over like an array. If we don\\u2019t want to convert our HTMLCollection we can also use .call to use array methods:\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1598\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: traversed,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1599\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1605\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1607\n      },\n      __self: this\n    }, \"45.The difference between children and childNodes in javascript\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1608\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1609\n      },\n      __self: this\n    }, \"childNodes:\"), \" It is a standard property that returns a collection of child elements of the specified element, including HTML nodes, all properties, and text nodes.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1610\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1611\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1612\n      },\n      __self: this\n    }, \"children:\"), \" A non-standard property that returns a collection of child elements of the specified element. But it only returns HTML nodes, not even text nodes. Although it is not a standard DOM property.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1614\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: childNodes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1615\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1621\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1623\n      },\n      __self: this\n    }, \"46.What is the difference between firstChild and firstElementChild?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1624\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1625\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1625\n      },\n      __self: this\n    }, \"firstChild: \"), \"considers text entered in between html tags as a child element too in addition to html tags.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1626\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1627\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1627\n      },\n      __self: this\n    }, \"firstElementChild: \"), \"ignores text and comments between html tags and only considers html elements as a child.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1629\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1631\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: firstElementChild,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1632\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1638\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1640\n      },\n      __self: this\n    }, \"47.Name the two functions that are used to create an HTML element dynamically.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1641\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1642\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1642\n      },\n      __self: this\n    }, \"document.createElement: \"), \"is used with an HTML tag to create the element. The textContent is then modified and then the class attribute is modified using setAttribute . This could also be used to add a data attribute. Finally the element is appended to the body using the body element's appendChild method.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1645\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1645\n      },\n      __self: this\n    }, \"createElement() method: \"), \"Can create and insert HTML elements at runtime.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1647\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1648\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: dynamically,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1649\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1655\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1657\n      },\n      __self: this\n    }, \"48.What is the difference between remove() and removeChild()\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1658\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1659\n      },\n      __self: this\n    }, \"The removeChild and remove are methods to work with elements of DOM, these method removes the element from the DOM.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1660\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1660\n      },\n      __self: this\n    }, \"removeChild(): \"), \"Remove the node, and can save it to use it again.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1661\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1661\n      },\n      __self: this\n    }, \"remove(): \"), \"Really remove the child.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1663\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1664\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: removeChild,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1665\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(IntroJs);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/javaScripts/deepJs/introJs.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","dataTypes","trim","undeclaredVar","varConst","Temporal","evals","forIn","forEach","continues","nonLabeledBlock","conditions","jsonsObj","iifes","currying","generator","iterable","yields","stricts","functions","memorizations","management","circular","eventLoop","window","stack","messages","security","proxies","features","exportsing","loading","listeners","Bubblings","stopPropagation","debouncing","execution","textContent","HTMLCollection","NodeList","traversed","childNodes","firstElementChild","dynamically","removeChild","IntroJs","componentDidMount","setTimeout","highlightAll","render","classes","props","EventLoop"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport EventLoop from '../../../assets/imgs.svg';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 350,\n  width: 600\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst dataTypes = `\nvar x1 = 34.00;                                                                     //34\nvar x2 = 35;                                                                        //35\nlet num = 1.0023;                                                                   //1.0023\nlet str = \"He was 40\";\n                                                                     \n  let resultNum = parseInt(num);                                                    //Convert decimal to number.\n  let resultNum = parseInt(str);                                                    //NaN\n`.trim();\n\n\nconst undeclaredVar = `\nvar a\nconsole.log('Undefined variables', a)\nconsole.log('Undeclared variables', b)`.trim();\n\n\nconst varConst = `\nvar obj = Object.freeze({ name: 'Mukesh' });\nobj.name = 'Rakesh';\n\nconst obj2 = { name: 'Mukesh' }\nobj2.name = 'Rakesh'\n\nconsole.log(obj.name);                                                              //Mukesh\nconsole.log(obj2.name);                                                             //Rakesh\n`.trim();\n\nconst Temporal = ` \nvar foo = 'first';\nfunction main() {\n  console.log(foo);                                                                 //undefined\n  var foo = 'second';\n}\n\n\nlet foo = 'first';\nfunction main() {\n  console.log(foo);                                                                 //ReferenceError\n  let foo = 'second';\n}\n\nmain()\n`.trim();\n\nconst evals = `\nfunction foo(str, a) {\n  eval(str);                                                          // cheating!\n  console.log(a, b);\n}\n\nvar b = 2;\nfoo(\"var b = 3;\", 1);                                                 // 1 3\n`.trim()\n\nconst forIn = `\nconst object = { a: 1, b: 2, c: 3 };\n\nfor (const property in object) {\n  console.log('$'{property}: '$'{object[property]});\n}`.trim();\n\nconst forEach = `\nvar arr = [\"C\", \"C++\", \"Python\"];\narr.forEach(val => console.log(val))\n`.trim()\n\nconst continues = `\nfunction continueFun() {\n  foo: for (var i = 0; i < 4; i++) {\n    for (var j = 0; j < 4; j++) {\n      if (i == j) {\n        console.log(\"continue\", i, j);\n        continue foo;\n      }\n\n      if ((j * i) % 2 == 1) {\n        continue;\n      }\n\n      if ((i * j) >= 3) {\n        console.log(\"break\", i, j);\n        break foo;\n      }\n    }\n  }\n}\n\ncontinueFun()\n`.trim();\n\nconst nonLabeledBlock = `function nonLabeledBlock(){\n  bar: {\n    console.log('hello');\n    break bar;\n    console.log('never runs');\n}\nconsole.log('welcome');\n}`.trim();\n\n\nconst conditions = `\nvar arr = [];\nvar result = [];\n\nresult = arr > 10 ? 'Good' : 'Average'\nconsole.log('ternary', result)\n\n\n//2\ntoCelsius(40)\n\nfunction toCelsius(f) {\n  return console.log((5 / 9) * (f - 32));\n}\n\n\n//3. Template Literals\nconsole.log('string text line 1 \nstring text line 2');\n`.trim();\n\nconst jsonsObj = `\nvar a = prompt('please enter first number');\nvar b = prompt('please enter second number');\nvar sum = a + b\n\ndocument.write(\"Sum is\",sum)`.trim();\n\n\nconst iifes = `\n//1\n(function IIFE_initGame() {                             // Private variables that no one has access to outside this IIFE.\n    var lives;\n    var weapons;\n\n  init();\n\n  \n  function init() {                                     // Private function that no one has access to outside this IIFE.\n    lives = 5;\n    weapons = 10;\n  }\n}());\n\n\n\n//2 We add two functions on the object that we return from the IIFE.\n  var Sequence = (function sequenceIIFE() {\n    var current = 0;                                      //Private variable to store current counter value.\n    \n    return {                                              //Object that's returned from the IIFE.\n      getCurrentValue: function() {\n      return current;\n    },\n\n    getNextValue: function() {\n      current = current + 1;\n      return current;\n    }\n  };\n}());\n\nconsole.log(Sequence.getNextValue());                                     // 1\nconsole.log(Sequence.getNextValue());                                     // 2\nconsole.log(Sequence.getCurrentValue());                                  // 2\n`.trim();\n\n\nconst currying = `\nvar prism = l => w => h => l * w * h;\nconsole.log(prism(2)(3)(5))\n\n\n//2\n(function (message) {\n  alert(message);\n}(\"Hello World!\"));\n\n\n//3\nconst sum2 = function(a){\n  return function(b){\n    if(b){\n      return sum2(a+b);\n    }\n    return a;\n  }\n}\n\nconsole.log(sum2(1)(2)(3)(5)());\n`.trim();\n\nconst generator = `\n  function* generator_function() {\n      yield 1;\n      yield 2;\n    }\n    \n   let generator = generator_function();\n   \n   console.log(generator.next().value);\n   console.log(generator.return(22).value);\n   console.log(generator.next().value);\n   \n   generator = generator_function();\n   let iterable = generator[Symbol.iterator]();\n   \n   console.log(iterable.next().value);\n   console.log(iterable.next().done);\n `.trim()\n\nconst iterable = `\nlet obj = { array: [1, 2, 3, 4, 5],\n    nextIndex: 0,\n    [Symbol.iterator]:\n    \n  function(){\n  return {\n    array: this.array,\n    nextIndex: this.nextIndex,\n    next: function(){\n        return this.nextIndex < this.array.length ?\n        {value: this.array[this.nextIndex++], done: false} :\n        {done: true};\n      }}}\n    };\n    \n let iterable = obj[Symbol.iterator]()\n console.log(iterable.next().value);\n console.log(iterable.next().value);`.trim()\n\n\nconst yields = `\nfunction* generator_function_1(){\n  yield 2;\n  yield 3;\n}\n\nfunction* generator_function_2() {\n   yield 1;\n   yield* generator_function_1();\n   yield* [4, 5];\n }\n\nvar generator = generator_function_2();\nconsole.log(generator.next().value);\nconsole.log(generator.next().value);`.trim()\n\nconst stricts = `\n//Throw error\n\"use strict\"\nx=3;\nconsole.log(x);\n\n\n//3\n'use strict';\ndelete Object.prototype;                                                                    // throws a TypeError.\n\n\n//4\n'use strict';\nvar o = { p: 1, p: 2 };                                                                     // syntax error.\n\n\n//5\nfunction sum(a, a, c) {                                                                     // syntax error.\n  'use strict';\n  return a + a + c;                                                                         // wrong if this code ran.\n}\n`.trim();\n\nconst functions = `\nfunction strict() {                                                                  // Function-level strict mode syntax.\n  'use strict';\n  function nested() { return 'And so am I!'; }\n  return console.log(\"Strict mode function!  \" + nested());\n}\n\nfunction notStrict() { return console.log(\"Not strict.\"); }\n\nstrict();\nnotStrict();`.trim();\n\nconst memorizations = `\nconst memoizedAdd = () => {\n  let cache = {};\n  return (value) => {\n      if (value in cache) {\n          console.log('Fetching from cache');\n          return cache[value];\n      } else {\n          console.log('Calculating result');\n          let result = value + 10;\n          cache[value] = result;\n          return result;\n      }\n  }\n}\nconst main = memoizedAdd();\nconsole.log(main(9));                                                             //output: 19 calculated.\nconsole.log(main(9));                                                             //output: 19 cached.\n`.trim();\n\nconst management = `\nvar x = { a: { b: 2 } };\n\nvar y = x;                                                          \nx = 1;                                      \n\nvar z = y.a;                                 \ny = 'mozilla';                               \nz = null;                                    \n`.trim();\n\nconst circular = `\nfunction f() {\n  var x = {};\n  var y = {};\n  x.a = y;                                                                              // x references y.\n  y.a = x;                                                                              // y references x.\n\n  return 'azerty';\n}\nf();\n`.trim();\n\nconst eventLoop = `var eventLoop =[];\n var event;\n while(true){\n    if (eventLoop.length > 0) {\n      event = eventLoop.shift();\n        try {\n        event();\n        }\n      catch (err){\n      reportError(err);\n      }\n    }\n  }\n `.trim();\n\nconst window = `\n  var a = 2;\n  \n  (function IIFE(def) {\n     def(window);\n  })(function def(global) {\n     var a = 3;\n     console.log(a);                                                                              // 3\n     console.log(global.a);                                                                       // 2\n  });\n`.trim();\n\nconst stack = `\nfunction foo(b) {\n  let a = 10\n  return a + b + 11\n}\n\nfunction bar(x) {\n  let y = 3\n  return foo(x * y)\n}\n\nconsole.log(bar(7))`.trim();\n\nconst messages = `\nconst s = new Date().getSeconds();\n\nsetTimeout(function() {\n  console.log(\"Ran after \" + (new Date().getSeconds() - s) + \" seconds\");\n}, 500)\n\nwhile (true) {\n  if (new Date().getSeconds() - s >= 2) {\n    console.log(\"Good, looped for 2 seconds\")\n    break;\n  }\n}`.trim();\n\nconst security = `\n//async\n<script async src=\"js/script2.js\"></script>\n<script async src=\"js/script3.js\"></script>\n\n\n//defer\n<script defer src=\"js/script2.js\"></script>\n<script defer src=\"js/script3.js\"></script>\n`.trim();\n\nconst proxies = `\nlet handler = {\n  get: function(target, name) {\n    return name in target? target[name] : 42\n  }\n}\n\nlet p = new Proxy({}, handler)\np.a = 1\nconsole.log(p.a, p.b) `.trim();\n\nconst features = `import * as Module from './modules/module.js';`.trim();\n\nconst exportsing = `export { name, draw, reportArea, reportPerimeter };`.trim();\n\nconst loading = `\nimport('/index.js')\n  .then((module) => {\n    // Do something with the module.\n  });\n`.trim();\n\nconst listeners = `\n\n<button id=\"clickMe\">Click me</button>\n\n//1\ndocument.getElementById(\"clickMe\")\n.addEventListener(\"click\", () => {\n  console.log('button clicked')\n});\n\n\n//2 Couser With Event Listeners\nfunction attachedEventListeners(){\n  let count = 0;\ndocument.getElementById(\"clickMe\")\n.addEventListener(\"click\", () => {\n  console.log('button clicked', count++)\n  });\n}\n\nattachedEventListeners();`.trim();\n\nconst Bubblings = `\n<style>\ndiv {\n  min-width:100px;\n  min-height: 100px;\n  padding: 30px;\n  border: 1px solid black;\n}\n</style>\n</head>\n<body>\n<div id=\"grandParrent\">\n  <div id=\"parent\">\n    <div id=\"child\">\n    </div>\n  </div>\n</div>\n<script src=\"input.js\"></script>\n</body> \n\n\n---------------------------------------------js-------------------\n\ndocument.querySelector('#grandParrent')\n  .addEventListener('click', ()=> {\n    console.log('GrandParent Clicked')                                    // Event Bubbling\n  }, false);                                                              //If don't pass 3rd argument it default false.\n                                                                                \n  \n  document.querySelector('#parent')\n  .addEventListener('click', (e)=> {\n    console.log('parent Clicked')\n    e.stopPropagation();                                                        //Stop Bubbling/Capturing\n  },false);                                                                     // Event Bubbling\n  \n  document.querySelector('#child')\n  .addEventListener('click', ()=> {\n    console.log('child Clicked')\n  },true);                                                                      // Event Capturing\n  `.trim();\n\n\nconst stopPropagation = `\nvar div = document.querySelector(\"div\");\nvar section = document.querySelector(\"section\");\nvar button = document.querySelector(\"button\");\n\ndiv.addEventListener(\"click\", () => {\n\tconsole.log('div')\n}, true)\n\ndiv.addEventListener(\"click\", () => {\n\tconsole.log('section')\n}, true)\n\ndiv.addEventListener(\"click\", (event) => {\n\tevent.stopPropagation();\n\tconsole.log('button')\n}, true)`.trim();\n\n\nconst debouncing = `\n<input typt=\"text\" onkeyup=\"betterDebouncing()\" />\n\n\n---------------------------------------------js-------------------\n\nlet counter = 0\nconst getData = () => {\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n            .then(res => res.json()) \n            .then(responseData => {\n                console.log('dddd',responseData,\"---\",counter++);\n            });\n}\n\nconst debounced = function (fn ,d){\n  let timer;\n  return function(){\n    let context = this,\n    args = arguments;\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      getData.apply(context, args)\n    }, d)\n  }\n}\n\nconst betterDebouncing = debounced(getData, 300);\n`.trim();\n\nconst execution = `\nfunction foo() { }                                                             // function statement.\n\n\nvar foo = function() { }                                                       // function expression.\n`.trim();\n\nconst textContent = `\n<body> \n<h3>Differences between innerText & textContent.</h3> \n<p id=\"demo\"> This element has extra\t spacing and contains \n<span>a span element</span>.</p> \n\n<button onclick=\"getInnerText()\">Get innerText</button> \n<button onclick=\"getTextContent()\">Get textContent</button> \n\n<p id=\"demo\"></p> \n<script> \n\tfunction getInnerText() { \n\talert(document.getElementById(\"demo\").innerText) \n\t} \n\n\tfunction getTextContent() { \n\talert(document.getElementById(\"demo\").textContent) \n\t} \n</script> \n</body> \n`.trim();\n\nconst HTMLCollection = `\nconst fruits = document.getElementsByClassName(‘fruits’);\nfruits.item(0).classList.add(‘fruit__01’)`.trim();\n\nconst NodeList = `\n const fruits = document.querySelectorAll(‘.fruits’);                           // returns static collection.\n\n const fruits = document.querySelector(‘.fruits’);                              // returns live collection.\n const childFruit = fruits.childNodes;`.trim();\n\nconst traversed = `\nArray.proptotype.map.call(p, tag => {\n  console.log(tag.innerText)\n})`.trim();\n\nconst childNodes = `\n<script type='text/javascript'>\n$(window).load(function(){\n    console.log(document.getElementById('dd').children.length);\n    console.log(document.getElementById('dd').childNodes.length);\n});\n</script>\n</head>\n<body>\n  <div id=\"dd\">\n    <p>Test paragraph.</p>\n    <div>\n      <p>Test paragraph 2.</p>\n    </div>\n    Text.\n  </div>\n</body>`.trim();\n\nconst firstElementChild = `\n<ul id=\"list\"><!-- a list item -->\n<li>Item1</li>\n<li>Item2</li>\n</ul>\n\n\n//js\n  var list = document.getElementById(\"list\");\n   \n  console.log(\"First child value is\",list.firstChild);\n   \n  console.log(\"First element child value is\",list.firstElementChild);\n`.trim();\n\nconst dynamically = `\n<body>\n    <button onclick=\"create()\">Create Heading</button>\n    <script>\n      function create() {\n        var h1 = document.createElement('h1');\n        h1.textContent = \"New Heading!!!\";\n        h1.setAttribute('class', 'note');\n        document.body.appendChild(h1);\n      }\n    </script>\n  </body>`.trim();\n\nconst removeChild = `\n//RemoveChild.\nlet p = document.querySelector( 'p' )\nlet removed = p.removeChild( p.firstChild )\nconsole.log( removed )                                                      //<i>Hi</i>\n\n\n//Remove\nlet p = document.querySelector( 'p' )\nlet removed = p.childNodes[0].remove()\nconsole.log( removed )                                                      // undefined\n`.trim();\n\n\nclass IntroJs extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. What are JavaScript Data Types?</h3>\n              <i>In JavaScript null is <b>nothing</b>. It is supposed to be something that\n                <b> doesn't exist</b>. In JavaScript, the data type of null is an <b>object</b>.</i>\n              <br />\n              <ol>\n                <li>Number</li>\n                <li>String</li>\n                <li>Boolean</li>\n                <li>Object</li>\n                <li>Undefined</li>\n                <li>Null</li>\n              </ol>\n              <br />\n              Numbers can be written with, or without <b>decimals</b>.\n\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={dataTypes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. What are undeclared and undefined variables?</h3>\n              <i>\n                <ul>\n                  <li><b>Undeclared variables: </b> Are those that do not exist in a program and are not declared. If the program\n                    tries to read the value of an undeclared variable, then a runtime error is encountered.</li>\n                  <li><b>Undefined variables: </b> are those that are declared in the program but have not been given any value.\n                    If the program tries to read the value of an undefined variable, an undefined value is returned.</li>\n                </ul>\n              </i>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={undeclaredVar}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3.difference between Object.freeze() vs const</h3>\n              <b>const</b> and <b>Object.freeze</b> are two completely different things.\n              <br />\n              <br />\n              <i>\n                <ul>\n                  <li>const applies to bindings <b>variables</b>.\n                    It creates an immutable binding.</li>\n                  <li>Object.freeze works on values. It makes an object immutable, i.e. cannot change its properties.</li>\n                </ul>\n              </i>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={varConst}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>4. What is the Temporal Dead Zone(TDZ) in ES6.</b>\n              <br />\n              <p>let and const are hoisted, but there is a period between entering scope and being declared\n                where they cannot be accessed. This period is the TDZ.</p>\n              <i>\n                There is a misconception that says let/ const are not hoisted in JavaScript. According to ES6 specification, The variables are\n                created when their containing Lexical Environment is instantiated but may not be accessed in any way until the variable’s LexicalBinding\n                is evaluated.\n              </i>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={Temporal}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>The variable is in a \"temporal dead zone\" from the start of the block until the initialization is processed.</i>\n              <br />\n\n              <h3>5. What is JSON Web Token?</h3>\n              <p>\n                Is a open standard(RFC) that securely transmitting information between parties as a JSON object. This information can be\n                verifed and trusted because it is a digitally signed. JWTs can be signed using a secret or a public/ private key pair using RSA.\n              </p>\n              <b>When should you use JSON Web Token? </b>\n              <ul>\n                <li>Authentication is the most scenario for using JWT. Once the user is logged in, each\n                  subsequent resquest will include the JWT.</li>\n                <li>Information exchange, JWT is a good way of securely transmitting information between parties.</li>\n              </ul>\n              <br />\n\n              <b>What is the JSON Web Token structure?</b>\n              JSON Web Tokens consist of three parts separated by dots (.), which are:\n              <ul>\n                <li>Header</li>\n                <li>Payload</li>\n                <li>Signature</li>\n              </ul>\n              <br />\n              Therefore, a JWT typically looks like.\n              <br />\n              <b>xxxxx.yyyyy.zzzzz</b>\n              <br />\n\n              <h3>6. Eval</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={evals}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7. For...In</h3>\n              <ul>\n                <li>A for...in loop will not find any property on the array.</li>\n                <li>A for...in loop only iterates over enumerable, non-Symbol properties. Objects created from\n                  built–in constructors like Array and Object have inherited non–enumerable properties from\n                  Object.prototype and String.prototype, such as String's indexOf() method or Object's toString()\n                  method. The loop will iterate over all enumerable properties of the object itself and those the\n                  object inherits from its prototype chain.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={forIn}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>8. Enumerable</h3>\n              An enumerable property in JavaScript means that a property can be viewed if it is iterated using the for…in loop or\n              Object.keys() method. All the properties which are created by simple assignment or property initializer are\n              enumerable by default.\n              <br />\n\n              <h3>9. forEach():</h3>\n              <ul>\n                <li>The function passed to forEach is executed once for every item in the array, with the array item\n                  passed as the argument to the function.\n                </li>\n                <li><b>Note:</b> Elements of an array that are omitted when the array is defined are not listed when iterating by\n                  forEach, but are listed when undefined has been manually assigned to the element.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={forEach}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>10. continue and break</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={continues}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>11. non-labeled block</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={nonLabeledBlock}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>12. Ternary Conditions</h3>\n              Accessing a function without () will return the function object instead of the function result.\n              <div style={titles}>\n                <PrismCode\n                  code={conditions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>13. Prompt</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={jsonsObj}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>14. IIFE</h3>\n              The function on the right-hand side of the assignment operator is often called a “function expression”.\n              <ul>\n                <li>Any variables declared inside the IIFE are not visible to the outside world.</li>\n                <li>\n                  When creating a bunch of variables and functions in global scope that no one uses outside your\n                  code, just wrap all of that in an IIFE.\n                </li>\n                <li>IIFE return a value that can be assigned to a variable.</li>\n                <li>\n                  Parentheses around the function expression basically force the function to become an expression\n                  instead of a statement.\n                </li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={iifes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>\n                <ul>\n                  <li>Since current variable is private to the IIFE, no one but the functions that have access to it through closure can\n                    modify or access the current variable.</li>\n                </ul>\n              </i>\n              <br />\n\n              <h3>15. Curry</h3>\n              Curring is a process in functional programming in which we can transform a function with multiple\n              arguments into a sequence of nesting functions. It returns a new function that expects the next\n              argument inline.\n              <div style={titles}>\n                <PrismCode\n                  code={currying}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>16. Generator</h3>\n              <ul>\n                <li>Generators are functions which can be exited and later re-entered. Their context (variable bindings)\n                  will be saved across re-entrances.\n                </li>\n                <li>Generator functions are written using the function* syntax.</li>\n                <li>When called initially, generator functions do not execute any of their code, instead returning\n                  a type of iterator called a Generator.\n                </li>\n                <li>When a value is consumed by calling the generator's next method, the Generator function executes\n                  until it encounters the yield keyword.\n                </li>\n              </ul>\n              <br />\n              <b>When should we use generators:</b>\n              <br />\n              To put it simple, generator has two features:\n              <ul>\n                <li>1.one can choose to jump out of a function and let outer code to determine when to jump back into\n                  the function.\n                </li>\n                <li>2.the control of asynchronous call can be done outside of your code\n                  The most important feature in generators—we can get the next value in only when we really need\n                  it, not all the values at once. And in some situations it can be very convenient.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={generator}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>17. Iterable</b>\n              <br />\n              Any object that implements the iterable protocol is known as an iterable.\n              <div style={titles}>\n                <PrismCode\n                  code={iterable}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>18. Yield</b>\n              <div style={titles}>\n                <PrismCode\n                  code={yields}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>19. Strict mode</h3>\n              <ul>\n                <li>Makes debugging easier. Code errors that have been ignored/ failed\n                  silently now generate errors or throw exceptions.</li>\n                <li>Prevents accidental globals. Without strict mode, assigning a value to an undeclared variable automatically creates a global\n                  variable with that name. In strict mode, attempting to do so throws an error.</li>\n                <li>Eliminates this coercion. Without strict mode, a reference to a this value of null/ undefined is automatically coerced to the global.</li>\n                <li>Fixes mistakes that make it difficult for JavaScript engines to perform optimizations. strict mode code can\n                  sometimes be made to run faster than identical code that's not strict mode.</li>\n              </ul>\n              <br />\n\n              <b>Converting mistakes into errors</b>\n              <ul>\n                <li>Strict mode makes it impossible to accidentally create global variables.</li>\n                <li>In normal code assigning to NaN does nothing, no receives failure feedback. In strict mode\n                  assigning to NaN throws an exception.</li>\n                <li>all properties named in an object literal be unique. The normal code may duplicate property\n                  names, with the last one determining the property's value. Duplicate property names are a syntax\n                  error in strict mode:</li>\n                <li>strict mode requires that function parameter names be unique.</li>\n                <li>Primitive values. Without strict mode, setting properties is ignored, with strict mode,\n                  however, a TypeError is thrown.</li>\n              </ul>\n              <br />\n\n              <b>Invoking strict mode</b>\n              <br />\n              Strict mode applies to entire scripts or to individual functions. It doesn't apply to block statements enclosed\n              in { } braces.\n              <br />\n              <br />\n\n              <b>Strict mode for scripts</b>\n              <div style={titles}>\n                <PrismCode\n                  code={stricts}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Strict mode for functions</b>\n              <div style={titles}>\n                <PrismCode\n                  code={functions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>20. Memoization</h3>\n              <p>\n                Memoization is a programming technique that attempts to increase a function’s performance by caching\n                its previously computed results. Because JavaScript objects behave like associative arrays, they are\n                ideal candidates to act as caches. Each time a memoized function is called, its parameters are used to\n                index the cache. If the data is present, then it can be returned, without executing the entire function.\n                However, if the data is not cached, then the function is executed, and the result is added to the cache.\n              </p>\n              <div style={titles}>\n                <PrismCode\n                  code={memorizations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>21. Memory Management</h3>\n              <ul>\n                <li>JavaScript will automatically allocate memory when values are initially declared.</li>\n                <li>The purpose of a garbage collector is to monitor memory allocation and determine when a\n                  block of allocated memory is no longer needed and reclaim it. </li>\n                <li>A JavaScript object has a reference to its prototype (implicit reference) and to its\n                  properties values (explicit reference).</li>\n              </ul>\n              <h3>Reference-counting garbage collection</h3>\n              <ul>\n                <li>This algorithm reduces the problem from determining whether or not an object is still needed to determining if an\n                  object still has any other objects referencing it. An object is said to be \"garbage\", if there are\n                  zero references pointing to it.</li>\n                <li><i>2 objects are created. One is referenced by the other as one of its properties.\n                  The other is referenced by virtue of being assigned to the 'x' variable.\n                  Obviously, none can be garbage-collected.</i></li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={management}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>22. Limitation: Circular references</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={circular}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>23. Mark-and-sweep algorithm</h3>\n              This algorithm reduces the definition of \"an object is no longer needed\" to \"an object is unreachable\".\n              <br />\n              <br />\n              The root is the global object. Periodically, the garbage collector will start from these roots, find all objects\n              that are referenced from these roots, then all objects referenced from these, etc. Starting from the roots, the\n              garbage collector will thus find all reachable objects and collect all non-reachable objects.\n              <br />\n\n              <h3>25.window</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={window}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>26.Event loop</h3>\n              Browser have a mechanism in\tthem that handles executing multiple chunks\tof program\tover\n              time, at each moment invoking\tthe\tJS engine, called the \"event loop.\"\n              <br />\n              <br />\n              <b>Scheduled \"events\"\t:</b>\n              The\tbrowser\tis then\tset\tup to listen for the response from the network, and\twhen it\thas\n              something to give you, it schedules the callback function to be, executed by inserting it into\n              the event loop.\n              <br />\n              <br />\n              Now chunk runs right away, as soon as you execute your program. But setTimeout(..) also\n              sets up an event to happen later(1000 ms).\n              <br />\n              EventLoop is an array that acts as a queue (first-in, first-out).\n              <div style={titles}>\n                <PrismCode\n                  code={eventLoop}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>27. Concurrency model and the event loop</h3>\n              JavaScript has a concurrency model based on an event loop, which is responsible for executing the code, collecting\n              and processing events, and executing queued sub-tasks.\n              <br />\n              <br />\n              <img src={EventLoop} alt=\"\" className=\"responsive\" style={redesign} />\n              <br />\n              <br />\n\n              <h3>28. Stack</h3>\n              Function calls form a stack of frames.\n              <div style={titles}>\n                <PrismCode\n                  code={stack}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              When calling bar, a first frame is created containing bar's arguments and local variables. When bar calls foo, a\n              second frame is created and pushed on top of the first one containing foo's arguments and local variables. When foo\n              returns, the top frame element is popped out of the stack (leaving only bar). When bar returns, the\n              stack is empty.\n              <br />\n\n              <h3>29. Heap</h3>\n              Objects are allocated in a heap which is just a name to denote a large (mostly unstructured) region of memory.\n              <h3>Queue</h3>\n              <ul>\n                <li>At some point during the event loop, the runtime starts handling the messages on the queue, starting with the oldest\n                  one. To do so, the message is removed from the queue and its corresponding function is called with the message as an\n                  input parameter. As always, calling a function creates a new stack frame for that function's use.</li>\n                <li>The processing of functions continues until the stack is once again empty. Then, the event loop will process the next\n                  message in the queue (if there is one).</li>\n              </ul>\n              <br />\n\n              <h3>30. Run-to-completion</h3>\n              <ul>\n                <li>Each message is processed completely before any other message is processed.</li>\n                <li>If a function runs in a thread, it may be stopped at any point by the runtime system to run some other code in\n                  another thread.</li>\n                <li>A downside of this model is that if a message takes too long to complete, the web application is unable to process\n                  user interactions like click/ scroll. The browser mitigates this with the \"a script is taking too long to run\"\n                  dialog. A good practice to follow is to make message processing short and if possible cut down one message into\n                  several messages.</li>\n              </ul>\n              <br />\n              <br />\n\n              <b>Adding messages</b>\n              In web browsers, messages are added anytime an event occurs and there is an event listener attached to it. If there\n              is no listener, the event is lost. So a click on an element with a click event handler will add a message.\n              <br />\n              <br />\n              The function setTimeout is called with 2 arguments. a message to add to the queue, and a time value (defaults 0).\n              The time value represents the (minimum) delay after which the message will actually be pushed into the queue. If\n              there is no other message in the queue, and the stack is empty, the message is processed right after the delay.\n              However, if there are messages, the setTimeout message will have to wait for other messages to be processed. For this\n              reason, the second argument indicates a minimum time—not a guaranteed time.\n\n              <div style={titles}>\n                <PrismCode\n                  code={messages}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>31. Zero delays</h3>\n              <ul>\n                <li>Zero delay doesn't actually mean the call back will fire-off after zero milliseconds. Calling setTimeout with a delay\n                  of 0 milliseconds doesn't execute the callback function after the given interval.</li>\n                <li>The execution depends on the number of waiting tasks in the queue.</li>\n                <li>Basically, the setTimeout needs to wait for all the code for queued messages to complete even though you specified a\n                  particular time limit for your setTimeout.</li>\n              </ul>\n              <br />\n\n              <h3>32.Browser security</h3>\n              Each browser tab has its own separate bucket for running code (called execution environments) - this means that in most cases\n              the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on\n              another website.\n              <br />\n              <br />\n              <b>Interpreted versus compiled code:</b>\n              <br />\n              <ul>\n                <li>In interpreted languages, the code is run from top to bottom and the result of running the code\n                  is immediately returned. You don't have to transform the code into a different form before the\n                  browser runs it. The code is received in its programmer-friendly text form and processed directly\n                  from that.\n                </li>\n                <li>Compiled languages on the other hand are transformed (compiled) into another form before they are\n                  run by the computer. For example, C/C++ are compiled into machine code that is then run by the\n                  computer. The program is executed from a binary format, which was generated from the original\n                  program source code.\n                </li>\n              </ul>\n              <br />\n\n              <h3>33. Server-side versus client-side code</h3>\n              <ul>\n                <li>Client-side code is code that is run on the user's computer — when a web page is viewed, the\n                  page's client-side code is downloaded, then run and displayed by the browser.\n                </li>\n                <li>Server-side code on the other hand is run on the server, then its results are downloaded and\n                  displayed in the browser.\n                </li>\n                <li>A web page with no dynamically updating content is referred to as static — it just shows the\n                  same content all the time.\n                </li>\n              </ul>\n              <br />\n\n              <h3>34. async and defer</h3>\n              Two modern features we can use to bypass the problem of the blocking script — async and defer.\n              <br />\n              <br />\n              <ul>\n                <li>Scripts loaded using the \"async\" attribute will download the script without blocking rendering the page and will execute it as soon\n                  as the script finishes downloading.</li>\n                <li>No guarantee that scripts will run in any specific order, only that they will not stop the rest of the page from displaying.</li>\n                <li>It is best to use async when the scripts in the page run independently from each other and depend on no other script on the page.</li>\n                <li>async should be used when we have a bunch of background scripts to load in, and we just want to get them in place as soon as possible.</li>\n              </ul>\n              <br />\n              <br />\n\n              <ul>\n                <li>Scripts loaded using the \"defer\" attribute will run in the order they appear in the page and execute them as soon as the script\n                  and content are downloaded.</li>\n                <li>All the scripts with the defer attribute will load in the order they appear on the page.</li>\n                <li>They won't run until the page content has all loaded, which is useful if our scripts depend on\n                  the DOM being in place.\n                </li>\n              </ul>\n              <br />\n              <br />\n\n              <ul>\n                <li>1. async and defer both instruct the browser to download the scripts in a separate thread,\n                  while the rest of the page is downloading, so the page loading is not blocked by the scripts.\n                </li>\n                <li>2. If our scripts should be run immediately and they don't have any dependencies, then use async.</li>\n              </ul>\n              <br />\n              <br />\n\n              If your scripts need to wait for parsing and depend on other scripts and/or the DOM being in place, load them using defer.\n\n              <div style={titles}>\n                <PrismCode\n                  code={security}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>35. Proxies</h3>\n              Proxy objects allow you to intercept certain operations and to implement custom behaviors.\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={proxies}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <i>The Proxy object defines a target (an empty object here) and a handler object, in which a get\n                trap is implemented. Here, an object that is proxied will not return undefined when getting\n                undefined properties, but will instead return the number 42.</i>\n              <br />\n              <br />\n              <b>The following terms are used when talking about the functionality of proxies:</b>\n              <br />\n              <ul>\n                <li><b>handler: </b>Placeholder object which contains traps.</li>\n                <li><b>traps: </b>Methods that provide property access. (This is analogous to the concept of traps in operating systems.)</li>\n                <li><b>target: </b>Object which the proxy virtualizes. It is often used as storage backend for the proxy. Invariants\n                  (semantics that remain unchanged) regarding object non-extensibility or non-configurable properties are verified\n                  against the target.</li>\n                <li><b>invariants: </b>Semantics that remain unchanged when implementing custom operations are called invariants. If we violate the\n                  invariants of a handler, a TypeError will be thrown.</li>\n              </ul>\n              <br />\n\n              <h3>36. Modules</h3>\n              <b>Differences between modules and standard scripts</b>\n              <ul>\n                <li>If we try to load the HTML file locally, will run into CORS errors due to JavaScript module security requirements.</li>\n                <li>Also might get different behavior from sections of script defined inside modules as opposed\n                  to in standard scripts. This is because modules use strict mode automatically.</li>\n                <li>Modules are only executed once, even if they have been referenced in multiple \"script\" tags.</li>\n              </ul>\n              <br />\n              <br />\n\n              <b>Default exports versus named exports</b>\n              <ul>\n                <li>Named exports are useful to export several values. During the import, one will be able to\n                  use the same name to refer to the corresponding value.</li>\n                <li>In default export, there is only a single default export per module. A default\n                  export can be a function, a class or an object. This value is to be considered\n                  as the “main” exported value.</li>\n              </ul>\n              <br />\n              <br />\n\n              <b>Creating a module object</b>\n              <br />\n              To import each module's features inside a module object. The following syntax form does that:\n              <div style={titles}>\n                <PrismCode\n                  code={features}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              This grabs all the exports available inside module.js, and makes them available as members of an object Module,\n              effectively giving it its own namespace.\n              <br />\n              <br />\n              <b>the exports are all</b>\n              <div style={titles}>\n                <PrismCode\n                  code={exportsing}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Dynamic module loading</b>\n              <br />\n              The newest part of the JavaScript modules functionality to be available in browsers is dynamic module loading.\n              This allows you to dynamically load modules only when they are needed, rather than having to load everything.\n              This has some obvious performance advantages.\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={loading}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>37.Event Listeners</h3>\n              Real interactivity on a website requires event handlers. These are code structures that listen\n              for activity in the browser, and run code in response.\n              <div style={titles}>\n                <PrismCode\n                  code={listeners}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>38.Event bubbling and Capturing</h3>\n              Event bubbling and capturing are two ways of event propagation in the HTML DOM API, when an event\n              occurs in an element inside another element, and both elements have registered a handle for that\n              event.<br />\n              <ul>\n                <li>\n                  <b>bubbling: </b>the event is first captured and handled by the innermost element and then\n                  propagated to outer elements.\n                </li>\n                <li>\n                  <b>capturing: </b>the event is first captured by the outermost element and propagated to the inner elements.\n                </li>\n                <li>\n                  Event bubbling set by default. If we pass true parameter in callback function than it became event capturing\n                </li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={Bubblings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>39.event.stopPropagation</h3>\n              event.stopPropagation and event.preventDefault, seem to be doing the same thing.\n              <ul>\n                <li><b>stopPropagation: </b>Stops the event from bubbling up the event chain.</li>\n                <li><b>preventDefault: </b>Prevents the default action the browser makes on that event.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={stopPropagation}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>40.Event Debouncing</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={debouncing}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>41.Function Express & Function Statement</h3>\n              function expressions and function statements are very similar in JavaScript, the difference is how the\n              browser loads them into the execution context.\n              <div style={titles}>\n                <PrismCode\n                  code={execution}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <p>\n                <b>function statement: </b> loads before any code is executed. This behavior of function statements is\n                called hoisting, which allows a function to be used before it is defined.\n              </p>\n              <p>\n                <b>function expression: </b>associates a value with a variable, just like any other assignment statement. function\n                expressions load only when the interpreter reaches the definition of the function.\n              </p>\n              <ul>\n                <li>Difference between Function Statement and Function Expression is the \"Hosting\".</li>\n                <li>Function Statement also called Function Declaration.</li>\n                <li>Annonninous Function Doesnt have their own Identity.</li>\n              </ul>\n              <br />\n\n              <h3>42.Difference between textContent and innerText.</h3>\n              <b>textContent: </b>\n              <ul>\n                <li>Used to set/ return the text value of the selected node and all its descendants.</li>\n                <li>While setting the textContent property, any child nodes are removed. It is replaced by a single Text node containing the specified string.</li>\n              </ul>\n              <br />\n              To set the text of node –<br />\n              <b>node.textContent = text</b>\n              <br />\n              <br />\n              To return the text of node –<br />\n              <b>node.textContent</b>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={textContent}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>innerText: </b>\n              <ul>\n                <li>This property also sets/ returns the text value of the selected node and all its descendants.</li>\n                <li>The innerText property returns the text, without spacing and the textContent property returns the text along with spacing.</li>\n              </ul>\n              <br />\n              <br />\n              <b>Other differences:</b>\n              <br />\n              <table>\n                <tr>\n                  <th>innerText</th>\n                  <th>textContent</th>\n                </tr>\n                <tr>\n                  <td>Returns the visible text contained in a node.</td>\n                  <td>Returns the full text.</td>\n                </tr>\n                <tr>\n                  <td>Much more performance-heavy, as it requires layout information to return the result.</td>\n                  <td>It is not so much performance-heavy, as it doesn’t requires layout information to return the result.</td>\n                </tr>\n                <tr>\n                  <td>Defined only for HTMLElement objects.</td>\n                  <td>Defined for all Node objects.</td>\n                </tr>\n              </table>\n              <br />\n\n              <h3>43.What is the difference between HTMLCollection and NodeList</h3>\n              The main difference between an HTMLCollection and a NodeList is that one is live and one is static. This means that when an element\n              is appended to the DOM, a live node will recognize the new element while a static node will not.\n              <br />\n              <br />\n              <b>HTMLCollection:</b>\n              <br />\n              The element methods <b>getElementsByClassName()</b> and <b>getElementsByTagName()</b> return a live HTMLCollection. It only includes the matching\n              elements (e.g. class name or tag name) and does not include text nodes, it provides only two methods <b>item</b> and <b>namedItem</b>.\n              <br />\n              <br />\n              <b>Ex. </b>All the elements with the class name of fruits is selected. The item() method is then used to access the fruit\n              at index 0 and a class name of fruit__01 is added to that element.\n\n              <div style={titles}>\n                <PrismCode\n                  code={HTMLCollection}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>NodeList: </b>\n              <br />\n              <ul>\n                <li>The element method <b>querySelectorAll()</b> returns a static NodeList. They look like arrays but are not.</li>\n                <li>NodeLists have a defined forEach method as well as a few other methods including item, entries, keys, and values.</li>\n                <li>NodeLists behave differently depending on how we access them. if we access elements using <b>childNodes</b>, the returned list\n                  is live and will update as more elements are added to the node. If it’s accessed using <b>querySelectorAll()</b>, the returned list\n                  is static and will not update if more elements are added to the node.</li>\n              </ul>\n\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={NodeList}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>44.How can an HTMLCollection be traversed?</h3>\n              <ul>\n                <li>If use .map, .filter, or .forEach on an HTML collection got this friendly error.</li>\n                <b>Ex. </b><i>Uncatch TypeError: p.forEach is not a function at 'anonymous':1:3</i>\n                <br />\n                <br />\n\n                <li>We can interact with an HTML Collection as if it’s an array in many other ways. We can use index numbers to access data. It\n                  looks like an array. But it functions a bit differently. NodeList and HTMLCollection used somewhat interchangeably. They’re\n                  both DOM lists, but HTMLCollection contains DOM elements that are the same, whereas a nodeList can contain a variety of DOM\n                  elements. That’s why <b>querySelectorAll</b> returns a nodeList but <b>getElementsByTagName</b> returns an HTMLCollection. forEach works on a\n                  nodeList but not an HTMLCollection.</li>\n\n                <li>Iterate over an HTMLCollection. With for loop/ while loop.</li>\n                <li>Our HTMLCollection variable can now be iterated over like an array. If we don’t want to convert our HTMLCollection we can also\n                  use .call to use array methods:</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={traversed}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>45.The difference between children and childNodes in javascript</h3>\n              <br />\n              <b>childNodes:</b> It is a standard property that returns a collection of child elements of the specified element, including HTML nodes, all properties, and text nodes.\n              <br />\n              <br />\n              <b>children:</b> A non-standard property that returns a collection of child elements of the specified element.\n              But it only returns HTML nodes, not even text nodes. Although it is not a standard DOM property.\n              <div style={titles}>\n                <PrismCode\n                  code={childNodes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>46.What is the difference between firstChild and firstElementChild?</h3>\n              <ul>\n                <li><b>firstChild: </b>considers text entered in between html tags as a child element too in addition to html tags.</li>\n                <br />\n                <li><b>firstElementChild: </b>ignores text and comments between html tags and only considers html elements as a child.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={firstElementChild}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>47.Name the two functions that are used to create an HTML element dynamically.</h3>\n              <ul>\n                <li><b>document.createElement: </b>is used with an HTML tag to create the element. The textContent is then modified and then the\n                  class attribute is modified using setAttribute . This could also be used to add a data attribute.\n                  Finally the element is appended to the body using the body element's appendChild method.</li>\n                <li><b>createElement() method: </b>Can create and insert HTML elements at runtime.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={dynamically}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>48.What is the difference between remove() and removeChild()</h3>\n              <ul>\n                <li>The removeChild and remove are methods to work with elements of DOM, these method removes the element from the DOM.</li>\n                <li><b>removeChild(): </b>Remove the node, and can save it to use it again.</li>\n                <li><b>remove(): </b>Really remove the child.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={removeChild}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(IntroJs));\n"]},"metadata":{},"sourceType":"module"}