{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';import Ngrx from'../../../assets/ngrx.png';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var actions=\"\\n//user-action.ts\\nimport {User} from '../models/user';\\n\\nexport const USER_LIST_REQUEST = 'user list request';\\nexport const USER_LIST_SUCCESS = 'user list success';\\nexport const USER_DELETE = 'user delete';\\nexport const USER_UPDATE = 'user update';\\nexport const USER_ADD = 'user add';\\nexport const USER_LIST_ERROR = 'user list error';\\n\\nexport class UserListRequestAction {\\n  readonly type = USER_LIST_REQUEST;\\n}\\n\\nexport class UserDeleteAction {\\n  readonly type = USER_DELETE;\\n\\n  constructor(public payload?: { id: number }) {\\n  }\\n}\\n\\nexport class UserUpdateAction {\\n  readonly type = USER_UPDATE;\\n\\n  constructor(public payload?: { data: User }) {\\n  }\\n}\\n\\nexport class UserAddAction {\\n  readonly type = USER_ADD;\\n\\n  constructor(public payload?: { data: User }) {\\n  }\\n}\\n\\nexport class UserListErrorAction {\\n  readonly type = USER_LIST_ERROR;\\n}\\n\\nexport class UserListSuccessAction {\\n  readonly type = USER_LIST_SUCCESS;\\n\\n  constructor(public payload?: { data: User[] }) {\\n  }\\n}\\n\\n\\n\\n//index.ts\\nimport {Action as NgRxAction} from '@ngrx/store';\\n\\nexport interface Action extends NgRxAction {\\n  payload?: any;\\n}\".trim();var reducers=\"\\n//user-reducer.ts\\nimport {User} from '../models/user';\\nimport {Action} from '../actions';\\nimport {USER_ADD, USER_DELETE, USER_LIST_ERROR, USER_LIST_REQUEST, USER_LIST_SUCCESS, USER_UPDATE} \\n        from '../actions/user-action';\\nimport {StoreUtility} from '../utils/store-utility';\\nimport {createSelector} from '@ngrx/store';\\n\\nexport interface UserReducerState {\\n  loading: boolean;\\n  loaded: boolean;\\n  error: boolean;\\n  entities: { [id: number]: User };\\n  ids: number[];\\n}\\n\\nconst initialState: UserReducerState = {\\n  loaded: false,\\n  loading: false,\\n  error: false,\\n  entities: {},\\n  ids: []\\n};\\n\\nexport function UserReducer(state = initialState, action: Action): UserReducerState {\\n  switch (action.type) {\\n    case USER_LIST_REQUEST: {\\n      return {...state, loading: true};\\n    }\\n    case USER_DELETE: {\\n      const id = action.payload.id;\\n      const newIds = state.ids.filter(elem => elem !== id);\\n      const newEntities = StoreUtility.removeKey(state.entities, id);\\n      return {...state, ...{entities: newEntities, ids: newIds}};\\n    }\\n    case USER_UPDATE: {\\n      const user = action.payload.data;\\n      const entity = {[user.id]: user};\\n      const updatedEntities = {...state.entities, ...entity};\\n      return {...state, ...{entities: updatedEntities}};\\n    }\\n    case USER_ADD: {\\n      const user = action.payload.data;\\n      const entity = {[user.id]: user};\\n      const newEntities = {...state.entities, ...entity};\\n      const newIds = StoreUtility.filterDuplicateIds([...state.ids, user.id]);\\n      return {...state, ...{entities: newEntities, ids: newIds}};\\n\\n    }\\n    case USER_LIST_ERROR: {\\n      return {...state, error: true, loading: false};\\n    }\\n    case USER_LIST_SUCCESS: {\\n      const users = action.payload.data;\\n      const obj = StoreUtility.normalize(users);\\n      const newEntities = {...state.entities, ...obj};\\n      const ids = users.map(user => user.id);\\n      const newIds = StoreUtility.filterDuplicateIds([...state.ids, ...ids]);\\n      return {\\n        ...state, ...{\\n          loaded: true,\\n          loading: false, error: false,\\n          entities: newEntities, ids: newIds\\n        }\\n      };\\n    }\\n    default: {\\n      return state;\\n    }\\n  }\\n}\\n\\n// selectors\\nexport const getLoading = (state: UserReducerState) => state.loading;\\nexport const getLoaded = (state: UserReducerState) => state.loaded;\\nexport const getEntities = (state: UserReducerState) => state.entities;\\nexport const getIds = (state: UserReducerState) => state.ids;\\nexport const getUsers = createSelector(getEntities,\\n  (entities) => StoreUtility.unNormalized(entities));\\nexport const getError = (state: UserReducerState) => state.error;\\n\\n\\n\\n//index.ts\\nimport * as fromUser from './user-reducer';\\nimport {ActionReducerMap, createSelector} from '@ngrx/store';\\n\\n\\nexport interface RootReducerState {\\n  users: fromUser.UserReducerState;\\n}\\n\\nexport const rootReducer: ActionReducerMap<RootReducerState> = {\\n  users: fromUser.UserReducer,\\n};\\n\\nexport const getUserState = (state: RootReducerState) => state.users;\\n\\nexport const getUserLoaded = createSelector(getUserState, fromUser.getLoaded);\\nexport const getUserLoading = createSelector(getUserState, fromUser.getLoading);\\nexport const getUserEntities = createSelector(getUserState, fromUser.getEntities);\\nexport const getUsers = createSelector(getUserState, fromUser.getUsers);\\nexport const getUserError = createSelector(getUserState, fromUser.getError);\\n\\nexport const getUserById = (state: RootReducerState, id: number) => {\\n  const entities = getUserEntities(state);\\n  return entities[id];\\n};\\n\\nexport const getPostById = (state: RootReducerState, id: number) => {\\n  const entities = getUserEntities(state);\\n  return entities[id];\\n};\".trim();var services=\"\\n//api.service.ts\\nimport {Injectable} from '@angular/core';\\nimport {HttpService} from './http.service';\\nimport {map} from 'rxjs/operators';\\nimport {User} from '../models/user';\\nimport {Observable} from 'rxjs';\\n\\n@Injectable()\\nexport class ApiService {\\n  constructor(private httpService: HttpService) {\\n  }\\n\\n  getAllUser(): Observable<User[]> {\\n    return this.httpService.get('/users')\\n      .pipe(map(data => data as User[]));\\n  }\\n\\n  getUser(id: number): Observable<User> {\\n    return this.httpService.get('/users/' + id);\\n  }\\n}\\n\\n\\n\\n//http.service.ts\\nimport {HttpClient} from '@angular/common/http';\\nimport {catchError} from 'rxjs/operators';\\nimport {Observable, throwError} from 'rxjs';\\nimport {Injectable} from '@angular/core';\\n\\n@Injectable()\\nexport class HttpService {\\n  private baseUrl = 'https://jsonplaceholder.typicode.com';\\n  AUTH_TOKEN = 'auth_token';\\n\\n  constructor(private httpClient: HttpClient) {\\n  }\\n\\n  get(url: string, params?: any): Observable<any> {\\n    const data = {params, headers: this.getAuthHeader()};\\n    return this.httpClient\\n      .get(this.baseUrl + url, data).pipe(catchError(this.errorHandler.bind(this)));\\n  }\\n\\n  private errorHandler(response: any) {\\n    const error = response.error;\\n    const keys = Object.keys(error);\\n    const key = keys[0];\\n    let message = error[key];\\n    if (response.status === 401) {\\n      \\n    }\\n    if (error[key] instanceof Array) {\\n      message = error[key][0];\\n    }\\n    if (key === 'isTrusted') {\\n      // this will occur when not connected to internet\\n    } else {\\n      message = key + ' : ' + message;\\n    }\\n    // call snackbar and show error with message\\n    return throwError({messages: message, error});\\n  }\\n\\n  private getAuthHeader(): { [header: string]: string | string[]; } {\\n    return {\\n      Authorization: 'Bearer '$'{ localStorage.getItem(this.AUTH_TOKEN)}'\\n    };\\n  }\\n}\\n\\n\\n\\n//youtube-repository.ts\\nimport {Injectable} from '@angular/core';\\nimport {Store} from '@ngrx/store';\\nimport {\\n  getUserById,\\n  getUserError,\\n  getUserLoaded,\\n  getUserLoading,\\n  getUsers,\\n  RootReducerState\\n} from '../reducers';\\nimport {combineLatest, Observable} from 'rxjs';\\nimport {\\n  UserAddAction,\\n  UserDeleteAction,\\n  UserListErrorAction,\\n  UserListRequestAction,\\n  UserListSuccessAction,\\n  UserUpdateAction\\n} from '../actions/user-action';\\nimport {ApiService} from './api.service';\\nimport {User} from '../models/user';\\nimport {take} from 'rxjs/operators';\\n\\n\\n@Injectable()\\nexport class YoutubeRepository {\\n  constructor(private store: Store<RootReducerState>, private apiService: ApiService) {\\n  }\\n\\n  getUserList(force = false): [Observable<boolean>, Observable<User[]>, Observable<boolean>] {\\n    const loading$ = this.store.select(getUserLoading);\\n    const loaded$ = this.store.select(getUserLoaded);\\n    const getUserData$ = this.store.select(getUsers);\\n    const getError$ = this.store.select(getUserError);\\n    combineLatest([loaded$, loading$]).pipe(take(1)).subscribe((data) => {\\n      if ((!data[0] && !data[1]) || force) {\\n        this.store.dispatch(new UserListRequestAction());\\n        this.apiService.getAllUser().subscribe(res => {\\n          this.store.dispatch(new UserListSuccessAction({data: res}));\\n        }, error => {\\n          this.store.dispatch(new UserListErrorAction());\\n        });\\n      }\\n    });\\n    return [loading$, getUserData$, getError$];\\n  }\\n\\n  deleteUser(id: number) {\\n    // first we will call actual delete api\\n    this.store.dispatch(new UserDeleteAction({id}));\\n  }\\n\\n  updateUser(data: User) {\\n// first send details to actual api\\n    this.store.dispatch(new UserUpdateAction({data}));\\n  }\\n\\n  addUser(data: User) {\\n    // first call api to add a user and then update it in store\\n    this.store.dispatch(new UserAddAction({data}));\\n  }\\n\\n  getUserById(id: number, force = false) {\\n    // get user from reducer if exist otherwise from api\\n    const user$ = this.store.select(state => getUserById(state, id));\\n    user$.pipe(take(1)).subscribe(res => {\\n      if (force || !res) {\\n        return this.apiService.getUser(id).subscribe(data => {\\n          this.store.dispatch(new UserAddAction({data}));\\n        });\\n      }\\n      return res;\\n    });\\n    return user$;\\n  }\\n}\".trim();var utils=\"\\n//store-utility.ts\\nexport class StoreUtility {\\n  // [{id,...},{id,..}] -> normal array\\n  // entities: {id:{}} -> normalized format\\n  static normalize(entityArray: Entity[]) {\\n    return entityArray.reduce((previousValue, currentValue) => {\\n      return {...previousValue, ...{[currentValue.id]: currentValue}};\\n    }, {});\\n  }\\n\\n  // {dsdsd:{id:dsdsd,name:\\\"dasds\\\"}}; -> entities\\n  // [{id:dsdsd,name:\\\"dasds\\\"}];\\n  static unNormalized(entities: { [id: number]: any }) {\\n    if (!entities) {\\n      return [];\\n    } else {\\n      return Object.keys(entities).map(key => entities[key]);\\n    }\\n  }\\n\\n  // [1,2,3,4,5,1];\\n  static filterDuplicateIds(ids: number[]) {\\n    return ids.filter((elem, index, self) => index === self.indexOf(elem));\\n  }\\n\\n  static removeKey(entities: { [id: number]: any }, id: any) {\\n    const newObj = {...entities};\\n    delete newObj[id];\\n    return newObj;\\n  }\\n}\\n\\ninterface Entity {\\n  id: any;\\n}\".trim();var models=\"\\n//user.ts\\nexport interface User {\\n  id: number;\\n  name: string;\\n  email: string;\\n  address: Address;\\n  username: string;\\n}\\n\\ninterface Address {\\n  street: string;\\n  suite: string;\\n  'city': string;\\n  'zipcode': string;\\n  geo: Geo;\\n}\\n\\ninterface Geo {\\n  'lat': string;\\n  'lng': string;\\n}\".trim();var containers=\"\\n//users.component.ts\\nimport {Component, OnDestroy, OnInit} from '@angular/core';\\nimport {User} from '../models/user';\\nimport {YoutubeRepository} from '../services/youtube-repository';\\nimport {takeWhile} from 'rxjs/operators';\\nimport {MatDialog} from '@angular/material/dialog';\\nimport {UpdateUserComponent} from '../components/update-user.component';\\n\\n@Component({\\n  selector: 'youtube-users',\\n  template: '\\n  < div >\\n  <youtube-user-list * ngIf=\\\"!this.loading && !this.error\\\"[users] = \\\"this.users\\\" ></youtube - user - list >\\n    <mat-spinner * ngIf=\\\"this.loading\\\" ></mat - spinner >\\n      <button * ngIf=\\\"!this.loading && !this.error\\\"(click) = \\\"addUser()\\\" > Add User</button >\\n    </div >\\n  ',\\n})\\n\\nexport class UsersComponent implements OnInit, OnDestroy {\\n  users: User[] = [];\\n  loading = false;\\n  error = false;\\n  isAlive = true;\\n\\n  constructor(private youtubeRepository: YoutubeRepository, private dialog: MatDialog) {\\n  }\\n\\n  ngOnInit() {\\n    this.fetchData();\\n  }\\n\\n  ngOnDestroy() {\\n    this.isAlive = false;\\n  }\\n\\n  fetchData() {\\n    const observer$ = this.youtubeRepository.getUserList();\\n    const userData$ = observer$[1];\\n    const loading$ = observer$[0];\\n    const error$ = observer$[2];\\n    userData$.pipe(takeWhile(() => this.isAlive)).subscribe(data => {\\n      this.users = data;\\n    });\\n    loading$.pipe(takeWhile(() => this.isAlive)).subscribe(data => {\\n      this.loading = data;\\n    });\\n    error$.pipe(takeWhile(() => this.isAlive)).subscribe(data => {\\n      this.error = data;\\n    });\\n  }\\n\\n  tryAgain() {\\n    this.youtubeRepository.getUserList(true);\\n  }\\n\\n  addUser() {\\n    this.dialog.open(UpdateUserComponent, {\\n    });\\n  }\\n}\\n\\n\\n// reducer -> it contain a state (global state)\\n// it will take an action -> it will return a new state\\n\\n// action -> it will contain a payload and a type\\n\\n// Dependency Injection Principle\\n// you should not depend on something directly\\n// component -> youtube repo -> apiService -> http Service -> http client\\n\\n\\n\\n//view-user.component.ts\\nimport {Component, OnDestroy} from '@angular/core';\\nimport {ActivatedRoute} from '@angular/router';\\nimport {YoutubeRepository} from '../services/youtube-repository';\\nimport {filter, map, switchMap, takeWhile} from 'rxjs/operators';\\nimport {User} from '../models/user';\\n\\n@Component({\\n  selector: 'youtube-view-user',\\n  template: '\\n    <h1> {{ this.user ?this.user.email: ''}}</h1>\\n    <h1>{{ this.user ? this.user.name : '' }}</h1>\\n',\\n})\\n\\nexport class ViewUserComponent implements OnDestroy {\\n  isAlive = true;\\n  user: User;\\n\\n  constructor(private route: ActivatedRoute, private youtubeRepo: YoutubeRepository) {\\n    this.fetchData();\\n  }\\n\\n  ngOnDestroy() {\\n    this.isAlive = false;\\n  }\\n\\n  fetchData() {\\n    const user$ = this.route.params.pipe(map(data => data.id),\\n      takeWhile(() => this.isAlive),\\n      switchMap((id) => {\\n        return this.youtubeRepo.getUserById(id);\\n      }), filter(res => !!res));\\n    user$.subscribe(data => {\\n      this.user = data;\\n    });\\n  }\\n}\".trim();var componentsLay=\"\\n//layout/youtube-layout.component.ts\\n@Component({\\n  selector: 'youtube-layout',\\n  template: '\\n  < button routerLink = \\\"\\\"[routerLinkActiveOptions] = \\\"{exact:true}\\\" routerLinkActive = \\\"selected\\\" > Users</button>\\n    <router-outlet></router-outlet>\\n      ',\\n    })\\n\\nexport class LayoutComponent {\\n\\n  constructor() {\\n  }\\n}\\n\\n\\n//user-list.component.ts\\n@Component({\\n  selector: 'youtube-user-list',\\n  template: '\\n  < div fxLayout = \\\"row wrap\\\" >\\n    <youtube-user-card [user] = \\\"user\\\" * ngFor=\\\"let user of users\\\" ></youtube - user - card >\\n    </div >\\n  ',\\n})\\n\\nexport class UserListComponent {\\n  @Input() users: User[];\\n  constructor() {\\n  }\\n}\\n\\n\\n//user-card.component.ts\\nimport {Component, Input} from '@angular/core';\\nimport {User} from '../models/user';\\nimport {YoutubeRepository} from '../services/youtube-repository';\\nimport {MatDialog} from '@angular/material/dialog';\\nimport {UpdateUserComponent} from './update-user.component';\\nimport {Router} from '@angular/router';\\n\\n@Component({\\n  selector: 'youtube-user-card',\\n  template: '\\n  <mat-card(click)=\\\"open()\\\" >\\n      <li>{{this.user.name}}</li>\\n      <li>{{this.user.email}}</li>\\n      <button (click) = \\\"delete()\\\" > Delete</button >\\n  <button (click) = \\\"update()\\\" > Update</button >\\n    </mat-card >\\n  ',\\n})\\n\\nexport class UserCardComponent {\\n  @Input() user: User;\\n\\n  constructor(private youtubeRepo: YoutubeRepository,\\n              private dialog: MatDialog, private router: Router) {\\n  }\\n\\n  delete() {\\n    this.youtubeRepo.deleteUser(this.user.id);\\n  }\\n\\n  update() {\\n    this.dialog.open(UpdateUserComponent, {\\n      data: this.user\\n    });\\n  }\\n\\n  open() {\\n    this.router.navigate(['user', this.user.id]);\\n  }\\n}\\n\\n\\n\\n//update-user.component.ts\\nimport {Component, Inject, OnInit} from '@angular/core';\\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\\nimport {User} from '../models/user';\\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\\nimport {YoutubeRepository} from '../services/youtube-repository';\\n\\n@Component({\\n  selector: 'youtube-update-user',\\n  template: '\\n  <form[formGroup]=\\\"userForm\\\"(ngSubmit) = \\\"this.userForm.valid && this.addOrUpdateUser()\\\" >\\n        <mat-form-field>\\n          <input formControlName=\\\"email\\\" matInput placeholder=\\\"email\\\"/>\\n          <mat-error>Valid email is Required</mat-error>\\n        </mat-form-field>\\n        <mat-form-field>\\n          <input formControlName=\\\"name\\\" matInput placeholder=\\\"username\\\"/>\\n          <mat-error>Name is Required</mat-error>\\n        </mat-form-field>\\n        <button type=\\\"submit\\\">{{this.data ? 'Update' : 'Add'}}</button>\\n    </form >\\n  ',\\n})\\n\\nexport class UpdateUserComponent implements OnInit {\\n  userForm: FormGroup;\\n\\n  constructor(private dialogRef: MatDialogRef<UpdateUserComponent>,\\n              @Inject(MAT_DIALOG_DATA) public data: User, private youtubeRepo: YoutubeRepository) {\\n  }\\n\\n  ngOnInit() {\\n    this.userForm = new FormGroup({\\n      name: new FormControl(this.data ? this.data.name : null, [Validators.required]),\\n      email: new FormControl(this.data ? this.data.email : null, [Validators.required]),\\n    });\\n  }\\n\\n\\n  addOrUpdateUser() {\\n    if (this.data) {\\n      this.updateUser();\\n    } else {\\n      this.addUser();\\n    }\\n  }\\n\\n  updateUser() {\\n    const updatedUser = {...this.data, ...this.userForm.value};\\n    this.youtubeRepo.updateUser(updatedUser);\\n    this.dialogRef.close();\\n  }\\n\\n  addUser() {\\n    this.youtubeRepo.addUser(this.userForm.value);\\n    this.dialogRef.close();\\n  }\\n}\".trim();var roots=\"\\n//app-routing.module.ts\\nimport {NgModule} from '@angular/core';\\nimport {RouterModule, Routes} from '@angular/router';\\nimport {UsersComponent} from './containers/users.component';\\nimport {ViewUserComponent} from './containers/view-user.component';\\n\\n\\nconst routes: Routes = [{\\n  path: '', component: UsersComponent,\\n  children: [\\n    {path: 'user/:id', component: ViewUserComponent},\\n  ]\\n}];\\n\\n@NgModule({\\n  imports: [RouterModule.forRoot(routes)],\\n  exports: [RouterModule]\\n})\\nexport class AppRoutingModule {}\\n\\n\\n//material.module.ts\\nimport {NgModule} from '@angular/core';\\nimport {MatToolbarModule} from '@angular/material/toolbar';\\nimport {MatButtonModule} from '@angular/material/button';\\nimport {MatCardModule} from '@angular/material/card';\\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\\nimport {MatIconModule} from '@angular/material/icon';\\nimport {MatFormFieldModule} from '@angular/material/form-field';\\nimport {MatDialogModule} from '@angular/material/dialog';\\nimport {MatInputModule} from '@angular/material/input';\\n\\nconst data = [MatToolbarModule,\\n  MatButtonModule, MatCardModule, MatProgressSpinnerModule,\\n  MatIconModule, MatFormFieldModule, MatDialogModule, MatInputModule\\n];\\n\\n@NgModule({\\n  imports: data,\\n  exports: data\\n})\\nexport class MaterialModule {}\\n\\n\\n\\n//app.component.ts\\n@Component({\\n  selector: 'youtube-root',\\n  template: '<router - outlet ></router-outlet>',\\n})\\nexport class AppComponent {\\n  constructor() {\\n  }\\n}\\n\\n// my component are dependent on api service\\n// api service -> http service\\n// http service -> http client\\n\\n\\n\\n//app.module.ts\\nimport {BrowserModule} from '@angular/platform-browser';\\nimport {NgModule} from '@angular/core';\\nimport {AppRoutingModule} from './app-routing.module';\\nimport {AppComponent} from './app.component';\\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\\nimport {FlexLayoutModule, FlexModule} from '@angular/flex-layout';\\nimport {HttpClientModule} from '@angular/common/http';\\nimport {UsersComponent} from './containers/users.component';\\nimport {LayoutComponent} from './components/layout/youtube-layout.component';\\nimport {MaterialModule} from './material.module';\\nimport {HttpService} from './services/http.service';\\nimport {ApiService} from './services/api.service';\\nimport {UserCardComponent} from './components/user-card.component';\\nimport {UserListComponent} from './components/user-list.component';\\nimport {StoreModule} from '@ngrx/store';\\nimport {rootReducer} from './reducers';\\nimport {YoutubeRepository} from './services/youtube-repository';\\nimport {StoreDevtoolsModule} from '@ngrx/store-devtools';\\nimport {environment} from '../environments/environment';\\nimport {UpdateUserComponent} from './components/update-user.component';\\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\\nimport {ViewUserComponent} from './containers/view-user.component';\\n\\n\\n@NgModule({\\n  declarations: [\\n    AppComponent,\\n    UsersComponent,\\n    LayoutComponent,\\n    UserCardComponent,\\n    UserListComponent,\\n    UpdateUserComponent,\\n    ViewUserComponent,\\n  ],\\n  imports: [\\n    BrowserModule,\\n    AppRoutingModule,\\n    BrowserAnimationsModule,\\n    MaterialModule,\\n    FlexLayoutModule,\\n    FlexModule,\\n    HttpClientModule,\\n    StoreModule.forRoot(rootReducer),\\n    StoreDevtoolsModule.instrument({maxAge: 25, logOnly: environment.production}),\\n    ReactiveFormsModule,\\n    FormsModule,\\n  ],\\n  providers: [HttpService, ApiService, YoutubeRepository],\\n  bootstrap: [AppComponent]\\n})\\nexport class AppModule {\\n}\".trim();var NgrxCurd=/*#__PURE__*/function(_Component){_inherits(NgrxCurd,_Component);function NgrxCurd(){_classCallCheck(this,NgrxCurd);return _possibleConstructorReturn(this,_getPrototypeOf(NgrxCurd).apply(this,arguments));}_createClass(NgrxCurd,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"NGRX\"),\"NgRx is a framework for building reactive applications in Angular. NgRx provides libraries for:\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Managing global and local state.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Isolation of side effects to promote a cleaner component architecture.\"),React.createElement(\"li\",null,\"Entity collection management.\"),React.createElement(\"li\",null,\"Integration with the Angular Router.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"State:\"),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Store: \"),\"RxJS powered global state management for Angular apps, inspired by Redux.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Effects: \"),\"Side effect model for @ngrx/store.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Router Store: \"),\"Bindings to connect the Angular Router to @ngrx/store.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Entity: \"),\"Entity State adapter for managing record collections.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"ComponentStore: \"),\"Standalone library for managing local/ component state.\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Data: \"),\"Extension for simplified entity data management.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"View:\"),\"Component - Extension for fully reactive Angular applications.\",React.createElement(\"img\",{src:Ngrx,alt:\"Theata\",className:\"responsive\"}),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Actions\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:actions,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Reducers\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:reducers,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Services\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:services,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Utils\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:utils,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Models\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:models,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Containers\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:containers,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Components\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:componentsLay,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Roots\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:roots,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null)))));}}]);return NgrxCurd;}(Component);export default withStyles(styles)(NgrxCurd);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/ngrxCurd.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Ngrx","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","actions","trim","reducers","services","utils","models","containers","componentsLay","roots","NgrxCurd","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Ngrx from '../../../assets/ngrx.png';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst actions = `\n//user-action.ts\nimport {User} from '../models/user';\n\nexport const USER_LIST_REQUEST = 'user list request';\nexport const USER_LIST_SUCCESS = 'user list success';\nexport const USER_DELETE = 'user delete';\nexport const USER_UPDATE = 'user update';\nexport const USER_ADD = 'user add';\nexport const USER_LIST_ERROR = 'user list error';\n\nexport class UserListRequestAction {\n  readonly type = USER_LIST_REQUEST;\n}\n\nexport class UserDeleteAction {\n  readonly type = USER_DELETE;\n\n  constructor(public payload?: { id: number }) {\n  }\n}\n\nexport class UserUpdateAction {\n  readonly type = USER_UPDATE;\n\n  constructor(public payload?: { data: User }) {\n  }\n}\n\nexport class UserAddAction {\n  readonly type = USER_ADD;\n\n  constructor(public payload?: { data: User }) {\n  }\n}\n\nexport class UserListErrorAction {\n  readonly type = USER_LIST_ERROR;\n}\n\nexport class UserListSuccessAction {\n  readonly type = USER_LIST_SUCCESS;\n\n  constructor(public payload?: { data: User[] }) {\n  }\n}\n\n\n\n//index.ts\nimport {Action as NgRxAction} from '@ngrx/store';\n\nexport interface Action extends NgRxAction {\n  payload?: any;\n}`.trim();\n\nconst reducers = `\n//user-reducer.ts\nimport {User} from '../models/user';\nimport {Action} from '../actions';\nimport {USER_ADD, USER_DELETE, USER_LIST_ERROR, USER_LIST_REQUEST, USER_LIST_SUCCESS, USER_UPDATE} \n        from '../actions/user-action';\nimport {StoreUtility} from '../utils/store-utility';\nimport {createSelector} from '@ngrx/store';\n\nexport interface UserReducerState {\n  loading: boolean;\n  loaded: boolean;\n  error: boolean;\n  entities: { [id: number]: User };\n  ids: number[];\n}\n\nconst initialState: UserReducerState = {\n  loaded: false,\n  loading: false,\n  error: false,\n  entities: {},\n  ids: []\n};\n\nexport function UserReducer(state = initialState, action: Action): UserReducerState {\n  switch (action.type) {\n    case USER_LIST_REQUEST: {\n      return {...state, loading: true};\n    }\n    case USER_DELETE: {\n      const id = action.payload.id;\n      const newIds = state.ids.filter(elem => elem !== id);\n      const newEntities = StoreUtility.removeKey(state.entities, id);\n      return {...state, ...{entities: newEntities, ids: newIds}};\n    }\n    case USER_UPDATE: {\n      const user = action.payload.data;\n      const entity = {[user.id]: user};\n      const updatedEntities = {...state.entities, ...entity};\n      return {...state, ...{entities: updatedEntities}};\n    }\n    case USER_ADD: {\n      const user = action.payload.data;\n      const entity = {[user.id]: user};\n      const newEntities = {...state.entities, ...entity};\n      const newIds = StoreUtility.filterDuplicateIds([...state.ids, user.id]);\n      return {...state, ...{entities: newEntities, ids: newIds}};\n\n    }\n    case USER_LIST_ERROR: {\n      return {...state, error: true, loading: false};\n    }\n    case USER_LIST_SUCCESS: {\n      const users = action.payload.data;\n      const obj = StoreUtility.normalize(users);\n      const newEntities = {...state.entities, ...obj};\n      const ids = users.map(user => user.id);\n      const newIds = StoreUtility.filterDuplicateIds([...state.ids, ...ids]);\n      return {\n        ...state, ...{\n          loaded: true,\n          loading: false, error: false,\n          entities: newEntities, ids: newIds\n        }\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\n// selectors\nexport const getLoading = (state: UserReducerState) => state.loading;\nexport const getLoaded = (state: UserReducerState) => state.loaded;\nexport const getEntities = (state: UserReducerState) => state.entities;\nexport const getIds = (state: UserReducerState) => state.ids;\nexport const getUsers = createSelector(getEntities,\n  (entities) => StoreUtility.unNormalized(entities));\nexport const getError = (state: UserReducerState) => state.error;\n\n\n\n//index.ts\nimport * as fromUser from './user-reducer';\nimport {ActionReducerMap, createSelector} from '@ngrx/store';\n\n\nexport interface RootReducerState {\n  users: fromUser.UserReducerState;\n}\n\nexport const rootReducer: ActionReducerMap<RootReducerState> = {\n  users: fromUser.UserReducer,\n};\n\nexport const getUserState = (state: RootReducerState) => state.users;\n\nexport const getUserLoaded = createSelector(getUserState, fromUser.getLoaded);\nexport const getUserLoading = createSelector(getUserState, fromUser.getLoading);\nexport const getUserEntities = createSelector(getUserState, fromUser.getEntities);\nexport const getUsers = createSelector(getUserState, fromUser.getUsers);\nexport const getUserError = createSelector(getUserState, fromUser.getError);\n\nexport const getUserById = (state: RootReducerState, id: number) => {\n  const entities = getUserEntities(state);\n  return entities[id];\n};\n\nexport const getPostById = (state: RootReducerState, id: number) => {\n  const entities = getUserEntities(state);\n  return entities[id];\n};`.trim();\n\nconst services = `\n//api.service.ts\nimport {Injectable} from '@angular/core';\nimport {HttpService} from './http.service';\nimport {map} from 'rxjs/operators';\nimport {User} from '../models/user';\nimport {Observable} from 'rxjs';\n\n@Injectable()\nexport class ApiService {\n  constructor(private httpService: HttpService) {\n  }\n\n  getAllUser(): Observable<User[]> {\n    return this.httpService.get('/users')\n      .pipe(map(data => data as User[]));\n  }\n\n  getUser(id: number): Observable<User> {\n    return this.httpService.get('/users/' + id);\n  }\n}\n\n\n\n//http.service.ts\nimport {HttpClient} from '@angular/common/http';\nimport {catchError} from 'rxjs/operators';\nimport {Observable, throwError} from 'rxjs';\nimport {Injectable} from '@angular/core';\n\n@Injectable()\nexport class HttpService {\n  private baseUrl = 'https://jsonplaceholder.typicode.com';\n  AUTH_TOKEN = 'auth_token';\n\n  constructor(private httpClient: HttpClient) {\n  }\n\n  get(url: string, params?: any): Observable<any> {\n    const data = {params, headers: this.getAuthHeader()};\n    return this.httpClient\n      .get(this.baseUrl + url, data).pipe(catchError(this.errorHandler.bind(this)));\n  }\n\n  private errorHandler(response: any) {\n    const error = response.error;\n    const keys = Object.keys(error);\n    const key = keys[0];\n    let message = error[key];\n    if (response.status === 401) {\n      \n    }\n    if (error[key] instanceof Array) {\n      message = error[key][0];\n    }\n    if (key === 'isTrusted') {\n      // this will occur when not connected to internet\n    } else {\n      message = key + ' : ' + message;\n    }\n    // call snackbar and show error with message\n    return throwError({messages: message, error});\n  }\n\n  private getAuthHeader(): { [header: string]: string | string[]; } {\n    return {\n      Authorization: 'Bearer '$'{ localStorage.getItem(this.AUTH_TOKEN)}'\n    };\n  }\n}\n\n\n\n//youtube-repository.ts\nimport {Injectable} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {\n  getUserById,\n  getUserError,\n  getUserLoaded,\n  getUserLoading,\n  getUsers,\n  RootReducerState\n} from '../reducers';\nimport {combineLatest, Observable} from 'rxjs';\nimport {\n  UserAddAction,\n  UserDeleteAction,\n  UserListErrorAction,\n  UserListRequestAction,\n  UserListSuccessAction,\n  UserUpdateAction\n} from '../actions/user-action';\nimport {ApiService} from './api.service';\nimport {User} from '../models/user';\nimport {take} from 'rxjs/operators';\n\n\n@Injectable()\nexport class YoutubeRepository {\n  constructor(private store: Store<RootReducerState>, private apiService: ApiService) {\n  }\n\n  getUserList(force = false): [Observable<boolean>, Observable<User[]>, Observable<boolean>] {\n    const loading$ = this.store.select(getUserLoading);\n    const loaded$ = this.store.select(getUserLoaded);\n    const getUserData$ = this.store.select(getUsers);\n    const getError$ = this.store.select(getUserError);\n    combineLatest([loaded$, loading$]).pipe(take(1)).subscribe((data) => {\n      if ((!data[0] && !data[1]) || force) {\n        this.store.dispatch(new UserListRequestAction());\n        this.apiService.getAllUser().subscribe(res => {\n          this.store.dispatch(new UserListSuccessAction({data: res}));\n        }, error => {\n          this.store.dispatch(new UserListErrorAction());\n        });\n      }\n    });\n    return [loading$, getUserData$, getError$];\n  }\n\n  deleteUser(id: number) {\n    // first we will call actual delete api\n    this.store.dispatch(new UserDeleteAction({id}));\n  }\n\n  updateUser(data: User) {\n// first send details to actual api\n    this.store.dispatch(new UserUpdateAction({data}));\n  }\n\n  addUser(data: User) {\n    // first call api to add a user and then update it in store\n    this.store.dispatch(new UserAddAction({data}));\n  }\n\n  getUserById(id: number, force = false) {\n    // get user from reducer if exist otherwise from api\n    const user$ = this.store.select(state => getUserById(state, id));\n    user$.pipe(take(1)).subscribe(res => {\n      if (force || !res) {\n        return this.apiService.getUser(id).subscribe(data => {\n          this.store.dispatch(new UserAddAction({data}));\n        });\n      }\n      return res;\n    });\n    return user$;\n  }\n}`.trim();\n\nconst utils = `\n//store-utility.ts\nexport class StoreUtility {\n  // [{id,...},{id,..}] -> normal array\n  // entities: {id:{}} -> normalized format\n  static normalize(entityArray: Entity[]) {\n    return entityArray.reduce((previousValue, currentValue) => {\n      return {...previousValue, ...{[currentValue.id]: currentValue}};\n    }, {});\n  }\n\n  // {dsdsd:{id:dsdsd,name:\"dasds\"}}; -> entities\n  // [{id:dsdsd,name:\"dasds\"}];\n  static unNormalized(entities: { [id: number]: any }) {\n    if (!entities) {\n      return [];\n    } else {\n      return Object.keys(entities).map(key => entities[key]);\n    }\n  }\n\n  // [1,2,3,4,5,1];\n  static filterDuplicateIds(ids: number[]) {\n    return ids.filter((elem, index, self) => index === self.indexOf(elem));\n  }\n\n  static removeKey(entities: { [id: number]: any }, id: any) {\n    const newObj = {...entities};\n    delete newObj[id];\n    return newObj;\n  }\n}\n\ninterface Entity {\n  id: any;\n}`.trim();\n\nconst models = `\n//user.ts\nexport interface User {\n  id: number;\n  name: string;\n  email: string;\n  address: Address;\n  username: string;\n}\n\ninterface Address {\n  street: string;\n  suite: string;\n  'city': string;\n  'zipcode': string;\n  geo: Geo;\n}\n\ninterface Geo {\n  'lat': string;\n  'lng': string;\n}`.trim();\n\nconst containers = `\n//users.component.ts\nimport {Component, OnDestroy, OnInit} from '@angular/core';\nimport {User} from '../models/user';\nimport {YoutubeRepository} from '../services/youtube-repository';\nimport {takeWhile} from 'rxjs/operators';\nimport {MatDialog} from '@angular/material/dialog';\nimport {UpdateUserComponent} from '../components/update-user.component';\n\n@Component({\n  selector: 'youtube-users',\n  template: '\n  < div >\n  <youtube-user-list * ngIf=\"!this.loading && !this.error\"[users] = \"this.users\" ></youtube - user - list >\n    <mat-spinner * ngIf=\"this.loading\" ></mat - spinner >\n      <button * ngIf=\"!this.loading && !this.error\"(click) = \"addUser()\" > Add User</button >\n    </div >\n  ',\n})\n\nexport class UsersComponent implements OnInit, OnDestroy {\n  users: User[] = [];\n  loading = false;\n  error = false;\n  isAlive = true;\n\n  constructor(private youtubeRepository: YoutubeRepository, private dialog: MatDialog) {\n  }\n\n  ngOnInit() {\n    this.fetchData();\n  }\n\n  ngOnDestroy() {\n    this.isAlive = false;\n  }\n\n  fetchData() {\n    const observer$ = this.youtubeRepository.getUserList();\n    const userData$ = observer$[1];\n    const loading$ = observer$[0];\n    const error$ = observer$[2];\n    userData$.pipe(takeWhile(() => this.isAlive)).subscribe(data => {\n      this.users = data;\n    });\n    loading$.pipe(takeWhile(() => this.isAlive)).subscribe(data => {\n      this.loading = data;\n    });\n    error$.pipe(takeWhile(() => this.isAlive)).subscribe(data => {\n      this.error = data;\n    });\n  }\n\n  tryAgain() {\n    this.youtubeRepository.getUserList(true);\n  }\n\n  addUser() {\n    this.dialog.open(UpdateUserComponent, {\n    });\n  }\n}\n\n\n// reducer -> it contain a state (global state)\n// it will take an action -> it will return a new state\n\n// action -> it will contain a payload and a type\n\n// Dependency Injection Principle\n// you should not depend on something directly\n// component -> youtube repo -> apiService -> http Service -> http client\n\n\n\n//view-user.component.ts\nimport {Component, OnDestroy} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {YoutubeRepository} from '../services/youtube-repository';\nimport {filter, map, switchMap, takeWhile} from 'rxjs/operators';\nimport {User} from '../models/user';\n\n@Component({\n  selector: 'youtube-view-user',\n  template: '\n    <h1> {{ this.user ?this.user.email: ''}}</h1>\n    <h1>{{ this.user ? this.user.name : '' }}</h1>\n',\n})\n\nexport class ViewUserComponent implements OnDestroy {\n  isAlive = true;\n  user: User;\n\n  constructor(private route: ActivatedRoute, private youtubeRepo: YoutubeRepository) {\n    this.fetchData();\n  }\n\n  ngOnDestroy() {\n    this.isAlive = false;\n  }\n\n  fetchData() {\n    const user$ = this.route.params.pipe(map(data => data.id),\n      takeWhile(() => this.isAlive),\n      switchMap((id) => {\n        return this.youtubeRepo.getUserById(id);\n      }), filter(res => !!res));\n    user$.subscribe(data => {\n      this.user = data;\n    });\n  }\n}`.trim();\n\nconst componentsLay = `\n//layout/youtube-layout.component.ts\n@Component({\n  selector: 'youtube-layout',\n  template: '\n  < button routerLink = \"\"[routerLinkActiveOptions] = \"{exact:true}\" routerLinkActive = \"selected\" > Users</button>\n    <router-outlet></router-outlet>\n      ',\n    })\n\nexport class LayoutComponent {\n\n  constructor() {\n  }\n}\n\n\n//user-list.component.ts\n@Component({\n  selector: 'youtube-user-list',\n  template: '\n  < div fxLayout = \"row wrap\" >\n    <youtube-user-card [user] = \"user\" * ngFor=\"let user of users\" ></youtube - user - card >\n    </div >\n  ',\n})\n\nexport class UserListComponent {\n  @Input() users: User[];\n  constructor() {\n  }\n}\n\n\n//user-card.component.ts\nimport {Component, Input} from '@angular/core';\nimport {User} from '../models/user';\nimport {YoutubeRepository} from '../services/youtube-repository';\nimport {MatDialog} from '@angular/material/dialog';\nimport {UpdateUserComponent} from './update-user.component';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'youtube-user-card',\n  template: '\n  <mat-card(click)=\"open()\" >\n      <li>{{this.user.name}}</li>\n      <li>{{this.user.email}}</li>\n      <button (click) = \"delete()\" > Delete</button >\n  <button (click) = \"update()\" > Update</button >\n    </mat-card >\n  ',\n})\n\nexport class UserCardComponent {\n  @Input() user: User;\n\n  constructor(private youtubeRepo: YoutubeRepository,\n              private dialog: MatDialog, private router: Router) {\n  }\n\n  delete() {\n    this.youtubeRepo.deleteUser(this.user.id);\n  }\n\n  update() {\n    this.dialog.open(UpdateUserComponent, {\n      data: this.user\n    });\n  }\n\n  open() {\n    this.router.navigate(['user', this.user.id]);\n  }\n}\n\n\n\n//update-user.component.ts\nimport {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {User} from '../models/user';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {YoutubeRepository} from '../services/youtube-repository';\n\n@Component({\n  selector: 'youtube-update-user',\n  template: '\n  <form[formGroup]=\"userForm\"(ngSubmit) = \"this.userForm.valid && this.addOrUpdateUser()\" >\n        <mat-form-field>\n          <input formControlName=\"email\" matInput placeholder=\"email\"/>\n          <mat-error>Valid email is Required</mat-error>\n        </mat-form-field>\n        <mat-form-field>\n          <input formControlName=\"name\" matInput placeholder=\"username\"/>\n          <mat-error>Name is Required</mat-error>\n        </mat-form-field>\n        <button type=\"submit\">{{this.data ? 'Update' : 'Add'}}</button>\n    </form >\n  ',\n})\n\nexport class UpdateUserComponent implements OnInit {\n  userForm: FormGroup;\n\n  constructor(private dialogRef: MatDialogRef<UpdateUserComponent>,\n              @Inject(MAT_DIALOG_DATA) public data: User, private youtubeRepo: YoutubeRepository) {\n  }\n\n  ngOnInit() {\n    this.userForm = new FormGroup({\n      name: new FormControl(this.data ? this.data.name : null, [Validators.required]),\n      email: new FormControl(this.data ? this.data.email : null, [Validators.required]),\n    });\n  }\n\n\n  addOrUpdateUser() {\n    if (this.data) {\n      this.updateUser();\n    } else {\n      this.addUser();\n    }\n  }\n\n  updateUser() {\n    const updatedUser = {...this.data, ...this.userForm.value};\n    this.youtubeRepo.updateUser(updatedUser);\n    this.dialogRef.close();\n  }\n\n  addUser() {\n    this.youtubeRepo.addUser(this.userForm.value);\n    this.dialogRef.close();\n  }\n}`.trim();\n\nconst roots = `\n//app-routing.module.ts\nimport {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {UsersComponent} from './containers/users.component';\nimport {ViewUserComponent} from './containers/view-user.component';\n\n\nconst routes: Routes = [{\n  path: '', component: UsersComponent,\n  children: [\n    {path: 'user/:id', component: ViewUserComponent},\n  ]\n}];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n\n\n//material.module.ts\nimport {NgModule} from '@angular/core';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatInputModule} from '@angular/material/input';\n\nconst data = [MatToolbarModule,\n  MatButtonModule, MatCardModule, MatProgressSpinnerModule,\n  MatIconModule, MatFormFieldModule, MatDialogModule, MatInputModule\n];\n\n@NgModule({\n  imports: data,\n  exports: data\n})\nexport class MaterialModule {}\n\n\n\n//app.component.ts\n@Component({\n  selector: 'youtube-root',\n  template: '<router - outlet ></router-outlet>',\n})\nexport class AppComponent {\n  constructor() {\n  }\n}\n\n// my component are dependent on api service\n// api service -> http service\n// http service -> http client\n\n\n\n//app.module.ts\nimport {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {FlexLayoutModule, FlexModule} from '@angular/flex-layout';\nimport {HttpClientModule} from '@angular/common/http';\nimport {UsersComponent} from './containers/users.component';\nimport {LayoutComponent} from './components/layout/youtube-layout.component';\nimport {MaterialModule} from './material.module';\nimport {HttpService} from './services/http.service';\nimport {ApiService} from './services/api.service';\nimport {UserCardComponent} from './components/user-card.component';\nimport {UserListComponent} from './components/user-list.component';\nimport {StoreModule} from '@ngrx/store';\nimport {rootReducer} from './reducers';\nimport {YoutubeRepository} from './services/youtube-repository';\nimport {StoreDevtoolsModule} from '@ngrx/store-devtools';\nimport {environment} from '../environments/environment';\nimport {UpdateUserComponent} from './components/update-user.component';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {ViewUserComponent} from './containers/view-user.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    UsersComponent,\n    LayoutComponent,\n    UserCardComponent,\n    UserListComponent,\n    UpdateUserComponent,\n    ViewUserComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    FlexLayoutModule,\n    FlexModule,\n    HttpClientModule,\n    StoreModule.forRoot(rootReducer),\n    StoreDevtoolsModule.instrument({maxAge: 25, logOnly: environment.production}),\n    ReactiveFormsModule,\n    FormsModule,\n  ],\n  providers: [HttpService, ApiService, YoutubeRepository],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}`.trim();\n\n\nclass NgrxCurd extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>NGRX</h3>\n              NgRx is a framework for building reactive applications in Angular. NgRx provides libraries for:\n              <br />\n              <br />\n              <b>Managing global and local state.</b>\n              <ul>\n                <li>Isolation of side effects to promote a cleaner component architecture.</li>\n                <li>Entity collection management.</li>\n                <li>Integration with the Angular Router.</li>\n              </ul>\n              <br />\n              <br />\n              <b>State:</b>\n              <br />\n              <ul>\n                <li><b>Store: </b>RxJS powered global state management for Angular apps, inspired by Redux.</li>\n                <li><b>Effects: </b>Side effect model for @ngrx/store.</li>\n                <li><b>Router Store: </b>Bindings to connect the Angular Router to @ngrx/store.</li>\n                <li><b>Entity: </b>Entity State adapter for managing record collections.</li>\n                <li><b>ComponentStore: </b>Standalone library for managing local/ component state.</li>\n              </ul>\n              <br />\n\n              <b>Data: </b>Extension for simplified entity data management.\n              <br />\n              <br />\n              <b>View:</b>Component - Extension for fully reactive Angular applications.\n              <img src={Ngrx} alt=\"Theata\" className=\"responsive\" />\n              <br />\n\n              <h3>Actions</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={actions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Reducers</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={reducers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Services</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={services}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Utils</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={utils}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Models</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={models}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Containers</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={containers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Components</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={componentsLay}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Roots</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={roots}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(NgrxCurd));\n"]},"metadata":{},"sourceType":"module"}