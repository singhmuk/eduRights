{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var evalRPN=\"\\nfunction evalRPN(tokens) {\\n  const stack = []\\n  const isOperator = token => token === '+' || token === '-' || token === '*' || token === '/';\\n\\n  for (const token of tokens) {\\n    if (isOperator(token)) {\\n          const b = stack.pop()\\n          const a = stack.pop()\\n      let result = 0\\n      \\n      switch (token) {\\n        case '+':\\n          result = a + b\\n          break\\n        case '-':\\n          result = a - b\\n          break\\n        case '/':\\n          result = a / b\\n          result = result < 0 ? Math.ceil(result) : Math.floor(a / b) \\n          break\\n        default:\\n          result = a * b\\n      }\\n      stack.push(result)\\n    } else {\\n      stack.push(parseInt(token, 10))\\n    }\\n  }\\n  return stack[0]\\n}\\nconsole.log(evalRPN([\\\"4\\\", \\\"13\\\", \\\"5\\\", \\\"/\\\", \\\"+\\\"]))\\n\".trim();var convertToTitle=\"\\nfunction convertToTitle(n) {\\n  var A = \\\"A\\\".charCodeAt(0);\\n  var str = \\\"\\\";\\n  \\n  while(n > 0) {\\n      n--;\\n      str = String.fromCharCode(A+n%26) + str;\\n      n =parseInt(n/26);\\n  }\\n  \\n  return str;\\n};\\n\\nconsole.log(convertToTitle(701))\\n\".trim();var combinationSum3=\"\\nfunction combinationSum3(k, n) {\\n  const result = []\\n\\n  const aux = (start, current, sum) => {\\n    if (current.length > k) {\\n      return\\n    }\\n    if (current.length === k) {\\n      if (sum === n) {\\n        result.push([...current])\\n        return\\n      }\\n      return\\n    }\\n\\n    for (let i = start; i <= 9; i++) {\\n      current.push(i)\\n      aux(i + 1, current, sum + i)\\n      current.pop(i)\\n    }\\n  }\\n  for (let i = 1; i <= 9; i++) {\\n    aux(i + 1, [i], i)\\n  }\\n  return result\\n}\\n\\nconsole.log(combinationSum3(3,7))\".trim();var countDigitOne=\"\\nfunction countDigitOne(n) {\\n  const memo = {}\\n  const aux = (number) => {\\n    if (memo[number] !== undefined) {\\n      return memo[number]\\n    }\\n    if (number <= 0) return 0;\\n\\n    const str = number.toString()\\n    const first = parseInt(str[0], 10)\\n    const base = Math.pow(10, str.length - 1)\\n    const reminder = number - first * base\\n\\n    if (first === 1) {\\n      memo[number] = aux(base - 1) + reminder + 1 + aux(reminder)\\n    } \\n    else {\\n      memo[number] = first * aux(base - 1) + base + aux(reminder)\\n    }\\n    return memo[number]\\n  }\\n  return aux(n)\\n}\\n\\nconsole.log(countDigitOne(16))\\n\".trim();var maxSlidingWindow=\"\\nfunction maxSlidingWindow (nums = [], k){\\n  if (!nums.length) return [];\\n\\n  const result = []\\n  const queue = []\\n\\n  for (let i = 0; i < k; i++) {\\n    while (nums[i] > nums[queue[queue.length - 1]]) {\\n      queue.pop()\\n    }\\n    queue.push(i)\\n  }\\n  result.push(nums[queue[0]])\\n\\n  for (let i = 1; i < nums.length - k + 1; i++) {\\n    if (queue[0] < i) {\\n      queue.shift()\\n    }\\n    while (nums[i + k - 1] > nums[queue[queue.length - 1]]) {\\n      queue.pop()\\n    }\\n    queue.push(i + k - 1)\\n    result.push(nums[queue[0]])\\n  }\\n  return result\\n}\\n\\nconsole.log(maxSlidingWindow([1,3,-1,-3,5,3,6,7], 3))\\n\".trim();var TopTech=/*#__PURE__*/function(_Component){_inherits(TopTech,_Component);function TopTech(){_classCallCheck(this,TopTech);return _possibleConstructorReturn(this,_getPrototypeOf(TopTech).apply(this,arguments));}_createClass(TopTech,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Excel Sheet Column Title.\"),\"Given a positive integer, return its corresponding column title as appear in an Excel sheet.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:convertToTitle,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Evaluate Reverse Polish Notation\"),React.createElement(\"b\",null,\"Input: \"),\"[\\\"2\\\", \\\"1\\\", \\\"+\\\", \\\"3\\\", \\\"*\\\"]\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"9\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Explanation: \"),\"((2 + 1) * 3) = 9\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:evalRPN,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Combination Sum.\"),\"Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Note: \"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"All numbers will be positive integers.\"),React.createElement(\"li\",null,\"The solution set must not contain duplicate combinations.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:combinationSum3,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. Number of Digit One.\"),\"Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:countDigitOne,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. Sliding Window Maximum.\"),\"Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"Could you solve it in linear time?\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:maxSlidingWindow,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return TopTech;}(Component);export default withStyles(styles)(TopTech);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/topTech.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","evalRPN","trim","convertToTitle","combinationSum3","countDigitOne","maxSlidingWindow","TopTech","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = {backgroundColor:'#F0F8FF', padding:'1px', fontSize:'16px'}\n\nconst styles = theme => ({\n  paper: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1)\n  },\n  smMargin: {\n      margin: theme.spacing(1)\n  },\n  actionDiv: {\n      textAlign: \"center\"\n  }\n})\n\n\nconst evalRPN = `\nfunction evalRPN(tokens) {\n  const stack = []\n  const isOperator = token => token === '+' || token === '-' || token === '*' || token === '/';\n\n  for (const token of tokens) {\n    if (isOperator(token)) {\n          const b = stack.pop()\n          const a = stack.pop()\n      let result = 0\n      \n      switch (token) {\n        case '+':\n          result = a + b\n          break\n        case '-':\n          result = a - b\n          break\n        case '/':\n          result = a / b\n          result = result < 0 ? Math.ceil(result) : Math.floor(a / b) \n          break\n        default:\n          result = a * b\n      }\n      stack.push(result)\n    } else {\n      stack.push(parseInt(token, 10))\n    }\n  }\n  return stack[0]\n}\nconsole.log(evalRPN([\"4\", \"13\", \"5\", \"/\", \"+\"]))\n`.trim();\n\nconst convertToTitle = `\nfunction convertToTitle(n) {\n  var A = \"A\".charCodeAt(0);\n  var str = \"\";\n  \n  while(n > 0) {\n      n--;\n      str = String.fromCharCode(A+n%26) + str;\n      n =parseInt(n/26);\n  }\n  \n  return str;\n};\n\nconsole.log(convertToTitle(701))\n`.trim();\n\nconst combinationSum3 = `\nfunction combinationSum3(k, n) {\n  const result = []\n\n  const aux = (start, current, sum) => {\n    if (current.length > k) {\n      return\n    }\n    if (current.length === k) {\n      if (sum === n) {\n        result.push([...current])\n        return\n      }\n      return\n    }\n\n    for (let i = start; i <= 9; i++) {\n      current.push(i)\n      aux(i + 1, current, sum + i)\n      current.pop(i)\n    }\n  }\n  for (let i = 1; i <= 9; i++) {\n    aux(i + 1, [i], i)\n  }\n  return result\n}\n\nconsole.log(combinationSum3(3,7))`.trim();\n\nconst countDigitOne = `\nfunction countDigitOne(n) {\n  const memo = {}\n  const aux = (number) => {\n    if (memo[number] !== undefined) {\n      return memo[number]\n    }\n    if (number <= 0) return 0;\n\n    const str = number.toString()\n    const first = parseInt(str[0], 10)\n    const base = Math.pow(10, str.length - 1)\n    const reminder = number - first * base\n\n    if (first === 1) {\n      memo[number] = aux(base - 1) + reminder + 1 + aux(reminder)\n    } \n    else {\n      memo[number] = first * aux(base - 1) + base + aux(reminder)\n    }\n    return memo[number]\n  }\n  return aux(n)\n}\n\nconsole.log(countDigitOne(16))\n`.trim();\n\nconst maxSlidingWindow = `\nfunction maxSlidingWindow (nums = [], k){\n  if (!nums.length) return [];\n\n  const result = []\n  const queue = []\n\n  for (let i = 0; i < k; i++) {\n    while (nums[i] > nums[queue[queue.length - 1]]) {\n      queue.pop()\n    }\n    queue.push(i)\n  }\n  result.push(nums[queue[0]])\n\n  for (let i = 1; i < nums.length - k + 1; i++) {\n    if (queue[0] < i) {\n      queue.shift()\n    }\n    while (nums[i + k - 1] > nums[queue[queue.length - 1]]) {\n      queue.pop()\n    }\n    queue.push(i + k - 1)\n    result.push(nums[queue[0]])\n  }\n  return result\n}\n\nconsole.log(maxSlidingWindow([1,3,-1,-3,5,3,6,7], 3))\n`.trim();\n\n\nclass TopTech extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n            <Grid item xs={2}>\n                <Paper className={classes.paper}>\n                    <h4><Sidebar /></h4>\n                </Paper>\n            </Grid>\n            <Grid item xs={10}>\n            <Paper className={classes.paper}>\n            <List>\n            <h3>1. Excel Sheet Column Title.</h3>\n              Given a positive integer, return its corresponding column title as appear in an Excel sheet.\n              <div style={titles}>\n                <PrismCode\n                  code={convertToTitle}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>2. Evaluate Reverse Polish Notation</h3>\n              <b>Input: </b>[\"2\", \"1\", \"+\", \"3\", \"*\"]<br/>\n              <b>Output: </b>9<br/>\n              <b>Explanation: </b>((2 + 1) * 3) = 9\n              <div style={titles}>\n                <PrismCode\n                  code={evalRPN}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              \n             \n              <h3>3. Combination Sum.</h3>\n              Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.\n              <br/>\n\n              <b>Note: </b>\n              <ul>\n                <li>All numbers will be positive integers.</li>\n                <li>The solution set must not contain duplicate combinations.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={combinationSum3}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              \n              <h3>4. Number of Digit One.</h3>\n              Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.\n              <div style={titles}>\n                <PrismCode\n                  code={countDigitOne}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n           \n              <h3>5. Sliding Window Maximum.</h3>\n              Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.\n              <br/>\n              <br/>\n              Could you solve it in linear time?\n              <div style={titles}>\n                <PrismCode\n                  code={maxSlidingWindow}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(TopTech));\n"]},"metadata":{},"sourceType":"module"}