{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/css/html_1.js\";\nimport React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport \"../ReactJs/styles.css\";\nimport Sidebar from \"./sidebar\";\nimport PrismCode from \"../ReactJs/prismCode\";\nconst titles = {\n  backgroundColor: \"#F0F8FF\",\n  padding: \"1px\",\n  fontSize: \"16px\"\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst accept = `\n<input type=\"file\" id=\"soundFile\" accept=\"audio/*\">\n<input type=\"file\" id=\"videoFile\" accept=\"video/*\">\n<input type=\"file\" id=\"imageFile\" accept=\"image/*\" multiple>\n<input type=\"file\" id=\"profile_pic\" name=\"profile_pic\" accept=\".jpg, .jpeg, .png\">\n `.trim();\nconst iframe = `\n<iframe src=\"https://example.org\"\n    title=\"iframe\" width=\"400\" height=\"300\">\n</iframe>\n\n\n//\n<address>Delhi, India</address>\n\n\n//\n<citr>The Title Of Books</citr> Book written by ...\n\n\n//\n<marquee direction=\"right\">Moving Text</marquee>\n<marquee direction=\"up\">Moving Text</marquee><br/>\n `.trim();\nconst autocapitalize = `\n#syntex\n<tag_name autocapitalize=\"off | none | on | sentences | words | characters\" />\n\n\n#Ex.\ndiv.a { text-transform: uppercase/ lowercase/ capitalize; }\n<div class=\"a\">Uppercase.</div>\n\n\n//\n<a href=\"https://www.google.com\" target=\"_blank\">Open new tab</a><br/>\n<a href=\"#local\">SPA</a>\n<p id=\"local\">Move to SPA Block</p>\n`.trim();\nconst audio = `\n<figure>\n    <figcaption>Listen to the T-Rex:</figcaption>\n    <audio controls>\n      <source src=\"horse.mp3\" type=\"audio/mpeg\">\n    </audio>\n</figure>`.trim();\nconst video = `\n<video width=\"320\" height=\"240\" controls>\n  <source src=\"movie.mp4\" type=\"video/mp4\">\n  <source src=\"movie.ogg\" type=\"video/ogg\">\n</video>\n`.trim();\nconst capture = `\n\t<input type=\"file\" id=\"soundFile\" capture=\"user\" accept=\"audio/*\">\n<input type=\"file\" id=\"videoFile\" capture=\"environment\" accept=\"video/*\">\n<input type=\"file\" id=\"imageFile\" capture=\"user\" accept=\"image/*\">\n`.trim();\nconst textarea = `\n<textarea id=\"story\" name=\"story\" rows=\"5\" cols=\"33\">\n  It was a dark and stormy night...\n</textarea>\n`.trim();\nconst area = `\n<map name=\"planetmap\">\n  <area shape=\"rect\" coords=\"0,0,82,126\" alt=\"Sun\" href=\"sun.htm\">\n  <area shape=\"circle\" coords=\"90,58,3\" alt=\"Mercury\" href=\"mercur.htm\">\n  <area shape=\"circle\" coords=\"124,58,8\" alt=\"Venus\" href=\"venus.htm\">\n</map>\n`.trim();\nconst object = `\n<object data=\"movie.mp4\" width=\"400\" height=\"300\"></object>\n\n<object data=\"snippet.html\" width=\"500\" height=\"200\"></object>\n`.trim();\nconst optgroup = `\n<form action=\"/action_page.php\">\n  <label for=\"cars\">Choose a car:</label>\n  <select name=\"cars\" id=\"cars\">\n    <optgroup label=\"Swedish Cars\">\n      <option value=\"volvo\">Volvo</option>\n      <option value=\"saab\">Saab</option>\n    </optgroup>\n  </select>\n  <input type=\"submit\" value=\"Submit\">\n</form>\n`.trim();\nconst outputs = `\n<form oninput=\"x.value=parseInt(a.value)+parseInt(b.value)\">\n  <input type=\"range\" id=\"a\" value=\"50\">\n  +<input type=\"number\" id=\"b\" value=\"25\">\n  =<output name=\"x\" for=\"a b\"></output>\n</form>\n`.trim();\nconst section = `\n<section>\n  <p>The he World Wildlife Fund. WWF was founded in 1961.</p>\n</section>\n`.trim();\nconst geolocation = `\n//index.js\nfunction getLocation() {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(showPosition);\n  } else {\n    x.innerHTML = \"Geolocation is not supported by this browser.\";\n  }\n}\n\nfunction showPosition(position) {\n  x.innerHTML = \"Latitude: \" + position.coords.latitude +\n    \"<br>Longitude: \" + position.coords.longitude;\n}\n\nvar x = document.getElementById(\"demo\");\n\n\n//index.html\n  <body>\n    <button onclick=\"getLocation()\">Get Location</button>\n    <p id=\"demo\"></p>\n    <script type=\"text/javascript\" src=\"index.js\"></script>\n  </body>\n`.trim();\nconst dragDrop = `\n//index.js\nfunction allowDrop(ev) {\n  ev.preventDefault();\n}\n\nfunction drag(ev) {\n  ev.dataTransfer.setData(\"text\", ev.target.id);\n}\n\nfunction drop(ev) {\n  ev.preventDefault();\n  var data = ev.dataTransfer.getData(\"text\");\n  ev.target.appendChild(document.getElementById(data));\n}\n\n\n//index.html\n<style>\n#div1, #div2 {\n  float: left;\n  width: 100px;\n  height: 35px;\n  border: 1px solid black;\n}\n</style>\n  <script type=\"text/javascript\" src=\"index.js\"></script>\n</head>\n\n<body>\n<div id=\"div1\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\">\n  <img src=\"img_w3slogo.gif\" draggable=\"true\" ondragstart=\"drag(event)\" id=\"drag1\" width=\"88\" height=\"31\">\n</div>\n\n  <div id=\"div2\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\"></div>\n</body>\n`.trim();\nconst workerWorker = `var worker = new Worker(\"sample_prog.js\"﴿;`.trim();\nconst serverSentEvent = `\nvar source = new EventSource(\"sse_demo.php\");\nsource.onmessage = function(event) {\ndocument.getElementById(\"result\").innerHTML += event.data + \"<br>\";\n};\n`.trim();\nconst element = `\n<script>\ndocument.createElement(\"myElement\")\n</script>\n\n\n//It can be used in the HTML as.\n<myElement>hello</myElement>\n`.trim();\nconst Session = `\n//Use setItem() function to store data in Session Storage\nsessionStorage.setItem (‘key’,’value’);\n\nsessionStorage.setItem (‘username’,’Meenakshi’)\n\n\n//Use getItem() function to retrieve data from Session Storage\nsessionStorage.getItem(‘key’);\n\nvar username= sessionStorage.getItem(‘username’);\n\n\n/*\n  We can only store String in Session Storage. To save the objects in Session, first, convert \n  the object into JSON string and then store this string in Session Storage as\n*/\n\nsessionStorage.setItem (‘object’, JSON.stringify(object));\n\n\n//If JSON string gets stored in Session Storage, then first convert it into an object as follows.\n\nvar object=JSON.parse(sessionStorage.getItem(‘object’));\n\n\n//Use removeItem() function to delete a particular key from Session Storage.\nsessionStorage.removeItem(‘key’);\n\n`.trim();\nconst pres = `\n<pre>\n   My Bonnie lies over the ocean.\n</pre>`.trim();\nconst htmlStyles = `\n<tagname style=\"property:value;\">`.trim();\nconst quotation = `\nq for: <q>Short Quotations.</q>\n\n<abbr title=\"World Health Organization\">WHO</abbr>\n\n<bdo dir=\"rtl\">This text will be written from right to left</bdo>\n`.trim();\nconst address = `\n<p>Email link <a href=\"mailto: admin@gmail.com\">admin@gmail.com</a></p>\n\n\n//\nRead Pdf by embed, iframe and object.\n<embed src=\"CM_Process.pdf\" type=\"application/pdf\"><br/>\n`.trim();\nconst htmltags = `\nTags: There are 2 types of HTML Tags.\n1. Cntainer Tag <p></p>\n2. Empty Tag <hr/>\n\nElement: Element is combination of Tag and containt.\nEx. <p>Here is containt</p>\n\nHTML Attributes: Attributes provide additional information about an element.\nAlways specifed in the start tag.\nCome in name/ value pairs. Like name=\"value\"\nEx. <p title=\"about paragraph\">Here is containt</p>\n`.trim();\nconst metertags = `\nTemp: <meter min=0 max=10 value=\".5\" low=\"3\" high=\"8\" optimum=\"5\"></meter>\nDownload: <progress max=\"100\" value=\"80\"></progress>\n`.trim();\nconst grisCont = `\n<style>\n  .grid-container {\n    display: grid;\n    grid-template-columns: auto auto auto;\n  }\n  .grid-item {\n    background-color: rgba(255, 255, 255, 0.8);\n    border: 1px solid rgba(0, 0, 0, 0.8);\n    text-align: center;\n  }\n</style>\n<body>\n  <div class=\"grid-container\">\n    <p class=\"grid-item\">1</p>\n    <p class=\"grid-item\">2</p>\n    <p class=\"grid-item\">3</p>\n  </div>\n</body>`.trim();\nconst tablerow = `\n<style>\n  #customers {\n    width: 100%;\n  }\n\n  #customers td,\n  #customers th {\n    border: 1px solid #ddd;\n    padding: 8px;\n  }\n\n  #customers tr:nth-child(even) {\n    background-color: #f2f2f2;\n  }\n\n  #customers th {\n    text-align: left;\n    background-color: #04aa6d;\n    color: white;\n  }\n</style>\n<body>\n  <table id=\"customers\">\n    <tr>\n      <th>Company</th>\n      <th>Contact</th>\n      <th>Country</th>\n    </tr>\n    <tr>\n      <td>Alfreds Futterkiste</td>\n      <td>Maria Anders</td>\n      <td>Germany</td>\n    </tr>\n    <tr>\n      <td>Berglunds snabbköp</td>\n      <td>Christina Berglund</td>\n      <td>Sweden</td>\n    </tr>\n    <tr>\n      <td>Centro comercial Moctezuma</td>\n      <td>Francisco Chang</td>\n      <td>Mexico</td>\n    </tr>\n  </table>\n</body>\n`.trim();\nconst threeImg = `\n<style>\n  .heading {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n  }\n</style>\n<body>\n  <div class=\"heading\">\n    <p>Entrees</p>\n    <p>Drinks</p>\n    <p>Desserts</p>\n  </div>\n</body>`.trim();\nconst imgtags = `\n<style>\n  .container {\n    position: relative;\n    text-align: center;\n    color: white;\n  }\n\n  .bottom-left {\n    position: absolute;\n    bottom: 8px;\n    left: 16px;\n  }\n\n  .top-left {\n    position: absolute;\n    top: 8px;\n    left: 16px;\n  }\n\n  .top-right {\n    position: absolute;\n    top: 8px;\n    right: 16px;\n  }\n\n  .bottom-right {\n    position: absolute;\n    bottom: 8px;\n    right: 16px;\n  }\n\n  .centered {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n</style>\n<body>\n  <div class=\"container\">\n    <img src=\"../assets/img_snow.jpg\" alt=\"Snow\" style=\"width: 100%\" />\n    <p class=\"bottom-left\">Bottom Left</p>\n    <p class=\"top-left\">Top Left</p>\n    <p class=\"top-right\">Top Right</p>\n    <p class=\"bottom-right\">Bottom Right</p>\n    <p class=\"centered\">Centered</p>\n  </div>\n</body>`.trim();\nconst roundCor = `\n<style>\n  #rcorners1 {\n    border-radius: 25px;\n    background: #73ad21;\n    padding: 20px;\n    width: 200px;\n    height: 150px;\n  }\n</style>\n<body>\n  <p id=\"rcorners1\">Rounded corners!</p>\n</body>\n\n`.trim();\n\nclass Html1 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }, \"1. Grid\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: grisCont,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469\n      },\n      __self: this\n    }, \"2. Table\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: tablerow,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    }, \"3. Three image inline\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: threeImg,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    }, \"4. Image with text\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: imgtags,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496\n      },\n      __self: this\n    }, \"5. RoundCorner\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: roundCor,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }, \"Html: \"), \"Structure\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510\n      },\n      __self: this\n    }, \"css: \"), \"Styles\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }, \"Div and Span are used to structure webpage. They are structure element.\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }, \"div: \"), \"Block Element\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }, \"span: \"), \"Inline Element\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    }, \"1. What is a tag in HTML?\"), \"A tag instructs the Browser about how to format the HTML properly.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }, \"2. What is the difference between HTML elements and tags?\"), \"The HTML element is everything from the start tag to the end tag. HTML elements become HTML tags when enclosed within angular brackets.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: htmltags,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }, \"3. HTML Attributes\"), \"HTML attributes provide additional information about HTML elements.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }, \"All HTML elements can have \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548\n      },\n      __self: this\n    }, \"attributes.\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    }, \"Attributes are always specified in \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    }, \"the start tag.\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553\n      },\n      __self: this\n    }, \"Attributes usually come in name/value pairs like:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555\n      },\n      __self: this\n    }, \"name=\\\"value\\\"\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }, \"What is the purpose of DOCTYPE in HTML, and what are some different types of DOCTYPEs?\"), \"The DOCTYPE declaration in HTML is used to specify the version of HTML or XHTML used in a web document. It informs the browser how to render the page and what rules to follow when parsing the code.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568\n      },\n      __self: this\n    }), \"There are several types of DOCTYPEs:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572\n      },\n      __self: this\n    }, \"HTML5 DOCTYPE: \"), \"!DOCTYPE html\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576\n      },\n      __self: this\n    }, \"XHTML 1.0 Strict DOCTYPE: \"), \"!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\"\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    }, \"HTML 4.01 Strict DOCTYPE: \"), \"!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01//EN\\\" \\\"http://www.w3.org/TR/html4/strict.dtd\\\"\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588\n      },\n      __self: this\n    }, \"Transitional DOCTYPEs: \"), \"HTML 4.01 Transitional and XHTML 1.0 Transitional\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593\n      },\n      __self: this\n    }, \"Frameset DOCTYPEs: \"), \"HTML 4.01 Frameset and XHTML 1.0 Frameset\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596\n      },\n      __self: this\n    })), \"The DOCTYPE should be placed at the beginning of the HTML document before any other tags. It is important to include a DOCTYPE declaration to ensure that the web page is rendered correctly in all browsers.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604\n      },\n      __self: this\n    }, \"Explain the difference between HTML and XHTML (Extensible Hypertext Markup Language) .\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610\n      },\n      __self: this\n    }, \"Syntax: \"), \"HTML syntax is more forgiving, allowing for unclosed tags, missing attributes, and more. XHTML, on the other hand, requires well-formed XML syntax, with all tags properly closed and attributes quoted.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617\n      },\n      __self: this\n    }, \"Document structure: \"), \"HTML does not require a document type declaration, while XHTML requires a specific DOCTYPE declaration at the beginning of the document.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 623\n      },\n      __self: this\n    }, \"Validation: \"), \"HTML validation is done against a set of rules, while XHTML validation is done against a specific XML schema.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629\n      },\n      __self: this\n    }, \"MIME type: \"), \"HTML is served with a text/html MIME type, while XHTML is served with an application/xhtml+xml MIME type.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 633\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 634\n      },\n      __self: this\n    }, \"Browser support: \"), \"Most modern browsers support both HTML and XHTML, but older browsers may have difficulty with XHTML due to its stricter syntax.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638\n      },\n      __self: this\n    })), \"In summary, XHTML is a stricter and more standardized version of HTML that is based on XML syntax. It requires well-formed XML syntax and a specific DOCTYPE declaration, and is validated against an XML schema. While both languages are used for creating web pages, HTML is more forgiving and easier to work with, while XHTML offers greater standardization and stricter rules.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648\n      },\n      __self: this\n    }, \"What are the different types of form inputs in HTML, and how do you use them?\"), \"HTML provides different types of form inputs that allow users to enter data in various ways. Some of the commonly used form inputs are:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    }, \"Text Input: \"), \"Text input is used to get a single line of text input from the user. It is created using the 'input' element with the type attribute set to \\\"text\\\".\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663\n      },\n      __self: this\n    }, \"Password Input: \"), \"Password input is used to get a password input from the user. It is created using the 'input' element with the type attribute set to \\\"password\\\".\", \" \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669\n      },\n      __self: this\n    }, \"Checkbox Input: \"), \"Checkbox input is used to get binary input from the user (yes or no, true or false). It is created using the 'input' element with the type attribute set to \\\"checkbox\\\".\", \" \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676\n      },\n      __self: this\n    }, \"Radio Input: \"), \" Radio input is used to get a single value from a list of options. It is created using the 'input' element with the type attribute set to \\\"radio\\\"\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682\n      },\n      __self: this\n    }, \"Select Input: \"), \"Select input is used to get a single value from a list of options. It is created using the 'select' element with 'option' elements as its child nodes.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 686\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688\n      },\n      __self: this\n    }, \"Textarea Input: \"), \"Textarea input is used to get a multiline text input from the user. It is created using the 'textarea' element.\", \" \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 693\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694\n      },\n      __self: this\n    }, \"File Input: \"), \"File input is used to get a file from the user. It is created using the 'input' element with the type attribute set to \\\"file\\\"\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700\n      },\n      __self: this\n    }, \": \"), \"These are some of the commonly used form inputs in HTML, and there are many more types of form inputs available in HTML.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 706\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 707\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 708\n      },\n      __self: this\n    }, \"What are the different ways to include external stylesheets in an HTML document, and what are the advantages and disadvantages of each?\"), \"There are three main ways to include external stylesheets in an HTML document:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711\n      },\n      __self: this\n    }, \": \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712\n      },\n      __self: this\n    }, \": \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 716\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 717\n      },\n      __self: this\n    }, \"4. pre Element\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 718\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 719\n      },\n      __self: this\n    }, \"The HTML 'pre' element defines preformatted text.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 720\n      },\n      __self: this\n    }, \"The text inside a 'pre' element is displayed in a fixed-width font (usually Courier), and it preserves both spaces and line breaks.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 726\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: pres,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 727\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 733\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734\n      },\n      __self: this\n    }, \"5. HTML Style Attribute\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: htmlStyles,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 736\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 742\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 743\n      },\n      __self: this\n    }, \"6. What is the difference between the \\u2018id\\u2019 attribute and the \\u2018class\\u2019 attribute of HTML elements?\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 747\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 748\n      },\n      __self: this\n    }, \" \", \"Multiple elements in HTML can have the same class value.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 752\n      },\n      __self: this\n    }, \"id attribute of one element cannot be associated with another HTML element.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 757\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 758\n      },\n      __self: this\n    }, \"7. Non-semantic elements\"), \"These elements are without any definition. They don\\u2019t describe anything about their structure such as 'span' and 'div'.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 761\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 762\n      },\n      __self: this\n    }, \"8. What are void elements in HTML?\"), \"HTML elements which don't have closing Tags are Void elements.\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 764\n      },\n      __self: this\n    }, \"Ex. \"), \"br, img, hr, etc.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 765\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 766\n      },\n      __self: this\n    }, \"9. Is it possible to change an inline element into a block level element?\"), \"Yes, it is possible using the \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 770\n      },\n      __self: this\n    }, \"display\"), \" property with its value as \\u201Cblock\\u201D, to change the inline element into a block-level elemen.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 773\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 774\n      },\n      __self: this\n    }, \"10. What would happen if the HTML Document does not contain '!DOCTYPE'?\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 778\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 779\n      },\n      __self: this\n    }, \"It instructs the Web Browser about the version of HTML used for creating the Web page.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 783\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 784\n      },\n      __self: this\n    }, \"What happens if you miss !DOCTYPE.\")), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 786\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 787\n      },\n      __self: this\n    }, \"then new features and tags provided by HTML5 will not be supported.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 791\n      },\n      __self: this\n    }, \"HTML enter Quirks mode.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 794\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 795\n      },\n      __self: this\n    }, \"11. What is the major difference between, Transitional and Strict doctype?\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 799\n      },\n      __self: this\n    }, \"Strict: \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 800\n      },\n      __self: this\n    }), \"This DTD contains all HTML components and properties. However, it does NOT INCLUDE presentational or expostulated components (like text style). It does not permit the use of Framesets.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 804\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 805\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 806\n      },\n      __self: this\n    }, \"Transitional: \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 807\n      },\n      __self: this\n    }), \"This DTD contains all HTML components and properties, INCLUDING presentational and belittled components (like textual style). It does not allow the use of Framesets.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 811\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 812\n      },\n      __self: this\n    }, \"12. What are the different kinds of Doctypes available?\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 813\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 814\n      },\n      __self: this\n    }, \"Strict Doctype\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 815\n      },\n      __self: this\n    }, \"Transitional Doctype\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 816\n      },\n      __self: this\n    }, \"Frameset Doctype\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 818\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 819\n      },\n      __self: this\n    }, \"13. Most Important HTML Tags for SEO, This tags should goes inside head tags.\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 823\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 824\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 825\n      },\n      __self: this\n    }, \"title: \"), \"This tag defines the title of a web page and appears in the search engine results as the clickable link. It's important to include relevant keywords in the title tag as it helps search engines understand the content of the page.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 830\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 831\n      },\n      __self: this\n    }, \"meta: \"), \"The meta tags include the description tag and the keywords tag. The description tag provides a brief description of the web page, and the keywords tag specifies the keywords related to the page. Both tags help search engines understand the content of the page and improve its ranking.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 837\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 838\n      },\n      __self: this\n    }, \"header, footer: \"), \"The header usually contains the main navigation and logo, while the footer contains copyright information and other legal details. Including keywords in these sections can help improve the SEO of a web page.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 843\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 844\n      },\n      __self: this\n    }, \"h1 to h6: \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 846\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 847\n      },\n      __self: this\n    }, \"img: \"), \"It's important to include relevant alt text in the img tag as it helps search engines understand the content of the image\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 851\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 852\n      },\n      __self: this\n    }, \"a: \"), \"Helps search engines understand the content of the linked page.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 855\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 856\n      },\n      __self: this\n    }, \"strong, em: \"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 859\n      },\n      __self: this\n    }), \"It's important to note that while HTML tags can help improve the SEO of a web page, they should be used in a natural and relevant way. Overusing or stuffing keywords into tags can actually harm the SEO of a web page.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 864\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 865\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 866\n      },\n      __self: this\n    }, \"14. Accept\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 867\n      },\n      __self: this\n    }, \"input\"), \" accept Attribute is used to specifies the type of file that the server accepts.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 869\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: accept,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 870\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 876\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 877\n      },\n      __self: this\n    }, \"15. iframe\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 878\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 879\n      },\n      __self: this\n    }, \"The iframe tag specifies an inline frame.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 880\n      },\n      __self: this\n    }, \"An inline frame is used to embed another document within the current HTML document.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 885\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: iframe,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 886\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 892\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 893\n      },\n      __self: this\n    }, \"16. Autocapitalize\"), \"autocapitalize attribute is used to define whether the text present inside the HTML element should be automatically capitalized or not.\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 897\n      },\n      __self: this\n    }, \"Features: \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 898\n      },\n      __self: this\n    }), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 899\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 900\n      },\n      __self: this\n    }, \"It specifies how the text will be automatically capitalized.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 903\n      },\n      __self: this\n    }, \"It indicates that the first letter of the word or sentence would be in Capital.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 907\n      },\n      __self: this\n    }, \"It does not support input tag with type URL, Email, and Password.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 911\n      },\n      __self: this\n    }, \"It is a Global Attribute.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 913\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 914\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: autocapitalize,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 915\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 921\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 922\n      },\n      __self: this\n    }, \"17. Audio\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 923\n      },\n      __self: this\n    }, \"audio\"), \" element is used to play an audio file on a web page.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 924\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 925\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 926\n      },\n      __self: this\n    }, \"embed -\"), \"It provides a container for an external application.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 929\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 930\n      },\n      __self: this\n    }, \"track -\"), \"It defines text tracks for video and audio.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 933\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 934\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 935\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: audio,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 936\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 942\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 943\n      },\n      __self: this\n    }, \"18. Video\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 944\n      },\n      __self: this\n    }, \"video\"), \" element is used to show a video on a web page.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 945\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: video,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 946\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 952\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 953\n      },\n      __self: this\n    }, \"19. Capture\"), \"The capture attribute specifies that, optionally, a new file should be captured, and which device should be used to capture that new media of a type defined by the accept attribute.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 957\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 958\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 959\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: capture,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 960\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 966\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 967\n      },\n      __self: this\n    }, \"20. Textarea\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 968\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 969\n      },\n      __self: this\n    }, \"Defines a multi-line text input control.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 970\n      },\n      __self: this\n    }, \"textarea element is often used in a form, to collect user inputs like comments or reviews.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 974\n      },\n      __self: this\n    }, \"The size of a text area is specified by the \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 975\n      },\n      __self: this\n    }, \"cols\"), \" and\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 976\n      },\n      __self: this\n    }, \"rows\"), \" attributes\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 979\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 980\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: textarea,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 981\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 987\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 988\n      },\n      __self: this\n    }, \"21. Area\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 989\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 990\n      },\n      __self: this\n    }, \"The \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 991\n      },\n      __self: this\n    }, \"area\"), \" tag defines an area inside an image map.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 993\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 994\n      },\n      __self: this\n    }, \"area\"), \" elements are always nested inside a \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 994\n      },\n      __self: this\n    }, \"map\"), \" \", \"tag.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 998\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 999\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: area,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1000\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1006\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1007\n      },\n      __self: this\n    }, \"22. Object\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1008\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1009\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1010\n      },\n      __self: this\n    }, \"object\"), \" tag defines a container for an external resource.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1013\n      },\n      __self: this\n    }, \"The external resource can be a web page, a picture, a media player, or a plug-in application.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1018\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1019\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: object,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1020\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1026\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1027\n      },\n      __self: this\n    }, \"23. Optgroup\"), \"The \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1028\n      },\n      __self: this\n    }, \"optgroup\"), \" tag is used to group related options in a \\\"select\\\" element (drop-down list).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1030\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1031\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1032\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: optgroup,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1033\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1039\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1040\n      },\n      __self: this\n    }, \"24. Output\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1041\n      },\n      __self: this\n    }, \"output\"), \" tag is used to represent the result of a calculation.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1043\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1044\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1045\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: outputs,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1046\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1052\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1053\n      },\n      __self: this\n    }, \"25. Section\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1054\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1055\n      },\n      __self: this\n    }, \"Defines a section in a document.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1056\n      },\n      __self: this\n    }, \"Global Attributes.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1057\n      },\n      __self: this\n    }, \"Also supports the Event Attributes in HTML.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1059\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: section,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1060\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1066\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1067\n      },\n      __self: this\n    }, \"26. Quotation and Citation Elements\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1068\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1069\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1070\n      },\n      __self: this\n    }, \"q: \"), \"Short Quotations.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1072\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1073\n      },\n      __self: this\n    }, \"abbr: \"), \"For Abbreviations\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1075\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1076\n      },\n      __self: this\n    }, \"bdo: \"), \"For Bi-Directional Override\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1079\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: quotation,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1080\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1086\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1087\n      },\n      __self: this\n    }, \"27. How can we create a new HTML element?\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1088\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: element,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1089\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1095\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1096\n      },\n      __self: this\n    }, \"28. What is a meter tag? What is the difference between progress tag and a meter tag?\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1100\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1101\n      },\n      __self: this\n    }, \"Defines a scalar measurement within a known range or a fractional value. We can also call it a gauge.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1105\n      },\n      __self: this\n    }, \"Items represented using 'meter' tag are Disk usage, the relevance of a query resot.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1109\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1110\n      },\n      __self: this\n    }, \"N: \"), \" The 'meter' tag should not be used to indicate progress. For progress bars, use the 'progress' tag.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1114\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1115\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: metertags,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1116\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1122\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1123\n      },\n      __self: this\n    }, \"The 'meter' tag provides the support of the following attributes.\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1127\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1128\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1129\n      },\n      __self: this\n    }, \"min: \"), \"Specifies the minimum value of the range.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1131\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1132\n      },\n      __self: this\n    }, \"max: \"), \"Specifies the maximum value of the range.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1134\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1135\n      },\n      __self: this\n    }, \"low: \"), \"Defines a range that represents 'low' value.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1137\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1138\n      },\n      __self: this\n    }, \"high: \"), \"Defines a range that represents \\u201Chigh\\u201D value.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1140\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1141\n      },\n      __self: this\n    }, \"value: \"), \"Mandatory element. It defines the current value of the gauge.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1144\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1145\n      },\n      __self: this\n    }, \"optimum: \"), \"Mandatory element with a numeric value. It specifies the optimum, or the best value, for the element. If this value is higher than the \\u201Chigh\\u201D value, this indicates that the higher the value, the better it is. If it\\u2019s lesser than the 'low' mark, it means that the lower values are better. If it is, in between, then it indicates that neither high nor low values are good.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1153\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1154\n      },\n      __self: this\n    }, \"form: \"), \"It specifies one/ more forms that define the 'meter' element. It has value form_id.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1158\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1159\n      },\n      __self: this\n    }, \"29. Web Workers API\"), \"A web worker is a JavaScript running in the background, without affecting the performance of the page.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1162\n      },\n      __self: this\n    }), \"When executing scripts in an HTML page, the page becomes unresponsive until the script is finished.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1165\n      },\n      __self: this\n    }), \"A web worker is a JavaScript that runs in the background, independently of other scripts, without affecting the performance of the page. You can continue to do whatever you want. clicking, selecting things, etc., while the web worker runs in the background.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1171\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1172\n      },\n      __self: this\n    }), \"Web Workers are initialized with the URL of a JavaScript file, which contains the code the worker will execute. This code sets event listeners and communicates with the script that spawned it from the main page.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1177\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1178\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1179\n      },\n      __self: this\n    }, \"Types of Web Workers:\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1180\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1181\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1182\n      },\n      __self: this\n    }, \"Dedicated Web Workers: \"), \"The dedicated worker can be accessed by only one script which has called it.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1185\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1186\n      },\n      __self: this\n    }, \"Shared Web Workers: \"), \"It can be shared by moltiple scripts and can communicate using the port. Shared workers can be accessed by different windows, iframes or workers.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1191\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1192\n      },\n      __self: this\n    }, \"Since Web workers are in external files, they do not have access to the following JavaScript objects.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1196\n      },\n      __self: this\n    }), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1197\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1198\n      },\n      __self: this\n    }, \"The window object\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1199\n      },\n      __self: this\n    }, \"The document object\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1200\n      },\n      __self: this\n    }, \"The parent object\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1202\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1203\n      },\n      __self: this\n    }, \"30. How does a Web worker work?\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1204\n      },\n      __self: this\n    }), \"A Web worker gets initialized with the URL of a JavaScript file that contains its code. This code sets event listeners and starts communication with the script that invoked the worker from the main page. The Syntax is as follows.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1208\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: workerWorker,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1209\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1215\n      },\n      __self: this\n    }, \"31. Server-Sent Events - One Way Messaging\"), \"A server-sent event is when a web page automatically gets updates from a server.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1217\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1218\n      },\n      __self: this\n    }, \"HTML5 Server-Sent Events (SSE) is a new way for the web pages to communicate with the web server. It enables a webpage to get updates from a server automatically. It was possible earlier also, but for this, the web page needs to ask if any updates were available. The client makes a request and waits for the server to respond with data. Once the web server provides its response, the communication is over.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1227\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1228\n      },\n      __self: this\n    }, \"However, there are some situations, where web pages require a long-term connection with the web server. A typical example is stock quotes on finance websites where price update happens automatically. Other examples are news feeds, sports results that run continuously on media websites, Facebook/ Twitter updates.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1236\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1237\n      },\n      __self: this\n    }, \"We can achieve the above, using HTML5 using SSE. It enables a web page to hold an open connection to the web server so that it can send a response automatically at any time. Thus there\\u2019s no need to reconnect and run the same server script from scratch over and over again.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1245\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1246\n      },\n      __self: this\n    }, \"32. Receive Server-Sent Event Notifications.\"), \"The EventSource interface contains the Server-Sent event API. We need to create an EventSource object to receive the Server-Sent event notifications.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1250\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1251\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1252\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: serverSentEvent,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1253\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1259\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1260\n      },\n      __self: this\n    }, \"Above code performs following steps.\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1261\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1262\n      },\n      __self: this\n    }, \"First, create a new EventSource object, and specify the URL of the page sending the updates\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1266\n      },\n      __self: this\n    }, \"Every time an update arrives, onmessage event gets triggered.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1269\n      },\n      __self: this\n    }, \"When an onmessage event occurs, it places the received data into the element that has id = result.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1274\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1275\n      },\n      __self: this\n    }, \"33. What is the concept of Application Cache in HTML5? What are its advantages?\"), \"Following are the key advantages of Application Cache.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1280\n      },\n      __self: this\n    }), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1281\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1282\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1283\n      },\n      __self: this\n    }, \"Offline browsing \\u2013\"), \"Users can use the application even when they are offline.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1286\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1287\n      },\n      __self: this\n    }, \"Speed \\u2013 \"), \"Cached resources load faster as compared to content that gets downloaded, directly from the server.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1290\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1291\n      },\n      __self: this\n    }, \"Reduced server load \\u2013\"), \"The browser will only download/ updated/ modified resources from the server.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1295\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1296\n      },\n      __self: this\n    }, \"34. What is a Manifest file?\"), \"A Manifest file is a simple text file, that tells the browser what to cache and what not.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1299\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1300\n      },\n      __self: this\n    }), \"A Manifest file contains three Sections as\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1302\n      },\n      __self: this\n    }), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1303\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1304\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1305\n      },\n      __self: this\n    }, \"CACHE MANIFEST \\u2013 \"), \"HTML5 performs the caching of files listed under this section after they get downloaded for the first time.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1309\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1310\n      },\n      __self: this\n    }, \"NETWORK \\u2013 \"), \"Files listed here, always need a connection to the server. The browser can never cache them.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1313\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1314\n      },\n      __self: this\n    }, \"FALLBACK \\u2013\"), \" Files listed here specify the fallback pages, if any page in it is not accessible.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1318\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1319\n      },\n      __self: this\n    }, \"35. What are the new features introduced in HTML5?\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1320\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1321\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1322\n      },\n      __self: this\n    }, \"New Semantic Elements \\u2013\"), \"'header', 'footer', and 'section'.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1325\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1326\n      },\n      __self: this\n    }, \"Forms 2.0 \\u2013\"), \" It contains improvements to HTML web forms. It has introduced new attributes for the 'input' tag.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1329\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1330\n      },\n      __self: this\n    }, \"Persistent Local Storage \\u2013\"), \"With HTML5, it is possible to achieve \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1331\n      },\n      __self: this\n    }, \"Local Storage\"), \", without resorting to third-party plugins.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1334\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1335\n      },\n      __self: this\n    }, \"WebSocket \\u2013\"), \" Setting up a bidirectional communication for web applications.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1338\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1339\n      },\n      __self: this\n    }, \"Server-Sent Events(SSE) \\u2013\"), \"The direction of the flow of the execution of these events is from the server to the Web Browser.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1343\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1344\n      },\n      __self: this\n    }, \"Canvas \\u2013\"), \" It supports a 2D drawing surface that is programmable using JavaScript.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1347\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1348\n      },\n      __self: this\n    }, \"Geolocation \\u2013\"), \" It facilitates the visitors to share their physical location with the web application.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1351\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1352\n      },\n      __self: this\n    }, \"Microdata \\u2013\"), \" It allows building our personal vocaolary beyond HTML5 and extends our web pages with those custom semantics.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1356\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1357\n      },\n      __self: this\n    }, \"Drag and drop \\u2013\"), \" It supports to Drag and Drop the items from one location to another location on the same Web page.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1361\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1362\n      },\n      __self: this\n    }, \"36. What are the various tags provided for better structuring in HTML5?\"), \"HTML5 provides several new tags that are designed to provide better structuring and organization of content. These tags are known as semantic tags and are designed to help web developers create web pages that are more readable, accessible, and search engine friendly. Here are some of the tags provided for better structuring in HTML5:\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1372\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1373\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1374\n      },\n      __self: this\n    }, \"article: \"), \"This tag defines an article.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1377\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1378\n      },\n      __self: this\n    }, \"details: \"), \"It outlines the additional details that a user can hide or view as per choice.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1381\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1382\n      },\n      __self: this\n    }, \"dialog: \"), \"It defines a dialog box.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1384\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1385\n      },\n      __self: this\n    }, \"figure: \"), \"This tag specifies content like illustrations, diagrams, photos, code listings, etc.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1388\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1389\n      },\n      __self: this\n    }, \"figcaption: \"), \"It provides a caption for a 'figure' element.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1392\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1393\n      },\n      __self: this\n    }, \"footer: \"), \"This tag defines a footer for a document or a section.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1396\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1397\n      },\n      __self: this\n    }, \"header: \"), \"This tag describes a header for a document or a section.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1400\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1401\n      },\n      __self: this\n    }, \"hgroup: \"), \"When there are oltiple levels in a heading, it groups a set of 'h1' to 'h6' elements.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1405\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1406\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1407\n      },\n      __self: this\n    }, \"37. Describe Form Input Types in HTML5?\"), \"HTML5 provides a variety of form input types that can be used to collect different types of data from users. These input types can be specified using the \\\"type\\\" attribute on the \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1410\n      },\n      __self: this\n    }, \"input\"), \" \", \"element. Some of the most commonly used input types are:\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1412\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1413\n      },\n      __self: this\n    }, \"Text Input\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1414\n      },\n      __self: this\n    }, \"Password Input\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1415\n      },\n      __self: this\n    }, \"Number Input\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1416\n      },\n      __self: this\n    }, \"Range Input\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1417\n      },\n      __self: this\n    }, \"Checkbox\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1418\n      },\n      __self: this\n    }, \"Radio Buttons\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1419\n      },\n      __self: this\n    }, \"Select\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1420\n      },\n      __self: this\n    }, \"Date Input\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1421\n      },\n      __self: this\n    }, \"Time Input\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1422\n      },\n      __self: this\n    }, \"File Input\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1423\n      },\n      __self: this\n    }, \"Search Input\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1424\n      },\n      __self: this\n    }, \"Email Input\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1425\n      },\n      __self: this\n    }, \"Tel Input\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1426\n      },\n      __self: this\n    }, \"Color Input\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1428\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1429\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: address,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1430\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1436\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1437\n      },\n      __self: this\n    }, \"38. What are the new attributes provided in HTML5 for 'input' element?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1441\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1442\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1443\n      },\n      __self: this\n    }, \"autocomplete: \"), \"This attribute is used to specify whether a browser should automatically complete the input field based on the user's previous inputs. It can take values like \\\"on\\\" or \\\"off\\\".\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1448\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1449\n      },\n      __self: this\n    }, \"autofocus: \"), \"This attribute is used to specify that an input field should automatically get focus when the page loads.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1453\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1454\n      },\n      __self: this\n    }, \"required: \"), \"This attribute is used to indicate that an input field must be filled out before the form can be submitted.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1458\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1459\n      },\n      __self: this\n    }, \"min and max: \"), \"These attributes can be used to set minimum and maximum values for number and date inputs.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1462\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1463\n      },\n      __self: this\n    }, \"pattern: \"), \"This attribute is used to specify a regular expression that the value of the input field must match.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1466\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1467\n      },\n      __self: this\n    }, \"step: \"), \"This attribute is used for number inputs and specifies the interval between valid values.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1470\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1471\n      },\n      __self: this\n    }, \"list: \"), \"This attribute is used to associate an input field with a datalist element, which provides a list of suggested values for the input field.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1476\n      },\n      __self: this\n    }), \"These attributes provide developers with more control over the behavior and appearance of input fields, allowing for a more user-friendly experience for the end user.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1480\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1481\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1482\n      },\n      __self: this\n    }, \"39. How can we club two or more rows or columns into a single row or column in an HTML table?\"), \"With \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1486\n      },\n      __self: this\n    }, \"rowspan\"), \" and \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1486\n      },\n      __self: this\n    }, \"colspan\"), \" to make a cell span to multiple rows and columns respectively.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1488\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1489\n      },\n      __self: this\n    }, \"40. How is Cell Padding different from Cell Spacing?\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1490\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1491\n      },\n      __self: this\n    }, \"HTML tables can adjust the padding inside the cells, and also the space between the cells.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1495\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1496\n      },\n      __self: this\n    }, \"Cell Spacing: \")), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1498\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1499\n      },\n      __self: this\n    }, \"Cell spacing is the space between each cell.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1500\n      },\n      __self: this\n    }, \"By default the space is set to 2 pixels.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1502\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1504\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1505\n      },\n      __self: this\n    }, \"Cell Padding: \")), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1507\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1508\n      },\n      __self: this\n    }, \"is the space between the cell edges and the cell content.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1511\n      },\n      __self: this\n    }, \"By default the padding is set to 0.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1512\n      },\n      __self: this\n    }, \"To add padding on table cells, use the CSS padding property.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1517\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1518\n      },\n      __self: this\n    }, \"41. What is HTML5 Graphics?\"), \"HTML5 Graphics is a term used to refer to the various graphics-related features and technologies that are part of the HTML5 standard. HTML5 introduces new and improved ways of creating and displaying graphics on the web, without the need for third-party plugins like Adobe Flash.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1524\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1525\n      },\n      __self: this\n    }), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1526\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1527\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1528\n      },\n      __self: this\n    }, \"Canvas element: \"), \"The canvas element provides a drawing surface that can be used to create 2D or 3D graphics, animations, and games using JavaScript.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1532\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1533\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1534\n      },\n      __self: this\n    }, \"Scalable Vector Graphics (SVG): \"), \"Is a vector graphics format that allows for the creation of complex, resolution-independent images and animations using XML.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1538\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1539\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1540\n      },\n      __self: this\n    }, \"CSS3: \"), \"CSS3 introduces new features for styling graphics, including gradients, transformations, and animations.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1544\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1545\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1546\n      },\n      __self: this\n    }, \"Web Graphics Library (WebGL): \"), \"WebGL is a JavaScript API for rendering interactive 3D graphics within a web browser, using the graphics hardware on a user's device.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1550\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1551\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1552\n      },\n      __self: this\n    }, \":Media elements \"), \"HTML5 provides new and improved ways of embedding audio and video content into web pages, including support for playback controls, subtitles, and captioning.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1557\n      },\n      __self: this\n    }), \"HTML5 Graphics make it easier for developers to create rich and interactive web applications with improved performance and accessibility, while also reducing the reliance on third-party plugins.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1562\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1563\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1564\n      },\n      __self: this\n    }, \"42. Explain the key differences between SVG and Canvas?\"), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1565\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1566\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1567\n      },\n      __self: this\n    }, \"Property\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1568\n      },\n      __self: this\n    }, \"SVG\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1569\n      },\n      __self: this\n    }, \"Canvas\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1571\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1572\n      },\n      __self: this\n    }, \"Resolution dependent\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1573\n      },\n      __self: this\n    }, \"No\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1574\n      },\n      __self: this\n    }, \"Yes\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1576\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1577\n      },\n      __self: this\n    }, \"Games\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1578\n      },\n      __self: this\n    }, \"Not suitable for gaming.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1579\n      },\n      __self: this\n    }, \"Canvas is suitable for graphic-intensive games.\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1581\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1582\n      },\n      __self: this\n    }, \"Rendering areas\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1583\n      },\n      __self: this\n    }, \"Suitable for large rendering areas like Google maps.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1584\n      },\n      __self: this\n    }, \"Canvas is suitable for small rendering areas.\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1586\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1587\n      },\n      __self: this\n    }, \"Animation\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1588\n      },\n      __self: this\n    }, \"Interface provided by SVG is very highly interactive.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1589\n      },\n      __self: this\n    }, \"Canvas provides a less interactive animated user interface.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1594\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1595\n      },\n      __self: this\n    }, \"43. Drag and Drop API\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1596\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: dragDrop,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1597\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1603\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1604\n      },\n      __self: this\n    }, \"44. Geolocation API\"), \"The HTML Geolocation API is used to locate a user's position.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1606\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1607\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1608\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: geolocation,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1609\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Html1);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/css/html_1.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","accept","trim","iframe","autocapitalize","audio","video","capture","textarea","area","object","optgroup","outputs","section","geolocation","dragDrop","workerWorker","serverSentEvent","element","Session","pres","htmlStyles","quotation","address","htmltags","metertags","grisCont","tablerow","threeImg","imgtags","roundCor","Html1","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../ReactJs/styles.css\";\nimport Sidebar from \"./sidebar\";\nimport PrismCode from \"../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst accept = `\n<input type=\"file\" id=\"soundFile\" accept=\"audio/*\">\n<input type=\"file\" id=\"videoFile\" accept=\"video/*\">\n<input type=\"file\" id=\"imageFile\" accept=\"image/*\" multiple>\n<input type=\"file\" id=\"profile_pic\" name=\"profile_pic\" accept=\".jpg, .jpeg, .png\">\n `.trim();\n\nconst iframe = `\n<iframe src=\"https://example.org\"\n    title=\"iframe\" width=\"400\" height=\"300\">\n</iframe>\n\n\n//\n<address>Delhi, India</address>\n\n\n//\n<citr>The Title Of Books</citr> Book written by ...\n\n\n//\n<marquee direction=\"right\">Moving Text</marquee>\n<marquee direction=\"up\">Moving Text</marquee><br/>\n `.trim();\n\nconst autocapitalize = `\n#syntex\n<tag_name autocapitalize=\"off | none | on | sentences | words | characters\" />\n\n\n#Ex.\ndiv.a { text-transform: uppercase/ lowercase/ capitalize; }\n<div class=\"a\">Uppercase.</div>\n\n\n//\n<a href=\"https://www.google.com\" target=\"_blank\">Open new tab</a><br/>\n<a href=\"#local\">SPA</a>\n<p id=\"local\">Move to SPA Block</p>\n`.trim();\n\nconst audio = `\n<figure>\n    <figcaption>Listen to the T-Rex:</figcaption>\n    <audio controls>\n      <source src=\"horse.mp3\" type=\"audio/mpeg\">\n    </audio>\n</figure>`.trim();\n\nconst video = `\n<video width=\"320\" height=\"240\" controls>\n  <source src=\"movie.mp4\" type=\"video/mp4\">\n  <source src=\"movie.ogg\" type=\"video/ogg\">\n</video>\n`.trim();\n\nconst capture = `\n\t<input type=\"file\" id=\"soundFile\" capture=\"user\" accept=\"audio/*\">\n<input type=\"file\" id=\"videoFile\" capture=\"environment\" accept=\"video/*\">\n<input type=\"file\" id=\"imageFile\" capture=\"user\" accept=\"image/*\">\n`.trim();\n\nconst textarea = `\n<textarea id=\"story\" name=\"story\" rows=\"5\" cols=\"33\">\n  It was a dark and stormy night...\n</textarea>\n`.trim();\n\nconst area = `\n<map name=\"planetmap\">\n  <area shape=\"rect\" coords=\"0,0,82,126\" alt=\"Sun\" href=\"sun.htm\">\n  <area shape=\"circle\" coords=\"90,58,3\" alt=\"Mercury\" href=\"mercur.htm\">\n  <area shape=\"circle\" coords=\"124,58,8\" alt=\"Venus\" href=\"venus.htm\">\n</map>\n`.trim();\n\nconst object = `\n<object data=\"movie.mp4\" width=\"400\" height=\"300\"></object>\n\n<object data=\"snippet.html\" width=\"500\" height=\"200\"></object>\n`.trim();\n\nconst optgroup = `\n<form action=\"/action_page.php\">\n  <label for=\"cars\">Choose a car:</label>\n  <select name=\"cars\" id=\"cars\">\n    <optgroup label=\"Swedish Cars\">\n      <option value=\"volvo\">Volvo</option>\n      <option value=\"saab\">Saab</option>\n    </optgroup>\n  </select>\n  <input type=\"submit\" value=\"Submit\">\n</form>\n`.trim();\n\nconst outputs = `\n<form oninput=\"x.value=parseInt(a.value)+parseInt(b.value)\">\n  <input type=\"range\" id=\"a\" value=\"50\">\n  +<input type=\"number\" id=\"b\" value=\"25\">\n  =<output name=\"x\" for=\"a b\"></output>\n</form>\n`.trim();\n\nconst section = `\n<section>\n  <p>The he World Wildlife Fund. WWF was founded in 1961.</p>\n</section>\n`.trim();\n\nconst geolocation = `\n//index.js\nfunction getLocation() {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(showPosition);\n  } else {\n    x.innerHTML = \"Geolocation is not supported by this browser.\";\n  }\n}\n\nfunction showPosition(position) {\n  x.innerHTML = \"Latitude: \" + position.coords.latitude +\n    \"<br>Longitude: \" + position.coords.longitude;\n}\n\nvar x = document.getElementById(\"demo\");\n\n\n//index.html\n  <body>\n    <button onclick=\"getLocation()\">Get Location</button>\n    <p id=\"demo\"></p>\n    <script type=\"text/javascript\" src=\"index.js\"></script>\n  </body>\n`.trim();\n\nconst dragDrop = `\n//index.js\nfunction allowDrop(ev) {\n  ev.preventDefault();\n}\n\nfunction drag(ev) {\n  ev.dataTransfer.setData(\"text\", ev.target.id);\n}\n\nfunction drop(ev) {\n  ev.preventDefault();\n  var data = ev.dataTransfer.getData(\"text\");\n  ev.target.appendChild(document.getElementById(data));\n}\n\n\n//index.html\n<style>\n#div1, #div2 {\n  float: left;\n  width: 100px;\n  height: 35px;\n  border: 1px solid black;\n}\n</style>\n  <script type=\"text/javascript\" src=\"index.js\"></script>\n</head>\n\n<body>\n<div id=\"div1\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\">\n  <img src=\"img_w3slogo.gif\" draggable=\"true\" ondragstart=\"drag(event)\" id=\"drag1\" width=\"88\" height=\"31\">\n</div>\n\n  <div id=\"div2\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\"></div>\n</body>\n`.trim();\n\nconst workerWorker = `var worker = new Worker(\"sample_prog.js\"﴿;`.trim();\n\nconst serverSentEvent = `\nvar source = new EventSource(\"sse_demo.php\");\nsource.onmessage = function(event) {\ndocument.getElementById(\"result\").innerHTML += event.data + \"<br>\";\n};\n`.trim();\n\nconst element = `\n<script>\ndocument.createElement(\"myElement\")\n</script>\n\n\n//It can be used in the HTML as.\n<myElement>hello</myElement>\n`.trim();\n\nconst Session = `\n//Use setItem() function to store data in Session Storage\nsessionStorage.setItem (‘key’,’value’);\n\nsessionStorage.setItem (‘username’,’Meenakshi’)\n\n\n//Use getItem() function to retrieve data from Session Storage\nsessionStorage.getItem(‘key’);\n\nvar username= sessionStorage.getItem(‘username’);\n\n\n/*\n  We can only store String in Session Storage. To save the objects in Session, first, convert \n  the object into JSON string and then store this string in Session Storage as\n*/\n\nsessionStorage.setItem (‘object’, JSON.stringify(object));\n\n\n//If JSON string gets stored in Session Storage, then first convert it into an object as follows.\n\nvar object=JSON.parse(sessionStorage.getItem(‘object’));\n\n\n//Use removeItem() function to delete a particular key from Session Storage.\nsessionStorage.removeItem(‘key’);\n\n`.trim();\n\nconst pres = `\n<pre>\n   My Bonnie lies over the ocean.\n</pre>`.trim();\n\nconst htmlStyles = `\n<tagname style=\"property:value;\">`.trim();\n\nconst quotation = `\nq for: <q>Short Quotations.</q>\n\n<abbr title=\"World Health Organization\">WHO</abbr>\n\n<bdo dir=\"rtl\">This text will be written from right to left</bdo>\n`.trim();\n\nconst address = `\n<p>Email link <a href=\"mailto: admin@gmail.com\">admin@gmail.com</a></p>\n\n\n//\nRead Pdf by embed, iframe and object.\n<embed src=\"CM_Process.pdf\" type=\"application/pdf\"><br/>\n`.trim();\n\nconst htmltags = `\nTags: There are 2 types of HTML Tags.\n1. Cntainer Tag <p></p>\n2. Empty Tag <hr/>\n\nElement: Element is combination of Tag and containt.\nEx. <p>Here is containt</p>\n\nHTML Attributes: Attributes provide additional information about an element.\nAlways specifed in the start tag.\nCome in name/ value pairs. Like name=\"value\"\nEx. <p title=\"about paragraph\">Here is containt</p>\n`.trim();\n\nconst metertags = `\nTemp: <meter min=0 max=10 value=\".5\" low=\"3\" high=\"8\" optimum=\"5\"></meter>\nDownload: <progress max=\"100\" value=\"80\"></progress>\n`.trim();\n\nconst grisCont = `\n<style>\n  .grid-container {\n    display: grid;\n    grid-template-columns: auto auto auto;\n  }\n  .grid-item {\n    background-color: rgba(255, 255, 255, 0.8);\n    border: 1px solid rgba(0, 0, 0, 0.8);\n    text-align: center;\n  }\n</style>\n<body>\n  <div class=\"grid-container\">\n    <p class=\"grid-item\">1</p>\n    <p class=\"grid-item\">2</p>\n    <p class=\"grid-item\">3</p>\n  </div>\n</body>`.trim();\n\nconst tablerow = `\n<style>\n  #customers {\n    width: 100%;\n  }\n\n  #customers td,\n  #customers th {\n    border: 1px solid #ddd;\n    padding: 8px;\n  }\n\n  #customers tr:nth-child(even) {\n    background-color: #f2f2f2;\n  }\n\n  #customers th {\n    text-align: left;\n    background-color: #04aa6d;\n    color: white;\n  }\n</style>\n<body>\n  <table id=\"customers\">\n    <tr>\n      <th>Company</th>\n      <th>Contact</th>\n      <th>Country</th>\n    </tr>\n    <tr>\n      <td>Alfreds Futterkiste</td>\n      <td>Maria Anders</td>\n      <td>Germany</td>\n    </tr>\n    <tr>\n      <td>Berglunds snabbköp</td>\n      <td>Christina Berglund</td>\n      <td>Sweden</td>\n    </tr>\n    <tr>\n      <td>Centro comercial Moctezuma</td>\n      <td>Francisco Chang</td>\n      <td>Mexico</td>\n    </tr>\n  </table>\n</body>\n`.trim();\n\nconst threeImg = `\n<style>\n  .heading {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n  }\n</style>\n<body>\n  <div class=\"heading\">\n    <p>Entrees</p>\n    <p>Drinks</p>\n    <p>Desserts</p>\n  </div>\n</body>`.trim();\n\nconst imgtags = `\n<style>\n  .container {\n    position: relative;\n    text-align: center;\n    color: white;\n  }\n\n  .bottom-left {\n    position: absolute;\n    bottom: 8px;\n    left: 16px;\n  }\n\n  .top-left {\n    position: absolute;\n    top: 8px;\n    left: 16px;\n  }\n\n  .top-right {\n    position: absolute;\n    top: 8px;\n    right: 16px;\n  }\n\n  .bottom-right {\n    position: absolute;\n    bottom: 8px;\n    right: 16px;\n  }\n\n  .centered {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n</style>\n<body>\n  <div class=\"container\">\n    <img src=\"../assets/img_snow.jpg\" alt=\"Snow\" style=\"width: 100%\" />\n    <p class=\"bottom-left\">Bottom Left</p>\n    <p class=\"top-left\">Top Left</p>\n    <p class=\"top-right\">Top Right</p>\n    <p class=\"bottom-right\">Bottom Right</p>\n    <p class=\"centered\">Centered</p>\n  </div>\n</body>`.trim();\n\nconst roundCor = `\n<style>\n  #rcorners1 {\n    border-radius: 25px;\n    background: #73ad21;\n    padding: 20px;\n    width: 200px;\n    height: 150px;\n  }\n</style>\n<body>\n  <p id=\"rcorners1\">Rounded corners!</p>\n</body>\n\n`.trim();\n\nclass Html1 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Grid</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={grisCont}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>2. Table</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={tablerow}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>3. Three image inline</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={threeImg}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>4. Image with text</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={imgtags}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>5. RoundCorner</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={roundCor}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <ol>\n                <li>\n                  <b>Html: </b>Structure\n                </li>\n                <li>\n                  <b>css: </b>Styles\n                </li>\n              </ol>\n              <br />\n              <b>\n                Div and Span are used to structure webpage. They are structure\n                element.\n              </b>\n              <ol>\n                <li>\n                  <b>div: </b>Block Element\n                </li>\n                <li>\n                  <b>span: </b>Inline Element\n                </li>\n              </ol>\n              <br />\n              <h3>1. What is a tag in HTML?</h3>\n              A tag instructs the Browser about how to format the HTML properly.\n              <br />\n              <h3>2. What is the difference between HTML elements and tags?</h3>\n              The HTML element is everything from the start tag to the end tag.\n              HTML elements become HTML tags when enclosed within angular\n              brackets.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={htmltags}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>3. HTML Attributes</h3>\n              HTML attributes provide additional information about HTML\n              elements.\n              <ol>\n                <li>\n                  All HTML elements can have <b>attributes.</b>\n                </li>\n                <li>\n                  Attributes are always specified in <b>the start tag.</b>\n                </li>\n                <li>\n                  Attributes usually come in name/value pairs like:{\" \"}\n                  <b>name=\"value\"</b>\n                </li>\n              </ol>\n              <br />\n              <br />\n              <h3>\n                What is the purpose of DOCTYPE in HTML, and what are some\n                different types of DOCTYPEs?\n              </h3>\n              The DOCTYPE declaration in HTML is used to specify the version of\n              HTML or XHTML used in a web document. It informs the browser how\n              to render the page and what rules to follow when parsing the code.\n              <br />\n              <br />\n              There are several types of DOCTYPEs:\n              <ul>\n                <li>\n                  <b>HTML5 DOCTYPE: </b>!DOCTYPE html\n                </li>\n                <br />\n                <li>\n                  <b>XHTML 1.0 Strict DOCTYPE: </b>!DOCTYPE html PUBLIC\n                  \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n                  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\n                </li>\n                <br />\n                <li>\n                  <b>HTML 4.01 Strict DOCTYPE: </b>!DOCTYPE HTML PUBLIC\n                  \"-//W3C//DTD HTML 4.01//EN\"\n                  \"http://www.w3.org/TR/html4/strict.dtd\"\n                </li>\n                <br />\n                <li>\n                  <b>Transitional DOCTYPEs: </b>HTML 4.01 Transitional and XHTML\n                  1.0 Transitional\n                </li>\n                <br />\n                <li>\n                  <b>Frameset DOCTYPEs: </b>HTML 4.01 Frameset and XHTML 1.0\n                  Frameset\n                </li>\n                <br />\n              </ul>\n              The DOCTYPE should be placed at the beginning of the HTML document\n              before any other tags. It is important to include a DOCTYPE\n              declaration to ensure that the web page is rendered correctly in\n              all browsers.\n              <br />\n              <br />\n              <h3>\n                Explain the difference between HTML and XHTML (Extensible\n                Hypertext Markup Language) .\n              </h3>\n              <ul>\n                <li>\n                  <b>Syntax: </b>HTML syntax is more forgiving, allowing for\n                  unclosed tags, missing attributes, and more. XHTML, on the\n                  other hand, requires well-formed XML syntax, with all tags\n                  properly closed and attributes quoted.\n                </li>\n                <br />\n                <li>\n                  <b>Document structure: </b>HTML does not require a document\n                  type declaration, while XHTML requires a specific DOCTYPE\n                  declaration at the beginning of the document.\n                </li>\n                <br />\n                <li>\n                  <b>Validation: </b>HTML validation is done against a set of\n                  rules, while XHTML validation is done against a specific XML\n                  schema.\n                </li>\n                <br />\n                <li>\n                  <b>MIME type: </b>HTML is served with a text/html MIME type,\n                  while XHTML is served with an application/xhtml+xml MIME type.\n                </li>\n                <br />\n                <li>\n                  <b>Browser support: </b>Most modern browsers support both HTML\n                  and XHTML, but older browsers may have difficulty with XHTML\n                  due to its stricter syntax.\n                </li>\n                <br />\n              </ul>\n              In summary, XHTML is a stricter and more standardized version of\n              HTML that is based on XML syntax. It requires well-formed XML\n              syntax and a specific DOCTYPE declaration, and is validated\n              against an XML schema. While both languages are used for creating\n              web pages, HTML is more forgiving and easier to work with, while\n              XHTML offers greater standardization and stricter rules.\n              <br />\n              <br />\n              <h3>\n                What are the different types of form inputs in HTML, and how do\n                you use them?\n              </h3>\n              HTML provides different types of form inputs that allow users to\n              enter data in various ways. Some of the commonly used form inputs\n              are:\n              <ul>\n                <li>\n                  <b>Text Input: </b>Text input is used to get a single line of\n                  text input from the user. It is created using the 'input'\n                  element with the type attribute set to \"text\".\n                </li>\n                <br />\n                <li>\n                  <b>Password Input: </b>Password input is used to get a\n                  password input from the user. It is created using the 'input'\n                  element with the type attribute set to \"password\".{\" \"}\n                </li>\n                <br />\n                <li>\n                  <b>Checkbox Input: </b>Checkbox input is used to get binary\n                  input from the user (yes or no, true or false). It is created\n                  using the 'input' element with the type attribute set to\n                  \"checkbox\".{\" \"}\n                </li>\n                <br />\n                <li>\n                  <b>Radio Input: </b> Radio input is used to get a single value\n                  from a list of options. It is created using the 'input'\n                  element with the type attribute set to \"radio\"\n                </li>\n                <br />\n                <li>\n                  <b>Select Input: </b>Select input is used to get a single\n                  value from a list of options. It is created using the 'select'\n                  element with 'option' elements as its child nodes.\n                </li>\n                <br />\n                <li>\n                  <b>Textarea Input: </b>Textarea input is used to get a\n                  multiline text input from the user. It is created using the\n                  'textarea' element.{\" \"}\n                </li>\n                <br />\n                <li>\n                  <b>File Input: </b>File input is used to get a file from the\n                  user. It is created using the 'input' element with the type\n                  attribute set to \"file\"\n                </li>\n                <br />\n                <li>\n                  <b>: </b>These are some of the commonly used form inputs in\n                  HTML, and there are many more types of form inputs available\n                  in HTML.\n                </li>\n                <br />\n              </ul>\n              <br />\n              <br />\n              <h3>What are the different ways to include external stylesheets in an HTML document, and what are the advantages and disadvantages of each?</h3>\n              There are three main ways to include external stylesheets in an HTML document:\n                  <ul>\n                    <li><b>: </b></li><br/>\n                    <li><b>: </b></li><br/>\n                  </ul>\n\n              <br />\n              <br />\n              <h3>4. pre Element</h3>\n              <ol>\n                <li>The HTML 'pre' element defines preformatted text.</li>\n                <li>\n                  The text inside a 'pre' element is displayed in a fixed-width\n                  font (usually Courier), and it preserves both spaces and line\n                  breaks.\n                </li>\n              </ol>\n              <div style={titles}>\n                <PrismCode\n                  code={pres}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>5. HTML Style Attribute</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={htmlStyles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                6. What is the difference between the ‘id’ attribute and the\n                ‘class’ attribute of HTML elements?\n              </h3>\n              <ol>\n                <li>\n                  {\" \"}\n                  Multiple elements in HTML can have the same class value.\n                </li>\n                <li>\n                  id attribute of one element cannot be associated with another\n                  HTML element.\n                </li>\n              </ol>\n              <br />\n              <h3>7. Non-semantic elements</h3>\n              These elements are without any definition. They don’t describe\n              anything about their structure such as 'span' and 'div'.\n              <br />\n              <h3>8. What are void elements in HTML?</h3>\n              HTML elements which don't have closing Tags are Void elements.{\" \"}\n              <b>Ex. </b>br, img, hr, etc.\n              <br />\n              <h3>\n                9. Is it possible to change an inline element into a block level\n                element?\n              </h3>\n              Yes, it is possible using the <b>display</b> property with its\n              value as “block”, to change the inline element into a block-level\n              elemen.\n              <br />\n              <h3>\n                10. What would happen if the HTML Document does not contain\n                '!DOCTYPE'?\n              </h3>\n              <ol>\n                <li>\n                  It instructs the Web Browser about the version of HTML used\n                  for creating the Web page.\n                </li>\n                <li>\n                  <b>What happens if you miss !DOCTYPE.</b>\n                </li>\n                <ol>\n                  <li>\n                    then new features and tags provided by HTML5 will not be\n                    supported.\n                  </li>\n                  <li>HTML enter Quirks mode.</li>\n                </ol>\n              </ol>\n              <br />\n              <h3>\n                11. What is the major difference between, Transitional and\n                Strict doctype?\n              </h3>\n              <b>Strict: </b>\n              <br />\n              This DTD contains all HTML components and properties. However, it\n              does NOT INCLUDE presentational or expostulated components (like\n              text style). It does not permit the use of Framesets.\n              <br />\n              <br />\n              <b>Transitional: </b>\n              <br />\n              This DTD contains all HTML components and properties, INCLUDING\n              presentational and belittled components (like textual style). It\n              does not allow the use of Framesets.\n              <br />\n              <h3>12. What are the different kinds of Doctypes available?</h3>\n              <ol>\n                <li>Strict Doctype</li>\n                <li>Transitional Doctype</li>\n                <li>Frameset Doctype</li>\n              </ol>\n              <br />\n              <h3>\n                13. Most Important HTML Tags for SEO, This tags should goes\n                inside head tags.\n              </h3>\n              <ol>\n                <li>\n                  <b>title: </b>This tag defines the title of a web page and\n                  appears in the search engine results as the clickable link.\n                  It's important to include relevant keywords in the title tag\n                  as it helps search engines understand the content of the page.\n                </li>\n                <li>\n                  <b>meta: </b>The meta tags include the description tag and the\n                  keywords tag. The description tag provides a brief description\n                  of the web page, and the keywords tag specifies the keywords\n                  related to the page. Both tags help search engines understand\n                  the content of the page and improve its ranking.\n                </li>\n                <li>\n                  <b>header, footer: </b>The header usually contains the main\n                  navigation and logo, while the footer contains copyright\n                  information and other legal details. Including keywords in\n                  these sections can help improve the SEO of a web page.\n                </li>\n                <li>\n                  <b>h1 to h6: </b>\n                </li>\n                <li>\n                  <b>img: </b>It's important to include relevant alt text in the\n                  img tag as it helps search engines understand the content of\n                  the image\n                </li>\n                <li>\n                  <b>a: </b>Helps search engines understand the content of the\n                  linked page.\n                </li>\n                <li>\n                  <b>strong, em: </b>\n                </li>\n              </ol>\n              <br />\n              It's important to note that while HTML tags can help improve the\n              SEO of a web page, they should be used in a natural and relevant\n              way. Overusing or stuffing keywords into tags can actually harm\n              the SEO of a web page.\n              <br />\n              <br />\n              <h3>14. Accept</h3>\n              <b>input</b> accept Attribute is used to specifies the type of\n              file that the server accepts.\n              <div style={titles}>\n                <PrismCode\n                  code={accept}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>15. iframe</h3>\n              <ol>\n                <li>The iframe tag specifies an inline frame.</li>\n                <li>\n                  An inline frame is used to embed another document within the\n                  current HTML document.\n                </li>\n              </ol>\n              <div style={titles}>\n                <PrismCode\n                  code={iframe}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>16. Autocapitalize</h3>\n              autocapitalize attribute is used to define whether the text\n              present inside the HTML element should be automatically\n              capitalized or not.\n              <b>Features: </b>\n              <br />\n              <ol>\n                <li>\n                  It specifies how the text will be automatically capitalized.\n                </li>\n                <li>\n                  It indicates that the first letter of the word or sentence\n                  would be in Capital.\n                </li>\n                <li>\n                  It does not support input tag with type URL, Email, and\n                  Password.\n                </li>\n                <li>It is a Global Attribute.</li>\n              </ol>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={autocapitalize}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>17. Audio</h3>\n              <b>audio</b> element is used to play an audio file on a web page.\n              <ol>\n                <li>\n                  <b>embed -</b>It provides a container for an external\n                  application.\n                </li>\n                <li>\n                  <b>track -</b>It defines text tracks for video and audio.\n                </li>\n              </ol>\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={audio}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>18. Video</h3>\n              <b>video</b> element is used to show a video on a web page.\n              <div style={titles}>\n                <PrismCode\n                  code={video}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>19. Capture</h3>\n              The capture attribute specifies that, optionally, a new file\n              should be captured, and which device should be used to capture\n              that new media of a type defined by the accept attribute.\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={capture}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>20. Textarea</h3>\n              <ol>\n                <li>Defines a multi-line text input control.</li>\n                <li>\n                  textarea element is often used in a form, to collect user\n                  inputs like comments or reviews.\n                </li>\n                <li>\n                  The size of a text area is specified by the <b>cols</b> and{\" \"}\n                  <b>rows</b> attributes\n                </li>\n              </ol>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={textarea}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>21. Area</h3>\n              <ol>\n                <li>\n                  The <b>area</b> tag defines an area inside an image map.\n                </li>\n                <li>\n                  <b>area</b> elements are always nested inside a <b>map</b>{\" \"}\n                  tag.\n                </li>\n              </ol>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={area}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>22. Object</h3>\n              <ol>\n                <li>\n                  <b>object</b> tag defines a container for an external\n                  resource.\n                </li>\n                <li>\n                  The external resource can be a web page, a picture, a media\n                  player, or a plug-in application.\n                </li>\n              </ol>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={object}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>23. Optgroup</h3>\n              The <b>optgroup</b> tag is used to group related options in a\n              \"select\" element (drop-down list).\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={optgroup}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>24. Output</h3>\n              <b>output</b> tag is used to represent the result of a\n              calculation.\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={outputs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>25. Section</h3>\n              <ol>\n                <li>Defines a section in a document.</li>\n                <li>Global Attributes.</li>\n                <li>Also supports the Event Attributes in HTML.</li>\n              </ol>\n              <div style={titles}>\n                <PrismCode\n                  code={section}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>26. Quotation and Citation Elements</h3>\n              <ul>\n                <li>\n                  <b>q: </b>Short Quotations.\n                </li>\n                <li>\n                  <b>abbr: </b>For Abbreviations\n                </li>\n                <li>\n                  <b>bdo: </b>For Bi-Directional Override\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={quotation}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>27. How can we create a new HTML element?</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={element}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                28. What is a meter tag? What is the difference between progress\n                tag and a meter tag?\n              </h3>\n              <ol>\n                <li>\n                  Defines a scalar measurement within a known range or a\n                  fractional value. We can also call it a gauge.\n                </li>\n                <li>\n                  Items represented using 'meter' tag are Disk usage, the\n                  relevance of a query resot.\n                </li>\n                <li>\n                  <b>N: </b> The 'meter' tag should not be used to indicate\n                  progress. For progress bars, use the 'progress' tag.\n                </li>\n              </ol>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={metertags}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>\n                The 'meter' tag provides the support of the following\n                attributes.\n              </b>\n              <ol>\n                <li>\n                  <b>min: </b>Specifies the minimum value of the range.\n                </li>\n                <li>\n                  <b>max: </b>Specifies the maximum value of the range.\n                </li>\n                <li>\n                  <b>low: </b>Defines a range that represents 'low' value.\n                </li>\n                <li>\n                  <b>high: </b>Defines a range that represents “high” value.\n                </li>\n                <li>\n                  <b>value: </b>Mandatory element. It defines the current value\n                  of the gauge.\n                </li>\n                <li>\n                  <b>optimum: </b>Mandatory element with a numeric value. It\n                  specifies the optimum, or the best value, for the element. If\n                  this value is higher than the “high” value, this indicates\n                  that the higher the value, the better it is. If it’s lesser\n                  than the 'low' mark, it means that the lower values are\n                  better. If it is, in between, then it indicates that neither\n                  high nor low values are good.\n                </li>\n                <li>\n                  <b>form: </b>It specifies one/ more forms that define the\n                  'meter' element. It has value form_id.\n                </li>\n              </ol>\n              <br />\n              <h3>29. Web Workers API</h3>\n              A web worker is a JavaScript running in the background, without\n              affecting the performance of the page.\n              <br />\n              When executing scripts in an HTML page, the page becomes\n              unresponsive until the script is finished.\n              <br />\n              A web worker is a JavaScript that runs in the background,\n              independently of other scripts, without affecting the performance\n              of the page. You can continue to do whatever you want. clicking,\n              selecting things, etc., while the web worker runs in the\n              background.\n              <br />\n              <br />\n              Web Workers are initialized with the URL of a JavaScript file,\n              which contains the code the worker will execute. This code sets\n              event listeners and communicates with the script that spawned it\n              from the main page.\n              <br />\n              <br />\n              <b>Types of Web Workers:</b>\n              <ol>\n                <li>\n                  <b>Dedicated Web Workers: </b>The dedicated worker can be\n                  accessed by only one script which has called it.\n                </li>\n                <li>\n                  <b>Shared Web Workers: </b>It can be shared by moltiple\n                  scripts and can communicate using the port. Shared workers can\n                  be accessed by different windows, iframes or workers.\n                </li>\n              </ol>\n              <br />\n              <b>\n                Since Web workers are in external files, they do not have access\n                to the following JavaScript objects.\n              </b>\n              <br />\n              <ol>\n                <li>The window object</li>\n                <li>The document object</li>\n                <li>The parent object</li>\n              </ol>\n              <br />\n              <b>30. How does a Web worker work?</b>\n              <br />A Web worker gets initialized with the URL of a JavaScript\n              file that contains its code. This code sets event listeners and\n              starts communication with the script that invoked the worker from\n              the main page. The Syntax is as follows.\n              <div style={titles}>\n                <PrismCode\n                  code={workerWorker}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <h3>31. Server-Sent Events - One Way Messaging</h3>A server-sent\n              event is when a web page automatically gets updates from a server.\n              <ol>\n                <li>\n                  HTML5 Server-Sent Events (SSE) is a new way for the web pages\n                  to communicate with the web server. It enables a webpage to\n                  get updates from a server automatically. It was possible\n                  earlier also, but for this, the web page needs to ask if any\n                  updates were available. The client makes a request and waits\n                  for the server to respond with data. Once the web server\n                  provides its response, the communication is over.\n                </li>\n                <br />\n                <li>\n                  However, there are some situations, where web pages require a\n                  long-term connection with the web server. A typical example is\n                  stock quotes on finance websites where price update happens\n                  automatically. Other examples are news feeds, sports results\n                  that run continuously on media websites, Facebook/ Twitter\n                  updates.\n                </li>\n                <br />\n                <li>\n                  We can achieve the above, using HTML5 using SSE. It enables a\n                  web page to hold an open connection to the web server so that\n                  it can send a response automatically at any time. Thus there’s\n                  no need to reconnect and run the same server script from\n                  scratch over and over again.\n                </li>\n              </ol>\n              <br />\n              <h3>32. Receive Server-Sent Event Notifications.</h3>\n              The EventSource interface contains the Server-Sent event API. We\n              need to create an EventSource object to receive the Server-Sent\n              event notifications.\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={serverSentEvent}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>Above code performs following steps.</b>\n              <ol>\n                <li>\n                  First, create a new EventSource object, and specify the URL of\n                  the page sending the updates\n                </li>\n                <li>\n                  Every time an update arrives, onmessage event gets triggered.\n                </li>\n                <li>\n                  When an onmessage event occurs, it places the received data\n                  into the element that has id = result.\n                </li>\n              </ol>\n              <br />\n              <h3>\n                33. What is the concept of Application Cache in HTML5? What are\n                its advantages?\n              </h3>\n              Following are the key advantages of Application Cache.\n              <br />\n              <ol>\n                <li>\n                  <b>Offline browsing –</b>Users can use the application even\n                  when they are offline.\n                </li>\n                <li>\n                  <b>Speed – </b>Cached resources load faster as compared to\n                  content that gets downloaded, directly from the server.\n                </li>\n                <li>\n                  <b>Reduced server load –</b>The browser will only download/\n                  updated/ modified resources from the server.\n                </li>\n              </ol>\n              <br />\n              <h3>34. What is a Manifest file?</h3>\n              A Manifest file is a simple text file, that tells the browser what\n              to cache and what not.\n              <br />\n              <br />\n              A Manifest file contains three Sections as\n              <br />\n              <ol>\n                <li>\n                  <b>CACHE MANIFEST – </b>HTML5 performs the caching of files\n                  listed under this section after they get downloaded for the\n                  first time.\n                </li>\n                <li>\n                  <b>NETWORK – </b>Files listed here, always need a connection\n                  to the server. The browser can never cache them.\n                </li>\n                <li>\n                  <b>FALLBACK –</b> Files listed here specify the fallback\n                  pages, if any page in it is not accessible.\n                </li>\n              </ol>\n              <br />\n              <h3>35. What are the new features introduced in HTML5?</h3>\n              <ol>\n                <li>\n                  <b>New Semantic Elements –</b>'header', 'footer', and\n                  'section'.\n                </li>\n                <li>\n                  <b>Forms 2.0 –</b> It contains improvements to HTML web forms.\n                  It has introduced new attributes for the 'input' tag.\n                </li>\n                <li>\n                  <b>Persistent Local Storage –</b>With HTML5, it is possible to\n                  achieve <b>Local Storage</b>, without resorting to third-party\n                  plugins.\n                </li>\n                <li>\n                  <b>WebSocket –</b> Setting up a bidirectional communication\n                  for web applications.\n                </li>\n                <li>\n                  <b>Server-Sent Events(SSE) –</b>The direction of the flow of\n                  the execution of these events is from the server to the Web\n                  Browser.\n                </li>\n                <li>\n                  <b>Canvas –</b> It supports a 2D drawing surface that is\n                  programmable using JavaScript.\n                </li>\n                <li>\n                  <b>Geolocation –</b> It facilitates the visitors to share\n                  their physical location with the web application.\n                </li>\n                <li>\n                  <b>Microdata –</b> It allows building our personal vocaolary\n                  beyond HTML5 and extends our web pages with those custom\n                  semantics.\n                </li>\n                <li>\n                  <b>Drag and drop –</b> It supports to Drag and Drop the items\n                  from one location to another location on the same Web page.\n                </li>\n              </ol>\n              <br />\n              <h3>\n                36. What are the various tags provided for better structuring in\n                HTML5?\n              </h3>\n              HTML5 provides several new tags that are designed to provide\n              better structuring and organization of content. These tags are\n              known as semantic tags and are designed to help web developers\n              create web pages that are more readable, accessible, and search\n              engine friendly. Here are some of the tags provided for better\n              structuring in HTML5:\n              <ol>\n                <li>\n                  <b>article: </b>This tag defines an article.\n                </li>\n\n                <li>\n                  <b>details: </b>It outlines the additional details that a user\n                  can hide or view as per choice.\n                </li>\n                <li>\n                  <b>dialog: </b>It defines a dialog box.\n                </li>\n                <li>\n                  <b>figure: </b>This tag specifies content like illustrations,\n                  diagrams, photos, code listings, etc.\n                </li>\n                <li>\n                  <b>figcaption: </b>It provides a caption for a 'figure'\n                  element.\n                </li>\n                <li>\n                  <b>footer: </b>This tag defines a footer for a document or a\n                  section.\n                </li>\n                <li>\n                  <b>header: </b>This tag describes a header for a document or a\n                  section.\n                </li>\n                <li>\n                  <b>hgroup: </b>When there are oltiple levels in a heading, it\n                  groups a set of 'h1' to 'h6' elements.\n                </li>\n              </ol>\n              <br />\n              <br />\n              <h3>37. Describe Form Input Types in HTML5?</h3>\n              HTML5 provides a variety of form input types that can be used to\n              collect different types of data from users. These input types can\n              be specified using the \"type\" attribute on the <b>input</b>{\" \"}\n              element. Some of the most commonly used input types are:\n              <ol>\n                <li>Text Input</li>\n                <li>Password Input</li>\n                <li>Number Input</li>\n                <li>Range Input</li>\n                <li>Checkbox</li>\n                <li>Radio Buttons</li>\n                <li>Select</li>\n                <li>Date Input</li>\n                <li>Time Input</li>\n                <li>File Input</li>\n                <li>Search Input</li>\n                <li>Email Input</li>\n                <li>Tel Input</li>\n                <li>Color Input</li>\n              </ol>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={address}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                38. What are the new attributes provided in HTML5 for 'input'\n                element?\n              </h3>\n              <ul>\n                <li>\n                  <b>autocomplete: </b>This attribute is used to specify whether\n                  a browser should automatically complete the input field based\n                  on the user's previous inputs. It can take values like \"on\" or\n                  \"off\".\n                </li>\n                <li>\n                  <b>autofocus: </b>This attribute is used to specify that an\n                  input field should automatically get focus when the page\n                  loads.\n                </li>\n                <li>\n                  <b>required: </b>This attribute is used to indicate that an\n                  input field must be filled out before the form can be\n                  submitted.\n                </li>\n                <li>\n                  <b>min and max: </b>These attributes can be used to set\n                  minimum and maximum values for number and date inputs.\n                </li>\n                <li>\n                  <b>pattern: </b>This attribute is used to specify a regular\n                  expression that the value of the input field must match.\n                </li>\n                <li>\n                  <b>step: </b>This attribute is used for number inputs and\n                  specifies the interval between valid values.\n                </li>\n                <li>\n                  <b>list: </b>This attribute is used to associate an input\n                  field with a datalist element, which provides a list of\n                  suggested values for the input field.\n                </li>\n              </ul>\n              <br />\n              These attributes provide developers with more control over the\n              behavior and appearance of input fields, allowing for a more\n              user-friendly experience for the end user.\n              <br />\n              <br />\n              <h3>\n                39. How can we club two or more rows or columns into a single\n                row or column in an HTML table?\n              </h3>\n              With <b>rowspan</b> and <b>colspan</b> to make a cell span to\n              multiple rows and columns respectively.\n              <br />\n              <h3>40. How is Cell Padding different from Cell Spacing?</h3>\n              <ol>\n                <li>\n                  HTML tables can adjust the padding inside the cells, and also\n                  the space between the cells.\n                </li>\n                <li>\n                  <b>Cell Spacing: </b>\n                </li>\n                <ul>\n                  <li>Cell spacing is the space between each cell.</li>\n                  <li>By default the space is set to 2 pixels.</li>\n                </ul>\n                <br />\n\n                <li>\n                  <b>Cell Padding: </b>\n                </li>\n                <ul>\n                  <li>\n                    is the space between the cell edges and the cell content.\n                  </li>\n                  <li>By default the padding is set to 0.</li>\n                  <li>\n                    To add padding on table cells, use the CSS padding property.\n                  </li>\n                </ul>\n              </ol>\n              <br />\n              <h3>41. What is HTML5 Graphics?</h3>\n              HTML5 Graphics is a term used to refer to the various\n              graphics-related features and technologies that are part of the\n              HTML5 standard. HTML5 introduces new and improved ways of creating\n              and displaying graphics on the web, without the need for\n              third-party plugins like Adobe Flash.\n              <br />\n              <br />\n              <ol>\n                <li>\n                  <b>Canvas element: </b>The canvas element provides a drawing\n                  surface that can be used to create 2D or 3D graphics,\n                  animations, and games using JavaScript.\n                </li>\n                <br />\n                <li>\n                  <b>Scalable Vector Graphics (SVG): </b>Is a vector graphics\n                  format that allows for the creation of complex,\n                  resolution-independent images and animations using XML.\n                </li>\n                <br />\n                <li>\n                  <b>CSS3: </b>CSS3 introduces new features for styling\n                  graphics, including gradients, transformations, and\n                  animations.\n                </li>\n                <br />\n                <li>\n                  <b>Web Graphics Library (WebGL): </b>WebGL is a JavaScript API\n                  for rendering interactive 3D graphics within a web browser,\n                  using the graphics hardware on a user's device.\n                </li>\n                <br />\n                <li>\n                  <b>:Media elements </b>HTML5 provides new and improved ways of\n                  embedding audio and video content into web pages, including\n                  support for playback controls, subtitles, and captioning.\n                </li>\n              </ol>\n              <br />\n              HTML5 Graphics make it easier for developers to create rich and\n              interactive web applications with improved performance and\n              accessibility, while also reducing the reliance on third-party\n              plugins.\n              <br />\n              <br />\n              <h3>42. Explain the key differences between SVG and Canvas?</h3>\n              <table>\n                <tr>\n                  <th>Property</th>\n                  <th>SVG</th>\n                  <th>Canvas</th>\n                </tr>\n                <tr>\n                  <td>Resolution dependent</td>\n                  <td>No</td>\n                  <td>Yes</td>\n                </tr>\n                <tr>\n                  <td>Games</td>\n                  <td>Not suitable for gaming.</td>\n                  <td>Canvas is suitable for graphic-intensive games.</td>\n                </tr>\n                <tr>\n                  <td>Rendering areas</td>\n                  <td>Suitable for large rendering areas like Google maps.</td>\n                  <td>Canvas is suitable for small rendering areas.</td>\n                </tr>\n                <tr>\n                  <td>Animation</td>\n                  <td>Interface provided by SVG is very highly interactive.</td>\n                  <td>\n                    Canvas provides a less interactive animated user interface.\n                  </td>\n                </tr>\n              </table>\n              <br />\n              <h3>43. Drag and Drop API</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={dragDrop}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>44. Geolocation API</h3>\n              The HTML Geolocation API is used to locate a user's position.\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={geolocation}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(Html1);\n"]},"metadata":{},"sourceType":"module"}