{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var createTuples=\"\\nmy_tuple = (\\\"Max\\\", 28, \\\"New York\\\")\\nmy_tuple_2 = \\\"Linda\\\", 25, \\\"Miami\\\"                                              # Parentheses are optional\\nmy_tuple_3 = (25, 1, 2, 3, 4,)\\n\\nx = my_tuple.count('Max')\\nx = my_tuple[-1]\\nx = my_tuple.index(28)                                                         # Return index of first item of 28.\\nx = len(my_tuple)\\nx = max(my_tuple_3)\\nx = min(my_tuple_3)\\nx = any(my_tuple_3)\\nx = all(my_tuple_3)\\nx = enumerate(my_tuple_3)\\nx = sum(my_tuple_3)\\nx = sorted(my_tuple_3)\\nx = tuple(my_tuple_3)                                                         # Convert an iterable to a tuple.\\n\\nname, age, city = my_tuple\\n\\nprint(x)\\nprint(name, age, city)\\n\\n\\n#2\\ntuple_4 = tuple([1,2,3])                     # convert an iterable (list, dict, string) with the built-in tuple function\\nprint(tuple_4)\".trim();var usefuls=\"\\nmy_tuple = ('a', 'b') * 5                                          \\nprint(my_tuple)\\n\\n\\n#2 convert list to a tuple.\\nmy_list = ['a', 'b', 'c', 'd']\\nlist_to_tuple = tuple(my_list)\\nprint(list_to_tuple)\\n\\ntuple_to_list = list(list_to_tuple)\\nprint(tuple_to_list)\\n\\n\\n#3 convert string to tuple.\\nstring_to_tuple = tuple('Hello')\\nprint(string_to_tuple)\".trim();var unpack=\"\\nmy_tuple = (0, 1, 2, 3, 4, 5)\\nfirst, *items_between, last = my_tuple\\nprint(first, items_between, last)\\n\\n\\n#2. Nested tuples\\na = ((0, 1), ('age', 'height'))\\nprint(a[0])\\n\".trim();var compare=\"\\n# compare the size\\nimport sys\\nmy_list = [0, 1, 2, \\\"hello\\\", True]\\nmy_tuple = (0, 1, 2, \\\"hello\\\", True)\\nprint(sys.getsizeof(my_list), \\\"bytes\\\")\\nprint(sys.getsizeof(my_tuple), \\\"bytes\\\")\\n\\n# compare the execution time of a list vs. tuple creation statement\\nimport timeit\\nprint(timeit.timeit(stmt=\\\"[0, 1, 2, 3, 4, 5]\\\", number=1000000))\\nprint(timeit.timeit(stmt=\\\"(0, 1, 2, 3, 4, 5)\\\", number=1000000))\".trim();var list=\"\\nmy_list = [\\\"banana\\\", \\\"cherry\\\", \\\"apple\\\", 5, True, 0, 1, 1]\\nprint(my_list)\\n\\nlist_2 = list()                                                       # Or create an empty list with the list function\\nprint(list_2)\\n\\nx = my_list.append(\\\"orange\\\")                                              \\nx = my_list.index(1)                                              \\nx = my_list.insert(1, \\\"blueberry\\\")                                        \\nx = my_list.pop()                                                        \\nx = my_list.remove(\\\"cherry\\\")                                              \\nx = my_list.clear()                                                       \\nx = my_list.reverse()                                                    \\nx = my_list.sort()  \\nx = my_list.count(0)  \\nx = sum(my_list)  \\nx = max(my_list)  \\nx = min(my_list)  \\nx = all(my_list)  \\nx = any(my_list)  \\nx = len(my_list)  \\nx = enumerate(my_list)  \\n\\nprint(x)  \\n\\n\\nlist_with_zeros = [0] * 5                                             # create list with repeated elements\\nlist_concat = list_with_zeros + my_list\\nstring_to_list = list('Hello')                                        # convert string to list\\n\".trim();var copylists=\"\\nlist_org = [\\\"banana\\\", \\\"cherry\\\", \\\"apple\\\"]\\nlist_copy = list_org.copy()\\nlist_copy.append(True)                                                # modifying the copy not affects the original\\n\\nprint(list_org)\\nprint(list_copy)\\n\".trim();var comprehension=\"\\na = [1, 2, 3, 4, 5, 6, 7, 8]\\nb = [i * i for i in a] \\nprint(b)\\n\\n\\n# nested Lists\\na = [[1, 2], [3, 4]]\\nprint(a)\\nprint(a[0])\\n\".trim();var format=\"\\nmy_set = {\\\"apple\\\", \\\"banana\\\", \\\"cherry\\\"}\\nmy_set_2 = set([\\\"one\\\", \\\"two\\\", \\\"three\\\"])                         # or use the set function and create from an iterable\\nmy_set_3 = set(\\\"aaabbbcccdddeeeeeffff\\\")\\n\\nmy_set.add(\\\"three\\\") \\nmy_set.remove(\\\"three\\\") \\nmy_set.discard(\\\"three\\\")                                         # removes x\\nmy_set.pop()                                                    # removes x\\nmy_set.clear()  \\n\\nprint(my_set)\\n\".trim();var unions=\"\\nodds = {1, 3, 5, 7, 9}\\nevens = {0, 2, 4, 6, 8}\\n\\nu = odds.union(evens)\\ni = odds.intersection(evens)\\n\\nprint(u)\".trim();var differences=\"\\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\\nsetB = {1, 2, 3, 10, 11, 12}\\n\\ndiff_set = setA.difference(setB)\\ndiff_set = setB.difference(setA)\\ndiff_set = setA.symmetric_difference(setB)\\ndiff_set = setB.symmetric_difference(setA)\\nprint(diff_set)\".trim();var updatings=\"\\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\\nsetB = {1, 2, 3, 10, 11, 12}\\n\\nsetA.update(setB)\\n\\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\\nsetA.intersection_update(setB)\\n\\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\\nsetA.difference_update(setB)\\n\\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\\nsetA.symmetric_difference_update(setB)\\n\\nsetA.update([1, 2, 3, 4, 5, 6])\".trim();var subsets=\"\\nsetA = {1, 2, 3, 4, 5, 6}\\nsetB = {1, 2, 3}\\n\\nprint(setA.issubset(setB))\\nprint(setB.issubset(setA))                                  # issubset(setX): Returns True if setX contains the set\\n\\n\\nprint(setA.issuperset(setB))                                # issuperset(setX): Returns True if the set contains setX\\nprint(setB.issuperset(setA))\\n\\n\\nsetC = {7, 8, 9}\\nprint(setA.isdisjoint(setB))                                # True if both sets have a null intersection\\nprint(setA.isdisjoint(setC))\".trim();var frozenset=\"\\nodds = frozenset({1, 3, 5, 7, 9})\\nevens = frozenset({0, 2, 4, 6, 8})\\n\\nprint(odds.union(evens))\\nprint(odds.intersection(evens))\\nprint(odds.difference(evens))\".trim();var create=\"\\nmy_dict = {\\\"name\\\":\\\"Max\\\", \\\"age\\\":28, \\\"city\\\":\\\"New York\\\"}\\nmy_dict_2 = dict(name=\\\"Lisa\\\", age=27, city=\\\"Boston\\\")    \\n     \\nname_in_dict = my_dict[\\\"name\\\"]    \\nmy_dict[\\\"email\\\"] = \\\"max@xyz.com\\\"                                          # add a new key.\\nmy_dict[\\\"email\\\"] = \\\"coolmax@xyz.com\\\"                                      # overwrite the existing key.\\ndel my_dict[\\\"email\\\"]                                                      # delete a key-value pair.\\n\\nprint(my_dict)\\nprint(\\\"popped value:\\\", my_dict.pop(\\\"age\\\"))                                # removes the last inserted key-value pair. \\nprint(\\\"popped item:\\\", my_dict.popitem())\\n\".trim();var checkItem=\"\\nmy_dict = {\\\"name\\\":\\\"Max\\\", \\\"age\\\":28, \\\"city\\\":\\\"New York\\\"}\\n\\nif \\\"name\\\" in my_dict:\\n    print(my_dict[\\\"name\\\"])\\n\\ntry:\\n    print(my_dict[\\\"firstname\\\"])\\nexcept KeyError:\\n    print(\\\"No key found\\\")\".trim();var looping=\"\\nfor key in my_dict:\\n    print(key, my_dict[key])\\n\\n\\nfor key in my_dict.keys():\\n    print(key)\\n\\n\\nfor value in my_dict.values():                                                    # loop over values\\n    print(value)\\n\\n\\nfor key, value in my_dict.items():                                                # loop over keys and values\\n    print(key, value)\".trim();var mergrs=\"\\nmy_dict = {\\\"name\\\":\\\"Max\\\", \\\"age\\\":28, \\\"email\\\":\\\"max@xyz.com\\\"}\\nmy_dict_2 = dict(name=\\\"Lisa\\\", age=27, city=\\\"Boston\\\")\\n\\nmy_dict.update(my_dict_2)\\nprint(my_dict)\".trim();var possibles=\"\\nmy_dict = {3: 9, 6: 36, 9:81}                                   # use numbers as key, but be careful\\nprint(my_dict[3], my_dict[6], my_dict[9])\\n\\nmy_tuple = (8, 7)                                               # use a tuple with immutable elements (e.g. number, string)\\nmy_dict = {my_tuple: 15}\\n\\nprint(my_dict[my_tuple])\\nprint(my_dict[8, 7])\\n\\n\\n# my_list = [8, 7]                                              # a list is not possible because it is not immutable\\n# my_dict = {my_list: 15}\".trim();var Tuples=/*#__PURE__*/function(_Component){_inherits(Tuples,_Component);function Tuples(){_classCallCheck(this,Tuples);return _possibleConstructorReturn(this,_getPrototypeOf(Tuples).apply(this,arguments));}_createClass(Tuples,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Tuple: \"),\"A tuple is a collection of objects which is ordered and immutable. \"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"my_tuple = (\\\"Max\\\", 28, \\\"New York\\\")\")),React.createElement(\"li\",null,\"Values of a tuple are separated by \\u2018commas\\u2019. Although it is not necessary.\"),React.createElement(\"li\",null,\"Creation of tuple without the use of parentheses is known as Tuple Packing.\"),React.createElement(\"li\",null,\"Add/ change items, Not possible and will raise a TypeError.\")),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"List: \"),\"List is a collection data type which is ordered and mutable.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"my_list = [\\\"banana\\\", \\\"cherry\\\", \\\"apple\\\"]\")),React.createElement(\"li\",null,\"Useful for preserving a sequence of data and further iterating over it.\")),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Set: \"),\"A Set is an unordered , unindexed, mutable, and has no duplicate elements.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Use curly braces or the built-in set function to create a set.\"),React.createElement(\"li\",null,\"An empty set cannot be created with Curly braces, as this is interpreted as dict use set().\")),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Dictionary: \"),\"Is an unordered, mutable and indexed. No duplicate members.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Collection of key-value pairs.\"),React.createElement(\"li\",null,\"Dictionary keys are case sensitive.\"),React.createElement(\"li\",null,\"Create a dictionary with braces, or with the built-in dict funtion.\"))),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Reasons to use a tuple over a list\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Use tuple for heterogeneous (different) datatypes and list for homogeneous datatypes.\"),React.createElement(\"li\",null,\"Since tuple are immutable, iterating through tuple is faster than list.\"),React.createElement(\"li\",null,\"Tuples with their immutable elements can be used as key for a dictionary. This is not possible with lists.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Create a tuple\"),React.createElement(\"b\",null,\"Special case:\"),\" A tuple with only one element needs to have a comma at the end, otherwise it is not recognized as tuple\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:createTuples,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Tuple Usefule methods\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:usefuls,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Unpack tuple\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Number of variables have to match number of tuple elements.\"),React.createElement(\"li\",null,\"Unpack multiple elements to a list with *.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Nested tuples: \"),\"Tuples can contain other tuples (or other container types).\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:unpack,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Compare tuple and list\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:compare,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Creating A List\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Extend() :\"),\"Add all elements of a list to the another list.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"copy() :\"),\"Returns a copy of the list.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"reduce() :\"),\"apply a particular function passed in its argument to all of the list elements stores the intermediate result and only returns the final summation value.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"ord() :\"),\"Returns an integer representing the Unicode code point of the given Unicode character.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"cmp() :\"),\"This function returns 1, if first list is \\u201Cgreater\\u201D than second list.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"enumerate() :\"),\"Returns enumerate object of list.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"accumulate() :\"),\"apply a particular function passed in its argument to all of the list elements returns a list containing the intermediate results.\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:list,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Copy a list\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:copylists,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"List comprehension\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"A elegant and fast way to create a new list from an existing list.\"),React.createElement(\"li\",null,\"List comprehension consists of an expression followed by a for statement inside square brackets.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:comprehension,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Sets\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"update() :\"),\"Updates a set with the union of itself and others.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"union() :\"),\"Returns the union of sets in a new set.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"difference() :\"),\"Returns the difference of two or more sets as a new set.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"difference_update() :\"),\"Removes all elements of another set from this set.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"discard() :\"),\"Removes an element from set if it is a member. (Do nothing if the element is not in set).\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"intersection() :\"),\"Returns the intersection of two sets as a new set.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"intersection_update() :\"),\"Updates the set with the intersection of itself and another.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"isdisjoint() :\"),\"Returns True if two sets have a null intersection.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"issubset() :\"),\"Returns True if another set contains this set.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"issuperset() :\"),\"Returns True if this set contains another set.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"symmetric_difference() :\"),\"Returns the symmetric difference of two sets as a new set.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"symmetric_difference_update() :\"),\"Updates a set with the symmetric difference of itself and another.\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:format,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Union and Intersection\"),React.createElement(\"b\",null,\"union() :\"),\" combine elements from both sets, no duplication. This does not change the two sets\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"intersection():\"),\" take elements that are in both sets\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:unions,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Difference of sets\"),React.createElement(\"b\",null,\"difference() :\"),\" returns a set with all the elements from the setA that are not in setB.\",React.createElement(\"br\",null),\"A.difference(B) is not the same as B.difference(A)\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"symmetric_difference() :\"),\" returns a set with all the elements that are in setA and setB but not in both\",React.createElement(\"br\",null),\"A.symmetric_difference(B) = B.symmetric_difference(A)\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:differences,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Updating sets\"),React.createElement(\"b\",null,\"update() :\"),\" Update the set by adding elements from another set.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"intersection_update() :\"),\" Update the set by keeping only the elements found in both\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"difference_update() :\"),\" Update the set by removing elements found in another set.\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"symmetric_difference_update() :\"),\" Update the set by only keeping the elements found in either set, but not in both\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Note:\"),\" all update methods also work with other iterables as argument, e.g lists, tuples\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:updatings,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Subset, Superset, and Disjoint\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:subsets,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Frozenset\"),\"Frozen set is just an immutable version of normal set. While elements of a set can be modified at any time, elements of frozen set remains the same after creation.\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"my_frozenset = frozenset(iterable)\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:frozenset,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Dictionaries\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"get() :\"),\"It is a conventional method to access a value for a key.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"dictionary_name.values() :\"),\"returns a list of all the values available in a given dictionary.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"str() :\"),\"Produces a printable string representation of a dictionary.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"update() :\"),\"Adds dictionary dict2\\u2019s key-values pairs to dict.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"setdefault() :\"),\"Set dict[key]=default if key is not already in dict.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"keys() :\"),\"Returns list of dictionary dict\\u2019s keys.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"items() :\"),\"Returns a list of dict\\u2019s (key, value) tuple pairs.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"has_key() :\"),\"Returns true if key in dictionary dict, false otherwise.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"fromkeys() :\"),\"Create a new dictionary with keys from seq and values set to value.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"type() :\"),\"Returns the type of the passed variable.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"cmp() :\"),\"Compares elements of both dict.\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:create,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Check for keys\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:checkItem,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Looping through dictionary\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:looping,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Merge two dictionaries\"),\"Use the update() method to merge 2 dicts existing keys are overwritten, new keys are added\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:mergrs,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Possible key types\"),\"Any immutable type, like strings or numbers can be used as a key. Also, a tuple can be used if it contains only immutable elements.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"do not mistake the keys as indices of a list, e.g my_dict[0] is not possible here\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:possibles,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return Tuples;}(Component);export default withStyles(styles)(Tuples);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/pythone/deeppy/tuples.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","createTuples","trim","usefuls","unpack","compare","list","copylists","comprehension","format","unions","differences","updatings","subsets","frozenset","create","checkItem","looping","mergrs","possibles","Tuples","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst createTuples = `\nmy_tuple = (\"Max\", 28, \"New York\")\nmy_tuple_2 = \"Linda\", 25, \"Miami\"                                              # Parentheses are optional\nmy_tuple_3 = (25, 1, 2, 3, 4,)\n\nx = my_tuple.count('Max')\nx = my_tuple[-1]\nx = my_tuple.index(28)                                                         # Return index of first item of 28.\nx = len(my_tuple)\nx = max(my_tuple_3)\nx = min(my_tuple_3)\nx = any(my_tuple_3)\nx = all(my_tuple_3)\nx = enumerate(my_tuple_3)\nx = sum(my_tuple_3)\nx = sorted(my_tuple_3)\nx = tuple(my_tuple_3)                                                         # Convert an iterable to a tuple.\n\nname, age, city = my_tuple\n\nprint(x)\nprint(name, age, city)\n\n\n#2\ntuple_4 = tuple([1,2,3])                     # convert an iterable (list, dict, string) with the built-in tuple function\nprint(tuple_4)`.trim();\n\nconst usefuls = `\nmy_tuple = ('a', 'b') * 5                                          \nprint(my_tuple)\n\n\n#2 convert list to a tuple.\nmy_list = ['a', 'b', 'c', 'd']\nlist_to_tuple = tuple(my_list)\nprint(list_to_tuple)\n\ntuple_to_list = list(list_to_tuple)\nprint(tuple_to_list)\n\n\n#3 convert string to tuple.\nstring_to_tuple = tuple('Hello')\nprint(string_to_tuple)`.trim();\n\nconst unpack = `\nmy_tuple = (0, 1, 2, 3, 4, 5)\nfirst, *items_between, last = my_tuple\nprint(first, items_between, last)\n\n\n#2. Nested tuples\na = ((0, 1), ('age', 'height'))\nprint(a[0])\n`.trim();\n\nconst compare = `\n# compare the size\nimport sys\nmy_list = [0, 1, 2, \"hello\", True]\nmy_tuple = (0, 1, 2, \"hello\", True)\nprint(sys.getsizeof(my_list), \"bytes\")\nprint(sys.getsizeof(my_tuple), \"bytes\")\n\n# compare the execution time of a list vs. tuple creation statement\nimport timeit\nprint(timeit.timeit(stmt=\"[0, 1, 2, 3, 4, 5]\", number=1000000))\nprint(timeit.timeit(stmt=\"(0, 1, 2, 3, 4, 5)\", number=1000000))`.trim();\n\nconst list = `\nmy_list = [\"banana\", \"cherry\", \"apple\", 5, True, 0, 1, 1]\nprint(my_list)\n\nlist_2 = list()                                                       # Or create an empty list with the list function\nprint(list_2)\n\nx = my_list.append(\"orange\")                                              \nx = my_list.index(1)                                              \nx = my_list.insert(1, \"blueberry\")                                        \nx = my_list.pop()                                                        \nx = my_list.remove(\"cherry\")                                              \nx = my_list.clear()                                                       \nx = my_list.reverse()                                                    \nx = my_list.sort()  \nx = my_list.count(0)  \nx = sum(my_list)  \nx = max(my_list)  \nx = min(my_list)  \nx = all(my_list)  \nx = any(my_list)  \nx = len(my_list)  \nx = enumerate(my_list)  \n\nprint(x)  \n\n\nlist_with_zeros = [0] * 5                                             # create list with repeated elements\nlist_concat = list_with_zeros + my_list\nstring_to_list = list('Hello')                                        # convert string to list\n`.trim();\n\nconst copylists = `\nlist_org = [\"banana\", \"cherry\", \"apple\"]\nlist_copy = list_org.copy()\nlist_copy.append(True)                                                # modifying the copy not affects the original\n\nprint(list_org)\nprint(list_copy)\n`.trim();\n\n\nconst comprehension = `\na = [1, 2, 3, 4, 5, 6, 7, 8]\nb = [i * i for i in a] \nprint(b)\n\n\n# nested Lists\na = [[1, 2], [3, 4]]\nprint(a)\nprint(a[0])\n`.trim();\n\nconst format = `\nmy_set = {\"apple\", \"banana\", \"cherry\"}\nmy_set_2 = set([\"one\", \"two\", \"three\"])                         # or use the set function and create from an iterable\nmy_set_3 = set(\"aaabbbcccdddeeeeeffff\")\n\nmy_set.add(\"three\") \nmy_set.remove(\"three\") \nmy_set.discard(\"three\")                                         # removes x\nmy_set.pop()                                                    # removes x\nmy_set.clear()  \n\nprint(my_set)\n`.trim();\n\nconst unions = `\nodds = {1, 3, 5, 7, 9}\nevens = {0, 2, 4, 6, 8}\n\nu = odds.union(evens)\ni = odds.intersection(evens)\n\nprint(u)`.trim();\n\nconst differences = `\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nsetB = {1, 2, 3, 10, 11, 12}\n\ndiff_set = setA.difference(setB)\ndiff_set = setB.difference(setA)\ndiff_set = setA.symmetric_difference(setB)\ndiff_set = setB.symmetric_difference(setA)\nprint(diff_set)`.trim();\n\nconst updatings = `\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nsetB = {1, 2, 3, 10, 11, 12}\n\nsetA.update(setB)\n\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nsetA.intersection_update(setB)\n\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nsetA.difference_update(setB)\n\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nsetA.symmetric_difference_update(setB)\n\nsetA.update([1, 2, 3, 4, 5, 6])`.trim();\n\nconst subsets = `\nsetA = {1, 2, 3, 4, 5, 6}\nsetB = {1, 2, 3}\n\nprint(setA.issubset(setB))\nprint(setB.issubset(setA))                                  # issubset(setX): Returns True if setX contains the set\n\n\nprint(setA.issuperset(setB))                                # issuperset(setX): Returns True if the set contains setX\nprint(setB.issuperset(setA))\n\n\nsetC = {7, 8, 9}\nprint(setA.isdisjoint(setB))                                # True if both sets have a null intersection\nprint(setA.isdisjoint(setC))`.trim();\n\nconst frozenset = `\nodds = frozenset({1, 3, 5, 7, 9})\nevens = frozenset({0, 2, 4, 6, 8})\n\nprint(odds.union(evens))\nprint(odds.intersection(evens))\nprint(odds.difference(evens))`.trim();\n\nconst create = `\nmy_dict = {\"name\":\"Max\", \"age\":28, \"city\":\"New York\"}\nmy_dict_2 = dict(name=\"Lisa\", age=27, city=\"Boston\")    \n     \nname_in_dict = my_dict[\"name\"]    \nmy_dict[\"email\"] = \"max@xyz.com\"                                          # add a new key.\nmy_dict[\"email\"] = \"coolmax@xyz.com\"                                      # overwrite the existing key.\ndel my_dict[\"email\"]                                                      # delete a key-value pair.\n\nprint(my_dict)\nprint(\"popped value:\", my_dict.pop(\"age\"))                                # removes the last inserted key-value pair. \nprint(\"popped item:\", my_dict.popitem())\n`.trim();\n\nconst checkItem = `\nmy_dict = {\"name\":\"Max\", \"age\":28, \"city\":\"New York\"}\n\nif \"name\" in my_dict:\n    print(my_dict[\"name\"])\n\ntry:\n    print(my_dict[\"firstname\"])\nexcept KeyError:\n    print(\"No key found\")`.trim();\n\nconst looping = `\nfor key in my_dict:\n    print(key, my_dict[key])\n\n\nfor key in my_dict.keys():\n    print(key)\n\n\nfor value in my_dict.values():                                                    # loop over values\n    print(value)\n\n\nfor key, value in my_dict.items():                                                # loop over keys and values\n    print(key, value)`.trim();\n\nconst mergrs = `\nmy_dict = {\"name\":\"Max\", \"age\":28, \"email\":\"max@xyz.com\"}\nmy_dict_2 = dict(name=\"Lisa\", age=27, city=\"Boston\")\n\nmy_dict.update(my_dict_2)\nprint(my_dict)`.trim();\n\nconst possibles = `\nmy_dict = {3: 9, 6: 36, 9:81}                                   # use numbers as key, but be careful\nprint(my_dict[3], my_dict[6], my_dict[9])\n\nmy_tuple = (8, 7)                                               # use a tuple with immutable elements (e.g. number, string)\nmy_dict = {my_tuple: 15}\n\nprint(my_dict[my_tuple])\nprint(my_dict[8, 7])\n\n\n# my_list = [8, 7]                                              # a list is not possible because it is not immutable\n# my_dict = {my_list: 15}`.trim();\n\nclass Tuples extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3></h3>\n              <ul>\n                <li><b>Tuple: </b>A tuple is a collection of objects which is ordered and immutable. </li>\n                <ul>\n                  <li><b>my_tuple = (\"Max\", 28, \"New York\")</b></li>\n                  <li>Values of a tuple are separated by ‘commas’. Although it is not necessary.</li>\n                  <li>Creation of tuple without the use of parentheses is known as Tuple Packing.</li>\n                  <li>Add/ change items, Not possible and will raise a TypeError.</li>\n                </ul>\n                <br />\n\n                <li><b>List: </b>List is a collection data type which is ordered and mutable.</li>\n                <ul>\n                  <li><b>my_list = [\"banana\", \"cherry\", \"apple\"]</b></li>\n                  <li>Useful for preserving a sequence of data and further iterating over it.</li>\n                </ul>\n\n                <br />\n                <li><b>Set: </b>A Set is an unordered , unindexed, mutable, and has no duplicate elements.</li>\n                <ul>\n                  <li>Use curly braces or the built-in set function to create a set.</li>\n                  <li>An empty set cannot be created with Curly braces, as this is interpreted as dict use set().</li>\n                </ul>\n\n                <br />\n                <li><b>Dictionary: </b>Is an unordered, mutable and indexed. No duplicate members.</li>\n                <ul>\n                  <li>Collection of key-value pairs.</li>\n                  <li>Dictionary keys are case sensitive.</li>\n                  <li>Create a dictionary with braces, or with the built-in dict funtion.</li>\n                </ul>\n              </ul>\n              <br />\n\n              <b>Reasons to use a tuple over a list</b>\n              <ul>\n                <li>Use tuple for heterogeneous (different) datatypes and list for homogeneous datatypes.</li>\n                <li>Since tuple are immutable, iterating through tuple is faster than list.</li>\n                <li>Tuples with their immutable elements can be used as key for a dictionary. This is not possible with lists.</li>\n              </ul>\n              <br />\n\n              <h3>Create a tuple</h3>\n              <b>Special case:</b> A tuple with only one element needs to have a comma at the end,\n              otherwise it is not recognized as tuple\n              <div style={titles}>\n                <PrismCode\n                  code={createTuples}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Tuple Usefule methods</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={usefuls}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Unpack tuple</h3>\n              <ul>\n                <li>Number of variables have to match number of tuple elements.</li>\n                <li>Unpack multiple elements to a list with *.</li>\n                <li><b>Nested tuples: </b>Tuples can contain other tuples (or other container types).</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={unpack}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Compare tuple and list</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={compare}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Creating A List</h3>\n              <ul>\n                <li><b>Extend() :</b>Add all elements of a list to the another list.</li>\n                <li><b>copy() :</b>Returns a copy of the list.</li>\n                <li><b>reduce() :</b>apply a particular function passed in its argument to all of the list elements stores the intermediate result and only returns the final summation value.</li>\n                <li><b>ord() :</b>Returns an integer representing the Unicode code point of the given Unicode character.</li>\n                <li><b>cmp() :</b>This function returns 1, if first list is “greater” than second list.</li>\n                <li><b>enumerate() :</b>Returns enumerate object of list.</li>\n                <li><b>accumulate() :</b>apply a particular function passed in its argument to all of the list elements returns a list containing the intermediate results.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={list}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Copy a list</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={copylists}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>List comprehension</h3>\n              <ul>\n                <li>A elegant and fast way to create a new list from an existing list.</li>\n                <li>List comprehension consists of an expression followed by a for statement inside square brackets.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={comprehension}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Sets</h3>\n              <ul>\n                <li><b>update() :</b>Updates a set with the union of itself and others.</li>\n                <li><b>union() :</b>Returns the union of sets in a new set.</li>\n                <li><b>difference() :</b>Returns the difference of two or more sets as a new set.</li>\n                <li><b>difference_update() :</b>Removes all elements of another set from this set.</li>\n                <li><b>discard() :</b>Removes an element from set if it is a member. (Do nothing if the element is not in set).</li>\n                <li><b>intersection() :</b>Returns the intersection of two sets as a new set.</li>\n                <li><b>intersection_update() :</b>Updates the set with the intersection of itself and another.</li>\n                <li><b>isdisjoint() :</b>Returns True if two sets have a null intersection.</li>\n                <li><b>issubset() :</b>Returns True if another set contains this set.</li>\n                <li><b>issuperset() :</b>Returns True if this set contains another set.</li>\n                <li><b>symmetric_difference() :</b>Returns the symmetric difference of two sets as a new set.</li>\n                <li><b>symmetric_difference_update() :</b>Updates a set with the symmetric difference of itself and another.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={format}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Union and Intersection</h3>\n              <b>union() :</b> combine elements from both sets, no duplication. This does not change the two sets\n              <br />\n              <b>intersection():</b> take elements that are in both sets\n              <div style={titles}>\n                <PrismCode\n                  code={unions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Difference of sets</h3>\n              <b>difference() :</b> returns a set with all the elements from the setA that are not in setB.\n              <br />\n              A.difference(B) is not the same as B.difference(A)\n              <br />\n              <br />\n              <b>symmetric_difference() :</b> returns a set with all the elements that are in setA and setB but not in both\n              <br />\n              A.symmetric_difference(B) = B.symmetric_difference(A)\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={differences}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Updating sets</h3>\n              <b>update() :</b> Update the set by adding elements from another set.\n              <br />\n              <br />\n              <b>intersection_update() :</b> Update the set by keeping only the elements found in both\n              <br />\n              <b>difference_update() :</b> Update the set by removing elements found in another set.\n              <br />\n              <b>symmetric_difference_update() :</b> Update the set by only keeping the elements found in either set, but not in both\n              <br />\n              <br />\n              <b>Note:</b> all update methods also work with other iterables as argument, e.g lists, tuples\n              <div style={titles}>\n                <PrismCode\n                  code={updatings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Subset, Superset, and Disjoint</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={subsets}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Frozenset</h3>\n              Frozen set is just an immutable version of normal set. While elements of a set can be modified at any\n              time, elements of frozen set remains the same after creation.\n              <br />\n              <b>my_frozenset = frozenset(iterable)</b>\n              <div style={titles}>\n                <PrismCode\n                  code={frozenset}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Dictionaries</h3>\n              <ul>\n                <li><b>get() :</b>It is a conventional method to access a value for a key.</li>\n                <li><b>dictionary_name.values() :</b>returns a list of all the values available in a given dictionary.</li>\n                <li><b>str() :</b>Produces a printable string representation of a dictionary.</li>\n                <li><b>update() :</b>Adds dictionary dict2’s key-values pairs to dict.</li>\n                <li><b>setdefault() :</b>Set dict[key]=default if key is not already in dict.</li>\n                <li><b>keys() :</b>Returns list of dictionary dict’s keys.</li>\n                <li><b>items() :</b>Returns a list of dict’s (key, value) tuple pairs.</li>\n                <li><b>has_key() :</b>Returns true if key in dictionary dict, false otherwise.</li>\n                <li><b>fromkeys() :</b>Create a new dictionary with keys from seq and values set to value.</li>\n                <li><b>type() :</b>Returns the type of the passed variable.</li>\n                <li><b>cmp() :</b>Compares elements of both dict.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={create}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Check for keys</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={checkItem}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Looping through dictionary</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={looping}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Merge two dictionaries</h3>\n              Use the update() method to merge 2 dicts\n              existing keys are overwritten, new keys are added\n              <div style={titles}>\n                <PrismCode\n                  code={mergrs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Possible key types</h3>\n              Any immutable type, like strings or numbers can be used as a key. Also, a tuple can be used if it contains only immutable elements.\n              <br />\n              <br />\n              do not mistake the keys as indices of a list, e.g my_dict[0] is not possible here\n              <div style={titles}>\n                <PrismCode\n                  code={possibles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Tuples));\n"]},"metadata":{},"sourceType":"module"}