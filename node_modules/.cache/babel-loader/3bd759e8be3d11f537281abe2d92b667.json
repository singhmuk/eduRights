{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';import Stcksval from'../../../assets/stcks.png';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var redesign={height:200,width:500};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var isValid=\"\\nfunction isValid(s){\\n  const stack = [];\\n  const pair = {\\n    '[': ']',\\n    '{': '}',\\n    '(': ')',\\n  };\\n  const isPaired = (a, b) => pair[a] === b;\\n\\n  for (c of s) {\\n    if (isPaired(stack[stack.length - 1], c)) {\\n      stack.pop();\\n    } else {\\n      stack.push(c);\\n    }\\n  }\\n  return stack.length === 0;\\n}\\n\\nconsole.log(isValid(\\\"()\\\"))\\n\".trim();var generateParenthesis=\"\\nfunction generateParenthesis(n) {\\n  const result = [];\\n\\n  function aux(current, left, right){\\n    if (left === n && right === n) {\\n      result.push(current)\\n      return\\n    }\\n    if (left < right || left > n || right > n) return;\\n\\n    aux('$'{current}(', left + 1, right)\\n    aux('$'current})', left, right + 1)\\n  }\\n  aux('', 0, 0)\\n  return result;\\n}\\n\\nconsole.log(generateParenthesis(3))\\n\".trim();var largestPerimeter=\"\\nfunction largestPerimeter(A = []) {\\n  A.sort((a, b) => b - a);\\n  for (let i = 0; i < A.length - 2; i++) {\\n    if (A[i] < A[i + 1] + A[i + 2]) {\\n      return A[i] + A[i + 1] + A[i + 2];\\n    }\\n  }\\n  return 0;\\n}\\n\\nconsole.log(largestPerimeter([2,1,2]))\\n\".trim();var generate=\"\\nfunction generate(numRows){\\n  const result = [];\\n\\n  for (let i = 0; i < numRows; i++) {\\n    const current = [];\\n    for (let j = 0; j <= i; j++) {\\n      if (result[i - 1] && result[i - 1][j] && result[i - 1][j - 1]) {\\n        current.push(result[i - 1][j] + result[i - 1][j - 1]);\\n      } else {\\n        current.push(1);\\n      }\\n    }\\n    result.push(current);\\n  }\\n  return result;\\n}\\n\\nconsole.log(generate(5))\\n\".trim();var computeArea=\"\\nfunction computeArea(A, B, C, D, E, F, G, H){\\n  const area = (pointA, pointB) => (pointB[0] - pointA[0]) * (pointB[1] - pointA[1]);\\n  const totalArea = area([A, B], [C, D]) + area([E, F], [G, H]);\\n\\n  if (E >= C || G <= A || F >= D || H <= B) return totalArea;\\n\\n  const pointA = [Math.max(A, E), Math.max(B, F)];\\n  const pointB = [Math.min(C, G), Math.min(D, H)];\\n  const overlapping = (pointB[0] - pointA[0]) * (pointB[1] - pointA[1]);\\n\\n  return totalArea - overlapping;\\n}\\n\\nconsole.log(computeArea(-3, 0, 3, 4, 0, -1, 9, 2))\\n\".trim();var graph=\"\".trim();var DSLogic8=/*#__PURE__*/function(_Component){_inherits(DSLogic8,_Component);function DSLogic8(){_classCallCheck(this,DSLogic8);return _possibleConstructorReturn(this,_getPrototypeOf(DSLogic8).apply(this,arguments));}_createClass(DSLogic8,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Valid Parentheses\"),\"Given a string s containing just the characters '(', ')', '\",', ',\"', '[' and ']', determine if the input string is valid.\",React.createElement(\"br\",null),\"An input string is valid if:\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Open brackets must be closed by the same type of brackets.\"),React.createElement(\"li\",null,\"Open brackets must be closed in the correct order.\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Example 1: \"),React.createElement(\"b\",null,\"Input: \"),\"s = \\\"()\\\"\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"true\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Example 2: \"),React.createElement(\"b\",null,\"Input: \"),\"s = \\\"()[]\",\"\\\"\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"true\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Example 3: \"),React.createElement(\"b\",null,\"Input: \"),\"s = \\\"(]\\\"\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"false\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:isValid,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Generate Parentheses.\"),\"Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Ex. \"),\" given n = 3, a solution set is: \",React.createElement(\"br\",null),\"[\",React.createElement(\"br\",null),\"\\\"((()))\\\", \",React.createElement(\"br\",null),\"\\\"(()())\\\", \",React.createElement(\"br\",null),\"\\\"(())()\\\", \",React.createElement(\"br\",null),\"\\\"()(())\\\", \",React.createElement(\"br\",null),\"\\\"()()()\\\" \",React.createElement(\"br\",null),\"]\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:generateParenthesis,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Largest Perimeter Triangle.\"),\"Given an array A of positive lengths, return the largest perimeter of a triangle with non-zero area, formed from 3 of these lengths.\",React.createElement(\"br\",null),\"If it is impossible to form any triangle of non-zero area, return 0.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:largestPerimeter,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. Pascal's Triangle\"),\"Given a non-negative integer numRows, generate the first numRows of Pascal's triangle.\",React.createElement(\"br\",null),\"In Pascal's triangle, each number is the sum of the two numbers directly above it.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:generate,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. Rectangle Area.\"),\"Find the total area covered by two rectilinear rectangles in a 2D plane.\",React.createElement(\"br\",null),\"Each rectangle is defined by its bottom left corner and top right corner.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:computeArea,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:graph,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return DSLogic8;}(Component);export default withStyles(styles)(DSLogic8);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/dslogic8.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","isValid","trim","generateParenthesis","largestPerimeter","generate","computeArea","graph","DSLogic8","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst isValid = `\nfunction isValid(s){\n  const stack = [];\n  const pair = {\n    '[': ']',\n    '{': '}',\n    '(': ')',\n  };\n  const isPaired = (a, b) => pair[a] === b;\n\n  for (c of s) {\n    if (isPaired(stack[stack.length - 1], c)) {\n      stack.pop();\n    } else {\n      stack.push(c);\n    }\n  }\n  return stack.length === 0;\n}\n\nconsole.log(isValid(\"()\"))\n`.trim();\n\nconst generateParenthesis = `\nfunction generateParenthesis(n) {\n  const result = [];\n\n  function aux(current, left, right){\n    if (left === n && right === n) {\n      result.push(current)\n      return\n    }\n    if (left < right || left > n || right > n) return;\n\n    aux('$'{current}(', left + 1, right)\n    aux('$'current})', left, right + 1)\n  }\n  aux('', 0, 0)\n  return result;\n}\n\nconsole.log(generateParenthesis(3))\n`.trim();\n\nconst largestPerimeter = `\nfunction largestPerimeter(A = []) {\n  A.sort((a, b) => b - a);\n  for (let i = 0; i < A.length - 2; i++) {\n    if (A[i] < A[i + 1] + A[i + 2]) {\n      return A[i] + A[i + 1] + A[i + 2];\n    }\n  }\n  return 0;\n}\n\nconsole.log(largestPerimeter([2,1,2]))\n`.trim();\n\nconst generate = `\nfunction generate(numRows){\n  const result = [];\n\n  for (let i = 0; i < numRows; i++) {\n    const current = [];\n    for (let j = 0; j <= i; j++) {\n      if (result[i - 1] && result[i - 1][j] && result[i - 1][j - 1]) {\n        current.push(result[i - 1][j] + result[i - 1][j - 1]);\n      } else {\n        current.push(1);\n      }\n    }\n    result.push(current);\n  }\n  return result;\n}\n\nconsole.log(generate(5))\n`.trim();\n\nconst computeArea = `\nfunction computeArea(A, B, C, D, E, F, G, H){\n  const area = (pointA, pointB) => (pointB[0] - pointA[0]) * (pointB[1] - pointA[1]);\n  const totalArea = area([A, B], [C, D]) + area([E, F], [G, H]);\n\n  if (E >= C || G <= A || F >= D || H <= B) return totalArea;\n\n  const pointA = [Math.max(A, E), Math.max(B, F)];\n  const pointB = [Math.min(C, G), Math.min(D, H)];\n  const overlapping = (pointB[0] - pointA[0]) * (pointB[1] - pointA[1]);\n\n  return totalArea - overlapping;\n}\n\nconsole.log(computeArea(-3, 0, 3, 4, 0, -1, 9, 2))\n`.trim();\n\nconst graph = ``.trim();\n\n\nclass DSLogic8 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n            <h3>1. Valid Parentheses</h3>\n              Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n              <br/>\n              An input string is valid if:<br/>\n              <ul>\n                <li>Open brackets must be closed by the same type of brackets.</li>\n                <li>Open brackets must be closed in the correct order.</li>\n              </ul>\n              <br/>\n\n              <b>Example 1: </b>\n\n              <b>Input: </b>s = \"()\"<br/>\n              <b>Output: </b>true<br/><br/>\n              <b>Example 2: </b>\n\n              <b>Input: </b>s = \"()[]{}\"<br/>\n              <b>Output: </b>true<br/><br/>\n              <b>Example 3: </b>\n\n              <b>Input: </b>s = \"(]\"<br/>\n              <b>Output: </b>false\n              <div style={titles}>\n                <PrismCode\n                  code={isValid}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>2. Generate Parentheses.</h3>\n              Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n              <br/>\n              <b>Ex. </b> given n = 3, a solution set is: <br/>\n\n              [<br/>\n                \"((()))\", <br/>\n                \"(()())\", <br/>\n                \"(())()\", <br/>\n                \"()(())\", <br/>\n                \"()()()\" <br/>\n              ]\n              <div style={titles}>\n                <PrismCode\n                  code={generateParenthesis}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>3. Largest Perimeter Triangle.</h3>\n              Given an array A of positive lengths, return the largest perimeter of a triangle with non-zero area, formed from 3 of these lengths.\n              <br/>\n              If it is impossible to form any triangle of non-zero area, return 0.\n              <div style={titles}>\n                <PrismCode\n                  code={largestPerimeter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>4. Pascal's Triangle</h3>\n              Given a non-negative integer numRows, generate the first numRows of Pascal's triangle.\n              <br/>\n              In Pascal's triangle, each number is the sum of the two numbers directly above it.\n              <div style={titles}>\n                <PrismCode\n                  code={generate}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>5. Rectangle Area.</h3>\n              Find the total area covered by two rectilinear rectangles in a 2D plane.\n              <br/>\n              Each rectangle is defined by its bottom left corner and top right corner.\n              <div style={titles}>\n                <PrismCode\n                  code={computeArea}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3></h3>\n\n              <div style={titles}>\n                <PrismCode\n                  code={graph}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic8));\n"]},"metadata":{},"sourceType":"module"}