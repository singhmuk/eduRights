{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/arrayAlgo.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst strArray = `\n    var strArray = \"StackOverflow\".split(\"\");\n    console.log(strArray.join(\"\"));\n`.trim();\nconst Sort = `\nlet i, j, arr=[0,9,8,7,6];\nvar max=0;\n\nfor(i=0; i<arr.length; i++){\n  for(j=i; j<arr.length; j++){\n    if(arr[i]>arr[j]){\n      var temp=arr[i];\n      arr[i]=arr[j];\n      arr[j]=temp;\n    }\n  }\n}\n\nconsole.log(arr);\n\n\n//Greatest Product Of 3\nmax = arr[arr.length-1] * arr[arr.length-2] * arr[arr.length-3]\nconsole.log(max);\n`.trim();\nconst duplicates = `\nvar array = [1,2,3,4,3,0,9,0,1];\nvar result=[];\n\nfor(let i=0; i<array.length;i++){\n    let count=0;\n    for(let j=0;j<result.length;j++){\n        if(array[i]==result[j]){\n            count +=1;\n        }\n    }\n    if(count==0){\n        result.push(array[i]);\n    }  \n}\n\nconsole.log(result) `.trim();\nconst compare_array = `\nfunction compare(){\n  const arr=[1,2,3,4,5,6];\n  const arr2=[5,6,7,8,9,0];\n  const result=[];\n  \n  for(let i=0; i<arr.length; i++){\n    if(arr2.indexOf(arr[i]) !== -1){\n      result.push(arr[i]);\n    }\n  }\n  console.log(result)\n}\n\ncompare();\n\n\n//Unique name\nfunction getUnique(){\n  var names = [\"John\", \"Peter\", \"Clark\", \"Harry\", \"John\", \"Alice\"];\n  var newName = [];\n  \n  for(i=0; i < names.length; i++){\n      if(newName.indexOf(names[i]) === -1) {\n          newName.push(names[i]);\n      }\n  }\n  console.log(newName);\n}\n\ngetUnique();\n`.trim();\nconst recursionReverseArray = `\nvar apple = [5,6,7,8,9];\nvar reverse = function(arr){\n var result = [];\n var newArr = [];\n   arr.forEach((item) => newArr.push(item));\n     var inner = function(x){\n     if(x.length > 0){\n       result.push(x.pop())\n       inner(x);\n     }\n   return;\n }\n \n inner(newArr);\n return result;\n}\n\nconsole.log(apple)\nconsole.log(reverse(apple))`.trim();\nconst findMedianSortedArrays = `\nfunction findMedianSortedArrays(nums1, nums2){\n  function merge(xs1, xs2){\n    if (!xs1 || !xs1.length) return xs2;\n    if (!xs2 || !xs2.length) return xs1;\n\n    const [hd1, ...rest1] = xs1\n    const [hd2, ...rest2] = xs2\n    return hd1 <= hd2 ? [hd1, ...merge(rest1, xs2)] : [hd2, ...merge(xs1, rest2)]\n  }\n  const nums = merge(nums1, nums2)\n  const middle = Math.floor((nums.length-1) / 2)\n\n  return (middle * 2 === (nums.length-1)) ?  nums[middle] : ((nums[middle] + nums[middle + 1]) / 2) \n}\n\nconsole.log(findMedianSortedArrays([1,2],[3,4]))\n`.trim();\nconst maxSubArray = `\nfunction maxSubArray(nums){\n  let max = -Infinity;\n  let currentMax = -Infinity;\n\n  for (let i = 0; i < nums.length; i++) {\n    currentMax = Math.max(\n      currentMax + nums[i],\n      nums[i],\n    )\n    max = Math.max(max, currentMax)\n  }\n  return max\n}\n\nconsole.log(maxSubArray([-2,1,-3,4,-1,2,1,-5,4]))\n`.trim();\nconst plusOne = `\nfunction plusOne(digits = []){\n  if (digits.length === 0) return digits;\n\n  if (digits[digits.length - 1] < 9) {\n    digits[digits.length - 1] += 1\n    return digits\n  }\n\n  let index = digits.length - 1\n  let current = 1\n\n  while (index >= 0) {\n    const sum = current + digits[index]\n    if (sum > 9) {\n      digits[index] = sum - 10\n      current = 1\n      index -= 1\n    } \n    else {\n      digits[index] = sum\n      current = 0\n      index -= 1\n      return digits\n    }\n  }\n  return current === 1 ? [1, ...digits] : digits\n}\n\nconsole.log(plusOne([1,2,3]))\n`.trim();\nconst arrayCounter = `\nfunction arrCounter(arr){\n  var counter = 0;\n  var maxCount = 0;\n\n    function inner(n){\n      if(!Array.isArray(n)){\n        maxCount = Math.max(maxCount, counter);\n     counter = 0;\n     return\n   }\n   \n   n.forEach(num => {\n   counter ++;\n   inner(num);\n   })\n }\n \n inner(arr);\n console.log(maxCount)\n return maxCount;\n}\n\narrCounter([[3]])\narrCounter([[[[[[[9]]]]]]])\narrCounter([])\n`.trim();\nconst countElements = `\nfunction countElements(arr) {\n  const set = new Set()\n  \n  arr.forEach(num => set.add(num))\n  return arr.reduce((acc, num) => {\n      if(set.has(num+1)){\n          return acc + 1\n      }\n      return acc\n  },0)\n};\n\nconsole.log(countElements([1,2,3,0]))`.trim();\nconst find132pattern = `\nfunction find132pattern(nums) {\n  let max = -Infinity\n  const stack = []; \n\n  for (let i = nums.length - 1; i >= 0; i--) {\n    while (nums[i] > stack[stack.length - 1]) {\n      max = stack.pop()\n    }\n    if (nums[i] < max) return true;\n    stack.push(nums[i])\n  }\n  \n  return false\n}\n\nconsole.log(find132pattern([3,1,4,2]))\n`.trim();\nconst numIdenticalPairs = `\nfunction numIdenticalPairs(nums) {\n  let count = 0\n  \n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[i] === nums[j]) {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\nconsole.log(numIdenticalPairs([1,2,3,1,1,3]))\n`.trim();\nconst removeElement = `\nfunction removeElement(nums, val) {\n  let left = 0\n\n  const swap = (a, b) => {\n    const temp = nums[a]\n    nums[a] = nums[b]\n    nums[b] = temp\n  }\n\n  while (left <= nums.length - 1) {\n    while (nums[nums.length - 1] === val) {\n      nums.pop()\n    }\n    \n    while (nums[left] !== val && left <= nums.length - 1) {\n      left += 1\n    }\n\n    if (left < nums.length - 1) {\n      swap(left, nums.length - 1)\n      left += 1\n      nums.pop()\n    }\n  }\n  return nums.length\n}\n\nconsole.log(removeElement([0,1,2,2,3,0,4,2],1))\n`.trim();\nconst searchRange = `\nfunction searchRange(nums = [], target){\n  function binarySearch(left, right, position = 'middle'){\n    let pivot = -1\n    \n    while (left <= right) {\n      const middle = Math.floor((left + right) / 2)\n      if (nums[middle] === target) {\n        if (position === 'middle') {\n          pivot = middle\n          break\n        } else if (position === 'left') {\n          pivot = middle\n          right = middle - 1\n        } else if (position === 'right') {\n          pivot = middle\n          left = middle + 1\n        }\n      } else if (nums[middle] < target) {\n        left = middle + 1\n      } else {\n        right = middle - 1\n      }\n    }\n    return pivot\n  }\n\n\n  const pivot = binarySearch(0, nums.length - 1, 'middle')\n  return [\n    binarySearch(0, pivot, 'left'),\n    binarySearch(pivot, nums.length - 1, 'right'),\n  ]\n}\n\nconsole.log(searchRange([5,7,7,8,8,10],6))\n`.trim();\nconst maximumGap = `\nfunction maximumGap(nums = []) {\n  const maxValue = Math.max(...nums)\n\n  function countingSort(place){\n    const count = []\n    nums.forEach((num) => {\n      const index = Math.floor(num / place) % 10\n      count[index] = count[index] || []\n      count[index].push(num)\n    })\n    return count.reduce((acc, v) => {\n      if (v !== undefined) {\n        acc = acc.concat(v)\n      }\n      return acc\n    }, [])\n  }\n\n  let place = 1\n  while (Math.floor(maxValue / place) > 0) {\n    nums = countingSort(place)\n    place *= 10\n  }\n  let max = 0\n  for (let i = 1; i < nums.length; i++) {\n    max = Math.max(max, nums[i] - nums[i - 1])\n  }\n  return max\n}\n\nconsole.log(maximumGap([3,6,9,1]))\n`.trim();\nconst searchInsert = `\nfunction searchInsert(nums, target){\n  function aux(low, high){\n    if (low > high) return low;\n\n    const middle = Math.floor((low + high) / 2)\n    \n    if (target === nums[middle]) {\n      return middle\n    } if (target > nums[middle]) {\n      return aux(middle + 1, high)\n    }\n    return aux(low, middle - 1)\n  }\n  return aux(0, nums.length - 1)\n}\n\nconsole.log(searchInsert([1,3,5,6], 5))\n`.trim();\nconst combinationSum = `\nfunction combinationSum(candidates, target) {\n  const result = []\n\n  function aux(start,current=[], sum = 0){\n      if(sum > target) return;\n\n      if(sum === target) {\n          result.push(current)\n          return\n      }\n      for(let i = start; i < candidates.length; i++) {\n          aux(i, [...current, candidates[i]], sum+candidates[i])\n      }\n  }\n  for(let i = 0; i <  candidates.length; i++) {\n      aux(i, [candidates[i]], candidates[i])\n  }\n  return result\n};\n\nconsole.log(combinationSum([2,3,5],8))\n`.trim();\nconst missing_number = `\nfunction missNum() {\n  let i, arr=[0,1,2,4,5], exactsum=0, result=0;\n  exactsum = arr.reduce((a, b) => a + b);\n\n  for (i=0; i<=arr.length; i++) {\n    result += i\n  }\n  \n  result -= exactsum;\n  console.log('Missing Number', result)\n}\n\nmissNum();\n `.trim();\nconst firstMissingPositive = `\nfunction firstMissingPositive(nums = []){\n  function swap(a, b){\n    const temp = nums[a]\n    nums[a] = nums[b]\n    nums[b] = temp\n  }\n\n  let index = 0\n  while (index < nums.length) {\n    if (nums[index] !== nums[nums[index] - 1] && nums[index] > 0 && nums[index] <= nums.length){\n          swap(index, nums[index] - 1)\n      } else {\n          index += 1\n      }\n   }\n\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] !== i + 1) return i + 1;\n  }\n  return nums.length + 1\n}\n\nconsole.log(firstMissingPositive([3,4,-1,1]))\n`.trim();\nconst findMissingRanges = `\nfunction findMissingRanges(nums, lower, upper) {\n  const result = [];\n  const count = (lo, hi) => hi - lo - 1;\n\n  function set(lo, hi){\n    if (count(lo, hi) === 1) {\n      result.push('$'{lo + 1}')\n    } \n    else if (count(lo, hi) > 1) {\n      result.push('$'{lo + 1}->'$'{hi - 1}')\n    }\n  }\n  \n  for (let i = 0; i <= nums.length; i++) {\n    set(\n      i === 0 ? lower - 1 : nums[i - 1],\n      i === nums.length ? upper + 1 : nums[i],\n    )\n  }\n  return result\n}\n\nconsole.log(findMissingRanges([1,2,3,-2,4]))\n`.trim();\nconst permute = `\nfunction permute(nums = []){\n  const result = [];\n\n  function aux(list = [], current = []){\n    if (list.length === 0) {\n      result.push(current)\n    }\n\n    list.forEach((number, index) => {\n      aux(list.filter((v, index2) => index2 !== index), [...current, number])\n    })\n  }\n  \n  aux(nums)\n  return result\n}\n\nconsole.log(permute([1,2,3]))\n`.trim();\nconst largestNumber = `\nfunction largestNumber(nums = []) {\n  nums.sort((a, b) => {\n    const digitsA = a.toString(10) + b.toString(10);\n    const digitsB = b.toString(10) + a.toString(10);\n\n    for (let i = 0; i < digitsA.length; i++) {\n      const digitB = parseInt(digitsB[i], 10);\n      const digitA = parseInt(digitsA[i], 10);\n\n      if (digitB > digitA || digitB < digitA) return digitB - digitA;\n    }\n    return 0\n  })\n  \n  const result = nums.join('')\n  return result[0] === '0' ? '0' : result\n}\n\nconsole.log(largestNumber([10,2]))\n`.trim();\nconst containsDuplicate = `\nfunction containsDuplicate(nums){\n  const map = {}\n  \n  for (num of nums) {\n    if (map[num]) {\n      return true\n    }\n    map[num] = 1\n  }\n  return false\n}\n\nconsole.log(containsDuplicate([1,2,3,1]))\n`.trim();\nconst summaryRanges = `\nfunction summaryRanges(nums) {\n  let start = null\n  const result = []\n\n  for (let i = 0; i < nums.length; i++) {\n    if (start === null) {\n      start = nums[i]\n    }\n    if (nums[i] === nums[i + 1] - 1) continue;\n\n    if (nums[i] === start) {\n      result.push(nums[i].toString())\n      start = null\n    } \n    else {\n      result.push('$'{start}->'$'{nums[i]}')\n      start = null\n    }\n  }\n  \n  return result\n}\n\nconsole.log(summaryRanges([1,2,3,4,6,7,9]))\n`.trim();\nconst productExceptSelf = `\nfunction productExceptSelf(nums = []){\n  if(!nums.length) return nums;\n\n  const product = [nums[0]]\n  for(let i = 1; i < nums.length; i++) {\n      product[i] = nums[i] * product[i-1]\n  }\n\n  let suffixProduct = 1;\n  for(let i = nums.length -1; i >= 1; i--) {\n      product[i] = product[i-1] * suffixProduct\n      suffixProduct *= nums[i]\n  }\n  \n  product[0] = suffixProduct\n  return product\n}\n\nconsole.log(productExceptSelf([1,2,3,4]))\n`.trim();\nconst countSmaller = `\nfunction countSmaller(nums) {\n  const result = nums.map(() => 0);\n\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[j] < nums[i]) {\n        result[i] += 1\n      }\n    }\n  }\n  \n  return result\n}\n\nconsole.log(countSmaller([5,2,6,1]))\n`.trim();\nconst coinChange = `\nfunction coinChange(coins = [], amount){\n  const memo = {}\n\n  function aux(remainAmount, coinIndex){\n    if (memo[remainAmount] !== undefined && memo[remainAmount][coinIndex] !== undefined){\n      return memo[remainAmount][coinIndex]\n    }\n\n    if (remainAmount < 0) return Infinity;\n    if (remainAmount === 0) return 0;\n    if (coinIndex < 0 && remainAmount > 0) return Infinity;\n\n    memo[remainAmount] = memo[remainAmount] || {}\n    memo[remainAmount][coinIndex] = Math.min(aux(remainAmount - coins[coinIndex], coinIndex) + 1, \n                                             aux(remainAmount, coinIndex - 1))\n    return memo[remainAmount][coinIndex]\n  }\n\n  const result = aux(amount, coins.length - 1);\n  return result === Infinity ? -1 : result\n}\n\nconsole.log(coinChange([1, 2, 5], 11))\n`.trim();\n\nclass DSLogic2 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663\n      },\n      __self: this\n    }, \"1. Convert a string to an array\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: strArray,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673\n      },\n      __self: this\n    }, \"2. Sort\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Sort,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683\n      },\n      __self: this\n    }, \"3. Remove Duplicates\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: duplicates,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 693\n      },\n      __self: this\n    }, \"4. Compare Array\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: compare_array,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 695\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703\n      },\n      __self: this\n    }, \"5. Recursion Reverse Array\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: recursionReverseArray,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 713\n      },\n      __self: this\n    }, \"19. Missing Number\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 714\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: missing_number,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 721\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 723\n      },\n      __self: this\n    }, \"6. Median of Two Sorted Arrays.\"), \"Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 726\n      },\n      __self: this\n    }, \"Follow up: \"), \"The overall run time complexity should be O(log (m+n)).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 727\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 730\n      },\n      __self: this\n    }, \"Example 1:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732\n      },\n      __self: this\n    }, \"Input: \"), \"nums1 = [1,3], nums2 = [2]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 733\n      },\n      __self: this\n    }, \"Output: \"), \"2.00000\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 733\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734\n      },\n      __self: this\n    }, \"Explanation: \"), \"merged array = [1,2,3] and median is 2.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735\n      },\n      __self: this\n    }, \"Example 2: \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 737\n      },\n      __self: this\n    }, \"Input: \"), \"nums1 = [1,2], nums2 = [3,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 737\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 738\n      },\n      __self: this\n    }, \"Output: \"), \"2.50000\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 738\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 739\n      },\n      __self: this\n    }, \"Explanation: \"), \"merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 740\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: findMedianSortedArrays,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 741\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 747\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 749\n      },\n      __self: this\n    }, \"7. Maximum Subarray.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 750\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [-2,1,-3,4,-1,2,1,-5,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 750\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 751\n      },\n      __self: this\n    }, \"Output: \"), \"6\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 751\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 752\n      },\n      __self: this\n    }, \"Explanation: \"), \"[4,-1,2,1] has the largest sum = 6.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maxSubArray,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 760\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 762\n      },\n      __self: this\n    }, \"8. Plus One.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 763\n      },\n      __self: this\n    }, \"Input: \"), \"digits = [1,2,3]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 763\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 764\n      },\n      __self: this\n    }, \"Output: \"), \"[1,2,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 765\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 765\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 766\n      },\n      __self: this\n    }, \"Example 2:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 766\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 767\n      },\n      __self: this\n    }, \"Input: \"), \"digits = [4,3,2,1]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 767\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 768\n      },\n      __self: this\n    }, \"Output: \"), \"[4,3,2,2]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 769\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: plusOne,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 770\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 776\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 778\n      },\n      __self: this\n    }, \"9. Array Counter\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 779\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: arrayCounter,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 780\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 786\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 788\n      },\n      __self: this\n    }, \"10. Counting Elements.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 789\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: countElements,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 790\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 796\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 798\n      },\n      __self: this\n    }, \"11. 132 Pattern.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 799\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [1,2,3,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 799\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 800\n      },\n      __self: this\n    }, \"Output: \"), \"false\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 800\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 801\n      },\n      __self: this\n    }, \"Explanation: \"), \"There is no 132 pattern in the sequence.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 802\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: find132pattern,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 803\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 809\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 811\n      },\n      __self: this\n    }, \"13. Number of Good Pairs.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 812\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [1,2,3,1,1,3] \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 812\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 813\n      },\n      __self: this\n    }, \"Output: \"), \"4 \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 813\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 814\n      },\n      __self: this\n    }, \"Explanation: \"), \"There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 815\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: numIdenticalPairs,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 816\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 822\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 824\n      },\n      __self: this\n    }, \"14. Remove Element\"), \"Given an array nums and a value val, remove all instances of that value in-place and return the new length.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 826\n      },\n      __self: this\n    }), \"Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 828\n      },\n      __self: this\n    }), \"The order of elements can be changed. It doesn't matter what you leave beyond the new length.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 830\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 830\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 831\n      },\n      __self: this\n    }, \"Example 1:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 831\n      },\n      __self: this\n    }), \"Given nums = [3,2,2,3], val = 3,\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 833\n      },\n      __self: this\n    }), \"Your function should return length = 2, with the first two elements of nums being 2.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 834\n      },\n      __self: this\n    }), \"It doesn't matter what you leave beyond the returned length.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 836\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: removeElement,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 837\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 843\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 845\n      },\n      __self: this\n    }, \"15. Find First and Last Position of Element in Sorted Array\"), \"Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 847\n      },\n      __self: this\n    }), \"Your algorithm's runtime complexity must be in the order of O(log n).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 848\n      },\n      __self: this\n    }), \"If the target is not found in the array, return [-1, -1].\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 850\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 852\n      },\n      __self: this\n    }, \"Example 1:\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 853\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [5,7,7,8,8,10], target = 8\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 853\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 854\n      },\n      __self: this\n    }, \"Output: \"), \"[3,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 854\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 854\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 855\n      },\n      __self: this\n    }, \"Example 2\"), \":\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 855\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 857\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [5,7,7,8,8,10], target = 6\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 857\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 858\n      },\n      __self: this\n    }, \"Output: \"), \"[-1,-1]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 859\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: searchRange,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 860\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 866\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 868\n      },\n      __self: this\n    }, \"16. Maximum Gap.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 869\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maximumGap,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 870\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 876\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 878\n      },\n      __self: this\n    }, \"17. Search Insert Position.\"), \"Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 880\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 881\n      },\n      __self: this\n    }, \"Input: \"), \"[1,3,5,6], 5\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 881\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 882\n      },\n      __self: this\n    }, \"Output: \"), \"2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 882\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 882\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 883\n      },\n      __self: this\n    }, \"Example 2:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 883\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 885\n      },\n      __self: this\n    }, \"Input: \"), \"[1,3,5,6], 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 885\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 886\n      },\n      __self: this\n    }, \"Output: \"), \"1\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 887\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: searchInsert,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 888\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 894\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 896\n      },\n      __self: this\n    }, \"18. Combination Sum\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 897\n      },\n      __self: this\n    }, \"Input: \"), \"candidates = [2,3,6,7], target = 7,\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 897\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 898\n      },\n      __self: this\n    }, \"A solution set is: \"), \"[ [7],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 900\n      },\n      __self: this\n    }), \"[2,2,3]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 901\n      },\n      __self: this\n    }), \"]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 903\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: combinationSum,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 904\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 910\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 914\n      },\n      __self: this\n    }, \"20. First Missing Positive\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 915\n      },\n      __self: this\n    }, \"Input: \"), \"[3,4,-1,1]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 915\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 916\n      },\n      __self: this\n    }, \"Output: \"), \"2\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 917\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: firstMissingPositive,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 918\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 924\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 928\n      },\n      __self: this\n    }, \"22. Permutations.\"), \"Given a collection of distinct integers, return all possible permutations.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 930\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: permute,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 931\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 937\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 939\n      },\n      __self: this\n    }, \"23. Largest Number.\"), \"Given a list of non negative integers, arrange them such that they form the largest number.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 941\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: largestNumber,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 942\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 948\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 950\n      },\n      __self: this\n    }, \"24. Contains Duplicate.\"), \"Given an array of integers, find if the array contains any duplicates.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 952\n      },\n      __self: this\n    }), \"Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 954\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: containsDuplicate,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 955\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 961\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 963\n      },\n      __self: this\n    }, \"25. Summary Ranges.\"), \"Given a sorted integer array without duplicates, return the summary of its ranges.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 965\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: summaryRanges,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 966\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 972\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 974\n      },\n      __self: this\n    }, \"26. Product of Array Except Self.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 975\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: productExceptSelf,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 976\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 982\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 984\n      },\n      __self: this\n    }, \"27. Count of Smaller Numbers After Self.\"), \"You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 986\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 987\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [5,2,6,1]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 987\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 988\n      },\n      __self: this\n    }, \"Output: \"), \"[2,1,1,0]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 988\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 989\n      },\n      __self: this\n    }, \"Explanation: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 990\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 991\n      },\n      __self: this\n    }, \"To the right of 5 there are 2 smaller elements (2 and 1).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 992\n      },\n      __self: this\n    }, \"To the right of 2 there is only 1 smaller element (1).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 993\n      },\n      __self: this\n    }, \"To the right of 6 there is 1 smaller element (1).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 994\n      },\n      __self: this\n    }, \"To the right of 1 there is 0 smaller element.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 996\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: countSmaller,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 997\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1003\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1005\n      },\n      __self: this\n    }, \"28. Coin Change.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1006\n      },\n      __self: this\n    }, \"Input: \"), \"coins = [1, 2, 5], amount = 11\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1006\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1007\n      },\n      __self: this\n    }, \"Output: \"), \"3 \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1007\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1008\n      },\n      __self: this\n    }, \"Explanation: \"), \"11 = 5 + 5 + 1\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1009\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: coinChange,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1010\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1016\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default withStyles(styles)(DSLogic2);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/arrayAlgo.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","strArray","trim","Sort","duplicates","compare_array","recursionReverseArray","findMedianSortedArrays","maxSubArray","plusOne","arrayCounter","countElements","find132pattern","numIdenticalPairs","removeElement","searchRange","maximumGap","searchInsert","combinationSum","missing_number","firstMissingPositive","findMissingRanges","permute","largestNumber","containsDuplicate","summaryRanges","productExceptSelf","countSmaller","coinChange","DSLogic2","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst strArray = `\n    var strArray = \"StackOverflow\".split(\"\");\n    console.log(strArray.join(\"\"));\n`.trim();\n\nconst Sort = `\nlet i, j, arr=[0,9,8,7,6];\nvar max=0;\n\nfor(i=0; i<arr.length; i++){\n  for(j=i; j<arr.length; j++){\n    if(arr[i]>arr[j]){\n      var temp=arr[i];\n      arr[i]=arr[j];\n      arr[j]=temp;\n    }\n  }\n}\n\nconsole.log(arr);\n\n\n//Greatest Product Of 3\nmax = arr[arr.length-1] * arr[arr.length-2] * arr[arr.length-3]\nconsole.log(max);\n`.trim()\n\nconst duplicates = `\nvar array = [1,2,3,4,3,0,9,0,1];\nvar result=[];\n\nfor(let i=0; i<array.length;i++){\n    let count=0;\n    for(let j=0;j<result.length;j++){\n        if(array[i]==result[j]){\n            count +=1;\n        }\n    }\n    if(count==0){\n        result.push(array[i]);\n    }  \n}\n\nconsole.log(result) `.trim()\n\nconst compare_array = `\nfunction compare(){\n  const arr=[1,2,3,4,5,6];\n  const arr2=[5,6,7,8,9,0];\n  const result=[];\n  \n  for(let i=0; i<arr.length; i++){\n    if(arr2.indexOf(arr[i]) !== -1){\n      result.push(arr[i]);\n    }\n  }\n  console.log(result)\n}\n\ncompare();\n\n\n//Unique name\nfunction getUnique(){\n  var names = [\"John\", \"Peter\", \"Clark\", \"Harry\", \"John\", \"Alice\"];\n  var newName = [];\n  \n  for(i=0; i < names.length; i++){\n      if(newName.indexOf(names[i]) === -1) {\n          newName.push(names[i]);\n      }\n  }\n  console.log(newName);\n}\n\ngetUnique();\n`.trim();\n\nconst recursionReverseArray = `\nvar apple = [5,6,7,8,9];\nvar reverse = function(arr){\n var result = [];\n var newArr = [];\n   arr.forEach((item) => newArr.push(item));\n     var inner = function(x){\n     if(x.length > 0){\n       result.push(x.pop())\n       inner(x);\n     }\n   return;\n }\n \n inner(newArr);\n return result;\n}\n\nconsole.log(apple)\nconsole.log(reverse(apple))`.trim()\n\nconst findMedianSortedArrays = `\nfunction findMedianSortedArrays(nums1, nums2){\n  function merge(xs1, xs2){\n    if (!xs1 || !xs1.length) return xs2;\n    if (!xs2 || !xs2.length) return xs1;\n\n    const [hd1, ...rest1] = xs1\n    const [hd2, ...rest2] = xs2\n    return hd1 <= hd2 ? [hd1, ...merge(rest1, xs2)] : [hd2, ...merge(xs1, rest2)]\n  }\n  const nums = merge(nums1, nums2)\n  const middle = Math.floor((nums.length-1) / 2)\n\n  return (middle * 2 === (nums.length-1)) ?  nums[middle] : ((nums[middle] + nums[middle + 1]) / 2) \n}\n\nconsole.log(findMedianSortedArrays([1,2],[3,4]))\n`.trim();\n\nconst maxSubArray = `\nfunction maxSubArray(nums){\n  let max = -Infinity;\n  let currentMax = -Infinity;\n\n  for (let i = 0; i < nums.length; i++) {\n    currentMax = Math.max(\n      currentMax + nums[i],\n      nums[i],\n    )\n    max = Math.max(max, currentMax)\n  }\n  return max\n}\n\nconsole.log(maxSubArray([-2,1,-3,4,-1,2,1,-5,4]))\n`.trim();\n\nconst plusOne = `\nfunction plusOne(digits = []){\n  if (digits.length === 0) return digits;\n\n  if (digits[digits.length - 1] < 9) {\n    digits[digits.length - 1] += 1\n    return digits\n  }\n\n  let index = digits.length - 1\n  let current = 1\n\n  while (index >= 0) {\n    const sum = current + digits[index]\n    if (sum > 9) {\n      digits[index] = sum - 10\n      current = 1\n      index -= 1\n    } \n    else {\n      digits[index] = sum\n      current = 0\n      index -= 1\n      return digits\n    }\n  }\n  return current === 1 ? [1, ...digits] : digits\n}\n\nconsole.log(plusOne([1,2,3]))\n`.trim();\n\nconst arrayCounter = `\nfunction arrCounter(arr){\n  var counter = 0;\n  var maxCount = 0;\n\n    function inner(n){\n      if(!Array.isArray(n)){\n        maxCount = Math.max(maxCount, counter);\n     counter = 0;\n     return\n   }\n   \n   n.forEach(num => {\n   counter ++;\n   inner(num);\n   })\n }\n \n inner(arr);\n console.log(maxCount)\n return maxCount;\n}\n\narrCounter([[3]])\narrCounter([[[[[[[9]]]]]]])\narrCounter([])\n`.trim()\n\nconst countElements = `\nfunction countElements(arr) {\n  const set = new Set()\n  \n  arr.forEach(num => set.add(num))\n  return arr.reduce((acc, num) => {\n      if(set.has(num+1)){\n          return acc + 1\n      }\n      return acc\n  },0)\n};\n\nconsole.log(countElements([1,2,3,0]))`.trim();\n\nconst find132pattern = `\nfunction find132pattern(nums) {\n  let max = -Infinity\n  const stack = []; \n\n  for (let i = nums.length - 1; i >= 0; i--) {\n    while (nums[i] > stack[stack.length - 1]) {\n      max = stack.pop()\n    }\n    if (nums[i] < max) return true;\n    stack.push(nums[i])\n  }\n  \n  return false\n}\n\nconsole.log(find132pattern([3,1,4,2]))\n`.trim();\n\nconst numIdenticalPairs = `\nfunction numIdenticalPairs(nums) {\n  let count = 0\n  \n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[i] === nums[j]) {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\nconsole.log(numIdenticalPairs([1,2,3,1,1,3]))\n`.trim();\n\nconst removeElement = `\nfunction removeElement(nums, val) {\n  let left = 0\n\n  const swap = (a, b) => {\n    const temp = nums[a]\n    nums[a] = nums[b]\n    nums[b] = temp\n  }\n\n  while (left <= nums.length - 1) {\n    while (nums[nums.length - 1] === val) {\n      nums.pop()\n    }\n    \n    while (nums[left] !== val && left <= nums.length - 1) {\n      left += 1\n    }\n\n    if (left < nums.length - 1) {\n      swap(left, nums.length - 1)\n      left += 1\n      nums.pop()\n    }\n  }\n  return nums.length\n}\n\nconsole.log(removeElement([0,1,2,2,3,0,4,2],1))\n`.trim();\n\nconst searchRange = `\nfunction searchRange(nums = [], target){\n  function binarySearch(left, right, position = 'middle'){\n    let pivot = -1\n    \n    while (left <= right) {\n      const middle = Math.floor((left + right) / 2)\n      if (nums[middle] === target) {\n        if (position === 'middle') {\n          pivot = middle\n          break\n        } else if (position === 'left') {\n          pivot = middle\n          right = middle - 1\n        } else if (position === 'right') {\n          pivot = middle\n          left = middle + 1\n        }\n      } else if (nums[middle] < target) {\n        left = middle + 1\n      } else {\n        right = middle - 1\n      }\n    }\n    return pivot\n  }\n\n\n  const pivot = binarySearch(0, nums.length - 1, 'middle')\n  return [\n    binarySearch(0, pivot, 'left'),\n    binarySearch(pivot, nums.length - 1, 'right'),\n  ]\n}\n\nconsole.log(searchRange([5,7,7,8,8,10],6))\n`.trim();\n\nconst maximumGap = `\nfunction maximumGap(nums = []) {\n  const maxValue = Math.max(...nums)\n\n  function countingSort(place){\n    const count = []\n    nums.forEach((num) => {\n      const index = Math.floor(num / place) % 10\n      count[index] = count[index] || []\n      count[index].push(num)\n    })\n    return count.reduce((acc, v) => {\n      if (v !== undefined) {\n        acc = acc.concat(v)\n      }\n      return acc\n    }, [])\n  }\n\n  let place = 1\n  while (Math.floor(maxValue / place) > 0) {\n    nums = countingSort(place)\n    place *= 10\n  }\n  let max = 0\n  for (let i = 1; i < nums.length; i++) {\n    max = Math.max(max, nums[i] - nums[i - 1])\n  }\n  return max\n}\n\nconsole.log(maximumGap([3,6,9,1]))\n`.trim();\n\nconst searchInsert = `\nfunction searchInsert(nums, target){\n  function aux(low, high){\n    if (low > high) return low;\n\n    const middle = Math.floor((low + high) / 2)\n    \n    if (target === nums[middle]) {\n      return middle\n    } if (target > nums[middle]) {\n      return aux(middle + 1, high)\n    }\n    return aux(low, middle - 1)\n  }\n  return aux(0, nums.length - 1)\n}\n\nconsole.log(searchInsert([1,3,5,6], 5))\n`.trim();\n\nconst combinationSum = `\nfunction combinationSum(candidates, target) {\n  const result = []\n\n  function aux(start,current=[], sum = 0){\n      if(sum > target) return;\n\n      if(sum === target) {\n          result.push(current)\n          return\n      }\n      for(let i = start; i < candidates.length; i++) {\n          aux(i, [...current, candidates[i]], sum+candidates[i])\n      }\n  }\n  for(let i = 0; i <  candidates.length; i++) {\n      aux(i, [candidates[i]], candidates[i])\n  }\n  return result\n};\n\nconsole.log(combinationSum([2,3,5],8))\n`.trim();\n\nconst missing_number = `\nfunction missNum() {\n  let i, arr=[0,1,2,4,5], exactsum=0, result=0;\n  exactsum = arr.reduce((a, b) => a + b);\n\n  for (i=0; i<=arr.length; i++) {\n    result += i\n  }\n  \n  result -= exactsum;\n  console.log('Missing Number', result)\n}\n\nmissNum();\n `.trim()\n\nconst firstMissingPositive = `\nfunction firstMissingPositive(nums = []){\n  function swap(a, b){\n    const temp = nums[a]\n    nums[a] = nums[b]\n    nums[b] = temp\n  }\n\n  let index = 0\n  while (index < nums.length) {\n    if (nums[index] !== nums[nums[index] - 1] && nums[index] > 0 && nums[index] <= nums.length){\n          swap(index, nums[index] - 1)\n      } else {\n          index += 1\n      }\n   }\n\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] !== i + 1) return i + 1;\n  }\n  return nums.length + 1\n}\n\nconsole.log(firstMissingPositive([3,4,-1,1]))\n`.trim();\n\nconst findMissingRanges = `\nfunction findMissingRanges(nums, lower, upper) {\n  const result = [];\n  const count = (lo, hi) => hi - lo - 1;\n\n  function set(lo, hi){\n    if (count(lo, hi) === 1) {\n      result.push('$'{lo + 1}')\n    } \n    else if (count(lo, hi) > 1) {\n      result.push('$'{lo + 1}->'$'{hi - 1}')\n    }\n  }\n  \n  for (let i = 0; i <= nums.length; i++) {\n    set(\n      i === 0 ? lower - 1 : nums[i - 1],\n      i === nums.length ? upper + 1 : nums[i],\n    )\n  }\n  return result\n}\n\nconsole.log(findMissingRanges([1,2,3,-2,4]))\n`.trim();\n\nconst permute = `\nfunction permute(nums = []){\n  const result = [];\n\n  function aux(list = [], current = []){\n    if (list.length === 0) {\n      result.push(current)\n    }\n\n    list.forEach((number, index) => {\n      aux(list.filter((v, index2) => index2 !== index), [...current, number])\n    })\n  }\n  \n  aux(nums)\n  return result\n}\n\nconsole.log(permute([1,2,3]))\n`.trim();\n\nconst largestNumber = `\nfunction largestNumber(nums = []) {\n  nums.sort((a, b) => {\n    const digitsA = a.toString(10) + b.toString(10);\n    const digitsB = b.toString(10) + a.toString(10);\n\n    for (let i = 0; i < digitsA.length; i++) {\n      const digitB = parseInt(digitsB[i], 10);\n      const digitA = parseInt(digitsA[i], 10);\n\n      if (digitB > digitA || digitB < digitA) return digitB - digitA;\n    }\n    return 0\n  })\n  \n  const result = nums.join('')\n  return result[0] === '0' ? '0' : result\n}\n\nconsole.log(largestNumber([10,2]))\n`.trim();\n\nconst containsDuplicate = `\nfunction containsDuplicate(nums){\n  const map = {}\n  \n  for (num of nums) {\n    if (map[num]) {\n      return true\n    }\n    map[num] = 1\n  }\n  return false\n}\n\nconsole.log(containsDuplicate([1,2,3,1]))\n`.trim();\n\nconst summaryRanges = `\nfunction summaryRanges(nums) {\n  let start = null\n  const result = []\n\n  for (let i = 0; i < nums.length; i++) {\n    if (start === null) {\n      start = nums[i]\n    }\n    if (nums[i] === nums[i + 1] - 1) continue;\n\n    if (nums[i] === start) {\n      result.push(nums[i].toString())\n      start = null\n    } \n    else {\n      result.push('$'{start}->'$'{nums[i]}')\n      start = null\n    }\n  }\n  \n  return result\n}\n\nconsole.log(summaryRanges([1,2,3,4,6,7,9]))\n`.trim();\n\nconst productExceptSelf = `\nfunction productExceptSelf(nums = []){\n  if(!nums.length) return nums;\n\n  const product = [nums[0]]\n  for(let i = 1; i < nums.length; i++) {\n      product[i] = nums[i] * product[i-1]\n  }\n\n  let suffixProduct = 1;\n  for(let i = nums.length -1; i >= 1; i--) {\n      product[i] = product[i-1] * suffixProduct\n      suffixProduct *= nums[i]\n  }\n  \n  product[0] = suffixProduct\n  return product\n}\n\nconsole.log(productExceptSelf([1,2,3,4]))\n`.trim();\n\nconst countSmaller = `\nfunction countSmaller(nums) {\n  const result = nums.map(() => 0);\n\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[j] < nums[i]) {\n        result[i] += 1\n      }\n    }\n  }\n  \n  return result\n}\n\nconsole.log(countSmaller([5,2,6,1]))\n`.trim();\n\nconst coinChange = `\nfunction coinChange(coins = [], amount){\n  const memo = {}\n\n  function aux(remainAmount, coinIndex){\n    if (memo[remainAmount] !== undefined && memo[remainAmount][coinIndex] !== undefined){\n      return memo[remainAmount][coinIndex]\n    }\n\n    if (remainAmount < 0) return Infinity;\n    if (remainAmount === 0) return 0;\n    if (coinIndex < 0 && remainAmount > 0) return Infinity;\n\n    memo[remainAmount] = memo[remainAmount] || {}\n    memo[remainAmount][coinIndex] = Math.min(aux(remainAmount - coins[coinIndex], coinIndex) + 1, \n                                             aux(remainAmount, coinIndex - 1))\n    return memo[remainAmount][coinIndex]\n  }\n\n  const result = aux(amount, coins.length - 1);\n  return result === Infinity ? -1 : result\n}\n\nconsole.log(coinChange([1, 2, 5], 11))\n`.trim();\n\n\nclass DSLogic2 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n            <h3>1. Convert a string to an array</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={strArray}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Sort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Remove Duplicates</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={duplicates}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Compare Array</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={compare_array}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. Recursion Reverse Array</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={recursionReverseArray}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>19. Missing Number</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={missing_number}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Median of Two Sorted Arrays.</h3>\n              Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\n              <br/>\n              <b>Follow up: </b>The overall run time complexity should be O(log (m+n)).\n              <br/>\n              \n\n              <b>Example 1:</b>\n              <br/>\n              <b>Input: </b>nums1 = [1,3], nums2 = [2]<br/>\n              <b>Output: </b>2.00000<br/>\n              <b>Explanation: </b>merged array = [1,2,3] and median is 2.<br/><br/>\n              <b>Example 2: </b><br/>\n\n              <b>Input: </b>nums1 = [1,2], nums2 = [3,4]<br/>\n              <b>Output: </b>2.50000<br/>\n              <b>Explanation: </b>merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n              <div style={titles}>\n                <PrismCode\n                  code={findMedianSortedArrays}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>7. Maximum Subarray.</h3>\n              <b>Input: </b>nums = [-2,1,-3,4,-1,2,1,-5,4]<br/>\n              <b>Output: </b>6<br/>\n              <b>Explanation: </b>[4,-1,2,1] has the largest sum = 6.\n              <div style={titles}>\n                <PrismCode\n                  code={maxSubArray}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>8. Plus One.</h3>\n              <b>Input: </b>digits = [1,2,3]<br/>\n              <b>Output: </b>[1,2,4]\n              <br/><br/>\n              <b>Example 2:</b><br/>\n              <b>Input: </b>digits = [4,3,2,1]<br/>\n              <b>Output: </b>[4,3,2,2]\n              <div style={titles}>\n                <PrismCode\n                  code={plusOne}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>9. Array Counter</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={arrayCounter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>10. Counting Elements.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={countElements}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>11. 132 Pattern.</h3>\n              <b>Input: </b>nums = [1,2,3,4]<br/>\n              <b>Output: </b>false<br/>\n              <b>Explanation: </b>There is no 132 pattern in the sequence.\n              <div style={titles}>\n                <PrismCode\n                  code={find132pattern}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>13. Number of Good Pairs.</h3>\n              <b>Input: </b>nums = [1,2,3,1,1,3] <br/>\n              <b>Output: </b>4 <br/>\n              <b>Explanation: </b>There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.\n              <div style={titles}>\n                <PrismCode\n                  code={numIdenticalPairs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>14. Remove Element</h3>\n              Given an array nums and a value val, remove all instances of that value in-place and return the new length.\n              <br/>\n              Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n              <br/>\n              The order of elements can be changed. It doesn't matter what you leave beyond the new length.\n              <br/><br/>\n              <b>Example 1:</b><br/>\n\n              Given nums = [3,2,2,3], val = 3,<br/>\n              Your function should return length = 2, with the first two elements of nums being 2.<br/>\n              It doesn't matter what you leave beyond the returned length.\n              <div style={titles}>\n                <PrismCode\n                  code={removeElement}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>15. Find First and Last Position of Element in Sorted Array</h3>\n              Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\n              <br/>\n              Your algorithm's runtime complexity must be in the order of O(log n).<br/>\n\n              If the target is not found in the array, return [-1, -1].<br/>\n\n              <b>Example 1:</b>\n              <b>Input: </b>nums = [5,7,7,8,8,10], target = 8<br/>\n              <b>Output: </b>[3,4]<br/><br/>\n              <b>Example 2</b>:<br/>\n\n              <b>Input: </b>nums = [5,7,7,8,8,10], target = 6<br/>\n              <b>Output: </b>[-1,-1]\n              <div style={titles}>\n                <PrismCode\n                  code={searchRange}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>16. Maximum Gap.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={maximumGap}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>17. Search Insert Position.</h3>\n              Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n              <br/>\n              <b>Input: </b>[1,3,5,6], 5<br/>\n              <b>Output: </b>2<br/><br/>\n              <b>Example 2:</b><br/>\n\n              <b>Input: </b>[1,3,5,6], 2<br/>\n              <b>Output: </b>1\n              <div style={titles}>\n                <PrismCode\n                  code={searchInsert}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>18. Combination Sum</h3>\n              <b>Input: </b>candidates = [2,3,6,7], target = 7,<br/>\n              <b>A solution set is: </b>\n              [\n                [7],<br/>\n                [2,2,3]<br/>\n              ]\n              <div style={titles}>\n                <PrismCode\n                  code={combinationSum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n             \n\n              <h3>20. First Missing Positive</h3>\n              <b>Input: </b>[3,4,-1,1]<br/>\n              <b>Output: </b>2\n              <div style={titles}>\n                <PrismCode\n                  code={firstMissingPositive}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              \n\n              <h3>22. Permutations.</h3>\n              Given a collection of distinct integers, return all possible permutations.\n              <div style={titles}>\n                <PrismCode\n                  code={permute}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>23. Largest Number.</h3>\n              Given a list of non negative integers, arrange them such that they form the largest number.\n              <div style={titles}>\n                <PrismCode\n                  code={largestNumber}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>24. Contains Duplicate.</h3>\n              Given an array of integers, find if the array contains any duplicates.\n              <br/>\n              Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.\n              <div style={titles}>\n                <PrismCode\n                  code={containsDuplicate}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>25. Summary Ranges.</h3>\n              Given a sorted integer array without duplicates, return the summary of its ranges.\n              <div style={titles}>\n                <PrismCode\n                  code={summaryRanges}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>26. Product of Array Except Self.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={productExceptSelf}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>27. Count of Smaller Numbers After Self.</h3>\n              You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].\n              <br/>\n              <b>Input: </b>nums = [5,2,6,1]<br/>\n              <b>Output: </b>[2,1,1,0]<br/>\n              <b>Explanation: </b>\n              <ul>\n                <li>To the right of 5 there are 2 smaller elements (2 and 1).</li>\n                <li>To the right of 2 there is only 1 smaller element (1).</li>\n                <li>To the right of 6 there is 1 smaller element (1).</li>\n                <li>To the right of 1 there is 0 smaller element.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={countSmaller}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>28. Coin Change.</h3>\n              <b>Input: </b>coins = [1, 2, 5], amount = 11<br/>\n              <b>Output: </b>3 <br/>\n              <b>Explanation: </b>11 = 5 + 5 + 1\n              <div style={titles}>\n                <PrismCode\n                  code={coinChange}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic2));\n"]},"metadata":{},"sourceType":"module"}