{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/pureComp.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../prismCode';\nimport Pure from '../../../assets/pure.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 350,\n  width: 600\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst childData = `\nconst App = () => {\n  const [users, setUsers] = useState(\"\");\n\n  const handleText = (myData) => {\n    setUsers(myData);\n  };\n\n  return (\n    <div>\n      {users}\n      <Child refer={handleText} />\n    </div>\n  );\n};\n\nexport default App;\n\nconst Child = (props) => {\n  const data = useState(\"first\");\n\n  const changeText = () => {\n    props.refer(data);\n  };\n\n  return (\n    <div>\n      <button onClick={changeText}>Click</button>\n    </div>\n  );\n};`.trim();\nconst pureComps = `\nconst quotes = [\"quote1\", \"quote2\", \"quote3\", \"quote4\", \"quote5\"];\n\nconst NotFound = () => {\n  let randomQuote = quotes[Math.floor(Math.random() * quotes.length)];\n  return (\n    <h1>\n      Quote: <strong>{randomQuote}</strong>\n    </h1>\n  );\n};\n\nexport default class Controll extends Component {\n  state = { username: \"foo\" };\n\n  componentDidMount() {\n    setTimeout(() => this.setState({ username: \"bar\" }), 2000); // Simulate async ajax call\n  }\n\n  render() {\n    return (\n      <div>\n        Welcome: {this.state.username}\n        <NotFound />\n      </div>\n    );\n  }\n}\n`.trim();\nconst pureComps2 = `\nconst quotes = [\"quote1\", \"quote2\", \"quote3\", \"quote4\", \"quote5\"];\n\nclass NotFound extends React.PureComponent {\n  render() {\n    let randomQuote = quotes[Math.floor(Math.random() * quotes.length)];\n    return (\n      <h1>\n        Quote: <strong>{randomQuote}</strong>\n      </h1>\n    );\n  }\n}\n\nexport default class Controll extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { username: \"foo\" };\n  }\n\n  componentDidMount() {\n    setTimeout(() => this.setState({ username: \"bar\" }), 2000);\n  }\n\n  render() {\n    return (\n      <div>\n        Welcome: {this.state.username}\n        <NotFound />\n      </div>\n    );\n  }\n}\n`.trim();\nconst PureComponents = `\n//App.js\nimport Task from '../comp';\n\nclass App extends PureComponent {\nstate = {\n     taskList: [\n        { title: 'excercise'},\n        { title: 'cooking'},\n        { title: 'Reacting'},\n     ]\n  };\n\n  componentDidMount() {\n  setInterval(() => {\n     this.setState({taskList: this.state.taskList});\n  }, 1000);\n}\n\nrender() {\n  return (\n      <div>\n         {this.state.taskList.map((task, i) => {\n            return (<Task\n               key={i}\n               title={task.title}\n            />);\n         })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n//text.js\nclass Task extends React.Component {\n  render() {\n     console.log('task added');\n     return (\n          <div>\n            {this.props.title}\n          </div>);\n  }\n}\n\nexport default Task;\n`.trim();\nconst PureComponents5 = `\nconst MyComponent = memo(\n  ({ text, count }) => {\n    console.log('Rendering MyComponent');\n    return (\n      <div>\n        <p>{text}</p>\n        <p>{count}</p>\n      </div>\n    );\n  },\n  (prevProps, nextProps) => {\n    return (\n      prevProps.text === nextProps.text &&\n      prevProps.count === nextProps.count\n    );\n  }\n);\n\nfunction App() {\n  const [text, setText] = useState('Hello');\n  const [count, setCount] = useState(0);\n\n  const handleButton = () => {\n    setCount((prevCount) => prevCount + 1);\n  };\n\n  return (\n    <div>\n      <MyComponent text={text} count={count} />\n      <button onClick={handleButton}>Increment</button>\n      <input\n        type=\"text\"\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n      />\n    </div>\n  );\n}`.trim();\nconst shibling = `\n`.trim();\nconst body = `\n  const App = OriginalComponent => {\n    class NewComponent extends Component {\n      constructor(props) {\n        super(props)\n        this.state={\n          count:0\n        }\n      }\n      \n      incrementCount = () => {\n        this.setState(prevState => {\n          return { count: prevState.count +1 }\n        })\n      }\n      render(){\n        return(\n           <OriginalComponent \n            count={this.state.count}\n            incrementCount={this.incrementCount}\n         />\n        )\n      }\n    }\n    return NewComponent;\n  }\n  \n  \n  \n  const ClickCounter = (props) => {\n      const { count, incrementCount } = props;\n      return (\n        <div>\n          <button onClick={incrementCount}>\n            Click {count} times\n          </button>\n        </div>\n      )\n    }\n  //export default App(ClickCounter);\n  \n  \n  \n  const HoverCounter = (props) => {\n      const { count, incrementCount } = props;\n      return (\n        <div>\n          <button onMouseOver={incrementCount}>\n            Hover {count} times\n          </button>\n        </div>\n      )\n    }\n  \n  export default App(HoverCounter, ClickCounter);\n  //export default App(HoverCounter)`.trim();\nconst ssr = `\n  1. ReactDOM.render(<App />, document.getElementById('root'));\n  \n   replace with \n   \n  ReactDOM.hydrate(<App />, document.getElementById('root'));\n  \n  \n  2. npm install express\n     npm install @babel/register @babel/preset-env @babel/preset-react ignore-styles\n    \n  3. Letâ€™s create an entry point in server/index.js:\n  require('ignore-styles')\n  \n  require('@babel/register')({\n   ignore: [/(node_modules)/],\n   presets: ['@babel/preset-env', '@babel/preset-react']\n  })\n  \n  require('./server')\n     \n  4. Make Build and run with node\n      npm run build\n      node server/index.js\n   \n      \n  //App.js\n  function App() {\n    return (\n      <div>\n        <h1>Server Side Rendering.</h1>\n      </div>\n    );\n  }\n  \n  \n  //server/server.js\n  import path from 'path'\n  import fs from 'fs'\n  \n  import express from 'express'\n  import React from 'react'\n  import ReactDOMServer from 'react-dom/server'\n  // import { StaticRouter } from 'react-router-dom';\n  \n  import App from '../src/App'\n  \n  const PORT = 8080\n  const app = express()\n  \n  const router = express.Router()\n  \n  \n  app.get('/*', (req, res) => {\n      const context = {};\n      const app = ReactDOMServer.renderToString(\n        // <StaticRouter location={req.url} context={context}>\n          <App />\n        // </StaticRouter>\n      );\n    \n      const indexFile = path.resolve('./build/index.html');\n      fs.readFile(indexFile, 'utf8', (err, data) => {\n        if (err) {\n          console.error('Something went wrong:', err);\n          return res.status(500).send('Oops, better luck next time!');\n        }\n    \n        return res.send(\n          data.replace('<div id=\"root\"></div>', '<div id=\"root\">'$'{app}</div>')\n        );\n      });\n    });\n  \n  \n    \n  router.use(\n    express.static(path.resolve(__dirname, '..', 'build'), { maxAge: '30d' })\n  )\n  \n  // tell the app to use the above rules\n  app.use(router)\n  \n  app.use(express.static('./build'))\n  app.listen(PORT, () => {\n    console.log(SSR running on port '$'{PORT})\n  })\n  \n  \n  //index.js\n  require('ignore-styles')\n  \n  require('@babel/register')({\n    ignore: [/(node_modules)/],\n    presets: ['@babel/preset-env', '@babel/preset-react']\n  })\n  \n  require('./server')\n  `.trim();\n\nclass PureComp extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, \"1. Call Child Data\"), \"Snario in which we call state from child to parrent component.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, \"Here App.js is parent class, and child component (First.js) have state data that we call in App component.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: childData,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }, \"2. Component\"), React.createElement(\"img\", {\n      src: Pure,\n      alt: \"Pure\",\n      className: \"responsive\",\n      style: redesign,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }, \"we show a random quote from a list of quotes. The quote component will be a child of another stateful component.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: pureComps,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    }, \"If you run it you will see that as soon as the component is rendered it displays a random quote, but after username state changes, it displays another random quote! A functional stateless component will re render every time the state ofthe parent component changes. Due to the limitations of a functional component you cannot implement life cycle hooks like shouldComponentUpdateto make explicit checks for renders.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, \"3. Pure Component\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }, \"Pure component solves this issue. Pure Component implements shouldComponentUpdate, out of the box.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: pureComps2,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }, \"Will notice that even though the state of the parent changes, the quote displayed, doesn\\u2019t change. Pure component also gives a more stable UI because it will only re render when a prop on which it depends will change.It is recommended by React team that you use PureComponent instead of manually implementing shouldComponentUpdate, because PureComponent performs a shallow comparison of props and state, and reduces the chance that you\\u2019ll skip a necessary update.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }, \"4. How would you prevent a component from rendering\"), \"Three Ways\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }, \"Pure Components: \"), \"Shallowly compares the old state & props with the new state & props.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }, \"React.memo: \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }, \"Should Component Update: \"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }), \"Most likely Pure Components will be sufficient enough. However in cases of props or state structures with deeply nested objects, values won\\u2019t be compared. using the shouldComponentUpdate life-cycle method which is invoked on state or prop changes before render is called.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: PureComponents5,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }, \"5. Error Boundries\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, \"The componentDidCatch lifecycle method is not available in React, Achieve \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, \"componetDidCatch\"), \"error handling behavior using the useEffect and useState hooks.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: shibling,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }, \"6. Higher Order Component\"), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    }, \"HOCs are the coined term for a custom Component that accepts dynamically provided children.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: body,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }, \"5. SSR\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: ssr,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(PureComp);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/pureComp.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Pure","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","childData","trim","pureComps","pureComps2","PureComponents","PureComponents5","shibling","body","ssr","PureComp","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../prismCode';\nimport Pure from '../../../assets/pure.png';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 350,\n  width: 600\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst childData = `\nconst App = () => {\n  const [users, setUsers] = useState(\"\");\n\n  const handleText = (myData) => {\n    setUsers(myData);\n  };\n\n  return (\n    <div>\n      {users}\n      <Child refer={handleText} />\n    </div>\n  );\n};\n\nexport default App;\n\nconst Child = (props) => {\n  const data = useState(\"first\");\n\n  const changeText = () => {\n    props.refer(data);\n  };\n\n  return (\n    <div>\n      <button onClick={changeText}>Click</button>\n    </div>\n  );\n};`.trim();\n\nconst pureComps = `\nconst quotes = [\"quote1\", \"quote2\", \"quote3\", \"quote4\", \"quote5\"];\n\nconst NotFound = () => {\n  let randomQuote = quotes[Math.floor(Math.random() * quotes.length)];\n  return (\n    <h1>\n      Quote: <strong>{randomQuote}</strong>\n    </h1>\n  );\n};\n\nexport default class Controll extends Component {\n  state = { username: \"foo\" };\n\n  componentDidMount() {\n    setTimeout(() => this.setState({ username: \"bar\" }), 2000); // Simulate async ajax call\n  }\n\n  render() {\n    return (\n      <div>\n        Welcome: {this.state.username}\n        <NotFound />\n      </div>\n    );\n  }\n}\n`.trim();\n\nconst pureComps2 = `\nconst quotes = [\"quote1\", \"quote2\", \"quote3\", \"quote4\", \"quote5\"];\n\nclass NotFound extends React.PureComponent {\n  render() {\n    let randomQuote = quotes[Math.floor(Math.random() * quotes.length)];\n    return (\n      <h1>\n        Quote: <strong>{randomQuote}</strong>\n      </h1>\n    );\n  }\n}\n\nexport default class Controll extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { username: \"foo\" };\n  }\n\n  componentDidMount() {\n    setTimeout(() => this.setState({ username: \"bar\" }), 2000);\n  }\n\n  render() {\n    return (\n      <div>\n        Welcome: {this.state.username}\n        <NotFound />\n      </div>\n    );\n  }\n}\n`.trim();\n\nconst PureComponents = `\n//App.js\nimport Task from '../comp';\n\nclass App extends PureComponent {\nstate = {\n     taskList: [\n        { title: 'excercise'},\n        { title: 'cooking'},\n        { title: 'Reacting'},\n     ]\n  };\n\n  componentDidMount() {\n  setInterval(() => {\n     this.setState({taskList: this.state.taskList});\n  }, 1000);\n}\n\nrender() {\n  return (\n      <div>\n         {this.state.taskList.map((task, i) => {\n            return (<Task\n               key={i}\n               title={task.title}\n            />);\n         })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n//text.js\nclass Task extends React.Component {\n  render() {\n     console.log('task added');\n     return (\n          <div>\n            {this.props.title}\n          </div>);\n  }\n}\n\nexport default Task;\n`.trim();\n\nconst PureComponents5 = `\nconst MyComponent = memo(\n  ({ text, count }) => {\n    console.log('Rendering MyComponent');\n    return (\n      <div>\n        <p>{text}</p>\n        <p>{count}</p>\n      </div>\n    );\n  },\n  (prevProps, nextProps) => {\n    return (\n      prevProps.text === nextProps.text &&\n      prevProps.count === nextProps.count\n    );\n  }\n);\n\nfunction App() {\n  const [text, setText] = useState('Hello');\n  const [count, setCount] = useState(0);\n\n  const handleButton = () => {\n    setCount((prevCount) => prevCount + 1);\n  };\n\n  return (\n    <div>\n      <MyComponent text={text} count={count} />\n      <button onClick={handleButton}>Increment</button>\n      <input\n        type=\"text\"\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n      />\n    </div>\n  );\n}`.trim();\n\nconst shibling = `\n`.trim();\n\nconst body = `\n  const App = OriginalComponent => {\n    class NewComponent extends Component {\n      constructor(props) {\n        super(props)\n        this.state={\n          count:0\n        }\n      }\n      \n      incrementCount = () => {\n        this.setState(prevState => {\n          return { count: prevState.count +1 }\n        })\n      }\n      render(){\n        return(\n           <OriginalComponent \n            count={this.state.count}\n            incrementCount={this.incrementCount}\n         />\n        )\n      }\n    }\n    return NewComponent;\n  }\n  \n  \n  \n  const ClickCounter = (props) => {\n      const { count, incrementCount } = props;\n      return (\n        <div>\n          <button onClick={incrementCount}>\n            Click {count} times\n          </button>\n        </div>\n      )\n    }\n  //export default App(ClickCounter);\n  \n  \n  \n  const HoverCounter = (props) => {\n      const { count, incrementCount } = props;\n      return (\n        <div>\n          <button onMouseOver={incrementCount}>\n            Hover {count} times\n          </button>\n        </div>\n      )\n    }\n  \n  export default App(HoverCounter, ClickCounter);\n  //export default App(HoverCounter)`.trim()\n\n  const ssr = `\n  1. ReactDOM.render(<App />, document.getElementById('root'));\n  \n   replace with \n   \n  ReactDOM.hydrate(<App />, document.getElementById('root'));\n  \n  \n  2. npm install express\n     npm install @babel/register @babel/preset-env @babel/preset-react ignore-styles\n    \n  3. Letâ€™s create an entry point in server/index.js:\n  require('ignore-styles')\n  \n  require('@babel/register')({\n   ignore: [/(node_modules)/],\n   presets: ['@babel/preset-env', '@babel/preset-react']\n  })\n  \n  require('./server')\n     \n  4. Make Build and run with node\n      npm run build\n      node server/index.js\n   \n      \n  //App.js\n  function App() {\n    return (\n      <div>\n        <h1>Server Side Rendering.</h1>\n      </div>\n    );\n  }\n  \n  \n  //server/server.js\n  import path from 'path'\n  import fs from 'fs'\n  \n  import express from 'express'\n  import React from 'react'\n  import ReactDOMServer from 'react-dom/server'\n  // import { StaticRouter } from 'react-router-dom';\n  \n  import App from '../src/App'\n  \n  const PORT = 8080\n  const app = express()\n  \n  const router = express.Router()\n  \n  \n  app.get('/*', (req, res) => {\n      const context = {};\n      const app = ReactDOMServer.renderToString(\n        // <StaticRouter location={req.url} context={context}>\n          <App />\n        // </StaticRouter>\n      );\n    \n      const indexFile = path.resolve('./build/index.html');\n      fs.readFile(indexFile, 'utf8', (err, data) => {\n        if (err) {\n          console.error('Something went wrong:', err);\n          return res.status(500).send('Oops, better luck next time!');\n        }\n    \n        return res.send(\n          data.replace('<div id=\"root\"></div>', '<div id=\"root\">'$'{app}</div>')\n        );\n      });\n    });\n  \n  \n    \n  router.use(\n    express.static(path.resolve(__dirname, '..', 'build'), { maxAge: '30d' })\n  )\n  \n  // tell the app to use the above rules\n  app.use(router)\n  \n  app.use(express.static('./build'))\n  app.listen(PORT, () => {\n    console.log(SSR running on port '$'{PORT})\n  })\n  \n  \n  //index.js\n  require('ignore-styles')\n  \n  require('@babel/register')({\n    ignore: [/(node_modules)/],\n    presets: ['@babel/preset-env', '@babel/preset-react']\n  })\n  \n  require('./server')\n  `.trim();\n\nclass PureComp extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n            <h3>1. Call Child Data</h3>\n              Snario in which we call state from child to parrent component.<br />\n              <i>Here App.js is parent class, and child component (First.js) have state data that we call in App component.</i>\n              <div style={titles}>\n                <PrismCode\n                  code={childData}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Component</h3>\n              <img src={Pure} alt=\"Pure\" className=\"responsive\" style={redesign} />\n              <br />\n              <p>\n                we show a random quote from a list of quotes. The quote component will be a child of another stateful component.\n              </p>\n              <div style={titles}>\n                <PrismCode\n                  code={pureComps}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>\n                If you run it you will see that as soon as the component is rendered it displays a random quote, but after username state changes, it displays another random quote! A functional stateless component will re render every time the state ofthe parent component changes. Due to the limitations of a functional component you cannot implement life cycle hooks like shouldComponentUpdateto make explicit checks for renders.\n              </i>\n              <br />\n           \n              <h3>3. Pure Component</h3>\n              <b>Pure component solves this issue. Pure Component implements shouldComponentUpdate, out of the box.</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={pureComps2}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>\n                Will notice that even though the state of the parent changes, the quote displayed, doesnâ€™t change. Pure component also gives a more stable UI because it will only re render when a prop on which it depends will change.It is recommended by React team that you use PureComponent instead of manually implementing shouldComponentUpdate, because PureComponent performs a shallow comparison of props and state, and reduces the chance that youâ€™ll skip a necessary update.\n              </i>\n              <br />\n\n              <h3>4. How would you prevent a component from rendering</h3>\n              Three Ways\n              <br />\n              <ul>\n                <li><b>Pure Components: </b>Shallowly compares the old state & props with the new state & props.</li>\n                <li><b>React.memo: </b></li>\n                <li><b>Should Component Update: </b></li>\n              </ul>\n              <br />\n              Most likely Pure Components will be sufficient enough. However in cases of props or state structures with deeply nested objects, values wonâ€™t be compared.\n              using the shouldComponentUpdate life-cycle method which is invoked on state or prop changes before render is called.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={PureComponents5}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              \n              <h3>5. Error Boundries</h3>\n              <p>The componentDidCatch lifecycle method is not available in React, Achieve <b>componetDidCatch</b>\n               error handling behavior using the useEffect and useState hooks.</p>\n              <div style={titles}>\n                <PrismCode\n                  code={shibling}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Higher Order Component</h3>\n              <i>HOCs are the coined term for a custom Component that accepts dynamically provided children.</i>\n              <div style={titles}>\n                <PrismCode\n                  code={body}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. SSR</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={ssr}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(PureComp));\n"]},"metadata":{},"sourceType":"module"}