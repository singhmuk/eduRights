{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var pipeFor=\"\\n@Component({\\n  selector: 'app-birthday',\\n  template: '<p> Birthday is {{birthday | date}}</p>'\\n})\\nexport class BirthdayComponent {\\n  birthday = new Date(1987, 6, 18); \\n}\".trim();var paraPipes=\"\\n@Component({\\n      selector: 'app-birthday',\\n      template: '<p> Birthday is {{birthday | date: 'dd/MM/yyyy'}}</p>' // 18/06/1987\\n    })\\n    export class BirthdayComponent {\\n      birthday = new Date(1987, 6, 18);\\n    }\".trim();var chainPipe=\"\\n@Component({\\n          selector: 'app-birthday',\\n          template: '<p> Birthday is {{birthday | date: 'fullDate' | uppercase}} </p>' // THURSDAY, JUNE 18, 1987\\n        })\\n        export class BirthdayComponent {\\n          birthday = new Date(1987, 6, 18);\\n        }\".trim();var flag=\"\\n@Pipe({\\n  name: 'flyingHeroesImpure',\\n  pure: false\\n})\".trim();var purpose=\"\\n@Component({\\n  selector: 'async-observable-pipe',\\n  template: '<div> <code>observable|async</code>:\\n  Time: {{time | async}}</div >'\\n})\\nexport class AsyncObservablePipeComponent {\\n  time = new Observable(observer =>\\n    setInterval(() => observer.next(new Date().toString()), 2000)\\n  );\\n}\".trim();// const projection = ``.trim();\nvar AngularPipes=/*#__PURE__*/function(_Component){_inherits(AngularPipes,_Component);function AngularPipes(){_classCallCheck(this,AngularPipes);return _possibleConstructorReturn(this,_getPrototypeOf(AngularPipes).apply(this,arguments));}_createClass(AngularPipes,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Pipes\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"A pipe takes in data as input and transforms it to a desired output. \"),React.createElement(\"li\",null,\"Using pipe operator (|), we can apply the pipe's features to any of property in app.\"),React.createElement(\"li\",null,\"Pipes used to transform the data before displaying it in a browser. Even we can create custom pipes.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Parameterize Pipes:\"),\"  we can pass any number of Parameters to the pipe using colon (:).\"),React.createElement(\"li\",null,\"Mutiple Pipes\"),React.createElement(\"li\",null,\"Pipes with string\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Ex. \"),\"DatePipe, UpperCasePipe, LowerCasePipe, CurrencyPipe, and PercentPipe.\",React.createElement(\"br\",null),\"Let us take a pipe to transform a component's birthday property into a human-friendly date using date pipe.\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:pipeFor,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Steps to create custom pipe: \"),React.createElement(\"ol\",null,React.createElement(\"li\",null,\"Creates a TypeScript class.\"),React.createElement(\"li\",null,\"Decorate the class with \\\"@Pipe\\\" decorator.\"),React.createElement(\"li\",null,\"Implements PipeTransform interface in TypeScript class.\"),React.createElement(\"li\",null,\"Override the transform() method.\"),React.createElement(\"li\",null,\"Configure the class with @NgModule.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. What is a parameterized pipe\"),\"The parameterized pipe can be created by declaring the pipe name with a colon ( : ) and then the parameter value.\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Ex. \"),\"Let's take a birthday example with a particular format(dd/MM/yyyy):\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:paraPipes,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"b\",null,\"N: The parameter value can be any valid template expression, such as a string literal or a component property.\"),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. How do you chain pipes\"),\"Let's take a birthday property which uses date pipe(along with parameter) and uppercase pipes as below.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:chainPipe,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"There are two categories of pipes: \",React.createElement(\"b\",null,\"pure and impure\"),\". Pipes are pure by default.\"),React.createElement(\"li\",null,\"You make a pipe impure by setting its pure flag to false.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:flag,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"b\",null,\"Pure pipes: \"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"Angular executes a pure pipe only when it detects a pure change to the input value. A pure change is either a change to a primitive input value (String, Number, Boolean, Symbol) or a changed object reference (Date, Array, Function, Object).\"),React.createElement(\"li\",null,\"Angular ignores changes within (composite) objects. It won't call a pure pipe if you change an input month, add to an input array, or update an input object property.\"),React.createElement(\"li\",null,\"This may seem restrictive but it's also fast. An object reference check is fast\\u2014much faster than a deep check for differences\\u2014so Angular can quickly determine if it can skip both the pipe execution and a view update.\"),React.createElement(\"li\",null,\"A pure pipe uses pure functions. Pure functions process inputs and return values without detectable side effects. Given the same input, they should always return the same output.\"),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Impure pipes:\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"Angular executes an impure pipe during every component change detection cycle. An impure pipe is called as every keystroke or mouse-move.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. What is the purpose of async pipe\"),\"The AsyncPipe subscribes to an observable or promise and returns the latest value it has emitted. When a new value is emitted, the pipe marks the component to be checked for changes.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"Let's take a time observable which continuously updates the view for every 2 seconds with the current time.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:purpose,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return AngularPipes;}(Component);export default withStyles(styles)(AngularPipes);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/pipes.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","pipeFor","trim","paraPipes","chainPipe","flag","purpose","AngularPipes","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst pipeFor = `\n@Component({\n  selector: 'app-birthday',\n  template: '<p> Birthday is {{birthday | date}}</p>'\n})\nexport class BirthdayComponent {\n  birthday = new Date(1987, 6, 18); \n}`.trim();\n\nconst paraPipes = `\n@Component({\n      selector: 'app-birthday',\n      template: '<p> Birthday is {{birthday | date: 'dd/MM/yyyy'}}</p>' // 18/06/1987\n    })\n    export class BirthdayComponent {\n      birthday = new Date(1987, 6, 18);\n    }`.trim();\n\nconst chainPipe = `\n@Component({\n          selector: 'app-birthday',\n          template: '<p> Birthday is {{birthday | date: 'fullDate' | uppercase}} </p>' // THURSDAY, JUNE 18, 1987\n        })\n        export class BirthdayComponent {\n          birthday = new Date(1987, 6, 18);\n        }`.trim();\n\nconst flag = `\n@Pipe({\n  name: 'flyingHeroesImpure',\n  pure: false\n})`.trim();\n\nconst purpose = `\n@Component({\n  selector: 'async-observable-pipe',\n  template: '<div> <code>observable|async</code>:\n  Time: {{time | async}}</div >'\n})\nexport class AsyncObservablePipeComponent {\n  time = new Observable(observer =>\n    setInterval(() => observer.next(new Date().toString()), 2000)\n  );\n}`.trim();\n\n\n// const projection = ``.trim();\n\n\n\nclass AngularPipes extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Pipes</h3>\n              <ul>\n                <li>A pipe takes in data as input and transforms it to a desired output. </li>\n                <li>Using pipe operator (|), we can apply the pipe's features to any of property in app.</li>\n                <li>Pipes used to transform the data before displaying it in a browser. Even we can create custom pipes.\n                </li>\n                <br />\n                <li><b>Parameterize Pipes:</b>  we can pass any number of Parameters to the pipe using colon (:).</li>\n                <li>Mutiple Pipes</li>\n                <li>Pipes with string</li>\n              </ul>\n              <br />\n              <b>Ex. </b>DatePipe, UpperCasePipe, LowerCasePipe, CurrencyPipe, and PercentPipe.\n              <br/>\n              Let us take a pipe to transform a component's birthday property into a human-friendly date using date pipe.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={pipeFor}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Steps to create custom pipe: </b>\n                <ol>\n                  <li>Creates a TypeScript class.</li>\n                  <li>Decorate the class with \"@Pipe\" decorator.</li>\n                  <li>Implements PipeTransform interface in TypeScript class.</li>\n                  <li>Override the transform() method.</li>\n                  <li>Configure the class with @NgModule.</li>\n                </ol>\n              <br/>\n\n              <h3>2. What is a parameterized pipe</h3>\n              The parameterized pipe can be created by declaring the pipe name with a colon ( : ) and then the\n              parameter value.\n              <br />\n              <b>Ex. </b>Let's take a birthday example with a particular format(dd/MM/yyyy):\n              <div style={titles}>\n                <PrismCode\n                  code={paraPipes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <b>N: The parameter value can be any valid template expression, such as a string literal or a component property.</b>\n              <br />\n              <br />\n\n              <h3>3. How do you chain pipes</h3>\n              Let's take a birthday property which uses date pipe(along with parameter) and uppercase pipes as below.\n              <div style={titles}>\n                <PrismCode\n                  code={chainPipe}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <ul>\n                <li>There are two categories of pipes: <b>pure and impure</b>. Pipes are pure by default.</li>\n                <li>You make a pipe impure by setting its pure flag to false.</li>\n              </ul>\n\n              <div style={titles}>\n                <PrismCode\n                  code={flag}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <ul>\n                <b>Pure pipes: </b>\n                <br />\n                <li>Angular executes a pure pipe only when it detects a pure change to the input value. A pure change is either a change to a primitive input value (String, Number, Boolean, Symbol) or a changed object reference (Date, Array, Function, Object).</li>\n                <li>Angular ignores changes within (composite) objects. It won't call a pure pipe if you change an input month, add to an input array, or update an input object property.</li>\n                <li>This may seem restrictive but it's also fast. An object reference check is fast—much faster than a deep check for differences—so Angular can quickly determine if it can skip both the pipe execution and a view update.</li>\n                <li>A pure pipe uses pure functions. Pure functions process inputs and return values without detectable side effects. Given the same input, they should always return the same output.</li>\n                <br />\n                <b>Impure pipes:</b>\n                <br />\n                <li>Angular executes an impure pipe during every component change detection cycle. An impure pipe is called as every keystroke or mouse-move.</li>\n              </ul>\n              <br />\n\n              <h3>4. What is the purpose of async pipe</h3>\n              The AsyncPipe subscribes to an observable or promise and returns the latest value it has emitted. When a new value is emitted, the pipe marks the component to be checked for changes.\n              <br />\n              <br />\n              Let's take a time observable which continuously updates the view for every 2 seconds with the current time.\n              <div style={titles}>\n                <PrismCode\n                  code={purpose}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(AngularPipes));\n"]},"metadata":{},"sourceType":"module"}