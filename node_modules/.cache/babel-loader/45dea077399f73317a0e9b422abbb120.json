{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/ml/deepMl/naiveBar.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Logistic from '../../../assets/ML/navBayers.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst predicting = `\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\n\ndf = pd.read_csv(\"titanic.csv\")\n\ndf.drop(['PassengerId','Name','SibSp','Parch','Ticket','Cabin','Embarked'],axis='columns',inplace=True)\ninputs = df.drop('Survived',axis='columns')\ntarget = df.Survived\n\n#inputs.Sex = inputs.Sex.map({'male': 1, 'female': 2})\ndummies = pd.get_dummies(inputs.Sex)\ninputs = pd.concat([inputs,dummies],axis='columns')\n                \ninputs.drop(['Sex','male'],axis='columns',inplace=True)                 #Dropping male column of dummy variable trap theory.\n\ninputs.columns[inputs.isna().any()]\ninputs.Age[:10]\ninputs.Age = inputs.Age.fillna(inputs.Age.mean())\n\nX_train, X_test, y_train, y_test = train_test_split(inputs,target,test_size=0.3)\n\nmodel = GaussianNB()\nmodel.fit(X_train,y_train)\n\nmodel.score(X_test,y_test)\nX_test[0:10]\ny_test[0:10]\n\nmodel.predict(X_test[0:10])\nmodel.predict_proba(X_test[:10])\n\nfrom sklearn.model_selection import cross_val_score\ncross_val_score(GaussianNB(),X_train, y_train, cv=5)                  #Calculate the score using cross validation\n`.trim();\nconst naiveBease = `\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.pipeline import Pipeline\n\ndf = pd.read_csv(\"spam.csv\")\ndf.groupby('Category').describe()\ndf['spam']=df['Category'].apply(lambda x: 1 if x=='spam' else 0)\n\nX_train, X_test, y_train, y_test = train_test_split(df.Message,df.spam)\n\nv = CountVectorizer()\nX_train_count = v.fit_transform(X_train.values)\nX_train_count.toarray()[:2]\n\nmodel = MultinomialNB()\nmodel.fit(X_train_count,y_train)\n\nemails = ['Hey mohan, can we get?','Upto Dont miss this reward!']\nemails_count = v.transform(emails)\nmodel.predict(emails_count)\n\nX_test_count = v.transform(X_test)\nmodel.score(X_test_count, y_test)\n\nclf = Pipeline([('vectorizer', CountVectorizer()),('nb', MultinomialNB())])\n\nclf.fit(X_train, y_train)\nclf.score(X_test,y_test)\nclf.predict(emails)\n`.trim();\n\nclass NaiveBrs extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Na\\xEFve Bayes (lassification technique based)\"), \"Na\\xEFve Bayes algorithms  applying Bayes\\u2019 theorem with a strong assumption that all the predictors are independent to each other.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Ex.\"), \" a phone may be considered as smart if it is having touch screen, internet facility, good camera etc. Though all these features are dependent on each other, they contribute independently to the probability of that the phone is a smart phone.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"In Bayesian classification, the main interest is find the posterior probabilities i.e.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), \"the probability of a label given some observed features, \\uD835\\uDC43(\\uD835\\uDC3F | \\uD835\\uDC53\\uD835\\uDC52\\uD835\\uDC4E\\uD835\\uDC61\\uD835\\uDC62\\uD835\\uDC5F\\uD835\\uDC52\\uD835\\uDC60). With the help of Bayes theorem, we can express this in quantitative form as follows \\u2212\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"P(L|features)=P(L)P(features|L)P(features)\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), \"Here, (\\uD835\\uDC3F | \\uD835\\uDC53\\uD835\\uDC52\\uD835\\uDC4E\\uD835\\uDC61\\uD835\\uDC62\\uD835\\uDC5F\\uD835\\uDC52\\uD835\\uDC60) is the posterior probability of class.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), \"\\uD835\\uDC43(\\uD835\\uDC3F) is the prior probability of class.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), \"\\uD835\\uDC43(\\uD835\\uDC53\\uD835\\uDC52\\uD835\\uDC4E\\uD835\\uDC61\\uD835\\uDC62\\uD835\\uDC5F\\uD835\\uDC52\\uD835\\uDC60|\\uD835\\uDC3F) is the likelihood which is the probability of predictor given class.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), \"\\uD835\\uDC43(\\uD835\\uDC53\\uD835\\uDC52\\uD835\\uDC4E\\uD835\\uDC61\\uD835\\uDC62\\uD835\\uDC5F\\uD835\\uDC52\\uD835\\uDC60) is the prior probability of predictor.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), \"Building model using Na\\xEFve Bayes in Python library, Scikit learn. We have the following three types of Na\\xEFve Bayes model under Scikit learn Python library \\u2212\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Gaussian Na\\xEFve Bayes\"), \"It is the simplest Na\\xEFve Bayes classifier having the assumption that the data from each label is drawn from a simple Gaussian distribution.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), \"Multinomial Na\\xEFve Bayes Another useful Na\\xEFve Bayes classifier in which the features are assumed to be drawn from a simple Multinomial distribution. Such kind of Na\\xEFve Bayes are most appropriate for the features that represents discrete counts.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), \"Bernoulli Na\\xEFve Bayes Another important model in which features are assumed to be binary (0 and 1). Text classification with \\u2018bag of words\\u2019 model can be an application of Bernoulli Na\\xEFve Bayes.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"Pros: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Na\\xEFve Bayes classification is easy to implement and fast.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"It will converge faster than discriminative models like logistic regression.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"It requires less training data.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"It is highly scalable in nature, or they scale linearly with the number of predictors and data points.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"It can make probabilistic predictions and can handle continuous as well as discrete data. Na\\xEFve Bayes classification algorithm can be used for binary as well as multi-class classification problems both.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Cons: \"), \"Its strong feature independence because in real life it is almost impossible to have a set of features which are completely independent of each other. Its \\u2018zero frequency\\u2019 which means that if a categorial variable has a category but not being observed in training data set, then Na\\xEFve Bayes model will assign a zero probability to it and it will be unable to make a prediction.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"Applications: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, \"Real-time prediction: \"), \"Due to its ease of implementation and fast computation, it can be used to do prediction in real-time.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Multi-class prediction: \"), \"It can be used to predict posterior probability of multiple classes of target variable.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"Text classification: \"), \"Due to the feature of multi-class prediction, Na\\xEFve Bayes classification algorithms are well suited for text classification. That is why it is also used to solve problems like spam-filtering and sentiment analysis.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"Recommendation system: \"), \"Along with the algorithms like collaborative filtering, Na\\xEFve Bayes makes a Recommendation system which can be used to filter unseen information and to predict weather a user would like the given resource or not.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"Na\\xEFve Bayes Classifier Algorithm (supervised)\"), \"The Na\\xEFve Bayes algorithm is comprised of two words Na\\xEFve and Bayes.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"It is mainly used in text classification that includes a high-dimensional training dataset.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"It is one of the simple and most effective Classification algorithms which helps in building the fast machine learning models that can make quick predictions.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"It is a probabilistic classifier, which means it predicts on the basis of the probability of an object.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"Ex.\"), \" Spam filtration, Sentimental analysis, and classifying articles.\", React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"Na\\xEFve: \"), \"It is called Na\\xEFve because it assumes that the occurrence of a certain feature is independent of the occurrence of other features. Such as if the fruit is identified on the bases of color, shape, and taste, then red, spherical, and sweet fruit is recognized as an apple. Hence each feature individually contributes to identify that it is an apple without depending on each other.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"Bayes: \"), \"It is called Bayes because it depends on the principle of Bayes' Theorem.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, \"Bayes' Theorem:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: Logistic,\n      alt: \"Equations\",\n      className: \"responsive\",\n      style: {\n        width: 300,\n        height: 50\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }), \"Where,\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \"P(A|B) is Posterior probability: \"), \"Probability of hypothesis A on the observed event B.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, \"P(B|A) is Likelihood probability: \"), \"Probability of the evidence given that the probability of a hypothesis is true.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, \"P(A) is Prior Probability: \"), \"Probability of hypothesis before observing the evidence.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, \"P(B) is Marginal Probability: \"), \"Probability of Evidence.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Advantages:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, \"It is one of the fast and easy ML algorithms to predict a class of datasets.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, \"It can be used for Binary as well as Multi-class Classifications.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, \"It performs well in Multi-class predictions as compared to the other Algorithms.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, \"It is the most popular choice for text classification problems.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, \"Disadvantages:\"), \"Naive Bayes assumes that all features are independent or unrelated, so it cannot learn the relationship between features.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, \"Applications:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, \"It is used for Credit Scoring.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, \"It is used in medical data classification.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, \"It can be used in real-time predictions because Na\\xEFve Bayes Classifier is an eager learner.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, \"It is used in Text classification such as Spam filtering and Sentiment analysis.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, \"Types of Na\\xEFve Bayes Model:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, \"Gaussian :\"), \"The Gaussian model assumes that features follow a normal distribution. This means if predictors take continuous values instead of discrete, then the model assumes that these values are sampled from the Gaussian distribution.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, \"Multinomial :\"), \"Used when the data is multinomial distributed. It is primarily used for document classification problems, it means a particular document belongs to which category such as Sports, Politics, education, etc.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }), \"The classifier uses the frequency of words for the predictors.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \"Bernoulli :\"), \"The Bernoulli classifier works similar to the Multinomial classifier, but the predictor variables are the independent Booleans variables. Such as if a particular word is present or not in a document. This model is also famous for document classification tasks.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, \"Predicting survival from titanic crash\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: predicting,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, \"Naive Bayes 2\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: naiveBease,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(NaiveBrs);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/ml/deepMl/naiveBar.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Logistic","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","predicting","trim","naiveBease","NaiveBrs","componentDidMount","setTimeout","highlightAll","render","classes","props","width","height"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Logistic from '../../../assets/ML/navBayers.png'\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst predicting = `\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\n\ndf = pd.read_csv(\"titanic.csv\")\n\ndf.drop(['PassengerId','Name','SibSp','Parch','Ticket','Cabin','Embarked'],axis='columns',inplace=True)\ninputs = df.drop('Survived',axis='columns')\ntarget = df.Survived\n\n#inputs.Sex = inputs.Sex.map({'male': 1, 'female': 2})\ndummies = pd.get_dummies(inputs.Sex)\ninputs = pd.concat([inputs,dummies],axis='columns')\n                \ninputs.drop(['Sex','male'],axis='columns',inplace=True)                 #Dropping male column of dummy variable trap theory.\n\ninputs.columns[inputs.isna().any()]\ninputs.Age[:10]\ninputs.Age = inputs.Age.fillna(inputs.Age.mean())\n\nX_train, X_test, y_train, y_test = train_test_split(inputs,target,test_size=0.3)\n\nmodel = GaussianNB()\nmodel.fit(X_train,y_train)\n\nmodel.score(X_test,y_test)\nX_test[0:10]\ny_test[0:10]\n\nmodel.predict(X_test[0:10])\nmodel.predict_proba(X_test[:10])\n\nfrom sklearn.model_selection import cross_val_score\ncross_val_score(GaussianNB(),X_train, y_train, cv=5)                  #Calculate the score using cross validation\n`.trim();\n\nconst naiveBease = `\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.pipeline import Pipeline\n\ndf = pd.read_csv(\"spam.csv\")\ndf.groupby('Category').describe()\ndf['spam']=df['Category'].apply(lambda x: 1 if x=='spam' else 0)\n\nX_train, X_test, y_train, y_test = train_test_split(df.Message,df.spam)\n\nv = CountVectorizer()\nX_train_count = v.fit_transform(X_train.values)\nX_train_count.toarray()[:2]\n\nmodel = MultinomialNB()\nmodel.fit(X_train_count,y_train)\n\nemails = ['Hey mohan, can we get?','Upto Dont miss this reward!']\nemails_count = v.transform(emails)\nmodel.predict(emails_count)\n\nX_test_count = v.transform(X_test)\nmodel.score(X_test_count, y_test)\n\nclf = Pipeline([('vectorizer', CountVectorizer()),('nb', MultinomialNB())])\n\nclf.fit(X_train, y_train)\nclf.score(X_test,y_test)\nclf.predict(emails)\n`.trim();\n\n\nclass NaiveBrs extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Naïve Bayes (lassification technique based)</h3>\n              Naïve Bayes algorithms  applying Bayes’ theorem with a strong assumption that\n              all the predictors are independent to each other.\n              <br />\n              <b>Ex.</b> a phone may be considered as smart if it is having touch screen,\n              internet facility, good camera etc. Though all these features are dependent on each other, they contribute\n              independently to the probability of that the phone is a smart phone.\n              <br />\n              <br />\n              <i>In Bayesian classification, the main interest is find the posterior probabilities i.e.</i>\n              <br />\n              the probability of a label given some observed features, 𝑃(𝐿 | 𝑓𝑒𝑎𝑡𝑢𝑟𝑒𝑠). With the help of Bayes theorem, we can\n              express this in quantitative form as follows −\n              <br />\n              <b>P(L|features)=P(L)P(features|L)P(features)</b>\n              <br />\n              <br />\n              Here, (𝐿 | 𝑓𝑒𝑎𝑡𝑢𝑟𝑒𝑠) is the posterior probability of class.<br />\n              𝑃(𝐿) is the prior probability of class.<br />\n              𝑃(𝑓𝑒𝑎𝑡𝑢𝑟𝑒𝑠|𝐿) is the likelihood which is the probability of predictor given class.\n              <br />\n              𝑃(𝑓𝑒𝑎𝑡𝑢𝑟𝑒𝑠) is the prior probability of predictor.\n              <br />\n              <br />\n              Building model using Naïve Bayes in Python library, Scikit learn. We have the following three types of Naïve Bayes model under Scikit learn Python\n              library −\n              <br />\n\n              <h3>Gaussian Naïve Bayes</h3>\n              It is the simplest Naïve Bayes classifier having the assumption that the data from each label is drawn from a simple\n              Gaussian distribution.\n              <br />\n              <br />\n              Multinomial Naïve Bayes Another useful Naïve Bayes classifier in\n              which the features are assumed to be drawn from a simple Multinomial distribution. Such kind of Naïve Bayes are most\n              appropriate for the features that represents discrete counts.\n              <br />\n              <br />\n              Bernoulli Naïve Bayes Another important model in which features are assumed to be binary (0 and 1). Text classification with ‘bag of words’\n              model can be an application of Bernoulli Naïve Bayes.\n              <br />\n              <br />\n              <b>Pros: </b>\n              <ul>\n                <li>Naïve Bayes classification is easy to implement and fast.</li>\n                <li>It will converge faster than discriminative models like logistic regression.</li>\n                <li>It requires less training data.</li>\n                <li>It is highly scalable in nature, or they scale linearly with the number of predictors and data points.</li>\n                <li>It can make probabilistic predictions and can handle continuous as well as discrete data. Naïve Bayes classification\n                  algorithm can be used for binary as well as multi-class classification problems both.</li>\n              </ul>\n              <br />\n              <b>Cons: </b>\n              Its strong feature independence because in real life it is almost impossible to have a set of features which are completely independent\n              of each other. Its ‘zero frequency’ which means that if a categorial variable has a category but not being observed\n              in training data set, then Naïve Bayes model will assign a zero probability to it and it will be unable to make a\n              prediction.\n              <br />\n              <br />\n              <b>Applications: </b>\n              <ul>\n                <li><b>Real-time prediction: </b>Due to its ease of implementation and\n                  fast computation, it can be used to do prediction in real-time.</li>\n                <li><b>Multi-class prediction: </b>It can be used to predict posterior probability of multiple classes of target variable.</li>\n                <li><b>Text classification: </b>Due to the feature of multi-class prediction, Naïve Bayes classification algorithms are well\n                  suited for text classification. That is why it is also used to solve problems like spam-filtering and sentiment\n                  analysis.</li>\n                <li><b>Recommendation system: </b>Along with the algorithms like collaborative filtering, Naïve Bayes makes a\n                  Recommendation system which can be used to filter unseen information and to predict weather a user would like the\n                  given resource or not.</li>\n              </ul>\n              <br />\n\n              <h3>Naïve Bayes Classifier Algorithm (supervised)</h3>\n              The Naïve Bayes algorithm is comprised of two words Naïve and Bayes.\n              <ul>\n                <li>It is mainly used in text classification that includes a high-dimensional training dataset.</li>\n                <li>It is one of the simple and most effective Classification algorithms which helps in building the\n                  fast machine learning models that can make quick predictions.</li>\n                <li>It is a probabilistic classifier, which means it predicts on the basis of the probability of an object.</li>\n                <b>Ex.</b> Spam filtration, Sentimental analysis, and classifying articles.\n                <li><b>Naïve: </b>It is called Naïve because it assumes that the occurrence of a certain feature is\n                  independent of the occurrence of other features. Such as if the fruit is identified on the bases of\n                  color, shape, and taste, then red, spherical, and sweet fruit is recognized as an apple. Hence each\n                  feature individually contributes to identify that it is an apple without depending on each other.</li>\n                <li><b>Bayes: </b>It is called Bayes because it depends on the principle of Bayes' Theorem.</li>\n              </ul>\n              <br />\n              <b>Bayes' Theorem:</b>\n              <br />\n              <img src={Logistic} alt=\"Equations\" className=\"responsive\" style={{ width: 300, height: 50 }} />\n              <br />\n              <br />\n              Where,\n              <br />\n              <b>P(A|B) is Posterior probability: </b>Probability of hypothesis A on the observed event B.\n              <br />\n              <b>P(B|A) is Likelihood probability: </b>Probability of the evidence given that the probability of a hypothesis is true.\n              <br />\n              <b>P(A) is Prior Probability: </b>Probability of hypothesis before observing the evidence.\n              <br />\n              <b>P(B) is Marginal Probability: </b>Probability of Evidence.\n              <br />\n\n              <b>Advantages:</b>\n              <ul>\n                <li>It is one of the fast and easy ML algorithms to predict a class of datasets.</li>\n                <li>It can be used for Binary as well as Multi-class Classifications.</li>\n                <li>It performs well in Multi-class predictions as compared to the other Algorithms.</li>\n                <li>It is the most popular choice for text classification problems.</li>\n              </ul>\n              <br />\n\n              <b>Disadvantages:</b>\n              Naive Bayes assumes that all features are independent or unrelated, so it cannot learn the relationship\n              between features.\n              <br />\n\n              <b>Applications:</b>\n              <ul>\n                <li>It is used for Credit Scoring.</li>\n                <li>It is used in medical data classification.</li>\n                <li>It can be used in real-time predictions because Naïve Bayes Classifier is an eager learner.</li>\n                <li>It is used in Text classification such as Spam filtering and Sentiment analysis.</li>\n              </ul>\n              <br />\n\n              <b>Types of Naïve Bayes Model:</b>\n              <ul>\n                <li><b>Gaussian :</b>The Gaussian model assumes that features follow a normal distribution. This means\n                  if predictors take continuous values instead of discrete, then the model assumes that these values are\n                  sampled from the Gaussian distribution.</li>\n                <li><b>Multinomial :</b>Used when the data is multinomial distributed. It is primarily used for document\n                  classification problems, it means a particular document belongs to which category such as Sports, Politics,\n                  education, etc.\n                  <br />\n                  The classifier uses the frequency of words for the predictors.</li>\n                <li><b>Bernoulli :</b>The Bernoulli classifier works similar to the Multinomial classifier, but the\n                  predictor variables are the independent Booleans variables. Such as if a particular word is present\n                  or not in a document. This model is also famous for document classification tasks.</li>\n              </ul>\n              <br />\n\n              <h3>Predicting survival from titanic crash</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={predicting}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Naive Bayes 2</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={naiveBease}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(NaiveBrs));\n"]},"metadata":{},"sourceType":"module"}