{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/angularjsd/angular 12/flows.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst counters = `\nangular [routerlink]: <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n  link to user component\n</a>\n\n\nng router link: <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n  link to user component\n</a>\n`.trim();\nconst addcomponents = `\nrouter.navigateByUrl(\"/team/33/user/11\");\n\n// Navigate without updating the URL\nrouter.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n`.trim();\nconst routerLink = `\n<my-tile [routerLink]=\"['/secondPage', item.id, 'item-list']\" *ngFor=\"let item of listaOfItem\" [item]=\"item\"></my-tile>\n`.trim();\n\nclass NgrxCounter extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"1. What are new features realise Angular 8\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Differential loading: \"), \"Differential loading is a new feature that lets you use version 8 of the Angular CLI to create two different production bundles of your app. Attributes on the \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"script\"), \" tag in your index.html file let the browser request the most appropriate bundle; modern browsers will request a bundle that uses ES2015 JavaScript syntax and will be significantly smaller than the legacy bundle that uses ES5 syntax to maintain support for older browsers. Differential loading is enabled by default for new apps created with version 8 of the CLI, but you can easily enable this feature on your existing apps by upgrading to Angular 8, adding a browserlist configuration file, and setting the \\u201Ctarget\\u201D option in your tsconfig.json file to \\u201Ces2015\\u201D. The result? Your users with modern browsers get a smaller bundle that loads faster (and puts a bigger smile on their face).\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"New lazy loading syntax: \"), \"Lazy loading feature modules has been a best practice in Angular for quite a while. That hasn\\u2019t changed in version 8, but in place of the proprietary syntax to enable lazy loading, the framework has adopted the more common dynamic import syntax used widely in client-side web development. The new syntax relies less on parsing class names from strings and enables editors and IDEs to check that you\\u2019re importing the correct items.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Create web workers with the CLI: \"), \"Angular 8 makes it easier than ever to use web workers to handle CPU-intensive tasks in your apps. Version 8 of the Angular CLI includes a new schematic used with the ng generate command to create and update the necessary files in your project to add a new web worker. The new and updated files include a basic template for your new web worker so you can worry less about boilerplate syntax and more quickly focus on writing the code you want to run on a background thread.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Builder and workspace APIs: \"), \"Although they\\u2019re probably not a feature you\\u2019ll use on every project, Angular 8 also includes new APIs that allow you to create custom build and deployment commands using hooks into the familiar ng build, ng test, and ng run commands. There are also new APIs that allow you to open and work with the workspace defined in your angular.json file, which should reduce the amount of manual manipulation required to perfectly configure your project.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"A new guide for old features: \"), \"The Angular team included a new deprecation guide with Angular 8 to make it easier for developers to keep track of deprecated features and APIs. The creation of this guide should not be misinterpreted as a warning that deprecations will be sprung on the developer community with little time for remediation. In fact, the Angular team is committed to supporting features for two major releases after officially being deprecated. The resulting stability in the framework coupled with the helpful deprecation guide should smooth the transition away from those older features.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"2. Can we create custom Pipes in Angular 8.\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Create a Pipe Class and decorate it with the decorator @Pipe.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Supply a name property to be used as template code name.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Register your Pipe in the module under declarations.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Finally, implement PipeTransform and write transformation logic.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"3. What is the use of router-outlet in angular 8.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"The router-outlet is a directive that's available from the @angular/router package and is used by the router to mark where in a template, a matched component should be inserted.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Thanks to the router outlet, your app will have multiple views/pages and the app template acts like a shell of your application. Any element, you add to the shell will be rendered in each view, only the part marked by the router outlet will be changed between views.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"4. Can I use multiple router outlets in Angular 8?\"), \"Yes! We can use multiple router-outlets in same template by configuring our routers and simply add the router-outlet name.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"5. How do you make a router link in HTML?\"), \"Linking Routes in HTML.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"To add links to one of the routes, use the routerLink directive in HTML. This directive accepts an array.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"If you use the routerLink directive without the brackets, you'll need to pass the route as a string.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"The \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"router-outlet\"), \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"/router-outlet\"), \" acts as a placeholder for components.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: counters,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"6. Difference between navigate and navigatebyurl in angular.\"), \"navigateByUrl is similar to changing the location bar directly\\u2013we are providing the \\u201Cwhole\\u201D new URL. Whereas router. navigate creates a new URL by applying an array of passed-in commands, a patch, to the current URL.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: addcomponents,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"7. How do you detect route change in Angular?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Import Router, Event, NavigationStart, NavigationEnd, NavigationError from \\u2018@angular/router\\u2019.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"And inject router in the constructor.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"Subscribe to the NavigationStart, NavigationEnd, NavigationError events of the router.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"8. What is this router navigate?\"), \"navigate method, you must supply the ActivatedRoute to give the router knowledge of where you are in the current route tree. After the link parameters array, add an object with a relativeTo property set to the ActivatedRoute . The router then calculates the target URL based on the active route\\u2019s location.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"9. When to use Route class in case of navigation?\"), \"Using Route class in case of navigation to happen on a triggered event. Before performing the above two operations, there is a need to register this component in the Route class\\u2019s instance which lies inside the app-routing.module.ts file. This will be further used to navigate from child to parent.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"10. Is there a way to navigate between routes in angular?\"), \"You can also navigate imperatively by using the code. This is done using the router service, which provides navigate and navigatebyUrl methods via which you can perform route changes. Use this method, if you want to Navigate to a route using the link parameters array.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"11. How to specify which route to navigate to in NavLink?\"), \"To specify which route to navigate to, use the to prop and pass the path name. The activeClassName prop will add an active class to the link if it\\u2019s currently active. On the browser, the NavLink component is rendered as an tag with an href attribute value that was passed in the to prop.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, \"12. When to use absolute path in navigate method?\"), \"Navigate Method always uses the absolute path unless you provide a starting point. navigate.navigateByUrl Use this method if you want to navigate to a URL by using the absolute path. The first argument is a string containing the complete URL.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"13. What is the use of eventemitter in angular.\"), \"Whenever it makes sense for code to SUBSCRIBE to something rather than get a callback from something. The typical use case would be that there's multiple blocks of code in your application that may need to do something when an event happens.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"14. What is the use of annotation @ViewChild?\"), \"The @ViewChild decorator allows us to inject into a component class references to elements used inside its template, that's what we should use it for. Using @ViewChild we can easily inject components, directives or plain DOM elements.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"15. Differentiale between obsevable and promise in angular.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Promises deal with one asynchronous event at a time, while observables handle a sequence of asynchronous events over a period of time.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"Observables are lazy: they're not executed until we subscribe to them using the subscribe() method.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"Promises are not lazy: execute immediately after creation.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"16. What is the use of template in angular.\"), \"A template is a form of HTML that tells Angular how to render the component. Views are typically arranged hierarchically, allowing you to modify or show and hide entire UI sections or pages as a unit. The template immediately associated with a component defines that component's host view.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"17. What is the use of shared module in angular.\"), \"A Shared Module is used to organize a set of commonly used pieces into one module and export them to any module that imports the Share Module. This allows us to selectively aggregate the reusable components that we have and re-export them into one consolidated module.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"18. What is provider in angular.\"), \"Providers are classes that create and manage service objects the first time that Angular needs to resolve a dependency. Providers is used to register the classes to an angular module as a service. And then, this service classes can be used by other components during the itself creation phase in the module.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, \"19. How angular internally works.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, \"https://medium.com/siam-vit/how-an-angular-app-work-behind-the-scenes-angular-flow-dcc4d1df27bd\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, \"https://www.youtube.com/watch?v=jD44QbL4kHo\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, \"20. What is ng-template in Angular?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, \"ng-template is an Angular element that is used for rendering HTML in a template. However, it is not rendered directly on DOM. If you include an ng-template tag to a template, the tag and the content inside it will be replaced by comment upon render.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, \"If you add a ng-template tag to your template, it and everything inside it will be replaced by a comment. It might seem a bit useless, but it is rarely used alone. It can be for example used to define the else case of an *ngIf.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, \"21. What is difference between package.json and package-lock.json.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, \"package.json: \"), \"Records important metadata about the project.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, \"package.lock.json: \"), \"Allows future devs to install the same dependencies in the project.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, \"22. How do you handle error in Angular?\"), \"One traditional way of handling errors in Angular is to provide an ErrorHandler class. This class can be extended to create your own global error handler. This is also a useful way to handle all errors that occur, but is mostly useful for tracking error logs.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, \"23. Pass complex JSON via routerLink.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: routerLink,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \"How does an Angular application work?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, \"Every Angular app consists of a file named\\xA0angular.json. This file will contain all the configurations of the app. While building the app, the builder looks at this file to find the entry point of the application.\\xA0\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, \"Inside the build section, the main property of the options object defines the entry point of the application which in this case is\\xA0main.ts. The main.ts file creates a browser environment for the application to run, and, along with this, it also calls a function called\\xA0bootstrapModule, which bootstraps the application. These two steps are performed in the following order inside the main.ts file:\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, \"platformBrowserDynamic().bootstrapModule(AppModule)\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, \"In the above line of code,\\xA0AppModule\\xA0is getting bootstrapped. The AppModule is declared in the app.module.ts file. This module contains declarations of all the components.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, \"Now, AppComponent\\xA0is getting bootstrapped.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, \"This component is defined in\\xA0app.component.ts\\xA0file. This file interacts with the webpage and serves data to it.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }), \"Each component is declared with three properties:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, \"Selector: \"), \"used for accessing the component.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, \"Template/TemplateURL: \"), \"contains HTML of the component.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, \"StylesURL: \"), \"contains component-specific stylesheets.\")), \"After this, Angular calls the\\xA0index.html\\xA0file. This file consequently calls the root component that is\\xA0app-root. The root component is defined in\\xA0app.component.ts.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }), \"This is how every angular application works.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, \"What are some of the advantages of Angular over other frameworks?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, \"Features that are provided out of the box: \"), \"Angular provides a number of built-in features like,routing, state management, rxjs library and http servicesstraight out of the box. This means that one does not need tolook for the above stated features separately. They are allprovided with angular.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, \"Declarative UI: \"), \"Angular uses HTML to render the UI of an application. HTML isa declarative language and is much easier to use than JavaScript.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, \"Long-term Google support: \"), \"Google announced Long-term support for Angular. This means that Google plans to stick with Angular and further scale up its ecosystem.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, \"What is AOT compilation? What are the advantages of AOT?\"), \"Every Angular application consists of components and templates which the browser cannot understand. Therefore, all the Angular applications need to be compiled first before running inside the browser.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }), \"Angular provides two types of compilation:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, \"JIT(Just-in-Time) compilation\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, \"AOT(Ahead-of-Time) compilation\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }), \"The advantages of using AOT compilation are:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, \"Since the application compiles before running inside the browser, the browser loads the executable code and renders the application immediately, which leads to\\xA0faster rendering.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, \"In AOT compilation, the compiler sends the external HTML and CSS files along with the application, eliminating separate AJAX requests for those source files, which leads to\\xA0fewer ajax requests.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, \"Developers can detect and handle errors during the building phase, which helps in\\xA0minimizing errors.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, \"The AOT compiler adds HTML and templates into the JS files before they run inside the browser. Due to this, there are no extra HTML files to be read, which provide\\xA0better security\\xA0to the application.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, \"By default, angular builds and serves the application using JIT compiler:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, \"ng build\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, \"ng serve\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, \"For using AOT compiler following changes should be made:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, \"ng build --aot\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, \"ng serve --aot\")))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, \"Explain Components, Modules and Services in Angular.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, \"In Angular, components are the basic building blocks, which control a part of the UI for any application.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, \"A component is defined using the\\xA0@Component\\xA0decorator. Every component consists of three parts, the template which loads the view for the component, a stylesheet which defines the look and feel for the component, and a class that contains the business logic for the component.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, \"Modules: \"), \"A module is a place where we can group components, directives, services, and pipes. Module decides whether the components, directives, etc can be used by other modules, by exporting or hiding these elements. Every module is defined with a @NgModule decorator.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }), \"By default, modules are of two types:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, \"Root Module: \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, \"Feature Module: \"), \"Every application can have only one root module whereas, it can have one or more feature modules.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, \"A root module imports\\xA0BrowserModule,\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, \"whereas a feature module imports\\xA0CommonModule.\")))), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, \"Services: \"), \"Services are objects which get instantiated only once during the lifetime of an application. The main objective of a service is to share data, functions with different components of an Angular application.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }), \"A service is defined using a\\xA0@Injectable\\xA0decorator. A function defined inside a service can be invoked from any component or directive.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, \"Explain string interpolation and property binding in Angular.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, \"String interpolation and property binding are parts of\\xA0data-binding\\xA0in Angular. Data-binding is a feature in angular, which provides a way to communicate between the component(Model) and its view(HTML template).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, \"Data-binding can be done in two ways,\\xA0one-way\\xA0binding and\\xA0two-way\\xA0binding. In Angular, data from the component can be inserted inside the HTML template. In one-way binding, any changes in the component will directly reflect inside the HTML template but, vice-versa is not possible. Whereas, it is possible in two-way binding.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, \"String interpolation and property binding allow only one-way data binding. String interpolation uses the double curly braces\\xA0to display data from the component. Angular automatically runs the expression written inside the curly braces.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, \"How are Angular expressions different from JavaScript expressions?\"), \"The first and perhaps, the biggest difference is that Angular expressions allow us to write JavaScript in HTML which is not the case when it comes to JavaScript expressions. Next, Angular expressions are evaluated against a\\xA0local\\xA0scope object whereas JavaScript expressions against\\xA0global\\xA0window object.\\xA0\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, \"How are observables different from promises?\"), \"The first difference is that an Observable is\\xA0lazy\\xA0whereas a Promise is\\xA0eager.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, \"Observables\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, \"Promises\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, \"Emits multiple values over a period of time\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, \"Emits a single value\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, \"Lazy. An observable is not called until we subscribe to the observable\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }, \"Not Lazy\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }, \"Can be cancelled by using the unsubscribe() method\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }, \"Cannot be cancelled\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, \"Observable provides operators like map, forEach, filter, reduce, retry, retryWhen etc.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, \"Angular by default, uses client-side rendering for its applications. Can one make an angular application to render on the server-side?\"), \"Yes, angular provides a technology called\\xA0Angular Universal, which can be used to render applications on the server-side.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, \"The advantages of using Angular Universal are :\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, \"First time users can instantly see a view of the application. This benefits in providing\\xA0better user experience.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, \"Many search engines expect pages in plain HTML, thus, Universal can make sure that your content is available on every search engine, which leads to\\xA0better SEO.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, \"Any server-side rendered application\\xA0loads faster\\xA0since rendered pages are available to the browser sooner.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default withStyles(styles)(NgrxCounter);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/angularjsd/angular 12/flows.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","counters","trim","addcomponents","routerLink","NgrxCounter","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst counters = `\nangular [routerlink]: <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n  link to user component\n</a>\n\n\nng router link: <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n  link to user component\n</a>\n`.trim();\n\nconst addcomponents = `\nrouter.navigateByUrl(\"/team/33/user/11\");\n\n// Navigate without updating the URL\nrouter.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n`.trim();\n\nconst routerLink = `\n<my-tile [routerLink]=\"['/secondPage', item.id, 'item-list']\" *ngFor=\"let item of listaOfItem\" [item]=\"item\"></my-tile>\n`.trim();\n\n\nclass NgrxCounter extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. What are new features realise Angular 8</h3>\n              <ul>\n                <li><b>Differential loading: </b>Differential loading is a new feature that lets you use version 8 of the Angular CLI to create two different production bundles of your\n                  app. Attributes on the <b>script</b> tag in your index.html file let the browser request the most appropriate bundle; modern browsers will request a bundle that uses\n                  ES2015 JavaScript syntax and will be significantly smaller than the legacy bundle that uses ES5 syntax to maintain support for older browsers. Differential loading is\n                  enabled by default for new apps created with version 8 of the CLI, but you can easily enable this feature on your existing apps by upgrading to Angular 8, adding a\n                  browserlist configuration file, and setting the “target” option in your tsconfig.json file to “es2015”. The result? Your users with modern browsers get a smaller\n                  bundle that loads faster (and puts a bigger smile on their face).</li>\n                <br />\n                <li><b>New lazy loading syntax: </b>Lazy loading feature modules has been a best practice in Angular for quite a while. That hasn’t changed in version 8, but in place of\n                  the proprietary syntax to enable lazy loading, the framework has adopted the more common dynamic import syntax used widely in client-side web development. The new\n                  syntax relies less on parsing class names from strings and enables editors and IDEs to check that you’re importing the correct items.</li>\n                <br />\n                <li><b>Create web workers with the CLI: </b>Angular 8 makes it easier than ever to use web workers to handle CPU-intensive tasks in your apps. Version 8 of the Angular\n                  CLI includes a new schematic used with the ng generate command to create and update the necessary files in your project to add a new web worker. The new and updated\n                  files include a basic template for your new web worker so you can worry less about boilerplate syntax and more quickly focus on writing the code you want to run on a\n                  background thread.</li>\n                <br />\n                <li><b>Builder and workspace APIs: </b>Although they’re probably not a feature you’ll use on every project, Angular 8 also includes new APIs that allow you to create\n                  custom build and deployment commands using hooks into the familiar ng build, ng test, and ng run commands. There are also new APIs that allow you to open and work\n                  with the workspace defined in your angular.json file, which should reduce the amount of manual manipulation required to perfectly configure your project.</li>\n                <br />\n                <li><b>A new guide for old features: </b>The Angular team included a new deprecation guide with Angular 8 to make it easier for developers to keep track of deprecated\n                  features and APIs. The creation of this guide should not be misinterpreted as a warning that deprecations will be sprung on the developer community with little time\n                  for remediation. In fact, the Angular team is committed to supporting features for two major releases after officially being deprecated. The resulting stability in\n                  the framework coupled with the helpful deprecation guide should smooth the transition away from those older features.</li>\n              </ul>\n              <br />\n\n              <h3>2. Can we create custom Pipes in Angular 8.</h3>\n              <ol>\n                <li>Create a Pipe Class and decorate it with the decorator @Pipe.</li>\n                <li>Supply a name property to be used as template code name.</li>\n                <li>Register your Pipe in the module under declarations.</li>\n                <li>Finally, implement PipeTransform and write transformation logic.</li>\n              </ol>\n              <br />\n\n              <h3>3. What is the use of router-outlet in angular 8.</h3>\n              <ul>\n                <li>The router-outlet is a directive that's available from the @angular/router package and is used by the router to mark where in a template, a matched component\n                  should be inserted.</li>\n                <br />\n                <li>Thanks to the router outlet, your app will have multiple views/pages and the app template acts like a shell of your application. Any element, you add to the shell\n                  will be rendered in each view, only the part marked by the router outlet will be changed between views.</li>\n              </ul>\n              <br />\n\n              <h3>4. Can I use multiple router outlets in Angular 8?</h3>\n              Yes! We can use multiple router-outlets in same template by configuring our routers and simply add the router-outlet name.\n              <br />\n\n              <h3>5. How do you make a router link in HTML?</h3>\n              Linking Routes in HTML.\n              <ol>\n                <li>To add links to one of the routes, use the routerLink directive in HTML. This directive accepts an array.</li>\n                <li>If you use the routerLink directive without the brackets, you'll need to pass the route as a string.</li>\n                <li>The <b>router-outlet</b> <b>/router-outlet</b> acts as a placeholder for components.</li>\n              </ol>\n              <div style={titles}>\n                <PrismCode\n                  code={counters}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Difference between navigate and navigatebyurl in angular.</h3>\n              navigateByUrl is similar to changing the location bar directly–we are providing the “whole” new URL. Whereas router. navigate creates a new URL by applying an array\n              of passed-in commands, a patch, to the current URL.\n              <div style={titles}>\n                <PrismCode\n                  code={addcomponents}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7. How do you detect route change in Angular?</h3>\n              <ul>\n                <li>Import Router, Event, NavigationStart, NavigationEnd, NavigationError from ‘@angular/router’.</li>\n                <li>And inject router in the constructor.</li>\n                <li>Subscribe to the NavigationStart, NavigationEnd, NavigationError events of the router.</li>\n              </ul>\n              <br />\n\n              <h3>8. What is this router navigate?</h3>\n              navigate method, you must supply the ActivatedRoute to give the router knowledge of where you are in the current route tree. After the link parameters array, add an\n              object with a relativeTo property set to the ActivatedRoute . The router then calculates the target URL based on the active route’s location.\n              <br />\n\n              <h3>9. When to use Route class in case of navigation?</h3>\n              Using Route class in case of navigation to happen on a triggered event. Before performing the above two operations, there is a need to register this component in the\n              Route class’s instance which lies inside the app-routing.module.ts file. This will be further used to navigate from child to parent.\n              <br />\n\n              <h3>10. Is there a way to navigate between routes in angular?</h3>\n              You can also navigate imperatively by using the code. This is done using the router service, which provides navigate and navigatebyUrl methods via which you can\n              perform route changes. Use this method, if you want to Navigate to a route using the link parameters array.\n              <br />\n\n              <h3>11. How to specify which route to navigate to in NavLink?</h3>\n              To specify which route to navigate to, use the to prop and pass the path name. The activeClassName prop will add an active class to the link if it’s currently active.\n              On the browser, the NavLink component is rendered as an tag with an href attribute value that was passed in the to prop.\n              <br />\n\n              <h3>12. When to use absolute path in navigate method?</h3>\n              Navigate Method always uses the absolute path unless you provide a starting point. navigate.navigateByUrl Use this method if you want to navigate to a URL by using\n              the absolute path. The first argument is a string containing the complete URL.\n              <br />\n\n              <h3>13. What is the use of eventemitter in angular.</h3>\n              Whenever it makes sense for code to SUBSCRIBE to something rather than get a callback from something. The typical use case would be that there's multiple blocks of\n              code in your application that may need to do something when an event happens.\n              <br />\n\n              <h3>14. What is the use of annotation @ViewChild?</h3>\n              The @ViewChild decorator allows us to inject into a component class references to elements used inside its template, that's what we should use it for. Using\n              @ViewChild we can easily inject components, directives or plain DOM elements.\n              <br />\n\n              <h3>15. Differentiale between obsevable and promise in angular.</h3>\n              <ul>\n                <li>Promises deal with one asynchronous event at a time, while observables handle a sequence of asynchronous events over a period of time.</li>\n                <li>Observables are lazy: they're not executed until we subscribe to them using the subscribe() method.</li>\n                <li>Promises are not lazy: execute immediately after creation.</li>\n              </ul>\n              <br />\n\n              <h3>16. What is the use of template in angular.</h3>\n              A template is a form of HTML that tells Angular how to render the component. Views are typically arranged hierarchically, allowing you to modify or show and\n              hide entire UI sections or pages as a unit. The template immediately associated with a component defines that component's host view.\n              <br />\n\n              <h3>17. What is the use of shared module in angular.</h3>\n              A Shared Module is used to organize a set of commonly used pieces into one module and export them to any module that imports the Share Module. This allows us\n              to selectively aggregate the reusable components that we have and re-export them into one consolidated module.\n              <br />\n\n              <h3>18. What is provider in angular.</h3>\n              Providers are classes that create and manage service objects the first time that Angular needs to resolve a dependency. Providers is used to register the\n              classes to an angular module as a service. And then, this service classes can be used by other components during the itself creation phase in the module.\n              <br />\n\n              <h3>19. How angular internally works.</h3>\n              <ul>\n                <li>https://medium.com/siam-vit/how-an-angular-app-work-behind-the-scenes-angular-flow-dcc4d1df27bd</li>\n                <li>https://www.youtube.com/watch?v=jD44QbL4kHo</li>\n              </ul>\n              <br />\n\n              <h3>20. What is ng-template in Angular?</h3>\n              <ul>\n                <li>ng-template is an Angular element that is used for rendering HTML in a template. However, it is not rendered directly on DOM. If you include an ng-template tag\n                  to a template, the tag and the content inside it will be replaced by comment upon render.</li>\n                <br />\n                <li>If you add a ng-template tag to your template, it and everything inside it will be replaced by a comment. It might seem a bit useless, but it is rarely used\n                  alone. It can be for example used to define the else case of an *ngIf.</li>\n              </ul>\n\n              <br />\n\n              <h3>21. What is difference between package.json and package-lock.json.</h3>\n              <ul>\n                <li><b>package.json: </b>Records important metadata about the project.</li>\n                <li><b>package.lock.json: </b>Allows future devs to install the same dependencies in the project.</li>\n              </ul>\n\n              <br />\n\n              <h3>22. How do you handle error in Angular?</h3>\n              One traditional way of handling errors in Angular is to provide an ErrorHandler class. This class can be extended to create your own global error handler. This is\n              also a useful way to handle all errors that occur, but is mostly useful for tracking error logs.\n              <br />\n\n              <h3>23. Pass complex JSON via routerLink.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={routerLink}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>How does an Angular application work?</h3>\n                <ul>\n                  <li>Every Angular app consists of a file named angular.json. This file will contain all the configurations of the app. While building the app, the builder looks at this file to find the entry point of the application. </li>\n                  <li>Inside the build section, the main property of the options object defines the entry point of the application which in this case is main.ts.\nThe main.ts file creates a browser environment for the application to run, and, along with this, it also calls a function called bootstrapModule, which bootstraps the application. These two steps are performed in the following order inside the main.ts file:</li>\n                  <b>platformBrowserDynamic().bootstrapModule(AppModule)</b>\n                  <br/>\n                  <li>In the above line of code, AppModule is getting bootstrapped.\nThe AppModule is declared in the app.module.ts file. This module contains declarations of all the components.</li>\n                  <li>Now, AppComponent is getting bootstrapped.</li>\n                  <li>This component is defined in app.component.ts file. This file interacts with the webpage and serves data to it.</li>\n                </ul>\n                <br/>\n\n                Each component is declared with three properties:\n                <ul>\n                  <li><b>Selector: </b>used for accessing the component.</li>\n                  <li><b>Template/TemplateURL: </b>contains HTML of the component.</li>\n                  <li><b>StylesURL: </b>contains component-specific stylesheets.</li>\n                </ul>\n                After this, Angular calls the index.html file. This file consequently calls the root component that is app-root. The root component is defined in app.component.ts.\n                <br/>\n                This is how every angular application works.\n              <br/>\n\n              <h3>What are some of the advantages of Angular over other frameworks?</h3>\n                <ul>\n                  <li><b>Features that are provided out of the box: </b>Angular provides a number of built-in features like,routing, state management, rxjs library and http servicesstraight out of the box. This means that one does not need tolook for the above stated features separately. They are allprovided with angular.</li>\n                  <li><b>Declarative UI: </b>Angular uses HTML to render the UI of an application. HTML isa declarative language and is much easier to use than JavaScript.</li>\n                  <li><b>Long-term Google support: </b>Google announced Long-term support for Angular. This means that Google plans to stick with Angular and further scale up its ecosystem.</li>\n                </ul>\n              <br/>\n\n              <h3>What is AOT compilation? What are the advantages of AOT?</h3>\n              Every Angular application consists of components and templates which the browser cannot understand. Therefore, all the Angular applications need to be compiled first before running inside the browser.\n              <br/>\n              Angular provides two types of compilation:\n              <ul>\n                <li>JIT(Just-in-Time) compilation</li>\n                <li>AOT(Ahead-of-Time) compilation</li>\n              </ul>\n              <br/>\n              The advantages of using AOT compilation are:\n              <ul>\n                <li>Since the application compiles before running inside the browser, the browser loads the executable code and renders the application immediately, which leads to faster rendering.</li>\n                <li>In AOT compilation, the compiler sends the external HTML and CSS files along with the application, eliminating separate AJAX requests for those source files, which leads to fewer ajax requests.</li>\n                <li>Developers can detect and handle errors during the building phase, which helps in minimizing errors.</li>\n                <li>The AOT compiler adds HTML and templates into the JS files before they run inside the browser. Due to this, there are no extra HTML files to be read, which provide better security to the application.</li>\n                <br/>\n                <li>By default, angular builds and serves the application using JIT compiler:\n                  <ul>\n                    <li>ng build</li>\n                    <li>ng serve</li>\n                  </ul>\n                </li>\n                <br/>\n                <li>For using AOT compiler following changes should be made:\n                  <ul>\n                    <li>ng build --aot</li>\n                    <li>ng serve --aot</li>\n                  </ul>\n                </li>\n              </ul>\n              <br/>\n\n              <h3>Explain Components, Modules and Services in Angular.</h3>\n                <ul>\n                  <li>In Angular, components are the basic building blocks, which control a part of the UI for any application.</li>\n                  <li>A component is defined using the @Component decorator. Every component consists of three parts, the template which loads the view for the component, a stylesheet which defines the look and feel for the component, and a class that contains the business logic for the component.</li>\n                </ul>\n                <br/>\n                <b>Modules: </b>A module is a place where we can group components, directives, services, and pipes. Module decides whether the components, directives, etc can be used by other modules, by exporting or hiding these elements. Every module is defined with a @NgModule decorator.\n                <br/>\n                <br/>\n                By default, modules are of two types:\n                <ul>\n                  <li><b>Root Module: </b></li>\n                  <li><b>Feature Module: </b>Every application can have only one root module whereas, it can have one or more feature modules.\n                  <ol>\n                    <li>A root module imports BrowserModule,</li>\n                    <li>whereas a feature module imports CommonModule.</li>\n                  </ol>\n                  </li>\n                </ul>\n                <b>Services: </b>Services are objects which get instantiated only once during the lifetime of an application. The main objective of a service is to share data, functions with different components of an Angular application.\n                <br/>\n                A service is defined using a @Injectable decorator. A function defined inside a service can be invoked from any component or directive.\n              <br/>\n\n              <h3>Explain string interpolation and property binding in Angular.</h3>\n                <ul>\n                  <li>String interpolation and property binding are parts of data-binding in Angular.\nData-binding is a feature in angular, which provides a way to communicate between the component(Model) and its view(HTML template).</li>\n                  <li>Data-binding can be done in two ways, one-way binding and two-way binding.\nIn Angular, data from the component can be inserted inside the HTML template. In one-way binding, any changes in the component will directly reflect inside the HTML template but, vice-versa is not possible. Whereas, it is possible in two-way binding.</li>\n                  <li>String interpolation and property binding allow only one-way data binding.\nString interpolation uses the double curly braces to display data from the component. Angular automatically runs the expression written inside the curly braces.</li>\n                </ul>\n              <br/>\n\n              <h3>How are Angular expressions different from JavaScript expressions?</h3>\n              The first and perhaps, the biggest difference is that Angular expressions allow us to write JavaScript in HTML which is not the case when it comes to JavaScript expressions.\nNext, Angular expressions are evaluated against a local scope object whereas JavaScript expressions against global window object. \n              <br/>\n\n              <h3>How are observables different from promises?</h3>\n              The first difference is that an Observable is lazy whereas a Promise is eager.\n              <br/>\n            <table>\n              <tr>\n                <th>Observables</th>\n                <th>Promises</th>\n              </tr>\n              <tr>\n                <td>Emits multiple values over a period of time</td>\n                <td>Emits a single value</td>\n              </tr>\n              <tr>\n                <td>Lazy. An observable is not called until we subscribe to the observable</td>\n                <td>Not Lazy</td>\n              </tr>\n              <tr>\n                <td>Can be cancelled by using the unsubscribe() method</td>\n                <td>Cannot be cancelled</td>\n              </tr>\n              <tr>\n                <td>Observable provides operators like map, forEach, filter, reduce, retry, retryWhen etc.</td>\n                <td></td>\n              </tr>\n            </table>\n              <br/>\n\n              <h3>Angular by default, uses client-side rendering for its applications. Can one make an angular application to render on the server-side?</h3>\n              Yes, angular provides a technology called Angular Universal, which can be used to render applications on the server-side.\n              <br/>\n              <b>The advantages of using Angular Universal are :</b>\n                <ul>\n                  <li>First time users can instantly see a view of the application. This benefits in providing better user experience.</li>\n                  <li>Many search engines expect pages in plain HTML, thus, Universal can make sure that your content is available on every search engine, which leads to better SEO.</li>\n                  <li>Any server-side rendered application loads faster since rendered pages are available to the browser sooner.</li>\n                </ul>\n              <br/>\n\n              <h3></h3>\n\n              <br/>\n\n              <h3></h3>\n\n              <br/>\n\n              <h3></h3>\n\n              <br/>\n\n              <h3></h3>\n\n              <br/>\n\n              <h3></h3>\n\n              <br/>\n\n              <h3></h3>\n\n              <br/>\n\n              <h3></h3>\n\n              <br/>\n\n              <h3></h3>\n\n              <br/>\n\n              <h3></h3>\n\n              <br/>\n\n              <h3></h3>\n\n              <br/>\n\n              <h3></h3>\n\n              <br/>\n\n              <h3></h3>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(NgrxCounter));\n"]},"metadata":{},"sourceType":"module"}