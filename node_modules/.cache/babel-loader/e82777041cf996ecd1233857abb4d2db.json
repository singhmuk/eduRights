{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import\"../../ReactJs/styles.css\";import Sidebar from\"../sidebar\";import PrismCode from\"../../ReactJs/prismCode\";var titles={backgroundColor:\"#F0F8FF\",padding:\"1px\",fontSize:\"16px\"};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var Create_DB=\"\\nshow dbs\\nuse EmployeeDB\\ndb.dropDatabase()\\ndb.createUser({user:\\\"brad\\\", pwd:\\\"123\\\", roles:[\\\"readWrite\\\", \\\"dbAdmin\\\"]});\\n\\nshow collections\\ndb.createCollection('store');                                          //create collection\\ndb.orders.renameCollection('store')                                    //rename collection\\ndb.orders.drop()                                                       // drop collection\\n \".trim();var findOne=\"\\ndb.store.find().pretty()\\ndb.store.find({name: 'Ritesh'}, {country: 'India', color: 'Green'})\\ndb.store.findOne({country: \\\"UK\\\"});\\ndb.store.find({},{\\\"name\\\":1,_id:0}).limit(2);\\ndb.store.find().count();\\ndb.store.find().limit(4).skip(1);\\n\\ndb.store.find({$and: [{name:'Mukesh'},{country:'India'}] });\\ndb.store.find({$or: [{name:'Mukesh'},{country:'India'}] });\\n\\ndb.store.find({country:{$in:['India']}})\\ndb.store.find({country:{$not:{$in:['India']}}})\\n\\ndb.store.find({score:{$eq:7}})\\ndb.store.find({country:{$not:{$eq:'India'}}})\\ndb.store.find({score:{$lt:4}});\\ndb.store.find({score:{$gt:4}});\\n\\n\".trim();var queries=\"\\ndb.store.insert({'interger':23});\\ndb.store.insertOne({_id:1,name:'mukesh',country:'indian'});\\n\\ndb.store.insertMany([\\n     { _id: 20, name: \\\"John Wick\\\", country: \\\"Visual Studio\\\"},\\n     { _id: 22, name: \\\"Deeksha Raul\\\", country: \\\"Unity 3D\\\" }\\n   ]);\\n\\ndb.store.update({_id:1},{$set:{name:['mukesh'],country:['1234567890']}});\\ndb.store.update({name:'Mukesh'},{$set:{country:'India'}})\\ndb.store.update({_id: 20}, { $set: { name: [\\\"Vocals\\\", \\\"Violin\\\", \\\"Octapad\\\"] }})\\ndb.users.update({_id:2.0},{$set:{userId:1}})          //alter collections, to add new data in existing row.\\n\\n//Rename Field\\ndb.posts.update({ title: 'Post Two' },{ $rename: { likes: 'views' }});\\n\\ndb.store.remove({})\\ndb.store.remove({ name: \\\"mukesh\\\" })\\ndb.store.remove({_id:1},{justOne:true});\\n\".trim();var Filtering=\"\\ndb.store.remove()\\ndb.store.remove({\\\"_id\\\":ObjectId(\\\"5d9f3bd0c02cef7d50bb97fb\\\")});\\n\".trim();var joining=\"> db.users.find()\\n{ \\\"_id\\\" : 1, \\\"userId\\\" : 1, \\\"name\\\" : \\\"Al\\\" }\\n{ \\\"_id\\\" : 2), \\\"userId\\\" : 2, \\\"name\\\" : \\\"Betty\\\" }\\n{ \\\"_id\\\" : 3, \\\"userId\\\" : 3, \\\"name\\\" : \\\"Cameron\\\" }\\n\\n> db.comments.find()\\n{ \\\"_id\\\" : 1, \\\"userId\\\" : 1, \\\"comment\\\" : \\\"Hi, I'm Al and I love comments.\\\" }\\n{ \\\"_id\\\" : 2, \\\"userId\\\" : 1, \\\"comment\\\" : \\\"Hi, it's Al again. I really do love comments.\\\" }\\n{ \\\"_id\\\" : 3, \\\"userId\\\" : 2, \\\"comment\\\" : \\\"I'm Betty. This is my first comment onthis site.\\\" }\\n{ \\\"_id\\\" : 4, \\\"userId\\\" : 3, \\\"comment\\\" : \\\"This is Cameron. I enjoyed reading your website.\\\" }\\n\".trim();var aggregate=\"db.users.aggregate([ {$lookup: {\\n                            from: \\\"comments\\\",\\n                            localField: \\\"userId\\\",\\n                            foreignField: \\\"userId\\\",\\n                            as: \\\"combined\\\"\\n                          }\\n                       }\\n                     ]).pretty()\\n\".trim();var Data_Modelling=\"db.customers.insert([\\n{id: , Emp_ID: \\\"10025AE336\\\" Personal_details:{ First_Name: \\\"Radhika\\\", Last_Name: \\\"Sharma\\\", DOB: \\\"1995-09-26\\\"},\\n  Contact: { e-mail: \\\"radhika_sharma.123@gmail.com\\\", phone: \\\"9848022338\\\"},\\n  Address: { city: \\\"Hyderabad\\\", Area: \\\"Madapur\\\", State: \\\"Telangana\\\"}\\n    ]);\\n \".trim();var normalized=\"\\nEmployee: {_id: <ObjectId101>, Emp_ID: \\\"10025AE336\\\"}\\n  \\nPersonal_details:{ _id: <ObjectId102>, empDocID: \\\" ObjectId101\\\", First_Name: \\\"Radhika\\\", Last_Name: \\\"Sharma\\\",\\n                  DOB: \\\"1995-09-26\\\"}\\n   \\n Contact: { _id: <ObjectId103>, empDocID: \\\" ObjectId101\\\", e-mail: \\\"radhika_sharma.123@gmail.com\\\", \\n                  phone: \\\"9848022338\\\"}\\n   \\n Address: { _id: <ObjectId104>, empDocID: \\\" ObjectId101\\\", city: \\\"Hyderabad\\\", Area: \\\"Madapur\\\", State: \\\"Telangana\\\"}\\n \".trim();var Example=\"{ _id: POST_ID title: TITLE_OF_POST, description: POST_DESCRIPTION, by: POST_BY, url: URL_OF_POST, \\n  tags: [TAG1, TAG2, TAG3], likes: TOTALL_LIKES,\\n  \\n    comments: [{ user:'COMMENT_BY', message: TEXT, dateCreated: DATE_TIME, like: LIKES },\\n      { user:'COMMENT_BY', message: TEXT, dateCreated: DATE_TIME, like: LIKES }\\n    ]}\\n  \".trim();var Aggregation=\"\\ndb.mycol.aggregate([{$group : {_id : \\\"$by_user\\\", num_tutorial : {$sum : 1}}}]);\\n\\n//Used to select some specific fields from a collection.\\ndb.user.aggregate([ { $project : { _id : 0, name : 1 } }])\\n\".trim();var Pipeline=\"> db.user.find()\\n{ \\\"_id\\\" : 1, \\\"name\\\" : \\\"GENWI\\\", \\\"founded_year\\\" : 2010 }\\n{ \\\"_id\\\" : 2, \\\"name\\\" : \\\"Needium\\\", \\\"founded_year\\\" : 2010 }\\n{ \\\"_id\\\" : 3, \\\"name\\\" : \\\"Ziippi\\\", \\\"founded_year\\\" : 2011 }\\n{ \\\"_id\\\" : 4, \\\"name\\\" : \\\"Pixelmatic\\\", \\\"founded_year\\\" : 2011 }\\n{ \\\"_id\\\" : 5, \\\"name\\\" : \\\"Clowdy\\\", \\\"founded_year\\\" : 2013 }\\n\\n\\nPipeline\\ndb.user.aggregate([\\n  { $match : { founded_year : 2011 } },\\n  { $sort : {name:-1} },\\n  { $project : { _id : 0, name : 1 } }\\n ])\\n \\n \\n Or Pipeline\\n db.user.aggregate([\\n  { $match: { founded_year: { $gte: 2010 } } },\\n  { $group: {\\n  _id: \\\"$founded_year\\\",\\n  companies: { $push: \\\"$name\\\" }\\n  }},\\n  { $sort: { \\\"_id\\\": 1 } }\\n ])\".trim();var match=\"\\ndb.users.aggregate({$match:{userId:1}})\\ndb.users.aggregate({$match:{userId: {$gte:3}}})\\n\".trim();var group=\"db.user.aggregate({ $group :{_id:ObjectId(\\\"5ef64c903da2b374c85626a1\\\"), count:{$sum:1}} })\".trim();var sort=\"db.user.aggregate({ $sort : {name:-1} })\\n\".trim();var unwind=\"db.user.aggregate({ $project: {author : 1, title : 1, tags : 1}},\\n                        { $unwind : \\\"$tags\\\" });\\n \\n o/p:\\n{ \\\"_id\\\" : 1, \\\"title\\\" : \\\"this is my title\\\", \\\"author\\\" : \\\"bob\\\", \\\"tags\\\" : \\\"fun\\\" }\\n{ \\\"_id\\\" : 2, \\\"title\\\" : \\\"this is my title\\\", \\\"author\\\" : \\\"bob\\\", \\\"tags\\\" : \\\"good\\\" }\\n{ \\\"_id\\\" : 3, \\\"title\\\" : \\\"this is my title\\\", \\\"author\\\" : \\\"bob\\\", \\\"tags\\\" : \\\"fun\\\" }\".trim();var chaining=\"\\ndb.customers.find().limit(2).sort({ title: 1 }).pretty()\\n\\nForeach\\ndb.customers.find().forEach(doc=>{\\n  print('name',doc.First_Name)\\n  });\\n \".trim();var update=\"db.customers.save(\\n  {\\\"_id\\\" : ObjectId(5ee08dc1e206f48220a3b08c), \\\"first_name\\\":\\\"Tutorials Point N\\n ew Topic\\\",\\\"by\\\":\\\"mongodb\\\"}\\n );\\n \".trim();var update_2=\"db.customers.update({first_name:\\\"mukesh\\\"},\\n{$set:{first_name:\\\"Mongodb\\\"}},{multi:true})\\n\".trim();var findOneAndUpdate=\"db.customers.updateOne(\\n  {first_name: 'ram'},\\n  { $set: { Age: '30',e_mail: 'radhika_newemail@gmail.com'}}\\n );\\n \".trim();var updateOne=\"db.customers.updateOne(\\n  {first_name: 'mukesh'},\\n  { $set: { Age: '30',e_mail: 'radhika_newemail@gmail.com'}}\\n );\".trim();var updateMany=\"db.customers.updateMany({Age:{ $gt: \\\"25\\\" }},\\n{ $set: { Age: '00'}}\\n);\\n\".trim();var Replace=\"db.customers.update({first_name:\\\"John\\\"},{$set:{gender:\\\"femail\\\"}});\\n\".trim();var increments=\"db.customers.update({first_name:\\\"John\\\"},{$set:{age:45}});\\ndb.customers.update({first_name:\\\"John\\\"},{$inc:{age:5}});\\n\".trim();var Intro=/*#__PURE__*/function(_Component){_inherits(Intro,_Component);function Intro(){_classCallCheck(this,Intro);return _possibleConstructorReturn(this,_getPrototypeOf(Intro).apply(this,arguments));}_createClass(Intro,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Create DB\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Create_DB,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"i\",null,\"_id is 12 bytes hexadecimal number unique for every document in a collection. 12 bytes are divided as follows \\u2212\"),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Insert\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:queries,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Find Specific Fields\"),\"It is also possible to filter your results by giving or adding some specific criteria in which you are interested to.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:findOne,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. MongoDB's update\"),React.createElement(\"b\",null,\"MongoDB's update() and save() methods are used to update document into a collection. The update() method update the values in the existing document while the save() method replaces the existing document with the document passed in save() method.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:update,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"i\",null,\" \",\"By default, MongoDB will update only a single document. To update multiple documents, you need to set a parameter multi: true\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:update_2,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),\"he findOneAndUpdate() method updates the values in the existing document.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:findOneAndUpdate,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"i\",null,\"MongoDB updateOne() method: This methods updates a single document which matches the given filter.\"),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:updateOne,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"i\",null,\"The customers() method updates all the documents that matches the given filter\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:updateMany,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"i\",null,\"Replace documents\"),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Replace,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"match\"),React.createElement(\"br\",null),\"\\u2212 This is a filtering operation and thus this can reduce the amount of documents that are given as input to the next stage.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:match,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"group\"),React.createElement(\"br\",null),\"This does the actual aggregation as discussed above.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:group,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"sort\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:sort,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"i\",null,\"skip\"),React.createElement(\"br\",null),React.createElement(\"i\",null,\"limit\"),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Unwind\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:unwind,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Chaining\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:chaining,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"increments numeric value is first\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:increments,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Updates\"),React.createElement(\"br\",null),React.createElement(\"b\",null,\"MongoDB's remove() method \"),\"MongoDB's remove() method is used to remove a document from the collection. remove() method accepts two parameters. One is deletion criteria and second is justOne flag.\",React.createElement(\"br\",null),\"If you don't specify deletion criteria, then MongoDB will delete whole documents from the collection.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"If there are multiple records and you want to delete only the first record, then set justOne parameter in remove() method.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Filtering,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. joining the data from 2 table queries\"),\"We perform a left outer join by using the $lookup stage. The $lookup stage lets specify which collection we want to join with the current collection, and which fields that should match.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"i\",null,\"Consider we have a \\\"users\\\" collection and a \\\"comments\\\" collection:\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:joining,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),\"As can see in our dataset there is a common field userId on both collections which allows us to match up each user with their comments.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"i\",null,\"Use the aggregate() method with the $lookup stage.\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:aggregate,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"i\",null,\"MongoDB can store lots and lots data. And work in a very performent way. Retrive data very fast. Used in web and mobile applications.\",React.createElement(\"br\",null),\" \",React.createElement(\"b\",null,\"Collection = Table\"),React.createElement(\"br\",null),\"Data stored in collection as Documents(BSON). This Documents are Seamaless means we can store different data in same collection.\",React.createElement(\"br\",null),\"It's store embeded Documents(Document inside Document).\",React.createElement(\"br\",null),\"Good to use when there is no ton of inter connected relations Database, Collections, Document data/db folder inside MongoDB To insert data into MongoDB collection.\"),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. Data Modelling\"),\"Data in MongoDB has a flexible schema.documents in the same collection. They do not need to have the same set of fields or structure, Common fields in a collection\\u2019s documents may hold different types of data.\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Data Model Design:\"),\" MongoDB provides two types of data models.\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Embedded data model\"),React.createElement(\"li\",null,\"Normalized data model\")),React.createElement(\"br\",null),\"In Embedded Data Model, you can have (embed) all the related data in a single document, it is also known as de-normalized data model.\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Ex. \"),\"Assume we are getting the details of employees in three different documents namely, Personal_details, Contact and, Address, you can embed all the three documents in a single one as shown below \\u2212\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Data_Modelling,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"7. Normalized: \"),\"In Normalized Data Model, we can refer the sub documents in the original document.\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Ex. \"),\"we can re-write the above document in the normalized model as.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:normalized,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Suppose a client needs a database design for his blog/website and see the differences between RDBMS and MongoDB schema design. Website has the following requirements\",React.createElement(\"br\",null),\"Every post has the unique title, description and url.\",React.createElement(\"br\",null),\"Every post can have one or more tags.\",React.createElement(\"br\",null),\"Every post has the name of its publisher and total number of likes.\",React.createElement(\"br\",null),\"Every post has comments given by users along with their name, message, data-time and likes.\",React.createElement(\"br\",null),\"On each post, there can be zero or more comments.\"),React.createElement(\"br\",null),\"In RDBMS schema, design for above requirements will have minimum three tables. While in MongoDB schema, design will have one collection post and the following structure\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Example,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"8. Aggregation\"),\"Aggregation in MongoDB is the process of retrieving data from multiple documents and performing a set of transformations on the data to get the desired results. Aggregation can be used to perform complex data analysis, such as data grouping, filtering, sorting, and data transformation.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"The aggregation framework in MongoDB provides a set of operators that allow you to manipulate and transform data in a variety of ways. Some of the common operators used in the aggregation framework include:\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"$match: \"),\"This operator is used to filter the data based on a specified condition.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"$group: \"),\"This operator is used to group the data based on one or more fields and perform aggregation operations such as sum, average, count, etc.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"$project:: \"),\"This operator is used to reshape the data by including or excluding fields from the output.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"$sort: \"),\"This operator is used to sort the data based on one or more fields.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"$limit: \")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"$skip:: \"))),React.createElement(\"br\",null),React.createElement(\"br\",null),\"In SQL count(*) and with group by is an equivalent of mongodb aggregation.\",React.createElement(\"br\",null),\"if you want to display a list stating how many tutorials are written by each user, then you will use the following aggregate() method -\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Aggregation,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"9. Pipeline Concept\"),\"Aggregation Framework : Is a set of analytics tools within mongodb that allows to run various reports/ analysis on one/ more mongodb collections.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Aggregation Pipeline: \"),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Take Input from a single collection.\"),React.createElement(\"li\",null,\"Pass the documents of the collection through one/ more stages.\"),React.createElement(\"li\",null,\"Each stage perform different operations in the Pipeline.\"),React.createElement(\"li\",null,\"Each stage take as Input whatever the stage before produced as Output. The Input and Output for all stages are documents (stream of documents).\"),React.createElement(\"li\",null,\"At the end of Pipeline we get access to the output of the transformed and aggregated Output.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Pipeline,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return Intro;}(Component);export default withStyles(styles)(Intro);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/mongoDB/deepMongodb/intro.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","Create_DB","trim","findOne","queries","Filtering","joining","aggregate","Data_Modelling","normalized","Example","Aggregation","Pipeline","match","group","sort","unwind","chaining","update","update_2","findOneAndUpdate","updateOne","updateMany","Replace","increments","Intro","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst Create_DB = `\nshow dbs\nuse EmployeeDB\ndb.dropDatabase()\ndb.createUser({user:\"brad\", pwd:\"123\", roles:[\"readWrite\", \"dbAdmin\"]});\n\nshow collections\ndb.createCollection('store');                                          //create collection\ndb.orders.renameCollection('store')                                    //rename collection\ndb.orders.drop()                                                       // drop collection\n `.trim();\n\nconst findOne = `\ndb.store.find().pretty()\ndb.store.find({name: 'Ritesh'}, {country: 'India', color: 'Green'})\ndb.store.findOne({country: \"UK\"});\ndb.store.find({},{\"name\":1,_id:0}).limit(2);\ndb.store.find().count();\ndb.store.find().limit(4).skip(1);\n\ndb.store.find({$and: [{name:'Mukesh'},{country:'India'}] });\ndb.store.find({$or: [{name:'Mukesh'},{country:'India'}] });\n\ndb.store.find({country:{$in:['India']}})\ndb.store.find({country:{$not:{$in:['India']}}})\n\ndb.store.find({score:{$eq:7}})\ndb.store.find({country:{$not:{$eq:'India'}}})\ndb.store.find({score:{$lt:4}});\ndb.store.find({score:{$gt:4}});\n\n`.trim();\n\nconst queries = `\ndb.store.insert({'interger':23});\ndb.store.insertOne({_id:1,name:'mukesh',country:'indian'});\n\ndb.store.insertMany([\n     { _id: 20, name: \"John Wick\", country: \"Visual Studio\"},\n     { _id: 22, name: \"Deeksha Raul\", country: \"Unity 3D\" }\n   ]);\n\ndb.store.update({_id:1},{$set:{name:['mukesh'],country:['1234567890']}});\ndb.store.update({name:'Mukesh'},{$set:{country:'India'}})\ndb.store.update({_id: 20}, { $set: { name: [\"Vocals\", \"Violin\", \"Octapad\"] }})\ndb.users.update({_id:2.0},{$set:{userId:1}})          //alter collections, to add new data in existing row.\n\n//Rename Field\ndb.posts.update({ title: 'Post Two' },{ $rename: { likes: 'views' }});\n\ndb.store.remove({})\ndb.store.remove({ name: \"mukesh\" })\ndb.store.remove({_id:1},{justOne:true});\n`.trim();\n\nconst Filtering = `\ndb.store.remove()\ndb.store.remove({\"_id\":ObjectId(\"5d9f3bd0c02cef7d50bb97fb\")});\n`.trim();\n\nconst joining = `> db.users.find()\n{ \"_id\" : 1, \"userId\" : 1, \"name\" : \"Al\" }\n{ \"_id\" : 2), \"userId\" : 2, \"name\" : \"Betty\" }\n{ \"_id\" : 3, \"userId\" : 3, \"name\" : \"Cameron\" }\n\n> db.comments.find()\n{ \"_id\" : 1, \"userId\" : 1, \"comment\" : \"Hi, I'm Al and I love comments.\" }\n{ \"_id\" : 2, \"userId\" : 1, \"comment\" : \"Hi, it's Al again. I really do love comments.\" }\n{ \"_id\" : 3, \"userId\" : 2, \"comment\" : \"I'm Betty. This is my first comment onthis site.\" }\n{ \"_id\" : 4, \"userId\" : 3, \"comment\" : \"This is Cameron. I enjoyed reading your website.\" }\n`.trim();\n\nconst aggregate = `db.users.aggregate([ {$lookup: {\n                            from: \"comments\",\n                            localField: \"userId\",\n                            foreignField: \"userId\",\n                            as: \"combined\"\n                          }\n                       }\n                     ]).pretty()\n`.trim();\n\nconst Data_Modelling = `db.customers.insert([\n{id: , Emp_ID: \"10025AE336\" Personal_details:{ First_Name: \"Radhika\", Last_Name: \"Sharma\", DOB: \"1995-09-26\"},\n  Contact: { e-mail: \"radhika_sharma.123@gmail.com\", phone: \"9848022338\"},\n  Address: { city: \"Hyderabad\", Area: \"Madapur\", State: \"Telangana\"}\n    ]);\n `.trim();\n\nconst normalized = `\nEmployee: {_id: <ObjectId101>, Emp_ID: \"10025AE336\"}\n  \nPersonal_details:{ _id: <ObjectId102>, empDocID: \" ObjectId101\", First_Name: \"Radhika\", Last_Name: \"Sharma\",\n                  DOB: \"1995-09-26\"}\n   \n Contact: { _id: <ObjectId103>, empDocID: \" ObjectId101\", e-mail: \"radhika_sharma.123@gmail.com\", \n                  phone: \"9848022338\"}\n   \n Address: { _id: <ObjectId104>, empDocID: \" ObjectId101\", city: \"Hyderabad\", Area: \"Madapur\", State: \"Telangana\"}\n `.trim();\n\nconst Example =\n  `{ _id: POST_ID title: TITLE_OF_POST, description: POST_DESCRIPTION, by: POST_BY, url: URL_OF_POST, \n  tags: [TAG1, TAG2, TAG3], likes: TOTALL_LIKES,\n  \n    comments: [{ user:'COMMENT_BY', message: TEXT, dateCreated: DATE_TIME, like: LIKES },\n      { user:'COMMENT_BY', message: TEXT, dateCreated: DATE_TIME, like: LIKES }\n    ]}\n  `.trim();\n\nconst Aggregation = `\ndb.mycol.aggregate([{$group : {_id : \"$by_user\", num_tutorial : {$sum : 1}}}]);\n\n//Used to select some specific fields from a collection.\ndb.user.aggregate([ { $project : { _id : 0, name : 1 } }])\n`.trim();\n\nconst Pipeline = `> db.user.find()\n{ \"_id\" : 1, \"name\" : \"GENWI\", \"founded_year\" : 2010 }\n{ \"_id\" : 2, \"name\" : \"Needium\", \"founded_year\" : 2010 }\n{ \"_id\" : 3, \"name\" : \"Ziippi\", \"founded_year\" : 2011 }\n{ \"_id\" : 4, \"name\" : \"Pixelmatic\", \"founded_year\" : 2011 }\n{ \"_id\" : 5, \"name\" : \"Clowdy\", \"founded_year\" : 2013 }\n\n\nPipeline\ndb.user.aggregate([\n  { $match : { founded_year : 2011 } },\n  { $sort : {name:-1} },\n  { $project : { _id : 0, name : 1 } }\n ])\n \n \n Or Pipeline\n db.user.aggregate([\n  { $match: { founded_year: { $gte: 2010 } } },\n  { $group: {\n  _id: \"$founded_year\",\n  companies: { $push: \"$name\" }\n  }},\n  { $sort: { \"_id\": 1 } }\n ])`.trim();\n\nconst match = `\ndb.users.aggregate({$match:{userId:1}})\ndb.users.aggregate({$match:{userId: {$gte:3}}})\n`.trim();\n\nconst group =\n  `db.user.aggregate({ $group :{_id:ObjectId(\"5ef64c903da2b374c85626a1\"), count:{$sum:1}} })`.trim();\n\nconst sort = `db.user.aggregate({ $sort : {name:-1} })\n`.trim();\n\nconst unwind =\n  `db.user.aggregate({ $project: {author : 1, title : 1, tags : 1}},\n                        { $unwind : \"$tags\" });\n \n o/p:\n{ \"_id\" : 1, \"title\" : \"this is my title\", \"author\" : \"bob\", \"tags\" : \"fun\" }\n{ \"_id\" : 2, \"title\" : \"this is my title\", \"author\" : \"bob\", \"tags\" : \"good\" }\n{ \"_id\" : 3, \"title\" : \"this is my title\", \"author\" : \"bob\", \"tags\" : \"fun\" }`.trim();\n\nconst chaining = `\ndb.customers.find().limit(2).sort({ title: 1 }).pretty()\n\nForeach\ndb.customers.find().forEach(doc=>{\n  print('name',doc.First_Name)\n  });\n `.trim();\n\nconst update = `db.customers.save(\n  {\"_id\" : ObjectId(5ee08dc1e206f48220a3b08c), \"first_name\":\"Tutorials Point N\n ew Topic\",\"by\":\"mongodb\"}\n );\n `.trim();\n\nconst update_2 = `db.customers.update({first_name:\"mukesh\"},\n{$set:{first_name:\"Mongodb\"}},{multi:true})\n`.trim();\n\nconst findOneAndUpdate = `db.customers.updateOne(\n  {first_name: 'ram'},\n  { $set: { Age: '30',e_mail: 'radhika_newemail@gmail.com'}}\n );\n `.trim();\n\nconst updateOne = `db.customers.updateOne(\n  {first_name: 'mukesh'},\n  { $set: { Age: '30',e_mail: 'radhika_newemail@gmail.com'}}\n );`.trim();\n\nconst updateMany = `db.customers.updateMany({Age:{ $gt: \"25\" }},\n{ $set: { Age: '00'}}\n);\n`.trim();\n\nconst Replace =\n  `db.customers.update({first_name:\"John\"},{$set:{gender:\"femail\"}});\n`.trim();\n\nconst increments = `db.customers.update({first_name:\"John\"},{$set:{age:45}});\ndb.customers.update({first_name:\"John\"},{$inc:{age:5}});\n`.trim();\n\nclass Intro extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Create DB</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Create_DB}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>\n                _id is 12 bytes hexadecimal number unique for every document in\n                a collection. 12 bytes are divided as follows −\n              </i>\n              <br />\n              <h3>2. Insert</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={queries}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>3. Find Specific Fields</h3>\n              It is also possible to filter your results by giving or adding\n              some specific criteria in which you are interested to.\n              <div style={titles}>\n                <PrismCode\n                  code={findOne}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>4. MongoDB's update</h3>\n              <b>\n                MongoDB's update() and save() methods are used to update\n                document into a collection. The update() method update the\n                values in the existing document while the save() method replaces\n                the existing document with the document passed in save() method.\n              </b>\n              <div style={titles}>\n                <PrismCode\n                  code={update}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>\n                {\" \"}\n                By default, MongoDB will update only a single document. To\n                update multiple documents, you need to set a parameter multi:\n                true\n              </i>\n              <div style={titles}>\n                <PrismCode\n                  code={update_2}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              he findOneAndUpdate() method updates the values in the existing\n              document.\n              <div style={titles}>\n                <PrismCode\n                  code={findOneAndUpdate}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>\n                MongoDB updateOne() method: This methods updates a single\n                document which matches the given filter.\n              </i>\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={updateOne}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>\n                The customers() method updates all the documents that matches\n                the given filter\n              </i>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={updateMany}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <i>Replace documents</i>\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={Replace}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>match</b>\n              <br />− This is a filtering operation and thus this can reduce the\n              amount of documents that are given as input to the next stage.\n              <div style={titles}>\n                <PrismCode\n                  code={match}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>group</b>\n              <br />\n              This does the actual aggregation as discussed above.\n              <div style={titles}>\n                <PrismCode\n                  code={group}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>sort</b>\n              <div style={titles}>\n                <PrismCode\n                  code={sort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>skip</i>\n              <br />\n              <i>limit</i>\n              <br />\n              <br />\n              <b>Unwind</b>\n              <div style={titles}>\n                <PrismCode\n                  code={unwind}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Chaining</b>\n              <div style={titles}>\n                <PrismCode\n                  code={chaining}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>increments numeric value is first</b>\n              <div style={titles}>\n                <PrismCode\n                  code={increments}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Updates</b>\n              <br />\n              <b>MongoDB's remove() method </b>\n              MongoDB's remove() method is used to remove a document from the\n              collection. remove() method accepts two parameters. One is\n              deletion criteria and second is justOne flag.\n              <br />\n              If you don't specify deletion criteria, then MongoDB will delete\n              whole documents from the collection.\n              <br />\n              <br />\n              If there are multiple records and you want to delete only the\n              first record, then set justOne parameter in remove() method.\n              <div style={titles}>\n                <PrismCode\n                  code={Filtering}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>5. joining the data from 2 table queries</h3>\n              We perform a left outer join by using the $lookup stage. The\n              $lookup stage lets specify which collection we want to join with\n              the current collection, and which fields that should match.\n              <br />\n              <br />\n              <i>\n                Consider we have a \"users\" collection and a \"comments\"\n                collection:\n              </i>\n              <div style={titles}>\n                <PrismCode\n                  code={joining}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              As can see in our dataset there is a common field userId on both\n              collections which allows us to match up each user with their\n              comments.\n              <br />\n              <br />\n              <i>Use the aggregate() method with the $lookup stage.</i>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={aggregate}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>\n                MongoDB can store lots and lots data. And work in a very\n                performent way. Retrive data very fast. Used in web and mobile\n                applications.\n                <br /> <b>Collection = Table</b>\n                <br />\n                Data stored in collection as Documents(BSON). This Documents are\n                Seamaless means we can store different data in same collection.\n                <br />\n                It's store embeded Documents(Document inside Document).\n                <br />\n                Good to use when there is no ton of inter connected relations\n                Database, Collections, Document data/db folder inside MongoDB To\n                insert data into MongoDB collection.\n              </i>\n              <br />\n              <h3>6. Data Modelling</h3>\n              Data in MongoDB has a flexible schema.documents in the same\n              collection. They do not need to have the same set of fields or\n              structure, Common fields in a collection’s documents may hold\n              different types of data.\n              <br />\n              <b>Data Model Design:</b> MongoDB provides two types of data\n              models.\n              <ul>\n                <li>Embedded data model</li>\n                <li>Normalized data model</li>\n              </ul>\n              <br />\n              In Embedded Data Model, you can have (embed) all the related data\n              in a single document, it is also known as de-normalized data\n              model.\n              <br />\n              <b>Ex. </b>Assume we are getting the details of employees in three\n              different documents namely, Personal_details, Contact and,\n              Address, you can embed all the three documents in a single one as\n              shown below −\n              <div style={titles}>\n                <PrismCode\n                  code={Data_Modelling}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>7. Normalized: </h3>\n              In Normalized Data Model, we can refer the sub documents in the\n              original document.\n              <br />\n              <b>Ex. </b>we can re-write the above document in the normalized\n              model as.\n              <div style={titles}>\n                <PrismCode\n                  code={normalized}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>\n                Suppose a client needs a database design for his blog/website\n                and see the differences between RDBMS and MongoDB schema design.\n                Website has the following requirements\n                <br />\n                Every post has the unique title, description and url.\n                <br />\n                Every post can have one or more tags.\n                <br />\n                Every post has the name of its publisher and total number of\n                likes.\n                <br />\n                Every post has comments given by users along with their name,\n                message, data-time and likes.\n                <br />\n                On each post, there can be zero or more comments.\n              </b>\n              <br />\n              In RDBMS schema, design for above requirements will have minimum\n              three tables. While in MongoDB schema, design will have one\n              collection post and the following structure\n              <div style={titles}>\n                <PrismCode\n                  code={Example}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>8. Aggregation</h3>\n              Aggregation in MongoDB is the process of retrieving data from\n              multiple documents and performing a set of transformations on the\n              data to get the desired results. Aggregation can be used to\n              perform complex data analysis, such as data grouping, filtering,\n              sorting, and data transformation.\n              <br />\n              <br />\n              The aggregation framework in MongoDB provides a set of operators\n              that allow you to manipulate and transform data in a variety of\n              ways. Some of the common operators used in the aggregation\n              framework include:\n              <br />\n              <ul>\n                <li>\n                  <b>$match: </b>This operator is used to filter the data based\n                  on a specified condition.\n                </li>\n                <br />\n                <li>\n                  <b>$group: </b>This operator is used to group the data based\n                  on one or more fields and perform aggregation operations such\n                  as sum, average, count, etc.\n                </li>\n                <br />\n                <li>\n                  <b>$project:: </b>This operator is used to reshape the data by\n                  including or excluding fields from the output.\n                </li>\n                <br />\n                <li>\n                  <b>$sort: </b>This operator is used to sort the data based on\n                  one or more fields.\n                </li>\n                <br />\n                <li>\n                  <b>$limit: </b>\n                </li>\n                <li>\n                  <b>$skip:: </b>\n                </li>\n              </ul>\n              <br />\n              <br />\n              In SQL count(*) and with group by is an equivalent of mongodb\n              aggregation.\n              <br />\n              if you want to display a list stating how many tutorials are\n              written by each user, then you will use the following aggregate()\n              method -\n              <div style={titles}>\n                <PrismCode\n                  code={Aggregation}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>9. Pipeline Concept</h3>\n              Aggregation Framework : Is a set of analytics tools within mongodb\n              that allows to run various reports/ analysis on one/ more mongodb\n              collections.\n              <br />\n              <br />\n              <b>Aggregation Pipeline: </b>\n              <br />\n              <ul>\n                <li>Take Input from a single collection.</li>\n                <li>\n                  Pass the documents of the collection through one/ more stages.\n                </li>\n                <li>\n                  Each stage perform different operations in the Pipeline.\n                </li>\n                <li>\n                  Each stage take as Input whatever the stage before produced as\n                  Output. The Input and Output for all stages are documents\n                  (stream of documents).\n                </li>\n                <li>\n                  At the end of Pipeline we get access to the output of the\n                  transformed and aggregated Output.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={Pipeline}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(Intro);\n"]},"metadata":{},"sourceType":"module"}