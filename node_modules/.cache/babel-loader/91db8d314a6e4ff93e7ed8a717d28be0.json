{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic6.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst combine = `\nconst combine = function (n, k) {\n  const result = []\n  const aux = (index = 1, current = []) => {\n    if (current.length === k) {\n      result.push(current)\n      return\n    }\n    if (index > n) {\n      return\n    }\n    aux(index + 1, [...current, index])\n    aux(index + 1, current)\n  }\n  aux()\n  return result\n}\n\nconsole.log(combine(4,2))`.trim();\nconst sortedArrayToBST = `\nconst sortedArrayToBST = (nums = []) => {\n  const aux = (low, high) => {\n    if (low <= high) {\n      const middle = Math.floor((low + high) / 2)\n      const node = {\n        val: nums[middle],\n      }\n      node.left = aux(low, middle - 1)\n      node.right = aux(middle + 1, high)\n      return node\n    }\n    return null\n  }\n  return aux(0, nums.length - 1)\n}\n\nconsole.log(sortedArrayToBST([-10,-3,0,5,9]))`.trim();\nconst maxProfit = `\nconst maxProfit = function (prices) {\n  let max = 0\n  let minPrice = Infinity\n  for (const price of prices) {\n    minPrice = Math.min(price, minPrice)\n    max = Math.max(max, price - minPrice)\n  }\n  return max\n}\n\nconsole.log(maxProfit([7,1,5,3,6,4]))`.trim();\nconst isPalindrome = `\nconst isPalindrome = function (s) {\n  let newS = ''\n  for (const c of s) {\n    if (/[a-zA-Z0-9]/.test(c)) {\n      newS += c.toLowerCase()\n    }\n  }\n  for (let i = 0; i < Math.floor(newS.length / 2); i++) {\n    if (newS[i] !== newS[newS.length - 1 - i]) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(isPalindrome(\"A man, a plan, a canal: Panama\"))`.trim();\nconst partition = `\nconst partition = (s = '') => {\n  const isPalindrome = (left, right) => {\n    if (left === right) {\n      return true\n    }\n    for (let i = left; i <= right; i++) {\n      if (s[i] !== s[right - i + left]) {\n        return false\n      }\n    }\n    return true\n  }\n  const result = []\n  const aux = (index = 0, current = []) => {\n    if (index === s.length) {\n      result.push(current)\n    }\n    for (let i = index; i < s.length; i++) {\n      if (isPalindrome(index, i)) {\n        aux(i + 1, [...current, s.substring(index, i + 1)])\n      }\n    }\n  }\n  aux()\n  return result\n}\n\nconsole.log(partition(\"aab\"))`.trim();\nconst maxProduct = `\nconst maxProduct = (nums = []) => {\n  if (nums.length === 0) {\n    return 0\n  }\n  let prevMax = nums[0]\n  let prevMin = nums[0]\n  let max = nums[0]\n  for (let i = 1; i < nums.length; i++) {\n    const currentMax = Math.max(nums[i], prevMax * nums[i], prevMin * nums[i])\n    const currentMin = Math.min(nums[i], prevMax * nums[i], prevMin * nums[i])\n    prevMax = currentMax\n    prevMin = currentMin\n    if (prevMax > max) {\n      max = prevMax\n    }\n  }\n  return max\n}\n\n\nconsole.log(maxProduct([2,3,-2,4]))`.trim();\nconst findMissingRanges = `\nconst findMissingRanges = function (nums, lower, upper) {\n  const result = []\n  const count = (lo, hi) => hi - lo - 1\n  const set = (lo, hi) => {\n    if (count(lo, hi) === 1) {\n      result.push('$'{lo + 1}')\n    } else if (count(lo, hi) > 1) {\n      result.push('$'{lo + 1}->'$'{hi - 1}')\n    }\n  }\n  for (let i = 0; i <= nums.length; i++) {\n    set(\n      i === 0 ? lower - 1 : nums[i - 1],\n      i === nums.length ? upper + 1 : nums[i],\n    )\n  }\n  return result\n}\n\n\nconsole.log(findMissingRanges([1,2,3,-2,4]))`.trim();\n\nclass DSLogic6 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, \"1. Combinations\"), \"Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }), \"You may return the answer in any order.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }), \"Input: n = 4, k = 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }), \"Output: [\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }), \"[2,4],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), \"[3,4],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }), \"[2,3],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), \"[1,2],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), \"[1,3],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }), \"[1,4],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), \"]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }), \"Input: n = 1, k = 1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }), \"Output: [[1]]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: combine,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"2. Convert Sorted Array to Binary Search Tree.\"), \"Given an array where elements are sorted in ascending order, convert it to a height balanced BST.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }), \"For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }), \"Given the sorted array: [-10,-3,0,5,9]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }), \"One possible answer is: [0,-3,9,-10,null,5]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: sortedArrayToBST,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, \"3. Best Time to Buy and Sell Stock.\"), \"Say you have an array for which the ith element is the price of a given stock on day i.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }), \"If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }), \"Note that you cannot sell a stock before you buy one.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }), \"Input: [7,1,5,3,6,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }), \"Output: 5\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }), \"Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Not 7-1 = 6, as selling price needs to be larger than buying price.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maxProfit,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, \"4. Valid Palindrome.\"), \"Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }), \"Note: For the purpose of this problem, we define empty string as valid palindrome.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }), \"Input: \\\"A man, a plan, a canal: Panama\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }), \"Output: true\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }), \"Input: \\\"race a car\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }), \"Output: false\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isPalindrome,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, \"6. Palindrome Partitioning.\"), \"Input: \\\"aab\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }), \"Output: [\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }), \"[\\\"aa\\\",\\\"b\\\"],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }), \"[\\\"a\\\",\\\"a\\\",\\\"b\\\"] ]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: partition,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, \"8. Maximum Product Subarray.\"), \"Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }), \"Input: [2,3,-2,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }), \"Output: 6\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maxProduct,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(DSLogic6);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic6.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","combine","trim","sortedArrayToBST","maxProfit","isPalindrome","partition","maxProduct","findMissingRanges","DSLogic6","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst combine = `\nconst combine = function (n, k) {\n  const result = []\n  const aux = (index = 1, current = []) => {\n    if (current.length === k) {\n      result.push(current)\n      return\n    }\n    if (index > n) {\n      return\n    }\n    aux(index + 1, [...current, index])\n    aux(index + 1, current)\n  }\n  aux()\n  return result\n}\n\nconsole.log(combine(4,2))`.trim();\n\nconst sortedArrayToBST = `\nconst sortedArrayToBST = (nums = []) => {\n  const aux = (low, high) => {\n    if (low <= high) {\n      const middle = Math.floor((low + high) / 2)\n      const node = {\n        val: nums[middle],\n      }\n      node.left = aux(low, middle - 1)\n      node.right = aux(middle + 1, high)\n      return node\n    }\n    return null\n  }\n  return aux(0, nums.length - 1)\n}\n\nconsole.log(sortedArrayToBST([-10,-3,0,5,9]))`.trim();\n\nconst maxProfit = `\nconst maxProfit = function (prices) {\n  let max = 0\n  let minPrice = Infinity\n  for (const price of prices) {\n    minPrice = Math.min(price, minPrice)\n    max = Math.max(max, price - minPrice)\n  }\n  return max\n}\n\nconsole.log(maxProfit([7,1,5,3,6,4]))`.trim();\n\nconst isPalindrome = `\nconst isPalindrome = function (s) {\n  let newS = ''\n  for (const c of s) {\n    if (/[a-zA-Z0-9]/.test(c)) {\n      newS += c.toLowerCase()\n    }\n  }\n  for (let i = 0; i < Math.floor(newS.length / 2); i++) {\n    if (newS[i] !== newS[newS.length - 1 - i]) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(isPalindrome(\"A man, a plan, a canal: Panama\"))`.trim();\n\nconst partition = `\nconst partition = (s = '') => {\n  const isPalindrome = (left, right) => {\n    if (left === right) {\n      return true\n    }\n    for (let i = left; i <= right; i++) {\n      if (s[i] !== s[right - i + left]) {\n        return false\n      }\n    }\n    return true\n  }\n  const result = []\n  const aux = (index = 0, current = []) => {\n    if (index === s.length) {\n      result.push(current)\n    }\n    for (let i = index; i < s.length; i++) {\n      if (isPalindrome(index, i)) {\n        aux(i + 1, [...current, s.substring(index, i + 1)])\n      }\n    }\n  }\n  aux()\n  return result\n}\n\nconsole.log(partition(\"aab\"))`.trim();\n\nconst maxProduct = `\nconst maxProduct = (nums = []) => {\n  if (nums.length === 0) {\n    return 0\n  }\n  let prevMax = nums[0]\n  let prevMin = nums[0]\n  let max = nums[0]\n  for (let i = 1; i < nums.length; i++) {\n    const currentMax = Math.max(nums[i], prevMax * nums[i], prevMin * nums[i])\n    const currentMin = Math.min(nums[i], prevMax * nums[i], prevMin * nums[i])\n    prevMax = currentMax\n    prevMin = currentMin\n    if (prevMax > max) {\n      max = prevMax\n    }\n  }\n  return max\n}\n\n\nconsole.log(maxProduct([2,3,-2,4]))`.trim();\n\nconst findMissingRanges = `\nconst findMissingRanges = function (nums, lower, upper) {\n  const result = []\n  const count = (lo, hi) => hi - lo - 1\n  const set = (lo, hi) => {\n    if (count(lo, hi) === 1) {\n      result.push('$'{lo + 1}')\n    } else if (count(lo, hi) > 1) {\n      result.push('$'{lo + 1}->'$'{hi - 1}')\n    }\n  }\n  for (let i = 0; i <= nums.length; i++) {\n    set(\n      i === 0 ? lower - 1 : nums[i - 1],\n      i === nums.length ? upper + 1 : nums[i],\n    )\n  }\n  return result\n}\n\n\nconsole.log(findMissingRanges([1,2,3,-2,4]))`.trim();\n\n\n\n\nclass DSLogic6 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Combinations</h3>\n              Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.\n              <br/>\nYou may return the answer in any order.<br/><br/>\nExample 1:<br/>\n\nInput: n = 4, k = 2<br/>\nOutput:\n[<br/>\n  [2,4],<br/>\n  [3,4],<br/>\n  [2,3],<br/>\n  [1,2],<br/>\n  [1,3],<br/>\n  [1,4],<br/>\n]<br/><br/>\nExample 2:<br/>\n\nInput: n = 1, k = 1<br/>\nOutput: [[1]]\n              <div style={titles}>\n                <PrismCode\n                  code={combine}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>2. Convert Sorted Array to Binary Search Tree.</h3>\n              Given an array where elements are sorted in ascending order, convert it to a height balanced BST.\n              <br/>\nFor this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\n<br/><br/>\nGiven the sorted array: [-10,-3,0,5,9]<br/>\nOne possible answer is: [0,-3,9,-10,null,5]\n              <div style={titles}>\n                <PrismCode\n                  code={sortedArrayToBST}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>3. Best Time to Buy and Sell Stock.</h3>\n              Say you have an array for which the ith element is the price of a given stock on day i.\n              <br/>\nIf you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.\n<br/>\nNote that you cannot sell a stock before you buy one.<br/><br/>\nInput: [7,1,5,3,6,4]<br/>\nOutput: 5<br/>\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n             Not 7-1 = 6, as selling price needs to be larger than buying price.\n              <div style={titles}>\n                <PrismCode\n                  code={maxProfit}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>4. Valid Palindrome.</h3>\n              Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n              <br/>\nNote: For the purpose of this problem, we define empty string as valid palindrome.\n<br/><br/>\nExample 1:<br/>\n\nInput: \"A man, a plan, a canal: Panama\"<br/>\nOutput: true<br/><br/>\nExample 2:<br/>\n\nInput: \"race a car\"<br/>\nOutput: false\n              <div style={titles}>\n                <PrismCode\n                  code={isPalindrome}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>6. Palindrome Partitioning.</h3>\n              Input: \"aab\"<br/><br/>\nOutput:\n[<br/>\n  [\"aa\",\"b\"],<br/>\n  [\"a\",\"a\",\"b\"]\n]\n              <div style={titles}>\n                <PrismCode\n                  code={partition}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>8. Maximum Product Subarray.</h3>\n              Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.\n              <br/>\n              Input: [2,3,-2,4]<br/>\nOutput: 6\n              <div style={titles}>\n                <PrismCode\n                  code={maxProduct}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n             \n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic6));\n"]},"metadata":{},"sourceType":"module"}