{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/css/cssbasics.js\";\nimport React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport \"../ReactJs/styles.css\";\nimport Sidebar from \"./sidebar\";\nimport PrismCode from \"../ReactJs/prismCode\";\nimport Browser from \"../../assets/css1.PNG\";\nimport boxModels from \"../../assets/boxings.png\";\nconst titles = {\n  backgroundColor: \"#F0F8FF\",\n  padding: \"1px\",\n  fontSize: \"16px\"\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst flextFloat = `\n.container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 200px;\n}\n\n.item {\n  background-color: #eee;\n  padding: 20px;\n  text-align: center;\n  font-size: 30px;\n  margin: 10px;\n}\n\n\n//app.html\n<div class=\"container\">\n  <div class=\"item\">1</div>\n  <div class=\"item\">2</div>\n  <div class=\"item\">3</div>\n</div>\n`.trim();\nconst floatele = `\n* {\n  padding: 0;\n  margin: 0/ auto;\n  bottom: 0;\n  right: 0;\n}\n\n.img1, .img2, .img3, .img4{\n  width:30%;\n  max-width: 500px;\n  height:100px;\n  border: 2px solid red;\n  opacity: 0.5;\n}\n\n\ndiv{\n  outline: 2px solid red;\n  float:left/ none/ inherit;\n  clear: left / both;\n  display: flex/ grid/ block/ inline/ table;\n  flex-grow: 3;                                              \n  flex-shrink: 2;\n  flex-direction: row/ column/ row-reverse/ column-reverse; \n  flex-wrap: wrap/ rap-reverse;\n  flex-flow:row-reverse wrap;\n  justify-content: center/ space-between/ space-evenly/ space-around;\n  align-items: center/ flex-end/ stretch;\n  grid-template-columns: 2fr 5fr 2fr 1fr;                               \n  grid-template-rows: 1fr 3fr;\n  grid-auto-flow: 2fr 5fr;\n  grid-gap: 1rem;\n  grid-column: 1 / span 2;\n  grid-row: 2 / span 3;\n  background-color: blue;\n  position: static/ relative/ absolute/ inline/ fixed / sticky;\n  \n}\n`.trim();\nconst psudoele = `\n.link::before {\n  content: \"\\f067\";\n  font-family: FontAwesome;\n  margin-right: 5px;\n}\n\n//app.html\n<a href=\"#\" class=\"link\">Click me!</a>\n`.trim();\nconst pseudoclas = `\na:link {\n  color: red;\n \n}\n\n//visited link \na:visited {\n  color: green;\n}\n\n//mouse over link \na:hover {\n  color: hotpink;\n}\n\n//selected link \na:active {\n  color: blue;\n}\n`.trim();\nconst table_layout = `table-layout: auto|fixed|initial|inherit;`.trim();\nconst sass = `\n//sass\n$color: red\n\n=my-border($color)\n  border: 1px solid $color\n\nbody\n  background: $color\n  +my-border(green)\n  \n  \n//.scss\n$color: red;\n\n@mixin my-border($color) {\n  border: 1px solid $color;\n}\n\nbody {\n  background: $color;\n  @include my-border(green);\n}\n`.trim();\nconst website = `\n@media (min-width: 601px) {\n  .my-class {\n    font-size: 24px;\n  }\n}\n\n.my-class {\n  font-size: 12px;\n}\n`.trim();\nconst elements = `\ndiv, p - Selects all <div> elements and all <p> elements\ndiv p - Selects all <p> elements that are anywhere inside a <div> element\ndiv > p - Selects all <p> elements where the immediate parent is a <div> element\ndiv + p - Selects all <p> elements that are placed immediately after a <div> element\ndiv ~ p - Selects all <p> elements that are anywhere preceded by a <div> element\n\n.div, p{\n  outline:2px solid pink;\n  padding: 10px;\n  word-spacing: 20px;\n}\n`.trim();\nconst meaning = `\ncm - centimeters\nem - elements (i.e., relative to the font-size of the element; e.g., 2 em means 2 times the current font size)\nin - inches\nmm - millimeters\npc - picas (1 pc = 12 pt = 1/6th of an inch)\npt - points (1 pt = 1/72nd of an inch)\npx - pixels (1 px = 1/96th of an inch)\n\n.vh{\n  width: 20vw; \n  height: 30vh;\n  font-size: 100px;\n  font-size: 100pt;\n  font-size: 2.5em;\n  font-size: 100%;\n  font-size: 2pc;\n  font-size: 2cm;\n  font-size: 2mm; \n  font-size: 2in;\n}\n`.trim();\nconst importants = `\n.imp{\n  outline:2px solid pink;\n  outline: 2px solid red !important;\n}\n`.trim();\nconst inlinestyles = `\n//  display: block/ inline/ inline-block; \n\n.container {\n  text-align: center;\n}\n\n.box {\n  display: inline-block;\n  width: 100px;\n  margin: 10px;\n  background-color: #f2f2f2;\n}\n\n\n//app.html\n<div class=\"container\">\n  <div class=\"box\"></div>\n  <div class=\"box\"></div>\n  <div class=\"box\"></div>\n</div>\n  \n`.trim();\nconst relativestyles = `\n.static {\n  position: static/ relative/ fixed/ absolute/ sticky;\n}\n`.trim();\nconst backgroundImg = `\nbackground-image: url(\"bgdesert.jpg\");\nbackground-repeat: repeat-x/ no-repeat;\nbackground-position: right top;\nbackground-attachment: fixed / scroll;\nbackground: #ffffff url(\"img_tree.png\") no-repeat right top;\n\nborder-style: solid;\nborder-width: 5px;\nborder-color: blue;\nborder-bottom-style: dotted;\nborder-radius: 5px;\n\nmax-width: 500px;\noutline-style: dotted;\noutline-width: thin;\noutline-color: red;\noutline-offset: 15px;\n`.trim();\nconst hiddenStyles = `\nh1.hidden {\n  display: none;\n  visibility: hidden;\n}\n`.trim();\nconst boxModel = `\npadding: 25px  50px   75px   100px;                                  //top   right  bottom left. \npadding: 25px 50px;                            //top/bottom padding 25px; right/left padding 50px.\n\ncolor: blue;\ntext-align: center / left / right / justify;\nvertical-align: baseline / text-top / text-bottom / sub / super;\ntext-decoration: none / overline / line-through / underline;\ntext-transform: uppercase / lowercase / capitalize;\ntext-indent: 50px;\nletter-spacing: 5px;\nline-height: 0.8;\nword-spacing: 10px;\nwhite-space: nowrap;\n\ntext-shadow: 2px 2px;\nfont-family: 'Montserrat';\nfont-style: normal;\nfont-weight: bold/ 900;\nfont-variant: small-caps;\nfont-size: 1.875em;\n\nz-index: -1 / 1 / 3;\n\noverflow: visible / hidden / scroll / auto;\noverflow-y: scroll; \n`.trim();\nconst supports = `\n@supports (display: grid) {\n\tdiv {\n\t\tdisplay: grid;\n\t}\n}\n`.trim();\nconst counters = `\nbody {\n  counter-reset: category;\n}\n\nh1 {\n  counter-reset: section;\n  counter-increment: category;\n}\n\nh2 {\n  counter-increment: section;\n}\n\nh1:before {\n  content: counter(category) \". \";\n}\n\nh2:before {\n  content: counter(category) \".\" counter(section) \" \";\n}\n\n\n//app.html\n<body>\n  <h1>Category 1</h1>\n  <h2>Section 1.1</h2>\n  <p>Content here</p>\n  <h2>Section 1.2</h2>\n  <p>Content here</p>\n  <h1>Category 2</h1>\n  <h2>Section 2.1</h2>\n  <p>Content here</p>\n  <h2>Section 2.2</h2>\n  <p>Content here</p>\n</body>\n\n`.trim();\nconst nthchild = `\nul li:nth-child(2) {\n  color: red;\n}\n\n//nth-of-type()\nul li:nth-of-type(2) {\n  color: green;\n}\n\n//app.css\n<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n  <li>Item 4</li>\n</ul>\n`.trim();\nconst tweening = `\np {\n  animation-duration: 2s;\n  animation-name: slidethrough;\n}\n\n@keyframes slidethrough {\n  from {\n    margin-left: 100%;\n    width: 300%; \n  }\n\n  to {\n    margin-left: 0%;\n    width: 100%;\n  }\n}\n`.trim();\nconst defoultcss = `\np {\n  color: initial;\n}\n`.trim();\nconst sprites = `\n.sprites {\n  width: 200px;\n  background-image: url(\"abc.png\");\n  background-position: 0px -200px;  //second image start after 200px. initials 200px occupied by first image\n}\n`.trim();\nconst gridspace = `\n//display\nValues:\n\tgrid – generates a block-level grid\n\tinline-grid – generates an inline-level grid\n\n\t.container {\n      display: grid | inline-grid;\n      }\n\n      \n//grid-template-rows:\n.container {\n  grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];\n  grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];\n}\n\n\n//Note that a line can have more than one name. For example, here the second line will have \n//two names: row1-end and row2-start:\n.container {\n  grid-template-rows: [row1-start] 25% [row1-end row2-start] 25% [row2-end];\n}\n\n\n//If your definition contains repeating parts, you can use the repeat() notation to streamline things:\n.container {\n  grid-template-columns: repeat(3, 20px [col-start]);\n\n \tWhich is equivalent to this\n  grid-template-columns: 20px [col-start] 20px [col-start] 20px [col-start];\n}\n\n\n//If multiple lines share the same name, they can be referenced by their line name and count\n.item {\n  grid-column-start: col-start 2;\n}.\n\n\n//grid-template-areas\n.item-a {\n  grid-area: header;\n}\n.item-b {\n  grid-area: main;\n}\n.item-c {\n  grid-area: sidebar;\n}\n.item-d {\n  grid-area: footer;\n}\n\n\n.container {\n  display: grid;\n  grid-template-columns: 50px 50px 50px 50px;\n  grid-template-rows: auto;\n  grid-template-areas:\n    \"header header header header\"\n    \"main main . sidebar\"\n    \"footer footer footer footer\";\n}\n`.trim();\nconst gridtemplates = `\n//\n.container {\n  grid-template: none | grid-template-rows / grid-template-columns;\n}\n\n\n//Specifies the size of the grid lines. Setting the width of the gutters between the columns/rows\n.container {\n\tcolumn-gap: 15px 10px;\n\trow-gap: 15px 10px;\n\tgrid-column-gap: 15px 10px;\n\tGrid-row-gap: 15px 10px;\n    }\n\n//A shorthand for row-gap and column-gap.\n//If no row-gap is specified, it’s set to the same value as column-gap.\n.container {\n  gap: 15px 10px;\n}\n`.trim();\nconst judtifyItems = `\n.container {\n  align-items: start | end | center | stretch;\n}\n`.trim();\nconst justifycontain = `\n.container {\n  justify-content: start | end | center | stretch | space-around | space-between | space-evenly;    \n}\n\n\n//\n.container {\n  grid-auto-flow: row | column | row dense | column dense;\n}\n`.trim();\nconst propertieschilds = `\n.item-a {\n  grid-column-start: 2;\n  grid-column-end: five;\n  grid-row-start: row1-start;\n  grid-row-end: 3;\n}\n\n//justify-self\n.item {\n  justify-self: start | end | center | stretch;\n}\n\n//align-self\n.item {\n  align-self: start | end | center | stretch;\n}\n`.trim();\nconst selectors = `\nChild selectors: ul > li\n\ntargets all list items that are direct children of unordered lists\n`.trim();\nconst horizontallycss = `\n<div class=\"container\">\n    <div class=\"element\">Center me!</div>\n</div>\n\n\n//css\n.container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n}\n\n.element {\n  width: 200px;\n  height: 200px;\n  background-color: red;\n  color: white;\n  text-align: center;\n  line-height: 200px;\n}\n`.trim();\nconst horizontallycss2 = `\n<div class=\"container\">\n    <div class=\"element\">Center me!</div>\n</div>\n\n\n//css\n.container {\n  position: relative;\n  height: 100vh;\n}\n\n.element {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 200px;\n  height: 200px;\n  background-color: red;\n  text-align: center;\n  line-height: 200px;\n}\n`.trim();\nconst horizontallycss3 = ``.trim();\n\nclass CssBasics extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593\n      },\n      __self: this\n    }, \"1. How does CSS actually work (under the hood of browser)?\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    }, \"CSS is a style sheet language used for describing the presentation of web pages. It is used to style and layout HTML elements on a web page.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603\n      },\n      __self: this\n    }, \"When a web page is loaded in a browser, the browser parses the HTML and CSS code to create the Document Object Model and the CSS Object Model (CSSOM) respectively. The DOM represents the structure of the web page, while the CSSOM represents the styles applied to the elements on the web page.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611\n      },\n      __self: this\n    }, \"After the DOM and CSSOM are created, the browser uses them to calculate the layout of the web page, a process known as the render tree. The render tree is a visual representation of the web page, showing how each element is positioned and styled relative to other elements.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619\n      },\n      __self: this\n    }, \"During the rendering process, the browser applies the CSS styles to the corresponding elements in the render tree. It does this by computing the computed style of each element, which is the final style that will be applied to the element. The computed style takes into account the styles specified in the style sheet, as well as any styles inherited from parent elements, and any styles applied by user-agent stylesheets\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629\n      },\n      __self: this\n    }, \"Once the computed styles have been determined, the browser uses them to render the web page on the user's screen. This involves drawing each element in its correct position and with the correct styles applied.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 635\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636\n      },\n      __self: this\n    }, \"Overall, the process of rendering a web page with CSS involves parsing the CSS code, computing the computed styles of each element, and using these styles to lay out and render the web page.\")), React.createElement(\"img\", {\n      src: Browser,\n      alt: \"\",\n      className: \"responsive\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 643\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646\n      },\n      __self: this\n    }, \"2. There are a number of benefits of CSS, including\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 649\n      },\n      __self: this\n    }, \"Faster Page Speed: \"), \"More code means slower page speed. And CSS enables us to use less code. CSS allows to use one CSS rule and apply it to all occurrences of a certain tag within an HTML document.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    }, \"Better User Experience: \"), \"It allows for user-friendly formatting. When buttons and text are in logical places and well organized, user experience improves.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662\n      },\n      __self: this\n    }, \"Responsive Design: \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666\n      },\n      __self: this\n    }, \"Improved Performance: \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670\n      },\n      __self: this\n    }, \"Easy Formatting Changes: \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674\n      },\n      __self: this\n    }, \"Compatibility Across Devices: \"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679\n      },\n      __self: this\n    }, \"4. Explain the basic rules of CSS Specificity\"), \"Specificity determines which rules will take precedence.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681\n      },\n      __self: this\n    }), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683\n      },\n      __self: this\n    }, \"CSS style applied by referencing external stylesheet has lowest precedence and is overridden by Internal and inline CSS.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688\n      },\n      __self: this\n    }, \"Internal CSS is overridden by inline CSS.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689\n      },\n      __self: this\n    }, \"Inline CSS has highest priority and overrides all other selectors.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 693\n      },\n      __self: this\n    }, \"ID selectors have a higher specificity than attribute selectors.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 697\n      },\n      __self: this\n    }, \"A class selector beats any number of element selectors.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698\n      },\n      __self: this\n    }, \"Universal selector (*) has no specificity.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701\n      },\n      __self: this\n    }, \"5. How do you specify units in the CSS?. What are the different ways to do it?\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705\n      },\n      __self: this\n    }, \"What is VH/VW (viewport height/ viewport width) in CSS?\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 706\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 707\n      },\n      __self: this\n    }, \"It\\u2019s a CSS unit used to measure the height and width in percentage w.r.t viewport. It is used mainly in responsive design techniques.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711\n      },\n      __self: this\n    }), \" VH = 1/100 of the height of the viewport.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 713\n      },\n      __self: this\n    }, \"If the height of the browser is 1000px, 1vh = 10px. Similarly, if the width is 1000px, then 1vw = 10px.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 718\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 719\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: meaning,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 720\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 726\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 727\n      },\n      __self: this\n    }, \"6. What are the different types of Selectors in CSS?\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 728\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 729\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 730\n      },\n      __self: this\n    }, \"Universal Selector: \"), \"Selecting all elements on a page.\", \" \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 733\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734\n      },\n      __self: this\n    }, \"Type selectors: \"), \"These selectors target elements based on their tag name. For example, p targets all paragraph elements on a page.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 738\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 739\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 740\n      },\n      __self: this\n    }, \"Class selectors: \"), \"These selectors target elements based on their class attribute. For example, .my-class targets all elements with a class of \\\"my-class\\\"\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 744\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 745\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746\n      },\n      __self: this\n    }, \"ID selectors: \"), \"These selectors target elements based on their ID attribute. For example, #my-id targets the element with an ID of \\\"my-id\\\".\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 750\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 751\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 752\n      },\n      __self: this\n    }, \"Attribute selectors: \"), \"These selectors target elements based on their attribute values. For example, [href] targets all elements with an href attribute.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 756\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 757\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 758\n      },\n      __self: this\n    }, \"Descendant selectors: \"), \"These selectors target elements that are descendants of another element. For example, ul li targets all list items that are descendants of unordered lists.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 763\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 764\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 765\n      },\n      __self: this\n    }, \"Child selectors: \"), \"These selectors target elements that are direct children of another element.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 768\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 769\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 770\n      },\n      __self: this\n    }, \"Adjacent sibling selectors: \"), \"These selectors target elements that come immediately after another element. For example, h2 + p targets the first paragraph that comes immediately after an h2 element.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 775\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 776\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 777\n      },\n      __self: this\n    }, \"General sibling selectors: \"), \"These selectors target elements that come after another element. For example, h2 ~ p targets all paragraphs that come after an h2 element.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 782\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: selectors,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 783\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 789\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 790\n      },\n      __self: this\n    }, \"7. Explain what elements will match each of the following CSS selectors\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 794\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: elements,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 795\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 801\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 802\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 803\n      },\n      __self: this\n    }, \"9. What does !important mean in CSS?\"), \"The important will have the highest precedence and it overrides the cascaded property.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 806\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: importants,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 807\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 813\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 814\n      },\n      __self: this\n    }, \"10. Can you name the four types of @media properties?\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 815\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 816\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 817\n      },\n      __self: this\n    }, \"All: \"), \"It\\u2019s the default property. Used for all media-type devices.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 820\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 821\n      },\n      __self: this\n    }, \"Screen: \"), \"Used for computer screen, mobile screen.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 823\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 824\n      },\n      __self: this\n    }, \"Print: \"), \"Used for printers.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 826\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 827\n      },\n      __self: this\n    }, \"Speech: \"), \"Used for screen readers.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 830\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 831\n      },\n      __self: this\n    }, \"12. What are the limitations of CSS?\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 832\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 833\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 834\n      },\n      __self: this\n    }, \"Browser Compatibility: \"), \"Some style selectors are supported and some are not. We have to determine which style is supported or not using the @support selector.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 838\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 839\n      },\n      __self: this\n    }, \"Cross Browser issue: \"), \"Some selectors behave differently in a different browser\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 842\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 843\n      },\n      __self: this\n    }, \"There is no parent selector: \"), \"Currently, Using CSS, we can\\u2019t select a parent tag.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 847\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 848\n      },\n      __self: this\n    }, \"13. Difference between coding a website to be responsive versus using a mobile-first strategy?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 852\n      },\n      __self: this\n    }, \"Making a website responsive means the some elements will respond by adapting its size or other functionality according to the device's screen size.\"), \"A mobile-first strategy has 2 main advantages:\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 858\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 859\n      },\n      __self: this\n    }, \"It's more performant on mobile devices, since all the rules applied for them don't have to be validated against any media queries.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 864\n      },\n      __self: this\n    }, \"It forces to write cleaner code in respect to responsive CSS rules.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 869\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 870\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: website,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 871\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 877\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 878\n      },\n      __self: this\n    }, \"14. What are the differences between adaptive design and responsive design?\"), \"Both responsive and adaptive design attempt to optimize the user experience across different devices, adjusting for different viewport sizes, resolutions, usage contexts, control mechanisms, and so on.\", React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 886\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 887\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 888\n      },\n      __self: this\n    }, \"Property\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 889\n      },\n      __self: this\n    }, \"Adaptive Design\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 890\n      },\n      __self: this\n    }, \"Responsive Design\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 892\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 893\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 894\n      },\n      __self: this\n    }, \"Flexible vs. fixed layouts: \")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 896\n      },\n      __self: this\n    }, \"Uses fixed layouts that are designed for specific screen sizes and device types.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 900\n      },\n      __self: this\n    }, \"Responsive design uses fluid grids and flexible images to create a layout that adapts to different screen sizes.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 905\n      },\n      __self: this\n    }), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 906\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 907\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 908\n      },\n      __self: this\n    }, \"Breakpoints: \")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 910\n      },\n      __self: this\n    }, \"Adaptive design uses predefined layouts for specific screen sizes, and switches between them based on the device type.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 914\n      },\n      __self: this\n    }, \"Responsive design uses breakpoints to determine when the layout should change, based on the width of the screen.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 919\n      },\n      __self: this\n    }), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 920\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 921\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 922\n      },\n      __self: this\n    }, \"Complexity: \")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 924\n      },\n      __self: this\n    }, \"Adaptive design is often simpler to implement, as it involves designing specific layouts for specific devices.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 928\n      },\n      __self: this\n    }, \"Responsive design can be more complex than adaptive design, as it requires careful planning and testing to ensure that the layout works well across a range of devices.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 934\n      },\n      __self: this\n    }), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 935\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 936\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 937\n      },\n      __self: this\n    }, \"Speed: \")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 939\n      },\n      __self: this\n    }, \"Adaptive design can be faster than responsive design, as it only needs to load the layout that is designed for the specific device being used.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 944\n      },\n      __self: this\n    }, \"Responsive design may require more code and resources to load, as it has to handle a wider range of screen sizes and device types.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 951\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 952\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 953\n      },\n      __self: this\n    }, \"In summary, responsive design uses flexible layouts and adapts to different screen sizes using breakpoints, while adaptive design uses fixed layouts designed for specific screen sizes and device types. Responsive design can be more complex but provides more flexibility, while adaptive design can be simpler and faster, but provides less flexibility.\", \" \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 961\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 962\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 963\n      },\n      __self: this\n    }, \"15. How to determine if the browser supports a certain feature?\"), \"The \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 966\n      },\n      __self: this\n    }, \"@support\"), \" in CSS use to scan if the current browser has support for a certain feature.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 968\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: supports,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 969\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 975\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 976\n      },\n      __self: this\n    }, \"16. What is progressive rendering? How do you implement progressive rendering in the website?. What are the advantages of it?\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 981\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 982\n      },\n      __self: this\n    }, \"Techniques used to improve the performance of a webpage to render content for display as quickly as possible.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 986\n      },\n      __self: this\n    }, \"We can implement the progressive rendering of the page by loading the lazy loading of the images. We can use Intersection Observer API to lazy load the image. The API makes it simple to detect when an element the viewport and take an action when it does. Once the image enters the viewport, we will start loading the images.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 995\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 996\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 997\n      },\n      __self: this\n    }, \"The advantages of progressive rendering are: \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 998\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 999\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1000\n      },\n      __self: this\n    }, \"Improved perceived performance\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1001\n      },\n      __self: this\n    }, \"Better user experience\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1002\n      },\n      __self: this\n    }, \"Optimized for slower connections\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1004\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1005\n      },\n      __self: this\n    }, \"Overall, progressive rendering is a powerful technique for improving website performance and user experience, especially in situations where slow loading times are a concern.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1010\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1011\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1012\n      },\n      __self: this\n    }, \"17. How will you fix browser-specific styling issues?\"), \"Browser-specific styling issues can occur when the same code renders differently on different web browsers, which can result in inconsistent user experiences. To fix browser-specific styling issues, you can follow these steps:\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1017\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1018\n      },\n      __self: this\n    }, \"Identify the specific browser(s) that are causing the issue. You can use browser developer tools to inspect the code and see how it is being rendered on different browsers.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1023\n      },\n      __self: this\n    }, \"Test the changes on different browsers and devices to ensure that the issue has been resolved and that the styling is consistent across all platforms.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1028\n      },\n      __self: this\n    }, \"Consider using a CSS preprocessor like Sass or Less, which can automatically generate vendor prefixes for you based on the properties you use in your code.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1034\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1035\n      },\n      __self: this\n    }, \"Overall, fixing browser-specific styling issues requires careful testing, attention to detail, and a good understanding of how different web browsers handle CSS code. By using vendor prefixes and feature detection, you can ensure that your website looks consistent and performs well across all platforms.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1042\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1043\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1044\n      },\n      __self: this\n    }, \"18. What is the difference between inline, inline-block, and block?\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1048\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1049\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1050\n      },\n      __self: this\n    }, \"Block Element: \"), \"Always start on a new line. They will also take space for an entire row/ width.\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1052\n      },\n      __self: this\n    }, \" Ex. \"), \"div, p.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1054\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1055\n      },\n      __self: this\n    }, \"Inline Elements: \"), \"Don't start on a new line, they appear on the same line as the content and tags beside them.\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1057\n      },\n      __self: this\n    }, \"Ex. \"), \" span , strong, and img tags.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1059\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1060\n      },\n      __self: this\n    }, \"Inline Block Elements: \"), \"Inline block elements are elements that behave like inline elements in terms of how they flow within a line of text, but can also have a fixed width and height like block elements.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1066\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: inlinestyles,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1067\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1073\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1074\n      },\n      __self: this\n    }, \"By using inline block elements, you can create flexible, responsive layouts that flow like text but also have a fixed size and shape.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1079\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1080\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1081\n      },\n      __self: this\n    }, \"19. What's the difference between a relative, fixed, absolute and statically positioned element?\"), \"A positioned element is an element whose computed position property is either relative, absolute, fixed or static.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1087\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1088\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1089\n      },\n      __self: this\n    }, \"Static positioning -\"), \" It default position. the element will flow into the page as it normally would. The top, right, bottom, left and z-index properties do not apply.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1093\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1094\n      },\n      __self: this\n    }, \"Relative positioning -\"), \" The element's position is adjusted relative to itself, without changing layout.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1096\n      },\n      __self: this\n    }), \"The top, right, bottom, and left properties can be used to adjust the position of the element.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1100\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1101\n      },\n      __self: this\n    }, \"Absolute positioning -\"), \" The element is removed from the flow of the page and positioned at a specified position relative to its closest positioned ancestor if any, or otherwise relative to the initial containing block. Absolutely positioned boxes can have margins, and they do not collapse with any other margins. These elements do not affect the position of other elements.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1109\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1110\n      },\n      __self: this\n    }, \"Fixed positioning -\"), \" The element is removed from the flow of the page and positioned at a specified position relative to the viewport and doesn't move when scrolled.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1115\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: relativestyles,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1116\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1122\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1123\n      },\n      __self: this\n    }, \"20. Background-Image\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1124\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: backgroundImg,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1125\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1131\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1132\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1133\n      },\n      __self: this\n    }, \"22. What is a z-index, how does it function?\"), \"z-index is used for specifying the vertical stacking of the overlapping elements that occur at the time of its positioning.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1136\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1137\n      },\n      __self: this\n    }), \"The default value of this property is 0 and can be either positive or negative. Apart from 0, the values of the z-index can be:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1140\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1141\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1142\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1143\n      },\n      __self: this\n    }, \"Auto: \"), \"The stack order will be set equal to the parent.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1145\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1146\n      },\n      __self: this\n    }, \"Number: \"), \"The number can be positive or negative. It defines the stack order.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1149\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1150\n      },\n      __self: this\n    }, \"Initial: \"), \"The default value of 0 is set to the property.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1152\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1153\n      },\n      __self: this\n    }, \"Inherit: \"), \"The properties are inherited from the parent.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1156\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1157\n      },\n      __self: this\n    }, \"23. What are the different ways to hide the element using CSS?\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1160\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1161\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1162\n      },\n      __self: this\n    }, \"display: none: \"), \"It\\u2019s not available for screen readers. The element will not exist in the DOM if \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1163\n      },\n      __self: this\n    }, \"display: none\"), \" \", \"is used.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1166\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1167\n      },\n      __self: this\n    }, \"visibility: hidden: \"), \"Will take up the space of the element. It will be available to screen reader users. The element will actually be present in the DOM, but not shown on the screen.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1172\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1173\n      },\n      __self: this\n    }, \"position: absolute: \"), \"Make it available outside the screen.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1177\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: hiddenStyles,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1178\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1184\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1185\n      },\n      __self: this\n    }, \"24. How does this property work overflow: hidden?\"), \"The CSS overflow: hidden property is used to hide any content that overflows the bounds of its container. Means if an element's content is larger than its specified width and height, any overflow will be hidden and not visible on the web page.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1190\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1191\n      },\n      __self: this\n    }), \"The overflow property:\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1193\n      },\n      __self: this\n    }, \"hidden, visible, scroll, auto\"), \".\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1194\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1195\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1196\n      },\n      __self: this\n    }, \"25. How do I restore the default value of a property?\"), \"initial keyword used to reset css default value.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1198\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1199\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1200\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: defoultcss,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1201\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1207\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1208\n      },\n      __self: this\n    }, \"26. When does DOM reflow occur?\"), \"DOM reflow, also known as layout or re-rendering, occurs when there is a change to the structure or layout of a web page. Whenever there is a change to the DOM of a web page, the browser must recalculate the positions and sizes of all elements in the page to update the layout accordingly.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1214\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1215\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1216\n      },\n      __self: this\n    }, \"Reflow occurs when:\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1217\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1218\n      },\n      __self: this\n    }, \"Insert, remove or update an element in the DOM.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1219\n      },\n      __self: this\n    }, \"Modify content on the page, e.g. the text in an input box.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1222\n      },\n      __self: this\n    }, \"Changing the font size or style of text on the page.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1223\n      },\n      __self: this\n    }, \"Resizing the browser window.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1225\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1226\n      },\n      __self: this\n    }, \"27. Is there any reason you'd want to use translate() instead of absolute positioning.\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1230\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1231\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1232\n      },\n      __self: this\n    }, \"Performance: \"), \"translate() is a CSS transform that can be hardware accelerated by the browser, which means it can be faster and smoother than using absolute positioning for certain types of animations or transitions.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1237\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1238\n      },\n      __self: this\n    }, \"Maintain layout: \"), \" When you use absolute positioning, the element is removed from the normal document flow, which means other elements on the page may shift around to fill the space left by the positioned element. Using translate() allows the element to remain in its original position in the document flow, which can help maintain the layout of the page.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1245\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1246\n      },\n      __self: this\n    }, \"Responsive design: \"), \"translate() can be more responsive than absolute positioning when it comes to adapting to different screen sizes or device orientations. When you use translate(), the element's position is relative to its original position, which means it can adjust more easily to changes in screen size or orientation.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1254\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1255\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1256\n      },\n      __self: this\n    }, \"28. Difference between reset vs normalize CSS?. How do they differ?\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1260\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1261\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1262\n      },\n      __self: this\n    }, \"Reset CSS: \"), \"CSS resets aim to remove all built-in browser styling. \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1263\n      },\n      __self: this\n    }, \"Ex. \"), \" margins, paddings, font-sizes of all elements are reset to be the same.\", \" \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1266\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1267\n      },\n      __self: this\n    }, \"Normalize CSS: \"), \"Aims to make built-in browser styling consistent across browsers. It also corrects bugs for common browser dependencies.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1272\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1273\n      },\n      __self: this\n    }, \"29. What do you have to do to automatically number the heading values of sections and categories?\"), \"To automatically number the heading values of sections and categories in a web page, you can use CSS counters.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1279\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1280\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: counters,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1281\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1287\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1288\n      },\n      __self: this\n    }, \"30. How is the nth-child() different from nth of type selectors?\"), \"Both are pseudo-classes. Both used to select elements based on their position within a parent element. However, they differ in the way they count the child elements and the type of element they select.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1295\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1296\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1297\n      },\n      __self: this\n    }, \"nth-child(): \"), \"This selector selects the nth child element of a parent, regardless of its type. It counts all child elements, including text nodes and other non-element nodes.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1302\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1303\n      },\n      __self: this\n    }, \"nth-of-type(): \"), \"This selector selects the nth child element of a parent, based on its element type. It counts only elements of the same type, ignoring any text nodes or other non-element nodes.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1309\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: nthchild,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1310\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1316\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1317\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1318\n      },\n      __self: this\n    }, \"33. What is the box model in CSS, and how does it work.\"), \"The box model is a core concept in CSS that describes how elements are laid out on a web page. Every HTML element on a page is represented as a rectangular box, which consists of four parts:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1322\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1323\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1324\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1325\n      },\n      __self: this\n    }, \"Content: \"), \"This is the actual content of the element, such as text or images.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1328\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1329\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1330\n      },\n      __self: this\n    }, \"Padding: \"), \"This is the space between the content and the edge of the element. Padding can be added to any or all of the four sides of the content box.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1334\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1335\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1336\n      },\n      __self: this\n    }, \"Border: \"), \"This is a line that surrounds the padding and the content of the element. Borders can be styled with different colors, widths, and styles.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1340\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1341\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1342\n      },\n      __self: this\n    }, \"Margin: \"), \"This is the space between the border of the element and the next element on the page. Margins can be added to any or all of the four sides of the border box.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1346\n      },\n      __self: this\n    })), React.createElement(\"img\", {\n      src: boxModels,\n      alt: \"\",\n      className: \"responsive\",\n      style: {\n        width: \"400px\",\n        height: \"200px\",\n        float: \"right\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1348\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1354\n      },\n      __self: this\n    }), \"The CSS box model is a rectangular layout paradigm for HTML elements that consists of the following:\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1357\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1358\n      },\n      __self: this\n    }, \"The box model determines the size and position of each element on the page by adding up the width and height of the content, padding, and border, and then adding the margin to the outside of the box. The total size of the element is known as the \\\"outer box\\\" or \\\"box dimensions\\\".\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1366\n      },\n      __self: this\n    }), \"The border is the layer of the CSS box model that sits between margin and padding. By default, the border does not have any width.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1370\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1371\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: boxModel,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1372\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1378\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1379\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1380\n      },\n      __self: this\n    }, \"How do you center an element horizontally and vertically in CSS?\"), \"There are multiple ways to center an element horizontally and vertically in CSS, depending on the layout and requirements of your page.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1386\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1387\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1388\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1389\n      },\n      __self: this\n    }, \"Using Flexbox: \"), \"To center an element horizontally and vertically using Flexbox, set the parent container to display: flex, and use the align-items and justify-content properties to center the child element.\", \" \"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1395\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: horizontallycss,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1396\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1402\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1403\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1404\n      },\n      __self: this\n    }, \"Using absolute positioning: \"), \"To center an element using absolute positioning, set the parent container to position: relative, and the child element to position: absolute. Then, use the top, bottom, left, and right properties to center the child element.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1410\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: horizontallycss2,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1411\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1417\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1419\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1420\n      },\n      __self: this\n    }, \": \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1422\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1424\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: horizontallycss3,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1425\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1431\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1432\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1433\n      },\n      __self: this\n    }, \"35. CSS Flexbox or Grid specs?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1434\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1435\n      },\n      __self: this\n    }, \"Flexbox is a way to align items into container.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1436\n      },\n      __self: this\n    }, \"Flexbox = Flexible + box\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1437\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1438\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1439\n      },\n      __self: this\n    }, \"main-axis: \"), \"Horrizontal\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1441\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1442\n      },\n      __self: this\n    }, \"cross-axis: \"), \"Vertical\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1445\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1446\n      },\n      __self: this\n    }, \"Flexbox is a 1-D layouts while Grid is 2-D layouts.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1447\n      },\n      __self: this\n    }, \"Flexbox solves problems such as vertical centering of elements within a container, sticky footer, etc.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1451\n      },\n      __self: this\n    }, \"Grid use for creating grid-based layouts.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1453\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1454\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1455\n      },\n      __self: this\n    }, \"36. Grid\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1456\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1457\n      },\n      __self: this\n    }, \"CSS Grid is a powerful layout system that allows for the creation of complex and flexible grid-based layouts on the web. It is a two-dimensional layout system, meaning it works in both rows and columns.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1464\n      },\n      __self: this\n    }), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1465\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1466\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1467\n      },\n      __self: this\n    }, \"Properties for the Parent (Grid Container):\")), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1469\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1470\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1471\n      },\n      __self: this\n    }, \"Display: \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1473\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1474\n      },\n      __self: this\n    }, \"Grid-template-rows: \"), \"Defines the columns and rows of the grid with a space-separated list of values.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1477\n      },\n      __self: this\n    }, \"Grid lines are automatically assigned positive numbers from these assignments.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1481\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1482\n      },\n      __self: this\n    }, \"grid-template-areas: \")))), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1486\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: gridspace,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1487\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1493\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1494\n      },\n      __self: this\n    }, \"37. Grid-Template\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1495\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: gridtemplates,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1496\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1502\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1503\n      },\n      __self: this\n    }, \"38. Justify-items\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1504\n      },\n      __self: this\n    }, \"align-items: \"), \"Aligns grid items along the column. This value applies to all grid items inside the container.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1506\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1507\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1508\n      },\n      __self: this\n    }, \"stretch: \"), \"fills the whole height of the cell (this is the default).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1511\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1512\n      },\n      __self: this\n    }, \"start: \"), \"aligns items to be flush with the start edge of their cell.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1515\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1516\n      },\n      __self: this\n    }, \"end: \"), \"aligns items to be flush with the end edge of their cell.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1519\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1520\n      },\n      __self: this\n    }, \"center: \"), \"aligns items in the center of their cell.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1522\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1523\n      },\n      __self: this\n    }, \"baseline: \"), \"align items along text baseline.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1526\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: judtifyItems,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1527\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1533\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1534\n      },\n      __self: this\n    }, \"39. Justify-content\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1535\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1536\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1537\n      },\n      __self: this\n    }, \"justify-content: \"), \"Sometimes the total size of your grid might be less than the size of its grid container. This could happen if all of your grid items are sized with non-flexible units like px. In this case you can set the alignment of the grid within the grid container.\", \" \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1543\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1544\n      },\n      __self: this\n    }, \"align-content: \"), \"Sometimes the total size of your grid might be less than the size of its grid container. This could happen if all of your grid items are sized with non-flexible units like px. In this case you can set the alignment of the grid within the grid container. This property aligns the grid along the block (column) axis (as opposed to justify-content which aligns the grid along the inline (row) axis).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1552\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1553\n      },\n      __self: this\n    }, \"grid-auto-rows: \"), \"Specifies the size of any auto-generated grid tracks (aka implicit grid tracks). Implicit tracks get created when there are more grid items than cells in the grid or when a grid item is placed outside of the explicit grid.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1559\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1560\n      },\n      __self: this\n    }, \"grid-auto-flow: \"), \"If you have grid items that you don\\u2019t explicitly place on the grid, the auto-placement algorithm kicks in to automatically place the items. This property controls how the auto-placement algorithm works.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1566\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: justifycontain,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1567\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1573\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1574\n      },\n      __self: this\n    }, \"40. Properties for the Children (Grid Items)\"), \"Determines a grid item\\u2019s location within the grid by referring to specific grid lines. grid-column-start/grid-row-start is the line where the item begins, and grid-column-end/grid-row-end is the line where the item ends.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1579\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1580\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1581\n      },\n      __self: this\n    }, \"line: \"), \"can be a number to refer to a numbered grid line, or a name to refer to a named grid line.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1584\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1585\n      },\n      __self: this\n    }, \"span(number): \"), \"the item will span across the provided number of grid tracks.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1588\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1589\n      },\n      __self: this\n    }, \"span(name): \"), \"the item will span across until it hits the next line with the provided name.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1592\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1593\n      },\n      __self: this\n    }, \"auto: \"), \"indicates auto-placement, an automatic span, or a default span of one.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1597\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1598\n      },\n      __self: this\n    }, \"justify-self: \"), \"Aligns a grid item inside a cell along the inline (row) axis (as opposed to align-self which aligns along the block (column) axis). This value applies to a grid item inside a single cell.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1602\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1603\n      },\n      __self: this\n    }, \"align-self: \"), \"Aligns a grid item inside a cell along the block (column) axis (as opposed to justify-self which aligns along the inline (row) axis). This value applies to the content inside a single grid item.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1607\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: propertieschilds,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1608\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1614\n      },\n      __self: this\n    }, \"41. Properties of flexbox?\"), \"Flexbox is a layout module that provides a flexible way to organize content within a container. It allows for the creation of complex and responsive layouts with relative ease.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1618\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1619\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1620\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1621\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1622\n      },\n      __self: this\n    }, \"flex-direction: \"), \"Defining the direction.\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1624\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1625\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1626\n      },\n      __self: this\n    }, \"row: \"), \"Stacks items horizontally from left to right in the flex container.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1629\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1630\n      },\n      __self: this\n    }, \"column: \"), \"Stacks items vertically from top to bottom in the flex container.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1633\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1634\n      },\n      __self: this\n    }, \"row-reverse: \"), \"Horizontally from right to left.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1636\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1637\n      },\n      __self: this\n    }, \"column-reverse: \"), \"Vertically from bottom to top.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1640\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1642\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1643\n      },\n      __self: this\n    }, \"flex-wrap: \"), \"Specifies of the flex items should be wrapped/ not. Possible values are:\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1646\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1647\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1648\n      },\n      __self: this\n    }, \"wrap: \"), \"The flex items wood be wrapped if needed.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1650\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1651\n      },\n      __self: this\n    }, \"nowrap: \"), \"default value.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1653\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1654\n      },\n      __self: this\n    }, \"wrap-reverse: \"), \"Wrapped in reverse order.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1657\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1659\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1660\n      },\n      __self: this\n    }, \"flex-flow: \"), \"This property is used for setting both flex-direction and flex-wrap properties in one statement.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1663\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1665\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1666\n      },\n      __self: this\n    }, \"justify-content: \"), \"Used for aligning the flex items. Possible values are:\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1669\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1670\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1671\n      },\n      __self: this\n    }, \"center: \"), \"All the flex items are present at the center of the container.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1674\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1675\n      },\n      __self: this\n    }, \"flex-start: \"), \"States that the items are aligned at the start of the container. This is the default value.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1678\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1679\n      },\n      __self: this\n    }, \"flex-end: \"), \"Items are aligned at the end of the container.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1682\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1683\n      },\n      __self: this\n    }, \"space-around: \"), \"Displays the items having space between, before, around the items.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1686\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1687\n      },\n      __self: this\n    }, \"space-between: \"), \"Displays items with spaces between the lines.\"))), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1692\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: flextFloat,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1693\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1699\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1700\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1701\n      },\n      __self: this\n    }, \"42. Describe floats and how they work\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1702\n      },\n      __self: this\n    }, React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1703\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1704\n      },\n      __self: this\n    }, \"Float is a CSS property that allows elements to be positioned to the left or right of their containing block, allowing text and inline elements to flow around it. Float is commonly used for creating multi-column layouts or positioning images and other media on a webpage.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1712\n      },\n      __self: this\n    }, \"float has 3 properties: \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1713\n      },\n      __self: this\n    }, \"Left, Right, None\"), \".\"))), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1717\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1718\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1719\n      },\n      __self: this\n    }, \"flex-direction: \"), \"By default flex-direction is row.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1721\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1722\n      },\n      __self: this\n    }, \"space-between: \"), \"Not apply on start and end.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1724\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1725\n      },\n      __self: this\n    }, \"space-evenly: \"), \"Apply on start and end also.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1727\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1728\n      },\n      __self: this\n    }, \"space-around: \"), \"Like padding on box.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1730\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1731\n      },\n      __self: this\n    }, \"flex-grow: \"), \"Adjeced box on the base of screen\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1733\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1734\n      },\n      __self: this\n    }, \"fraction (fr): \"), \"Divide on the basis of screen-size\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1737\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1738\n      },\n      __self: this\n    }, \"How to Use Float in CSS\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1739\n      },\n      __self: this\n    }), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1740\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1741\n      },\n      __self: this\n    }, \"float: left/ none/ inherit;\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1743\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: floatele,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1744\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1750\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1751\n      },\n      __self: this\n    }, \"43. Purpose of clearing floats in CSS\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1752\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1753\n      },\n      __self: this\n    }, \"Clearing floats is a technique used in CSS to prevent elements from wrapping around floated elements. When an element is floated, it is taken out of the normal document flow, which can cause issues with layout and positioning if other elements on the page are affected by the float.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1760\n      },\n      __self: this\n    }, \"To prevent this from happening, we can use the clear property to specify that an element should not be allowed to float next to a floated element. The clear property can be set to left, right, both, or none, depending on which side of the floated element you want to clear.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1768\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1769\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1770\n      },\n      __self: this\n    }, \"44. Explain the usage of \\\"table-layout\\\" property\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1771\n      },\n      __self: this\n    }, \"The table-layout property defines the algorithm used to layout table cells, rows, and columns.\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1775\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1776\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1777\n      },\n      __self: this\n    }, \"auto -\"), \" Browsers use an automatic table layout algorithm. The column width is set by the widest unbreakable content in the cells.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1781\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1782\n      },\n      __self: this\n    }, \"fixed -\"), \"Fixed layout based on the first row. And the rest of the table follows. If no widths are present on the first row, the column widths are divided equally across the table.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1787\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1788\n      },\n      __self: this\n    }, \"initial -\"), \" Sets this property to its default value.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1790\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1791\n      },\n      __self: this\n    }, \"inherit -\"), \" Property from its parent element.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1794\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: table_layout,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1795\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1801\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1802\n      },\n      __self: this\n    }, \"45. Describe pseudo-elements and discuss what they are used for.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1805\n      },\n      __self: this\n    }, \"Pseudo-elements are a type of selector in CSS that allow you to style a specific part of an element's content, such as the first letter or line of text. Pseudo-elements are denoted by two colons (::) before the selector name.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1811\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1812\n      },\n      __self: this\n    }, \"Here are some commonly used pseudo-elements:\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1813\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1814\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1815\n      },\n      __self: this\n    }, \"::before :\"), \" Allows you to insert content before the content of an element.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1818\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1819\n      },\n      __self: this\n    }, \"::after :\"), \"Allows you to insert content after the content of an element.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1822\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1823\n      },\n      __self: this\n    }, \"::first-letter :\"), \"Targets the first letter of text content within an element.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1826\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1827\n      },\n      __self: this\n    }, \"::first-line :\"), \"Targets the first line of text content within an element.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1830\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1831\n      },\n      __self: this\n    }, \"::selection :\"), \"Targets the portion of an element's content that has been selected by the user.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1835\n      },\n      __self: this\n    }), \"Pseudo-elements are useful for adding decorative elements to your design, such as icons or borders, without adding extra markup to your HTML. They can also be used to style specific parts of text, such as the first letter or line of a paragraph\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1840\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1841\n      },\n      __self: this\n    }, \"example of how to use the ::before pseudo-element to add an icon before a link.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1845\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: psudoele,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1846\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1852\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1853\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1854\n      },\n      __self: this\n    }, \"There are currently seven pseudo-elements in CSS. They are:\", \" \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1857\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1858\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1859\n      },\n      __self: this\n    }, \"::after\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1860\n      },\n      __self: this\n    }, \"::before\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1861\n      },\n      __self: this\n    }, \"::first-letter\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1862\n      },\n      __self: this\n    }, \"::first-line\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1863\n      },\n      __self: this\n    }, \"::marker\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1864\n      },\n      __self: this\n    }, \"::placeholder\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1865\n      },\n      __self: this\n    }, \"::selection\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1867\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1868\n      },\n      __self: this\n    }, \"Pseudo-classes: \"), \"A pseudo-class is used to define a special state of an element.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1870\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1871\n      },\n      __self: this\n    }, \"Style an element when a user mouses over it.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1872\n      },\n      __self: this\n    }, \"Style visited and unvisited links differently.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1873\n      },\n      __self: this\n    }, \"Style an element when it gets focus.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1875\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1876\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: pseudoclas,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1877\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1883\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1884\n      },\n      __self: this\n    }, \"LESS: (Leaner Stylesheets)\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1885\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1886\n      },\n      __self: this\n    }, \" \", \"LESS is easy to add to any javascript projects by using NPM or less.js file.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1891\n      },\n      __self: this\n    }, \"uses the extension .less.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1893\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1894\n      },\n      __self: this\n    }, \"Stylus:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1895\n      },\n      __self: this\n    }), \"Stylus offers a great deal of flexibility in writing syntax, supports native CSS as well as allows omission of brackets, colons, and semicolons.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1899\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1900\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1901\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: sass,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1902\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1908\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1909\n      },\n      __self: this\n    }, \"47. What is the importance of CSS Sprites?\"), \"CSS sprites are used for combining multiple images in a single larger image. They are commonly used for representing icons that are used in the user interfaces. The main advantages of using sprites are:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1914\n      },\n      __self: this\n    }), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1915\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1916\n      },\n      __self: this\n    }, \"It reduces the number of HTTP requests to get data of multiple images.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1920\n      },\n      __self: this\n    }, \"It helps in downloading assets in advance that help display icons/ images upon hover/ other pseudo-states.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1924\n      },\n      __self: this\n    }, \"It use as a background image only.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1926\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1927\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: sprites,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1928\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1934\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1935\n      },\n      __self: this\n    }, \"48. What do you understand by tweening in CSS?\"), \"Tweening is the process of filling the gaps between the key sequences, i.e between the keyframes that are already created. Keyframes are those frames that represent start and end point of animation action.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1940\n      },\n      __self: this\n    }), \" we use properties like transforms - matrix, translate, scale, rotate etc.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1942\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1943\n      },\n      __self: this\n    }), \"In the below example, we are generating intermediate frames of paragraph elements to slide through from the start to the right edge of the browser.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1947\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1948\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1949\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: tweening,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1950\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(CssBasics);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/css/cssbasics.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Browser","boxModels","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","flextFloat","trim","floatele","psudoele","pseudoclas","table_layout","sass","website","elements","meaning","importants","inlinestyles","relativestyles","backgroundImg","hiddenStyles","boxModel","supports","counters","nthchild","tweening","defoultcss","sprites","gridspace","gridtemplates","judtifyItems","justifycontain","propertieschilds","selectors","horizontallycss","horizontallycss2","horizontallycss3","CssBasics","componentDidMount","setTimeout","highlightAll","render","classes","props","width","height","float"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../ReactJs/styles.css\";\nimport Sidebar from \"./sidebar\";\nimport PrismCode from \"../ReactJs/prismCode\";\n\nimport Browser from \"../../assets/css1.PNG\";\nimport boxModels from \"../../assets/boxings.png\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst flextFloat = `\n.container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 200px;\n}\n\n.item {\n  background-color: #eee;\n  padding: 20px;\n  text-align: center;\n  font-size: 30px;\n  margin: 10px;\n}\n\n\n//app.html\n<div class=\"container\">\n  <div class=\"item\">1</div>\n  <div class=\"item\">2</div>\n  <div class=\"item\">3</div>\n</div>\n`.trim();\n\nconst floatele = `\n* {\n  padding: 0;\n  margin: 0/ auto;\n  bottom: 0;\n  right: 0;\n}\n\n.img1, .img2, .img3, .img4{\n  width:30%;\n  max-width: 500px;\n  height:100px;\n  border: 2px solid red;\n  opacity: 0.5;\n}\n\n\ndiv{\n  outline: 2px solid red;\n  float:left/ none/ inherit;\n  clear: left / both;\n  display: flex/ grid/ block/ inline/ table;\n  flex-grow: 3;                                              \n  flex-shrink: 2;\n  flex-direction: row/ column/ row-reverse/ column-reverse; \n  flex-wrap: wrap/ rap-reverse;\n  flex-flow:row-reverse wrap;\n  justify-content: center/ space-between/ space-evenly/ space-around;\n  align-items: center/ flex-end/ stretch;\n  grid-template-columns: 2fr 5fr 2fr 1fr;                               \n  grid-template-rows: 1fr 3fr;\n  grid-auto-flow: 2fr 5fr;\n  grid-gap: 1rem;\n  grid-column: 1 / span 2;\n  grid-row: 2 / span 3;\n  background-color: blue;\n  position: static/ relative/ absolute/ inline/ fixed / sticky;\n  \n}\n`.trim();\n\nconst psudoele = `\n.link::before {\n  content: \"\\f067\";\n  font-family: FontAwesome;\n  margin-right: 5px;\n}\n\n//app.html\n<a href=\"#\" class=\"link\">Click me!</a>\n`.trim();\n\nconst pseudoclas = `\na:link {\n  color: red;\n \n}\n\n//visited link \na:visited {\n  color: green;\n}\n\n//mouse over link \na:hover {\n  color: hotpink;\n}\n\n//selected link \na:active {\n  color: blue;\n}\n`.trim();\n\nconst table_layout = `table-layout: auto|fixed|initial|inherit;`.trim();\n\nconst sass = `\n//sass\n$color: red\n\n=my-border($color)\n  border: 1px solid $color\n\nbody\n  background: $color\n  +my-border(green)\n  \n  \n//.scss\n$color: red;\n\n@mixin my-border($color) {\n  border: 1px solid $color;\n}\n\nbody {\n  background: $color;\n  @include my-border(green);\n}\n`.trim();\n\nconst website = `\n@media (min-width: 601px) {\n  .my-class {\n    font-size: 24px;\n  }\n}\n\n.my-class {\n  font-size: 12px;\n}\n`.trim();\n\nconst elements = `\ndiv, p - Selects all <div> elements and all <p> elements\ndiv p - Selects all <p> elements that are anywhere inside a <div> element\ndiv > p - Selects all <p> elements where the immediate parent is a <div> element\ndiv + p - Selects all <p> elements that are placed immediately after a <div> element\ndiv ~ p - Selects all <p> elements that are anywhere preceded by a <div> element\n\n.div, p{\n  outline:2px solid pink;\n  padding: 10px;\n  word-spacing: 20px;\n}\n`.trim();\n\nconst meaning = `\ncm - centimeters\nem - elements (i.e., relative to the font-size of the element; e.g., 2 em means 2 times the current font size)\nin - inches\nmm - millimeters\npc - picas (1 pc = 12 pt = 1/6th of an inch)\npt - points (1 pt = 1/72nd of an inch)\npx - pixels (1 px = 1/96th of an inch)\n\n.vh{\n  width: 20vw; \n  height: 30vh;\n  font-size: 100px;\n  font-size: 100pt;\n  font-size: 2.5em;\n  font-size: 100%;\n  font-size: 2pc;\n  font-size: 2cm;\n  font-size: 2mm; \n  font-size: 2in;\n}\n`.trim();\n\nconst importants = `\n.imp{\n  outline:2px solid pink;\n  outline: 2px solid red !important;\n}\n`.trim();\n\nconst inlinestyles = `\n//  display: block/ inline/ inline-block; \n\n.container {\n  text-align: center;\n}\n\n.box {\n  display: inline-block;\n  width: 100px;\n  margin: 10px;\n  background-color: #f2f2f2;\n}\n\n\n//app.html\n<div class=\"container\">\n  <div class=\"box\"></div>\n  <div class=\"box\"></div>\n  <div class=\"box\"></div>\n</div>\n  \n`.trim();\n\nconst relativestyles = `\n.static {\n  position: static/ relative/ fixed/ absolute/ sticky;\n}\n`.trim();\n\nconst backgroundImg = `\nbackground-image: url(\"bgdesert.jpg\");\nbackground-repeat: repeat-x/ no-repeat;\nbackground-position: right top;\nbackground-attachment: fixed / scroll;\nbackground: #ffffff url(\"img_tree.png\") no-repeat right top;\n\nborder-style: solid;\nborder-width: 5px;\nborder-color: blue;\nborder-bottom-style: dotted;\nborder-radius: 5px;\n\nmax-width: 500px;\noutline-style: dotted;\noutline-width: thin;\noutline-color: red;\noutline-offset: 15px;\n`.trim();\n\nconst hiddenStyles = `\nh1.hidden {\n  display: none;\n  visibility: hidden;\n}\n`.trim();\n\nconst boxModel = `\npadding: 25px  50px   75px   100px;                                  //top   right  bottom left. \npadding: 25px 50px;                            //top/bottom padding 25px; right/left padding 50px.\n\ncolor: blue;\ntext-align: center / left / right / justify;\nvertical-align: baseline / text-top / text-bottom / sub / super;\ntext-decoration: none / overline / line-through / underline;\ntext-transform: uppercase / lowercase / capitalize;\ntext-indent: 50px;\nletter-spacing: 5px;\nline-height: 0.8;\nword-spacing: 10px;\nwhite-space: nowrap;\n\ntext-shadow: 2px 2px;\nfont-family: 'Montserrat';\nfont-style: normal;\nfont-weight: bold/ 900;\nfont-variant: small-caps;\nfont-size: 1.875em;\n\nz-index: -1 / 1 / 3;\n\noverflow: visible / hidden / scroll / auto;\noverflow-y: scroll; \n`.trim();\n\nconst supports = `\n@supports (display: grid) {\n\tdiv {\n\t\tdisplay: grid;\n\t}\n}\n`.trim();\n\nconst counters = `\nbody {\n  counter-reset: category;\n}\n\nh1 {\n  counter-reset: section;\n  counter-increment: category;\n}\n\nh2 {\n  counter-increment: section;\n}\n\nh1:before {\n  content: counter(category) \". \";\n}\n\nh2:before {\n  content: counter(category) \".\" counter(section) \" \";\n}\n\n\n//app.html\n<body>\n  <h1>Category 1</h1>\n  <h2>Section 1.1</h2>\n  <p>Content here</p>\n  <h2>Section 1.2</h2>\n  <p>Content here</p>\n  <h1>Category 2</h1>\n  <h2>Section 2.1</h2>\n  <p>Content here</p>\n  <h2>Section 2.2</h2>\n  <p>Content here</p>\n</body>\n\n`.trim();\n\nconst nthchild = `\nul li:nth-child(2) {\n  color: red;\n}\n\n//nth-of-type()\nul li:nth-of-type(2) {\n  color: green;\n}\n\n//app.css\n<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n  <li>Item 4</li>\n</ul>\n`.trim();\n\nconst tweening = `\np {\n  animation-duration: 2s;\n  animation-name: slidethrough;\n}\n\n@keyframes slidethrough {\n  from {\n    margin-left: 100%;\n    width: 300%; \n  }\n\n  to {\n    margin-left: 0%;\n    width: 100%;\n  }\n}\n`.trim();\n\nconst defoultcss = `\np {\n  color: initial;\n}\n`.trim();\n\nconst sprites = `\n.sprites {\n  width: 200px;\n  background-image: url(\"abc.png\");\n  background-position: 0px -200px;  //second image start after 200px. initials 200px occupied by first image\n}\n`.trim();\n\nconst gridspace = `\n//display\nValues:\n\tgrid – generates a block-level grid\n\tinline-grid – generates an inline-level grid\n\n\t.container {\n      display: grid | inline-grid;\n      }\n\n      \n//grid-template-rows:\n.container {\n  grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];\n  grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];\n}\n\n\n//Note that a line can have more than one name. For example, here the second line will have \n//two names: row1-end and row2-start:\n.container {\n  grid-template-rows: [row1-start] 25% [row1-end row2-start] 25% [row2-end];\n}\n\n\n//If your definition contains repeating parts, you can use the repeat() notation to streamline things:\n.container {\n  grid-template-columns: repeat(3, 20px [col-start]);\n\n \tWhich is equivalent to this\n  grid-template-columns: 20px [col-start] 20px [col-start] 20px [col-start];\n}\n\n\n//If multiple lines share the same name, they can be referenced by their line name and count\n.item {\n  grid-column-start: col-start 2;\n}.\n\n\n//grid-template-areas\n.item-a {\n  grid-area: header;\n}\n.item-b {\n  grid-area: main;\n}\n.item-c {\n  grid-area: sidebar;\n}\n.item-d {\n  grid-area: footer;\n}\n\n\n.container {\n  display: grid;\n  grid-template-columns: 50px 50px 50px 50px;\n  grid-template-rows: auto;\n  grid-template-areas:\n    \"header header header header\"\n    \"main main . sidebar\"\n    \"footer footer footer footer\";\n}\n`.trim();\n\nconst gridtemplates = `\n//\n.container {\n  grid-template: none | grid-template-rows / grid-template-columns;\n}\n\n\n//Specifies the size of the grid lines. Setting the width of the gutters between the columns/rows\n.container {\n\tcolumn-gap: 15px 10px;\n\trow-gap: 15px 10px;\n\tgrid-column-gap: 15px 10px;\n\tGrid-row-gap: 15px 10px;\n    }\n\n//A shorthand for row-gap and column-gap.\n//If no row-gap is specified, it’s set to the same value as column-gap.\n.container {\n  gap: 15px 10px;\n}\n`.trim();\n\nconst judtifyItems = `\n.container {\n  align-items: start | end | center | stretch;\n}\n`.trim();\n\nconst justifycontain = `\n.container {\n  justify-content: start | end | center | stretch | space-around | space-between | space-evenly;    \n}\n\n\n//\n.container {\n  grid-auto-flow: row | column | row dense | column dense;\n}\n`.trim();\n\nconst propertieschilds = `\n.item-a {\n  grid-column-start: 2;\n  grid-column-end: five;\n  grid-row-start: row1-start;\n  grid-row-end: 3;\n}\n\n//justify-self\n.item {\n  justify-self: start | end | center | stretch;\n}\n\n//align-self\n.item {\n  align-self: start | end | center | stretch;\n}\n`.trim();\n\nconst selectors = `\nChild selectors: ul > li\n\ntargets all list items that are direct children of unordered lists\n`.trim();\n\nconst horizontallycss = `\n<div class=\"container\">\n    <div class=\"element\">Center me!</div>\n</div>\n\n\n//css\n.container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n}\n\n.element {\n  width: 200px;\n  height: 200px;\n  background-color: red;\n  color: white;\n  text-align: center;\n  line-height: 200px;\n}\n`.trim();\n\nconst horizontallycss2 = `\n<div class=\"container\">\n    <div class=\"element\">Center me!</div>\n</div>\n\n\n//css\n.container {\n  position: relative;\n  height: 100vh;\n}\n\n.element {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 200px;\n  height: 200px;\n  background-color: red;\n  text-align: center;\n  line-height: 200px;\n}\n`.trim();\n\nconst horizontallycss3 = ``.trim();\n\nclass CssBasics extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>\n                1. How does CSS actually work (under the hood of browser)?\n              </h3>\n              <ol>\n                <li>\n                  CSS is a style sheet language used for describing the\n                  presentation of web pages. It is used to style and layout HTML\n                  elements on a web page.\n                </li>\n                <br />\n                <li>\n                  When a web page is loaded in a browser, the browser parses the\n                  HTML and CSS code to create the Document Object Model and the\n                  CSS Object Model (CSSOM) respectively. The DOM represents the\n                  structure of the web page, while the CSSOM represents the\n                  styles applied to the elements on the web page.\n                </li>\n                <br />\n                <li>\n                  After the DOM and CSSOM are created, the browser uses them to\n                  calculate the layout of the web page, a process known as the\n                  render tree. The render tree is a visual representation of the\n                  web page, showing how each element is positioned and styled\n                  relative to other elements.\n                </li>\n                <br />\n                <li>\n                  During the rendering process, the browser applies the CSS\n                  styles to the corresponding elements in the render tree. It\n                  does this by computing the computed style of each element,\n                  which is the final style that will be applied to the element.\n                  The computed style takes into account the styles specified in\n                  the style sheet, as well as any styles inherited from parent\n                  elements, and any styles applied by user-agent stylesheets\n                </li>\n                <br />\n                <li>\n                  Once the computed styles have been determined, the browser\n                  uses them to render the web page on the user's screen. This\n                  involves drawing each element in its correct position and with\n                  the correct styles applied.\n                </li>\n                <br />\n                <li>\n                  Overall, the process of rendering a web page with CSS involves\n                  parsing the CSS code, computing the computed styles of each\n                  element, and using these styles to lay out and render the web\n                  page.\n                </li>\n              </ol>\n              <img src={Browser} alt=\"\" className=\"responsive\" />\n              <br />\n              <br />\n              <h3>2. There are a number of benefits of CSS, including</h3>\n              <ol>\n                <li>\n                  <b>Faster Page Speed: </b>More code means slower page speed.\n                  And CSS enables us to use less code. CSS allows to use one CSS\n                  rule and apply it to all occurrences of a certain tag within\n                  an HTML document.\n                </li>\n                <br />\n                <li>\n                  <b>Better User Experience: </b>It allows for user-friendly\n                  formatting. When buttons and text are in logical places and\n                  well organized, user experience improves.\n                </li>\n                <br />\n                <li>\n                  <b>Responsive Design: </b>\n                </li>\n                <br />\n                <li>\n                  <b>Improved Performance: </b>\n                </li>\n                <br />\n                <li>\n                  <b>Easy Formatting Changes: </b>\n                </li>\n                <br />\n                <li>\n                  <b>Compatibility Across Devices: </b>\n                </li>\n              </ol>\n              <br />\n              <br />\n              <h3>4. Explain the basic rules of CSS Specificity</h3>\n              Specificity determines which rules will take precedence.\n              <br />\n              <ol>\n                <li>\n                  CSS style applied by referencing external stylesheet has\n                  lowest precedence and is overridden by Internal and inline\n                  CSS.\n                </li>\n                <li>Internal CSS is overridden by inline CSS.</li>\n                <li>\n                  Inline CSS has highest priority and overrides all other\n                  selectors.\n                </li>\n                <li>\n                  ID selectors have a higher specificity than attribute\n                  selectors.\n                </li>\n                <li>A class selector beats any number of element selectors.</li>\n                <li>Universal selector (*) has no specificity.</li>\n              </ol>\n              <br />\n              <h3>\n                5. How do you specify units in the CSS?. What are the different\n                ways to do it?\n              </h3>\n              <b>What is VH/VW (viewport height/ viewport width) in CSS?</b>\n              <ol>\n                <li>\n                  It’s a CSS unit used to measure the height and width in\n                  percentage w.r.t viewport. It is used mainly in responsive\n                  design techniques.\n                  <br /> VH = 1/100 of the height of the viewport.\n                </li>\n                <li>\n                  If the height of the browser is 1000px, 1vh = 10px. Similarly,\n                  if the width is 1000px, then 1vw = 10px.\n                </li>\n              </ol>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={meaning}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>6. What are the different types of Selectors in CSS?</h3>\n              <ol>\n                <li>\n                  <b>Universal Selector: </b>Selecting all elements on a page.{\" \"}\n                </li>\n                <br />\n                <li>\n                  <b>Type selectors: </b>These selectors target elements based\n                  on their tag name. For example, p targets all paragraph\n                  elements on a page.\n                </li>\n                <br />\n                <li>\n                  <b>Class selectors: </b>These selectors target elements based\n                  on their class attribute. For example, .my-class targets all\n                  elements with a class of \"my-class\"\n                </li>\n                <br />\n                <li>\n                  <b>ID selectors: </b>These selectors target elements based on\n                  their ID attribute. For example, #my-id targets the element\n                  with an ID of \"my-id\".\n                </li>\n                <br />\n                <li>\n                  <b>Attribute selectors: </b>These selectors target elements\n                  based on their attribute values. For example, [href] targets\n                  all elements with an href attribute.\n                </li>\n                <br />\n                <li>\n                  <b>Descendant selectors: </b>These selectors target elements\n                  that are descendants of another element. For example, ul li\n                  targets all list items that are descendants of unordered\n                  lists.\n                </li>\n                <br />\n                <li>\n                  <b>Child selectors: </b>These selectors target elements that\n                  are direct children of another element.\n                </li>\n                <br />\n                <li>\n                  <b>Adjacent sibling selectors: </b>These selectors target\n                  elements that come immediately after another element. For\n                  example, h2 + p targets the first paragraph that comes\n                  immediately after an h2 element.\n                </li>\n                <br />\n                <li>\n                  <b>General sibling selectors: </b>These selectors target\n                  elements that come after another element. For example, h2 ~ p\n                  targets all paragraphs that come after an h2 element.\n                </li>\n              </ol>\n              <div style={titles}>\n                <PrismCode\n                  code={selectors}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                7. Explain what elements will match each of the following CSS\n                selectors\n              </h3>\n              <div style={titles}>\n                <PrismCode\n                  code={elements}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>9. What does !important mean in CSS?</h3>\n              The important will have the highest precedence and it overrides\n              the cascaded property.\n              <div style={titles}>\n                <PrismCode\n                  code={importants}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>10. Can you name the four types of @media properties?</h3>\n              <ol>\n                <li>\n                  <b>All: </b>It’s the default property. Used for all media-type\n                  devices.\n                </li>\n                <li>\n                  <b>Screen: </b>Used for computer screen, mobile screen.\n                </li>\n                <li>\n                  <b>Print: </b>Used for printers.\n                </li>\n                <li>\n                  <b>Speech: </b>Used for screen readers.\n                </li>\n              </ol>\n              <br />\n              <h3>12. What are the limitations of CSS?</h3>\n              <ol>\n                <li>\n                  <b>Browser Compatibility: </b>Some style selectors are\n                  supported and some are not. We have to determine which style\n                  is supported or not using the @support selector.\n                </li>\n                <li>\n                  <b>Cross Browser issue: </b>Some selectors behave differently\n                  in a different browser\n                </li>\n                <li>\n                  <b>There is no parent selector: </b>Currently, Using CSS, we\n                  can’t select a parent tag.\n                </li>\n              </ol>\n              <br />\n              <h3>\n                13. Difference between coding a website to be responsive versus\n                using a mobile-first strategy?\n              </h3>\n              <p>\n                Making a website responsive means the some elements will respond\n                by adapting its size or other functionality according to the\n                device's screen size.\n              </p>\n              A mobile-first strategy has 2 main advantages:\n              <ol>\n                <li>\n                  It's more performant on mobile devices, since all the rules\n                  applied for them don't have to be validated against any media\n                  queries.\n                </li>\n                <li>\n                  It forces to write cleaner code in respect to responsive CSS\n                  rules.\n                </li>\n              </ol>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={website}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                14. What are the differences between adaptive design and\n                responsive design?\n              </h3>\n              Both responsive and adaptive design attempt to optimize the user\n              experience across different devices, adjusting for different\n              viewport sizes, resolutions, usage contexts, control mechanisms,\n              and so on.\n              <table>\n                <tr>\n                  <th>Property</th>\n                  <th>Adaptive Design</th>\n                  <th>Responsive Design</th>\n                </tr>\n                <tr>\n                  <td>\n                    <b>Flexible vs. fixed layouts: </b>\n                  </td>\n                  <td>\n                    Uses fixed layouts that are designed for specific screen\n                    sizes and device types.\n                  </td>\n                  <td>\n                    Responsive design uses fluid grids and flexible images to\n                    create a layout that adapts to different screen sizes.\n                  </td>\n                </tr>\n                <br />\n                <tr>\n                  <td>\n                    <b>Breakpoints: </b>\n                  </td>\n                  <td>\n                    Adaptive design uses predefined layouts for specific screen\n                    sizes, and switches between them based on the device type.\n                  </td>\n                  <td>\n                    Responsive design uses breakpoints to determine when the\n                    layout should change, based on the width of the screen.\n                  </td>\n                </tr>\n                <br />\n                <tr>\n                  <td>\n                    <b>Complexity: </b>\n                  </td>\n                  <td>\n                    Adaptive design is often simpler to implement, as it\n                    involves designing specific layouts for specific devices.\n                  </td>\n                  <td>\n                    Responsive design can be more complex than adaptive design,\n                    as it requires careful planning and testing to ensure that\n                    the layout works well across a range of devices.\n                  </td>\n                </tr>\n                <br />\n                <tr>\n                  <td>\n                    <b>Speed: </b>\n                  </td>\n                  <td>\n                    Adaptive design can be faster than responsive design, as it\n                    only needs to load the layout that is designed for the\n                    specific device being used.\n                  </td>\n                  <td>\n                    Responsive design may require more code and resources to\n                    load, as it has to handle a wider range of screen sizes and\n                    device types.\n                  </td>\n                </tr>\n              </table>\n              <br />\n              <br />\n              <i>\n                In summary, responsive design uses flexible layouts and adapts\n                to different screen sizes using breakpoints, while adaptive\n                design uses fixed layouts designed for specific screen sizes and\n                device types. Responsive design can be more complex but provides\n                more flexibility, while adaptive design can be simpler and\n                faster, but provides less flexibility.{\" \"}\n              </i>\n              <br />\n              <br />\n              <h3>\n                15. How to determine if the browser supports a certain feature?\n              </h3>\n              The <b>@support</b> in CSS use to scan if the current browser has\n              support for a certain feature.\n              <div style={titles}>\n                <PrismCode\n                  code={supports}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                16. What is progressive rendering? How do you implement\n                progressive rendering in the website?. What are the advantages\n                of it?\n              </h3>\n              <ol>\n                <li>\n                  Techniques used to improve the performance of a webpage to\n                  render content for display as quickly as possible.\n                </li>\n                <li>\n                  We can implement the progressive rendering of the page by\n                  loading the lazy loading of the images. We can use\n                  Intersection Observer API to lazy load the image. The API\n                  makes it simple to detect when an element the viewport and\n                  take an action when it does. Once the image enters the\n                  viewport, we will start loading the images.\n                </li>\n              </ol>\n              <br />\n              <br />\n              <b>The advantages of progressive rendering are: </b>\n              <br />\n              <ul>\n                <li>Improved perceived performance</li>\n                <li>Better user experience</li>\n                <li>Optimized for slower connections</li>\n              </ul>\n              <br />\n              <i>\n                Overall, progressive rendering is a powerful technique for\n                improving website performance and user experience, especially in\n                situations where slow loading times are a concern.\n              </i>\n              <br />\n              <br />\n              <h3>17. How will you fix browser-specific styling issues?</h3>\n              Browser-specific styling issues can occur when the same code\n              renders differently on different web browsers, which can result in\n              inconsistent user experiences. To fix browser-specific styling\n              issues, you can follow these steps:\n              <ol>\n                <li>\n                  Identify the specific browser(s) that are causing the issue.\n                  You can use browser developer tools to inspect the code and\n                  see how it is being rendered on different browsers.\n                </li>\n                <li>\n                  Test the changes on different browsers and devices to ensure\n                  that the issue has been resolved and that the styling is\n                  consistent across all platforms.\n                </li>\n                <li>\n                  Consider using a CSS preprocessor like Sass or Less, which can\n                  automatically generate vendor prefixes for you based on the\n                  properties you use in your code.\n                </li>\n              </ol>\n              <br />\n              <i>\n                Overall, fixing browser-specific styling issues requires careful\n                testing, attention to detail, and a good understanding of how\n                different web browsers handle CSS code. By using vendor prefixes\n                and feature detection, you can ensure that your website looks\n                consistent and performs well across all platforms.\n              </i>\n              <br />\n              <br />\n              <h3>\n                18. What is the difference between inline, inline-block, and\n                block?\n              </h3>\n              <ol>\n                <li>\n                  <b>Block Element: </b>Always start on a new line. They will\n                  also take space for an entire row/ width.\n                  <b> Ex. </b>div, p.\n                </li>\n                <li>\n                  <b>Inline Elements: </b>Don't start on a new line, they appear\n                  on the same line as the content and tags beside them.{\" \"}\n                  <b>Ex. </b> span , strong, and img tags.\n                </li>\n                <li>\n                  <b>Inline Block Elements: </b>Inline block elements are\n                  elements that behave like inline elements in terms of how they\n                  flow within a line of text, but can also have a fixed width\n                  and height like block elements.\n                </li>\n              </ol>\n              <div style={titles}>\n                <PrismCode\n                  code={inlinestyles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>\n                By using inline block elements, you can create flexible,\n                responsive layouts that flow like text but also have a fixed\n                size and shape.\n              </i>\n              <br />\n              <br />\n              <h3>\n                19. What's the difference between a relative, fixed, absolute\n                and statically positioned element?\n              </h3>\n              A positioned element is an element whose computed position\n              property is either relative, absolute, fixed or static.\n              <ol>\n                <li>\n                  <b>Static positioning -</b> It default position. the element\n                  will flow into the page as it normally would. The top, right,\n                  bottom, left and z-index properties do not apply.\n                </li>\n                <li>\n                  <b>Relative positioning -</b> The element's position is\n                  adjusted relative to itself, without changing layout.\n                  <br />\n                  The top, right, bottom, and left properties can be used to\n                  adjust the position of the element.\n                </li>\n                <li>\n                  <b>Absolute positioning -</b> The element is removed from the\n                  flow of the page and positioned at a specified position\n                  relative to its closest positioned ancestor if any, or\n                  otherwise relative to the initial containing block. Absolutely\n                  positioned boxes can have margins, and they do not collapse\n                  with any other margins. These elements do not affect the\n                  position of other elements.\n                </li>\n                <li>\n                  <b>Fixed positioning -</b> The element is removed from the\n                  flow of the page and positioned at a specified position\n                  relative to the viewport and doesn't move when scrolled.\n                </li>\n              </ol>\n              <div style={titles}>\n                <PrismCode\n                  code={relativestyles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>20. Background-Image</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={backgroundImg}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>22. What is a z-index, how does it function?</h3>\n              z-index is used for specifying the vertical stacking of the\n              overlapping elements that occur at the time of its positioning.\n              <br />\n              <br />\n              The default value of this property is 0 and can be either positive\n              or negative. Apart from 0, the values of the z-index can be:\n              <br />\n              <ul>\n                <li>\n                  <b>Auto: </b>The stack order will be set equal to the parent.\n                </li>\n                <li>\n                  <b>Number: </b>The number can be positive or negative. It\n                  defines the stack order.\n                </li>\n                <li>\n                  <b>Initial: </b>The default value of 0 is set to the property.\n                </li>\n                <li>\n                  <b>Inherit: </b>The properties are inherited from the parent.\n                </li>\n              </ul>\n              <br />\n              <h3>\n                23. What are the different ways to hide the element using CSS?\n              </h3>\n              <ol>\n                <li>\n                  <b>display: none: </b>It’s not available for screen readers.\n                  The element will not exist in the DOM if <b>display: none</b>{\" \"}\n                  is used.\n                </li>\n                <li>\n                  <b>visibility: hidden: </b>Will take up the space of the\n                  element. It will be available to screen reader users. The\n                  element will actually be present in the DOM, but not shown on\n                  the screen.\n                </li>\n                <li>\n                  <b>position: absolute: </b>Make it available outside the\n                  screen.\n                </li>\n              </ol>\n              <div style={titles}>\n                <PrismCode\n                  code={hiddenStyles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>24. How does this property work overflow: hidden?</h3>\n              The CSS overflow: hidden property is used to hide any content that\n              overflows the bounds of its container. Means if an element's\n              content is larger than its specified width and height, any\n              overflow will be hidden and not visible on the web page.\n              <br />\n              <br />\n              The overflow property:\n              <b>hidden, visible, scroll, auto</b>.\n              <br />\n              <br />\n              <h3>25. How do I restore the default value of a property?</h3>\n              initial keyword used to reset css default value.\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={defoultcss}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>26. When does DOM reflow occur?</h3>\n              DOM reflow, also known as layout or re-rendering, occurs when\n              there is a change to the structure or layout of a web page.\n              Whenever there is a change to the DOM of a web page, the browser\n              must recalculate the positions and sizes of all elements in the\n              page to update the layout accordingly.\n              <br />\n              <br />\n              <b>Reflow occurs when:</b>\n              <ol>\n                <li>Insert, remove or update an element in the DOM.</li>\n                <li>\n                  Modify content on the page, e.g. the text in an input box.\n                </li>\n                <li>Changing the font size or style of text on the page.</li>\n                <li>Resizing the browser window.</li>\n              </ol>\n              <br />\n              <h3>\n                27. Is there any reason you'd want to use translate() instead of\n                absolute positioning.\n              </h3>\n              <ol>\n                <li>\n                  <b>Performance: </b>translate() is a CSS transform that can be\n                  hardware accelerated by the browser, which means it can be\n                  faster and smoother than using absolute positioning for\n                  certain types of animations or transitions.\n                </li>\n                <li>\n                  <b>Maintain layout: </b> When you use absolute positioning,\n                  the element is removed from the normal document flow, which\n                  means other elements on the page may shift around to fill the\n                  space left by the positioned element. Using translate() allows\n                  the element to remain in its original position in the document\n                  flow, which can help maintain the layout of the page.\n                </li>\n                <li>\n                  <b>Responsive design: </b>translate() can be more responsive\n                  than absolute positioning when it comes to adapting to\n                  different screen sizes or device orientations. When you use\n                  translate(), the element's position is relative to its\n                  original position, which means it can adjust more easily to\n                  changes in screen size or orientation.\n                </li>\n              </ol>\n              <br />\n              <br />\n              <h3>\n                28. Difference between reset vs normalize CSS?. How do they\n                differ?\n              </h3>\n              <ol>\n                <li>\n                  <b>Reset CSS: </b>CSS resets aim to remove all built-in\n                  browser styling. <b>Ex. </b> margins, paddings, font-sizes of\n                  all elements are reset to be the same.{\" \"}\n                </li>\n                <li>\n                  <b>Normalize CSS: </b>Aims to make built-in browser styling\n                  consistent across browsers. It also corrects bugs for common\n                  browser dependencies.\n                </li>\n              </ol>\n              <br />\n              <h3>\n                29. What do you have to do to automatically number the heading\n                values of sections and categories?\n              </h3>\n              To automatically number the heading values of sections and\n              categories in a web page, you can use CSS counters.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={counters}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                30. How is the nth-child() different from nth of type selectors?\n              </h3>\n              Both are pseudo-classes. Both used to select elements based on\n              their position within a parent element. However, they differ in\n              the way they count the child elements and the type of element they\n              select.\n              <ol>\n                <li>\n                  <b>nth-child(): </b>\n                  This selector selects the nth child element of a parent,\n                  regardless of its type. It counts all child elements,\n                  including text nodes and other non-element nodes.\n                </li>\n                <li>\n                  <b>nth-of-type(): </b>\n                  This selector selects the nth child element of a parent, based\n                  on its element type. It counts only elements of the same type,\n                  ignoring any text nodes or other non-element nodes.\n                </li>\n              </ol>\n              <div style={titles}>\n                <PrismCode\n                  code={nthchild}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>33. What is the box model in CSS, and how does it work.</h3>\n              The box model is a core concept in CSS that describes how elements\n              are laid out on a web page. Every HTML element on a page is\n              represented as a rectangular box, which consists of four parts:\n              <br />\n              <ul>\n                <li>\n                  <b>Content: </b>This is the actual content of the element,\n                  such as text or images.\n                </li>\n                <br />\n                <li>\n                  <b>Padding: </b>This is the space between the content and the\n                  edge of the element. Padding can be added to any or all of the\n                  four sides of the content box.\n                </li>\n                <br />\n                <li>\n                  <b>Border: </b>This is a line that surrounds the padding and\n                  the content of the element. Borders can be styled with\n                  different colors, widths, and styles.\n                </li>\n                <br />\n                <li>\n                  <b>Margin: </b>This is the space between the border of the\n                  element and the next element on the page. Margins can be added\n                  to any or all of the four sides of the border box.\n                </li>\n                <br />\n              </ul>\n              <img\n                src={boxModels}\n                alt=\"\"\n                className=\"responsive\"\n                style={{ width: \"400px\", height: \"200px\", float: \"right\" }}\n              />\n              <br />\n              The CSS box model is a rectangular layout paradigm for HTML\n              elements that consists of the following:\n              <ol>\n                <li>\n                  The box model determines the size and position of each element\n                  on the page by adding up the width and height of the content,\n                  padding, and border, and then adding the margin to the outside\n                  of the box. The total size of the element is known as the\n                  \"outer box\" or \"box dimensions\".\n                </li>\n              </ol>\n              <br />\n              The border is the layer of the CSS box model that sits between\n              margin and padding. By default, the border does not have any\n              width.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={boxModel}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>\n                How do you center an element horizontally and vertically in CSS?\n              </h3>\n              There are multiple ways to center an element horizontally and\n              vertically in CSS, depending on the layout and requirements of\n              your page.\n              <br />\n              <ul>\n                <li>\n                  <b>Using Flexbox: </b>To center an element horizontally and\n                  vertically using Flexbox, set the parent container to display:\n                  flex, and use the align-items and justify-content properties\n                  to center the child element.{\" \"}\n                </li>\n\n                <div style={titles}>\n                  <PrismCode\n                    code={horizontallycss}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n                <br />\n                <li>\n                  <b>Using absolute positioning: </b>To center an element using\n                  absolute positioning, set the parent container to position:\n                  relative, and the child element to position: absolute. Then,\n                  use the top, bottom, left, and right properties to center the\n                  child element.\n                </li>\n                <div style={titles}>\n                  <PrismCode\n                    code={horizontallycss2}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n                <br />\n\n                <li>\n                  <b>: </b>\n                </li>\n                <br />\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={horizontallycss3}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>35. CSS Flexbox or Grid specs?</h3>\n              <ul>\n                <li>Flexbox is a way to align items into container.</li>\n                <li>Flexbox = Flexible + box</li>\n                <ol>\n                  <li>\n                    <b>main-axis: </b>Horrizontal\n                  </li>\n                  <li>\n                    <b>cross-axis: </b>Vertical\n                  </li>\n                </ol>\n                <br />\n                <li>Flexbox is a 1-D layouts while Grid is 2-D layouts.</li>\n                <li>\n                  Flexbox solves problems such as vertical centering of elements\n                  within a container, sticky footer, etc.\n                </li>\n                <li>Grid use for creating grid-based layouts.</li>\n              </ul>\n              <br />\n              <br />\n              <h3>36. Grid</h3>\n              <ul>\n                <li>\n                  CSS Grid is a powerful layout system that allows for the\n                  creation of complex and flexible grid-based layouts on the\n                  web. It is a two-dimensional layout system, meaning it works\n                  in both rows and columns.\n                </li>\n              </ul>\n              <br />\n              <ol>\n                <li>\n                  <b>Properties for the Parent (Grid Container):</b>\n                </li>\n                <ul>\n                  <li>\n                    <b>Display: </b>\n                  </li>\n                  <li>\n                    <b>Grid-template-rows: </b>Defines the columns and rows of\n                    the grid with a space-separated list of values.\n                  </li>\n                  <li>\n                    Grid lines are automatically assigned positive numbers from\n                    these assignments.\n                  </li>\n                  <li>\n                    <b>grid-template-areas: </b>\n                  </li>\n                </ul>\n              </ol>\n              <div style={titles}>\n                <PrismCode\n                  code={gridspace}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>37. Grid-Template</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={gridtemplates}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>38. Justify-items</h3>\n              <b>align-items: </b>Aligns grid items along the column. This value\n              applies to all grid items inside the container.\n              <ol>\n                <li>\n                  <b>stretch: </b>fills the whole height of the cell (this is\n                  the default).\n                </li>\n                <li>\n                  <b>start: </b>aligns items to be flush with the start edge of\n                  their cell.\n                </li>\n                <li>\n                  <b>end: </b>aligns items to be flush with the end edge of\n                  their cell.\n                </li>\n                <li>\n                  <b>center: </b>aligns items in the center of their cell.\n                </li>\n                <li>\n                  <b>baseline: </b>align items along text baseline.\n                </li>\n              </ol>\n              <div style={titles}>\n                <PrismCode\n                  code={judtifyItems}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>39. Justify-content</h3>\n              <ol>\n                <li>\n                  <b>justify-content: </b>Sometimes the total size of your grid\n                  might be less than the size of its grid container. This could\n                  happen if all of your grid items are sized with non-flexible\n                  units like px. In this case you can set the alignment of the\n                  grid within the grid container.{\" \"}\n                </li>\n                <li>\n                  <b>align-content: </b>Sometimes the total size of your grid\n                  might be less than the size of its grid container. This could\n                  happen if all of your grid items are sized with non-flexible\n                  units like px. In this case you can set the alignment of the\n                  grid within the grid container. This property aligns the grid\n                  along the block (column) axis (as opposed to justify-content\n                  which aligns the grid along the inline (row) axis).\n                </li>\n                <li>\n                  <b>grid-auto-rows: </b>Specifies the size of any\n                  auto-generated grid tracks (aka implicit grid tracks).\n                  Implicit tracks get created when there are more grid items\n                  than cells in the grid or when a grid item is placed outside\n                  of the explicit grid.\n                </li>\n                <li>\n                  <b>grid-auto-flow: </b>If you have grid items that you don’t\n                  explicitly place on the grid, the auto-placement algorithm\n                  kicks in to automatically place the items. This property\n                  controls how the auto-placement algorithm works.\n                </li>\n              </ol>\n              <div style={titles}>\n                <PrismCode\n                  code={justifycontain}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>40. Properties for the Children (Grid Items)</h3>\n              Determines a grid item’s location within the grid by referring to\n              specific grid lines. grid-column-start/grid-row-start is the line\n              where the item begins, and grid-column-end/grid-row-end is the\n              line where the item ends.\n              <ol>\n                <li>\n                  <b>line: </b>can be a number to refer to a numbered grid line,\n                  or a name to refer to a named grid line.\n                </li>\n                <li>\n                  <b>span(number): </b>the item will span across the provided\n                  number of grid tracks.\n                </li>\n                <li>\n                  <b>span(name): </b>the item will span across until it hits the\n                  next line with the provided name.\n                </li>\n                <li>\n                  <b>auto: </b>indicates auto-placement, an automatic span, or a\n                  default span of one.\n                </li>\n              </ol>\n              <br />\n              <b>justify-self: </b>Aligns a grid item inside a cell along the\n              inline (row) axis (as opposed to align-self which aligns along the\n              block (column) axis). This value applies to a grid item inside a\n              single cell.\n              <br />\n              <b>align-self: </b>Aligns a grid item inside a cell along the\n              block (column) axis (as opposed to justify-self which aligns along\n              the inline (row) axis). This value applies to the content inside a\n              single grid item.\n              <div style={titles}>\n                <PrismCode\n                  code={propertieschilds}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <h3>41. Properties of flexbox?</h3>\n              Flexbox is a layout module that provides a flexible way to\n              organize content within a container. It allows for the creation of\n              complex and responsive layouts with relative ease.\n              <br />\n              <br />\n              <ul>\n                <li>\n                  <b>flex-direction: </b>Defining the direction.\n                </li>\n                <ol>\n                  <li>\n                    <b>row: </b>Stacks items horizontally from left to right in\n                    the flex container.\n                  </li>\n                  <li>\n                    <b>column: </b>Stacks items vertically from top to bottom in\n                    the flex container.\n                  </li>\n                  <li>\n                    <b>row-reverse: </b>Horizontally from right to left.\n                  </li>\n                  <li>\n                    <b>column-reverse: </b>Vertically from bottom to top.\n                  </li>\n                </ol>\n                <br />\n\n                <li>\n                  <b>flex-wrap: </b>Specifies of the flex items should be\n                  wrapped/ not. Possible values are:\n                </li>\n                <ol>\n                  <li>\n                    <b>wrap: </b>The flex items wood be wrapped if needed.\n                  </li>\n                  <li>\n                    <b>nowrap: </b>default value.\n                  </li>\n                  <li>\n                    <b>wrap-reverse: </b>Wrapped in reverse order.\n                  </li>\n                </ol>\n                <br />\n\n                <li>\n                  <b>flex-flow: </b>This property is used for setting both\n                  flex-direction and flex-wrap properties in one statement.\n                </li>\n                <br />\n\n                <li>\n                  <b>justify-content: </b>Used for aligning the flex items.\n                  Possible values are:\n                </li>\n                <ol>\n                  <li>\n                    <b>center: </b>All the flex items are present at the center\n                    of the container.\n                  </li>\n                  <li>\n                    <b>flex-start: </b>States that the items are aligned at the\n                    start of the container. This is the default value.\n                  </li>\n                  <li>\n                    <b>flex-end: </b>Items are aligned at the end of the\n                    container.\n                  </li>\n                  <li>\n                    <b>space-around: </b>Displays the items having space\n                    between, before, around the items.\n                  </li>\n                  <li>\n                    <b>space-between: </b>Displays items with spaces between the\n                    lines.\n                  </li>\n                </ol>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={flextFloat}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>42. Describe floats and how they work</h3>\n              <p>\n                <ol>\n                  <li>\n                    Float is a CSS property that allows elements to be\n                    positioned to the left or right of their containing block,\n                    allowing text and inline elements to flow around it. Float\n                    is commonly used for creating multi-column layouts or\n                    positioning images and other media on a webpage.\n                  </li>\n\n                  <li>\n                    float has 3 properties: <b>Left, Right, None</b>.\n                  </li>\n                </ol>\n              </p>\n              <ul>\n                <li>\n                  <b>flex-direction: </b>By default flex-direction is row.\n                </li>\n                <li>\n                  <b>space-between: </b>Not apply on start and end.\n                </li>\n                <li>\n                  <b>space-evenly: </b>Apply on start and end also.\n                </li>\n                <li>\n                  <b>space-around: </b>Like padding on box.\n                </li>\n                <li>\n                  <b>flex-grow: </b>Adjeced box on the base of screen\n                </li>\n                <li>\n                  <b>fraction (fr): </b>Divide on the basis of screen-size\n                </li>\n              </ul>\n              <br />\n              <b>How to Use Float in CSS</b>\n              <br />\n              <ol>\n                <li>float: left/ none/ inherit;</li>\n              </ol>\n              <div style={titles}>\n                <PrismCode\n                  code={floatele}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>43. Purpose of clearing floats in CSS</h3>\n              <ol>\n                <li>\n                  Clearing floats is a technique used in CSS to prevent elements\n                  from wrapping around floated elements. When an element is\n                  floated, it is taken out of the normal document flow, which\n                  can cause issues with layout and positioning if other elements\n                  on the page are affected by the float.\n                </li>\n                <li>\n                  To prevent this from happening, we can use the clear property\n                  to specify that an element should not be allowed to float next\n                  to a floated element. The clear property can be set to left,\n                  right, both, or none, depending on which side of the floated\n                  element you want to clear.\n                </li>\n              </ol>\n              <br />\n              <br />\n              <h3>44. Explain the usage of \"table-layout\" property</h3>\n              <p>\n                The table-layout property defines the algorithm used to layout\n                table cells, rows, and columns.\n              </p>\n              <ol>\n                <li>\n                  <b>auto -</b> Browsers use an automatic table layout\n                  algorithm. The column width is set by the widest unbreakable\n                  content in the cells.\n                </li>\n                <li>\n                  <b>fixed -</b>Fixed layout based on the first row. And the\n                  rest of the table follows. If no widths are present on the\n                  first row, the column widths are divided equally across the\n                  table.\n                </li>\n                <li>\n                  <b>initial -</b> Sets this property to its default value.\n                </li>\n                <li>\n                  <b>inherit -</b> Property from its parent element.\n                </li>\n              </ol>\n              <div style={titles}>\n                <PrismCode\n                  code={table_layout}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                45. Describe pseudo-elements and discuss what they are used for.\n              </h3>\n              <p>\n                Pseudo-elements are a type of selector in CSS that allow you to\n                style a specific part of an element's content, such as the first\n                letter or line of text. Pseudo-elements are denoted by two\n                colons (::) before the selector name.\n              </p>\n              <br />\n              <b>Here are some commonly used pseudo-elements:</b>\n              <ol>\n                <li>\n                  <b>::before :</b> Allows you to insert content before the\n                  content of an element.\n                </li>\n                <li>\n                  <b>::after :</b>Allows you to insert content after the content\n                  of an element.\n                </li>\n                <li>\n                  <b>::first-letter :</b>Targets the first letter of text\n                  content within an element.\n                </li>\n                <li>\n                  <b>::first-line :</b>Targets the first line of text content\n                  within an element.\n                </li>\n                <li>\n                  <b>::selection :</b>Targets the portion of an element's\n                  content that has been selected by the user.\n                </li>\n              </ol>\n              <br />\n              Pseudo-elements are useful for adding decorative elements to your\n              design, such as icons or borders, without adding extra markup to\n              your HTML. They can also be used to style specific parts of text,\n              such as the first letter or line of a paragraph\n              <br />\n              <b>\n                example of how to use the ::before pseudo-element to add an icon\n                before a link.\n              </b>\n              <div style={titles}>\n                <PrismCode\n                  code={psudoele}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>\n                There are currently seven pseudo-elements in CSS. They are:{\" \"}\n              </b>\n              <br />\n              <ul>\n                <li>::after</li>\n                <li>::before</li>\n                <li>::first-letter</li>\n                <li>::first-line</li>\n                <li>::marker</li>\n                <li>::placeholder</li>\n                <li>::selection</li>\n              </ul>\n              <br />\n              <b>Pseudo-classes: </b>A pseudo-class is used to define a special\n              state of an element.\n              <ol>\n                <li>Style an element when a user mouses over it.</li>\n                <li>Style visited and unvisited links differently.</li>\n                <li>Style an element when it gets focus.</li>\n              </ol>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={pseudoclas}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>LESS: (Leaner Stylesheets)</b>\n              <ol>\n                <li>\n                  {\" \"}\n                  LESS is easy to add to any javascript projects by using NPM or\n                  less.js file.\n                </li>\n                <li>uses the extension .less.</li>\n              </ol>\n              <br />\n              <b>Stylus:</b>\n              <br />\n              Stylus offers a great deal of flexibility in writing syntax,\n              supports native CSS as well as allows omission of brackets,\n              colons, and semicolons.\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={sass}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>47. What is the importance of CSS Sprites?</h3>\n              CSS sprites are used for combining multiple images in a single\n              larger image. They are commonly used for representing icons that\n              are used in the user interfaces. The main advantages of using\n              sprites are:\n              <br />\n              <ol>\n                <li>\n                  It reduces the number of HTTP requests to get data of multiple\n                  images.\n                </li>\n                <li>\n                  It helps in downloading assets in advance that help display\n                  icons/ images upon hover/ other pseudo-states.\n                </li>\n                <li>It use as a background image only.</li>\n              </ol>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={sprites}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>48. What do you understand by tweening in CSS?</h3>\n              Tweening is the process of filling the gaps between the key\n              sequences, i.e between the keyframes that are already created.\n              Keyframes are those frames that represent start and end point of\n              animation action.\n              <br /> we use properties like transforms - matrix, translate,\n              scale, rotate etc.\n              <br />\n              <br />\n              In the below example, we are generating intermediate frames of\n              paragraph elements to slide through from the start to the right\n              edge of the browser.\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={tweening}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(CssBasics);\n"]},"metadata":{},"sourceType":"module"}