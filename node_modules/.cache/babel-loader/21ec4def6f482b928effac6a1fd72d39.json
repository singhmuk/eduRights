{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/ml/deepMl/numpyPy.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport gradient from '../../../assets/ML/array_vs_list.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst ndarray = `\narr = np.array(42)                                                                      #0-D arrays, or Scalars.\narr = np.array([1, 2, 3, 4, 5])                                                         #1-D Arrays\narr = np.array([[1, 2, 3], [4, 5, 6]])                                                  #2-D Arrays\narr = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])                        #3-D arrays\narr2 = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]], dtype=np.float64)\narr3 = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]], dtype=complex)\narrStr = np.array([1, 2, 3, 4], dtype='S')                                              #Creating Arrays With a Data String.\narrFloat = np.array([1.1, 2.1, 3.1])\n`.trim();\nconst pyFuns = `\narr = np.array([1, 2, 3, 6, 7, 8, 9, 0])\narrs = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])\narr2 = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]], dtype=np.float64)\narr3 = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]], dtype=complex)\narr4 = np.array([[1,2],[3,4],[5,6]])\narrStr = np.array([1, 2, 3, 4], dtype='S')                             #array with data type string\narrFloat = np.array([1.1, 2.1, 3.1])\n\n\nx = arr[0]\nx = arr[0, 1]\nx = arr[1:5:2]                                                          #[start:end:step]\nx = arr.dtype\nx = arrFloat.astype(int)                                                #Change data type from float to integer\nx = arrFloat.astype(bool)                                               #float to boolean\n\n\nx = arr.ndim\nx = arr.itemsize                                                        # itemsize is 4 bytes\nx = arr.size                                                            # total bunber of elements\nx = arr.shape                                                           \nx = arr4.reshape(2,3)                                                   # information of dimension\nx = arr4.ravel()\nx = arr4.min() \nx = arr4.max() \nx = arr4.sum()  \nx = arr.sum(axis=0)\n\nnewarr = np.concatenate((arr, arr2), axis=1)                            #join array\nnewarr = np.stack((arr, arr2), axis=1)                                  #join array using stack\nnewarr = np.hstack((arr, arr2))                                         #join array along rows\nnewarr = np.vstack((arr, arr2))                                         #join array along colom\n\nnewarr = np.array_split(arr, 3, axis=0)                                #Splitting breaks one array into multiple.\nx = np.where(arr == 7)                                                 #Find the indexes where the value is 7.\nx = np.searchsorted(arr, 7)\nx = np.sort(arr)\n\nx = np.sqrt(arr)  \nx = np.std(arr)                                                         #standard deviation\nx = arr + arr2  \nx = arr.dot(arr4) \n`.trim();\nconst zeros = `\nx = np.zeros((3,4))\nx = np.ones((3,4))\nx = np.arange(1, 5, 2)                                                  # 2 steps\nx = np.linspace(1, 5, 50)                                               # start, stop, num\n\nprint(x)\n`.trim();\nconst numpy = `import numpy as np\nar = np.array([1, 3, 2, 4, 5, 6])\nprint(ar.argsort()[-3:][::-1])\n`.trim();\nconst Copy = `\n#Copy\narr = np.array([1, 2, 3])\narrCopy = arr.copy()\narr[0] = 42\n\nprint(arr)\nprint(arrCopy)\n\n\n#View\narr = np.array([1, 2, 3])\narrView = arr.view()\narr[0] = 42\n\nprint(arr)\nprint(arrView)\n`.trim();\nconst iterating = `\narr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\n\nfor x in arr:\n  print(x)\n`.trim(); // const Series = ``.trim()\n// const Series = ``.trim()\n\nclass Numpys extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"Different forms of data\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Tabular/ spreadsheet-like data in which each column may be a different type (string, numeric, date, etc). \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Multiple tables of data interrelated by key columns (primary/ foreign keys for a SQL user).\")), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"A large percentage of datasets can be transformed into a structured form that is more suitable for analysis and modeling.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"NumPy\"), \"Benifits of numpy over python list.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Fast.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"Less Memory.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"NumPy create a N-dimensional array in python.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"Used for working with arrays.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"It also has functions for working in domain of linear algebra, fourier transform, and matrices.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"NumPy aims to provide an array object that is up to 50x faster than traditional Python lists.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"NumPy Data Types is Objects\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"It internally stores data in a contiguous block of memory, independent of other built-in Python objects.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: gradient,\n      alt: \"gradient\",\n      className: \"responsive\",\n      style: redesign,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"Data Types\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"i: \"), \"integer\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"b: \"), \"boolean\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"u: \"), \"unsigned integer\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"f: \"), \"float\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"c: \"), \"complex float\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"m: \"), \"timedelta\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"M: \"), \"datetime\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"O: \"), \"object\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"S: \"), \"string\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"U: \"), \"unicode string\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"V: \"), \"fixed chunk of memory for other type ( void )\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"Create a NumPy ndarray Object\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"The array object in NumPy is called ndarray.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"An array can have any number of dimensions.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"When the array is created, you can define the number of dimensions by using the ndmin argument.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"arr = np.array([1, 2, 3, 4], ndmin=5)\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: ndarray,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \"zeros\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: zeros,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Write a code to get the indices of N maximum values from a NumPy array.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: numpy,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, \"The Difference Between Copy and View\"), \"Copy is a new array, and the view is just a view of the original array.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Copy,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"Iterating\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: iterating,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, \"Functions:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, \"ndim: \"), \"Return how many dimensions the array have.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, \"ravel(): \"), \"Used to change a 2-dimensional array or a multi-dimensional array into a contiguous flattened array (1D array with all the input-array elements and with the same type as it. ravel() return new array.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, \"arr.reshape(4, 3): \"), \"Reshape From 1-D to 2-D.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, \"arr[0]: \"), \"Array indexing to access an array element.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, \"dtype: \"), \"Returns the data type of the array.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, \"arr.shape: \"), \"Returns a tuple with each index having the number of corresponding elements.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, \"Stack: \"), \"Stacking is same as concatenation, the only difference is that stacking is done along a new axis.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, \"np.hstack((arr1, arr2)): \"), \"To stack along rows.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, \"np.vstack((arr1, arr2)): \"), \"To stack along columns.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, \"np.dstack((arr1, arr2)): \"), \"To stack along height, which is the same as depth.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, \"np.where(arr == 4): \"), \"Search an array for a certain value, and return the indexes that get a match.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, \"np.searchsorted(arr, 7, side='right'): \"), \"Performs a binary search in the array, and returns the index where the specified value would be inserted to maintain the search order.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, \"np.linspace(1, 5, 50): \"), \"Is Linear list space. Returns evenly separated values over a specified period. The system implicitly calculates the step size.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: pyFuns,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Numpys);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/ml/deepMl/numpyPy.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","gradient","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","ndarray","trim","pyFuns","zeros","numpy","Copy","iterating","Numpys","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport gradient from '../../../assets/ML/array_vs_list.png'\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst ndarray = `\narr = np.array(42)                                                                      #0-D arrays, or Scalars.\narr = np.array([1, 2, 3, 4, 5])                                                         #1-D Arrays\narr = np.array([[1, 2, 3], [4, 5, 6]])                                                  #2-D Arrays\narr = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])                        #3-D arrays\narr2 = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]], dtype=np.float64)\narr3 = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]], dtype=complex)\narrStr = np.array([1, 2, 3, 4], dtype='S')                                              #Creating Arrays With a Data String.\narrFloat = np.array([1.1, 2.1, 3.1])\n`.trim()\n\nconst pyFuns = `\narr = np.array([1, 2, 3, 6, 7, 8, 9, 0])\narrs = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])\narr2 = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]], dtype=np.float64)\narr3 = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]], dtype=complex)\narr4 = np.array([[1,2],[3,4],[5,6]])\narrStr = np.array([1, 2, 3, 4], dtype='S')                             #array with data type string\narrFloat = np.array([1.1, 2.1, 3.1])\n\n\nx = arr[0]\nx = arr[0, 1]\nx = arr[1:5:2]                                                          #[start:end:step]\nx = arr.dtype\nx = arrFloat.astype(int)                                                #Change data type from float to integer\nx = arrFloat.astype(bool)                                               #float to boolean\n\n\nx = arr.ndim\nx = arr.itemsize                                                        # itemsize is 4 bytes\nx = arr.size                                                            # total bunber of elements\nx = arr.shape                                                           \nx = arr4.reshape(2,3)                                                   # information of dimension\nx = arr4.ravel()\nx = arr4.min() \nx = arr4.max() \nx = arr4.sum()  \nx = arr.sum(axis=0)\n\nnewarr = np.concatenate((arr, arr2), axis=1)                            #join array\nnewarr = np.stack((arr, arr2), axis=1)                                  #join array using stack\nnewarr = np.hstack((arr, arr2))                                         #join array along rows\nnewarr = np.vstack((arr, arr2))                                         #join array along colom\n\nnewarr = np.array_split(arr, 3, axis=0)                                #Splitting breaks one array into multiple.\nx = np.where(arr == 7)                                                 #Find the indexes where the value is 7.\nx = np.searchsorted(arr, 7)\nx = np.sort(arr)\n\nx = np.sqrt(arr)  \nx = np.std(arr)                                                         #standard deviation\nx = arr + arr2  \nx = arr.dot(arr4) \n`.trim()\n\nconst zeros = `\nx = np.zeros((3,4))\nx = np.ones((3,4))\nx = np.arange(1, 5, 2)                                                  # 2 steps\nx = np.linspace(1, 5, 50)                                               # start, stop, num\n\nprint(x)\n`.trim()\n\n\nconst numpy = `import numpy as np\nar = np.array([1, 3, 2, 4, 5, 6])\nprint(ar.argsort()[-3:][::-1])\n`.trim()\n\nconst Copy = `\n#Copy\narr = np.array([1, 2, 3])\narrCopy = arr.copy()\narr[0] = 42\n\nprint(arr)\nprint(arrCopy)\n\n\n#View\narr = np.array([1, 2, 3])\narrView = arr.view()\narr[0] = 42\n\nprint(arr)\nprint(arrView)\n`.trim()\n\nconst iterating = `\narr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\n\nfor x in arr:\n  print(x)\n`.trim()\n\n// const Series = ``.trim()\n\n// const Series = ``.trim()\n\n\n\nclass Numpys extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Different forms of data</h3>\n              <ul>\n                <li>Tabular/ spreadsheet-like data in which each column may be a different type (string, numeric, date, etc). </li>\n                <li>Multiple tables of data interrelated by key columns (primary/ foreign keys for a SQL user).</li>\n              </ul>\n              <b>A large percentage of datasets can be transformed into a structured form that is more suitable for analysis and modeling.</b>\n              <br />\n\n              <h3>NumPy</h3>\n              Benifits of numpy over python list.\n              <ul>\n                <li>Fast.</li>\n                <li>Less Memory.</li>\n                <li>NumPy create a N-dimensional array in python.</li>\n                <li>Used for working with arrays.</li>\n                <li>It also has functions for working in domain of linear algebra, fourier transform, and matrices.</li>\n                <li>NumPy aims to provide an array object that is up to 50x faster than traditional Python lists.</li>\n                <li>NumPy Data Types is Objects</li>\n                <li>It internally stores data in a contiguous block of memory, independent of other built-in Python objects.</li>\n              </ul>\n              <br />\n              <img src={gradient} alt=\"gradient\" className=\"responsive\" style={redesign} />\n              <br />\n\n              <h3>Data Types</h3>\n              <ul>\n                <li><b>i: </b>integer</li>\n                <li><b>b: </b>boolean</li>\n                <li><b>u: </b>unsigned integer</li>\n                <li><b>f: </b>float</li>\n                <li><b>c: </b>complex float</li>\n                <li><b>m: </b>timedelta</li>\n                <li><b>M: </b>datetime</li>\n                <li><b>O: </b>object</li>\n                <li><b>S: </b>string</li>\n                <li><b>U: </b>unicode string</li>\n                <li><b>V: </b>fixed chunk of memory for other type ( void )</li>\n              </ul>\n              <br />\n\n              <h3>Create a NumPy ndarray Object</h3>\n              <ul>\n                <li>The array object in NumPy is called ndarray.</li>\n                <li>An array can have any number of dimensions.</li>\n                <li>When the array is created, you can define the number of dimensions by using the ndmin argument.</li>\n                <b>arr = np.array([1, 2, 3, 4], ndmin=5)</b>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={ndarray}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>zeros</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={zeros}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Write a code to get the indices of N maximum values from a NumPy array.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={numpy}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>The Difference Between Copy and View</h3>\n              Copy is a new array, and the view is just a view of the original array.\n              <div style={titles}>\n                <PrismCode\n                  code={Copy}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Iterating</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={iterating}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Functions:</b>\n              <ul>\n                <li><b>ndim: </b>Return how many dimensions the array have.</li>\n                <li><b>ravel(): </b>Used to change a 2-dimensional array or a multi-dimensional array into a contiguous flattened array\n                  (1D array with all the input-array elements and with the same type as it. ravel() return new array.</li>\n                <li><b>arr.reshape(4, 3): </b>Reshape From 1-D to 2-D.</li>\n                <li><b>arr[0]: </b>Array indexing to access an array element.</li>\n                <li><b>dtype: </b>Returns the data type of the array.</li>\n                <li><b>arr.shape: </b>Returns a tuple with each index having the number of corresponding elements.</li>\n                <li><b>Stack: </b>Stacking is same as concatenation, the only difference is that stacking is done along a new axis.</li>\n                <li><b>np.hstack((arr1, arr2)): </b>To stack along rows.</li>\n                <li><b>np.vstack((arr1, arr2)): </b>To stack along columns.</li>\n                <li><b>np.dstack((arr1, arr2)): </b>To stack along height, which is the same as depth.</li>\n                <li><b>np.where(arr == 4): </b>Search an array for a certain value, and return the indexes that get a match.</li>\n                <li><b>np.searchsorted(arr, 7, side='right'): </b>Performs a binary search in the array, and returns the index where the specified\n                  value would be inserted to maintain the search order.</li>\n                <li><b>np.linspace(1, 5, 50): </b>Is Linear list space. Returns evenly separated values over a specified period. The system implicitly\n                  calculates the step size.</li>\n\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={pyFuns}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid >\n    )\n  }\n}\n\nexport default (withStyles(styles)(Numpys));\n"]},"metadata":{},"sourceType":"module"}