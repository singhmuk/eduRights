{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic7.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst largestPerimeter = `\nconst largestPerimeter = function (A = []) {\n  A.sort((a, b) => b - a)\n  for (let i = 0; i < A.length - 2; i++) {\n    if (A[i] < A[i + 1] + A[i + 2]) {\n      return A[i] + A[i + 1] + A[i + 2]\n    }\n  }\n  return 0\n}\n\nconsole.log(largestPerimeter([2,1,2]))`.trim();\nconst brokenCalc = `\nconst brokenCalc = function (X, Y) {\n  let result = 0\n  while (Y > X) {\n    if (Y % 2 === 0) {\n      Y /= 2\n    } else {\n      Y += 1\n    }\n    result += 1\n  }\n  return result + X - Y\n}\n\nconsole.log(brokenCalc(5, 8))`.trim();\nconst shuffle = `\nfunction shuffle(nums, n) {\n  const result = []\n  for (let i = 0; i < n; i++) {\n    result.push(nums[i], nums[i + n])\n  }\n  return result\n};\n\nconsole.log(shuffle([2,5,1,3,4,7], 3))`.trim();\nconst destCity = `\nconst destCity = function (paths) {\n  let result = ''\n  const map = paths.reduce((acc, [a, b]) => {\n    acc[a] = 1\n    acc[b] = (acc[b] || 0)\n    if (acc[b] === 0) {\n      result = b\n    }\n    return acc\n  }, {})\n  return Object.keys(map).filter(x => map[x] === 0)[0]\n}\n\nconsole.log(destCity([[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]))`.trim();\nconst maxScore = `\nconst maxScore = function (nums, k) {\n  const size = nums.length - k\n  let currentSum = nums.slice(0, size).reduce((acc, num) => acc + num, 0)\n  let min = currentSum\n  for (let i = size; i < nums.length; i++) {\n    currentSum = currentSum + nums[i] - nums[i - size]\n    min = Math.min(min, currentSum)\n  }\n  return nums.reduce((acc, num) => acc + num, 0) - min\n}\n\nconsole.log(maxScore([1,79,80,1,1,1,200,1], 3))`.trim();\n\nclass DSLogic7 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"1. Largest Perimeter Triangle.\"), \"Given an array A of positive lengths, return the largest perimeter of a triangle with non-zero area, formed from 3 of these lengths.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), \"If it is impossible to form any triangle of non-zero area, return 0.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: largestPerimeter,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"2. Broken Calculator.\"), \"On a broken calculator that has a number showing on its display, we can perform two operations:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Double: \"), \"Multiply the number on the display by 2, or;\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Decrement: \"), \"Subtract 1 from the number on the display.\")), \"Initially, the calculator is displaying the number X.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), \"Return the minimum number of operations needed to display the number Y.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: brokenCalc,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"4. Shuffle the Array.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [2,5,1,3,4,7], n = 3\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"Output: \"), \"[2,3,5,4,1,7] \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Explanation: \"), \"Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: shuffle,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(DSLogic7);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic7.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","largestPerimeter","trim","brokenCalc","shuffle","destCity","maxScore","DSLogic7","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst largestPerimeter = `\nconst largestPerimeter = function (A = []) {\n  A.sort((a, b) => b - a)\n  for (let i = 0; i < A.length - 2; i++) {\n    if (A[i] < A[i + 1] + A[i + 2]) {\n      return A[i] + A[i + 1] + A[i + 2]\n    }\n  }\n  return 0\n}\n\nconsole.log(largestPerimeter([2,1,2]))`.trim();\n\nconst brokenCalc = `\nconst brokenCalc = function (X, Y) {\n  let result = 0\n  while (Y > X) {\n    if (Y % 2 === 0) {\n      Y /= 2\n    } else {\n      Y += 1\n    }\n    result += 1\n  }\n  return result + X - Y\n}\n\nconsole.log(brokenCalc(5, 8))`.trim();\n\nconst shuffle = `\nfunction shuffle(nums, n) {\n  const result = []\n  for (let i = 0; i < n; i++) {\n    result.push(nums[i], nums[i + n])\n  }\n  return result\n};\n\nconsole.log(shuffle([2,5,1,3,4,7], 3))`.trim();\n\nconst destCity = `\nconst destCity = function (paths) {\n  let result = ''\n  const map = paths.reduce((acc, [a, b]) => {\n    acc[a] = 1\n    acc[b] = (acc[b] || 0)\n    if (acc[b] === 0) {\n      result = b\n    }\n    return acc\n  }, {})\n  return Object.keys(map).filter(x => map[x] === 0)[0]\n}\n\nconsole.log(destCity([[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]))`.trim();\n\nconst maxScore = `\nconst maxScore = function (nums, k) {\n  const size = nums.length - k\n  let currentSum = nums.slice(0, size).reduce((acc, num) => acc + num, 0)\n  let min = currentSum\n  for (let i = size; i < nums.length; i++) {\n    currentSum = currentSum + nums[i] - nums[i - size]\n    min = Math.min(min, currentSum)\n  }\n  return nums.reduce((acc, num) => acc + num, 0) - min\n}\n\nconsole.log(maxScore([1,79,80,1,1,1,200,1], 3))`.trim();\n\n\n\n\n\n\n\nclass DSLogic7 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Largest Perimeter Triangle.</h3>\n              Given an array A of positive lengths, return the largest perimeter of a triangle with non-zero area, formed from 3 of these lengths.\n              <br/>\n              If it is impossible to form any triangle of non-zero area, return 0.\n              <div style={titles}>\n                <PrismCode\n                  code={largestPerimeter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>2. Broken Calculator.</h3>\n              On a broken calculator that has a number showing on its display, we can perform two operations:\n              <br/>\n              <ul>\n                <li><b>Double: </b>Multiply the number on the display by 2, or;</li>\n                <li><b>Decrement: </b>Subtract 1 from the number on the display.</li>\n              </ul>\n              Initially, the calculator is displaying the number X.\n              <br/>\n              Return the minimum number of operations needed to display the number Y.\n              <div style={titles}>\n                <PrismCode\n                  code={brokenCalc}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>4. Shuffle the Array.</h3>\n              <b>Input: </b>nums = [2,5,1,3,4,7], n = 3<br/>\n              <b>Output: </b>[2,3,5,4,1,7] <br/>\n              <b>Explanation: </b>Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].\n              <div style={titles}>\n                <PrismCode\n                  code={shuffle}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              \n\n\n             \n\n              \n\n             \n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic7));\n"]},"metadata":{},"sourceType":"module"}