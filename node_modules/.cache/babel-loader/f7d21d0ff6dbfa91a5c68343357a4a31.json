{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/trees.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst generateTrees = `\nfunction TreeNode(val) {\n  this.val = val\n  this.left = null\n  this.right = null\n}\nconst generateTrees = (n) => {\n  if (n === 0) {\n    return []\n  }\n  const numbers = new Array(n).fill(0).map((v, index) => index + 1)\n  const memo = {}\n  const compose = (number, left, right) => {\n    const result = []\n    for (let i = 0; i < left.length; i++) {\n      for (let j = 0; j < right.length; j++) {\n        const node = new TreeNode(number)\n        node.left = left[i]\n        node.right = right[j]\n        result.push(node)\n      }\n    }\n    return result\n  }\n  const aux = (list = []) => {\n    const key = list.toString()\n    if (memo[key] !== undefined) {\n      return memo[list.toString()]\n    }\n    if (list.length === 0) {\n      return [null]\n    }\n    memo[key] = list.reduce(\n      (acc, number) => {\n        acc.push(\n          ...compose(\n            number,\n            aux(list.filter(x => x < number)),\n            aux(list.filter(x => x > number)),\n          ),\n        )\n        return acc\n      },\n      [],\n    )\n    return memo[key]\n  }\n  return aux(numbers)\n}\n\nconsole.log(generateTrees(3))`.trim();\nconst isValidBST = `\nconst isValidBST = function (root) {\n  const aux = (node) => {\n    if (!node) {\n      return [true, null, null]\n    }\n    const [leftValid, leftMin, leftMax] = aux(node.left)\n    const [rightValid, rightMin, rightMax] = aux(node.right)\n\n    let valid = leftValid && rightValid\n    if (leftMax !== null && leftMax >= node.val) {\n      valid = false\n    }\n    if (rightMin !== null && rightMin <= node.val) {\n      valid = false\n    }\n    const currentMin = leftMin === null ? node.val : leftMin\n    const currentMax = rightMax === null ? node.val : rightMax\n    return [valid, currentMin, currentMax]\n  }\n  return aux(root)[0]\n}\n\nconsole.log(isValidBST(3))`.trim();\nconst recoverTree = `\nconst recoverTree = function (root) {\n  let first = null\n  let second = null\n  let prev = null\n  const aux = (node) => {\n    if (node) {\n      aux(node.left)\n      if (prev && prev.val > node.val) {\n        if (!first) {\n          first = prev\n          second = node\n        } else {\n          second = node\n        }\n      }\n      prev = node\n      aux(node.right)\n    }\n  }\n  aux(root)\n  if (first && second) {\n    const temp = first.val\n    first.val = second.val\n    second.val = temp\n  }\n}\n\nconsole.log(recoverTree([1,3,null,2]))`.trim();\nconst isSameTree = `\nconst isSameTree = function (p, q) {\n  if ((p && !q) || (!p && q)) {\n    return false\n  }\n  if (!p && !q) {\n    return true\n  }\n  const leftSame = isSameTree(p.left, q.left)\n  const rightSame = isSameTree(p.right, q.right)\n  return leftSame && rightSame && (p.val === q.val)\n}\n\nconsole.log(isSameTree([1,3,null,2], [1,3,null,2]))`.trim();\nconst isSymmetric = `\nconst isSymmetric = function (root) {\n  const aux = (node, level, result) => {\n    if (!result[level]) {\n      result[level] = []\n    }\n    if (!node) {\n      result[level].push(null)\n      return result\n    }\n    result[level].push(node.val)\n    aux(node.left, level + 1, result)\n    aux(node.right, level + 1, result)\n    return result\n  }\n  const isSymmetricHelper = (values = []) => {\n    for (let i = 0; i <= values.length / 2; i++) {\n      if (values[i] !== values[values.length - 1 - i]) {\n        return false\n      }\n    }\n    return true\n  }\n  const result = aux(root, 0, [])\n  for (let i = 0; i < result.length; i++) {\n    if (!isSymmetricHelper(result[i])) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(isSymmetric([1,2,2,3,4,4,3]))`.trim();\nconst sortedArrayToBST = ``.trim(); // const graph = ``.trim();\n// const graph = ``.trim();\n// const stack = ``.trim();\n// const stack = ``.trim();\n\nclass Trees extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: graph,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"2. Unique Binary Search Trees.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, \"Input: \"), \"3\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, \"Output: \"), \"[\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }), \"[1,null,3,2],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }), \"[3,2,null,1],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }), \"[3,1,null,null,2],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }), \"[2,1,3],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }), \"[1,null,2,null,3] ]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: generateTrees,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, \"3. Validate Binary Search Tree.\"), \"Given a binary tree, determine if it is a valid binary search tree (BST).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }), \"Assume a BST is defined as follows:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, \"The left subtree of a node contains only nodes with keys less than the node's key.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, \"The right subtree of a node contains only nodes with keys greater than the node's key.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \"Both the left and right subtrees must also be binary search trees.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, \"Input: \"), \" [2,1,3]\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, \"Output: \"), \" true\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, \"Example 2: \"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, \"Input: \"), \"[5,1,4,null,null,3,6]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, \"Output: \"), \"false\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, \"Explanation: \"), \"The root node's value is 5 but its right child's value is 4.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isValidBST,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, \"3. Recover Binary Search Tree.\"), \"Two elements of a binary search tree (BST) are swapped by mistake.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }), \"Recover the tree without changing its structure. \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, \"Input: \"), \" [3,1,4,null,null,2]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, \"Output: \"), \" [2,1,4,null,null,3]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: recoverTree,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, \"4. Same Tree.\"), \"Given two binary trees, write a function to check if they are the same or not.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }), \"Two binary trees are considered the same if they are structurally identical and the nodes have the same value.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isSameTree,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, \"5. Symmetric Tree.\"), \"Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isSymmetric,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, \"6. Convert Sorted Array to Binary Search Tree.\"), \"Given an array where elements are sorted in ascending order, convert it to a height balanced BST.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }), \"For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: sortedArrayToBST,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: graph,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: graph,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: graph,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Trees);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/trees.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","generateTrees","trim","isValidBST","recoverTree","isSameTree","isSymmetric","sortedArrayToBST","Trees","componentDidMount","setTimeout","highlightAll","render","classes","props","graph"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst generateTrees = `\nfunction TreeNode(val) {\n  this.val = val\n  this.left = null\n  this.right = null\n}\nconst generateTrees = (n) => {\n  if (n === 0) {\n    return []\n  }\n  const numbers = new Array(n).fill(0).map((v, index) => index + 1)\n  const memo = {}\n  const compose = (number, left, right) => {\n    const result = []\n    for (let i = 0; i < left.length; i++) {\n      for (let j = 0; j < right.length; j++) {\n        const node = new TreeNode(number)\n        node.left = left[i]\n        node.right = right[j]\n        result.push(node)\n      }\n    }\n    return result\n  }\n  const aux = (list = []) => {\n    const key = list.toString()\n    if (memo[key] !== undefined) {\n      return memo[list.toString()]\n    }\n    if (list.length === 0) {\n      return [null]\n    }\n    memo[key] = list.reduce(\n      (acc, number) => {\n        acc.push(\n          ...compose(\n            number,\n            aux(list.filter(x => x < number)),\n            aux(list.filter(x => x > number)),\n          ),\n        )\n        return acc\n      },\n      [],\n    )\n    return memo[key]\n  }\n  return aux(numbers)\n}\n\nconsole.log(generateTrees(3))`.trim();\n\nconst isValidBST = `\nconst isValidBST = function (root) {\n  const aux = (node) => {\n    if (!node) {\n      return [true, null, null]\n    }\n    const [leftValid, leftMin, leftMax] = aux(node.left)\n    const [rightValid, rightMin, rightMax] = aux(node.right)\n\n    let valid = leftValid && rightValid\n    if (leftMax !== null && leftMax >= node.val) {\n      valid = false\n    }\n    if (rightMin !== null && rightMin <= node.val) {\n      valid = false\n    }\n    const currentMin = leftMin === null ? node.val : leftMin\n    const currentMax = rightMax === null ? node.val : rightMax\n    return [valid, currentMin, currentMax]\n  }\n  return aux(root)[0]\n}\n\nconsole.log(isValidBST(3))`.trim();\n\nconst recoverTree = `\nconst recoverTree = function (root) {\n  let first = null\n  let second = null\n  let prev = null\n  const aux = (node) => {\n    if (node) {\n      aux(node.left)\n      if (prev && prev.val > node.val) {\n        if (!first) {\n          first = prev\n          second = node\n        } else {\n          second = node\n        }\n      }\n      prev = node\n      aux(node.right)\n    }\n  }\n  aux(root)\n  if (first && second) {\n    const temp = first.val\n    first.val = second.val\n    second.val = temp\n  }\n}\n\nconsole.log(recoverTree([1,3,null,2]))`.trim();\n\nconst isSameTree = `\nconst isSameTree = function (p, q) {\n  if ((p && !q) || (!p && q)) {\n    return false\n  }\n  if (!p && !q) {\n    return true\n  }\n  const leftSame = isSameTree(p.left, q.left)\n  const rightSame = isSameTree(p.right, q.right)\n  return leftSame && rightSame && (p.val === q.val)\n}\n\nconsole.log(isSameTree([1,3,null,2], [1,3,null,2]))`.trim();\n\nconst isSymmetric = `\nconst isSymmetric = function (root) {\n  const aux = (node, level, result) => {\n    if (!result[level]) {\n      result[level] = []\n    }\n    if (!node) {\n      result[level].push(null)\n      return result\n    }\n    result[level].push(node.val)\n    aux(node.left, level + 1, result)\n    aux(node.right, level + 1, result)\n    return result\n  }\n  const isSymmetricHelper = (values = []) => {\n    for (let i = 0; i <= values.length / 2; i++) {\n      if (values[i] !== values[values.length - 1 - i]) {\n        return false\n      }\n    }\n    return true\n  }\n  const result = aux(root, 0, [])\n  for (let i = 0; i < result.length; i++) {\n    if (!isSymmetricHelper(result[i])) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(isSymmetric([1,2,2,3,4,4,3]))`.trim();\n\nconst sortedArrayToBST = ``.trim();\n\n// const graph = ``.trim();\n\n// const graph = ``.trim();\n\n// const stack = ``.trim();\n\n// const stack = ``.trim();\n\n\nclass Trees extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3></h3>\n\n              <div style={titles}>\n                <PrismCode\n                  code={graph}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>2. Unique Binary Search Trees.</h3>\n              <b>Input: </b>3<br/>\n              <b>Output: </b>\n              [<br/>\n                [1,null,3,2],<br/>\n                [3,2,null,1],<br/>\n                [3,1,null,null,2],<br/>\n                [2,1,3],<br/>\n                [1,null,2,null,3]\n              ]\n              <div style={titles}>\n                <PrismCode\n                  code={generateTrees}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>3. Validate Binary Search Tree.</h3>\n              Given a binary tree, determine if it is a valid binary search tree (BST).\n              <br/>\n              Assume a BST is defined as follows:\n              <ul>\n                <li>The left subtree of a node contains only nodes with keys less than the node's key.</li>\n                <li>The right subtree of a node contains only nodes with keys greater than the node's key.</li>\n                <li>Both the left and right subtrees must also be binary search trees.</li>\n              </ul>\n              <br/>\n              <b>Input: </b> [2,1,3]\n              <b>Output: </b> true\n              <br/>\n              <br/>\n              <b>Example 2: </b> \n              <b>Input: </b>[5,1,4,null,null,3,6]<br/>\n              <b>Output: </b>false<br/>\n              <b>Explanation: </b>The root node's value is 5 but its right child's value is 4.\n              <div style={titles}>\n                <PrismCode\n                  code={isValidBST}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>3. Recover Binary Search Tree.</h3>\n              Two elements of a binary search tree (BST) are swapped by mistake.\n              <br/>\n              Recover the tree without changing its structure. <br/><br/>\n              <b>Input: </b> [3,1,4,null,null,2]<br/>\n              <b>Output: </b> [2,1,4,null,null,3]\n              <div style={titles}>\n                <PrismCode\n                  code={recoverTree}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>4. Same Tree.</h3>\n              Given two binary trees, write a function to check if they are the same or not.\n              <br/>\n              Two binary trees are considered the same if they are structurally identical and the nodes have the same value.\n              <div style={titles}>\n                <PrismCode\n                  code={isSameTree}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>5. Symmetric Tree.</h3>\n              Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n              <div style={titles}>\n                <PrismCode\n                  code={isSymmetric}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>6. Convert Sorted Array to Binary Search Tree.</h3>\n              Given an array where elements are sorted in ascending order, convert it to a height balanced BST.\n              <br/>\n              For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\n              <div style={titles}>\n                <PrismCode\n                  code={sortedArrayToBST}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3></h3>\n\n              <div style={titles}>\n                <PrismCode\n                  code={graph}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3></h3>\n\n              <div style={titles}>\n                <PrismCode\n                  code={graph}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3></h3>\n\n              <div style={titles}>\n                <PrismCode\n                  code={graph}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Trees));\n"]},"metadata":{},"sourceType":"module"}