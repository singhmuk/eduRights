{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import\"../../ReactJs/styles.css\";import Sidebar from\"../sidebar\";import PrismCode from\"../../ReactJs/prismCode\";var titles={backgroundColor:\"#F0F8FF\",padding:\"1px\",fontSize:\"16px\"};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var insersonSort=\"\\nfunction fun() {\\n  const arr = [3, 5, 1, 9, 6, 2, 1, -1];\\n  const hashSet = new Set(arr);\\n  const result = [...hashSet].sort((a, b) => a - b);\\n  console.log(result);\\n}\\n\\nfun();\\n\".trim();var mergSort=\"\\nfunction removeDup() {\\n  const arr = [1, 2, 3, 4, 3,2,1];\\n  const hash = {};\\n  const result = [];\\n  \\n  for (let i = 0; i < arr.length; i++) {\\n    if (hash[arr[i]]) {\\n      hash[arr[i]]++;\\n    } else {\\n      hash[arr[i]] = 1;\\n    }\\n  }\\n  \\n  for (let i = 0; i < arr.length; i++) {\\n    if (hash[arr[i]] === 1) {\\n      result.push(arr[i]);\\n    }\\n  }\\n  \\n  console.log(result);\\n}\\n\\nremoveDup();\\n\".trim();var quicksort=\"\\nfunction uniqueWords(arr) {\\n  if (arr.length === 0) {\\n    return [];\\n  }\\n\\n  const currentWord = arr[0];\\n  const remainingWords = arr.slice(1);\\n  const uniqueRemainingWords = uniqueWords(remainingWords);\\n\\n  if (!uniqueRemainingWords.includes(currentWord)) {\\n    return [currentWord, ...uniqueRemainingWords];\\n  }\\n\\n  return uniqueRemainingWords;\\n}\\n\\nfunction removeDup() {\\n  const arr = [1, 2, 3, 4, 3, 2, 1, 0];\\n  const uniqueArr = uniqueWords(arr);\\n\\n  console.log(uniqueArr);\\n}\\n\\nremoveDup();\\n\".trim();var selectionSort=\"\\nfunction sorts(arr) {\\n  if (arr.length <= 1) return arr;\\n\\n  const pivot = arr[Math.floor(Math.random() * arr.length)];\\n  const left = [], equal = [], right = [];\\n\\n  for (let num of arr) {\\n    if (num < pivot) {\\n      left.push(num);\\n    } else if (num === pivot) {\\n      equal.push(num);\\n    } else {\\n      right.push(num);\\n    }\\n  }\\n\\n  return [...sorts(left), ...equal, ...sorts(right)];\\n}\\n\\nconst arr = [0, 9, 8, 7, 6];\\nconsole.log(sorts(arr));\\n\".trim();var Permutations=\"\\nTime complexity: O(n^2)\\nSpace complexity: O(n)\\n\\n\\nfunction combiSum(arr, num) {\\n  const result = [];\\n  const sum = new Set();\\n\\n  for (let i = 0; i < arr.length; i++) {\\n    const ele = num - arr[i];\\n    if (sum.has(ele)) {\\n      result.push([arr[i], ele]);\\n    }\\n    sum.add(arr[i]);\\n  }\\n\\n  console.log(result);\\n}\\n\\ncombiSum([2, 1, 4, 3, 5], 7);\\n\".trim();var amount=\"\\nTime complexity: O(n)\\nSpace complexity: O(n)\\n\\nfunction getCount() {\\n  var str = 'appleo';\\n  var hash = {};\\n\\n  for (var i = 0; i < str.length; i++) {\\n    var char = str[i].toLowerCase();\\n    if ('aeiou'.includes(char)) {\\n      if (hash[char]) {\\n        hash[char]++;\\n      } else {\\n        hash[char] = 1;\\n      }\\n    }\\n  }\\n\\n  var obj = new Map(Object.entries(hash));\\n  console.log(obj);\\n}\\n\\ngetCount();\\n\".trim();var armstrong=\"\\nTime complexity: O(n)\\nSpace complexity: O(n)\\n\\nfunction fun(num) {\\n  const newnum = num.toString().split('');\\n  const hash = newnum.reduce((sum, digit) => {\\n    const cube = Math.pow(parseInt(digit), newnum.length);\\n    return sum + cube;\\n  }, 0);\\n\\n  if (hash === num) {\\n    return { type: 'Armstrong', hash: hash };\\n  } else {\\n    return { type: 'Not Armstrong', hash: hash };\\n  }\\n}\\n\\nconst hash = fun(153);\\nconsole.log(hash); \".trim();var satisfy=\"\\n\".trim();var generates=\"\\n\".trim();var Logic2=/*#__PURE__*/function(_Component){_inherits(Logic2,_Component);function Logic2(){_classCallCheck(this,Logic2);return _possibleConstructorReturn(this,_getPrototypeOf(Logic2).apply(this,arguments));}_createClass(Logic2,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Armstrong Number\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"The time complexity of the fun() function is O(n), where n is the number of digits in the input number. This is because the reduce() function iterates n times, and each iteration takes constant time.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"The space complexity of the fun() function is O(n), because it only uses a linear amount of memory to store the variables newnum, hash, sum, digit, and cube.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"In simple words, the fun() function takes a linear amount of time to run, and it uses a linear amount of space.\"),React.createElement(\"br\",null)),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:armstrong,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. Combination Sum.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"The time complexity of the combiSum() function is O(n^2), where n is the length of the array. This is because the for loop iterates n times, and the inner for loop iterates n times. The total number of iterations is therefore n * n = n^2.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"The space complexity of the combiSum() function is O(n), because it only uses a linear amount of memory to store the variables arr, result, sum, and ele.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"In simple words, the combiSum() function takes a quadratic amount of time to run, and it uses a linear amount of space.\"),React.createElement(\"br\",null)),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Permutations,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. Occurence of vowel.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"The time complexity of the getCount() function is O(n), where n is the length of the string. This is because the for loop iterates n times, and each iteration takes constant time.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"The space complexity of the getCount() function is O(n), because it uses a hash table to store the characters and their corresponding counts. The hash table can grow to a maximum size of n, but it will typically be much smaller than that.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"In simple words, the getCount() function takes a linear amount of time to run, and it uses a linear amount of space.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:amount,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"7. Sort an Array\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Time complexity: \"),\"O(n), where n is the length of the array arr. This is because the new Set() method iterates over the array arr once, and the sort() method iterates over the array hashSet once.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Space complexity: \"),\"O(n), where n is the length of the array arr. This is because the new Set() method creates a new set that can store up to n elements, and the sort() method sorts the array hashSet, which can also store up to n elements.\"),React.createElement(\"br\",null),React.createElement(\"li\",null)),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:insersonSort,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"8. Unique Character\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Time complexity: \"),\"O(n), where n is the length of the array arr. This is because the for loop iterates over the array arr twice, and each iteration takes constant time.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Space complexity: \"),\"O(n), where n is the length of the array arr. This is because the hash object can store up to n elements.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"In simple words, the removeDup() function takes a linear amount of time to run, and it uses a linear amount of space.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:mergSort,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"9. Remove Duplicate words Recursion\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Time complexity: \"),\"O(n), where n is the length of the array arr. This is because the uniqueWords() function recursively calls itself n times, and each recursive call takes constant time.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Space complexity: \"),\"O(n), where n is the length of the array arr. This is because the uniqueWords() function stores the results of the recursive calls in a stack, which can grow to a maximum size of n.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"In simple words, the uniqueWords() function takes a linear amount of time to run, and it uses a linear amount of space.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:quicksort,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"10. Sort Recursion\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Time complexity: \"),\"O(n log n), where n is the length of the array arr. This is because the sorts() function recursively sorts the array, and the recursive calls take a logarithmic amount of time.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Space complexity: \"),\"O(n), where n is the length of the array arr. This is because the sorts() function stores the results of the recursive calls in a stack, which can grow to a maximum size of n.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"In simple words, the sorts() function takes a logarithmic amount of time to run, and it uses a linear amount of space.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:selectionSort,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"11.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:satisfy,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"12. \"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:generates,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return Logic2;}(Component);export default withStyles(styles)(Logic2);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/javaScripts/deepJs/logic2.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","insersonSort","trim","mergSort","quicksort","selectionSort","Permutations","amount","armstrong","satisfy","generates","Logic2","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\n\nconst insersonSort = `\nfunction fun() {\n  const arr = [3, 5, 1, 9, 6, 2, 1, -1];\n  const hashSet = new Set(arr);\n  const result = [...hashSet].sort((a, b) => a - b);\n  console.log(result);\n}\n\nfun();\n`.trim();\n\nconst mergSort = `\nfunction removeDup() {\n  const arr = [1, 2, 3, 4, 3,2,1];\n  const hash = {};\n  const result = [];\n  \n  for (let i = 0; i < arr.length; i++) {\n    if (hash[arr[i]]) {\n      hash[arr[i]]++;\n    } else {\n      hash[arr[i]] = 1;\n    }\n  }\n  \n  for (let i = 0; i < arr.length; i++) {\n    if (hash[arr[i]] === 1) {\n      result.push(arr[i]);\n    }\n  }\n  \n  console.log(result);\n}\n\nremoveDup();\n`.trim();\n\nconst quicksort = `\nfunction uniqueWords(arr) {\n  if (arr.length === 0) {\n    return [];\n  }\n\n  const currentWord = arr[0];\n  const remainingWords = arr.slice(1);\n  const uniqueRemainingWords = uniqueWords(remainingWords);\n\n  if (!uniqueRemainingWords.includes(currentWord)) {\n    return [currentWord, ...uniqueRemainingWords];\n  }\n\n  return uniqueRemainingWords;\n}\n\nfunction removeDup() {\n  const arr = [1, 2, 3, 4, 3, 2, 1, 0];\n  const uniqueArr = uniqueWords(arr);\n\n  console.log(uniqueArr);\n}\n\nremoveDup();\n`.trim();\n\nconst selectionSort = `\nfunction sorts(arr) {\n  if (arr.length <= 1) return arr;\n\n  const pivot = arr[Math.floor(Math.random() * arr.length)];\n  const left = [], equal = [], right = [];\n\n  for (let num of arr) {\n    if (num < pivot) {\n      left.push(num);\n    } else if (num === pivot) {\n      equal.push(num);\n    } else {\n      right.push(num);\n    }\n  }\n\n  return [...sorts(left), ...equal, ...sorts(right)];\n}\n\nconst arr = [0, 9, 8, 7, 6];\nconsole.log(sorts(arr));\n`.trim();\n\nconst Permutations = `\nTime complexity: O(n^2)\nSpace complexity: O(n)\n\n\nfunction combiSum(arr, num) {\n  const result = [];\n  const sum = new Set();\n\n  for (let i = 0; i < arr.length; i++) {\n    const ele = num - arr[i];\n    if (sum.has(ele)) {\n      result.push([arr[i], ele]);\n    }\n    sum.add(arr[i]);\n  }\n\n  console.log(result);\n}\n\ncombiSum([2, 1, 4, 3, 5], 7);\n`.trim();\n\nconst amount = `\nTime complexity: O(n)\nSpace complexity: O(n)\n\nfunction getCount() {\n  var str = 'appleo';\n  var hash = {};\n\n  for (var i = 0; i < str.length; i++) {\n    var char = str[i].toLowerCase();\n    if ('aeiou'.includes(char)) {\n      if (hash[char]) {\n        hash[char]++;\n      } else {\n        hash[char] = 1;\n      }\n    }\n  }\n\n  var obj = new Map(Object.entries(hash));\n  console.log(obj);\n}\n\ngetCount();\n`.trim();\n\nconst armstrong = `\nTime complexity: O(n)\nSpace complexity: O(n)\n\nfunction fun(num) {\n  const newnum = num.toString().split('');\n  const hash = newnum.reduce((sum, digit) => {\n    const cube = Math.pow(parseInt(digit), newnum.length);\n    return sum + cube;\n  }, 0);\n\n  if (hash === num) {\n    return { type: 'Armstrong', hash: hash };\n  } else {\n    return { type: 'Not Armstrong', hash: hash };\n  }\n}\n\nconst hash = fun(153);\nconsole.log(hash); `.trim(); \n\nconst satisfy = `\n`.trim();\n\nconst generates = `\n`.trim();\n\nclass Logic2 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Armstrong Number</h3>\n              <ul>\n                <li>The time complexity of the fun() function is O(n), where n is the number of digits in the input number. This is because the reduce() function iterates n times, and each iteration takes constant time.</li><br/>\n                <li>The space complexity of the fun() function is O(n), because it only uses a linear amount of memory to store the variables newnum, hash, sum, digit, and cube.</li><br/>\n                <li>In simple words, the fun() function takes a linear amount of time to run, and it uses a linear amount of space.</li><br/>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={armstrong}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>5. Combination Sum.</h3>\n              <ul>\n                <li>The time complexity of the combiSum() function is O(n^2), where n is the length of the array. This is because the for loop iterates n times, and the inner for loop iterates n times. The total number of iterations is therefore n * n = n^2.</li><br/>\n                <li>The space complexity of the combiSum() function is O(n), because it only uses a linear amount of memory to store the variables arr, result, sum, and ele.</li><br/>\n                <li>In simple words, the combiSum() function takes a quadratic amount of time to run, and it uses a linear amount of space.</li><br/>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={Permutations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Occurence of vowel.</h3>\n              <ul>\n                <li>The time complexity of the getCount() function is O(n), where n is the length of the string. This is because the for loop iterates n times, and each iteration takes constant time.</li><br/>\n                <li>The space complexity of the getCount() function is O(n), because it uses a hash table to store the characters and their corresponding counts. The hash table can grow to a maximum size of n, but it will typically be much smaller than that.</li><br/>\n                <li>In simple words, the getCount() function takes a linear amount of time to run, and it uses a linear amount of space.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={amount}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>7. Sort an Array</h3>\n              <ul>\n                <li><b>Time complexity: </b>O(n), where n is the length of the array arr. This is because the new Set() method iterates over the array arr once, and the sort() method iterates over the array hashSet once.</li><br/>\n                <li><b>Space complexity: </b>O(n), where n is the length of the array arr. This is because the new Set() method creates a new set that can store up to n elements, and the sort() method sorts the array hashSet, which can also store up to n elements.</li><br/>\n                <li></li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={insersonSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>8. Unique Character</h3>\n              <ul>\n                <li><b>Time complexity: </b>O(n), where n is the length of the array arr. This is because the for loop iterates over the array arr twice, and each iteration takes constant time.</li><br/>\n                <li><b>Space complexity: </b>O(n), where n is the length of the array arr. This is because the hash object can store up to n elements.</li><br/>\n                <li>In simple words, the removeDup() function takes a linear amount of time to run, and it uses a linear amount of space.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={mergSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>9. Remove Duplicate words Recursion</h3>\n              <ul>\n                <li><b>Time complexity: </b>O(n), where n is the length of the array arr. This is because the uniqueWords() function recursively calls itself n times, and each recursive call takes constant time.</li><br/>\n                <li><b>Space complexity: </b>O(n), where n is the length of the array arr. This is because the uniqueWords() function stores the results of the recursive calls in a stack, which can grow to a maximum size of n.</li><br/>\n                <li>In simple words, the uniqueWords() function takes a linear amount of time to run, and it uses a linear amount of space.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={quicksort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>10. Sort Recursion</h3>\n              <ul>\n                <li><b>Time complexity: </b>O(n log n), where n is the length of the array arr. This is because the sorts() function recursively sorts the array, and the recursive calls take a logarithmic amount of time.</li><br/>\n                <li><b>Space complexity: </b>O(n), where n is the length of the array arr. This is because the sorts() function stores the results of the recursive calls in a stack, which can grow to a maximum size of n.</li><br/>\n                <li>In simple words, the sorts() function takes a logarithmic amount of time to run, and it uses a linear amount of space.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={selectionSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>11.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={satisfy}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>12. </h3>\n              <div style={titles}>\n                <PrismCode\n                  code={generates}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(Logic2);\n"]},"metadata":{},"sourceType":"module"}