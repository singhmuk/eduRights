{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var mongofiles=\"mongofiles.exe -d gridfs put song.mp3\".trim();var chunks=\"> db.fs.chunks.find({files_id:ObjectId(\\\"5ef6621233e86dcb54461e54\\\")})\\n> db.fs.chunks.find({},{_id:0,data:0})\".trim();var customers=\"db.customers([{\\n      name:'Max',\\n      age:29,\\n      address:{\\n      city:'Munich'\\n    },\\n    hobbies:[\\n      {Name:'Cooking'},\\n      {name:'Sports'}\\n    ]\\n   }\\n ]);\\n \".trim();var GridFs=/*#__PURE__*/function(_Component){_inherits(GridFs,_Component);function GridFs(){_classCallCheck(this,GridFs);return _possibleConstructorReturn(this,_getPrototypeOf(GridFs).apply(this,arguments));}_createClass(GridFs,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"b\",null,\".MongoDB - GridFS\"),React.createElement(\"br\",null),\"GridFS is the MongoDB specification for storing and retrieving large files such as images, audio files, video files, etc. It is kind of a file system to store files but its data is stored within MongoDB collections. GridFS has the capability to store files even greater than its document size limit of 16MB.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"GridFS divides a file into chunks and stores each chunk of data in a separate document, each of maximum size 255k.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"GridFS by default uses two collections fs.files and fs.chunks to store the file's metadata and the chunks. Each chunk is identified by its unique _id ObjectId field. The fs.files serves as a parent document. The files_id field in the fs.chunks document links the chunk to its parent. Adding Files to GridFS :\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"Open your command prompt, navigate to the mongofiles.exe in the bin folder of MongoDB installation folder and type the following code (after put song.mp3 in same place) \\u2212\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:mongofiles,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"i\",null,\"gridfs is collection name and song.mp3 is file name. To see the file's document in database, you can use find query\",React.createElement(\"br\",null),\"db.fs.files.find()\",React.createElement(\"br\",null),\"We can also see all the chunks present in fs.chunks collection related to the stored file with the following code, using the document id returned in the previous query\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:chunks,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Data is stored in json like syntax\"),React.createElement(\"br\",null),\"BSON(Binary JSON) Data Formate:\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:customers,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return GridFs;}(Component);export default withStyles(styles)(GridFs);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/mongoDB/deepMongodb/gridFs.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","mongofiles","trim","chunks","customers","GridFs","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,0BAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CAGA,GAAMC,CAAAA,MAAM,CAAG,CAACC,eAAe,CAAC,SAAjB,CAA4BC,OAAO,CAAC,KAApC,CAA2CC,QAAQ,CAAC,MAApD,CAAf,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,KAAK,CAAE,CACHC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADL,CAEHN,OAAO,CAAEG,KAAK,CAACG,OAAN,CAAc,CAAd,CAFN,CADgB,CAKvBC,QAAQ,CAAE,CACNF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADF,CALa,CAQvBE,SAAS,CAAE,CACPC,SAAS,CAAE,QADJ,CARY,CAAL,EAApB,CAaA,GAAMC,CAAAA,UAAU,CAAG,wCAAwCC,IAAxC,EAAnB,CAEA,GAAMC,CAAAA,MAAM,CAAG,iHACyBD,IADzB,EAAf,CAGA,GAAME,CAAAA,SAAS,CAAG,uLAYfF,IAZe,EAAlB,C,GAeMG,CAAAA,M,sRACgB,CAClBC,UAAU,CAAC,iBAAMxB,CAAAA,KAAK,CAACyB,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACM,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACI,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAACb,KAA1B,EACI,8BAAI,oBAAC,OAAD,MAAJ,CADJ,CADJ,CADN,CAMN,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACA,oBAAC,KAAD,EAAO,SAAS,CAAEa,OAAO,CAACb,KAA1B,EACA,oBAAC,IAAD,MACM,iDADN,CAEM,8BAFN,uTAM4B,8BAN5B,CAOA,8BAPA,sHASkB,8BATlB,CAUA,8BAVA,wTAcwB,8BAdxB,CAeA,8BAfA,mLAkBA,8BAlBA,CAmBM,2BAAK,KAAK,CAAEN,MAAZ,EACA,oBAAC,SAAD,EACE,IAAI,CAAEY,UADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADA,CAnBN,CA0BM,8BA1BN,CA2BM,mJAAsH,8BAAtH,sBACY,8BADZ,2KA3BN,CA+BA,8BA/BA,CAgCM,2BAAK,KAAK,CAAEZ,MAAZ,EACA,oBAAC,SAAD,EACE,IAAI,CAAEc,MADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADA,CAhCN,CAuCM,8BAvCN,CAwCM,8BAxCN,CAyCM,kEAzCN,CA0CM,8BA1CN,mCA4CM,2BAAK,KAAK,CAAEd,MAAZ,EACA,oBAAC,SAAD,EACE,IAAI,CAAEe,SADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADA,CA5CN,CADA,CADA,CANM,CADF,CAiED,C,oBAvEkBvB,S,EA0ErB,cAAgBI,CAAAA,UAAU,CAACQ,MAAD,CAAV,CAAmBY,MAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = {backgroundColor:'#F0F8FF', padding:'1px', fontSize:'16px'}\n\nconst styles = theme => ({\n  paper: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1)\n  },\n  smMargin: {\n      margin: theme.spacing(1)\n  },\n  actionDiv: {\n      textAlign: \"center\"\n  }\n})\n\nconst mongofiles = `mongofiles.exe -d gridfs put song.mp3`.trim()\n\nconst chunks = `> db.fs.chunks.find({files_id:ObjectId(\"5ef6621233e86dcb54461e54\")})\n> db.fs.chunks.find({},{_id:0,data:0})`.trim()\n\nconst customers = `db.customers([{\n      name:'Max',\n      age:29,\n      address:{\n      city:'Munich'\n    },\n    hobbies:[\n      {Name:'Cooking'},\n      {name:'Sports'}\n    ]\n   }\n ]);\n `.trim()\n\n\nclass GridFs extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n            <Grid item xs={2}>\n                <Paper className={classes.paper}>\n                    <h4><Sidebar /></h4>\n                </Paper>\n            </Grid>\n<Grid item xs={10}>\n<Paper className={classes.paper}>\n<List>\n      <b>.MongoDB - GridFS</b>\n      <br/>\n      GridFS is the MongoDB specification for storing and retrieving large files such as images, audio\nfiles, video files, etc. It is kind of a file system to store files but its data is stored\nwithin MongoDB collections. GridFS has the capability to store files even greater than its\ndocument size limit of 16MB.<br/>\n<br/>\nGridFS divides a file into chunks and stores each chunk of data in a separate document, each of\nmaximum size 255k.<br/>\n<br/>\nGridFS by default uses two collections fs.files and fs.chunks to store the file's metadata and\nthe chunks. Each chunk is identified by its unique _id ObjectId field. The fs.files serves as a\nparent document. The files_id field in the fs.chunks document links the chunk to its parent.\nAdding Files to GridFS :<br/>\n<br/>\nOpen your command prompt, navigate to the mongofiles.exe in the bin folder of MongoDB\ninstallation folder and type the following code (after put song.mp3 in same place) âˆ’\n<br/>\n      <div style={titles}>\n      <PrismCode\n        code={mongofiles}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <i>gridfs is collection name and song.mp3 is file name. To see the file's document in database, you can use find query<br/>\ndb.fs.files.find()<br/>\nWe can also see all the chunks present in fs.chunks collection related to the stored file with the\nfollowing code, using the document id returned in the previous query</i>\n<br/>\n      <div style={titles}>\n      <PrismCode\n        code={chunks}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <br/>\n      <b>Data is stored in json like syntax</b>\n      <br/>\n      BSON(Binary JSON) Data Formate:\n      <div style={titles}>\n      <PrismCode\n        code={customers}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      </List>\n      </Paper>\n      </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(GridFs));\n"]},"metadata":{},"sourceType":"module"}