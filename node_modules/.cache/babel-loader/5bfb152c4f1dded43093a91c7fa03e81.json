{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/arrayAlgo.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst strArray = `\n    var strArray = \"StackOverflow\".split(\"\");\n    console.log(strArray.join(\"\"));\n`.trim();\nconst Sort = `\nlet i, j, arr=[0,9,8,7,6];\nvar max=0;\n\nfor(i=0; i<arr.length; i++){\n  for(j=i; j<arr.length; j++){\n    if(arr[i]>arr[j]){\n      var temp=arr[i];\n      arr[i]=arr[j];\n      arr[j]=temp;\n    }\n  }\n}\n\nconsole.log(arr);\n\n\n//Greatest Product Of 3\nmax = arr[arr.length-1] * arr[arr.length-2] * arr[arr.length-3]\nconsole.log(max);\n`.trim();\nconst duplicates = `\nvar array = [1,2,3,4,3,0,9,0,1];\nvar result=[];\n\nfor(let i=0; i<array.length;i++){\n    let count=0;\n    for(let j=0;j<result.length;j++){\n        if(array[i]==result[j]){\n            count +=1;\n        }\n    }\n    if(count==0){\n        result.push(array[i]);\n    }  \n}\n\nconsole.log(result) `.trim();\nconst compare_array = `\nfunction compare(){\n  const arr=[1,2,3,4,5,6];\n  const arr2=[5,6,7,8,9,0];\n  const result=[];\n  \n  for(let i=0; i<arr.length; i++){\n    if(arr2.indexOf(arr[i]) !== -1){\n      result.push(arr[i]);\n    }\n  }\n  console.log(result)\n}\n\ncompare();\n\n\n//Unique name\nfunction getUnique(){\n  var names = [\"John\", \"Peter\", \"Clark\", \"Harry\", \"John\", \"Alice\"];\n  var newName = [];\n  \n  for(i=0; i < names.length; i++){\n      if(newName.indexOf(names[i]) === -1) {\n          newName.push(names[i]);\n      }\n  }\n  console.log(newName);\n}\n\ngetUnique();\n`.trim();\nconst recursionReverseArray = `\nvar apple = [5,6,7,8,9];\nvar reverse = function(arr){\n var result = [];\n var newArr = [];\n   arr.forEach((item) => newArr.push(item));\n     var inner = function(x){\n     if(x.length > 0){\n       result.push(x.pop())\n       inner(x);\n     }\n   return;\n }\n \n inner(newArr);\n return result;\n}\n\nconsole.log(apple)\nconsole.log(reverse(apple))`.trim();\nconst findMedianSortedArrays = `\nfunction findMedianSortedArrays(nums1, nums2){\n  function merge(xs1, xs2){\n    if (!xs1 || !xs1.length) return xs2;\n    if (!xs2 || !xs2.length) return xs1;\n\n    const [hd1, ...rest1] = xs1\n    const [hd2, ...rest2] = xs2\n    return hd1 <= hd2 ? [hd1, ...merge(rest1, xs2)] : [hd2, ...merge(xs1, rest2)]\n  }\n  const nums = merge(nums1, nums2)\n  const middle = Math.floor((nums.length-1) / 2)\n\n  return (middle * 2 === (nums.length-1)) ?  nums[middle] : ((nums[middle] + nums[middle + 1]) / 2) \n}\n\nconsole.log(findMedianSortedArrays([1,2],[3,4]))\n`.trim();\nconst maxSubArray = `\nfunction maxSubArray(nums){\n  let max = -Infinity;\n  let currentMax = -Infinity;\n\n  for (let i = 0; i < nums.length; i++) {\n    currentMax = Math.max(\n      currentMax + nums[i],\n      nums[i],\n    )\n    max = Math.max(max, currentMax)\n  }\n  return max\n}\n\nconsole.log(maxSubArray([-2,1,-3,4,-1,2,1,-5,4]))\n`.trim();\nconst plusOne = `\nfunction plusOne(digits = []){\n  if (digits.length === 0) return digits;\n\n  if (digits[digits.length - 1] < 9) {\n    digits[digits.length - 1] += 1\n    return digits\n  }\n\n  let index = digits.length - 1\n  let current = 1\n\n  while (index >= 0) {\n    const sum = current + digits[index]\n    if (sum > 9) {\n      digits[index] = sum - 10\n      current = 1\n      index -= 1\n    } \n    else {\n      digits[index] = sum\n      current = 0\n      index -= 1\n      return digits\n    }\n  }\n  return current === 1 ? [1, ...digits] : digits\n}\n\nconsole.log(plusOne([1,2,3]))\n`.trim();\nconst arrayCounter = `\nfunction arrCounter(arr){\n  var counter = 0;\n  var maxCount = 0;\n\n    function inner(n){\n      if(!Array.isArray(n)){\n        maxCount = Math.max(maxCount, counter);\n     counter = 0;\n     return\n   }\n   \n   n.forEach(num => {\n   counter ++;\n   inner(num);\n   })\n }\n \n inner(arr);\n console.log(maxCount)\n return maxCount;\n}\n\narrCounter([[3]])\narrCounter([[[[[[[9]]]]]]])\narrCounter([])\n`.trim();\nconst countElements = `\nfunction countElements(arr) {\n  const set = new Set()\n  \n  arr.forEach(num => set.add(num))\n  return arr.reduce((acc, num) => {\n      if(set.has(num+1)){\n          return acc + 1\n      }\n      return acc\n  },0)\n};\n\nconsole.log(countElements([1,2,3,0]))`.trim();\nconst find132pattern = `\nfunction find132pattern(nums) {\n  let max = -Infinity\n  const stack = []; \n\n  for (let i = nums.length - 1; i >= 0; i--) {\n    while (nums[i] > stack[stack.length - 1]) {\n      max = stack.pop()\n    }\n    if (nums[i] < max) return true;\n    stack.push(nums[i])\n  }\n  \n  return false\n}\n\nconsole.log(find132pattern([3,1,4,2]))\n`.trim();\nconst numIdenticalPairs = `\nfunction numIdenticalPairs(nums) {\n  let count = 0\n  \n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[i] === nums[j]) {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\nconsole.log(numIdenticalPairs([1,2,3,1,1,3]))\n`.trim();\nconst removeElement = `\nfunction removeElement(nums, val) {\n  let left = 0\n\n  const swap = (a, b) => {\n    const temp = nums[a]\n    nums[a] = nums[b]\n    nums[b] = temp\n  }\n\n  while (left <= nums.length - 1) {\n    while (nums[nums.length - 1] === val) {\n      nums.pop()\n    }\n    \n    while (nums[left] !== val && left <= nums.length - 1) {\n      left += 1\n    }\n\n    if (left < nums.length - 1) {\n      swap(left, nums.length - 1)\n      left += 1\n      nums.pop()\n    }\n  }\n  return nums.length\n}\n\nconsole.log(removeElement([0,1,2,2,3,0,4,2],1))\n`.trim();\nconst searchRange = `\nfunction searchRange(nums = [], target){\n  function binarySearch(left, right, position = 'middle'){\n    let pivot = -1\n    \n    while (left <= right) {\n      const middle = Math.floor((left + right) / 2)\n      if (nums[middle] === target) {\n        if (position === 'middle') {\n          pivot = middle\n          break\n        } else if (position === 'left') {\n          pivot = middle\n          right = middle - 1\n        } else if (position === 'right') {\n          pivot = middle\n          left = middle + 1\n        }\n      } else if (nums[middle] < target) {\n        left = middle + 1\n      } else {\n        right = middle - 1\n      }\n    }\n    return pivot\n  }\n\n\n  const pivot = binarySearch(0, nums.length - 1, 'middle')\n  return [\n    binarySearch(0, pivot, 'left'),\n    binarySearch(pivot, nums.length - 1, 'right'),\n  ]\n}\n\nconsole.log(searchRange([5,7,7,8,8,10],6))\n`.trim();\nconst maximumGap = `\n\n`.trim();\nconst searchInsert = `\nconst searchInsert = (nums, target) => {\n  const aux = (low, high) => {\n    if (low > high) {\n      return low\n    }\n    const middle = Math.floor((low + high) / 2)\n    if (target === nums[middle]) {\n      return middle\n    } if (target > nums[middle]) {\n      return aux(middle + 1, high)\n    }\n    return aux(low, middle - 1)\n  }\n  return aux(0, nums.length - 1)\n}\n\nconsole.log(searchInsert([1,3,5,6], 5))`.trim();\nconst combinationSum = `\nvar combinationSum = function(candidates, target) {\n  const result = []\n  const aux = (start,current=[], sum = 0) => {\n      if(sum > target) {\n          return \n      }\n      if(sum === target) {\n          result.push(current)\n          return\n      }\n      for(let i = start; i < candidates.length; i++) {\n          aux(i, [...current, candidates[i]], sum+candidates[i])\n      }\n  }\n  for(let i = 0; i <  candidates.length; i++) {\n      aux(i, [candidates[i]], candidates[i])\n  }\n  return result\n};\n\nconsole.log(combinationSum([2,3,5],8))`.trim();\nconst missing_number = `\nfunction missNum() {\n  let i, arr=[0,1,2,4,5], exactsum=0, result=0;\n  exactsum = arr.reduce((a, b) => a + b);\n\n  for (i=0; i<=arr.length; i++) {\n    result += i\n  }\n  \n  result -= exactsum;\n  console.log('Missing Number', result)\n}\n\nmissNum();\n `.trim();\nconst firstMissingPositive = `\nconst firstMissingPositive = (nums = []) => {\n  const swap = (a, b) => {\n    const temp = nums[a]\n    nums[a] = nums[b]\n    nums[b] = temp\n  }\n  let index = 0\n  while (index < nums.length) {\n    if (\n      nums[index] !== nums[nums[index] - 1]\n      && nums[index] > 0\n      && nums[index] <= nums.length\n    ) {\n      swap(index, nums[index] - 1)\n    } else {\n      index += 1\n    }\n  }\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] !== i + 1) {\n      return i + 1\n    }\n  }\n  return nums.length + 1\n}\n\nconsole.log(firstMissingPositive([3,4,-1,1]))`.trim();\nconst findMissingRanges = `\nconst findMissingRanges = function (nums, lower, upper) {\n  const result = []\n  const count = (lo, hi) => hi - lo - 1\n  const set = (lo, hi) => {\n    if (count(lo, hi) === 1) {\n      result.push('$'{lo + 1}')\n    } else if (count(lo, hi) > 1) {\n      result.push('$'{lo + 1}->'$'{hi - 1}')\n    }\n  }\n  for (let i = 0; i <= nums.length; i++) {\n    set(\n      i === 0 ? lower - 1 : nums[i - 1],\n      i === nums.length ? upper + 1 : nums[i],\n    )\n  }\n  return result\n}\n\nconsole.log(findMissingRanges([1,2,3,-2,4]))`.trim();\nconst permute = `\nconst permute = (nums = []) => {\n  const result = []\n  const aux = (list = [], current = []) => {\n    if (list.length === 0) {\n      result.push(current)\n    }\n    list.forEach((number, index) => {\n      aux(list.filter((v, index2) => index2 !== index), [...current, number])\n    })\n  }\n  aux(nums)\n  return result\n}\n\nconsole.log(permute([1,2,3]))`.trim();\nconst largestNumber = `\nconst largestNumber = function (nums = []) {\n  nums.sort((a, b) => {\n    const digitsA = a.toString(10) + b.toString(10)\n    const digitsB = b.toString(10) + a.toString(10)\n    for (let i = 0; i < digitsA.length; i++) {\n      const digitB = parseInt(digitsB[i], 10)\n      const digitA = parseInt(digitsA[i], 10)\n      if (digitB > digitA || digitB < digitA) {\n        return digitB - digitA\n      }\n    }\n    return 0\n  })\n  const result = nums.join('')\n  return result[0] === '0' ? '0' : result\n}\n\nconsole.log(largestNumber([10,2]))`.trim();\nconst containsDuplicate = `\nconst containsDuplicate = (nums) => {\n  const map = {}\n  for (num of nums) {\n    if (map[num]) {\n      return true\n    }\n    map[num] = 1\n  }\n  return false\n}\n\nconsole.log(containsDuplicate([1,2,3,1]))`.trim();\nconst summaryRanges = `\nconst summaryRanges = function (nums) {\n  let start = null\n  const result = []\n  for (let i = 0; i < nums.length; i++) {\n    if (start === null) {\n      start = nums[i]\n    }\n    if (nums[i] === nums[i + 1] - 1) {\n      continue\n    }\n    if (nums[i] === start) {\n      result.push(nums[i].toString())\n      start = null\n    } else {\n      result.push('$'{start}->'$'{nums[i]}')\n      start = null\n    }\n  }\n  return result\n}\n\nconsole.log(summaryRanges([1,2,3,4,6,7,9]))`.trim();\nconst productExceptSelf = `\nconst productExceptSelf = (nums = []) => {\n  if(!nums.length) {\n      return nums\n  }\n  const product = [nums[0]]\n  for(let i = 1; i < nums.length; i++) {\n      product[i] = nums[i] * product[i-1]\n  }\n  let suffixProduct = 1\n  for(let i = nums.length -1; i >= 1; i--) {\n      product[i] = product[i-1] * suffixProduct\n      suffixProduct *= nums[i]\n  }\n  product[0] = suffixProduct\n  return product\n}\n\nconsole.log(productExceptSelf([1,2,3,4]))`.trim();\nconst countSmaller = `\nconst countSmaller = function (nums) {\n  const result = nums.map(() => 0)\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[j] < nums[i]) {\n        result[i] += 1\n      }\n    }\n  }\n  return result\n}\n\nconsole.log(countSmaller([5,2,6,1]))`.trim();\nconst coinChange = `\nconst coinChange = (coins = [], amount) => {\n  const memo = {}\n  const aux = (remainAmount, coinIndex) => {\n    if (\n      memo[remainAmount] !== undefined\n      && memo[remainAmount][coinIndex] !== undefined\n    ) {\n      return memo[remainAmount][coinIndex]\n    }\n    if (remainAmount < 0) {\n      return Infinity\n    }\n    if (remainAmount === 0) {\n      return 0\n    }\n    if (coinIndex < 0 && remainAmount > 0) {\n      return Infinity\n    }\n    memo[remainAmount] = memo[remainAmount] || {}\n    memo[remainAmount][coinIndex] = Math.min(\n      aux(remainAmount - coins[coinIndex], coinIndex) + 1,\n      aux(remainAmount, coinIndex - 1),\n    )\n    return memo[remainAmount][coinIndex]\n  }\n  const result = aux(amount, coins.length - 1)\n  return result === Infinity ? -1 : result\n}\n\nconsole.log(coinChange([1, 2, 5], 11))`.trim();\n\nclass DSLogic2 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620\n      },\n      __self: this\n    }, \"1. Convert a string to an array\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: strArray,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630\n      },\n      __self: this\n    }, \"2. Sort\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Sort,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640\n      },\n      __self: this\n    }, \"3. Remove Duplicates\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: duplicates,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 642\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 650\n      },\n      __self: this\n    }, \"4. Compare Array\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 651\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: compare_array,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660\n      },\n      __self: this\n    }, \"5. Recursion Reverse Array\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: recursionReverseArray,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670\n      },\n      __self: this\n    }, \"6. Median of Two Sorted Arrays.\"), \"Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673\n      },\n      __self: this\n    }, \"Follow up: \"), \"The overall run time complexity should be O(log (m+n)).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    }, \"Example 1:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679\n      },\n      __self: this\n    }, \"Input: \"), \"nums1 = [1,3], nums2 = [2]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680\n      },\n      __self: this\n    }, \"Output: \"), \"2.00000\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681\n      },\n      __self: this\n    }, \"Explanation: \"), \"merged array = [1,2,3] and median is 2.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682\n      },\n      __self: this\n    }, \"Example 2: \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684\n      },\n      __self: this\n    }, \"Input: \"), \"nums1 = [1,2], nums2 = [3,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685\n      },\n      __self: this\n    }, \"Output: \"), \"2.50000\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 686\n      },\n      __self: this\n    }, \"Explanation: \"), \"merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: findMedianSortedArrays,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 696\n      },\n      __self: this\n    }, \"7. Maximum Subarray.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 697\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [-2,1,-3,4,-1,2,1,-5,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 697\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698\n      },\n      __self: this\n    }, \"Output: \"), \"6\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699\n      },\n      __self: this\n    }, \"Explanation: \"), \"[4,-1,2,1] has the largest sum = 6.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maxSubArray,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 707\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 709\n      },\n      __self: this\n    }, \"8. Plus One.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710\n      },\n      __self: this\n    }, \"Input: \"), \"digits = [1,2,3]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711\n      },\n      __self: this\n    }, \"Output: \"), \"[1,2,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 713\n      },\n      __self: this\n    }, \"Example 2:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 713\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 714\n      },\n      __self: this\n    }, \"Input: \"), \"digits = [4,3,2,1]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 714\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715\n      },\n      __self: this\n    }, \"Output: \"), \"[4,3,2,2]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 716\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: plusOne,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 717\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 723\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725\n      },\n      __self: this\n    }, \"9. Array Counter\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 726\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: arrayCounter,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 727\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 733\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735\n      },\n      __self: this\n    }, \"10. Counting Elements.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 736\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: countElements,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 737\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 743\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 745\n      },\n      __self: this\n    }, \"11. 132 Pattern.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [1,2,3,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 747\n      },\n      __self: this\n    }, \"Output: \"), \"false\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 747\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 748\n      },\n      __self: this\n    }, \"Explanation: \"), \"There is no 132 pattern in the sequence.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 749\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: find132pattern,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 750\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 756\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 758\n      },\n      __self: this\n    }, \"13. Number of Good Pairs.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 759\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [1,2,3,1,1,3] \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 759\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 760\n      },\n      __self: this\n    }, \"Output: \"), \"4 \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 760\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 761\n      },\n      __self: this\n    }, \"Explanation: \"), \"There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 762\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: numIdenticalPairs,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 763\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 769\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 771\n      },\n      __self: this\n    }, \"14. Remove Element\"), \"Given an array nums and a value val, remove all instances of that value in-place and return the new length.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 773\n      },\n      __self: this\n    }), \"Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 775\n      },\n      __self: this\n    }), \"The order of elements can be changed. It doesn't matter what you leave beyond the new length.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 777\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 777\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 778\n      },\n      __self: this\n    }, \"Example 1:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 778\n      },\n      __self: this\n    }), \"Given nums = [3,2,2,3], val = 3,\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 780\n      },\n      __self: this\n    }), \"Your function should return length = 2, with the first two elements of nums being 2.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 781\n      },\n      __self: this\n    }), \"It doesn't matter what you leave beyond the returned length.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 783\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: removeElement,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 784\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 790\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 792\n      },\n      __self: this\n    }, \"15. Find First and Last Position of Element in Sorted Array\"), \"Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 794\n      },\n      __self: this\n    }), \"Your algorithm's runtime complexity must be in the order of O(log n).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 795\n      },\n      __self: this\n    }), \"If the target is not found in the array, return [-1, -1].\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 797\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 799\n      },\n      __self: this\n    }, \"Example 1:\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 800\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [5,7,7,8,8,10], target = 8\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 800\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 801\n      },\n      __self: this\n    }, \"Output: \"), \"[3,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 801\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 801\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 802\n      },\n      __self: this\n    }, \"Example 2\"), \":\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 802\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 804\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [5,7,7,8,8,10], target = 6\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 804\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 805\n      },\n      __self: this\n    }, \"Output: \"), \"[-1,-1]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 806\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: searchRange,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 807\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 813\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 815\n      },\n      __self: this\n    }, \"16. Maximum Gap.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 816\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maximumGap,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 817\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 823\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 825\n      },\n      __self: this\n    }, \"17. Search Insert Position.\"), \"Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 827\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 828\n      },\n      __self: this\n    }, \"Input: \"), \"[1,3,5,6], 5\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 828\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 829\n      },\n      __self: this\n    }, \"Output: \"), \"2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 829\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 829\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 830\n      },\n      __self: this\n    }, \"Example 2:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 830\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 832\n      },\n      __self: this\n    }, \"Input: \"), \"[1,3,5,6], 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 832\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 833\n      },\n      __self: this\n    }, \"Output: \"), \"1\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 834\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: searchInsert,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 835\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 841\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 843\n      },\n      __self: this\n    }, \"18. Combination Sum\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 844\n      },\n      __self: this\n    }, \"Input: \"), \"candidates = [2,3,6,7], target = 7,\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 844\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 845\n      },\n      __self: this\n    }, \"A solution set is: \"), \"[ [7],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 847\n      },\n      __self: this\n    }), \"[2,2,3]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 848\n      },\n      __self: this\n    }), \"]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 850\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: combinationSum,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 851\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 857\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 859\n      },\n      __self: this\n    }, \"19. Missing Number\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 860\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: missing_number,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 861\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 867\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 869\n      },\n      __self: this\n    }, \"20. First Missing Positive\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 870\n      },\n      __self: this\n    }, \"Input: \"), \"[3,4,-1,1]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 870\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 871\n      },\n      __self: this\n    }, \"Output: \"), \"2\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 872\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: firstMissingPositive,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 873\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 879\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 881\n      },\n      __self: this\n    }, \"21. Missing Ranges.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 882\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: findMissingRanges,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 883\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 889\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 891\n      },\n      __self: this\n    }, \"22. Permutations.\"), \"Given a collection of distinct integers, return all possible permutations.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 893\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: permute,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 894\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 900\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 902\n      },\n      __self: this\n    }, \"23. Largest Number.\"), \"Given a list of non negative integers, arrange them such that they form the largest number.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 904\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: largestNumber,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 905\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 911\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 913\n      },\n      __self: this\n    }, \"24. Contains Duplicate.\"), \"Given an array of integers, find if the array contains any duplicates.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 915\n      },\n      __self: this\n    }), \"Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 917\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: containsDuplicate,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 918\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 924\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 926\n      },\n      __self: this\n    }, \"25. Summary Ranges.\"), \"Given a sorted integer array without duplicates, return the summary of its ranges.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 928\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: summaryRanges,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 929\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 935\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 937\n      },\n      __self: this\n    }, \"26. Product of Array Except Self.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 938\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: productExceptSelf,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 939\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 945\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 947\n      },\n      __self: this\n    }, \"27. Count of Smaller Numbers After Self.\"), \"You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 949\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 950\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [5,2,6,1]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 950\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 951\n      },\n      __self: this\n    }, \"Output: \"), \"[2,1,1,0]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 951\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 952\n      },\n      __self: this\n    }, \"Explanation: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 953\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 954\n      },\n      __self: this\n    }, \"To the right of 5 there are 2 smaller elements (2 and 1).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 955\n      },\n      __self: this\n    }, \"To the right of 2 there is only 1 smaller element (1).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 956\n      },\n      __self: this\n    }, \"To the right of 6 there is 1 smaller element (1).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 957\n      },\n      __self: this\n    }, \"To the right of 1 there is 0 smaller element.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 959\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: countSmaller,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 960\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 966\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 968\n      },\n      __self: this\n    }, \"28. Coin Change.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 969\n      },\n      __self: this\n    }, \"Input: \"), \"coins = [1, 2, 5], amount = 11\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 969\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 970\n      },\n      __self: this\n    }, \"Output: \"), \"3 \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 970\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 971\n      },\n      __self: this\n    }, \"Explanation: \"), \"11 = 5 + 5 + 1\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 972\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: coinChange,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 973\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 979\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default withStyles(styles)(DSLogic2);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/arrayAlgo.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","strArray","trim","Sort","duplicates","compare_array","recursionReverseArray","findMedianSortedArrays","maxSubArray","plusOne","arrayCounter","countElements","find132pattern","numIdenticalPairs","removeElement","searchRange","maximumGap","searchInsert","combinationSum","missing_number","firstMissingPositive","findMissingRanges","permute","largestNumber","containsDuplicate","summaryRanges","productExceptSelf","countSmaller","coinChange","DSLogic2","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst strArray = `\n    var strArray = \"StackOverflow\".split(\"\");\n    console.log(strArray.join(\"\"));\n`.trim();\n\nconst Sort = `\nlet i, j, arr=[0,9,8,7,6];\nvar max=0;\n\nfor(i=0; i<arr.length; i++){\n  for(j=i; j<arr.length; j++){\n    if(arr[i]>arr[j]){\n      var temp=arr[i];\n      arr[i]=arr[j];\n      arr[j]=temp;\n    }\n  }\n}\n\nconsole.log(arr);\n\n\n//Greatest Product Of 3\nmax = arr[arr.length-1] * arr[arr.length-2] * arr[arr.length-3]\nconsole.log(max);\n`.trim()\n\nconst duplicates = `\nvar array = [1,2,3,4,3,0,9,0,1];\nvar result=[];\n\nfor(let i=0; i<array.length;i++){\n    let count=0;\n    for(let j=0;j<result.length;j++){\n        if(array[i]==result[j]){\n            count +=1;\n        }\n    }\n    if(count==0){\n        result.push(array[i]);\n    }  \n}\n\nconsole.log(result) `.trim()\n\nconst compare_array = `\nfunction compare(){\n  const arr=[1,2,3,4,5,6];\n  const arr2=[5,6,7,8,9,0];\n  const result=[];\n  \n  for(let i=0; i<arr.length; i++){\n    if(arr2.indexOf(arr[i]) !== -1){\n      result.push(arr[i]);\n    }\n  }\n  console.log(result)\n}\n\ncompare();\n\n\n//Unique name\nfunction getUnique(){\n  var names = [\"John\", \"Peter\", \"Clark\", \"Harry\", \"John\", \"Alice\"];\n  var newName = [];\n  \n  for(i=0; i < names.length; i++){\n      if(newName.indexOf(names[i]) === -1) {\n          newName.push(names[i]);\n      }\n  }\n  console.log(newName);\n}\n\ngetUnique();\n`.trim();\n\nconst recursionReverseArray = `\nvar apple = [5,6,7,8,9];\nvar reverse = function(arr){\n var result = [];\n var newArr = [];\n   arr.forEach((item) => newArr.push(item));\n     var inner = function(x){\n     if(x.length > 0){\n       result.push(x.pop())\n       inner(x);\n     }\n   return;\n }\n \n inner(newArr);\n return result;\n}\n\nconsole.log(apple)\nconsole.log(reverse(apple))`.trim()\n\nconst findMedianSortedArrays = `\nfunction findMedianSortedArrays(nums1, nums2){\n  function merge(xs1, xs2){\n    if (!xs1 || !xs1.length) return xs2;\n    if (!xs2 || !xs2.length) return xs1;\n\n    const [hd1, ...rest1] = xs1\n    const [hd2, ...rest2] = xs2\n    return hd1 <= hd2 ? [hd1, ...merge(rest1, xs2)] : [hd2, ...merge(xs1, rest2)]\n  }\n  const nums = merge(nums1, nums2)\n  const middle = Math.floor((nums.length-1) / 2)\n\n  return (middle * 2 === (nums.length-1)) ?  nums[middle] : ((nums[middle] + nums[middle + 1]) / 2) \n}\n\nconsole.log(findMedianSortedArrays([1,2],[3,4]))\n`.trim();\n\nconst maxSubArray = `\nfunction maxSubArray(nums){\n  let max = -Infinity;\n  let currentMax = -Infinity;\n\n  for (let i = 0; i < nums.length; i++) {\n    currentMax = Math.max(\n      currentMax + nums[i],\n      nums[i],\n    )\n    max = Math.max(max, currentMax)\n  }\n  return max\n}\n\nconsole.log(maxSubArray([-2,1,-3,4,-1,2,1,-5,4]))\n`.trim();\n\nconst plusOne = `\nfunction plusOne(digits = []){\n  if (digits.length === 0) return digits;\n\n  if (digits[digits.length - 1] < 9) {\n    digits[digits.length - 1] += 1\n    return digits\n  }\n\n  let index = digits.length - 1\n  let current = 1\n\n  while (index >= 0) {\n    const sum = current + digits[index]\n    if (sum > 9) {\n      digits[index] = sum - 10\n      current = 1\n      index -= 1\n    } \n    else {\n      digits[index] = sum\n      current = 0\n      index -= 1\n      return digits\n    }\n  }\n  return current === 1 ? [1, ...digits] : digits\n}\n\nconsole.log(plusOne([1,2,3]))\n`.trim();\n\nconst arrayCounter = `\nfunction arrCounter(arr){\n  var counter = 0;\n  var maxCount = 0;\n\n    function inner(n){\n      if(!Array.isArray(n)){\n        maxCount = Math.max(maxCount, counter);\n     counter = 0;\n     return\n   }\n   \n   n.forEach(num => {\n   counter ++;\n   inner(num);\n   })\n }\n \n inner(arr);\n console.log(maxCount)\n return maxCount;\n}\n\narrCounter([[3]])\narrCounter([[[[[[[9]]]]]]])\narrCounter([])\n`.trim()\n\nconst countElements = `\nfunction countElements(arr) {\n  const set = new Set()\n  \n  arr.forEach(num => set.add(num))\n  return arr.reduce((acc, num) => {\n      if(set.has(num+1)){\n          return acc + 1\n      }\n      return acc\n  },0)\n};\n\nconsole.log(countElements([1,2,3,0]))`.trim();\n\nconst find132pattern = `\nfunction find132pattern(nums) {\n  let max = -Infinity\n  const stack = []; \n\n  for (let i = nums.length - 1; i >= 0; i--) {\n    while (nums[i] > stack[stack.length - 1]) {\n      max = stack.pop()\n    }\n    if (nums[i] < max) return true;\n    stack.push(nums[i])\n  }\n  \n  return false\n}\n\nconsole.log(find132pattern([3,1,4,2]))\n`.trim();\n\nconst numIdenticalPairs = `\nfunction numIdenticalPairs(nums) {\n  let count = 0\n  \n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[i] === nums[j]) {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\nconsole.log(numIdenticalPairs([1,2,3,1,1,3]))\n`.trim();\n\nconst removeElement = `\nfunction removeElement(nums, val) {\n  let left = 0\n\n  const swap = (a, b) => {\n    const temp = nums[a]\n    nums[a] = nums[b]\n    nums[b] = temp\n  }\n\n  while (left <= nums.length - 1) {\n    while (nums[nums.length - 1] === val) {\n      nums.pop()\n    }\n    \n    while (nums[left] !== val && left <= nums.length - 1) {\n      left += 1\n    }\n\n    if (left < nums.length - 1) {\n      swap(left, nums.length - 1)\n      left += 1\n      nums.pop()\n    }\n  }\n  return nums.length\n}\n\nconsole.log(removeElement([0,1,2,2,3,0,4,2],1))\n`.trim();\n\nconst searchRange = `\nfunction searchRange(nums = [], target){\n  function binarySearch(left, right, position = 'middle'){\n    let pivot = -1\n    \n    while (left <= right) {\n      const middle = Math.floor((left + right) / 2)\n      if (nums[middle] === target) {\n        if (position === 'middle') {\n          pivot = middle\n          break\n        } else if (position === 'left') {\n          pivot = middle\n          right = middle - 1\n        } else if (position === 'right') {\n          pivot = middle\n          left = middle + 1\n        }\n      } else if (nums[middle] < target) {\n        left = middle + 1\n      } else {\n        right = middle - 1\n      }\n    }\n    return pivot\n  }\n\n\n  const pivot = binarySearch(0, nums.length - 1, 'middle')\n  return [\n    binarySearch(0, pivot, 'left'),\n    binarySearch(pivot, nums.length - 1, 'right'),\n  ]\n}\n\nconsole.log(searchRange([5,7,7,8,8,10],6))\n`.trim();\n\nconst maximumGap = `\n\n`.trim();\n\nconst searchInsert = `\nconst searchInsert = (nums, target) => {\n  const aux = (low, high) => {\n    if (low > high) {\n      return low\n    }\n    const middle = Math.floor((low + high) / 2)\n    if (target === nums[middle]) {\n      return middle\n    } if (target > nums[middle]) {\n      return aux(middle + 1, high)\n    }\n    return aux(low, middle - 1)\n  }\n  return aux(0, nums.length - 1)\n}\n\nconsole.log(searchInsert([1,3,5,6], 5))`.trim();\n\nconst combinationSum = `\nvar combinationSum = function(candidates, target) {\n  const result = []\n  const aux = (start,current=[], sum = 0) => {\n      if(sum > target) {\n          return \n      }\n      if(sum === target) {\n          result.push(current)\n          return\n      }\n      for(let i = start; i < candidates.length; i++) {\n          aux(i, [...current, candidates[i]], sum+candidates[i])\n      }\n  }\n  for(let i = 0; i <  candidates.length; i++) {\n      aux(i, [candidates[i]], candidates[i])\n  }\n  return result\n};\n\nconsole.log(combinationSum([2,3,5],8))`.trim();\n\nconst missing_number = `\nfunction missNum() {\n  let i, arr=[0,1,2,4,5], exactsum=0, result=0;\n  exactsum = arr.reduce((a, b) => a + b);\n\n  for (i=0; i<=arr.length; i++) {\n    result += i\n  }\n  \n  result -= exactsum;\n  console.log('Missing Number', result)\n}\n\nmissNum();\n `.trim()\n\nconst firstMissingPositive = `\nconst firstMissingPositive = (nums = []) => {\n  const swap = (a, b) => {\n    const temp = nums[a]\n    nums[a] = nums[b]\n    nums[b] = temp\n  }\n  let index = 0\n  while (index < nums.length) {\n    if (\n      nums[index] !== nums[nums[index] - 1]\n      && nums[index] > 0\n      && nums[index] <= nums.length\n    ) {\n      swap(index, nums[index] - 1)\n    } else {\n      index += 1\n    }\n  }\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] !== i + 1) {\n      return i + 1\n    }\n  }\n  return nums.length + 1\n}\n\nconsole.log(firstMissingPositive([3,4,-1,1]))`.trim();\n\nconst findMissingRanges = `\nconst findMissingRanges = function (nums, lower, upper) {\n  const result = []\n  const count = (lo, hi) => hi - lo - 1\n  const set = (lo, hi) => {\n    if (count(lo, hi) === 1) {\n      result.push('$'{lo + 1}')\n    } else if (count(lo, hi) > 1) {\n      result.push('$'{lo + 1}->'$'{hi - 1}')\n    }\n  }\n  for (let i = 0; i <= nums.length; i++) {\n    set(\n      i === 0 ? lower - 1 : nums[i - 1],\n      i === nums.length ? upper + 1 : nums[i],\n    )\n  }\n  return result\n}\n\nconsole.log(findMissingRanges([1,2,3,-2,4]))`.trim();\n\nconst permute = `\nconst permute = (nums = []) => {\n  const result = []\n  const aux = (list = [], current = []) => {\n    if (list.length === 0) {\n      result.push(current)\n    }\n    list.forEach((number, index) => {\n      aux(list.filter((v, index2) => index2 !== index), [...current, number])\n    })\n  }\n  aux(nums)\n  return result\n}\n\nconsole.log(permute([1,2,3]))`.trim();\n\nconst largestNumber = `\nconst largestNumber = function (nums = []) {\n  nums.sort((a, b) => {\n    const digitsA = a.toString(10) + b.toString(10)\n    const digitsB = b.toString(10) + a.toString(10)\n    for (let i = 0; i < digitsA.length; i++) {\n      const digitB = parseInt(digitsB[i], 10)\n      const digitA = parseInt(digitsA[i], 10)\n      if (digitB > digitA || digitB < digitA) {\n        return digitB - digitA\n      }\n    }\n    return 0\n  })\n  const result = nums.join('')\n  return result[0] === '0' ? '0' : result\n}\n\nconsole.log(largestNumber([10,2]))`.trim();\n\nconst containsDuplicate = `\nconst containsDuplicate = (nums) => {\n  const map = {}\n  for (num of nums) {\n    if (map[num]) {\n      return true\n    }\n    map[num] = 1\n  }\n  return false\n}\n\nconsole.log(containsDuplicate([1,2,3,1]))`.trim();\n\nconst summaryRanges = `\nconst summaryRanges = function (nums) {\n  let start = null\n  const result = []\n  for (let i = 0; i < nums.length; i++) {\n    if (start === null) {\n      start = nums[i]\n    }\n    if (nums[i] === nums[i + 1] - 1) {\n      continue\n    }\n    if (nums[i] === start) {\n      result.push(nums[i].toString())\n      start = null\n    } else {\n      result.push('$'{start}->'$'{nums[i]}')\n      start = null\n    }\n  }\n  return result\n}\n\nconsole.log(summaryRanges([1,2,3,4,6,7,9]))`.trim();\n\nconst productExceptSelf = `\nconst productExceptSelf = (nums = []) => {\n  if(!nums.length) {\n      return nums\n  }\n  const product = [nums[0]]\n  for(let i = 1; i < nums.length; i++) {\n      product[i] = nums[i] * product[i-1]\n  }\n  let suffixProduct = 1\n  for(let i = nums.length -1; i >= 1; i--) {\n      product[i] = product[i-1] * suffixProduct\n      suffixProduct *= nums[i]\n  }\n  product[0] = suffixProduct\n  return product\n}\n\nconsole.log(productExceptSelf([1,2,3,4]))`.trim();\n\nconst countSmaller = `\nconst countSmaller = function (nums) {\n  const result = nums.map(() => 0)\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[j] < nums[i]) {\n        result[i] += 1\n      }\n    }\n  }\n  return result\n}\n\nconsole.log(countSmaller([5,2,6,1]))`.trim();\n\nconst coinChange = `\nconst coinChange = (coins = [], amount) => {\n  const memo = {}\n  const aux = (remainAmount, coinIndex) => {\n    if (\n      memo[remainAmount] !== undefined\n      && memo[remainAmount][coinIndex] !== undefined\n    ) {\n      return memo[remainAmount][coinIndex]\n    }\n    if (remainAmount < 0) {\n      return Infinity\n    }\n    if (remainAmount === 0) {\n      return 0\n    }\n    if (coinIndex < 0 && remainAmount > 0) {\n      return Infinity\n    }\n    memo[remainAmount] = memo[remainAmount] || {}\n    memo[remainAmount][coinIndex] = Math.min(\n      aux(remainAmount - coins[coinIndex], coinIndex) + 1,\n      aux(remainAmount, coinIndex - 1),\n    )\n    return memo[remainAmount][coinIndex]\n  }\n  const result = aux(amount, coins.length - 1)\n  return result === Infinity ? -1 : result\n}\n\nconsole.log(coinChange([1, 2, 5], 11))`.trim();\n\n\nclass DSLogic2 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n            <h3>1. Convert a string to an array</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={strArray}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Sort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Remove Duplicates</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={duplicates}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Compare Array</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={compare_array}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. Recursion Reverse Array</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={recursionReverseArray}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Median of Two Sorted Arrays.</h3>\n              Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\n              <br/>\n              <b>Follow up: </b>The overall run time complexity should be O(log (m+n)).\n              <br/>\n              \n\n              <b>Example 1:</b>\n              <br/>\n              <b>Input: </b>nums1 = [1,3], nums2 = [2]<br/>\n              <b>Output: </b>2.00000<br/>\n              <b>Explanation: </b>merged array = [1,2,3] and median is 2.<br/><br/>\n              <b>Example 2: </b><br/>\n\n              <b>Input: </b>nums1 = [1,2], nums2 = [3,4]<br/>\n              <b>Output: </b>2.50000<br/>\n              <b>Explanation: </b>merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n              <div style={titles}>\n                <PrismCode\n                  code={findMedianSortedArrays}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>7. Maximum Subarray.</h3>\n              <b>Input: </b>nums = [-2,1,-3,4,-1,2,1,-5,4]<br/>\n              <b>Output: </b>6<br/>\n              <b>Explanation: </b>[4,-1,2,1] has the largest sum = 6.\n              <div style={titles}>\n                <PrismCode\n                  code={maxSubArray}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>8. Plus One.</h3>\n              <b>Input: </b>digits = [1,2,3]<br/>\n              <b>Output: </b>[1,2,4]\n              <br/><br/>\n              <b>Example 2:</b><br/>\n              <b>Input: </b>digits = [4,3,2,1]<br/>\n              <b>Output: </b>[4,3,2,2]\n              <div style={titles}>\n                <PrismCode\n                  code={plusOne}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>9. Array Counter</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={arrayCounter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>10. Counting Elements.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={countElements}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>11. 132 Pattern.</h3>\n              <b>Input: </b>nums = [1,2,3,4]<br/>\n              <b>Output: </b>false<br/>\n              <b>Explanation: </b>There is no 132 pattern in the sequence.\n              <div style={titles}>\n                <PrismCode\n                  code={find132pattern}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>13. Number of Good Pairs.</h3>\n              <b>Input: </b>nums = [1,2,3,1,1,3] <br/>\n              <b>Output: </b>4 <br/>\n              <b>Explanation: </b>There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.\n              <div style={titles}>\n                <PrismCode\n                  code={numIdenticalPairs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>14. Remove Element</h3>\n              Given an array nums and a value val, remove all instances of that value in-place and return the new length.\n              <br/>\n              Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n              <br/>\n              The order of elements can be changed. It doesn't matter what you leave beyond the new length.\n              <br/><br/>\n              <b>Example 1:</b><br/>\n\n              Given nums = [3,2,2,3], val = 3,<br/>\n              Your function should return length = 2, with the first two elements of nums being 2.<br/>\n              It doesn't matter what you leave beyond the returned length.\n              <div style={titles}>\n                <PrismCode\n                  code={removeElement}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>15. Find First and Last Position of Element in Sorted Array</h3>\n              Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\n              <br/>\n              Your algorithm's runtime complexity must be in the order of O(log n).<br/>\n\n              If the target is not found in the array, return [-1, -1].<br/>\n\n              <b>Example 1:</b>\n              <b>Input: </b>nums = [5,7,7,8,8,10], target = 8<br/>\n              <b>Output: </b>[3,4]<br/><br/>\n              <b>Example 2</b>:<br/>\n\n              <b>Input: </b>nums = [5,7,7,8,8,10], target = 6<br/>\n              <b>Output: </b>[-1,-1]\n              <div style={titles}>\n                <PrismCode\n                  code={searchRange}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>16. Maximum Gap.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={maximumGap}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>17. Search Insert Position.</h3>\n              Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n              <br/>\n              <b>Input: </b>[1,3,5,6], 5<br/>\n              <b>Output: </b>2<br/><br/>\n              <b>Example 2:</b><br/>\n\n              <b>Input: </b>[1,3,5,6], 2<br/>\n              <b>Output: </b>1\n              <div style={titles}>\n                <PrismCode\n                  code={searchInsert}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>18. Combination Sum</h3>\n              <b>Input: </b>candidates = [2,3,6,7], target = 7,<br/>\n              <b>A solution set is: </b>\n              [\n                [7],<br/>\n                [2,2,3]<br/>\n              ]\n              <div style={titles}>\n                <PrismCode\n                  code={combinationSum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>19. Missing Number</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={missing_number}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>20. First Missing Positive</h3>\n              <b>Input: </b>[3,4,-1,1]<br/>\n              <b>Output: </b>2\n              <div style={titles}>\n                <PrismCode\n                  code={firstMissingPositive}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>21. Missing Ranges.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={findMissingRanges}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>22. Permutations.</h3>\n              Given a collection of distinct integers, return all possible permutations.\n              <div style={titles}>\n                <PrismCode\n                  code={permute}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>23. Largest Number.</h3>\n              Given a list of non negative integers, arrange them such that they form the largest number.\n              <div style={titles}>\n                <PrismCode\n                  code={largestNumber}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>24. Contains Duplicate.</h3>\n              Given an array of integers, find if the array contains any duplicates.\n              <br/>\n              Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.\n              <div style={titles}>\n                <PrismCode\n                  code={containsDuplicate}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>25. Summary Ranges.</h3>\n              Given a sorted integer array without duplicates, return the summary of its ranges.\n              <div style={titles}>\n                <PrismCode\n                  code={summaryRanges}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>26. Product of Array Except Self.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={productExceptSelf}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>27. Count of Smaller Numbers After Self.</h3>\n              You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].\n              <br/>\n              <b>Input: </b>nums = [5,2,6,1]<br/>\n              <b>Output: </b>[2,1,1,0]<br/>\n              <b>Explanation: </b>\n              <ul>\n                <li>To the right of 5 there are 2 smaller elements (2 and 1).</li>\n                <li>To the right of 2 there is only 1 smaller element (1).</li>\n                <li>To the right of 6 there is 1 smaller element (1).</li>\n                <li>To the right of 1 there is 0 smaller element.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={countSmaller}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>28. Coin Change.</h3>\n              <b>Input: </b>coins = [1, 2, 5], amount = 11<br/>\n              <b>Output: </b>3 <br/>\n              <b>Explanation: </b>11 = 5 + 5 + 1\n              <div style={titles}>\n                <PrismCode\n                  code={coinChange}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic2));\n"]},"metadata":{},"sourceType":"module"}