{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/flows.js\";\nimport React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\nconst titles = {\n  backgroundColor: \"#F0F8FF\",\n  padding: \"1px\",\n  fontSize: \"16px\"\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst basicRouter = `\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule, PreloadAllModules } from '@angular/router';\nimport { LoginComponent } from './customer/login.component';\nimport { SignupComponent } from './order/signup.component';\n\nconst routes: Routes = [\n  {\n    path:'login', component:LoginComponent\n  },\n  {\n    path:'signup', component:SignupComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n\n//\n<a routerLink='login'>Login</a>\n<a routerLink='signup'>Signp</a>\n\n<router-outlet></router-outlet>\n`.trim();\nconst counters = `\n<a routerLink=\"/home\">Home</a>\n`.trim();\nconst addcomponents = `\nrouter.navigateByUrl(\"/team/33/user/11\");\n\n// Navigate without updating the URL\nrouter.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n`.trim();\nconst routerLink = `\n<my-tile [routerLink]=\"['/secondPage', item.id, 'item-list']\" *ngFor=\"let item of listaOfItem\" [item]=\"item\">\n</my-tile>\n`.trim();\nconst javaScriptExp = `\n‘{{ someExpression() }}’\n`.trim();\nconst CanActivate = `\nimport { Injectable } from '@angular/core';\nimport { Router, CanActivate } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class AuthGuardService implements CanActivate {\n  constructor(public auth: AuthService, public router: Router) {}\n  canActivate(): boolean {\n    if (!this.auth.isAuthenticated()) {\n      this.router.navigate(['login']);\n      return false;\n    }\n    return true;\n  }\n}\n`.trim();\nconst protect = `\n// import the newly created AuthGuard\nconst routes: Routes = [\n  {\n    path: 'account',\n    canActivate: [AuthGuard]\n  }\n];\n`.trim();\nconst purpose = `\n<base href=\"/\">\n`.trim();\nconst angularRouter = `import { RouterModule, Routes } from '@angular/router';`.trim();\nconst pipes = `\nRouterLink-client side:\n<a [routerLink]=['/students]\">Students</a>\n<router-outlet></router-outlet>`.trim();\nconst routerState = `\n@Component({templateUrl:'template.html'})\nclass MyComponent {\n  constructor(router: Router) {\n    const state: RouterState = router.routerState;\n    const root: ActivatedRoute = state.root;\n    const child = root.firstChild;\n    const id: Observable<string> = child.params.map(p => p.id);\n    //...\n  }\n}`.trim();\nconst multipleRoute = `\nconst routes: Routes = [\n  {\n    path:\"\", \n    component:HomeComponent\n  },\n  {\n    path:\"about\", redirectTo:\"signup\", pathMatch:\"full\"\n    // component:AboutComponent\n  },\n  {\n    path:'profile/:username', component:ProfileComponent\n  },\n  {\n    path:'profile/:username/:userid', component:ProfileComponent\n  }\n];\n\n\n//about.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport {ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.css']\n})\nexport class AboutComponent implements OnInit {\nusername=\"\";\n  name1=\"\";\n  name2=\"\";\n  userid1=\"\";\n  userid2=\"\";\n  constructor( private route: ActivatedRoute, ) {}\n \n\n  ngOnInit(): void {\n\n    this.route.params.subscribe(params => {      //pass data as parameter\nconsole.log(params);\n      this.name1 = params['username'];\n      this.userid1=params['userid'];\n    });\n\n\n    this.route.queryParams.subscribe(params => {  //pass data as query string parameter\n      console.log(params);\n            this.name2 = params['username'];\n            this.userid2=params['userid'];\n          });\n  }\n}\n\n\n//browser url show through template\n<h1>Parameter User Profile</h1>\n<h2>Username:{{name1}}</h2>\n<h2>User ID:{{userid1}}</h2>\n`.trim();\nconst currentRoute = `\n<router-outlet></router-outlet>                          //Unnamed router outlet as primary outlet\n<router-outlet name=\"second\"></router-outlet>            //named router outlet as secondary outlet\n\n\n//app-routing.module.ts\nconst routes: Routes = [\n  {\n    path:'customer', loadChildren:()=>import('./customer/customer.module')\n  .then(mod=>mod.CustomerModule),\n  component:CustomerComponent\n  },\n  {\n    path:'customerdetails', \n  component:CudtomerdetailsComponent,\n  outlet:'customerList'\n  },\n  {\n    path:'order', loadChildren:()=>import('./order/order.module')\n  .then(mod=>mod.OrderModule),\n  component:OrderComponent\n  }\n];\n\n\n//app.component.ts\nimport {UserdataService} from './userdata.service';\n\n@Component({\n  selector: 'app-root',\n  template: '\n      <a routerLink=\"customer\">Customer</a><br/>\n      <a [routerLink]=\"[{Outlets:{customerList:['customerdetails']}}]\">Details</a><br/>\n\n      <a routerLink=\"order\">Order</a>\n\n      <router-outlet></router-outlet>\n      <router-outlet name=\"customerList\"></router-outlet>\n  ',\n  providers:[UserdataService]\n})\n\nexport class AppComponent {}\n`.trim();\nconst routerLinkActive = `\n<a routerLink=\"/\" routerLinkActive=\"active\" [routerLinkActiveOptions]=\"{exact:true}\">Home</a><br/>\n<a routerLink=\"/about\" routerLinkActive=\"active\">About</a><br/>\n<a routerLink=\"/login\" routerLinkActive=\"active\">Login</a><br/>\n<a routerLink=\"/signup\" routerLinkActive=\"active\">SignUp</a><br/>\n<a routerLink=\"/profile\" routerLinkActive=\"active\">Profile</a>\n`.trim();\nconst outerOutlet = `\n<router-outlet name=\"primary\"></router-outlet>\n<router-outlet name=\"secondary\"></router-outlet>\n\n\n//You can then configure your routes to use the appropriate outlet by specifying the outlet \n//property in the route definition. \nconst routes: Routes = [\n  { path: 'route1', component: Component1, outlet: 'primary' },\n  { path: 'route2', component: Component2, outlet: 'secondary' },\n];\n`.trim();\n\nclass NgrxCounter extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, \"Basic Routing\"), \"Router basically means navigating b/w pages. we have seen many sites with links that direct us to a new page.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: basicRouter,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, \"Routing with multiple route parameter\"), \"We should define custome route before wildcard route. Otherwise it not work if we define after wildcard route.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: multipleRoute,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, \"Name & Multiple router-outlets\"), \"Router-outlet work as a placeholder which is used to los\\\\ad the different components dynamically based on the activated component or current route state.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: currentRoute,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, \"routerLinkActive\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: routerLinkActive,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, \"2. What are the router imports\"), \"The router imports in Angular are used to configure and manage the application's routing functionality. The following are some of the router imports in Angular:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, \"RouterModule: \"), \"This is the core Angular module that provides the routing functionality for the application. It includes several classes and methods for configuring routes, navigating between routes, and handling route-related events.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, \"Routes: \"), \"This is an array of route objects that define the application's routing configuration. Each route object specifies a path, a component, and other optional properties such as data, guards, and resolvers.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, \"Router: \"), \"This is the Angular service that provides methods for navigating between routes, accessing the current route, and subscribing to route-related events.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, \"ActivatedRoute: \"), \"This is a service that provides information about the current route, including the route parameters, query parameters, and route data.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, \"RouterLink: \"), \"This is a directive that is used in HTML templates to create links between routes. It takes a path as input and generates a link to the corresponding route.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, \"RouterOutlet: \"), \"This is a directive that is used in HTML templates to define the location where the component corresponding to the current route should be displayed.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, \"These router imports are essential for setting up the routing functionality in an Angular application. By configuring the routes, using the router and activated route services, and utilizing the router link and outlet directives, developers can create a seamless and intuitive user experience for their application.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: angularRouter,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, \"3. What are Router Events\"), \"Router Events in Angular are a set of events emitted by the Angular Router whenever the navigation state changes. The Router Events provide a way to track and respond to changes in the application's navigation, and they can be used to perform tasks such as updating the UI, tracking user behavior, or logging navigation events.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, \"NavigationStart: \"), \"Emitted when navigation starts.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, \"RoutesRecognized: \"), \"Emitted when the Router has recognized the new route and is about to activate it.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, \"RouteConfigLoadStart: \"), \"Emitted when the Router begins loading a lazy-loaded route configuration.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, \"RouteConfigLoadEnd: \"), \"Emitted when the Router has finished loading a lazy-loaded route configuration.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, \"NavigationEnd: \"), \"Emitted when navigation has successfully completed.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }, \"NavigationCancel: \"), \"Emitted when navigation has been cancelled.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }, \"NavigationError: \"), \"Emitted when navigation has failed due to an error.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }, \"4. What is the use of router-outlet in angular 8.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }, \"Router outlet is a dynamic component that router uses to display views based on router navigations.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, \"The RouterOutlet acts as a placeholder that marks the spot in the template where the router should display the components for that outlet. Router outlet is used like a component,\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }, \"It tells the router where to display routed views.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    }, \"5. Can I use multiple router outlets in Angular 8?\"), \"Yes, you can use multiple router outlets in Angular 8 (and newer versions). A router outlet is a directive that is used to define the location where the router will display the components that correspond to the current route.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }), \"To use multiple router outlets, you can define them in your app's template using the router-outlet directive and provide them with a unique name using the name attribute. For example, you could define two router outlets with names \\\"primary\\\" and \\\"secondary\\\" like this:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: outerOutlet,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }, \"6. How do you make a router link in HTML?\"), \"Linking Routes in HTML.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }, \"To make a router link in HTML in Angular, you can use the anchor tag with the routerLink directive.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }, \"If you use the routerLink directive without the brackets, you'll need to pass the route as a string.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: counters,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    }, \"7. Difference between navigate and navigatebyurl in angular.\"), \"navigateByUrl is similar to changing the location bar directly\\u2013we are providing the \\u201Cwhole\\u201D new URL. Whereas router. navigate creates a new URL by applying an array of passed-in commands, a patch, to the current URL.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: addcomponents,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491\n      },\n      __self: this\n    }, \"8. How do you detect route change in Angular?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493\n      },\n      __self: this\n    }, \"Import Router, Event, NavigationStart, NavigationEnd, NavigationError from \\u2018@angular/router\\u2019.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }, \"And inject router in the constructor.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    }, \"Subscribe to the NavigationStart, NavigationEnd, NavigationError events of the router.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }, \"9. When to use Route class in case of navigation?\"), \"Using Route class in case of navigation to happen on a triggered event. Before performing the above two operations, there is a need to register this component in the Route class\\u2019s instance which lies inside the app-routing.module.ts file. This will be further used to navigate from child to parent.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }, \"10. What is pathMatch in angular routing?\"), \"Angular 2 applications require to redirect route and pathMatch is a property which informs a router how to match and map a URL to the path of an actual route. In the application, the router automatically select the route using component HeroListComponent only when the entire URL of matches.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }, \"11. Difference between Angular's canLoad and canActivate?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }, \"canActivate: \"), \"is used to prevent unauthorized users from accessing certain routes.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    }, \"canLoad: \"), \"is used to prevent the application from loading entire modules lazily if the user is not authorized to do so.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }, \"12. Router Link\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }, \"routerLink is the selector for the RouterLink Directive that turns user clicks into router navigations.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }, \"this Directive generates our link based on the route path.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: pipes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }, \"13. What are active router links\"), \"RouterLinkActive is a directive that toggles css classes for active RouterLink bindings based on the current RouterState. i.e, the Router will add CSS classes when this link is active and remove when the link is inactive.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555\n      },\n      __self: this\n    }, \"14. What is router state\"), \"RouterState is a tree of activated routes. Every node in this tree knows about the \\\"consumed\\\" URL segments, the extracted parameters, and the resolved data.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    }), \"You can access the current RouterState from anywhere in the application using the Router service and the routerState property.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: routerState,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }, \"16. How to specify which route to navigate to in NavLink?\"), \"To specify which route to navigate to, use the to prop and pass the path name. The activeClassName prop will add an active class to the link if it\\u2019s currently active. On the browser, the NavLink component is rendered as an tag with an href attribute value that was passed in the to prop.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578\n      },\n      __self: this\n    }, \"17. When to use absolute path in navigate method?\"), \"Navigate Method always uses the absolute path unless you provide a starting point. \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580\n      },\n      __self: this\n    }, \"navigate.navigateByUrl\"), \" Use this method if you want to navigate to a URL by using the absolute path. The first argument is a string containing the complete URL.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584\n      },\n      __self: this\n    }, \"18. What is Routing Guard in Angular?\"), \"Angular\\u2019s route guards tell the router whether or not it should allow navigation to a requested route. They make this decision by looking for a true or false return value from a class which implements the given guard interface.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590\n      },\n      __self: this\n    }), \"There are five different types of guards:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593\n      },\n      __self: this\n    }, \"CanActivate\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594\n      },\n      __self: this\n    }, \"CanActivateChild\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595\n      },\n      __self: this\n    }, \"CanDeactivate\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596\n      },\n      __self: this\n    }, \"CanLoad\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    }, \"Resolve\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: CanActivate,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607\n      },\n      __self: this\n    }, \"19. How would you protect a component being activated through the router?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    }, \"Create a guard service: \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    }, \"ng g guard auth\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615\n      },\n      __self: this\n    }, \"Create \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616\n      },\n      __self: this\n    }, \"canActivate()\"), \" or \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616\n      },\n      __self: this\n    }, \"canActivateChild()\"), \" \", \"methods\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619\n      },\n      __self: this\n    }, \"Use the guard when defining routes\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: protect,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629\n      },\n      __self: this\n    }, \"Some other available guards: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632\n      },\n      __self: this\n    }, \"CanActivate: \"), \"Check if a user has access\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 634\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 635\n      },\n      __self: this\n    }, \"CanActivateChild: \"), \"Check if a user has access to any of the child routes\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639\n      },\n      __self: this\n    }, \"CanDeactivate: \"), \"Can a user leave a page? For example, they haven't finished editing a post\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 642\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 643\n      },\n      __self: this\n    }, \"Resolve: \"), \"Grab data before the route is instantiated\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646\n      },\n      __self: this\n    }, \"CanLoad: \"), \"Check to see if we can load the routes assets\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 649\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 650\n      },\n      __self: this\n    }, \"20. What is the purpose of base href tag?\"), \"The routing application should add element to the index.html as the first child in the tag inorder to indicate how to compose navigation URLs. If app folder is the application root then you can set the href value as below.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: purpose,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663\n      },\n      __self: this\n    }, \"21. Pass complex JSON via routerLink.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: routerLink,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672\n      },\n      __self: this\n    }, \"22. What is the use of EventEmitter in angular.\"), \"EventEmitter is used with @Output directive to emit custom events asynchronously and synchronously, and register handlers for those events by subscribing to an instance.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    }, \"24. How do you handle error in Angular?\"), \"By using ErrorHandler class. This class can be extended to create your own global error handler.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681\n      },\n      __self: this\n    }, \"25. How are Angular expressions different from JavaScript expressions?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 686\n      },\n      __self: this\n    }, \"Angular expressions allow us to write JavaScript in HTML\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689\n      },\n      __self: this\n    }, \"Angular expressions are evaluated against a\\xA0local\\xA0scope object whereas JavaScript expressions against\\xA0global\\xA0window object.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 695\n      },\n      __self: this\n    }, \"26. Angular by default, uses client-side rendering for its applications. Can one make an angular application to render on the server-side?\"), \"Yes, with\\xA0Angular Universal, Angular application can render on the server-side.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 702\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704\n      },\n      __self: this\n    }, \"The advantages of using Angular Universal are :\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 706\n      },\n      __self: this\n    }, \"First time users can instantly see a view of the application. This providing\\xA0better user experience.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710\n      },\n      __self: this\n    }, \"Many search engines expect pages in plain HTML, thus, Universal can make sure that your content is available on every search engine, which leads to\\xA0better SEO.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715\n      },\n      __self: this\n    }, \"Any server-side rendered application\\xA0loads faster\\xA0since rendered pages are available to the browser sooner.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 720\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 721\n      },\n      __self: this\n    }, \"27. How does one share data between components in Angular?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725\n      },\n      __self: this\n    }, \"Parent to child using @Input decorator\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 726\n      },\n      __self: this\n    }, \"Child to parent using @ViewChild decorator\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 728\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 729\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 730\n      },\n      __self: this\n    }, \"@ViewChild: \"), \"decorator is used to reference the child component as \\u201Cchild\\u201D property.\"))), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735\n      },\n      __self: this\n    }, \"Child to parent using @Output and EventEmitter\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 737\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 738\n      },\n      __self: this\n    }, \"28. What are filters in Angular? Name a few of them.\"), \"Filters are used to format an expression and present it to the user.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 741\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 742\n      },\n      __self: this\n    }, \"Date\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 743\n      },\n      __self: this\n    }, \"filter\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 744\n      },\n      __self: this\n    }, \"Json\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 745\n      },\n      __self: this\n    }, \"limitTo\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746\n      },\n      __self: this\n    }, \"lowercase\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 748\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 749\n      },\n      __self: this\n    }, \"30. What type of DOM does Angular implement?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 750\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 751\n      },\n      __self: this\n    }, \"DOM (Document Object Model) treats an XML or HTML document as a tree structure in which each node is an object representing a part of the document.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 756\n      },\n      __self: this\n    }, \"Angular uses the regular DOM. This updates the entire tree structure of HTML tags until it reaches the data to be updated. However, to ensure that the speed and performance are not affected, Angular implements Change Detection.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 763\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 764\n      },\n      __self: this\n    }, \"31. What is DOM?\"), \"It is responsible for representing the content of a web page and changes in the architecture of an application. Here, all the objects are organized in the form of a tree, and the document can easily be modified, manipulated, and accessed only with the help of APIs.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 770\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 771\n      },\n      __self: this\n    }, \"32. Shadow DOM\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 772\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 773\n      },\n      __self: this\n    }, \"it means that Shadow DOM allows us to hide the DOM logic behind other elements.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 777\n      },\n      __self: this\n    }, \"Shadow DOM allows us to apply scoped styles to elements without bleeding into the outside world.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 782\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 783\n      },\n      __self: this\n    }, \"33. What is the difference between *ngIf vs [hidden]?\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 784\n      },\n      __self: this\n    }, \"*ngIf\"), \" effectively removes its content from the DOM while\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 785\n      },\n      __self: this\n    }, \"[hidden]\"), \" modifies the \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 785\n      },\n      __self: this\n    }, \"display\"), \" property and only instructs the browser to not show the content but the DOM still contains it.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 788\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 789\n      },\n      __self: this\n    }, \"34. What is server-side rendering in Angular?\"), \"If we have a large application with a big bundle size, our page\\u2019s load speed is slowed down quite a bit as it needs to download all the files, parse JavaScript, and then execute it. To overcome this slowness, we can use server-side rendering, which allows us to send a fully rendered page from the server that the browser can display and then let the JavaScript code take over any subsequent interactions from the user.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 797\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 798\n      },\n      __self: this\n    }, \"35. What is Angular Universal?\"), \"Angular Universal is a package for enabling server-side rendering in Angular applications. We can easily make our application ready for server-side rendering using the Angular CLI.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 802\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 803\n      },\n      __self: this\n    }, \"ng add @nguniversal/express-engine\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 804\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 805\n      },\n      __self: this\n    }), \"This allows our Angular application to work well with an ExpressJS web server that compiles HTML pages with Angular Universal based on client requests. This also creates the server-side app module, app.server.module.ts, in our application directory.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 810\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 811\n      },\n      __self: this\n    }, \"36. What is the difference between interpolated content and the content assigned to the innerHTML property of a DOM element?\"), \"Angular interpolation happens when in our template we type some JavaScript expression inside double curly braces\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 817\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: javaScriptExp,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 818\n      },\n      __self: this\n    })), \". This is used to add dynamic content to a web page. However, we can do the same by assigning some dynamic content to the innerHTML property of a DOM element. The difference between the two is that, in Angular, the compiler always escapes the interpolated content, i.e., HTML is not interpreted, and the browser displays the code as it is with brackets and symbols, rather than displaying the output of the interpreted HTML. However, in innerHTML, if the content is HTML, then it is interpreted as the HTML code.\"))));\n  }\n\n}\n\nexport default withStyles(styles)(NgrxCounter);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/flows.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","basicRouter","trim","counters","addcomponents","routerLink","javaScriptExp","CanActivate","protect","purpose","angularRouter","pipes","routerState","multipleRoute","currentRoute","routerLinkActive","outerOutlet","NgrxCounter","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst basicRouter = `\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule, PreloadAllModules } from '@angular/router';\nimport { LoginComponent } from './customer/login.component';\nimport { SignupComponent } from './order/signup.component';\n\nconst routes: Routes = [\n  {\n    path:'login', component:LoginComponent\n  },\n  {\n    path:'signup', component:SignupComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n\n//\n<a routerLink='login'>Login</a>\n<a routerLink='signup'>Signp</a>\n\n<router-outlet></router-outlet>\n`.trim();\n\nconst counters = `\n<a routerLink=\"/home\">Home</a>\n`.trim();\n\nconst addcomponents = `\nrouter.navigateByUrl(\"/team/33/user/11\");\n\n// Navigate without updating the URL\nrouter.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n`.trim();\n\nconst routerLink = `\n<my-tile [routerLink]=\"['/secondPage', item.id, 'item-list']\" *ngFor=\"let item of listaOfItem\" [item]=\"item\">\n</my-tile>\n`.trim();\n\nconst javaScriptExp = `\n‘{{ someExpression() }}’\n`.trim();\n\nconst CanActivate = `\nimport { Injectable } from '@angular/core';\nimport { Router, CanActivate } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class AuthGuardService implements CanActivate {\n  constructor(public auth: AuthService, public router: Router) {}\n  canActivate(): boolean {\n    if (!this.auth.isAuthenticated()) {\n      this.router.navigate(['login']);\n      return false;\n    }\n    return true;\n  }\n}\n`.trim();\n\nconst protect = `\n// import the newly created AuthGuard\nconst routes: Routes = [\n  {\n    path: 'account',\n    canActivate: [AuthGuard]\n  }\n];\n`.trim();\n\nconst purpose = `\n<base href=\"/\">\n`.trim();\n\nconst angularRouter =\n  `import { RouterModule, Routes } from '@angular/router';`.trim();\n\nconst pipes = `\nRouterLink-client side:\n<a [routerLink]=['/students]\">Students</a>\n<router-outlet></router-outlet>`.trim();\n\nconst routerState = `\n@Component({templateUrl:'template.html'})\nclass MyComponent {\n  constructor(router: Router) {\n    const state: RouterState = router.routerState;\n    const root: ActivatedRoute = state.root;\n    const child = root.firstChild;\n    const id: Observable<string> = child.params.map(p => p.id);\n    //...\n  }\n}`.trim();\n\nconst multipleRoute = `\nconst routes: Routes = [\n  {\n    path:\"\", \n    component:HomeComponent\n  },\n  {\n    path:\"about\", redirectTo:\"signup\", pathMatch:\"full\"\n    // component:AboutComponent\n  },\n  {\n    path:'profile/:username', component:ProfileComponent\n  },\n  {\n    path:'profile/:username/:userid', component:ProfileComponent\n  }\n];\n\n\n//about.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport {ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.css']\n})\nexport class AboutComponent implements OnInit {\nusername=\"\";\n  name1=\"\";\n  name2=\"\";\n  userid1=\"\";\n  userid2=\"\";\n  constructor( private route: ActivatedRoute, ) {}\n \n\n  ngOnInit(): void {\n\n    this.route.params.subscribe(params => {      //pass data as parameter\nconsole.log(params);\n      this.name1 = params['username'];\n      this.userid1=params['userid'];\n    });\n\n\n    this.route.queryParams.subscribe(params => {  //pass data as query string parameter\n      console.log(params);\n            this.name2 = params['username'];\n            this.userid2=params['userid'];\n          });\n  }\n}\n\n\n//browser url show through template\n<h1>Parameter User Profile</h1>\n<h2>Username:{{name1}}</h2>\n<h2>User ID:{{userid1}}</h2>\n`.trim();\n\nconst currentRoute = `\n<router-outlet></router-outlet>                          //Unnamed router outlet as primary outlet\n<router-outlet name=\"second\"></router-outlet>            //named router outlet as secondary outlet\n\n\n//app-routing.module.ts\nconst routes: Routes = [\n  {\n    path:'customer', loadChildren:()=>import('./customer/customer.module')\n  .then(mod=>mod.CustomerModule),\n  component:CustomerComponent\n  },\n  {\n    path:'customerdetails', \n  component:CudtomerdetailsComponent,\n  outlet:'customerList'\n  },\n  {\n    path:'order', loadChildren:()=>import('./order/order.module')\n  .then(mod=>mod.OrderModule),\n  component:OrderComponent\n  }\n];\n\n\n//app.component.ts\nimport {UserdataService} from './userdata.service';\n\n@Component({\n  selector: 'app-root',\n  template: '\n      <a routerLink=\"customer\">Customer</a><br/>\n      <a [routerLink]=\"[{Outlets:{customerList:['customerdetails']}}]\">Details</a><br/>\n\n      <a routerLink=\"order\">Order</a>\n\n      <router-outlet></router-outlet>\n      <router-outlet name=\"customerList\"></router-outlet>\n  ',\n  providers:[UserdataService]\n})\n\nexport class AppComponent {}\n`.trim();\n\nconst routerLinkActive = `\n<a routerLink=\"/\" routerLinkActive=\"active\" [routerLinkActiveOptions]=\"{exact:true}\">Home</a><br/>\n<a routerLink=\"/about\" routerLinkActive=\"active\">About</a><br/>\n<a routerLink=\"/login\" routerLinkActive=\"active\">Login</a><br/>\n<a routerLink=\"/signup\" routerLinkActive=\"active\">SignUp</a><br/>\n<a routerLink=\"/profile\" routerLinkActive=\"active\">Profile</a>\n`.trim();\n\nconst outerOutlet = `\n<router-outlet name=\"primary\"></router-outlet>\n<router-outlet name=\"secondary\"></router-outlet>\n\n\n//You can then configure your routes to use the appropriate outlet by specifying the outlet \n//property in the route definition. \nconst routes: Routes = [\n  { path: 'route1', component: Component1, outlet: 'primary' },\n  { path: 'route2', component: Component2, outlet: 'secondary' },\n];\n`.trim();\n\nclass NgrxCounter extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Basic Routing</h3>\n              Router basically means navigating b/w pages. we have seen many\n              sites with links that direct us to a new page.\n              <div style={titles}>\n                <PrismCode\n                  code={basicRouter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Routing with multiple route parameter</h3>\n              We should define custome route before wildcard route. Otherwise it\n              not work if we define after wildcard route.\n              <div style={titles}>\n                <PrismCode\n                  code={multipleRoute}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Name & Multiple router-outlets</h3>\n              Router-outlet work as a placeholder which is used to los\\ad the\n              different components dynamically based on the activated component\n              or current route state.\n              <div style={titles}>\n                <PrismCode\n                  code={currentRoute}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>routerLinkActive</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={routerLinkActive}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>2. What are the router imports</h3>\n              The router imports in Angular are used to configure and manage the\n              application's routing functionality. The following are some of the\n              router imports in Angular:\n              <br />\n              <ul>\n                <li>\n                  <b>RouterModule: </b>This is the core Angular module that\n                  provides the routing functionality for the application. It\n                  includes several classes and methods for configuring routes,\n                  navigating between routes, and handling route-related events.\n                </li>\n                <br />\n                <li>\n                  <b>Routes: </b>This is an array of route objects that define\n                  the application's routing configuration. Each route object\n                  specifies a path, a component, and other optional properties\n                  such as data, guards, and resolvers.\n                </li>\n                <br />\n                <li>\n                  <b>Router: </b>This is the Angular service that provides\n                  methods for navigating between routes, accessing the current\n                  route, and subscribing to route-related events.\n                </li>\n                <br />\n                <li>\n                  <b>ActivatedRoute: </b>This is a service that provides\n                  information about the current route, including the route\n                  parameters, query parameters, and route data.\n                </li>\n                <br />\n                <li>\n                  <b>RouterLink: </b>This is a directive that is used in HTML\n                  templates to create links between routes. It takes a path as\n                  input and generates a link to the corresponding route.\n                </li>\n                <br />\n                <li>\n                  <b>RouterOutlet: </b>This is a directive that is used in HTML\n                  templates to define the location where the component\n                  corresponding to the current route should be displayed.\n                </li>\n                <br />\n                <br />\n                <li>\n                  These router imports are essential for setting up the routing\n                  functionality in an Angular application. By configuring the\n                  routes, using the router and activated route services, and\n                  utilizing the router link and outlet directives, developers\n                  can create a seamless and intuitive user experience for their\n                  application.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={angularRouter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <h3>3. What are Router Events</h3>\n              Router Events in Angular are a set of events emitted by the\n              Angular Router whenever the navigation state changes. The Router\n              Events provide a way to track and respond to changes in the\n              application's navigation, and they can be used to perform tasks\n              such as updating the UI, tracking user behavior, or logging\n              navigation events.\n              <br />\n              <ul>\n                <li>\n                  <b>NavigationStart: </b>Emitted when navigation starts.\n                </li>\n                <br />\n                <li>\n                  <b>RoutesRecognized: </b>Emitted when the Router has\n                  recognized the new route and is about to activate it.\n                </li>\n                <br />\n                <li>\n                  <b>RouteConfigLoadStart: </b>Emitted when the Router begins\n                  loading a lazy-loaded route configuration.\n                </li>\n                <br />\n                <li>\n                  <b>RouteConfigLoadEnd: </b>Emitted when the Router has\n                  finished loading a lazy-loaded route configuration.\n                </li>\n                <br />\n                <li>\n                  <b>NavigationEnd: </b>Emitted when navigation has successfully\n                  completed.\n                </li>\n                <br />\n                <li>\n                  <b>NavigationCancel: </b>Emitted when navigation has been\n                  cancelled.\n                </li>\n                <br />\n                <li>\n                  <b>NavigationError: </b>Emitted when navigation has failed due\n                  to an error.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>4. What is the use of router-outlet in angular 8.</h3>\n              <ul>\n                <li>\n                  Router outlet is a dynamic component that router uses to\n                  display views based on router navigations.\n                </li>\n                <br />\n                <li>\n                  The RouterOutlet acts as a placeholder that marks the spot in\n                  the template where the router should display the components\n                  for that outlet. Router outlet is used like a component,\n                </li>\n                <br />\n                <li>It tells the router where to display routed views.</li>\n              </ul>\n              <br />\n              <h3>5. Can I use multiple router outlets in Angular 8?</h3>\n              Yes, you can use multiple router outlets in Angular 8 (and newer\n              versions). A router outlet is a directive that is used to define\n              the location where the router will display the components that\n              correspond to the current route.\n              <br />\n              <br />\n              To use multiple router outlets, you can define them in your app's\n              template using the router-outlet directive and provide them with a\n              unique name using the name attribute. For example, you could\n              define two router outlets with names \"primary\" and \"secondary\"\n              like this:\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={outerOutlet}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>6. How do you make a router link in HTML?</h3>\n              Linking Routes in HTML.\n              <ol>\n                <li>\n                  To make a router link in HTML in Angular, you can use the\n                  anchor tag with the routerLink directive.\n                </li>\n                <li>\n                  If you use the routerLink directive without the brackets,\n                  you'll need to pass the route as a string.\n                </li>\n              </ol>\n              <div style={titles}>\n                <PrismCode\n                  code={counters}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                7. Difference between navigate and navigatebyurl in angular.\n              </h3>\n              navigateByUrl is similar to changing the location bar directly–we\n              are providing the “whole” new URL. Whereas router. navigate\n              creates a new URL by applying an array of passed-in commands, a\n              patch, to the current URL.\n              <div style={titles}>\n                <PrismCode\n                  code={addcomponents}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>8. How do you detect route change in Angular?</h3>\n              <ul>\n                <li>\n                  Import Router, Event, NavigationStart, NavigationEnd,\n                  NavigationError from ‘@angular/router’.\n                </li>\n                <li>And inject router in the constructor.</li>\n                <li>\n                  Subscribe to the NavigationStart, NavigationEnd,\n                  NavigationError events of the router.\n                </li>\n              </ul>\n              <br />\n              <h3>9. When to use Route class in case of navigation?</h3>\n              Using Route class in case of navigation to happen on a triggered\n              event. Before performing the above two operations, there is a need\n              to register this component in the Route class’s instance which\n              lies inside the app-routing.module.ts file. This will be further\n              used to navigate from child to parent.\n              <br />\n              <h3>10. What is pathMatch in angular routing?</h3>\n              Angular 2 applications require to redirect route and pathMatch is\n              a property which informs a router how to match and map a URL to\n              the path of an actual route. In the application, the router\n              automatically select the route using component HeroListComponent\n              only when the entire URL of matches.\n              <br />\n              <h3>11. Difference between Angular's canLoad and canActivate?</h3>\n              <ul>\n                <li>\n                  <b>canActivate: </b>is used to prevent unauthorized users from\n                  accessing certain routes.\n                </li>\n                <li>\n                  <b>canLoad: </b>is used to prevent the application from\n                  loading entire modules lazily if the user is not authorized to\n                  do so.\n                </li>\n              </ul>\n              <br />\n              <h3>12. Router Link</h3>\n              <ul>\n                <li>\n                  routerLink is the selector for the RouterLink Directive that\n                  turns user clicks into router navigations.\n                </li>\n                <li>\n                  this Directive generates our link based on the route path.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={pipes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>13. What are active router links</h3>\n              RouterLinkActive is a directive that toggles css classes for\n              active RouterLink bindings based on the current RouterState. i.e,\n              the Router will add CSS classes when this link is active and\n              remove when the link is inactive.\n              <br />\n              <h3>14. What is router state</h3>\n              RouterState is a tree of activated routes. Every node in this tree\n              knows about the \"consumed\" URL segments, the extracted parameters,\n              and the resolved data.\n              <br />\n              You can access the current RouterState from anywhere in the\n              application using the Router service and the routerState property.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={routerState}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>16. How to specify which route to navigate to in NavLink?</h3>\n              To specify which route to navigate to, use the to prop and pass\n              the path name. The activeClassName prop will add an active class\n              to the link if it’s currently active. On the browser, the NavLink\n              component is rendered as an tag with an href attribute value that\n              was passed in the to prop.\n              <br />\n              <h3>17. When to use absolute path in navigate method?</h3>\n              Navigate Method always uses the absolute path unless you provide a\n              starting point. <b>navigate.navigateByUrl</b> Use this method if\n              you want to navigate to a URL by using the absolute path. The\n              first argument is a string containing the complete URL.\n              <br />\n              <h3>18. What is Routing Guard in Angular?</h3>\n              Angular’s route guards tell the router whether or not it should\n              allow navigation to a requested route. They make this decision by\n              looking for a true or false return value from a class which\n              implements the given guard interface.\n              <br />\n              <br />\n              There are five different types of guards:\n              <ul>\n                <li>CanActivate</li>\n                <li>CanActivateChild</li>\n                <li>CanDeactivate</li>\n                <li>CanLoad</li>\n                <li>Resolve</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={CanActivate}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                19. How would you protect a component being activated through\n                the router?\n              </h3>\n              <ul>\n                <li>\n                  Create a guard service: <b>ng g guard auth</b>\n                </li>\n                <li>\n                  Create <b>canActivate()</b> or <b>canActivateChild()</b>{\" \"}\n                  methods\n                </li>\n                <li>Use the guard when defining routes</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={protect}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>Some other available guards: </b>\n              <ul>\n                <li>\n                  <b>CanActivate: </b>Check if a user has access\n                </li>\n                <li>\n                  <b>CanActivateChild: </b>Check if a user has access to any of\n                  the child routes\n                </li>\n                <li>\n                  <b>CanDeactivate: </b>Can a user leave a page? For example,\n                  they haven't finished editing a post\n                </li>\n                <li>\n                  <b>Resolve: </b>Grab data before the route is instantiated\n                </li>\n                <li>\n                  <b>CanLoad: </b>Check to see if we can load the routes assets\n                </li>\n              </ul>\n              <br />\n              <h3>20. What is the purpose of base href tag?</h3>\n              The routing application should add element to the index.html as\n              the first child in the tag inorder to indicate how to compose\n              navigation URLs. If app folder is the application root then you\n              can set the href value as below.\n              <div style={titles}>\n                <PrismCode\n                  code={purpose}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>21. Pass complex JSON via routerLink.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={routerLink}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>22. What is the use of EventEmitter in angular.</h3>\n              EventEmitter is used with @Output directive to emit custom events\n              asynchronously and synchronously, and register handlers for those\n              events by subscribing to an instance.\n              <br />\n              <h3>24. How do you handle error in Angular?</h3>\n              By using ErrorHandler class. This class can be extended to create\n              your own global error handler.\n              <br />\n              <h3>\n                25. How are Angular expressions different from JavaScript\n                expressions?\n              </h3>\n              <ul>\n                <li>\n                  Angular expressions allow us to write JavaScript in HTML\n                </li>\n                <li>\n                  Angular expressions are evaluated against a local scope object\n                  whereas JavaScript expressions against global window object.\n                </li>\n              </ul>\n              <br />\n              <h3>\n                26. Angular by default, uses client-side rendering for its\n                applications. Can one make an angular application to render on\n                the server-side?\n              </h3>\n              Yes, with Angular Universal, Angular application can render on the\n              server-side.\n              <br />\n              <br />\n              <b>The advantages of using Angular Universal are :</b>\n              <ul>\n                <li>\n                  First time users can instantly see a view of the application.\n                  This providing better user experience.\n                </li>\n                <li>\n                  Many search engines expect pages in plain HTML, thus,\n                  Universal can make sure that your content is available on\n                  every search engine, which leads to better SEO.\n                </li>\n                <li>\n                  Any server-side rendered application loads faster since\n                  rendered pages are available to the browser sooner.\n                </li>\n              </ul>\n              <br />\n              <h3>\n                27. How does one share data between components in Angular?\n              </h3>\n              <ul>\n                <li>Parent to child using @Input decorator</li>\n                <li>\n                  Child to parent using @ViewChild decorator\n                  <ul>\n                    <li>\n                      <b>@ViewChild: </b>decorator is used to reference the\n                      child component as “child” property.\n                    </li>\n                  </ul>\n                </li>\n                <li>Child to parent using @Output and EventEmitter</li>\n              </ul>\n              <br />\n              <h3>28. What are filters in Angular? Name a few of them.</h3>\n              Filters are used to format an expression and present it to the\n              user.\n              <ol>\n                <li>Date</li>\n                <li>filter</li>\n                <li>Json</li>\n                <li>limitTo</li>\n                <li>lowercase</li>\n              </ol>\n              <br />\n              <h3>30. What type of DOM does Angular implement?</h3>\n              <ul>\n                <li>\n                  DOM (Document Object Model) treats an XML or HTML document as\n                  a tree structure in which each node is an object representing\n                  a part of the document.\n                </li>\n                <li>\n                  Angular uses the regular DOM. This updates the entire tree\n                  structure of HTML tags until it reaches the data to be\n                  updated. However, to ensure that the speed and performance are\n                  not affected, Angular implements Change Detection.\n                </li>\n              </ul>\n              <br />\n              <h3>31. What is DOM?</h3>\n              It is responsible for representing the content of a web page and\n              changes in the architecture of an application. Here, all the\n              objects are organized in the form of a tree, and the document can\n              easily be modified, manipulated, and accessed only with the help\n              of APIs.\n              <br />\n              <h3>32. Shadow DOM</h3>\n              <ul>\n                <li>\n                  it means that Shadow DOM allows us to hide the DOM logic\n                  behind other elements.\n                </li>\n                <li>\n                  Shadow DOM allows us to apply scoped styles to elements\n                  without bleeding into the outside world.\n                </li>\n              </ul>\n              <br />\n              <h3>33. What is the difference between *ngIf vs [hidden]?</h3>\n              <b>*ngIf</b> effectively removes its content from the DOM while{\" \"}\n              <b>[hidden]</b> modifies the <b>display</b> property and only\n              instructs the browser to not show the content but the DOM still\n              contains it.\n              <br />\n              <h3>34. What is server-side rendering in Angular?</h3>\n              If we have a large application with a big bundle size, our page’s\n              load speed is slowed down quite a bit as it needs to download all\n              the files, parse JavaScript, and then execute it. To overcome this\n              slowness, we can use server-side rendering, which allows us to\n              send a fully rendered page from the server that the browser can\n              display and then let the JavaScript code take over any subsequent\n              interactions from the user.\n              <br />\n              <h3>35. What is Angular Universal?</h3>\n              Angular Universal is a package for enabling server-side rendering\n              in Angular applications. We can easily make our application ready\n              for server-side rendering using the Angular CLI.\n              <br />\n              <b>ng add @nguniversal/express-engine</b>\n              <br />\n              <br />\n              This allows our Angular application to work well with an ExpressJS\n              web server that compiles HTML pages with Angular Universal based\n              on client requests. This also creates the server-side app module,\n              app.server.module.ts, in our application directory.\n              <br />\n              <h3>\n                36. What is the difference between interpolated content and the\n                content assigned to the innerHTML property of a DOM element?\n              </h3>\n              Angular interpolation happens when in our template we type some\n              JavaScript expression inside double curly braces\n              <div style={titles}>\n                <PrismCode\n                  code={javaScriptExp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              . This is used to add dynamic content to a web page. However, we\n              can do the same by assigning some dynamic content to the innerHTML\n              property of a DOM element. The difference between the two is that,\n              in Angular, the compiler always escapes the interpolated content,\n              i.e., HTML is not interpreted, and the browser displays the code\n              as it is with brackets and symbols, rather than displaying the\n              output of the interpreted HTML. However, in innerHTML, if the\n              content is HTML, then it is interpreted as the HTML code.\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(NgrxCounter);\n"]},"metadata":{},"sourceType":"module"}