{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/arrayAlgo.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst strArray = `\n    var strArray = \"StackOverflow\".split(\"\");\n    console.log(strArray.join(\"\"));\n`.trim();\nconst Sort = `\nlet i, j, arr=[0,9,8,7,6];\nvar max=0;\n\nfor(i=0; i<arr.length; i++){\n  for(j=i; j<arr.length; j++){\n    if(arr[i]>arr[j]){\n      var temp=arr[i];\n      arr[i]=arr[j];\n      arr[j]=temp;\n    }\n  }\n}\n\nconsole.log(arr);\n\n\n//Greatest Product Of 3\nmax = arr[arr.length-1] * arr[arr.length-2] * arr[arr.length-3]\nconsole.log(max);\n`.trim();\nconst duplicates = `\nfunction removeDup(){\n  const array = [1,2,3,4,3,0,9,0,1];\n  const result=[];\n  \n  for(let i=0; i<array.length;i++){\n      let count=0;\n      for(let j=0;j<result.length;j++){\n          if(array[i]==result[j]) count +=1;\n      }\n      if(count==0){\n          result.push(array[i]);\n      }  \n  }\n  \n  console.log(result)\n}\n\nremoveDup();\n`.trim();\nconst compare_array = `\nfunction compare(){\n  const arr=[1,2,3,4,5,6];\n  const arr2=[5,6,7,8,9,0];\n  const result=[];\n  \n  for(let i=0; i<arr.length; i++){\n    if(arr2.indexOf(arr[i]) !== -1){\n      result.push(arr[i]);\n    }\n  }\n  console.log(result)\n}\n\ncompare();\n\n\n//Unique name\nfunction getUnique(){\n  var names = [\"John\", \"Peter\", \"Clark\", \"Harry\", \"John\", \"Alice\"];\n  var newName = [];\n  \n  for(i=0; i < names.length; i++){\n      if(newName.indexOf(names[i]) === -1) {\n          newName.push(names[i]);\n      }\n  }\n  console.log(newName);\n}\n\ngetUnique();\n`.trim();\nconst findMedianSortedArrays = `\nconst median = () => {\n  const arr = [1,12,15,26,38];\n  const arr2 = [4,3,1];\n  let arrMedian=[];\n\n  const result = [...arr, ...arr2].sort((a, b) => a - b);\n  const half = result.length / 2 | 0;\n  \n  if (result.length % 2){\n      arrMedian=result[half];\n  }\n  else{\n      arrMedian=((result[half] + result[half-1])/2);\n  }\n  return console.log(arrMedian);\n}\n\nmedian()\n`.trim();\nconst maxSubArray = `\nfunction maxSubArray(nums){\n  let max = -Infinity;\n  let currentMax = -Infinity;\n\n  for (let i=0; i<nums.length; i++) {\n    currentMax = Math.max(\n      currentMax + nums[i],\n      nums[i],\n    )\n    max = Math.max(max, currentMax)\n  }\n  return max\n}\n\nconsole.log(maxSubArray([-2,1,-3,4,-1,2,1,-5,4]))\n`.trim();\nconst plusOne = `\nfunction plusOne(){\n  const arr=[1,2,3];\n  let result=[], result2=[];\n  let i;\n\n  for(i=0; i<=arr.length-1; i++){\n    result.push(arr[i]);\n    result2 = arr[arr.length-1]+1\n  }\n\n  result.pop();\n  result.push(result2);\n  console.log(result)\n}\n\nplusOne();\n`.trim();\nconst arrayCounter = `\nfunction arrCounter(arr){\n  var counter = 0;\n  var maxCount = 0;\n\n    function inner(n){\n      if(!Array.isArray(n)){\n        maxCount = Math.max(maxCount, counter);\n     counter = 0;\n     return\n   }\n   \n   n.forEach(num => {\n   counter ++;\n   inner(num);\n   })\n }\n \n inner(arr);\n console.log(maxCount)\n return maxCount;\n}\n\narrCounter([[3]])\narrCounter([[[[[[[9]]]]]]])\narrCounter([])\n`.trim();\nconst countElements = `\nfunction arrCounts(){\n  const arr = [1,2,3,4,5];\n  var result = 0;\n\n  while(arr[result]!==undefined){\n    result++;\n  }\n  console.log(result);\n}\n\narrCounts();  \n`.trim();\nconst find132pattern = `\nfunction pattern123() {\n  const arr=[1,2,3,4];\n  const number = 132;\n  const result=[];\n\n  const target = number.toString();\n  [target]\n\n  for(let i=0; i<arr.length; i++){\n    if(target.indexOf(arr[i]) !== -1){\n      result.push(arr[i]);\n    }\n  }\n  console.log(result)\n}\n\npattern123();\n`.trim();\nconst numIdenticalPairs = `\nfunction numIdenticalPairs(nums) {\n  let count = 0\n  \n  for (let i=0; i<nums.length; i++) {\n    for (let j=(i+1); j<nums.length; j++) {\n      if (nums[i] === nums[j]) {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\nconsole.log(numIdenticalPairs([1,2,3,1,1,3]))\n`.trim();\nconst removeElement = `\nfunction plusOne(arr, a){\n  let result=[];\n  let removeEle=[];\n  let i;\n\n  for(i=0; i<arr.length; i++){\n    result.push(arr[i]);\n  }\n  while(a>0){ \n      removeEle +=result.pop(a)\n      a--;\n  }\n\n  console.log(removeEle)\n  console.log(result.length)\n}\n\nplusOne([1,2,3,5,4],3);\n`.trim();\nconst searchRange = `\nfunction searchRange(nums = [], target){\n  function binarySearch(left, right, position = 'middle'){\n    let pivot = -1\n    \n    while (left <= right) {\n      const middle = Math.floor((left + right) / 2)\n      if (nums[middle] === target) {\n        if (position === 'middle') {\n          pivot = middle\n          break\n        } else if (position === 'left') {\n          pivot = middle\n          right = middle - 1\n        } else if (position === 'right') {\n          pivot = middle\n          left = middle + 1\n        }\n      } else if (nums[middle] < target) {\n        left = middle + 1\n      } else {\n        right = middle - 1\n      }\n    }\n    return pivot\n  }\n\n\n  const pivot = binarySearch(0, nums.length - 1, 'middle')\n  return [\n    binarySearch(0, pivot, 'left'),\n    binarySearch(pivot, nums.length - 1, 'right'),\n  ]\n}\n\nconsole.log(searchRange([5,7,7,8,8,10],6))\n`.trim();\nconst maximumGap = `\nfunction maximumGap(nums = []) {\n  const maxValue = Math.max(...nums)\n\n  function countingSort(place){\n    const count = []\n    nums.forEach((num) => {\n      const index = Math.floor(num / place) % 10\n      count[index] = count[index] || []\n      count[index].push(num)\n    })\n    return count.reduce((acc, v) => {\n      if (v !== undefined) {\n        acc = acc.concat(v)\n      }\n      return acc\n    }, [])\n  }\n\n  let place = 1\n  while (Math.floor(maxValue / place) > 0) {\n    nums = countingSort(place)\n    place *= 10\n  }\n  let max = 0\n  for (let i = 1; i < nums.length; i++) {\n    max = Math.max(max, nums[i] - nums[i - 1])\n  }\n  return max\n}\n\nconsole.log(maximumGap([3,6,9,1]))\n`.trim();\nconst searchInsert = `\nfunction searchInsert(nums, target){\n  function aux(low, high){\n    if (low > high) return low;\n\n    const middle = Math.floor((low + high) / 2)\n    \n    if (target === nums[middle]) {\n      return middle\n    } if (target > nums[middle]) {\n      return aux(middle + 1, high)\n    }\n    return aux(low, middle - 1)\n  }\n  return aux(0, nums.length - 1)\n}\n\nconsole.log(searchInsert([1,3,5,6], 5))\n`.trim();\nconst combinationSum = `\nfunction combinationSum(arr, target) {\n  const result=[];\n\n  for(let i=0; i<arr.length; i++){\n    for(let j=1; j<arr.length; j++){\n      if(arr[i]+arr[j]==target){\n        result.push(arr[i])\n      }\n    }\n  }\n  console.log(result)\n}\n\ncombinationSum([2,3,5],8)\n\n\n//\nfunction combinationSum(candidates, target) {\n  const result = []\n\n  function aux(start,current=[], sum = 0){\n      if(sum > target) return;\n\n      if(sum === target) {\n          result.push(current)\n          return\n      }\n      for(let i = start; i < candidates.length; i++) {\n          aux(i, [...current, candidates[i]], sum+candidates[i])\n      }\n  }\n  for(let i = 0; i <  candidates.length; i++) {\n      aux(i, [candidates[i]], candidates[i])\n  }\n  return result\n};\n\nconsole.log(combinationSum([2,3,5],8))\n`.trim();\nconst missing_number = `\nfunction missNum() {\n  let i, arr=[0,1,2,4,5], exactsum=0, result=0;\n  exactsum = arr.reduce((a, b) => a + b);\n\n  for (i=0; i<=arr.length; i++) {\n    result += i\n  }\n  \n  result -= exactsum;\n  console.log('Missing Number', result)\n}\n\nmissNum();\n `.trim();\nconst firstMissingPositive = `\nfunction firstMissingPositive(nums = []){\n  function swap(a, b){\n    const temp = nums[a]\n    nums[a] = nums[b]\n    nums[b] = temp\n  }\n\n  let index = 0\n  while (index < nums.length) {\n    if (nums[index] !== nums[nums[index] - 1] && nums[index] > 0 && nums[index] <= nums.length){\n          swap(index, nums[index] - 1)\n      } else {\n          index += 1\n      }\n   }\n\n  for (let i=0; i<nums.length; i++) {\n    if (nums[i] !== i + 1) return i + 1;\n  }\n  return nums.length + 1\n}\n\nconsole.log(firstMissingPositive([3,4,-1,1]))\n`.trim();\nconst findMissingRanges = `\nconst arr = [1,2,4,8];\nconst missing = [];\nvar count = 1;\n\nfor (let i=0; i<arr.length; i++) {\n  if (arr[i] !== count) {\n    missing.push(count);\n    i--;\n  }\n  count++;\n}\n\nconsole.log(missing);\n\n\n//2\nfunction findMissingRanges(nums, lower, upper) {\n  const result = [];\n  const count = (lo, hi) => hi - lo - 1;\n\n  function set(lo, hi){\n    if (count(lo, hi) === 1) {\n      result.push('$'{lo + 1}')\n    } \n    else if (count(lo, hi) > 1) {\n      result.push('$'{lo + 1}->'$'{hi - 1}')\n    }\n  }\n  \n  for (let i = 0; i <= nums.length; i++) {\n    set(\n      i === 0 ? lower - 1 : nums[i - 1],\n      i === nums.length ? upper + 1 : nums[i],\n    )\n  }\n  return result\n}\n\nconsole.log(findMissingRanges([1,2,3,-2,4]))\n`.trim();\nconst permute = `\nfunction permute(nums = []){\n  const result = [];\n\n  function aux(list = [], current = []){\n    if (list.length === 0) {\n      result.push(current)\n    }\n\n    list.forEach((number, index) => {\n      aux(list.filter((v, index2) => index2 !== index), [...current, number])\n    })\n  }\n  \n  aux(nums)\n  return result\n}\n\nconsole.log(permute([1,2,3]))\n`.trim();\nconst largestNumber = `\nfunction largestNumber(nums = []) {\n  nums.sort((a, b) => {\n    const digitsA = a.toString(10) + b.toString(10);\n    const digitsB = b.toString(10) + a.toString(10);\n\n    for (let i = 0; i < digitsA.length; i++) {\n      const digitB = parseInt(digitsB[i], 10);\n      const digitA = parseInt(digitsA[i], 10);\n\n      if (digitB > digitA || digitB < digitA) return digitB - digitA;\n    }\n    return 0\n  })\n  \n  const result = nums.join('')\n  return result[0] === '0' ? '0' : result\n}\n\nconsole.log(largestNumber([10,2]))\n`.trim();\nconst containsDuplicate = `\nfunction containsDuplicate(nums){\n  const map = {}\n  \n  for (num of nums) {\n    if (map[num]) {\n      return true\n    }\n    map[num] = 1\n  }\n  return false\n}\n\nconsole.log(containsDuplicate([1,2,3,1]))\n`.trim();\nconst summaryRanges = `\nfunction summaryRanges(nums) {\n  let start = null\n  const result = []\n\n  for (let i=0; i<nums.length; i++) {\n    if (start === null) {\n      start = nums[i]\n    }\n    if (nums[i] === nums[i + 1] - 1) continue;\n\n    if (nums[i] === start) {\n      result.push(nums[i].toString())\n      start = null\n    } \n    else {\n      result.push('$'{start}->'$'{nums[i]}')\n      start = null\n    }\n  }\n  \n  return result\n}\n\nconsole.log(summaryRanges([1,2,3,4,6,7,9]))\n`.trim();\nconst productExceptSelf = `\nfunction arrProducts(){\n  const arr = [1,2,3,4];\n  const result = [];\n  let product, i, j;\n\n  for(i=0; i<arr.length; i++){\n    product = 1;\n    for(j=0; j<arr.length; j++){\n       if(i !==j) product *= arr[j];\n    }\n    result.push(product);\n  }\n  console.log(result);\n}\n\narrProducts();\n`.trim();\nconst countSmaller = `\nfunction countSmaller(nums) {\n  const result = nums.map(() => 0);\n\n  for (let i=0; i<nums.length; i++) {\n    for (let j=(i+ 1); j<nums.length; j++) {\n      if (nums[j]<nums[i]) {\n        result[i] += 1\n      }\n    }\n  }\n  \n  return result\n}\n\nconsole.log(countSmaller([5,2,6,1]))\n`.trim();\n\nclass DSLogic2 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628\n      },\n      __self: this\n    }, \"1. Convert a string to an array\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: strArray,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638\n      },\n      __self: this\n    }, \"2. Sort\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Sort,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648\n      },\n      __self: this\n    }, \"3. Remove Duplicates\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 649\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: duplicates,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 650\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658\n      },\n      __self: this\n    }, \"4. Compare Array\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: compare_array,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668\n      },\n      __self: this\n    }, \"6. Array Counter\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: arrayCounter,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678\n      },\n      __self: this\n    }, \"7. Counting Elements.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: countElements,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 686\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688\n      },\n      __self: this\n    }, \"8. 132 Pattern.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [1,2,3,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690\n      },\n      __self: this\n    }, \"Output: \"), \"false\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691\n      },\n      __self: this\n    }, \"Explanation: \"), \"There is no 132 pattern in the sequence.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: find132pattern,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 693\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701\n      },\n      __self: this\n    }, \"9. Missing Number\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 702\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: missing_number,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 709\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711\n      },\n      __self: this\n    }, \"10. Missing Ranges.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: findMissingRanges,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 713\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 719\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 721\n      },\n      __self: this\n    }, \"13. Contains Duplicate.\"), \"Given an array of integers, find if the array contains any duplicates.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 723\n      },\n      __self: this\n    }), \"Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: containsDuplicate,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 726\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734\n      },\n      __self: this\n    }, \"14. Permutations.\"), \"Given a collection of distinct integers, return all possible permutations.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 736\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: permute,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 737\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 743\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 745\n      },\n      __self: this\n    }, \"15. Number of Good Pairs.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [1,2,3,1,1,3] \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 747\n      },\n      __self: this\n    }, \"Output: \"), \"4 \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 747\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 748\n      },\n      __self: this\n    }, \"Explanation: \"), \"There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 749\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: numIdenticalPairs,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 750\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 756\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 758\n      },\n      __self: this\n    }, \"19. Combination Sum\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 759\n      },\n      __self: this\n    }, \"Input: \"), \"candidates = [2,3,6,7], target = 7,\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 759\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 760\n      },\n      __self: this\n    }, \"A solution set is: \"), \"[ [7],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 762\n      },\n      __self: this\n    }), \"[2,2,3]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 763\n      },\n      __self: this\n    }), \"]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 765\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: combinationSum,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 766\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 772\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 774\n      },\n      __self: this\n    }, \"20. Product of Array Except Self.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 775\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: productExceptSelf,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 776\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 782\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 784\n      },\n      __self: this\n    }, \"26. Median of Two Sorted Arrays.\"), \"Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 786\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 787\n      },\n      __self: this\n    }, \"Follow up: \"), \"The overall run time complexity should be O(log (m+n)).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 788\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 791\n      },\n      __self: this\n    }, \"Example 1:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 792\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 793\n      },\n      __self: this\n    }, \"Input: \"), \"nums1 = [1,3], nums2 = [2]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 793\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 794\n      },\n      __self: this\n    }, \"Output: \"), \"2.00000\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 794\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 795\n      },\n      __self: this\n    }, \"Explanation: \"), \"merged array = [1,2,3] and median is 2.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 795\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 795\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 796\n      },\n      __self: this\n    }, \"Example 2: \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 796\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 798\n      },\n      __self: this\n    }, \"Input: \"), \"nums1 = [1,2], nums2 = [3,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 798\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 799\n      },\n      __self: this\n    }, \"Output: \"), \"2.50000\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 799\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 800\n      },\n      __self: this\n    }, \"Explanation: \"), \"merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 801\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: findMedianSortedArrays,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 802\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 808\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 810\n      },\n      __self: this\n    }, \"24. Plus One.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 811\n      },\n      __self: this\n    }, \"Input: \"), \"digits = [1,2,3]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 811\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 812\n      },\n      __self: this\n    }, \"Output: \"), \"[1,2,4]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 813\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: plusOne,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 814\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 820\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 822\n      },\n      __self: this\n    }, \"25. Remove Element\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 823\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: removeElement,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 824\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 830\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 832\n      },\n      __self: this\n    }, \"23. Count of Smaller Numbers After Self.\"), \"You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 834\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 835\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [5,2,6,1]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 835\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 836\n      },\n      __self: this\n    }, \"Output: \"), \"[2,1,1,0]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 836\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 837\n      },\n      __self: this\n    }, \"Explanation: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 838\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 839\n      },\n      __self: this\n    }, \"To the right of 5 there are 2 smaller elements (2 and 1).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 840\n      },\n      __self: this\n    }, \"To the right of 2 there is only 1 smaller element (1).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 841\n      },\n      __self: this\n    }, \"To the right of 6 there is 1 smaller element (1).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 842\n      },\n      __self: this\n    }, \"To the right of 1 there is 0 smaller element.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 844\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: countSmaller,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 845\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 851\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 853\n      },\n      __self: this\n    }, \"11. First Missing Positive.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 854\n      },\n      __self: this\n    }, \"Input: \"), \"[3,4,-1,1]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 854\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 855\n      },\n      __self: this\n    }, \"Output: \"), \"2\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 856\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: firstMissingPositive,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 857\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 863\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 865\n      },\n      __self: this\n    }, \"12. Summary Ranges.\"), \"Given a sorted integer array without duplicates, return the summary of its ranges.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 867\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: summaryRanges,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 868\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 874\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 876\n      },\n      __self: this\n    }, \"16. Largest Number.\"), \"Given a list of non negative integers, arrange them such that they form the largest number.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 878\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: largestNumber,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 879\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 885\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 887\n      },\n      __self: this\n    }, \"17. Maximum Subarray.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 888\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [-2,1,-3,4,-1,2,1,-5,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 888\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 889\n      },\n      __self: this\n    }, \"Output: \"), \"6\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 889\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 890\n      },\n      __self: this\n    }, \"Explanation: \"), \"[4,-1,2,1] has the largest sum = 6.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 891\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maxSubArray,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 892\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 898\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 900\n      },\n      __self: this\n    }, \"18. Search Insert Position.\"), \"Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 902\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 903\n      },\n      __self: this\n    }, \"Input: \"), \"[1,3,5,6], 5\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 903\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 904\n      },\n      __self: this\n    }, \"Output: \"), \"2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 904\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 904\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 905\n      },\n      __self: this\n    }, \"Example 2:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 905\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 907\n      },\n      __self: this\n    }, \"Input: \"), \"[1,3,5,6], 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 907\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 908\n      },\n      __self: this\n    }, \"Output: \"), \"1\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 909\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: searchInsert,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 910\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 916\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 918\n      },\n      __self: this\n    }, \"21. Find First and Last Position of Element in Sorted Array\"), \"Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 920\n      },\n      __self: this\n    }), \"Your algorithm's runtime complexity must be in the order of O(log n).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 921\n      },\n      __self: this\n    }), \"If the target is not found in the array, return [-1, -1].\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 923\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 925\n      },\n      __self: this\n    }, \"Example 1:\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 926\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [5,7,7,8,8,10], target = 8\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 926\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 927\n      },\n      __self: this\n    }, \"Output: \"), \"[3,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 927\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 927\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 928\n      },\n      __self: this\n    }, \"Example 2\"), \":\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 928\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 930\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [5,7,7,8,8,10], target = 6\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 930\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 931\n      },\n      __self: this\n    }, \"Output: \"), \"[-1,-1]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 932\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: searchRange,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 933\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 939\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 941\n      },\n      __self: this\n    }, \"22. Maximum Gap.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 942\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maximumGap,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 943\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 949\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default withStyles(styles)(DSLogic2);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/arrayAlgo.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","strArray","trim","Sort","duplicates","compare_array","findMedianSortedArrays","maxSubArray","plusOne","arrayCounter","countElements","find132pattern","numIdenticalPairs","removeElement","searchRange","maximumGap","searchInsert","combinationSum","missing_number","firstMissingPositive","findMissingRanges","permute","largestNumber","containsDuplicate","summaryRanges","productExceptSelf","countSmaller","DSLogic2","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst strArray = `\n    var strArray = \"StackOverflow\".split(\"\");\n    console.log(strArray.join(\"\"));\n`.trim();\n\nconst Sort = `\nlet i, j, arr=[0,9,8,7,6];\nvar max=0;\n\nfor(i=0; i<arr.length; i++){\n  for(j=i; j<arr.length; j++){\n    if(arr[i]>arr[j]){\n      var temp=arr[i];\n      arr[i]=arr[j];\n      arr[j]=temp;\n    }\n  }\n}\n\nconsole.log(arr);\n\n\n//Greatest Product Of 3\nmax = arr[arr.length-1] * arr[arr.length-2] * arr[arr.length-3]\nconsole.log(max);\n`.trim()\n\nconst duplicates = `\nfunction removeDup(){\n  const array = [1,2,3,4,3,0,9,0,1];\n  const result=[];\n  \n  for(let i=0; i<array.length;i++){\n      let count=0;\n      for(let j=0;j<result.length;j++){\n          if(array[i]==result[j]) count +=1;\n      }\n      if(count==0){\n          result.push(array[i]);\n      }  \n  }\n  \n  console.log(result)\n}\n\nremoveDup();\n`.trim()\n\nconst compare_array = `\nfunction compare(){\n  const arr=[1,2,3,4,5,6];\n  const arr2=[5,6,7,8,9,0];\n  const result=[];\n  \n  for(let i=0; i<arr.length; i++){\n    if(arr2.indexOf(arr[i]) !== -1){\n      result.push(arr[i]);\n    }\n  }\n  console.log(result)\n}\n\ncompare();\n\n\n//Unique name\nfunction getUnique(){\n  var names = [\"John\", \"Peter\", \"Clark\", \"Harry\", \"John\", \"Alice\"];\n  var newName = [];\n  \n  for(i=0; i < names.length; i++){\n      if(newName.indexOf(names[i]) === -1) {\n          newName.push(names[i]);\n      }\n  }\n  console.log(newName);\n}\n\ngetUnique();\n`.trim();\n\nconst findMedianSortedArrays = `\nconst median = () => {\n  const arr = [1,12,15,26,38];\n  const arr2 = [4,3,1];\n  let arrMedian=[];\n\n  const result = [...arr, ...arr2].sort((a, b) => a - b);\n  const half = result.length / 2 | 0;\n  \n  if (result.length % 2){\n      arrMedian=result[half];\n  }\n  else{\n      arrMedian=((result[half] + result[half-1])/2);\n  }\n  return console.log(arrMedian);\n}\n\nmedian()\n`.trim();\n\nconst maxSubArray = `\nfunction maxSubArray(nums){\n  let max = -Infinity;\n  let currentMax = -Infinity;\n\n  for (let i=0; i<nums.length; i++) {\n    currentMax = Math.max(\n      currentMax + nums[i],\n      nums[i],\n    )\n    max = Math.max(max, currentMax)\n  }\n  return max\n}\n\nconsole.log(maxSubArray([-2,1,-3,4,-1,2,1,-5,4]))\n`.trim();\n\nconst plusOne = `\nfunction plusOne(){\n  const arr=[1,2,3];\n  let result=[], result2=[];\n  let i;\n\n  for(i=0; i<=arr.length-1; i++){\n    result.push(arr[i]);\n    result2 = arr[arr.length-1]+1\n  }\n\n  result.pop();\n  result.push(result2);\n  console.log(result)\n}\n\nplusOne();\n`.trim();\n\nconst arrayCounter = `\nfunction arrCounter(arr){\n  var counter = 0;\n  var maxCount = 0;\n\n    function inner(n){\n      if(!Array.isArray(n)){\n        maxCount = Math.max(maxCount, counter);\n     counter = 0;\n     return\n   }\n   \n   n.forEach(num => {\n   counter ++;\n   inner(num);\n   })\n }\n \n inner(arr);\n console.log(maxCount)\n return maxCount;\n}\n\narrCounter([[3]])\narrCounter([[[[[[[9]]]]]]])\narrCounter([])\n`.trim()\n\nconst countElements = `\nfunction arrCounts(){\n  const arr = [1,2,3,4,5];\n  var result = 0;\n\n  while(arr[result]!==undefined){\n    result++;\n  }\n  console.log(result);\n}\n\narrCounts();  \n`.trim();\n\nconst find132pattern = `\nfunction pattern123() {\n  const arr=[1,2,3,4];\n  const number = 132;\n  const result=[];\n\n  const target = number.toString();\n  [target]\n\n  for(let i=0; i<arr.length; i++){\n    if(target.indexOf(arr[i]) !== -1){\n      result.push(arr[i]);\n    }\n  }\n  console.log(result)\n}\n\npattern123();\n`.trim();\n\nconst numIdenticalPairs = `\nfunction numIdenticalPairs(nums) {\n  let count = 0\n  \n  for (let i=0; i<nums.length; i++) {\n    for (let j=(i+1); j<nums.length; j++) {\n      if (nums[i] === nums[j]) {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\nconsole.log(numIdenticalPairs([1,2,3,1,1,3]))\n`.trim();\n\nconst removeElement = `\nfunction plusOne(arr, a){\n  let result=[];\n  let removeEle=[];\n  let i;\n\n  for(i=0; i<arr.length; i++){\n    result.push(arr[i]);\n  }\n  while(a>0){ \n      removeEle +=result.pop(a)\n      a--;\n  }\n\n  console.log(removeEle)\n  console.log(result.length)\n}\n\nplusOne([1,2,3,5,4],3);\n`.trim();\n\nconst searchRange = `\nfunction searchRange(nums = [], target){\n  function binarySearch(left, right, position = 'middle'){\n    let pivot = -1\n    \n    while (left <= right) {\n      const middle = Math.floor((left + right) / 2)\n      if (nums[middle] === target) {\n        if (position === 'middle') {\n          pivot = middle\n          break\n        } else if (position === 'left') {\n          pivot = middle\n          right = middle - 1\n        } else if (position === 'right') {\n          pivot = middle\n          left = middle + 1\n        }\n      } else if (nums[middle] < target) {\n        left = middle + 1\n      } else {\n        right = middle - 1\n      }\n    }\n    return pivot\n  }\n\n\n  const pivot = binarySearch(0, nums.length - 1, 'middle')\n  return [\n    binarySearch(0, pivot, 'left'),\n    binarySearch(pivot, nums.length - 1, 'right'),\n  ]\n}\n\nconsole.log(searchRange([5,7,7,8,8,10],6))\n`.trim();\n\nconst maximumGap = `\nfunction maximumGap(nums = []) {\n  const maxValue = Math.max(...nums)\n\n  function countingSort(place){\n    const count = []\n    nums.forEach((num) => {\n      const index = Math.floor(num / place) % 10\n      count[index] = count[index] || []\n      count[index].push(num)\n    })\n    return count.reduce((acc, v) => {\n      if (v !== undefined) {\n        acc = acc.concat(v)\n      }\n      return acc\n    }, [])\n  }\n\n  let place = 1\n  while (Math.floor(maxValue / place) > 0) {\n    nums = countingSort(place)\n    place *= 10\n  }\n  let max = 0\n  for (let i = 1; i < nums.length; i++) {\n    max = Math.max(max, nums[i] - nums[i - 1])\n  }\n  return max\n}\n\nconsole.log(maximumGap([3,6,9,1]))\n`.trim();\n\nconst searchInsert = `\nfunction searchInsert(nums, target){\n  function aux(low, high){\n    if (low > high) return low;\n\n    const middle = Math.floor((low + high) / 2)\n    \n    if (target === nums[middle]) {\n      return middle\n    } if (target > nums[middle]) {\n      return aux(middle + 1, high)\n    }\n    return aux(low, middle - 1)\n  }\n  return aux(0, nums.length - 1)\n}\n\nconsole.log(searchInsert([1,3,5,6], 5))\n`.trim();\n\nconst combinationSum = `\nfunction combinationSum(arr, target) {\n  const result=[];\n\n  for(let i=0; i<arr.length; i++){\n    for(let j=1; j<arr.length; j++){\n      if(arr[i]+arr[j]==target){\n        result.push(arr[i])\n      }\n    }\n  }\n  console.log(result)\n}\n\ncombinationSum([2,3,5],8)\n\n\n//\nfunction combinationSum(candidates, target) {\n  const result = []\n\n  function aux(start,current=[], sum = 0){\n      if(sum > target) return;\n\n      if(sum === target) {\n          result.push(current)\n          return\n      }\n      for(let i = start; i < candidates.length; i++) {\n          aux(i, [...current, candidates[i]], sum+candidates[i])\n      }\n  }\n  for(let i = 0; i <  candidates.length; i++) {\n      aux(i, [candidates[i]], candidates[i])\n  }\n  return result\n};\n\nconsole.log(combinationSum([2,3,5],8))\n`.trim();\n\nconst missing_number = `\nfunction missNum() {\n  let i, arr=[0,1,2,4,5], exactsum=0, result=0;\n  exactsum = arr.reduce((a, b) => a + b);\n\n  for (i=0; i<=arr.length; i++) {\n    result += i\n  }\n  \n  result -= exactsum;\n  console.log('Missing Number', result)\n}\n\nmissNum();\n `.trim()\n\nconst firstMissingPositive = `\nfunction firstMissingPositive(nums = []){\n  function swap(a, b){\n    const temp = nums[a]\n    nums[a] = nums[b]\n    nums[b] = temp\n  }\n\n  let index = 0\n  while (index < nums.length) {\n    if (nums[index] !== nums[nums[index] - 1] && nums[index] > 0 && nums[index] <= nums.length){\n          swap(index, nums[index] - 1)\n      } else {\n          index += 1\n      }\n   }\n\n  for (let i=0; i<nums.length; i++) {\n    if (nums[i] !== i + 1) return i + 1;\n  }\n  return nums.length + 1\n}\n\nconsole.log(firstMissingPositive([3,4,-1,1]))\n`.trim();\n\nconst findMissingRanges = `\nconst arr = [1,2,4,8];\nconst missing = [];\nvar count = 1;\n\nfor (let i=0; i<arr.length; i++) {\n  if (arr[i] !== count) {\n    missing.push(count);\n    i--;\n  }\n  count++;\n}\n\nconsole.log(missing);\n\n\n//2\nfunction findMissingRanges(nums, lower, upper) {\n  const result = [];\n  const count = (lo, hi) => hi - lo - 1;\n\n  function set(lo, hi){\n    if (count(lo, hi) === 1) {\n      result.push('$'{lo + 1}')\n    } \n    else if (count(lo, hi) > 1) {\n      result.push('$'{lo + 1}->'$'{hi - 1}')\n    }\n  }\n  \n  for (let i = 0; i <= nums.length; i++) {\n    set(\n      i === 0 ? lower - 1 : nums[i - 1],\n      i === nums.length ? upper + 1 : nums[i],\n    )\n  }\n  return result\n}\n\nconsole.log(findMissingRanges([1,2,3,-2,4]))\n`.trim();\n\nconst permute = `\nfunction permute(nums = []){\n  const result = [];\n\n  function aux(list = [], current = []){\n    if (list.length === 0) {\n      result.push(current)\n    }\n\n    list.forEach((number, index) => {\n      aux(list.filter((v, index2) => index2 !== index), [...current, number])\n    })\n  }\n  \n  aux(nums)\n  return result\n}\n\nconsole.log(permute([1,2,3]))\n`.trim();\n\nconst largestNumber = `\nfunction largestNumber(nums = []) {\n  nums.sort((a, b) => {\n    const digitsA = a.toString(10) + b.toString(10);\n    const digitsB = b.toString(10) + a.toString(10);\n\n    for (let i = 0; i < digitsA.length; i++) {\n      const digitB = parseInt(digitsB[i], 10);\n      const digitA = parseInt(digitsA[i], 10);\n\n      if (digitB > digitA || digitB < digitA) return digitB - digitA;\n    }\n    return 0\n  })\n  \n  const result = nums.join('')\n  return result[0] === '0' ? '0' : result\n}\n\nconsole.log(largestNumber([10,2]))\n`.trim();\n\nconst containsDuplicate = `\nfunction containsDuplicate(nums){\n  const map = {}\n  \n  for (num of nums) {\n    if (map[num]) {\n      return true\n    }\n    map[num] = 1\n  }\n  return false\n}\n\nconsole.log(containsDuplicate([1,2,3,1]))\n`.trim();\n\nconst summaryRanges = `\nfunction summaryRanges(nums) {\n  let start = null\n  const result = []\n\n  for (let i=0; i<nums.length; i++) {\n    if (start === null) {\n      start = nums[i]\n    }\n    if (nums[i] === nums[i + 1] - 1) continue;\n\n    if (nums[i] === start) {\n      result.push(nums[i].toString())\n      start = null\n    } \n    else {\n      result.push('$'{start}->'$'{nums[i]}')\n      start = null\n    }\n  }\n  \n  return result\n}\n\nconsole.log(summaryRanges([1,2,3,4,6,7,9]))\n`.trim();\n\nconst productExceptSelf = `\nfunction arrProducts(){\n  const arr = [1,2,3,4];\n  const result = [];\n  let product, i, j;\n\n  for(i=0; i<arr.length; i++){\n    product = 1;\n    for(j=0; j<arr.length; j++){\n       if(i !==j) product *= arr[j];\n    }\n    result.push(product);\n  }\n  console.log(result);\n}\n\narrProducts();\n`.trim();\n\nconst countSmaller = `\nfunction countSmaller(nums) {\n  const result = nums.map(() => 0);\n\n  for (let i=0; i<nums.length; i++) {\n    for (let j=(i+ 1); j<nums.length; j++) {\n      if (nums[j]<nums[i]) {\n        result[i] += 1\n      }\n    }\n  }\n  \n  return result\n}\n\nconsole.log(countSmaller([5,2,6,1]))\n`.trim();\n\n\nclass DSLogic2 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n            <h3>1. Convert a string to an array</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={strArray}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Sort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Remove Duplicates</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={duplicates}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Compare Array</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={compare_array}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Array Counter</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={arrayCounter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7. Counting Elements.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={countElements}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>8. 132 Pattern.</h3>\n              <b>Input: </b>nums = [1,2,3,4]<br/>\n              <b>Output: </b>false<br/>\n              <b>Explanation: </b>There is no 132 pattern in the sequence.\n              <div style={titles}>\n                <PrismCode\n                  code={find132pattern}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>9. Missing Number</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={missing_number}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>10. Missing Ranges.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={findMissingRanges}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>13. Contains Duplicate.</h3>\n              Given an array of integers, find if the array contains any duplicates.\n              <br/>\n              Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.\n              <div style={titles}>\n                <PrismCode\n                  code={containsDuplicate}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>14. Permutations.</h3>\n              Given a collection of distinct integers, return all possible permutations.\n              <div style={titles}>\n                <PrismCode\n                  code={permute}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>15. Number of Good Pairs.</h3>\n              <b>Input: </b>nums = [1,2,3,1,1,3] <br/>\n              <b>Output: </b>4 <br/>\n              <b>Explanation: </b>There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.\n              <div style={titles}>\n                <PrismCode\n                  code={numIdenticalPairs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>19. Combination Sum</h3>\n              <b>Input: </b>candidates = [2,3,6,7], target = 7,<br/>\n              <b>A solution set is: </b>\n              [\n                [7],<br/>\n                [2,2,3]<br/>\n              ]\n              <div style={titles}>\n                <PrismCode\n                  code={combinationSum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>20. Product of Array Except Self.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={productExceptSelf}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              \n              <h3>26. Median of Two Sorted Arrays.</h3>\n              Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\n              <br/>\n              <b>Follow up: </b>The overall run time complexity should be O(log (m+n)).\n              <br/>\n              \n\n              <b>Example 1:</b>\n              <br/>\n              <b>Input: </b>nums1 = [1,3], nums2 = [2]<br/>\n              <b>Output: </b>2.00000<br/>\n              <b>Explanation: </b>merged array = [1,2,3] and median is 2.<br/><br/>\n              <b>Example 2: </b><br/>\n\n              <b>Input: </b>nums1 = [1,2], nums2 = [3,4]<br/>\n              <b>Output: </b>2.50000<br/>\n              <b>Explanation: </b>merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n              <div style={titles}>\n                <PrismCode\n                  code={findMedianSortedArrays}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>24. Plus One.</h3>\n              <b>Input: </b>digits = [1,2,3]<br/>\n              <b>Output: </b>[1,2,4]\n              <div style={titles}>\n                <PrismCode\n                  code={plusOne}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>25. Remove Element</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={removeElement}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>23. Count of Smaller Numbers After Self.</h3>\n              You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].\n              <br/>\n              <b>Input: </b>nums = [5,2,6,1]<br/>\n              <b>Output: </b>[2,1,1,0]<br/>\n              <b>Explanation: </b>\n              <ul>\n                <li>To the right of 5 there are 2 smaller elements (2 and 1).</li>\n                <li>To the right of 2 there is only 1 smaller element (1).</li>\n                <li>To the right of 6 there is 1 smaller element (1).</li>\n                <li>To the right of 1 there is 0 smaller element.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={countSmaller}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>11. First Missing Positive.</h3>\n              <b>Input: </b>[3,4,-1,1]<br/>\n              <b>Output: </b>2\n              <div style={titles}>\n                <PrismCode\n                  code={firstMissingPositive}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>12. Summary Ranges.</h3>\n              Given a sorted integer array without duplicates, return the summary of its ranges.\n              <div style={titles}>\n                <PrismCode\n                  code={summaryRanges}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>16. Largest Number.</h3>\n              Given a list of non negative integers, arrange them such that they form the largest number.\n              <div style={titles}>\n                <PrismCode\n                  code={largestNumber}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>17. Maximum Subarray.</h3>\n              <b>Input: </b>nums = [-2,1,-3,4,-1,2,1,-5,4]<br/>\n              <b>Output: </b>6<br/>\n              <b>Explanation: </b>[4,-1,2,1] has the largest sum = 6.\n              <div style={titles}>\n                <PrismCode\n                  code={maxSubArray}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>18. Search Insert Position.</h3>\n              Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n              <br/>\n              <b>Input: </b>[1,3,5,6], 5<br/>\n              <b>Output: </b>2<br/><br/>\n              <b>Example 2:</b><br/>\n\n              <b>Input: </b>[1,3,5,6], 2<br/>\n              <b>Output: </b>1\n              <div style={titles}>\n                <PrismCode\n                  code={searchInsert}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>21. Find First and Last Position of Element in Sorted Array</h3>\n              Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\n              <br/>\n              Your algorithm's runtime complexity must be in the order of O(log n).<br/>\n\n              If the target is not found in the array, return [-1, -1].<br/>\n\n              <b>Example 1:</b>\n              <b>Input: </b>nums = [5,7,7,8,8,10], target = 8<br/>\n              <b>Output: </b>[3,4]<br/><br/>\n              <b>Example 2</b>:<br/>\n\n              <b>Input: </b>nums = [5,7,7,8,8,10], target = 6<br/>\n              <b>Output: </b>[-1,-1]\n              <div style={titles}>\n                <PrismCode\n                  code={searchRange}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>22. Maximum Gap.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={maximumGap}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              \n              \n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic2));\n"]},"metadata":{},"sourceType":"module"}