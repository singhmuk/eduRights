{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic7.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst largestPerimeter = `\nconst largestPerimeter = function (A = []) {\n  A.sort((a, b) => b - a)\n  for (let i = 0; i < A.length - 2; i++) {\n    if (A[i] < A[i + 1] + A[i + 2]) {\n      return A[i] + A[i + 1] + A[i + 2]\n    }\n  }\n  return 0\n}\n\nconsole.log(largestPerimeter([2,1,2]))`.trim();\nconst brokenCalc = `\nconst brokenCalc = function (X, Y) {\n  let result = 0\n  while (Y > X) {\n    if (Y % 2 === 0) {\n      Y /= 2\n    } else {\n      Y += 1\n    }\n    result += 1\n  }\n  return result + X - Y\n}\n\nconsole.log(brokenCalc(5, 8))`.trim();\nconst removeDuplicates = `\nconst removeDuplicates = function (S) {\n  const stack = []\n  for (const c of S) {\n    if (c === stack[stack.length - 1]) {\n      while (stack[stack.length - 1] === c) {\n        stack.pop()\n      }\n    } else {\n      stack.push(c)\n    }\n  }\n  return stack.join('')\n}\n\nconsole.log(removeDuplicates(\"abbaca\"))`.trim();\nconst shuffle = `\nfunction shuffle(nums, n) {\n  const result = []\n  for (let i = 0; i < n; i++) {\n    result.push(nums[i], nums[i + n])\n  }\n  return result\n};\n\nconsole.log(shuffle([2,5,1,3,4,7], 3))`.trim();\nconst destCity = `\nconst destCity = function (paths) {\n  let result = ''\n  const map = paths.reduce((acc, [a, b]) => {\n    acc[a] = 1\n    acc[b] = (acc[b] || 0)\n    if (acc[b] === 0) {\n      result = b\n    }\n    return acc\n  }, {})\n  return Object.keys(map).filter(x => map[x] === 0)[0]\n}\n\nconsole.log(destCity([[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]))`.trim();\nconst maxScore = `\nconst maxScore = function (nums, k) {\n  const size = nums.length - k\n  let currentSum = nums.slice(0, size).reduce((acc, num) => acc + num, 0)\n  let min = currentSum\n  for (let i = size; i < nums.length; i++) {\n    currentSum = currentSum + nums[i] - nums[i - size]\n    min = Math.min(min, currentSum)\n  }\n  return nums.reduce((acc, num) => acc + num, 0) - min\n}\n\nconsole.log(maxScore([1,79,80,1,1,1,200,1], 3))`.trim();\nconst jump = `\nconst jump = (nums = []) => {\n  let steps = 0\n  let currentJumpIndex = 0\n  let nextJumpIndex = 0\n  for (let i = 0; i < nums.length - 1; i++) {\n    nextJumpIndex = Math.max(i + nums[i], nextJumpIndex)\n    if (i === currentJumpIndex) {\n      steps += 1\n      currentJumpIndex = nextJumpIndex\n    }\n  }\n  return steps\n}\n\nconsole.log(jump([2,3,1,1,4]))`.trim();\nconst judgePoint24 = `\nconst judgePoint24 = function (nums) {\n  const isValid = x => Math.abs(x - 24) < 0.0000001\n  const aux = (arr = []) => {\n    if (arr.length === 1) {\n      return isValid(arr[0])\n    }\n    let valid = false\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = i + 1; j < arr.length; j++) {\n        const nextArr = arr.filter((x, index) => index !== i && index !== j)\n        valid = valid || aux([...nextArr, arr[i] + arr[j]])\n          || aux([...nextArr, arr[i] - arr[j]])\n          || aux([...nextArr, arr[j] - arr[i]])\n          || aux([...nextArr, arr[i] * arr[j]])\n          || aux([...nextArr, arr[i] / arr[j]])\n          || aux([...nextArr, arr[j] / arr[i]])\n      }\n    }\n    return valid\n  }\n\n  return aux(nums)\n}\n\nconsole.log(judgePoint24([4, 1, 8, 7]))`.trim();\nconst find132pattern = `\nconst find132pattern = function (nums) {\n  let max = -Infinity\n  const stack = []\n  for (let i = nums.length - 1; i >= 0; i--) {\n    while (nums[i] > stack[stack.length - 1]) {\n      max = stack.pop()\n    }\n    if (nums[i] < max) {\n      return true\n    }\n    stack.push(nums[i])\n  }\n  return false\n}\n\nconsole.log(find132pattern([3,1,4,2]))`.trim();\nconst numTimesAllBlue = `\nconst numTimesAllBlue = function (light) {\n  let moment = 0\n  let max = -1\n  for (let i = 0; i < light.length; i++) {\n    max = Math.max(max, light[i])\n    if (i + 1 === max) {\n      moment += 1\n    }\n  }\n  return moment\n}\n\nconsole.log(numTimesAllBlue([3,2,4,1,5]))`.trim();\n\nclass DSLogic7 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, \"1. Largest Perimeter Triangle.\"), \"Given an array A of positive lengths, return the largest perimeter of a triangle with non-zero area, formed from 3 of these lengths.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }), \"If it is impossible to form any triangle of non-zero area, return 0.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: largestPerimeter,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"2. Broken Calculator.\"), \"On a broken calculator that has a number showing on its display, we can perform two operations:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, \"Double: \"), \"Multiply the number on the display by 2, or;\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, \"Decrement: \"), \"Subtract 1 from the number on the display.\")), \"Initially, the calculator is displaying the number X.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }), \"Return the minimum number of operations needed to display the number Y.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: brokenCalc,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, \"4. Shuffle the Array.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [2,5,1,3,4,7], n = 3\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, \"Output: \"), \"[2,3,5,4,1,7] \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, \"Explanation: \"), \"Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: shuffle,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, \"5. Destination City.\"), \"You are given the array paths, where paths[i] = [cityAi, cityBi] means there exists a direct path going from cityAi to cityBi. Return the destination city, that is, the city without any path outgoing to another city.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }), \"It is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, \"Input: \"), \"paths = [[\\\"London\\\",\\\"New York\\\"],[\\\"New York\\\",\\\"Lima\\\"],[\\\"Lima\\\",\\\"Sao Paulo\\\"]]\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, \"Output: \"), \"\\\"Sao Paulo\\\"\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, \"Explanation: \"), \"Starting at \\\"London\\\" city you will reach \\\"Sao Paulo\\\" city which is the destination city. Your trip consist of: \\\"London\\\" - \\\"New York\\\" - \\\"Lima\\\" - \\\"Sao Paulo\\\".\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: destCity,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, \"6. Maximum Points You Can Obtain from Cards.\"), \"There are several cards arranged in a row, and each card has an associated number of points The points are given in the integer array cardPoints.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }), \"In one step, you can take one card from the beginning or from the end of the row. You have to take exactly k cards.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }), \"Your score is the sum of the points of the cards you have taken.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }), \"Given the integer array cardPoints and the integer k, return the maximum score you can obtain.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maxScore,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, \"7. Jump Game.\"), \"Given an array of non-negative integers, you are initially positioned at the first index of the array.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }), \"Each element in the array represents your maximum jump length at that position.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }), \"Your goal is to reach the last index in the minimum number of jumps.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, \"Input: \"), \"[2,3,1,1,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, \"Output: \"), \"2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, \"Explanation: \"), \"The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: jump,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, \"8. 132 Pattern.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [1,2,3,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, \"Output: \"), \"false\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, \"Explanation: \"), \"There is no 132 pattern in the sequence.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: find132pattern,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, \"9. 24 Game.\"), \"You have 4 cards each containing a number from 1 to 9. You need to judge whether they could operated through *, /, +, -, (, ) to get the value of 24.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, \"Input: \"), \"[4, 1, 8, 7]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, \"Output: \"), \"True\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, \"Explanation: \"), \"(8-4) * (7-1) = 24\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: judgePoint24,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, \"10. Bulb Switcher.\"), \"There is a room with n bulbs, numbered from 1 to n, arranged in a row from left to right. Initially, all the bulbs are turned off.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }), \"At moment k (for k from 0 to n - 1), we turn on the light[k] bulb. A bulb change color to blue only if it is on and all the previous bulbs (to the left) are turned on too.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }), \"Return the number of moments in which all turned on bulbs are blue.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, \"Input: \"), \"light = [2,1,3,5,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, \"Output: \"), \"3\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, \"Explanation: \"), \"All bulbs turned on, are blue at the moment 1, 2 and 4.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: numTimesAllBlue,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(DSLogic7);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic7.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","largestPerimeter","trim","brokenCalc","removeDuplicates","shuffle","destCity","maxScore","jump","judgePoint24","find132pattern","numTimesAllBlue","DSLogic7","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst largestPerimeter = `\nconst largestPerimeter = function (A = []) {\n  A.sort((a, b) => b - a)\n  for (let i = 0; i < A.length - 2; i++) {\n    if (A[i] < A[i + 1] + A[i + 2]) {\n      return A[i] + A[i + 1] + A[i + 2]\n    }\n  }\n  return 0\n}\n\nconsole.log(largestPerimeter([2,1,2]))`.trim();\n\nconst brokenCalc = `\nconst brokenCalc = function (X, Y) {\n  let result = 0\n  while (Y > X) {\n    if (Y % 2 === 0) {\n      Y /= 2\n    } else {\n      Y += 1\n    }\n    result += 1\n  }\n  return result + X - Y\n}\n\nconsole.log(brokenCalc(5, 8))`.trim();\n\nconst removeDuplicates = `\nconst removeDuplicates = function (S) {\n  const stack = []\n  for (const c of S) {\n    if (c === stack[stack.length - 1]) {\n      while (stack[stack.length - 1] === c) {\n        stack.pop()\n      }\n    } else {\n      stack.push(c)\n    }\n  }\n  return stack.join('')\n}\n\nconsole.log(removeDuplicates(\"abbaca\"))`.trim();\n\nconst shuffle = `\nfunction shuffle(nums, n) {\n  const result = []\n  for (let i = 0; i < n; i++) {\n    result.push(nums[i], nums[i + n])\n  }\n  return result\n};\n\nconsole.log(shuffle([2,5,1,3,4,7], 3))`.trim();\n\nconst destCity = `\nconst destCity = function (paths) {\n  let result = ''\n  const map = paths.reduce((acc, [a, b]) => {\n    acc[a] = 1\n    acc[b] = (acc[b] || 0)\n    if (acc[b] === 0) {\n      result = b\n    }\n    return acc\n  }, {})\n  return Object.keys(map).filter(x => map[x] === 0)[0]\n}\n\nconsole.log(destCity([[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]))`.trim();\n\nconst maxScore = `\nconst maxScore = function (nums, k) {\n  const size = nums.length - k\n  let currentSum = nums.slice(0, size).reduce((acc, num) => acc + num, 0)\n  let min = currentSum\n  for (let i = size; i < nums.length; i++) {\n    currentSum = currentSum + nums[i] - nums[i - size]\n    min = Math.min(min, currentSum)\n  }\n  return nums.reduce((acc, num) => acc + num, 0) - min\n}\n\nconsole.log(maxScore([1,79,80,1,1,1,200,1], 3))`.trim();\n\nconst jump = `\nconst jump = (nums = []) => {\n  let steps = 0\n  let currentJumpIndex = 0\n  let nextJumpIndex = 0\n  for (let i = 0; i < nums.length - 1; i++) {\n    nextJumpIndex = Math.max(i + nums[i], nextJumpIndex)\n    if (i === currentJumpIndex) {\n      steps += 1\n      currentJumpIndex = nextJumpIndex\n    }\n  }\n  return steps\n}\n\nconsole.log(jump([2,3,1,1,4]))`.trim();\n\nconst judgePoint24 = `\nconst judgePoint24 = function (nums) {\n  const isValid = x => Math.abs(x - 24) < 0.0000001\n  const aux = (arr = []) => {\n    if (arr.length === 1) {\n      return isValid(arr[0])\n    }\n    let valid = false\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = i + 1; j < arr.length; j++) {\n        const nextArr = arr.filter((x, index) => index !== i && index !== j)\n        valid = valid || aux([...nextArr, arr[i] + arr[j]])\n          || aux([...nextArr, arr[i] - arr[j]])\n          || aux([...nextArr, arr[j] - arr[i]])\n          || aux([...nextArr, arr[i] * arr[j]])\n          || aux([...nextArr, arr[i] / arr[j]])\n          || aux([...nextArr, arr[j] / arr[i]])\n      }\n    }\n    return valid\n  }\n\n  return aux(nums)\n}\n\nconsole.log(judgePoint24([4, 1, 8, 7]))`.trim();\n\nconst find132pattern = `\nconst find132pattern = function (nums) {\n  let max = -Infinity\n  const stack = []\n  for (let i = nums.length - 1; i >= 0; i--) {\n    while (nums[i] > stack[stack.length - 1]) {\n      max = stack.pop()\n    }\n    if (nums[i] < max) {\n      return true\n    }\n    stack.push(nums[i])\n  }\n  return false\n}\n\nconsole.log(find132pattern([3,1,4,2]))`.trim();\n\nconst numTimesAllBlue = `\nconst numTimesAllBlue = function (light) {\n  let moment = 0\n  let max = -1\n  for (let i = 0; i < light.length; i++) {\n    max = Math.max(max, light[i])\n    if (i + 1 === max) {\n      moment += 1\n    }\n  }\n  return moment\n}\n\nconsole.log(numTimesAllBlue([3,2,4,1,5]))`.trim();\n\n\nclass DSLogic7 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Largest Perimeter Triangle.</h3>\n              Given an array A of positive lengths, return the largest perimeter of a triangle with non-zero area, formed from 3 of these lengths.\n              <br/>\n              If it is impossible to form any triangle of non-zero area, return 0.\n              <div style={titles}>\n                <PrismCode\n                  code={largestPerimeter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>2. Broken Calculator.</h3>\n              On a broken calculator that has a number showing on its display, we can perform two operations:\n              <br/>\n              <ul>\n                <li><b>Double: </b>Multiply the number on the display by 2, or;</li>\n                <li><b>Decrement: </b>Subtract 1 from the number on the display.</li>\n              </ul>\n              Initially, the calculator is displaying the number X.\n              <br/>\n              Return the minimum number of operations needed to display the number Y.\n              <div style={titles}>\n                <PrismCode\n                  code={brokenCalc}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n\n              <h3>4. Shuffle the Array.</h3>\n              <b>Input: </b>nums = [2,5,1,3,4,7], n = 3<br/>\n              <b>Output: </b>[2,3,5,4,1,7] <br/>\n              <b>Explanation: </b>Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].\n              <div style={titles}>\n                <PrismCode\n                  code={shuffle}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>5. Destination City.</h3>\n              You are given the array paths, where paths[i] = [cityAi, cityBi] means there exists a direct path going from cityAi to cityBi. Return the destination city, that is, the city without any path outgoing to another city.\n              <br/>\n              It is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.\n              <br/>\n              <b>Input: </b>paths = [[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]\n              <b>Output: </b>\"Sao Paulo\" \n              <b>Explanation: </b>Starting at \"London\" city you will reach \"Sao Paulo\" city which is the destination city. Your trip consist of: \"London\" - \"New York\" - \"Lima\" - \"Sao Paulo\".\n\n              <div style={titles}>\n                <PrismCode\n                  code={destCity}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>6. Maximum Points You Can Obtain from Cards.</h3>\n              There are several cards arranged in a row, and each card has an associated number of points The points are given in the integer array cardPoints.\n              <br/>\n              In one step, you can take one card from the beginning or from the end of the row. You have to take exactly k cards.\n              <br/>\n              Your score is the sum of the points of the cards you have taken.\n              <br/>\n              Given the integer array cardPoints and the integer k, return the maximum score you can obtain.\n              <div style={titles}>\n                <PrismCode\n                  code={maxScore}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>7. Jump Game.</h3>\n              Given an array of non-negative integers, you are initially positioned at the first index of the array.\n              <br/>\n              Each element in the array represents your maximum jump length at that position.\n              <br/>\n              Your goal is to reach the last index in the minimum number of jumps.\n              <br/>\n              <br/>\n              <b>Input: </b>[2,3,1,1,4]<br/>\n              <b>Output: </b>2<br/>\n              <b>Explanation: </b>The minimum number of jumps to reach the last index is 2.\n                  Jump 1 step from index 0 to 1, then 3 steps to the last index.\n              <div style={titles}>\n                <PrismCode\n                  code={jump}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>8. 132 Pattern.</h3>\n              <b>Input: </b>nums = [1,2,3,4]<br/>\n              <b>Output: </b>false<br/>\n              <b>Explanation: </b>There is no 132 pattern in the sequence.\n              <div style={titles}>\n                <PrismCode\n                  code={find132pattern}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>9. 24 Game.</h3>\n              You have 4 cards each containing a number from 1 to 9. You need to judge whether they could operated through *, /, +, -, (, ) to get the value of 24.\n              <br/>\n              <br/>\n              <b>Input: </b>[4, 1, 8, 7]<br/>\n              <b>Output: </b>True<br/>\n              <b>Explanation: </b>(8-4) * (7-1) = 24\n              <div style={titles}>\n                <PrismCode\n                  code={judgePoint24}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>10. Bulb Switcher.</h3>\n              There is a room with n bulbs, numbered from 1 to n, arranged in a row from left to right. Initially, all the bulbs are turned off.\n              <br/>\n              At moment k (for k from 0 to n - 1), we turn on the light[k] bulb. A bulb change color to blue only if it is on and all the previous bulbs (to the left) are turned on too.\n              <br/>\n              Return the number of moments in which all turned on bulbs are blue.\n              <br/><br/>\n              <b>Input: </b>light = [2,1,3,5,4]<br/>\n              <b>Output: </b>3<br/>\n              <b>Explanation: </b>All bulbs turned on, are blue at the moment 1, 2 and 4.\n              <div style={titles}>\n                <PrismCode\n                  code={numTimesAllBlue}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic7));\n"]},"metadata":{},"sourceType":"module"}