{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var reading=\"\\nimport csv\\n\\nfilename = \\\"aapl.csv\\\"\\n\\nfields = []                                                       # initializing the titles and rows list\\nrows = []\\n\\nwith open(filename, 'r') as csvfile:                              # reading csv file\\n    csvreader = csv.reader(csvfile)                               # creating a csv reader object\\n    fields = next(csvreader)                                      # extracting field names through first row\\n    \\n    for row in csvreader:                                         # extracting each data row one by one\\n        rows.append(row)\\n\\n    print(\\\"Total no. of rows: %d\\\" % (csvreader.line_num))         # get total number of rows\\n\\n\\nprint('Field names are:' + ', '.join(field for field in fields))                          \\n\\nprint('First 5 rows are:')\\nfor row in rows[:5]:\\n    for col in row:                                                                     # parsing each column of a row\\n        print(\\\"%10s\\\" % col),\\n\".trim();var writing=\"\\nimport csv\\n\\n\\nfields = ['Name', 'Branch', 'Year', 'CGPA']                            \\n\\nrows = [['Nikhil', 'COE', '2', '9.0'],                                  # data rows of csv file\\n        ['Sanchit', 'COE', '2', '9.1'],\\n        ['Aditya', 'IT', '2', '9.3'],\\n        ['Sagar', 'SE', '1', '9.5'],\\n        ['Prateek', 'MCE', '3', '7.8'],\\n        ['Sahil', 'EP', '2', '9.1']]\\n\\nfilename = \\\"university_records.csv\\\"                                     # name of csv file\\n\\nwith open(filename, 'w') as csvfile:                                    \\n    csvwriter = csv.writer(csvfile)                                     # creating a csv writer object\\n    csvwriter.writerow(fields)                                          # writing the fields\\n    csvwriter.writerows(rows)                                           # writing the data rows\\n    \".trim();var dictionary=\"\\nimport csv\\n\\n\\nmydict = [{'branch': 'COE', 'cgpa': '9.0', 'name': 'Nikhil', 'year': '2'},        # my data rows as dictionary objects\\n          {'branch': 'COE', 'cgpa': '9.1', 'name': 'Sanchit', 'year': '2'},\\n          {'branch': 'IT', 'cgpa': '9.3', 'name': 'Aditya', 'year': '2'},\\n          {'branch': 'SE', 'cgpa': '9.5', 'name': 'Sagar', 'year': '1'},\\n          {'branch': 'MCE', 'cgpa': '7.8', 'name': 'Prateek', 'year': '3'},\\n          {'branch': 'EP', 'cgpa': '9.1', 'name': 'Sahil', 'year': '2'}]\\n\\nfields = ['name', 'branch', 'year', 'cgpa']\\n\\nfilename = \\\"university_records.csv\\\"\\n\\nwith open(filename, 'w') as csvfile:\\n    writer = csv.DictWriter(csvfile, fieldnames=fields)\\n    writer.writeheader()                                                            # writing headers (field names)\\n    writer.writerows(mydict)                                                        # writing data rows\\n    \".trim();var searchings=\"\\n    def binary_search(arr, low, high, x):\\n        if high >= low:                                                                    \\n            mid = (high + low) // 2\\n            \\n            if arr[mid] == x:                                                # If element is present at the middle itself\\n                return mid\\n            elif arr[mid] > x:\\n                return binary_search(arr, low, mid - 1, x)\\n            else:\\n                return binary_search(arr, mid + 1, high, x)\\n        else:                                                                       # Element is not present in the array\\n            return -1\\n    \\n            \\n    # Test array\\n    arr = [ 2, 3, 4, 10, 40 ]\\n    x = 10\\n    \\n    result = binary_search(arr, 0, len(arr)-1, x)\\n    if result != -1:\\n        print(\\\"Element is present at index\\\", str(result))\\n    else:\\n        print(\\\"Element is not present in array\\\") \".trim();var quickSort=\"\\n    def partition(arr,low,high):\\n        i = ( low-1 )                                                                         # index of smaller element\\n        pivot = arr[high]                                                                     # pivot\\n    \\n        for j in range(low , high):\\n            if   arr[j] <= pivot:\\n                i = i+1\\n                arr[i],arr[j] = arr[j],arr[i]\\n    \\n        arr[i+1],arr[high] = arr[high],arr[i+1]\\n        return ( i+1 )\\n    \\n    \\n    def quickSort(arr,low,high):                                  # Function to do Quick sort.\\n        if low < high:\\n            pi = partition(arr,low,high)                          # pi is partitioning index, arr[p] is now at right place\\n                                                            # Separately sort elements before partition and after partition\\n            quickSort(arr, low, pi-1)\\n            quickSort(arr, pi+1, high)\\n    \\n    arr = [10, 7, 8, 9, 1, 5]\\n    n = len(arr)\\n    quickSort(arr,0,n-1)\\n    print (\\\"Sorted array is:\\\")\\n    for i in range(n):\\n        print (\\\"%d\\\" %arr[i]), \".trim();var CsvPython=/*#__PURE__*/function(_Component){_inherits(CsvPython,_Component);function CsvPython(){_classCallCheck(this,CsvPython);return _possibleConstructorReturn(this,_getPrototypeOf(CsvPython).apply(this,arguments));}_createClass(CsvPython,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Reading a CSV file\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:reading,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Writing to a CSV file\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:writing,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Writing a dictionary to a CSV file\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:dictionary,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Searching\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:searchings,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"QuickSort\"),React.createElement(\"b\",null,\"The main function that implements QuickSort \"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"arr[] :\"),\"Array to be sorted.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"low :\"),\"Starting index.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"high :\"),\"Ending index.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:quickSort,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return CsvPython;}(Component);export default withStyles(styles)(CsvPython);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/pythone/deeppy/csv.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","reading","trim","writing","dictionary","searchings","quickSort","CsvPython","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,0BAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CAGA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,eAAe,CAAE,SAAnB,CAA8BC,OAAO,CAAE,KAAvC,CAA8CC,QAAQ,CAAE,MAAxD,CAAf,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,KAAK,CAAE,CACLC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH,CAELN,OAAO,CAAEG,KAAK,CAACG,OAAN,CAAc,CAAd,CAFJ,CADgB,CAKvBC,QAAQ,CAAE,CACRF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA,CALa,CAQvBE,SAAS,CAAE,CACTC,SAAS,CAAE,QADF,CARY,CAAL,EAApB,CAaA,GAAMC,CAAAA,OAAO,CAAG,m+BAwBdC,IAxBc,EAAhB,CA0BA,GAAMC,CAAAA,OAAO,CAAG,61BAmBVD,IAnBU,EAAhB,CAqBA,GAAME,CAAAA,UAAU,CAAG,i6BAmBbF,IAnBa,EAAnB,CAqBA,GAAMG,CAAAA,UAAU,CAAG,g7BAuBgCH,IAvBhC,EAAnB,CAyBA,GAAMI,CAAAA,SAAS,CAAG,omCA0BcJ,IA1Bd,EAAlB,C,GA4BMK,CAAAA,S,qSACgB,CAClBC,UAAU,CAAC,iBAAM1B,CAAAA,KAAK,CAAC2B,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAACf,KAA1B,EACE,8BAAI,oBAAC,OAAD,MAAJ,CADF,CADF,CADF,CAME,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEe,OAAO,CAACf,KAA1B,EACE,oBAAC,IAAD,MACE,sDADF,CAEE,2BAAK,KAAK,CAAEN,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEY,OADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAFF,CASE,8BATF,CAWE,yDAXF,CAYE,2BAAK,KAAK,CAAEZ,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEc,OADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAZF,CAmBE,8BAnBF,CAqBE,sEArBF,CAsBE,2BAAK,KAAK,CAAEd,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEe,UADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAtBF,CA6BE,8BA7BF,CA+BE,0CA/BF,CAgCE,2BAAK,KAAK,CAAEf,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEgB,UADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAhCF,CAuCE,8BAvCF,CAyCE,0CAzCF,CA0CE,4EA1CF,CA2CE,8BACE,8BAAI,uCAAJ,uBADF,CAEE,8BAAI,qCAAJ,mBAFF,CAGE,8BAAI,sCAAJ,iBAHF,CA3CF,CAgDE,2BAAK,KAAK,CAAEhB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEiB,SADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAhDF,CADF,CADF,CANF,CADF,CAqED,C,uBA3EqBzB,S,EA8ExB,cAAgBI,CAAAA,UAAU,CAACQ,MAAD,CAAV,CAAmBc,SAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst reading = `\nimport csv\n\nfilename = \"aapl.csv\"\n\nfields = []                                                       # initializing the titles and rows list\nrows = []\n\nwith open(filename, 'r') as csvfile:                              # reading csv file\n    csvreader = csv.reader(csvfile)                               # creating a csv reader object\n    fields = next(csvreader)                                      # extracting field names through first row\n    \n    for row in csvreader:                                         # extracting each data row one by one\n        rows.append(row)\n\n    print(\"Total no. of rows: %d\" % (csvreader.line_num))         # get total number of rows\n\n\nprint('Field names are:' + ', '.join(field for field in fields))                          \n\nprint('First 5 rows are:')\nfor row in rows[:5]:\n    for col in row:                                                                     # parsing each column of a row\n        print(\"%10s\" % col),\n`.trim();\n\nconst writing = `\nimport csv\n\n\nfields = ['Name', 'Branch', 'Year', 'CGPA']                            \n\nrows = [['Nikhil', 'COE', '2', '9.0'],                                  # data rows of csv file\n        ['Sanchit', 'COE', '2', '9.1'],\n        ['Aditya', 'IT', '2', '9.3'],\n        ['Sagar', 'SE', '1', '9.5'],\n        ['Prateek', 'MCE', '3', '7.8'],\n        ['Sahil', 'EP', '2', '9.1']]\n\nfilename = \"university_records.csv\"                                     # name of csv file\n\nwith open(filename, 'w') as csvfile:                                    \n    csvwriter = csv.writer(csvfile)                                     # creating a csv writer object\n    csvwriter.writerow(fields)                                          # writing the fields\n    csvwriter.writerows(rows)                                           # writing the data rows\n    `.trim();\n\nconst dictionary = `\nimport csv\n\n\nmydict = [{'branch': 'COE', 'cgpa': '9.0', 'name': 'Nikhil', 'year': '2'},        # my data rows as dictionary objects\n          {'branch': 'COE', 'cgpa': '9.1', 'name': 'Sanchit', 'year': '2'},\n          {'branch': 'IT', 'cgpa': '9.3', 'name': 'Aditya', 'year': '2'},\n          {'branch': 'SE', 'cgpa': '9.5', 'name': 'Sagar', 'year': '1'},\n          {'branch': 'MCE', 'cgpa': '7.8', 'name': 'Prateek', 'year': '3'},\n          {'branch': 'EP', 'cgpa': '9.1', 'name': 'Sahil', 'year': '2'}]\n\nfields = ['name', 'branch', 'year', 'cgpa']\n\nfilename = \"university_records.csv\"\n\nwith open(filename, 'w') as csvfile:\n    writer = csv.DictWriter(csvfile, fieldnames=fields)\n    writer.writeheader()                                                            # writing headers (field names)\n    writer.writerows(mydict)                                                        # writing data rows\n    `.trim();\n\nconst searchings = `\n    def binary_search(arr, low, high, x):\n        if high >= low:                                                                    \n            mid = (high + low) // 2\n            \n            if arr[mid] == x:                                                # If element is present at the middle itself\n                return mid\n            elif arr[mid] > x:\n                return binary_search(arr, low, mid - 1, x)\n            else:\n                return binary_search(arr, mid + 1, high, x)\n        else:                                                                       # Element is not present in the array\n            return -1\n    \n            \n    # Test array\n    arr = [ 2, 3, 4, 10, 40 ]\n    x = 10\n    \n    result = binary_search(arr, 0, len(arr)-1, x)\n    if result != -1:\n        print(\"Element is present at index\", str(result))\n    else:\n        print(\"Element is not present in array\") `.trim();\n\nconst quickSort = `\n    def partition(arr,low,high):\n        i = ( low-1 )                                                                         # index of smaller element\n        pivot = arr[high]                                                                     # pivot\n    \n        for j in range(low , high):\n            if   arr[j] <= pivot:\n                i = i+1\n                arr[i],arr[j] = arr[j],arr[i]\n    \n        arr[i+1],arr[high] = arr[high],arr[i+1]\n        return ( i+1 )\n    \n    \n    def quickSort(arr,low,high):                                  # Function to do Quick sort.\n        if low < high:\n            pi = partition(arr,low,high)                          # pi is partitioning index, arr[p] is now at right place\n                                                            # Separately sort elements before partition and after partition\n            quickSort(arr, low, pi-1)\n            quickSort(arr, pi+1, high)\n    \n    arr = [10, 7, 8, 9, 1, 5]\n    n = len(arr)\n    quickSort(arr,0,n-1)\n    print (\"Sorted array is:\")\n    for i in range(n):\n        print (\"%d\" %arr[i]), `.trim();\n\nclass CsvPython extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Reading a CSV file</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={reading}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Writing to a CSV file</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={writing}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Writing a dictionary to a CSV file</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={dictionary}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Searching</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={searchings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>QuickSort</h3>\n              <b>The main function that implements QuickSort </b>\n              <ul>\n                <li><b>arr[] :</b>Array to be sorted.</li>\n                <li><b>low :</b>Starting index.</li>\n                <li><b>high :</b>Ending index.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={quickSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(CsvPython));\n"]},"metadata":{},"sourceType":"module"}