{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/mongoDB/deepMongodb/mongoCurd.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst config = `\nconst mongoose = require('mongoose');\n\nconst dbCon = mongoose.connect(process.env.MONGO_URL, {\n    useNewUrlParser: true,\n    useUnifiedTopology: true\n  }, err =>{\n    if(err) throw err;\n    console.log('Connected to MongoDB')\n  })\n\n\n  module.exports = dbCon;`.trim();\nconst models = `\nconst mongoose = require('mongoose');\nconst Schems = mongoose.Schema;\n\nconst ItemSchema = new Schems({\n  name: {type:String, required:true, minlength: [3, \"Length aleast 3 characters or longer\"]},\n  rank: {type:Number, required: [true, \"Please provide a name to the bootcamp\"]},\n  counts: [Number],\n  isAdmin: { type: Boolean, required: true, default: false },\n  followers: {type:Array, default:[]},\n  desc: { type: String, max: 500 },\n  img: { type: String },\n  date: {type:Date, default:Date.now}\n  students: [{ type: 'ObjectId', ref: 'Student' }],               //ref name == schemma name\n  type: { type: String, required: true, default:'professional' }, //radio\n},\n{ timestamps: true })\n\nmodule.exports = Item = mongoose.model('item', ItemSchema);`.trim();\nconst controllers = `\nconst express = require('express');\nconst router = express.Router();\nconst Item = require('../models/items');\n\n\nrouter.getAll = async (req,res) => {\n    try{\n        Item.find()\n             .sort({date:-1})\n             .then(item=>res.json(item));\n    }catch(err){\n        console.log(err)\n    }\n}\n\nrouter.createItem = async (req,res) => {\n    try{\n        const newItem = new Item({\n            name: req.body.name\n        });\n\n        newItem.save().then(item => res.json(item));\n    }catch(err){\n        console.log(err)\n    }\n}\n\nrouter.getById = async (req,res) => {\n    try{\n        Item.findById(req.params.id)\n            .then(item => res.json(item))\n    }catch(err){\n        console.log(err)\n    }\n}\n\nrouter.remove = async (req, res) => {\n    Item.findByIdAndDelete(req.params.id)\n        .then(item => item.remove()\n        .then(() => res.json({success:true})))\n}\n\nrouter.updates = async (req,res) => {\n    Item.findByIdAndUpdate(req.params.id, {\n        name:req.body.name\n    }, {new:true}).then(data=>res.send(data))\n}\n\n\nmodule.exports = router;`.trim();\nconst routes = `\nconst express = require('express');\nconst router = express.Router();\nconst ItemControllers = require('../controllers/items');\n\nrouter.route(\"/\").get(ItemControllers.getAll);\nrouter.route(\"/:id\").get(ItemControllers.getById);\nrouter.route(\"/\").post(ItemControllers.createItem);\nrouter.route(\"/:id\").delete(ItemControllers.remove);\nrouter.route(\"/:id\").put(ItemControllers.updates);\n\nmodule.exports = router;`.trim();\nconst server = `\nconst express=require('express');\nconst app=express();\nrequire('dotenv').config();\nconst dbCon = require('./config/db');\nconst itemsRouter = require('./routes/items')\n\napp.use(express.urlencoded({extended:true}));\napp.use(express.json());\n\ndbCon;\n\napp.use(\"/items\", itemsRouter);\n\nconst port = process.env.PORT;\napp.listen(port,()=> console.log('Server is running on port '$'{port}'))`.trim();\nconst students = `\nconst classSchema = new Schema({\n  name: { type: String, unique: true },\n  students: [{ type: 'ObjectId', ref: 'Student' }]\n})\n//students is refress like objectId not data in a class can be many students should be ref name == schemma name\n\nmodule.exports = mongoose.model(\"Class\", classSchema);\n\n\n//studentSchema\nconst studentSchema = new Schema({\n  name: { type: String, unique: true },\n  age: Number,\n  subject: String,\n})\n\nmodule.exports = mongoose.model(\"Student\", studentSchema);\n`.trim();\nconst controllersClass = `\nconst Class = require('../models/class');\n\nrouter.all = async (req, res) => {\n    Class.find({}).populate('students').exec((err, docs) => {\n      //populate fields which want to pass\n      if (err) throw (err);\n      res.json(docs)\n    })\n};\n\nrouter.createClass = async (req, res) => {\n    let newClass = new Class();\n    newClass.name = req.body.name;\n    newClass.students = [];\n    newClass.save((err) => {\n      if (err) res.json({ \"error\": err });\n      else res.json(newClass)\n    })\n};\n\nrouter.updateClass = async (req, res) => {\n    Class.findOneAndUpdate({ _id: req.params.id },\n      { $push: { students: req.body.studentsId } }, { new: true }, (err, doc) => {\n        //$push used to push data in students array, we push studentsId\n        if (err) throw (err);\n        else res.json(doc)\n      })\n};`.trim();\nconst controllersStudents = `\nconst Student = require('../models/students');\n\nrouter.all = async (req, res) => {\n    Student.find({}).exec((err, docs) => {\n      if (err) throw (err);\n      res.json(docs)\n    })\n};\n\nrouter.createStudent = async (req, res) => {\n    let student = new Student();\n    student.name = req.body.name;\n    student.age = req.body.age;\n    student.subject = req.body.subject;\n    student.save((err) => {\n      if (err) res.json({ \"error\": err });\n      else res.json(student)\n    })\n};\n\nrouter.updateStudent = async (req, res) => {\n    Student.findOneAndUpdate({ _id: req.param.id },\n      { $set: { age: req.body.age } }, { new: true }, (err, doc) => {\n        if (err) throw (err);\n        else res.json(doc)\n      })\n};\n\n// app.put('/students/:id', (req, res) => {\n//   Student.findOneAndUpdate({ _id: req.param.id },\n//     { $set: { age: req.body.age } }, { new: true }, (err, doc) => {\n//       if (err) throw (err);\n//       else res.json(doc)\n//     })\n// })`.trim();\nconst classRoutes = `\nconst classCont = require('../controllers/class');\n\nrouter.route(\"/\").get(classCont.all);\nrouter.route(\"/\").post(classCont.createClass);\nrouter.route(\"/:id\").put(classCont.updateClass);\n\n\n//Students Routes\nconst express = require('express');\nconst router = express.Router();\nconst studentsCont = require('../controllers/students');\n\nrouter.route(\"/\").get(studentsCont.all);\nrouter.route(\"/\").post(studentsCont.createStudent);\nrouter.route(\"/:id\").put(studentsCont.updateStudent);\n`.trim();\nconst serverJoin = `\nconst classRoutes = require('./routes/classRoutes');\nconst studetsRoutes = require('./routes/studentsRoutes');\n\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\n\ndbCon;\n\napp.use('/class', classRoutes);\napp.use('/students', studetsRoutes);\n\nconst PORT = process.env.PORT;\napp.listen(PORT, () => console.log('Server listening on port.'));`.trim();\nconst modelsJoin = `\nconst courseSchema = new mongoose.Schema({\n  _id: Number,\n  name: String,\n  category: String\n});\n\nconst studentSchema = new mongoose.Schema({\n  name: String,\n  enroll: Number,\n  courseId: Number\n});\n\nconst Course = mongoose.model('course', courseSchema);\nconst Student = mongoose.model('student', studentSchema);\n\nmodule.exports = { Student, Course }\n\n\n//ItemsOp\nconst ItemsOp = mongoose.Schema({\n  name: String,\n  date: new Date(),\n  ItemsOps: [{ type: mongoose.Schema.ObjectId, ref: 'itemsOps' }]\n});\n\nmodule.exports = mongoose.model('itemsOp', ItemsOp);\n\n\n//ItemsOps\nconst ItemsOps = mongoose.Schema({\n  name: String,\n  price: Number,\n  ItemsOp: [{ type: mongoose.Schema.ObjectId, ref: 'itemsOp' }]\n});\n\nmodule.exports = mongoose.model('itemsOps', ItemsOps);\n`.trim();\nconst controllersFinds = `\nconst { Student, Course } = require('../models/finds');\n\nvar dbcourse = [];\nrouter.all = async (req, res, next) => {\n    Course.find({ category: \"database\" })\n      .then(data => {\n        console.log(\"Database Courses:\", data)\n\n        data.map((d, k) => {\n          dbcourse.push(d._id);\n        })\n\n    Student.find({ courseId: { $in: dbcourse } })\n      .then(data => {\n        console.log(\"Students in Database Courses:\"+ data +\"dbcourse\", dbcourse)\n      })\n      .catch(error => {\n        console.log(error);\n      })\n  })\n};`.trim();\nconst controllersItem = `\nconst Item = require('../models/item');\n\nrouter.all = async (req, res, next) => {\n    Item.find()\n      .populate({\n        path: 'itemsOps',\n        populate: { path: 'itemsOps' }\n      })\n      .sort({ date: -1 })\n      .then(items => res.json(items));\n};\n\nrouter.getOne = async (req, res, next) => {\n    Item.findById(req.params.id)\n      .sort({ date: -1 })\n      .then(items => res.json(items));\n};\n\nrouter.creates = async (req, res, next) => {\n    const newItem = new Item({\n      name: req.body.name\n    });\n\n    newItem.save().then(item => res.json(item));\n};\n\nrouter.update = async (req, res, next) => {\n    Item.findByIdAndUpdate(req.params.id, {\n      name: req.body.name,\n    }, { new: true }).then(data => { res.send(data) })\n};\n\nrouter.remove = async (req, res, next) => {\n    Item.findById(req.params.id)\n      .then(item => item.remove().then(() => res.json({ success: true })))\n};`.trim();\nconst controllersItemsOp = `\nconst Item = require('../models/itemsOp');\n\nrouter.allsorts = async (req, res, next) => {\n    Item.find()\n      .sort({ price: 1 })\n      .then(items => res.json(items));\n};\n\nrouter.creates = async (req, res, next) => {\n    const newItem = new Item({\n      name: req.body.name,\n      price: req.body.price\n    });\n\n    newItem.save().then(item => res.json(item));\n};\n\n//Limit\nrouter.limits = async (req, res, next) => {\n    Item.find()\n      .limit(2)\n      .then(items => res.json(items));\n};\n\n//filter Regx\nrouter.filtersRegx = async (req, res, next) => {\n  var query = { name: /^C/ };\n  \n    Item.find(query)\n      .then(items => res.json(items));\n};\n\n//filter \nrouter.filters = async (req, res, next) => {\n  var query = { name: \"Mobile\" };\n    Item.find(query)\n      .then(items => res.json(items));\n};\n\n//left join\nrouter.joins = async (req, res, next) => {\n  var query = { name: \"Mobile\" };\n    Item.find(query)\n      .then(items => res.json(items));\n};`.trim();\nconst routesJoin = `\nconst itemRoutes = require('../controllers/finds');\nrouter.route(\"/\").get(itemRoutes.all);\n\n\n//itemRoutes\nconst itemRoutes = require('../controllers/item');\n\nrouter.route(\"/\").get(itemRoutes.all);\nrouter.route(\"/:id\").get(itemRoutes.getOne);\nrouter.route(\"/\").post(itemRoutes.creates);\nrouter.route(\"/:id\").patch(itemRoutes.update);\nrouter.route(\"/:id\").delete(itemRoutes.remove);\n\n\n//itemOpRoutes\nconst itemRoutes = require('../controllers/itemsOp');\n\nrouter.route(\"/\").get(itemRoutes.allsorts);\nrouter.route(\"/\").post(itemRoutes.creates);\nrouter.route(\"/lmt\").get(itemRoutes.limits);\nrouter.route(\"/fltrebx\").get(itemRoutes.filtersRegx);\nrouter.route(\"/flt\").get(itemRoutes.filters);\nrouter.route(\"/ljoins\").get(itemRoutes.joins);\n`.trim();\nconst serverJoinRef = `\nconst itemsOp = require('./routes/itemsOp');\nconst findsOp = require('./routes/finds');\n\nconst app = express();\n\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\n\ndbCon;\n\napp.use('/itemsOp', itemsOp);\napp.use('/finds', findsOp);\n\nconst port = process.env.PORT;\napp.listen(port, () => console.log('Server listening on port.''));`.trim();\n\nclass MongoCurd extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469\n      },\n      __self: this\n    }, \"MongoCurd\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }, \"config/db.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: config,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    }, \"models/items.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: models,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }, \"controllers/items.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: controllers,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }, \"routes/items.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: routes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }, \"server.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: server,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    }, \"Join\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }, \"models/class.js\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    }, \"models/students.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: students,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    }, \"controllers/class.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: controllersClass,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }, \"controllersStudents/students.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: controllersStudents,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }, \"routes/items.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: classRoutes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }, \"server.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: serverJoin,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    }, \"Join_Ref\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583\n      },\n      __self: this\n    }, \"modelsJoin/finds.js\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584\n      },\n      __self: this\n    }, \"modelsJoin/item.js\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585\n      },\n      __self: this\n    }, \"modelsJoin/itemsOp.js\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: modelsJoin,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596\n      },\n      __self: this\n    }, \"controllers/finds.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: controllersFinds,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 605\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607\n      },\n      __self: this\n    }, \"controllers/item.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: controllersItem,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618\n      },\n      __self: this\n    }, \"controllers/itemsOp.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: controllersItemsOp,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629\n      },\n      __self: this\n    }, \"routes/find.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: routesJoin,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640\n      },\n      __self: this\n    }, \"server.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: serverJoinRef,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 642\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(MongoCurd);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/mongoDB/deepMongodb/mongoCurd.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","config","trim","models","controllers","routes","server","students","controllersClass","controllersStudents","classRoutes","serverJoin","modelsJoin","controllersFinds","controllersItem","controllersItemsOp","routesJoin","serverJoinRef","MongoCurd","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst config = `\nconst mongoose = require('mongoose');\n\nconst dbCon = mongoose.connect(process.env.MONGO_URL, {\n    useNewUrlParser: true,\n    useUnifiedTopology: true\n  }, err =>{\n    if(err) throw err;\n    console.log('Connected to MongoDB')\n  })\n\n\n  module.exports = dbCon;`.trim();\n\nconst models = `\nconst mongoose = require('mongoose');\nconst Schems = mongoose.Schema;\n\nconst ItemSchema = new Schems({\n  name: {type:String, required:true, minlength: [3, \"Length aleast 3 characters or longer\"]},\n  rank: {type:Number, required: [true, \"Please provide a name to the bootcamp\"]},\n  counts: [Number],\n  isAdmin: { type: Boolean, required: true, default: false },\n  followers: {type:Array, default:[]},\n  desc: { type: String, max: 500 },\n  img: { type: String },\n  date: {type:Date, default:Date.now}\n  students: [{ type: 'ObjectId', ref: 'Student' }],               //ref name == schemma name\n  type: { type: String, required: true, default:'professional' }, //radio\n},\n{ timestamps: true })\n\nmodule.exports = Item = mongoose.model('item', ItemSchema);`.trim();\n\nconst controllers = `\nconst express = require('express');\nconst router = express.Router();\nconst Item = require('../models/items');\n\n\nrouter.getAll = async (req,res) => {\n    try{\n        Item.find()\n             .sort({date:-1})\n             .then(item=>res.json(item));\n    }catch(err){\n        console.log(err)\n    }\n}\n\nrouter.createItem = async (req,res) => {\n    try{\n        const newItem = new Item({\n            name: req.body.name\n        });\n\n        newItem.save().then(item => res.json(item));\n    }catch(err){\n        console.log(err)\n    }\n}\n\nrouter.getById = async (req,res) => {\n    try{\n        Item.findById(req.params.id)\n            .then(item => res.json(item))\n    }catch(err){\n        console.log(err)\n    }\n}\n\nrouter.remove = async (req, res) => {\n    Item.findByIdAndDelete(req.params.id)\n        .then(item => item.remove()\n        .then(() => res.json({success:true})))\n}\n\nrouter.updates = async (req,res) => {\n    Item.findByIdAndUpdate(req.params.id, {\n        name:req.body.name\n    }, {new:true}).then(data=>res.send(data))\n}\n\n\nmodule.exports = router;`.trim();\n\nconst routes = `\nconst express = require('express');\nconst router = express.Router();\nconst ItemControllers = require('../controllers/items');\n\nrouter.route(\"/\").get(ItemControllers.getAll);\nrouter.route(\"/:id\").get(ItemControllers.getById);\nrouter.route(\"/\").post(ItemControllers.createItem);\nrouter.route(\"/:id\").delete(ItemControllers.remove);\nrouter.route(\"/:id\").put(ItemControllers.updates);\n\nmodule.exports = router;`.trim();\n\nconst server = `\nconst express=require('express');\nconst app=express();\nrequire('dotenv').config();\nconst dbCon = require('./config/db');\nconst itemsRouter = require('./routes/items')\n\napp.use(express.urlencoded({extended:true}));\napp.use(express.json());\n\ndbCon;\n\napp.use(\"/items\", itemsRouter);\n\nconst port = process.env.PORT;\napp.listen(port,()=> console.log('Server is running on port '$'{port}'))`.trim();\n\nconst students = `\nconst classSchema = new Schema({\n  name: { type: String, unique: true },\n  students: [{ type: 'ObjectId', ref: 'Student' }]\n})\n//students is refress like objectId not data in a class can be many students should be ref name == schemma name\n\nmodule.exports = mongoose.model(\"Class\", classSchema);\n\n\n//studentSchema\nconst studentSchema = new Schema({\n  name: { type: String, unique: true },\n  age: Number,\n  subject: String,\n})\n\nmodule.exports = mongoose.model(\"Student\", studentSchema);\n`.trim();\n\nconst controllersClass = `\nconst Class = require('../models/class');\n\nrouter.all = async (req, res) => {\n    Class.find({}).populate('students').exec((err, docs) => {\n      //populate fields which want to pass\n      if (err) throw (err);\n      res.json(docs)\n    })\n};\n\nrouter.createClass = async (req, res) => {\n    let newClass = new Class();\n    newClass.name = req.body.name;\n    newClass.students = [];\n    newClass.save((err) => {\n      if (err) res.json({ \"error\": err });\n      else res.json(newClass)\n    })\n};\n\nrouter.updateClass = async (req, res) => {\n    Class.findOneAndUpdate({ _id: req.params.id },\n      { $push: { students: req.body.studentsId } }, { new: true }, (err, doc) => {\n        //$push used to push data in students array, we push studentsId\n        if (err) throw (err);\n        else res.json(doc)\n      })\n};`.trim();\n\nconst controllersStudents = `\nconst Student = require('../models/students');\n\nrouter.all = async (req, res) => {\n    Student.find({}).exec((err, docs) => {\n      if (err) throw (err);\n      res.json(docs)\n    })\n};\n\nrouter.createStudent = async (req, res) => {\n    let student = new Student();\n    student.name = req.body.name;\n    student.age = req.body.age;\n    student.subject = req.body.subject;\n    student.save((err) => {\n      if (err) res.json({ \"error\": err });\n      else res.json(student)\n    })\n};\n\nrouter.updateStudent = async (req, res) => {\n    Student.findOneAndUpdate({ _id: req.param.id },\n      { $set: { age: req.body.age } }, { new: true }, (err, doc) => {\n        if (err) throw (err);\n        else res.json(doc)\n      })\n};\n\n// app.put('/students/:id', (req, res) => {\n//   Student.findOneAndUpdate({ _id: req.param.id },\n//     { $set: { age: req.body.age } }, { new: true }, (err, doc) => {\n//       if (err) throw (err);\n//       else res.json(doc)\n//     })\n// })`.trim();\n\nconst classRoutes = `\nconst classCont = require('../controllers/class');\n\nrouter.route(\"/\").get(classCont.all);\nrouter.route(\"/\").post(classCont.createClass);\nrouter.route(\"/:id\").put(classCont.updateClass);\n\n\n//Students Routes\nconst express = require('express');\nconst router = express.Router();\nconst studentsCont = require('../controllers/students');\n\nrouter.route(\"/\").get(studentsCont.all);\nrouter.route(\"/\").post(studentsCont.createStudent);\nrouter.route(\"/:id\").put(studentsCont.updateStudent);\n`.trim();\n\nconst serverJoin = `\nconst classRoutes = require('./routes/classRoutes');\nconst studetsRoutes = require('./routes/studentsRoutes');\n\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\n\ndbCon;\n\napp.use('/class', classRoutes);\napp.use('/students', studetsRoutes);\n\nconst PORT = process.env.PORT;\napp.listen(PORT, () => console.log('Server listening on port.'));`.trim();\n\nconst modelsJoin = `\nconst courseSchema = new mongoose.Schema({\n  _id: Number,\n  name: String,\n  category: String\n});\n\nconst studentSchema = new mongoose.Schema({\n  name: String,\n  enroll: Number,\n  courseId: Number\n});\n\nconst Course = mongoose.model('course', courseSchema);\nconst Student = mongoose.model('student', studentSchema);\n\nmodule.exports = { Student, Course }\n\n\n//ItemsOp\nconst ItemsOp = mongoose.Schema({\n  name: String,\n  date: new Date(),\n  ItemsOps: [{ type: mongoose.Schema.ObjectId, ref: 'itemsOps' }]\n});\n\nmodule.exports = mongoose.model('itemsOp', ItemsOp);\n\n\n//ItemsOps\nconst ItemsOps = mongoose.Schema({\n  name: String,\n  price: Number,\n  ItemsOp: [{ type: mongoose.Schema.ObjectId, ref: 'itemsOp' }]\n});\n\nmodule.exports = mongoose.model('itemsOps', ItemsOps);\n`.trim();\n\nconst controllersFinds = `\nconst { Student, Course } = require('../models/finds');\n\nvar dbcourse = [];\nrouter.all = async (req, res, next) => {\n    Course.find({ category: \"database\" })\n      .then(data => {\n        console.log(\"Database Courses:\", data)\n\n        data.map((d, k) => {\n          dbcourse.push(d._id);\n        })\n\n    Student.find({ courseId: { $in: dbcourse } })\n      .then(data => {\n        console.log(\"Students in Database Courses:\"+ data +\"dbcourse\", dbcourse)\n      })\n      .catch(error => {\n        console.log(error);\n      })\n  })\n};`.trim();\n\nconst controllersItem = `\nconst Item = require('../models/item');\n\nrouter.all = async (req, res, next) => {\n    Item.find()\n      .populate({\n        path: 'itemsOps',\n        populate: { path: 'itemsOps' }\n      })\n      .sort({ date: -1 })\n      .then(items => res.json(items));\n};\n\nrouter.getOne = async (req, res, next) => {\n    Item.findById(req.params.id)\n      .sort({ date: -1 })\n      .then(items => res.json(items));\n};\n\nrouter.creates = async (req, res, next) => {\n    const newItem = new Item({\n      name: req.body.name\n    });\n\n    newItem.save().then(item => res.json(item));\n};\n\nrouter.update = async (req, res, next) => {\n    Item.findByIdAndUpdate(req.params.id, {\n      name: req.body.name,\n    }, { new: true }).then(data => { res.send(data) })\n};\n\nrouter.remove = async (req, res, next) => {\n    Item.findById(req.params.id)\n      .then(item => item.remove().then(() => res.json({ success: true })))\n};`.trim();\n\nconst controllersItemsOp = `\nconst Item = require('../models/itemsOp');\n\nrouter.allsorts = async (req, res, next) => {\n    Item.find()\n      .sort({ price: 1 })\n      .then(items => res.json(items));\n};\n\nrouter.creates = async (req, res, next) => {\n    const newItem = new Item({\n      name: req.body.name,\n      price: req.body.price\n    });\n\n    newItem.save().then(item => res.json(item));\n};\n\n//Limit\nrouter.limits = async (req, res, next) => {\n    Item.find()\n      .limit(2)\n      .then(items => res.json(items));\n};\n\n//filter Regx\nrouter.filtersRegx = async (req, res, next) => {\n  var query = { name: /^C/ };\n  \n    Item.find(query)\n      .then(items => res.json(items));\n};\n\n//filter \nrouter.filters = async (req, res, next) => {\n  var query = { name: \"Mobile\" };\n    Item.find(query)\n      .then(items => res.json(items));\n};\n\n//left join\nrouter.joins = async (req, res, next) => {\n  var query = { name: \"Mobile\" };\n    Item.find(query)\n      .then(items => res.json(items));\n};`.trim();\n\nconst routesJoin = `\nconst itemRoutes = require('../controllers/finds');\nrouter.route(\"/\").get(itemRoutes.all);\n\n\n//itemRoutes\nconst itemRoutes = require('../controllers/item');\n\nrouter.route(\"/\").get(itemRoutes.all);\nrouter.route(\"/:id\").get(itemRoutes.getOne);\nrouter.route(\"/\").post(itemRoutes.creates);\nrouter.route(\"/:id\").patch(itemRoutes.update);\nrouter.route(\"/:id\").delete(itemRoutes.remove);\n\n\n//itemOpRoutes\nconst itemRoutes = require('../controllers/itemsOp');\n\nrouter.route(\"/\").get(itemRoutes.allsorts);\nrouter.route(\"/\").post(itemRoutes.creates);\nrouter.route(\"/lmt\").get(itemRoutes.limits);\nrouter.route(\"/fltrebx\").get(itemRoutes.filtersRegx);\nrouter.route(\"/flt\").get(itemRoutes.filters);\nrouter.route(\"/ljoins\").get(itemRoutes.joins);\n`.trim();\n\nconst serverJoinRef = `\nconst itemsOp = require('./routes/itemsOp');\nconst findsOp = require('./routes/finds');\n\nconst app = express();\n\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\n\ndbCon;\n\napp.use('/itemsOp', itemsOp);\napp.use('/finds', findsOp);\n\nconst port = process.env.PORT;\napp.listen(port, () => console.log('Server listening on port.''));`.trim();\n\n\nclass MongoCurd extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>MongoCurd</h3>\n              <b>config/db.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={config}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>models/items.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={models}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>controllers/items.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={controllers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>routes/items.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={routes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>server.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={server}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <h3>Join</h3>\n              <b>models/class.js</b><br/>\n              <b>models/students.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={students}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>controllers/class.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={controllersClass}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>controllersStudents/students.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={controllersStudents}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>routes/items.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={classRoutes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>server.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={serverJoin}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <h3>Join_Ref</h3>\n              <b>modelsJoin/finds.js</b><br/>\n              <b>modelsJoin/item.js</b><br/>\n              <b>modelsJoin/itemsOp.js</b><br/>\n              <div style={titles}>\n                <PrismCode\n                  code={modelsJoin}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n\n              <b>controllers/finds.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={controllersFinds}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n\n              <b>controllers/item.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={controllersItem}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n\n              <b>controllers/itemsOp.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={controllersItemsOp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n\n              <b>routes/find.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={routesJoin}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n\n              <b>server.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={serverJoinRef}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(MongoCurd));\n"]},"metadata":{},"sourceType":"module"}