{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var dropdownSelect=\"\\n//app.component.ts\\nimport { Component } from '@angular/core';\\nimport { HttpClient } from '@angular/common/http';\\nimport { throwError, of, forkJoin, combineLatest, BehaviorSubject } from 'rxjs';\\nimport { catchError, tap, map, switchMap, filter, first, startWith, delay } from 'rxjs/operators';\\n\\n@Component({\\n  selector: 'my-app',\\n  templateUrl: './app.component.html',\\n  styleUrls: ['./app.component.css']\\n})\\nexport class AppComponent {\\n  name = 'Angular';\\n  todoUrl = 'https://jsonplaceholder.typicode.com/todos';\\n  userUrl = 'https://jsonplaceholder.typicode.com/users';\\n  postUrl = 'https://jsonplaceholder.typicode.com/posts';\\n\\n  // Action stream\\n  private userSelectedSubject = new BehaviorSubject<string>('');\\n  userSelectedAction$ = this.userSelectedSubject.asObservable();\\n\\n  // All Users\\n  users$ = this.http.get<User[]>(this.userUrl)\\n    .pipe(\\n      // tap(data => console.log('users', JSON.stringify(data))),\\n      catchError(err => throwError('Error occurred'))\\n    );\\n\\n  // Gets multiple sets of related data and returns it all as a single object\\n  // Uses an action stream to \\\"pass in\\\" the parameter for the first query.\\n  // Uses forkJoin\\n  dataForUser$ = this.userSelectedAction$\\n    .pipe(\\n      // Handle the case of no selection\\n      filter(userName => Boolean(userName)),\\n      // Get the user given the user name\\n      switchMap(userName => this.http.get<User[]>(''$'{this.userUrl}?username = '$'{userName}')\\n        .pipe(\\n          // The query returns an array of users, we only want the first one\\n          map(users => users[0]),\\n          tap(user => console.log(user)),\\n          switchMap(user =>\\n            // Pull in any related streams\\n            combineLatest([\\n              this.http.get<ToDo[]>(''$'{this.todoUrl}?userId = '$'{user.id} ')\\n                .pipe(startWith([] as ToDo[])),\\n              this.http.get<Post[]>(''$'{this.postUrl}? userId = '$'{user.id}')\\n                .pipe(startWith([] as Post[]))\\n            ])\\n              .pipe(\\n                tap(data => console.log('data', data)),\\n                // Map the data into the desired format for display\\n                map(([todos, posts]) => ({\\n                  name: user.name,\\n                  todos: todos,\\n                  posts: posts\\n                }) as UserData)\\n              )\\n          )\\n        )\\n      )\\n    );\\n\\n  constructor(private http: HttpClient) { }\\n\\n  onSelected(userName: string): void {\\n    this.userSelectedSubject.next(userName);\\n  }\\n}\\n\\nexport interface Post {\\n  userId: number;\\n  id: number;\\n  title: string;\\n  body: string\\n}\\n\\nexport interface ToDo {\\n  userId: number;\\n  id: number;\\n  title: string;\\n  completed: boolean;\\n}\\n\\nexport interface User {\\n  id: number;\\n  name: string;\\n  username: string;\\n  email?: string;\\n  website?: string;\\n}\\n\\nexport interface UserData {\\n  name: string;\\n  posts: Post[];\\n  todos: ToDo[];\\n}\\n\\n\\n//app.module.ts\\nimport { NgModule, Injectable } from '@angular/core';\\nimport { BrowserModule } from '@angular/platform-browser';\\nimport { FormsModule } from '@angular/forms';\\nimport { HttpClientModule, HTTP_INTERCEPTORS, HttpHeaders, HttpInterceptor, HttpRequest, HttpHandler, HttpEvent,\\n   HttpEventType } from '@angular/common/http';\\n\\nimport { AppComponent } from './app.component';\\n\\nimport { timer, Observable } from 'rxjs';\\nimport { tap, delay, switchMap } from 'rxjs/operators';\\n\\n\\n@Injectable()\\nexport class PreRequestDelayInterceptor implements HttpInterceptor {\\n  static count = -2;\\n\\n  constructor() { }\\n\\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\\n    const timerDelay = timer(5);\\n    const start = Date.now();\\n\\n    // Gradually increase the delay\\n    PreRequestDelayInterceptor.count = PreRequestDelayInterceptor.count > 6 ? 0 : PreRequestDelayInterceptor.count + 2;\\n\\n    return timerDelay\\n      .pipe(\\n        delay(1000 * PreRequestDelayInterceptor.count),\\n        switchMap(() => next.handle(req)),\\n        tap(event => {\\n          if (event.type == HttpEventType.Response) {\\n            const elapsed = Date.now()-start;\\n            console.log('Request for '$'{req.urlWithParams} took '$'{elapsed} ms.');\\n          }\\n        }));\\n  }\\n}\\n\\n@NgModule({\\n  imports: [BrowserModule, FormsModule,\\n    HttpClientModule],\\n  declarations: [AppComponent],\\n  providers: [\\n    { provide: HTTP_INTERCEPTORS, useClass: PreRequestDelayInterceptor, multi: true }\\n  ],\\n  bootstrap: [AppComponent]\\n})\\nexport class AppModule { }\\n\\n\\n//app.component.html\\n<div *ngIf='users$ | async as users'>\\n\\t<select (change)=\\\"onSelected($event.target.value)\\\">\\n    <option value=\\\"\\\">--Select a user--</option>\\n    <option *ngFor=\\\"let user of users\\\"\\n            [value]=\\\"user.username\\\">{{ user.name }}</option>\\n  </select>\\n</div>\\n\\n<div *ngIf='dataForUser$ | async as data'>\\n\\t<h2>Data for: {{data.name}}</h2>\\n\\t<table *ngIf=\\\"data.todos\\\">\\n\\t\\t<thead>\\n\\t\\t\\t<tr>\\n\\t\\t\\t\\t<th>User</th>\\n\\t\\t\\t\\t<th>Title</th>\\n\\t\\t\\t\\t<th>Completed?</th>\\n\\t\\t\\t</tr>\\n\\t\\t</thead>\\n\\t\\t<tbody *ngFor=\\\"let todo of data.todos\\\">\\n\\t\\t\\t<tr>\\n\\t\\t\\t\\t<td>{{todo.userId}}</td>\\n\\t\\t\\t\\t<td>{{todo.title}}</td>\\n\\t\\t\\t\\t<td>{{todo.completed}}</td>\\n\\t\\t\\t</tr>\\n\\t\\t</tbody>\\n\\t</table>\\n\\t<p></p>\\n\\t<table *ngIf=\\\"data.posts\\\">\\n\\t\\t<thead>\\n\\t\\t\\t<tr>\\n\\t\\t\\t\\t<th>User</th>\\n\\t\\t\\t\\t<th>Title</th>\\n\\t\\t\\t\\t<th>Body</th>\\n\\t\\t\\t</tr>\\n\\t\\t</thead>\\n\\t\\t<tbody *ngFor=\\\"let post of data.posts\\\">\\n\\t\\t\\t<tr>\\n\\t\\t\\t\\t<td>{{post.userId}}</td>\\n\\t\\t\\t\\t<td>{{post.title}}</td>\\n\\t\\t\\t\\t<td>{{post.body}}</td>\\n\\t\\t\\t</tr>\\n\\t\\t</tbody>\\n\\t</table>\\n</div>\\n\".trim();var dropdowns=\"\\nimport { Component } from '@angular/core';\\nimport { HttpClient } from '@angular/common/http';\\n\\n@Component({\\n  selector: 'app-root',\\n  template: '\\n    <div *ngFor=\\\"let hero of heroes\\\" (click)=\\\"onSelect(hero)\\\">\\n      {{hero.id}}\\n      {{hero.name}}\\n    </div >\\n\\n  <div *ngIf=\\\"selectedHero\\\">\\n    <h2>{{selectedHero.name | uppercase}}</h2>\\n      id: {{selectedHero.id}}\\n      name: {{selectedHero.name}}\\n    </div >',\\n  })\\n\\nexport class AppComponent {\\n  constructor(private http: HttpClient){}\\n\\n  heroes:any=[]\\n  ngOnInit(){\\n    this.http.get('https://jsonplaceholder.typicode.com/users')\\n        .subscribe(val=>{\\n            this.heroes = val\\n        })\\n      }\\n\\n  selectedHero?;\\n  onSelect(hero):void {\\n     this.selectedHero = hero\\n  }\\n}\\n\\n\".trim();var DropDownAngular=/*#__PURE__*/function(_Component){_inherits(DropDownAngular,_Component);function DropDownAngular(){_classCallCheck(this,DropDownAngular);return _possibleConstructorReturn(this,_getPrototypeOf(DropDownAngular).apply(this,arguments));}_createClass(DropDownAngular,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Pick a data from list\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:dropdowns,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"On dropdown select data\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:dropdownSelect,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return DropDownAngular;}(Component);export default withStyles(styles)(DropDownAngular);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/dropdownsAngu.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","dropdownSelect","trim","dropdowns","DropDownAngular","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,0BAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CAGA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,eAAe,CAAE,SAAnB,CAA8BC,OAAO,CAAE,KAAvC,CAA8CC,QAAQ,CAAE,MAAxD,CAAf,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,KAAK,CAAE,CACLC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH,CAELN,OAAO,CAAEG,KAAK,CAACG,OAAN,CAAc,CAAd,CAFJ,CADgB,CAKvBC,QAAQ,CAAE,CACRF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA,CALa,CAQvBE,SAAS,CAAE,CACTC,SAAS,CAAE,QADF,CARY,CAAL,EAApB,CAcA,GAAMC,CAAAA,cAAc,CAAG,6jLAoMrBC,IApMqB,EAAvB,CAsMA,GAAMC,CAAAA,SAAS,CAAG,ixBAoChBD,IApCgB,EAAlB,C,GAuCME,CAAAA,e,mUACgB,CAClBC,UAAU,CAAC,iBAAMvB,CAAAA,KAAK,CAACwB,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAACZ,KAA1B,EACE,8BAAI,oBAAC,OAAD,MAAJ,CADF,CADF,CADF,CAME,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEY,OAAO,CAACZ,KAA1B,EACE,oBAAC,IAAD,MACE,sDADF,CAEE,2BAAK,KAAK,CAAEN,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEc,SADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAFF,CASE,8BATF,CAWE,wDAXF,CAYE,2BAAK,KAAK,CAAEd,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEY,cADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAZF,CADF,CADF,CANF,CADF,CAiCD,C,6BAvC2BpB,S,EA0C9B,cAAgBI,CAAAA,UAAU,CAACQ,MAAD,CAAV,CAAmBW,eAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst dropdownSelect = `\n//app.component.ts\nimport { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { throwError, of, forkJoin, combineLatest, BehaviorSubject } from 'rxjs';\nimport { catchError, tap, map, switchMap, filter, first, startWith, delay } from 'rxjs/operators';\n\n@Component({\n  selector: 'my-app',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  name = 'Angular';\n  todoUrl = 'https://jsonplaceholder.typicode.com/todos';\n  userUrl = 'https://jsonplaceholder.typicode.com/users';\n  postUrl = 'https://jsonplaceholder.typicode.com/posts';\n\n  // Action stream\n  private userSelectedSubject = new BehaviorSubject<string>('');\n  userSelectedAction$ = this.userSelectedSubject.asObservable();\n\n  // All Users\n  users$ = this.http.get<User[]>(this.userUrl)\n    .pipe(\n      // tap(data => console.log('users', JSON.stringify(data))),\n      catchError(err => throwError('Error occurred'))\n    );\n\n  // Gets multiple sets of related data and returns it all as a single object\n  // Uses an action stream to \"pass in\" the parameter for the first query.\n  // Uses forkJoin\n  dataForUser$ = this.userSelectedAction$\n    .pipe(\n      // Handle the case of no selection\n      filter(userName => Boolean(userName)),\n      // Get the user given the user name\n      switchMap(userName => this.http.get<User[]>(''$'{this.userUrl}?username = '$'{userName}')\n        .pipe(\n          // The query returns an array of users, we only want the first one\n          map(users => users[0]),\n          tap(user => console.log(user)),\n          switchMap(user =>\n            // Pull in any related streams\n            combineLatest([\n              this.http.get<ToDo[]>(''$'{this.todoUrl}?userId = '$'{user.id} ')\n                .pipe(startWith([] as ToDo[])),\n              this.http.get<Post[]>(''$'{this.postUrl}? userId = '$'{user.id}')\n                .pipe(startWith([] as Post[]))\n            ])\n              .pipe(\n                tap(data => console.log('data', data)),\n                // Map the data into the desired format for display\n                map(([todos, posts]) => ({\n                  name: user.name,\n                  todos: todos,\n                  posts: posts\n                }) as UserData)\n              )\n          )\n        )\n      )\n    );\n\n  constructor(private http: HttpClient) { }\n\n  onSelected(userName: string): void {\n    this.userSelectedSubject.next(userName);\n  }\n}\n\nexport interface Post {\n  userId: number;\n  id: number;\n  title: string;\n  body: string\n}\n\nexport interface ToDo {\n  userId: number;\n  id: number;\n  title: string;\n  completed: boolean;\n}\n\nexport interface User {\n  id: number;\n  name: string;\n  username: string;\n  email?: string;\n  website?: string;\n}\n\nexport interface UserData {\n  name: string;\n  posts: Post[];\n  todos: ToDo[];\n}\n\n\n//app.module.ts\nimport { NgModule, Injectable } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule, HTTP_INTERCEPTORS, HttpHeaders, HttpInterceptor, HttpRequest, HttpHandler, HttpEvent,\n   HttpEventType } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\n\nimport { timer, Observable } from 'rxjs';\nimport { tap, delay, switchMap } from 'rxjs/operators';\n\n\n@Injectable()\nexport class PreRequestDelayInterceptor implements HttpInterceptor {\n  static count = -2;\n\n  constructor() { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const timerDelay = timer(5);\n    const start = Date.now();\n\n    // Gradually increase the delay\n    PreRequestDelayInterceptor.count = PreRequestDelayInterceptor.count > 6 ? 0 : PreRequestDelayInterceptor.count + 2;\n\n    return timerDelay\n      .pipe(\n        delay(1000 * PreRequestDelayInterceptor.count),\n        switchMap(() => next.handle(req)),\n        tap(event => {\n          if (event.type == HttpEventType.Response) {\n            const elapsed = Date.now()-start;\n            console.log('Request for '$'{req.urlWithParams} took '$'{elapsed} ms.');\n          }\n        }));\n  }\n}\n\n@NgModule({\n  imports: [BrowserModule, FormsModule,\n    HttpClientModule],\n  declarations: [AppComponent],\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: PreRequestDelayInterceptor, multi: true }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n//app.component.html\n<div *ngIf='users$ | async as users'>\n\t<select (change)=\"onSelected($event.target.value)\">\n    <option value=\"\">--Select a user--</option>\n    <option *ngFor=\"let user of users\"\n            [value]=\"user.username\">{{ user.name }}</option>\n  </select>\n</div>\n\n<div *ngIf='dataForUser$ | async as data'>\n\t<h2>Data for: {{data.name}}</h2>\n\t<table *ngIf=\"data.todos\">\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th>User</th>\n\t\t\t\t<th>Title</th>\n\t\t\t\t<th>Completed?</th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody *ngFor=\"let todo of data.todos\">\n\t\t\t<tr>\n\t\t\t\t<td>{{todo.userId}}</td>\n\t\t\t\t<td>{{todo.title}}</td>\n\t\t\t\t<td>{{todo.completed}}</td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n\t<p></p>\n\t<table *ngIf=\"data.posts\">\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th>User</th>\n\t\t\t\t<th>Title</th>\n\t\t\t\t<th>Body</th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody *ngFor=\"let post of data.posts\">\n\t\t\t<tr>\n\t\t\t\t<td>{{post.userId}}</td>\n\t\t\t\t<td>{{post.title}}</td>\n\t\t\t\t<td>{{post.body}}</td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n</div>\n`.trim();\n\nconst dropdowns = `\nimport { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-root',\n  template: '\n    <div *ngFor=\"let hero of heroes\" (click)=\"onSelect(hero)\">\n      {{hero.id}}\n      {{hero.name}}\n    </div >\n\n  <div *ngIf=\"selectedHero\">\n    <h2>{{selectedHero.name | uppercase}}</h2>\n      id: {{selectedHero.id}}\n      name: {{selectedHero.name}}\n    </div >',\n  })\n\nexport class AppComponent {\n  constructor(private http: HttpClient){}\n\n  heroes:any=[]\n  ngOnInit(){\n    this.http.get('https://jsonplaceholder.typicode.com/users')\n        .subscribe(val=>{\n            this.heroes = val\n        })\n      }\n\n  selectedHero?;\n  onSelect(hero):void {\n     this.selectedHero = hero\n  }\n}\n\n`.trim();\n\n\nclass DropDownAngular extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Pick a data from list</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={dropdowns}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>On dropdown select data</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={dropdownSelect}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DropDownAngular));\n"]},"metadata":{},"sourceType":"module"}