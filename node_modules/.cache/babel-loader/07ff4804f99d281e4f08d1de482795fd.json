{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var components=\"\\n//components/AppNavbar.js\\nclass AppNavbar extends Component {\\n  editItem = () => {\\n    this.props.editItem(this.props.children);\\n  }\\n\\n  deleteItem = () => {\\n    this.props.deleteCat(this.props.children);\\n  }\\n\\n  render() {\\n    const { children: cat } = this.props;\\n    return (\\n        <div>\\n            <p>{cat.name}</p>\\n            <button onClick={this.editItem}>Edit</button>\\n            <button onClick={this.deleteItem}>Delete</button>\\n        </div>\\n    );\\n  }\\n}\\n\\n\\n//components/itemEdit.js\\nimport { Modal } from 'reactstrap';\\n\\nclass ItemsEdit extends Component {\\n  state= {\\n      modal: false,\\n      item: {}\\n    };\\n\\n  componentWillMount() {\\n    this.setState({\\n      modal: this.props.modal,\\n      item: this.props.catEdit\\n    });\\n  }\\n\\n  componentWillReceiveProps(nextProps) {\\n    this.setState({\\n      modal: nextProps.modal,\\n    });\\n  }\\n\\n  toggle = () => {\\n    this.props.toggleModal(!this.state.modal);\\n  }\\n\\n  save = () => {\\n    this.props.toggleModal(!this.state.modal);\\n\\n    const { item } = this.state;\\n    this.props.editItem(item);\\n  }\\n\\n  handleChange = (e) => {\\n    const { name, value } = e.target;\\n    const { item } = this.state;\\n    const newItem = {...item};\\n    newItem[name] = value;\\n\\n    this.setState({\\n        [name]: value,\\n        item: newItem\\n      });\\n  }\\n\\n  render() {\\n    const { item } = this.state;\\n    const closeBtn = <button onClick={this.toggle}>&times;</button>;\\n    return (\\n      <div>\\n        <button onClick={this.toggle}>{this.props.buttonLabel}</button>\\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\\n          <h3 toggle={this.toggle} close={closeBtn}>Edit Item</h3>\\n            <form>\\n                <label for=\\\"name\\\">Name</label>\\n                <input type=\\\"text\\\" name=\\\"name\\\" id=\\\"name\\\" value={item.name} onChange={this.handleChange} />\\n            </form>\\n            <button onClick={this.save}>Save</button>{' '}\\n            <button onClick={this.toggle}>Cancel</button>\\n        </Modal>\\n      </div>\\n    );\\n  }\\n}\\n\\n\\n//components/ItemModal.js\\nimport { Modal } from 'reactstrap';\\n\\nclass ItemModal extends React.Component {\\n  state = {\\n      modal: false,\\n      name: ''    \\n    };\\n\\n  componentWillMount() {\\n    this.setState({\\n      modal: this.props.modal\\n    });\\n  }\\n\\n  componentWillReceiveProps(nextProps) {\\n    this.setState({\\n      modal: nextProps.modal\\n    });\\n  }\\n\\n  toggle = () => {\\n    this.props.toggleModal(!this.state.modal);\\n  }\\n  onSubmit = e => {\\n    e.preventDefault();\\n    const newItem = {\\n      name: this.state.name\\n    };\\n    \\n    // Add item via addItem action\\n    this.props.addItem(newItem);\\n    \\n    // Close modal\\n    this.toggle();\\n  };\\n  \\n  \\n  onChange = (e) => {\\n    const { name, value } = e.target;\\n    this.setState({ [name]: value });\\n      }\\n\\n  render() {\\n    const closeBtn = <button onClick={this.toggle}>&times;</button>;\\n    return (\\n      <div>\\n        <button onClick={this.toggle}>{this.props.buttonLabel}</button>\\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\\n          <h2 toggle={this.toggle} close={closeBtn}>New Item</h2>\\n                <form onSubmit={this.onSubmit}>\\n                <input type='text' name='name' id='item'  onChange={this.onChange} />\\n                <button color='dark' block>Add Item</button>\\n                \\n                <button>Save</button>{' '}\\n                <button>Cancel</button>\\n            </form>\\n        </Modal>\\n      </div>\\n    );\\n  }\\n}\\n\\n\\n//components/shoppingList.js\\nimport { Container, Row, Button } from 'reactstrap';\\n\\nimport AppNavbar from './AppNavbar';\\nimport ItemModal from './ItemModal';\\nimport ItemsEdit from './itemEdit';\\n\\nclass ShoppingList extends Component {\\n  state = {\\n        items: [],\\n      \\tcatEdit: {},\\n      \\tcreateModal: false,\\n      \\teditModal: false\\n      }\\n\\n  componentDidMount() {\\n      document.title = 'Items | Simple MERN Stack';\\n\\n      axios.get('/item')\\n           .then(res => this.setState({\\n            items: res.data})\\n            )\\n            .catch(() => \\n            console.log('error')\\n         ); \\n      }\\n\\n  handleCreateModal = () => {\\n    this.setState({\\n      createModal: true\\n    });\\n  }\\n\\n  handleShowModal = (item) => {\\n    this.setState({\\n      catEdit: {...item},\\n      editModal: true\\n    });\\n\\t}\\n\\n  handleCreateModal = (value) => {\\n\\t\\tthis.setState({\\n\\t\\t\\tcreateModal: value\\n\\t\\t});\\n\\t}\\n\\n  handleEditModal = (value) => {\\n    this.setState({\\n      editModal: value\\n    });\\n  }\\n\\n  handleCreateItem = (item) => {\\n    const { name, color, image } = item;\\n    axios.post('/item', {\\n      name, color, image\\n    })\\n    .then(() => {\\n      const { items } = this.state;\\n      this.setState({\\n      items: [...items, {...item}]\\n    });\\n  })\\n  .catch(() => \\n  console.log('error')\\n  );\\n  }\\n\\n  handleEditCat = (item) => {\\n      const { _id, name, color, image } = item;\\n      axios.put(/item/'$'{_id}, {\\n      name, color, image\\n    })      \\n    .then(() => {\\n    const { items } = this.state;\\n    const index = this.findIndex(items, item);\\n      this.setState({\\n      items: [...items.slice(0, index), {...item}, ...items.slice(index + 1)]\\n    });\\n  })\\n  .catch(() => \\n  console.log('error')\\n  );\\n  }\\n\\n  handleDeleteItem = (item) => {\\n          axios.delete(/item/'$'{item._id})\\n          .then(() => {\\n            const { items } = this.state;\\n            const index = this.findIndex(items, item);\\n              this.setState({\\n              items: [...items.slice(0, index), ...items.slice(index + 1)]\\n        });\\n      })\\n      .catch(() => \\n      console.log('error')\\n    );\\n  }\\n\\n\\n  findIndex(items, item) {\\n    let result = -1;\\n    items.forEach((item, index) => {\\n      if (item._id === item._id) {\\n      result = index;\\n      }\\n   });\\n  return result;\\n  }\\n\\n      render() {\\n        const { items, catEdit, createModal, editModal } = this.state;\\n          return (\\n            <Container>\\n              <Button onClick={this.handleCreateModal}> New item </Button>\\n                  <Row>\\n                    { items.map((item, index) => \\n                      <AppNavbar \\n                        key={index} \\n                        editItem={this.handleShowModal}\\n                        deleteCat={this.handleDeleteItem}\\n                      >\\n                        {item}\\n                      </AppNavbar>\\n                    )}\\n                  </Row>\\n                  { createModal ? \\n                  <ItemModal\\n                    modal={createModal} \\n                    toggleModal={this.handleCreateModal}\\n                    addItem={this.handleCreateItem}\\n                  /> : null }\\n                {\\n                  editModal ? \\n                  <ItemsEdit\\n                    modal={editModal}\\n                    catEdit={catEdit}\\n                    toggleModal={this.handleEditModal}\\n                    editItem={this.handleEditCat}\\n                  />  : null }\\n                </Container>\\n            );\\n        }\\n    }\\n    \\n    \\n    \\n //App.js\\n import ShoppingList from './components/shoppingList';\\n\\nclass App extends Component {\\n    render() {\\n      return (\\n        <Router>\\n          <Route exact path=\\\"/\\\" component={ShoppingList} />\\n        </Router>\\n      );\\n    }\\n  }\\n\\nexport default App;\".trim();var MernReactCurd=/*#__PURE__*/function(_Component){_inherits(MernReactCurd,_Component);function MernReactCurd(){_classCallCheck(this,MernReactCurd);return _possibleConstructorReturn(this,_getPrototypeOf(MernReactCurd).apply(this,arguments));}_createClass(MernReactCurd,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Components\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:components,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return MernReactCurd;}(Component);export default withStyles(styles)(MernReactCurd);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/mern/projects/3_reactCurdMern.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","components","trim","MernReactCurd","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,0BAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CAGA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,eAAe,CAAE,SAAnB,CAA8BC,OAAO,CAAE,KAAvC,CAA8CC,QAAQ,CAAE,MAAxD,CAAf,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,KAAK,CAAE,CACLC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH,CAELN,OAAO,CAAEG,KAAK,CAACG,OAAN,CAAc,CAAd,CAFJ,CADgB,CAKvBC,QAAQ,CAAE,CACRF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA,CALa,CAQvBE,SAAS,CAAE,CACTC,SAAS,CAAE,QADF,CARY,CAAL,EAApB,CAcA,GAAMC,CAAAA,UAAU,CAAG,g0OA0TEC,IA1TF,EAAnB,C,GA6TMC,CAAAA,a,yTACgB,CAClBC,UAAU,CAAC,iBAAMtB,CAAAA,KAAK,CAACuB,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAACX,KAA1B,EACE,8BAAI,oBAAC,OAAD,MAAJ,CADF,CADF,CADF,CAME,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEW,OAAO,CAACX,KAA1B,EACE,oBAAC,IAAD,MACE,2CADF,CAEE,2BAAK,KAAK,CAAEN,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEY,UADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAFF,CADF,CADF,CANF,CADF,CAuBD,C,2BA7ByBpB,S,EAgC5B,cAAgBI,CAAAA,UAAU,CAACQ,MAAD,CAAV,CAAmBU,aAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst components = `\n//components/AppNavbar.js\nclass AppNavbar extends Component {\n  editItem = () => {\n    this.props.editItem(this.props.children);\n  }\n\n  deleteItem = () => {\n    this.props.deleteCat(this.props.children);\n  }\n\n  render() {\n    const { children: cat } = this.props;\n    return (\n        <div>\n            <p>{cat.name}</p>\n            <button onClick={this.editItem}>Edit</button>\n            <button onClick={this.deleteItem}>Delete</button>\n        </div>\n    );\n  }\n}\n\n\n//components/itemEdit.js\nimport { Modal } from 'reactstrap';\n\nclass ItemsEdit extends Component {\n  state= {\n      modal: false,\n      item: {}\n    };\n\n  componentWillMount() {\n    this.setState({\n      modal: this.props.modal,\n      item: this.props.catEdit\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      modal: nextProps.modal,\n    });\n  }\n\n  toggle = () => {\n    this.props.toggleModal(!this.state.modal);\n  }\n\n  save = () => {\n    this.props.toggleModal(!this.state.modal);\n\n    const { item } = this.state;\n    this.props.editItem(item);\n  }\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    const { item } = this.state;\n    const newItem = {...item};\n    newItem[name] = value;\n\n    this.setState({\n        [name]: value,\n        item: newItem\n      });\n  }\n\n  render() {\n    const { item } = this.state;\n    const closeBtn = <button onClick={this.toggle}>&times;</button>;\n    return (\n      <div>\n        <button onClick={this.toggle}>{this.props.buttonLabel}</button>\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\n          <h3 toggle={this.toggle} close={closeBtn}>Edit Item</h3>\n            <form>\n                <label for=\"name\">Name</label>\n                <input type=\"text\" name=\"name\" id=\"name\" value={item.name} onChange={this.handleChange} />\n            </form>\n            <button onClick={this.save}>Save</button>{' '}\n            <button onClick={this.toggle}>Cancel</button>\n        </Modal>\n      </div>\n    );\n  }\n}\n\n\n//components/ItemModal.js\nimport { Modal } from 'reactstrap';\n\nclass ItemModal extends React.Component {\n  state = {\n      modal: false,\n      name: ''    \n    };\n\n  componentWillMount() {\n    this.setState({\n      modal: this.props.modal\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      modal: nextProps.modal\n    });\n  }\n\n  toggle = () => {\n    this.props.toggleModal(!this.state.modal);\n  }\n  onSubmit = e => {\n    e.preventDefault();\n    const newItem = {\n      name: this.state.name\n    };\n    \n    // Add item via addItem action\n    this.props.addItem(newItem);\n    \n    // Close modal\n    this.toggle();\n  };\n  \n  \n  onChange = (e) => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n      }\n\n  render() {\n    const closeBtn = <button onClick={this.toggle}>&times;</button>;\n    return (\n      <div>\n        <button onClick={this.toggle}>{this.props.buttonLabel}</button>\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\n          <h2 toggle={this.toggle} close={closeBtn}>New Item</h2>\n                <form onSubmit={this.onSubmit}>\n                <input type='text' name='name' id='item'  onChange={this.onChange} />\n                <button color='dark' block>Add Item</button>\n                \n                <button>Save</button>{' '}\n                <button>Cancel</button>\n            </form>\n        </Modal>\n      </div>\n    );\n  }\n}\n\n\n//components/shoppingList.js\nimport { Container, Row, Button } from 'reactstrap';\n\nimport AppNavbar from './AppNavbar';\nimport ItemModal from './ItemModal';\nimport ItemsEdit from './itemEdit';\n\nclass ShoppingList extends Component {\n  state = {\n        items: [],\n      \tcatEdit: {},\n      \tcreateModal: false,\n      \teditModal: false\n      }\n\n  componentDidMount() {\n      document.title = 'Items | Simple MERN Stack';\n\n      axios.get('/item')\n           .then(res => this.setState({\n            items: res.data})\n            )\n            .catch(() => \n            console.log('error')\n         ); \n      }\n\n  handleCreateModal = () => {\n    this.setState({\n      createModal: true\n    });\n  }\n\n  handleShowModal = (item) => {\n    this.setState({\n      catEdit: {...item},\n      editModal: true\n    });\n\t}\n\n  handleCreateModal = (value) => {\n\t\tthis.setState({\n\t\t\tcreateModal: value\n\t\t});\n\t}\n\n  handleEditModal = (value) => {\n    this.setState({\n      editModal: value\n    });\n  }\n\n  handleCreateItem = (item) => {\n    const { name, color, image } = item;\n    axios.post('/item', {\n      name, color, image\n    })\n    .then(() => {\n      const { items } = this.state;\n      this.setState({\n      items: [...items, {...item}]\n    });\n  })\n  .catch(() => \n  console.log('error')\n  );\n  }\n\n  handleEditCat = (item) => {\n      const { _id, name, color, image } = item;\n      axios.put(/item/'$'{_id}, {\n      name, color, image\n    })      \n    .then(() => {\n    const { items } = this.state;\n    const index = this.findIndex(items, item);\n      this.setState({\n      items: [...items.slice(0, index), {...item}, ...items.slice(index + 1)]\n    });\n  })\n  .catch(() => \n  console.log('error')\n  );\n  }\n\n  handleDeleteItem = (item) => {\n          axios.delete(/item/'$'{item._id})\n          .then(() => {\n            const { items } = this.state;\n            const index = this.findIndex(items, item);\n              this.setState({\n              items: [...items.slice(0, index), ...items.slice(index + 1)]\n        });\n      })\n      .catch(() => \n      console.log('error')\n    );\n  }\n\n\n  findIndex(items, item) {\n    let result = -1;\n    items.forEach((item, index) => {\n      if (item._id === item._id) {\n      result = index;\n      }\n   });\n  return result;\n  }\n\n      render() {\n        const { items, catEdit, createModal, editModal } = this.state;\n          return (\n            <Container>\n              <Button onClick={this.handleCreateModal}> New item </Button>\n                  <Row>\n                    { items.map((item, index) => \n                      <AppNavbar \n                        key={index} \n                        editItem={this.handleShowModal}\n                        deleteCat={this.handleDeleteItem}\n                      >\n                        {item}\n                      </AppNavbar>\n                    )}\n                  </Row>\n                  { createModal ? \n                  <ItemModal\n                    modal={createModal} \n                    toggleModal={this.handleCreateModal}\n                    addItem={this.handleCreateItem}\n                  /> : null }\n                {\n                  editModal ? \n                  <ItemsEdit\n                    modal={editModal}\n                    catEdit={catEdit}\n                    toggleModal={this.handleEditModal}\n                    editItem={this.handleEditCat}\n                  />  : null }\n                </Container>\n            );\n        }\n    }\n    \n    \n    \n //App.js\n import ShoppingList from './components/shoppingList';\n\nclass App extends Component {\n    render() {\n      return (\n        <Router>\n          <Route exact path=\"/\" component={ShoppingList} />\n        </Router>\n      );\n    }\n  }\n\nexport default App;`.trim();\n\n\nclass MernReactCurd extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Components</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={components}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(MernReactCurd));\n"]},"metadata":{},"sourceType":"module"}