{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/javaScripts/deepJs/findOutput.js\";\nimport React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\nconst titles = {\n  backgroundColor: \"#F0F8FF\",\n  padding: \"1px\",\n  fontSize: \"16px\"\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst deletes = `\nvar output = (function(x) {\n delete x;\n return x;\n})(0);\n\nconsole.log(output);\n`.trim();\nconst objCreate = `\nvar Employee = {\n  company: 'xyz'\n}\n\nvar emp1 = Object.create(Employee);\nconsole.log(emp1.company);\n\ndelete emp1.company\nconsole.log('After', emp1.company);\n `.trim();\nconst code = `(function(){\n  var a = b = 3;\n })();\n \n console.log(\"a defined? \" + (typeof a !== 'undefined'));                                         //False\n console.log(\"b defined? \" + (typeof b !== 'undefined'));                                         //True\n `.trim();\nconst code_2 = `function foo1(){\n  return {\n  bar: \"hello\"\n  };\n }\n \n function foo2(){\n  return\n  {\n  bar: \"hello\"\n  };\n }\n \n console.log(\"foo1 returns:\",foo1());\n console.log(\"foo2 returns:\",foo2());`.trim();\nconst code_4 = `function sum(x, y) {\n  if (y !== undefined) {\n  return x + y;\n  } else {\n  return function(y) { return x + y; };\n  }\n }\n \n console.log(sum(2,3));\n console.log(sum(2)(3));`.trim();\nconst code_5 = `var list = readHugeList();\nvar nextListItem = function() {\n var item = list.pop();\n \n if (item) {\n // process the list item...\n nextListItem();\n }\n};`.trim();\nconst code_6 = `\n//1\nfor (let i = 0; i < 3; i++) {\n  setTimeout(() => {\n    console.log(i);\n  }, 1000);\n}\n\n\n//2\nfor (var i = 0; i < 3; i++) {\n  setTimeout(() => {\n    console.log(i);\n  }, 1000);\n}\n`.trim();\nconst code_7 = `\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.splice(2, 0, \"Lemon\", \"Kiwi\");\nconsole.log(fruits)`.trim();\nconst code_8 = `var a={},\nb={key:'b'},\nc={key:'c'};\n  a[b]=123;\n  a[c]=456;\n  \nconsole.log(a[b]);`.trim();\nconst code_9 = `console.log((function f(n){return ((n > 1) ? n * f(n-1) : n)})(10));`.trim();\nconst accidental = `\nfunction foo() {\n  let a = b = 0;\n  a++;\n  return a;\n}\n\nfoo();\nconsole.log(typeof a);\nconsole.log(typeof b);\n\n\nlet a = b = 0;                               //declares a is local variable and b is global variable.\n`.trim();\nconst arrlength = `\nconst clothes = ['jacket', 't-shirt'];\nclothes.length = 0;\n\nconsole.log(clothes[0]);                                           //undefined\n`.trim();\nconst eyetest = `\nconst length = 4;\nconst numbers = [];\nfor (var i = 0; i < length; i++); {\n  numbers.push(i + 1);\n}\n\nconsole.log(numbers);\n`.trim();\nconst clousers = `\nlet i;\nfor (i = 0; i < 3; i++) {\n  const log = () => {\n    console.log(i);\n  }\n  setTimeout(log, 100);\n}`.trim();\nconst happense = `\nconsole.log(myVar);\nconsole.log(myConst);\n\nvar myVar = 'value';\nconst myConst = 3.14;`.trim();\nconst code_16 = `\nvar myObject = {\n  foo: \"bar\",\n  func: function () {\n    var self = this;\n    console.log(\"outer func\" + this.foo);\n    console.log(\"outer func\" + self.foo);\n    \n    (function () {\n      console.log(\"inner func\" + this.foo);\n      console.log(\"inner func\" + self.foo);\n    }());\n  }\n};\nmyObject.func();\n`.trim();\nconst CheckArr = `\nvar v1 = { name: \"John\", age: 18 };\nvar v2 = [\"red\", \"green\", \"blue\", \"yellow\"];\n\nconsole.log(Array.isArray(v1));                                                                     // false\nconsole.log(Array.isArray(v2));                                                                     // true\n`.trim();\nconst commonEl = `\nconst arr = [1, 2, 3, 3, 2];\nconst count = {};\n\narr.forEach(el => {\n  count[el] = count[el] ? (count[el] += 1) : 1\n})\n\nconsole.log(count)`.trim();\nconst hasOwnProperty = `\nfunction unique(arr) {\n  var count = {};\n  return arr.filter((item) => {\n    return count.hasOwnProperty(item) ? false : (count[item] = true);\n  });\n}\n\nconsole.log(unique([2, 3, 4, 3, 2, 5]));`.trim();\nconst groupEl = `\nvar people = [\n  { sex: \"Male\", name: \"Jeff\" },\n  { sex: \"Female\", name: \"Megan\" },\n  { sex: \"Male\", name: \"Taylor\" },\n  { sex: \"Female\", name: \"Madison\" }\n];\n\nfunction groupBy(list, key) {\n  return list.reduce((data, val) => {\n    (data[val[key]] = data[val[key]] || []).push(val);\n    return data;\n  }, {});\n};\n\nvar groupedPeople = groupBy(people, \"sex\");\nconsole.log(groupedPeople.Male);\nconsole.log(groupedPeople.Female);`.trim();\nconst duplicateEl = `\nvar arr = [1, 2, 3];\narr = arr.concat(arr);\n\nconsole.log(arr)`.trim();\nconst removeEl = `\nvar arr = [1, 2, 3, 4, 5, 3]\nvar value = 2\n\narr = arr.filter((item) => {\n  return item !== value\n})\n\nconsole.log(arr)`.trim();\nconst deletePro = `\nvar obj = {\n  name: \"Mukesh\",\n  Address: \"India\",\n  pincode: 201306\n};\n\ndelete obj.name;\n\nconsole.log(obj);`.trim();\nconst specificEl = `\nvar arr = [1, 2, 3, 4, 5];\n\narr.splice(2, 0, 7);\nconsole.log(arr.join());`.trim();\nconst Checking = `\nconst car = {\n  color: 'blue'\n}\n\nobj = car.hasOwnProperty('color')\nconsole.log(obj)`.trim();\nconst findOutput = `\nconsole.log(1 + \"2\" + \"2\");\nconsole.log(1 + +\"2\" + \"2\");\nconsole.log(1 + -\"1\" + \"2\");\nconsole.log(+\"1\" + \"1\" + \"2\");\nconsole.log(\"A\" - \"B\" + \"2\");\nconsole.log(\"A\" - \"B\" + 2);`.trim();\nconst findOutput2 = `\nconsole.log(\"0 || 1 = \"+(0 || 1));\nconsole.log(\"1 || 2 = \"+(1 || 2));\nconsole.log(\"0 && 1 = \"+(0 && 1));\nconsole.log(\"1 && 2 = \"+(1 && 2));\n`.trim();\nconst findOutput3 = `\nvar x = 21;\nvar girl = function () {\n  console.log(x);\n  var x = 20;\n};\ngirl();\n`.trim();\nconst findOutput4 = `\nconsole.log(1 < 2 < 3);\nconsole.log(3 > 2 > 1);\n\n\nThe second returns false because of how the engine works regarding operator associativity for < and >. It compares \nleft to right, so 3 > 2 > 1 JavaScript translates to true > 1. true has value 1, so it then compares 1 > 1, which \nis false.\n`.trim();\nconst findOutput5 = `\nvar a = [1, 2, 3];\na[10] = 99;\nconsole.log(a[6]);\n`.trim();\nconst findOutput6 = `\nconsole.log(typeof typeof 1);                                                     //string\nconsole.log(typeof NaN);                                                          //number\n`.trim();\nconst operator = `\nconsole.log(\"~\", ~3,~2+ \"<>\", 1<2>3 ,\"==!\", 3==!2 ,\"!==\", 3!==2)      //!==\n\nconsole.log([] == [])                                                 //false\n`.trim();\nconst logged = `\nvar a = ['dog', 'cat', 'hen'];\na[100] = 'fox';\nconsole.log(a.length);                                            //101\n`.trim();\nconst addOp = `\nconsole.log(0 && hi)                                              //0\n`.trim();\nconst vals = `\nconst x = 6 % 2;\nconst y = x ? 'One' : 'Two';\nconsole.log(y)                                                    //Two\n`.trim();\nconst running = `\nfunction logThis() {\n  console.log(this);                                              //window\n}\nlogThis();\n`.trim();\nconst thiscode = `\nconst foo = [1, 2, 3];\nconst [n] = foo;\nconsole.log(n);                                                 //1s\n`.trim();\nconst doesCode = `\nconst arr1 = [2, 4, 6];\nconst arr2 = [3, 5, 7];\n\nconsole.log([...arr1, ...arr2]);                               //[2, 4, 6, 3, 5, 7]\n`.trim();\nconst snippet = `\nvar a = Math.max() < Math.min();\nvar b = Math.max() > Math.min();\nconsole.log(a)                                                  //true\nconsole.log(b)                                                  //false\n\nconsole.log(NaN === NaN)                                        //false\nconsole.log(typeof(NaN))                                        //number\nconsole.log(parseInt(\"123Hello\"))                               //123\nconsole.log(parseInt(\"Hello123\"))                               //NaN\n`.trim();\nconst outputs = `\nconst fun = ({ a, b, c }) => {\n  console.log(a, b, c);\n };\n fun(0, 1, 2);                                        //undefined undefined undefined\n\n\n //\nx = 3;\nconsole.log(x);\nvar x;\n\n\n//since the initialization of \"x\" is not hoisted.\nvar x;\nconsole.log(x);                                         //undefined\nx = 23;\n`.trim();\nconst inside = `\nvar x = 0;\nvar y = 23;\n        \nif(x) { console.log(x) }   // The code inside this block will not run since the value of x is 0(Falsy)  \nif(y) { console.log(y) }    // The code inside this block will run since the value of y is 23 (Truthy)\n`.trim();\nconst argu = `\nfunction add(...args){\n  console.log(args)\n}\nadd(12)\n\n//2\nconsole.log(typeof typeof 12)\nconsole.log(typeof NaN)\n`.trim();\nconst diffop = `\nlet arr=[{id:1, name:'Krishana'},{id:2, name:'Ram'}]\n    function add(obj,index){\n        obj[index].name = obj[index].name\n        console.log('obj[index] ', obj[index].name)\n        console.log('obj', obj)\n    }\nadd(arr, 1)\nconsole.log('arr', arr)\n`.trim();\nconst frozen = `\nlet person = {\n  name: \"Leonardo\",\n  profession: {\n      name: \"developer\"\n  }\n};\nObject.freeze(person); // make object immutable\nperson.profession.name = \"doctor\";\nconsole.log(person);\n\n\n//With deep freeze\nfunction deepFreeze(object) {\n  let propNames = Object.getOwnPropertyNames(object);\n  for (let name of propNames) {\n      let value = object[name];\n      object[name] = value && typeof value === \"object\" ?\n          deepFreeze(value) : value;\n  }\n  return Object.freeze(object);\n}\nlet person = {\n  name: \"Leonardo\",\n  profession: {\n      name: \"developer\"\n  }\n};\ndeepFreeze(person);\nperson.profession.name = \"doctor\";\n`.trim();\nconst multilines = `\nconst string = “line1” +\n“line2” +\n“line3”;\n\n//\nconst string = “line1 \\\nline2 \\\nline3”;\n`.trim();\nconst following = `\nconst courses = [\"JavaScript\",\"Java\",\"C\",\"C++\",\"Python\"];\ndelete courses[2];\n\nconsole.log(courses);\nconsole.log(courses.length);\n`.trim();\nconst operators = `\nfunction test1(name) {\n  var a = name;\n  function test2() {\n    console.log(this.a);\n  }\n  test2();\n}\ntest1(\"John\");\n`.trim();\nconst entire = `\nconsole.log(1); \nPromise.resolve().then( \n  console.log(2) \n); \nsetTimeout(function () {\n console.log(3) \n}, 10); \nPromise.resolve().then( \n  console.log(4) \n); \nPromise.resolve().then( \n setTimeout(function () {\n    console.log(5) \n  }, 10) \n); \nconsole.log(6);                                         // 1,6,2,4,5,3\n`.trim(); // const diffop = ``.trim();\n\nclass FindOutput extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    }, \"1.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: deletes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }, \"Above code will output 0 as output. delete operator is used to delete a property from an object. Here x is not an object it's local variable. delete operator doesn't affect local variable.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }, \"2.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: objCreate,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553\n      },\n      __self: this\n    }, \"Above code will output xyz as output. Here emp1 object got company as prototype property. delete operator doesn't delete prototype property.\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }, \"emp1 object doesn't have company as its own property.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    }, \"console.log(emp1.hasOwnProperty('company')); //false\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569\n      },\n      __self: this\n    }, \"3.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: code,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580\n      },\n      __self: this\n    }, \"Since both a and b are defined within the enclosing scope of the function, and since the line they are on begins with the var keyword,\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587\n      },\n      __self: this\n    }, \"But in fact, var a = b = 3;\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592\n      },\n      __self: this\n    }, \"4. Consider the two functions below. Will they both return the same thing? Why or why not?\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: code_2,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604\n      },\n      __self: this\n    }, \"As a result, when the line containing the return statement (with nothing else on the line) is encountered in foo2(), a semicolon is automatically inserted immediately after the return statement.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    }, \"5. Write a sum method which will work properly when invoked using either syntax below.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: code_4,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627\n      },\n      __self: this\n    }, \"6. The following recursive code will cause a stack overflow if the array list is too large. How can you fix this and still retain the recursive pattern?\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: code_5,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 633\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640\n      },\n      __self: this\n    }, \"The stack overflow is eliminated because the event loop handles the recursion, not the call stack. When nextListItem runs, if item is not null, the timeout function (nextListItem) is pushed to the event queue and the function exits, thereby leaving the call stack clear. When the event queue runs its timed-out event, the next item is processed and a timer is set to again invoke nextListItem. Accordingly, the method is processed from start to finish without a direct recursive call, so the call stack remains clear, regardless of the number of iterations.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 651\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 653\n      },\n      __self: this\n    }, \"7.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: code_6,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662\n      },\n      __self: this\n    }, \"Each function executed within the loop will be executed after the entire loop has completed and so reference the last value stored in i.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666\n      },\n      __self: this\n    }), \"Closures can be used to prevent this problem by creating a unique scope for each iteration, storing each unique value of the variable within its scope, as follows:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: code_8,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681\n      },\n      __self: this\n    }, \"JavaScript will implicitly stringify the parameter value. In this case, since b and c are both objects, they will both be converted to \\\"[object object]\\\". As a result, a[b] and a[c] are both equivalent to a[\\\"[object object]\\\"] and can be used interchangeably. Therefore, referencing a[c] is same as referencing a[b].\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: code_9,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699\n      },\n      __self: this\n    }, \"8.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: code_7,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 707\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 708\n      },\n      __self: this\n    }, \"a closure is a function, along with all variables or functions that were in-scope at the time that the closure was created. In JavaScript, a closure is implemented as an \\u201Cinner function\\u201D; An important feature of closures is that an inner function still has access to the outer function\\u2019s variables.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 716\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 717\n      },\n      __self: this\n    }, \"9. Accidental global variable\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 718\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: accidental,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 719\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 726\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 727\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 728\n      },\n      __self: this\n    }, \"No variable b is declared neither in the foo() scope/ global scope. So JavaScript interprets b = 0 expression as\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731\n      },\n      __self: this\n    }, \"window.b = 0\"), \".\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735\n      },\n      __self: this\n    }, \"So, b is a global variable created accidentally.\"))), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 738\n      },\n      __self: this\n    }, \"10. Array length property\"), \"Reducing the value of the length property has the side-effect of deleting own array elements whose array index is between the old and new length values.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 742\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: arrlength,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 743\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 749\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 750\n      },\n      __self: this\n    }, \"undefined, because clothes array has been emptied.\")), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 752\n      },\n      __self: this\n    }, \"11. What is the content of numbers array\"), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753\n      },\n      __self: this\n    }, \"for() iterates 4 times over the null statement, ignoring the block that actually pushes items to array.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 757\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: eyetest,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 758\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 764\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 765\n      },\n      __self: this\n    }, \"12. Clousers\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 766\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: clousers,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 767\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 773\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 774\n      },\n      __self: this\n    }, \"13. What happens if you access myVar and myConst before declaration\"), \"const variables are in a temporal dead zone until the declaration line const myConst = 3.14.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 780\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: happense,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 781\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 787\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 788\n      },\n      __self: this\n    }, \"14.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 789\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 790\n      },\n      __self: this\n    }, \"In the outer function, both this and self refer to myObject and therefore both can properly reference and access foo.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 794\n      },\n      __self: this\n    }, \"In the inner function, this no longer refers to myObject. As a result, this.foo is undefined in the inner function, whereas the reference to the local variable self remains in scope and is accessible there.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 801\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 802\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: code_16,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 803\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 809\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 810\n      },\n      __self: this\n    }, \"15. How to check if an object is an array or not\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 811\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 812\n      },\n      __self: this\n    }, \"isArray() method is used to check if an object is an array.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 815\n      },\n      __self: this\n    }, \"Array.isArray() method returns true if an object is an array, otherwise returns false.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 820\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 821\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: CheckArr,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 822\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 828\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 829\n      },\n      __self: this\n    }, \"16. Occurence elements in the array\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 830\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: commonEl,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 831\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 837\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 838\n      },\n      __self: this\n    }, \"17. Find unque element in array (hasOwnProperty)\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 839\n      },\n      __self: this\n    }, \"The hasOwnProperty() is used to check whether the object has the specified property as its own property. It returns a boolean value indicating whether the object has the given property as its own property.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 845\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: hasOwnProperty,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 846\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 852\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 853\n      },\n      __self: this\n    }, \"18. Group Elements\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 854\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: groupEl,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 855\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 861\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 862\n      },\n      __self: this\n    }, \"19. Make duplicate elements in an array\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 863\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: duplicateEl,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 864\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 870\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 871\n      },\n      __self: this\n    }, \"20. Remove a specific item from an array\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 872\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: removeEl,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 873\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 879\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 880\n      },\n      __self: this\n    }, \"21. Delete a property from an object\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 881\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: deletePro,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 882\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 888\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 889\n      },\n      __self: this\n    }, \"22. Insert an element at specific place in Array\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 890\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: specificEl,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 891\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 897\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 898\n      },\n      __self: this\n    }, \"23. Checking if a key exists in a JavaScript object\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 899\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Checking,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 900\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 906\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 907\n      },\n      __self: this\n    }, \"24.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 908\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: findOutput,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 909\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 915\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 916\n      },\n      __self: this\n    }, \"25.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 917\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: findOutput2,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 918\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 924\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 925\n      },\n      __self: this\n    }, \"26.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 926\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 927\n      },\n      __self: this\n    }, \"It\\u2019s because JavaScript initialization is not hoisted.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 928\n      },\n      __self: this\n    }, \"Why doesn\\u2019t it show the global value of 21? The reason is that when the function is executed, it checks that there\\u2019s a local x variable present but doesn\\u2019t yet declare it, so it won\\u2019t look for global one.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 935\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 936\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: findOutput3,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 937\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 943\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 944\n      },\n      __self: this\n    }, \"27.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 945\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: findOutput4,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 946\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 952\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 953\n      },\n      __self: this\n    }, \"28.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 954\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: findOutput5,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 955\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 961\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 962\n      },\n      __self: this\n    }, \"29.\"), \"typeof 1 will return \\\"number\\\" and typeof \\\"number\\\" will return string.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 965\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: findOutput6,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 966\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 972\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 973\n      },\n      __self: this\n    }, \"30. Which operator returns true if the two compared values are not equal?\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 977\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: operator,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 978\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 984\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 985\n      },\n      __self: this\n    }, \"31. How is a forEach statement different from a for statement?\"), \"A for statement is generic, but a forEach statement can be used only with an array.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 990\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 991\n      },\n      __self: this\n    }, \"32. How does a function create a closure?\"), \"It returns a reference to a variable in its parent scope.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 993\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 994\n      },\n      __self: this\n    }, \"33. Which Object method returns an iterable that can be used to iterate over the properties of an object?\"), \"Object.keys()\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 999\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1000\n      },\n      __self: this\n    }, \"34. What will be logged to the console?\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1001\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: logged,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1002\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1008\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1009\n      },\n      __self: this\n    }, \"35. Add operator.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1010\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: addOp,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1011\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1017\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1018\n      },\n      __self: this\n    }, \"36. Which variable is an implicit parameter for every function in JavaScript?\"), \"Arguments\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1023\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1024\n      },\n      __self: this\n    }, \"37. What will the value of y be in this code:\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1025\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: vals,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1026\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1032\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1033\n      },\n      __self: this\n    }, \"38. Which keyword is used to create an error?\"), \"throw\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1035\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1036\n      },\n      __self: this\n    }, \"39. What is the result in the console of running this code?\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1039\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: running,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1040\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1046\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1047\n      },\n      __self: this\n    }, \"40. What will this code log to the console?\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1048\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: thiscode,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1049\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1055\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1056\n      },\n      __self: this\n    }, \"41. What does this code do?\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1057\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: doesCode,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1058\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1064\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1065\n      },\n      __self: this\n    }, \"42. Upon encountering empty statements, what does the Javascript Interpreter do?\"), \"Ignores the statements.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1070\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1071\n      },\n      __self: this\n    }, \"43. What will be the output of the following code snippet?\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1074\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: snippet,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1075\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1081\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1082\n      },\n      __self: this\n    }, \"44. \"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1083\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: outputs,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1084\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1090\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1091\n      },\n      __self: this\n    }, \"45. \"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1092\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: inside,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1093\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1099\n      },\n      __self: this\n    }, \"46. \"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1100\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: argu,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1101\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1107\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1108\n      },\n      __self: this\n    }, \"47. \"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1109\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: diffop,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1110\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1116\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1117\n      },\n      __self: this\n    }, \"48. Is JavaScript a pass-by-reference or pass-by-value language?\"), \"It\\u2019s always pass by value, but for objects the value of the variable is a reference. Because of this, when you pass an object and change its members, those changes persist outside of the function. This makes it look like pass by reference. But if you actually change the value of the object variable you will see that the change does not persist, proving it\\u2019s really pass by value.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1126\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1127\n      },\n      __self: this\n    }, \"50. How to \\u201Cdeep-freeze\\u201D object in JavaScript?\"), \"If you want make sure the object is deep frozen you have to create a recursive function to freeze each property which is of type object.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1131\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: frozen,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1132\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1138\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1139\n      },\n      __self: this\n    }, \"51. Is it possible to write a multi-line string in JavaScript?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1142\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1143\n      },\n      __self: this\n    }, \"Using backticks\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1144\n      },\n      __self: this\n    }, \"Using + operator\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1145\n      },\n      __self: this\n    }, \"Using \\\\ (backslash)\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1147\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: multilines,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1148\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1154\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1155\n      },\n      __self: this\n    }, \"52. \"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1156\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: following,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1157\n      },\n      __self: this\n    })), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1163\n      },\n      __self: this\n    }, \"The delete operator does not really affect the entire length of the array as the operates removes only the value which is there at the position.\", \" \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1168\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1169\n      },\n      __self: this\n    }, \"53. \"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1170\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: operators,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1171\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1177\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1178\n      },\n      __self: this\n    }, \"54. \"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1179\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: entire,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1180\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(FindOutput);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/javaScripts/deepJs/findOutput.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","deletes","trim","objCreate","code","code_2","code_4","code_5","code_6","code_7","code_8","code_9","accidental","arrlength","eyetest","clousers","happense","code_16","CheckArr","commonEl","hasOwnProperty","groupEl","duplicateEl","removeEl","deletePro","specificEl","Checking","findOutput","findOutput2","findOutput3","findOutput4","findOutput5","findOutput6","operator","logged","addOp","vals","running","thiscode","doesCode","snippet","outputs","inside","argu","diffop","frozen","multilines","following","operators","entire","FindOutput","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst deletes = `\nvar output = (function(x) {\n delete x;\n return x;\n})(0);\n\nconsole.log(output);\n`.trim();\n\nconst objCreate = `\nvar Employee = {\n  company: 'xyz'\n}\n\nvar emp1 = Object.create(Employee);\nconsole.log(emp1.company);\n\ndelete emp1.company\nconsole.log('After', emp1.company);\n `.trim();\n\nconst code = `(function(){\n  var a = b = 3;\n })();\n \n console.log(\"a defined? \" + (typeof a !== 'undefined'));                                         //False\n console.log(\"b defined? \" + (typeof b !== 'undefined'));                                         //True\n `.trim();\n\nconst code_2 = `function foo1(){\n  return {\n  bar: \"hello\"\n  };\n }\n \n function foo2(){\n  return\n  {\n  bar: \"hello\"\n  };\n }\n \n console.log(\"foo1 returns:\",foo1());\n console.log(\"foo2 returns:\",foo2());`.trim();\n\nconst code_4 = `function sum(x, y) {\n  if (y !== undefined) {\n  return x + y;\n  } else {\n  return function(y) { return x + y; };\n  }\n }\n \n console.log(sum(2,3));\n console.log(sum(2)(3));`.trim();\n\nconst code_5 = `var list = readHugeList();\nvar nextListItem = function() {\n var item = list.pop();\n \n if (item) {\n // process the list item...\n nextListItem();\n }\n};`.trim();\n\nconst code_6 = `\n//1\nfor (let i = 0; i < 3; i++) {\n  setTimeout(() => {\n    console.log(i);\n  }, 1000);\n}\n\n\n//2\nfor (var i = 0; i < 3; i++) {\n  setTimeout(() => {\n    console.log(i);\n  }, 1000);\n}\n`.trim();\n\nconst code_7 = `\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.splice(2, 0, \"Lemon\", \"Kiwi\");\nconsole.log(fruits)`.trim();\n\nconst code_8 = `var a={},\nb={key:'b'},\nc={key:'c'};\n  a[b]=123;\n  a[c]=456;\n  \nconsole.log(a[b]);`.trim();\n\nconst code_9 =\n  `console.log((function f(n){return ((n > 1) ? n * f(n-1) : n)})(10));`.trim();\n\nconst accidental = `\nfunction foo() {\n  let a = b = 0;\n  a++;\n  return a;\n}\n\nfoo();\nconsole.log(typeof a);\nconsole.log(typeof b);\n\n\nlet a = b = 0;                               //declares a is local variable and b is global variable.\n`.trim();\n\nconst arrlength = `\nconst clothes = ['jacket', 't-shirt'];\nclothes.length = 0;\n\nconsole.log(clothes[0]);                                           //undefined\n`.trim();\n\nconst eyetest = `\nconst length = 4;\nconst numbers = [];\nfor (var i = 0; i < length; i++); {\n  numbers.push(i + 1);\n}\n\nconsole.log(numbers);\n`.trim();\n\nconst clousers = `\nlet i;\nfor (i = 0; i < 3; i++) {\n  const log = () => {\n    console.log(i);\n  }\n  setTimeout(log, 100);\n}`.trim();\n\nconst happense = `\nconsole.log(myVar);\nconsole.log(myConst);\n\nvar myVar = 'value';\nconst myConst = 3.14;`.trim();\n\nconst code_16 = `\nvar myObject = {\n  foo: \"bar\",\n  func: function () {\n    var self = this;\n    console.log(\"outer func\" + this.foo);\n    console.log(\"outer func\" + self.foo);\n    \n    (function () {\n      console.log(\"inner func\" + this.foo);\n      console.log(\"inner func\" + self.foo);\n    }());\n  }\n};\nmyObject.func();\n`.trim();\n\nconst CheckArr = `\nvar v1 = { name: \"John\", age: 18 };\nvar v2 = [\"red\", \"green\", \"blue\", \"yellow\"];\n\nconsole.log(Array.isArray(v1));                                                                     // false\nconsole.log(Array.isArray(v2));                                                                     // true\n`.trim();\n\nconst commonEl = `\nconst arr = [1, 2, 3, 3, 2];\nconst count = {};\n\narr.forEach(el => {\n  count[el] = count[el] ? (count[el] += 1) : 1\n})\n\nconsole.log(count)`.trim();\n\nconst hasOwnProperty = `\nfunction unique(arr) {\n  var count = {};\n  return arr.filter((item) => {\n    return count.hasOwnProperty(item) ? false : (count[item] = true);\n  });\n}\n\nconsole.log(unique([2, 3, 4, 3, 2, 5]));`.trim();\n\nconst groupEl = `\nvar people = [\n  { sex: \"Male\", name: \"Jeff\" },\n  { sex: \"Female\", name: \"Megan\" },\n  { sex: \"Male\", name: \"Taylor\" },\n  { sex: \"Female\", name: \"Madison\" }\n];\n\nfunction groupBy(list, key) {\n  return list.reduce((data, val) => {\n    (data[val[key]] = data[val[key]] || []).push(val);\n    return data;\n  }, {});\n};\n\nvar groupedPeople = groupBy(people, \"sex\");\nconsole.log(groupedPeople.Male);\nconsole.log(groupedPeople.Female);`.trim();\n\nconst duplicateEl = `\nvar arr = [1, 2, 3];\narr = arr.concat(arr);\n\nconsole.log(arr)`.trim();\n\nconst removeEl = `\nvar arr = [1, 2, 3, 4, 5, 3]\nvar value = 2\n\narr = arr.filter((item) => {\n  return item !== value\n})\n\nconsole.log(arr)`.trim();\n\nconst deletePro = `\nvar obj = {\n  name: \"Mukesh\",\n  Address: \"India\",\n  pincode: 201306\n};\n\ndelete obj.name;\n\nconsole.log(obj);`.trim();\n\nconst specificEl = `\nvar arr = [1, 2, 3, 4, 5];\n\narr.splice(2, 0, 7);\nconsole.log(arr.join());`.trim();\n\nconst Checking = `\nconst car = {\n  color: 'blue'\n}\n\nobj = car.hasOwnProperty('color')\nconsole.log(obj)`.trim();\n\nconst findOutput = `\nconsole.log(1 + \"2\" + \"2\");\nconsole.log(1 + +\"2\" + \"2\");\nconsole.log(1 + -\"1\" + \"2\");\nconsole.log(+\"1\" + \"1\" + \"2\");\nconsole.log(\"A\" - \"B\" + \"2\");\nconsole.log(\"A\" - \"B\" + 2);`.trim();\n\nconst findOutput2 = `\nconsole.log(\"0 || 1 = \"+(0 || 1));\nconsole.log(\"1 || 2 = \"+(1 || 2));\nconsole.log(\"0 && 1 = \"+(0 && 1));\nconsole.log(\"1 && 2 = \"+(1 && 2));\n`.trim();\n\nconst findOutput3 = `\nvar x = 21;\nvar girl = function () {\n  console.log(x);\n  var x = 20;\n};\ngirl();\n`.trim();\n\nconst findOutput4 = `\nconsole.log(1 < 2 < 3);\nconsole.log(3 > 2 > 1);\n\n\nThe second returns false because of how the engine works regarding operator associativity for < and >. It compares \nleft to right, so 3 > 2 > 1 JavaScript translates to true > 1. true has value 1, so it then compares 1 > 1, which \nis false.\n`.trim();\n\nconst findOutput5 = `\nvar a = [1, 2, 3];\na[10] = 99;\nconsole.log(a[6]);\n`.trim();\n\nconst findOutput6 = `\nconsole.log(typeof typeof 1);                                                     //string\nconsole.log(typeof NaN);                                                          //number\n`.trim();\n\nconst operator = `\nconsole.log(\"~\", ~3,~2+ \"<>\", 1<2>3 ,\"==!\", 3==!2 ,\"!==\", 3!==2)      //!==\n\nconsole.log([] == [])                                                 //false\n`.trim();\n\nconst logged = `\nvar a = ['dog', 'cat', 'hen'];\na[100] = 'fox';\nconsole.log(a.length);                                            //101\n`.trim();\n\nconst addOp = `\nconsole.log(0 && hi)                                              //0\n`.trim();\n\nconst vals = `\nconst x = 6 % 2;\nconst y = x ? 'One' : 'Two';\nconsole.log(y)                                                    //Two\n`.trim();\n\nconst running = `\nfunction logThis() {\n  console.log(this);                                              //window\n}\nlogThis();\n`.trim();\n\nconst thiscode = `\nconst foo = [1, 2, 3];\nconst [n] = foo;\nconsole.log(n);                                                 //1s\n`.trim();\n\nconst doesCode = `\nconst arr1 = [2, 4, 6];\nconst arr2 = [3, 5, 7];\n\nconsole.log([...arr1, ...arr2]);                               //[2, 4, 6, 3, 5, 7]\n`.trim();\n\nconst snippet = `\nvar a = Math.max() < Math.min();\nvar b = Math.max() > Math.min();\nconsole.log(a)                                                  //true\nconsole.log(b)                                                  //false\n\nconsole.log(NaN === NaN)                                        //false\nconsole.log(typeof(NaN))                                        //number\nconsole.log(parseInt(\"123Hello\"))                               //123\nconsole.log(parseInt(\"Hello123\"))                               //NaN\n`.trim();\n\nconst outputs = `\nconst fun = ({ a, b, c }) => {\n  console.log(a, b, c);\n };\n fun(0, 1, 2);                                        //undefined undefined undefined\n\n\n //\nx = 3;\nconsole.log(x);\nvar x;\n\n\n//since the initialization of \"x\" is not hoisted.\nvar x;\nconsole.log(x);                                         //undefined\nx = 23;\n`.trim();\n\nconst inside = `\nvar x = 0;\nvar y = 23;\n        \nif(x) { console.log(x) }   // The code inside this block will not run since the value of x is 0(Falsy)  \nif(y) { console.log(y) }    // The code inside this block will run since the value of y is 23 (Truthy)\n`.trim();\n\nconst argu = `\nfunction add(...args){\n  console.log(args)\n}\nadd(12)\n\n//2\nconsole.log(typeof typeof 12)\nconsole.log(typeof NaN)\n`.trim();\n\nconst diffop = `\nlet arr=[{id:1, name:'Krishana'},{id:2, name:'Ram'}]\n    function add(obj,index){\n        obj[index].name = obj[index].name\n        console.log('obj[index] ', obj[index].name)\n        console.log('obj', obj)\n    }\nadd(arr, 1)\nconsole.log('arr', arr)\n`.trim();\n\nconst frozen = `\nlet person = {\n  name: \"Leonardo\",\n  profession: {\n      name: \"developer\"\n  }\n};\nObject.freeze(person); // make object immutable\nperson.profession.name = \"doctor\";\nconsole.log(person);\n\n\n//With deep freeze\nfunction deepFreeze(object) {\n  let propNames = Object.getOwnPropertyNames(object);\n  for (let name of propNames) {\n      let value = object[name];\n      object[name] = value && typeof value === \"object\" ?\n          deepFreeze(value) : value;\n  }\n  return Object.freeze(object);\n}\nlet person = {\n  name: \"Leonardo\",\n  profession: {\n      name: \"developer\"\n  }\n};\ndeepFreeze(person);\nperson.profession.name = \"doctor\";\n`.trim();\n\nconst multilines = `\nconst string = “line1” +\n“line2” +\n“line3”;\n\n//\nconst string = “line1 \\\nline2 \\\nline3”;\n`.trim();\n\nconst following = `\nconst courses = [\"JavaScript\",\"Java\",\"C\",\"C++\",\"Python\"];\ndelete courses[2];\n\nconsole.log(courses);\nconsole.log(courses.length);\n`.trim();\n\nconst operators = `\nfunction test1(name) {\n  var a = name;\n  function test2() {\n    console.log(this.a);\n  }\n  test2();\n}\ntest1(\"John\");\n`.trim();\n\nconst entire = `\nconsole.log(1); \nPromise.resolve().then( \n  console.log(2) \n); \nsetTimeout(function () {\n console.log(3) \n}, 10); \nPromise.resolve().then( \n  console.log(4) \n); \nPromise.resolve().then( \n setTimeout(function () {\n    console.log(5) \n  }, 10) \n); \nconsole.log(6);                                         // 1,6,2,4,5,3\n`.trim();\n\n// const diffop = ``.trim();\n\nclass FindOutput extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <b>1.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={deletes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>\n                Above code will output 0 as output. delete operator is used to\n                delete a property from an object. Here x is not an object it's\n                local variable. delete operator doesn't affect local variable.\n              </i>\n              <br />\n              <br />\n              <br />\n              <b>2.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={objCreate}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <ul>\n                <li>\n                  <i>\n                    Above code will output xyz as output. Here emp1 object got\n                    company as prototype property. delete operator doesn't\n                    delete prototype property.\n                  </i>\n                </li>\n                <li>\n                  <i>emp1 object doesn't have company as its own property.</i>\n                </li>\n                <br />\n                <li>\n                  <b>console.log(emp1.hasOwnProperty('company')); //false</b>\n                </li>\n              </ul>\n              <br />\n              <br />\n              <b>3.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={code}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <ul>\n                <li>\n                  <i>\n                    Since both a and b are defined within the enclosing scope of\n                    the function, and since the line they are on begins with the\n                    var keyword,\n                  </i>\n                </li>\n                <li>\n                  <i>But in fact, var a = b = 3;</i>\n                </li>\n              </ul>\n              <br />\n              <br />\n              <b>\n                4. Consider the two functions below. Will they both return the\n                same thing? Why or why not?\n              </b>\n              <div style={titles}>\n                <PrismCode\n                  code={code_2}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>\n                As a result, when the line containing the return statement (with\n                nothing else on the line) is encountered in foo2(), a semicolon\n                is automatically inserted immediately after the return\n                statement.\n              </i>\n              <br />\n              <br />\n              <br />\n              <b>\n                5. Write a sum method which will work properly when invoked\n                using either syntax below.\n              </b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={code_4}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>\n                6. The following recursive code will cause a stack overflow if\n                the array list is too large. How can you fix this and still\n                retain the recursive pattern?\n              </b>\n              <div style={titles}>\n                <PrismCode\n                  code={code_5}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>\n                The stack overflow is eliminated because the event loop handles\n                the recursion, not the call stack. When nextListItem runs, if\n                item is not null, the timeout function (nextListItem) is pushed\n                to the event queue and the function exits, thereby leaving the\n                call stack clear. When the event queue runs its timed-out event,\n                the next item is processed and a timer is set to again invoke\n                nextListItem. Accordingly, the method is processed from start to\n                finish without a direct recursive call, so the call stack\n                remains clear, regardless of the number of iterations.\n              </i>\n              <br />\n              <br />\n              <h3>7.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={code_6}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>\n                Each function executed within the loop will be executed after\n                the entire loop has completed and so reference the last value\n                stored in i.\n                <br />\n                Closures can be used to prevent this problem by creating a\n                unique scope for each iteration, storing each unique value of\n                the variable within its scope, as follows:\n              </i>\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={code_8}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>\n                JavaScript will implicitly stringify the parameter value. In\n                this case, since b and c are both objects, they will both be\n                converted to \"[object object]\". As a result, a[b] and a[c] are\n                both equivalent to a[\"[object object]\"] and can be used\n                interchangeably. Therefore, referencing a[c] is same as\n                referencing a[b].\n              </i>\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={code_9}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>8.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={code_7}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>\n                a closure is a function, along with all variables or functions\n                that were in-scope at the time that the closure was created. In\n                JavaScript, a closure is implemented as an “inner function”; An\n                important feature of closures is that an inner function still\n                has access to the outer function’s variables.\n              </i>\n              <br />\n              <br />\n              <h3>9. Accidental global variable</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={accidental}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <ul>\n                <li>\n                  <i>\n                    No variable b is declared neither in the foo() scope/ global\n                    scope. So JavaScript interprets b = 0 expression as\n                    <b>window.b = 0</b>.\n                  </i>\n                </li>\n                <li>\n                  <i>So, b is a global variable created accidentally.</i>\n                </li>\n              </ul>\n              <h3>10. Array length property</h3>\n              Reducing the value of the length property has the side-effect of\n              deleting own array elements whose array index is between the old\n              and new length values.\n              <div style={titles}>\n                <PrismCode\n                  code={arrlength}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <ul>\n                <li>undefined, because clothes array has been emptied.</li>\n              </ul>\n              <h3>11. What is the content of numbers array</h3>\n              <i>\n                for() iterates 4 times over the null statement, ignoring the\n                block that actually pushes items to array.\n              </i>\n              <div style={titles}>\n                <PrismCode\n                  code={eyetest}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>12. Clousers</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={clousers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                13. What happens if you access myVar and myConst before\n                declaration\n              </h3>\n              const variables are in a temporal dead zone until the declaration\n              line const myConst = 3.14.\n              <div style={titles}>\n                <PrismCode\n                  code={happense}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>14.</h3>\n              <ul>\n                <li>\n                  In the outer function, both this and self refer to myObject\n                  and therefore both can properly reference and access foo.\n                </li>\n                <li>\n                  In the inner function, this no longer refers to myObject. As a\n                  result, this.foo is undefined in the inner function, whereas\n                  the reference to the local variable self remains in scope and\n                  is accessible there.\n                </li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={code_16}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>15. How to check if an object is an array or not</h3>\n              <ul>\n                <li>\n                  isArray() method is used to check if an object is an array.\n                </li>\n                <li>\n                  Array.isArray() method returns true if an object is an array,\n                  otherwise returns false.\n                </li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={CheckArr}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>16. Occurence elements in the array</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={commonEl}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>17. Find unque element in array (hasOwnProperty)</h3>\n              <p>\n                The hasOwnProperty() is used to check whether the object has the\n                specified property as its own property. It returns a boolean\n                value indicating whether the object has the given property as\n                its own property.\n              </p>\n              <div style={titles}>\n                <PrismCode\n                  code={hasOwnProperty}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>18. Group Elements</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={groupEl}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>19. Make duplicate elements in an array</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={duplicateEl}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>20. Remove a specific item from an array</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={removeEl}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>21. Delete a property from an object</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={deletePro}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>22. Insert an element at specific place in Array</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={specificEl}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>23. Checking if a key exists in a JavaScript object</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Checking}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>24.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={findOutput}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>25.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={findOutput2}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>26.</h3>\n              <ul>\n                <li>It’s because JavaScript initialization is not hoisted.</li>\n                <li>\n                  Why doesn’t it show the global value of 21? The reason is that\n                  when the function is executed, it checks that there’s a local\n                  x variable present but doesn’t yet declare it, so it won’t\n                  look for global one.\n                </li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={findOutput3}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>27.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={findOutput4}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>28.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={findOutput5}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>29.</h3>\n              typeof 1 will return \"number\" and typeof \"number\" will return\n              string.\n              <div style={titles}>\n                <PrismCode\n                  code={findOutput6}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                30. Which operator returns true if the two compared values are\n                not equal?\n              </h3>\n              <div style={titles}>\n                <PrismCode\n                  code={operator}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                31. How is a forEach statement different from a for statement?\n              </h3>\n              A for statement is generic, but a forEach statement can be used\n              only with an array.\n              <br />\n              <h3>32. How does a function create a closure?</h3>\n              It returns a reference to a variable in its parent scope.\n              <br />\n              <h3>\n                33. Which Object method returns an iterable that can be used to\n                iterate over the properties of an object?\n              </h3>\n              Object.keys()\n              <br />\n              <h3>34. What will be logged to the console?</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={logged}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>35. Add operator.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={addOp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                36. Which variable is an implicit parameter for every function\n                in JavaScript?\n              </h3>\n              Arguments\n              <br />\n              <h3>37. What will the value of y be in this code:</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={vals}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>38. Which keyword is used to create an error?</h3>\n              throw\n              <br />\n              <h3>\n                39. What is the result in the console of running this code?\n              </h3>\n              <div style={titles}>\n                <PrismCode\n                  code={running}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>40. What will this code log to the console?</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={thiscode}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>41. What does this code do?</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={doesCode}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                42. Upon encountering empty statements, what does the Javascript\n                Interpreter do?\n              </h3>\n              Ignores the statements.\n              <br />\n              <h3>\n                43. What will be the output of the following code snippet?\n              </h3>\n              <div style={titles}>\n                <PrismCode\n                  code={snippet}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>44. </h3>\n              <div style={titles}>\n                <PrismCode\n                  code={outputs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>45. </h3>\n              <div style={titles}>\n                <PrismCode\n                  code={inside}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <h3>46. </h3>\n              <div style={titles}>\n                <PrismCode\n                  code={argu}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>47. </h3>\n              <div style={titles}>\n                <PrismCode\n                  code={diffop}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                48. Is JavaScript a pass-by-reference or pass-by-value language?\n              </h3>\n              It’s always pass by value, but for objects the value of the\n              variable is a reference. Because of this, when you pass an object\n              and change its members, those changes persist outside of the\n              function. This makes it look like pass by reference. But if you\n              actually change the value of the object variable you will see that\n              the change does not persist, proving it’s really pass by value.\n              <br />\n              <h3>50. How to “deep-freeze” object in JavaScript?</h3>\n              If you want make sure the object is deep frozen you have to create\n              a recursive function to freeze each property which is of type\n              object.\n              <div style={titles}>\n                <PrismCode\n                  code={frozen}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                51. Is it possible to write a multi-line string in JavaScript?\n              </h3>\n              <ul>\n                <li>Using backticks</li>\n                <li>Using + operator</li>\n                <li>Using \\ (backslash)</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={multilines}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>52. </h3>\n              <div style={titles}>\n                <PrismCode\n                  code={following}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <i>\n                The delete operator does not really affect the entire length of\n                the array as the operates removes only the value which is there\n                at the position.{\" \"}\n              </i>\n              <br />\n              <h3>53. </h3>\n              <div style={titles}>\n                <PrismCode\n                  code={operators}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>54. </h3>\n              <div style={titles}>\n                <PrismCode\n                  code={entire}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(FindOutput);\n"]},"metadata":{},"sourceType":"module"}