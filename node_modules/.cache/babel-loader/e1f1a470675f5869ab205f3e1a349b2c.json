{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/topTech.js\";\nimport React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\nconst titles = {\n  backgroundColor: \"#F0F8FF\",\n  padding: \"1px\",\n  fontSize: \"16px\"\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst evalRPN = `\nfunction policeNotation(tokens) {\n  const stack = [];\n  for (const tok of tokens) {\n    if (!isNaN(tok)) {\n      stack.push(parseInt(tok));\n    } else {\n      const b = stack.pop();\n      const a = stack.pop();\n      switch (tok) {\n        case \"+\":\n          stack.push(a + b);\n          break;\n        case \"*\":\n          stack.push(a * b);\n          break;\n        case \"-\":\n          stack.push(a - b);\n          break;\n        case \"/\":\n          stack.push(a / b);\n          break;\n      }\n    }\n  }\n  return stack.pop();\n}\n\nconsole.log(policeNotation([\"2\", \"1\", \"+\", \"3\", \"*\"]));\n`.trim();\nconst convertToTitle = `\nfunction convertToTitle(n) {\n  var A = \"A\".charCodeAt(0);\n  var str = \"\";\n  \n  while(n > 0) {\n      n--;\n      str = String.fromCharCode(A+n%26) + str;\n      n =parseInt(n/26);\n  }\n  \n  return str;\n};\n\nconsole.log(convertToTitle(701))\n`.trim();\nconst combinationSum3 = `\nfunction combiSum(arr, num) {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i; j < arr.length; j++) {\n      if (arr[i] + arr[j] == num) {\n        result.push([arr[i], arr[j]]);\n      }\n    }\n  }\n  console.log(result);\n}\n\ncombiSum([2, 1, 4, 3, 5], 7);\n`.trim();\nconst countDigitOne = `\nfunction countOnes(n) {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    count += i.toString().split(\"1\").length - 1;\n  }\n  return count;\n}\n\nconsole.log(countOnes(16));\n\n`.trim();\nconst maxSlidingWindow = `\nfunction maxSlidingWindow (nums = [], k){\n  if (!nums.length) return [];\n\n  const result = []\n  const queue = []\n\n  for (let i = 0; i < k; i++) {\n    while (nums[i] > nums[queue[queue.length - 1]]) {\n      queue.pop()\n    }\n    queue.push(i)\n  }\n  result.push(nums[queue[0]])\n\n  for (let i = 1; i < nums.length - k + 1; i++) {\n    if (queue[0] < i) {\n      queue.shift()\n    }\n    while (nums[i + k - 1] > nums[queue[queue.length - 1]]) {\n      queue.pop()\n    }\n    queue.push(i + k - 1)\n    result.push(nums[queue[0]])\n  }\n  return result\n}\n\nconsole.log(maxSlidingWindow([1,3,-1,-3,5,3,6,7], 3))\n`.trim();\n\nclass TopTech extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"1. Excel Sheet Column Title.\"), \"Given a positive integer, return its corresponding column title as appear in an Excel sheet.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: convertToTitle,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"2. Evaluate Reverse Polish Notation\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Input: \"), \"[\\\"2\\\", \\\"1\\\", \\\"+\\\", \\\"3\\\", \\\"*\\\"]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"Output: \"), \"9\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"Explanation: \"), \"((2 + 1) * 3) = 9\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: evalRPN,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"3. Combination Sum.\"), \"Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"Note: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"All numbers will be positive integers.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"The solution set must not contain duplicate combinations.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: combinationSum3,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"4. Number of Digit One.\"), \"Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: countDigitOne,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, \"5. Sliding Window Maximum.\"), \"Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), \"Could you solve it in linear time?\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maxSlidingWindow,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(TopTech);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/topTech.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","evalRPN","trim","convertToTitle","combinationSum3","countDigitOne","maxSlidingWindow","TopTech","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst evalRPN = `\nfunction policeNotation(tokens) {\n  const stack = [];\n  for (const tok of tokens) {\n    if (!isNaN(tok)) {\n      stack.push(parseInt(tok));\n    } else {\n      const b = stack.pop();\n      const a = stack.pop();\n      switch (tok) {\n        case \"+\":\n          stack.push(a + b);\n          break;\n        case \"*\":\n          stack.push(a * b);\n          break;\n        case \"-\":\n          stack.push(a - b);\n          break;\n        case \"/\":\n          stack.push(a / b);\n          break;\n      }\n    }\n  }\n  return stack.pop();\n}\n\nconsole.log(policeNotation([\"2\", \"1\", \"+\", \"3\", \"*\"]));\n`.trim();\n\nconst convertToTitle = `\nfunction convertToTitle(n) {\n  var A = \"A\".charCodeAt(0);\n  var str = \"\";\n  \n  while(n > 0) {\n      n--;\n      str = String.fromCharCode(A+n%26) + str;\n      n =parseInt(n/26);\n  }\n  \n  return str;\n};\n\nconsole.log(convertToTitle(701))\n`.trim();\n\nconst combinationSum3 = `\nfunction combiSum(arr, num) {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i; j < arr.length; j++) {\n      if (arr[i] + arr[j] == num) {\n        result.push([arr[i], arr[j]]);\n      }\n    }\n  }\n  console.log(result);\n}\n\ncombiSum([2, 1, 4, 3, 5], 7);\n`.trim();\n\nconst countDigitOne = `\nfunction countOnes(n) {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    count += i.toString().split(\"1\").length - 1;\n  }\n  return count;\n}\n\nconsole.log(countOnes(16));\n\n`.trim();\n\nconst maxSlidingWindow = `\nfunction maxSlidingWindow (nums = [], k){\n  if (!nums.length) return [];\n\n  const result = []\n  const queue = []\n\n  for (let i = 0; i < k; i++) {\n    while (nums[i] > nums[queue[queue.length - 1]]) {\n      queue.pop()\n    }\n    queue.push(i)\n  }\n  result.push(nums[queue[0]])\n\n  for (let i = 1; i < nums.length - k + 1; i++) {\n    if (queue[0] < i) {\n      queue.shift()\n    }\n    while (nums[i + k - 1] > nums[queue[queue.length - 1]]) {\n      queue.pop()\n    }\n    queue.push(i + k - 1)\n    result.push(nums[queue[0]])\n  }\n  return result\n}\n\nconsole.log(maxSlidingWindow([1,3,-1,-3,5,3,6,7], 3))\n`.trim();\n\nclass TopTech extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Excel Sheet Column Title.</h3>\n              Given a positive integer, return its corresponding column title as\n              appear in an Excel sheet.\n              <div style={titles}>\n                <PrismCode\n                  code={convertToTitle}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>2. Evaluate Reverse Polish Notation</h3>\n              <b>Input: </b>[\"2\", \"1\", \"+\", \"3\", \"*\"]\n              <br />\n              <b>Output: </b>9<br />\n              <b>Explanation: </b>((2 + 1) * 3) = 9\n              <div style={titles}>\n                <PrismCode\n                  code={evalRPN}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>3. Combination Sum.</h3>\n              Find all possible combinations of k numbers that add up to a\n              number n, given that only numbers from 1 to 9 can be used and each\n              combination should be a unique set of numbers.\n              <br />\n              <b>Note: </b>\n              <ul>\n                <li>All numbers will be positive integers.</li>\n                <li>\n                  The solution set must not contain duplicate combinations.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={combinationSum3}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>4. Number of Digit One.</h3>\n              Given an integer n, count the total number of digit 1 appearing in\n              all non-negative integers less than or equal to n.\n              <div style={titles}>\n                <PrismCode\n                  code={countDigitOne}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>5. Sliding Window Maximum.</h3>\n              Given an array nums, there is a sliding window of size k which is\n              moving from the very left of the array to the very right. You can\n              only see the k numbers in the window. Each time the sliding window\n              moves right by one position. Return the max sliding window.\n              <br />\n              <br />\n              Could you solve it in linear time?\n              <div style={titles}>\n                <PrismCode\n                  code={maxSlidingWindow}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(TopTech);\n"]},"metadata":{},"sourceType":"module"}