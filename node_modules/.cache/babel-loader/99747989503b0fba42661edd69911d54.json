{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/heap.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Hash from '../../../assets/hash.png';\nimport Hips from '../../../assets/maxhip.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst heap = `\n  \n  peek() {                                                            // returns the highest priority value.\n    return this.heap[1];\n  }\n\n  \n  isEmpty() {                                                        \n    if (0 == this.size) return true;\n    return false;\n  }\n\n  \n  isFull() {                                                          \n    if (this.size == this.capacity) return true;\n    return false;\n  }\n\n\n  print() {                                                          \n    console.log(this.heap.slice(1));\n  }\n                                                                       \n  heapSort() {                                                        // heap sorting done by delete function to the \n    for (let i = 1; i < this.capacity; i++) {                         //number of times of the size of the heap it returns\n      this.delete();                                                  //reverse sort because it is a min priority queue.\n    }\n  }\n\n\n  sink() {                                                            // this function reorders the heap after every delete.\n    let k = 1;\n    while (2 * k <= this.size || 2 * k + 1 <= this.size) {\n      let minIndex;\n      if (this.heap[2 * k] >= this.heap[k]) {\n        if (2 * k + 1 <= this.size && this.heap[2*k+1] >= this.heap[k]) {\n          break;\n        }\n        else if(2*k+1 > this.size){\n          break;\n        }\n      }\n      if (2 * k + 1 > this.size) {\n        minIndex = this.heap[2 * k] < this.heap[k] ? 2 * k : k;\n      } else {\n        if (\n          this.heap[k] > this.heap[2 * k] ||\n          this.heap[k] > this.heap[2 * k + 1]\n        ) {\n          minIndex =\n            this.heap[2 * k] < this.heap[2 * k + 1] ? 2 * k : 2 * k + 1;\n        } else {\n          minIndex = k;\n        }\n      }\n      let temp = this.heap[k];\n      this.heap[k] = this.heap[minIndex];\n      this.heap[minIndex] = temp;\n      k = minIndex;\n    }\n  }\n\n  \n  delete() {                                                            // deletes the highest priority value from the heap.\n    let min = this.heap[1];\n    this.heap[1] = this.heap[this.size];\n    this.heap[this.size] = min;\n    this.size--;\n    this.sink();\n    return min;\n  }\n}\n\n\nq = new MinPriorityQueue(8);\n\nq.insert(5);\nq.insert(2);\nq.insert(4);\nq.insert(1);\nq.insert(7);\n\nq.print();                                                              // [ 1, 2, 3, 5, 7, 6, 4, 8 ]\nq.heapSort();\nq.print();                                                              // [ 8, 7, 6, 5, 4, 3, 2, 1 ]\n`.trim();\n\nclass Heap extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Hash Table\"), React.createElement(\"img\", {\n      src: Hash,\n      alt: \"DeadLock\",\n      className: \"responsive\",\n      style: redesign,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"A Hash Table is a dictionary-like structure that pairs keys/ values. The location in memory of each pair is determined by a hash function, which accepts a key and returns the address where the value should be inserted and retrieved. Collisions can result if two/ more keys convert to the same address. For robustness, getters and setters should anticipate these events to ensure that all data can be recovered and no data is overwritten.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"If we know our addresses will be in integer sequences, we can simply use Arrays to store our key-value pairs. For more complex address mappings, we can use Maps or Objects. Hash tables have insertion and lookup of constant time on average. Because of collisions and resizing.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Heap\"), React.createElement(\"img\", {\n      src: Hips,\n      alt: \"DeadLock\",\n      className: \"responsive\",\n      style: redesign,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"Minimum Priority Queue: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"It is a part of heap data structure\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"A heap is a specific tree based data structure in which all the nodes of tree are in a specific order. that is the children are arranged in some  respect of their parents, can either be greater/ less than the parent. This makes it a min priority queue or max priority queue.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    })), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"Functions: \"), \"insert, delete, peek, isEmpty, print, heapSort, sink etc.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: heap,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Heap);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/heap.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Hash","Hips","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","heap","trim","Heap","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,UAAtB,EAAkCC,IAAlC,QAA8C,mBAA9C;AAEA,OAAO,0BAAP;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AAEA,OAAOC,IAAP,MAAiB,0BAAjB;AACA,OAAOC,IAAP,MAAiB,4BAAjB;AAEA,MAAMC,MAAM,GAAG;AAAEC,EAAAA,eAAe,EAAE,SAAnB;AAA8BC,EAAAA,OAAO,EAAE,KAAvC;AAA8CC,EAAAA,QAAQ,EAAE;AAAxD,CAAf;AAEA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,MAAM,EAAE,GADO;AAEfC,EAAAA,KAAK,EAAE;AAFQ,CAAjB;;AAKA,MAAMC,MAAM,GAAGC,KAAK,KAAK;AACvBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH;AAELT,IAAAA,OAAO,EAAEM,KAAK,CAACG,OAAN,CAAc,CAAd;AAFJ,GADgB;AAKvBC,EAAAA,QAAQ,EAAE;AACRF,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd;AADA,GALa;AAQvBE,EAAAA,SAAS,EAAE;AACTC,IAAAA,SAAS,EAAE;AADF;AARY,CAAL,CAApB;;AAcA,MAAMC,IAAI,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAD,CAqFXC,IArFW,EAAb;;AAwFA,MAAMC,IAAN,SAAmB3B,SAAnB,CAA6B;AAC3B4B,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,UAAU,CAAC,MAAM5B,KAAK,CAAC6B,YAAN,EAAP,EAA6B,CAA7B,CAAV;AACD;;AACDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB;AACA,WACE,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAED,OAAO,CAACb,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAJ,CADF,CADF,CADF,EAME,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAEa,OAAO,CAACb,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE;AAAK,MAAA,GAAG,EAAEX,IAAV;AAAgB,MAAA,GAAG,EAAC,UAApB;AAA+B,MAAA,SAAS,EAAC,YAAzC;AAAsD,MAAA,KAAK,EAAEM,QAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+bADF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6RAXF,CAHF,EAqBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArBF,EAuBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAvBF,EAwBE;AAAK,MAAA,GAAG,EAAEL,IAAV;AAAgB,MAAA,GAAG,EAAC,UAApB;AAA+B,MAAA,SAAS,EAAC,YAAzC;AAAsD,MAAA,KAAK,EAAEK,QAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxBF,EAyBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzBF,EA2BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCA3BF,EA4BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4RAFF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,CA5BF,EAsCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAtCF,+DAuCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvCF,EAwCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxCF,EAyCE;AAAK,MAAA,KAAK,EAAEJ,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEe,IADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAzCF,CADF,CADF,CANF,CADF;AA8DD;;AApE0B;;AAuE7B,eAAgBrB,UAAU,CAACa,MAAD,CAAV,CAAmBU,IAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Hash from '../../../assets/hash.png';\nimport Hips from '../../../assets/maxhip.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst heap = `\n  \n  peek() {                                                            // returns the highest priority value.\n    return this.heap[1];\n  }\n\n  \n  isEmpty() {                                                        \n    if (0 == this.size) return true;\n    return false;\n  }\n\n  \n  isFull() {                                                          \n    if (this.size == this.capacity) return true;\n    return false;\n  }\n\n\n  print() {                                                          \n    console.log(this.heap.slice(1));\n  }\n                                                                       \n  heapSort() {                                                        // heap sorting done by delete function to the \n    for (let i = 1; i < this.capacity; i++) {                         //number of times of the size of the heap it returns\n      this.delete();                                                  //reverse sort because it is a min priority queue.\n    }\n  }\n\n\n  sink() {                                                            // this function reorders the heap after every delete.\n    let k = 1;\n    while (2 * k <= this.size || 2 * k + 1 <= this.size) {\n      let minIndex;\n      if (this.heap[2 * k] >= this.heap[k]) {\n        if (2 * k + 1 <= this.size && this.heap[2*k+1] >= this.heap[k]) {\n          break;\n        }\n        else if(2*k+1 > this.size){\n          break;\n        }\n      }\n      if (2 * k + 1 > this.size) {\n        minIndex = this.heap[2 * k] < this.heap[k] ? 2 * k : k;\n      } else {\n        if (\n          this.heap[k] > this.heap[2 * k] ||\n          this.heap[k] > this.heap[2 * k + 1]\n        ) {\n          minIndex =\n            this.heap[2 * k] < this.heap[2 * k + 1] ? 2 * k : 2 * k + 1;\n        } else {\n          minIndex = k;\n        }\n      }\n      let temp = this.heap[k];\n      this.heap[k] = this.heap[minIndex];\n      this.heap[minIndex] = temp;\n      k = minIndex;\n    }\n  }\n\n  \n  delete() {                                                            // deletes the highest priority value from the heap.\n    let min = this.heap[1];\n    this.heap[1] = this.heap[this.size];\n    this.heap[this.size] = min;\n    this.size--;\n    this.sink();\n    return min;\n  }\n}\n\n\nq = new MinPriorityQueue(8);\n\nq.insert(5);\nq.insert(2);\nq.insert(4);\nq.insert(1);\nq.insert(7);\n\nq.print();                                                              // [ 1, 2, 3, 5, 7, 6, 4, 8 ]\nq.heapSort();\nq.print();                                                              // [ 8, 7, 6, 5, 4, 3, 2, 1 ]\n`.trim()\n\n\nclass Heap extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Hash Table</h3>\n              <img src={Hash} alt=\"DeadLock\" className=\"responsive\" style={redesign} />\n              <ul>\n                <li>\n                  A Hash Table is a dictionary-like structure that pairs keys/ values. The location in\n                  memory of each pair is determined by a hash function, which accepts a key and returns the\n                  address where the value should be inserted and retrieved. Collisions can result if two/\n                  more keys convert to the same address. For robustness, getters and setters should\n                  anticipate these events to ensure that all data can be recovered and no data is\n                  overwritten.\n                </li>\n                <br />\n\n                <li>\n                  If we know our addresses will be in integer sequences, we can simply use Arrays to store\n                  our key-value pairs. For more complex address mappings, we can use Maps or Objects. Hash\n                  tables have insertion and lookup of constant time on average. Because of collisions and\n                  resizing.\n                </li>\n              </ul>\n              <br />\n\n              <h3>Heap</h3>\n              <img src={Hips} alt=\"DeadLock\" className=\"responsive\" style={redesign} />\n              <br />\n\n              <b>Minimum Priority Queue: </b>\n              <ul>\n                <li>It is a part of heap data structure</li>\n                <li>\n                  A heap is a specific tree based data structure in which all the nodes of tree are in a specific order.\n                  that is the children are arranged in some  respect of their parents, can either be greater/ less than the parent. This makes\n                  it a min priority queue or max priority queue.\n                </li>\n                <br />\n              </ul>\n\n              <b>Functions: </b>insert, delete, peek, isEmpty, print, heapSort, sink etc.\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={heap}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Heap));\n"]},"metadata":{},"sourceType":"module"}