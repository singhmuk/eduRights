{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../styles.css';import Sidebar from'../sidebar';import PrismCode from'../prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var useDocumentTitle=\"\\n//Count\\nconst App = () => {\\n  const [count, setCount]=useState(0);\\n  const [toggle, setIsPouse]=useState(false);\\n\\n  const handlePouse=()=>{\\n    setIsPouse(!toggle)\\n    console.log(toggle,\\\"toggle\\\")\\n  }\\n\\n  const handleCount=()=>{\\n    if(toggle==true){\\n      setCount(count+1)\\n    }\\n    else{\\n      setCount(count-1)\\n    }\\n  }\\n\\n  const reset=()=>{\\n    setCount(0)\\n  }\\n\\n  return(\\n    <div>\\n      {count}<br/>\\n      <button onClick={handleCount}>count</button>\\n      <button onClick={handlePouse}>Pouse</button>\\n      <button onClick={reset}>Reset</button>\\n    </div>\\n  )\\n}\\n\\n\\n//Progress\\nconst App =() => {\\n  const [count, setCount]=useState(0)\\n  const [text,setText]=useState('Reach Maximum')\\n\\n  const handleProgress = () => {\\n    if(count<100){\\n      setCount(count+10)\\n    }\\n    else{\\n      setText(text)\\n    }\\n  }\\n\\n  return(\\n    <div>\\n      {count<100 ? count: text}<br/>\\n      <button onClick={handleProgress}>Progress</button>\\n    </div>\\n  )\\n}\\n\".trim();var DocTitleOne=\"\\n//Counter.js\\nimport React, { useState, useMemo } from 'react'\\n\\nfunction Counter() {\\n    const [counterOne, setCounterOne] = useState(0)\\n    const [counterTwo, setCounterTwo] = useState(0)\\n\\n    const incrementOne = () => {\\n        setCounterOne(counterOne + 1)\\n        }\\n\\n    const incrementTwo = () => {\\n        setCounterTwo(counterTwo + 1)\\n        }\\n\\n    const isEven = useMemo(() => {\\n      let i = 0\\n      while (i < 2000000000) i++\\n          return counterOne % 2 === 0\\n        }, [counterOne])\\n\\n    return (\\n      <div>\\n        <div>\\n          <button onClick={incrementOne}>Count One - {counterOne}</button>\\n            <span>{isEven ? 'Even' : 'Odd'}</span>\\n            </div>\\n            <div>\\n          <button onClick={incrementTwo}>Count Two - {counterTwo}</button>\\n        </div>\\n      </div>\\n    )\\n}\\n\\nexport default Counter;\\n\".trim();var customs=\"\\nfunction useFetch(url) {\\n  const [data, setData] = useState([]);\\n\\n  useEffect(() => {\\n    fetch(url)\\n      .then(response => response.json())\\n      .then(data => setData(data));\\n  }, []);\\n\\n  return data;\\n}\\n\\n// import useFetch from \\\"./useFetch\\\";\\nfunction App(props) {\\n  const data = useFetch(\\\"https://jsonplaceholder.typicode.com/posts\\\");\\n  return (\\n    <div>\\n      <ul>\\n        {data.map(el => (\\n          <li key={el.id}>{el.title}</li>\\n        ))}\\n      </ul>\\n    </div>\\n  );\\n}\".trim();var CustomHooks=/*#__PURE__*/function(_Component){_inherits(CustomHooks,_Component);function CustomHooks(){_classCallCheck(this,CustomHooks);return _possibleConstructorReturn(this,_getPrototypeOf(CustomHooks).apply(this,arguments));}_createClass(CustomHooks,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Custom Hooks\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:useDocumentTitle,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Explain why and when would you use useMemo()?\"),\"In the lifecycle of a component, React re-renders the component when an update is made. When React checks for any changes in a component, it may detect an unintended or unexpected change due to how JavaScript handles equality and shallow comparisons. This change in the React application will cause it to re-render unnecessarily.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"useMemo takes in a function and an array of dependencies. The dependency\\u2019s list are the elements useMemo watches: if there are no changes, the function result will stay the same. Otherwise, it will re-run the function. If they don\\u2019t change, it doesn\\u2019t matter if our entire component re-renders, the function won\\u2019t re-run but instead return the stored result.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:DocTitleOne,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Custom Hooks\"),React.createElement(\"p\",null,\"Instead of HOCs and render props, we can encapsulate our logic in a React hook and then import that hook whenever we feel the need. In our example we can create a custom hooks for fetching data. A custom hook is a JavaScript function whose name starts with \\\"use\\\".\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:customs,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return CustomHooks;}(Component);export default withStyles(styles)(CustomHooks);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/customHooks.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","useDocumentTitle","trim","DocTitleOne","customs","CustomHooks","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,eAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,cAAtB,CAGA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,eAAe,CAAE,SAAnB,CAA8BC,OAAO,CAAE,KAAvC,CAA8CC,QAAQ,CAAE,MAAxD,CAAf,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,KAAK,CAAE,CACLC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH,CAELN,OAAO,CAAEG,KAAK,CAACG,OAAN,CAAc,CAAd,CAFJ,CADgB,CAKvBC,QAAQ,CAAE,CACRF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA,CALa,CAQvBE,SAAS,CAAE,CACTC,SAAS,CAAE,QADF,CARY,CAAL,EAApB,CAaA,GAAMC,CAAAA,gBAAgB,CAAG,8+BAwDvBC,IAxDuB,EAAzB,CA0DA,GAAMC,CAAAA,WAAW,CAAG,+2BAoClBD,IApCkB,EAApB,CAsCA,GAAME,CAAAA,OAAO,CAAG,ggBAyBbF,IAzBa,EAAhB,C,GA6BMG,CAAAA,W,+SACgB,CAClBC,UAAU,CAAC,iBAAMxB,CAAAA,KAAK,CAACyB,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAACb,KAA1B,EACE,8BAAI,oBAAC,OAAD,MAAJ,CADF,CADF,CADF,CAOE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEa,OAAO,CAACb,KAA1B,EACE,oBAAC,IAAD,MACE,6CADF,CAEE,2BAAK,KAAK,CAAEN,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEY,gBADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAFF,CASE,8BATF,CAWE,8EAXF,6UAeE,8BAfF,CAgBE,8BAhBF,8XAqBE,2BAAK,KAAK,CAAEZ,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEc,WADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CArBF,CA4BE,8BA5BF,CA8BE,6CA9BF,CA+BE,ySA/BF,CAoCE,2BAAK,KAAK,CAAEd,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEe,OADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CApCF,CADF,CADF,CAPF,CADF,CA0DD,C,yBAhEuBvB,S,EAmE1B,cAAgBI,CAAAA,UAAU,CAACQ,MAAD,CAAV,CAAmBY,WAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst useDocumentTitle = `\n//Count\nconst App = () => {\n  const [count, setCount]=useState(0);\n  const [toggle, setIsPouse]=useState(false);\n\n  const handlePouse=()=>{\n    setIsPouse(!toggle)\n    console.log(toggle,\"toggle\")\n  }\n\n  const handleCount=()=>{\n    if(toggle==true){\n      setCount(count+1)\n    }\n    else{\n      setCount(count-1)\n    }\n  }\n\n  const reset=()=>{\n    setCount(0)\n  }\n\n  return(\n    <div>\n      {count}<br/>\n      <button onClick={handleCount}>count</button>\n      <button onClick={handlePouse}>Pouse</button>\n      <button onClick={reset}>Reset</button>\n    </div>\n  )\n}\n\n\n//Progress\nconst App =() => {\n  const [count, setCount]=useState(0)\n  const [text,setText]=useState('Reach Maximum')\n\n  const handleProgress = () => {\n    if(count<100){\n      setCount(count+10)\n    }\n    else{\n      setText(text)\n    }\n  }\n\n  return(\n    <div>\n      {count<100 ? count: text}<br/>\n      <button onClick={handleProgress}>Progress</button>\n    </div>\n  )\n}\n`.trim()\n\nconst DocTitleOne = `\n//Counter.js\nimport React, { useState, useMemo } from 'react'\n\nfunction Counter() {\n    const [counterOne, setCounterOne] = useState(0)\n    const [counterTwo, setCounterTwo] = useState(0)\n\n    const incrementOne = () => {\n        setCounterOne(counterOne + 1)\n        }\n\n    const incrementTwo = () => {\n        setCounterTwo(counterTwo + 1)\n        }\n\n    const isEven = useMemo(() => {\n      let i = 0\n      while (i < 2000000000) i++\n          return counterOne % 2 === 0\n        }, [counterOne])\n\n    return (\n      <div>\n        <div>\n          <button onClick={incrementOne}>Count One - {counterOne}</button>\n            <span>{isEven ? 'Even' : 'Odd'}</span>\n            </div>\n            <div>\n          <button onClick={incrementTwo}>Count Two - {counterTwo}</button>\n        </div>\n      </div>\n    )\n}\n\nexport default Counter;\n`.trim();\n\nconst customs = `\nfunction useFetch(url) {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetch(url)\n      .then(response => response.json())\n      .then(data => setData(data));\n  }, []);\n\n  return data;\n}\n\n// import useFetch from \"./useFetch\";\nfunction App(props) {\n  const data = useFetch(\"https://jsonplaceholder.typicode.com/posts\");\n  return (\n    <div>\n      <ul>\n        {data.map(el => (\n          <li key={el.id}>{el.title}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}`.trim();\n\n\n\nclass CustomHooks extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Custom Hooks</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={useDocumentTitle}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Explain why and when would you use useMemo()?</h3>\n              In the lifecycle of a component, React re-renders the component when an update is made. When React checks for any \n              changes in a component, it may detect an unintended or unexpected change due to how JavaScript handles equality \n              and shallow comparisons. This change in the React application will cause it to re-render unnecessarily.\n              <br/>\n              <br/>\n              useMemo takes in a function and an array of dependencies. The dependency’s list are the elements useMemo watches: \n              if there are no changes, the function result will stay the same. Otherwise, it will re-run the function. If they \n              don’t change, it doesn’t matter if our entire component re-renders, the function won’t re-run but instead return \n              the stored result.\n              <div style={titles}>\n                <PrismCode\n                  code={DocTitleOne}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Custom Hooks</h3>\n              <p>\n                Instead of HOCs and render props, we can encapsulate our logic in a React hook and then import that hook whenever\n                we feel the need. In our example we can create a custom hooks for fetching data.\n                A custom hook is a JavaScript function whose name starts with \"use\".\n                     </p>\n              <div style={titles}>\n                <PrismCode\n                  code={customs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(CustomHooks));\n"]},"metadata":{},"sourceType":"module"}