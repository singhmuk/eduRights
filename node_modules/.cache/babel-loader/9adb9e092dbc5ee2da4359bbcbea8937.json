{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/angularjs/angular 12/typeScript_4.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst assertion = `\n1.Using Angular Bracket <>\nlet empCode: any = 111;\nlet employeeCode = <number> empCode;\nconsole.log(typeof(employeeCode));\n\n2.Using as keyword\nlet empCode: any = 111;\nlet employeeCode = empCode as number;\nconsole.log(typeof(employeeCode));\n\n\n//2\nlet arr:string[] = new Array(\"JavaTpoint\", \"2300\", \"Java\", \"Abhishek\");\nfunction display(arr_values:string[]) {\n   for(let i = 0;i<arr_values.length;i++) {\n      console.log(arr[i]);\n   }\n}\n\ndisplay(arr); `.trim();\nconst modifier = `\n//Public\nclass Student {  \n    public studCode: number;  \n    studName: string;  \n}  \n  \nlet stud = new Student();  \nstud.studCode = 101;  \nstud.studName = \"Joe Root\";  \n  \nconsole.log(stud.studCode+ \" \"+stud.studName);  \n\n\n//Private\nclass Student {  \npublic studCode: number;  \nprivate studName: string;  \n\nconstructor(code: number, name: string){  \nthis.studCode = code;  \nthis.studName = name;  \n}  \n\npublic display() {  \nreturn ('My unique code: '$'{this.studCode}, my name: '$'{this.studName}.');  \n    }  \n}  \n  \nlet student: Student = new Student(1, \"JoeRoot\");  \nconsole.log(student.display());  \n\n\n//Protected\nclass Student {  \n    public studCode: number;  \n    protected studName: string;  \n    constructor(code: number, name: string){  \n        this.studCode = code;  \n        this.studName = name;  \n        }  \n}  \nclass Person extends Student {  \n    private department: string;  \n  \n    constructor(code: number, name: string, department: string) {  \n        super(code, name);  \n        this.department = department;  \n    }  \n    public getElevatorPitch() {  \n        return ('My unique code: '$'{this.studCode}, my name: '$'{this.studName} \n        and I am in '$'{this.department} Branch.');\n    }\n}\nlet joeRoot: Person = new Person(1, \"JoeRoot\", \"CS\");\nconsole.log(joeRoot.getElevatorPitch());`.trim();\nconst accessor = `\n//getter\nclass MyDrawing {\n    length: number = 20;\n    breadth: number = 15;\n\n    get rectangle() {\n        return this.length * this.breadth;\n    }\n}\nconsole.log(new MyDrawing().rectangle);\n\n\n//setter\nlet passcode = \"secret passcode\";\n\nclass Student {\n    private _fullName: string;\n\n    get fullName(): string {\n        return this._fullName;\n    }\n\n    set fullName(newName: string) {\n        if (passcode && passcode == \"secret passcode\") {\n            this._fullName = newName;\n        }\n        else {\n            console.log(\"Unauthorized update of student detail!\");\n        }\n    }\n}\n\nlet stud = new Student();\nstud.fullName = \"Virat Kohli\";\nif (stud.fullName) {\n    console.log(stud.fullName);\n}`.trim();\nconst sortArr = ``.trim();\nconst missingVal = ``.trim();\nconst palindroms = ``.trim();\nconst duplicates = ``.trim();\n\nclass TypeScript4 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"1. Type assertion\"), \"Type assertion is explicitly telling the compiler that we want to treat the entity as a different type. It allows us to treat any as a number, or number as a string.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), \"By default type is any.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), \"we tell typescript compiler declayed data type is called type assertion.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"TypeScript provides two ways to do Type Assertion.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: assertion,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"2. Access Modifier\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"Public: \"), \"We can access this data member anywhere without any restriction.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"Private: \"), \"It ensures that the class members are visible only to that class in which it is containing.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"Protected: \"), \"A Protected access modifier can be accessed only within the class and its subclass. We cannot access it from the outside of a class in which it is containing.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: modifier,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \"3. TypeScript Accessor\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: accessor,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, \"4. SortArr\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: sortArr,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, \"5. MissingVal\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: missingVal,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, \"6. palindroms\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: palindroms,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, \"4.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: accessor,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(TypeScript4);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/angularjs/angular 12/typeScript_4.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","assertion","trim","modifier","accessor","sortArr","missingVal","palindroms","duplicates","TypeScript4","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\n\n\nconst assertion = `\n1.Using Angular Bracket <>\nlet empCode: any = 111;\nlet employeeCode = <number> empCode;\nconsole.log(typeof(employeeCode));\n\n2.Using as keyword\nlet empCode: any = 111;\nlet employeeCode = empCode as number;\nconsole.log(typeof(employeeCode));\n\n\n//2\nlet arr:string[] = new Array(\"JavaTpoint\", \"2300\", \"Java\", \"Abhishek\");\nfunction display(arr_values:string[]) {\n   for(let i = 0;i<arr_values.length;i++) {\n      console.log(arr[i]);\n   }\n}\n\ndisplay(arr); `.trim();\n\n\nconst modifier = `\n//Public\nclass Student {  \n    public studCode: number;  \n    studName: string;  \n}  \n  \nlet stud = new Student();  \nstud.studCode = 101;  \nstud.studName = \"Joe Root\";  \n  \nconsole.log(stud.studCode+ \" \"+stud.studName);  \n\n\n//Private\nclass Student {  \npublic studCode: number;  \nprivate studName: string;  \n\nconstructor(code: number, name: string){  \nthis.studCode = code;  \nthis.studName = name;  \n}  \n\npublic display() {  \nreturn ('My unique code: '$'{this.studCode}, my name: '$'{this.studName}.');  \n    }  \n}  \n  \nlet student: Student = new Student(1, \"JoeRoot\");  \nconsole.log(student.display());  \n\n\n//Protected\nclass Student {  \n    public studCode: number;  \n    protected studName: string;  \n    constructor(code: number, name: string){  \n        this.studCode = code;  \n        this.studName = name;  \n        }  \n}  \nclass Person extends Student {  \n    private department: string;  \n  \n    constructor(code: number, name: string, department: string) {  \n        super(code, name);  \n        this.department = department;  \n    }  \n    public getElevatorPitch() {  \n        return ('My unique code: '$'{this.studCode}, my name: '$'{this.studName} \n        and I am in '$'{this.department} Branch.');\n    }\n}\nlet joeRoot: Person = new Person(1, \"JoeRoot\", \"CS\");\nconsole.log(joeRoot.getElevatorPitch());`.trim();\n\nconst accessor = `\n//getter\nclass MyDrawing {\n    length: number = 20;\n    breadth: number = 15;\n\n    get rectangle() {\n        return this.length * this.breadth;\n    }\n}\nconsole.log(new MyDrawing().rectangle);\n\n\n//setter\nlet passcode = \"secret passcode\";\n\nclass Student {\n    private _fullName: string;\n\n    get fullName(): string {\n        return this._fullName;\n    }\n\n    set fullName(newName: string) {\n        if (passcode && passcode == \"secret passcode\") {\n            this._fullName = newName;\n        }\n        else {\n            console.log(\"Unauthorized update of student detail!\");\n        }\n    }\n}\n\nlet stud = new Student();\nstud.fullName = \"Virat Kohli\";\nif (stud.fullName) {\n    console.log(stud.fullName);\n}`.trim();\n\nconst sortArr = ``.trim();\n\nconst missingVal = ``.trim();\n\nconst palindroms = ``.trim();\n\nconst duplicates = ``.trim();\n\n\nclass TypeScript4 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Type assertion</h3>\n              Type assertion is explicitly telling the compiler that we want to treat the entity as a different type. It allows us to treat any\n              as a number, or number as a string.\n              <br />\n              By default type is any.<br />\n              we tell typescript compiler declayed data type is called type assertion.\n              <br />\n              <br />\n              <b>TypeScript provides two ways to do Type Assertion.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={assertion}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n\n\n              <h3>2. Access Modifier</h3>\n              <ul>\n                <li><b>Public: </b>We can access this data member anywhere without any restriction.</li>\n                <li><b>Private: </b>It ensures that the class members are visible only to that class in which it is containing.</li>\n                <li><b>Protected: </b>A Protected access modifier can be accessed only within the class and its subclass. We cannot access it\n                  from the outside of a class in which it is containing.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={modifier}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. TypeScript Accessor</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={accessor}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. SortArr</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={sortArr}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. MissingVal</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={missingVal}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. palindroms</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={palindroms}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={accessor}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(TypeScript4));\n"]},"metadata":{},"sourceType":"module"}