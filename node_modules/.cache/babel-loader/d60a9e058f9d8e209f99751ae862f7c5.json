{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/mongoDB/deepMongodb/joinOp.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst joinModel = `\nvar dbConn = require('../config/db');\n\nvar Order = function (orders) {\n  this.items = orders.items;\n  this.price = orders.price;\n  this.qty = orders.qty;\n  this.created_at = orders.created_at;\n  this.updated_at = orders.updated_at;\n};\n\n//join 2 tables\nOrder.findAll = (result) => {\n  dbConn.query(\"select orders.id, orders.items from Orders JOIN products on products.id = Orders.id\", function (err, res) {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//SELECT DISTINCT\nOrder.findAll = function (result) {\n  dbConn.query(\"Select DISTINCT items from orders\", (err, res) => {\n    if (err)\n        result(null, err);\n      result(null, res);\n  });\n};\n\n//WHERE Clause\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items='One'\", (err, res) => {\n    if (err)\n        result(null, err);\n      result(null, res);\n  });\n};\n\n//AND\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items='One' AND price='100'\", function (err, res) {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//OR\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * DISTINCT items from orders WHERE items='One' OR price='100'\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//NOT\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE NOT items='One'\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//ORDER BY Keyword\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders ORDER BY items\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//ORDER BY DESC Keyword\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders ORDER BY items ASC, price DESC\", (err, res) => {\n    if (err)\n        result(null, err);\n      result(null, res);\n  });\n};\n\n//IS NULL\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items IS NULL\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//IS NOT NULL\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items IS NOT NULL\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//LIMIT\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders LIMIT 3\", (err, res) => {\n    if (err)\n        result(null, err);\n      result(null, res);\n  });\n};\n\n//MIN() \nOrder.findAll = (result) => {\n  dbConn.query(\"Select MIN(price) AS SmallestPrice from orders\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//MAX()\nOrder.findAll = (result) => {\n  dbConn.query(\"Select MAX(price) AS LargestPrice from orders\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//COUNT()\nOrder.findAll = (result) => {\n  dbConn.query(\"Select COUNT(items) from orders\", (err, res) => {\n    if (err)\n        result(null, err);\n      result(null, res);\n  });\n};\n\n//AVG()\nOrder.findAll = (result) => {\n  dbConn.query(\"Select AVG(items) from orders\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//SUM()\nOrder.findAll = (result) => {\n  dbConn.query(\"Select SUM(qty) from orders\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//LIKE\n//The following SQL statement selects all customers with a CustomerName starting with \"a\"\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items LIKE 'a%'\", (err, res) => {\n    if (err)\n        result(null, err);\n      result(null, res);\n  });\n};\n\n//The following SQL statement selects all customers with a CustomerName ending with \"a\"\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items LIKE '%a'\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//The following SQL statement selects all customers with a CustomerName that have \"or\" in any position\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items LIKE '%On%'\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//The following SQL statement selects all customers with a CustomerName that have \"r\" in the second position\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items LIKE '_r%'\", (err, res) => {\n    if (err)\n        result(null, err);\n      result(null, res);\n  });\n};\n\n//The following SQL statement selects all customers with a CustomerName that starts with \"a\" and are at least 3 characters in length:\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items LIKE 'a__%'\", (err, res) => {\n    if (err)\n        result(null, err);\n      result(null, res);\n  });\n};\n\n//The following SQL statement selects all customers with a ContactName that starts with \"a\" and ends with \"o\"\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items LIKE 'a%o'\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//The following SQL statement selects all customers with a CustomerName that does NOT start with \"a\"\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items LIKE 'a%'\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n\n//Wildcards: A wildcard character is used to substitute one or more characters in a string\n//Wildcard characters are used with the LIKE operator. The LIKE operator is used in a WHERE clause to search for a specified pattern in a column\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items LIKE '%se%'\", (err, res) => {\n    if (err)\n        result(null, err);\n      result(null, res);\n  });\n};\n\n//The following SQL statement selects all customers with a City starting with any character, followed by \"ondon\"\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items LIKE '_ondon'\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//The following SQL statement selects all customers with a City starting with \"L\", followed by any character, followed by \"n\", followed by any character, followed by \"on\"\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items LIKE 'L_n_on'\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//he following SQL statement selects all customers with a City starting with \"b\", \"s\", or \"p\"\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items LIKE '[bsp]%'\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//selects all customers with a City starting with \"a\", \"b\", or \"c\"\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items LIKE '[a-c]%'\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//select all customers with a City NOT starting with \"b\", \"s\", or \"p\"\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items NOT LIKE '[bsp]%'\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//IN operator allows you to specify multiple values in a WHERE clause\n//IN operator is a shorthand for multiple OR conditions.\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items IN ('One', 'Two', 'Three')\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE price BETWEEN 10 AND 20\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//NOT BETWEEN\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE price NOT BETWEEN 10 AND 20\", (err, res) => {\n    if (err)\n        result(null, err);\n      result(null, res);\n  });\n};\n\n//BETWEEN with IN\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE price BETWEEN 10 AND 20 AND ID NOT IN (1,2,3)\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//BETWEEN Text\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items BETWEEN 'Seconds' AND 'Three' ORDER BY items\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//INNER JOIN\n/*\nThe INNER JOIN keyword selects all rows from both tables as long as there is a match between the \ncolumns. If there are records in the \"Orders\" table that do not have matches in \"Customers\", \nthese orders will not be shown!\n*/\nOrder.findAll = (result) => {\n  dbConn.query(\"select orders.id, products.items from Orders INNER JOIN products on orders.id = products.id\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//LEFT JOIN\n//returns all records from the left table (table1), and the matching records from the right table (table2).\nOrder.findAll = (result) => {\n  dbConn.query(\"select orders.id, products.items from Orders LEFT JOIN products on orders.id = products.id\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//RIGHT JOIN\n//returns all records from the right table (table2), and the matching records from the left table (table1). \nOrder.findAll = (result) => {\n  dbConn.query(\"select orders.id, products.title from orders RIGHT JOIN products on orders.id = products.id\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};`.trim();\nconst joinConrollers = `\nrouter.findAll = (req, res) => {\n  JoinOp.findAll((err, product) => {\n    if (err)\n      res.send(err);\n    res.send(product);\n  });\n};\n\nrouter.findById = (req, res) => {\n  JoinOp.findById(req.params.id, (err, employee) => {\n    if (err)\n      res.send(err);\n    res.json(employee);\n  });\n};`.trim();\nconst joinRoutes = `\nconst joinOpController = require('../controllers/joinOp');\n\nrouter.get('/', joinOpController.findAll);\nrouter.get('/:id', joinOpController.findById);`.trim();\nconst bodyData = `\nrouter.post('/', (req,res)=>{\n    console.log(req.body)\n    res.send(req.body)\n  })\n\nrouter.get('/', (req,res)=>{\n    res.send(req.body)\n  })`.trim();\nconst bcryptjs = `\nconst express = require(\"express\");\nconst app = express();\nconst cors = require(\"cors\");\n\nconst session = require(\"express-session\");\nconst bcrypt = require(\"bcryptjs\");\nvar dbConn = require('../config/db');\n\nconst saltRounds = 10;\n\n\napp.use(express.json());\napp.use(\n  cors({\n    origin: [\"http://localhost:3000\"],\n    methods: [\"GET\", \"POST\"],\n    credentials: true,\n  })\n);\napp.use(express.urlencoded({ extended: true }));\n\napp.use(\n  session({\n    key: \"userId\",\n    secret: \"subscribe\",\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      expires: 60 * 60 * 24,\n    },\n  })\n);\n\napp.post(\"/register\", (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n\n  bcrypt.hash(password, saltRounds, (err, hash) => {\n    if (err) {\n      console.log(err);\n    }\n\n    dbConn.query(\n      \"INSERT INTO users (username, password) VALUES (?,?)\",\n      [username, hash],\n      (err, result) => {\n        console.log(err);\n      }\n    );\n  });\n});\n\napp.get(\"/login\", (req, res) => {\n  if (req.session.user) {\n    res.send({ loggedIn: true, user: req.session.user });\n  } else {\n    res.send({ loggedIn: false });\n  }\n});\n\napp.post(\"/login\", (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n\n  dbConn.query(\n    \"SELECT * FROM users WHERE username = ?;\",\n    username,\n    (err, result) => {\n      if (err) {\n        res.send({ err: err });\n      }\n\n      if (result.length > 0) {\n        bcrypt.compare(password, result[0].password, (error, response) => {\n          if (response) {\n            req.session.user = result;\n            console.log(req.session.user);\n            res.send(result);\n          } else {\n            res.send({ message: \"Wrong username/password combination!\" });\n          }\n        });\n      } else {\n        res.send({ message: \"User doesn't exist\" });\n      }\n    }\n  );\n});\n\n\nmodule.exports = app;`.trim();\n\nclass JoinOp extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    }, \"Join\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    }, \"models/joinOp\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: joinModel,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }, \"controllers/joinOp\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: joinConrollers,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }, \"routes/joinOp\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: joinRoutes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558\n      },\n      __self: this\n    }, \"pass data in body\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558\n      },\n      __self: this\n    }), \"We'll also send data in request inside body. Data pass in body is hidden, we can't see in url. In signUp form we will send data in body. We used generaly Post() for passing data in body, Post request last part is body.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: bodyData,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572\n      },\n      __self: this\n    }, \"bcryptjs\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: bcryptjs,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(JoinOp);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/mongoDB/deepMongodb/joinOp.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","joinModel","trim","joinConrollers","joinRoutes","bodyData","bcryptjs","JoinOp","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst joinModel = `\nvar dbConn = require('../config/db');\n\nvar Order = function (orders) {\n  this.items = orders.items;\n  this.price = orders.price;\n  this.qty = orders.qty;\n  this.created_at = orders.created_at;\n  this.updated_at = orders.updated_at;\n};\n\n//join 2 tables\nOrder.findAll = (result) => {\n  dbConn.query(\"select orders.id, orders.items from Orders JOIN products on products.id = Orders.id\", function (err, res) {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//SELECT DISTINCT\nOrder.findAll = function (result) {\n  dbConn.query(\"Select DISTINCT items from orders\", (err, res) => {\n    if (err)\n        result(null, err);\n      result(null, res);\n  });\n};\n\n//WHERE Clause\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items='One'\", (err, res) => {\n    if (err)\n        result(null, err);\n      result(null, res);\n  });\n};\n\n//AND\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items='One' AND price='100'\", function (err, res) {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//OR\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * DISTINCT items from orders WHERE items='One' OR price='100'\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//NOT\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE NOT items='One'\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//ORDER BY Keyword\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders ORDER BY items\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//ORDER BY DESC Keyword\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders ORDER BY items ASC, price DESC\", (err, res) => {\n    if (err)\n        result(null, err);\n      result(null, res);\n  });\n};\n\n//IS NULL\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items IS NULL\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//IS NOT NULL\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items IS NOT NULL\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//LIMIT\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders LIMIT 3\", (err, res) => {\n    if (err)\n        result(null, err);\n      result(null, res);\n  });\n};\n\n//MIN() \nOrder.findAll = (result) => {\n  dbConn.query(\"Select MIN(price) AS SmallestPrice from orders\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//MAX()\nOrder.findAll = (result) => {\n  dbConn.query(\"Select MAX(price) AS LargestPrice from orders\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//COUNT()\nOrder.findAll = (result) => {\n  dbConn.query(\"Select COUNT(items) from orders\", (err, res) => {\n    if (err)\n        result(null, err);\n      result(null, res);\n  });\n};\n\n//AVG()\nOrder.findAll = (result) => {\n  dbConn.query(\"Select AVG(items) from orders\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//SUM()\nOrder.findAll = (result) => {\n  dbConn.query(\"Select SUM(qty) from orders\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//LIKE\n//The following SQL statement selects all customers with a CustomerName starting with \"a\"\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items LIKE 'a%'\", (err, res) => {\n    if (err)\n        result(null, err);\n      result(null, res);\n  });\n};\n\n//The following SQL statement selects all customers with a CustomerName ending with \"a\"\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items LIKE '%a'\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//The following SQL statement selects all customers with a CustomerName that have \"or\" in any position\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items LIKE '%On%'\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//The following SQL statement selects all customers with a CustomerName that have \"r\" in the second position\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items LIKE '_r%'\", (err, res) => {\n    if (err)\n        result(null, err);\n      result(null, res);\n  });\n};\n\n//The following SQL statement selects all customers with a CustomerName that starts with \"a\" and are at least 3 characters in length:\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items LIKE 'a__%'\", (err, res) => {\n    if (err)\n        result(null, err);\n      result(null, res);\n  });\n};\n\n//The following SQL statement selects all customers with a ContactName that starts with \"a\" and ends with \"o\"\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items LIKE 'a%o'\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//The following SQL statement selects all customers with a CustomerName that does NOT start with \"a\"\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items LIKE 'a%'\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n\n//Wildcards: A wildcard character is used to substitute one or more characters in a string\n//Wildcard characters are used with the LIKE operator. The LIKE operator is used in a WHERE clause to search for a specified pattern in a column\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items LIKE '%se%'\", (err, res) => {\n    if (err)\n        result(null, err);\n      result(null, res);\n  });\n};\n\n//The following SQL statement selects all customers with a City starting with any character, followed by \"ondon\"\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items LIKE '_ondon'\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//The following SQL statement selects all customers with a City starting with \"L\", followed by any character, followed by \"n\", followed by any character, followed by \"on\"\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items LIKE 'L_n_on'\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//he following SQL statement selects all customers with a City starting with \"b\", \"s\", or \"p\"\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items LIKE '[bsp]%'\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//selects all customers with a City starting with \"a\", \"b\", or \"c\"\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items LIKE '[a-c]%'\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//select all customers with a City NOT starting with \"b\", \"s\", or \"p\"\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items NOT LIKE '[bsp]%'\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//IN operator allows you to specify multiple values in a WHERE clause\n//IN operator is a shorthand for multiple OR conditions.\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items IN ('One', 'Two', 'Three')\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE price BETWEEN 10 AND 20\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//NOT BETWEEN\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE price NOT BETWEEN 10 AND 20\", (err, res) => {\n    if (err)\n        result(null, err);\n      result(null, res);\n  });\n};\n\n//BETWEEN with IN\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE price BETWEEN 10 AND 20 AND ID NOT IN (1,2,3)\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//BETWEEN Text\nOrder.findAll = (result) => {\n  dbConn.query(\"Select * from orders WHERE items BETWEEN 'Seconds' AND 'Three' ORDER BY items\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//INNER JOIN\n/*\nThe INNER JOIN keyword selects all rows from both tables as long as there is a match between the \ncolumns. If there are records in the \"Orders\" table that do not have matches in \"Customers\", \nthese orders will not be shown!\n*/\nOrder.findAll = (result) => {\n  dbConn.query(\"select orders.id, products.items from Orders INNER JOIN products on orders.id = products.id\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//LEFT JOIN\n//returns all records from the left table (table1), and the matching records from the right table (table2).\nOrder.findAll = (result) => {\n  dbConn.query(\"select orders.id, products.items from Orders LEFT JOIN products on orders.id = products.id\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};\n\n//RIGHT JOIN\n//returns all records from the right table (table2), and the matching records from the left table (table1). \nOrder.findAll = (result) => {\n  dbConn.query(\"select orders.id, products.title from orders RIGHT JOIN products on orders.id = products.id\", (err, res) => {\n    if (err) \n        result(null, err);\n      result(null, res);\n  });\n};`.trim();\n\nconst joinConrollers = `\nrouter.findAll = (req, res) => {\n  JoinOp.findAll((err, product) => {\n    if (err)\n      res.send(err);\n    res.send(product);\n  });\n};\n\nrouter.findById = (req, res) => {\n  JoinOp.findById(req.params.id, (err, employee) => {\n    if (err)\n      res.send(err);\n    res.json(employee);\n  });\n};`.trim();\n\nconst joinRoutes = `\nconst joinOpController = require('../controllers/joinOp');\n\nrouter.get('/', joinOpController.findAll);\nrouter.get('/:id', joinOpController.findById);`.trim();\n\nconst bodyData = `\nrouter.post('/', (req,res)=>{\n    console.log(req.body)\n    res.send(req.body)\n  })\n\nrouter.get('/', (req,res)=>{\n    res.send(req.body)\n  })`.trim();\n\nconst bcryptjs = `\nconst express = require(\"express\");\nconst app = express();\nconst cors = require(\"cors\");\n\nconst session = require(\"express-session\");\nconst bcrypt = require(\"bcryptjs\");\nvar dbConn = require('../config/db');\n\nconst saltRounds = 10;\n\n\napp.use(express.json());\napp.use(\n  cors({\n    origin: [\"http://localhost:3000\"],\n    methods: [\"GET\", \"POST\"],\n    credentials: true,\n  })\n);\napp.use(express.urlencoded({ extended: true }));\n\napp.use(\n  session({\n    key: \"userId\",\n    secret: \"subscribe\",\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      expires: 60 * 60 * 24,\n    },\n  })\n);\n\napp.post(\"/register\", (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n\n  bcrypt.hash(password, saltRounds, (err, hash) => {\n    if (err) {\n      console.log(err);\n    }\n\n    dbConn.query(\n      \"INSERT INTO users (username, password) VALUES (?,?)\",\n      [username, hash],\n      (err, result) => {\n        console.log(err);\n      }\n    );\n  });\n});\n\napp.get(\"/login\", (req, res) => {\n  if (req.session.user) {\n    res.send({ loggedIn: true, user: req.session.user });\n  } else {\n    res.send({ loggedIn: false });\n  }\n});\n\napp.post(\"/login\", (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n\n  dbConn.query(\n    \"SELECT * FROM users WHERE username = ?;\",\n    username,\n    (err, result) => {\n      if (err) {\n        res.send({ err: err });\n      }\n\n      if (result.length > 0) {\n        bcrypt.compare(password, result[0].password, (error, response) => {\n          if (response) {\n            req.session.user = result;\n            console.log(req.session.user);\n            res.send(result);\n          } else {\n            res.send({ message: \"Wrong username/password combination!\" });\n          }\n        });\n      } else {\n        res.send({ message: \"User doesn't exist\" });\n      }\n    }\n  );\n});\n\n\nmodule.exports = app;`.trim();\n\n\nclass JoinOp extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Join</h3>\n              <b>models/joinOp</b>\n              <div style={titles}>\n                <PrismCode\n                  code={joinModel}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>controllers/joinOp</b>\n              <div style={titles}>\n                <PrismCode\n                  code={joinConrollers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>routes/joinOp</b>\n              <div style={titles}>\n                <PrismCode\n                  code={joinRoutes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>pass data in body</b><br/>\n              We'll also send data in request inside body. Data pass in body is hidden, we can't see in url. In \nsignUp form we will send data in body. We used generaly Post() for passing data in body, Post request \nlast part is body.\n              <div style={titles}>\n                <PrismCode\n                  code={bodyData}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>bcryptjs</b>\n              <div style={titles}>\n                <PrismCode\n                  code={bcryptjs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(JoinOp));\n"]},"metadata":{},"sourceType":"module"}