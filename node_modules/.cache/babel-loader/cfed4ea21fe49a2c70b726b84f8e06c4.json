{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/pythone/deeppy/mathematics.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst simple_interest = `\ndef simple_interest(p,t,r):\n    si = (p * t * r)/100\n    \n    print('The Simple Interest is', si)\n    return si\n\nsimple_interest(8, 6, 8)\n `.trim();\nconst compound_interest = `\ndef compound_interest(principle, rate, time):\n\n    CI = principle * (pow((1 + rate / 100), time))\n    print(\"Compound interest is\", CI)\n\ncompound_interest(10000, 10.25, 5) `.trim();\nconst format = `\ndef convert24(str1):\n\n    if str1[-2:] == \"AM\" and str1[:2] == \"12\":\n        return \"00\" + str1[2:-2]\n\n    elif str1[-2:] == \"AM\":\n        return str1[:-2]\n\n    elif str1[-2:] == \"PM\" and str1[:2] == \"12\":\n        return str1[:-2]\n\n    else:\n\n        return str(int(str1[:2]) + 12) + str1[2:8]\n\nprint(convert24(\"08:05:45 PM\"))`.trim();\nconst sqrt = `\nprint(bin(25))\nprint(oct(0b11001))\nprint(hex(0b11001))\nprint(int('052', 8))\n\n\n#2\nimport math as m\n\nx=m.sqrt(25)\nprint(x)\n\n\n#3\nx=m.sqrt(15)\nprint(m.floor(x))\nprint(m.ceil(x))`.trim();\nconst pows = `\nimport math\n\nprint(3**2)\nprint(math.pow(3,2))\nprint(math.pi)\n\n\n#2\nfrom math import sqrt, pow\n\nprint(pow(4,5))`.trim();\nconst triangle = `\na = 5\nb = 6\nc = 7\n\ns = (a + b + c) / 2                                                         # calculate the semi-perimeter\n\narea = (s*(s-a)*(s-b)*(s-c)) ** 0.5\nprint('The area of the triangle is %0.2f' %area)`.trim();\nconst hcf = `\ndef hcf(x, y):\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller + 1):\n        if ((x % i == 0) and (y % i == 0)):\n            hcf = i\n    return hcf\n\n\nnum1 = int(input(\"Enter first number: \"))\nnum2 = int(input(\"Enter second number: \"))\nprint(\"The H.C.F. of\", num1, \"and\", num2, \"is\", hcf(num1, num2))`.trim();\nconst largest = `\nnum1 = 10\nnum2 = 14\nnum3 = 12\n\n\nif (num1 >= num2) and (num1 >= num3):\n   largest = num1\nelif (num2 >= num1) and (num2 >= num3):\n   largest = num2\nelse:\n   largest = num3\n\nprint(\"The largest number is\", largest)`.trim();\nconst lcm = `\ndef lcm(x, y):\n    if x > y:\n        greater = y\n    else:\n        greater = x\n    for i in range(1, greater + 1):\n        if ((x % i == 0) and (y % i == 0)):\n            lcm = i\n    return lcm\n\n\nnum1 = int(input(\"Enter first number: \"))\nnum2 = int(input(\"Enter second number: \"))\nprint(\"The L.C.M. of\", num1, \"and\", num2, \"is\", lcm(num1, num2))`.trim();\nconst math_function = `\n\n# Random Number\nimport random\n\nprint(random.randint(0,9))\n\n\n#2 Sum 2 Numbers\nnumber1 = input(\"First number: \")\nnumber2 = input(\"Second number: \")\n\nsum = float(number1) + float(number2)\nprint(\"The sum of {0} and {1} is {2}\" .format(number1, number2, sum))`.trim();\nconst quadratic = `\nimport cmath\n\na = 1\nb = 5\nc = 6\n\nd = (b**2) - (4*a*c)                                                          # calculate the discriminant\n\nsol1 = (-b-cmath.sqrt(d))/(2*a)\nsol2 = (-b+cmath.sqrt(d))/(2*a)\n\nprint('The solution are {0} and {1}'.format(sol1,sol2))`.trim();\nconst reproducable = `\nimport random\n\na = random.random()                                                   # random float in [0,1]\na = random.uniform(1,10)                                              # random float in range [a,b]\na = random.randint(1,10)                                              # random integer in range [a,b]. b is included\na = random.randrange(1,10)                                            # random integer in range [a,b]. b is excluded\n\na = random.normalvariate(0, 1)                               \na = random.choice(list(\"ABCDEFGHI\"))                          \na = random.sample(list(\"ABCDEFGHI\"), 3)                       \na = random.choices(list(\"ABCDEFGHI\"),k=3)                     \n\nprint(a)\n\n\na = list(\"ABCDEFGHI\")\nrandom.shuffle(a)                                                  \nprint(a)`.trim();\nconst seed = `\nimport random\n\nrandom.seed(1)\nprint(random.random())\nprint(random.uniform(1,10))\nprint(random.choice(list(\"ABCDEFGHI\")))\n\nprint('Re-seeding with 42...')\nrandom.seed(42)                                                                     # Re-seed\n`.trim();\nconst secrets = `\nimport secrets\n\na = secrets.randbelow(10)                                             \na = secrets.randbits(5)                                               # return an integer with k random bits.\na = secrets.choice(list(\"ABCDEFGHI\"))\n\nprint(a)`.trim();\nconst pseudorandom = `\nimport numpy as np\n\nnp.random.seed(1)                                        # rand(d0,d1,…,dn)\n\nprint(np.random.rand(3))                                 # generate an array with random floats, arrays has size (d0,d1,…,dn)\nnp.random.seed(1)\nprint(np.random.rand(3))\n\nvalues = np.random.randint(0, 10, (5,3))                # generate an array with random integers in range [a,b) with size n\nprint(values)\n                                        # generate an array with Gaussian values, array has size (d0,d1,…,dn)\n                                        # values from standard normal distribution with mean 0.0 and standard deviation 1.0\nvalues = np.random.randn(5)\nprint(values)\n                                        # randomly shuffle an array.\n                                        # only shuffles the array along the first axis of a multi-dimensional array\narr = np.array([[1,2,3], [4,5,6], [7,8,9]])\nnp.random.shuffle(arr)\nprint(arr)`.trim();\n\nclass Mathematics extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, \"Simple interest\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: simple_interest,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, \"Compound interest\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: compound_interest,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, \"conver_12_to_24_hour_format\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: format,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, \"Sqrt\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: sqrt,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, \"Pows\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: pows,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, \"Area of triangle\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: triangle,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, \"HCF\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: hcf,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, \"Largest number\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: largest,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, \"LCM\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: lcm,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, \"Math Function\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: math_function,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }, \"Quadratic Equation\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: quadratic,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, \"Random Numbers\"), \"Python defines a set of functions that are used to generate or manipulate random numbers.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }, \"the random module\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, \"reproduce numbers with random.seed()\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }, \"create cryptographically strong random numbers with the secrets module\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }, \"create random and arrays with numpy.random\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, \"The random module\"), \"This module implements pseudo-random number generators for various distributions. It uses the Mersenne Twister algorithm as its core generator. It is called pseudo-random, because the numbers seem random, but are reproducable.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, \"normalvariate(): \"), \"random float from a normal distribution with mu and sigma.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, \"choice(): \"), \"choose a random element from a sequence.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, \"choices(): \"), \"choose k elements with replacement, and return k sized list.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, \"sample(): \"), \"choose k unique random elements from a sequence.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, \"shuffle(): \"), \"shuffle list in place.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: reproducable,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }, \"The seed generator\"), \"With random.seed(), you can make results reproducible, and the chain of calls after random.seed() will produce the same trail of data. The sequence of random numbers becomes deterministic, or completely determined by the seed value.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: seed,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }, \"The secrets module\"), \"The secrets module is used for generating cryptographically strong random numbers suitable for managing data such as passwords, account authentication, security tokens, and related secrets.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: secrets,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, \"Random numbers with NumPy\"), \"Create random numbers for and arrays. The NumPy pseudorandom number generator is different from the Python standard library pseudorandom number generator. Importantly, seeding the Python pseudorandom number generator does not impact the NumPy pseudorandom number generator. It must be seeded and used separately.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: pseudorandom,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Mathematics);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/pythone/deeppy/mathematics.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","simple_interest","trim","compound_interest","format","sqrt","pows","triangle","hcf","largest","lcm","math_function","quadratic","reproducable","seed","secrets","pseudorandom","Mathematics","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst simple_interest = `\ndef simple_interest(p,t,r):\n    si = (p * t * r)/100\n    \n    print('The Simple Interest is', si)\n    return si\n\nsimple_interest(8, 6, 8)\n `.trim();\n\nconst compound_interest = `\ndef compound_interest(principle, rate, time):\n\n    CI = principle * (pow((1 + rate / 100), time))\n    print(\"Compound interest is\", CI)\n\ncompound_interest(10000, 10.25, 5) `.trim();\n\nconst format = `\ndef convert24(str1):\n\n    if str1[-2:] == \"AM\" and str1[:2] == \"12\":\n        return \"00\" + str1[2:-2]\n\n    elif str1[-2:] == \"AM\":\n        return str1[:-2]\n\n    elif str1[-2:] == \"PM\" and str1[:2] == \"12\":\n        return str1[:-2]\n\n    else:\n\n        return str(int(str1[:2]) + 12) + str1[2:8]\n\nprint(convert24(\"08:05:45 PM\"))`.trim();\n\nconst sqrt = `\nprint(bin(25))\nprint(oct(0b11001))\nprint(hex(0b11001))\nprint(int('052', 8))\n\n\n#2\nimport math as m\n\nx=m.sqrt(25)\nprint(x)\n\n\n#3\nx=m.sqrt(15)\nprint(m.floor(x))\nprint(m.ceil(x))`.trim();\n\nconst pows = `\nimport math\n\nprint(3**2)\nprint(math.pow(3,2))\nprint(math.pi)\n\n\n#2\nfrom math import sqrt, pow\n\nprint(pow(4,5))`.trim();\n\nconst triangle = `\na = 5\nb = 6\nc = 7\n\ns = (a + b + c) / 2                                                         # calculate the semi-perimeter\n\narea = (s*(s-a)*(s-b)*(s-c)) ** 0.5\nprint('The area of the triangle is %0.2f' %area)`.trim();\n\nconst hcf = `\ndef hcf(x, y):\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller + 1):\n        if ((x % i == 0) and (y % i == 0)):\n            hcf = i\n    return hcf\n\n\nnum1 = int(input(\"Enter first number: \"))\nnum2 = int(input(\"Enter second number: \"))\nprint(\"The H.C.F. of\", num1, \"and\", num2, \"is\", hcf(num1, num2))`.trim();\n\nconst largest = `\nnum1 = 10\nnum2 = 14\nnum3 = 12\n\n\nif (num1 >= num2) and (num1 >= num3):\n   largest = num1\nelif (num2 >= num1) and (num2 >= num3):\n   largest = num2\nelse:\n   largest = num3\n\nprint(\"The largest number is\", largest)`.trim();\n\nconst lcm = `\ndef lcm(x, y):\n    if x > y:\n        greater = y\n    else:\n        greater = x\n    for i in range(1, greater + 1):\n        if ((x % i == 0) and (y % i == 0)):\n            lcm = i\n    return lcm\n\n\nnum1 = int(input(\"Enter first number: \"))\nnum2 = int(input(\"Enter second number: \"))\nprint(\"The L.C.M. of\", num1, \"and\", num2, \"is\", lcm(num1, num2))`.trim();\n\nconst math_function = `\n\n# Random Number\nimport random\n\nprint(random.randint(0,9))\n\n\n#2 Sum 2 Numbers\nnumber1 = input(\"First number: \")\nnumber2 = input(\"Second number: \")\n\nsum = float(number1) + float(number2)\nprint(\"The sum of {0} and {1} is {2}\" .format(number1, number2, sum))`.trim();\n\nconst quadratic = `\nimport cmath\n\na = 1\nb = 5\nc = 6\n\nd = (b**2) - (4*a*c)                                                          # calculate the discriminant\n\nsol1 = (-b-cmath.sqrt(d))/(2*a)\nsol2 = (-b+cmath.sqrt(d))/(2*a)\n\nprint('The solution are {0} and {1}'.format(sol1,sol2))`.trim();\n\nconst reproducable = `\nimport random\n\na = random.random()                                                   # random float in [0,1]\na = random.uniform(1,10)                                              # random float in range [a,b]\na = random.randint(1,10)                                              # random integer in range [a,b]. b is included\na = random.randrange(1,10)                                            # random integer in range [a,b]. b is excluded\n\na = random.normalvariate(0, 1)                               \na = random.choice(list(\"ABCDEFGHI\"))                          \na = random.sample(list(\"ABCDEFGHI\"), 3)                       \na = random.choices(list(\"ABCDEFGHI\"),k=3)                     \n\nprint(a)\n\n\na = list(\"ABCDEFGHI\")\nrandom.shuffle(a)                                                  \nprint(a)`.trim();\n\nconst seed = `\nimport random\n\nrandom.seed(1)\nprint(random.random())\nprint(random.uniform(1,10))\nprint(random.choice(list(\"ABCDEFGHI\")))\n\nprint('Re-seeding with 42...')\nrandom.seed(42)                                                                     # Re-seed\n`.trim();\n\nconst secrets = `\nimport secrets\n\na = secrets.randbelow(10)                                             \na = secrets.randbits(5)                                               # return an integer with k random bits.\na = secrets.choice(list(\"ABCDEFGHI\"))\n\nprint(a)`.trim();\n\nconst pseudorandom = `\nimport numpy as np\n\nnp.random.seed(1)                                        # rand(d0,d1,…,dn)\n\nprint(np.random.rand(3))                                 # generate an array with random floats, arrays has size (d0,d1,…,dn)\nnp.random.seed(1)\nprint(np.random.rand(3))\n\nvalues = np.random.randint(0, 10, (5,3))                # generate an array with random integers in range [a,b) with size n\nprint(values)\n                                        # generate an array with Gaussian values, array has size (d0,d1,…,dn)\n                                        # values from standard normal distribution with mean 0.0 and standard deviation 1.0\nvalues = np.random.randn(5)\nprint(values)\n                                        # randomly shuffle an array.\n                                        # only shuffles the array along the first axis of a multi-dimensional array\narr = np.array([[1,2,3], [4,5,6], [7,8,9]])\nnp.random.shuffle(arr)\nprint(arr)`.trim();\n\n\n\nclass Mathematics extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Simple interest</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={simple_interest}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Compound interest</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={compound_interest}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>conver_12_to_24_hour_format</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={format}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Sqrt</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={sqrt}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Pows</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={pows}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Area of triangle</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={triangle}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>HCF</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={hcf}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Largest number</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={largest}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>LCM</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={lcm}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Math Function</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={math_function}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Quadratic Equation</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={quadratic}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Random Numbers</h3>\n              Python defines a set of functions that are used to generate or manipulate random numbers.\n              <ul>\n                <li>the random module</li>\n                <li>reproduce numbers with random.seed()</li>\n                <li>create cryptographically strong random numbers with the secrets module</li>\n                <li>create random and arrays with numpy.random</li>\n              </ul>\n              <br />\n\n              <h3>The random module</h3>\n              This module implements pseudo-random number generators for various distributions. It uses the Mersenne\n              Twister algorithm as its core generator. It is called pseudo-random, because the numbers seem random,\n              but are reproducable.\n              <br />\n              <br />\n\n              <ul>\n                <li><b>normalvariate(): </b>random float from a normal distribution with mu and sigma.</li>\n                <li><b>choice(): </b>choose a random element from a sequence.</li>\n                <li><b>choices(): </b>choose k elements with replacement, and return k sized list.</li>\n                <li><b>sample(): </b>choose k unique random elements from a sequence.</li>\n                <li><b>shuffle(): </b>shuffle list in place.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={reproducable}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>The seed generator</h3>\n              With random.seed(), you can make results reproducible, and the chain of calls after random.seed() will produce the same trail of data. The sequence of random numbers becomes deterministic, or completely determined by the seed value.\n              <div style={titles}>\n                <PrismCode\n                  code={seed}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>The secrets module</h3>\n              The secrets module is used for generating cryptographically strong random numbers suitable for managing data such as passwords, account authentication, security tokens, and related secrets.\n              <div style={titles}>\n                <PrismCode\n                  code={secrets}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Random numbers with NumPy</h3>\n              Create random numbers for and arrays. The NumPy pseudorandom number generator is different from the Python standard library pseudorandom number generator.\n              Importantly, seeding the Python pseudorandom number generator does not impact the NumPy pseudorandom number generator. It must be seeded and used separately.\n              <div style={titles}>\n                <PrismCode\n                  code={pseudorandom}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Mathematics));\n"]},"metadata":{},"sourceType":"module"}