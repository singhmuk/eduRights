{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/nodeJs/nodeDeep/tut_6.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst message = `\nconst generateMessage = (username, text) => {\n  return {\n      username,\n      text,\n      createdAt: new Date().getTime()\n  }\n}\n\nconst generateLocationMessage = (username, url) => {\n  return {\n      username,\n      url,\n      createdAt: new Date().getTime()\n  }\n}\n\nmodule.exports = {\n  generateMessage,\n  generateLocationMessage\n}`.trim();\nconst users = `\nconst users = []\n\nconst addUser = ({ id, username, room }) => {\n    // Clean the data\n    username = username.trim().toLowerCase()\n    room = room.trim().toLowerCase()\n\n    // Validate the data\n    if (!username || !room) {\n        return {\n            error: 'Username and room are required!'\n        }\n    }\n\n    // Check for existing user\n    const existingUser = users.find((user) => {\n        return user.room === room && user.username === username\n    })\n\n    // Validate username\n    if (existingUser) {\n        return {\n            error: 'Username is in use!'\n        }\n    }\n\n    // Store user\n    const user = { id, username, room }\n    users.push(user)\n    return { user }\n}\n\nconst removeUser = (id) => {\n    const index = users.findIndex((user) => user.id === id)\n\n    if (index !== -1) {\n        return users.splice(index, 1)[0]\n    }\n}\n\nconst getUser = (id) => {\n    return users.find((user) => user.id === id)\n}\n\nconst getUsersInRoom = (room) => {\n    room = room.trim().toLowerCase()\n    return users.filter((user) => user.room === room)\n}\n\nmodule.exports = {\n    addUser,\n    removeUser,\n    getUser,\n    getUsersInRoom\n}`.trim();\nconst server = `\nconst path = require('path')\nconst http = require('http')\nconst express = require('express')\nconst socketio = require('socket.io')\nconst Filter = require('bad-words')\nconst { generateMessage, generateLocationMessage } = require('./utils/messages')\nconst { addUser, removeUser, getUser, getUsersInRoom } = require('./utils/users')\n\nconst app = express()\nconst server = http.createServer(app)\nconst io = socketio(server)\n\nconst port = process.env.PORT || 3000\nconst publicDirectoryPath = path.join(__dirname, '../public')\n\napp.use(express.static(publicDirectoryPath))\n\nio.on('connection', (socket) => {\n    console.log('New WebSocket connection')\n\n    socket.on('join', (options, callback) => {\n        const { error, user } = addUser({ id: socket.id, ...options })\n\n        if (error) {\n            return callback(error)\n        }\n\n        socket.join(user.room)\n\n        socket.emit('message', generateMessage('Admin', 'Welcome!'))\n        socket.broadcast.to(user.room).emit('message', generateMessage('Admin', '$'{user.username} has joined!'))\n        io.to(user.room).emit('roomData', {\n            room: user.room,\n            users: getUsersInRoom(user.room)\n        })\n\n        callback()\n    })\n\n    socket.on('sendMessage', (message, callback) => {\n        const user = getUser(socket.id)\n        const filter = new Filter()\n\n        if (filter.isProfane(message)) {\n            return callback('Profanity is not allowed!')\n        }\n\n        io.to(user.room).emit('message', generateMessage(user.username, message))\n        callback()\n    })\n\n    socket.on('sendLocation', (coords, callback) => {\n        const user = getUser(socket.id)\n        io.to(user.room).emit('locationMessage', generateLocationMessage(user.username, \n                            'https://google.com/maps?q='$'{coords.latitude},'$'{coords.longitude}'))\n        callback()\n    })\n\n    socket.on('disconnect', () => {\n        const user = removeUser(socket.id)\n\n        if (user) {\n            io.to(user.room).emit('message', generateMessage('Admin', '$'{user.username} has left!'))\n            io.to(user.room).emit('roomData', {\n                room: user.room,\n                users: getUsersInRoom(user.room)\n            })\n        }\n    })\n})\n\nserver.listen(port, () => {\n    console.log(Server is up on port '$'{port}!)\n})`.trim();\n\nclass Tur6 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"Chat\"), \"message.js\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: message,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), \"users.js\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: users,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }), \"server.js\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: server,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Tur6);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/nodeJs/nodeDeep/tut_6.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","message","trim","users","server","Tur6","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = {backgroundColor:'#F0F8FF', padding:'1px', fontSize:'16px'}\n\nconst styles = theme => ({\n  paper: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1)\n  },\n  smMargin: {\n      margin: theme.spacing(1)\n  },\n  actionDiv: {\n      textAlign: \"center\"\n  }\n})\n\n\nconst message = `\nconst generateMessage = (username, text) => {\n  return {\n      username,\n      text,\n      createdAt: new Date().getTime()\n  }\n}\n\nconst generateLocationMessage = (username, url) => {\n  return {\n      username,\n      url,\n      createdAt: new Date().getTime()\n  }\n}\n\nmodule.exports = {\n  generateMessage,\n  generateLocationMessage\n}`.trim()\n\nconst users = `\nconst users = []\n\nconst addUser = ({ id, username, room }) => {\n    // Clean the data\n    username = username.trim().toLowerCase()\n    room = room.trim().toLowerCase()\n\n    // Validate the data\n    if (!username || !room) {\n        return {\n            error: 'Username and room are required!'\n        }\n    }\n\n    // Check for existing user\n    const existingUser = users.find((user) => {\n        return user.room === room && user.username === username\n    })\n\n    // Validate username\n    if (existingUser) {\n        return {\n            error: 'Username is in use!'\n        }\n    }\n\n    // Store user\n    const user = { id, username, room }\n    users.push(user)\n    return { user }\n}\n\nconst removeUser = (id) => {\n    const index = users.findIndex((user) => user.id === id)\n\n    if (index !== -1) {\n        return users.splice(index, 1)[0]\n    }\n}\n\nconst getUser = (id) => {\n    return users.find((user) => user.id === id)\n}\n\nconst getUsersInRoom = (room) => {\n    room = room.trim().toLowerCase()\n    return users.filter((user) => user.room === room)\n}\n\nmodule.exports = {\n    addUser,\n    removeUser,\n    getUser,\n    getUsersInRoom\n}`.trim()\n\nconst server = `\nconst path = require('path')\nconst http = require('http')\nconst express = require('express')\nconst socketio = require('socket.io')\nconst Filter = require('bad-words')\nconst { generateMessage, generateLocationMessage } = require('./utils/messages')\nconst { addUser, removeUser, getUser, getUsersInRoom } = require('./utils/users')\n\nconst app = express()\nconst server = http.createServer(app)\nconst io = socketio(server)\n\nconst port = process.env.PORT || 3000\nconst publicDirectoryPath = path.join(__dirname, '../public')\n\napp.use(express.static(publicDirectoryPath))\n\nio.on('connection', (socket) => {\n    console.log('New WebSocket connection')\n\n    socket.on('join', (options, callback) => {\n        const { error, user } = addUser({ id: socket.id, ...options })\n\n        if (error) {\n            return callback(error)\n        }\n\n        socket.join(user.room)\n\n        socket.emit('message', generateMessage('Admin', 'Welcome!'))\n        socket.broadcast.to(user.room).emit('message', generateMessage('Admin', '$'{user.username} has joined!'))\n        io.to(user.room).emit('roomData', {\n            room: user.room,\n            users: getUsersInRoom(user.room)\n        })\n\n        callback()\n    })\n\n    socket.on('sendMessage', (message, callback) => {\n        const user = getUser(socket.id)\n        const filter = new Filter()\n\n        if (filter.isProfane(message)) {\n            return callback('Profanity is not allowed!')\n        }\n\n        io.to(user.room).emit('message', generateMessage(user.username, message))\n        callback()\n    })\n\n    socket.on('sendLocation', (coords, callback) => {\n        const user = getUser(socket.id)\n        io.to(user.room).emit('locationMessage', generateLocationMessage(user.username, \n                            'https://google.com/maps?q='$'{coords.latitude},'$'{coords.longitude}'))\n        callback()\n    })\n\n    socket.on('disconnect', () => {\n        const user = removeUser(socket.id)\n\n        if (user) {\n            io.to(user.room).emit('message', generateMessage('Admin', '$'{user.username} has left!'))\n            io.to(user.room).emit('roomData', {\n                room: user.room,\n                users: getUsersInRoom(user.room)\n            })\n        }\n    })\n})\n\nserver.listen(port, () => {\n    console.log(Server is up on port '$'{port}!)\n})`.trim()\n\n\n\nclass Tur6 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n            <Grid item xs={2}>\n                <Paper className={classes.paper}>\n                    <h4><Sidebar /></h4>\n                </Paper>\n            </Grid>\n<Grid item xs={10}>\n<Paper className={classes.paper}>\n<List>\n      <br/>\n      <h3>Chat</h3>\n      message.js\n      <div style={titles}>\n      <PrismCode\n        code={message}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      users.js\n      <div style={titles}>\n      <PrismCode\n        code={users}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      server.js\n      <div style={titles}>\n      <PrismCode\n        code={server}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      </List>\n      </Paper>\n      </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Tur6));\n"]},"metadata":{},"sourceType":"module"}