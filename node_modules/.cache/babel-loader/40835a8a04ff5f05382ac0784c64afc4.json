{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../ReactJs/styles.css';import Sidebar from'./sidebar';import PrismCode from'../ReactJs/prismCode';import Browser from'../../assets/css1.PNG';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var shallow=\"\\nimport React from \\\"react\\\";\\nimport { shallow } from \\\"enzyme\\\";\\n\\nconst Foo = (props) => <div>\\n  <button onClick={() => props.onButtonClick && props.onButtonClick()}></button>\\n</div>;\\n\\nconst MyComponent = props => (\\n  <div>\\n    <Foo />\\n    <Foo />\\n    <Foo />\\n    <div className=\\\"icon-star\\\"></div>\\n    {props.children}\\n  </div>\\n);\\n\\ndescribe(\\\"<MyComponent />\\\", () => {\\n  it(\\\"renders three <Foo /> components\\\", () => {\\n    const wrapper = shallow(<MyComponent />);\\n    expect(wrapper.find(Foo)).toHaveLength(3);\\n    expect(wrapper).toMatchInlineSnapshot('\\n      <div>\\n        <Foo />\\n        <Foo />\\n        <Foo />\\n        <div\\n          className=\\\"icon-star\\\"\\n        />\\n      </div>\\n    ');\\n  });\\n\\n  it(\\\"renders an '.icon-star'\\\", () => {\\n    const wrapper = shallow(<MyComponent />);\\n    expect(wrapper.find(\\\".icon-star\\\")).toHaveLength(1);\\n  });\\n\\n  it(\\\"renders children when passed in\\\", () => {\\n    const wrapper = shallow(\\n      <MyComponent>\\n        <div className=\\\"unique\\\" />\\n      </MyComponent>\\n    );\\n    expect(wrapper.contains(<div className=\\\"unique\\\" />)).toEqual(true);\\n    expect(wrapper).toMatchInlineSnapshot('\\n      <div>\\n        <Foo />\\n        <Foo />\\n        <Foo />\\n        <div\\n          className=\\\"icon-star\\\"\\n        />\\n        <div\\n          className=\\\"unique\\\"\\n        />\\n      </div>\\n    ');\\n  });\\n\\n  it(\\\"simulates click events\\\", () => {\\n    const onButtonClick = jest.fn();\\n    const wrapper = shallow(<Foo onButtonClick={onButtonClick} />);\\n    wrapper.find(\\\"button\\\").simulate(\\\"click\\\");\\n    expect(onButtonClick).toHaveBeenCalledTimes(1);\\n  });\\n});\\n\".trim();var shallow2=\"\\nimport React, { Suspense, Component } from \\\"react\\\";\\nimport { shallow } from \\\"enzyme\\\";\\nimport PropTypes from \\\"prop-types\\\";\\n\\nconst ThemeContext = React.createContext({ theme: \\\"light\\\" });\\n\\nclass ThemeComponent extends Component {\\n  render() {\\n    return (\\n      <ThemeContext.Provider value={{ theme: \\\"dark\\\" }}>\\n        {this.props.children}\\n      </ThemeContext.Provider>\\n    );\\n  }\\n}\\n\\nclass CustomComponent extends Component {\\n  state = {\\n    authenticated: false\\n  };\\n\\n  componentDidMount() {\\n    this.setState({ authenticated: true });\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <div id=\\\"theme\\\">\\n          <ThemeContext.Consumer>\\n            {value => String(value.theme)}\\n          </ThemeContext.Consumer>\\n        </div>\\n        <div id=\\\"user\\\">{this.state.authenticated ? \\\"User\\\" : \\\"Guest\\\"}</div>\\n      </div>\\n    );\\n  }\\n}\\n\\ndescribe(\\\"options\\\", () => {\\n  test(\\\"context\\\", () => {\\n    function SimpleComponent(props, context) {\\n      const { name } = context;\\n      return <div>{name}</div>;\\n    }\\n\\n    SimpleComponent.contextTypes = {\\n      name: PropTypes.string\\n    };\\n\\n    const context = { name: \\\"foo\\\" };\\n    const wrapper = shallow(<SimpleComponent />, { context });\\n    expect(wrapper.text()).toEqual(\\\"foo\\\");\\n  });\\n\\n  test(\\\"disableLifecycleMethods\\\", () => {\\n    const wrapper = shallow(<CustomComponent></CustomComponent>, {\\n      disableLifecycleMethods: true\\n    });\\n\\n    expect(wrapper.find(\\\"#user\\\").text()).toBe(\\\"Guest\\\");\\n  });\\n\\n  test(\\\"wrappingComponent\\\", () => {\\n    const wrapper = shallow(<CustomComponent></CustomComponent>, {\\n      wrappingComponent: ThemeComponent\\n    });\\n\\n    expect(wrapper.getWrappingComponent().html()).toMatchInlineSnapshot(\\n      '\\\"<div><div id=\\\\\\\"theme\\\\\\\">dark</div><div id=\\\\\\\"user\\\\\\\">Guest</div></div>\\\"'\\n    );\\n  });\\n\\n  test(\\\"suspenseFallback\\\", () => {\\n    const LazyComponent = React.lazy(() => import(\\\"../../LazyComponent\\\"));\\n\\n    const wrapper = shallow(\\n      <Suspense fallback={<div>Loading...</div>}>\\n        <LazyComponent />\\n      </Suspense>,\\n      { suspenseFallback: true }\\n    );\\n\\n    expect(wrapper).toMatchInlineSnapshot('\\n      <div>\\n        Loading...\\n      </div>\\n    ');\\n  });\\n});\\n\".trim();var fullDom=\"\\nimport { mount } from \\\"enzyme\\\";\\nimport React from \\\"react\\\";\\n\\nconst Foo = props => (\\n  <div>\\n    <button onClick={() => props.onButtonClick && props.onButtonClick()} />\\n  </div>\\n);\\n\\nconst MyComponent = props => (\\n  <div>\\n    <Foo />\\n    <Foo />\\n    <Foo />\\n    <div className=\\\"icon-star\\\"></div>\\n    {props.children}\\n  </div>\\n);\\n\\ndescribe(\\\"<MyComponent />\\\", () => {\\n  it(\\\"renders three <Foo /> components\\\", () => {\\n    const wrapper = mount(<MyComponent />);\\n    expect(wrapper.find(Foo)).toHaveLength(3);\\n  });\\n\\n  it(\\\"renders an '.icon-star'\\\", () => {\\n    const wrapper = mount(<MyComponent />);\\n    expect(wrapper.find(\\\".icon-star\\\")).toHaveLength(1);\\n  });\\n\\n  it(\\\"renders children when passed in\\\", () => {\\n    const wrapper = mount(\\n      <MyComponent>\\n        <div className=\\\"unique\\\" />\\n      </MyComponent>\\n    );\\n    expect(wrapper.contains(<div className=\\\"unique\\\" />)).toEqual(true);\\n\\n    expect(wrapper).toMatchInlineSnapshot('\\n      <MyComponent>\\n        <div>\\n          <Foo>\\n            <div>\\n              <button\\n                onClick={[Function]}\\n              />\\n            </div>\\n          </Foo>\\n          <Foo>\\n            <div>\\n              <button\\n                onClick={[Function]}\\n              />\\n            </div>\\n          </Foo>\\n          <Foo>\\n            <div>\\n              <button\\n                onClick={[Function]}\\n              />\\n            </div>\\n          </Foo>\\n          <div\\n            className=\\\"icon-star\\\"\\n          />\\n          <div\\n            className=\\\"unique\\\"\\n          />\\n        </div>\\n      </MyComponent>\\n    );\\n  });\\n\\n  it(\\\"simulates click events\\\", () => {\\n    const onButtonClick = jest.fn();\\n    const wrapper = mount(<Foo onButtonClick={onButtonClick} />);\\n    wrapper.find(\\\"button\\\").simulate(\\\"click\\\");\\n    expect(onButtonClick).toHaveBeenCalledTimes(1);\\n  });\\n});\\n\".trim();var fullDom2=\"\\nimport React, { Component } from \\\"react\\\";\\nimport { mount } from \\\"enzyme\\\";\\nimport PropTypes from \\\"prop-types\\\";\\n\\nconst ThemeContext = React.createContext({ theme: \\\"light\\\" });\\n\\nclass ThemeComponent extends Component {\\n  render() {\\n    return (\\n      <ThemeContext.Provider value={{ theme: this.props.theme || \\\"dark\\\" }}>\\n        {this.props.children}\\n      </ThemeContext.Provider>\\n    );\\n  }\\n}\\n\\nclass CustomComponent extends Component {\\n  state = {\\n    authenticated: false\\n  };\\n\\n  componentDidMount() {\\n    this.setState({ authenticated: true });\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <div id=\\\"theme\\\">\\n          <ThemeContext.Consumer>\\n            {value => String(value.theme)}\\n          </ThemeContext.Consumer>\\n        </div>\\n        <div id=\\\"user\\\">{this.state.authenticated ? \\\"User\\\" : \\\"Guest\\\"}</div>\\n      </div>\\n    );\\n  }\\n}\\n\\ndescribe(\\\"options\\\", () => {\\n  test(\\\"context\\\", () => {\\n    function SimpleComponent(props, context) {\\n      const { name } = context;\\n      return <div>{name}</div>;\\n    }\\n\\n    SimpleComponent.contextTypes = {\\n      name: PropTypes.string\\n    };\\n\\n    const context = { name: \\\"foo\\\" };\\n    const wrapper = mount(<SimpleComponent />, { context });\\n    expect(wrapper.text()).toEqual(\\\"foo\\\");\\n  });\\n\\n  test(\\\"wrappingComponent\\\", () => {\\n    const wrapper = mount(<CustomComponent></CustomComponent>, {\\n      wrappingComponent: ThemeComponent,\\n      wrappingComponentProps: { theme: \\\"custom\\\" }\\n    });\\n\\n    expect(wrapper.getWrappingComponent().html()).toMatchInlineSnapshot(\\n      '\\\"<div><div id=\\\\\\\"theme\\\\\\\">custom</div><div id=\\\\\\\"user\\\\\\\">User</div></div>\\\"'\\n    );\\n  });\\n\\n  test(\\\"attachTo\\\", () => {\\n    document.body.innerHTML = '<div id=\\\"attach-here\\\"></div><div id=\\\"not-here\\\"></div>';\\n    const attachHere = document.getElementById(\\\"attach-here\\\");\\n\\n    mount(<CustomComponent></CustomComponent>, {\\n      attachTo: attachHere\\n    });\\n\\n    expect(document.body.innerHTML).toMatchInlineSnapshot(\\n      '\\\"<div id=\\\\\\\"attach-here\\\\\\\"><div><div id=\\\\\\\"theme\\\\\\\">light</div><div id=\\\\\\\"user\\\\\\\">User</div></div></div><div id=\\\\\\\"not-here\\\\\\\"></div>\\\"'\\n    );\\n  });\\n});\\n\".trim();var statics=\"\\nimport { render } from \\\"enzyme\\\";\\nimport React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\n\\nconst Foo = props => (\\n  <div>\\n    <h1>{props.title}</h1>\\n    <div className=\\\"foo-bar\\\"></div>\\n    <div className=\\\"foo-bar\\\"></div>\\n    <div className=\\\"foo-bar\\\"></div>\\n  </div>\\n);\\n\\ndescribe(\\\"<Foo />\\\", () => {\\n  it(\\\"renders three '.foo-bar's\\\", () => {\\n    const wrapper = render(<Foo />);\\n    expect(wrapper.find(\\\".foo-bar\\\")).toHaveLength(3);\\n  });\\n\\n  it(\\\"rendered the title\\\", () => {\\n    const wrapper = render(<Foo title=\\\"unique\\\" />);\\n    expect(wrapper.text()).toContain(\\\"unique\\\");\\n  });\\n\\n  it(\\\"renders a div\\\", () => {\\n    const wrapper = render(<Foo />);\\n    expect(wrapper.html()).toMatch(/div/);\\n  });\\n\\n  it(\\\"can pass in context\\\", () => {\\n    function SimpleComponent(props, context) {\\n      const { name } = context;\\n      return <div>{name}</div>;\\n    }\\n    SimpleComponent.contextTypes = {\\n      name: PropTypes.string\\n    };\\n\\n    const context = { name: \\\"foo\\\" };\\n    const wrapper = render(<SimpleComponent />, { context });\\n    expect(wrapper.text()).toEqual(\\\"foo\\\");\\n  });\\n});\\n\".trim();var selectors=\"\\nfunction Foo(props) {\\n  return (\\n    <div>\\n      <button\\n        id=\\\"foo-button\\\"\\n        onClick={() => props.onButtonClick && props.onButtonClick()}\\n      />\\n    </div>\\n  );\\n}\\n\\nfunction MyComponent(props) {\\n  return (\\n    <div>\\n      <Foo anum={3} abool={false} />\\n      <Foo anum=\\\"3\\\" abool=\\\"false\\\" />\\n      <Foo id=\\\"foo-id\\\" abool={undefined} />\\n      <div className=\\\"icon-star\\\"></div>\\n      <a href=\\\"foo\\\">Foo</a>\\n      {[1, 2, 3].map(item => (\\n        <div key={item}>{item}</div>\\n      ))}\\n      {props.children}\\n    </div>\\n  );\\n}\\n\\nMyComponent.displayName = \\\"My Component\\\";\\n\\nlet wrapper;\\n\\nbeforeEach(() => {\\n  wrapper = mount(<MyComponent />);\\n});\\n\\nafterEach(() => {\\n  wrapper.unmount();\\n});\\n\\ntest(\\\".icon-start\\\", () => {\\n  expect(wrapper.find(\\\".icon-star\\\")).toHaveLength(1);\\n});\\n\\ntest(\\\"button#foo-button\\\", () => {\\n  expect(wrapper.find(\\\"button#foo-button\\\")).toHaveLength(3);\\n});\\n\\ntest(\\\"a[href=foo]\\\", () => {\\n  expect(wrapper.find('a[href=\\\"foo\\\"]')).toHaveLength(1);\\n});\\n\\ntest(\\\"a[href=foo]\\\", () => {\\n  expect(wrapper.find('a[href=\\\"foo\\\"]')).toHaveLength(1);\\n});\\n\\ntest(\\\"#foo-id *\\\", () => {\\n  expect(wrapper.find('#foo-id *')).toHaveLength(2);\\n});\\n\\ntest(\\\"key doesn't work\\\", () => {\\n  expect(wrapper.find('[key=1]')).toHaveLength(0);\\n});\\n\\ntest(\\\"ref doesn't work\\\", () => {\\n  class SimpleComponent extends React.Component {\\n    render() {\\n      return <div ref=\\\"foo\\\">Ref</div>;\\n    }\\n  }\\n\\n  const wrapper = mount(<SimpleComponent />);\\n  expect(wrapper.find('[ref=\\\"foo\\\"]')).toHaveLength(0);\\n});\\n\\ntest(\\\"Foo\\\", () => {\\n  expect(wrapper.find(Foo)).toHaveLength(3);\\n});\\n\\ntest.skip(\\\"My Component\\\", () => {\\n  expect(wrapper.find(\\\"My Component\\\")).toHaveLength(1);\\n});\\n\\ntest(\\\"anum={3} abool={false}\\\", () => {\\n  expect(wrapper.find(\\\"[anum=3][abool=false]\\\")).toHaveLength(1);\\n\\n  expect(\\n    wrapper.find({\\n      anum: 3,\\n      abool: false\\n    })\\n  ).toHaveLength(1);\\n});\\n\\ntest('anum=\\\"3\\\" abool=\\\"false\\\"', () => {\\n  expect(wrapper.find('[anum=\\\"3\\\"][abool=\\\"false\\\"]')).toHaveLength(1);\\n\\n  expect(\\n    wrapper.find({\\n      anum: \\\"3\\\",\\n      abool: \\\"false\\\"\\n    })\\n  ).toHaveLength(1);\\n});\\n\\ntest('abool={undefined}', () => {\\n  // wont work\\n  // expect(\\n  //   wrapper.find({\\n  //     aundefined: undefined\\n  //   })\\n  // ).toHaveLength(1);\\n  expect(\\n    wrapper.findWhere(n => n.is(Foo) && n.props().abool === undefined)\\n  ).toHaveLength(1);\\n});\\n\".trim();var Enzymes=/*#__PURE__*/function(_Component){_inherits(Enzymes,_Component);function Enzymes(){_classCallCheck(this,Enzymes);return _possibleConstructorReturn(this,_getPrototypeOf(Enzymes).apply(this,arguments));}_createClass(Enzymes,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"2-shallow-rendering\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:shallow,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"shallow-rendering\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:shallow2,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3-full-dom-rendering\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:fullDom,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"full-dom-rendering\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:fullDom,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4-static-rendering\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:statics,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5-selectors\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:selectors,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return Enzymes;}(Component);export default withStyles(styles)(Enzymes);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/css/enzymes.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Browser","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","shallow","trim","shallow2","fullDom","fullDom2","statics","selectors","Enzymes","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../ReactJs/styles.css'\nimport Sidebar from './sidebar';\nimport PrismCode from '../ReactJs/prismCode';\n\nimport Browser from '../../assets/css1.PNG';\n\n\nconst titles = {backgroundColor:'#F0F8FF', padding:'1px', fontSize:'16px'}\n\nconst styles = theme => ({\n  paper: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1)\n  },\n  smMargin: {\n      margin: theme.spacing(1)\n  },\n  actionDiv: {\n      textAlign: \"center\"\n  }\n})\n\n\nconst shallow = `\nimport React from \"react\";\nimport { shallow } from \"enzyme\";\n\nconst Foo = (props) => <div>\n  <button onClick={() => props.onButtonClick && props.onButtonClick()}></button>\n</div>;\n\nconst MyComponent = props => (\n  <div>\n    <Foo />\n    <Foo />\n    <Foo />\n    <div className=\"icon-star\"></div>\n    {props.children}\n  </div>\n);\n\ndescribe(\"<MyComponent />\", () => {\n  it(\"renders three <Foo /> components\", () => {\n    const wrapper = shallow(<MyComponent />);\n    expect(wrapper.find(Foo)).toHaveLength(3);\n    expect(wrapper).toMatchInlineSnapshot('\n      <div>\n        <Foo />\n        <Foo />\n        <Foo />\n        <div\n          className=\"icon-star\"\n        />\n      </div>\n    ');\n  });\n\n  it(\"renders an '.icon-star'\", () => {\n    const wrapper = shallow(<MyComponent />);\n    expect(wrapper.find(\".icon-star\")).toHaveLength(1);\n  });\n\n  it(\"renders children when passed in\", () => {\n    const wrapper = shallow(\n      <MyComponent>\n        <div className=\"unique\" />\n      </MyComponent>\n    );\n    expect(wrapper.contains(<div className=\"unique\" />)).toEqual(true);\n    expect(wrapper).toMatchInlineSnapshot('\n      <div>\n        <Foo />\n        <Foo />\n        <Foo />\n        <div\n          className=\"icon-star\"\n        />\n        <div\n          className=\"unique\"\n        />\n      </div>\n    ');\n  });\n\n  it(\"simulates click events\", () => {\n    const onButtonClick = jest.fn();\n    const wrapper = shallow(<Foo onButtonClick={onButtonClick} />);\n    wrapper.find(\"button\").simulate(\"click\");\n    expect(onButtonClick).toHaveBeenCalledTimes(1);\n  });\n});\n`.trim();\n\nconst shallow2 = `\nimport React, { Suspense, Component } from \"react\";\nimport { shallow } from \"enzyme\";\nimport PropTypes from \"prop-types\";\n\nconst ThemeContext = React.createContext({ theme: \"light\" });\n\nclass ThemeComponent extends Component {\n  render() {\n    return (\n      <ThemeContext.Provider value={{ theme: \"dark\" }}>\n        {this.props.children}\n      </ThemeContext.Provider>\n    );\n  }\n}\n\nclass CustomComponent extends Component {\n  state = {\n    authenticated: false\n  };\n\n  componentDidMount() {\n    this.setState({ authenticated: true });\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"theme\">\n          <ThemeContext.Consumer>\n            {value => String(value.theme)}\n          </ThemeContext.Consumer>\n        </div>\n        <div id=\"user\">{this.state.authenticated ? \"User\" : \"Guest\"}</div>\n      </div>\n    );\n  }\n}\n\ndescribe(\"options\", () => {\n  test(\"context\", () => {\n    function SimpleComponent(props, context) {\n      const { name } = context;\n      return <div>{name}</div>;\n    }\n\n    SimpleComponent.contextTypes = {\n      name: PropTypes.string\n    };\n\n    const context = { name: \"foo\" };\n    const wrapper = shallow(<SimpleComponent />, { context });\n    expect(wrapper.text()).toEqual(\"foo\");\n  });\n\n  test(\"disableLifecycleMethods\", () => {\n    const wrapper = shallow(<CustomComponent></CustomComponent>, {\n      disableLifecycleMethods: true\n    });\n\n    expect(wrapper.find(\"#user\").text()).toBe(\"Guest\");\n  });\n\n  test(\"wrappingComponent\", () => {\n    const wrapper = shallow(<CustomComponent></CustomComponent>, {\n      wrappingComponent: ThemeComponent\n    });\n\n    expect(wrapper.getWrappingComponent().html()).toMatchInlineSnapshot(\n      '\"<div><div id=\\\\\"theme\\\\\">dark</div><div id=\\\\\"user\\\\\">Guest</div></div>\"'\n    );\n  });\n\n  test(\"suspenseFallback\", () => {\n    const LazyComponent = React.lazy(() => import(\"../../LazyComponent\"));\n\n    const wrapper = shallow(\n      <Suspense fallback={<div>Loading...</div>}>\n        <LazyComponent />\n      </Suspense>,\n      { suspenseFallback: true }\n    );\n\n    expect(wrapper).toMatchInlineSnapshot('\n      <div>\n        Loading...\n      </div>\n    ');\n  });\n});\n`.trim();\n\nconst fullDom = `\nimport { mount } from \"enzyme\";\nimport React from \"react\";\n\nconst Foo = props => (\n  <div>\n    <button onClick={() => props.onButtonClick && props.onButtonClick()} />\n  </div>\n);\n\nconst MyComponent = props => (\n  <div>\n    <Foo />\n    <Foo />\n    <Foo />\n    <div className=\"icon-star\"></div>\n    {props.children}\n  </div>\n);\n\ndescribe(\"<MyComponent />\", () => {\n  it(\"renders three <Foo /> components\", () => {\n    const wrapper = mount(<MyComponent />);\n    expect(wrapper.find(Foo)).toHaveLength(3);\n  });\n\n  it(\"renders an '.icon-star'\", () => {\n    const wrapper = mount(<MyComponent />);\n    expect(wrapper.find(\".icon-star\")).toHaveLength(1);\n  });\n\n  it(\"renders children when passed in\", () => {\n    const wrapper = mount(\n      <MyComponent>\n        <div className=\"unique\" />\n      </MyComponent>\n    );\n    expect(wrapper.contains(<div className=\"unique\" />)).toEqual(true);\n\n    expect(wrapper).toMatchInlineSnapshot('\n      <MyComponent>\n        <div>\n          <Foo>\n            <div>\n              <button\n                onClick={[Function]}\n              />\n            </div>\n          </Foo>\n          <Foo>\n            <div>\n              <button\n                onClick={[Function]}\n              />\n            </div>\n          </Foo>\n          <Foo>\n            <div>\n              <button\n                onClick={[Function]}\n              />\n            </div>\n          </Foo>\n          <div\n            className=\"icon-star\"\n          />\n          <div\n            className=\"unique\"\n          />\n        </div>\n      </MyComponent>\n    );\n  });\n\n  it(\"simulates click events\", () => {\n    const onButtonClick = jest.fn();\n    const wrapper = mount(<Foo onButtonClick={onButtonClick} />);\n    wrapper.find(\"button\").simulate(\"click\");\n    expect(onButtonClick).toHaveBeenCalledTimes(1);\n  });\n});\n`.trim();\n\nconst fullDom2 = `\nimport React, { Component } from \"react\";\nimport { mount } from \"enzyme\";\nimport PropTypes from \"prop-types\";\n\nconst ThemeContext = React.createContext({ theme: \"light\" });\n\nclass ThemeComponent extends Component {\n  render() {\n    return (\n      <ThemeContext.Provider value={{ theme: this.props.theme || \"dark\" }}>\n        {this.props.children}\n      </ThemeContext.Provider>\n    );\n  }\n}\n\nclass CustomComponent extends Component {\n  state = {\n    authenticated: false\n  };\n\n  componentDidMount() {\n    this.setState({ authenticated: true });\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"theme\">\n          <ThemeContext.Consumer>\n            {value => String(value.theme)}\n          </ThemeContext.Consumer>\n        </div>\n        <div id=\"user\">{this.state.authenticated ? \"User\" : \"Guest\"}</div>\n      </div>\n    );\n  }\n}\n\ndescribe(\"options\", () => {\n  test(\"context\", () => {\n    function SimpleComponent(props, context) {\n      const { name } = context;\n      return <div>{name}</div>;\n    }\n\n    SimpleComponent.contextTypes = {\n      name: PropTypes.string\n    };\n\n    const context = { name: \"foo\" };\n    const wrapper = mount(<SimpleComponent />, { context });\n    expect(wrapper.text()).toEqual(\"foo\");\n  });\n\n  test(\"wrappingComponent\", () => {\n    const wrapper = mount(<CustomComponent></CustomComponent>, {\n      wrappingComponent: ThemeComponent,\n      wrappingComponentProps: { theme: \"custom\" }\n    });\n\n    expect(wrapper.getWrappingComponent().html()).toMatchInlineSnapshot(\n      '\"<div><div id=\\\\\"theme\\\\\">custom</div><div id=\\\\\"user\\\\\">User</div></div>\"'\n    );\n  });\n\n  test(\"attachTo\", () => {\n    document.body.innerHTML = '<div id=\"attach-here\"></div><div id=\"not-here\"></div>';\n    const attachHere = document.getElementById(\"attach-here\");\n\n    mount(<CustomComponent></CustomComponent>, {\n      attachTo: attachHere\n    });\n\n    expect(document.body.innerHTML).toMatchInlineSnapshot(\n      '\"<div id=\\\\\"attach-here\\\\\"><div><div id=\\\\\"theme\\\\\">light</div><div id=\\\\\"user\\\\\">User</div></div></div><div id=\\\\\"not-here\\\\\"></div>\"'\n    );\n  });\n});\n`.trim();\n\nconst statics = `\nimport { render } from \"enzyme\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Foo = props => (\n  <div>\n    <h1>{props.title}</h1>\n    <div className=\"foo-bar\"></div>\n    <div className=\"foo-bar\"></div>\n    <div className=\"foo-bar\"></div>\n  </div>\n);\n\ndescribe(\"<Foo />\", () => {\n  it(\"renders three '.foo-bar's\", () => {\n    const wrapper = render(<Foo />);\n    expect(wrapper.find(\".foo-bar\")).toHaveLength(3);\n  });\n\n  it(\"rendered the title\", () => {\n    const wrapper = render(<Foo title=\"unique\" />);\n    expect(wrapper.text()).toContain(\"unique\");\n  });\n\n  it(\"renders a div\", () => {\n    const wrapper = render(<Foo />);\n    expect(wrapper.html()).toMatch(/div/);\n  });\n\n  it(\"can pass in context\", () => {\n    function SimpleComponent(props, context) {\n      const { name } = context;\n      return <div>{name}</div>;\n    }\n    SimpleComponent.contextTypes = {\n      name: PropTypes.string\n    };\n\n    const context = { name: \"foo\" };\n    const wrapper = render(<SimpleComponent />, { context });\n    expect(wrapper.text()).toEqual(\"foo\");\n  });\n});\n`.trim();\n\nconst selectors = `\nfunction Foo(props) {\n  return (\n    <div>\n      <button\n        id=\"foo-button\"\n        onClick={() => props.onButtonClick && props.onButtonClick()}\n      />\n    </div>\n  );\n}\n\nfunction MyComponent(props) {\n  return (\n    <div>\n      <Foo anum={3} abool={false} />\n      <Foo anum=\"3\" abool=\"false\" />\n      <Foo id=\"foo-id\" abool={undefined} />\n      <div className=\"icon-star\"></div>\n      <a href=\"foo\">Foo</a>\n      {[1, 2, 3].map(item => (\n        <div key={item}>{item}</div>\n      ))}\n      {props.children}\n    </div>\n  );\n}\n\nMyComponent.displayName = \"My Component\";\n\nlet wrapper;\n\nbeforeEach(() => {\n  wrapper = mount(<MyComponent />);\n});\n\nafterEach(() => {\n  wrapper.unmount();\n});\n\ntest(\".icon-start\", () => {\n  expect(wrapper.find(\".icon-star\")).toHaveLength(1);\n});\n\ntest(\"button#foo-button\", () => {\n  expect(wrapper.find(\"button#foo-button\")).toHaveLength(3);\n});\n\ntest(\"a[href=foo]\", () => {\n  expect(wrapper.find('a[href=\"foo\"]')).toHaveLength(1);\n});\n\ntest(\"a[href=foo]\", () => {\n  expect(wrapper.find('a[href=\"foo\"]')).toHaveLength(1);\n});\n\ntest(\"#foo-id *\", () => {\n  expect(wrapper.find('#foo-id *')).toHaveLength(2);\n});\n\ntest(\"key doesn't work\", () => {\n  expect(wrapper.find('[key=1]')).toHaveLength(0);\n});\n\ntest(\"ref doesn't work\", () => {\n  class SimpleComponent extends React.Component {\n    render() {\n      return <div ref=\"foo\">Ref</div>;\n    }\n  }\n\n  const wrapper = mount(<SimpleComponent />);\n  expect(wrapper.find('[ref=\"foo\"]')).toHaveLength(0);\n});\n\ntest(\"Foo\", () => {\n  expect(wrapper.find(Foo)).toHaveLength(3);\n});\n\ntest.skip(\"My Component\", () => {\n  expect(wrapper.find(\"My Component\")).toHaveLength(1);\n});\n\ntest(\"anum={3} abool={false}\", () => {\n  expect(wrapper.find(\"[anum=3][abool=false]\")).toHaveLength(1);\n\n  expect(\n    wrapper.find({\n      anum: 3,\n      abool: false\n    })\n  ).toHaveLength(1);\n});\n\ntest('anum=\"3\" abool=\"false\"', () => {\n  expect(wrapper.find('[anum=\"3\"][abool=\"false\"]')).toHaveLength(1);\n\n  expect(\n    wrapper.find({\n      anum: \"3\",\n      abool: \"false\"\n    })\n  ).toHaveLength(1);\n});\n\ntest('abool={undefined}', () => {\n  // wont work\n  // expect(\n  //   wrapper.find({\n  //     aundefined: undefined\n  //   })\n  // ).toHaveLength(1);\n  expect(\n    wrapper.findWhere(n => n.is(Foo) && n.props().abool === undefined)\n  ).toHaveLength(1);\n});\n`.trim();\n\n\n\nclass Enzymes extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n            <Grid item xs={2}>\n                <Paper className={classes.paper}>\n                    <h4><Sidebar /></h4>\n                </Paper>\n            </Grid>\n    <Grid item xs={10}>\n    <Paper className={classes.paper}>\n    <List>\n      <h3>2-shallow-rendering</h3>\n      <div style={titles}>\n      <PrismCode\n        code={shallow}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <br/>\n      <b>shallow-rendering</b>\n      <br/>\n      <div style={titles}>\n      <PrismCode\n        code={shallow2}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      \n      <h3>3-full-dom-rendering</h3>\n      <div style={titles}>\n      <PrismCode\n        code={fullDom}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <br/>\n      <b>full-dom-rendering</b>\n      <br/>\n      <div style={titles}>\n      <PrismCode\n        code={fullDom}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      \n      <h3>4-static-rendering</h3>\n      <div style={titles}>\n      <PrismCode\n        code={statics}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      \n      <h3>5-selectors</h3>\n      <div style={titles}>\n      <PrismCode\n        code={selectors}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      </List>\n      </Paper>\n      </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Enzymes));\n"]},"metadata":{},"sourceType":"module"}