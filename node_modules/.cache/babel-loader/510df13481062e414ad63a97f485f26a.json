{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var parseInts=\"\\nconst mockData = [];\\nconst mainId = [];\\nconst subParameters = [];\\nconst city = [];\\nconst matchingData = [];\\nconst name = 'Clementina DuBuque';\\nvar tempObj = [];\\nvar sum = 0;\\nvar avg = 0;\\nvar arrayMet = [];\\n\\nfetch(\\\"https://jsonplaceholder.typicode.com/users\\\")\\n.then(res => res.json()) \\n.then(mockData => {\\n  mockData.map(val => {\\n    for(var i = 0; i < mockData.length; i++){\\n      // console.log('api data in the loop',mockData[i])\\n      if(mainId === mockData[i]._id){\\n          // console.log('only match id',mockData[i]._id)\\n          mockData.map(val => {\\n            if(city.indexOf(val.name)===-1){\\n                // console.log('only unique user city',val.address)\\n                val.address.map(valCity => {\\n                    subParameters.push(valCity.city)\\n                    // console.log('Push city name in subParameters',subParameters)\\n                    \\n                    let newObj={\\\"id\\\":val._id, \\\"name\\\":val.name,'value':[]}\\n                    newObj = newObj.value.push(valCity.city)\\n                    // console.log('Push city name in new created object',newObj)\\n                    \\n                    var index=subParameters.indexOf(valCity._id)\\n                    // console.log('index value',index,\\\":\\\",valCity._id)\\n                    \\n                    // subParameters[index].value = subParameters[index].concat(valCity._id)\\n                    // console.log('index value',subParameters[index].value)\\n                    \\n                    if((valCity._id === mainId || valCity._id === mockData._id)){\\n                        // console.log('matching hard coded value: ',valCity._id,\\\"=\\\",mockData._ids,\\\":\\\",mainId);\\n                        matchingData=matchingData.concat(valCity._id);\\n                        // console.log('matching values: ',matchingData)\\n                    }\\n                })\\n            }\\n            \\n            else{\\n              var index=subParameters.indexOf(val.phone)\\n              subParameters[index].value = subParameters[index].value.concat(val.id)\\n              // console.log('else values: ',subParameters)\\n              }\\n          })\\n      }\\n    }\\n})\\n\\naddData();\\npickRecord();\\nSumAverage();\\nextractKey();\\narrayMethod();\\n});\\n\\n\\n//Add data in empty array from api values\\nconst addData = () => {\\nfetch(\\\"https://jsonplaceholder.typicode.com/users\\\")\\n.then(res => res.json()) \\n.then(mockData => {\\nmockData.map(add => {\\n    mockData.push(add.name)\\n    \\n    if(add.name === name){\\n        // console.log('fields',mockData)\\n        for(let i=0; i<=mockData.length; i++){\\n            // console.log('Matched name',add.name)\\n        }\\n    }\\n})\\n})\\n// console.log('after map',mockData);\\n}\\n\\n\\n//Pick a record from list\\nconst pickRecord = () => {\\nfetch(\\\"https://jsonplaceholder.typicode.com/users\\\")\\n.then(res => res.json()) \\n.then(mockData => {\\n   mockData.map(pickRec => {\\n    if(pickRec._id === mainId){\\n        mockData.push(pickRec.email);\\n        // console.log('map function',mockData)\\n    }\\n    \\n// apiId = mockData.push(pickRec);\\n// console.log('method',name,\\\";\\\",pickRec.name)\\nif(pickRec.name === name){\\n    for(let i=0; i<=mockData[i].length; i++){\\n       let obj = [];\\n       obj.push(mockData.name)\\n        console.log('matching values',obj)\\n        }\\n    }\\n   })\\n})\\n}\\n\\n\\n//Add sum/avg of number from a list\\nconst SumAverage = () => {\\nfetch(\\\"https://jsonplaceholder.typicode.com/users\\\")\\n    .then(res => res.json()) \\n    .then(mockData => {\\n   \\n   mockData.map(fields => {\\n    tempObj.push(fields._id) \\n   })\\n   for(let i =0; i<=tempObj.length;i++){\\n    sum +=tempObj[i];\\n    avg = sum/tempObj.length\\n    // console.log('sum',sum)\\n    }\\n})\\n\\n//Flattening an array of arrays\\nconst nested = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\\nlet flat = nested.reduce((acc, it) => [...acc, ...it], []);\\nlet sumOfArray = flat.reduce((a, b) => a+b)\\n// console.log('flat',flat)\\n// console.log('Sum ',sumOfArray)\\n}\\n\\n\\n//Extract key/value pair from an object\\nconst extractKey = () => {\\nvar data = \\n       [\\n        {label:1, quater :'Q1', y:34},\\n        {label:2, quater:'Q1', y:20},\\n        {label:3, quater:'Q1', y:30},\\n \\n        {label:1, quater:'Q2', y:77},\\n        {label:2, quater:'Q2', y:52},\\n        {label:3, quater:'Q2', y:3},\\n \\n        {label:1, quater:'Q3', y:65},\\n        {label:2, quater:'Q3', y:12},\\n        {label:3, quater:'Q3', y:9},\\n \\n        {label:1, quater:'Q4', y:77},\\n        {label:2, quater:'Q4', y:34},\\n        {label:3, quater:'Q4', y:5}\\n       ];\\n       \\nvar quartersum = {}\\ndata.map(function(entry) {\\n quartersum[entry.label] = (quartersum[entry.label]||0) + entry.y\\n})\\n\\ndata.map(function(entry) {\\n entry.percent = entry.y / quartersum[entry.label] * 100;\\n//  console.log(JSON.stringify(entry))\\n})\\n\\n//    console.log('data',quartersum);\\n//    console.log('extract object keys',Object.keys(quartersum));\\n//    console.log('extract object values',Object.values(quartersum));\\n\\n  for(let [key, value] of Object.entries(quartersum)){\\n    //   console.log('extract object property',key, value);\\n  }\\n  var percentage = parseInt((sum * 100/quartersum.length));\\n  console.log('percentage',percentage);\\n}\\n\\n\\nconst arrayMethod = () => {\\nfetch(\\\"https://jsonplaceholder.typicode.com/users\\\")\\n    .then(res => res.json()) \\n    .then(arrayMeth => {\\n   \\n   arrayMeth.map(data => {\\n    arrayMet.push(data._id)\\n    // console.log('method',arrayMet)\\n   })\\n   \\n   let scores = arrayMet.find(element => element > 4);\\n   let filterScores = arrayMet.filter(element => element > 4);\\n   let joinArr = filterScores.join(\\\"*\\\");\\n   let spliceArr = filterScores.splice(0,2)\\n   let concatArr = filterScores.concat(scores,joinArr,\\\"100\\\");\\n   \\n    //console.log('method',filterScores)\\n   \\n\\n   //The slice() method slices out a piece of an array into a new array.\\n   let sliceArr = filterScores.slice(0,2);\\n   let toStringArr = arrayMet.toString()\\n   let position = filterScores.indexOf(8)\\n   \\n   \\n   //The includes() method determines whether an array contains a specified element.\\n   let includeArr = filterScores.includes(10)\\n   console.log('find',includeArr)\\n})\\n}\".trim();var arrays=\"\\nconst mockData = [];\\n  const mockData2 = [\\\"Glenna Reicher\\\", \\\"Kurtis Weissnat\\\", \\\"Ervin Howell\\\",\\\"Leanne Graham\\\"];\\n  const commonElements = [];\\n  var str = '';\\n  var str2 = '';\\n  var dict = {};\\n  var obj = {};\\n  var objKey = [];\\n  var arr = [];\\n  var personEmail = [];\\n\\nfetch(\\\"https://jsonplaceholder.typicode.com/users\\\")\\n.then(res => res.json()) \\n.then(person => {\\n    person.map(val => {\\n      mockData.push(val.name)\\n    })\\n    // console.log('push respose into mockdata',mockData)\\n    var common = mockData.filter(item=>{\\n      return mockData2.includes(item)\\n  })\\n  for(var i=0; i<=common.length; i++){\\n    commonElements.push(common[i])\\n    }\\n    console.log(\\\"commonElements\\\",commonElements);\\n    \\n     commChar();\\n     arrToObj();\\n     objTOArr();\\n     allSum();\\n     displayDot();\\n     matchName();\\n  })\\n  \\n  \\n  //Common element in strings\\nconst commChar = () => {\\n  fetch(\\\"https://jsonplaceholder.typicode.com/users\\\")\\n      .then(res => res.json()) \\n      .then(person => {\\n     person.map(val => {\\n      str=val.name;\\n      str2=val.username;\\n       })\\n       \\n       for(var i=0; i < str.length; i++) {\\n        dict[str.charAt(i)] = 1;\\n      }\\n      // console.log('str',dict);\\n      \\n      var commonChars =[];\\n    for(var i=0; i < str2.length; i++) {\\n      if( dict[str2.charAt(i)] == 1) {\\n        commonChars.push(str2.charAt(i)); // this is optional we can simply print\\n      }\\n      // console.log('str2',commonChars);  \\n\\n    }\\n    \\n    dict = commonChars.join(\\\"\\\"); \\n    // console.log('commonChars',dict);\\n     })\\n}\\n\\n\\n//convert an Array to Object\\nconst arrToObj = () => {\\n  fetch(\\\"https://jsonplaceholder.typicode.com/users\\\")\\n      .then(res => res.json()) \\n      .then(person => {\\n          person.map(val => {\\n     \\n    //  console.log('arr',person)\\n    //  console.log('obj',...person)\\n  })\\n})\\n}\\n\\n\\n//convert an Object to Array\\nconst objTOArr = () => {\\n  fetch(\\\"https://jsonplaceholder.typicode.com/users\\\")\\n      .then(res => res.json()) \\n      .then(person => {\\n     \\n     person.map(val => {\\n      obj=val\\n     })\\n    //  console.log('obj',obj)\\n     \\n     //Convert the keys to Array using - Object.keys()\\n     objKey = Object.keys(obj)\\n    //  console.log('objKey',objKey)\\n\\n     //Converts the Values to Array using - Object.values()\\n     const objVal = Object.values(obj)\\n    //  console.log('objVal',objVal)\\n\\n     //Converts both keys and values using - Object.entries()\\n     const objAll = Object.entries(obj)\\n    //  console.log('objAll',objAll)\\n  })\\n}\\n\\n\\n//Sum of all elements of a given array\\nconst allSum = () => {\\n  fetch(\\\"https://jsonplaceholder.typicode.com/users\\\")\\n      .then(res => res.json()) \\n      .then(person => {\\n     \\n     person.map(val=>{\\n      arr.push(val._id);\\n  })\\n  var sum = arr.reduce((a, i) => {\\n    return a + i;\\n  });\\nconsole.log('sum',sum)\\n  })\\n}\\n\\n\\n//Dispay dot value  \\nconst displayDot = () => {\\n  fetch(\\\"https://jsonplaceholder.typicode.com/users\\\")\\n  .then(res => res.json()) \\n  .then(person => {\\n     \\n     person.map(val=>{\\n      personEmail.push(val.email);\\n    })\\n    // console.log('personEmail',personEmail)\\n  })\\n}\\n\\n\\n//Last match name\\nconst matchName = () => {\\n  fetch(\\\"https://jsonplaceholder.typicode.com/users\\\")\\n  .then(res => res.json()) \\n  .then(person => {\\n     \\n     const mockData = [];\\n     const names = [];\\n     const apiId = '5';\\n     person.map(val=>{\\n      mockData.push(val.id);\\n      \\n      if(val._id == apiId){\\n        names.push(val.name)\\n        for(let i=0; i<=names.length; i++){\\n          }\\n          console.log('inside loop',names)\\n       }\\n    })\\n    \\n    console.log('unique id',mockData)\\n  })\\n}\".trim();var arrObj=\"\\nconst person = {\\n  firstName: 'Max',\\n  age: 31,\\n  hobbies: ['Sport', 'Coocking'],\\n  greet(){\\n    console.log('Hi, I am', this.firstName);\\n  }\\n};\\n\\nconsole.log(person[0]); //undefined\\nconsole.log(person['firstName']);\\n\\nperson.lastName = 'Schwarz'\\nconsole.log(person);\\ndelete person.age;\\n\\nperson.greet();\".trim();var ArraysApi=/*#__PURE__*/function(_Component){_inherits(ArraysApi,_Component);function ArraysApi(){_classCallCheck(this,ArraysApi);return _possibleConstructorReturn(this,_getPrototypeOf(ArraysApi).apply(this,arguments));}_createClass(ArraysApi,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Array method\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:parseInts,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Arrays to Object\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:arrays,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2.Array in Object\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:arrObj,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return ArraysApi;}(Component);export default withStyles(styles)(ArraysApi);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/javaScripts/deepJs/arrayApi.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","parseInts","trim","arrays","arrObj","ArraysApi","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,0BAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CAGA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,eAAe,CAAE,SAAnB,CAA8BC,OAAO,CAAE,KAAvC,CAA8CC,QAAQ,CAAE,MAAxD,CAAf,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,KAAK,CAAE,CACLC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH,CAELN,OAAO,CAAEG,KAAK,CAACG,OAAN,CAAc,CAAd,CAFJ,CADgB,CAKvBC,QAAQ,CAAE,CACRF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA,CALa,CAQvBE,SAAS,CAAE,CACTC,SAAS,CAAE,QADF,CARY,CAAL,EAApB,CAaA,GAAMC,CAAAA,SAAS,CAAG,smMA6MfC,IA7Me,EAAlB,CAgNA,GAAMC,CAAAA,MAAM,CAAG,0rHA+JZD,IA/JY,EAAf,CAkKA,GAAME,CAAAA,MAAM,CAAG,kUAiBEF,IAjBF,EAAf,C,GAmBMG,CAAAA,S,qSACgB,CAClBC,UAAU,CAAC,iBAAMxB,CAAAA,KAAK,CAACyB,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAACb,KAA1B,EACE,8BAAI,oBAAC,OAAD,MAAJ,CADF,CADF,CADF,CAOE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEa,OAAO,CAACb,KAA1B,EACE,oBAAC,IAAD,MACE,6CADF,CAEE,2BAAK,KAAK,CAAEN,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEY,SADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAFF,CASE,8BATF,CAUE,iDAVF,CAWE,2BAAK,KAAK,CAAEZ,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEc,MADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAXF,CAkBE,8BAlBF,CAoBE,kDApBF,CAqBE,2BAAK,KAAK,CAAEd,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEe,MADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CArBF,CADF,CADF,CAPF,CADF,CA2CD,C,uBAjDqBvB,S,EAoDxB,cAAgBI,CAAAA,UAAU,CAACQ,MAAD,CAAV,CAAmBY,SAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst parseInts = `\nconst mockData = [];\nconst mainId = [];\nconst subParameters = [];\nconst city = [];\nconst matchingData = [];\nconst name = 'Clementina DuBuque';\nvar tempObj = [];\nvar sum = 0;\nvar avg = 0;\nvar arrayMet = [];\n\nfetch(\"https://jsonplaceholder.typicode.com/users\")\n.then(res => res.json()) \n.then(mockData => {\n  mockData.map(val => {\n    for(var i = 0; i < mockData.length; i++){\n      // console.log('api data in the loop',mockData[i])\n      if(mainId === mockData[i]._id){\n          // console.log('only match id',mockData[i]._id)\n          mockData.map(val => {\n            if(city.indexOf(val.name)===-1){\n                // console.log('only unique user city',val.address)\n                val.address.map(valCity => {\n                    subParameters.push(valCity.city)\n                    // console.log('Push city name in subParameters',subParameters)\n                    \n                    let newObj={\"id\":val._id, \"name\":val.name,'value':[]}\n                    newObj = newObj.value.push(valCity.city)\n                    // console.log('Push city name in new created object',newObj)\n                    \n                    var index=subParameters.indexOf(valCity._id)\n                    // console.log('index value',index,\":\",valCity._id)\n                    \n                    // subParameters[index].value = subParameters[index].concat(valCity._id)\n                    // console.log('index value',subParameters[index].value)\n                    \n                    if((valCity._id === mainId || valCity._id === mockData._id)){\n                        // console.log('matching hard coded value: ',valCity._id,\"=\",mockData._ids,\":\",mainId);\n                        matchingData=matchingData.concat(valCity._id);\n                        // console.log('matching values: ',matchingData)\n                    }\n                })\n            }\n            \n            else{\n              var index=subParameters.indexOf(val.phone)\n              subParameters[index].value = subParameters[index].value.concat(val.id)\n              // console.log('else values: ',subParameters)\n              }\n          })\n      }\n    }\n})\n\naddData();\npickRecord();\nSumAverage();\nextractKey();\narrayMethod();\n});\n\n\n//Add data in empty array from api values\nconst addData = () => {\nfetch(\"https://jsonplaceholder.typicode.com/users\")\n.then(res => res.json()) \n.then(mockData => {\nmockData.map(add => {\n    mockData.push(add.name)\n    \n    if(add.name === name){\n        // console.log('fields',mockData)\n        for(let i=0; i<=mockData.length; i++){\n            // console.log('Matched name',add.name)\n        }\n    }\n})\n})\n// console.log('after map',mockData);\n}\n\n\n//Pick a record from list\nconst pickRecord = () => {\nfetch(\"https://jsonplaceholder.typicode.com/users\")\n.then(res => res.json()) \n.then(mockData => {\n   mockData.map(pickRec => {\n    if(pickRec._id === mainId){\n        mockData.push(pickRec.email);\n        // console.log('map function',mockData)\n    }\n    \n// apiId = mockData.push(pickRec);\n// console.log('method',name,\";\",pickRec.name)\nif(pickRec.name === name){\n    for(let i=0; i<=mockData[i].length; i++){\n       let obj = [];\n       obj.push(mockData.name)\n        console.log('matching values',obj)\n        }\n    }\n   })\n})\n}\n\n\n//Add sum/avg of number from a list\nconst SumAverage = () => {\nfetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(res => res.json()) \n    .then(mockData => {\n   \n   mockData.map(fields => {\n    tempObj.push(fields._id) \n   })\n   for(let i =0; i<=tempObj.length;i++){\n    sum +=tempObj[i];\n    avg = sum/tempObj.length\n    // console.log('sum',sum)\n    }\n})\n\n//Flattening an array of arrays\nconst nested = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nlet flat = nested.reduce((acc, it) => [...acc, ...it], []);\nlet sumOfArray = flat.reduce((a, b) => a+b)\n// console.log('flat',flat)\n// console.log('Sum ',sumOfArray)\n}\n\n\n//Extract key/value pair from an object\nconst extractKey = () => {\nvar data = \n       [\n        {label:1, quater :'Q1', y:34},\n        {label:2, quater:'Q1', y:20},\n        {label:3, quater:'Q1', y:30},\n \n        {label:1, quater:'Q2', y:77},\n        {label:2, quater:'Q2', y:52},\n        {label:3, quater:'Q2', y:3},\n \n        {label:1, quater:'Q3', y:65},\n        {label:2, quater:'Q3', y:12},\n        {label:3, quater:'Q3', y:9},\n \n        {label:1, quater:'Q4', y:77},\n        {label:2, quater:'Q4', y:34},\n        {label:3, quater:'Q4', y:5}\n       ];\n       \nvar quartersum = {}\ndata.map(function(entry) {\n quartersum[entry.label] = (quartersum[entry.label]||0) + entry.y\n})\n\ndata.map(function(entry) {\n entry.percent = entry.y / quartersum[entry.label] * 100;\n//  console.log(JSON.stringify(entry))\n})\n\n//    console.log('data',quartersum);\n//    console.log('extract object keys',Object.keys(quartersum));\n//    console.log('extract object values',Object.values(quartersum));\n\n  for(let [key, value] of Object.entries(quartersum)){\n    //   console.log('extract object property',key, value);\n  }\n  var percentage = parseInt((sum * 100/quartersum.length));\n  console.log('percentage',percentage);\n}\n\n\nconst arrayMethod = () => {\nfetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(res => res.json()) \n    .then(arrayMeth => {\n   \n   arrayMeth.map(data => {\n    arrayMet.push(data._id)\n    // console.log('method',arrayMet)\n   })\n   \n   let scores = arrayMet.find(element => element > 4);\n   let filterScores = arrayMet.filter(element => element > 4);\n   let joinArr = filterScores.join(\"*\");\n   let spliceArr = filterScores.splice(0,2)\n   let concatArr = filterScores.concat(scores,joinArr,\"100\");\n   \n    //console.log('method',filterScores)\n   \n\n   //The slice() method slices out a piece of an array into a new array.\n   let sliceArr = filterScores.slice(0,2);\n   let toStringArr = arrayMet.toString()\n   let position = filterScores.indexOf(8)\n   \n   \n   //The includes() method determines whether an array contains a specified element.\n   let includeArr = filterScores.includes(10)\n   console.log('find',includeArr)\n})\n}`.trim();\n\n\nconst arrays = `\nconst mockData = [];\n  const mockData2 = [\"Glenna Reicher\", \"Kurtis Weissnat\", \"Ervin Howell\",\"Leanne Graham\"];\n  const commonElements = [];\n  var str = '';\n  var str2 = '';\n  var dict = {};\n  var obj = {};\n  var objKey = [];\n  var arr = [];\n  var personEmail = [];\n\nfetch(\"https://jsonplaceholder.typicode.com/users\")\n.then(res => res.json()) \n.then(person => {\n    person.map(val => {\n      mockData.push(val.name)\n    })\n    // console.log('push respose into mockdata',mockData)\n    var common = mockData.filter(item=>{\n      return mockData2.includes(item)\n  })\n  for(var i=0; i<=common.length; i++){\n    commonElements.push(common[i])\n    }\n    console.log(\"commonElements\",commonElements);\n    \n     commChar();\n     arrToObj();\n     objTOArr();\n     allSum();\n     displayDot();\n     matchName();\n  })\n  \n  \n  //Common element in strings\nconst commChar = () => {\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(res => res.json()) \n      .then(person => {\n     person.map(val => {\n      str=val.name;\n      str2=val.username;\n       })\n       \n       for(var i=0; i < str.length; i++) {\n        dict[str.charAt(i)] = 1;\n      }\n      // console.log('str',dict);\n      \n      var commonChars =[];\n    for(var i=0; i < str2.length; i++) {\n      if( dict[str2.charAt(i)] == 1) {\n        commonChars.push(str2.charAt(i)); // this is optional we can simply print\n      }\n      // console.log('str2',commonChars);  \n\n    }\n    \n    dict = commonChars.join(\"\"); \n    // console.log('commonChars',dict);\n     })\n}\n\n\n//convert an Array to Object\nconst arrToObj = () => {\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(res => res.json()) \n      .then(person => {\n          person.map(val => {\n     \n    //  console.log('arr',person)\n    //  console.log('obj',...person)\n  })\n})\n}\n\n\n//convert an Object to Array\nconst objTOArr = () => {\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(res => res.json()) \n      .then(person => {\n     \n     person.map(val => {\n      obj=val\n     })\n    //  console.log('obj',obj)\n     \n     //Convert the keys to Array using - Object.keys()\n     objKey = Object.keys(obj)\n    //  console.log('objKey',objKey)\n\n     //Converts the Values to Array using - Object.values()\n     const objVal = Object.values(obj)\n    //  console.log('objVal',objVal)\n\n     //Converts both keys and values using - Object.entries()\n     const objAll = Object.entries(obj)\n    //  console.log('objAll',objAll)\n  })\n}\n\n\n//Sum of all elements of a given array\nconst allSum = () => {\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(res => res.json()) \n      .then(person => {\n     \n     person.map(val=>{\n      arr.push(val._id);\n  })\n  var sum = arr.reduce((a, i) => {\n    return a + i;\n  });\nconsole.log('sum',sum)\n  })\n}\n\n\n//Dispay dot value  \nconst displayDot = () => {\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n  .then(res => res.json()) \n  .then(person => {\n     \n     person.map(val=>{\n      personEmail.push(val.email);\n    })\n    // console.log('personEmail',personEmail)\n  })\n}\n\n\n//Last match name\nconst matchName = () => {\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n  .then(res => res.json()) \n  .then(person => {\n     \n     const mockData = [];\n     const names = [];\n     const apiId = '5';\n     person.map(val=>{\n      mockData.push(val.id);\n      \n      if(val._id == apiId){\n        names.push(val.name)\n        for(let i=0; i<=names.length; i++){\n          }\n          console.log('inside loop',names)\n       }\n    })\n    \n    console.log('unique id',mockData)\n  })\n}`.trim();\n\n\nconst arrObj = `\nconst person = {\n  firstName: 'Max',\n  age: 31,\n  hobbies: ['Sport', 'Coocking'],\n  greet(){\n    console.log('Hi, I am', this.firstName);\n  }\n};\n\nconsole.log(person[0]); //undefined\nconsole.log(person['firstName']);\n\nperson.lastName = 'Schwarz'\nconsole.log(person);\ndelete person.age;\n\nperson.greet();`.trim();\n\nclass ArraysApi extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Array method</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={parseInts}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Arrays to Object</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={arrays}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2.Array in Object</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={arrObj}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(ArraysApi));\n"]},"metadata":{},"sourceType":"module"}