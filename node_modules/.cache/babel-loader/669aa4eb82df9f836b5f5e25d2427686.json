{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/pythone/deeppy/csv.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst reading = `\nimport csv\n\nfilename = \"aapl.csv\"\n\nfields = []                                                       # initializing the titles and rows list\nrows = []\n\nwith open(filename, 'r') as csvfile:                              # reading csv file\n    csvreader = csv.reader(csvfile)                               # creating a csv reader object\n    fields = next(csvreader)                                      # extracting field names through first row\n    \n    for row in csvreader:                                         # extracting each data row one by one\n        rows.append(row)\n\n    print(\"Total no. of rows: %d\" % (csvreader.line_num))         # get total number of rows\n\n\nprint('Field names are:' + ', '.join(field for field in fields))                          \n\nprint('First 5 rows are:')\nfor row in rows[:5]:\n    for col in row:                                                                     # parsing each column of a row\n        print(\"%10s\" % col),\n`.trim();\nconst writing = `\nimport csv\n\n\nfields = ['Name', 'Branch', 'Year', 'CGPA']                            \n\nrows = [['Nikhil', 'COE', '2', '9.0'],                                  # data rows of csv file\n        ['Sanchit', 'COE', '2', '9.1'],\n        ['Aditya', 'IT', '2', '9.3'],\n        ['Sagar', 'SE', '1', '9.5'],\n        ['Prateek', 'MCE', '3', '7.8'],\n        ['Sahil', 'EP', '2', '9.1']]\n\nfilename = \"university_records.csv\"                                     # name of csv file\n\nwith open(filename, 'w') as csvfile:                                    \n    csvwriter = csv.writer(csvfile)                                     # creating a csv writer object\n    csvwriter.writerow(fields)                                          # writing the fields\n    csvwriter.writerows(rows)                                           # writing the data rows\n    `.trim();\nconst dictionary = `\nimport csv\n\n\nmydict = [{'branch': 'COE', 'cgpa': '9.0', 'name': 'Nikhil', 'year': '2'},        # my data rows as dictionary objects\n          {'branch': 'COE', 'cgpa': '9.1', 'name': 'Sanchit', 'year': '2'},\n          {'branch': 'IT', 'cgpa': '9.3', 'name': 'Aditya', 'year': '2'},\n          {'branch': 'SE', 'cgpa': '9.5', 'name': 'Sagar', 'year': '1'},\n          {'branch': 'MCE', 'cgpa': '7.8', 'name': 'Prateek', 'year': '3'},\n          {'branch': 'EP', 'cgpa': '9.1', 'name': 'Sahil', 'year': '2'}]\n\nfields = ['name', 'branch', 'year', 'cgpa']\n\nfilename = \"university_records.csv\"\n\nwith open(filename, 'w') as csvfile:\n    writer = csv.DictWriter(csvfile, fieldnames=fields)\n    writer.writeheader()                                                            # writing headers (field names)\n    writer.writerows(mydict)                                                        # writing data rows\n    `.trim();\nconst searchings = `\n    def binary_search(arr, low, high, x):\n        if high >= low:                                                                    \n            mid = (high + low) // 2\n            \n            if arr[mid] == x:                                                # If element is present at the middle itself\n                return mid\n            elif arr[mid] > x:\n                return binary_search(arr, low, mid - 1, x)\n            else:\n                return binary_search(arr, mid + 1, high, x)\n        else:                                                                       # Element is not present in the array\n            return -1\n    \n            \n    # Test array\n    arr = [ 2, 3, 4, 10, 40 ]\n    x = 10\n    \n    result = binary_search(arr, 0, len(arr)-1, x)\n    if result != -1:\n        print(\"Element is present at index\", str(result))\n    else:\n        print(\"Element is not present in array\") `.trim();\nconst quickSort = `\n    def partition(arr,low,high):\n        i = ( low-1 )                                                                         # index of smaller element\n        pivot = arr[high]                                                                     # pivot\n    \n        for j in range(low , high):\n            if   arr[j] <= pivot:\n                i = i+1\n                arr[i],arr[j] = arr[j],arr[i]\n    \n        arr[i+1],arr[high] = arr[high],arr[i+1]\n        return ( i+1 )\n    \n    \n    def quickSort(arr,low,high):                                  # Function to do Quick sort.\n        if low < high:\n            pi = partition(arr,low,high)                          # pi is partitioning index, arr[p] is now at right place\n                                                            # Separately sort elements before partition and after partition\n            quickSort(arr, low, pi-1)\n            quickSort(arr, pi+1, high)\n    \n    arr = [10, 7, 8, 9, 1, 5]\n    n = len(arr)\n    quickSort(arr,0,n-1)\n    print (\"Sorted array is:\")\n    for i in range(n):\n        print (\"%d\" %arr[i]), `.trim();\n\nclass CsvPython extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"1. Reading a CSV file\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: reading,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"2. Writing to a CSV file\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: writing,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"3. Writing a dictionary to a CSV file\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: dictionary,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"Searching\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: searchings,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"QuickSort\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, \"The main function that implements QuickSort \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, \"arr[] :\"), \"Array to be sorted.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"low :\"), \"Starting index.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, \"high :\"), \"Ending index.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: quickSort,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(CsvPython);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/pythone/deeppy/csv.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","reading","trim","writing","dictionary","searchings","quickSort","CsvPython","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst reading = `\nimport csv\n\nfilename = \"aapl.csv\"\n\nfields = []                                                       # initializing the titles and rows list\nrows = []\n\nwith open(filename, 'r') as csvfile:                              # reading csv file\n    csvreader = csv.reader(csvfile)                               # creating a csv reader object\n    fields = next(csvreader)                                      # extracting field names through first row\n    \n    for row in csvreader:                                         # extracting each data row one by one\n        rows.append(row)\n\n    print(\"Total no. of rows: %d\" % (csvreader.line_num))         # get total number of rows\n\n\nprint('Field names are:' + ', '.join(field for field in fields))                          \n\nprint('First 5 rows are:')\nfor row in rows[:5]:\n    for col in row:                                                                     # parsing each column of a row\n        print(\"%10s\" % col),\n`.trim();\n\nconst writing = `\nimport csv\n\n\nfields = ['Name', 'Branch', 'Year', 'CGPA']                            \n\nrows = [['Nikhil', 'COE', '2', '9.0'],                                  # data rows of csv file\n        ['Sanchit', 'COE', '2', '9.1'],\n        ['Aditya', 'IT', '2', '9.3'],\n        ['Sagar', 'SE', '1', '9.5'],\n        ['Prateek', 'MCE', '3', '7.8'],\n        ['Sahil', 'EP', '2', '9.1']]\n\nfilename = \"university_records.csv\"                                     # name of csv file\n\nwith open(filename, 'w') as csvfile:                                    \n    csvwriter = csv.writer(csvfile)                                     # creating a csv writer object\n    csvwriter.writerow(fields)                                          # writing the fields\n    csvwriter.writerows(rows)                                           # writing the data rows\n    `.trim();\n\nconst dictionary = `\nimport csv\n\n\nmydict = [{'branch': 'COE', 'cgpa': '9.0', 'name': 'Nikhil', 'year': '2'},        # my data rows as dictionary objects\n          {'branch': 'COE', 'cgpa': '9.1', 'name': 'Sanchit', 'year': '2'},\n          {'branch': 'IT', 'cgpa': '9.3', 'name': 'Aditya', 'year': '2'},\n          {'branch': 'SE', 'cgpa': '9.5', 'name': 'Sagar', 'year': '1'},\n          {'branch': 'MCE', 'cgpa': '7.8', 'name': 'Prateek', 'year': '3'},\n          {'branch': 'EP', 'cgpa': '9.1', 'name': 'Sahil', 'year': '2'}]\n\nfields = ['name', 'branch', 'year', 'cgpa']\n\nfilename = \"university_records.csv\"\n\nwith open(filename, 'w') as csvfile:\n    writer = csv.DictWriter(csvfile, fieldnames=fields)\n    writer.writeheader()                                                            # writing headers (field names)\n    writer.writerows(mydict)                                                        # writing data rows\n    `.trim();\n\nconst searchings = `\n    def binary_search(arr, low, high, x):\n        if high >= low:                                                                    \n            mid = (high + low) // 2\n            \n            if arr[mid] == x:                                                # If element is present at the middle itself\n                return mid\n            elif arr[mid] > x:\n                return binary_search(arr, low, mid - 1, x)\n            else:\n                return binary_search(arr, mid + 1, high, x)\n        else:                                                                       # Element is not present in the array\n            return -1\n    \n            \n    # Test array\n    arr = [ 2, 3, 4, 10, 40 ]\n    x = 10\n    \n    result = binary_search(arr, 0, len(arr)-1, x)\n    if result != -1:\n        print(\"Element is present at index\", str(result))\n    else:\n        print(\"Element is not present in array\") `.trim();\n\nconst quickSort = `\n    def partition(arr,low,high):\n        i = ( low-1 )                                                                         # index of smaller element\n        pivot = arr[high]                                                                     # pivot\n    \n        for j in range(low , high):\n            if   arr[j] <= pivot:\n                i = i+1\n                arr[i],arr[j] = arr[j],arr[i]\n    \n        arr[i+1],arr[high] = arr[high],arr[i+1]\n        return ( i+1 )\n    \n    \n    def quickSort(arr,low,high):                                  # Function to do Quick sort.\n        if low < high:\n            pi = partition(arr,low,high)                          # pi is partitioning index, arr[p] is now at right place\n                                                            # Separately sort elements before partition and after partition\n            quickSort(arr, low, pi-1)\n            quickSort(arr, pi+1, high)\n    \n    arr = [10, 7, 8, 9, 1, 5]\n    n = len(arr)\n    quickSort(arr,0,n-1)\n    print (\"Sorted array is:\")\n    for i in range(n):\n        print (\"%d\" %arr[i]), `.trim();\n\nclass CsvPython extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Reading a CSV file</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={reading}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Writing to a CSV file</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={writing}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Writing a dictionary to a CSV file</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={dictionary}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Searching</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={searchings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>QuickSort</h3>\n              <b>The main function that implements QuickSort </b>\n              <ul>\n                <li><b>arr[] :</b>Array to be sorted.</li>\n                <li><b>low :</b>Starting index.</li>\n                <li><b>high :</b>Ending index.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={quickSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(CsvPython));\n"]},"metadata":{},"sourceType":"module"}