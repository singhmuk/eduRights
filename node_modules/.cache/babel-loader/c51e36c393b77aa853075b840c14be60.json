{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/pythone/deeppy/regex.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst password = `\ndef password_check(passwd):\n    SpecialSym = ['$', '@', '#', '%']\n    val = True\n\n    if len(passwd) < 6:\n        print('length should be 6')\n        val = False\n\n    if len(passwd) > 20:\n        print('length should not > 20')\n        val = False\n\n    if not any(char.isdigit() for char in passwd):\n        print('Password should have at least one numeral')\n        val = False\n\n    if not any(char.isupper() for char in passwd):\n        print('Password should have at least one uppercase letter')\n        val = False\n\n    if not any(char.islower() for char in passwd):\n        print('Password should have at least one lowercase letter')\n        val = False\n\n    if not any(char in SpecialSym for char in passwd):\n        print('Password should have at least one of the symbols $@#')\n        val = False\n    if val:\n        return val\n\n\ndef main():\n    passwd = 'Geek12@'\n\n    if (password_check(passwd)):\n        print(\"Password is valid\")\n    else:\n        print(\"Invalid Password !!\")\n\n\nif __name__ == '__main__':\n    main()`.trim();\nconst usingRegex = `\nimport re\n\ndef main():\n    passwd = 'Geek12@'\n    reg = \"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!#%*?&]{6,20}$\"\n    \n    pat = re.compile(reg)                                                                   # compiling regex\n    mat = re.search(pat, passwd)                                                            # searching regex\n\n    if mat:\n        print(\"Password is valid.\")\n    else:\n        print(\"Password invalid !!\")\n\n\nif __name__ == '__main__':\n    main()`.trim();\nconst generators = `\nimport random\nletters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', \n          'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', \n          'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\nnumbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\nsymbols = ['!', '#', '$', '%', '&', '(', ')', '*', '+']\n\nprint(\"Welcome to the PyPassword Generator!\")\nnr_letters = int(input(\"How many letters would you like in your password?: \"))\nnr_symbols = int(input(f\"How many symbols would you like?: \"))\nnr_numbers = int(input(f\"How many numbers would you like?: \"))\n\n#Eazy Level\npassword = \"\"\n\nfor char in range(1, nr_letters + 1):\n  password += random.choice(letters)\n\nfor char in range(1, nr_symbols + 1):\n  password += random.choice(symbols)\n\nfor char in range(1, nr_numbers + 1):\n  password += random.choice(numbers)\n\nprint(password)\n\n\n#Hard Level\npassword_list = []\n\nfor char in range(1, nr_letters + 1):\n  password_list.append(random.choice(letters))\n\nfor char in range(1, nr_symbols + 1):\n  password_list += random.choice(symbols)\n\nfor char in range(1, nr_numbers + 1):\n  password_list += random.choice(numbers)\n\nrandom.shuffle(password_list)                                                         #print(password_list)\n\npassword = \"\"\nfor char in password_list:\n  password += char\n\nprint(f\"Your password is: {password}\")`.trim();\nconst searching = `\nimport re\n\nregex = r\"([a-zA-Z]+) (\\d+)\"\n\nmatch = re.search(regex, \"I was born on June 24\")\n\nif match != None:\n\tprint (\"Match at index %s, %s\" % (match.start(), match.end()))\n\tprint (\"Full match: %s\" % (match.group(0)))\n\tprint (\"Month: %s\" % (match.group(1)))\n\tprint (\"Day: %s\" % (match.group(2)))\n\nelse:\n\tprint (\"The regex pattern does not match.\")\n\n\n\n#2 \ndef findMonthAndDate(string):\n    regex = r\"([a-zA-Z]+) (\\d+)\"\n    match = re.match(regex, string)\n\n    if match == None:\n        print(\"Not a valid date\")\n        return\n\n    print(\"Given Data: %s\" % (match.group()))\n    print(\"Month: %s\" % (match.group(1)))\n    print(\"Day: %s\" % (match.group(2)))\n\nfindMonthAndDate(\"Jun 24\")\nprint(\"\")\nfindMonthAndDate(\"I was born on June 24\")\n\n\n\n#3 \nstring = \"\"\"Hello my Number is 123456789 and\n\t\t\tmy friend's number is 987654321\"\"\"\n\nregex = '\\d+'\n\nmatch = re.findall(regex, string)\nprint(match)`.trim();\nconst syntex = `\n[]  Represent a character class\n^   Matches the beginning\n$   Matches the end\n.   Matches any character except newline\n?   Matches zero or one occurrence.\n|   Means OR (Matches with any of the characters separated by it.\n*   Any number of occurrences (including 0 occurrences)\n+   One or more occurrences\n{}  Indicate number of occurrences of a preceding RE  to match.\n()  Enclose a group of REs\n\n\n#2\n# class [abcde] will match with string with 'a', 'b', 'c', 'd', 'e'.\np = re.compile('[a-e]')\n\n#3\nprint(p.findall(\"Aye, said Mr. Gibenson Stark\"))\n\n\n#4\np = re.compile('\\d')                                                           \nprint(p.findall(\"I went to him at 11 A.M. on 4th July 1886\"))\n\np = re.compile('\\d+')                                             \nprint(p.findall(\"I went to him at 11 A.M. on 4th July 1886\"))\n\n\n\n#5\np = re.compile('\\w')                                                 \nprint(p.findall(\"He said * in some_lang.\"))\n\np = re.compile('\\w+')                                                 \nprint(p.findall(\"I went to him at 11 A.M., he said *** in some_language.\"))\n\np = re.compile('\\W')                                                 \nprint(p.findall(\"he said *** in some_language.\"))\n\n\n#6\np = re.compile('ab*')                                              \nprint(p.findall(\"ababbaabbb\"))\n\n\n#7\nfrom re import split\n\nprint(split('\\W+', 'Words, words , Words'))            \nprint(split('\\W+', \"Word's words Words\"))\n\nprint(split('\\W+', 'On 12th Jan 2016, at 11:02 AM'))\nprint(split('\\d+', 'On 12th Jan 2016, at 11:02 AM'))              #Splitting occurs at '12', '2016', '11', '02' only\n\n\n#8\nFunction sub()\n\nprint(re.sub('ub', '~*' , 'Subject has Uber booked already', flags = re.IGNORECASE))\n                                    \nprint(re.sub('ub', '~*' , 'Subject has Uber booked already'))     # Case Sensitivity, 'Ub' in \"Uber\", will not be reaplced.\n                                    \nprint(re.sub('ub', '~*' , 'Subject', count=1, flags = re.IGNORECASE))      # count=1, maximum times replacement occurs is 1.\n                                    \nprint(re.sub(r'\\sAND\\s', ' & ', 'Baked', flags=re.IGNORECASE))        # 'r' before the patter denotes RE, \\s is for start \n                                                                    #and end of a String.\n\n\n#9\nFunction subn()\nprint(re.subn('ub', '~*' , 'Subject booked already'))\nt = re.subn('ub', '~*' , 'Subject booked already', flags = re.IGNORECASE)\nprint(t)\nprint(len(t))\n\nprint(t[0])\n\n\n#10 \nFunction escape()\n\nprint(re.escape(\"This is Awseome even 1 AM\"))\nprint(re.escape(\"I Asked what is this [a-9], he said \\t ^WoW\"))`.trim(); // const list = ``.trim();\n// const list = ``.trim();\n\nclass Regex extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, \"Password validation Without using Regex\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: password,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, \"Using regex\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: usingRegex,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, \"Password Generator\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: generators,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, \"Searching an occurrence of pattern\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, \"re.search(): \"), \"either returns None (if the pattern doesn\\u2019t match), or a \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, \"re.MatchObject\"), \" that contains information about the matching part of the string. This method stops after the first match, so this is best suited for testing a regular expression more than extracting data.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, \"re.match(): \"), \"Matching a Pattern with Text.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, \"re.findall(): \"), \"Finding all occurrences of a pattern. Return all non-overlapping matches of pattern in string.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: searching,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, \"Syntex\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, \"Function compile(): \"), \"Regular expressions are compiled into pattern objects, which have methods for various operations such as searching for pattern matches or performing string substitutions.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, \"compile(): \"), \"creates regular expression character class [a-e], which is equivalent to [abcde].\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, \"findall(): \"), \"searches for the Regular Expression and return a list upon finding.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, \"Set class [s,.] will match any whitespace character, \\u2018,\\u2019, or,\\u2019.\\u2019 .\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, \":d \"), \"is equivalent to [0-9].\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, \":d+ \"), \"match a group on [0-9], group of one or greater size.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, \"w: \"), \"equivalent to [a-zA-Z0-9_].\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, \"w+: \"), \"matches to group of alphanumeric character.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, \"W: \"), \"matches to non alphanumeric characters.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, \"W+: \"), \"denotes Non-Alphanumeric Characters or group of characters.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, \"ub: \"), \"matches the string at \\\"Subject\\\" and \\\"Uber\\\".\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, \"escape(): \"), \"returns a string with BackSlash '', before every Non-Alphanumeric Character.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, \"*: \"), \"replaces the no. of occurrence of a character.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: syntex,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default withStyles(styles)(Regex);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/pythone/deeppy/regex.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","password","trim","usingRegex","generators","searching","syntex","Regex","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,UAAtB,EAAkCC,IAAlC,QAA8C,mBAA9C;AAEA,OAAO,0BAAP;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AAGA,MAAMC,MAAM,GAAG;AAAEC,EAAAA,eAAe,EAAE,SAAnB;AAA8BC,EAAAA,OAAO,EAAE,KAAvC;AAA8CC,EAAAA,QAAQ,EAAE;AAAxD,CAAf;;AAEA,MAAMC,MAAM,GAAGC,KAAK,KAAK;AACvBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH;AAELN,IAAAA,OAAO,EAAEG,KAAK,CAACG,OAAN,CAAc,CAAd;AAFJ,GADgB;AAKvBC,EAAAA,QAAQ,EAAE;AACRF,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd;AADA,GALa;AAQvBE,EAAAA,SAAS,EAAE;AACTC,IAAAA,SAAS,EAAE;AADF;AARY,CAAL,CAApB;;AAaA,MAAMC,QAAQ,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAAD,CA0CLC,IA1CK,EAAjB;AA4CA,MAAMC,UAAU,GAAI;;;;;;;;;;;;;;;;;WAAD,CAiBPD,IAjBO,EAAnB;AAmBA,MAAME,UAAU,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCAAD,CA8CqBF,IA9CrB,EAAnB;AAgDA,MAAMG,SAAS,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;aAAD,CA4CJH,IA5CI,EAAlB;AA8CA,MAAMI,MAAM,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gEAAD,CAmFkDJ,IAnFlD,EAAf,C,CAqFA;AAEA;;AAGA,MAAMK,KAAN,SAAoB1B,SAApB,CAA8B;AAC5B2B,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,UAAU,CAAC,MAAM3B,KAAK,CAAC4B,YAAN,EAAP,EAA6B,CAA7B,CAAV;AACD;;AACDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB;AACA,WACE,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAED,OAAO,CAACjB,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAJ,CADF,CADF,CADF,EAME,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAEiB,OAAO,CAACjB,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDADF,EAEE;AAAK,MAAA,KAAK,EAAEN,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEY,QADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAFF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAXF,EAYE;AAAK,MAAA,KAAK,EAAEZ,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEc,UADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAZF,EAmBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnBF,EAqBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BArBF,EAsBE;AAAK,MAAA,KAAK,EAAEd,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEe,UADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAtBF,EA6BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7BF,EA+BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CA/BF,EAgCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAJ,oEAAiF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAjF,kMADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAJ,kCAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAJ,mGALF,CAhCF,EAwCE;AAAK,MAAA,KAAK,EAAEf,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEgB,SADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAxCF,EA+CE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/CF,EAiDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjDF,EAkDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAJ,+KADF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAJ,sFAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAJ,wEAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gGALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAJ,4BANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAJ,0DAPF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAJ,gCARF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAJ,gDATF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAJ,4CAVF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAJ,gEAXF,EAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAJ,oDAZF,EAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAJ,iFAbF,EAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAJ,mDAdF,CAlDF,EAkEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlEF,EAoEE;AAAK,MAAA,KAAK,EAAEhB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEiB,MADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CApEF,EA2EE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3EF,CADF,CADF,CANF,CADF;AA6GD;;AAnH2B;;AAsH9B,eAAgBrB,UAAU,CAACQ,MAAD,CAAV,CAAmBc,KAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst password = `\ndef password_check(passwd):\n    SpecialSym = ['$', '@', '#', '%']\n    val = True\n\n    if len(passwd) < 6:\n        print('length should be 6')\n        val = False\n\n    if len(passwd) > 20:\n        print('length should not > 20')\n        val = False\n\n    if not any(char.isdigit() for char in passwd):\n        print('Password should have at least one numeral')\n        val = False\n\n    if not any(char.isupper() for char in passwd):\n        print('Password should have at least one uppercase letter')\n        val = False\n\n    if not any(char.islower() for char in passwd):\n        print('Password should have at least one lowercase letter')\n        val = False\n\n    if not any(char in SpecialSym for char in passwd):\n        print('Password should have at least one of the symbols $@#')\n        val = False\n    if val:\n        return val\n\n\ndef main():\n    passwd = 'Geek12@'\n\n    if (password_check(passwd)):\n        print(\"Password is valid\")\n    else:\n        print(\"Invalid Password !!\")\n\n\nif __name__ == '__main__':\n    main()`.trim();\n\nconst usingRegex = `\nimport re\n\ndef main():\n    passwd = 'Geek12@'\n    reg = \"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!#%*?&]{6,20}$\"\n    \n    pat = re.compile(reg)                                                                   # compiling regex\n    mat = re.search(pat, passwd)                                                            # searching regex\n\n    if mat:\n        print(\"Password is valid.\")\n    else:\n        print(\"Password invalid !!\")\n\n\nif __name__ == '__main__':\n    main()`.trim();\n\nconst generators = `\nimport random\nletters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', \n          'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', \n          'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\nnumbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\nsymbols = ['!', '#', '$', '%', '&', '(', ')', '*', '+']\n\nprint(\"Welcome to the PyPassword Generator!\")\nnr_letters = int(input(\"How many letters would you like in your password?: \"))\nnr_symbols = int(input(f\"How many symbols would you like?: \"))\nnr_numbers = int(input(f\"How many numbers would you like?: \"))\n\n#Eazy Level\npassword = \"\"\n\nfor char in range(1, nr_letters + 1):\n  password += random.choice(letters)\n\nfor char in range(1, nr_symbols + 1):\n  password += random.choice(symbols)\n\nfor char in range(1, nr_numbers + 1):\n  password += random.choice(numbers)\n\nprint(password)\n\n\n#Hard Level\npassword_list = []\n\nfor char in range(1, nr_letters + 1):\n  password_list.append(random.choice(letters))\n\nfor char in range(1, nr_symbols + 1):\n  password_list += random.choice(symbols)\n\nfor char in range(1, nr_numbers + 1):\n  password_list += random.choice(numbers)\n\nrandom.shuffle(password_list)                                                         #print(password_list)\n\npassword = \"\"\nfor char in password_list:\n  password += char\n\nprint(f\"Your password is: {password}\")`.trim();\n\nconst searching = `\nimport re\n\nregex = r\"([a-zA-Z]+) (\\d+)\"\n\nmatch = re.search(regex, \"I was born on June 24\")\n\nif match != None:\n\tprint (\"Match at index %s, %s\" % (match.start(), match.end()))\n\tprint (\"Full match: %s\" % (match.group(0)))\n\tprint (\"Month: %s\" % (match.group(1)))\n\tprint (\"Day: %s\" % (match.group(2)))\n\nelse:\n\tprint (\"The regex pattern does not match.\")\n\n\n\n#2 \ndef findMonthAndDate(string):\n    regex = r\"([a-zA-Z]+) (\\d+)\"\n    match = re.match(regex, string)\n\n    if match == None:\n        print(\"Not a valid date\")\n        return\n\n    print(\"Given Data: %s\" % (match.group()))\n    print(\"Month: %s\" % (match.group(1)))\n    print(\"Day: %s\" % (match.group(2)))\n\nfindMonthAndDate(\"Jun 24\")\nprint(\"\")\nfindMonthAndDate(\"I was born on June 24\")\n\n\n\n#3 \nstring = \"\"\"Hello my Number is 123456789 and\n\t\t\tmy friend's number is 987654321\"\"\"\n\nregex = '\\d+'\n\nmatch = re.findall(regex, string)\nprint(match)`.trim();\n\nconst syntex = `\n[]  Represent a character class\n^   Matches the beginning\n$   Matches the end\n.   Matches any character except newline\n?   Matches zero or one occurrence.\n|   Means OR (Matches with any of the characters separated by it.\n*   Any number of occurrences (including 0 occurrences)\n+   One or more occurrences\n{}  Indicate number of occurrences of a preceding RE  to match.\n()  Enclose a group of REs\n\n\n#2\n# class [abcde] will match with string with 'a', 'b', 'c', 'd', 'e'.\np = re.compile('[a-e]')\n\n#3\nprint(p.findall(\"Aye, said Mr. Gibenson Stark\"))\n\n\n#4\np = re.compile('\\d')                                                           \nprint(p.findall(\"I went to him at 11 A.M. on 4th July 1886\"))\n\np = re.compile('\\d+')                                             \nprint(p.findall(\"I went to him at 11 A.M. on 4th July 1886\"))\n\n\n\n#5\np = re.compile('\\w')                                                 \nprint(p.findall(\"He said * in some_lang.\"))\n\np = re.compile('\\w+')                                                 \nprint(p.findall(\"I went to him at 11 A.M., he said *** in some_language.\"))\n\np = re.compile('\\W')                                                 \nprint(p.findall(\"he said *** in some_language.\"))\n\n\n#6\np = re.compile('ab*')                                              \nprint(p.findall(\"ababbaabbb\"))\n\n\n#7\nfrom re import split\n\nprint(split('\\W+', 'Words, words , Words'))            \nprint(split('\\W+', \"Word's words Words\"))\n\nprint(split('\\W+', 'On 12th Jan 2016, at 11:02 AM'))\nprint(split('\\d+', 'On 12th Jan 2016, at 11:02 AM'))              #Splitting occurs at '12', '2016', '11', '02' only\n\n\n#8\nFunction sub()\n\nprint(re.sub('ub', '~*' , 'Subject has Uber booked already', flags = re.IGNORECASE))\n                                    \nprint(re.sub('ub', '~*' , 'Subject has Uber booked already'))     # Case Sensitivity, 'Ub' in \"Uber\", will not be reaplced.\n                                    \nprint(re.sub('ub', '~*' , 'Subject', count=1, flags = re.IGNORECASE))      # count=1, maximum times replacement occurs is 1.\n                                    \nprint(re.sub(r'\\sAND\\s', ' & ', 'Baked', flags=re.IGNORECASE))        # 'r' before the patter denotes RE, \\s is for start \n                                                                    #and end of a String.\n\n\n#9\nFunction subn()\nprint(re.subn('ub', '~*' , 'Subject booked already'))\nt = re.subn('ub', '~*' , 'Subject booked already', flags = re.IGNORECASE)\nprint(t)\nprint(len(t))\n\nprint(t[0])\n\n\n#10 \nFunction escape()\n\nprint(re.escape(\"This is Awseome even 1 AM\"))\nprint(re.escape(\"I Asked what is this [a-9], he said \\t ^WoW\"))`.trim();\n\n// const list = ``.trim();\n\n// const list = ``.trim();\n\n\nclass Regex extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Password validation Without using Regex</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={password}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Using regex</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={usingRegex}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Password Generator</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={generators}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Searching an occurrence of pattern</h3>\n              <ul>\n                <li><b>re.search(): </b>either returns None (if the pattern doesn’t match), or a <b>re.MatchObject</b> that contains information about\n                  the matching part of the string. This method stops after the first match, so this is best suited for testing a regular expression more\n                  than extracting data.</li>\n                <li><b>re.match(): </b>Matching a Pattern with Text.</li>\n                <li><b>re.findall(): </b>Finding all occurrences of a pattern. Return all non-overlapping matches of pattern in string.</li>\n              </ul>\n\n              <div style={titles}>\n                <PrismCode\n                  code={searching}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Syntex</h3>\n              <ul>\n                <li><b>Function compile(): </b>Regular expressions are compiled into pattern objects, which have methods for various\n                  operations such as searching for pattern matches or performing string substitutions.</li>\n                <li><b>compile(): </b>creates regular expression character class [a-e], which is equivalent to [abcde].</li>\n                <li><b>findall(): </b>searches for the Regular Expression and return a list upon finding.</li>\n                <li>Set class [s,.] will match any whitespace character, ‘,’, or,’.’ .</li>\n                <li><b>:d </b>is equivalent to [0-9].</li>\n                <li><b>:d+ </b>match a group on [0-9], group of one or greater size.</li>\n                <li><b>w: </b>equivalent to [a-zA-Z0-9_].</li>\n                <li><b>w+: </b>matches to group of alphanumeric character.</li>\n                <li><b>W: </b>matches to non alphanumeric characters.</li>\n                <li><b>W+: </b>denotes Non-Alphanumeric Characters or group of characters.</li>\n                <li><b>ub: </b>matches the string at \"Subject\" and \"Uber\".</li>\n                <li><b>escape(): </b>returns a string with BackSlash '', before every Non-Alphanumeric Character.</li>\n                <li><b>*: </b>replaces the no. of occurrence of a character.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={syntex}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              {/* <h3></h3>\n              <div style={titles}>\n                <PrismCode\n                  code={list}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3></h3>\n              <div style={titles}>\n                <PrismCode\n                  code={list}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div> */}\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Regex));\n"]},"metadata":{},"sourceType":"module"}