{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';import DecidionTrees from'../../../assets/ML/dt.png';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var redesign={height:350,width:600};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var decisionClar=\"\\nimport pandas as pd\\nfrom sklearn.preprocessing import LabelEncoder\\nfrom sklearn import tree\\n\\ndf = pd.read_csv(\\\"salaries.csv\\\")\\ninputs = df.drop('salary_more_then_100k',axis='columns')\\ntarget = df['salary_more_then_100k']\\n\\nle_company = LabelEncoder()\\nle_job = LabelEncoder()\\nle_degree = LabelEncoder()\\n\\ninputs['company_n'] = le_company.fit_transform(inputs['company'])\\ninputs['job_n'] = le_job.fit_transform(inputs['job'])\\ninputs['degree_n'] = le_degree.fit_transform(inputs['degree'])\\ninputs\\n\\ninputs_n = inputs.drop(['company','job','degree'],axis='columns')\\ninputs_n\\ntarget\\n\\nmodel = tree.DecisionTreeClassifier()\\nmodel.fit(inputs_n, target)\\nmodel.score(inputs_n,target)\\n\\nmodel.predict([[2,1,0]])                                #Is salary of Google, Computer Engineer, Bachelors degree > 100 k\\nmodel.predict([[2,1,1]])                                #Is salary of Google, Computer Engineer, Masters degree > 100 k\\n\".trim();var Impurity=\"\\ndef gini(rows):\\n    \\\"\\\"\\\"Calculate the Gini Impurity for a list of rows.\\\"\\\"\\\"\\n    counts = class_counts(rows)\\n    impurity = 1\\n    \\n    for lbl in counts:\\n        prob_of_lbl = counts[lbl] / float(len(rows))\\n        impurity -= prob_of_lbl**2\\n    return impurity\".trim();var training=\"\\ntraining_data = [\\n  ['Green', 3, 'Apple'],\\n  ['Yellow', 3, 'Apple'],\\n  ['Red', 1, 'Grape'],\\n  ['Red', 1, 'Grape'],\\n  ['Yellow', 3, 'Lemon'],\\n  ]\\n# Header = [\\\"Color\\\", \\\"diameter\\\", \\\"Label\\\"]\\n\\nmy_tree = build_tree(training_data)\\nprint_tree(my_tree)\\n\".trim();var DecisionTree=/*#__PURE__*/function(_Component){_inherits(DecisionTree,_Component);function DecisionTree(){_classCallCheck(this,DecisionTree);return _possibleConstructorReturn(this,_getPrototypeOf(DecisionTree).apply(this,arguments));}_createClass(DecisionTree,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Decision Tree (supervised algorithms)\"),\"Decision tree analysis is a predictive modelling tool that can be applied across many areas. Decision trees can be constructed by an algorithmic approach that can split the dataset in different ways based on different conditions.\",React.createElement(\"br\",null),\"It can be used for both classification and regression tasks.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"The two main entities of a tree are decision nodes, where the data is split and leaves, where we got outcome.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"We have the following two types of decision trees.\",React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"1. Classification decision trees: \"),\"In this kind of decision trees, the decision variable is categorical. The above decision tree is an example of classification decision tree.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Regression decision trees: \"),\"In this kind of decision trees, the decision variable is continuous.\")),React.createElement(\"br\",null),\"Implementing Decision Tree Algorithm: Gini Index It is the name of the cost function that is used to evaluate the binary splits in the dataset and works with the categorial target variable \\u201CSuccess\\u201D or \\u201CFailure\\u201D. Higher the value of Gini index, higher the homogeneity. A perfect Gini index value is 0 and worst is 0.5 (for 2 class problem). Split Creation A split is basically including an attribute in the dataset and a value. We can create a split in dataset with the help of following three parts \\u2212 Part 1: Calculating Gini Score.\",React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Decision Tree (supervised learning)\"),\"A decision tree is a flowchart-like structure in which each internal node represents a test on a feature, each leaf node represents a class label (decision taken after computing all features) and branches represent conjunctions of features that lead to those class labels. The paths from root to leaf represent classification rules.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"decision making with labels (Rain(Yes), No Rain(No)).\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"img\",{src:DecidionTrees,alt:\"Equations\",className:\"responsive\",style:redesign}),React.createElement(\"br\",null),React.createElement(\"br\",null),\"Tree models where the target variable can take a discrete set of values are called classification trees. Decision trees where the target variable can take continuous values (typically real numbers) are called regression trees.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Gini Impurity:\"),\"Understand the meaning of Pure and Impure.\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Pure: \"),\"Means, in a selected sample of dataset all data belongs to same class (PURE).\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Impure: \"),\"Means, data is mixture of different classes.\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Definition of Gini Impurity:\"),React.createElement(\"br\",null),\"Gini Impurity is a measurement of the likelihood of an incorrect classification of a new instance of a random variable, if that new instance were randomly classified according to the distribution of class labels from the data set.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"If our dataset is Pure then likelihood of incorrect classification is 0. If our sample is mixture of different classes then likelihood of incorrect classification will be high.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Calculating Gini Impurity: \"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Impurity,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Steps for Making decision tree:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Get list of rows (dataset) which are taken into consideration for making decision tree (recursively at each nodes).\"),React.createElement(\"li\",null,\"Calculate uncertanity of our dataset or Gini impurity or how much our data is mixed up etc.\"),React.createElement(\"li\",null,\"Generate list of all question which needs to be asked at that node.\"),React.createElement(\"li\",null,\"Partition rows into True rows and False rows based on each question asked.\"),React.createElement(\"li\",null,\"Calculate information gain based on gini impurity and partition of data from previous step.\"),React.createElement(\"li\",null,\"Update highest information gain based on each question asked.\"),React.createElement(\"li\",null,\"Update best question based on information gain (higher information gain).\"),React.createElement(\"li\",null,\"Divide the node on best question. Repeat again from step 1 again until we get pure node (leaf nodes).\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Let\\u2019s build decision tree based on training data.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"The last column is the label.\"),React.createElement(\"li\",null,\"The first two columns are features.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:training,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Advantage :\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Easy to use and understand.\"),React.createElement(\"li\",null,\"Can handle both categorical and numerical data.\"),React.createElement(\"li\",null,\"Resistant to outliers, hence require little data preprocessing.\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Disadvantage :\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Prone to overfitting.\"),React.createElement(\"li\",null,\"Require some kind of measurement as to how well they are doing.\"),React.createElement(\"li\",null,\"Need to be careful with parameter tuning.\"),React.createElement(\"li\",null,\"Can create biased learned trees if some classes dominate.\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Why Dropout help with overfitting.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"It can't rely on one i/p as it might be dropped out at random.\"),React.createElement(\"li\",null,\"Neurons will not learn redundant details i/p.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Decision Tree Classification\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:decisionClar,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return DecisionTree;}(Component);export default withStyles(styles)(DecisionTree);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ml/deepMl/decisiontree.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","DecidionTrees","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","decisionClar","trim","Impurity","training","DecisionTree","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport DecidionTrees from '../../../assets/ML/dt.png'\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 350,\n  width: 600\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst decisionClar = `\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn import tree\n\ndf = pd.read_csv(\"salaries.csv\")\ninputs = df.drop('salary_more_then_100k',axis='columns')\ntarget = df['salary_more_then_100k']\n\nle_company = LabelEncoder()\nle_job = LabelEncoder()\nle_degree = LabelEncoder()\n\ninputs['company_n'] = le_company.fit_transform(inputs['company'])\ninputs['job_n'] = le_job.fit_transform(inputs['job'])\ninputs['degree_n'] = le_degree.fit_transform(inputs['degree'])\ninputs\n\ninputs_n = inputs.drop(['company','job','degree'],axis='columns')\ninputs_n\ntarget\n\nmodel = tree.DecisionTreeClassifier()\nmodel.fit(inputs_n, target)\nmodel.score(inputs_n,target)\n\nmodel.predict([[2,1,0]])                                #Is salary of Google, Computer Engineer, Bachelors degree > 100 k\nmodel.predict([[2,1,1]])                                #Is salary of Google, Computer Engineer, Masters degree > 100 k\n`.trim();\n\nconst Impurity = `\ndef gini(rows):\n    \"\"\"Calculate the Gini Impurity for a list of rows.\"\"\"\n    counts = class_counts(rows)\n    impurity = 1\n    \n    for lbl in counts:\n        prob_of_lbl = counts[lbl] / float(len(rows))\n        impurity -= prob_of_lbl**2\n    return impurity`.trim();\n\nconst training = `\ntraining_data = [\n  ['Green', 3, 'Apple'],\n  ['Yellow', 3, 'Apple'],\n  ['Red', 1, 'Grape'],\n  ['Red', 1, 'Grape'],\n  ['Yellow', 3, 'Lemon'],\n  ]\n# Header = [\"Color\", \"diameter\", \"Label\"]\n\nmy_tree = build_tree(training_data)\nprint_tree(my_tree)\n`.trim();\n\n\nclass DecisionTree extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Decision Tree (supervised algorithms)</h3>\n              Decision tree analysis is a predictive modelling tool that can be applied across many areas. Decision\n              trees can be constructed by an algorithmic approach that can split the dataset in different ways based on different\n              conditions.\n              <br />\n              It can be used for both classification and regression tasks.\n              <br />\n              <br />\n\n              The two main entities of a tree are decision nodes,\n              where the data is split and leaves, where we got outcome.\n              <br />\n              <br />\n\n              We have the following two types of decision trees.\n              <ul>\n                <li><b>1. Classification decision trees: </b>In this kind of decision trees, the decision variable is categorical. The above\n                  decision tree is an example of classification decision tree.</li>\n                <li><b>Regression decision trees: </b>In this kind of decision trees, the decision variable is continuous.</li>\n              </ul>\n              <br />\n\n              Implementing Decision Tree Algorithm: Gini Index It is the name of the\n              cost function that is used to evaluate the binary splits in the dataset and works with the categorial target variable\n              “Success” or “Failure”. Higher the value of Gini index, higher the homogeneity. A perfect Gini index value is 0 and\n              worst is 0.5 (for 2 class problem). Split Creation A split is basically including an attribute in the dataset and a\n              value. We can create a split in dataset with the help of following three parts − Part 1: Calculating Gini Score.\n              <br />\n\n              <h3>Decision Tree (supervised learning)</h3>\n              A decision tree is a flowchart-like structure in which each internal node represents a test on a feature, each\n              leaf node represents a class label (decision taken after computing all features) and branches represent conjunctions\n              of features that lead to those class labels. The paths from root to leaf represent classification rules.\n              <br />\n              <br />\n              decision making with labels (Rain(Yes), No Rain(No)).\n              <br />\n              <br />\n              <img src={DecidionTrees} alt=\"Equations\" className=\"responsive\" style={redesign} />\n              <br />\n              <br />\n              Tree models where the target variable can take a discrete set of values are called classification trees. Decision\n              trees where the target variable can take continuous values (typically real numbers) are called regression trees.\n              <br />\n              <br />\n              <b>Gini Impurity:</b>\n              Understand the meaning of Pure and Impure.\n              <br />\n              <ul>\n                <li><b>Pure: </b>Means, in a selected sample of dataset all data belongs to same class (PURE).</li>\n                <li><b>Impure: </b>Means, data is mixture of different classes.</li>\n              </ul>\n              <br />\n\n              <b>Definition of Gini Impurity:</b>\n              <br />\n              Gini Impurity is a measurement of the likelihood of an incorrect classification of a new instance of a\n              random variable, if that new instance were randomly classified according to the distribution of class\n              labels from the data set.\n              <br />\n              <br />\n              If our dataset is Pure then likelihood of incorrect classification is 0. If our sample is mixture of\n              different classes then likelihood of incorrect classification will be high.\n              <br />\n              <br />\n              <b>Calculating Gini Impurity: </b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={Impurity}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Steps for Making decision tree:</b>\n              <ul>\n                <li>Get list of rows (dataset) which are taken into consideration for making decision tree\n                  (recursively at each nodes).</li>\n                <li>Calculate uncertanity of our dataset or Gini impurity or how much our data is mixed up etc.</li>\n                <li>Generate list of all question which needs to be asked at that node.</li>\n                <li>Partition rows into True rows and False rows based on each question asked.</li>\n                <li>Calculate information gain based on gini impurity and partition of data from previous step.</li>\n                <li>Update highest information gain based on each question asked.</li>\n                <li>Update best question based on information gain (higher information gain).</li>\n                <li>Divide the node on best question. Repeat again from step 1 again until we get pure node (leaf nodes).</li>\n              </ul>\n              <br />\n              <b>Let’s build decision tree based on training data.</b>\n              <ul>\n                <li>The last column is the label.</li>\n                <li>The first two columns are features.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={training}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Advantage :</b>\n              <ul>\n                <li>Easy to use and understand.</li>\n                <li>Can handle both categorical and numerical data.</li>\n                <li>Resistant to outliers, hence require little data preprocessing.</li>\n              </ul>\n              <br />\n\n              <b>Disadvantage :</b>\n              <ul>\n                <li>Prone to overfitting.</li>\n                <li>Require some kind of measurement as to how well they are doing.</li>\n                <li>Need to be careful with parameter tuning.</li>\n                <li>Can create biased learned trees if some classes dominate.</li>\n              </ul>\n              <br />\n\n              <b>Why Dropout help with overfitting.</b>\n              <ul>\n                <li>It can't rely on one i/p as it might be dropped out at random.</li>\n                <li>Neurons will not learn redundant details i/p.</li>\n              </ul>\n              <br />\n\n              <h3>Decision Tree Classification</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={decisionClar}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              {/*  <br />\n\n              <h3></h3>\n              <div style={titles}>\n                <PrismCode\n                  code={stack}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3></h3>\n              <div style={titles}>\n                <PrismCode\n                  code={stack}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div> */}\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DecisionTree));\n"]},"metadata":{},"sourceType":"module"}