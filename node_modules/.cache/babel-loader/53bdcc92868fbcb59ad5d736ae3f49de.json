{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/javaScripts/deepJs/hackerRank.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst data_types = `\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n  const firstInteger = 4;\n  const firstDecimal = 4.0;\n  const firstString = \"HackerRank \";\n\n  console.log(firstInteger + Number(secondInteger));\n\n  const firstNum = Number(firstDecimal).toFixed(2);\n  const secondNum = Number(secondDecimal).toFixed(2);\n  const answer = Number(firstNum) + Number(secondNum);\n\n  console.log(answer);\n  console.log(firstString + secondString);\n}\n\nperformOperation(10, 1.2, 'str');`.trim();\nconst getArea = `\nfunction arithmatic(length, width){\n  let area = length * width;\nthis.getArea = function(){\n  return console.log('getArea',area)\n}\n\nthis.getPerimeter = function(){\n  let sumPerimeter = 2 * (length + width);\n  return console.log('getPerimeter', sumPerimeter);\n}\n}\n\nconst newArithmatic = new arithmatic(3, 4.5);\nnewArithmatic.getArea();\nnewArithmatic.getPerimeter();`.trim();\nconst declared = `\nfunction main(){\n  const PI = Math.PI;\n  const r=2.6;\n  const getArea = PI * r * r;\n  \n  this.area=function(){\n    return console.log('getArea', getArea);\n  }\n  \n  const getPerimeter = 2 * PI * r;\n  this.perimeter = function(){\n    return console.log('getPerimeter', getPerimeter)\n  }\n}\n\nconst obj= new main();\nobj.area();\nobj.perimeter();\n`.trim();\nconst scoe_grade = `\nfunction getGrade(score) {\n  if (score > 25) {\n    return \"A\";\n  } else if (score > 20) {\n    return \"B\";\n  } else if (score > 20) {\n    return \"B\";\n  } else if (score > 15) {\n    return \"C\";\n  } else if (score > 10) {\n    return \"D\";\n  } else if (score > 5) {\n    return \"E\";\n  } else {\n    return \"F\";\n  }\n}\n\nconsole.log(getGrade(11));`.trim();\nconst character = `\n//1\nfunction getLetter(s) {\n  let letter;\n  switch (true) {\n    case \"aeiou\".includes(s[0]):\n      letter = \"A\";\n      break;\n    case \"bcdefg\".includes(s[0]):\n      letter = \"B\";\n      break;\n    case \"hijklm\".includes(s[0]):\n      letter = \"C\";\n      break;\n    case \"nopqrstuvwxyz\".includes(s[0]):\n      letter = \"D\";\n      break;\n  }\n  return letter;\n}\n\nconsole.log(getLetter('adfgt'));\n\n\n//2\nfunction letter(){\n  let str = 'aeiou';\n  let str2 = 'bcdefg';\n  let str3 = 'hijklm';\n  \n  let result = str.toUpperCase();\n  let result2 = str2.toUpperCase();\n  let result3 = str3.toUpperCase();\n  \n  switch(true){\n    case str.includes(str[0]):\n      console.log(result.charAt(0));\n      break;\n     \n    case str2.includes(str2[0]):\n      console.log(result2.charAt(0));\n      break;\n      \n    case str3.includes(str3[0]):\n      console.log(result3.charAt(0));\n      break;\n  }\n}\n\nletter();\n`.trim();\nconst vowelsAndConsonants = `function vowelsAndConsonants(s) {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  const string = s.split(\"\");\n  let vowelArr = [];\n  let consonantArr = [];\n  for (let i = 0; i < string.length; i++) {\n    vowels.includes(string[i])\n      ? vowelArr.push(string[i])\n      : consonantArr.push(string[i]);\n  }\n  for (let i = 0; i < vowelArr.length; i++) {\n    console.log(vowelArr[i]);\n  }\n  for (let i = 0; i < consonantArr.length; i++) {\n    console.log(consonantArr[i]);\n  }\n}\n\nvowelsAndConsonants('javascriptloops');\n`.trim();\nconst getSecondLargest = `\nfunction getSecondLargest(nums) {\n  let firstLargestNum = 0;\n  let secondLargestNum = 0;\n\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > firstLargestNum) {\n      secondLargestNum = firstLargestNum;\n      firstLargestNum = nums[i];\n    }\n    if (nums[i] > secondLargestNum && nums[i] < firstLargestNum) {\n      secondLargestNum = nums[i];\n    }\n  }\n  return secondLargestNum;\n}\n\nconsole.log(getSecondLargest([5, 2, 3, 6, 6, 5]));\n`.trim();\nconst isPositive = `function isPositive(a) {\n  if (a === 0) {\n    throw Error(\"Zero Error\");\n  }\n  if (a < 0) {\n    throw Error(\"Negative Error\");\n  }\n  return \"YES\";\n}\n\nconsole.log(isPositive(6))`.trim();\nconst getCount = `\nfunction getCount(objects) {\n  let pairCount = 0;\n  for (let i = 0; i < objects.length; i++) {\n    if (objects[i].x === objects[i].y) {\n      pairCount++;\n    }\n  }\n  return console.log(pairCount);\n}\n\ngetCount([2,3])`.trim();\nconst Polygon = `\n//Explanation:\nThere are n= 5 objects in the objects array:\nobjects0 = {x:1, y:1}\nobjects1 = {x:2, y:3}\nobjects2 = {x:3, y:3}\nobjects3 = {x:3, y:4}\nobjects4 = {x:4, y:5}\nBecause we have two objects o that satisfy o.x (i.e., objects0 and objects1), we return 2 as \nour answer.\n\n\nclass Polygon {\n  constructor(args) {\n      this.values = args;\n  }\n\n  perimeter() {\n      return (this.values || []).reduce((target, item) => target + item);\n  }\n}\n\n// Create a polygon with side lengths 3, 4, and 5\nlet triangle = new Polygon([3, 4, 5]);\n\n// Print the perimeter\nconsole.log(triangle.perimeter());`.trim();\nconst processData = `\nclass Rectangle {\n  constructor(w, h) {\n      this.w = w;\n      this.h = h;\n  }\n}\n//  Write code that adds an 'area' method to the Rectangle class' prototype\n\n\n// Create a Square class that inherits from Rectangle and implement its class constructor\nRectangle.prototype.area = function() {\n      return(this.w*this.h);\n  };\n\n// Create a Square class that inherits from Rectangle and implement its class constructor\n\n \n  class Square extends Rectangle {\n      constructor(s) {\n          super(s);\n          this.h = s;\n          this.w = s;\n      }\n  };\n\n\nif (JSON.stringify(Object.getOwnPropertyNames(Square.prototype)) === JSON.stringify([ 'constructor' ])) {\n  const rec = new Rectangle(3, 4);\n  const sqr = new Square(3);\n  \n  console.log(rec.area());\n  console.log(sqr.area());\n} else {\n  console.log(-1);\n  console.log(-1);\n}`.trim();\nconst getMaxLessThanK = `\n//We define S to be a sequence of distinct sequential integers from 1  to n; in other words, \nS = {1, 2, 3, ..., n}. We want to know the maximum bitwise AND value of any two integers, a \nand b (where a < b), in sequence S that is also less than a given integer, k.\n\n\nfunction getMaxLessThanK(n, k) {\n  let max = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      (i & j) > max && (i & j) < k ? (max = i & j) : max;\n    }\n  }\n  return max;\n}\n\nconsole.log(getMaxLessThanK(8, 5));\n`.trim();\nconst getDayName = `\nfunction getDayName(dateString) {\n  let dayName;\n  const days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\"\n  ];\n  dayName = days[new Date(dateString).getUTCDay()];\n  return dayName;\n}\n\nconsole.log(getDayName(10/11/2009));`.trim();\nconst regexVar = `\nfunction regexVar() {\n  // It must match a string that starts and ends with the same vowel (i.e., {a, e, i, o, u})\n  var re = RegExp(/^([aeiou])/);\n \n  let str = 'aca';\n  var res = re.exec(str);\n  console.log(res);\n}\n\nregexVar();`.trim();\nconst regexVars = `\nfunction regexVar() {\n  // Declare a RegExp object variable named 're'\n  // It must match a string that starts with 'Mr.', 'Mrs.', 'Ms.', 'Dr.', or 'Er.',\n  // followed by one or more letters.\n  let re = RegExp(/^(Mr|Mrs|Ms|Dr|Er)(\\.)([a-zA-Z])+$/);\n  let str = 'Mr.X';\n  var res = re.exec(str);\n  console.log(res);\n}\n\nregexVar();`.trim();\nconst regexVares = `\n//Receive a string of s length of s â‰¥ 3\n  s is a string that contains numbers and letters\n\n\nfunction regexVar() {\n  var re = RegExp('\\\\d+', 'g');\n  \n  let str = 4.5;\n  var res = re.exec(str);\n  console.log(res);\n}\n\nregexVar();`.trim();\n\nclass HackerRank1 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, \"Variables named firstInteger, firstDecimal, and firstString are declared for you in the editor below. You must use the + operator to perform the following sequence of operations:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }, \"Convert secondInteger to an integer (Number type), then sum it with firstInteger and print the result on a new line using console.log.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, \"Convert secondDecimal to a floating-point number (Number type), then sum it with firstDecimal and print the result on a new line using console.log.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, \"Print the concatenation of firstString and secondString on a new line using console.log. Note that firstString must be printed first.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: data_types,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, \"Arithmetic Operators\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }, \"getArea(length, width): Calculate and return the area of a rectangle having sides length and width.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }, \"getPerimeter(length, width): Calculate and return the perimeter of a rectangle having sides length and width.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, \"Input: 3, 4.5\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, \"Output: 13.5, 15\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }, \"Explanation:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }, \"The area of the rectangle is length * width =3*4.5=13.5.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }, \"The perimeter of the rectangle is (length * width) =2*(3+4.5)=15.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: getArea,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }, \"Let and Const\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }, \"Declare a constant variable, PI, and assign it the value Math.PI. You will not pass this challenge unless the variable is declared as a constant and named PI (uppercase).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }, \"Read a number, r, denoting the radius of a circle from stdin.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }, \"Use PI  and r to calculate the area and perimeter of a circle having radius r .\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }, \"Print area as the first line of output and print perimeter as the second line of output.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }, \"Input:\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }, \"A single integer, , r denoting the radius of a circle.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }, \"Output:\"), \"Print the following two lines:\", React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }, \"On the first line, print the area of the circle having radius .\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }, \"On the second line, print the perimeter of the circle having radius .\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }, \"Input:\"), \"0, 2.6\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    }, \"Output:\"), \"21.237166338267002, 16.336281798666924\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }, \"Explanation:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }), \"Given the radius r=2.0, we calculate the following: area = PI.r pow(2) = 21.2371 perimeter = 2*PI*r = 16.336281 We then print  as our first line of output and  as our second line of output.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: declared,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, \"If-Else\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }, \"Complete the getGrade(score) function in the editor. It has one parameter: an integer, score , denoting the number of points Julia earned on an exam. It must return the letter corresponding to her grade according to the following rules:\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }, \"Input:\"), \" 11\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }, \"Output:\"), \" D\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: scoe_grade,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    }, \"Switch\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491\n      },\n      __self: this\n    }, \"It has one parameter: a string, s, consisting of lowercase English alphabetic letters (i.e., a through z). It must return A, B, C, or D depending on the following criteria:\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }, \"Input:\"), \"adfgt\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, \"Output:\"), \" A\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    }, \"Explanation\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    }), \"The first character of string s= adfgt is a. Because the given criteria stipulate that we print A any time the first character is in a,e,i,o,u , we return A as our answer.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: character,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }, \"Loops\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    }, \"Function has one parameter, a string, s, consisting of lowercase English alphabetic letters (i.e., a through z). The function must do the following:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    }, \"First, print each vowel in s on a new line. The English vowels are a, e, i, o, and u, and each vowel must be printed in the same order as it appeared in s.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }, \"Second, print each consonant (i.e., non-vowel) in s on a new line in the same order as it appeared in s.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }, \"Input:\"), \"Locked stub code in the editor reads string s from stdin and passes it to the function.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }), \"javascriptloops\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }, \"Output:\"), \"First, print each vowel in s on a new line (in the same order as they appeared in s). Second, print each consonant (i.e., non-vowel) in s on a new line (in the same order as they appeared in s).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }), \"a a i o o j v s c r p t l p s\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }), \"Observe the following:\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: vowelsAndConsonants,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    }, \"Arrays\"), \"Function has one parameter: an array, nums, of n numbers. The function must find and return the second largest number in nums.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    }, \"Input:\"), \"Reads the following input from stdin and passes it to the function:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567\n      },\n      __self: this\n    }, \"The first line contains an integer, n, denoting the size of the nums array.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568\n      },\n      __self: this\n    }, \"The second line contains n space-separated numbers describing the elements in nums.\")), \"2 3 6 6 5\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572\n      },\n      __self: this\n    }, \"Output:\"), \" 5\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575\n      },\n      __self: this\n    }, \"Explanation:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576\n      },\n      __self: this\n    }), \"Given the array nums=[2,3,6,6,5], we see that the largest value in the array is 6 and the second largest value is 5. Thus, we return 5 as our answer.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: getSecondLargest,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587\n      },\n      __self: this\n    }, \"Try, Catch, and Finally\"), \"Function has one parameter, s. You must perform the following actions:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590\n      },\n      __self: this\n    }, \"Try to reverse string s using the split, reverse, and join methods.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591\n      },\n      __self: this\n    }, \"If an exception is thrown, catch it and print the contents of the exception's message on a new line.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593\n      },\n      __self: this\n    }, \"Print s on a new line. If no exception was thrown, then this should be the reversed string; if an exception was thrown, this should be the original string.\")), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596\n      },\n      __self: this\n    }, \"Input:\"), \"\\\"1234\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599\n      },\n      __self: this\n    }, \"Output:\"), \"You must write two print statements using console.log():\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602\n      },\n      __self: this\n    }, \"Print the contents of a caught exception's message on a new line. If no exception was thrown, this line should not be printed.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604\n      },\n      __self: this\n    }, \"Print s on a new line. If no exception was thrown, then this should be the reversed string; if an exception was thrown, this should be the original string.\")), \"Output: 4321\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610\n      },\n      __self: this\n    }, \"Explanation:\"), \"s=\\\"1234\\\" is a string type, so it can be reversed without throwing an exception. Thus, we print the reversed value, 4321, as our answer.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: data_types,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621\n      },\n      __self: this\n    }, \"Throw\"), \"Function has one integer parameter, a . If the value of a is positive, it must return the string YES. Otherwise, it must throw an Error according to the following rules:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626\n      },\n      __self: this\n    }, \"If a is 0, throw an Error with message = Zero Error.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627\n      },\n      __self: this\n    }, \"If a is negative, throw an Error with message = Negative Error.\")), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629\n      },\n      __self: this\n    }, \"Input:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631\n      },\n      __self: this\n    }, \"The first line is an integer, n, denoting the number of times the function will be called with some a.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 633\n      },\n      __self: this\n    }, \"Each line i of the n subsequent lines contains an integer denoting some a.\")), \"e.g: 3 2 0 6\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641\n      },\n      __self: this\n    }, \"Output:\"), \"If the value of a is positive, the function must return the string YES. Otherwise, it must throw an Error according to the following rules:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645\n      },\n      __self: this\n    }, \"If a is 0, throw an Error with message = Zero Error.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646\n      },\n      __self: this\n    }, \"If a is negative, throw an Error with message = Negative Error.\")), \"e.g:YES Zero Error YES\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 651\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 653\n      },\n      __self: this\n    }, \"Explanation:\"), \"Makes the following three calls to the isPositive function:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    }, \"isPositive(2): This returns YES because 2 is positive.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    }, \"isPositive(0): Because a = 0, we throw an Error with message =  Zero Error. This is caught by the locked stub code and the value of its message is printed.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659\n      },\n      __self: this\n    }, \"isPositive(6): This returns YES because 6 is positive.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isPositive,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669\n      },\n      __self: this\n    }, \"Count Objects\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671\n      },\n      __self: this\n    }, \"Function has one parameter: an array, a, of objects. Each object in the array has two integer properties denoted by x and y. The function must return a count of all such objects o in array a that satisfy o.x == o.y .\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674\n      },\n      __self: this\n    }, \"Input:\"), \"1 1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675\n      },\n      __self: this\n    }), \"2 3\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676\n      },\n      __self: this\n    }), \"3 3\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    }), \"3 4\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678\n      },\n      __self: this\n    }), \"4 5\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682\n      },\n      __self: this\n    }, \"Output:\"), \" 2\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: getCount,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 693\n      },\n      __self: this\n    }, \"Classes\"), \"Create a Polygon class that has the following properties:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 695\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 696\n      },\n      __self: this\n    }, \"A constructor that takes an array of integer values describing the lengths of the polygon's sides.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698\n      },\n      __self: this\n    }, \"A perimeter() method that returns the polygon's perimeter.\")), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700\n      },\n      __self: this\n    }, \"Output:\"), \"The perimeter method must return the polygon's perimeter using the side length array passed to the constructor.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Polygon,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 714\n      },\n      __self: this\n    }, \"Inheritance\"), \"Perform the following tasks: 1. Add an area method to Rectangle's prototype.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 717\n      },\n      __self: this\n    }), \"2. Create a Square class that satisfies the following:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 719\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 720\n      },\n      __self: this\n    }, \"It is a subclass of Rectangle.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 721\n      },\n      __self: this\n    }, \"It contains a constructor and no other methods.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 722\n      },\n      __self: this\n    }, \"It can use the Rectangle class' area method to print the area of a Square object.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: processData,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732\n      },\n      __self: this\n    }, \"Bitwise Operators\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 733\n      },\n      __self: this\n    }, \"Input:\"), \"3\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734\n      },\n      __self: this\n    }), \"5 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735\n      },\n      __self: this\n    }), \"8 5\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 736\n      },\n      __self: this\n    }), \"2 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 737\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 738\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 739\n      },\n      __self: this\n    }, \"Output:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 739\n      },\n      __self: this\n    }), \"1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 740\n      },\n      __self: this\n    }), \"4\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 741\n      },\n      __self: this\n    }), \"0\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 743\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: getMaxLessThanK,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 744\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 750\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 751\n      },\n      __self: this\n    }, \"JavaScript Dates\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 752\n      },\n      __self: this\n    }, \"Given a date string, dateString , in the format MM/DD/YYYY, find and return the day name for that date. Each day name must be one of the following strings: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, or Saturday. For example, the day name for the date 12/07/2016 is Wednesday.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 758\n      },\n      __self: this\n    }, \"Input:\"), \"10/11/2009\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 759\n      },\n      __self: this\n    }), \"11/10/2010\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 761\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 762\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 763\n      },\n      __self: this\n    }, \"Output\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 764\n      },\n      __self: this\n    }), \"Sunday\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 765\n      },\n      __self: this\n    }), \"Wednesday\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 767\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 768\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 769\n      },\n      __self: this\n    }, \"Explanation:\"), \"The function is called for the following d = 2 dates:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 771\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 772\n      },\n      __self: this\n    }), \"The date 10/11/2009 was a Sunday, so we return Sunday.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 773\n      },\n      __self: this\n    }), \"The date 11/10/2010 was a Wednesday, so we return Wednesday.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 775\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 776\n      },\n      __self: this\n    }), \"getUTCDay() method returns the day of the week in the specified date according to universal time, where 0 represents Sunday.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 779\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 780\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: getDayName,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 781\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 787\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 789\n      },\n      __self: this\n    }, \"Regular Expressions I\"), \"Function returning a RegExp object, re, that matches any string s that begins and ends with the same vowel. Recall that the English vowels are a, e, i, o, and u.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 793\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 794\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 795\n      },\n      __self: this\n    }, \"Input:\"), \"bcd\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 796\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 797\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 798\n      },\n      __self: this\n    }, \"Output:\"), \"false\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 799\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 800\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 801\n      },\n      __self: this\n    }, \"Explanation:\"), \"This string starts with (and ends in) a consonant, so it cannot start and end with the same vowel.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 804\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 805\n      },\n      __self: this\n    }, \"Receive a string of s which is greater than or equal to the length of 3\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 806\n      },\n      __self: this\n    }, \"Write a regular expression that validates the string\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 807\n      },\n      __self: this\n    }, \"The string must be in all lowercase with characters from a-z\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 808\n      },\n      __self: this\n    }, \"The string must start and end with a vowel\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 809\n      },\n      __self: this\n    }, \"Return a boolean of true or false if the string meets the requirements\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 811\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: regexVar,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 812\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 818\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 819\n      },\n      __self: this\n    }, \"Receive a string of s which is greater than or equal to the length of 3\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 820\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 821\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 822\n      },\n      __self: this\n    }, \"Write a regular expression that validates the string\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 823\n      },\n      __self: this\n    }, \"String starts with either (Mr., Mrs., Ms., Dr., or Er.)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 824\n      },\n      __self: this\n    }, \"String doesn\\u2019t contain any spaces\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 825\n      },\n      __self: this\n    }, \"String contains on the letters a-z or A-Z\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 826\n      },\n      __self: this\n    }, \"Return a boolean of true or false if the string meets the requirements\")), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 828\n      },\n      __self: this\n    }, \"Input:\"), \"Mr.X\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 829\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 830\n      },\n      __self: this\n    }, \"Output:\"), \"true\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 831\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: regexVars,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 832\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 838\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 839\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 841\n      },\n      __self: this\n    }, \"Write a regular expression that validates the string, The expression must only output integer numbers\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 842\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 843\n      },\n      __self: this\n    }, \"Input:\"), \"102, 1948948 and 1.3 and 4.5\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 844\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 845\n      },\n      __self: this\n    }, \"Output:\"), \"102, 1948948, 1, 3, 4, 5\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 846\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 847\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 848\n      },\n      __self: this\n    }, \"Explanation:\"), \"When we call match on string  and pass the correct RegExp as our argument, it returns the following array of results: [ '102', '1948948', '1', '3', '4', '5' ].\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 851\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: regexVares,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 852\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(HackerRank1);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/javaScripts/deepJs/hackerRank.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","data_types","trim","getArea","declared","scoe_grade","character","vowelsAndConsonants","getSecondLargest","isPositive","getCount","Polygon","processData","getMaxLessThanK","getDayName","regexVar","regexVars","regexVares","HackerRank1","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst data_types = `\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n  const firstInteger = 4;\n  const firstDecimal = 4.0;\n  const firstString = \"HackerRank \";\n\n  console.log(firstInteger + Number(secondInteger));\n\n  const firstNum = Number(firstDecimal).toFixed(2);\n  const secondNum = Number(secondDecimal).toFixed(2);\n  const answer = Number(firstNum) + Number(secondNum);\n\n  console.log(answer);\n  console.log(firstString + secondString);\n}\n\nperformOperation(10, 1.2, 'str');`.trim();\n\nconst getArea = `\nfunction arithmatic(length, width){\n  let area = length * width;\nthis.getArea = function(){\n  return console.log('getArea',area)\n}\n\nthis.getPerimeter = function(){\n  let sumPerimeter = 2 * (length + width);\n  return console.log('getPerimeter', sumPerimeter);\n}\n}\n\nconst newArithmatic = new arithmatic(3, 4.5);\nnewArithmatic.getArea();\nnewArithmatic.getPerimeter();`.trim();\n\n\nconst declared = `\nfunction main(){\n  const PI = Math.PI;\n  const r=2.6;\n  const getArea = PI * r * r;\n  \n  this.area=function(){\n    return console.log('getArea', getArea);\n  }\n  \n  const getPerimeter = 2 * PI * r;\n  this.perimeter = function(){\n    return console.log('getPerimeter', getPerimeter)\n  }\n}\n\nconst obj= new main();\nobj.area();\nobj.perimeter();\n`.trim();\n\nconst scoe_grade = `\nfunction getGrade(score) {\n  if (score > 25) {\n    return \"A\";\n  } else if (score > 20) {\n    return \"B\";\n  } else if (score > 20) {\n    return \"B\";\n  } else if (score > 15) {\n    return \"C\";\n  } else if (score > 10) {\n    return \"D\";\n  } else if (score > 5) {\n    return \"E\";\n  } else {\n    return \"F\";\n  }\n}\n\nconsole.log(getGrade(11));`.trim();\n\nconst character = `\n//1\nfunction getLetter(s) {\n  let letter;\n  switch (true) {\n    case \"aeiou\".includes(s[0]):\n      letter = \"A\";\n      break;\n    case \"bcdefg\".includes(s[0]):\n      letter = \"B\";\n      break;\n    case \"hijklm\".includes(s[0]):\n      letter = \"C\";\n      break;\n    case \"nopqrstuvwxyz\".includes(s[0]):\n      letter = \"D\";\n      break;\n  }\n  return letter;\n}\n\nconsole.log(getLetter('adfgt'));\n\n\n//2\nfunction letter(){\n  let str = 'aeiou';\n  let str2 = 'bcdefg';\n  let str3 = 'hijklm';\n  \n  let result = str.toUpperCase();\n  let result2 = str2.toUpperCase();\n  let result3 = str3.toUpperCase();\n  \n  switch(true){\n    case str.includes(str[0]):\n      console.log(result.charAt(0));\n      break;\n     \n    case str2.includes(str2[0]):\n      console.log(result2.charAt(0));\n      break;\n      \n    case str3.includes(str3[0]):\n      console.log(result3.charAt(0));\n      break;\n  }\n}\n\nletter();\n`.trim();\n\nconst vowelsAndConsonants = `function vowelsAndConsonants(s) {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  const string = s.split(\"\");\n  let vowelArr = [];\n  let consonantArr = [];\n  for (let i = 0; i < string.length; i++) {\n    vowels.includes(string[i])\n      ? vowelArr.push(string[i])\n      : consonantArr.push(string[i]);\n  }\n  for (let i = 0; i < vowelArr.length; i++) {\n    console.log(vowelArr[i]);\n  }\n  for (let i = 0; i < consonantArr.length; i++) {\n    console.log(consonantArr[i]);\n  }\n}\n\nvowelsAndConsonants('javascriptloops');\n`.trim();\n\nconst getSecondLargest = `\nfunction getSecondLargest(nums) {\n  let firstLargestNum = 0;\n  let secondLargestNum = 0;\n\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > firstLargestNum) {\n      secondLargestNum = firstLargestNum;\n      firstLargestNum = nums[i];\n    }\n    if (nums[i] > secondLargestNum && nums[i] < firstLargestNum) {\n      secondLargestNum = nums[i];\n    }\n  }\n  return secondLargestNum;\n}\n\nconsole.log(getSecondLargest([5, 2, 3, 6, 6, 5]));\n`.trim();\n\nconst isPositive = `function isPositive(a) {\n  if (a === 0) {\n    throw Error(\"Zero Error\");\n  }\n  if (a < 0) {\n    throw Error(\"Negative Error\");\n  }\n  return \"YES\";\n}\n\nconsole.log(isPositive(6))`.trim();\n\nconst getCount = `\nfunction getCount(objects) {\n  let pairCount = 0;\n  for (let i = 0; i < objects.length; i++) {\n    if (objects[i].x === objects[i].y) {\n      pairCount++;\n    }\n  }\n  return console.log(pairCount);\n}\n\ngetCount([2,3])`.trim();\n\nconst Polygon = `\n//Explanation:\nThere are n= 5 objects in the objects array:\nobjects0 = {x:1, y:1}\nobjects1 = {x:2, y:3}\nobjects2 = {x:3, y:3}\nobjects3 = {x:3, y:4}\nobjects4 = {x:4, y:5}\nBecause we have two objects o that satisfy o.x (i.e., objects0 and objects1), we return 2 as \nour answer.\n\n\nclass Polygon {\n  constructor(args) {\n      this.values = args;\n  }\n\n  perimeter() {\n      return (this.values || []).reduce((target, item) => target + item);\n  }\n}\n\n// Create a polygon with side lengths 3, 4, and 5\nlet triangle = new Polygon([3, 4, 5]);\n\n// Print the perimeter\nconsole.log(triangle.perimeter());`.trim();\n\n\nconst processData = `\nclass Rectangle {\n  constructor(w, h) {\n      this.w = w;\n      this.h = h;\n  }\n}\n//  Write code that adds an 'area' method to the Rectangle class' prototype\n\n\n// Create a Square class that inherits from Rectangle and implement its class constructor\nRectangle.prototype.area = function() {\n      return(this.w*this.h);\n  };\n\n// Create a Square class that inherits from Rectangle and implement its class constructor\n\n \n  class Square extends Rectangle {\n      constructor(s) {\n          super(s);\n          this.h = s;\n          this.w = s;\n      }\n  };\n\n\nif (JSON.stringify(Object.getOwnPropertyNames(Square.prototype)) === JSON.stringify([ 'constructor' ])) {\n  const rec = new Rectangle(3, 4);\n  const sqr = new Square(3);\n  \n  console.log(rec.area());\n  console.log(sqr.area());\n} else {\n  console.log(-1);\n  console.log(-1);\n}`.trim();\n\nconst getMaxLessThanK = `\n//We define S to be a sequence of distinct sequential integers from 1  to n; in other words, \nS = {1, 2, 3, ..., n}. We want to know the maximum bitwise AND value of any two integers, a \nand b (where a < b), in sequence S that is also less than a given integer, k.\n\n\nfunction getMaxLessThanK(n, k) {\n  let max = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      (i & j) > max && (i & j) < k ? (max = i & j) : max;\n    }\n  }\n  return max;\n}\n\nconsole.log(getMaxLessThanK(8, 5));\n`.trim();\n\nconst getDayName = `\nfunction getDayName(dateString) {\n  let dayName;\n  const days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\"\n  ];\n  dayName = days[new Date(dateString).getUTCDay()];\n  return dayName;\n}\n\nconsole.log(getDayName(10/11/2009));`.trim();\n\nconst regexVar = `\nfunction regexVar() {\n  // It must match a string that starts and ends with the same vowel (i.e., {a, e, i, o, u})\n  var re = RegExp(/^([aeiou])/);\n \n  let str = 'aca';\n  var res = re.exec(str);\n  console.log(res);\n}\n\nregexVar();`.trim();\n\nconst regexVars = `\nfunction regexVar() {\n  // Declare a RegExp object variable named 're'\n  // It must match a string that starts with 'Mr.', 'Mrs.', 'Ms.', 'Dr.', or 'Er.',\n  // followed by one or more letters.\n  let re = RegExp(/^(Mr|Mrs|Ms|Dr|Er)(\\.)([a-zA-Z])+$/);\n  let str = 'Mr.X';\n  var res = re.exec(str);\n  console.log(res);\n}\n\nregexVar();`.trim();\n\nconst regexVares = `\n//Receive a string of s length of s â‰¥ 3\n  s is a string that contains numbers and letters\n\n\nfunction regexVar() {\n  var re = RegExp('\\\\d+', 'g');\n  \n  let str = 4.5;\n  var res = re.exec(str);\n  console.log(res);\n}\n\nregexVar();`.trim();\n\nclass HackerRank1 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <p>Variables named firstInteger, firstDecimal, and firstString are declared for you in the\n                editor below. You must use the + operator to perform the following sequence of operations:\n              </p>\n              <ul>\n                <li>Convert secondInteger to an integer (Number type), then sum it with firstInteger and print\n                  the result on a new line using console.log.</li>\n                <li>Convert secondDecimal to a floating-point number (Number type), then sum it with\n                  firstDecimal and print the result on a new line using console.log.</li>\n                <li>Print the concatenation of firstString and secondString on a new line using console.log.\n                  Note that firstString must be printed first.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={data_types}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Arithmetic Operators</b>\n              <ul>\n                <li>getArea(length, width): Calculate and return the area of a rectangle having sides length and\n                  width.</li>\n                <li>getPerimeter(length, width): Calculate and return the perimeter of a rectangle having sides\n                  length and width.</li>\n                <li>Input: 3, 4.5</li>\n                <li>Output: 13.5, 15</li>\n                <br />\n\n                <b>Explanation:</b>\n                <br />\n                <li>The area of the rectangle is length * width =3*4.5=13.5.</li>\n                <li>The perimeter of the rectangle is (length * width) =2*(3+4.5)=15.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={getArea}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <p>Let and Const</p>\n              <ul>\n                <li>Declare a constant variable, PI, and assign it the value Math.PI. You will not pass this\n                  challenge unless the variable is declared as a constant and named PI (uppercase).</li>\n                <li>Read a number, r, denoting the radius of a circle from stdin.</li>\n                <li>Use PI  and r to calculate the area and perimeter of a circle having radius r .</li>\n                <li>Print area as the first line of output and print perimeter as the second line of output.</li>\n                <br />\n                <b>Input:</b>\n                <li>A single integer, , r denoting the radius of a circle.</li>\n                <br />\n                <b>Output:</b>\n                Print the following two lines:\n                <li>On the first line, print the area of the circle having radius .</li>\n                <li>On the second line, print the perimeter of the circle having radius .</li>\n                <br />\n                <b>Input:</b>0, 2.6\n                <br />\n                <b>Output:</b>21.237166338267002, 16.336281798666924\n              </ul>\n              <br />\n              <b>Explanation:</b>\n              <br />\n              Given the radius r=2.0, we calculate the following:\n              area = PI.r pow(2) = 21.2371\n              perimeter = 2*PI*r = 16.336281\n              We then print  as our first line of output and  as our second line of output.\n              <div style={titles}>\n                <PrismCode\n                  code={declared}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <h3>If-Else</h3>\n              <p>Complete the getGrade(score) function in the editor. It has one parameter: an integer, score ,\n                denoting the number of points Julia earned on an exam. It must return the letter corresponding\n                to her grade according to the following rules:</p>\n              {/* \n  If 25 < score <= 30, then grade = A\n  If 20 < score <= 25, then grade = B\n  If 15 < score <= 20, then grade = C\n  If 10 < score <= 15, then grade = D\n  If 5 < score <= 10, then grade = E\n  If 0 < score <= 5, then grade = F \n*/}\n\n              <b>Input:</b> 11\n              <br />\n              <b>Output:</b> D\n              <div style={titles}>\n                <PrismCode\n                  code={scoe_grade}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Switch</b>\n              <p>\n                It has one parameter: a string, s,\n                consisting of lowercase English alphabetic letters (i.e., a through z). It must return A, B,\n                C, or D depending on the following criteria:\n              </p>\n              {/* <ul>\n                <li>If the first character in string s is in the set {a, e, i, o, u}, then return A.</li>\n                <li>If the first character in string s is in the set {b, c, d, f, g}, then return B.</li>\n                <li>If the first character in string s is in the set {h, j, k, l, m}, then return C.</li>\n                <li>If the first character in string s is in the set {n, p, q, r, s, t, v, w, x, y, z}, then \n  return D.</li>\n              </ul> */}\n              <b>Input:</b>adfgt\n              <br />\n              <b>Output:</b> A\n              <br />\n              <br />\n              <b>Explanation</b>\n              <br />\n              The first character of string s= adfgt is a. Because the given criteria\n              stipulate that we print A any time the first character is in a,e,i,o,u , we return A as our\n              answer.\n              <div style={titles}>\n                <PrismCode\n                  code={character}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <h3>Loops</h3>\n              <p>Function has one parameter, a string,\n                s, consisting of lowercase English alphabetic letters (i.e., a through z). The function must\n                do the following:</p>\n              <ul>\n                <li>First, print each vowel in s on a new line. The English vowels are a, e, i, o, and u, and\n                  each vowel must be printed in the same order as it appeared in s.</li>\n                <li>Second, print each consonant (i.e., non-vowel) in s on a new line in the same order as it\n                  appeared in s.</li>\n                <br />\n                <b>Input:</b>\n                Locked stub code in the editor reads string s from stdin and passes it to the function.\n                <br />\n                javascriptloops\n                <br />\n                <br />\n                <b>Output:</b>\n                First, print each vowel in s on a new line (in the same order as they appeared in s). Second,\n                print each consonant (i.e., non-vowel) in s on a new line (in the same order as they appeared\n                in s).\n                <br />\n                a a i o o j v s c r p t l p s\n              </ul>\n              <br />\n              <br />\n              Observe the following:\n              <div style={titles}>\n                <PrismCode\n                  code={vowelsAndConsonants}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <p>Arrays</p>\n              Function has one parameter: an array,\n              nums, of n numbers. The function must find and return the second largest number in nums.\n              <br />\n              <br />\n              <b>Input:</b>\n              Reads the following input from stdin and passes it to the function:\n              <ul>\n                <li>The first line contains an integer, n, denoting the size of the nums array.</li>\n                <li>The second line contains n space-separated numbers describing the elements in nums.</li>\n              </ul>\n              2 3 6 6 5\n              <br />\n              <b>Output:</b> 5\n              <br />\n              <br />\n              <b>Explanation:</b>\n              <br />\n              Given the array nums=[2,3,6,6,5], we see that the largest value in the array is 6 and the\n              second largest value is 5. Thus, we return 5 as our answer.\n              <div style={titles}>\n                <PrismCode\n                  code={getSecondLargest}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <p>Try, Catch, and Finally</p>\n              Function has one parameter, s. You must perform the following actions:\n              <ul>\n                <li>Try to reverse string s using the split, reverse, and join methods.</li>\n                <li>If an exception is thrown, catch it and print the contents of the exception's message on a\n                  new line.</li>\n                <li>Print s on a new line. If no exception was thrown, then this should be the reversed string;\n                  if an exception was thrown, this should be the original string.</li>\n              </ul>\n              <b>Input:</b>\"1234\"\n              <br />\n              <br />\n              <b>Output:</b>\n              You must write two print statements using console.log():\n              <ul>\n                <li>Print the contents of a caught exception's message on a new line. If no exception was\n                  thrown, this line should not be printed.</li>\n                <li>Print s on a new line. If no exception was thrown, then this should be the reversed string;\n                  if an exception was thrown, this should be the original string.</li>\n              </ul>\n              Output: 4321\n              <br />\n              <br />\n              <b>Explanation:</b>\n              s=\"1234\" is a string type, so it can be reversed without throwing an exception. Thus, we\n              print the reversed value, 4321, as our answer.\n              <div style={titles}>\n                <PrismCode\n                  code={data_types}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <p>Throw</p>\n              Function has one integer parameter, a . If the value of a\n              is positive, it must return the string YES. Otherwise, it must throw an Error according to\n              the following rules:\n              <ul>\n                <li>If a is 0, throw an Error with message = Zero Error.</li>\n                <li>If a is negative, throw an Error with message = Negative Error.</li>\n              </ul>\n              <b>Input:</b>\n              <ul>\n                <li>The first line is an integer, n, denoting the number of times the function will be called\n                  with some a.</li>\n                <li>Each line i of the n subsequent lines contains an integer denoting some a.</li>\n              </ul>\n              e.g: 3\n              2\n              0\n              6\n              <br />\n              <br />\n              <b>Output:</b>\n              If the value of a is positive, the function must return the string YES. Otherwise, it must\n              throw an Error according to the following rules:\n              <ul>\n                <li>If a is 0, throw an Error with message = Zero Error.</li>\n                <li>If a is negative, throw an Error with message = Negative Error.</li>\n              </ul>\n              e.g:YES\n              Zero Error\n              YES\n              <br />\n              <br />\n              <b>Explanation:</b>\n              Makes the following three calls to the isPositive function:\n              <ul>\n                <li>isPositive(2): This returns YES because 2 is positive.</li>\n                <li>isPositive(0): Because a = 0, we throw an Error with message =  Zero Error. This is caught by\n                  the locked stub code and the value of its message is printed.</li>\n                <li>isPositive(6): This returns YES because 6 is positive.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={isPositive}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <p>Count Objects</p>\n              <br />\n              <p>Function has one parameter: an array, a, of objects. Each\n                object in the array has two integer properties denoted by x and y. The function must return a\n                count of all such objects o in array a that satisfy o.x == o.y .</p>\n              <b>Input:</b>\n              1 1<br />\n              2 3<br />\n              3 3<br />\n              3 4<br />\n              4 5\n              <br />\n              <br />\n              <b>Output:</b> 2\n              <div style={titles}>\n                <PrismCode\n                  code={getCount}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <p>Classes</p>\n              Create a Polygon class that has the following properties:\n              <ul>\n                <li>A constructor that takes an array of integer values describing the lengths of the polygon's\n                  sides.</li>\n                <li>A perimeter() method that returns the polygon's perimeter.</li>\n              </ul>\n              <b>Output:</b>\n              The perimeter method must return the polygon's perimeter using the side length array passed\n              to the constructor.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={Polygon}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <p>Inheritance</p>\n              Perform the following tasks:\n              1. Add an area method to Rectangle's prototype.\n              <br />\n              2. Create a Square class that satisfies the following:\n              <ul>\n                <li>It is a subclass of Rectangle.</li>\n                <li>It contains a constructor and no other methods.</li>\n                <li>It can use the Rectangle class' area method to print the area of a Square object.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={processData}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <p>Bitwise Operators</p>\n              <b>Input:</b>\n              3<br />\n              5 2<br />\n              8 5<br />\n              2 2<br />\n              <br />\n              <b>Output:</b><br />\n              1<br />\n              4<br />\n              0\n              <div style={titles}>\n                <PrismCode\n                  code={getMaxLessThanK}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <p>JavaScript Dates</p>\n              <p>\n                Given a date string, dateString , in the format MM/DD/YYYY, find and return the day name for\n                that date. Each day name must be one of the following strings: Sunday, Monday, Tuesday,\n                Wednesday, Thursday, Friday, or Saturday. For example, the day name for the date 12/07/2016\n                is Wednesday.\n              </p>\n              <b>Input:</b>\n              10/11/2009<br />\n              11/10/2010\n              <br />\n              <br />\n              <b>Output</b>\n              <br />\n              Sunday<br />\n              Wednesday\n              <br />\n              <br />\n              <b>Explanation:</b>\n              The function is called for the following d = 2 dates:\n              <br />\n              <br />\n              The date 10/11/2009 was a Sunday, so we return Sunday.<br />\n              The date 11/10/2010 was a Wednesday, so we return Wednesday.\n              <br />\n              <br />\n              getUTCDay() method returns the day of the week in the specified date according to universal\n              time, where 0 represents Sunday.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={getDayName}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <p>Regular Expressions I</p>\n              Function returning a RegExp object, re, that matches any\n              string s that begins and ends with the same vowel. Recall that the English vowels are a, e, i,\n              o, and u.\n              <br />\n              <br />\n              <b>Input:</b>bcd\n              <br />\n              <br />\n              <b>Output:</b>false\n              <br />\n              <br />\n              <b>Explanation:</b>\n              This string starts with (and ends in) a consonant, so it cannot start and end with the same\n              vowel.\n              <ul>\n                <li>Receive a string of s which is greater than or equal to the length of 3</li>\n                <li>Write a regular expression that validates the string</li>\n                <li>The string must be in all lowercase with characters from a-z</li>\n                <li>The string must start and end with a vowel</li>\n                <li>Return a boolean of true or false if the string meets the requirements</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={regexVar}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <p>Receive a string of s which is greater than or equal to the length of 3</p>\n              <br />\n              <ul>\n                <li>Write a regular expression that validates the string</li>\n                <li>String starts with either (Mr., Mrs., Ms., Dr., or Er.)</li>\n                <li>String doesnâ€™t contain any spaces</li>\n                <li>String contains on the letters a-z or A-Z</li>\n                <li>Return a boolean of true or false if the string meets the requirements</li>\n              </ul>\n              <b>Input:</b>Mr.X\n              <br />\n              <b>Output:</b>true\n              <div style={titles}>\n                <PrismCode\n                  code={regexVars}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <p>Write a regular expression that validates the string, The expression must only output integer numbers</p>\n              <br />\n              <b>Input:</b>102, 1948948 and 1.3 and 4.5\n              <br />\n              <b>Output:</b>102, 1948948, 1, 3, 4, 5\n              <br />\n              <br />\n              <b>Explanation:</b>\n              When we call match on string  and pass the correct RegExp as our argument, it returns the\n              following array of results: [ '102', '1948948', '1', '3', '4', '5' ].\n              <div style={titles}>\n                <PrismCode\n                  code={regexVares}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(HackerRank1));\n"]},"metadata":{},"sourceType":"module"}