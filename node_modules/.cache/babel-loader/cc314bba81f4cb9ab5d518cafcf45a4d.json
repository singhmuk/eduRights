{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/pythone/deeppy/stringPy.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst format = `\ntxt = \"My name is John, and I am {}\"\n    \nmy_string = \"\"\"Hello                                              \nWorld\"\"\"\n\nprint(type(my_string))\nprint(my_string[1])\nprint(len(my_string))\nprint(my_string.strip())                            \nprint(my_string.lower())\nprint(my_string.upper())\nprint(my_string.replace(\"H\", \"J\"))\nprint(my_string.split(\",\"))\nprint(len(my_string))  \nprint(\"hello\".startswith(\"he\"))                                      # startswith and endswith\nprint(\"hello\".endswith(\"llo\"))\nprint(\"Hello\".find(\"o\"))                                             # find first index of a given substring, -1 otherwise\nprint(\"Hello\".count(\"e\"))\n\n\nmy_list = ['How', 'are', 'you', 'doing']                              \nstr = ' '.join(my_list)                                              # join elements of a list into a string\nprint(str)\n\nb = my_string[0]                                                     # get character by referring to index\nb = my_string[1:3]                                                   # Substrings with slicing\nb = my_string[::2]                                                   # start to end with every second item\nb = my_string[::-1] \n`.trim();\nconst iterating = `\nmy_string = 'Hello'\nfor i in my_string:\n    print(i)`.trim();\nconst formates = `\na = \"Hello {0} and {1}\".format(\"Bob\", \"Tom\")                            # use braces as placeholders\na = \"Hello {} and {}\".format(\"Bob\", \"Tom\")                              # positions are optional for the default order\na = \"The integer value is {}\".format(2)\n\nprint(a)\n\n\na = \"The float value is {0:.3f}\".format(2.1234)                         # some special format rules for numbers\na = \"The float value is {0:e}\".format(2.1234)\na = \"The binary value is {0:b}\".format(2)\n\nprint(a)\n\n\nprint(\"Hello %s and %s\" % (\"Bob\", \"Tom\"))                               # must be a tuple for multiple arguments\nval =  3.14159265359\nprint(\"The decimal value is %d\" % val)                                  # old style formatting by using % operator\n`.trim();\nconst fstrings = `\nname = \"Eric\"\nage = 25\na = f\"Hello, {name}. You are {age}.\"\nprint(a)\n\npi = 3.14159\na = f\"Pi is {pi:.3f}\"\nprint(a)\n\na = f\"The value is {2*60}\"                                   # f-Strings are evaluated at runtime, which allows expressions\nprint(a)`.trim();\nconst concatenation = `\nfrom timeit import default_timer as timer\nmy_list = [\"a\"] * 1000000\n\nstart = timer()\na = \"\".join(my_list)\nend = timer()\nprint(\"concatenate string with join(): %.5f\" % (end - start))\n`.trim();\nconst splits = `\nimport re\n\n#split\nstr = \"Split string into list\"\nnewStr = str.split()\nprint(newStr) \n\n\n#2 sub\nnewStr = re.sub(\"s\", \"9\", str)\nprint(newStr)\n\n\n#3 subn\nstr = re.subn('ov', '~*' , 'The rain in Spain', flags = re.IGNORECASE)\nprint(str)`.trim();\nconst simpleFunction = `\ndef sum(a,b):\n    c=a+b\n    return c\nobj=sum(2,3)\nprint(obj)\n\n\n#2\nf=lambda a,b:a+b\nobj=f(2,3)\nprint(obj)`.trim();\nconst lambda = `\nf=lambda n: 1 if n==0 else n+f(n-1)\nprint(f(5))\n\n#2\nlist(filter(lambda x:x>6,range(9))) [7, 8]\n\nlist(map(lambda x:x**2,range(5))) [0, 1, 4, 9, 16, 25]\n\nfrom functools import reduce \nreduce(lambda x,y:x-y,[1,2,3,4,5]) -13`.trim();\nconst filter = `\nf = lambda x: x+10                                          \nval1 = f(5)\nval2 = f(100)\nprint(val1, val2)\n\n\nf = lambda x,y: x*y                          \nval3 = f(2,10)\nval4 = f(7,5)\nprint(val3, val4)`.trim();\nconst variations = `\ndef myfunc(n):\n    return lambda x: x * n\n\ndoubler = myfunc(2)\nprint(doubler(6))\n`.trim();\nconst sorting = `\npoints2D = [(1, 9), (4, 1), (5, -3), (10, 2)]\nsorted_by_y = sorted(points2D, key= lambda x: x[1])\nprint(sorted_by_y)\n\nmylist = [- 1, -4, -2, -3, 1, 2, 3, 4]\nsorted_by_abs = sorted(mylist, key= lambda x: abs(x))\nprint(sorted_by_abs)`.trim();\nconst mapFun = `\na  = [1, 2, 3, 4, 5, 6]\nb = list(map(lambda x: x * 2 , a))\n\n\nc = [x*2 for x in a]                                                # Use map if you have an already defined function\nprint(b)\nprint(c)`.trim();\nconst evaluates = `\na = [1, 2, 3, 4, 5, 6, 7, 8]\nb = list(filter(lambda x: (x%2 == 0) , a))\n\nc = [x for x in a if x%2 == 0]\nprint(b)\nprint(c)`.trim();\nconst reduces = `\nfrom functools import reduce\na = [1, 2, 3, 4]\nproduct_a = reduce(lambda x, y: x*y, a)\nprint(product_a)\nsum_a = reduce(lambda x, y: x+y, a)\nprint(sum_a)`.trim();\n\nclass StringPy extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, \"1. Strings\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Python strings are immutable.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, \"Use triple quotes for multiline strings.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, \"count(): \"), \"Returns the number of times a specified value occurs in a string.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"endswith(): \"), \"Returns true if the string ends with the specified value.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, \"find(): \"), \"Searches the string for a specified value and returns the position.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, \"format(): \"), \"Formats specified values in a string.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, \"format_map(): \"), \"Formats specified values in a string\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, \"index(): \"), \"Searches the string for a specified value and returns the position.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, \"isalnum(): \"), \"Returns True if all characters in the string are alphanumeric.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, \"isalpha(): \"), \"Returns True if all characters in the string are in the alphabet.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, \"isdecimal(): \"), \"Returns True if all characters in the string are decimals.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, \"isdigit(): \"), \"Returns True if all characters in the string are digits.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, \"isidentifier(): \"), \"Returns True if the string is an identifier.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, \"islower(): \"), \"Returns True if all characters in the string are lower case.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, \"isupper(): \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, \"lower(): \"), \"Converts a string into lower case.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, \"isnumeric(): \"), \"Returns True if all characters in the string are numeric.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"isprintable(): \"), \"Returns True if all characters in the string are printable.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, \"isspace(): \"), \"Returns True if all characters in the string are whitespaces.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, \"istitle(): \"), \"Returns True if the string follows the rules of a title.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, \"join(): \"), \"Joins the elements of an iterable to the end of the string.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, \"ljust(): \"), \"Returns a left justified version of the string.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, \"lstrip(): \"), \"Returns a left trim version of the string.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, \"maketrans(): \"), \"Returns a translation table to be used in translations.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, \"partition(): \"), \"Returns a tuple where the string is parted into three parts.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, \"rpartition(): \"), \"Returns a tuple where the string is parted into three parts.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, \"replace(): \"), \"Returns a string where a specified value is replaced with a specified value.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, \"rfind(): \"), \"Searches the string for a specified value and returns the last position of where it was found.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, \"rindex(): \"), \"Searches the string for a specified value and returns the last position of where it was found.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \"rjust(): \"), \"Returns a right justified version of the string.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, \"rstrip(): \"), \"Returns a right trim version of the string.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, \"rsplit(): \"), \"Splits the string at the specified separator, and returns a list.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, \"split(): \"), \"Splits the string at the specified separator, and returns a list\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, \"splitlines(): \"), \"Splits the string at line breaks and returns a list.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, \"startswith(): \"), \"Returns true if the string starts with the specified value.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, \"strip(): \"), \"Returns a trimmed version of the string.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, \"swapcase(): \"), \"Swaps cases, lower case becomes upper case.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, \"title(): \"), \"Converts the first character of each word to upper case.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, \"translate(): \"), \"Returns a translated string.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, \"zfill(): \"), \"Fills the string with a specified number of 0 values at the beginning.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: format,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, \"Iterating\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: iterating,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, \"2. Format\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: formates,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, \"3. f-Strings\"), \"Use the variables directly inside the braces.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: fstrings,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, \"More on immutability and concatenation\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, \"since a string is immutable, adding strings with + always creates a new string, and therefore is expensive for multiple operations.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, \"join method is much faster.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: concatenation,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, \"4. What are split(), sub(), and subn() methods in Python?\"), \"These methods belong to Python RegEx,  \\u2018re\\u2019 module and are used to modify strings.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, \"split():\"), \"Used to split a given string into a list.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, \"sub(): \"), \"Used to find a substring where a regex pattern matches, and then it replaces the matched substring with a different string.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, \"subn(): \"), \"similar to the sub() method, but it returns the new string, along with the number of replacements.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: splits,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, \"5. Lambda\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: simpleFunction,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, \"6. Lambda with Map. Filter\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: lambda,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, \"7. Lambda functions\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, \"A lambda function is defined without a name.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, \"A lambda function can take any number of arguments, but have only one expression.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }, \"Anonymous functions are defined using the lambda keyword.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, \"It's most common use is as an argument to higher-order functions.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: filter,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }, \"8. Lamdba inside another function\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: variations,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, \"9. Custom sorting using a lambda function as key parameter\"), \"The key function transforms each element before sorting.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: sorting,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, \"10. Use lambda for map function\"), \"map(func, seq), transforms each element with the function.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: mapFun,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, \"11. Use lambda for filter function\"), \"filter(func, seq), returns all elements for which func evaluates to True.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: evaluates,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }, \"12. Reduce\"), \"reduce(func, seq), repeatedly applies the func to the elements and returns a single value. func takes 2 arguments.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: reduces,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(StringPy);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/pythone/deeppy/stringPy.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","format","trim","iterating","formates","fstrings","concatenation","splits","simpleFunction","lambda","filter","variations","sorting","mapFun","evaluates","reduces","StringPy","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst format = `\ntxt = \"My name is John, and I am {}\"\n    \nmy_string = \"\"\"Hello                                              \nWorld\"\"\"\n\nprint(type(my_string))\nprint(my_string[1])\nprint(len(my_string))\nprint(my_string.strip())                            \nprint(my_string.lower())\nprint(my_string.upper())\nprint(my_string.replace(\"H\", \"J\"))\nprint(my_string.split(\",\"))\nprint(len(my_string))  \nprint(\"hello\".startswith(\"he\"))                                      # startswith and endswith\nprint(\"hello\".endswith(\"llo\"))\nprint(\"Hello\".find(\"o\"))                                             # find first index of a given substring, -1 otherwise\nprint(\"Hello\".count(\"e\"))\n\n\nmy_list = ['How', 'are', 'you', 'doing']                              \nstr = ' '.join(my_list)                                              # join elements of a list into a string\nprint(str)\n\nb = my_string[0]                                                     # get character by referring to index\nb = my_string[1:3]                                                   # Substrings with slicing\nb = my_string[::2]                                                   # start to end with every second item\nb = my_string[::-1] \n`.trim();\n\nconst iterating = `\nmy_string = 'Hello'\nfor i in my_string:\n    print(i)`.trim();\n\nconst formates = `\na = \"Hello {0} and {1}\".format(\"Bob\", \"Tom\")                            # use braces as placeholders\na = \"Hello {} and {}\".format(\"Bob\", \"Tom\")                              # positions are optional for the default order\na = \"The integer value is {}\".format(2)\n\nprint(a)\n\n\na = \"The float value is {0:.3f}\".format(2.1234)                         # some special format rules for numbers\na = \"The float value is {0:e}\".format(2.1234)\na = \"The binary value is {0:b}\".format(2)\n\nprint(a)\n\n\nprint(\"Hello %s and %s\" % (\"Bob\", \"Tom\"))                               # must be a tuple for multiple arguments\nval =  3.14159265359\nprint(\"The decimal value is %d\" % val)                                  # old style formatting by using % operator\n`.trim();\n\nconst fstrings = `\nname = \"Eric\"\nage = 25\na = f\"Hello, {name}. You are {age}.\"\nprint(a)\n\npi = 3.14159\na = f\"Pi is {pi:.3f}\"\nprint(a)\n\na = f\"The value is {2*60}\"                                   # f-Strings are evaluated at runtime, which allows expressions\nprint(a)`.trim();\n\nconst concatenation = `\nfrom timeit import default_timer as timer\nmy_list = [\"a\"] * 1000000\n\nstart = timer()\na = \"\".join(my_list)\nend = timer()\nprint(\"concatenate string with join(): %.5f\" % (end - start))\n`.trim();\n\nconst splits = `\nimport re\n\n#split\nstr = \"Split string into list\"\nnewStr = str.split()\nprint(newStr) \n\n\n#2 sub\nnewStr = re.sub(\"s\", \"9\", str)\nprint(newStr)\n\n\n#3 subn\nstr = re.subn('ov', '~*' , 'The rain in Spain', flags = re.IGNORECASE)\nprint(str)`.trim();\n\nconst simpleFunction = `\ndef sum(a,b):\n    c=a+b\n    return c\nobj=sum(2,3)\nprint(obj)\n\n\n#2\nf=lambda a,b:a+b\nobj=f(2,3)\nprint(obj)`.trim();\n\nconst lambda = `\nf=lambda n: 1 if n==0 else n+f(n-1)\nprint(f(5))\n\n#2\nlist(filter(lambda x:x>6,range(9))) [7, 8]\n\nlist(map(lambda x:x**2,range(5))) [0, 1, 4, 9, 16, 25]\n\nfrom functools import reduce \nreduce(lambda x,y:x-y,[1,2,3,4,5]) -13`.trim();\n\nconst filter = `\nf = lambda x: x+10                                          \nval1 = f(5)\nval2 = f(100)\nprint(val1, val2)\n\n\nf = lambda x,y: x*y                          \nval3 = f(2,10)\nval4 = f(7,5)\nprint(val3, val4)`.trim();\n\nconst variations = `\ndef myfunc(n):\n    return lambda x: x * n\n\ndoubler = myfunc(2)\nprint(doubler(6))\n`.trim();\n\nconst sorting = `\npoints2D = [(1, 9), (4, 1), (5, -3), (10, 2)]\nsorted_by_y = sorted(points2D, key= lambda x: x[1])\nprint(sorted_by_y)\n\nmylist = [- 1, -4, -2, -3, 1, 2, 3, 4]\nsorted_by_abs = sorted(mylist, key= lambda x: abs(x))\nprint(sorted_by_abs)`.trim();\n\nconst mapFun = `\na  = [1, 2, 3, 4, 5, 6]\nb = list(map(lambda x: x * 2 , a))\n\n\nc = [x*2 for x in a]                                                # Use map if you have an already defined function\nprint(b)\nprint(c)`.trim();\n\nconst evaluates = `\na = [1, 2, 3, 4, 5, 6, 7, 8]\nb = list(filter(lambda x: (x%2 == 0) , a))\n\nc = [x for x in a if x%2 == 0]\nprint(b)\nprint(c)`.trim();\n\nconst reduces = `\nfrom functools import reduce\na = [1, 2, 3, 4]\nproduct_a = reduce(lambda x, y: x*y, a)\nprint(product_a)\nsum_a = reduce(lambda x, y: x+y, a)\nprint(sum_a)`.trim();\n\nclass StringPy extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Strings</h3>\n              <ul>\n                <li>Python strings are immutable.</li>\n                <li>Use triple quotes for multiline strings.</li>\n              </ul>\n              <br />\n\n              <ul>\n                <li><b>count(): </b>Returns the number of times a specified value occurs in a string.</li>\n                <li><b>endswith(): </b>Returns true if the string ends with the specified value.</li>\n                <li><b>find(): </b>Searches the string for a specified value and returns the position.</li>\n                <li><b>format(): </b>Formats specified values in a string.</li>\n                <li><b>format_map(): </b>Formats specified values in a string</li>\n                <li><b>index(): </b>Searches the string for a specified value and returns the position.</li>\n                <li><b>isalnum(): </b>Returns True if all characters in the string are alphanumeric.</li>\n                <li><b>isalpha(): </b>Returns True if all characters in the string are in the alphabet.</li>\n                <li><b>isdecimal(): </b>Returns True if all characters in the string are decimals.</li>\n                <li><b>isdigit(): </b>Returns True if all characters in the string are digits.</li>\n                <li><b>isidentifier(): </b>Returns True if the string is an identifier.</li>\n                <li><b>islower(): </b>Returns True if all characters in the string are lower case.</li>\n                <li><b>isupper(): </b></li>\n                <li><b>lower(): </b>Converts a string into lower case.</li>\n                <li><b>isnumeric(): </b>Returns True if all characters in the string are numeric.</li>\n                <li><b>isprintable(): </b>Returns True if all characters in the string are printable.</li>\n                <li><b>isspace(): </b>Returns True if all characters in the string are whitespaces.</li>\n                <li><b>istitle(): </b>Returns True if the string follows the rules of a title.</li>\n                <li><b>join(): </b>Joins the elements of an iterable to the end of the string.</li>\n                <li><b>ljust(): </b>Returns a left justified version of the string.</li>\n                <li><b>lstrip(): </b>Returns a left trim version of the string.</li>\n                <li><b>maketrans(): </b>Returns a translation table to be used in translations.</li>\n                <li><b>partition(): </b>Returns a tuple where the string is parted into three parts.</li>\n                <li><b>rpartition(): </b>Returns a tuple where the string is parted into three parts.</li>\n                <li><b>replace(): </b>Returns a string where a specified value is replaced with a specified value.</li>\n                <li><b>rfind(): </b>Searches the string for a specified value and returns the last position of where it was found.</li>\n                <li><b>rindex(): </b>Searches the string for a specified value and returns the last position of where it was found.</li>\n                <li><b>rjust(): </b>Returns a right justified version of the string.</li>\n                <li><b>rstrip(): </b>Returns a right trim version of the string.</li>\n                <li><b>rsplit(): </b>Splits the string at the specified separator, and returns a list.</li>\n                <li><b>split(): </b>Splits the string at the specified separator, and returns a list</li>\n                <li><b>splitlines(): </b>Splits the string at line breaks and returns a list.</li>\n                <li><b>startswith(): </b>Returns true if the string starts with the specified value.</li>\n                <li><b>strip(): </b>Returns a trimmed version of the string.</li>\n                <li><b>swapcase(): </b>Swaps cases, lower case becomes upper case.</li>\n                <li><b>title(): </b>Converts the first character of each word to upper case.</li>\n                <li><b>translate(): </b>Returns a translated string.</li>\n                <li><b>zfill(): </b>Fills the string with a specified number of 0 values at the beginning.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={format}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Iterating</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={iterating}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Format</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={formates}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. f-Strings</h3>\n              Use the variables directly inside the braces.\n              <div style={titles}>\n                <PrismCode\n                  code={fstrings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>More on immutability and concatenation</h3>\n              <ul>\n                <li>since a string is immutable, adding strings with + always\n                  creates a new string, and therefore is expensive for multiple operations.</li>\n                <li>join method is much faster.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={concatenation}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>4. What are split(), sub(), and subn() methods in Python?</h3>\n              These methods belong to Python RegEx,  ‘re’ module and are used to modify strings.\n              <ul>\n                <li><b>split():</b>Used to split a given string into a list.</li>\n                <li><b>sub(): </b>Used to find a substring where a regex pattern matches,\n                  and then it replaces the matched substring with a different string.</li>\n                <li><b>subn(): </b>similar to the sub()\n                  method, but it returns the new string, along with the number of replacements.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={splits}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. Lambda</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={simpleFunction}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Lambda with Map. Filter</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={lambda}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7. Lambda functions</h3>\n              <ul>\n                <li>A lambda function is defined without a name.</li>\n                <li>A lambda function can take any number of arguments, but have only one expression.</li>\n                <li>Anonymous functions are defined using the lambda keyword.</li>\n                <li>It's most common use is as an argument to higher-order functions.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={filter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>8. Lamdba inside another function</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={variations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>9. Custom sorting using a lambda function as key parameter</h3>\n              The key function transforms each element before sorting.\n              <div style={titles}>\n                <PrismCode\n                  code={sorting}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>10. Use lambda for map function</h3>\n              map(func, seq), transforms each element with the function.\n              <div style={titles}>\n                <PrismCode\n                  code={mapFun}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>11. Use lambda for filter function</h3>\n              filter(func, seq), returns all elements for which func evaluates to True.\n              <div style={titles}>\n                <PrismCode\n                  code={evaluates}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>12. Reduce</h3>\n              reduce(func, seq), repeatedly applies the func to the elements and returns a single value.\n              func takes 2 arguments.\n              <div style={titles}>\n                <PrismCode\n                  code={reduces}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(StringPy));\n"]},"metadata":{},"sourceType":"module"}