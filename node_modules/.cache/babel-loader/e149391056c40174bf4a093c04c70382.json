{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/angularjsd/angular 12/flows.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst counters = `\nangular [routerlink]: <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n  link to user component\n</a>\n\n\nng router link: <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n  link to user component\n</a>\n`.trim();\nconst addcomponents = `\nrouter.navigateByUrl(\"/team/33/user/11\");\n\n// Navigate without updating the URL\nrouter.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n`.trim();\nconst routerLink = `\n<my-tile [routerLink]=\"['/secondPage', item.id, 'item-list']\" *ngFor=\"let item of listaOfItem\" [item]=\"item\">\n</my-tile>\n`.trim();\nconst javaScriptExp = `\n‘{{ someExpression() }}’\n`.trim();\n\nclass NgrxCounter extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"1. What are new features realise Angular 8\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Differential loading: \"), \"Differential loading lets yin Angular CLI to create two different production bundles of your app.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), \"Attributes on the \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"script\"), \" tag in our index.html file let the modern browsers will request a bundle that uses ES6 JavaScript syntax and will be significantly smaller than the bundle that uses ES5 syntax to maintain support for older browsers. Differential loading is enabled by default for new apps created.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"New lazy loading syntax: \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Create web workers with the CLI: \"), \"New schematic \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"ng generate\"), \" command to create and update the necessary files in our project to add a new web worker. The new and updated files include a basic template for our new web worker so you can worry less about boilerplate syntax and more quickly focus on writing the code you want to run on a background thread.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Builder and workspace APIs: \"), \"New APIs that allow you to create custom build and deployment commands using hooks into the familiar \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"ng build, ng test,\"), \" and \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"ng run\"), \" commands. There are also new APIs that allow you to open and work with the workspace defined in your angular.json file, which should reduce the amount of manual manipulation required to perfectly configure your project.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"2. Can we create custom Pipes in Angular 8.\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Create a Pipe Class and decorate it with the decorator @Pipe.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Supply a name property to be used as template code name.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Register your Pipe in the module under declarations.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Finally, implement PipeTransform and write transformation logic.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"3. What is the use of router-outlet in angular 8.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"The router-outlet is a directive that's used by the router to mark where in a template, a matched component should be inserted.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Our app will have multiple views/ pages and the app template acts like a shell of our application. Any element, we add to the shell will be rendered in each view, only the part marked by the router outlet will be changed between views.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"4. Can I use multiple router outlets in Angular 8?\"), \"Yes! We can use multiple router-outlets in same template by configuring our routers and simply add the router-outlet name.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"5. How do you make a router link in HTML?\"), \"Linking Routes in HTML.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"To add links to one of the routes, use the routerLink directive in HTML. This directive accepts an array.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"If you use the routerLink directive without the brackets, you'll need to pass the route as a string.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"The \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"router-outlet\"), \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"/router-outlet\"), \" acts as a placeholder for components.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: counters,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"6. Difference between navigate and navigatebyurl in angular.\"), \"navigateByUrl is similar to changing the location bar directly\\u2013we are providing the \\u201Cwhole\\u201D new URL. Whereas router. navigate creates a new URL by applying an array of passed-in commands, a patch, to the current URL.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: addcomponents,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"7. How do you detect route change in Angular?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Import Router, Event, NavigationStart, NavigationEnd, NavigationError from \\u2018@angular/router\\u2019.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"And inject router in the constructor.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"Subscribe to the NavigationStart, NavigationEnd, NavigationError events of the router.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"8. What is this router navigate?\"), \"navigate method, you must supply the ActivatedRoute to give the router knowledge of where you are in the current route tree. After the link parameters array, add an object with a relativeTo property set to the ActivatedRoute . The router then calculates the target URL based on the active route\\u2019s location.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"9. When to use Route class in case of navigation?\"), \"Using Route class in case of navigation to happen on a triggered event. Before performing the above two operations, there is a need to register this component in the Route class\\u2019s instance which lies inside the app-routing.module.ts file. This will be further used to navigate from child to parent.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"10. Is there a way to navigate between routes in angular?\"), \"You can also navigate imperatively by using the code. This is done using the router service, which provides navigate and navigatebyUrl methods via which you can perform route changes.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"11. How to specify which route to navigate to in NavLink?\"), \"To specify which route to navigate to, use the to prop and pass the path name. The activeClassName prop will add an active class to the link if it\\u2019s currently active. On the browser, the NavLink component is rendered as an tag with an href attribute value that was passed in the to prop.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"12. When to use absolute path in navigate method?\"), \"Navigate Method always uses the absolute path unless you provide a starting point. \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, \"navigate.navigateByUrl\"), \" Use this method if you want to navigate to a URL by using the absolute path. The first argument is a string containing the complete URL.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"13. What is the use of EventEmitter in angular.\"), \"EventEmitter is used with @Output directive to emit custom events asynchronously and synchronously, and register handlers for those events by subscribing to an instance.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"15. What is the use of template in angular.\"), \"A template is a form of HTML that tells Angular how to render the component. Views are allowing to modify, show or hide entire UI sections or pages as a unit.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"16. What is the use of shared module in angular.\"), \"A Shared Module is used to organize a set of commonly used pieces into one module and export them to any other module that imports the Share Module. This allows us to selectively aggregate the reusable components.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"17. What is provider in angular.\"), \"Providers are classes that create and manage service objects the first time that Angular needs to resolve a dependency. Providers is used to register the classes to an angular module as a service. And then, this service classes can be used by other components during the itself creation phase in the module.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"18. What is ng-template in Angular?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"ng-template is an Angular element that is used for rendering HTML in a template. However, it is not rendered directly on DOM. If you include an ng-template tag to a template, the tag and the content inside it will be replaced by comment upon render.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, \"If you add a ng-template tag to your template, it and everything inside it will be replaced by a comment. It might seem a bit useless, but it is rarely used alone. It can be for example used to define the else case of an *ngIf.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \"19. What is difference between package.json and package-lock.json.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \"package.json: \"), \"Records important metadata about the project.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, \"package.lock.json: \"), \"Allows future devs to install the same dependencies in the project.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, \"20. How do you handle error in Angular?\"), \"One traditional way of handling errors in Angular is to provide an ErrorHandler class. This class can be extended to create your own global error handler. This is also a useful way to handle all errors that occur, but is mostly useful for tracking error logs.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, \"21. Pass complex JSON via routerLink.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: routerLink,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, \"22. How does an Angular application work?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, \"Every Angular app consists of a file named\\xA0angular.json. This file will contain all the configurations of the app. While building the app, the builder looks at this file to find the entry point of the application.\\xA0\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, \"Inside the build section, the main property of the options object defines the entry point of the application which in this case is\\xA0main.ts. The main.ts file creates a browser environment for the application to run and along with this, it also calls a function called\\xA0bootstrapModule, which bootstraps the application. These two steps are performed in the following order inside the main.ts file:\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, \"platformBrowserDynamic().bootstrapModule(AppModule)\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, \"In the above line of code,\\xA0AppModule\\xA0is getting bootstrapped. The AppModule is declared in the app.module.ts file. This module contains declarations of all the components.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, \"Now, AppComponent\\xA0is getting bootstrapped.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"This component is defined in\\xA0app.component.ts\\xA0file. This file interacts with the webpage and serves data to it.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }), \"Each component is declared with three properties:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, \"Selector: \"), \"used for accessing the component.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, \"Template/TemplateURL: \"), \"contains HTML of the component.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, \"StylesURL: \"), \"contains component-specific stylesheets.\")), \"After this, Angular calls the\\xA0index.html\\xA0file. This file consequently calls the root component that is\\xA0app-root. The root component is defined in\\xA0app.component.ts.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }), \"This is how every angular application works.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, \"23. What are some of the advantages of Angular over other frameworks?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, \"Features that are provided out of the box: \"), \"Angular provides a number of built-in features like,routing, state management, rxjs library and http services straight out of the box. This means that one does not need to look for the above stated features separately. They are all provided with angular.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, \"Declarative UI: \"), \"Angular uses HTML to render the UI of an application. HTML is a declarative language and is much easier to use than JavaScript.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, \"Long-term Google support: \"), \"Google announced Long-term support for Angular. This means that Google plans to stick with Angular and further scale up its ecosystem.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, \"24. What is AOT compilation? What are the advantages of AOT?\"), \"Every Angular application consists of components and templates which the browser cannot understand. Therefore, all the Angular applications need to be compiled first before running inside the browser.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }), \"Angular provides two types of compilation:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, \"JIT(Just-in-Time) compilation\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, \"AOT(Ahead-of-Time) compilation\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }), \"The advantages of using AOT compilation are:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, \"Since the application compiles before running inside the browser, the browser loads the executable code and renders the application immediately, which leads to\\xA0faster rendering.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, \"In AOT compilation, the compiler sends the external HTML and CSS files along with the application, eliminating separate AJAX requests for those source files, which leads to\\xA0fewer ajax requests.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, \"Developers can detect and handle errors during the building phase, which helps in\\xA0minimizing errors.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, \"The AOT compiler adds HTML and templates into the JS files before they run inside the browser. Due to this, there are no extra HTML files to be read, which provide\\xA0better security\\xA0to the application.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, \"By default, angular builds and serves the application using JIT compiler:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, \"ng build\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, \"ng serve\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, \"For using AOT compiler following changes should be made:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, \"ng build --aot\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, \"ng serve --aot\")))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, \"25. Explain Components, Modules and Services in Angular.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, \"In Angular, components are the basic building blocks, which control a part of the UI for any application.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, \"A component is defined using the\\xA0@Component\\xA0decorator. Every component consists of three parts, the template which loads the view for the component, a stylesheet which defines the look and feel for the component, and a class that contains the business logic for the component.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, \"Modules: \"), \"A module is a place where we can group components, directives, services, and pipes. Module decides whether the components, directives, etc can be used by other modules, by exporting or hiding these elements. Every module is defined with a \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, \"@NgModule\"), \" decorator.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }), \"By default, modules are of two types:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, \"Root Module: \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, \"Feature Module: \"), \"Every application can have only one root module whereas, it can have one or more feature modules.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, \"A root module imports\\xA0BrowserModule,\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, \"whereas a feature module imports\\xA0CommonModule.\")))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, \"Services: \"), \"Services are objects which get instantiated only once during the lifetime of an application. The main objective of a service is to share data, functions with different components of an Angular application.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }), \"A service is defined using a\\xA0\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, \"@Injectable\"), \"\\xA0decorator. A function defined inside a service can be invoked from any component or directive.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, \"26. Explain string interpolation and property binding in Angular.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, \"String interpolation and property binding are parts of\\xA0data-binding\\xA0in Angular. Data-binding is a feature in angular, which provides a way to communicate between the component(Model) and its view(HTML template).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, \"Data-binding can be done in two ways,\\xA0one-way\\xA0binding and\\xA0two-way\\xA0binding. In Angular, data from the component can be inserted inside the HTML template. In one-way binding, any changes in the component will directly reflect inside the HTML template but, vice-versa is not possible. Whereas, it is possible in two-way binding.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, \"String interpolation and property binding allow only one-way data binding. String interpolation uses the double curly braces\\xA0to display data from the component. Angular automatically runs the expression written inside the curly braces.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, \"27. How are Angular expressions different from JavaScript expressions?\"), \"The first and perhaps, the biggest difference is that Angular expressions allow us to write JavaScript in HTML which is not the case when it comes to JavaScript expressions. Next, Angular expressions are evaluated against a\\xA0local\\xA0scope object whereas JavaScript expressions against\\xA0global\\xA0window object.\\xA0\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, \"28. How are observables different from promises?\"), \"The first difference is that an Observable is\\xA0lazy\\xA0whereas a Promise is\\xA0eager.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, \"Observables\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, \"Promises\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, \"Handle a sequence of asynchronous events over a period of time.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, \"Deal with one asynchronous event at a time\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, \"Lazy. An observable is not called until we subscribe() to the observable\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, \"Not Lazy, Execute immediately after creation.\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, \"Can be cancelled by using the unsubscribe() method\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, \"Cannot be cancelled\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, \"Observable provides operators like map, forEach, filter, reduce, retry, retryWhen etc.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, \"29. Angular by default, uses client-side rendering for its applications. Can one make an angular application to render on the server-side?\"), \"Yes, angular provides a technology called\\xA0Angular Universal, which can be used to render applications on the server-side.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, \"The advantages of using Angular Universal are :\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, \"First time users can instantly see a view of the application. This benefits in providing\\xA0better user experience.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, \"Many search engines expect pages in plain HTML, thus, Universal can make sure that your content is available on every search engine, which leads to\\xA0better SEO.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, \"Any server-side rendered application\\xA0loads faster\\xA0since rendered pages are available to the browser sooner.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }, \"30. How does one share data between components in Angular?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }, \"Parent to child using @Input decorator\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }, \"Child to parent using @ViewChild decorator\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, \"@ViewChild: \"), \"decorator is used to reference the child component as \\u201Cchild\\u201D property.\"))), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, \"Child to parent using @Output and EventEmitter\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, \"31. what is dependency injection in simple terms?\"), \"Let\\u2019s break it down, dependencies in angular are nothing but services which have a functionality. Functionality of a service, can be needed by various components and directives in an application. Angular provides a smooth mechanism by which we can inject these dependencies in our components and directives. So basically, we are just making dependencies which are injectable across all components of an application.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, \"32. What is TypeScript?\"), \"TypeScript is a superset of JavaScript that offers excellent consistency. It is highly recommended, as it provides some syntactic sugar and makes the code base more comfortable to understand and maintain.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, \"33. What are Annotations in Angular?\"), \"Annotations in Angular are used for creating an annotation array. They are the metadata set on the class that is used to reflect the Metadata library.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, \"34. What are filters in Angular? Name a few of them.\"), \"Filters are used to format an expression and present it to the user. They can be used in view templates, controllers, or services. Some inbuilt filters are as follows.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, \"Date\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, \"filter\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, \"Json\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }, \"limitTo\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }, \"lowercase\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, \"35. What do you understand by scope in Angular?\"), \"The scope in Angular binds the HTML, i.e., the view, and the JavaScript, i.e., the controller. It as expected is an object with the available methods and properties. The scope is available for both the view and the controller. When you make a controller in Angular, you pass the $scope object as an argument.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }, \"36. What are Template statements?\"), \"Template statements are properties or methods used in HTML for responding to user events. With these template statements, the application that you create or are working on, can have the capability to engage users through actions such as submitting forms and displaying dynamic content.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }, \"37. What is Bootstrap? How is it embedded into Angular?\"), \"Bootstrap is a powerful toolkit. It is a collection of HTML, CSS, and JavaScript tools for creating and building responsive web pages and web applications.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }, \"38. What type of DOM does Angular implement?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    }, \"DOM (Document Object Model) treats an XML or HTML document as a tree structure in which each node is an object representing a part of the document.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }, \"Angular uses the regular DOM. This updates the entire tree structure of HTML tags until it reaches the data to be updated. However, to ensure that the speed and performance are not affected, Angular implements Change Detection.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }, \"39. What are the differences between Angular decorator and annotation?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }, \"In Angular, decorators are design patterns that help in the modification or decoration of the respective classes without making changes in the actual source code.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }, \"Annotations, on the other hand, are used in Angular to build an annotation array. They use the Reflective Metadata library and are a metadata set of the given class.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    }, \"40. What are modules in Angular?\"), \"A module is a logical boundary of our application. It is used to encapsulate code dealing with a specific aspect of the application, such as routing, HTTP, validation, etc. The main reason why modules are used is to enhance application composability. For example, if we wish to implement validation logic using different libraries, then for the one we have already implemented, we can create a new validation module and replace the current one with the new one, and our application would work just the same. In Angular, we create a module using the NgModule decorator.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }, \"41. What is DOM?\"), \"It is responsible for representing the content of a web page and changes in the architecture of an application. Here, all the objects are organized in the form of a tree, and the document can easily be modified, manipulated, and accessed only with the help of APIs.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }, \"42. What does subscribing mean in RxJS?\"), \"In RxJS, when using observables, we need to subscribe to an observable to use the data that flows through that observable. This data is generated from a publisher and is consumed by a subscriber. When we subscribe to an observable, we pass in a function for the data and another function for errors so that, in case there is some error, we can show some message or process the message in some way.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }, \"43. What is Angular Router?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }, \"Routing in a single-page frontend application is the task of responding to the changes in the URL made by adding and removing content from the application. This is a complicated task as we first need to intercept a request that changes the browser\\u2019s URL as we do not wish for the browser to reload. Then, we need to determine which content to remove and which content to add, and finally, we have to change the browser\\u2019s URL as well to show the user the current page they are on.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }, \"As we can see, this can be very difficult to implement, especially in multiple applications. That is why Angular comes with a full routing solution for a single-page application. In this, we can define routes with matching components and let Angular handle the routing process.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    }, \"44. Explain Angular CLI.\"), \"Angular CLI is otherwise known as Angular command-line interface. Angular supports CLI tools that give professionals the ability to use them to add components, deploy them instantly, and perform testing and many such functions.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }), \"HttpClient is an Angular module used for communicating with a backend service via the HTTP protocol. Usually, in frontend applications, for sending requests, we use the fetch API. However, the fetch API uses promises. Promises are useful, but they do not offer the rich functionalities that observables offer. This is why we use HttpClient in Angular as it returns the data as an observable, which we can subscribe to, unsubscribe to, and perform several operations on using operators. Observables can be converted to promises, and an observable can be created from a promise as well.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }, \"45. What is HttpClient, and what are its benefits?\"), \"Angular applications communicate with backend services over HTTP protocol using HttpClient which is based on top of the XMLHttpRequest interface.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }, \"advantages:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }, \"Contains testability features\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, \"Provides typed request and response objects\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }, \"Intercept request and response\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }, \"Supports Observable APIs\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    }, \"Supports streamlined error handling\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }, \"46. What is multicasting in Angular?\"), \"In Angular, when we are using the HttpClient module to communicate with a backend service and fetch some data, after fetching the data, we can broadcast it to multiple subscribers, all in one execution. This task of responding with data to multiple subscribers is called multicasting. It is specifically useful when we have multiple parts of our applications waiting for some data. To use multicasting, we need to use an RxJS subject. As observables are unicast, they do not allow multiple subscribers. However, subjects do allow multiple subscribers and are multicast.\\xA0\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }, \"47. What is server-side rendering in Angular?\"), \"In a normal Angular application, the browser executes our application, and JavaScript handles all the user interactions. However, because of this, sometimes, if we have a large application with a big bundle size, our page\\u2019s load speed is slowed down quite a bit as it needs to download all the files, parse JavaScript, and then execute it. To overcome this slowness, we can use server-side rendering, which allows us to send a fully rendered page from the server that the browser can display and then let the JavaScript code take over any subsequent interactions from the user.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }, \"48. What is Angular Universal?\"), \"Angular Universal is a package for enabling server-side rendering in Angular applications. We can easily make our application ready for server-side rendering using the Angular CLI. To do this, we need to type the following command:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    }, \"ng add @nguniversal/express-engine\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      },\n      __self: this\n    }), \"This allows our Angular application to work well with an ExpressJS web server that compiles HTML pages with Angular Universal based on client requests. This also creates the server-side app module, app.server.module.ts, in our application directory.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    }, \"49. What is the difference between interpolated content and the content assigned to the innerHTML property of a DOM element?\"), \"Angular interpolation happens when in our template we type some JavaScript expression inside double curly braces\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: javaScriptExp,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    })), \". This is used to add dynamic content to a web page. However, we can do the same by assigning some dynamic content to the innerHTML property of a DOM element. The difference between the two is that, in Angular, the compiler always escapes the interpolated content, i.e., HTML is not interpreted, and the browser displays the code as it is with brackets and symbols, rather than displaying the output of the interpreted HTML. However, in innerHTML, if the content is HTML, then it is interpreted as the HTML code.\"))));\n  }\n\n}\n\nexport default withStyles(styles)(NgrxCounter);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/angularjsd/angular 12/flows.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","counters","trim","addcomponents","routerLink","javaScriptExp","NgrxCounter","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst counters = `\nangular [routerlink]: <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n  link to user component\n</a>\n\n\nng router link: <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n  link to user component\n</a>\n`.trim();\n\nconst addcomponents = `\nrouter.navigateByUrl(\"/team/33/user/11\");\n\n// Navigate without updating the URL\nrouter.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n`.trim();\n\nconst routerLink = `\n<my-tile [routerLink]=\"['/secondPage', item.id, 'item-list']\" *ngFor=\"let item of listaOfItem\" [item]=\"item\">\n</my-tile>\n`.trim();\n\nconst javaScriptExp = `\n‘{{ someExpression() }}’\n`.trim();\n\n\nclass NgrxCounter extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. What are new features realise Angular 8</h3>\n              <ul>\n                <li><b>Differential loading: </b>Differential loading lets yin Angular CLI to create two different production \n                bundles of your app. \n                <br/>\n                Attributes on the <b>script</b> tag in our index.html file let the modern browsers will request a bundle that uses\n                  ES6 JavaScript syntax and will be significantly smaller than the bundle that uses ES5 syntax to maintain \n                  support for older browsers. Differential loading is enabled by default for new apps created.</li>\n                <br />\n                <li><b>New lazy loading syntax: </b></li>\n                <br />\n                <li><b>Create web workers with the CLI: </b>New schematic <b>ng generate</b> command to create and update the \n                necessary files in our project to add a new web worker. The new and updated\n                  files include a basic template for our new web worker so you can worry less about boilerplate syntax and more \n                  quickly focus on writing the code you want to run on a background thread.</li>\n                <br />\n                <li><b>Builder and workspace APIs: </b>New APIs that allow you to create\n                  custom build and deployment commands using hooks into the familiar <b>ng build, ng test,</b> and <b>ng run</b> commands. There are also new APIs that allow you to open and work\n                  with the workspace defined in your angular.json file, which should reduce the amount of manual manipulation required to perfectly configure your project.</li>\n              </ul>\n              <br />\n\n              <h3>2. Can we create custom Pipes in Angular 8.</h3>\n              <ol>\n                <li>Create a Pipe Class and decorate it with the decorator @Pipe.</li>\n                <li>Supply a name property to be used as template code name.</li>\n                <li>Register your Pipe in the module under declarations.</li>\n                <li>Finally, implement PipeTransform and write transformation logic.</li>\n              </ol>\n              <br />\n\n              <h3>3. What is the use of router-outlet in angular 8.</h3>\n              <ul>\n                <li>The router-outlet is a directive that's used by the router to mark where in a template, a matched component\n                  should be inserted.</li>\n                <br />\n                <li>Our app will have multiple views/ pages and the app template acts like a shell of our application. \n                  Any element, we add to the shell\n                  will be rendered in each view, only the part marked by the router outlet will be changed between views.</li>\n              </ul>\n              <br />\n\n              <h3>4. Can I use multiple router outlets in Angular 8?</h3>\n              Yes! We can use multiple router-outlets in same template by configuring our routers and simply add the router-outlet name.\n              <br />\n\n              <h3>5. How do you make a router link in HTML?</h3>\n              Linking Routes in HTML.\n              <ol>\n                <li>To add links to one of the routes, use the routerLink directive in HTML. This directive accepts an array.</li>\n                <li>If you use the routerLink directive without the brackets, you'll need to pass the route as a string.</li>\n                <li>The <b>router-outlet</b> <b>/router-outlet</b> acts as a placeholder for components.</li>\n              </ol>\n              <div style={titles}>\n                <PrismCode\n                  code={counters}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Difference between navigate and navigatebyurl in angular.</h3>\n              navigateByUrl is similar to changing the location bar directly–we are providing the “whole” new URL. Whereas router. navigate creates a new URL by applying an array\n              of passed-in commands, a patch, to the current URL.\n              <div style={titles}>\n                <PrismCode\n                  code={addcomponents}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7. How do you detect route change in Angular?</h3>\n              <ul>\n                <li>Import Router, Event, NavigationStart, NavigationEnd, NavigationError from ‘@angular/router’.</li>\n                <li>And inject router in the constructor.</li>\n                <li>Subscribe to the NavigationStart, NavigationEnd, NavigationError events of the router.</li>\n              </ul>\n              <br />\n\n              <h3>8. What is this router navigate?</h3>\n              navigate method, you must supply the ActivatedRoute to give the router knowledge of where you are in the current route tree. After the link parameters array, add an\n              object with a relativeTo property set to the ActivatedRoute . The router then calculates the target URL based on the active route’s location.\n              <br />\n\n              <h3>9. When to use Route class in case of navigation?</h3>\n              Using Route class in case of navigation to happen on a triggered event. Before performing the above two operations, there is a need to register this component in the\n              Route class’s instance which lies inside the app-routing.module.ts file. This will be further used to navigate from child to parent.\n              <br />\n\n              <h3>10. Is there a way to navigate between routes in angular?</h3>\n              You can also navigate imperatively by using the code. This is done using the router service, which provides navigate and navigatebyUrl methods via which you can\n              perform route changes.\n              <br />\n\n              <h3>11. How to specify which route to navigate to in NavLink?</h3>\n              To specify which route to navigate to, use the to prop and pass the path name. The activeClassName prop will add an active class to the link if it’s currently active.\n              On the browser, the NavLink component is rendered as an tag with an href attribute value that was passed in the to prop.\n              <br />\n\n              <h3>12. When to use absolute path in navigate method?</h3>\n              Navigate Method always uses the absolute path unless you provide a starting point. <b>navigate.navigateByUrl</b> Use this method if you want to navigate to a URL by using\n              the absolute path. The first argument is a string containing the complete URL.\n              <br />\n\n              <h3>13. What is the use of EventEmitter in angular.</h3>\n                EventEmitter is used with @Output directive to emit custom events asynchronously and synchronously, and register \n                handlers for those events by subscribing to an instance.\n              <br />\n\n              <h3>15. What is the use of template in angular.</h3>\n              A template is a form of HTML that tells Angular how to render the component. Views are allowing to modify, show or\n              hide entire UI sections or pages as a unit.\n              <br />\n\n              <h3>16. What is the use of shared module in angular.</h3>\n              A Shared Module is used to organize a set of commonly used pieces into one module and export them to any other \n              module that imports the Share Module. This allows us\n              to selectively aggregate the reusable components.\n              <br />\n\n              <h3>17. What is provider in angular.</h3>\n              Providers are classes that create and manage service objects the first time that Angular needs to resolve a dependency. Providers is used to register the\n              classes to an angular module as a service. And then, this service classes can be used by other components during the itself creation phase in the module.\n              <br />\n\n              <h3>18. What is ng-template in Angular?</h3>\n              <ul>\n                <li>ng-template is an Angular element that is used for rendering HTML in a template. However, it is not rendered directly on DOM. If you include an ng-template tag\n                  to a template, the tag and the content inside it will be replaced by comment upon render.</li>\n                <br />\n                <li>If you add a ng-template tag to your template, it and everything inside it will be replaced by a comment. It might seem a bit useless, but it is rarely used\n                  alone. It can be for example used to define the else case of an *ngIf.</li>\n              </ul>\n              <br />\n\n              <h3>19. What is difference between package.json and package-lock.json.</h3>\n              <ul>\n                <li><b>package.json: </b>Records important metadata about the project.</li>\n                <li><b>package.lock.json: </b>Allows future devs to install the same dependencies in the project.</li>\n              </ul>\n              <br />\n\n              <h3>20. How do you handle error in Angular?</h3>\n              One traditional way of handling errors in Angular is to provide an ErrorHandler class. This class can be extended to create your own global error handler. This is\n              also a useful way to handle all errors that occur, but is mostly useful for tracking error logs.\n              <br />\n\n              <h3>21. Pass complex JSON via routerLink.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={routerLink}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>22. How does an Angular application work?</h3>\n                <ul>\n                  <li>Every Angular app consists of a file named angular.json. This file will contain all the configurations of the app. While building the app, the builder looks at this file to find the entry point of the application. </li>\n                  <li>Inside the build section, the main property of the options object defines the entry point of the application which in this case is main.ts.\n                      The main.ts file creates a browser environment for the application to run and along with this, it also calls a function called bootstrapModule, which bootstraps the application. These two steps are performed in the following order inside the main.ts file:</li>\n                  <b>platformBrowserDynamic().bootstrapModule(AppModule)</b>\n                  <br/>\n                  <li>In the above line of code, AppModule is getting bootstrapped.\n                      The AppModule is declared in the app.module.ts file. This module contains declarations of all the components.</li>\n                  <li>Now, AppComponent is getting bootstrapped.</li>\n                  <li>This component is defined in app.component.ts file. This file interacts with the webpage and serves data to it.</li>\n                </ul>\n                <br/>\n\n                Each component is declared with three properties:\n                <ul>\n                  <li><b>Selector: </b>used for accessing the component.</li>\n                  <li><b>Template/TemplateURL: </b>contains HTML of the component.</li>\n                  <li><b>StylesURL: </b>contains component-specific stylesheets.</li>\n                </ul>\n                After this, Angular calls the index.html file. This file consequently calls the root component that is app-root. The root component is defined in app.component.ts.\n                <br/>\n                This is how every angular application works.\n              <br/>\n\n              <h3>23. What are some of the advantages of Angular over other frameworks?</h3>\n                <ul>\n                  <li><b>Features that are provided out of the box: </b>Angular provides a number of built-in features like,routing, state management, rxjs library and http services straight out of the box. This means that one does not need to look for the above stated features separately. They are all provided with angular.</li>\n                  <li><b>Declarative UI: </b>Angular uses HTML to render the UI of an application. HTML is a declarative language and is much easier to use than JavaScript.</li>\n                  <li><b>Long-term Google support: </b>Google announced Long-term support for Angular. This means that Google plans to stick with Angular and further scale up its ecosystem.</li>\n                </ul>\n              <br/>\n\n              <h3>24. What is AOT compilation? What are the advantages of AOT?</h3>\n              Every Angular application consists of components and templates which the browser cannot understand. Therefore, all the Angular applications need to be compiled first before running inside the browser.\n              <br/>\n              Angular provides two types of compilation:\n              <ul>\n                <li>JIT(Just-in-Time) compilation</li>\n                <li>AOT(Ahead-of-Time) compilation</li>\n              </ul>\n              <br/>\n              The advantages of using AOT compilation are:\n              <ul>\n                <li>Since the application compiles before running inside the browser, the browser loads the executable code and renders the application immediately, which leads to faster rendering.</li>\n                <li>In AOT compilation, the compiler sends the external HTML and CSS files along with the application, eliminating separate AJAX requests for those source files, which leads to fewer ajax requests.</li>\n                <li>Developers can detect and handle errors during the building phase, which helps in minimizing errors.</li>\n                <li>The AOT compiler adds HTML and templates into the JS files before they run inside the browser. Due to this, there are no extra HTML files to be read, which provide better security to the application.</li>\n                <br/>\n                <li>By default, angular builds and serves the application using JIT compiler:\n                  <ul>\n                    <li>ng build</li>\n                    <li>ng serve</li>\n                  </ul>\n                </li>\n                <br/>\n                <li>For using AOT compiler following changes should be made:\n                  <ul>\n                    <li>ng build --aot</li>\n                    <li>ng serve --aot</li>\n                  </ul>\n                </li>\n              </ul>\n              <br/>\n\n              <h3>25. Explain Components, Modules and Services in Angular.</h3>\n                <ul>\n                  <li>In Angular, components are the basic building blocks, which control a part of the UI for any application.</li>\n                  <li>A component is defined using the @Component decorator. Every component consists of three parts, the template which loads the view for the component, a stylesheet which defines the look and feel for the component, and a class that contains the business logic for the component.</li>\n                </ul>\n                <br/>\n                <b>Modules: </b>A module is a place where we can group components, directives, services, and pipes. Module decides whether the components, directives, etc can be used by other modules, by exporting or hiding these elements. Every module is defined with a <b>@NgModule</b> decorator.\n                <br/>\n                <br/>\n                By default, modules are of two types:\n                <ul>\n                  <li><b>Root Module: </b></li>\n                  <li><b>Feature Module: </b>Every application can have only one root module whereas, it can have one or more feature modules.\n                  <ol>\n                    <li>A root module imports BrowserModule,</li>\n                    <li>whereas a feature module imports CommonModule.</li>\n                  </ol>\n                  </li>\n                </ul>\n                <br/>\n                <b>Services: </b>Services are objects which get instantiated only once during the lifetime of an application. The main objective of a service is to share data, functions with different components of an Angular application.\n                <br/>\n                A service is defined using a <b>@Injectable</b> decorator. A function defined inside a service can be invoked from any component or directive.\n              <br/>\n\n              <h3>26. Explain string interpolation and property binding in Angular.</h3>\n                <ul>\n                  <li>String interpolation and property binding are parts of data-binding in Angular.\n                      Data-binding is a feature in angular, which provides a way to communicate between the component(Model) and its view(HTML template).</li>\n                  <li>Data-binding can be done in two ways, one-way binding and two-way binding.\n                      In Angular, data from the component can be inserted inside the HTML template. In one-way binding, any changes in the component will directly reflect inside the HTML template but, vice-versa is not possible. Whereas, it is possible in two-way binding.</li>\n                  <li>String interpolation and property binding allow only one-way data binding.\n                      String interpolation uses the double curly braces to display data from the component. Angular automatically runs the expression written inside the curly braces.</li>\n                </ul>\n              <br/>\n\n              <h3>27. How are Angular expressions different from JavaScript expressions?</h3>\n                    The first and perhaps, the biggest difference is that Angular expressions allow us to write JavaScript in HTML which is not the case when it comes to JavaScript expressions.\n                    Next, Angular expressions are evaluated against a local scope object whereas JavaScript expressions against global window object. \n              <br/>\n\n              <h3>28. How are observables different from promises?</h3>\n              The first difference is that an Observable is lazy whereas a Promise is eager.\n              <br/>\n            <table>\n              <tr>\n                <th>Observables</th>\n                <th>Promises</th>\n              </tr>\n              <tr>\n                <td>Handle a sequence of asynchronous events over a period of time.</td>\n                <td>Deal with one asynchronous event at a time</td>\n              </tr>\n              <tr>\n                <td>Lazy. An observable is not called until we subscribe() to the observable</td>\n                <td>Not Lazy, Execute immediately after creation.</td>\n              </tr>\n              <tr>\n                <td>Can be cancelled by using the unsubscribe() method</td>\n                <td>Cannot be cancelled</td>\n              </tr>\n              <tr>\n                <td>Observable provides operators like map, forEach, filter, reduce, retry, retryWhen etc.</td>\n                <td></td>\n              </tr>\n            </table>\n              <br/>\n\n              <h3>29. Angular by default, uses client-side rendering for its applications. Can one make an angular application to render on the server-side?</h3>\n              Yes, angular provides a technology called Angular Universal, which can be used to render applications on the server-side.\n              <br/>\n              <b>The advantages of using Angular Universal are :</b>\n                <ul>\n                  <li>First time users can instantly see a view of the application. This benefits in providing better user experience.</li>\n                  <li>Many search engines expect pages in plain HTML, thus, Universal can make sure that your content is available on every search engine, which leads to better SEO.</li>\n                  <li>Any server-side rendered application loads faster since rendered pages are available to the browser sooner.</li>\n                </ul>\n              <br/>\n\n              <h3>30. How does one share data between components in Angular?</h3>\n              <ul>\n                <li>Parent to child using @Input decorator</li>\n                <li>Child to parent using @ViewChild decorator\n                  <ul><li><b>@ViewChild: </b>decorator is used to reference the child component as “child” property.</li></ul>\n                </li>\n                <li>Child to parent using @Output and EventEmitter</li>\n              </ul>\n              <br/>\n\n              <h3>31. what is dependency injection in simple terms?</h3>\n                    Let’s break it down, dependencies in angular are nothing but services which have a functionality. Functionality of a service, can be needed by various components and directives in an application. Angular provides a smooth mechanism by which we can inject these dependencies in our components and directives.\n                    So basically, we are just making dependencies which are injectable across all components of an application.\n              <br/>\n\n              <h3>32. What is TypeScript?</h3>\n              TypeScript is a superset of JavaScript that offers excellent consistency. It is highly recommended, as it provides some syntactic sugar and makes the code base more comfortable to understand and maintain.\n              <br/>\n\n              <h3>33. What are Annotations in Angular?</h3>\n              Annotations in Angular are used for creating an annotation array. They are the metadata set on the class that is used to reflect the Metadata library.\n              <br/>\n\n              <h3>34. What are filters in Angular? Name a few of them.</h3>\n              Filters are used to format an expression and present it to the user. They can be used in view templates, controllers, or services. Some inbuilt filters are as follows.\n              <ol>\n                <li>Date</li>\n                <li>filter</li>\n                <li>Json</li>\n                <li>limitTo</li>\n                <li>lowercase</li>\n              </ol>\n              <br/>\n\n              <h3>35. What do you understand by scope in Angular?</h3>\n              The scope in Angular binds the HTML, i.e., the view, and the JavaScript, i.e., the controller. It as expected is an object with the available methods and properties. The scope is available for both the view and the controller. When you make a controller in Angular, you pass the $scope object as an argument.\n              <br/>\n\n              <h3>36. What are Template statements?</h3>\n              Template statements are properties or methods used in HTML for responding to user events. With these template statements, the application that you create or are working on, can have the capability to engage users through actions such as submitting forms and displaying dynamic content.\n              <br/>\n\n              <h3>37. What is Bootstrap? How is it embedded into Angular?</h3>\n              Bootstrap is a powerful toolkit. It is a collection of HTML, CSS, and JavaScript tools for creating and building responsive web pages and web applications.\n              <br/>\n\n              <h3>38. What type of DOM does Angular implement?</h3>\n                <ul>\n                  <li>DOM (Document Object Model) treats an XML or HTML document as a tree structure in which each node is an object representing a part of the document.</li>\n                  <li>Angular uses the regular DOM. This updates the entire tree structure of HTML tags until it reaches the data to be updated. However, to ensure that the speed and performance are not affected, Angular implements Change Detection.</li>\n                </ul>\n              <br/>\n\n              <h3>39. What are the differences between Angular decorator and annotation?</h3>\n                <ul>\n                  <li>In Angular, decorators are design patterns that help in the modification or decoration of the respective classes without making changes in the actual source code.</li>\n                  <li>Annotations, on the other hand, are used in Angular to build an annotation array. They use the Reflective Metadata library and are a metadata set of the given class.</li>\n                </ul>\n              <br/>\n\n              <h3>40. What are modules in Angular?</h3>\n              A module is a logical boundary of our application. It is used to encapsulate code dealing with a specific aspect of the application, such as routing, HTTP, validation, etc. The main reason why modules are used is to enhance application composability. For example, if we wish to implement validation logic using different libraries, then for the one we have already implemented, we can create a new validation module and replace the current one with the new one, and our application would work just the same. In Angular, we create a module using the NgModule decorator.\n              <br/>\n\n              <h3>41. What is DOM?</h3>\n              It is responsible for representing the content of a web page and changes in the architecture of an application. Here, all the objects are organized in the form of a tree, and the document can easily be modified, manipulated, and accessed only with the help of APIs.\n              <br/>\n\n              <h3>42. What does subscribing mean in RxJS?</h3>\n              In RxJS, when using observables, we need to subscribe to an observable to use the data that flows through that observable. This data is generated from a publisher and is consumed by a subscriber. When we subscribe to an observable, we pass in a function for the data and another function for errors so that, in case there is some error, we can show some message or process the message in some way.\n              <br/>\n\n              <h3>43. What is Angular Router?</h3>\n                <ul>\n                  <li>Routing in a single-page frontend application is the task of responding to the changes in the URL made by adding and removing content from the application. This is a complicated task as we first need to intercept a request that changes the browser’s URL as we do not wish for the browser to reload. Then, we need to determine which content to remove and which content to add, and finally, we have to change the browser’s URL as well to show the user the current page they are on.</li>\n                  <li>As we can see, this can be very difficult to implement, especially in multiple applications. That is why Angular comes with a full routing solution for a single-page application. In this, we can define routes with matching components and let Angular handle the routing process.</li>\n                </ul>\n              <br/>\n              <h3>44. Explain Angular CLI.</h3>\n              Angular CLI is otherwise known as Angular command-line interface. Angular supports CLI tools that give professionals the ability to use them to add components, deploy them instantly, and perform testing and many such functions.\n              <br/>\n              HttpClient is an Angular module used for communicating with a backend service via the HTTP protocol. Usually, in frontend applications, for sending requests, we use the fetch API. However, the fetch API uses promises. Promises are useful, but they do not offer the rich functionalities that observables offer. This is why we use HttpClient in Angular as it returns the data as an observable, which we can subscribe to, unsubscribe to, and perform several operations on using operators. Observables can be converted to promises, and an observable can be created from a promise as well.              \n              <br/>\n\n              <h3>45. What is HttpClient, and what are its benefits?</h3>\n                Angular applications communicate with backend services over HTTP protocol using HttpClient which is based on top of the XMLHttpRequest interface.\n                <br/>\n                <b>advantages:</b>\n                <ul>\n                  <li>Contains testability features</li>\n                  <li>Provides typed request and response objects</li>\n                  <li>Intercept request and response</li>\n                  <li>Supports Observable APIs</li>\n                  <li>Supports streamlined error handling</li>\n                </ul>\n              <br/>\n\n              <h3>46. What is multicasting in Angular?</h3>\n              In Angular, when we are using the HttpClient module to communicate with a backend service and fetch some data, after fetching the data, we can broadcast it to multiple subscribers, all in one execution. This task of responding with data to multiple subscribers is called multicasting. It is specifically useful when we have multiple parts of our applications waiting for some data. To use multicasting, we need to use an RxJS subject. As observables are unicast, they do not allow multiple subscribers. However, subjects do allow multiple subscribers and are multicast. \n              <br/>\n\n              <h3>47. What is server-side rendering in Angular?</h3>\n              In a normal Angular application, the browser executes our application, and JavaScript handles all the user interactions. However, because of this, sometimes, if we have a large application with a big bundle size, our page’s load speed is slowed down quite a bit as it needs to download all the files, parse JavaScript, and then execute it. To overcome this slowness, we can use server-side rendering, which allows us to send a fully rendered page from the server that the browser can display and then let the JavaScript code take over any subsequent interactions from the user.\n              <br/>\n\n              <h3>48. What is Angular Universal?</h3>\n              Angular Universal is a package for enabling server-side rendering in Angular applications. We can easily make our application ready for server-side rendering using the Angular CLI. To do this, we need to type the following command:<br/>\n              <b>ng add @nguniversal/express-engine</b>\n              <br/>\n              <br/>\n              This allows our Angular application to work well with an ExpressJS web server that compiles HTML pages with Angular Universal based on client requests. This also creates the server-side app module, app.server.module.ts, in our application directory.\n              <br/>\n\n              <h3>49. What is the difference between interpolated content and the content assigned to the innerHTML property of a DOM element?</h3>\n              Angular interpolation happens when in our template we type some JavaScript expression inside double curly braces \n              <div style={titles}>\n                <PrismCode\n                  code={javaScriptExp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>. This is used to add dynamic content to a web page. However, we can do the same by assigning some dynamic content to the innerHTML property of a DOM element. The difference between the two is that, in Angular, the compiler always escapes the interpolated content, i.e., HTML is not interpreted, and the browser displays the code as it is with brackets and symbols, rather than displaying the output of the interpreted HTML. However, in innerHTML, if the content is HTML, then it is interpreted as the HTML code.\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(NgrxCounter));\n"]},"metadata":{},"sourceType":"module"}