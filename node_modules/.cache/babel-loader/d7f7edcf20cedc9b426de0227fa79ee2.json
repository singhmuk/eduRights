{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var randoms=\"\\nclass App extends Component {\\n  state = {\\n      min: 1,\\n      max: 10,\\n      number: 1\\n    }\\n\\n  componentDidMount() {\\n   this.setState({ number: this.generateNumber(this.state.min, this.state.max)})\\n  }\\n  \\n  minChange = (event) => {\\n    this.setState({ min: event.target.value})\\n  }\\n  \\n  maxChange = (event) => {\\n    this.setState({ max: event.target.value})\\n  }\\n  \\n  generateNumber = (min, max) => {\\n    return Math.floor(Math.random() * (max - min + 1) + min)\\n  }\\n  \\n  getInputs = () => {\\n    if(this.state.min > this.state.max ){\\n      const minTemp = this.state.min\\n      const maxTemp = this.state.max\\n      this.setState({ \\n        min: maxTemp,\\n        max: minTemp\\n      }, () =>\\n        this.setState({\\n          number: this.generateNumber(this.state.min, this.state.max)  \\n        })\\n      );\\n    } else {\\n      this.setState({\\n        number: this.generateNumber(this.state.min, this.state.max)  \\n      })\\n    }\\n  }\\n  \\n  render() {\\n    return (\\n      <div >\\n        <p>{ this.state.number }</p>\\n          <div id=\\\"inputs\\\">\\n            <input type=\\\"number\\\" min=\\\"-9999999999\\\" max=\\\"9999999999\\\" value={this.state.min} onChange={this.minChange} />\\n            <input type=\\\"number\\\" min=\\\"-9999999999\\\" max=\\\"9999999999\\\" value={this.state.max} onChange={this.maxChange} />\\n            <input type=\\\"submit\\\" value=\\\"Generate Number\\\" onClick={ this.getInputs }/>\\n          </div>\\n      </div>\\n    );\\n  }\\n}\".trim();var numberLib=\"\\nimport NumberFormat from 'react-number-format';\\n\\nfunction limit(val, max) {\\n    if (val.length === 1 && val[0] > max[0]) {\\n      val = '0' + val;\\n    }\\n  \\n    if (val.length === 2) {\\n      if (Number(val) === 0) {\\n        val = '01';\\n  \\n    } else if (val > max) {\\n        val = max;\\n      }\\n    }\\n  \\n    return val;\\n  }\\n  \\n  function cardExpiry(val) {\\n    let month = limit(val.substring(0, 2), '12');\\n    let date = limit(val.substring(2, 4), '31');\\n  \\n    return month + (date.length ? '/' + date : '');\\n  }\\n  \\n  class App extends Component {\\n    constructor() {\\n      super();\\n      this.state = {};\\n    }\\n    render(){\\n      return (\\n        <div>\\n              Prefix and thousand separator : Format currency in input\\n            <NumberFormat thousandSeparator={true} prefix={'$'} className=\\\"some\\\" inputmode=\\\"numeric\\\" />\\n          <br/>\\n              Custom thousand separator : Format currency in input\\n            <NumberFormat thousandSeparator={'.'} decimalSeparator={','} prefix={'$'} />\\n            <br/>\\n              Format with pattern : Format credit card in an input\\n            <NumberFormat format=\\\"#### #### #### ####\\\" />\\n          \\n              Custom format method  : Format credit card expiry time\\n            <NumberFormat format={cardExpiry}/>\\n            <br/>\\n              Format phone number\\n            <NumberFormat format=\\\"+1 (###) ###-####\\\" mask=\\\"_\\\"/>\\n            <br/>\\n          <NumberFormat thousandSeparator={true} prefix={'$'} decimalScale={2} />\\n        </div>\\n      )\\n    }\\n  }\".trim();var numberFor=\"\\nclass Currency extends Component {\\n  formatCurrency(x, decimalPlaces, decimalSeparator, groupSeparator) {\\n    var zeros = '00000000000';\\n    var parts = x.toString().split('.');\\n    parts[0] = parts[0].replace(/B(?=(d{3})+(?!d))/g, groupSeparator);\\n    \\n    if(parts.length > 1) {\\n      parts[1] = parts[1] + zeros;\\n      parts[1] = parts[1].substring(0, decimalPlaces);\\n    } \\n    else {\\n      parts[1] = zeros.substring(0, decimalPlaces);\\n    }\\n    return parts.join(decimalSeparator);\\n  }\\n\\n  render() {\\n    var amount = this.props.amount;    \\n    var decimalPlaces = this.props.decimalPlaces;\\n    var currencyCode = this.props.currencyCode;\\n    var decimalSeparator = ',';\\n    var groupSeparator = ' ';\\n    \\n    if(currencyCode.match(/USD|GBP|THB/i) !== null) {\\n      decimalSeparator = '.';\\n      groupSeparator = ',';\\n    }\\n    var amountFormatted = this.formatCurrency(amount, decimalPlaces, decimalSeparator, groupSeparator);\\n    if(currencyCode !== '') {\\n      amountFormatted = amountFormatted + ' ' + currencyCode;\\n    } \\n    return <span>{amountFormatted}</span>\\n  }\\n}\\n\\n\\nCurrency.defaultProps = {\\n  amount: '0.00000000',\\n  currencyCode: '',\\n  decimalPlaces: 2\\n};\\n\\n\\nclass App extends Component {\\n  render() {\\n    return <div>\\n      <p>\\n        <ul>\\n          <li>No amount: <Currency/></li>\\n          <li>Only amount: <Currency amount=\\\"1234.5\\\"/></li>\\n          <li>With currencyCode: <Currency amount=\\\"1234\\\" currencyCode=\\\"EUR\\\"/></li>\\n          <li>Use decimalPlaces if other than the default 2: <Currency amount=\\\"1234\\\" decimalPlaces=\\\"3\\\"/></li>\\n          <li>USD/UK decimal and group separator: <Currency amount=\\\"1234\\\" currencyCode=\\\"USD\\\"/></li>\\n        </ul>\\n      </p>  \\n    </div>;\\n  }\\n}\".trim();var converts=\"\\n// func.js\\nexport const toBinary = (number) => {\\n  let result = 0;\\n  let i = 0;\\n\\n\\n  while(number >= 1) {                                                  // dividing number by 2 until we reach 1 or below.\\n    let reminder = number % 2;\\n    if (reminder) {\\n \\n                            //If the reminder is 1 we add it to the power of 10 to get the  place value. ie. 100, 1000 ... \\n      result += Math.pow(10, i);\\n    }\\n    \\n    i++;\\n    number = Math.floor(number / 2);                                  //Reduce the number by dividing it by 2.\\n  }\\n\\n  return result;\\n}\\n\\n\\nexport const toDecimal = (number) => {\\n  let result = 0;\\n  let i = 0;\\n\\n                                                  // Loop through the number by dividing it by 10 until we reach 0 or below.\\n  while(number > 0) {\\n    let reminder = number % 10;\\n    if (reminder) {\\n      result += Math.pow(2, i);                   //Get the last digit of the binary number and if it is 1,\\n    }                                             //then add it to the result by 2 to the power of the i.\\n\\n    i++;\\n    number = Math.floor(number / 10);\\n  }\\n  return result;\\n}\\n\\n\\n// converts.js\\nimport { toBinary, toDecimal } from './func';\\n\\n\\nconst App = () => {\\n  const [binary, setBinary] = useState('');\\n  const [decimal, setDecimal] = useState('');\\n  const [binaryError, setBinaryError] = useState(false);\\n  const [numberError, setNumberError] = useState(false);\\n\\n  const handleBinaryChange = (e) => {\\n    const binaryValue = e.target.value;\\n    setNumberError(false);\\n    if (isNaN(binaryValue)) {\\n      setNumberError(true);\\n      return;\\n    }\\n    \\n    setBinaryError(!/^[0-1]+$/g.test(binaryValue) && binaryValue !== '');\\n    if (binaryValue !== '') {\\n      setBinary(binaryValue);\\n      setDecimal(toDecimal(binaryValue));\\n    } else {\\n      setBinary('');\\n      setDecimal('');\\n    }\\n  };\\n\\n  const handleDecimalChange = (e) => {\\n    const decimalValue = e.target.value;\\n    setNumberError(false);\\n    if (isNaN(decimalValue)) {\\n      setNumberError(true);\\n      return;\\n    }\\n    if (decimalValue !== '') {\\n      setDecimal(decimalValue);\\n      setBinary(toBinary(decimalValue));\\n    } else {\\n      setDecimal('');\\n      setBinary('');\\n    }\\n  };\\n\\n  const handleSubmit = (event) => {\\n    event.preventDefault();\\n    setDecimal(toDecimal(binary));\\n  };\\n\\n  let binaryErrorMessage = 'Enter only Binary value (either 0 or 1)';\\n  let numberErrorMessage = 'Enter only Numbers';\\n\\n  return (\\n    <div className=\\\"converter\\\">\\n      <form onSubmit={handleSubmit}>\\n        <input\\n          type=\\\"text\\\"\\n          placeholder=\\\"Binary\\\"\\n          onChange={handleBinaryChange}\\n          value={binary}\\n        />\\n        {/* <input type=\\\"submit\\\" value=\\\"Convert\\\" disabled={binaryError} /> */}\\n        <input type=\\\"text\\\" placeholder=\\\"Decimal\\\" onChange={handleDecimalChange} value={binaryError ? '' : decimal}\\n          disabled={binaryError}\\n        />\\n        <span className={error-msg '$'{binaryError || numberError ? 'fadeIn' : ''} }>\\n          {binaryError && binaryErrorMessage}\\n          {numberError && numberErrorMessage}\\n        </span>\\n      </form>\\n    </div>\\n  );\\n};\\n\".trim();var pureComp=\"\\n//1 form validation\\nconst initialState = {\\n  name: '',\\n  email: '',\\n  password: '',\\n  nameError: '',\\n  emailError: '',\\n  passwordError: '',\\n}\\n\\nclass App extends Component{\\n  state = initialState;\\n  \\n  handleChange = (e) => {\\n     const isCheched = e.target.type === \\\"checkText\\\";\\n     this.setState({\\n        [e.target.name]: isCheched ? e.target.checked : e.target.value\\n     })\\n  };\\n  \\n  validate = () => {\\n     let nameError = '';\\n     let emailError = '';\\n     let passwordError = '';\\n     \\n     if(!this.state.name){\\n        nameError = \\\"Name Canot be blank\\\";\\n     }\\n     \\n     if(!this.state.email.includes(\\\"@\\\")){\\n        emailError = \\\"Invalid email\\\";\\n     }\\n     \\n     if(!this.state.password){\\n        passwordError = \\\"Password not be too small\\\";\\n     }\\n     \\n     if(emailError || nameError || passwordError){\\n        this.setState({emailError, nameError, passwordError})\\n        return false;\\n     }\\n     return true;\\n  }\\n  \\n  handleSubmit = (e) => {\\n     e.preventDefault();\\n     const isValid = this.validate();\\n     if(isValid){\\n     console.log(this.state);\\n     this.setState({initialState});\\n     }\\n  }\\n  \\n  render(){\\n     return(\\n        <>\\n           <form onSubmit={this.handleSubmit}>\\n              <input name=\\\"name\\\" value={this.state.name} onChange={this.handleChange} />\\n              <div style={{color:'red'}}>{this.state.nameError}</div>\\n              <br/>\\n              <input name=\\\"email\\\" value={this.state.email} onChange={this.handleChange} />\\n              <div style={{color:'red'}}>{this.state.emailError}</div>\\n              <br/>\\n              <input name=\\\"password\\\" value={this.state.password} onChange={this.handleChange} />\\n              <div style={{color:'red'}}>{this.state.passwordError}</div>\\n              <br/>\\n              <br/>\\n              <button type=\\\"submit\\\">Submit</button>\\n           </form>\\n        </>\\n     );\\n  }\\n}\\n\\n\\n//2 Verify on input\\nimport validateInput from './validateInput';\\n\\n\\nclass Props extends Component {\\n  state = {\\n      name: \\\"\\\",\\n      nameError: \\\"\\\",\\n      email: \\\"\\\",\\n      emailError: \\\"\\\"\\n      };\\n\\n  handleInputChange = e => {\\n        let input = e.target;\\n        let errors = validateInput(input);\\n        this.setState({ ...this.state, [input.name]: input.value, ...errors });\\n    };\\n\\n    onBlur = e => {\\n      let input = e.target;\\n      this.setState({ ...this.state, [input.name]: input.value });\\n\\n      setTimeout(() => { \\n          if (!input.contains(document.activeElement)) {\\n            let errors = validateInput(input); \\n            this.setState({ ...this.state, ...errors });\\n          }\\n      }, 0);\\n  };\\n\\n  handleSubmit = (e) => {\\n      e.preventDefault();\\n\\n      console.log(e.target.name.value);\\n      let errors = validateInput(e.target.name, e.target.email); \\n      this.setState({ ...this.state, ...errors }); \\n\\n      let nameError = this.state.nameError;\\n      let emailError = this.state.emailError;\\n\\n      if (nameError !== \\\"\\\" || typeof nameError !== 'undefined'  || emailError !== \\\"\\\" || typeof emailError !== 'undefined')\\n       {}\\n  }\\n\\n  render() {\\n      return (\\n          <div>\\n            <form onSubmit={this.handleSubmit}>\\n              <div> \\n                <label htmlFor=\\\"name\\\">Name</label>\\n                <p>{this.state.nameError}</p>\\n                <input type=\\\"text\\\" value={this.state.name} name=\\\"name\\\" onChange={this.handleInputChange} \\n                  onBlur={this.onBlur} placeholder=\\\"bob\\\" data-validation-type=\\\"name\\\" required />\\n              </div>\\n              <div>\\n                <label htmlFor=\\\"email\\\">Email</label>\\n                <p>{this.state.emailError}</p>\\n                <input type=\\\"email\\\" value={this.state.email} name=\\\"email\\\" onChange={this.handleInputChange} \\n                  onBlur={this.onBlur} placeholder=\\\"bob@bobsplace.com\\\" data-validation-type=\\\"email\\\" required />\\n              </div>\\n\\n                <p>Recieve notifications by (wip)</p>\\n\\n                <label>\\n                    <input onChange={this.handleInputChange} name=\\\"notificationRadio\\\" type=\\\"radio\\\" value=\\\"email\\\" />\\n                    Email\\n                </label>\\n\\n                <label>\\n                    <input onChange={this.handleInputChange} name=\\\"notificationRadio\\\" type=\\\"radio\\\" value=\\\"text\\\" />\\n                    Text\\n                </label>\\n\\n                <button type=\\\"submit\\\">Sumbit</button>\\n\\n                <table>\\n                    <tbody>\\n                        <tr>\\n                            <td colSpan=\\\"2\\\"> <b>current state</b> </td>\\n                        </tr>\\n                        <tr>\\n                            <td>name</td>\\n                            <td> {this.state.name}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>nameError</td>\\n                            <td> {this.state.nameError}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>email</td>\\n                            <td> {this.state.email}</td>\\n                        </tr>\\n                        <tr>\\n                            <td>emailError</td>\\n                            <td> {this.state.emailError}</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </form>\\n          </div>\\n      );\\n  }\\n}\\n\\n\\n//validateInput.js\\nvar emailRegex = /^S+@S+.S+$/;\\nvar nameRegex = /^[a-zA-Z]/;\\nvar mobileRegex = /^07[0-9]{9,10}$/;\\n\\n\\nfunction validateInput() {\\n    let errors = {};\\n    \\n    for (var i = 0 ; i < arguments.length ; i += 1) {       \\n        let input = arguments[i];\\n        let validationType = input.getAttribute(\\\"data-validation-type\\\");\\n        if (validationType === null) validationType = input.type;\\n        let errorName = input.name + \\\"Error\\\";\\n        console.log(\\\"input validation attr:\\\", input.getAttribute(\\\"data-validation-type\\\"), \\\"input.value:\\\", input.value);\\n\\n        errors[errorName] = \\\"\\\";\\n\\n        if (input.value === \\\"\\\" || input.value.length === 0) {\\n            errors[errorName] = \\\"please fill this in\\\";\\n        } \\n        else if (validationType === \\\"name\\\") {\\n            if (input.value.match(nameRegex) === null || input.value.length < 3) {\\n                errors[errorName] = \\\"Name must be at least 3 characters\\\";\\n            }\\n        } \\n        else if (validationType === \\\"email\\\") {\\n            if (input.value.match(emailRegex) === null) {\\n                errors[errorName] = \\\"Email must be a valid email\\\";\\n            }\\n        }\\n    }\\n\\n    return errors;\\n}\".trim();var steps=\"\\nclass App extends Component {\\n   state = { inputValue: \\\"\\\" };\\n \\n handleUpdate = (e) => {\\n   if (e.target.validity.valid) {\\n     this.setState({ inputValue: e.target.value }); \\n   }\\n }\\n \\n reset = () => {\\n   this.setState({ inputValue: \\\"\\\" }); \\n }\\n \\n render() {\\n   return (\\n     <div>\\n       <input type=\\\"number\\\" value={this.state.inputValue} onChange={this.handleUpdate} step=\\\"any\\\" />\\n       <button onClick={this.reset}>reset</button>\\n     </div>\\n   )\\n }  \\n }\".trim();var dateTime=\"\\n //1\\n function date_time() {\\n   return Date();\\n }\\n \\n //2\\n function formatDate(dayOfWeek, day, month, year) {\\n   var daysOfWeek = [\\\"Sun\\\",\\\"Mon\\\",\\\"Tue\\\",\\\"Wed\\\",\\\"Thu\\\",\\\"Fri\\\",\\\"Sat\\\"];\\n   var months = [\\\"Jan\\\",\\\"Feb\\\",\\\"Mar\\\",\\\"Apr\\\",\\\"May\\\",\\\"Jun\\\",\\\"Jul\\\",\\\"Aug\\\",\\\"Sep\\\",\\\"Oct\\\",\\\"Nov\\\",\\\"Dec\\\"];\\n       return daysOfWeek[dayOfWeek] + \\\" \\\" + months[month] + \\\" \\\" + day + \\\" \\\" + year; }\\n \\n   var birthday = new Date(Date.UTC(2000,0,1)); \\n   var birthDay = formatDate(birthday.getUTCDay(), birthday.getUTCDate(),     \\n   birthday.getUTCMonth(), birthday.getUTCFullYear())\\n \\n \\n export { date_time, birthDay }\".trim();var NumberForm=/*#__PURE__*/function(_Component){_inherits(NumberForm,_Component);function NumberForm(){_classCallCheck(this,NumberForm);return _possibleConstructorReturn(this,_getPrototypeOf(NumberForm).apply(this,arguments));}_createClass(NumberForm,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Random Number\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:randoms,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Number format\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:numberLib,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Number format without lib\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:numberFor,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. Convert Binary to Decimal\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:converts,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. Form Validation\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:pureComp,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. Step Input\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:steps,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"7. Date_time\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:dateTime,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return NumberForm;}(Component);export default withStyles(styles)(NumberForm);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/numberFormats.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","randoms","trim","numberLib","numberFor","converts","pureComp","steps","dateTime","NumberForm","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst randoms = `\nclass App extends Component {\n  state = {\n      min: 1,\n      max: 10,\n      number: 1\n    }\n\n  componentDidMount() {\n   this.setState({ number: this.generateNumber(this.state.min, this.state.max)})\n  }\n  \n  minChange = (event) => {\n    this.setState({ min: event.target.value})\n  }\n  \n  maxChange = (event) => {\n    this.setState({ max: event.target.value})\n  }\n  \n  generateNumber = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n  }\n  \n  getInputs = () => {\n    if(this.state.min > this.state.max ){\n      const minTemp = this.state.min\n      const maxTemp = this.state.max\n      this.setState({ \n        min: maxTemp,\n        max: minTemp\n      }, () =>\n        this.setState({\n          number: this.generateNumber(this.state.min, this.state.max)  \n        })\n      );\n    } else {\n      this.setState({\n        number: this.generateNumber(this.state.min, this.state.max)  \n      })\n    }\n  }\n  \n  render() {\n    return (\n      <div >\n        <p>{ this.state.number }</p>\n          <div id=\"inputs\">\n            <input type=\"number\" min=\"-9999999999\" max=\"9999999999\" value={this.state.min} onChange={this.minChange} />\n            <input type=\"number\" min=\"-9999999999\" max=\"9999999999\" value={this.state.max} onChange={this.maxChange} />\n            <input type=\"submit\" value=\"Generate Number\" onClick={ this.getInputs }/>\n          </div>\n      </div>\n    );\n  }\n}`.trim();\n\nconst numberLib = `\nimport NumberFormat from 'react-number-format';\n\nfunction limit(val, max) {\n    if (val.length === 1 && val[0] > max[0]) {\n      val = '0' + val;\n    }\n  \n    if (val.length === 2) {\n      if (Number(val) === 0) {\n        val = '01';\n  \n    } else if (val > max) {\n        val = max;\n      }\n    }\n  \n    return val;\n  }\n  \n  function cardExpiry(val) {\n    let month = limit(val.substring(0, 2), '12');\n    let date = limit(val.substring(2, 4), '31');\n  \n    return month + (date.length ? '/' + date : '');\n  }\n  \n  class App extends Component {\n    constructor() {\n      super();\n      this.state = {};\n    }\n    render(){\n      return (\n        <div>\n              Prefix and thousand separator : Format currency in input\n            <NumberFormat thousandSeparator={true} prefix={'$'} className=\"some\" inputmode=\"numeric\" />\n          <br/>\n              Custom thousand separator : Format currency in input\n            <NumberFormat thousandSeparator={'.'} decimalSeparator={','} prefix={'$'} />\n            <br/>\n              Format with pattern : Format credit card in an input\n            <NumberFormat format=\"#### #### #### ####\" />\n          \n              Custom format method  : Format credit card expiry time\n            <NumberFormat format={cardExpiry}/>\n            <br/>\n              Format phone number\n            <NumberFormat format=\"+1 (###) ###-####\" mask=\"_\"/>\n            <br/>\n          <NumberFormat thousandSeparator={true} prefix={'$'} decimalScale={2} />\n        </div>\n      )\n    }\n  }`.trim();\n\nconst numberFor = `\nclass Currency extends Component {\n  formatCurrency(x, decimalPlaces, decimalSeparator, groupSeparator) {\n    var zeros = '00000000000';\n    var parts = x.toString().split('.');\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, groupSeparator);\n    \n    if(parts.length > 1) {\n      parts[1] = parts[1] + zeros;\n      parts[1] = parts[1].substring(0, decimalPlaces);\n    } \n    else {\n      parts[1] = zeros.substring(0, decimalPlaces);\n    }\n    return parts.join(decimalSeparator);\n  }\n\n  render() {\n    var amount = this.props.amount;    \n    var decimalPlaces = this.props.decimalPlaces;\n    var currencyCode = this.props.currencyCode;\n    var decimalSeparator = ',';\n    var groupSeparator = ' ';\n    \n    if(currencyCode.match(/USD|GBP|THB/i) !== null) {\n      decimalSeparator = '.';\n      groupSeparator = ',';\n    }\n    var amountFormatted = this.formatCurrency(amount, decimalPlaces, decimalSeparator, groupSeparator);\n    if(currencyCode !== '') {\n      amountFormatted = amountFormatted + ' ' + currencyCode;\n    } \n    return <span>{amountFormatted}</span>\n  }\n}\n\n\nCurrency.defaultProps = {\n  amount: '0.00000000',\n  currencyCode: '',\n  decimalPlaces: 2\n};\n\n\nclass App extends Component {\n  render() {\n    return <div>\n      <p>\n        <ul>\n          <li>No amount: <Currency/></li>\n          <li>Only amount: <Currency amount=\"1234.5\"/></li>\n          <li>With currencyCode: <Currency amount=\"1234\" currencyCode=\"EUR\"/></li>\n          <li>Use decimalPlaces if other than the default 2: <Currency amount=\"1234\" decimalPlaces=\"3\"/></li>\n          <li>USD/UK decimal and group separator: <Currency amount=\"1234\" currencyCode=\"USD\"/></li>\n        </ul>\n      </p>  \n    </div>;\n  }\n}`.trim();\n\nconst converts = `\n// func.js\nexport const toBinary = (number) => {\n  let result = 0;\n  let i = 0;\n\n\n  while(number >= 1) {                                                  // dividing number by 2 until we reach 1 or below.\n    let reminder = number % 2;\n    if (reminder) {\n \n                            //If the reminder is 1 we add it to the power of 10 to get the  place value. ie. 100, 1000 ... \n      result += Math.pow(10, i);\n    }\n    \n    i++;\n    number = Math.floor(number / 2);                                  //Reduce the number by dividing it by 2.\n  }\n\n  return result;\n}\n\n\nexport const toDecimal = (number) => {\n  let result = 0;\n  let i = 0;\n\n                                                  // Loop through the number by dividing it by 10 until we reach 0 or below.\n  while(number > 0) {\n    let reminder = number % 10;\n    if (reminder) {\n      result += Math.pow(2, i);                   //Get the last digit of the binary number and if it is 1,\n    }                                             //then add it to the result by 2 to the power of the i.\n\n    i++;\n    number = Math.floor(number / 10);\n  }\n  return result;\n}\n\n\n// converts.js\nimport { toBinary, toDecimal } from './func';\n\n\nconst App = () => {\n  const [binary, setBinary] = useState('');\n  const [decimal, setDecimal] = useState('');\n  const [binaryError, setBinaryError] = useState(false);\n  const [numberError, setNumberError] = useState(false);\n\n  const handleBinaryChange = (e) => {\n    const binaryValue = e.target.value;\n    setNumberError(false);\n    if (isNaN(binaryValue)) {\n      setNumberError(true);\n      return;\n    }\n    \n    setBinaryError(!/^[0-1]+$/g.test(binaryValue) && binaryValue !== '');\n    if (binaryValue !== '') {\n      setBinary(binaryValue);\n      setDecimal(toDecimal(binaryValue));\n    } else {\n      setBinary('');\n      setDecimal('');\n    }\n  };\n\n  const handleDecimalChange = (e) => {\n    const decimalValue = e.target.value;\n    setNumberError(false);\n    if (isNaN(decimalValue)) {\n      setNumberError(true);\n      return;\n    }\n    if (decimalValue !== '') {\n      setDecimal(decimalValue);\n      setBinary(toBinary(decimalValue));\n    } else {\n      setDecimal('');\n      setBinary('');\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setDecimal(toDecimal(binary));\n  };\n\n  let binaryErrorMessage = 'Enter only Binary value (either 0 or 1)';\n  let numberErrorMessage = 'Enter only Numbers';\n\n  return (\n    <div className=\"converter\">\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Binary\"\n          onChange={handleBinaryChange}\n          value={binary}\n        />\n        {/* <input type=\"submit\" value=\"Convert\" disabled={binaryError} /> */}\n        <input type=\"text\" placeholder=\"Decimal\" onChange={handleDecimalChange} value={binaryError ? '' : decimal}\n          disabled={binaryError}\n        />\n        <span className={error-msg '$'{binaryError || numberError ? 'fadeIn' : ''} }>\n          {binaryError && binaryErrorMessage}\n          {numberError && numberErrorMessage}\n        </span>\n      </form>\n    </div>\n  );\n};\n`.trim();\n\nconst pureComp = `\n//1 form validation\nconst initialState = {\n  name: '',\n  email: '',\n  password: '',\n  nameError: '',\n  emailError: '',\n  passwordError: '',\n}\n\nclass App extends Component{\n  state = initialState;\n  \n  handleChange = (e) => {\n     const isCheched = e.target.type === \"checkText\";\n     this.setState({\n        [e.target.name]: isCheched ? e.target.checked : e.target.value\n     })\n  };\n  \n  validate = () => {\n     let nameError = '';\n     let emailError = '';\n     let passwordError = '';\n     \n     if(!this.state.name){\n        nameError = \"Name Canot be blank\";\n     }\n     \n     if(!this.state.email.includes(\"@\")){\n        emailError = \"Invalid email\";\n     }\n     \n     if(!this.state.password){\n        passwordError = \"Password not be too small\";\n     }\n     \n     if(emailError || nameError || passwordError){\n        this.setState({emailError, nameError, passwordError})\n        return false;\n     }\n     return true;\n  }\n  \n  handleSubmit = (e) => {\n     e.preventDefault();\n     const isValid = this.validate();\n     if(isValid){\n     console.log(this.state);\n     this.setState({initialState});\n     }\n  }\n  \n  render(){\n     return(\n        <>\n           <form onSubmit={this.handleSubmit}>\n              <input name=\"name\" value={this.state.name} onChange={this.handleChange} />\n              <div style={{color:'red'}}>{this.state.nameError}</div>\n              <br/>\n              <input name=\"email\" value={this.state.email} onChange={this.handleChange} />\n              <div style={{color:'red'}}>{this.state.emailError}</div>\n              <br/>\n              <input name=\"password\" value={this.state.password} onChange={this.handleChange} />\n              <div style={{color:'red'}}>{this.state.passwordError}</div>\n              <br/>\n              <br/>\n              <button type=\"submit\">Submit</button>\n           </form>\n        </>\n     );\n  }\n}\n\n\n//2 Verify on input\nimport validateInput from './validateInput';\n\n\nclass Props extends Component {\n  state = {\n      name: \"\",\n      nameError: \"\",\n      email: \"\",\n      emailError: \"\"\n      };\n\n  handleInputChange = e => {\n        let input = e.target;\n        let errors = validateInput(input);\n        this.setState({ ...this.state, [input.name]: input.value, ...errors });\n    };\n\n    onBlur = e => {\n      let input = e.target;\n      this.setState({ ...this.state, [input.name]: input.value });\n\n      setTimeout(() => { \n          if (!input.contains(document.activeElement)) {\n            let errors = validateInput(input); \n            this.setState({ ...this.state, ...errors });\n          }\n      }, 0);\n  };\n\n  handleSubmit = (e) => {\n      e.preventDefault();\n\n      console.log(e.target.name.value);\n      let errors = validateInput(e.target.name, e.target.email); \n      this.setState({ ...this.state, ...errors }); \n\n      let nameError = this.state.nameError;\n      let emailError = this.state.emailError;\n\n      if (nameError !== \"\" || typeof nameError !== 'undefined'  || emailError !== \"\" || typeof emailError !== 'undefined')\n       {}\n  }\n\n  render() {\n      return (\n          <div>\n            <form onSubmit={this.handleSubmit}>\n              <div> \n                <label htmlFor=\"name\">Name</label>\n                <p>{this.state.nameError}</p>\n                <input type=\"text\" value={this.state.name} name=\"name\" onChange={this.handleInputChange} \n                  onBlur={this.onBlur} placeholder=\"bob\" data-validation-type=\"name\" required />\n              </div>\n              <div>\n                <label htmlFor=\"email\">Email</label>\n                <p>{this.state.emailError}</p>\n                <input type=\"email\" value={this.state.email} name=\"email\" onChange={this.handleInputChange} \n                  onBlur={this.onBlur} placeholder=\"bob@bobsplace.com\" data-validation-type=\"email\" required />\n              </div>\n\n                <p>Recieve notifications by (wip)</p>\n\n                <label>\n                    <input onChange={this.handleInputChange} name=\"notificationRadio\" type=\"radio\" value=\"email\" />\n                    Email\n                </label>\n\n                <label>\n                    <input onChange={this.handleInputChange} name=\"notificationRadio\" type=\"radio\" value=\"text\" />\n                    Text\n                </label>\n\n                <button type=\"submit\">Sumbit</button>\n\n                <table>\n                    <tbody>\n                        <tr>\n                            <td colSpan=\"2\"> <b>current state</b> </td>\n                        </tr>\n                        <tr>\n                            <td>name</td>\n                            <td> {this.state.name}</td>\n                        </tr>\n                        <tr>\n                            <td>nameError</td>\n                            <td> {this.state.nameError}</td>\n                        </tr>\n                        <tr>\n                            <td>email</td>\n                            <td> {this.state.email}</td>\n                        </tr>\n                        <tr>\n                            <td>emailError</td>\n                            <td> {this.state.emailError}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </form>\n          </div>\n      );\n  }\n}\n\n\n//validateInput.js\nvar emailRegex = /^S+@S+.S+$/;\nvar nameRegex = /^[a-zA-Z]/;\nvar mobileRegex = /^07[0-9]{9,10}$/;\n\n\nfunction validateInput() {\n    let errors = {};\n    \n    for (var i = 0 ; i < arguments.length ; i += 1) {       \n        let input = arguments[i];\n        let validationType = input.getAttribute(\"data-validation-type\");\n        if (validationType === null) validationType = input.type;\n        let errorName = input.name + \"Error\";\n        console.log(\"input validation attr:\", input.getAttribute(\"data-validation-type\"), \"input.value:\", input.value);\n\n        errors[errorName] = \"\";\n\n        if (input.value === \"\" || input.value.length === 0) {\n            errors[errorName] = \"please fill this in\";\n        } \n        else if (validationType === \"name\") {\n            if (input.value.match(nameRegex) === null || input.value.length < 3) {\n                errors[errorName] = \"Name must be at least 3 characters\";\n            }\n        } \n        else if (validationType === \"email\") {\n            if (input.value.match(emailRegex) === null) {\n                errors[errorName] = \"Email must be a valid email\";\n            }\n        }\n    }\n\n    return errors;\n}`.trim();\n\nconst steps = `\nclass App extends Component {\n   state = { inputValue: \"\" };\n \n handleUpdate = (e) => {\n   if (e.target.validity.valid) {\n     this.setState({ inputValue: e.target.value }); \n   }\n }\n \n reset = () => {\n   this.setState({ inputValue: \"\" }); \n }\n \n render() {\n   return (\n     <div>\n       <input type=\"number\" value={this.state.inputValue} onChange={this.handleUpdate} step=\"any\" />\n       <button onClick={this.reset}>reset</button>\n     </div>\n   )\n }  \n }`.trim();\n\nconst dateTime = `\n //1\n function date_time() {\n   return Date();\n }\n \n //2\n function formatDate(dayOfWeek, day, month, year) {\n   var daysOfWeek = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"];\n   var months = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];\n       return daysOfWeek[dayOfWeek] + \" \" + months[month] + \" \" + day + \" \" + year; }\n \n   var birthday = new Date(Date.UTC(2000,0,1)); \n   var birthDay = formatDate(birthday.getUTCDay(), birthday.getUTCDate(),     \n   birthday.getUTCMonth(), birthday.getUTCFullYear())\n \n \n export { date_time, birthDay }`.trim();\n\nclass NumberForm extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Random Number</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={randoms}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>2. Number format</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={numberLib}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>3. Number format without lib</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={numberFor}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>4. Convert Binary to Decimal</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={converts}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. Form Validation</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={pureComp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Step Input</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={steps}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <br />\n              <h3>7. Date_time</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={dateTime}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(NumberForm));\n"]},"metadata":{},"sourceType":"module"}