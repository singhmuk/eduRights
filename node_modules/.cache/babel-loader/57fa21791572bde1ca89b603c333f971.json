{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var starSig=\"\\n// *\\n// **\\n// ***\\nfunction star(){\\n  var start=\\\"\\\";\\n  for(let i=0; i<3; i++){\\n    for(let j=1; j<=(i+1); j++){\\n      start += \\\"*\\\"\\n    }\\n    start +=\\\"newLine\\\";\\n  }\\n  console.log(start);\\n}\\nstar();\\n\\n//   *\\n//  **\\n// ***\\nfunction star(){\\n  let n = 3;\\n  let str = \\\"\\\";\\n  for (let i = 1; i <= n; i++){\\n    for (let j=0; j<(n-i); j++){\\n      str += \\\" \\\";\\n    }\\n    for (let k=0; k<i; k++){\\n      str += \\\"*\\\";\\n    }\\n    str += \\\"newLine\\\";\\n  }\\nconsole.log(str);\\n}\\nstar();\\n\\n// ***\\n// **\\n// *\\nfunction star(){\\n  var start=\\\"\\\";\\n  for(let i=3; i>0; i--){\\n    for(let j=(i+1); j>1; j--){\\n      start += \\\"*\\\"\\n    }\\n    start +=\\\"newLine\\\";\\n  }\\n  console.log(start);\\n}\\nstar();\\n\\n// ***\\n//  **\\n//   *\\nfunction star(){\\n  let n = 3;\\n  let str = \\\"\\\";\\n  for (let i = n; i >= 1; i--){\\n    for (let j=0; j<(n-i); j++){\\n      str += \\\" \\\";\\n    }\\n    for (let k=0; k<i; k++){\\n      str += \\\"*\\\";\\n    }\\n    str += \\\"newLine\\\";\\n  }\\nconsole.log(str);\\n}\\nstar();\\n\".trim();var Pyramid=\" \\n// Upside pyramid.\\nfunction pyraminds() {\\n  let i, j, k, str = \\\"\\\";\\n\\n  for (i=0; i<5; i++) {\\n    for (j=1; j<(5 - i); j++) {\\n      str += \\\" \\\";\\n    }\\n    for (k=1; k<=(2 * i +1); k++) {\\n      str += \\\"*\\\";\\n    }\\n\\n    str += 'newLine';\\n  }\\n  console.log(str)\\n}\\n\\npyraminds();\\n\\n\\n// downside pyramid.\\nfor (i=1; i<5; i++) {\\n  for (j=0; j<i; j++) {\\n    str += \\\" \\\";\\n  }\\n  for (k=(5 - i)*2; k>1; k--) {\\n    str += \\\"*\\\";\\n  }\\n\\n  str += 'newLine';\\n}\\nconsole.log(str)\\n \".trim();var insersonSort=\"\\nvar insersionSort = function(array){\\n  for(var i =1; i< array.length; i++){\\n    for(var j=0;j<i;j++){\\n      if(array[i] < array[j]){\\n        var temp = array.splice(i, 1);\\n        array.splice(j,0,temp[0]);\\n      }\\n    }\\n  }\\n  \\nconsole.log(array)\\nreturn array;\\n}\\n\\ninsersionSort([3,5,1,9,6,2,1])\\n\".trim();var mergSort=\"\\nfunction mergeSort(arr){\\n    if(arr.length < 2) return arr;\\n    var middle = Math.floor(arr.length/2);\\n    var left = arr.slice(0, middle);\\n    var right = arr.slice(middle, arr.length);\\n    return merge(mergeSort(left), mergeSort(right));\\n }\\n \\n function merge(left, right){\\n  var result = [];\\n    while(left.length && right.length){\\n      if(left[0] == right[0]){\\n        result.push(left.shift());\\n      }\\n  else{\\n    result.push(right.shift());}\\n  }\\n  \\n  while(left.length) result.push(left.shift());\\n  while(right.length) result.push(right.shift());\\n  console.log(result)\\n  return result;\\n }\\n mergeSort([3,2,1])\".trim();var quicksort=\"\\nfunction QuickSort(arr){\\n    if(arr.length <= 1) return arr;\\n        var pivot = arr[arr.length -1];\\n        var left = [];\\n        var right = [];\\n        for(var i=0;i<arr.length-1;i++){\\n        if(arr[i] < pivot){\\n        left.push(arr[i])\\n      }\\n    else right.push(arr[i])\\n    }\\n    return [...QuickSort(left), pivot, ...QuickSort(right)]\\n }\\n console.log(QuickSort([5,4,2,7,9]))\\n \".trim();var selectionSort=\"function selectionSort(arr){\\n  var minIdx, temp,\\n  len = arr.length;\\n    for(var i = 0; i < len; i++){\\n    minIdx = i;\\n      for(var j = i+1; j<len; j++){\\n        if(arr[j]<arr[minIdx]){\\n        minIdx = j;\\n      }\\n    }\\n    \\n    temp = arr[i];\\n    arr[i] = arr[minIdx];\\n    arr[minIdx] = temp;\\n   }\\n \\n console.log(arr)\\n return arr;\\n }\\n \\n selectionSort([7,5,2,4,3,9]);\".trim();var Permutations=\"\\nfunction arm(str){\\n  let currentChar = [];\\n  let remaingChar = [];\\n  let result = [];\\n\\n  if(str.length === 0) return \\\"\\\";\\n  if(str.length === 1) return str;\\n\\n  for(let i=0; i<str.length; i++){\\n    currentChar = str[i];\\n    remaingChar = str.slice(0,i) + str.slice(i+1);\\n    for(let j=0; j<remaingChar.length; j++){\\n      result.push(currentChar + arm(remaingChar)[j]);\\n    }\\n  }\\n  return result;\\n}\\n\\nconsole.log(arm('abc'));\\n  \".trim();var Pattern=\"\\nlet i,j, str=\\\"\\\";                                                                    //Square pattern.\\nfor(i=1; i<=5; i++){\\n  for(j=0; j<5; j++){\\n    str += \\\"*\\\";\\n  }\\n  str += \\\"newLine\\\";\\n}\\n\\nconsole.log(str);\\n\\n\\nlet i, j, str = \\\"\\\";                                                               //Right pascal star pattern.\\nfor (i=1; i<=5; i++) {\\n  for (j=0; j<i; j++) {\\n    str += \\\"*\\\";\\n  }\\n  str += \\\"newLine\\\";\\n}\\n\\nfor (i=1; i<=(5-1); i++) {\\n  for (j=0; j<(5-i); j++) {\\n    str += \\\"*\\\";\\n  }\\n  str += \\\"newLine\\\";\\n}\\n\\nconsole.log(str);\\n\".trim();var amount=\"\\nfunction minCoinChange(coins, amount) {\\n  const minCoins = new Array(amount + 1).fill(Infinity); \\n  minCoins[0] = 0;                            // there are 0 ways to make amount 0 with positive coin values\\n \\n  for(let coin of coins) {                    // look at one coin at a time\\n    for(let i = 0; i <= amount; i += 1) {\\n     \\n      if((i - coin) >= 0) minCoins[i] = Math.min(minCoins[i], minCoins[i - coin] + 1);\\n    }\\n  }\\n  \\n                        // if the value remains Infinity, it means that no coin combination can make that amount\\n  return minCoins[amount] !== Infinity ? minCoins[amount] : -1;\\n}\\n\\nconsole.log(minCoinChange([1,2,3],13));\".trim();var armstrong=\"\\n  function arm() {\\n    const num = prompt('Enter a three-digit positive integer: ');\\n    let sum=0,  remainder=0;\\n    let temp=num;\\n  \\n    while(temp>0){\\n      remainder = temp%10;\\n      sum += remainder*remainder*remainder;\\n      temp = parseInt(temp/10)\\n    }\\n  \\n    if(sum == num){\\n      console.log('Armstrong', num);\\n    }\\n    else{\\n      console.log('Not an Armstrong', num);\\n    }\\n  }\\n  \\n  arm()\".trim();var Logic=/*#__PURE__*/function(_Component){_inherits(Logic,_Component);function Logic(){_classCallCheck(this,Logic);return _possibleConstructorReturn(this,_getPrototypeOf(Logic).apply(this,arguments));}_createClass(Logic,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Star\"),\"newLine = \\\\n\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:starSig,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Pyramind\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Pyramid,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Pattern\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Pattern,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. Armstrong Number\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:armstrong,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. Permutations\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Permutations,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"6. Given an amount of money, return the minimum number of coins needed to make that change.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:amount,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"7. Insersion Sort\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:insersonSort,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"8. Merg Sort\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:mergSort,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"9. Quick Sort\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:quicksort,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"10. Selection Sort\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:selectionSort,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return Logic;}(Component);export default withStyles(styles)(Logic);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/javaScripts/deepJs/logic.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","starSig","trim","Pyramid","insersonSort","mergSort","quicksort","selectionSort","Permutations","Pattern","amount","armstrong","Logic","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst starSig = `\n// *\n// **\n// ***\nfunction star(){\n  var start=\"\";\n  for(let i=0; i<3; i++){\n    for(let j=1; j<=(i+1); j++){\n      start += \"*\"\n    }\n    start +=\"newLine\";\n  }\n  console.log(start);\n}\nstar();\n\n//   *\n//  **\n// ***\nfunction star(){\n  let n = 3;\n  let str = \"\";\n  for (let i = 1; i <= n; i++){\n    for (let j=0; j<(n-i); j++){\n      str += \" \";\n    }\n    for (let k=0; k<i; k++){\n      str += \"*\";\n    }\n    str += \"newLine\";\n  }\nconsole.log(str);\n}\nstar();\n\n// ***\n// **\n// *\nfunction star(){\n  var start=\"\";\n  for(let i=3; i>0; i--){\n    for(let j=(i+1); j>1; j--){\n      start += \"*\"\n    }\n    start +=\"newLine\";\n  }\n  console.log(start);\n}\nstar();\n\n// ***\n//  **\n//   *\nfunction star(){\n  let n = 3;\n  let str = \"\";\n  for (let i = n; i >= 1; i--){\n    for (let j=0; j<(n-i); j++){\n      str += \" \";\n    }\n    for (let k=0; k<i; k++){\n      str += \"*\";\n    }\n    str += \"newLine\";\n  }\nconsole.log(str);\n}\nstar();\n`.trim();\n\nconst Pyramid = ` \n// Upside pyramid.\nfunction pyraminds() {\n  let i, j, k, str = \"\";\n\n  for (i=0; i<5; i++) {\n    for (j=1; j<(5 - i); j++) {\n      str += \" \";\n    }\n    for (k=1; k<=(2 * i +1); k++) {\n      str += \"*\";\n    }\n\n    str += 'newLine';\n  }\n  console.log(str)\n}\n\npyraminds();\n\n\n// downside pyramid.\nfor (i=1; i<5; i++) {\n  for (j=0; j<i; j++) {\n    str += \" \";\n  }\n  for (k=(5 - i)*2; k>1; k--) {\n    str += \"*\";\n  }\n\n  str += 'newLine';\n}\nconsole.log(str)\n `.trim()\n\nconst insersonSort = `\nvar insersionSort = function(array){\n  for(var i =1; i< array.length; i++){\n    for(var j=0;j<i;j++){\n      if(array[i] < array[j]){\n        var temp = array.splice(i, 1);\n        array.splice(j,0,temp[0]);\n      }\n    }\n  }\n  \nconsole.log(array)\nreturn array;\n}\n\ninsersionSort([3,5,1,9,6,2,1])\n`.trim()\n\nconst mergSort = `\nfunction mergeSort(arr){\n    if(arr.length < 2) return arr;\n    var middle = Math.floor(arr.length/2);\n    var left = arr.slice(0, middle);\n    var right = arr.slice(middle, arr.length);\n    return merge(mergeSort(left), mergeSort(right));\n }\n \n function merge(left, right){\n  var result = [];\n    while(left.length && right.length){\n      if(left[0] == right[0]){\n        result.push(left.shift());\n      }\n  else{\n    result.push(right.shift());}\n  }\n  \n  while(left.length) result.push(left.shift());\n  while(right.length) result.push(right.shift());\n  console.log(result)\n  return result;\n }\n mergeSort([3,2,1])`.trim()\n\nconst quicksort = `\nfunction QuickSort(arr){\n    if(arr.length <= 1) return arr;\n        var pivot = arr[arr.length -1];\n        var left = [];\n        var right = [];\n        for(var i=0;i<arr.length-1;i++){\n        if(arr[i] < pivot){\n        left.push(arr[i])\n      }\n    else right.push(arr[i])\n    }\n    return [...QuickSort(left), pivot, ...QuickSort(right)]\n }\n console.log(QuickSort([5,4,2,7,9]))\n `.trim()\n\nconst selectionSort = `function selectionSort(arr){\n  var minIdx, temp,\n  len = arr.length;\n    for(var i = 0; i < len; i++){\n    minIdx = i;\n      for(var j = i+1; j<len; j++){\n        if(arr[j]<arr[minIdx]){\n        minIdx = j;\n      }\n    }\n    \n    temp = arr[i];\n    arr[i] = arr[minIdx];\n    arr[minIdx] = temp;\n   }\n \n console.log(arr)\n return arr;\n }\n \n selectionSort([7,5,2,4,3,9]);`.trim()\n\n\n\nconst Permutations = `\nfunction arm(str){\n  let currentChar = [];\n  let remaingChar = [];\n  let result = [];\n\n  if(str.length === 0) return \"\";\n  if(str.length === 1) return str;\n\n  for(let i=0; i<str.length; i++){\n    currentChar = str[i];\n    remaingChar = str.slice(0,i) + str.slice(i+1);\n    for(let j=0; j<remaingChar.length; j++){\n      result.push(currentChar + arm(remaingChar)[j]);\n    }\n  }\n  return result;\n}\n\nconsole.log(arm('abc'));\n  `.trim()\n\nconst Pattern = `\nlet i,j, str=\"\";                                                                    //Square pattern.\nfor(i=1; i<=5; i++){\n  for(j=0; j<5; j++){\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nconsole.log(str);\n\n\nlet i, j, str = \"\";                                                               //Right pascal star pattern.\nfor (i=1; i<=5; i++) {\n  for (j=0; j<i; j++) {\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nfor (i=1; i<=(5-1); i++) {\n  for (j=0; j<(5-i); j++) {\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nconsole.log(str);\n`.trim();\n\nconst amount = `\nfunction minCoinChange(coins, amount) {\n  const minCoins = new Array(amount + 1).fill(Infinity); \n  minCoins[0] = 0;                            // there are 0 ways to make amount 0 with positive coin values\n \n  for(let coin of coins) {                    // look at one coin at a time\n    for(let i = 0; i <= amount; i += 1) {\n     \n      if((i - coin) >= 0) minCoins[i] = Math.min(minCoins[i], minCoins[i - coin] + 1);\n    }\n  }\n  \n                        // if the value remains Infinity, it means that no coin combination can make that amount\n  return minCoins[amount] !== Infinity ? minCoins[amount] : -1;\n}\n\nconsole.log(minCoinChange([1,2,3],13));`.trim();\n\n  const armstrong = `\n  function arm() {\n    const num = prompt('Enter a three-digit positive integer: ');\n    let sum=0,  remainder=0;\n    let temp=num;\n  \n    while(temp>0){\n      remainder = temp%10;\n      sum += remainder*remainder*remainder;\n      temp = parseInt(temp/10)\n    }\n  \n    if(sum == num){\n      console.log('Armstrong', num);\n    }\n    else{\n      console.log('Not an Armstrong', num);\n    }\n  }\n  \n  arm()`.trim();\n\nclass Logic extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Star</h3>\n              newLine = \\n\n              <div style={titles}>\n                <PrismCode\n                  code={starSig}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Pyramind</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Pyramid}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n             \n              <h3>3. Pattern</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Pattern}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Armstrong Number</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={armstrong}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. Permutations</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Permutations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>6. Given an amount of money, return the minimum number of coins needed to make that change.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={amount}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7. Insersion Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={insersonSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>8. Merg Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={mergSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>9. Quick Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={quicksort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>10. Selection Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={selectionSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Logic));\n"]},"metadata":{},"sourceType":"module"}