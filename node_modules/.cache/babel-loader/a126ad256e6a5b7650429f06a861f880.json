{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/pythone/deeppy/collections.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst containers = `\nfrom collections import Counter\n\n\nprint(Counter(['B','B','A','B','C','A','B','B','A','C']))                                   # With sequence of items\nprint(Counter({'A':3, 'B':5, 'C':2}))                                                       # with dictionary\nprint(Counter(A=3, B=5, C=2))                                                               # with keyword arguments\n\n\n#2 Updation\ncoun = collections.Counter()                                                                # also create an empty counter\n\ncoun.update(Data)                                                                 # And can be updated via update() method\n`.trim();\nconst increased = `\nfrom collections import Counter\n\nc1 = Counter(A=4, B=3, C=10)\nc2 = Counter(A=10, B=3, C=4)\n\nc1.subtract(c2)\nprint(c1)\n\nz = ['blue', 'red', 'blue', 'yellow', 'blue', 'red']\nprint(Counter(z))\n`.trim();\nconst orderedDict = `\nfrom collections import OrderedDict\n\nprint(\"This is a Dict:\")\nd = {}\nd['a'] = 1\nd['b'] = 2\nd['c'] = 3\nd['d'] = 4\n\nfor key, value in d.items():\n\tprint(key, value)\n\nprint(\"This is an Ordered Dict:\")\nod = OrderedDict()\nod['a'] = 1\nod['b'] = 2\nod['c'] = 3\nod['d'] = 4\n\nfor key, value in od.items():\n\tprint(key, value)`.trim();\nconst demonstrate = `\nfrom collections import OrderedDict\n\nprint(\"Befor\")\nod = OrderedDict()\nod['a'] = 1\nod['b'] = 2\nod['c'] = 3\nod['d'] = 4\nfor key, value in od.items():\n\tprint(key, value)\n\nprint(\"After:\")\nod['c'] = 5\nfor key, value in od.items():\n\tprint(key, value)`.trim();\nconst deleting = `\nfrom collections import OrderedDict\n\nprint(\"Before deleting:\")\nod = OrderedDict()\nod['a'] = 1\nod['b'] = 2\nod['c'] = 3\nod['d'] = 4\n\nfor key, value in od.items():\n\tprint(key, value)\n\nprint(\"After deleting:\")\nod.pop('c')\nfor key, value in od.items():\n\tprint(key, value)\n\nprint(\"After re-inserting:\")\nod['c'] = 3\nfor key, value in od.items():\n\tprint(key, value)`.trim();\nconst defaultdict = `\nfrom collections import defaultdict\n\n# Function to return a default values for keys that is not present\ndef def_value():\n    return \"Not Present\"\n\nd = defaultdict(def_value)\nd[\"a\"] = 1\nd[\"b\"] = 2\n\nprint(d[\"a\"])\nprint(d[\"b\"])\nprint(d[\"c\"])`.trim();\nconst missings = `\nfrom collections import defaultdict\n\nd = defaultdict(lambda: \"Not Present\")\nd[\"a\"] = 1\nd[\"b\"] = 2\n\n\n#Provides the default value for the key\nprint(d.__missing__('a'))\nprint(d.__missing__('d'))`.trim();\nconst userDict = `\nfrom collections import UserDict\n\nd = {'a':1, 'b': 2, 'c': 3}\n\nuserD = UserDict(d)                                                           #Creating an UserDict\nprint(userD.data)`.trim();\nconst customised = `\nfrom collections import UserDict\n\nclass MyDict(UserDict):                                                # Creating a Dictionary where deletion is not allowed\n    def __del__(self):                                                        # Function to stop deleltion from dictionary\n        raise RuntimeError(\"Deletion not allowed\")\n    \n    def pop(self, s=None):                                                    # Function to stop pop from dictionary\n        raise RuntimeError(\"Deletion not allowed\")\n    \n    def popitem(self, s=None):                                                # Function to stop popitem from Dictionary\n        raise RuntimeError(\"Deletion not allowed\")\n\nd = MyDict({'a': 1, 'b': 2, 'c': 3})\nprint(d)\nd.pop(1)`.trim();\nconst userList = `\nfrom collections import UserList\n\nL = [1, 2, 3, 4]\n\nuserL = UserList(L)\nprint(userL.data)\n`.trim();\nconst userString = `\nfrom collections import UserString\n\nd = 12344\n\nuserS = UserString(d)\nprint(userS.data)\n\nuserS = UserString(\"\")                                                                  # Creating an empty UserDict\nprint(userS.data)\n\n\n#2\nfrom collections import UserString\n\n# Creating a Mutable String\nclass Mystring(UserString):\n    def append(self, s):\n        self.data += s\n\n    def remove(self, s):\n        self.data = self.data.replace(s, \"\")\n\n\ns1 = Mystring(\"Geeks\")\nprint(\"Original String:\", s1.data)\n\ns1.append(\"s\")\nprint(\"String After Appending:\", s1.data)\n\ns1.remove(\"e\")\nprint(\"String after Removing:\", s1.data)`.trim();\nconst namedtuple = `\nfrom collections import namedtuple\nPoint = namedtuple('Point','x, y')\npt = Point(1, -4)\nprint(pt)\nprint(pt._fields)\nprint(type(pt))\nprint(pt.x, pt.y)\n\nPerson = namedtuple('Person','name, age')\nfriend = Person(name='Tom', age=25)\nprint(friend.name, friend.age)`.trim();\nconst deque = `\nfrom collections import deque\nd = deque()\n\nd.append('a')                                                                       # add elements to the right end \nd.appendleft('c')                                                                   # add elements to the left end \nprint(d.pop())                                                                      # remove elements from the right\nprint(d.popleft())                                                                  # remove elements from the left\nd.clear()\n\nprint(d)\n\nd = deque(['a', 'b', 'c', 'd'])\nd.extend(['e', 'f', 'g'])                                                           # extend at right or left side\nd.extendleft(['h', 'i', 'j'])                                                       # 'j' is now at the left most position\n\nprint(d)\n\n\nprint(d.count('h'))                                                    \nd.rotate(1)                                                                         # rotate 1 positions to the right\nd.rotate(-2)                                                                        # rotate 2 positions to the left\n\nprint(d)`.trim();\nconst chainMap = `\nfrom collections import ChainMap\n\nd1 = {'a': 1, 'b': 2}\nd2 = {'c': 3, 'd': 4}\nd3 = {'e': 5, 'f': 6}\n\nc = ChainMap(d1, d2, d3)\nprint(c)`.trim();\nconst operations = `\nimport collections\n\ndic1 = { 'a' : 1, 'b' : 2 }\ndic2 = { 'b' : 3, 'c' : 4 }\n\nchain = collections.ChainMap(dic1, dic2)\n\nprint (chain.maps)\nprint (list(chain.keys()))                                                              # printing keys using keys()\nprint (list(chain.values()))`.trim();\nconst manilupatings = `\nimport collections\n\ndic1 = { 'a' : 1, 'b' : 2 }\ndic2 = { 'b' : 3, 'c' : 4 }\ndic3 = { 'f' : 5 }\n\nchain = collections.ChainMap(dic1, dic2)\nprint (chain.maps)\n\nchain1 = chain.new_child(dic3)\nprint (chain1.maps)\nprint (chain1['b'])\n\nchain1.maps = reversed(chain1.maps)\nprint (chain1['b'])`.trim();\nconst heapq = `\nimport heapq\n\nli = [5, 7, 9, 1, 3]\n\nheapq.heapify(li)                                                           \nheapq.heappush(li,4)                                                 \nprint (list(li))\nprint (heapq.heappop(li))                                           \n\n\n//2\nli1 = [5, 7, 9, 4, 3]\nli2 = [5, 7, 9, 4, 3]\n\nheapq.heapify(li1)                                                 \n\nprint (heapq.heappushpop(li1, 2))                   \nprint (heapq.heapreplace(li2, 2))                   \n\nprint(heapq.nlargest(3, li1))                           \nprint(heapq.nsmallest(3, li1))                          \n`.trim();\n\nclass Collections extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, \"1. Containers\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, \"Containers are object that hold objects. They provide a way to access the contained objects and iterate over them.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, \"A Counter is a subclass of dict. Therefore it is an unordered collection where elements and their respective count are stored as a dictionary.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, \"A counter is a container that stores elements as dictionary keys, and their counts are stored as dictionary values.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, \"Different ways to create Counter.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: containers,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, \"3. counter\\u2019s data will be increased not replaced\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, \"Counts can be zero and negative also.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, \"We can use Counter to count distinct elements of a list or other collections.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: increased,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, \"4. OrderedDict\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, \"An OrderedDict is a dictionary subclass that remembers the order that keys were first inserted. The only difference between dict() and OrderedDict() is that.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, \"OrderedDict preserves the order in which the keys are inserted. A regular dict doesn\\u2019t track the insertion order, and iterating it gives the values in an arbitrary order.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: orderedDict,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, \"Key value Change: \"), \"If the value of a certain key is changed, the position of the key remains unchanged in OrderedDict.\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }, \"A Python program to demonstrate working of key/ value change in OrderedDict\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: demonstrate,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, \"Deletion and Re-Inserting:\"), \"Deleting and re-inserting the same key will push it to the back as OrderedDict however maintains the order of insertion.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: deleting,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }, \"Defaultdict\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, \"Defaultdict is a sub-class of the dict class that returns a dictionary-like object. The functionality of both dictionaries and defualtdict are almost same except for the fact that defualtdict never raises a KeyError. It provides a default value for the key that does not exists.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }, \"when the KeyError is raised, it might become a problem. To overcome this use Defaultdict.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: defaultdict,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }, \"__missing__()\"), \"This function is used to provide the default value for the dictionary. This function takes default_factory as an argument and if this argument is None, a KeyError is raised otherwise it provides a default value for the given key. This method is basically called by the __getitem__() method of the dict class when the requested key is not found. __getitem__() return the value returned by the __missing__(). method.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: missings,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }, \"Supports a dictionary like a container called UserDict present in the collections module. This class acts as a wrapper class around the dictionary objects. This class is useful when one wants to create a dictionary of their own with some modified/ new functionality. It can be considered as a way of adding new behaviors for the dictionary. This class takes a dictionary instance as an argument and simulates a dictionary that is kept in a regular dictionary. The dictionary is accessible by the data attribute of this class.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: userDict,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }, \"create a class inherting from UserDict to implement a customised dictionary.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: customised,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    }, \"Collections.UserList\"), \"This class acts as a wrapper class around the List objects. This class is useful when one wants to create a list of their own with some modified/ new functionality. It can be considered as a way of adding new behaviors for the list. This class takes a list instance as an argument and simulates a list that is kept in a regular list.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: userList,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    }, \"Collections.UserString\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }, \"Strings are the arrays of bytes representing Unicode characters. However, Python does not support the character data type. A character is a string of length one.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    }, \"This class is useful when one wants to create a string of their own with some modified/ new functionality.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: userString,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    }, \"Collections\"), \"Collections in Python implements specialized container datatypes providing alternatives to Python\\u2019s general purpose built-in containers, dict, list, set, and tuple.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502\n      },\n      __self: this\n    }, \"The following tools exist:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }, \"namedtuple:\"), \"factory function for creating tuple subclasses with named fields\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, \"OrderedDict:\"), \"dict subclass that remembers the order entries were added\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }, \"Counter:\"), \"dict subclass for counting hashable objects\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }, \"defaultdict:\"), \"dict subclass that calls a factory function to supply missing values\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    }, \"deque:\"), \"list-like container with fast appends and pops on either end\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    }, \"2. namedtuple\"), \"namedtuples are easy to create, lightweight object types. They assign meaning to each position in a tuple and allow for more readable, self-documenting code. They can be used wherever regular tuples are used, and they add the ability to access fields by name instead of position index.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }), \"create a namedtuple with its class name as string and its fields as string fields have to be separated by comma or space in the given string.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: namedtuple,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529\n      },\n      __self: this\n    }, \"deque\"), \"A deque is a double-ended queue. It can be used to add/ remove elements from both ends. Deques support thread safe, memory efficient appends and pops from either side of the deque with approximately the same O(1) performance in either direction.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }, \"various Operations on deque :\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    }, \"append() :\"), \"Used to insert the value in its argument to the right end of deque.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }, \"appendleft() :\"), \"Used to insert the value in its argument to the left end of deque.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    }, \"pop() :\"), \"Used to delete an argument from the right end of deque.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541\n      },\n      __self: this\n    }, \"popleft() :\"), \"Used to delete an argument from the left end of deque. \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }, \"index(ele, beg, end) :\"), \"Returns the first index of the value mentioned in arguments, starting searching from beg till end index.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }, \"insert(i, a) :\"), \"This function inserts the value mentioned in arguments(a) at index(i) specified in arguments.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    }, \"remove() :\"), \"Removes the first occurrence of value mentioned in arguments.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }, \"count() :\"), \"Counts the number of occurrences of value mentioned in arguments.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }, \"extend(iterable) :\"), \"Used to add multiple values at the right end of deque. The argument passed is an iterable.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }, \"extendleft(iterable) :\"), \"Used to add multiple values at the left end of deque. The argument passed is an iterable. Order is reversed as a result of left appends.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548\n      },\n      __self: this\n    }, \"reverse() :\"), \"Used to reverse order of deque elements.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }, \"rotate() :\"), \"Rotates the deque by the number specified in arguments. If the number specified is negative, rotation occurs to left. Else rotation is to right.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: deque,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562\n      },\n      __self: this\n    }, \"ChainMap\"), \"encapsulates many dictionaries into one unit. ChainMap is member of module \\u201Ccollections\\u201C.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: chainMap,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575\n      },\n      __self: this\n    }, \"Access Operations\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    }, \"keys() :\"), \"Used to display all the keys of all the dictionaries in ChainMap.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578\n      },\n      __self: this\n    }, \"values() :\"), \"Used to display values of all the dictionaries in ChainMap.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579\n      },\n      __self: this\n    }, \"maps() :\"), \"Used to display keys with corresponding values of all the dictionaries in ChainMap.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: operations,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    })), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588\n      },\n      __self: this\n    }, \"Note: \"), \"The key named \\u201Cb\\u201D exists in both dictionaries, but only first dictionary key is taken as key value of \\u201Cb\\u201D. Ordering is done as the dictionaries are passed in function.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591\n      },\n      __self: this\n    }, \"Manipulating Operations\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593\n      },\n      __self: this\n    }, \"new_child() :\"), \"Adds a new dictionary in the beginning of the ChainMap.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594\n      },\n      __self: this\n    }, \"reversed() :\"), \"Reverses the relative ordering of dictionaries in the ChainMap.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: manilupatings,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 605\n      },\n      __self: this\n    }, \"Heap queue (heapq)\"), \"Heap data structure is mainly used to represent a priority queue.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607\n      },\n      __self: this\n    }), \"The property of this data structure in Python is that each time the smallest of heap element is popped(min heap). Whenever elements are pushed/ popped, heap structure in maintained. The heap[0] element also returns the smallest element each time.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611\n      },\n      __self: this\n    }, \"heapify(iterable) :\"), \"Used to convert the iterable into a heap data structure. i.e. in heap order.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    }, \"heappush(heap, ele) :\"), \"Used to insert the element mentioned in its arguments into heap. The order is adjusted, so as heap structure is maintained.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    }, \"heappop(heap) :\"), \"Used to remove and return the smallest element from heap. The order is adjusted, so as heap structure is maintained.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614\n      },\n      __self: this\n    }, \"heappushpop(heap, ele) :\"), \"This function combines the functioning of both push and pop operations in one statement, increasing efficiency. Heap order is maintained after this operation.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615\n      },\n      __self: this\n    }, \"heapreplace(heap, ele) :\"), \"This function also inserts and pops element in one statement, but it is different from above function. In this, element is first popped, then the element is pushed.i.e, the value larger than the pushed value can be returned. heapreplace() returns the smallest value originally in heap regardless of the pushed element as opposed to heappushpop().\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616\n      },\n      __self: this\n    }, \"nlargest(k, iterable, key = fun) :\"), \"Used to return the k largest elements from the iterable specified and satisfying the key if mentioned.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617\n      },\n      __self: this\n    }, \"nsmallest(k, iterable, key = fun) :\"), \"Used to return the k smallest elements from the iterable specified and satisfying the key if mentioned.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622\n      },\n      __self: this\n    }, \"Using heapify to convert list into heap.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 623\n      },\n      __self: this\n    }, \"Using heappush() to push elements into heap.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624\n      },\n      __self: this\n    }, \"Using heappop() to pop smallest element.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    }, \"Using heappushpop() to push and pop items simultaneously.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626\n      },\n      __self: this\n    }, \"Using heapreplace() to push and pop items simultaneously.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: heapq,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Collections);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/pythone/deeppy/collections.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","containers","trim","increased","orderedDict","demonstrate","deleting","defaultdict","missings","userDict","customised","userList","userString","namedtuple","deque","chainMap","operations","manilupatings","heapq","Collections","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst containers = `\nfrom collections import Counter\n\n\nprint(Counter(['B','B','A','B','C','A','B','B','A','C']))                                   # With sequence of items\nprint(Counter({'A':3, 'B':5, 'C':2}))                                                       # with dictionary\nprint(Counter(A=3, B=5, C=2))                                                               # with keyword arguments\n\n\n#2 Updation\ncoun = collections.Counter()                                                                # also create an empty counter\n\ncoun.update(Data)                                                                 # And can be updated via update() method\n`.trim();\n\nconst increased = `\nfrom collections import Counter\n\nc1 = Counter(A=4, B=3, C=10)\nc2 = Counter(A=10, B=3, C=4)\n\nc1.subtract(c2)\nprint(c1)\n\nz = ['blue', 'red', 'blue', 'yellow', 'blue', 'red']\nprint(Counter(z))\n`.trim();\n\nconst orderedDict = `\nfrom collections import OrderedDict\n\nprint(\"This is a Dict:\")\nd = {}\nd['a'] = 1\nd['b'] = 2\nd['c'] = 3\nd['d'] = 4\n\nfor key, value in d.items():\n\tprint(key, value)\n\nprint(\"This is an Ordered Dict:\")\nod = OrderedDict()\nod['a'] = 1\nod['b'] = 2\nod['c'] = 3\nod['d'] = 4\n\nfor key, value in od.items():\n\tprint(key, value)`.trim();\n\nconst demonstrate = `\nfrom collections import OrderedDict\n\nprint(\"Befor\")\nod = OrderedDict()\nod['a'] = 1\nod['b'] = 2\nod['c'] = 3\nod['d'] = 4\nfor key, value in od.items():\n\tprint(key, value)\n\nprint(\"After:\")\nod['c'] = 5\nfor key, value in od.items():\n\tprint(key, value)`.trim();\n\nconst deleting = `\nfrom collections import OrderedDict\n\nprint(\"Before deleting:\")\nod = OrderedDict()\nod['a'] = 1\nod['b'] = 2\nod['c'] = 3\nod['d'] = 4\n\nfor key, value in od.items():\n\tprint(key, value)\n\nprint(\"After deleting:\")\nod.pop('c')\nfor key, value in od.items():\n\tprint(key, value)\n\nprint(\"After re-inserting:\")\nod['c'] = 3\nfor key, value in od.items():\n\tprint(key, value)`.trim();\n\nconst defaultdict = `\nfrom collections import defaultdict\n\n# Function to return a default values for keys that is not present\ndef def_value():\n    return \"Not Present\"\n\nd = defaultdict(def_value)\nd[\"a\"] = 1\nd[\"b\"] = 2\n\nprint(d[\"a\"])\nprint(d[\"b\"])\nprint(d[\"c\"])`.trim();\n\nconst missings = `\nfrom collections import defaultdict\n\nd = defaultdict(lambda: \"Not Present\")\nd[\"a\"] = 1\nd[\"b\"] = 2\n\n\n#Provides the default value for the key\nprint(d.__missing__('a'))\nprint(d.__missing__('d'))`.trim();\n\nconst userDict = `\nfrom collections import UserDict\n\nd = {'a':1, 'b': 2, 'c': 3}\n\nuserD = UserDict(d)                                                           #Creating an UserDict\nprint(userD.data)`.trim();\n\nconst customised = `\nfrom collections import UserDict\n\nclass MyDict(UserDict):                                                # Creating a Dictionary where deletion is not allowed\n    def __del__(self):                                                        # Function to stop deleltion from dictionary\n        raise RuntimeError(\"Deletion not allowed\")\n    \n    def pop(self, s=None):                                                    # Function to stop pop from dictionary\n        raise RuntimeError(\"Deletion not allowed\")\n    \n    def popitem(self, s=None):                                                # Function to stop popitem from Dictionary\n        raise RuntimeError(\"Deletion not allowed\")\n\nd = MyDict({'a': 1, 'b': 2, 'c': 3})\nprint(d)\nd.pop(1)`.trim();\n\nconst userList = `\nfrom collections import UserList\n\nL = [1, 2, 3, 4]\n\nuserL = UserList(L)\nprint(userL.data)\n`.trim();\n\nconst userString = `\nfrom collections import UserString\n\nd = 12344\n\nuserS = UserString(d)\nprint(userS.data)\n\nuserS = UserString(\"\")                                                                  # Creating an empty UserDict\nprint(userS.data)\n\n\n#2\nfrom collections import UserString\n\n# Creating a Mutable String\nclass Mystring(UserString):\n    def append(self, s):\n        self.data += s\n\n    def remove(self, s):\n        self.data = self.data.replace(s, \"\")\n\n\ns1 = Mystring(\"Geeks\")\nprint(\"Original String:\", s1.data)\n\ns1.append(\"s\")\nprint(\"String After Appending:\", s1.data)\n\ns1.remove(\"e\")\nprint(\"String after Removing:\", s1.data)`.trim();\n\nconst namedtuple = `\nfrom collections import namedtuple\nPoint = namedtuple('Point','x, y')\npt = Point(1, -4)\nprint(pt)\nprint(pt._fields)\nprint(type(pt))\nprint(pt.x, pt.y)\n\nPerson = namedtuple('Person','name, age')\nfriend = Person(name='Tom', age=25)\nprint(friend.name, friend.age)`.trim();\n\nconst deque = `\nfrom collections import deque\nd = deque()\n\nd.append('a')                                                                       # add elements to the right end \nd.appendleft('c')                                                                   # add elements to the left end \nprint(d.pop())                                                                      # remove elements from the right\nprint(d.popleft())                                                                  # remove elements from the left\nd.clear()\n\nprint(d)\n\nd = deque(['a', 'b', 'c', 'd'])\nd.extend(['e', 'f', 'g'])                                                           # extend at right or left side\nd.extendleft(['h', 'i', 'j'])                                                       # 'j' is now at the left most position\n\nprint(d)\n\n\nprint(d.count('h'))                                                    \nd.rotate(1)                                                                         # rotate 1 positions to the right\nd.rotate(-2)                                                                        # rotate 2 positions to the left\n\nprint(d)`.trim();\n\nconst chainMap = `\nfrom collections import ChainMap\n\nd1 = {'a': 1, 'b': 2}\nd2 = {'c': 3, 'd': 4}\nd3 = {'e': 5, 'f': 6}\n\nc = ChainMap(d1, d2, d3)\nprint(c)`.trim();\n\nconst operations = `\nimport collections\n\ndic1 = { 'a' : 1, 'b' : 2 }\ndic2 = { 'b' : 3, 'c' : 4 }\n\nchain = collections.ChainMap(dic1, dic2)\n\nprint (chain.maps)\nprint (list(chain.keys()))                                                              # printing keys using keys()\nprint (list(chain.values()))`.trim();\n\nconst manilupatings = `\nimport collections\n\ndic1 = { 'a' : 1, 'b' : 2 }\ndic2 = { 'b' : 3, 'c' : 4 }\ndic3 = { 'f' : 5 }\n\nchain = collections.ChainMap(dic1, dic2)\nprint (chain.maps)\n\nchain1 = chain.new_child(dic3)\nprint (chain1.maps)\nprint (chain1['b'])\n\nchain1.maps = reversed(chain1.maps)\nprint (chain1['b'])`.trim();\n\nconst heapq = `\nimport heapq\n\nli = [5, 7, 9, 1, 3]\n\nheapq.heapify(li)                                                           \nheapq.heappush(li,4)                                                 \nprint (list(li))\nprint (heapq.heappop(li))                                           \n\n\n//2\nli1 = [5, 7, 9, 4, 3]\nli2 = [5, 7, 9, 4, 3]\n\nheapq.heapify(li1)                                                 \n\nprint (heapq.heappushpop(li1, 2))                   \nprint (heapq.heapreplace(li2, 2))                   \n\nprint(heapq.nlargest(3, li1))                           \nprint(heapq.nsmallest(3, li1))                          \n`.trim();\n\n\nclass Collections extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Containers</h3>\n              <ul>\n                <li>Containers are object that hold objects. They provide a way to access the contained objects and iterate over them.\n                </li>\n                <li>A Counter is a subclass of dict. Therefore it is an unordered collection where elements and their respective count are stored as a dictionary.\n                </li>\n                <li>A counter is a container that stores elements as dictionary keys, and their counts are stored as dictionary values.</li>\n              </ul>\n              <br />\n              <b>Different ways to create Counter.</b>\n              <br />\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={containers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. counter’s data will be increased not replaced</h3>\n              <ul>\n                <li>Counts can be zero and negative also.</li>\n                <li>We can use Counter to count distinct elements of a list or other collections.</li>\n              </ul>\n\n              <div style={titles}>\n                <PrismCode\n                  code={increased}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. OrderedDict</h3>\n              <ul>\n                <li>An OrderedDict is a dictionary subclass that remembers the order that keys were first inserted. The only difference between\n                  dict() and OrderedDict() is that.\n                </li>\n                <li>OrderedDict preserves the order in which the keys are inserted. A regular dict doesn’t track the insertion order, and\n                  iterating it gives the values in an arbitrary order.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={orderedDict}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <p><b>Key value Change: </b>If the value of a certain key is changed, the position of the key remains unchanged in OrderedDict.\n              </p>\n\n              <h3>A Python program to demonstrate working of key/ value change in OrderedDict</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={demonstrate}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Deletion and Re-Inserting:</h3>\n              Deleting and re-inserting the same key will push it to the back as OrderedDict however maintains the order of insertion.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={deleting}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Defaultdict</h3>\n              <ul>\n                <li>Defaultdict is a sub-class of the dict class that returns a dictionary-like object. The functionality\n                  of both dictionaries and defualtdict are almost same except for the fact that defualtdict never raises a\n                  KeyError. It provides a default value for the key that does not exists.</li>\n                <li>when the KeyError is raised, it might become a problem. To overcome this use Defaultdict.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={defaultdict}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>__missing__()</h3>\n              This function is used to provide the default value for the dictionary. This function takes\n              default_factory as an argument and if this argument is None, a KeyError is raised otherwise it provides\n              a default value for the given key. This method is basically called by the __getitem__() method of the\n              dict class when the requested key is not found. __getitem__() return the value returned by\n              the __missing__(). method.\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={missings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <i>Supports a dictionary like a container called UserDict present in the collections module. This class\n                acts as a wrapper class around the dictionary objects. This class is useful when one wants to create\n                a dictionary of their own with some modified/ new functionality. It can be\n                considered as a way of adding new behaviors for the dictionary. This class takes a dictionary instance\n                as an argument and simulates a dictionary that is kept in a regular dictionary. The dictionary is\n                accessible by the data attribute of this class.</i>\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={userDict}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>create a class inherting from UserDict to implement a customised dictionary.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={customised}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Collections.UserList</h3>\n              This class acts as a wrapper class around the List objects. This class is useful when one wants to\n              create a list of their own with some modified/ new functionality. It can be\n              considered as a way of adding new behaviors for the list. This class takes a list instance as an\n              argument and simulates a list that is kept in a regular list.\n              <br />\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={userList}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Collections.UserString</h3>\n              <ul>\n                <li>Strings are the arrays of bytes representing Unicode characters. However, Python does not support the character data type. A character is a string of length one.</li>\n                <li>This class is useful when one wants to create a string of their own with some modified/ new functionality.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={userString}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Collections</h3>\n              Collections in Python implements specialized container datatypes providing alternatives to Python’s general purpose built-in\n              containers, dict, list, set, and tuple.\n              <br />\n              <b>The following tools exist:</b>\n              <ul>\n                <li><b>namedtuple:</b>factory function for creating tuple subclasses with named fields</li>\n                <li><b>OrderedDict:</b>dict subclass that remembers the order entries were added</li>\n                <li><b>Counter:</b>dict subclass for counting hashable objects</li>\n                <li><b>defaultdict:</b>dict subclass that calls a factory function to supply missing values</li>\n                <li><b>deque:</b>list-like container with fast appends and pops on either end</li>\n              </ul>\n              <br />\n\n              <h3>2. namedtuple</h3>\n              namedtuples are easy to create, lightweight object types. They assign meaning to each position in a\n              tuple and allow for more readable, self-documenting code. They can be used wherever regular tuples are\n              used, and they add the ability to access fields by name instead of position index.\n              <br />\n              <br />\n              create a namedtuple with its class name as string and its fields as string fields have to be separated\n              by comma or space in the given string.\n              <div style={titles}>\n                <PrismCode\n                  code={namedtuple}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>deque</h3>\n              A deque is a double-ended queue. It can be used to add/ remove elements from both ends. Deques\n              support thread safe, memory efficient appends and pops from either side of the deque with approximately\n              the same O(1) performance in either direction.\n              <br />\n              <br />\n\n              <b>various Operations on deque :</b>\n              <ul>\n                <li><b>append() :</b>Used to insert the value in its argument to the right end of deque.</li>\n                <li><b>appendleft() :</b>Used to insert the value in its argument to the left end of deque.</li>\n                <li><b>pop() :</b>Used to delete an argument from the right end of deque.</li>\n                <li><b>popleft() :</b>Used to delete an argument from the left end of deque. </li>\n                <li><b>index(ele, beg, end) :</b>Returns the first index of the value mentioned in arguments, starting searching from beg till end index.</li>\n                <li><b>insert(i, a) :</b>This function inserts the value mentioned in arguments(a) at index(i) specified in arguments.</li>\n                <li><b>remove() :</b>Removes the first occurrence of value mentioned in arguments.</li>\n                <li><b>count() :</b>Counts the number of occurrences of value mentioned in arguments.</li>\n                <li><b>extend(iterable) :</b>Used to add multiple values at the right end of deque. The argument passed is an iterable.</li>\n                <li><b>extendleft(iterable) :</b>Used to add multiple values at the left end of deque. The argument passed is an iterable. Order is reversed as a result of left appends.</li>\n                <li><b>reverse() :</b>Used to reverse order of deque elements.</li>\n                <li><b>rotate() :</b>Rotates the deque by the number specified in arguments. If the number specified is negative, rotation occurs to left. Else rotation is to right.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={deque}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>ChainMap</h3>\n              encapsulates many dictionaries into one unit. ChainMap is member of module “collections“.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={chainMap}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Access Operations</b>\n              <ul>\n                <li><b>keys() :</b>Used to display all the keys of all the dictionaries in ChainMap.</li>\n                <li><b>values() :</b>Used to display values of all the dictionaries in ChainMap.</li>\n                <li><b>maps() :</b>Used to display keys with corresponding values of all the dictionaries in ChainMap.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={operations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <b>Note: </b>The key named “b” exists in both dictionaries, but only first dictionary key is taken as key value of “b”. Ordering is done as the dictionaries are passed in function.\n              <br />\n\n              <h3>Manipulating Operations</h3>\n              <ul>\n                <li><b>new_child() :</b>Adds a new dictionary in the beginning of the ChainMap.</li>\n                <li><b>reversed() :</b>Reverses the relative ordering of dictionaries in the ChainMap.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={manilupatings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Heap queue (heapq)</h3>\n              Heap data structure is mainly used to represent a priority queue.\n              <br />\n              The property of this data structure in Python is that each time the smallest of heap element is popped(min heap). Whenever\n              elements are pushed/ popped, heap structure in maintained. The heap[0] element also returns the smallest element each time.\n              <ul>\n                <li><b>heapify(iterable) :</b>Used to convert the iterable into a heap data structure. i.e. in heap order.</li>\n                <li><b>heappush(heap, ele) :</b>Used to insert the element mentioned in its arguments into heap. The order is adjusted, so as heap structure is maintained.</li>\n                <li><b>heappop(heap) :</b>Used to remove and return the smallest element from heap. The order is adjusted, so as heap structure is maintained.</li>\n                <li><b>heappushpop(heap, ele) :</b>This function combines the functioning of both push and pop operations in one statement, increasing efficiency. Heap order is maintained after this operation.</li>\n                <li><b>heapreplace(heap, ele) :</b>This function also inserts and pops element in one statement, but it is different from above function. In this, element is first popped, then the element is pushed.i.e, the value larger than the pushed value can be returned. heapreplace() returns the smallest value originally in heap regardless of the pushed element as opposed to heappushpop().</li>\n                <li><b>nlargest(k, iterable, key = fun) :</b>Used to return the k largest elements from the iterable specified and satisfying the key if mentioned.</li>\n                <li><b>nsmallest(k, iterable, key = fun) :</b>Used to return the k smallest elements from the iterable specified and satisfying the key if mentioned.</li>\n              </ul>\n              <br />\n\n              <ul>\n                <li>Using heapify to convert list into heap.</li>\n                <li>Using heappush() to push elements into heap.</li>\n                <li>Using heappop() to pop smallest element.</li>\n                <li>Using heappushpop() to push and pop items simultaneously.</li>\n                <li>Using heapreplace() to push and pop items simultaneously.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={heapq}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Collections));\n"]},"metadata":{},"sourceType":"module"}