{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';import Sort1 from'../../../assets/sort_1.png';import Sort2 from'../../../assets/sort_2.png';import Insertion from'../../../assets/insertion_sort.png';import Selection from'../../../assets/selection_short.png';import Bubble from'../../../assets/bubble_short.png';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var redesign={height:500};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var SortAlgo=\"function quick_Sort(origArray) {\\n\\tif (origArray.length <= 1) { \\n\\t\\treturn origArray;\\n\\t} else {\\n\\n\\t\\tvar left = [];\\n\\t\\tvar right = [];\\n\\t\\tvar newArray = [];\\n\\t\\tvar pivot = origArray.pop();\\n\\t\\tvar length = origArray.length;\\n\\n\\t\\tfor (var i = 0; i < length; i++) {\\n\\t\\t\\tif (origArray[i] <= pivot) {\\n\\t\\t\\t\\tleft.push(origArray[i]);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tright.push(origArray[i]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn newArray.concat(quick_Sort(left), pivot, quick_Sort(right));\\n\\t}\\n}\\n\\nvar myArray = [3, 0, 2, 5, -1, 4, 1 ];\\n\\nconsole.log(\\\"Original array: \\\" + myArray);\\nvar sortedArray = quick_Sort(myArray);\\nconsole.log(\\\"Sorted array: \\\" + sortedArray);\".trim();var mergeSort=\"\\nfunction merge_sort(left_part,right_part) \\n{\\n\\tvar i = 0;\\n\\tvar j = 0;\\n\\tvar results = [];\\n\\n\\twhile (i < left_part.length || j < right_part.length) {\\n\\t\\tif (i === left_part.length) {\\n\\t\\t\\tresults.push(right_part[j]);\\n\\t\\t\\tj++;\\n\\t\\t} \\n      else if (j === right_part.length || left_part[i] <= right_part[j]) {\\n\\t\\t\\tresults.push(left_part[i]);\\n\\t\\t\\ti++;\\n\\t\\t} else {\\n\\t\\t\\tresults.push(right_part[j]);\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t}\\n\\treturn results;\\n}\\n\\nconsole.log(merge_sort([1,3,4], [3,7,9]));\".trim();var heapSort=\"\\nvar array_length;\\n/* to create MAX  array */  \\nfunction heap_root(input, i) {\\n    var left = 2 * i + 1;\\n    var right = 2 * i + 2;\\n    var max = i;\\n\\n    if (left < array_length && input[left] > input[max]) {\\n        max = left;\\n    }\\n\\n    if (right < array_length && input[right] > input[max])     {\\n        max = right;\\n    }\\n\\n    if (max != i) {\\n        swap(input, i, max);\\n        heap_root(input, max);\\n    }\\n}\\n\\nfunction swap(input, index_A, index_B) {\\n    var temp = input[index_A];\\n\\n    input[index_A] = input[index_B];\\n    input[index_B] = temp;\\n}\\n\\nfunction heapSort(input) {\\n    \\n    array_length = input.length;\\n\\n    for (var i = Math.floor(array_length / 2); i >= 0; i -= 1)      {\\n        heap_root(input, i);\\n      }\\n\\n    for (i = input.length - 1; i > 0; i--) {\\n        swap(input, 0, i);\\n        array_length--;\\n      \\n      \\n        heap_root(input, 0);\\n    }\\n}\\n\\nvar arr = [3, 0, 2, 5, -1, 4, 1];\\nheapSort(arr);\\nconsole.log(arr);\".trim();var insertion=\"\\nconst insertion_Sort = (nums) => {\\n  for (let i = 1; i < nums.length; i++) {\\n    let j = i - 1\\n    let temp = nums[i]\\n    while (j >= 0 && nums[j] > temp) {\\n      nums[j + 1] = nums[j]\\n      j--\\n    }\\n    nums[j+1] = temp\\n  }\\n  return nums\\n}\\nconsole.log(insertion_Sort([3, 0, 2, 5, -1, 4, 1]));\\nconsole.log(insertion_Sort([2,6,5,12,-1,3,8,7,1,-4,0,23,1,-55,20,37,54,210,-23]));\".trim();var selectionSort=\"\\nfunction Selection_Sort(arr, compare_Function) {\\n\\n  function compare(a, b) {\\n   return a - b;\\n   } \\n  var min = 0;\\n  var index = 0;\\n  var temp = 0;\\n\\n //{Function} compare_Function Compare function\\n  compare_Function = compare_Function || compare;\\n\\n  for (var i = 0; i < arr.length; i += 1) {\\n    index = i;\\n    min = arr[i];\\n\\n    for (var j = i + 1; j < arr.length; j += 1) {\\n      if (compare_Function(min, arr[j]) > 0) {\\n        min = arr[j];\\n        index = j;\\n      }\\n    }\\n\\n    temp = arr[i];\\n    arr[i] = min;\\n    arr[index] = temp;\\n  }\\n\\n  //return sorted arr\\n  return arr;\\n}\\n\\nconsole.log(Selection_Sort([3, 0, 2, 5, -1, 4, 1], function(a, b) { return a - b; })); \\nconsole.log(Selection_Sort([3, 0, 2, 5, -1, 4, 1], function(a, b) { return b - a; }));\".trim();var bubbleSort=\"\\nfunction swap(arr, first_Index, second_Index){\\n  var temp = arr[first_Index];\\n  arr[first_Index] = arr[second_Index];\\n  arr[second_Index] = temp;\\n}\\n\\nfunction bubble_Sort(arr){\\n\\n  var len = arr.length,\\n      i, j, stop;\\n\\n  for (i=0; i < len; i++){\\n      for (j=0, stop=len-i; j < stop; j++){\\n          if (arr[j] > arr[j+1]){\\n              swap(arr, j, j+1);\\n          }\\n      }\\n  }\\n\\n  return arr;\\n}\\nconsole.log(bubble_Sort([3, 0, 2, 5, -1, 4, 1]));\".trim();var Sort=/*#__PURE__*/function(_Component){_inherits(Sort,_Component);function Sort(){_classCallCheck(this,Sort);return _possibleConstructorReturn(this,_getPrototypeOf(Sort).apply(this,arguments));}_createClass(Sort,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Write a JavaScript program to sort a list of elements using Quick sort.\"),React.createElement(\"i\",null,\"Quick sort is a comparison sort, meaning that it can sort items of any type for which a \\\"less-than\\\" relation is defined.\"),React.createElement(\"br\",null),React.createElement(\"img\",{src:Sort1,alt:\"\",className:\"responsive\",style:redesign}),React.createElement(\"img\",{src:Sort2,alt:\"\",className:\"responsive\",style:redesign}),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:SortAlgo,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h2\",null,\"Write a JavaScript program to sort a list of elements using Merge sort.\"),React.createElement(\"i\",null,\"Merge sort is an O (n log n) comparison-based sorting algorithm.\",React.createElement(\"br\",null),\"Divide the unsorted list into n sublists, each containing 1 element.\",React.createElement(\"br\",null),\"Repeatedly merge sublists to produce new sorted sublists until there is only 1 sublist remaining. This will be the sorted list\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:mergeSort,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Write a JavaScript program to sort a list of elements using Heap sort.\"),\"Worst-case O(n log n) runtime\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:heapSort,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Write a JavaScript program to sort a list of elements using Insertion sort.\"),React.createElement(\"div\",{style:titles},React.createElement(\"img\",{src:Insertion,alt:\"\",className:\"responsive\"}),React.createElement(PrismCode,{code:insertion,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Write a JavaScript program to sort a list of elements using the Selection sort.\"),React.createElement(\"i\",null,\"The selection sort improves on the bubble sort by making only one exchange for every pass through the list\"),React.createElement(\"div\",{style:titles},React.createElement(\"img\",{src:Selection,alt:\"\",className:\"responsive\",style:redesign}),React.createElement(PrismCode,{code:selectionSort,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Write a JavaScript program to sort a list of elements using Bubble sort.\"),React.createElement(\"i\",null,\"It is a simple sorting algorithm that repeatedly steps through the list to be sorted, compares each pair of adjacent items and swaps them if they are in the wrong order\"),React.createElement(\"div\",{style:titles},React.createElement(\"img\",{src:Bubble,alt:\"\",className:\"responsive\"}),React.createElement(PrismCode,{code:bubbleSort,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return Sort;}(Component);export default withStyles(styles)(Sort);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/sort.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Sort1","Sort2","Insertion","Selection","Bubble","titles","backgroundColor","padding","fontSize","redesign","height","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","SortAlgo","trim","mergeSort","heapSort","insertion","selectionSort","bubbleSort","Sort","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Sort1 from '../../../assets/sort_1.png';\nimport Sort2 from '../../../assets/sort_2.png';\nimport Insertion from '../../../assets/insertion_sort.png';\nimport Selection from '../../../assets/selection_short.png';\nimport Bubble from '../../../assets/bubble_short.png';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 500,\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst SortAlgo = `function quick_Sort(origArray) {\n\tif (origArray.length <= 1) { \n\t\treturn origArray;\n\t} else {\n\n\t\tvar left = [];\n\t\tvar right = [];\n\t\tvar newArray = [];\n\t\tvar pivot = origArray.pop();\n\t\tvar length = origArray.length;\n\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\tif (origArray[i] <= pivot) {\n\t\t\t\tleft.push(origArray[i]);\n\t\t\t} else {\n\t\t\t\tright.push(origArray[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn newArray.concat(quick_Sort(left), pivot, quick_Sort(right));\n\t}\n}\n\nvar myArray = [3, 0, 2, 5, -1, 4, 1 ];\n\nconsole.log(\"Original array: \" + myArray);\nvar sortedArray = quick_Sort(myArray);\nconsole.log(\"Sorted array: \" + sortedArray);`.trim()\n\nconst mergeSort = `\nfunction merge_sort(left_part,right_part) \n{\n\tvar i = 0;\n\tvar j = 0;\n\tvar results = [];\n\n\twhile (i < left_part.length || j < right_part.length) {\n\t\tif (i === left_part.length) {\n\t\t\tresults.push(right_part[j]);\n\t\t\tj++;\n\t\t} \n      else if (j === right_part.length || left_part[i] <= right_part[j]) {\n\t\t\tresults.push(left_part[i]);\n\t\t\ti++;\n\t\t} else {\n\t\t\tresults.push(right_part[j]);\n\t\t\tj++;\n\t\t}\n\t}\n\treturn results;\n}\n\nconsole.log(merge_sort([1,3,4], [3,7,9]));`.trim()\n\nconst heapSort = `\nvar array_length;\n/* to create MAX  array */  \nfunction heap_root(input, i) {\n    var left = 2 * i + 1;\n    var right = 2 * i + 2;\n    var max = i;\n\n    if (left < array_length && input[left] > input[max]) {\n        max = left;\n    }\n\n    if (right < array_length && input[right] > input[max])     {\n        max = right;\n    }\n\n    if (max != i) {\n        swap(input, i, max);\n        heap_root(input, max);\n    }\n}\n\nfunction swap(input, index_A, index_B) {\n    var temp = input[index_A];\n\n    input[index_A] = input[index_B];\n    input[index_B] = temp;\n}\n\nfunction heapSort(input) {\n    \n    array_length = input.length;\n\n    for (var i = Math.floor(array_length / 2); i >= 0; i -= 1)      {\n        heap_root(input, i);\n      }\n\n    for (i = input.length - 1; i > 0; i--) {\n        swap(input, 0, i);\n        array_length--;\n      \n      \n        heap_root(input, 0);\n    }\n}\n\nvar arr = [3, 0, 2, 5, -1, 4, 1];\nheapSort(arr);\nconsole.log(arr);`.trim()\n\nconst insertion = `\nconst insertion_Sort = (nums) => {\n  for (let i = 1; i < nums.length; i++) {\n    let j = i - 1\n    let temp = nums[i]\n    while (j >= 0 && nums[j] > temp) {\n      nums[j + 1] = nums[j]\n      j--\n    }\n    nums[j+1] = temp\n  }\n  return nums\n}\nconsole.log(insertion_Sort([3, 0, 2, 5, -1, 4, 1]));\nconsole.log(insertion_Sort([2,6,5,12,-1,3,8,7,1,-4,0,23,1,-55,20,37,54,210,-23]));`.trim()\n\nconst selectionSort = `\nfunction Selection_Sort(arr, compare_Function) {\n\n  function compare(a, b) {\n   return a - b;\n   } \n  var min = 0;\n  var index = 0;\n  var temp = 0;\n\n //{Function} compare_Function Compare function\n  compare_Function = compare_Function || compare;\n\n  for (var i = 0; i < arr.length; i += 1) {\n    index = i;\n    min = arr[i];\n\n    for (var j = i + 1; j < arr.length; j += 1) {\n      if (compare_Function(min, arr[j]) > 0) {\n        min = arr[j];\n        index = j;\n      }\n    }\n\n    temp = arr[i];\n    arr[i] = min;\n    arr[index] = temp;\n  }\n\n  //return sorted arr\n  return arr;\n}\n\nconsole.log(Selection_Sort([3, 0, 2, 5, -1, 4, 1], function(a, b) { return a - b; })); \nconsole.log(Selection_Sort([3, 0, 2, 5, -1, 4, 1], function(a, b) { return b - a; }));`.trim()\n\nconst bubbleSort = `\nfunction swap(arr, first_Index, second_Index){\n  var temp = arr[first_Index];\n  arr[first_Index] = arr[second_Index];\n  arr[second_Index] = temp;\n}\n\nfunction bubble_Sort(arr){\n\n  var len = arr.length,\n      i, j, stop;\n\n  for (i=0; i < len; i++){\n      for (j=0, stop=len-i; j < stop; j++){\n          if (arr[j] > arr[j+1]){\n              swap(arr, j, j+1);\n          }\n      }\n  }\n\n  return arr;\n}\nconsole.log(bubble_Sort([3, 0, 2, 5, -1, 4, 1]));`.trim()\n\n\n\nclass Sort extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Write a JavaScript program to sort a list of elements using Quick sort.</h3>\n              <i>Quick sort is a comparison sort, meaning that it can sort items of any type for\n                which a \"less-than\" relation is defined.</i>\n              <br />\n              <img src={Sort1} alt=\"\" className=\"responsive\" style={redesign} />\n              <img src={Sort2} alt=\"\" className=\"responsive\" style={redesign} />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={SortAlgo}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h2>Write a JavaScript program to sort a list of elements using Merge sort.</h2>\n              <i>Merge sort is an O (n log n) comparison-based sorting algorithm.\n                <br />\n                Divide the unsorted list into n sublists, each containing 1 element.\n                <br />\n                Repeatedly merge sublists to produce new sorted sublists until there is only 1 sublist\n                remaining. This will be the sorted list\n              </i>\n              <div style={titles}>\n                <PrismCode\n                  code={mergeSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>Write a JavaScript program to sort a list of elements using Heap sort.</h3>\n              Worst-case O(n log n) runtime\n              <div style={titles}>\n                <PrismCode\n                  code={heapSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>Write a JavaScript program to sort a list of elements using Insertion sort.</h3>\n              <div style={titles}>\n                <img src={Insertion} alt=\"\" className=\"responsive\" />\n                <PrismCode\n                  code={insertion}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>Write a JavaScript program to sort a list of elements using the Selection sort.</h3>\n              <i>The selection sort improves on the bubble sort by making only one exchange for\n                every pass through the list</i>\n              <div style={titles}>\n                <img src={Selection} alt=\"\" className=\"responsive\" style={redesign} />\n                <PrismCode\n                  code={selectionSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>Write a JavaScript program to sort a list of elements using Bubble sort.</h3>\n              <i>It is a simple sorting algorithm that repeatedly steps through the list to be sorted,\n                compares each pair of adjacent items and swaps them if they are in the wrong order</i>\n              <div style={titles}>\n                <img src={Bubble} alt=\"\" className=\"responsive\" />\n                <PrismCode\n                  code={bubbleSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Sort));\n"]},"metadata":{},"sourceType":"module"}