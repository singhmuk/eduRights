{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/flows.js\";\nimport React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\nconst titles = {\n  backgroundColor: \"#F0F8FF\",\n  padding: \"1px\",\n  fontSize: \"16px\"\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst basicRouter = `\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule, PreloadAllModules } from '@angular/router';\nimport { LoginComponent } from './customer/login.component';\nimport { SignupComponent } from './order/signup.component';\n\nconst routes: Routes = [\n  {\n    path:'login', component:LoginComponent\n  },\n  {\n    path:'signup', component:SignupComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n\n//\n<a routerLink='login'>Login</a>\n<a routerLink='signup'>Signp</a>\n\n<router-outlet></router-outlet>\n`.trim();\nconst counters = `\n<a routerLink=\"/home\">Home</a>\n\n\n//also use the routerLink directive to navigate to a specific route with parameters. \n<a [routerLink]=\"['/product', productId]\">Product Details</a>\n`.trim();\nconst addcomponents = `\nrouter.navigateByUrl(\"/team/33/user/11\");\n\n// Navigate without updating the URL\nrouter.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n`.trim();\nconst routerLink = `\n<my-tile [routerLink]=\"['/secondPage', item.id, 'item-list']\" *ngFor=\"let item of listaOfItem\" [item]=\"item\">\n</my-tile>\n`.trim();\nconst javaScriptExp = `\n‘{{ someExpression() }}’\n`.trim();\nconst CanActivate = `\nimport { Injectable } from '@angular/core';\nimport { Router, CanActivate } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class AuthGuardService implements CanActivate {\n  constructor(public auth: AuthService, public router: Router) {}\n  canActivate(): boolean {\n    if (!this.auth.isAuthenticated()) {\n      this.router.navigate(['login']);\n      return false;\n    }\n    return true;\n  }\n}\n`.trim();\nconst purpose = `\n<base href=\"/\">\n`.trim();\nconst angularRouter = `import { RouterModule, Routes } from '@angular/router';`.trim();\nconst routerState = `\n@Component({templateUrl:'template.html'})\nclass MyComponent {\n  constructor(router: Router) {\n    const state: RouterState = router.routerState;\n    const root: ActivatedRoute = state.root;\n    const child = root.firstChild;\n    const id: Observable<string> = child.params.map(p => p.id);\n    //...\n  }\n}`.trim();\nconst multipleRoute = `\nconst routes: Routes = [\n  {\n    path:\"\", \n    component:HomeComponent\n  },\n  {\n    path:\"about\", redirectTo:\"signup\", pathMatch:\"full\"\n    // component:AboutComponent\n  },\n  {\n    path:'profile/:username', component:ProfileComponent\n  },\n  {\n    path:'profile/:username/:userid', component:ProfileComponent\n  }\n];\n\n\n//about.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport {ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.css']\n})\nexport class AboutComponent implements OnInit {\nusername=\"\";\n  name1=\"\";\n  name2=\"\";\n  userid1=\"\";\n  userid2=\"\";\n  constructor( private route: ActivatedRoute, ) {}\n \n\n  ngOnInit(): void {\n\n    this.route.params.subscribe(params => {      //pass data as parameter\nconsole.log(params);\n      this.name1 = params['username'];\n      this.userid1=params['userid'];\n    });\n\n\n    this.route.queryParams.subscribe(params => {  //pass data as query string parameter\n      console.log(params);\n            this.name2 = params['username'];\n            this.userid2=params['userid'];\n          });\n  }\n}\n\n\n//browser url show through template\n<h1>Parameter User Profile</h1>\n<h2>Username:{{name1}}</h2>\n<h2>User ID:{{userid1}}</h2>\n`.trim();\nconst currentRoute = `\n<router-outlet></router-outlet>                          //Unnamed router outlet as primary outlet\n<router-outlet name=\"second\"></router-outlet>            //named router outlet as secondary outlet\n\n\n//app-routing.module.ts\nconst routes: Routes = [\n  {\n    path:'customer', loadChildren:()=>import('./customer/customer.module')\n  .then(mod=>mod.CustomerModule),\n  component:CustomerComponent\n  },\n  {\n    path:'customerdetails', \n  component:CudtomerdetailsComponent,\n  outlet:'customerList'\n  },\n  {\n    path:'order', loadChildren:()=>import('./order/order.module')\n  .then(mod=>mod.OrderModule),\n  component:OrderComponent\n  }\n];\n\n\n//app.component.ts\nimport {UserdataService} from './userdata.service';\n\n@Component({\n  selector: 'app-root',\n  template: '\n      <a routerLink=\"customer\">Customer</a><br/>\n      <a [routerLink]=\"[{Outlets:{customerList:['customerdetails']}}]\">Details</a><br/>\n\n      <a routerLink=\"order\">Order</a>\n\n      <router-outlet></router-outlet>\n      <router-outlet name=\"customerList\"></router-outlet>\n  ',\n  providers:[UserdataService]\n})\n\nexport class AppComponent {}\n`.trim();\nconst routerLinkActive = `\n<a routerLink=\"/\" routerLinkActive=\"active\" [routerLinkActiveOptions]=\"{exact:true}\">Home</a><br/>\n<a routerLink=\"/about\" routerLinkActive=\"active\">About</a><br/>\n<a routerLink=\"/login\" routerLinkActive=\"active\">Login</a><br/>\n<a routerLink=\"/signup\" routerLinkActive=\"active\">SignUp</a><br/>\n<a routerLink=\"/profile\" routerLinkActive=\"active\">Profile</a>\n`.trim();\nconst outerOutlet = `\n<router-outlet name=\"primary\"></router-outlet>\n<router-outlet name=\"secondary\"></router-outlet>\n\n\n//You can then configure your routes to use the appropriate outlet by specifying the outlet \n//property in the route definition. \nconst routes: Routes = [\n  { path: 'route1', component: Component1, outlet: 'primary' },\n  { path: 'route2', component: Component2, outlet: 'secondary' },\n];\n`.trim();\nconst routrtDetect = `\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-my-component',\n  template: '<p>Current route: {{ currentRoute }}</p>'\n})\nexport class MyComponent implements OnInit {\n  currentRoute: string;\n\n  constructor(private route: ActivatedRoute) {}\n\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      this.currentRoute = params['id'];\n      console.log('Route changed to: ', this.currentRoute);\n    });\n  }\n}\n`.trim();\n\nclass NgrxCounter extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, \"Basic Routing\"), \"Router basically means navigating b/w pages. we have seen many sites with links that direct us to a new page.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: basicRouter,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, \"Routing with multiple route parameter\"), \"We should define custome route before wildcard route. Otherwise it not work if we define after wildcard route.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: multipleRoute,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, \"Name & Multiple router-outlets\"), \"Router-outlet work as a placeholder which is used to los\\\\ad the different components dynamically based on the activated component or current route state.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: currentRoute,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, \"routerLinkActive\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: routerLinkActive,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, \"2. What are the router imports\"), \"The router imports in Angular are used to configure and manage the application's routing functionality. The following are some of the router imports in Angular:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, \"RouterModule: \"), \"This is the core Angular module that provides the routing functionality for the application. It includes several classes and methods for configuring routes, navigating between routes, and handling route-related events.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, \"Routes: \"), \"This is an array of route objects that define the application's routing configuration. Each route object specifies a path, a component, and other optional properties such as data, guards, and resolvers.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, \"Router: \"), \"This is the Angular service that provides methods for navigating between routes, accessing the current route, and subscribing to route-related events.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, \"ActivatedRoute: \"), \"This is a service that provides information about the current route, including the route parameters, query parameters, and route data.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, \"RouterLink: \"), \"This is a directive that is used in HTML templates to create links between routes. It takes a path as input and generates a link to the corresponding route.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, \"RouterOutlet: \"), \"This is a directive that is used in HTML templates to define the location where the component corresponding to the current route should be displayed.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, \"These router imports are essential for setting up the routing functionality in an Angular application. By configuring the routes, using the router and activated route services, and utilizing the router link and outlet directives, developers can create a seamless and intuitive user experience for their application.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: angularRouter,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, \"3. What are Router Events\"), \"Router Events in Angular are a set of events emitted by the Angular Router whenever the navigation state changes. The Router Events provide a way to track and respond to changes in the application's navigation, and they can be used to perform tasks such as updating the UI, tracking user behavior, or logging navigation events.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }, \"NavigationStart: \"), \"Emitted when navigation starts.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, \"RoutesRecognized: \"), \"Emitted when the Router has recognized the new route and is about to activate it.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }, \"RouteConfigLoadStart: \"), \"Emitted when the Router begins loading a lazy-loaded route configuration.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, \"RouteConfigLoadEnd: \"), \"Emitted when the Router has finished loading a lazy-loaded route configuration.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }, \"NavigationEnd: \"), \"Emitted when navigation has successfully completed.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }, \"NavigationCancel: \"), \"Emitted when navigation has been cancelled.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }, \"NavigationError: \"), \"Emitted when navigation has failed due to an error.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }, \"4. What is the use of router-outlet in angular 8.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }, \"Router outlet is a dynamic component that router uses to display views based on router navigations.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }, \"The RouterOutlet acts as a placeholder that marks the spot in the template where the router should display the components for that outlet. Router outlet is used like a component,\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }, \"It tells the router where to display routed views.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    }, \"5. Can I use multiple router outlets in Angular 8?\"), \"Yes, you can use multiple router outlets in Angular 8 (and newer versions). A router outlet is a directive that is used to define the location where the router will display the components that correspond to the current route.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    }), \"To use multiple router outlets, you can define them in your app's template using the router-outlet directive and provide them with a unique name using the name attribute. For example, you could define two router outlets with names \\\"primary\\\" and \\\"secondary\\\" like this:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: outerOutlet,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    }, \"6. How do you make a router link in HTML?\"), \"Linking Routes in HTML.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }, \"To make a router link in HTML in Angular, you can use the anchor tag with the routerLink directive.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: counters,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    }), \"Note that the routerLink directive is enclosed in square brackets to indicate that it is a binding expression. This allows you to dynamically generate the router link based on data in the component.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489\n      },\n      __self: this\n    }, \"7. Difference between navigate and navigatebyurl in angular.\"), \"navigateByUrl is similar to changing the location bar directly\\u2013we are providing the \\u201Cwhole\\u201D new URL. Whereas router. navigate creates a new URL by applying an array of passed-in commands, a patch, to the current URL.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: addcomponents,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }, \"8. How do you detect route change in Angular?\"), \"can detect route changes using the ActivatedRoute service and the Router module.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    }), \"One way to detect route changes is to subscribe to the params property of the ActivatedRoute service. This property is an observable that emits a new value whenever the route parameters change.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: routrtDetect,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }), \"the MyComponent class subscribes to the params observable of the ActivatedRoute service and sets the currentRoute property to the value of the id parameter. Whenever the route parameters change, the params observable emits a new value, which triggers the callback function in the subscribe() method.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    }, \"10. What is pathMatch in angular routing?\"), \"In Angular routing, pathMatch is a configuration option that determines how to match the URL segments to the configured route path.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }), \"The pathMatch option is used in conjunction with the path option in the Routes array to define the route path. There are two possible values for the pathMatch option:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }, \"prefix: \"), \"This value indicates that the router should match the configured route path if the URL starts with the specified path. This is the default value if pathMatch is not specified.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }, \"full: \"), \"This value indicates that the router should match the configured route path if the URL matches the entire path.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552\n      },\n      __self: this\n    }, \"11. Difference between Angular's canLoad and canActivate?\"), \"Both canLoad and canActivate are Angular route guards that can be used to protect routes in an Angular application, but they are used in different scenarios.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558\n      },\n      __self: this\n    }, \"canActivate: \"), \"is a route guard that is used to protect a route after it has been loaded. When a user navigates to a protected route, canActivate is called before the route is activated. canActivate returns either a boolean value or an observable that resolves to a boolean value. If canActivate returns true, the route is activated, and the user can proceed. If canActivate returns false, the route is not activated, and the user is redirected to a different page.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569\n      },\n      __self: this\n    }, \"canLoad: \"), \" is a route guard that is used to protect a route before it is loaded. When a user navigates to a route that requires lazy loading, canLoad is called before the module containing the route is loaded. canLoad returns either a boolean value or an observable that resolves to a boolean value. If canLoad returns true, the module is loaded, and the user can proceed. If canLoad returns false, the module is not loaded, and the user is redirected to a different page.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581\n      },\n      __self: this\n    }, \"14. What is router state\"), \"RouterState is a tree of activated routes. Every node in this tree knows about the \\\"consumed\\\" URL segments, the extracted parameters, and the resolved data.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585\n      },\n      __self: this\n    }), \"You can access the current RouterState from anywhere in the application using the Router service and the routerState property.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: routerState,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    }, \"16. How to specify which route to navigate to in NavLink?\"), \"To specify which route to navigate to, use the to prop and pass the path name. The activeClassName prop will add an active class to the link if it\\u2019s currently active. On the browser, the NavLink component is rendered as an tag with an href attribute value that was passed in the to prop.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604\n      },\n      __self: this\n    }, \"17. When to use absolute path in navigate method?\"), \"Navigate Method always uses the absolute path unless you provide a starting point. \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606\n      },\n      __self: this\n    }, \"navigate.navigateByUrl\"), \" Use this method if you want to navigate to a URL by using the absolute path. The first argument is a string containing the complete URL.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610\n      },\n      __self: this\n    }, \"18. What is Routing Guard in Angular?\"), \"Angular\\u2019s route guards tell the router whether or not it should allow navigation to a requested route. They make this decision by looking for a true or false return value from a class which implements the given guard interface.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616\n      },\n      __self: this\n    }), \"There are five different types of guards:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619\n      },\n      __self: this\n    }, \"CanActivate\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620\n      },\n      __self: this\n    }, \"CanActivateChild\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621\n      },\n      __self: this\n    }, \"CanDeactivate\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622\n      },\n      __self: this\n    }, \"CanLoad\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 623\n      },\n      __self: this\n    }, \"Resolve\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: CanActivate,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 633\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 634\n      },\n      __self: this\n    }, \"Some other available guards: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 635\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637\n      },\n      __self: this\n    }, \"CanActivate: \"), \"Check if a user has access\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640\n      },\n      __self: this\n    }, \"CanActivateChild: \"), \"Check if a user has access to any of the child routes\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 643\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644\n      },\n      __self: this\n    }, \"CanDeactivate: \"), \"Can a user leave a page? For example, they haven't finished editing a post\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648\n      },\n      __self: this\n    }, \"Resolve: \"), \"Grab data before the route is instantiated\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 650\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 651\n      },\n      __self: this\n    }, \"CanLoad: \"), \"Check to see if we can load the routes assets\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }, \"20. What is the purpose of base href tag?\"), \"The routing application should add element to the index.html as the first child in the tag inorder to indicate how to compose navigation URLs. If app folder is the application root then you can set the href value as below.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: purpose,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668\n      },\n      __self: this\n    }, \"21. Pass complex JSON via routerLink.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: routerLink,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678\n      },\n      __self: this\n    }, \"26. Angular by default, uses client-side rendering for its applications. Can one make an angular application to render on the server-side?\"), \"Yes, with\\xA0Angular Universal, Angular application can render on the server-side.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 686\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687\n      },\n      __self: this\n    }, \"The advantages of using Angular Universal are :\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689\n      },\n      __self: this\n    }, \"First time users can instantly see a view of the application. This providing\\xA0better user experience.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 693\n      },\n      __self: this\n    }, \"Many search engines expect pages in plain HTML, thus, Universal can make sure that your content is available on every search engine, which leads to\\xA0better SEO.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698\n      },\n      __self: this\n    }, \"Any server-side rendered application\\xA0loads faster\\xA0since rendered pages are available to the browser sooner.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704\n      },\n      __self: this\n    }, \"27. How does one share data between components in Angular?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 707\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 708\n      },\n      __self: this\n    }, \"Parent to child using @Input decorator\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 709\n      },\n      __self: this\n    }, \"Child to parent using @ViewChild decorator\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 713\n      },\n      __self: this\n    }, \"@ViewChild: \"), \"decorator is used to reference the child component as \\u201Cchild\\u201D property.\"))), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 718\n      },\n      __self: this\n    }, \"Child to parent using @Output and EventEmitter\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 720\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 721\n      },\n      __self: this\n    }, \"28. What are filters in Angular? Name a few of them.\"), \"Filters are used to format an expression and present it to the user.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725\n      },\n      __self: this\n    }, \"Date\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 726\n      },\n      __self: this\n    }, \"filter\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 727\n      },\n      __self: this\n    }, \"Json\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 728\n      },\n      __self: this\n    }, \"limitTo\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 729\n      },\n      __self: this\n    }, \"lowercase\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732\n      },\n      __self: this\n    }, \"30. What type of DOM does Angular implement?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 733\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734\n      },\n      __self: this\n    }, \"DOM (Document Object Model) treats an XML or HTML document as a tree structure in which each node is an object representing a part of the document.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 739\n      },\n      __self: this\n    }, \"Angular uses the regular DOM. This updates the entire tree structure of HTML tags until it reaches the data to be updated. However, to ensure that the speed and performance are not affected, Angular implements Change Detection.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 747\n      },\n      __self: this\n    }, \"31. What is DOM?\"), \"It is responsible for representing the content of a web page and changes in the architecture of an application. Here, all the objects are organized in the form of a tree, and the document can easily be modified, manipulated, and accessed only with the help of APIs.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754\n      },\n      __self: this\n    }, \"32. Shadow DOM\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 755\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 756\n      },\n      __self: this\n    }, \"Shadow DOM is a feature of web components that allows encapsulation of HTML, CSS, and JavaScript. In Angular, Shadow DOM is used to encapsulate component styles and HTML templates, ensuring that they do not leak out and affect other parts of the application.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 763\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 764\n      },\n      __self: this\n    }, \"When a component is created in Angular, it is rendered within a Shadow DOM root. The Shadow DOM root is a separate DOM tree that is attached to the main document's DOM tree, but is not part of it. This allows the component to have its own isolated CSS styles and HTML structure, which cannot be affected by styles or elements outside of the component.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 772\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 773\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 774\n      },\n      __self: this\n    }, \"Angular uses the ViewEncapsulation metadata property to control how a component's styles are encapsulated. There are three values that can be set for this property:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 779\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 780\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 781\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 782\n      },\n      __self: this\n    }, \"Emulated: \"), \"This is the default value, and it emulates the behavior of Shadow DOM by adding unique CSS selectors to the component's styles, making it more difficult for them to be overridden by external styles.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 787\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 788\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 789\n      },\n      __self: this\n    }, \"Native: \"), \" This value uses the native Shadow DOM implementation to encapsulate a component's styles. This means that the component's styles are completely isolated from the rest of the application, but it may not be fully supported in all browsers.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 795\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 796\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 797\n      },\n      __self: this\n    }, \"None: \"), \"This value disables encapsulation and allows a component's styles to be applied globally, potentially affecting other parts of the application.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 803\n      },\n      __self: this\n    }), \"Overall, Shadow DOM in Angular provides a powerful way to encapsulate component styles and templates, ensuring that they do not leak out and affect other parts of the application. By using the ViewEncapsulation metadata property, developers can control how a component's styles are encapsulated, and ensure that they behave as expected.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 810\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 811\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 812\n      },\n      __self: this\n    }, \"34. What is server-side rendering in Angular?\"), \"If we have a large application with a big bundle size, our page\\u2019s load speed is slowed down quite a bit as it needs to download all the files, parse JavaScript, and then execute it. To overcome this slowness, we can use server-side rendering, which allows us to send a fully rendered page from the server that the browser can display and then let the JavaScript code take over any subsequent interactions from the user.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 820\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 821\n      },\n      __self: this\n    }, \"35. What is Angular Universal?\"), \"Angular Universal is a package for enabling server-side rendering in Angular applications. We can easily make our application ready for server-side rendering using the Angular CLI.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 825\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 826\n      },\n      __self: this\n    }, \"ng add @nguniversal/express-engine\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 827\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 828\n      },\n      __self: this\n    }), \"This allows our Angular application to work well with an ExpressJS web server that compiles HTML pages with Angular Universal based on client requests. This also creates the server-side app module, app.server.module.ts, in our application directory.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 833\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 834\n      },\n      __self: this\n    }, \"36. What is the difference between interpolated content and the content assigned to the innerHTML property of a DOM element?\"), \"Angular interpolation happens when in our template we type some JavaScript expression inside double curly braces\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 840\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: javaScriptExp,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 841\n      },\n      __self: this\n    })), \". This is used to add dynamic content to a web page. However, we can do the same by assigning some dynamic content to the innerHTML property of a DOM element. The difference between the two is that, in Angular, the compiler always escapes the interpolated content, i.e., HTML is not interpreted, and the browser displays the code as it is with brackets and symbols, rather than displaying the output of the interpreted HTML. However, in innerHTML, if the content is HTML, then it is interpreted as the HTML code.\"))));\n  }\n\n}\n\nexport default withStyles(styles)(NgrxCounter);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/flows.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","basicRouter","trim","counters","addcomponents","routerLink","javaScriptExp","CanActivate","purpose","angularRouter","routerState","multipleRoute","currentRoute","routerLinkActive","outerOutlet","routrtDetect","NgrxCounter","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst basicRouter = `\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule, PreloadAllModules } from '@angular/router';\nimport { LoginComponent } from './customer/login.component';\nimport { SignupComponent } from './order/signup.component';\n\nconst routes: Routes = [\n  {\n    path:'login', component:LoginComponent\n  },\n  {\n    path:'signup', component:SignupComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n\n//\n<a routerLink='login'>Login</a>\n<a routerLink='signup'>Signp</a>\n\n<router-outlet></router-outlet>\n`.trim();\n\nconst counters = `\n<a routerLink=\"/home\">Home</a>\n\n\n//also use the routerLink directive to navigate to a specific route with parameters. \n<a [routerLink]=\"['/product', productId]\">Product Details</a>\n`.trim();\n\nconst addcomponents = `\nrouter.navigateByUrl(\"/team/33/user/11\");\n\n// Navigate without updating the URL\nrouter.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n`.trim();\n\nconst routerLink = `\n<my-tile [routerLink]=\"['/secondPage', item.id, 'item-list']\" *ngFor=\"let item of listaOfItem\" [item]=\"item\">\n</my-tile>\n`.trim();\n\nconst javaScriptExp = `\n‘{{ someExpression() }}’\n`.trim();\n\nconst CanActivate = `\nimport { Injectable } from '@angular/core';\nimport { Router, CanActivate } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class AuthGuardService implements CanActivate {\n  constructor(public auth: AuthService, public router: Router) {}\n  canActivate(): boolean {\n    if (!this.auth.isAuthenticated()) {\n      this.router.navigate(['login']);\n      return false;\n    }\n    return true;\n  }\n}\n`.trim();\n\nconst purpose = `\n<base href=\"/\">\n`.trim();\n\nconst angularRouter =\n  `import { RouterModule, Routes } from '@angular/router';`.trim();\n\nconst routerState = `\n@Component({templateUrl:'template.html'})\nclass MyComponent {\n  constructor(router: Router) {\n    const state: RouterState = router.routerState;\n    const root: ActivatedRoute = state.root;\n    const child = root.firstChild;\n    const id: Observable<string> = child.params.map(p => p.id);\n    //...\n  }\n}`.trim();\n\nconst multipleRoute = `\nconst routes: Routes = [\n  {\n    path:\"\", \n    component:HomeComponent\n  },\n  {\n    path:\"about\", redirectTo:\"signup\", pathMatch:\"full\"\n    // component:AboutComponent\n  },\n  {\n    path:'profile/:username', component:ProfileComponent\n  },\n  {\n    path:'profile/:username/:userid', component:ProfileComponent\n  }\n];\n\n\n//about.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport {ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.css']\n})\nexport class AboutComponent implements OnInit {\nusername=\"\";\n  name1=\"\";\n  name2=\"\";\n  userid1=\"\";\n  userid2=\"\";\n  constructor( private route: ActivatedRoute, ) {}\n \n\n  ngOnInit(): void {\n\n    this.route.params.subscribe(params => {      //pass data as parameter\nconsole.log(params);\n      this.name1 = params['username'];\n      this.userid1=params['userid'];\n    });\n\n\n    this.route.queryParams.subscribe(params => {  //pass data as query string parameter\n      console.log(params);\n            this.name2 = params['username'];\n            this.userid2=params['userid'];\n          });\n  }\n}\n\n\n//browser url show through template\n<h1>Parameter User Profile</h1>\n<h2>Username:{{name1}}</h2>\n<h2>User ID:{{userid1}}</h2>\n`.trim();\n\nconst currentRoute = `\n<router-outlet></router-outlet>                          //Unnamed router outlet as primary outlet\n<router-outlet name=\"second\"></router-outlet>            //named router outlet as secondary outlet\n\n\n//app-routing.module.ts\nconst routes: Routes = [\n  {\n    path:'customer', loadChildren:()=>import('./customer/customer.module')\n  .then(mod=>mod.CustomerModule),\n  component:CustomerComponent\n  },\n  {\n    path:'customerdetails', \n  component:CudtomerdetailsComponent,\n  outlet:'customerList'\n  },\n  {\n    path:'order', loadChildren:()=>import('./order/order.module')\n  .then(mod=>mod.OrderModule),\n  component:OrderComponent\n  }\n];\n\n\n//app.component.ts\nimport {UserdataService} from './userdata.service';\n\n@Component({\n  selector: 'app-root',\n  template: '\n      <a routerLink=\"customer\">Customer</a><br/>\n      <a [routerLink]=\"[{Outlets:{customerList:['customerdetails']}}]\">Details</a><br/>\n\n      <a routerLink=\"order\">Order</a>\n\n      <router-outlet></router-outlet>\n      <router-outlet name=\"customerList\"></router-outlet>\n  ',\n  providers:[UserdataService]\n})\n\nexport class AppComponent {}\n`.trim();\n\nconst routerLinkActive = `\n<a routerLink=\"/\" routerLinkActive=\"active\" [routerLinkActiveOptions]=\"{exact:true}\">Home</a><br/>\n<a routerLink=\"/about\" routerLinkActive=\"active\">About</a><br/>\n<a routerLink=\"/login\" routerLinkActive=\"active\">Login</a><br/>\n<a routerLink=\"/signup\" routerLinkActive=\"active\">SignUp</a><br/>\n<a routerLink=\"/profile\" routerLinkActive=\"active\">Profile</a>\n`.trim();\n\nconst outerOutlet = `\n<router-outlet name=\"primary\"></router-outlet>\n<router-outlet name=\"secondary\"></router-outlet>\n\n\n//You can then configure your routes to use the appropriate outlet by specifying the outlet \n//property in the route definition. \nconst routes: Routes = [\n  { path: 'route1', component: Component1, outlet: 'primary' },\n  { path: 'route2', component: Component2, outlet: 'secondary' },\n];\n`.trim();\n\nconst routrtDetect = `\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-my-component',\n  template: '<p>Current route: {{ currentRoute }}</p>'\n})\nexport class MyComponent implements OnInit {\n  currentRoute: string;\n\n  constructor(private route: ActivatedRoute) {}\n\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      this.currentRoute = params['id'];\n      console.log('Route changed to: ', this.currentRoute);\n    });\n  }\n}\n`.trim();\n\nclass NgrxCounter extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Basic Routing</h3>\n              Router basically means navigating b/w pages. we have seen many\n              sites with links that direct us to a new page.\n              <div style={titles}>\n                <PrismCode\n                  code={basicRouter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Routing with multiple route parameter</h3>\n              We should define custome route before wildcard route. Otherwise it\n              not work if we define after wildcard route.\n              <div style={titles}>\n                <PrismCode\n                  code={multipleRoute}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Name & Multiple router-outlets</h3>\n              Router-outlet work as a placeholder which is used to los\\ad the\n              different components dynamically based on the activated component\n              or current route state.\n              <div style={titles}>\n                <PrismCode\n                  code={currentRoute}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>routerLinkActive</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={routerLinkActive}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>2. What are the router imports</h3>\n              The router imports in Angular are used to configure and manage the\n              application's routing functionality. The following are some of the\n              router imports in Angular:\n              <br />\n              <ul>\n                <li>\n                  <b>RouterModule: </b>This is the core Angular module that\n                  provides the routing functionality for the application. It\n                  includes several classes and methods for configuring routes,\n                  navigating between routes, and handling route-related events.\n                </li>\n                <br />\n                <li>\n                  <b>Routes: </b>This is an array of route objects that define\n                  the application's routing configuration. Each route object\n                  specifies a path, a component, and other optional properties\n                  such as data, guards, and resolvers.\n                </li>\n                <br />\n                <li>\n                  <b>Router: </b>This is the Angular service that provides\n                  methods for navigating between routes, accessing the current\n                  route, and subscribing to route-related events.\n                </li>\n                <br />\n                <li>\n                  <b>ActivatedRoute: </b>This is a service that provides\n                  information about the current route, including the route\n                  parameters, query parameters, and route data.\n                </li>\n                <br />\n                <li>\n                  <b>RouterLink: </b>This is a directive that is used in HTML\n                  templates to create links between routes. It takes a path as\n                  input and generates a link to the corresponding route.\n                </li>\n                <br />\n                <li>\n                  <b>RouterOutlet: </b>This is a directive that is used in HTML\n                  templates to define the location where the component\n                  corresponding to the current route should be displayed.\n                </li>\n                <br />\n                <br />\n                <li>\n                  These router imports are essential for setting up the routing\n                  functionality in an Angular application. By configuring the\n                  routes, using the router and activated route services, and\n                  utilizing the router link and outlet directives, developers\n                  can create a seamless and intuitive user experience for their\n                  application.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={angularRouter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <h3>3. What are Router Events</h3>\n              Router Events in Angular are a set of events emitted by the\n              Angular Router whenever the navigation state changes. The Router\n              Events provide a way to track and respond to changes in the\n              application's navigation, and they can be used to perform tasks\n              such as updating the UI, tracking user behavior, or logging\n              navigation events.\n              <br />\n              <ul>\n                <li>\n                  <b>NavigationStart: </b>Emitted when navigation starts.\n                </li>\n                <br />\n                <li>\n                  <b>RoutesRecognized: </b>Emitted when the Router has\n                  recognized the new route and is about to activate it.\n                </li>\n                <br />\n                <li>\n                  <b>RouteConfigLoadStart: </b>Emitted when the Router begins\n                  loading a lazy-loaded route configuration.\n                </li>\n                <br />\n                <li>\n                  <b>RouteConfigLoadEnd: </b>Emitted when the Router has\n                  finished loading a lazy-loaded route configuration.\n                </li>\n                <br />\n                <li>\n                  <b>NavigationEnd: </b>Emitted when navigation has successfully\n                  completed.\n                </li>\n                <br />\n                <li>\n                  <b>NavigationCancel: </b>Emitted when navigation has been\n                  cancelled.\n                </li>\n                <br />\n                <li>\n                  <b>NavigationError: </b>Emitted when navigation has failed due\n                  to an error.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>4. What is the use of router-outlet in angular 8.</h3>\n              <ul>\n                <li>\n                  Router outlet is a dynamic component that router uses to\n                  display views based on router navigations.\n                </li>\n                <br />\n                <li>\n                  The RouterOutlet acts as a placeholder that marks the spot in\n                  the template where the router should display the components\n                  for that outlet. Router outlet is used like a component,\n                </li>\n                <br />\n                <li>It tells the router where to display routed views.</li>\n              </ul>\n              <br />\n              <h3>5. Can I use multiple router outlets in Angular 8?</h3>\n              Yes, you can use multiple router outlets in Angular 8 (and newer\n              versions). A router outlet is a directive that is used to define\n              the location where the router will display the components that\n              correspond to the current route.\n              <br />\n              <br />\n              To use multiple router outlets, you can define them in your app's\n              template using the router-outlet directive and provide them with a\n              unique name using the name attribute. For example, you could\n              define two router outlets with names \"primary\" and \"secondary\"\n              like this:\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={outerOutlet}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>6. How do you make a router link in HTML?</h3>\n              Linking Routes in HTML.\n              <ol>\n                <li>\n                  To make a router link in HTML in Angular, you can use the\n                  anchor tag with the routerLink directive.\n                </li>\n              </ol>\n              <div style={titles}>\n                <PrismCode\n                  code={counters}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              Note that the routerLink directive is enclosed in square brackets\n              to indicate that it is a binding expression. This allows you to\n              dynamically generate the router link based on data in the\n              component.\n              <br />\n              <br />\n              <h3>\n                7. Difference between navigate and navigatebyurl in angular.\n              </h3>\n              navigateByUrl is similar to changing the location bar directly–we\n              are providing the “whole” new URL. Whereas router. navigate\n              creates a new URL by applying an array of passed-in commands, a\n              patch, to the current URL.\n              <div style={titles}>\n                <PrismCode\n                  code={addcomponents}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>8. How do you detect route change in Angular?</h3>\n              can detect route changes using the ActivatedRoute service and the\n              Router module.\n              <br />\n              <br />\n              One way to detect route changes is to subscribe to the params\n              property of the ActivatedRoute service. This property is an\n              observable that emits a new value whenever the route parameters\n              change.\n              <div style={titles}>\n                <PrismCode\n                  code={routrtDetect}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              the MyComponent class subscribes to the params observable of the\n              ActivatedRoute service and sets the currentRoute property to the\n              value of the id parameter. Whenever the route parameters change,\n              the params observable emits a new value, which triggers the\n              callback function in the subscribe() method.\n              <br />\n              <br />\n              <h3>10. What is pathMatch in angular routing?</h3>\n              In Angular routing, pathMatch is a configuration option that\n              determines how to match the URL segments to the configured route\n              path.\n              <br />\n              <br />\n              The pathMatch option is used in conjunction with the path option\n              in the Routes array to define the route path. There are two\n              possible values for the pathMatch option:\n              <ul>\n                <li>\n                  <b>prefix: </b>This value indicates that the router should\n                  match the configured route path if the URL starts with the\n                  specified path. This is the default value if pathMatch is not\n                  specified.\n                </li>\n                <br />\n                <li>\n                  <b>full: </b>This value indicates that the router should match\n                  the configured route path if the URL matches the entire path.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>11. Difference between Angular's canLoad and canActivate?</h3>\n              Both canLoad and canActivate are Angular route guards that can be\n              used to protect routes in an Angular application, but they are\n              used in different scenarios.\n              <ul>\n                <li>\n                  <b>canActivate: </b>is a route guard that is used to protect a\n                  route after it has been loaded. When a user navigates to a\n                  protected route, canActivate is called before the route is\n                  activated. canActivate returns either a boolean value or an\n                  observable that resolves to a boolean value. If canActivate\n                  returns true, the route is activated, and the user can\n                  proceed. If canActivate returns false, the route is not\n                  activated, and the user is redirected to a different page.\n                </li>\n                <br />\n                <li>\n                  <b>canLoad: </b> is a route guard that is used to protect a\n                  route before it is loaded. When a user navigates to a route\n                  that requires lazy loading, canLoad is called before the\n                  module containing the route is loaded. canLoad returns either\n                  a boolean value or an observable that resolves to a boolean\n                  value. If canLoad returns true, the module is loaded, and the\n                  user can proceed. If canLoad returns false, the module is not\n                  loaded, and the user is redirected to a different page.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>14. What is router state</h3>\n              RouterState is a tree of activated routes. Every node in this tree\n              knows about the \"consumed\" URL segments, the extracted parameters,\n              and the resolved data.\n              <br />\n              You can access the current RouterState from anywhere in the\n              application using the Router service and the routerState property.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={routerState}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>16. How to specify which route to navigate to in NavLink?</h3>\n              To specify which route to navigate to, use the to prop and pass\n              the path name. The activeClassName prop will add an active class\n              to the link if it’s currently active. On the browser, the NavLink\n              component is rendered as an tag with an href attribute value that\n              was passed in the to prop.\n              <br />\n              <h3>17. When to use absolute path in navigate method?</h3>\n              Navigate Method always uses the absolute path unless you provide a\n              starting point. <b>navigate.navigateByUrl</b> Use this method if\n              you want to navigate to a URL by using the absolute path. The\n              first argument is a string containing the complete URL.\n              <br />\n              <h3>18. What is Routing Guard in Angular?</h3>\n              Angular’s route guards tell the router whether or not it should\n              allow navigation to a requested route. They make this decision by\n              looking for a true or false return value from a class which\n              implements the given guard interface.\n              <br />\n              <br />\n              There are five different types of guards:\n              <ul>\n                <li>CanActivate</li>\n                <li>CanActivateChild</li>\n                <li>CanDeactivate</li>\n                <li>CanLoad</li>\n                <li>Resolve</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={CanActivate}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Some other available guards: </b>\n              <ul>\n                <li>\n                  <b>CanActivate: </b>Check if a user has access\n                </li>\n                <li>\n                  <b>CanActivateChild: </b>Check if a user has access to any of\n                  the child routes\n                </li>\n                <li>\n                  <b>CanDeactivate: </b>Can a user leave a page? For example,\n                  they haven't finished editing a post\n                </li>\n                <li>\n                  <b>Resolve: </b>Grab data before the route is instantiated\n                </li>\n                <li>\n                  <b>CanLoad: </b>Check to see if we can load the routes assets\n                </li>\n              </ul>\n              <br />\n              <h3>20. What is the purpose of base href tag?</h3>\n              The routing application should add element to the index.html as\n              the first child in the tag inorder to indicate how to compose\n              navigation URLs. If app folder is the application root then you\n              can set the href value as below.\n              <div style={titles}>\n                <PrismCode\n                  code={purpose}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>21. Pass complex JSON via routerLink.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={routerLink}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>\n                26. Angular by default, uses client-side rendering for its\n                applications. Can one make an angular application to render on\n                the server-side?\n              </h3>\n              Yes, with Angular Universal, Angular application can render on the\n              server-side.\n              <br />\n              <br />\n              <b>The advantages of using Angular Universal are :</b>\n              <ul>\n                <li>\n                  First time users can instantly see a view of the application.\n                  This providing better user experience.\n                </li>\n                <li>\n                  Many search engines expect pages in plain HTML, thus,\n                  Universal can make sure that your content is available on\n                  every search engine, which leads to better SEO.\n                </li>\n                <li>\n                  Any server-side rendered application loads faster since\n                  rendered pages are available to the browser sooner.\n                </li>\n              </ul>\n              <br />\n              <h3>\n                27. How does one share data between components in Angular?\n              </h3>\n              <ul>\n                <li>Parent to child using @Input decorator</li>\n                <li>\n                  Child to parent using @ViewChild decorator\n                  <ul>\n                    <li>\n                      <b>@ViewChild: </b>decorator is used to reference the\n                      child component as “child” property.\n                    </li>\n                  </ul>\n                </li>\n                <li>Child to parent using @Output and EventEmitter</li>\n              </ul>\n              <br />\n              <h3>28. What are filters in Angular? Name a few of them.</h3>\n              Filters are used to format an expression and present it to the\n              user.\n              <ol>\n                <li>Date</li>\n                <li>filter</li>\n                <li>Json</li>\n                <li>limitTo</li>\n                <li>lowercase</li>\n              </ol>\n              <br />\n              <h3>30. What type of DOM does Angular implement?</h3>\n              <ul>\n                <li>\n                  DOM (Document Object Model) treats an XML or HTML document as\n                  a tree structure in which each node is an object representing\n                  a part of the document.\n                </li>\n                <li>\n                  Angular uses the regular DOM. This updates the entire tree\n                  structure of HTML tags until it reaches the data to be\n                  updated. However, to ensure that the speed and performance are\n                  not affected, Angular implements Change Detection.\n                </li>\n              </ul>\n              <br />\n              <h3>31. What is DOM?</h3>\n              It is responsible for representing the content of a web page and\n              changes in the architecture of an application. Here, all the\n              objects are organized in the form of a tree, and the document can\n              easily be modified, manipulated, and accessed only with the help\n              of APIs.\n              <br />\n              <h3>32. Shadow DOM</h3>\n              <ul>\n                <li>\n                  Shadow DOM is a feature of web components that allows\n                  encapsulation of HTML, CSS, and JavaScript. In Angular, Shadow\n                  DOM is used to encapsulate component styles and HTML\n                  templates, ensuring that they do not leak out and affect other\n                  parts of the application.\n                </li>\n                <br />\n                <li>\n                  When a component is created in Angular, it is rendered within\n                  a Shadow DOM root. The Shadow DOM root is a separate DOM tree\n                  that is attached to the main document's DOM tree, but is not\n                  part of it. This allows the component to have its own isolated\n                  CSS styles and HTML structure, which cannot be affected by\n                  styles or elements outside of the component.\n                </li>\n                <br />\n                <br />\n                <li>\n                  Angular uses the ViewEncapsulation metadata property to\n                  control how a component's styles are encapsulated. There are\n                  three values that can be set for this property:\n                </li>\n                <br />\n                <ul>\n                  <li>\n                    <b>Emulated: </b>This is the default value, and it emulates\n                    the behavior of Shadow DOM by adding unique CSS selectors to\n                    the component's styles, making it more difficult for them to\n                    be overridden by external styles.\n                  </li>\n                  <br />\n                  <li>\n                    <b>Native: </b> This value uses the native Shadow DOM\n                    implementation to encapsulate a component's styles. This\n                    means that the component's styles are completely isolated\n                    from the rest of the application, but it may not be fully\n                    supported in all browsers.\n                  </li>\n                  <br />\n                  <li>\n                    <b>None: </b>This value disables encapsulation and allows a\n                    component's styles to be applied globally, potentially\n                    affecting other parts of the application.\n                  </li>\n                </ul>\n              </ul>\n              <br />\n              Overall, Shadow DOM in Angular provides a powerful way to\n              encapsulate component styles and templates, ensuring that they do\n              not leak out and affect other parts of the application. By using\n              the ViewEncapsulation metadata property, developers can control\n              how a component's styles are encapsulated, and ensure that they\n              behave as expected.\n              <br />\n              <br />\n              <h3>34. What is server-side rendering in Angular?</h3>\n              If we have a large application with a big bundle size, our page’s\n              load speed is slowed down quite a bit as it needs to download all\n              the files, parse JavaScript, and then execute it. To overcome this\n              slowness, we can use server-side rendering, which allows us to\n              send a fully rendered page from the server that the browser can\n              display and then let the JavaScript code take over any subsequent\n              interactions from the user.\n              <br />\n              <h3>35. What is Angular Universal?</h3>\n              Angular Universal is a package for enabling server-side rendering\n              in Angular applications. We can easily make our application ready\n              for server-side rendering using the Angular CLI.\n              <br />\n              <b>ng add @nguniversal/express-engine</b>\n              <br />\n              <br />\n              This allows our Angular application to work well with an ExpressJS\n              web server that compiles HTML pages with Angular Universal based\n              on client requests. This also creates the server-side app module,\n              app.server.module.ts, in our application directory.\n              <br />\n              <h3>\n                36. What is the difference between interpolated content and the\n                content assigned to the innerHTML property of a DOM element?\n              </h3>\n              Angular interpolation happens when in our template we type some\n              JavaScript expression inside double curly braces\n              <div style={titles}>\n                <PrismCode\n                  code={javaScriptExp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              . This is used to add dynamic content to a web page. However, we\n              can do the same by assigning some dynamic content to the innerHTML\n              property of a DOM element. The difference between the two is that,\n              in Angular, the compiler always escapes the interpolated content,\n              i.e., HTML is not interpreted, and the browser displays the code\n              as it is with brackets and symbols, rather than displaying the\n              output of the interpreted HTML. However, in innerHTML, if the\n              content is HTML, then it is interpreted as the HTML code.\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(NgrxCounter);\n"]},"metadata":{},"sourceType":"module"}