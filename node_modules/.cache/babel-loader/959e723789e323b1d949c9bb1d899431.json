{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';import Stcksval from'../../../assets/stcks.png';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var redesign={height:200,width:500};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var rotate=\"\\nfunction rotate (matrix = []){\\n  const n = matrix.length\\n\\n  for (let i = 0; i < Math.floor(n / 2); i++) {\\n    const temp = matrix[i]\\n    matrix[i] = matrix[n - 1 - i]\\n    matrix[n - 1 - i] = temp\\n  }\\n  \\n  for (let i = 0; i < n; i++) {\\n    for (let j = i + 1; j < n; j++) {\\n      const temp = matrix[i][j]\\n      matrix[i][j] = matrix[j][i]\\n      matrix[j][i] = temp\\n    }\\n  }\\n  return matrix\\n}\\n\\nconsole.log(rotate([[1,2,3],[4,5,6],[7,8,9]]))\\n\".trim();var groupAnagrams=\"\\nfunction groupAnagrams(strs) {\\n  const sortStr = str => str.split('').sort((a, b) => a.localeCompare(b)).join('')\\n\\n  const sortedMap = strs.map(sortStr).reduce((map, current, index) => {\\n      if (map[current]) {\\n        map[current].push(strs[index])\\n      } \\n      else {\\n        map[current] = [strs[index]]\\n      }\\n      return map\\n    },\\n    {},\\n  )\\n\\n  return Object.keys(sortedMap).map(key => sortedMap[key])\\n}\\n\\nconsole.log(groupAnagrams([\\\"eat\\\",\\\"tea\\\",\\\"tan\\\",\\\"ate\\\",\\\"nat\\\",\\\"bat\\\"]))\\n\".trim();var binaryMatrix=\"\\nfunction shorPath(grid) {\\n  let n = grid.length - 1;\\n  let q = [0]\\n  \\n  if (grid[0][0] || grid[n][n]) return -1\\n  \\n  grid[0][0] = 1\\n  while (q.length) {\\n      let curr = q.shift();\\n      let i = curr & (1 << 7) - 1;\\n      let j = curr >> 7;\\n      \\n      if (i === n && j === n) return grid[n][n]\\n      for (let a = Math.max(i-1,0); a <= Math.min(i+1,n); a++){\\n          for (let b = Math.max(j-1,0); b <= Math.min(j+1,n); b++){\\n              if (grid[a][b] === 0){\\n                  grid[a][b] = grid[i][j] + 1, q.push(a + (b << 7))\\n                  }\\n                }\\n              }\\n            }\\n            return -1\\n          };\\n  \\n  console.log(shorPath([[0,0,0],[1,1,0],[1,1,0]]));\".trim();var spiralOrder=\"\\nfunction spiralOrder(matrix) {\\n  let result = []\\n  if(!matrix.length) return result;\\n  \\n  let rowMin = 0\\n  let rowMax = matrix.length -1\\n  let columnMin = 0\\n  let columnMax = matrix[0].length - 1\\n  \\n  let i = 0\\n  let j = 0\\n  let direction = \\\"right\\\"\\n\\n  while(result.length < matrix.length * matrix[0].length) {\\n    result.push(matrix[i][j])\\n      if(direction === \\\"right\\\") {\\n          if(j === columnMax) {\\n              rowMin += 1\\n              i = rowMin\\n              direction = \\\"down\\\"\\n          } else {\\n              j++\\n          }\\n      } else if(direction === \\\"down\\\") {\\n          if(i === rowMax) {\\n              direction = \\\"left\\\"\\n              columnMax -= 1\\n              j = columnMax\\n          } else {\\n              i++\\n          }\\n      } else if(direction === \\\"left\\\") {\\n\\n          if(j === columnMin) {\\n              direction = \\\"up\\\"\\n              rowMax -= 1\\n               i = rowMax\\n          } else {\\n              j--\\n          }\\n      } else {\\n          if(i === rowMin) {\\n              direction = \\\"right\\\"\\n              columnMin += 1\\n               j = columnMin\\n          } else {\\n              i--\\n          }\\n      }\\n  }\\n\\n  return result \\n};\\n\\n\\nconsole.log(spiralOrder([\\n  [ 1, 2, 3 ],\\n  [ 4, 5, 6 ],\\n  [ 7, 8, 9 ]\\n ]))\\n\".trim();var uniquePaths=\"\\nfunction uniquePaths(m, n){\\n  const memo = {}\\n\\n  function aux(rowIndex, columnIndex){\\n    if (memo[rowIndex] !== undefined && memo[rowIndex][columnIndex] !== undefined) {\\n      return memo[rowIndex][columnIndex]\\n    }\\n\\n    if (rowIndex >= m || columnIndex >= n) return 0\\n    if (rowIndex === m - 1 && columnIndex === n - 1) return 1\\n\\n    memo[rowIndex] = memo[rowIndex] || {}\\n    memo[rowIndex][columnIndex] = aux(rowIndex + 1, columnIndex) + aux(rowIndex, columnIndex + 1)\\n    return memo[rowIndex][columnIndex]\\n  }\\n  \\n  return aux(0, 0)\\n}\\n\\nconsole.log(uniquePaths(7,3))\\n\".trim();var addBinary=\"\\nfunction addBinary(a, b) {\\n  const reverse = x => x.split('').reverse()\\n  \\n  const { shorter, longer } = a.length > b.length\\n                              ? { shorter: reverse(b), longer: reverse(a) }\\n                              : { shorter: reverse(a), longer: reverse(b) }\\n\\n  let reminder = 0\\n  const digits = longer.map((num1, index) => {\\n    let res = parseInt(num1, 10) + reminder + (parseInt(shorter[index], 10) ? parseInt(shorter[index], 10) : 0)\\n    if (res >= 2) {\\n      res -= 2\\n      reminder = 1\\n    } else {\\n      reminder = 0\\n    }\\n    return res\\n  })\\n  \\n  if (reminder === 1) {\\n    digits.push(reminder)\\n  }\\n  return digits.reverse().join('')\\n}\\n\\nconsole.log(addBinary(\\\"1010\\\", \\\"1011\\\"))\\n\".trim();var DSLogic3=/*#__PURE__*/function(_Component){_inherits(DSLogic3,_Component);function DSLogic3(){_classCallCheck(this,DSLogic3);return _possibleConstructorReturn(this,_getPrototypeOf(DSLogic3).apply(this,arguments));}_createClass(DSLogic3,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Rotate Image.\"),\"You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\",React.createElement(\"br\",null),\"You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Input: \"),\"matrix = [[1,2,3],[4,5,6],[7,8,9]]\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"[[7,4,1],[8,5,2],[9,6,3]]\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:rotate,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Group Anagrams.\"),\"Given an array of strings strs, group the anagrams together. You can return the answer in any order.\",React.createElement(\"br\",null),\"An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\",React.createElement(\"br\",null),\" \",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Input: \"),\"strs = [\\\"eat\\\",\\\"tea\\\",\\\"tan\\\",\\\"ate\\\",\\\"nat\\\",\\\"bat\\\"]\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"[[\\\"bat\\\"],[\\\"nat\\\",\\\"tan\\\"],[\\\"ate\\\",\\\"eat\\\",\\\"tea\\\"]]\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:groupAnagrams,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Shortest Path in Binary Matrix\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"In an N by N square grid, each cell is either empty (0) or blocked (1).\"),React.createElement(\"li\",null,\"A clear path from top-left to bottom-right has length k if and only if it is composed of cells C_1, C_2, ..., C_k such that:\"),\"1.Adjacent cells C_i and C_i+1 are connected 8-directionally (ie., they are different and share an edge or corner)\",React.createElement(\"br\",null),\"2.C_1 is at location (0, 0) (ie. has value grid[0][0])\",React.createElement(\"br\",null),\"3.C_k is at location (N-1, N-1) (ie. has value grid[N-1][N-1])\",React.createElement(\"br\",null),\"4.If C_i is located at (r, c), then grid[r][c] is empty (ie. grid[r][c] == 0).\",React.createElement(\"li\",null,\"Return the length of the shortest such clear path from top-left to bottom-right. If such a path does not exist, return -1.\")),React.createElement(\"b\",null,\"Input: \"),\"[[0,1],[1,0]], [[0,0,0],[1,1,0],[1,1,0]]\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"2, 4\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:binaryMatrix,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. Spiral Matrix.\"),React.createElement(\"b\",null,\"Input: \"),\"[ [ 1, 2, 3 ],\",React.createElement(\"br\",null),\"[ 4, 5, 6 ],\",React.createElement(\"br\",null),\"[ 7, 8, 9 ] ]\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"[1,2,3,6,9,8,7,4,5]\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:spiralOrder,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. Unique Paths.\"),\"A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\",React.createElement(\"br\",null),\"The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\",React.createElement(\"br\",null),\"How many possible unique paths are there? \",React.createElement(\"br\",null),\" \",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Input: \"),\"m = 7, n = 3\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"28\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:uniquePaths,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. Add Binary\"),\"Given two binary strings, return their sum (also a binary string).\",React.createElement(\"br\",null),\"The input strings are both non-empty and contains only characters 1 or 0.\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Input: \"),\"a = \\\"1010\\\", b = \\\"1011\\\"\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"\\\"10101\\\"\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:addBinary,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return DSLogic3;}(Component);export default withStyles(styles)(DSLogic3);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/nestingArrAlgo.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","rotate","trim","groupAnagrams","binaryMatrix","spiralOrder","uniquePaths","addBinary","DSLogic3","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst rotate = `\nfunction rotate (matrix = []){\n  const n = matrix.length\n\n  for (let i = 0; i < Math.floor(n / 2); i++) {\n    const temp = matrix[i]\n    matrix[i] = matrix[n - 1 - i]\n    matrix[n - 1 - i] = temp\n  }\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      const temp = matrix[i][j]\n      matrix[i][j] = matrix[j][i]\n      matrix[j][i] = temp\n    }\n  }\n  return matrix\n}\n\nconsole.log(rotate([[1,2,3],[4,5,6],[7,8,9]]))\n`.trim();\n\nconst groupAnagrams = `\nfunction groupAnagrams(strs) {\n  const sortStr = str => str.split('').sort((a, b) => a.localeCompare(b)).join('')\n\n  const sortedMap = strs.map(sortStr).reduce((map, current, index) => {\n      if (map[current]) {\n        map[current].push(strs[index])\n      } \n      else {\n        map[current] = [strs[index]]\n      }\n      return map\n    },\n    {},\n  )\n\n  return Object.keys(sortedMap).map(key => sortedMap[key])\n}\n\nconsole.log(groupAnagrams([\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]))\n`.trim();\n\nconst binaryMatrix = `\nfunction shorPath(grid) {\n  let n = grid.length - 1;\n  let q = [0]\n  \n  if (grid[0][0] || grid[n][n]) return -1\n  \n  grid[0][0] = 1\n  while (q.length) {\n      let curr = q.shift();\n      let i = curr & (1 << 7) - 1;\n      let j = curr >> 7;\n      \n      if (i === n && j === n) return grid[n][n]\n      for (let a = Math.max(i-1,0); a <= Math.min(i+1,n); a++){\n          for (let b = Math.max(j-1,0); b <= Math.min(j+1,n); b++){\n              if (grid[a][b] === 0){\n                  grid[a][b] = grid[i][j] + 1, q.push(a + (b << 7))\n                  }\n                }\n              }\n            }\n            return -1\n          };\n  \n  console.log(shorPath([[0,0,0],[1,1,0],[1,1,0]]));`.trim();\n\nconst spiralOrder = `\nfunction spiralOrder(matrix) {\n  let result = []\n  if(!matrix.length) return result;\n  \n  let rowMin = 0\n  let rowMax = matrix.length -1\n  let columnMin = 0\n  let columnMax = matrix[0].length - 1\n  \n  let i = 0\n  let j = 0\n  let direction = \"right\"\n\n  while(result.length < matrix.length * matrix[0].length) {\n    result.push(matrix[i][j])\n      if(direction === \"right\") {\n          if(j === columnMax) {\n              rowMin += 1\n              i = rowMin\n              direction = \"down\"\n          } else {\n              j++\n          }\n      } else if(direction === \"down\") {\n          if(i === rowMax) {\n              direction = \"left\"\n              columnMax -= 1\n              j = columnMax\n          } else {\n              i++\n          }\n      } else if(direction === \"left\") {\n\n          if(j === columnMin) {\n              direction = \"up\"\n              rowMax -= 1\n               i = rowMax\n          } else {\n              j--\n          }\n      } else {\n          if(i === rowMin) {\n              direction = \"right\"\n              columnMin += 1\n               j = columnMin\n          } else {\n              i--\n          }\n      }\n  }\n\n  return result \n};\n\n\nconsole.log(spiralOrder([\n  [ 1, 2, 3 ],\n  [ 4, 5, 6 ],\n  [ 7, 8, 9 ]\n ]))\n`.trim();\n\nconst uniquePaths = `\nfunction uniquePaths(m, n){\n  const memo = {}\n\n  function aux(rowIndex, columnIndex){\n    if (memo[rowIndex] !== undefined && memo[rowIndex][columnIndex] !== undefined) {\n      return memo[rowIndex][columnIndex]\n    }\n\n    if (rowIndex >= m || columnIndex >= n) return 0\n    if (rowIndex === m - 1 && columnIndex === n - 1) return 1\n\n    memo[rowIndex] = memo[rowIndex] || {}\n    memo[rowIndex][columnIndex] = aux(rowIndex + 1, columnIndex) + aux(rowIndex, columnIndex + 1)\n    return memo[rowIndex][columnIndex]\n  }\n  \n  return aux(0, 0)\n}\n\nconsole.log(uniquePaths(7,3))\n`.trim();\n\n\n\nconst addBinary = `\nfunction addBinary(a, b) {\n  const reverse = x => x.split('').reverse()\n  \n  const { shorter, longer } = a.length > b.length\n                              ? { shorter: reverse(b), longer: reverse(a) }\n                              : { shorter: reverse(a), longer: reverse(b) }\n\n  let reminder = 0\n  const digits = longer.map((num1, index) => {\n    let res = parseInt(num1, 10) + reminder + (parseInt(shorter[index], 10) ? parseInt(shorter[index], 10) : 0)\n    if (res >= 2) {\n      res -= 2\n      reminder = 1\n    } else {\n      reminder = 0\n    }\n    return res\n  })\n  \n  if (reminder === 1) {\n    digits.push(reminder)\n  }\n  return digits.reverse().join('')\n}\n\nconsole.log(addBinary(\"1010\", \"1011\"))\n`.trim();\n\n\nclass DSLogic3 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Rotate Image.</h3>\n              You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\n              <br/>\n              You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\n              <br/><br/><b>Input: </b>matrix = [[1,2,3],[4,5,6],[7,8,9]]<br/>\n              <b>Output: </b>[[7,4,1],[8,5,2],[9,6,3]]\n              <div style={titles}>\n                <PrismCode\n                  code={rotate}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>2. Group Anagrams.</h3>\n              Given an array of strings strs, group the anagrams together. You can return the answer in any order.\n              <br/>\n              An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n              <br/> <br/>\n              <b>Input: </b>strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]<br/>\n              <b>Output: </b>[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n              <div style={titles}>\n                <PrismCode\n                  code={groupAnagrams}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>3. Shortest Path in Binary Matrix</h3>\n              <ul>\n                <li>In an N by N square grid, each cell is either empty (0) or blocked (1).</li>\n                <li>A clear path from top-left to bottom-right has length k if and only if it is composed of cells C_1, C_2, ..., C_k such that:</li>\n                1.Adjacent cells C_i and C_i+1 are connected 8-directionally (ie., they are different and share an edge or corner)\n                <br />\n                2.C_1 is at location (0, 0) (ie. has value grid[0][0])<br />\n                3.C_k is at location (N-1, N-1) (ie. has value grid[N-1][N-1])<br />\n                4.If C_i is located at (r, c), then grid[r][c] is empty (ie. grid[r][c] == 0).\n                <li>Return the length of the shortest such clear path from top-left to bottom-right. If such a path does not exist, return -1.</li>\n              </ul>\n              <b>Input: </b>[[0,1],[1,0]], [[0,0,0],[1,1,0],[1,1,0]]\n              <br />\n              <b>Output: </b>2, 4\n              <div style={titles}>\n                <PrismCode\n                  code={binaryMatrix}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />              \n\n              <h3>4. Spiral Matrix.</h3>\n              <b>Input: </b>\n                [\n                [ 1, 2, 3 ],<br/>\n                [ 4, 5, 6 ],<br/>\n                [ 7, 8, 9 ]\n                ]<br/><br/>\n                <b>Output: </b>[1,2,3,6,9,8,7,4,5]\n              <div style={titles}>\n                <PrismCode\n                  code={spiralOrder}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>5. Unique Paths.</h3>\n              A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\n              <br/>\n              The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\n              <br/>\n              How many possible unique paths are there? <br/> <br/>\n              <b>Input: </b>m = 7, n = 3<br/>\n              <b>Output: </b>28\n              <div style={titles}>\n                <PrismCode\n                  code={uniquePaths}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>6. Add Binary</h3>\n              Given two binary strings, return their sum (also a binary string).\n              <br/>\n              The input strings are both non-empty and contains only characters 1 or 0.<br/>\n              <b>Input: </b>a = \"1010\", b = \"1011\"<br/>\n              <b>Output: </b>\"10101\"\n              <div style={titles}>\n                <PrismCode\n                  code={addBinary}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic3));\n"]},"metadata":{},"sourceType":"module"}