{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/angularDir.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Theata from '../../../assets/customElement.png';\nimport CustomElement from '../../../assets/create.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst happens = `\nexport class InnerHtmlBindingComponent {\n  // For example, a user/attacker-controlled value from a URL.\n  htmlSnippet = 'Template <script>alert(\"0wned\")</script> <b>Syntax</b>';\n}`.trim();\nconst step2 = `\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n} from '@angular/animations';`.trim();\nconst step3 = `\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  animations: [\n    // animation triggers go here\n  ]\n})`.trim();\nconst changeDetection = `\n//1\nimport { Component, ChangeDetectorRef ,ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '\n  < button(click)=\"detech()\"> detech</button>\n    <button (click) = \"reattach()\"> reattach</button>\n      <button (click) = \"detect()\"> detect</button>\n        <br />\n      {{count}}\n  ',\n  \n  // changeDetection: ChangeDetectionStrategy.Default,\n  changeDetection: ChangeDetectionStrategy.OnPush,  //count stop by this\n})\nexport class AppComponent {\n   count=0;\n  constructor(private changeDR: ChangeDetectorRef){\n    setInterval(() => {\n      this.count++;\n      this.changeDR.markForCheck();\n    },1000)\n  }\n\n detech(){\n   //stop change detection\n   this.changeDR.detach();\n }\n\n reattach(){\n   //satrt change detection from stopping place\n   this.changeDR.reattach();\n }\n\n detect(){\n   //satrt change detection from continue increased place but count remain stop\n   this.changeDR.detectChanges();\n }\n}\n\n\n\n//2 childs.ts\nimport { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n@Component({\n  selector: 'app-childs',\n  // changeDetection: ChangeDetectionStrategy.Default,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: '\n          {{data.name}} <br/>\n          {{data.email}}\n  '})\n  \nexport class Child {\n  @Input() data\n}\n\n\n//app.component.ts\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: '\n    <app-childs [data]=\"parentVar\"></app-childs>\n    <button (click)=\"defaultStratgy()\">default</button>\n    <button (click)=\"defaultObj()\">defaultObj</button>',\n})\nexport class AppComponent {\n  private parentVar: { name: string, email?: string }\n\n  constructor(){\n    this.parentVar = {\n      name: \"Mukesh\",\n      email: 'mukesh7@gmail.com'\n    }\n  }\n\n  defaultStratgy(){\n    this.parentVar.name=\"Rakesh\";\n  }\n\n  defaultObj(){\n    this.parentVar = {\n      name: \"Ritesh\",\n      email: \"ritesh@gmail.com\"\n    }\n  }\n}`.trim();\nconst myProvider = `\nexport class MyProvider{\n  constructor(){\n    console.log('myProvider called')\n  }\n  varProvider = \"varProvider\";\n}\n\nexport class MyProvider2{\n  constructor(){}\n  varProvider2 = \"varProvider2\";\n\n  getString(str){\n    console.log('myProvider called2', str)\n  }\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  viewProviders: [MyProvider, MyProvider2]\n})\nexport class AppComponent {\n  constructor(public obj:MyProvider, public obj2:MyProvider2){\n    obj2.getString('Mukesh')\n    console.log(obj.varProvider);\n    console.log(obj2.varProvider2);\n  }\n}`.trim();\n\nclass AngularDir extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"1. Angular Elements: npm install @angular/elements\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"to add in project: ng add @angular/elements \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"It offers functionality that allows to convert a normal Angular component to a native web component.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, \"Theoretically use it in any web page - no matter if that page uses Angular or not.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"Custom elements bootstrap themselves - they start automatically when they are added to the DOM, and are automatically destroyed when removed from the DOM.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, \"2. Custom Element\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, \"A Custom Element provides a way to create web components i.e new DOM elements that behave like standard HTML elements.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"We are bootstrapping our Angular Component as a custom element in the ngDoBootstrap() method.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), \"The createCustomElement method takes two parameters:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, \"1. The first parameter is the Angular component that will be used to create the custom element.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, \"2. The second parameter is a configuration object that has an injector property set to the current Injector instance.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, \"ng build --prod --output-hashing none\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, \"3. What is the browser support of Angular Elements\"), \"Since Angular elements are packaged as custom elements the browser support of angular elements is same as custom elements support.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"4. Do I need to bootstrap custom elements\"), \"No, custom elements bootstrap automatically when they are added to the DOM, and are automatically destroyed when removed from the DOM. Once a custom element is added to the DOM for any page, it looks and behaves like any other HTML element.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, \"5. Explain how custom elements works internally\"), \"Below are the steps in an order about custom elements functionality,\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, \"App registers custom element with browser: \"), \"Use the createCustomElement function to convert a component into a class that can be registered with the browser as a custom element.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, \"App adds custom element to DOM: \"), \"Add custom element just like a built-in HTML element directly into the DOM.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, \"Browser instantiate component based class: \"), \"Browser creates an instance of the registered class and adds it to the DOM.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"Instance provides content with data binding and change detection: \"), \"The content with in template is rendered using the component and DOM data. The flow chart of the custom elements functionality would be as follows,\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: Theata,\n      alt: \"Theata\",\n      className: \"responsive\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, \"6. How to transfer components to custom elements\"), \"Transforming components to custom elements involves two major steps.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, \"Build custom element class: \"), \"Angular provides the createCustomElement function for converting an Angular component (along with its dependencies) to a custom element. The conversion process implements NgElementConstructor interface, and creates a constructor class which is used to produce a self-bootstrapping instance of Angular component.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, \"Register element class with browser: \"), \"It uses customElements.define JS function, to register the configured constructor and its associated custom-element tag with the browser's CustomElementRegistry. When the browser encounters the tag for the registered element, it uses the constructor to create a custom-element instance.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: CustomElement,\n      alt: \"Theata\",\n      className: \"responsive\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, \"7. animations\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, \"The main Angular modules for animations are @angular/animations and @angular/platform-browser.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, \"Step 1: \"), \"Import BrowserAnimationsModule, which introduces the animation capabilities into your Angular root application module.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, \"Step 2: \"), \"If you plan to use specific animation functions in component files, import those functions from @angular/animations.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: step2,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, \"Step 3: \"), \"Adding the animation metadata property.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: step3,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, \"8. JQuery\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, \"first install jquery as npm install jquery\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, \"inside ./angular-cli.json file, find script, and include the path to jQuery as \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }), \"\\\"script\\\":[\\\"./node_moules/jquery/dist/jquery.min.js\\\"]\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, \"Note:\"), \" jQuery should be before bootstrap, if use both.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, \"9. Change Detection\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: changeDetection,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, \"10. ViewProvider\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: myProvider,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, \"11. Providers have services list which use by component.\"), \"If component need any service than it ask to injector not to Promises, Injector will create that service by getting blue-print from Promises, But if injector have that service instance than directly provide to component.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default withStyles(styles)(AngularDir);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/angularDir.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Theata","CustomElement","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","happens","trim","step2","step3","changeDetection","myProvider","AngularDir","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Theata from '../../../assets/customElement.png';\nimport CustomElement from '../../../assets/create.png';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst happens = `\nexport class InnerHtmlBindingComponent {\n  // For example, a user/attacker-controlled value from a URL.\n  htmlSnippet = 'Template <script>alert(\"0wned\")</script> <b>Syntax</b>';\n}`.trim();\n\n\nconst step2 = `\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n} from '@angular/animations';`.trim();\n\nconst step3 = `\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  animations: [\n    // animation triggers go here\n  ]\n})`.trim();\n\nconst changeDetection = `\n//1\nimport { Component, ChangeDetectorRef ,ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '\n  < button(click)=\"detech()\"> detech</button>\n    <button (click) = \"reattach()\"> reattach</button>\n      <button (click) = \"detect()\"> detect</button>\n        <br />\n      {{count}}\n  ',\n  \n  // changeDetection: ChangeDetectionStrategy.Default,\n  changeDetection: ChangeDetectionStrategy.OnPush,  //count stop by this\n})\nexport class AppComponent {\n   count=0;\n  constructor(private changeDR: ChangeDetectorRef){\n    setInterval(() => {\n      this.count++;\n      this.changeDR.markForCheck();\n    },1000)\n  }\n\n detech(){\n   //stop change detection\n   this.changeDR.detach();\n }\n\n reattach(){\n   //satrt change detection from stopping place\n   this.changeDR.reattach();\n }\n\n detect(){\n   //satrt change detection from continue increased place but count remain stop\n   this.changeDR.detectChanges();\n }\n}\n\n\n\n//2 childs.ts\nimport { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n@Component({\n  selector: 'app-childs',\n  // changeDetection: ChangeDetectionStrategy.Default,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: '\n          {{data.name}} <br/>\n          {{data.email}}\n  '})\n  \nexport class Child {\n  @Input() data\n}\n\n\n//app.component.ts\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: '\n    <app-childs [data]=\"parentVar\"></app-childs>\n    <button (click)=\"defaultStratgy()\">default</button>\n    <button (click)=\"defaultObj()\">defaultObj</button>',\n})\nexport class AppComponent {\n  private parentVar: { name: string, email?: string }\n\n  constructor(){\n    this.parentVar = {\n      name: \"Mukesh\",\n      email: 'mukesh7@gmail.com'\n    }\n  }\n\n  defaultStratgy(){\n    this.parentVar.name=\"Rakesh\";\n  }\n\n  defaultObj(){\n    this.parentVar = {\n      name: \"Ritesh\",\n      email: \"ritesh@gmail.com\"\n    }\n  }\n}`.trim();\n\nconst myProvider = `\nexport class MyProvider{\n  constructor(){\n    console.log('myProvider called')\n  }\n  varProvider = \"varProvider\";\n}\n\nexport class MyProvider2{\n  constructor(){}\n  varProvider2 = \"varProvider2\";\n\n  getString(str){\n    console.log('myProvider called2', str)\n  }\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  viewProviders: [MyProvider, MyProvider2]\n})\nexport class AppComponent {\n  constructor(public obj:MyProvider, public obj2:MyProvider2){\n    obj2.getString('Mukesh')\n    console.log(obj.varProvider);\n    console.log(obj2.varProvider2);\n  }\n}`.trim();\n\n\nclass AngularDir extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Angular Elements: npm install @angular/elements</h3>\n              <ul>\n                <li>to add in project: ng add @angular/elements </li>\n                <li>It offers functionality that allows to convert a normal Angular component to a native web component.</li>\n                <li>Theoretically use it in any web page - no matter if that page uses Angular or not.</li>\n                <li>Custom elements bootstrap themselves - they start automatically when they are added to the DOM,\n                  and are automatically destroyed when removed from the DOM.</li>\n              </ul>\n              <br />\n\n              <h3>2. Custom Element</h3>\n              <ul>\n                <li>A Custom Element provides a way to create web components i.e new DOM elements that behave like standard HTML elements.</li>\n                <li>We are bootstrapping our Angular Component as a custom element in the ngDoBootstrap() method.</li>\n              </ul>\n              <br />\n              \n              The createCustomElement method takes two parameters:\n              <ul>\n                <li>1. The first parameter is the Angular component that will be used to create the custom element.</li>\n                <li>2. The second parameter is a configuration object that has an injector property set to the current Injector instance.</li>\n              </ul>\n              <br />\n\n              <b>ng build --prod --output-hashing none</b>\n              <br />\n              <br />\n\n              <h3>3. What is the browser support of Angular Elements</h3>\n              Since Angular elements are packaged as custom elements the browser support of angular elements is same as custom elements support.\n              <br />\n              <br />\n\n              <h3>4. Do I need to bootstrap custom elements</h3>\n              No, custom elements bootstrap automatically when they are added to the DOM, and are automatically\n              destroyed when removed from the DOM. Once a custom element is added to the DOM for any page, it looks\n              and behaves like any other HTML element.\n              <br />\n              <br />\n\n              <h3>5. Explain how custom elements works internally</h3>\n              Below are the steps in an order about custom elements functionality,\n              <br />\n              <ul>\n                <li><b>App registers custom element with browser: </b>Use the createCustomElement function to convert a component into a class that can be registered with the browser as a custom element.</li>\n                <li><b>App adds custom element to DOM: </b>Add custom element just like a built-in HTML element directly into the DOM.</li>\n                <li><b>Browser instantiate component based class: </b>Browser creates an instance of the registered class and adds it to the DOM.</li>\n                <li><b>Instance provides content with data binding and change detection: </b>The content with in\n                  template is rendered using the component and DOM data. The flow chart of the custom elements\n                  functionality would be as follows,</li>\n              </ul>\n              <br />\n              <br />\n              <img src={Theata} alt=\"Theata\" className=\"responsive\" />\n              <br />\n              <br />\n\n              <h3>6. How to transfer components to custom elements</h3>\n              Transforming components to custom elements involves two major steps.\n              <ul>\n                <li><b>Build custom element class: </b>Angular provides the createCustomElement function for converting an Angular component (along with its dependencies) to a custom element. The conversion process implements NgElementConstructor interface, and creates a constructor class which is used to produce a self-bootstrapping instance of Angular component.</li>\n                <br />\n                <li><b>Register element class with browser: </b>It uses customElements.define JS function, to register the configured constructor and its associated custom-element tag with the browser's CustomElementRegistry. When the browser encounters the tag for the registered element, it uses the constructor to create a custom-element instance.</li>\n              </ul>\n              <br />\n              <br />\n              <img src={CustomElement} alt=\"Theata\" className=\"responsive\" />\n              <br />\n              <br />\n\n              <h3>7. animations</h3>\n              <ul>\n                <li>The main Angular modules for animations are @angular/animations and @angular/platform-browser.</li>\n                <li><b>Step 1: </b>Import BrowserAnimationsModule, which introduces the animation capabilities into your Angular root application module.</li>\n                <li><b>Step 2: </b>If you plan to use specific animation functions in component files, import those functions from @angular/animations.</li>\n                <div style={titles}>\n                  <PrismCode\n                    code={step2}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n                <br />\n\n                <li><b>Step 3: </b>Adding the animation metadata property.</li>\n                <div style={titles}>\n                  <PrismCode\n                    code={step3}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n              </ul>\n              <br/>\n\n              <h3>8. JQuery</h3>\n              <ul>\n                <li>first install jquery as npm install jquery</li>\n                <li>inside ./angular-cli.json file, find script, and include the path to jQuery as <br />\n                  \"script\":[\"./node_moules/jquery/dist/jquery.min.js\"]</li>\n                <li><b>Note:</b> jQuery should be before bootstrap, if use both.</li>\n              </ul>\n              <br />\n\n              <h3>9. Change Detection</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={changeDetection}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>10. ViewProvider</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={myProvider}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>11. Providers have services list which use by component.</h3>\n              If component need any service than it ask to injector not to Promises, Injector will create that service by \n              getting blue-print from Promises, But if injector have that service instance than directly provide to component.\n              <br />\n\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(AngularDir));\n"]},"metadata":{},"sourceType":"module"}