{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic6.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst combine = `\nconst combine = function (n, k) {\n  const result = []\n  const aux = (index = 1, current = []) => {\n    if (current.length === k) {\n      result.push(current)\n      return\n    }\n    if (index > n) {\n      return\n    }\n    aux(index + 1, [...current, index])\n    aux(index + 1, current)\n  }\n  aux()\n  return result\n}\n\nconsole.log(combine(4,2))`.trim();\nconst sortedArrayToBST = `\nconst sortedArrayToBST = (nums = []) => {\n  const aux = (low, high) => {\n    if (low <= high) {\n      const middle = Math.floor((low + high) / 2)\n      const node = {\n        val: nums[middle],\n      }\n      node.left = aux(low, middle - 1)\n      node.right = aux(middle + 1, high)\n      return node\n    }\n    return null\n  }\n  return aux(0, nums.length - 1)\n}\n\nconsole.log(sortedArrayToBST([-10,-3,0,5,9]))`.trim();\nconst maxProfit = `\nconst maxProfit = function (prices) {\n  let max = 0\n  let minPrice = Infinity\n  for (const price of prices) {\n    minPrice = Math.min(price, minPrice)\n    max = Math.max(max, price - minPrice)\n  }\n  return max\n}\n\nconsole.log(maxProfit([7,1,5,3,6,4]))`.trim();\nconst isPalindrome = `\nconst isPalindrome = function (s) {\n  let newS = ''\n  for (const c of s) {\n    if (/[a-zA-Z0-9]/.test(c)) {\n      newS += c.toLowerCase()\n    }\n  }\n  for (let i = 0; i < Math.floor(newS.length / 2); i++) {\n    if (newS[i] !== newS[newS.length - 1 - i]) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(isPalindrome(\"A man, a plan, a canal: Panama\"))`.trim();\nconst ladderLength = `\n\nconst ladderLength = function (beginWord, endWord = '', wordList = []) {\n  const distance = (a = '', b = '') => {\n    let count = 0\n    for (let index = 0; index < b.length; index++) {\n      if (a[index] !== b[index]) {\n        count += 1\n      }\n    }\n    return count === 1\n  }\n  let current = [beginWord]\n  const visited = {\n  }\n  let count = 1\n  while (current.length > 0) {\n    const next = []\n    for (const word of current) {\n      if (word === endWord) {\n        return count\n      }\n      if (!visited[word]) {\n        next.push(...wordList.filter(word2 => distance(word, word2) && !visited[word2]))\n      }\n      visited[word] = true\n    }\n    count += 1\n    current = next\n  }\n  return 0\n}\n\nconsole.log(ladderLength(\"hit\", \"cog\", [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]))`.trim();\nconst partition = `\nconst partition = (s = '') => {\n  const isPalindrome = (left, right) => {\n    if (left === right) {\n      return true\n    }\n    for (let i = left; i <= right; i++) {\n      if (s[i] !== s[right - i + left]) {\n        return false\n      }\n    }\n    return true\n  }\n  const result = []\n  const aux = (index = 0, current = []) => {\n    if (index === s.length) {\n      result.push(current)\n    }\n    for (let i = index; i < s.length; i++) {\n      if (isPalindrome(index, i)) {\n        aux(i + 1, [...current, s.substring(index, i + 1)])\n      }\n    }\n  }\n  aux()\n  return result\n}\n\nconsole.log(partition(\"aab\"))`.trim();\nconst wordBreak = `\nconst wordBreak = (s, wordDict = []) => {\n  const memo = {}\n  const aux = (current = '') => {\n    if (memo[current] !== undefined) {\n      return memo[current]\n    }\n    if (current === s) {\n      return true\n    }\n    if (s.indexOf(current) === -1) {\n      return false\n    }\n    memo[current] = wordDict.some(word => aux(current + word))\n    return memo[current]\n  }\n  return aux('')\n}\n\nconsole.log(wordBreak(\"leetcode\", wordDict = [\"leet\", \"code\"]))`.trim();\nconst maxProduct = `\nconst maxProduct = (nums = []) => {\n  if (nums.length === 0) {\n    return 0\n  }\n  let prevMax = nums[0]\n  let prevMin = nums[0]\n  let max = nums[0]\n  for (let i = 1; i < nums.length; i++) {\n    const currentMax = Math.max(nums[i], prevMax * nums[i], prevMin * nums[i])\n    const currentMin = Math.min(nums[i], prevMax * nums[i], prevMin * nums[i])\n    prevMax = currentMax\n    prevMin = currentMin\n    if (prevMax > max) {\n      max = prevMax\n    }\n  }\n  return max\n}\n\n\nconsole.log(maxProduct([2,3,-2,4]))`.trim();\nconst findMissingRanges = `\nconst findMissingRanges = function (nums, lower, upper) {\n  const result = []\n  const count = (lo, hi) => hi - lo - 1\n  const set = (lo, hi) => {\n    if (count(lo, hi) === 1) {\n      result.push('$'{lo + 1}')\n    } else if (count(lo, hi) > 1) {\n      result.push('$'{lo + 1}->'$'{hi - 1}')\n    }\n  }\n  for (let i = 0; i <= nums.length; i++) {\n    set(\n      i === 0 ? lower - 1 : nums[i - 1],\n      i === nums.length ? upper + 1 : nums[i],\n    )\n  }\n  return result\n}\n\n\nconsole.log(findMissingRanges([1,2,3,-2,4]))`.trim();\nconst maximumGap = `\nconst maximumGap = function (nums = []) {\n  const maxValue = Math.max(...nums)\n  const countingSort = (place) => {\n    const count = []\n    nums.forEach((num) => {\n      const index = Math.floor(num / place) % 10\n      count[index] = count[index] || []\n      count[index].push(num)\n    })\n    return count.reduce((acc, v) => {\n      if (v !== undefined) {\n        acc = acc.concat(v)\n      }\n      return acc\n    }, [])\n  }\n\n  let place = 1\n  while (Math.floor(maxValue / place) > 0) {\n    nums = countingSort(place)\n    place *= 10\n  }\n  let max = 0\n  for (let i = 1; i < nums.length; i++) {\n    max = Math.max(max, nums[i] - nums[i - 1])\n  }\n  return max\n}\n\n\nconsole.log(maximumGap([3,6,9,1]))`.trim();\n\nclass DSLogic6 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, \"1. Combinations\"), \"Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }), \"You may return the answer in any order.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }), \"Input: n = 4, k = 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }), \"Output: [\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }), \"[2,4],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }), \"[3,4],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }), \"[2,3],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }), \"[1,2],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }), \"[1,3],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }), \"[1,4],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }), \"]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }), \"Input: n = 1, k = 1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }), \"Output: [[1]]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: combine,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, \"2. Convert Sorted Array to Binary Search Tree.\"), \"Given an array where elements are sorted in ascending order, convert it to a height balanced BST.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }), \"For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }), \"Given the sorted array: [-10,-3,0,5,9]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }), \"One possible answer is: [0,-3,9,-10,null,5]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: sortedArrayToBST,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, \"3. Best Time to Buy and Sell Stock.\"), \"Say you have an array for which the ith element is the price of a given stock on day i.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }), \"If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }), \"Note that you cannot sell a stock before you buy one.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }), \"Input: [7,1,5,3,6,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }), \"Output: 5\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }), \"Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Not 7-1 = 6, as selling price needs to be larger than buying price.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maxProfit,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, \"4. Valid Palindrome.\"), \"Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }), \"Note: For the purpose of this problem, we define empty string as valid palindrome.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }), \"Input: \\\"A man, a plan, a canal: Panama\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }), \"Output: true\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }), \"Input: \\\"race a car\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }), \"Output: false\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isPalindrome,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, \"6. Palindrome Partitioning.\"), \"Input: \\\"aab\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }), \"Output: [\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }), \"[\\\"aa\\\",\\\"b\\\"],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }), \"[\\\"a\\\",\\\"a\\\",\\\"b\\\"] ]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: partition,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, \"7. Word Break.\"), \"Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, \"Note: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, \"The same word in the dictionary may be reused multiple times in the segmentation.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, \"You may assume the dictionary does not contain duplicate words.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }), \"Input: s = \\\"leetcode\\\", wordDict = [\\\"leet\\\", \\\"code\\\"]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }), \"Output: true\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }), \"Explanation: Return true because \\\"leetcode\\\" can be segmented as \\\"leet code\\\".\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: wordBreak,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, \"8. Maximum Product Subarray.\"), \"Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }), \"Input: [2,3,-2,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }), \"Output: 6\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maxProduct,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    }, \"9. Missing Ranges.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: findMissingRanges,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }, \"10. Maximum Gap.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maximumGap,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(DSLogic6);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic6.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","combine","trim","sortedArrayToBST","maxProfit","isPalindrome","ladderLength","partition","wordBreak","maxProduct","findMissingRanges","maximumGap","DSLogic6","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst combine = `\nconst combine = function (n, k) {\n  const result = []\n  const aux = (index = 1, current = []) => {\n    if (current.length === k) {\n      result.push(current)\n      return\n    }\n    if (index > n) {\n      return\n    }\n    aux(index + 1, [...current, index])\n    aux(index + 1, current)\n  }\n  aux()\n  return result\n}\n\nconsole.log(combine(4,2))`.trim();\n\nconst sortedArrayToBST = `\nconst sortedArrayToBST = (nums = []) => {\n  const aux = (low, high) => {\n    if (low <= high) {\n      const middle = Math.floor((low + high) / 2)\n      const node = {\n        val: nums[middle],\n      }\n      node.left = aux(low, middle - 1)\n      node.right = aux(middle + 1, high)\n      return node\n    }\n    return null\n  }\n  return aux(0, nums.length - 1)\n}\n\nconsole.log(sortedArrayToBST([-10,-3,0,5,9]))`.trim();\n\nconst maxProfit = `\nconst maxProfit = function (prices) {\n  let max = 0\n  let minPrice = Infinity\n  for (const price of prices) {\n    minPrice = Math.min(price, minPrice)\n    max = Math.max(max, price - minPrice)\n  }\n  return max\n}\n\nconsole.log(maxProfit([7,1,5,3,6,4]))`.trim();\n\nconst isPalindrome = `\nconst isPalindrome = function (s) {\n  let newS = ''\n  for (const c of s) {\n    if (/[a-zA-Z0-9]/.test(c)) {\n      newS += c.toLowerCase()\n    }\n  }\n  for (let i = 0; i < Math.floor(newS.length / 2); i++) {\n    if (newS[i] !== newS[newS.length - 1 - i]) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(isPalindrome(\"A man, a plan, a canal: Panama\"))`.trim();\n\nconst ladderLength = `\n\nconst ladderLength = function (beginWord, endWord = '', wordList = []) {\n  const distance = (a = '', b = '') => {\n    let count = 0\n    for (let index = 0; index < b.length; index++) {\n      if (a[index] !== b[index]) {\n        count += 1\n      }\n    }\n    return count === 1\n  }\n  let current = [beginWord]\n  const visited = {\n  }\n  let count = 1\n  while (current.length > 0) {\n    const next = []\n    for (const word of current) {\n      if (word === endWord) {\n        return count\n      }\n      if (!visited[word]) {\n        next.push(...wordList.filter(word2 => distance(word, word2) && !visited[word2]))\n      }\n      visited[word] = true\n    }\n    count += 1\n    current = next\n  }\n  return 0\n}\n\nconsole.log(ladderLength(\"hit\", \"cog\", [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]))`.trim();\n\nconst partition = `\nconst partition = (s = '') => {\n  const isPalindrome = (left, right) => {\n    if (left === right) {\n      return true\n    }\n    for (let i = left; i <= right; i++) {\n      if (s[i] !== s[right - i + left]) {\n        return false\n      }\n    }\n    return true\n  }\n  const result = []\n  const aux = (index = 0, current = []) => {\n    if (index === s.length) {\n      result.push(current)\n    }\n    for (let i = index; i < s.length; i++) {\n      if (isPalindrome(index, i)) {\n        aux(i + 1, [...current, s.substring(index, i + 1)])\n      }\n    }\n  }\n  aux()\n  return result\n}\n\nconsole.log(partition(\"aab\"))`.trim();\n\nconst wordBreak = `\nconst wordBreak = (s, wordDict = []) => {\n  const memo = {}\n  const aux = (current = '') => {\n    if (memo[current] !== undefined) {\n      return memo[current]\n    }\n    if (current === s) {\n      return true\n    }\n    if (s.indexOf(current) === -1) {\n      return false\n    }\n    memo[current] = wordDict.some(word => aux(current + word))\n    return memo[current]\n  }\n  return aux('')\n}\n\nconsole.log(wordBreak(\"leetcode\", wordDict = [\"leet\", \"code\"]))`.trim();\n\nconst maxProduct = `\nconst maxProduct = (nums = []) => {\n  if (nums.length === 0) {\n    return 0\n  }\n  let prevMax = nums[0]\n  let prevMin = nums[0]\n  let max = nums[0]\n  for (let i = 1; i < nums.length; i++) {\n    const currentMax = Math.max(nums[i], prevMax * nums[i], prevMin * nums[i])\n    const currentMin = Math.min(nums[i], prevMax * nums[i], prevMin * nums[i])\n    prevMax = currentMax\n    prevMin = currentMin\n    if (prevMax > max) {\n      max = prevMax\n    }\n  }\n  return max\n}\n\n\nconsole.log(maxProduct([2,3,-2,4]))`.trim();\n\nconst findMissingRanges = `\nconst findMissingRanges = function (nums, lower, upper) {\n  const result = []\n  const count = (lo, hi) => hi - lo - 1\n  const set = (lo, hi) => {\n    if (count(lo, hi) === 1) {\n      result.push('$'{lo + 1}')\n    } else if (count(lo, hi) > 1) {\n      result.push('$'{lo + 1}->'$'{hi - 1}')\n    }\n  }\n  for (let i = 0; i <= nums.length; i++) {\n    set(\n      i === 0 ? lower - 1 : nums[i - 1],\n      i === nums.length ? upper + 1 : nums[i],\n    )\n  }\n  return result\n}\n\n\nconsole.log(findMissingRanges([1,2,3,-2,4]))`.trim();\n\nconst maximumGap = `\nconst maximumGap = function (nums = []) {\n  const maxValue = Math.max(...nums)\n  const countingSort = (place) => {\n    const count = []\n    nums.forEach((num) => {\n      const index = Math.floor(num / place) % 10\n      count[index] = count[index] || []\n      count[index].push(num)\n    })\n    return count.reduce((acc, v) => {\n      if (v !== undefined) {\n        acc = acc.concat(v)\n      }\n      return acc\n    }, [])\n  }\n\n  let place = 1\n  while (Math.floor(maxValue / place) > 0) {\n    nums = countingSort(place)\n    place *= 10\n  }\n  let max = 0\n  for (let i = 1; i < nums.length; i++) {\n    max = Math.max(max, nums[i] - nums[i - 1])\n  }\n  return max\n}\n\n\nconsole.log(maximumGap([3,6,9,1]))`.trim();\n\n\nclass DSLogic6 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Combinations</h3>\n              Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.\n              <br/>\nYou may return the answer in any order.<br/><br/>\nExample 1:<br/>\n\nInput: n = 4, k = 2<br/>\nOutput:\n[<br/>\n  [2,4],<br/>\n  [3,4],<br/>\n  [2,3],<br/>\n  [1,2],<br/>\n  [1,3],<br/>\n  [1,4],<br/>\n]<br/><br/>\nExample 2:<br/>\n\nInput: n = 1, k = 1<br/>\nOutput: [[1]]\n              <div style={titles}>\n                <PrismCode\n                  code={combine}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>2. Convert Sorted Array to Binary Search Tree.</h3>\n              Given an array where elements are sorted in ascending order, convert it to a height balanced BST.\n              <br/>\nFor this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\n<br/><br/>\nGiven the sorted array: [-10,-3,0,5,9]<br/>\nOne possible answer is: [0,-3,9,-10,null,5]\n              <div style={titles}>\n                <PrismCode\n                  code={sortedArrayToBST}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>3. Best Time to Buy and Sell Stock.</h3>\n              Say you have an array for which the ith element is the price of a given stock on day i.\n              <br/>\nIf you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.\n<br/>\nNote that you cannot sell a stock before you buy one.<br/><br/>\nInput: [7,1,5,3,6,4]<br/>\nOutput: 5<br/>\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n             Not 7-1 = 6, as selling price needs to be larger than buying price.\n              <div style={titles}>\n                <PrismCode\n                  code={maxProfit}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>4. Valid Palindrome.</h3>\n              Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n              <br/>\nNote: For the purpose of this problem, we define empty string as valid palindrome.\n<br/><br/>\nExample 1:<br/>\n\nInput: \"A man, a plan, a canal: Panama\"<br/>\nOutput: true<br/><br/>\nExample 2:<br/>\n\nInput: \"race a car\"<br/>\nOutput: false\n              <div style={titles}>\n                <PrismCode\n                  code={isPalindrome}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>6. Palindrome Partitioning.</h3>\n              Input: \"aab\"<br/><br/>\nOutput:\n[<br/>\n  [\"aa\",\"b\"],<br/>\n  [\"a\",\"a\",\"b\"]\n]\n              <div style={titles}>\n                <PrismCode\n                  code={partition}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>7. Word Break.</h3>\n              Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.\n              <br/>\n              <br/>\n              <b>Note: </b>\n              <ul>\n                <li>The same word in the dictionary may be reused multiple times in the segmentation.</li>\n                <li>You may assume the dictionary does not contain duplicate words.</li>\n              </ul>\n              <br/>\n              Input: s = \"leetcode\", wordDict = [\"leet\", \"code\"]<br/>\nOutput: true<br/>\nExplanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n              <div style={titles}>\n                <PrismCode\n                  code={wordBreak}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>8. Maximum Product Subarray.</h3>\n              Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.\n              <br/>\n              Input: [2,3,-2,4]<br/>\nOutput: 6\n              <div style={titles}>\n                <PrismCode\n                  code={maxProduct}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>9. Missing Ranges.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={findMissingRanges}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>10. Maximum Gap.</h3>\n\n              <div style={titles}>\n                <PrismCode\n                  code={maximumGap}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic6));\n"]},"metadata":{},"sourceType":"module"}