{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/numbersAlgo.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst forNum = `\nconst PrintNumbers = (start, end)=> {\n  console.log(start);\n  if (start < end) {\n      PrintNumbers((start + 1), end);\n  }\n}\n\nPrintNumbers(1, 10);\n`.trim();\nconst factorial = `\nfunction factorial(n){\n  if(n === 1) return 1;\n  return n * factorial(n-1)\n }\n \nconsole.log(factorial(4));\n `.trim();\nconst prime = `\nfunction primes(){\n  const num=100;\n  const result=[];\n  let i,j;\n\n  for(i=0; i<num; i++){\n      let count=0;\n      for(j=2; j<i; j++){\n          if(i%j==0) count +=1;\n      }\n   \n      if(count==0){\n          result.push(i);\n      }\n  }\n  console.log(result);\n}\n\nprimes()\n\n\n//\nfunction countPrimes(n){\n  const map = []\n\n  for (let i = 2; i < n; i++) {\n    map[i] = true\n  }\n  \n  for (let i = 2; i * i < n; i++) {\n    if (map[i]) {\n      for (let j = i * i; j < n; j += i) {\n        map[j] = false\n      }\n    }\n  }\n  return map.filter(num => num === true).length\n}\n\nconsole.log(countPrimes(10))\n`.trim();\nconst magicNumber = `\n function magicNum(){\n   const random = Math.random(0,1)\n   return random;\n }\n \n function main(){\n   const result = Math.random(0, magicNum);\n   console.log(result);\n }\n \n main();\n `.trim();\nconst possible = `\nfunction isInt(value) {\n  var x;\n  if (isNaN(value)) {\n    return false;\n  }\n  x = parseFloat(value);\n  return (x | 0) === x;\n}\n\nconsole.log(isInt(0));`.trim();\nconst common_divisor = `\nfunction numbers(x, y) {\n    if ((typeof x !== 'number') || (typeof y !== 'number'))\n      return false;\n      x = Math.abs(x);\n      y = Math.abs(y);\n        while(y) {\n          var i = y;\n          y = x % y;\n          x = i;\n        }\n  return x;\n  }\n \n  console.log(numbers(12, 4));\n  console.log(numbers(9, 3));`.trim();\nconst reverse = `\nfunction reverse(num){\n  let result='';\n  const target = num.toString();\n  \n  for(let i=target.length; i>=0; i--){\n      result += target.charAt(i);\n  }\n  \n  result = Number(result)\n  console.log(result);\n}\n\nreverse(123)\n`.trim();\nconst isPowerOfTwo = `\nfunction isPowerOfTwo(x){\n  if (x <= 0) return false;\n  return (x & (x - 1)) === 0\n}\n\nconsole.log(isPowerOfTwo(16))\n`.trim();\nconst addDigits = `\n\n`.trim();\nconst isUgly = `\nfunction isUgly(){\n  const num=15;\n  const memo = [];\n\n  function aux(n){\n    if (memo[n] !== undefined) return memo[n];\n    if (n===1 || n===2 || n===3 || n===5 || n===4) return true;\n    if (n<5) return false;\n\n    memo[n] = aux(n/ 2) || aux(n/ 3) || aux(n/ 5);\n    return memo[n]\n  }\n  console.log(aux(num));\n}\n\nisUgly();\n`.trim();\nconst getSum = `\nfunction getSum(a, b) {\n  let carry = 0;\n  \n  while (b !== 0) {\n    carry = a & b\n    a ^= b\n    b = carry << 1\n  }\n  return a\n}\n\nconsole.log(getSum(5, 1))\n`.trim();\nconst numSquares = `\nfunction squareroot() {\n  var nums=64;\n  for (let i=nums; i>=1; i--) {\n      if(i*i === nums){\n          nums =i;\n          break;\n     }\n }\n console.log(nums);\n}\n\nsquareroot();\n`.trim();\nconst brokenCalc = `\nfunction brokenCalc(){\n  let X=5, Y=8;\n  let result = 0;\n\n  while(Y>X){\n    if(Y%2 === 0) {\n      Y /=2\n    } \n    else {\n      Y +=1\n    }\n    result +=1\n  }\n  console.log(result + X - Y);\n}\n\nbrokenCalc()\n`.trim();\nconst addStrings = `\nfunction multiply() {\n  const num=\"2\";\n  const num2=\"3\";\n  const product = Array(num.length + num2.length).fill(0);\n\n  for (let i = num.length; i--;) {\n      let carry = 0;\n      for (let j = num2.length; j--;) {\n          product[1+i+j] += carry + num[i]*num2[j];\n          carry = Math.floor(product[1+i+j] / 10);\n          product[1+i+j] = product[1+i+j] % 10;\n      }\n      product[i] += carry;\n  }\n  console.log(product.join(\"\").replace(/^0*(\\d)/, \"$1\"));\n}\n\nmultiply();\n`.trim();\nconst mySqrt = `\nfunction mySqrt(x){\n  let r=x\n  while ((r*r)> x) {\n    r = Math.floor((r + x / r) / 2)\n  }\n\n  return r\n}\n\nconsole.log(mySqrt(4))\n`.trim();\nconst myPow = `\nfunction myPow(x, n){\n  if (n === 0) return 1;\n\n  const temp = myPow(x, Math.floor(Math.abs(n /2)))\n  const result = n%2 ===0 ?temp *temp :x *temp *temp;\n  return n<0 ? 1/ result :result;\n}\n\nconsole.log(myPow(2.00000, 10))\n`.trim();\nconst letterCombinations = `\nfunction letterCombinations(digits = ''){\n  const map = {\n    2: ['a', 'b', 'c'],\n    3: ['d', 'e', 'f'],\n    4: ['g', 'h', 'i'],\n    5: ['j', 'k', 'l'],\n    6: ['m', 'n', 'o'],\n    7: ['p', 'q', 'r', 's'],\n    8: ['t', 'u', 'v'],\n    9: ['w', 'x', 'y', 'z'],\n  }\n\n  if (!digits.length) return [];\n\n  let result = [''];\n  let index = 0;\n\n  while (index < digits.length) {\n    const next = map[digits[index]];\n    const nextResult = [];\n\n    for (let i = 0; i < result.length; i++) {\n      for (let j = 0; j < next.length; j++) {\n        nextResult.push(result[i] + next[j])\n      }\n    }\n    result = nextResult;\n    index++;\n  }\n  return result;\n}\n\nconsole.log(letterCombinations(\"23\"))\n`.trim();\nconst remString = `\nconst greeting = 'Hello Marcus, welcome in 2020';\nconst withoutNumbers = greeting.replace(/[0-9]/g, '')\n console.log(withoutNumbers)\n\n\n//\nfunction removeFive(){\n  let number = 915765;\n  let numberStr = number.toString();\n  \n  const res = numberStr.replace(numberStr[2], '');\n  const result=Number(res);\n  \n  console.log(result);\n}\n\nremoveFive();\n`.trim();\nconst removePart = `\nvar str = 1437000;\nstr = str.toString();\nstr = str.slice(0, -3);\nstr = parseInt(str);\nconsole.log(\"After truncate: \",str);\n\n\n\n//REmove a particular digit from numbers;\nlet number = 789051234;\nlet indexNum = [];\nconst target=5;\nvar result=[];\n\nlet arr = number.toString().split(\"\");\nfor(let i=0; i<arr.length; i++){\n  if(arr[i]==target){\n    indexNum.push(i)\n  }\n}\n\nsplitArr = arr.splice(0, indexNum)\nsplitArr2 = arr.splice(1, arr.length)\n\nresult = splitArr + ','+ splitArr2;\n// result = parseInt(splitArr.join(splitArr2))                                       //sum\n\nconsole.log(result)\n`.trim();\n\nclass DSLogic4 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, \"1. Print num without loop.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: forNum,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, \"2. Factorial\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: factorial,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }, \"3. Prime\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: prime,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }, \"4. Remove number from string\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: remString,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }, \"5. Remove last 3 characters of string or number in javascript.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: removePart,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }, \"6. Given a function magicNumber() that returns a random integer 1 or 0, write a new function that will generate a random number that uses this magicNumber() function.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: magicNumber,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }, \"7. Discuss possible ways to write a function isInteger(x) that determines if x is an integer.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: possible,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }, \"8. Common Divisor\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: common_divisor,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469\n      },\n      __self: this\n    }, \"9. Sum of Two Integers.\"), \"Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: getSum,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480\n      },\n      __self: this\n    }, \"10. Reverse Integer.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: reverse,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491\n      },\n      __self: this\n    }, \"11. Multiply Strings\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }, \"Input: \"), \"num1 = \\\"2\\\", num2 = \\\"3\\\" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493\n      },\n      __self: this\n    }, \"Output: \"), \"\\\"6\\\"\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: addStrings,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }, \"12. Perfect Squares.\"), \"Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: numSquares,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }, \"13. Sqrt(x).\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }, \"Input: \"), \"4\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }, \"Output: \"), \"2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }, \"Example 2: \"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }, \"Input: \"), \"8\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }, \"Output: \"), \"2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }, \"Explanation: \"), \"The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: mySqrt,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }, \"14. Power of Two.\"), \"Given an integer, write a function to determine if it is a power of two.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isPowerOfTwo,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    }, \"15. Pow(x, n).\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }, \"Input: \"), \"x = 2.00000, n = 10\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }, \"Output: \"), \"1024.00000\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: myPow,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }, \"16. Ugly Number.\"), \"Write a program to check whether a given number is an ugly number.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558\n      },\n      __self: this\n    }), \"Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isUgly,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569\n      },\n      __self: this\n    }, \"17. Broken Calculator.\"), \"On a broken calculator that has a number showing on its display, we can perform two operations:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573\n      },\n      __self: this\n    }, \"Double: \"), \"Multiply the number on the display by 2, or;\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574\n      },\n      __self: this\n    }, \"Decrement: \"), \"Subtract 1 from the number on the display.\")), \"Initially, the calculator is displaying the number X.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    }), \"Return the minimum number of operations needed to display the number Y.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: brokenCalc,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588\n      },\n      __self: this\n    }, \"18. Add Digits.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: addDigits,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598\n      },\n      __self: this\n    }, \"19. Letter Combinations of a Phone Number.\"), \"Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600\n      },\n      __self: this\n    }), \"A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602\n      },\n      __self: this\n    }, \"Example: \"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604\n      },\n      __self: this\n    }, \"Input: \"), \"\\\"23\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 605\n      },\n      __self: this\n    }, \"Output: \"), \"[\\\"ad\\\", \\\"ae\\\", \\\"af\\\", \\\"bd\\\", \\\"be\\\", \\\"bf\\\", \\\"cd\\\", \\\"ce\\\", \\\"cf\\\"].\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: letterCombinations,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(DSLogic4);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/numbersAlgo.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","forNum","trim","factorial","prime","magicNumber","possible","common_divisor","reverse","isPowerOfTwo","addDigits","isUgly","getSum","numSquares","brokenCalc","addStrings","mySqrt","myPow","letterCombinations","remString","removePart","DSLogic4","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst forNum=`\nconst PrintNumbers = (start, end)=> {\n  console.log(start);\n  if (start < end) {\n      PrintNumbers((start + 1), end);\n  }\n}\n\nPrintNumbers(1, 10);\n`.trim();\n\nconst factorial = `\nfunction factorial(n){\n  if(n === 1) return 1;\n  return n * factorial(n-1)\n }\n \nconsole.log(factorial(4));\n `.trim()\n\nconst prime = `\nfunction primes(){\n  const num=100;\n  const result=[];\n  let i,j;\n\n  for(i=0; i<num; i++){\n      let count=0;\n      for(j=2; j<i; j++){\n          if(i%j==0) count +=1;\n      }\n   \n      if(count==0){\n          result.push(i);\n      }\n  }\n  console.log(result);\n}\n\nprimes()\n\n\n//\nfunction countPrimes(n){\n  const map = []\n\n  for (let i = 2; i < n; i++) {\n    map[i] = true\n  }\n  \n  for (let i = 2; i * i < n; i++) {\n    if (map[i]) {\n      for (let j = i * i; j < n; j += i) {\n        map[j] = false\n      }\n    }\n  }\n  return map.filter(num => num === true).length\n}\n\nconsole.log(countPrimes(10))\n`.trim()\n\nconst magicNumber = `\n function magicNum(){\n   const random = Math.random(0,1)\n   return random;\n }\n \n function main(){\n   const result = Math.random(0, magicNum);\n   console.log(result);\n }\n \n main();\n `.trim();\n\nconst possible = `\nfunction isInt(value) {\n  var x;\n  if (isNaN(value)) {\n    return false;\n  }\n  x = parseFloat(value);\n  return (x | 0) === x;\n}\n\nconsole.log(isInt(0));`.trim();\n\nconst common_divisor = `\nfunction numbers(x, y) {\n    if ((typeof x !== 'number') || (typeof y !== 'number'))\n      return false;\n      x = Math.abs(x);\n      y = Math.abs(y);\n        while(y) {\n          var i = y;\n          y = x % y;\n          x = i;\n        }\n  return x;\n  }\n \n  console.log(numbers(12, 4));\n  console.log(numbers(9, 3));`.trim()\n\nconst reverse = `\nfunction reverse(num){\n  let result='';\n  const target = num.toString();\n  \n  for(let i=target.length; i>=0; i--){\n      result += target.charAt(i);\n  }\n  \n  result = Number(result)\n  console.log(result);\n}\n\nreverse(123)\n`.trim();\n\nconst isPowerOfTwo = `\nfunction isPowerOfTwo(x){\n  if (x <= 0) return false;\n  return (x & (x - 1)) === 0\n}\n\nconsole.log(isPowerOfTwo(16))\n`.trim();\n\nconst addDigits = `\n\n`.trim();\n\nconst isUgly = `\nfunction isUgly(){\n  const num=15;\n  const memo = [];\n\n  function aux(n){\n    if (memo[n] !== undefined) return memo[n];\n    if (n===1 || n===2 || n===3 || n===5 || n===4) return true;\n    if (n<5) return false;\n\n    memo[n] = aux(n/ 2) || aux(n/ 3) || aux(n/ 5);\n    return memo[n]\n  }\n  console.log(aux(num));\n}\n\nisUgly();\n`.trim();\n\nconst getSum = `\nfunction getSum(a, b) {\n  let carry = 0;\n  \n  while (b !== 0) {\n    carry = a & b\n    a ^= b\n    b = carry << 1\n  }\n  return a\n}\n\nconsole.log(getSum(5, 1))\n`.trim();\n\nconst numSquares = `\nfunction squareroot() {\n  var nums=64;\n  for (let i=nums; i>=1; i--) {\n      if(i*i === nums){\n          nums =i;\n          break;\n     }\n }\n console.log(nums);\n}\n\nsquareroot();\n`.trim();\n\nconst brokenCalc = `\nfunction brokenCalc(){\n  let X=5, Y=8;\n  let result = 0;\n\n  while(Y>X){\n    if(Y%2 === 0) {\n      Y /=2\n    } \n    else {\n      Y +=1\n    }\n    result +=1\n  }\n  console.log(result + X - Y);\n}\n\nbrokenCalc()\n`.trim();\n\nconst addStrings = `\nfunction multiply() {\n  const num=\"2\";\n  const num2=\"3\";\n  const product = Array(num.length + num2.length).fill(0);\n\n  for (let i = num.length; i--;) {\n      let carry = 0;\n      for (let j = num2.length; j--;) {\n          product[1+i+j] += carry + num[i]*num2[j];\n          carry = Math.floor(product[1+i+j] / 10);\n          product[1+i+j] = product[1+i+j] % 10;\n      }\n      product[i] += carry;\n  }\n  console.log(product.join(\"\").replace(/^0*(\\d)/, \"$1\"));\n}\n\nmultiply();\n`.trim();\n\nconst mySqrt = `\nfunction mySqrt(x){\n  let r=x\n  while ((r*r)> x) {\n    r = Math.floor((r + x / r) / 2)\n  }\n\n  return r\n}\n\nconsole.log(mySqrt(4))\n`.trim();\n\nconst myPow = `\nfunction myPow(x, n){\n  if (n === 0) return 1;\n\n  const temp = myPow(x, Math.floor(Math.abs(n /2)))\n  const result = n%2 ===0 ?temp *temp :x *temp *temp;\n  return n<0 ? 1/ result :result;\n}\n\nconsole.log(myPow(2.00000, 10))\n`.trim();\n\nconst letterCombinations = `\nfunction letterCombinations(digits = ''){\n  const map = {\n    2: ['a', 'b', 'c'],\n    3: ['d', 'e', 'f'],\n    4: ['g', 'h', 'i'],\n    5: ['j', 'k', 'l'],\n    6: ['m', 'n', 'o'],\n    7: ['p', 'q', 'r', 's'],\n    8: ['t', 'u', 'v'],\n    9: ['w', 'x', 'y', 'z'],\n  }\n\n  if (!digits.length) return [];\n\n  let result = [''];\n  let index = 0;\n\n  while (index < digits.length) {\n    const next = map[digits[index]];\n    const nextResult = [];\n\n    for (let i = 0; i < result.length; i++) {\n      for (let j = 0; j < next.length; j++) {\n        nextResult.push(result[i] + next[j])\n      }\n    }\n    result = nextResult;\n    index++;\n  }\n  return result;\n}\n\nconsole.log(letterCombinations(\"23\"))\n`.trim();\n\nconst remString = `\nconst greeting = 'Hello Marcus, welcome in 2020';\nconst withoutNumbers = greeting.replace(/[0-9]/g, '')\n console.log(withoutNumbers)\n\n\n//\nfunction removeFive(){\n  let number = 915765;\n  let numberStr = number.toString();\n  \n  const res = numberStr.replace(numberStr[2], '');\n  const result=Number(res);\n  \n  console.log(result);\n}\n\nremoveFive();\n`.trim();\n\n\nconst removePart = `\nvar str = 1437000;\nstr = str.toString();\nstr = str.slice(0, -3);\nstr = parseInt(str);\nconsole.log(\"After truncate: \",str);\n\n\n\n//REmove a particular digit from numbers;\nlet number = 789051234;\nlet indexNum = [];\nconst target=5;\nvar result=[];\n\nlet arr = number.toString().split(\"\");\nfor(let i=0; i<arr.length; i++){\n  if(arr[i]==target){\n    indexNum.push(i)\n  }\n}\n\nsplitArr = arr.splice(0, indexNum)\nsplitArr2 = arr.splice(1, arr.length)\n\nresult = splitArr + ','+ splitArr2;\n// result = parseInt(splitArr.join(splitArr2))                                       //sum\n\nconsole.log(result)\n`.trim();\n\n\nclass DSLogic4 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n            <h3>1. Print num without loop.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={forNum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n            <h3>2. Factorial</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={factorial}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Prime</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={prime}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Remove number from string</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={remString}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. Remove last 3 characters of string or number in javascript.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={removePart}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>6. Given a function magicNumber() that returns a random integer 1 or 0, write a new function that will generate a random number that uses this magicNumber() function.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={magicNumber}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>7. Discuss possible ways to write a function isInteger(x) that determines if x is an integer.</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={possible}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>8. Common Divisor</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={common_divisor}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>9. Sum of Two Integers.</h3>\n              Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.\n              <div style={titles}>\n                <PrismCode\n                  code={getSum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>10. Reverse Integer.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={reverse}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n\n              <h3>11. Multiply Strings</h3>\n              <b>Input: </b>num1 = \"2\", num2 = \"3\" <br/>\n              <b>Output: </b>\"6\"\n              <div style={titles}>\n                <PrismCode\n                  code={addStrings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/> \n\n              <h3>12. Perfect Squares.</h3>\n              Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.\n              <div style={titles}>\n                <PrismCode\n                  code={numSquares}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>13. Sqrt(x).</h3>\n              <b>Input: </b>4<br/>\n              <b>Output: </b>2<br/><br/>\n              <b>Example 2: </b>\n\n              <b>Input: </b>8<br/>\n              <b>Output: </b>2<br/>\n              <b>Explanation: </b>The square root of 8 is 2.82842..., and since \n                          the decimal part is truncated, 2 is returned.\n\n              <div style={titles}>\n                <PrismCode\n                  code={mySqrt}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>14. Power of Two.</h3>\n              Given an integer, write a function to determine if it is a power of two.\n              <div style={titles}>\n                <PrismCode\n                  code={isPowerOfTwo}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>15. Pow(x, n).</h3>\n              <b>Input: </b>x = 2.00000, n = 10<br/>\n              <b>Output: </b>1024.00000\n              <div style={titles}>\n                <PrismCode\n                  code={myPow}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>16. Ugly Number.</h3>\n              Write a program to check whether a given number is an ugly number.\n              <br/>\n              Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\n              <div style={titles}>\n                <PrismCode\n                  code={isUgly}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>17. Broken Calculator.</h3>\n              On a broken calculator that has a number showing on its display, we can perform two operations:\n              <br/>\n              <ul>\n                <li><b>Double: </b>Multiply the number on the display by 2, or;</li>\n                <li><b>Decrement: </b>Subtract 1 from the number on the display.</li>\n              </ul>\n              Initially, the calculator is displaying the number X.\n              <br/>\n              Return the minimum number of operations needed to display the number Y.\n              <div style={titles}>\n                <PrismCode\n                  code={brokenCalc}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>18. Add Digits.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={addDigits}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>19. Letter Combinations of a Phone Number.</h3>\n              Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.\n              <br/><br/>\n            A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.<br/><br/>\n            <b>Example: </b>\n\n            <b>Input: </b>\"23\"<br/>\n            <b>Output: </b>[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\n              <div style={titles}>\n                <PrismCode\n                  code={letterCombinations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic4));\n"]},"metadata":{},"sourceType":"module"}