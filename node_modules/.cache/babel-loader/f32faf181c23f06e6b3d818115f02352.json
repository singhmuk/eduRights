{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var serverApp=\"\\nconst cors = require('cors');\\nconst express = require('express');\\nconst app = express();\\nconst uuid = require('uuid');\\n\\nconst stripe = require('stripe')('sk_test_51He1P4Jz7nbfLVoYTOkTgJ3CXDoqeiI3npg8CL1enAHoJX2xHewOBVNeVXEfaSs0FbLG7Ys3\\n                                  pycMi6sOP23Lu6dX00PolnchgH');\\napp.use(express.json())\\napp.use(cors())\\n\\napp.get('/', (req, res) => {\\n    res.send('It is working')\\n})\\n\\napp.post('/payment', (req, res) => {\\n    const { product, token } = req.body;\\n    console.log('Products', product);\\n    console.log('Price', product.price);\\n    const idempontencyKey = uuid()\\n\\n    return stripe.customers.create({\\n        email: token.email,\\n        source: token.id\\n    }).then(customer => {\\n        stripe.charges.create({\\n            amount: product.price * 100,\\n            currency: 'usd',\\n            customer: customer.id,\\n            receipt_email: token.email,\\n            description: 'Purchase of product.name',\\n            shipping: {\\n                name: token.card.name,\\n                address: {\\n                    country:token.card.address_country\\n                }\\n            }\\n\\n        }, { idempontencyKey })\\n    })\\n    .then(result => res.status(200).json(result))\\n    .catch(err => console.log(err))\\n})\\n\\n\\napp.listen(5000, ()=> console.log('Started on port 5000'))\".trim();var AppComp=\"\\n//.env\\nREACT_APP_KEY=pk_test_51He1P4Jz7nbfLVoYE9377AbN7XiJcg9JeXrfu1qap2894g8T6hf\\n              rNgnMceZRtx1H9n0HxIyHLqyv4lZvqxv3ifMf004hVnMdtT\\n\\n\\n//App.js\\nimport React, { useState } from 'react';\\nimport StripeCheckout from 'react-stripe-checkout';\\nimport './App.css';\\n\\nfunction App() {\\n\\n  const [ product, setProduct ] = useState({\\n    name: \\\"Reactjs\\\",\\n    price: 10,\\n    productBy: 'Facebook'\\n  })\\n\\nconst makePayment = token => {\\n  const body = {\\n    token,\\n    product\\n  }\\n  const header = {\\n    \\\"Content-Type\\\": \\\"application/json\\\"\\n  }\\n\\n  return fetch('http://localhost:5000/payment', {\\n    method: 'POST',\\n    header,\\n    body: JSON.stringify(body)\\n  }).then(res => {\\n      console.log('Response', res)\\n      const { status } = res;\\n      console.log('Status', status)\\n  })\\n  .catch(err => console.log(err))\\n}\\n\\n  return (\\n    <div className=\\\"App\\\">\\n     Stripe\\n     <StripeCheckout \\n      // stripeKey={process.env.REACT_APP_KEY}\\n      stripeKey=\\\"pk_test_51He1P4Jz7nbfLVoYE9377AbN7XiJcg9JeXrfu1qap2894g8T6hfr\\n            NgnMceZRtx1H9n0HxIyHLqyv4lZvqxv3ifMf004hVnMdtT\\\"\\n      token={makePayment}\\n      amount={product.price * 100}\\n      name=\\\"Reactjs\\\"\\n      shippingAddress\\n      billingAddress\\n      />\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\".trim();var user=\"\\nconst bcrypt = require('bcryptjs');\\n\\nconst userSchema = new Schema({\\n  methods: { type: [String], required: true },\\n  local: { email: { type: String, lowercase: true },\\n    password: { type: String }\\n  },\\n  google: {\\n    id: { type: String },\\n    email: { type: String, lowercase: true }\\n  },\\n  facebook: {\\n    id: { type: String },\\n    email: { type: String, lowercase: true }\\n  }\\n});\\n\\nuserSchema.pre('save', async function (next) {\\n  try {\\n    if (!this.methods.includes('local')) {\\n      next();\\n    }\\n    \\n    const user = this;\\n    //check if the user has been modified to know if the password has already been hashed\\n    if (!user.isModified('local.password')) {\\n      next();\\n    }\\n    \\n    const salt = await bcrypt.genSalt(10);                    // Generate a password hash (salt + hash)\\n    \\n    const passwordHash = await bcrypt.hash(this.local.password, salt);\\n    // Re-assign hashed version over original, plain text password\\n    this.local.password = passwordHash;\\n    next();\\n  } catch (error) {\\n    next(error);\\n  }\\n});\\n\\nuserSchema.methods.isValidPassword = async function (newPassword) {\\n  try {\\n    return await bcrypt.compare(newPassword, this.local.password);\\n  } catch (error) {\\n    throw new Error(error);\\n  }\\n}\\n\\nconst User = mongoose.model('user', userSchema);\\nmodule.exports = User;\".trim();var controllers=\"\\nconst JWT = require('jsonwebtoken');\\nconst User = require('../models/user');\\nconst { JWT_SECRET } = require('../configuration');\\n\\nsignToken = user => {\\n  return JWT.sign({\\n    iss: 'CodeWorkr',\\n    sub: user.id,\\n    iat: new Date().getTime(), // current time\\n    exp: new Date().setDate(new Date().getDate() + 1) // current time + 1 day ahead\\n  }, JWT_SECRET);\\n}\\n\\nmodule.exports = {\\n  signUp: async (req, res, next) => {\\n    const { email, password } = req.value.body;\\n\\n    let foundUser = await User.findOne({ \\\"local.email\\\": email });\\n    if (foundUser) { \\n      return res.status(403).json({ error: 'Email is already in use'});\\n    }\\n\\n    // Is there a Google account with the same email?\\n    foundUser = await User.findOne({ \\n      $or: [\\n        { \\\"google.email\\\": email },\\n        { \\\"facebook.email\\\": email },\\n      ] \\n    });\\n    if (foundUser) {\\n      foundUser.methods.push('local')\\n      foundUser.local = {\\n        email: email, \\n        password: password\\n      }\\n      await foundUser.save()\\n      \\n      const token = signToken(foundUser);\\n      \\n      res.cookie('access_token', token, {\\n        httpOnly: true\\n      });\\n      res.status(200).json({ success: true });\\n    }\\n\\n      const newUser = new User({ \\n      methods: ['local'],\\n      local: {\\n        email: email, \\n        password: password\\n      }\\n    });\\n\\n    await newUser.save();\\n\\n    const token = signToken(newUser);\\n    res.cookie('access_token', token, {\\n      httpOnly: true\\n    });\\n    res.status(200).json({ success: true });\\n  },\\n\\n  signIn: async (req, res, next) => {\\n    const token = signToken(req.user);\\n    res.cookie('access_token', token, {\\n      httpOnly: true\\n    });\\n    res.status(200).json({ success: true });\\n  },\\n\\n  signOut: async (req, res, next) => {\\n    res.clearCookie('access_token');\\n    res.json({ success: true });\\n  },\\n\\n  googleOAuth: async (req, res, next) => {\\n    const token = signToken(req.user);\\n    res.cookie('access_token', token, {\\n      httpOnly: true\\n    });\\n    res.status(200).json({ success: true });\\n  },\\n\\n  linkGoogle: async (req, res, next) => {\\n    res.json({ \\n      success: true,\\n      methods: req.user.methods, \\n      message: 'Successfully linked account with Google' \\n    });\\n  },\\n\\n  unlinkGoogle: async (req, res, next) => {\\n    if (req.user.google) {\\n      req.user.google = undefined\\n    }\\n  \\n    const googleStrPos = req.user.methods.indexOf('google')\\n    if (googleStrPos >= 0) {\\n      req.user.methods.splice(googleStrPos, 1)\\n    }\\n    await req.user.save()\\n\\n    res.json({ \\n      success: true,\\n      methods: req.user.methods, \\n      message: 'Successfully unlinked account from Google' \\n    });\\n  },\\n\\n  facebookOAuth: async (req, res, next) => {\\n    const token = signToken(req.user);\\n    res.cookie('access_token', token, {\\n      httpOnly: true\\n    });\\n    res.status(200).json({ success: true });\\n  },\\n\\n  linkFacebook: async (req, res, next) => {\\n    res.json({ \\n      success: true, \\n      methods: req.user.methods, \\n      message: 'Successfully linked account with Facebook' \\n    });\\n  },\\n\\n  unlinkFacebook: async (req, res, next) => {\\n    // Delete Facebook sub-object\\n    if (req.user.facebook) {\\n      req.user.facebook = undefined\\n    }\\n    \\n    // Remove 'facebook' from methods array\\n    const facebookStrPos = req.user.methods.indexOf('facebook')\\n    if (facebookStrPos >= 0) {\\n      req.user.methods.splice(facebookStrPos, 1)\\n    }\\n    await req.user.save()\\n\\n    res.json({ \\n      success: true,\\n      methods: req.user.methods, \\n      message: 'Successfully unlinked account from Facebook' \\n    });\\n  },\\n\\n  dashboard: async (req, res, next) => {\\n    console.log('I managed to get here!');\\n    res.json({ \\n      secret: \\\"resource\\\",\\n      methods: req.user.methods\\n    });\\n  },\\n\\n  checkAuth: async (req, res, next) => {\\n    console.log('I managed to get here!');\\n    res.json({ success: true });\\n  }\\n}\".trim();var configuration=\"\\nif (process.env.NODE_ENV === 'test') {\\n  module.exports = {\\n    JWT_SECRET: 'codeworkrauthentication',\\n    oauth: {\\n      google: {\\n        clientID: 'number',\\n        clientSecret: 'string',\\n      },\\n      facebook: {\\n        clientID: 'number',\\n        clientSecret: 'string',\\n      },\\n    },\\n  };\\n} else {\\n  module.exports = {\\n    JWT_SECRET: 'codeworkrauthentication',\\n    oauth: {\\n      google: {\\n        clientID: 'number',\\n        clientSecret: 'string',\\n      },\\n      facebook: {\\n        clientID: 'number',\\n        clientSecret: 'string',\\n      },\\n    },\\n  };\\n}\".trim();var routeHelpers=\"\\nconst Joi = require('joi');\\n\\nmodule.exports = {\\n  validateBody: (schema) => {\\n    return (req, res, next) => {\\n      const result = Joi.validate(req.body, schema);\\n      if (result.error) {\\n        return res.status(400).json(result.error);\\n      }\\n\\n      if (!req.value) { req.value = {}; }\\n      req.value['body'] = result.value;\\n      next();\\n    }\\n  },\\n\\n  schemas: {\\n    authSchema: Joi.object().keys({\\n      email: Joi.string().email().required(),\\n      password: Joi.string().required()\\n    })\\n  }\\n}\".trim();var routesUsers=\"\\nconst express = require('express');\\nconst router = require('express-promise-router')();\\nconst passport = require('passport');\\nconst passportConf = require('../passport');\\n\\nconst { validateBody, schemas } = require('../helpers/routeHelpers');\\nconst UsersController = require('../controllers/users');\\nconst passportSignIn = passport.authenticate('local', { session: false });\\nconst passportJWT = passport.authenticate('jwt', { session: false });\\n\\nrouter.route('/signup')\\n  .post(validateBody(schemas.authSchema), UsersController.signUp);\\n\\nrouter.route('/signin')\\n  .post(validateBody(schemas.authSchema), passportSignIn, UsersController.signIn);\\n\\nrouter.route('/signout')\\n  .get(passportJWT, UsersController.signOut);\\n\\nrouter.route('/oauth/google')\\n  .post(passport.authenticate('googleToken', { session: false }), UsersController.googleOAuth);\\n\\nrouter.route('/oauth/facebook')\\n  .post(passport.authenticate('facebookToken', { session: false }), UsersController.facebookOAuth);\\n\\nrouter.route('/oauth/link/google')\\n  .post(passportJWT, passport.authorize('googleToken', { session: false }), UsersController.linkGoogle)\\n\\nrouter.route('/oauth/unlink/google')\\n  .post(passportJWT, UsersController.unlinkGoogle);\\n\\nrouter.route('/oauth/link/facebook')\\n  .post(passportJWT, passport.authorize('facebookToken', { session: false }), UsersController.linkFacebook)\\n\\nrouter.route('/oauth/unlink/facebook')\\n  .post(passportJWT, UsersController.unlinkFacebook);\\n\\nrouter.route('/dashboard')\\n  .get(passportJWT, UsersController.dashboard);\\n\\nrouter.route('/status')\\n  .get(passportJWT, UsersController.checkAuth);\\n\\nmodule.exports = router;\".trim();var passport=\"\\nconst passport = require('passport');\\nconst JwtStrategy = require('passport-jwt').Strategy;\\nconst { ExtractJwt } = require('passport-jwt');\\nconst LocalStrategy = require('passport-local').Strategy;\\nconst GooglePlusTokenStrategy = require('passport-google-plus-token');\\nconst FacebookTokenStrategy = require('passport-facebook-token');\\nconst config = require('./configuration');\\nconst User = require('./models/user');\\n\\nconst cookieExtractor = req => {\\n  let token = null;\\n  if (req && req.cookies) {\\n    token = req.cookies['access_token'];\\n  }\\n  return token;\\n}\\n\\n\\npassport.use(new JwtStrategy({\\n  jwtFromRequest: cookieExtractor,\\n  secretOrKey: config.JWT_SECRET,\\n  passReqToCallback: true\\n}, async (req, payload, done) => {\\n  try {\\n    // Find the user specified in token\\n    const user = await User.findById(payload.sub);\\n\\n    if (!user) {\\n      return done(null, false);\\n    }\\n\\n    req.user = user;\\n    done(null, user);\\n  } catch(error) {\\n    done(error, false);\\n  }\\n}));\\n\\npassport.use('googleToken', new GooglePlusTokenStrategy({\\n  clientID: config.oauth.google.clientID,\\n  clientSecret: config.oauth.google.clientSecret,\\n  passReqToCallback: true,\\n}, async (req, accessToken, refreshToken, profile, done) => {\\n  try {\\n    if (req.user) {\\n      req.user.methods.push('google')\\n      req.user.google = {\\n        id: profile.id,\\n        email: profile.emails[0].value\\n      }\\n      await req.user.save()\\n      return done(null, req.user);\\n    } else {\\n      let existingUser = await User.findOne({ \\\"google.id\\\": profile.id });\\n      if (existingUser) {\\n        return done(null, existingUser);\\n      }\\n\\n      \\n      existingUser = await User.findOne({ \\\"local.email\\\": profile.emails[0].value })\\n      if (existingUser) {\\n        existingUser.methods.push('google')\\n        existingUser.google = {\\n          id: profile.id,\\n          email: profile.emails[0].value\\n        }\\n        await existingUser.save()\\n        return done(null, existingUser);\\n      }\\n\\n      const newUser = new User({\\n        methods: ['google'],\\n        google: {\\n          id: profile.id,\\n          email: profile.emails[0].value\\n        }\\n      });\\n  \\n      await newUser.save();\\n      done(null, newUser);\\n    }\\n  } catch(error) {\\n    done(error, false, error.message);\\n  }\\n}));\\n\\npassport.use('facebookToken', new FacebookTokenStrategy({\\n  clientID: config.oauth.facebook.clientID,\\n  clientSecret: config.oauth.facebook.clientSecret,\\n  passReqToCallback: true\\n}, async (req, accessToken, refreshToken, profile, done) => {\\n  try {\\n    \\n    if (req.user) {\\n      req.user.methods.push('facebook')\\n      req.user.facebook = {\\n        id: profile.id,\\n        email: profile.emails[0].value\\n      }\\n      await req.user.save();\\n      return done(null, req.user);\\n    } else {\\n      let existingUser = await User.findOne({ \\\"facebook.id\\\": profile.id });\\n      if (existingUser) {\\n        return done(null, existingUser);\\n      }\\n\\n      existingUser = await User.findOne({ \\\"local.email\\\": profile.emails[0].value })\\n      if (existingUser) {\\n        existingUser.methods.push('facebook')\\n        existingUser.facebook = {\\n          id: profile.id,\\n          email: profile.emails[0].value\\n        }\\n        await existingUser.save()\\n        return done(null, existingUser);\\n      }\\n\\n      const newUser = new User({\\n        methods: ['facebook'],\\n        facebook: {\\n          id: profile.id,\\n          email: profile.emails[0].value\\n        }\\n      });\\n\\n      await newUser.save();\\n      done(null, newUser);\\n    }\\n  } catch(error) {\\n    done(error, false, error.message);\\n  }\\n}));\\n\\n\\npassport.use(new LocalStrategy({\\n  usernameField: 'email'\\n}, async (email, password, done) => {\\n  try {\\n    const user = await User.findOne({ \\\"local.email\\\": email });\\n    \\n    if (!user) {\\n      return done(null, false);\\n    }\\n  \\n    const isMatch = await user.isValidPassword(password);\\n  \\n    if (!isMatch) {\\n      return done(null, false);\\n    }\\n  \\n    done(null, user);\\n  } catch(error) {\\n    done(error, false);\\n  }\\n}));\".trim();var appServer=\"\\nconst express = require(\\\"express\\\");\\nconst morgan = require(\\\"morgan\\\");\\nconst mongoose = require(\\\"mongoose\\\");\\nconst cors = require(\\\"cors\\\");\\nconst cookieParser = require(\\\"cookie-parser\\\");\\n\\nmongoose.Promise = global.Promise;\\nif (process.env.NODE_ENV === \\\"test\\\") {\\n  mongoose.connect(\\\"mongodb://localhost/googleFacebookAuth\\\", {\\n    useNewUrlParser: true\\n  });\\n} else {\\n  mongoose.connect(\\\"mongodb://localhost/googleFacebookAuth\\\", {\\n    useNewUrlParser: true\\n  });\\n}\\n\\nconst app = express();\\napp.use(cookieParser());\\napp.use(\\n  cors({\\n    origin: \\\"http://localhost:3000\\\",\\n    credentials: true\\n  })\\n);\\n\\nif (!process.env.NODE_ENV === \\\"test\\\") {\\n  app.use(morgan(\\\"dev\\\"));\\n}\\n\\napp.use(express.json());\\napp.use(\\\"/users\\\", require(\\\"./routes/users\\\"));\\n\\nmodule.exports = app;\\n\".trim();var indexServ=\"\\nconst app = require('./app');\\n\\nconst port = process.env.PORT || 5000;\\napp.listen(port);\\nconsole.log(Server listening at '$'{port});\\n\".trim();var actionsTypes=\"\\nexport const AUTH_SIGN_UP = 'AUTH_SIGN_UP';\\nexport const AUTH_SIGN_OUT = 'AUTH_SIGN_OUT';\\nexport const AUTH_SIGN_IN = 'AUTH_SIGN_IN';\\nexport const AUTH_LINK_GOOGLE = 'AUTH_LINK_GOOGLE';\\nexport const AUTH_LINK_FACEBOOK = 'AUTH_LINK_FACEBOOK';\\nexport const AUTH_UNLINK_GOOGLE = 'AUTH_UNLINK_GOOGLE';\\nexport const AUTH_UNLINK_FACEBOOK = 'AUTH_UNLINK_FACEBOOK';\\n\\nexport const AUTH_ERROR = 'AUTH_ERROR';\\nexport const DASHBOARD_GET_DATA = 'DASHBOARD_GET_DATA';\\n\".trim();var actionsIndex=\"import axios from 'axios';\\nimport { \\n  AUTH_SIGN_UP, \\n  AUTH_SIGN_OUT, \\n  AUTH_SIGN_IN,\\n  AUTH_LINK_GOOGLE, \\n  AUTH_LINK_FACEBOOK,\\n  AUTH_UNLINK_GOOGLE,\\n  AUTH_UNLINK_FACEBOOK, \\n  AUTH_ERROR,\\n  DASHBOARD_GET_DATA } from './types';\\n\\nexport const oauthGoogle = data => {\\n  return async dispatch => {\\n    await axios.post('http://localhost:5000/users/oauth/google', {\\n      access_token: data\\n    });\\n\\n    dispatch({\\n      type: AUTH_SIGN_UP\\n    });\\n  };\\n}\\n\\nexport const linkGoogle = data => {\\n  return async dispatch => {\\n    const res = await axios.post('http://localhost:5000/users/oauth/link/google', {\\n      access_token: data\\n    });\\n\\n    dispatch({\\n      type: AUTH_LINK_GOOGLE,\\n      payload: res.data\\n    });\\n  };\\n}\\n\\nexport const unlinkGoogle = data => {\\n  return async dispatch => {\\n    const res = await axios.post('http://localhost:5000/users/oauth/unlink/google');\\n\\n    dispatch({\\n      type: AUTH_UNLINK_GOOGLE,\\n      payload: res.data\\n    });\\n  };\\n}\\n\\nexport const linkFacebook = data => {\\n  return async dispatch => {\\n    const res = await axios.post('http://localhost:5000/users/oauth/link/facebook', {\\n      access_token: data\\n    });\\n\\n    dispatch({\\n      type: AUTH_LINK_FACEBOOK,\\n      payload: res.data\\n    });\\n  };\\n}\\n\\nexport const unlinkFacebook = data => {\\n  return async dispatch => {\\n    const res = await axios.post('http://localhost:5000/users/oauth/unlink/facebook');\\n\\n    dispatch({\\n      type: AUTH_UNLINK_FACEBOOK,\\n      payload: res.data\\n    });\\n  };\\n}\\n\\nexport const oauthFacebook = data => {\\n  return async dispatch => {\\n    await axios.post('http://localhost:5000/users/oauth/facebook', {\\n      access_token: data\\n    });\\n\\n    dispatch({\\n      type: AUTH_SIGN_UP\\n    });\\n  };\\n}\\n\\nexport const signUp = data => {\\n  return async dispatch => {\\n    try {\\n      await axios.post('http://localhost:5000/users/signup', data);\\n\\n      dispatch({\\n        type: AUTH_SIGN_UP\\n      });\\n    } catch(err) {\\n      dispatch({\\n        type: AUTH_ERROR,\\n        payload: 'Email is already in use'\\n      })\\n    }\\n  };\\n}\\n\\nexport const signIn = data => {\\n  return async dispatch => {\\n    try {\\n      await axios.post('http://localhost:5000/users/signin', data);\\n\\n      dispatch({\\n        type: AUTH_SIGN_IN\\n      });\\n    } catch(err) {\\n      dispatch({\\n        type: AUTH_ERROR,\\n        payload: 'Email and password combination isn't valid'\\n      })\\n    }\\n  };\\n}\\n\\nexport const checkAuth = () => {\\n  return async dispatch => {\\n    try {\\n      await axios.get('http://localhost:5000/users/status');\\n\\n      dispatch({\\n        type: AUTH_SIGN_IN\\n      });\\n\\n      console.log('user is auth-ed')\\n    } catch(err) {\\n      console.log('error', err)\\n    }\\n  };\\n}\\n\\nexport const getDashboard = () => {\\n  return async dispatch => {\\n    try {\\n      const res = await axios.get('http://localhost:5000/users/dashboard')\\n\\n      dispatch({\\n        type: DASHBOARD_GET_DATA,\\n        payload: res.data\\n      })\\n\\n    } catch(err) {\\n      console.error('err', err)\\n    }\\n  }\\n}\\n\\nexport const signOut = () => {\\n  return async dispatch => {\\n    await axios.get('http://localhost:5000/users/signout');\\n\\n    dispatch({\\n      type: AUTH_SIGN_OUT\\n    })\\n  };\\n}\\n\\n\".trim();var reducersAuth=\"\\nimport { \\n  AUTH_SIGN_UP, \\n  AUTH_SIGN_OUT, \\n  AUTH_SIGN_IN, \\n  AUTH_ERROR } from '../actions/types';\\n\\nconst DEFAULT_STATE = {\\n  isAuthenticated: false,\\n  errorMessage: ''\\n}\\n\\nexport default (state = DEFAULT_STATE, action) => {\\n  switch(action.type) {\\n    case AUTH_SIGN_UP:\\n      return { ...state, isAuthenticated: true, errorMessage: '' }\\n    case AUTH_SIGN_IN:\\n      return { ...state, isAuthenticated: true, errorMessage: '' }\\n    case AUTH_SIGN_OUT:\\n      return { ...state, isAuthenticated: false, errorMessage: '' }\\n    case AUTH_ERROR:\\n      return { ...state, errorMessage: action.payload }\\n    default:\\n      return state\\n  }\\n}\".trim();var dashboard=\"\\nimport { \\n  DASHBOARD_GET_DATA, \\n  AUTH_LINK_GOOGLE,\\n  AUTH_LINK_FACEBOOK,\\n  AUTH_UNLINK_GOOGLE,\\n  AUTH_UNLINK_FACEBOOK  \\n} from '../actions/types';\\n\\nconst DEFAULT_STATE = {\\n  secret: '',\\n  methods: []\\n}\\n\\nexport default (state = DEFAULT_STATE, action) => {\\n  switch(action.type) {\\n    case AUTH_LINK_GOOGLE:\\n      return { ...state, methods: action.payload.methods }\\n    case AUTH_LINK_FACEBOOK:\\n      return { ...state, methods: action.payload.methods }\\n    case AUTH_UNLINK_GOOGLE:\\n      return { ...state, methods: action.payload.methods }\\n    case AUTH_UNLINK_FACEBOOK:\\n      return { ...state, methods: action.payload.methods }\\n    case DASHBOARD_GET_DATA:\\n      return { ...state, secret: action.payload.secret, methods: action.payload.methods }\\n    default:\\n      return state\\n  }\\n}\".trim();var reducersIndex=\"\\nimport { combineReducers } from 'redux';\\nimport { reducer as formReducer } from 'redux-form';\\nimport authReducer from './auth';\\nimport dashboardReducer from './dashboard';\\n\\nexport default combineReducers({\\n  form: formReducer,\\n  auth: authReducer,\\n  dash: dashboardReducer\\n});\\n\".trim();var authGuard=\"\\nimport React, { Component } from 'react';\\nimport { connect } from 'react-redux';\\n\\nexport default (OriginalComponent) => {\\n  class MixedComponent extends Component {\\n\\n    checkAuth() {\\n      if (!this.props.isAuth && !this.props.jwtToken) {\\n        this.props.history.push('/');\\n      }\\n    }\\n\\n    componentDidMount() {\\n      this.checkAuth();\\n    }\\n\\n    componentDidUpdate() {\\n      this.checkAuth();\\n    }\\n\\n    render() {\\n      return <OriginalComponent {...this.props} />;\\n    }\\n  }\\n\\n  function mapStateToProps(state) {\\n    return {\\n      isAuth: state.auth.isAuthenticated,\\n      jwtToken: state.auth.token\\n    }\\n  }\\n\\n  return connect(mapStateToProps)(MixedComponent);\\n};\\n\".trim();var SignUp=\"\\nimport React, { Component } from 'react';\\nimport { reduxForm, Field } from 'redux-form';\\nimport { connect } from 'react-redux';\\nimport { compose } from 'redux';\\nimport GoogleLogin from 'react-google-login';\\nimport FacebookLogin from 'react-facebook-login/dist/facebook-login-render-props'\\n\\nimport * as actions from '../actions';\\nimport CustomInput from './CustomInput';\\n\\nclass SignUp extends Component {\\n  constructor(props) {\\n    super(props);\\n    this.onSubmit = this.onSubmit.bind(this);\\n    this.responseGoogle = this.responseGoogle.bind(this);\\n    this.responseFacebook = this.responseFacebook.bind(this);\\n  }\\n\\n  async onSubmit(formData) {\\n    await this.props.signUp(formData);\\n    if (!this.props.errorMessage) {\\n      this.props.history.push('/dashboard');\\n    }\\n  }\\n\\n  async responseGoogle(res) {\\n    await this.props.oauthGoogle(res.accessToken);\\n    if (!this.props.errorMessage) {\\n      this.props.history.push('/dashboard');\\n    }\\n  }\\n\\n  async responseFacebook(res) {\\n    await this.props.oauthFacebook(res.accessToken);\\n    if (!this.props.errorMessage) {\\n      this.props.history.push('/dashboard');\\n    }\\n  }\\n\\n  render() {\\n    const { handleSubmit } = this.props;\\n    return (\\n      <div className=\\\"row\\\">\\n        <div className=\\\"col\\\">\\n          <form onSubmit={handleSubmit(this.onSubmit)}>\\n            <fieldset>\\n              <Field\\n                name=\\\"email\\\"\\n                type=\\\"text\\\"\\n                id=\\\"email\\\"\\n                label=\\\"Enter your email\\\"\\n                placeholder=\\\"example@example.com\\\"\\n                component={ CustomInput } />\\n            </fieldset>\\n            <fieldset>\\n              <Field\\n                name=\\\"password\\\"\\n                type=\\\"password\\\"\\n                id=\\\"password\\\"\\n                label=\\\"Enter your password\\\"\\n                placeholder=\\\"yoursuperpassword\\\"\\n                component={ CustomInput } />\\n            </fieldset>\\n\\n            { this.props.errorMessage ? \\n            <div className=\\\"alert alert-danger\\\">\\n              { this.props.errorMessage }\\n            </div> : null }\\n\\n            <button type=\\\"submit\\\" className=\\\"btn btn-primary\\\">Sign Up</button>\\n          </form>\\n        </div>\\n        <div className=\\\"col\\\">\\n          <div className=\\\"text-center\\\">\\n            <div className=\\\"alert alert-primary\\\">\\n              Or sign up using third-party services\\n            </div>\\n            <FacebookLogin\\n              appId=\\\"number\\\"\\n              render={renderProps => (\\n                <button className=\\\"btn btn-primary\\\" onClick={renderProps.onClick}>Facebook</button>\\n              )}\\n              fields=\\\"name,email,picture\\\"\\n              callback={this.responseFacebook}\\n              cssClass=\\\"btn btn-outline-primary\\\"\\n            />\\n            <GoogleLogin \\n              clientId=\\\"number\\\"\\n              render={renderProps => (\\n                <button className=\\\"btn btn-danger\\\" onClick={renderProps.onClick} disabled={renderProps.disabled}>\\n                                    Google</button>\\n              )}\\n              onSuccess={this.responseGoogle}\\n              onFailure={this.responseGoogle}\\n              className=\\\"btn btn-outline-danger\\\"\\n            />\\n          </div>\\n        </div>\\n      </div>\\n    );\\n  }\\n}\\n\\nfunction mapStateToProps(state) {\\n  return {\\n    errorMessage: state.auth.errorMessage\\n  }\\n}\\n\\nexport default compose(\\n  connect(mapStateToProps, actions),\\n  reduxForm({ form: 'signup' })\\n)(SignUp)\\n\".trim();var SignIn=\"\\nimport React, { Component } from 'react';\\nimport { reduxForm, Field } from 'redux-form';\\nimport { connect } from 'react-redux';\\nimport { compose } from 'redux';\\nimport GoogleLogin from 'react-google-login';\\nimport FacebookLogin from 'react-facebook-login/dist/facebook-login-render-props'\\n\\nimport * as actions from '../actions';\\nimport CustomInput from './CustomInput';\\n\\nclass SignIn extends Component {\\n  constructor(props) {\\n    super(props);\\n    this.onSubmit = this.onSubmit.bind(this);\\n    this.responseGoogle = this.responseGoogle.bind(this);\\n    this.responseFacebook = this.responseFacebook.bind(this);\\n  }\\n\\n  async onSubmit(formData) {\\n    await this.props.signIn(formData);\\n    if (!this.props.errorMessage) {\\n      this.props.history.push('/dashboard');\\n    }\\n  }\\n\\n  async responseGoogle(res) {\\n    await this.props.oauthGoogle(res.accessToken);\\n    if (!this.props.errorMessage) {\\n      this.props.history.push('/dashboard');\\n    }\\n  }\\n\\n  async responseFacebook(res) {\\n    await this.props.oauthFacebook(res.accessToken);\\n    if (!this.props.errorMessage) {\\n      this.props.history.push('/dashboard');\\n    }\\n  }\\n\\n  render() {\\n    const { handleSubmit } = this.props;\\n    return (\\n      <div className=\\\"row\\\">\\n        <div className=\\\"col\\\">\\n          <form onSubmit={handleSubmit(this.onSubmit)}>\\n            <fieldset>\\n              <Field\\n                name=\\\"email\\\"\\n                type=\\\"text\\\"\\n                id=\\\"email\\\"\\n                label=\\\"Enter your email\\\"\\n                placeholder=\\\"example@example.com\\\"\\n                component={ CustomInput } />\\n            </fieldset>\\n            <fieldset>\\n              <Field\\n                name=\\\"password\\\"\\n                type=\\\"password\\\"\\n                id=\\\"password\\\"\\n                label=\\\"Enter your password\\\"\\n                placeholder=\\\"yoursuperpassword\\\"\\n                component={ CustomInput } />\\n            </fieldset>\\n\\n            { this.props.errorMessage ? \\n            <div className=\\\"alert alert-danger\\\">\\n              { this.props.errorMessage }\\n            </div> : null }\\n\\n            <button type=\\\"submit\\\" className=\\\"btn btn-primary\\\">Sign In</button>\\n          </form>\\n        </div>\\n        <div className=\\\"col\\\">\\n          <div className=\\\"text-center\\\">\\n            <div className=\\\"alert alert-primary\\\">\\n              Or sign in using third-party services\\n            </div>\\n            <FacebookLogin\\n              appId=\\\"number\\\"\\n              render={renderProps => (\\n                <button className=\\\"btn btn-primary\\\" onClick={renderProps.onClick}>Facebook</button>\\n              )}\\n              fields=\\\"name,email,picture\\\"\\n              callback={this.responseFacebook}\\n              cssClass=\\\"btn btn-outline-primary\\\"\\n            />\\n            <GoogleLogin \\n              clientId=\\\"number\\\"\\n              render={renderProps => (\\n                <button className=\\\"btn btn-danger\\\" onClick={renderProps.onClick} disabled={renderProps.disabled}>\\n                                   Google</button>\\n              )}\\n              onSuccess={this.responseGoogle}\\n              onFailure={this.responseGoogle}\\n              className=\\\"btn btn-outline-danger\\\"\\n            />\\n          </div>\\n        </div>\\n      </div>\\n    );\\n  }\\n}\\n\\nfunction mapStateToProps(state) {\\n  return {\\n    errorMessage: state.auth.errorMessage\\n  }\\n}\\n\\nexport default compose(\\n  connect(mapStateToProps, actions),\\n  reduxForm({ form: 'signin' })\\n)(SignIn)\\n\".trim();var Header=\"\\nimport React, { Component } from 'react';\\nimport { Link } from 'react-router-dom';\\nimport { connect } from 'react-redux';\\n\\nimport * as actions from '../actions';\\n\\nclass Header extends Component {\\n  constructor(props) {\\n    super(props);\\n    this.signOut = this.signOut.bind(this);\\n  }\\n\\n  signOut() {\\n    this.props.signOut();\\n  }\\n\\n  render() {\\n    return (\\n      <nav className=\\\"navbar navbar-expand-lg navbar-dark bg-dark\\\" style={{ marginBottom: '30px' }}>\\n        <Link className=\\\"navbar-brand\\\" to=\\\"/\\\">CodeWorkr API Auth</Link>\\n\\n        <div className=\\\"collapse navbar-collapse\\\">\\n          <ul className=\\\"navbar-nav mr-auto\\\">\\n            <li className=\\\"nav-item\\\">\\n              <Link className=\\\"nav-link\\\" to=\\\"/dashboard\\\">Dashboard</Link>\\n            </li>\\n          </ul>\\n\\n          <ul className=\\\"nav navbar-nav ml-auto\\\">\\n            { !this.props.isAuth ?\\n              [<li className=\\\"nav-item\\\" key=\\\"signup\\\">\\n                <Link className=\\\"nav-link\\\" to=\\\"/signup\\\">Sign Up</Link>\\n              </li>,\\n              <li className=\\\"nav-item\\\" key=\\\"signin\\\">\\n                <Link className=\\\"nav-link\\\" to=\\\"/signin\\\">Sign In</Link>\\n              </li>] : null }\\n            \\n            { this.props.isAuth ?\\n              <li className=\\\"nav-item\\\">\\n                <Link className=\\\"nav-link\\\" to=\\\"/signout\\\" onClick={this.signOut}>Sign Out</Link>\\n              </li> : null }\\n          </ul>\\n        </div>\\n      </nav>\\n    );\\n  }\\n}\\n\\nfunction mapStateToProps(state) {\\n  return {\\n    isAuth: state.auth.isAuthenticated\\n  };\\n}\\n\\nexport default connect(mapStateToProps, actions)(Header);\\n\\n\\n\".trim();var componentsDashboard=\"\\nimport React, { Component } from 'react';\\nimport { connect } from 'react-redux';\\nimport GoogleLogin from 'react-google-login';\\nimport FacebookLogin from 'react-facebook-login/dist/facebook-login-render-props'\\n\\nimport * as actions from '../actions';\\n\\nclass Dashboard extends Component {\\n  async componentDidMount() {\\n    this.props.getDashboard()\\n  }\\n\\n  linkFacebook = async (res) => {\\n    console.log('Link with Facebook', res)  \\n    await this.props.linkFacebook(res.accessToken);\\n  }\\n\\n  linkGoogle = async (res) => {\\n    console.log('Link with Google', res)  \\n    await this.props.linkGoogle(res.accessToken);\\n  }\\n\\n  unlinkGoogle = async () => {\\n    console.log('Unlink Google')  \\n    await this.props.unlinkGoogle();\\n  }\\n  \\n  unlinkFacebook = async (res) => {\\n    console.log('Unlink Facebook')  \\n    await this.props.unlinkFacebook();\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        This is a Dashboard component\\n        <br/>\\n        Our secret: <h3>{this.props.secret}</h3>\\n\\n        <h2>Link your social media accounts</h2>\\n        <FacebookLogin\\n          appId=\\\"171335970085090\\\"\\n          disabled={true}\\n          render={renderProps => (\\n            <button onClick={renderProps.onClick} \\n             disabled={this.props.dashboard.methods.includes('facebook') ? true : false}>\\n                  Link with Facebook</button>\\n          )}\\n          fields=\\\"name,email,picture\\\"\\n          callback={this.linkFacebook}\\n          cssClass=\\\"btn btn-outline-primary\\\"\\n        />\\n        <GoogleLogin \\n          clientId=\\\"499420307488-hj9l9h3amt5into76m9i0ntkaqcg9q4t.apps.googleusercontent.com\\\"\\n          disabled={this.props.dashboard.methods.includes('google') ? true : false}\\n          render={renderProps => (\\n            <button onClick={renderProps.onClick} \\n                    disabled={renderProps.disabled}>Link with Google</button>\\n          )}\\n          onSuccess={this.linkGoogle}\\n          onFailure={this.linkGoogle}\\n        />\\n        <br />\\n        <br />\\n        <br />\\n        <h2>Unlink your social media accounts</h2>\\n        <button \\n          style={{ marginRight: 15 }} \\n          className=\\\"btn btn-primary\\\" \\n          onClick={ () => this.unlinkFacebook() } \\n          disabled={ this.props.dashboard.methods.includes('facebook') ? false : true }\\n        >\\n          Unlink with Facebook\\n        </button>\\n        <button \\n          className=\\\"btn btn-danger\\\" \\n          onClick={ () => this.unlinkGoogle() }\\n          disabled={ this.props.dashboard.methods.includes('google') ? false : true }\\n        >\\n          Unlink with Google\\n        </button>\\n      </div>\\n    );\\n  }\\n}\\n\\nfunction mapStateToProps(state) {\\n  return {\\n    secret: state.dash.secret,\\n    dashboard: state.dash,\\n    auth: state.auth\\n  }\\n}\\n\\nexport default connect(mapStateToProps, actions)(Dashboard);\\n\".trim();var CustomInput=\"\\nimport React, { Component } from 'react';\\n\\nexport default class CustomInput extends Component {\\n  render() {\\n    const { input: { value, onChange } } = this.props;\\n    return (\\n      <div className=\\\"form-group\\\">\\n        <label htmlFor={ this.props.id }>{ this.props.label }</label>\\n        <input \\n          name={ this.props.name }\\n          id={ this.props.id }\\n          placeholder={ this.props.placeholder }\\n          className=\\\"form-control\\\"\\n          type={ this.props.type }\\n          value={ value }\\n          onChange={ onChange }\\n        />\\n      </div>\\n    );\\n  }\\n}\\n\\n\\n//components/Home.js\\nimport React from 'react';\\n\\nexport default () => {\\n  return (\\n    <div>\\n      Welcome to our home page!\\n    </div>\\n  );\\n};\".trim();var AppCompo=\"\\nimport React, { Component } from 'react';\\nimport { connect } from 'react-redux';\\n\\nimport Header from './Header';\\nimport * as actions from '../actions';\\n\\nclass App extends Component {\\n  componentDidMount() {\\n    this.props.checkAuth();\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <Header />\\n        <div className=\\\"container\\\">\\n        { this.props.children }\\n        </div>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default connect(null, actions)(App);\".trim();var indexComp=\"\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { BrowserRouter, Route } from 'react-router-dom';\\nimport { createStore, applyMiddleware } from 'redux';\\nimport { Provider } from 'react-redux';\\nimport reduxThunk from 'redux-thunk';\\nimport axios from 'axios';\\n\\nimport registerServiceWorker from './registerServiceWorker';\\nimport App from './components/App';\\nimport Home from './components/Home';\\nimport SignUp from './components/SignUp';\\nimport SignIn from './components/SignIn';\\nimport Dashboard from './components/Dashboard';\\nimport reducers from './reducers';\\n\\nimport authGuard from './components/HOCs/authGuard';\\n\\naxios.defaults.withCredentials = true;\\n\\nReactDOM.render(\\n  <Provider store={createStore(reducers, {}, applyMiddleware(reduxThunk))}>\\n    <BrowserRouter>\\n      <App>\\n        <Route exact path=\\\"/\\\" component={Home} />\\n        <Route exact path=\\\"/signup\\\" component={SignUp} />\\n        <Route exact path=\\\"/signin\\\" component={SignIn} />\\n        <Route exact path=\\\"/dashboard\\\" component={authGuard(Dashboard)} />\\n      </App>\\n    </BrowserRouter>\\n  </Provider>, \\n  document.querySelector('#root'));\\nregisterServiceWorker();\\n\\n\\n//.env\\nSKIP_PREFLIGHT_CHECK=true\".trim();var Strips=/*#__PURE__*/function(_Component){_inherits(Strips,_Component);function Strips(){_classCallCheck(this,Strips);return _possibleConstructorReturn(this,_getPrototypeOf(Strips).apply(this,arguments));}_createClass(Strips,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1.Strip\"),React.createElement(\"b\",null,\"server.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:serverApp,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Client\"),React.createElement(\"b\",null,\"App.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:AppComp,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2.Signin with google facebook\"),React.createElement(\"b\",null,\"models/user.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:user,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"controllers/user.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:controllers,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"configuration/index.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:configuration,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"helpers/routeHelpers.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:routeHelpers,language:\"js\",plugins:[\"line-numbers\"]})),\"routes\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"routes/users.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:routesUsers,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"passport.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:passport,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"app.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:appServer,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"index.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:indexServ,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"h3\",null,\"Client\"),React.createElement(\"b\",null,\"actions/types.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:actionsTypes,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"actions/index.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:actionsIndex,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"reducers/auth.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:reducersAuth,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"reducers/dashboard.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:dashboard,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"reducers/index.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:reducersIndex,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"components/HOCs/authGuard.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:authGuard,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"components/SignUp.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:SignUp,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"components/SignIn.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:SignIn,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"components/Header.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Header,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"components/Dashboard.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:componentsDashboard,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"components/CustomInput.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:CustomInput,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"components/AppCompo.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:AppCompo,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"index.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:indexComp,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return Strips;}(Component);export default withStyles(styles)(Strips);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/mern/projects/stripes.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","serverApp","trim","AppComp","user","controllers","configuration","routeHelpers","routesUsers","passport","appServer","indexServ","actionsTypes","actionsIndex","reducersAuth","dashboard","reducersIndex","authGuard","SignUp","SignIn","Header","componentsDashboard","CustomInput","AppCompo","indexComp","Strips","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst serverApp = `\nconst cors = require('cors');\nconst express = require('express');\nconst app = express();\nconst uuid = require('uuid');\n\nconst stripe = require('stripe')('sk_test_51He1P4Jz7nbfLVoYTOkTgJ3CXDoqeiI3npg8CL1enAHoJX2xHewOBVNeVXEfaSs0FbLG7Ys3\n                                  pycMi6sOP23Lu6dX00PolnchgH');\napp.use(express.json())\napp.use(cors())\n\napp.get('/', (req, res) => {\n    res.send('It is working')\n})\n\napp.post('/payment', (req, res) => {\n    const { product, token } = req.body;\n    console.log('Products', product);\n    console.log('Price', product.price);\n    const idempontencyKey = uuid()\n\n    return stripe.customers.create({\n        email: token.email,\n        source: token.id\n    }).then(customer => {\n        stripe.charges.create({\n            amount: product.price * 100,\n            currency: 'usd',\n            customer: customer.id,\n            receipt_email: token.email,\n            description: 'Purchase of product.name',\n            shipping: {\n                name: token.card.name,\n                address: {\n                    country:token.card.address_country\n                }\n            }\n\n        }, { idempontencyKey })\n    })\n    .then(result => res.status(200).json(result))\n    .catch(err => console.log(err))\n})\n\n\napp.listen(5000, ()=> console.log('Started on port 5000'))`.trim();\n\nconst AppComp = `\n//.env\nREACT_APP_KEY=pk_test_51He1P4Jz7nbfLVoYE9377AbN7XiJcg9JeXrfu1qap2894g8T6hf\n              rNgnMceZRtx1H9n0HxIyHLqyv4lZvqxv3ifMf004hVnMdtT\n\n\n//App.js\nimport React, { useState } from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport './App.css';\n\nfunction App() {\n\n  const [ product, setProduct ] = useState({\n    name: \"Reactjs\",\n    price: 10,\n    productBy: 'Facebook'\n  })\n\nconst makePayment = token => {\n  const body = {\n    token,\n    product\n  }\n  const header = {\n    \"Content-Type\": \"application/json\"\n  }\n\n  return fetch('http://localhost:5000/payment', {\n    method: 'POST',\n    header,\n    body: JSON.stringify(body)\n  }).then(res => {\n      console.log('Response', res)\n      const { status } = res;\n      console.log('Status', status)\n  })\n  .catch(err => console.log(err))\n}\n\n  return (\n    <div className=\"App\">\n     Stripe\n     <StripeCheckout \n      // stripeKey={process.env.REACT_APP_KEY}\n      stripeKey=\"pk_test_51He1P4Jz7nbfLVoYE9377AbN7XiJcg9JeXrfu1qap2894g8T6hfr\n            NgnMceZRtx1H9n0HxIyHLqyv4lZvqxv3ifMf004hVnMdtT\"\n      token={makePayment}\n      amount={product.price * 100}\n      name=\"Reactjs\"\n      shippingAddress\n      billingAddress\n      />\n    </div>\n  );\n}\n\nexport default App;\n`.trim();\n\nconst user = `\nconst bcrypt = require('bcryptjs');\n\nconst userSchema = new Schema({\n  methods: { type: [String], required: true },\n  local: { email: { type: String, lowercase: true },\n    password: { type: String }\n  },\n  google: {\n    id: { type: String },\n    email: { type: String, lowercase: true }\n  },\n  facebook: {\n    id: { type: String },\n    email: { type: String, lowercase: true }\n  }\n});\n\nuserSchema.pre('save', async function (next) {\n  try {\n    if (!this.methods.includes('local')) {\n      next();\n    }\n    \n    const user = this;\n    //check if the user has been modified to know if the password has already been hashed\n    if (!user.isModified('local.password')) {\n      next();\n    }\n    \n    const salt = await bcrypt.genSalt(10);                    // Generate a password hash (salt + hash)\n    \n    const passwordHash = await bcrypt.hash(this.local.password, salt);\n    // Re-assign hashed version over original, plain text password\n    this.local.password = passwordHash;\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\nuserSchema.methods.isValidPassword = async function (newPassword) {\n  try {\n    return await bcrypt.compare(newPassword, this.local.password);\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nconst User = mongoose.model('user', userSchema);\nmodule.exports = User;`.trim();\n\nconst controllers = `\nconst JWT = require('jsonwebtoken');\nconst User = require('../models/user');\nconst { JWT_SECRET } = require('../configuration');\n\nsignToken = user => {\n  return JWT.sign({\n    iss: 'CodeWorkr',\n    sub: user.id,\n    iat: new Date().getTime(), // current time\n    exp: new Date().setDate(new Date().getDate() + 1) // current time + 1 day ahead\n  }, JWT_SECRET);\n}\n\nmodule.exports = {\n  signUp: async (req, res, next) => {\n    const { email, password } = req.value.body;\n\n    let foundUser = await User.findOne({ \"local.email\": email });\n    if (foundUser) { \n      return res.status(403).json({ error: 'Email is already in use'});\n    }\n\n    // Is there a Google account with the same email?\n    foundUser = await User.findOne({ \n      $or: [\n        { \"google.email\": email },\n        { \"facebook.email\": email },\n      ] \n    });\n    if (foundUser) {\n      foundUser.methods.push('local')\n      foundUser.local = {\n        email: email, \n        password: password\n      }\n      await foundUser.save()\n      \n      const token = signToken(foundUser);\n      \n      res.cookie('access_token', token, {\n        httpOnly: true\n      });\n      res.status(200).json({ success: true });\n    }\n\n      const newUser = new User({ \n      methods: ['local'],\n      local: {\n        email: email, \n        password: password\n      }\n    });\n\n    await newUser.save();\n\n    const token = signToken(newUser);\n    res.cookie('access_token', token, {\n      httpOnly: true\n    });\n    res.status(200).json({ success: true });\n  },\n\n  signIn: async (req, res, next) => {\n    const token = signToken(req.user);\n    res.cookie('access_token', token, {\n      httpOnly: true\n    });\n    res.status(200).json({ success: true });\n  },\n\n  signOut: async (req, res, next) => {\n    res.clearCookie('access_token');\n    res.json({ success: true });\n  },\n\n  googleOAuth: async (req, res, next) => {\n    const token = signToken(req.user);\n    res.cookie('access_token', token, {\n      httpOnly: true\n    });\n    res.status(200).json({ success: true });\n  },\n\n  linkGoogle: async (req, res, next) => {\n    res.json({ \n      success: true,\n      methods: req.user.methods, \n      message: 'Successfully linked account with Google' \n    });\n  },\n\n  unlinkGoogle: async (req, res, next) => {\n    if (req.user.google) {\n      req.user.google = undefined\n    }\n  \n    const googleStrPos = req.user.methods.indexOf('google')\n    if (googleStrPos >= 0) {\n      req.user.methods.splice(googleStrPos, 1)\n    }\n    await req.user.save()\n\n    res.json({ \n      success: true,\n      methods: req.user.methods, \n      message: 'Successfully unlinked account from Google' \n    });\n  },\n\n  facebookOAuth: async (req, res, next) => {\n    const token = signToken(req.user);\n    res.cookie('access_token', token, {\n      httpOnly: true\n    });\n    res.status(200).json({ success: true });\n  },\n\n  linkFacebook: async (req, res, next) => {\n    res.json({ \n      success: true, \n      methods: req.user.methods, \n      message: 'Successfully linked account with Facebook' \n    });\n  },\n\n  unlinkFacebook: async (req, res, next) => {\n    // Delete Facebook sub-object\n    if (req.user.facebook) {\n      req.user.facebook = undefined\n    }\n    \n    // Remove 'facebook' from methods array\n    const facebookStrPos = req.user.methods.indexOf('facebook')\n    if (facebookStrPos >= 0) {\n      req.user.methods.splice(facebookStrPos, 1)\n    }\n    await req.user.save()\n\n    res.json({ \n      success: true,\n      methods: req.user.methods, \n      message: 'Successfully unlinked account from Facebook' \n    });\n  },\n\n  dashboard: async (req, res, next) => {\n    console.log('I managed to get here!');\n    res.json({ \n      secret: \"resource\",\n      methods: req.user.methods\n    });\n  },\n\n  checkAuth: async (req, res, next) => {\n    console.log('I managed to get here!');\n    res.json({ success: true });\n  }\n}`.trim();\n\nconst configuration = `\nif (process.env.NODE_ENV === 'test') {\n  module.exports = {\n    JWT_SECRET: 'codeworkrauthentication',\n    oauth: {\n      google: {\n        clientID: 'number',\n        clientSecret: 'string',\n      },\n      facebook: {\n        clientID: 'number',\n        clientSecret: 'string',\n      },\n    },\n  };\n} else {\n  module.exports = {\n    JWT_SECRET: 'codeworkrauthentication',\n    oauth: {\n      google: {\n        clientID: 'number',\n        clientSecret: 'string',\n      },\n      facebook: {\n        clientID: 'number',\n        clientSecret: 'string',\n      },\n    },\n  };\n}`.trim();\n\nconst routeHelpers = `\nconst Joi = require('joi');\n\nmodule.exports = {\n  validateBody: (schema) => {\n    return (req, res, next) => {\n      const result = Joi.validate(req.body, schema);\n      if (result.error) {\n        return res.status(400).json(result.error);\n      }\n\n      if (!req.value) { req.value = {}; }\n      req.value['body'] = result.value;\n      next();\n    }\n  },\n\n  schemas: {\n    authSchema: Joi.object().keys({\n      email: Joi.string().email().required(),\n      password: Joi.string().required()\n    })\n  }\n}`.trim();\n\nconst routesUsers = `\nconst express = require('express');\nconst router = require('express-promise-router')();\nconst passport = require('passport');\nconst passportConf = require('../passport');\n\nconst { validateBody, schemas } = require('../helpers/routeHelpers');\nconst UsersController = require('../controllers/users');\nconst passportSignIn = passport.authenticate('local', { session: false });\nconst passportJWT = passport.authenticate('jwt', { session: false });\n\nrouter.route('/signup')\n  .post(validateBody(schemas.authSchema), UsersController.signUp);\n\nrouter.route('/signin')\n  .post(validateBody(schemas.authSchema), passportSignIn, UsersController.signIn);\n\nrouter.route('/signout')\n  .get(passportJWT, UsersController.signOut);\n\nrouter.route('/oauth/google')\n  .post(passport.authenticate('googleToken', { session: false }), UsersController.googleOAuth);\n\nrouter.route('/oauth/facebook')\n  .post(passport.authenticate('facebookToken', { session: false }), UsersController.facebookOAuth);\n\nrouter.route('/oauth/link/google')\n  .post(passportJWT, passport.authorize('googleToken', { session: false }), UsersController.linkGoogle)\n\nrouter.route('/oauth/unlink/google')\n  .post(passportJWT, UsersController.unlinkGoogle);\n\nrouter.route('/oauth/link/facebook')\n  .post(passportJWT, passport.authorize('facebookToken', { session: false }), UsersController.linkFacebook)\n\nrouter.route('/oauth/unlink/facebook')\n  .post(passportJWT, UsersController.unlinkFacebook);\n\nrouter.route('/dashboard')\n  .get(passportJWT, UsersController.dashboard);\n\nrouter.route('/status')\n  .get(passportJWT, UsersController.checkAuth);\n\nmodule.exports = router;`.trim();\n\nconst passport = `\nconst passport = require('passport');\nconst JwtStrategy = require('passport-jwt').Strategy;\nconst { ExtractJwt } = require('passport-jwt');\nconst LocalStrategy = require('passport-local').Strategy;\nconst GooglePlusTokenStrategy = require('passport-google-plus-token');\nconst FacebookTokenStrategy = require('passport-facebook-token');\nconst config = require('./configuration');\nconst User = require('./models/user');\n\nconst cookieExtractor = req => {\n  let token = null;\n  if (req && req.cookies) {\n    token = req.cookies['access_token'];\n  }\n  return token;\n}\n\n\npassport.use(new JwtStrategy({\n  jwtFromRequest: cookieExtractor,\n  secretOrKey: config.JWT_SECRET,\n  passReqToCallback: true\n}, async (req, payload, done) => {\n  try {\n    // Find the user specified in token\n    const user = await User.findById(payload.sub);\n\n    if (!user) {\n      return done(null, false);\n    }\n\n    req.user = user;\n    done(null, user);\n  } catch(error) {\n    done(error, false);\n  }\n}));\n\npassport.use('googleToken', new GooglePlusTokenStrategy({\n  clientID: config.oauth.google.clientID,\n  clientSecret: config.oauth.google.clientSecret,\n  passReqToCallback: true,\n}, async (req, accessToken, refreshToken, profile, done) => {\n  try {\n    if (req.user) {\n      req.user.methods.push('google')\n      req.user.google = {\n        id: profile.id,\n        email: profile.emails[0].value\n      }\n      await req.user.save()\n      return done(null, req.user);\n    } else {\n      let existingUser = await User.findOne({ \"google.id\": profile.id });\n      if (existingUser) {\n        return done(null, existingUser);\n      }\n\n      \n      existingUser = await User.findOne({ \"local.email\": profile.emails[0].value })\n      if (existingUser) {\n        existingUser.methods.push('google')\n        existingUser.google = {\n          id: profile.id,\n          email: profile.emails[0].value\n        }\n        await existingUser.save()\n        return done(null, existingUser);\n      }\n\n      const newUser = new User({\n        methods: ['google'],\n        google: {\n          id: profile.id,\n          email: profile.emails[0].value\n        }\n      });\n  \n      await newUser.save();\n      done(null, newUser);\n    }\n  } catch(error) {\n    done(error, false, error.message);\n  }\n}));\n\npassport.use('facebookToken', new FacebookTokenStrategy({\n  clientID: config.oauth.facebook.clientID,\n  clientSecret: config.oauth.facebook.clientSecret,\n  passReqToCallback: true\n}, async (req, accessToken, refreshToken, profile, done) => {\n  try {\n    \n    if (req.user) {\n      req.user.methods.push('facebook')\n      req.user.facebook = {\n        id: profile.id,\n        email: profile.emails[0].value\n      }\n      await req.user.save();\n      return done(null, req.user);\n    } else {\n      let existingUser = await User.findOne({ \"facebook.id\": profile.id });\n      if (existingUser) {\n        return done(null, existingUser);\n      }\n\n      existingUser = await User.findOne({ \"local.email\": profile.emails[0].value })\n      if (existingUser) {\n        existingUser.methods.push('facebook')\n        existingUser.facebook = {\n          id: profile.id,\n          email: profile.emails[0].value\n        }\n        await existingUser.save()\n        return done(null, existingUser);\n      }\n\n      const newUser = new User({\n        methods: ['facebook'],\n        facebook: {\n          id: profile.id,\n          email: profile.emails[0].value\n        }\n      });\n\n      await newUser.save();\n      done(null, newUser);\n    }\n  } catch(error) {\n    done(error, false, error.message);\n  }\n}));\n\n\npassport.use(new LocalStrategy({\n  usernameField: 'email'\n}, async (email, password, done) => {\n  try {\n    const user = await User.findOne({ \"local.email\": email });\n    \n    if (!user) {\n      return done(null, false);\n    }\n  \n    const isMatch = await user.isValidPassword(password);\n  \n    if (!isMatch) {\n      return done(null, false);\n    }\n  \n    done(null, user);\n  } catch(error) {\n    done(error, false);\n  }\n}));`.trim();\n\nconst appServer = `\nconst express = require(\"express\");\nconst morgan = require(\"morgan\");\nconst mongoose = require(\"mongoose\");\nconst cors = require(\"cors\");\nconst cookieParser = require(\"cookie-parser\");\n\nmongoose.Promise = global.Promise;\nif (process.env.NODE_ENV === \"test\") {\n  mongoose.connect(\"mongodb://localhost/googleFacebookAuth\", {\n    useNewUrlParser: true\n  });\n} else {\n  mongoose.connect(\"mongodb://localhost/googleFacebookAuth\", {\n    useNewUrlParser: true\n  });\n}\n\nconst app = express();\napp.use(cookieParser());\napp.use(\n  cors({\n    origin: \"http://localhost:3000\",\n    credentials: true\n  })\n);\n\nif (!process.env.NODE_ENV === \"test\") {\n  app.use(morgan(\"dev\"));\n}\n\napp.use(express.json());\napp.use(\"/users\", require(\"./routes/users\"));\n\nmodule.exports = app;\n`.trim();\n\nconst indexServ = `\nconst app = require('./app');\n\nconst port = process.env.PORT || 5000;\napp.listen(port);\nconsole.log(Server listening at '$'{port});\n`.trim();\n\nconst actionsTypes = `\nexport const AUTH_SIGN_UP = 'AUTH_SIGN_UP';\nexport const AUTH_SIGN_OUT = 'AUTH_SIGN_OUT';\nexport const AUTH_SIGN_IN = 'AUTH_SIGN_IN';\nexport const AUTH_LINK_GOOGLE = 'AUTH_LINK_GOOGLE';\nexport const AUTH_LINK_FACEBOOK = 'AUTH_LINK_FACEBOOK';\nexport const AUTH_UNLINK_GOOGLE = 'AUTH_UNLINK_GOOGLE';\nexport const AUTH_UNLINK_FACEBOOK = 'AUTH_UNLINK_FACEBOOK';\n\nexport const AUTH_ERROR = 'AUTH_ERROR';\nexport const DASHBOARD_GET_DATA = 'DASHBOARD_GET_DATA';\n`.trim();\n\nconst actionsIndex = `import axios from 'axios';\nimport { \n  AUTH_SIGN_UP, \n  AUTH_SIGN_OUT, \n  AUTH_SIGN_IN,\n  AUTH_LINK_GOOGLE, \n  AUTH_LINK_FACEBOOK,\n  AUTH_UNLINK_GOOGLE,\n  AUTH_UNLINK_FACEBOOK, \n  AUTH_ERROR,\n  DASHBOARD_GET_DATA } from './types';\n\nexport const oauthGoogle = data => {\n  return async dispatch => {\n    await axios.post('http://localhost:5000/users/oauth/google', {\n      access_token: data\n    });\n\n    dispatch({\n      type: AUTH_SIGN_UP\n    });\n  };\n}\n\nexport const linkGoogle = data => {\n  return async dispatch => {\n    const res = await axios.post('http://localhost:5000/users/oauth/link/google', {\n      access_token: data\n    });\n\n    dispatch({\n      type: AUTH_LINK_GOOGLE,\n      payload: res.data\n    });\n  };\n}\n\nexport const unlinkGoogle = data => {\n  return async dispatch => {\n    const res = await axios.post('http://localhost:5000/users/oauth/unlink/google');\n\n    dispatch({\n      type: AUTH_UNLINK_GOOGLE,\n      payload: res.data\n    });\n  };\n}\n\nexport const linkFacebook = data => {\n  return async dispatch => {\n    const res = await axios.post('http://localhost:5000/users/oauth/link/facebook', {\n      access_token: data\n    });\n\n    dispatch({\n      type: AUTH_LINK_FACEBOOK,\n      payload: res.data\n    });\n  };\n}\n\nexport const unlinkFacebook = data => {\n  return async dispatch => {\n    const res = await axios.post('http://localhost:5000/users/oauth/unlink/facebook');\n\n    dispatch({\n      type: AUTH_UNLINK_FACEBOOK,\n      payload: res.data\n    });\n  };\n}\n\nexport const oauthFacebook = data => {\n  return async dispatch => {\n    await axios.post('http://localhost:5000/users/oauth/facebook', {\n      access_token: data\n    });\n\n    dispatch({\n      type: AUTH_SIGN_UP\n    });\n  };\n}\n\nexport const signUp = data => {\n  return async dispatch => {\n    try {\n      await axios.post('http://localhost:5000/users/signup', data);\n\n      dispatch({\n        type: AUTH_SIGN_UP\n      });\n    } catch(err) {\n      dispatch({\n        type: AUTH_ERROR,\n        payload: 'Email is already in use'\n      })\n    }\n  };\n}\n\nexport const signIn = data => {\n  return async dispatch => {\n    try {\n      await axios.post('http://localhost:5000/users/signin', data);\n\n      dispatch({\n        type: AUTH_SIGN_IN\n      });\n    } catch(err) {\n      dispatch({\n        type: AUTH_ERROR,\n        payload: 'Email and password combination isn\\'t valid'\n      })\n    }\n  };\n}\n\nexport const checkAuth = () => {\n  return async dispatch => {\n    try {\n      await axios.get('http://localhost:5000/users/status');\n\n      dispatch({\n        type: AUTH_SIGN_IN\n      });\n\n      console.log('user is auth-ed')\n    } catch(err) {\n      console.log('error', err)\n    }\n  };\n}\n\nexport const getDashboard = () => {\n  return async dispatch => {\n    try {\n      const res = await axios.get('http://localhost:5000/users/dashboard')\n\n      dispatch({\n        type: DASHBOARD_GET_DATA,\n        payload: res.data\n      })\n\n    } catch(err) {\n      console.error('err', err)\n    }\n  }\n}\n\nexport const signOut = () => {\n  return async dispatch => {\n    await axios.get('http://localhost:5000/users/signout');\n\n    dispatch({\n      type: AUTH_SIGN_OUT\n    })\n  };\n}\n\n`.trim();\n\nconst reducersAuth = `\nimport { \n  AUTH_SIGN_UP, \n  AUTH_SIGN_OUT, \n  AUTH_SIGN_IN, \n  AUTH_ERROR } from '../actions/types';\n\nconst DEFAULT_STATE = {\n  isAuthenticated: false,\n  errorMessage: ''\n}\n\nexport default (state = DEFAULT_STATE, action) => {\n  switch(action.type) {\n    case AUTH_SIGN_UP:\n      return { ...state, isAuthenticated: true, errorMessage: '' }\n    case AUTH_SIGN_IN:\n      return { ...state, isAuthenticated: true, errorMessage: '' }\n    case AUTH_SIGN_OUT:\n      return { ...state, isAuthenticated: false, errorMessage: '' }\n    case AUTH_ERROR:\n      return { ...state, errorMessage: action.payload }\n    default:\n      return state\n  }\n}`.trim();\n\nconst dashboard = `\nimport { \n  DASHBOARD_GET_DATA, \n  AUTH_LINK_GOOGLE,\n  AUTH_LINK_FACEBOOK,\n  AUTH_UNLINK_GOOGLE,\n  AUTH_UNLINK_FACEBOOK  \n} from '../actions/types';\n\nconst DEFAULT_STATE = {\n  secret: '',\n  methods: []\n}\n\nexport default (state = DEFAULT_STATE, action) => {\n  switch(action.type) {\n    case AUTH_LINK_GOOGLE:\n      return { ...state, methods: action.payload.methods }\n    case AUTH_LINK_FACEBOOK:\n      return { ...state, methods: action.payload.methods }\n    case AUTH_UNLINK_GOOGLE:\n      return { ...state, methods: action.payload.methods }\n    case AUTH_UNLINK_FACEBOOK:\n      return { ...state, methods: action.payload.methods }\n    case DASHBOARD_GET_DATA:\n      return { ...state, secret: action.payload.secret, methods: action.payload.methods }\n    default:\n      return state\n  }\n}`.trim();\n\nconst reducersIndex = `\nimport { combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\nimport authReducer from './auth';\nimport dashboardReducer from './dashboard';\n\nexport default combineReducers({\n  form: formReducer,\n  auth: authReducer,\n  dash: dashboardReducer\n});\n`.trim();\n\nconst authGuard = `\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nexport default (OriginalComponent) => {\n  class MixedComponent extends Component {\n\n    checkAuth() {\n      if (!this.props.isAuth && !this.props.jwtToken) {\n        this.props.history.push('/');\n      }\n    }\n\n    componentDidMount() {\n      this.checkAuth();\n    }\n\n    componentDidUpdate() {\n      this.checkAuth();\n    }\n\n    render() {\n      return <OriginalComponent {...this.props} />;\n    }\n  }\n\n  function mapStateToProps(state) {\n    return {\n      isAuth: state.auth.isAuthenticated,\n      jwtToken: state.auth.token\n    }\n  }\n\n  return connect(mapStateToProps)(MixedComponent);\n};\n`.trim();\n\nconst SignUp = `\nimport React, { Component } from 'react';\nimport { reduxForm, Field } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport GoogleLogin from 'react-google-login';\nimport FacebookLogin from 'react-facebook-login/dist/facebook-login-render-props'\n\nimport * as actions from '../actions';\nimport CustomInput from './CustomInput';\n\nclass SignUp extends Component {\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.responseGoogle = this.responseGoogle.bind(this);\n    this.responseFacebook = this.responseFacebook.bind(this);\n  }\n\n  async onSubmit(formData) {\n    await this.props.signUp(formData);\n    if (!this.props.errorMessage) {\n      this.props.history.push('/dashboard');\n    }\n  }\n\n  async responseGoogle(res) {\n    await this.props.oauthGoogle(res.accessToken);\n    if (!this.props.errorMessage) {\n      this.props.history.push('/dashboard');\n    }\n  }\n\n  async responseFacebook(res) {\n    await this.props.oauthFacebook(res.accessToken);\n    if (!this.props.errorMessage) {\n      this.props.history.push('/dashboard');\n    }\n  }\n\n  render() {\n    const { handleSubmit } = this.props;\n    return (\n      <div className=\"row\">\n        <div className=\"col\">\n          <form onSubmit={handleSubmit(this.onSubmit)}>\n            <fieldset>\n              <Field\n                name=\"email\"\n                type=\"text\"\n                id=\"email\"\n                label=\"Enter your email\"\n                placeholder=\"example@example.com\"\n                component={ CustomInput } />\n            </fieldset>\n            <fieldset>\n              <Field\n                name=\"password\"\n                type=\"password\"\n                id=\"password\"\n                label=\"Enter your password\"\n                placeholder=\"yoursuperpassword\"\n                component={ CustomInput } />\n            </fieldset>\n\n            { this.props.errorMessage ? \n            <div className=\"alert alert-danger\">\n              { this.props.errorMessage }\n            </div> : null }\n\n            <button type=\"submit\" className=\"btn btn-primary\">Sign Up</button>\n          </form>\n        </div>\n        <div className=\"col\">\n          <div className=\"text-center\">\n            <div className=\"alert alert-primary\">\n              Or sign up using third-party services\n            </div>\n            <FacebookLogin\n              appId=\"number\"\n              render={renderProps => (\n                <button className=\"btn btn-primary\" onClick={renderProps.onClick}>Facebook</button>\n              )}\n              fields=\"name,email,picture\"\n              callback={this.responseFacebook}\n              cssClass=\"btn btn-outline-primary\"\n            />\n            <GoogleLogin \n              clientId=\"number\"\n              render={renderProps => (\n                <button className=\"btn btn-danger\" onClick={renderProps.onClick} disabled={renderProps.disabled}>\n                                    Google</button>\n              )}\n              onSuccess={this.responseGoogle}\n              onFailure={this.responseGoogle}\n              className=\"btn btn-outline-danger\"\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    errorMessage: state.auth.errorMessage\n  }\n}\n\nexport default compose(\n  connect(mapStateToProps, actions),\n  reduxForm({ form: 'signup' })\n)(SignUp)\n`.trim();\n\nconst SignIn = `\nimport React, { Component } from 'react';\nimport { reduxForm, Field } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport GoogleLogin from 'react-google-login';\nimport FacebookLogin from 'react-facebook-login/dist/facebook-login-render-props'\n\nimport * as actions from '../actions';\nimport CustomInput from './CustomInput';\n\nclass SignIn extends Component {\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.responseGoogle = this.responseGoogle.bind(this);\n    this.responseFacebook = this.responseFacebook.bind(this);\n  }\n\n  async onSubmit(formData) {\n    await this.props.signIn(formData);\n    if (!this.props.errorMessage) {\n      this.props.history.push('/dashboard');\n    }\n  }\n\n  async responseGoogle(res) {\n    await this.props.oauthGoogle(res.accessToken);\n    if (!this.props.errorMessage) {\n      this.props.history.push('/dashboard');\n    }\n  }\n\n  async responseFacebook(res) {\n    await this.props.oauthFacebook(res.accessToken);\n    if (!this.props.errorMessage) {\n      this.props.history.push('/dashboard');\n    }\n  }\n\n  render() {\n    const { handleSubmit } = this.props;\n    return (\n      <div className=\"row\">\n        <div className=\"col\">\n          <form onSubmit={handleSubmit(this.onSubmit)}>\n            <fieldset>\n              <Field\n                name=\"email\"\n                type=\"text\"\n                id=\"email\"\n                label=\"Enter your email\"\n                placeholder=\"example@example.com\"\n                component={ CustomInput } />\n            </fieldset>\n            <fieldset>\n              <Field\n                name=\"password\"\n                type=\"password\"\n                id=\"password\"\n                label=\"Enter your password\"\n                placeholder=\"yoursuperpassword\"\n                component={ CustomInput } />\n            </fieldset>\n\n            { this.props.errorMessage ? \n            <div className=\"alert alert-danger\">\n              { this.props.errorMessage }\n            </div> : null }\n\n            <button type=\"submit\" className=\"btn btn-primary\">Sign In</button>\n          </form>\n        </div>\n        <div className=\"col\">\n          <div className=\"text-center\">\n            <div className=\"alert alert-primary\">\n              Or sign in using third-party services\n            </div>\n            <FacebookLogin\n              appId=\"number\"\n              render={renderProps => (\n                <button className=\"btn btn-primary\" onClick={renderProps.onClick}>Facebook</button>\n              )}\n              fields=\"name,email,picture\"\n              callback={this.responseFacebook}\n              cssClass=\"btn btn-outline-primary\"\n            />\n            <GoogleLogin \n              clientId=\"number\"\n              render={renderProps => (\n                <button className=\"btn btn-danger\" onClick={renderProps.onClick} disabled={renderProps.disabled}>\n                                   Google</button>\n              )}\n              onSuccess={this.responseGoogle}\n              onFailure={this.responseGoogle}\n              className=\"btn btn-outline-danger\"\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    errorMessage: state.auth.errorMessage\n  }\n}\n\nexport default compose(\n  connect(mapStateToProps, actions),\n  reduxForm({ form: 'signin' })\n)(SignIn)\n`.trim();\n\nconst Header = `\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport * as actions from '../actions';\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.signOut = this.signOut.bind(this);\n  }\n\n  signOut() {\n    this.props.signOut();\n  }\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\" style={{ marginBottom: '30px' }}>\n        <Link className=\"navbar-brand\" to=\"/\">CodeWorkr API Auth</Link>\n\n        <div className=\"collapse navbar-collapse\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/dashboard\">Dashboard</Link>\n            </li>\n          </ul>\n\n          <ul className=\"nav navbar-nav ml-auto\">\n            { !this.props.isAuth ?\n              [<li className=\"nav-item\" key=\"signup\">\n                <Link className=\"nav-link\" to=\"/signup\">Sign Up</Link>\n              </li>,\n              <li className=\"nav-item\" key=\"signin\">\n                <Link className=\"nav-link\" to=\"/signin\">Sign In</Link>\n              </li>] : null }\n            \n            { this.props.isAuth ?\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to=\"/signout\" onClick={this.signOut}>Sign Out</Link>\n              </li> : null }\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    isAuth: state.auth.isAuthenticated\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Header);\n\n\n`.trim();\n\nconst componentsDashboard = `\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport GoogleLogin from 'react-google-login';\nimport FacebookLogin from 'react-facebook-login/dist/facebook-login-render-props'\n\nimport * as actions from '../actions';\n\nclass Dashboard extends Component {\n  async componentDidMount() {\n    this.props.getDashboard()\n  }\n\n  linkFacebook = async (res) => {\n    console.log('Link with Facebook', res)  \n    await this.props.linkFacebook(res.accessToken);\n  }\n\n  linkGoogle = async (res) => {\n    console.log('Link with Google', res)  \n    await this.props.linkGoogle(res.accessToken);\n  }\n\n  unlinkGoogle = async () => {\n    console.log('Unlink Google')  \n    await this.props.unlinkGoogle();\n  }\n  \n  unlinkFacebook = async (res) => {\n    console.log('Unlink Facebook')  \n    await this.props.unlinkFacebook();\n  }\n\n  render() {\n    return (\n      <div>\n        This is a Dashboard component\n        <br/>\n        Our secret: <h3>{this.props.secret}</h3>\n\n        <h2>Link your social media accounts</h2>\n        <FacebookLogin\n          appId=\"171335970085090\"\n          disabled={true}\n          render={renderProps => (\n            <button onClick={renderProps.onClick} \n             disabled={this.props.dashboard.methods.includes('facebook') ? true : false}>\n                  Link with Facebook</button>\n          )}\n          fields=\"name,email,picture\"\n          callback={this.linkFacebook}\n          cssClass=\"btn btn-outline-primary\"\n        />\n        <GoogleLogin \n          clientId=\"499420307488-hj9l9h3amt5into76m9i0ntkaqcg9q4t.apps.googleusercontent.com\"\n          disabled={this.props.dashboard.methods.includes('google') ? true : false}\n          render={renderProps => (\n            <button onClick={renderProps.onClick} \n                    disabled={renderProps.disabled}>Link with Google</button>\n          )}\n          onSuccess={this.linkGoogle}\n          onFailure={this.linkGoogle}\n        />\n        <br />\n        <br />\n        <br />\n        <h2>Unlink your social media accounts</h2>\n        <button \n          style={{ marginRight: 15 }} \n          className=\"btn btn-primary\" \n          onClick={ () => this.unlinkFacebook() } \n          disabled={ this.props.dashboard.methods.includes('facebook') ? false : true }\n        >\n          Unlink with Facebook\n        </button>\n        <button \n          className=\"btn btn-danger\" \n          onClick={ () => this.unlinkGoogle() }\n          disabled={ this.props.dashboard.methods.includes('google') ? false : true }\n        >\n          Unlink with Google\n        </button>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    secret: state.dash.secret,\n    dashboard: state.dash,\n    auth: state.auth\n  }\n}\n\nexport default connect(mapStateToProps, actions)(Dashboard);\n`.trim();\n\nconst CustomInput = `\nimport React, { Component } from 'react';\n\nexport default class CustomInput extends Component {\n  render() {\n    const { input: { value, onChange } } = this.props;\n    return (\n      <div className=\"form-group\">\n        <label htmlFor={ this.props.id }>{ this.props.label }</label>\n        <input \n          name={ this.props.name }\n          id={ this.props.id }\n          placeholder={ this.props.placeholder }\n          className=\"form-control\"\n          type={ this.props.type }\n          value={ value }\n          onChange={ onChange }\n        />\n      </div>\n    );\n  }\n}\n\n\n//components/Home.js\nimport React from 'react';\n\nexport default () => {\n  return (\n    <div>\n      Welcome to our home page!\n    </div>\n  );\n};`.trim();\n\nconst AppCompo = `\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Header from './Header';\nimport * as actions from '../actions';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.checkAuth();\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <div className=\"container\">\n        { this.props.children }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(null, actions)(App);`.trim();\n\nconst indexComp = `\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport reduxThunk from 'redux-thunk';\nimport axios from 'axios';\n\nimport registerServiceWorker from './registerServiceWorker';\nimport App from './components/App';\nimport Home from './components/Home';\nimport SignUp from './components/SignUp';\nimport SignIn from './components/SignIn';\nimport Dashboard from './components/Dashboard';\nimport reducers from './reducers';\n\nimport authGuard from './components/HOCs/authGuard';\n\naxios.defaults.withCredentials = true;\n\nReactDOM.render(\n  <Provider store={createStore(reducers, {}, applyMiddleware(reduxThunk))}>\n    <BrowserRouter>\n      <App>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/signup\" component={SignUp} />\n        <Route exact path=\"/signin\" component={SignIn} />\n        <Route exact path=\"/dashboard\" component={authGuard(Dashboard)} />\n      </App>\n    </BrowserRouter>\n  </Provider>, \n  document.querySelector('#root'));\nregisterServiceWorker();\n\n\n//.env\nSKIP_PREFLIGHT_CHECK=true`.trim();\n\n\nclass Strips extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1.Strip</h3>\n              <b>server.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={serverApp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Client</h3>\n              <b>App.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={AppComp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2.Signin with google facebook</h3>\n              <b>models/user.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={user}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>controllers/user.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={controllers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>configuration/index.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={configuration}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>helpers/routeHelpers.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={routeHelpers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>routes\n              <br />\n\n              <b>routes/users.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={routesUsers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>passport.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={passport}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>app.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={appServer}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>index.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={indexServ}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <h3>Client</h3>\n              <b>actions/types.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={actionsTypes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>actions/index.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={actionsIndex}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>reducers/auth.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={reducersAuth}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>reducers/dashboard.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={dashboard}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>reducers/index.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={reducersIndex}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>components/HOCs/authGuard.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={authGuard}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>components/SignUp.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={SignUp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>components/SignIn.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={SignIn}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>components/Header.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={Header}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>components/Dashboard.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={componentsDashboard}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>components/CustomInput.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={CustomInput}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>components/AppCompo.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={AppCompo}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>index.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={indexComp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Strips));\n"]},"metadata":{},"sourceType":"module"}