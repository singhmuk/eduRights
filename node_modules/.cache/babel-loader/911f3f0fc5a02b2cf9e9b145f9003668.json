{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/angularjsd/deepAngularjs/introAngularjs.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst NgModules = `\n@NgModule({\n  imports:      [ BrowserModule ],\n  providers:    [ Logger ],\n  declarations: [ AppComponent ],\n  exports:      [ AppComponent ],\n  bootstrap:    [ AppComponent ]\n})`.trim();\nconst NgClass = `\n@Component({\n  selector: 'app-root',\n  template: '\n  <p [ngStyle] = \"{backgroundColor: getColor()}\" [ngClass] = \"{Online: serverStatus === 'Online'}\"> \n    Server  with ID {{serverID}} is {{serverStatus}}. \n  </p >,\n  styles: ['.Online{ color: yellow; }']'})\n\nexport class AppComponent {\n  serverID: number = 10;\n  serverStatus: string = 'Offline';\n\n  constructor () {\n  this.serverStatus = Math.random() > 0.5 ? 'Online' : 'Offline';\n  }\n\n  getServerStatus() {\n    return this.serverStatus;\n  }\n  getColor() {\n    return this.serverStatus === 'Online' ? 'green' : 'red';\n  }\n}`.trim();\nconst databinding = `\nDOM               Component\n<----{{value}}-----\n<-[propery]=\"value\" --\n--(event)=\"handler\" -->\n<-[(NgModule)]=\"propery\" --`.trim();\nconst property = `\nsyntax: [property]='expression\n\n<input type=\"email\" [value]=\"user.email\">`.trim();\nconst evtBinding = `<button (click)=\"logout()\"></button>`.trim();\nconst twoWayBinding = `<input type=\"email\" [(ngModel)]=\"user.email\">`.trim();\nconst compDeco = `\n @Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  //\n  preserveWhitespaces:true,\n  changeDetection: ChangeDetectionStrategy\n  viewProviders?: Provider[]\n  moduleId?: string\n  templateUrl?: string\n  template?: string\n  styleUrls?: string[]\n  styles?: string[]\n  animations?: any[]\n  encapsulation?: ViewEncapsulation\n  interpolation?: [string, string]\n  entryComponents?: Array<Type<any> | any[]>\n  // inherited from core/Directive\n  selector?: string\n  inputs?: string[]\n  outputs?: string[]\n  providers?: Provider[]\n  exportAs?: string\n  queries?: {...}\n  host?: {...}\n  jit?: boolean\n})`.trim();\nconst objects = `\n@Component({\n  selector: 'app-root',\n  template: '\n  <input(keyup)=\"onKey($event)\">\n    <p>{{values}}</p>\n  '})\n\nexport class AppComponent {\n  values = '';\n\n  onKey(event: any) {\n    this.values += event.target.value + ' | ';\n  }`.trim();\nconst keyEvents = `\n @Component({\n  selector: 'app-root',\n  template: '\n  <input #box (keyup.enter) = \"onEnter(box.value)\">\n    <p>{{value}}</p>\n  '})\n\nexport class AppComponent {\n  values = '';\n\n  value = '';\n  onEnter(value: string) { this.value = value; }\n}`.trim();\nconst onBlur = `\n    <input #box\n      (keyup.enter)=\"update(box.value)\"\n      (blur)=\"update(box.value)\">\n    <p>{{value}}</p>'})\n\nexport class AppComponent {\n  value = '';\n  update(value: string) { this.value = value; }\n}\n`.trim();\nconst NgStyles = `\n//1\n<div [ngStyle]=\"{'color':green}\"></div>\nngStyle become much more useful when the value is dynamic.\n<div [ngStyle]=\"{'color': person.country==='UK' ? 'green' : 'red'}\"></div>\n\n\n//2\n@Component({\n  selector: 'app-root',\n  template: '\n  <p[ngStyle]=\"{backgroundColor: 'green'}\"> Server with ID {{serverID}} is {{serverStatus}}.</p>\n  '})\nexport class AppComponent {\n  serverID: number = 10;\n  serverStatus: string = 'Offline';\n\n  constructor () {\n  this.serverStatus = Math.random() > 0.5 ? 'Online' : 'Offline';\n  }\n}`.trim();\nconst templateExpree = `\n<h3>{{username}}, welcome to Angular</h3>\n\n\n//The below javascript expressions are prohibited in template expression\n1. assignments (=, +=, -=, ...)\n2. new\n3. chaining expressions with ; or ,\n4. increment and decrement operators (++ and --)\n`.trim();\nconst templateState = `\n//template statements appear in quotes to the right of the = symbol like (event)=\"statement\".\n<button (click)=\"editProfile()\">Edit Profile</button>\n\n\n// data flow\n2.Component       Template\n<- Event binding  ----\n-- Property binding  --->\n`.trim();\nconst binding = `\n<td [attr.colspan]=\"myColSpan\" align=\"center\">Record</td>\n`.trim();\nconst twoWay = `\ntemplate: '\nEnter name: <input [value] = 'data'(input) = 'data=$event.target.value' >\n  <br />\nYour name {{data}}\n    ',})\n\nexport class AppComponent {\n  data:string = 'Data binding';`.trim();\nconst componentBin = `\n@Component({\n  selector: 'app-root',\n  template: '\n    <input type = \"text\"[value] = \"property\"><br/>\n    <input type=\"text\" bind-value = \"property\">\n  ',\n})\nexport class AppComponent {\n  property=\"binding\"\n}`.trim();\nconst tempLocal = `\n@Component({\n  selector: 'app-root',\n  template: '\n    <input #inputInfo type = \"text\" name = \"template\" value = \"property\">\n    <br/>\n    <button (click) = \"getInfo(inputInfo)\"> Refrence Varriable</button>\n  '})\nexport class AppComponent {\n  getInfo(inputInfo){\n    console.log(inputInfo)\n    console.log(inputInfo.name)\n  }\n}`.trim();\nconst propertyBin = `\nComponent ---> Template\nSyntax:\n1. {{expression}}\n2. [target] = \"expression\"\n3. bind-template = expression\n\n@Component({\n  selector: 'app-root',\n  template: '  <button[disabled]=\"isDisable\"> Dis</button>',\n})\nexport class AppComponent {\n  isDisable=true;\n}`.trim();\n\nclass IntroAngulard extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, \"1. Angular\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, \"Angular version number have 3 parts: \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, \"major, minor, patch (8.2.9).\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, \"Angular say if project in version 4 and want to migrate 6 than firstly move from 4 to 5 than finally move to version 6.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, \"Major realease in every \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, \"6 month,\"), \" minor in \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, \"2-3 month\"), \" and patch in \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, \"every week\"), \".\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, \"e2e: \"), \"integration testing\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, \".editorconfig: \"), \"Required when work in team involvent\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, \"angular.json: \"), \"configure our application\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, \"selector: \"), \"component refrense\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, \"polyfils: \"), \"support diffrent browsers\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, \"tsconfig: \"), \"testing perpose\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, \"tslint: \"), \"rules define for standard codding\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, \"^: \"), \"minor and revision version checked and upper level install in system\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, \"~: \"), \"only revision checked and if stable version find than install\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, \"2. NgModules\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, \"module:\"), \" Logical grouping of components and services. To define a module, we use the NgModule.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, \"Angular apps are modular and Angular has its own modularity system called NgModules. \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, \"A component cannot be import in two diffrent modules. If do than show runtime error. this is features module.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, \"The purpose of NgModule is to declare everything that has been created in angular and group it.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, \"NgModules collect related code into functional sets.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, \"Every Angular app has a root module, conventionally named AppModule, which provides the bootstrap mechanism that launches the application. An app typically contains many functional modules.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: NgModules,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, \"providers: \"), \"A provider is an instruction to the Dependency Injection system on how to obtain a value for a dependency.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, \"Frequently Used NgModule:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, \"BrowserModule :\"), \"When run your app in a browser.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, \"CommonModule :\"), \"When use NgIf, NgFor.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, \"FormsModule :\"), \"When build template driven forms (includes NgModel).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, \"ReactiveFormsModule :\"), \"When build reactive forms.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, \"RouterModule :\"), \"When use RouterLink, .forRoot(), .forChild().\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, \"HttpClientModule :\"), \"When talk to a server.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, \"Decorator\"), \"Decorator contain @. it accept object. decorator are simply functions that return functions. decorator are invoke at runtime. decorator allows you to excuite functions.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, \"Common decorator: \"), \"@ngModule(), @Component(), @Injectable(): define services, @Input & @Output: send and recive data from dom. many build-in decorator available in Angular.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, \"Class decorator:\"), \" @ngModule(), @Component().\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, \"Property decorator:\"), \" @Input(), @Output.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, \"Method decorator:\"), \" for Method inside classes (@HostListener)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, \"Parameter decorator:\"), \" for Parameter inside class constructors (@Inject)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, \"Each decorator has a unique role.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, \"3. What are directives: @directive\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, \"Directive is a js class.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, \"Directives are used to extend the power of the HTML attributes and to change the appearance or behavior of a DOM element.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, \"Elements which change the appearence/ behavior of the DOM element. 3 types of Directives.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, \"Component Directives:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, \"Directives with own Template.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, \"with the help of selector, @Component which is a decorator function is used to create a component directive.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, \"Structural Directives:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, \"Structural directive modifies or manipulates the structure of DOM by adding or removing DOM elements. it works on the structure of a DOM.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, \"Structural directives which have a * sign before the directive.  *ngIf and *ngFor.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, \"Attribute Directives:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, \" Change appearence/ behavior of the DOM.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }, \"Attribute directives deal with the changing of look and behavior of the DOM element, component or another directive. Ex. NgStyle\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }), \"By default, angular provide two attribute directives\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, \"1. NgClass: \"), \"dynamically, add or remove CSS class on the basis of the certain conditions.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }), \"Allows us to set the CSS class dynamically for a DOM element. we can use ngClass with string, array, object or component method.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: NgClass,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, \"2. NgStyle: \"), \"dynamically, add or remove styles on the basis of the certain conditions.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: NgStyles,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, \"4. Component\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: componentBin,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }, \"5. What are the differences between Component and Directive\"), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, \"Component\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }, \"Directive\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }, \"To register a component we use @Component meta-data annotation\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }, \"To register directives we use @Directive meta-data annotation\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }, \"Components are typically used to create UI widgets\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }, \"Directive is used to add behavior to an existing DOM element\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    }, \"Component is used to break up the application into smaller components\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    }, \"Directive is use to design re-usable components\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, \"Only one component can be present per DOM element\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, \"Many directives can be used per DOM element\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }, \"6. Component Decorator:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }, \"ngOnInit is called by default whenever the class is run.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    }, \"@component decorator provides additional metadata that determines how to process, instantiate and use the component at runtime.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }, \"component Decorator accepts the required configuration object that requires information to create and display the component in real time.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }, \"Types: \"), \" Ex. @Component, @ngModule, @injectable.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: compDeco,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    })), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }, \"preserveWhitespaces: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }, \"Using this property, we can remove all whitespaces from the template. it takes a Boolean value, that is:\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    }, \"If it is false, it will remove all whitespace from the compiled template.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    }, \"If it is true, it will not remove whitespace from the compiled template.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }, \"8. inherited from core/Directive:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }, \"selector :\"), \"css selector which identifies this component in a template.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }, \"inputs :\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }, \"outputs :\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }, \"providers :\"), \"Providers are usually singleton objects, to which other objects have access through dependency injection (DI).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }, \"exportAs :\"), \"name under which the component instance is exported to a template.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, \"queries :\"), \"allows you to configure queries that can be inserted into the component.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }, \"host :\"), \"Map of class properties to host element links for events, properties, and attributes.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }, \"jit :\"), \"if true, the AOT compiler will ignore this directive/ component and will therefore always be compiled using JIT.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }, \"9. What are template expressions\"), \"Template expressions are computations/ assignments done in the template inside the interpolation curly braces.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    }), \"In interpolation syntax, the template expression is surrounded by double curly braces.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: templateExpree,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    }, \"10. Template/local reference variables: Access by id '#inputInfo'\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: tempLocal,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    }, \"11. What are template statements\"), \"A template is an HTML snippet that tells Angular how to render the component in angular application.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: templateState,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }, \"N: \"), \"Component send data to Template by using Promises binding or Interpolation.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    }, \"12. Templates and views\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510\n      },\n      __self: this\n    }, \"ngIf:\"), \" conditionally includes a Template based on the value of expression, It add/ remove HTML elements in DOM layout.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    }, \"ngSwitch Directives:\"), \" ngSwitch is combination of attribute Directive and Structural Directive, it similar to switch statement. \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }, \"ngFor:\"), \" it change the structure of DOM. It's point to repeat a given HTML Template once for each value in an array, each time passing it the array value as context for string interpolation/ binding.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }, \"syntax:\"), \" *ngFor=\\\"let 'value' of 'cpllection'.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }, \"13. What is Data Binding? How many ways it can be done?\"), \"In order to connect application data with the DOM, data binding is used. It happens between the template (HTML) and component (TypeScript). There are 3 ways to achieve data binding:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    }, \"Interpolation / String Interpolation (one-way data binding)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }, \"Event Binding: \"), \"one-way data binding.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    }, \"Property Binding: \"), \"one-way data binding.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    }, \"Two-way Binding: \"), \"Changes made in the application state gets automatically reflected in the view and vice-versa. The ngModel directive is used for achieving this type of data binding.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: propertyBin,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }, \"Data binding Forms:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: databinding,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553\n      },\n      __self: this\n    }, \"Component to view\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554\n      },\n      __self: this\n    }, \"View to component\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555\n      },\n      __self: this\n    }, \"Two way sequence: view to component to view\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }, \"Property binding:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563\n      },\n      __self: this\n    }, \"We can also use string and non-string data in property binding. \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563\n      },\n      __self: this\n    }, \"Ex.\"), \" property binding use case is disabled, boolean.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    }, \"Used to bind value of component/model properties to the HTML element. Depending on the value, it will change the existing behavior of the HTML element.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    }, \"Interpolation use only string data.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567\n      },\n      __self: this\n    }, \"in property binding can't use string concatnation.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568\n      },\n      __self: this\n    }, \"It set a property to view element.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569\n      },\n      __self: this\n    }, \"Rendering value from data-source to template.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: property,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    }, \"Attribute Binding: \"), \"Helps to set values for attributes directly.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: binding,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593\n      },\n      __self: this\n    }, \"From the DOM to the Component: \"), \" Event binding\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594\n      },\n      __self: this\n    }), \"When a specific DOM event happens (eg.: click, change, keyup), call the specified method in the component\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: evtBinding,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606\n      },\n      __self: this\n    }, \"Two-way binding: Two-way data binding:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: twoWayBinding,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617\n      },\n      __self: this\n    }, \"mainly used in the input field or form where user provide value/ change any control value in the one side, and on the other side same automatically update into the controllers variables.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619\n      },\n      __self: this\n    }, \"it's combination of both property binding and event binding.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620\n      },\n      __self: this\n    }, \"binding using [(ngModel)] Directive. \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621\n      },\n      __self: this\n    }, \"ngModel Directive which combines the square bracket of property binding with parentheses of event binding in a single notation.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: twoWay,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 633\n      },\n      __self: this\n    }, \"2.1. Get user input from the $event object:\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 634\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: objects,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 635\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 643\n      },\n      __self: this\n    }, \"  2.3. Key event filtering (with key.enter):\"), \"bind to Angular's keyup.enter pseudo-event. Then Angular calls the event handler only when the user presses Enter.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: keyEvents,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654\n      },\n      __self: this\n    }, \"2.4. On blur\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: onBlur,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(IntroAngulard);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/angularjsd/deepAngularjs/introAngularjs.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","NgModules","trim","NgClass","databinding","property","evtBinding","twoWayBinding","compDeco","objects","keyEvents","onBlur","NgStyles","templateExpree","templateState","binding","twoWay","componentBin","tempLocal","propertyBin","IntroAngulard","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,UAAtB,EAAkCC,IAAlC,QAA8C,mBAA9C;AAEA,OAAO,0BAAP;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AAGA,MAAMC,MAAM,GAAG;AAAEC,EAAAA,eAAe,EAAE,SAAnB;AAA8BC,EAAAA,OAAO,EAAE,KAAvC;AAA8CC,EAAAA,QAAQ,EAAE;AAAxD,CAAf;;AAEA,MAAMC,MAAM,GAAGC,KAAK,KAAK;AACvBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH;AAELN,IAAAA,OAAO,EAAEG,KAAK,CAACG,OAAN,CAAc,CAAd;AAFJ,GADgB;AAKvBC,EAAAA,QAAQ,EAAE;AACRF,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd;AADA,GALa;AAQvBE,EAAAA,SAAS,EAAE;AACTC,IAAAA,SAAS,EAAE;AADF;AARY,CAAL,CAApB;;AAcA,MAAMC,SAAS,GAAI;;;;;;;GAAD,CAOdC,IAPc,EAAlB;AASA,MAAMC,OAAO,GAAI;;;;;;;;;;;;;;;;;;;;;;;EAAD,CAuBbD,IAvBa,EAAhB;AA0BA,MAAME,WAAW,GAAI;;;;;4BAAD,CAKSF,IALT,EAApB;AAOA,MAAMG,QAAQ,GAAI;;;0CAAD,CAG0BH,IAH1B,EAAjB;AAKA,MAAMI,UAAU,GAAI,sCAAD,CAAuCJ,IAAvC,EAAnB;AAEA,MAAMK,aAAa,GAAI,+CAAD,CAAgDL,IAAhD,EAAtB;AAEA,MAAMM,QAAQ,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAD,CA2BbN,IA3Ba,EAAjB;AA6BA,MAAMO,OAAO,GAAI;;;;;;;;;;;;;IAAD,CAaXP,IAbW,EAAhB;AAeA,MAAMQ,SAAS,GAAI;;;;;;;;;;;;;EAAD,CAafR,IAbe,EAAlB;AAeA,MAAMS,MAAM,GAAI;;;;;;;;;;CAAD,CAUbT,IAVa,EAAf;AAYA,MAAMU,QAAQ,GAAI;;;;;;;;;;;;;;;;;;;;EAAD,CAoBdV,IApBc,EAAjB;AAsBA,MAAMW,cAAc,GAAI;;;;;;;;;CAAD,CASrBX,IATqB,EAAvB;AAWA,MAAMY,aAAa,GAAI;;;;;;;;;CAAD,CASpBZ,IAToB,EAAtB;AAWA,MAAMa,OAAO,GAAI;;CAAD,CAEdb,IAFc,EAAhB;AAIA,MAAMc,MAAM,GAAI;;;;;;;;gCAAD,CAQkBd,IARlB,EAAf;AAaA,MAAMe,YAAY,GAAI;;;;;;;;;;EAAD,CAUlBf,IAVkB,EAArB;AAYA,MAAMgB,SAAS,GAAI;;;;;;;;;;;;;EAAD,CAafhB,IAbe,EAAlB;AAeA,MAAMiB,WAAW,GAAI;;;;;;;;;;;;;EAAD,CAajBjB,IAbiB,EAApB;;AAgBA,MAAMkB,aAAN,SAA4BvC,SAA5B,CAAsC;AACpCwC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,UAAU,CAAC,MAAMxC,KAAK,CAACyC,YAAN,EAAP,EAA6B,CAA7B,CAAV;AACD;;AACDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB;AACA,WACE,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAED,OAAO,CAAC9B,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAJ,CADF,CADF,CADF,EAME,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAE8B,OAAO,CAAC9B,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAAyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAzC,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iIAFF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA5B,gBAAqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAArD,oBAAmF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAnF,MAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAJ,wBALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAJ,yCANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAJ,8BAPF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAJ,uBARF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAJ,8BATF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAJ,oBAVF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAJ,sCAXF,EAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAJ,yEAZF,EAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAJ,kEAbF,CAFF,EAiBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjBF,EAmBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAnBF,EAoBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAJ,2FApBF,EAqBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+FADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uHAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yGAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uMALF,CArBF,EA4BE;AAAK,MAAA,KAAK,EAAEN,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEY,SADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA5BF,EAmCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnCF,EAoCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBApCF,gHAqCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArCF,EAsCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtCF,EAwCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAxCF,EAwCkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxClC,EAyCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAJ,oCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAJ,0BAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAJ,yDAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAJ,+BAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAJ,kDALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAJ,2BANF,CAzCF,EAiDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjDF,EAmDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAnDF,8KAsDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAJ,8JADF,CAtDF,EA0DE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1DF,EA4DE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAJ,gCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAJ,wBAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAJ,+CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAJ,uDAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CALF,CA5DF,EAmEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnEF,EAqEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CArEF,EAsEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mIAFF,CAtEF,EA0EE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1EF,EA2EE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3EF,EA6EE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mGA7EF,EA8EE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAJ,EACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sHAFF,CADF,CADF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAJ,EACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mJADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4FAFF,CADF,CATF,EAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfF,EAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAJ,EACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0IAFF,CADF,CAhBF,EAuBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvBF,0DAwBsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxBtD,EAyBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAzBF,kFAyBiG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzBjG,EA0BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1BF,sIA6BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7BF,EA8BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9BF,EA+BE;AAAK,MAAA,KAAK,EAAEZ,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEc,OADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA/BF,CA9EF,EAqHE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArHF,EAsHE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtHF,EAuHE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAvHF,+EAwHE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxHF,EAyHE;AAAK,MAAA,KAAK,EAAEd,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEuB,QADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAzHF,EAgIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhIF,EAiIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAjIF,EAkIE;AAAK,MAAA,KAAK,EAAEvB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAE4B,YADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAlIF,EAyIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzIF,EA2IE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qEA3IF,EA4IE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF,CADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wEADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uEAFF,CALF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sEAFF,CATF,EAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+EADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDAFF,CAbF,EAiBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAFF,CAjBF,CA5IF,EAkKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlKF,EAoKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCApKF,EAqKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kEADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yIAFF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mJAJF,CArKF,EA4KE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5KF,EA6KE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBA7KF,8CA6KwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7KxD,EA8KE;AAAK,MAAA,KAAK,EAAE5B,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEmB,QADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA9KF,EAqLI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BArLJ,EAsLI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kHADA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mFAFA,EAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kFAHA,CAtLJ,EA2LE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3LF,EA6LE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CA7LF,EA8LE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAJ,gEADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAJ,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAJ,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAJ,mHAJF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAJ,uEANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAJ,6EAPF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAJ,0FARF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAJ,qHATF,CA9LF,EAyME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzMF,EA2ME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CA3MF,oHA6ME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7MF,EA8ME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9MF,4FAgNE;AAAK,MAAA,KAAK,EAAEnB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEwB,cADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAhNF,EAuNE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvNF,EAyNE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EAzNF,EA2NE;AAAK,MAAA,KAAK,EAAExB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAE6B,SADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA3NF,EAkOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlOF,EAoOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CApOF,0GAsOE;AAAK,MAAA,KAAK,EAAE7B,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEyB,aADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAPF,gFAtOF,EAgPE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhPF,EAiPE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAjPF,EAkPE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAJ,qHADF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAJ,+GAHF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAJ,oMALF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAJ,2CAPF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,CAlPF,EA4PE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5PF,EA8PE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEA9PF,2LAiQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qEADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAJ,0BAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAJ,0BAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAJ,0KAJF,CAjQF,EAuQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvQF,EAwQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxQF,EAyQE;AAAK,MAAA,KAAK,EAAEzB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAE8B,WADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAzQF,EAgRE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhRF,EAiRE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjRF,EAmRE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAnRF,EAoRE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApRF,EAqRE;AAAK,MAAA,KAAK,EAAE9B,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEe,WADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CArRF,EA6RE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAHF,CA7RF,EAkSE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlSF,EAmSE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnSF,EAqSE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BArSF,EAsSE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtSF,EAuSE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EAAoE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAApE,qDADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iKAFF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDAPF,CAvSF,EAgTE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhTF,EAiTE;AAAK,MAAA,KAAK,EAAEf,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEgB,QADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAjTF,EAwTE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxTF,EAyTE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzTF,EA2TE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BA3TF,kDA4TE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5TF,EA6TE;AAAK,MAAA,KAAK,EAAEhB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAE0B,OADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA7TF,EAoUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApUF,EAsUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAtUF,oBAuUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvUF,+GAyUE;AAAK,MAAA,KAAK,EAAE1B,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEiB,UADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAzUF,EAgVE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhVF,EAiVE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjVF,EAmVE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAnVF,EAoVE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApVF,EAqVE;AAAK,MAAA,KAAK,EAAEjB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEkB,aADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CArVF,EA4VE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5VF,EA6VE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oMADF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sEAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yIALF,CA7VF,EAqWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArWF,EAsWE;AAAK,MAAA,KAAK,EAAElB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAE2B,MADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAtWF,EA8WE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDA9WF,EA+WE;AAAK,MAAA,KAAK,EAAE3B,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEoB,OADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA/WF,EAsXE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtXF,EAwXE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAxXF,wHA0XE;AAAK,MAAA,KAAK,EAAEpB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEqB,SADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA1XF,EAiYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjYF,EAmYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAnYF,EAoYE;AAAK,MAAA,KAAK,EAAErB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEsB,MADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CApYF,CADF,CADF,CANF,CADF;AAyZD;;AA/ZmC;;AAkatC,eAAgB1B,UAAU,CAACQ,MAAD,CAAV,CAAmB2B,aAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst NgModules = `\n@NgModule({\n  imports:      [ BrowserModule ],\n  providers:    [ Logger ],\n  declarations: [ AppComponent ],\n  exports:      [ AppComponent ],\n  bootstrap:    [ AppComponent ]\n})`.trim();\n\nconst NgClass = `\n@Component({\n  selector: 'app-root',\n  template: '\n  <p [ngStyle] = \"{backgroundColor: getColor()}\" [ngClass] = \"{Online: serverStatus === 'Online'}\"> \n    Server  with ID {{serverID}} is {{serverStatus}}. \n  </p >,\n  styles: ['.Online{ color: yellow; }']'})\n\nexport class AppComponent {\n  serverID: number = 10;\n  serverStatus: string = 'Offline';\n\n  constructor () {\n  this.serverStatus = Math.random() > 0.5 ? 'Online' : 'Offline';\n  }\n\n  getServerStatus() {\n    return this.serverStatus;\n  }\n  getColor() {\n    return this.serverStatus === 'Online' ? 'green' : 'red';\n  }\n}`.trim();\n\n\nconst databinding = `\nDOM               Component\n<----{{value}}-----\n<-[propery]=\"value\" --\n--(event)=\"handler\" -->\n<-[(NgModule)]=\"propery\" --`.trim();\n\nconst property = `\nsyntax: [property]='expression\n\n<input type=\"email\" [value]=\"user.email\">`.trim();\n\nconst evtBinding = `<button (click)=\"logout()\"></button>`.trim();\n\nconst twoWayBinding = `<input type=\"email\" [(ngModel)]=\"user.email\">`.trim();\n\nconst compDeco = `\n @Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  //\n  preserveWhitespaces:true,\n  changeDetection: ChangeDetectionStrategy\n  viewProviders?: Provider[]\n  moduleId?: string\n  templateUrl?: string\n  template?: string\n  styleUrls?: string[]\n  styles?: string[]\n  animations?: any[]\n  encapsulation?: ViewEncapsulation\n  interpolation?: [string, string]\n  entryComponents?: Array<Type<any> | any[]>\n  // inherited from core/Directive\n  selector?: string\n  inputs?: string[]\n  outputs?: string[]\n  providers?: Provider[]\n  exportAs?: string\n  queries?: {...}\n  host?: {...}\n  jit?: boolean\n})`.trim();\n\nconst objects = `\n@Component({\n  selector: 'app-root',\n  template: '\n  <input(keyup)=\"onKey($event)\">\n    <p>{{values}}</p>\n  '})\n\nexport class AppComponent {\n  values = '';\n\n  onKey(event: any) {\n    this.values += event.target.value + ' | ';\n  }`.trim();\n\nconst keyEvents = `\n @Component({\n  selector: 'app-root',\n  template: '\n  <input #box (keyup.enter) = \"onEnter(box.value)\">\n    <p>{{value}}</p>\n  '})\n\nexport class AppComponent {\n  values = '';\n\n  value = '';\n  onEnter(value: string) { this.value = value; }\n}`.trim();\n\nconst onBlur = `\n    <input #box\n      (keyup.enter)=\"update(box.value)\"\n      (blur)=\"update(box.value)\">\n    <p>{{value}}</p>'})\n\nexport class AppComponent {\n  value = '';\n  update(value: string) { this.value = value; }\n}\n`.trim();\n\nconst NgStyles = `\n//1\n<div [ngStyle]=\"{'color':green}\"></div>\nngStyle become much more useful when the value is dynamic.\n<div [ngStyle]=\"{'color': person.country==='UK' ? 'green' : 'red'}\"></div>\n\n\n//2\n@Component({\n  selector: 'app-root',\n  template: '\n  <p[ngStyle]=\"{backgroundColor: 'green'}\"> Server with ID {{serverID}} is {{serverStatus}}.</p>\n  '})\nexport class AppComponent {\n  serverID: number = 10;\n  serverStatus: string = 'Offline';\n\n  constructor () {\n  this.serverStatus = Math.random() > 0.5 ? 'Online' : 'Offline';\n  }\n}`.trim();\n\nconst templateExpree = `\n<h3>{{username}}, welcome to Angular</h3>\n\n\n//The below javascript expressions are prohibited in template expression\n1. assignments (=, +=, -=, ...)\n2. new\n3. chaining expressions with ; or ,\n4. increment and decrement operators (++ and --)\n`.trim();\n\nconst templateState = `\n//template statements appear in quotes to the right of the = symbol like (event)=\"statement\".\n<button (click)=\"editProfile()\">Edit Profile</button>\n\n\n// data flow\n2.Component       Template\n<- Event binding  ----\n-- Property binding  --->\n`.trim();\n\nconst binding = `\n<td [attr.colspan]=\"myColSpan\" align=\"center\">Record</td>\n`.trim();\n\nconst twoWay = `\ntemplate: '\nEnter name: <input [value] = 'data'(input) = 'data=$event.target.value' >\n  <br />\nYour name {{data}}\n    ',})\n\nexport class AppComponent {\n  data:string = 'Data binding';`.trim();\n\n\n\n\nconst componentBin = `\n@Component({\n  selector: 'app-root',\n  template: '\n    <input type = \"text\"[value] = \"property\"><br/>\n    <input type=\"text\" bind-value = \"property\">\n  ',\n})\nexport class AppComponent {\n  property=\"binding\"\n}`.trim();\n\nconst tempLocal = `\n@Component({\n  selector: 'app-root',\n  template: '\n    <input #inputInfo type = \"text\" name = \"template\" value = \"property\">\n    <br/>\n    <button (click) = \"getInfo(inputInfo)\"> Refrence Varriable</button>\n  '})\nexport class AppComponent {\n  getInfo(inputInfo){\n    console.log(inputInfo)\n    console.log(inputInfo.name)\n  }\n}`.trim();\n\nconst propertyBin = `\nComponent ---> Template\nSyntax:\n1. {{expression}}\n2. [target] = \"expression\"\n3. bind-template = expression\n\n@Component({\n  selector: 'app-root',\n  template: '  <button[disabled]=\"isDisable\"> Dis</button>',\n})\nexport class AppComponent {\n  isDisable=true;\n}`.trim();\n\n\nclass IntroAngulard extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Angular</h3>\n              <ul>\n                <li>Angular version number have 3 parts: <b>major, minor, patch (8.2.9).</b></li>\n                <li>Angular say if project in version 4 and want to migrate 6 than firstly move from 4 to 5 than\n                  finally move to version 6.</li>\n                <li>Major realease in every <b>6 month,</b> minor in <b>2-3 month</b> and patch in <b>every week</b>.</li>\n                <li><b>e2e: </b>integration testing</li>\n                <li><b>.editorconfig: </b>Required when work in team involvent</li>\n                <li><b>angular.json: </b>configure our application</li>\n                <li><b>selector: </b>component refrense</li>\n                <li><b>polyfils: </b>support diffrent browsers</li>\n                <li><b>tsconfig: </b>testing perpose</li>\n                <li><b>tslint: </b>rules define for standard codding</li>\n                <li><b>^: </b>minor and revision version checked and upper level install in system</li>\n                <li><b>~: </b>only revision checked and if stable version find than install</li>\n              </ul>\n              <br />\n\n              <h3>2. NgModules</h3>\n              <li><b>module:</b> Logical grouping of components and services. To define a module, we use the NgModule.</li>\n              <ul>\n                <li>Angular apps are modular and Angular has its own modularity system called NgModules. </li>\n                <li>A component cannot be import in two diffrent modules. If do than show runtime error. this is features module.</li>\n                <li>The purpose of NgModule is to declare everything that has been created in angular and group it.</li>\n                <li>NgModules collect related code into functional sets.</li>\n                <li>Every Angular app has a root module, conventionally named AppModule, which provides the bootstrap mechanism that launches the application. An app typically contains many functional modules.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={NgModules}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>providers: </b>A provider is an instruction to the Dependency Injection system on how to obtain a value for a dependency.\n              <br />\n              <br />\n\n              <b>Frequently Used NgModule:</b><br />\n              <ul>\n                <li><b>BrowserModule :</b>When run your app in a browser.</li>\n                <li><b>CommonModule :</b>When use NgIf, NgFor.</li>\n                <li><b>FormsModule :</b>When build template driven forms (includes NgModel).</li>\n                <li><b>ReactiveFormsModule :</b>When build reactive forms.</li>\n                <li><b>RouterModule :</b>When use RouterLink, .forRoot(), .forChild().</li>\n                <li><b>HttpClientModule :</b>When talk to a server.</li>\n              </ul>\n              <br />\n\n              <h3>Decorator</h3>\n              Decorator contain @. it accept object. decorator are simply functions that return functions.\n                  decorator are invoke at runtime. decorator allows you to excuite functions.\n              <ul>\n                <li><b>Common decorator: </b>@ngModule(), @Component(), @Injectable(): define services, @Input & @Output:\n                  send and recive data from dom. many build-in decorator available in Angular.</li>\n              </ul>\n              <br />\n\n              <ul>\n                <li><b>Class decorator:</b> @ngModule(), @Component().</li>\n                <li><b>Property decorator:</b> @Input(), @Output.</li>\n                <li><b>Method decorator:</b> for Method inside classes (@HostListener)</li>\n                <li><b>Parameter decorator:</b> for Parameter inside class constructors (@Inject)</li>\n                <li>Each decorator has a unique role.</li>\n              </ul>\n              <br />\n\n              <h3>3. What are directives: @directive</h3>\n              <ul>\n                <li>Directive is a js class.</li>\n                <li>Directives are used to extend the power of the HTML attributes and to change the appearance or behavior of a DOM element.</li>\n              </ul>\n              <br />\n              <br />\n\n              <b>Elements which change the appearence/ behavior of the DOM element. 3 types of Directives.</b>\n              <ul>\n                <li><b>Component Directives:</b>\n                  <ul>\n                    <li>Directives with own Template.</li>\n                    <li>with the help of selector, @Component which is a decorator function is used to create a\n                      component directive.</li>\n                  </ul>\n                </li>\n                <br />\n                <li><b>Structural Directives:</b>\n                  <ul>\n                    <li>Structural directive modifies or manipulates the structure of DOM by adding or removing DOM elements. it works on the structure of a DOM.</li>\n                    <li>Structural directives which have a * sign before the directive.  *ngIf and *ngFor.</li>\n                  </ul>\n                </li>\n                <br />\n                <li><b>Attribute Directives:</b>\n                  <ul>\n                    <li> Change appearence/ behavior of the DOM.</li>\n                    <li>Attribute directives deal with the changing of look and behavior of the DOM element,\n                      component or another directive. Ex. NgStyle</li>\n                  </ul>\n                </li>\n                <br />\n                By default, angular provide two attribute directives<br />\n                <b>1. NgClass: </b>dynamically, add or remove CSS class on the basis of the certain conditions.<br />\n                <br />\n                Allows us to set the CSS class dynamically for a DOM element. we can use ngClass with string, array,\n                object or component method.\n                <br />\n                <br />\n                <div style={titles}>\n                  <PrismCode\n                    code={NgClass}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n              </ul>\n              <br />\n              <br />\n              <b>2. NgStyle: </b>dynamically, add or remove styles on the basis of the certain conditions.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={NgStyles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>4. Component</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={componentBin}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. What are the differences between Component and Directive</h3>\n              <table>\n                <tr>\n                  <th>Component</th>\n                  <th>Directive</th>\n                </tr>\n                <tr>\n                  <td>To register a component we use @Component meta-data annotation</td>\n                  <td>To register directives we use @Directive meta-data annotation</td>\n                </tr>\n                <tr>\n                  <td>Components are typically used to create UI widgets</td>\n                  <td>Directive is used to add behavior to an existing DOM element</td>\n                </tr>\n                <tr>\n                  <td>Component is used to break up the application into smaller components</td>\n                  <td>Directive is use to design re-usable components</td>\n                </tr>\n                <tr>\n                  <td>Only one component can be present per DOM element</td>\n                  <td>Many directives can be used per DOM element</td>\n                </tr>\n              </table>\n              <br />\n\n              <h3>6. Component Decorator:</h3>\n              <ul>\n                <li>ngOnInit is called by default whenever the class is run.</li>\n                <li>@component decorator provides additional metadata that determines how to process, instantiate\n                  and use the component at runtime.</li>\n                <li>component Decorator accepts the required configuration object that requires information to\n                  create and display the component in real time.</li>\n              </ul>\n              <br />\n              <b>Types: </b> Ex. @Component, @ngModule, @injectable.<br />\n              <div style={titles}>\n                <PrismCode\n                  code={compDeco}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n                <b>preserveWhitespaces: </b>\n                <ul>\n                <li>Using this property, we can remove all whitespaces from the template. it takes a Boolean value, that is:</li>\n                <li>If it is false, it will remove all whitespace from the compiled template.</li>\n                <li>If it is true, it will not remove whitespace from the compiled template.</li>\n              </ul>\n              <br />\n\n              <h3>8. inherited from core/Directive:</h3>\n              <ul>\n                <li><b>selector :</b>css selector which identifies this component in a template.</li>\n                <li><b>inputs :</b></li>\n                <li><b>outputs :</b></li>\n                <li><b>providers :</b>Providers are usually singleton objects, to which other objects have access\n                  through dependency injection (DI).</li>\n                <li><b>exportAs :</b>name under which the component instance is exported to a template.</li>\n                <li><b>queries :</b>allows you to configure queries that can be inserted into the component.</li>\n                <li><b>host :</b>Map of class properties to host element links for events, properties, and attributes.</li>\n                <li><b>jit :</b>if true, the AOT compiler will ignore this directive/ component and will therefore always be compiled using JIT.</li>\n              </ul>\n              <br />\n\n              <h3>9. What are template expressions</h3>\n              Template expressions are computations/ assignments done in the template inside the interpolation curly braces.\n              <br />\n              <br />\n              In interpolation syntax, the template expression is surrounded by double curly braces.\n              <div style={titles}>\n                <PrismCode\n                  code={templateExpree}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>10. Template/local reference variables: Access by id '#inputInfo'</h3>\n\n              <div style={titles}>\n                <PrismCode\n                  code={tempLocal}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>11. What are template statements</h3>\n              A template is an HTML snippet that tells Angular how to render the component in angular application.\n              <div style={titles}>\n                <PrismCode\n                  code={templateState}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n                <br />\n                <b>N: </b>Component send data to Template by using Promises binding or Interpolation.\n              </div>\n\n              <br />\n              <h3>12. Templates and views</h3>\n              <ul>\n                <li><b>ngIf:</b> conditionally includes a Template based on the value of expression, It add/ remove HTML\n                  elements in DOM layout.</li>\n                <li><b>ngSwitch Directives:</b> ngSwitch is combination of attribute Directive and Structural Directive,\n                  it similar to switch statement. </li>\n                <li><b>ngFor:</b> it change the structure of DOM. It's point to repeat a given HTML Template once for each value in\n                  an array, each time passing it the array value as context for string interpolation/ binding.</li>\n                <li><b>syntax:</b> *ngFor=\"let 'value' of 'cpllection'.</li>\n                <br />\n              </ul>\n              <br />\n\n              <h3>13. What is Data Binding? How many ways it can be done?</h3>\n              In order to connect application data with the DOM, data binding is used.\n              It happens between the template (HTML) and component (TypeScript). There are 3 ways to achieve data binding:\n              <ul>\n                <li>Interpolation / String Interpolation (one-way data binding)</li>\n                <li><b>Event Binding: </b>one-way data binding.</li>\n                <li><b>Property Binding: </b>one-way data binding.</li>\n                <li><b>Two-way Binding: </b>Changes made in the application state gets automatically reflected in the view and vice-versa. The ngModel directive is used for achieving this type of data binding.</li>\n              </ul>\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={propertyBin}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Data binding Forms:</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={databinding}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <ul>\n                <li>Component to view</li>\n                <li>View to component</li>\n                <li>Two way sequence: view to component to view</li>\n              </ul>\n              <br />\n              <br />\n\n              <b>Property binding:</b>\n              <br />\n              <ul>\n                <li>We can also use string and non-string data in property binding. <b>Ex.</b> property binding use case is disabled, boolean.</li>\n                <li>Used to bind value of component/model properties to the HTML element.\n                  Depending on the value, it will change the existing behavior of the HTML element.</li>\n                <li>Interpolation use only string data.</li>\n                <li>in property binding can't use string concatnation.</li>\n                <li>It set a property to view element.</li>\n                <li>Rendering value from data-source to template.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={property}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Attribute Binding: </b>Helps to set values for attributes directly.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={binding}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>From the DOM to the Component: </b> Event binding\n              <br />\n              When a specific DOM event happens (eg.: click, change, keyup), call the specified method in the component\n              <div style={titles}>\n                <PrismCode\n                  code={evtBinding}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Two-way binding: Two-way data binding:</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={twoWayBinding}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <ul>\n                <li>mainly used in the input field or form where user provide value/ change any control value in the one side,\n                  and on the other side same automatically update into the controllers variables.</li>\n                <li>it's combination of both property binding and event binding.</li>\n                <li>binding using [(ngModel)] Directive. </li>\n                <li>ngModel Directive which combines the square bracket of property binding with parentheses of event binding\n                  in a single notation.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={twoWay}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <h3>2.1. Get user input from the $event object:</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={objects}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>  2.3. Key event filtering (with key.enter):</h3>\n              bind to Angular's keyup.enter pseudo-event. Then Angular calls the event handler only when the user presses Enter.\n              <div style={titles}>\n                <PrismCode\n                  code={keyEvents}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2.4. On blur</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={onBlur}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(IntroAngulard));\n"]},"metadata":{},"sourceType":"module"}