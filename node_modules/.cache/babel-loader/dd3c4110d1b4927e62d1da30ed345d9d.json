{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';import Stcksval from'../../../assets/stcks.png';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var redesign={height:200,width:500};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var uniqueStr=\"\\nfunction unique(){\\n  let str=\\\"Java is great Grails is also great\\\";\\n  let uniqueStr = str.split(' ');\\n  \\n  let result=new Set(uniqueStr);\\n  console.log(result);\\n  console.log(result.size);\\n}\\n\\nunique();\\n\".trim();var non_repeating_character=\"\\n// find sub string\\nfunction common(){\\n  var str='India is my home';\\n  var str2=str.includes('is');\\n  \\n  console.log(str2);\\n}\\n\\ncommon();\\n\\n\\n// ss2\\nfunction unique() {\\n  const str=\\\"apple\\\";\\n    let result=\\\"\\\";\\n\\n    for(let i=0; i<str.length; i++){\\n        let count=0\\n        for(let j=0; j<str.length; j++){\\n            if(str.charAt(i)==str.charAt(j)){\\n                count +=1;\\n            }\\n        }\\n        if(count>1){                                        //Double\\n    // if(count<=1){                                        //Unique\\n            result += str.charAt(i);\\n        }\\n    }\\n    console.log(result)\\n}\\n\\nunique();\\n\\n\\n//3\\nfunction common() {\\n  let i, str='onely', str2='ony', result=[];\\n\\n  for (i=0; i<=str.length; i++) {\\n    if (str2.indexOf(str[i]) == -1) result.push(str[i]);\\n    }\\n\\n  return console.log(result.join(\\\"\\\"));\\n}\\n\\ncommon()\\n\".trim();var findVowel=\"\\nfunction vowel(){\\n  const str='appleou';\\n  var str2='';\\n  \\n  for(let i=0; i<str.length; i++){\\n    if(str[i]=='a'||str[i]=='e'||str[i]=='i'||str[i]=='o'||str[i]=='u') str2 += str[i];\\n    }\\n  console.log(str2)\\n}\\n\\nvowel();\\n\\n\\n//2\\nfunction vowel() {\\n  var str='apple';\\n  let vowelList = 'AEIOUaeiou'\\n  let vowels = '';\\n  \\n   for(var i = 0; i < str.length ; i++){\\n      if (vowelList.indexOf(str[i]) !== -1) vowels += str[i];\\n      }\\n    console.log(vowels);\\n  }\\n  \\nvowel();\\n  \\n  \\n//3\\nfunction getCount() {\\n  var str = 'appleo';\\n  var matches;\\n\\n  for (var i = 0; i < str.length; i++) {\\n    if (str && (matches = str.match(/[aeiou]/g))) { }\\n  }\\n  console.log(matches);\\n}\\n\\ngetCount();\\n  \".trim();var combinations=\"\\nfunction permu(str){\\n  let currentNum=[];\\n  let remainingNum=[];\\n  let result=[];\\n\\n  let i,j;\\n  if(str.length===0) return \\\"\\\";\\n  if(str.length===1) return str;\\n\\n  for(i=0; i<str.length; i++){\\n    currentNum = str[i];\\n    remainingNum = str.slice(0,i) + str.slice(i+1);\\n\\n    for(j=0; j<remainingNum.length; j++){\\n      result.push(currentNum+permu(remainingNum)[j]);\\n    }\\n  }\\n  return result;\\n}\\n\\nconsole.log(permu('abc'));\\n\\n\\n//\\nfunction permu(str){\\n  let currentNum=[];\\n  let currentNum2=[];\\n  let remainingNum=[];\\n  let remainingNum2=[];\\n  let result=[];\\n\\n  let i,j;\\n  if(str.length===0) return \\\"\\\";\\n  if(str.length===1) return str;\\n\\n  for(i=0; i<str.length; i++){\\n    currentNum = str[i];\\n    currentNum2 = str.toUpperCase()[i];\\n    remainingNum = str.slice(0,i) + str.slice(i+1);\\n    remainingNum2 = (str.slice(0,i) + str.slice(i+1)).toUpperCase();\\n\\n    for(j=0; j<remainingNum.length; j++){\\n      result.push(currentNum+permu(remainingNum)[j]);\\n    }\\n    for(let k=0; k<remainingNum2.length; k++){\\n      result.push(currentNum2+permu(remainingNum2)[k]);\\n    }\\n  }\\n  \\n  return result;\\n}\\n\\nconsole.log(permu('ab'));\\n\".trim();var isIsomorphic=\"\\nfunction longStr() {\\n  const str1 = 'egg';\\n  const str2 = 'add';\\n\\n  const isIsomorphic = (str1 = '', str2 = '') => {\\n  if (str1.length !== str2.length) {\\n      return false;\\n  };\\n  for (let i = 0; i< str1.length; i++) {\\n      const a=str1.indexOf(str1[i]);\\n      const b=str2.indexOf(str2[i]);\\n      if (str2[a] !== str2[i] || str1[b] !== str1[i]) {\\n          return false;\\n      };\\n  };\\n  return true;\\n  };\\n  console.log(isIsomorphic(str1, str2));\\n}\\n\\nlongStr()\\n\".trim();var wordBreak=\"\\nfunction wordBreak (s, wordDict = []){\\n  const memo = {}\\n\\n  function aux (current = '') {\\n    if (memo[current] !== undefined) return memo[current];\\n    if (current === s) return true;\\n    if (s.indexOf(current) === -1) return false;\\n\\n    memo[current] = wordDict.some(word => aux(current + word))\\n    return memo[current]\\n  }\\n  return aux()\\n}\\n\\nconsole.log(wordBreak(\\\"leetcode\\\", wordDict = [\\\"leet\\\", \\\"code\\\"]))\\n\".trim();var removeDuplicates=\"\\nfunction removeDup(){\\n  const str = 'wwelcomee';\\n  const stack=[];\\n\\n  for(let c of str){\\n    if(c===stack[stack.length - 1]){\\n      while(stack[stack.length - 1]===c){\\n        stack.pop()\\n      }\\n    }\\n    else {stack.push(c)}\\n  }\\n  return console.log(stack.join(''))\\n}\\n\\nremoveDup();\\n\".trim();var lonStr=\"\\nfunction lonStr(){\\n  const str = 'second item is longer than the third one';\\n  const arr=str.split(' ');\\n  \\n  let lgth = 0;\\n  let longest;\\n  \\n  for (var i = 0; i < arr.length; i++) {\\n    if (arr[i].length > lgth) {\\n      lgth = arr[i].length;\\n      longest = arr[i];\\n    }\\n  }\\n  \\n  console.log(longest);\\n}\\n\\nlonStr();\\n\".trim();var lengthOfLongestSubstring=\"\\nfunction longStr() {\\n  const str='applaaopsf';\\n  let currentStr = [];\\n  let strLen = 0;\\n\\n  for (let i=0; i<str.length; i++) {\\n      const currentCharPos = currentStr.indexOf(str[i]);\\n\\n      if (currentCharPos !== -1) {\\n          currentStr.splice(0, currentCharPos + 1);\\n      }\\n      \\n      currentStr.push(str[i]);\\n      strLen = Math.max(strLen, currentStr.length);\\n  }\\n  console.log(currentStr)\\n  console.log(strLen);\\n}\\n\\nlongStr()\\n\".trim();var ladderLength=\"\\nfunction ladderLength(beginWord, endWord = '', wordList = []){\\n  function distance(a = '', b = ''){\\n    let count = 0\\n    for (let index = 0; index < b.length; index++) {\\n      if (a[index] !== b[index]) {\\n        count += 1\\n      }\\n    }\\n    return count === 1\\n  }\\n\\n  let current = [beginWord]\\n  const visited = {\\n  }\\n  \\n  let count = 1\\n  while (current.length > 0) {\\n    const next = []\\n    for (const word of current) {\\n      if (word === endWord) {\\n        return count\\n      }\\n      if (!visited[word]) {\\n        next.push(...wordList.filter(word2 => distance(word, word2) && !visited[word2]))\\n      }\\n      visited[word] = true\\n    }\\n    count += 1\\n    current = next\\n  }\\n  return 0\\n}\\n\\nconsole.log(ladderLength(\\\"hit\\\", \\\"cog\\\", [\\\"hot\\\",\\\"dot\\\",\\\"dog\\\",\\\"lot\\\",\\\"log\\\",\\\"cog\\\"]))\\n\".trim();var longestPalindrome=\"\\nfunction longestPalindrome(s = ''){\\n  const memo = {}\\n\\n  function isPalindrome(left, right){\\n    if (left === right) return true;\\n\\n    for (let i = left; i <= Math.floor((left + right) / 2); i++) {\\n      if (s[i] !== s[right - i + left]) {\\n        return false\\n      }\\n    }\\n    return true\\n  }\\n\\n  function aux(left, right){\\n    if (left > right) return '';\\n\\n    memo[left] = memo[left] || {}\\n    if (memo[left][right] !== undefined) {\\n      return memo[left][right]\\n    }\\n    if (isPalindrome(left, right)) {\\n      return s.substring(left, right + 1)\\n    }\\n    memo[left][right] = aux(left + 1, right).length > aux(left, right - 1).length\\n      ? aux(left + 1, right) : aux(left, right - 1)\\n    return memo[left][right]\\n  }\\n  return aux(0, s.length - 1)\\n}\\n\\nconsole.log(longestPalindrome(\\\"babad\\\"))\".trim();var isPalindromes=\"\\nfunction palindromNum(){\\n  let num=121, result=0;\\n  let temp=num;\\n\\n  while(temp>0){\\n    result = result*10 + temp%10;\\n    temp=Math.floor(temp/10);\\n  }\\n  if(result==num) console.log('Palindrom', result)\\n      else{console.log('Not a Palindrom', result)}\\n}\\n\\npalindromNum();\\n\".trim();var Palindrom=\"\\nfunction palindrom(){\\n  let i, str='madam', result='';\\n  \\n  for(i=str.length-1; i>=0; i-- ){\\n    result += str[i]; \\n  }\\n  if(str==result){console.log('Palindrom', result)}\\n  else{console.log('Not Palindrom', result)}\\n}\\n\\npalindrom();\\n\".trim();var partition=\"\\nfunction partition(s = ''){\\n  function isPalindrome(left, right){\\n    if (left === right) return true;\\n\\n    for (let i = left; i <= right; i++) {\\n      if (s[i] !== s[right - i + left]) {\\n        return false\\n      }\\n    }\\n    return true\\n  }\\n  \\n  const result = []\\n  function aux(index = 0, current = []){\\n    if (index === s.length) {\\n      result.push(current)\\n    }\\n    for (let i = index; i < s.length; i++) {\\n      if (isPalindrome(index, i)) {\\n        aux(i + 1, [...current, s.substring(index, i + 1)])\\n      }\\n    }\\n  }\\n  aux()\\n  return result\\n}\\n\\nconsole.log(partition(\\\"aab\\\"))\\n\".trim();var reverseWords=\"\\nconst reverseWords = str => str.split(\\\"\\\").reverse().join(\\\"\\\")\\nconsole.log(reverseWords(\\\"the sky is blue\\\"))\\n\".trim();var DSLogic=/*#__PURE__*/function(_Component){_inherits(DSLogic,_Component);function DSLogic(){_classCallCheck(this,DSLogic);return _possibleConstructorReturn(this,_getPrototypeOf(DSLogic).apply(this,arguments));}_createClass(DSLogic,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"b\",null,\"javaScript logicals: https://beizhedenglong.github.io/leetcode-solutions/docs/edit-distance\"),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"1. Reverse Words in a String.\"),React.createElement(\"b\",null,\"Note: \"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"A word is defined as a sequence of non-space characters.\"),React.createElement(\"li\",null,\"Input string may contain leading or trailing spaces. However, your reversed string should not contain leading or trailing spaces.\"),React.createElement(\"li\",null,\"You need to reduce multiple spaces between two words to a single space in the reversed string.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:reverseWords,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Unique String.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:uniqueStr,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Unique Char.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:non_repeating_character,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. Find vowel\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:findVowel,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. Palindrom\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Palindrom,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. Palindrome Number.\"),\"Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.\",React.createElement(\"br\",null),\" \",React.createElement(\"br\",null),\"Input: 121\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:isPalindromes,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"7. Find all the combinations of a string in lowercase and uppercase (Permutation).\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:combinations,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"8. Word Break.\"),\"Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Note: \"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"The same word in the dictionary may be reused multiple times in the segmentation.\"),React.createElement(\"li\",null,\"You may assume the dictionary does not contain duplicate words.\")),React.createElement(\"br\",null),\"Input: s = \\\"leetcode\\\", wordDict = [\\\"leet\\\", \\\"code\\\"]\",React.createElement(\"br\",null),\"Output: true\",React.createElement(\"br\",null),\"Explanation: Return true because \\\"leetcode\\\" can be segmented as \\\"leet code\\\".\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:wordBreak,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"9. Remove All Adjacent Duplicates In String.\"),React.createElement(\"b\",null,\"Input: \"),\"\\\"abbaca\\\" \",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"\\\"ca\\\" \",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Explanation: \"),\"For example, in \\\"abbaca\\\" we could remove \\\"bb\\\" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is \\\"aaca\\\", of which only \\\"aa\\\" is possible, so the final string is \\\"ca\\\".\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:removeDuplicates,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"10. Longest Substring from a String.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:lonStr,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"11. Longest Substring Without Repeating Characters.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:lengthOfLongestSubstring,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"12. Isomorphic Strings.\"),\"Given two strings s and t, determine if they are isomorphic.\",React.createElement(\"br\",null),\"Two strings are isomorphic if the characters in s can be replaced to get t.\",React.createElement(\"br\",null),\"All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"Input: s = \\\"egg\\\", t = \\\"add\\\"\",React.createElement(\"br\",null),\"Output: true\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:isIsomorphic,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"13. Word Ladder.\"),\"Given two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord, such that:\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Only one letter can be changed at a time.\"),React.createElement(\"li\",null,\"Each transformed word must exist in the word list.\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Note: \"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Return 0 if there is no such transformation sequence.\"),React.createElement(\"li\",null,\"All words have the same length.\"),React.createElement(\"li\",null,\"All words contain only lowercase alphabetic characters.\"),React.createElement(\"li\",null,\"You may assume no duplicates in the word list.\"),React.createElement(\"li\",null,\"You may assume beginWord and endWord are non-empty and are not the same.\")),React.createElement(\"br\",null),\"Example 1:\",React.createElement(\"br\",null),\"Input:\",React.createElement(\"br\",null),\"beginWord = \\\"hit\\\",\",React.createElement(\"br\",null),\"endWord = \\\"cog\\\",\",React.createElement(\"br\",null),\"wordList = [\\\"hot\\\",\\\"dot\\\",\\\"dog\\\",\\\"lot\\\",\\\"log\\\",\\\"cog\\\"]\",React.createElement(\"br\",null),\"Output: 5\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"Explanation: As one shortest transformation is \\\"hit\\\" - \\\"hot\\\" - \\\"dot\\\" - \\\"dog\\\" - \\\"cog\\\", return its length 5.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:ladderLength,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"14. Palindrome Partitioning.\"),\"Input: \\\"aab\\\"\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"Output: [\",React.createElement(\"br\",null),\"[\\\"aa\\\",\\\"b\\\"],\",React.createElement(\"br\",null),\"[\\\"a\\\",\\\"a\\\",\\\"b\\\"] ]\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:partition,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"15. Longest Palindromic Substring.\"),\"Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\",React.createElement(\"br\",null),\"Example 1:\",React.createElement(\"br\",null),\"Input: \\\"babad\\\"\",React.createElement(\"br\",null),\"Output: \\\"bab\\\"\",React.createElement(\"br\",null),\"Note: \\\"aba\\\" is also a valid answer.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"Example 2:\",React.createElement(\"br\",null),\"Input: \\\"cbbd\\\"\",React.createElement(\"br\",null),\"Output: \\\"bb\\\"\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:longestPalindrome,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return DSLogic;}(Component);export default withStyles(styles)(DSLogic);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/stringAlgo.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","uniqueStr","trim","non_repeating_character","findVowel","combinations","isIsomorphic","wordBreak","removeDuplicates","lonStr","lengthOfLongestSubstring","ladderLength","longestPalindrome","isPalindromes","Palindrom","partition","reverseWords","DSLogic","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,0BAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CAEA,MAAOC,CAAAA,QAAP,KAAqB,2BAArB,CAEA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,eAAe,CAAE,SAAnB,CAA8BC,OAAO,CAAE,KAAvC,CAA8CC,QAAQ,CAAE,MAAxD,CAAf,CAEA,GAAMC,CAAAA,QAAQ,CAAG,CACfC,MAAM,CAAE,GADO,CAEfC,KAAK,CAAE,GAFQ,CAAjB,CAKA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,KAAK,CAAE,CACLC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH,CAELT,OAAO,CAAEM,KAAK,CAACG,OAAN,CAAc,CAAd,CAFJ,CADgB,CAKvBC,QAAQ,CAAE,CACRF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA,CALa,CAQvBE,SAAS,CAAE,CACTC,SAAS,CAAE,QADF,CARY,CAAL,EAApB,CAaA,GAAMC,CAAAA,SAAS,CAAC,0NAWdC,IAXc,EAAhB,CAaA,GAAMC,CAAAA,uBAAuB,CAAG,24BA+C9BD,IA/C8B,EAAhC,CAiDA,GAAME,CAAAA,SAAS,CAAG,otBAyCdF,IAzCc,EAAlB,CA2CA,GAAMG,CAAAA,YAAY,CAAG,ypCAsDnBH,IAtDmB,EAArB,CAwDA,GAAMI,CAAAA,YAAY,CAAG,weAsBnBJ,IAtBmB,EAArB,CAwBA,GAAMK,CAAAA,SAAS,CAAG,mbAgBhBL,IAhBgB,EAAlB,CAkBA,GAAMM,CAAAA,gBAAgB,CAAG,iTAiBvBN,IAjBuB,EAAzB,CAmBA,GAAMO,CAAAA,MAAM,CAAG,oVAmBbP,IAnBa,EAAf,CAqBA,GAAMQ,CAAAA,wBAAwB,CAAG,4cAqB/BR,IArB+B,EAAjC,CAuBA,GAAMS,CAAAA,YAAY,CAAG,0zBAmCnBT,IAnCmB,EAArB,CAqCA,GAAMU,CAAAA,iBAAiB,CAAG,m0BAgCeV,IAhCf,EAA1B,CAkCA,GAAMW,CAAAA,aAAa,CAAG,mSAcpBX,IAdoB,EAAtB,CAgBA,GAAMY,CAAAA,SAAS,CAAG,yPAYhBZ,IAZgB,EAAlB,CAcA,GAAMa,CAAAA,SAAS,CAAG,6mBA6BhBb,IA7BgB,EAAlB,CA+BA,GAAMc,CAAAA,YAAY,CAAG,uHAGnBd,IAHmB,EAArB,C,GAKMe,CAAAA,O,2RACgB,CAClBC,UAAU,CAAC,iBAAMxC,CAAAA,KAAK,CAACyC,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAACzB,KAA1B,EACE,8BAAI,oBAAC,OAAD,MAAJ,CADF,CADF,CADF,CAME,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEyB,OAAO,CAACzB,KAA1B,EACE,oBAAC,IAAD,MACA,2HADA,CAEA,8BAFA,CAGA,8DAHA,CAIE,sCAJF,CAKE,8BACE,yFADF,CAEE,kKAFF,CAGE,+HAHF,CALF,CAUE,2BAAK,KAAK,CAAET,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAE8B,YADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAVF,CAiBE,8BAjBF,CAmBE,kDAnBF,CAoBE,2BAAK,KAAK,CAAE9B,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEe,SADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CApBF,CA2BE,8BA3BF,CA6BE,gDA7BF,CA8BE,2BAAK,KAAK,CAAEf,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEiB,uBADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CA9BF,CAqCE,8BArCF,CAuCE,8CAvCF,CAwCE,2BAAK,KAAK,CAAEjB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEkB,SADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAxCF,CA+CE,8BA/CF,CAiDE,6CAjDF,CAkDE,2BAAK,KAAK,CAAElB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAE4B,SADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAlDF,CAyDE,8BAzDF,CA2DE,sDA3DF,wHA6DE,8BA7DF,KA6DQ,8BA7DR,cA+DE,2BAAK,KAAK,CAAE5B,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAE2B,aADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CA/DF,CAsEE,8BAtEF,CAwEE,mHAxEF,CAyEE,2BAAK,KAAK,CAAE3B,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEmB,YADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAzEF,CAgFE,8BAhFF,CAkFE,+CAlFF,+LAoFE,8BApFF,CAqFE,8BArFF,CAsFE,sCAtFF,CAuFE,8BACE,kHADF,CAEE,gGAFF,CAvFF,CA2FE,8BA3FF,4DA4FoD,8BA5FpD,gBA6Fc,8BA7Fd,oFA+FE,2BAAK,KAAK,CAAEnB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEqB,SADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CA/FF,CAsGE,8BAtGF,CAwGE,6EAxGF,CAyGE,uCAzGF,eAyGyB,8BAzGzB,CA0GE,wCA1GF,WA0GsB,8BA1GtB,CA2GE,6CA3GF,6PA8GE,2BAAK,KAAK,CAAErB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEsB,gBADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CA9GF,CAqHE,8BArHF,CAuHE,qEAvHF,CAwHE,2BAAK,KAAK,CAAEtB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEuB,MADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAxHF,CA+HE,8BA/HF,CAiIE,oFAjIF,CAkIE,2BAAK,KAAK,CAAEvB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEwB,wBADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAlIF,CAyIE,8BAzIF,CA2IE,wDA3IF,gEA6IE,8BA7IF,+EA+IE,8BA/IF,uMAiJE,8BAjJF,CAiJO,8BAjJP,mCAkJ6B,8BAlJ7B,gBAmJc,8BAnJd,CAmJmB,8BAnJnB,CAoJE,2BAAK,KAAK,CAAExB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEoB,YADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CApJF,CA2JE,8BA3JF,CA6JE,iDA7JF,oKA+JE,8BA/JF,CA+JO,8BA/JP,CAgKE,8BACE,0EADF,CAEE,mFAFF,CAhKF,CAoKE,8BApKF,CAqKE,sCArKF,CAsKE,8BACE,sFADF,CAEE,gEAFF,CAGE,wFAHF,CAIE,+EAJF,CAKE,yGALF,CAtKF,CA6KE,8BA7KF,cA+KE,8BA/KF,UAgLQ,8BAhLR,wBAiLoB,8BAjLpB,sBAkLkB,8BAlLlB,gEAmLkD,8BAnLlD,aAqLE,8BArLF,CAqLO,8BArLP,wHAyLE,2BAAK,KAAK,CAAEpB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEyB,YADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAzLF,CAgME,8BAhMF,CAkME,6DAlMF,kBAmMc,8BAnMd,CAmMmB,8BAnMnB,aAqMG,8BArMH,mBAsMe,8BAtMf,yBAyME,2BAAK,KAAK,CAAEzB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAE6B,SADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAzMF,CAgNE,8BAhNF,CAkNE,mEAlNF,uHAoNE,8BApNF,cAsNE,8BAtNF,oBAuNgB,8BAvNhB,mBAwNe,8BAxNf,yCAyNqC,8BAzNrC,CAyN0C,8BAzN1C,cA0NY,8BA1NZ,mBA4Ne,8BA5Nf,kBA8NE,2BAAK,KAAK,CAAE7B,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAE0B,iBADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CA9NF,CADF,CADF,CANF,CADF,CAmPD,C,qBAzPmBnC,S,EA4PtB,cAAgBI,CAAAA,UAAU,CAACY,MAAD,CAAV,CAAmBwB,OAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst uniqueStr=`\nfunction unique(){\n  let str=\"Java is great Grails is also great\";\n  let uniqueStr = str.split(' ');\n  \n  let result=new Set(uniqueStr);\n  console.log(result);\n  console.log(result.size);\n}\n\nunique();\n`.trim();\n\nconst non_repeating_character = `\n// find sub string\nfunction common(){\n  var str='India is my home';\n  var str2=str.includes('is');\n  \n  console.log(str2);\n}\n\ncommon();\n\n\n// ss2\nfunction unique() {\n  const str=\"apple\";\n    let result=\"\";\n\n    for(let i=0; i<str.length; i++){\n        let count=0\n        for(let j=0; j<str.length; j++){\n            if(str.charAt(i)==str.charAt(j)){\n                count +=1;\n            }\n        }\n        if(count>1){                                        //Double\n    // if(count<=1){                                        //Unique\n            result += str.charAt(i);\n        }\n    }\n    console.log(result)\n}\n\nunique();\n\n\n//3\nfunction common() {\n  let i, str='onely', str2='ony', result=[];\n\n  for (i=0; i<=str.length; i++) {\n    if (str2.indexOf(str[i]) == -1) result.push(str[i]);\n    }\n\n  return console.log(result.join(\"\"));\n}\n\ncommon()\n`.trim()\n\nconst findVowel = `\nfunction vowel(){\n  const str='appleou';\n  var str2='';\n  \n  for(let i=0; i<str.length; i++){\n    if(str[i]=='a'||str[i]=='e'||str[i]=='i'||str[i]=='o'||str[i]=='u') str2 += str[i];\n    }\n  console.log(str2)\n}\n\nvowel();\n\n\n//2\nfunction vowel() {\n  var str='apple';\n  let vowelList = 'AEIOUaeiou'\n  let vowels = '';\n  \n   for(var i = 0; i < str.length ; i++){\n      if (vowelList.indexOf(str[i]) !== -1) vowels += str[i];\n      }\n    console.log(vowels);\n  }\n  \nvowel();\n  \n  \n//3\nfunction getCount() {\n  var str = 'appleo';\n  var matches;\n\n  for (var i = 0; i < str.length; i++) {\n    if (str && (matches = str.match(/[aeiou]/g))) { }\n  }\n  console.log(matches);\n}\n\ngetCount();\n  `.trim();\n\nconst combinations = `\nfunction permu(str){\n  let currentNum=[];\n  let remainingNum=[];\n  let result=[];\n\n  let i,j;\n  if(str.length===0) return \"\";\n  if(str.length===1) return str;\n\n  for(i=0; i<str.length; i++){\n    currentNum = str[i];\n    remainingNum = str.slice(0,i) + str.slice(i+1);\n\n    for(j=0; j<remainingNum.length; j++){\n      result.push(currentNum+permu(remainingNum)[j]);\n    }\n  }\n  return result;\n}\n\nconsole.log(permu('abc'));\n\n\n//\nfunction permu(str){\n  let currentNum=[];\n  let currentNum2=[];\n  let remainingNum=[];\n  let remainingNum2=[];\n  let result=[];\n\n  let i,j;\n  if(str.length===0) return \"\";\n  if(str.length===1) return str;\n\n  for(i=0; i<str.length; i++){\n    currentNum = str[i];\n    currentNum2 = str.toUpperCase()[i];\n    remainingNum = str.slice(0,i) + str.slice(i+1);\n    remainingNum2 = (str.slice(0,i) + str.slice(i+1)).toUpperCase();\n\n    for(j=0; j<remainingNum.length; j++){\n      result.push(currentNum+permu(remainingNum)[j]);\n    }\n    for(let k=0; k<remainingNum2.length; k++){\n      result.push(currentNum2+permu(remainingNum2)[k]);\n    }\n  }\n  \n  return result;\n}\n\nconsole.log(permu('ab'));\n`.trim();\n\nconst isIsomorphic = `\nfunction longStr() {\n  const str1 = 'egg';\n  const str2 = 'add';\n\n  const isIsomorphic = (str1 = '', str2 = '') => {\n  if (str1.length !== str2.length) {\n      return false;\n  };\n  for (let i = 0; i< str1.length; i++) {\n      const a=str1.indexOf(str1[i]);\n      const b=str2.indexOf(str2[i]);\n      if (str2[a] !== str2[i] || str1[b] !== str1[i]) {\n          return false;\n      };\n  };\n  return true;\n  };\n  console.log(isIsomorphic(str1, str2));\n}\n\nlongStr()\n`.trim();\n\nconst wordBreak = `\nfunction wordBreak (s, wordDict = []){\n  const memo = {}\n\n  function aux (current = '') {\n    if (memo[current] !== undefined) return memo[current];\n    if (current === s) return true;\n    if (s.indexOf(current) === -1) return false;\n\n    memo[current] = wordDict.some(word => aux(current + word))\n    return memo[current]\n  }\n  return aux()\n}\n\nconsole.log(wordBreak(\"leetcode\", wordDict = [\"leet\", \"code\"]))\n`.trim();\n\nconst removeDuplicates = `\nfunction removeDup(){\n  const str = 'wwelcomee';\n  const stack=[];\n\n  for(let c of str){\n    if(c===stack[stack.length - 1]){\n      while(stack[stack.length - 1]===c){\n        stack.pop()\n      }\n    }\n    else {stack.push(c)}\n  }\n  return console.log(stack.join(''))\n}\n\nremoveDup();\n`.trim();\n\nconst lonStr = `\nfunction lonStr(){\n  const str = 'second item is longer than the third one';\n  const arr=str.split(' ');\n  \n  let lgth = 0;\n  let longest;\n  \n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i].length > lgth) {\n      lgth = arr[i].length;\n      longest = arr[i];\n    }\n  }\n  \n  console.log(longest);\n}\n\nlonStr();\n`.trim();\n\nconst lengthOfLongestSubstring = `\nfunction longStr() {\n  const str='applaaopsf';\n  let currentStr = [];\n  let strLen = 0;\n\n  for (let i=0; i<str.length; i++) {\n      const currentCharPos = currentStr.indexOf(str[i]);\n\n      if (currentCharPos !== -1) {\n          currentStr.splice(0, currentCharPos + 1);\n      }\n      \n      currentStr.push(str[i]);\n      strLen = Math.max(strLen, currentStr.length);\n  }\n  console.log(currentStr)\n  console.log(strLen);\n}\n\nlongStr()\n`.trim();\n\nconst ladderLength = `\nfunction ladderLength(beginWord, endWord = '', wordList = []){\n  function distance(a = '', b = ''){\n    let count = 0\n    for (let index = 0; index < b.length; index++) {\n      if (a[index] !== b[index]) {\n        count += 1\n      }\n    }\n    return count === 1\n  }\n\n  let current = [beginWord]\n  const visited = {\n  }\n  \n  let count = 1\n  while (current.length > 0) {\n    const next = []\n    for (const word of current) {\n      if (word === endWord) {\n        return count\n      }\n      if (!visited[word]) {\n        next.push(...wordList.filter(word2 => distance(word, word2) && !visited[word2]))\n      }\n      visited[word] = true\n    }\n    count += 1\n    current = next\n  }\n  return 0\n}\n\nconsole.log(ladderLength(\"hit\", \"cog\", [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]))\n`.trim();\n\nconst longestPalindrome = `\nfunction longestPalindrome(s = ''){\n  const memo = {}\n\n  function isPalindrome(left, right){\n    if (left === right) return true;\n\n    for (let i = left; i <= Math.floor((left + right) / 2); i++) {\n      if (s[i] !== s[right - i + left]) {\n        return false\n      }\n    }\n    return true\n  }\n\n  function aux(left, right){\n    if (left > right) return '';\n\n    memo[left] = memo[left] || {}\n    if (memo[left][right] !== undefined) {\n      return memo[left][right]\n    }\n    if (isPalindrome(left, right)) {\n      return s.substring(left, right + 1)\n    }\n    memo[left][right] = aux(left + 1, right).length > aux(left, right - 1).length\n      ? aux(left + 1, right) : aux(left, right - 1)\n    return memo[left][right]\n  }\n  return aux(0, s.length - 1)\n}\n\nconsole.log(longestPalindrome(\"babad\"))`.trim();\n\nconst isPalindromes = `\nfunction palindromNum(){\n  let num=121, result=0;\n  let temp=num;\n\n  while(temp>0){\n    result = result*10 + temp%10;\n    temp=Math.floor(temp/10);\n  }\n  if(result==num) console.log('Palindrom', result)\n      else{console.log('Not a Palindrom', result)}\n}\n\npalindromNum();\n`.trim();\n\nconst Palindrom = `\nfunction palindrom(){\n  let i, str='madam', result='';\n  \n  for(i=str.length-1; i>=0; i-- ){\n    result += str[i]; \n  }\n  if(str==result){console.log('Palindrom', result)}\n  else{console.log('Not Palindrom', result)}\n}\n\npalindrom();\n`.trim()\n\nconst partition = `\nfunction partition(s = ''){\n  function isPalindrome(left, right){\n    if (left === right) return true;\n\n    for (let i = left; i <= right; i++) {\n      if (s[i] !== s[right - i + left]) {\n        return false\n      }\n    }\n    return true\n  }\n  \n  const result = []\n  function aux(index = 0, current = []){\n    if (index === s.length) {\n      result.push(current)\n    }\n    for (let i = index; i < s.length; i++) {\n      if (isPalindrome(index, i)) {\n        aux(i + 1, [...current, s.substring(index, i + 1)])\n      }\n    }\n  }\n  aux()\n  return result\n}\n\nconsole.log(partition(\"aab\"))\n`.trim();\n\nconst reverseWords = `\nconst reverseWords = str => str.split(\"\").reverse().join(\"\")\nconsole.log(reverseWords(\"the sky is blue\"))\n`.trim();\n\nclass DSLogic extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n            <b>javaScript logicals: https://beizhedenglong.github.io/leetcode-solutions/docs/edit-distance</b>\n            <br/>\n            <h3>1. Reverse Words in a String.</h3>\n              <b>Note: </b>\n              <ul>\n                <li>A word is defined as a sequence of non-space characters.</li>\n                <li>Input string may contain leading or trailing spaces. However, your reversed string should not contain leading or trailing spaces.</li>\n                <li>You need to reduce multiple spaces between two words to a single space in the reversed string.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={reverseWords}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>2. Unique String.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={uniqueStr}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>3. Unique Char.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={non_repeating_character}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>4. Find vowel</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={findVowel}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. Palindrom</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Palindrom}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>6. Palindrome Number.</h3>\n              Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.\n              <br/> <br/>\n              Input: 121 \n              <div style={titles}>\n                <PrismCode\n                  code={isPalindromes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7. Find all the combinations of a string in lowercase and uppercase (Permutation).</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={combinations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>8. Word Break.</h3>\n              Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.\n              <br/>\n              <br/>\n              <b>Note: </b>\n              <ul>\n                <li>The same word in the dictionary may be reused multiple times in the segmentation.</li>\n                <li>You may assume the dictionary does not contain duplicate words.</li>\n              </ul>\n              <br/>\n              Input: s = \"leetcode\", wordDict = [\"leet\", \"code\"]<br/>\n              Output: true<br/>\n              Explanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n              <div style={titles}>\n                <PrismCode\n                  code={wordBreak}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>9. Remove All Adjacent Duplicates In String.</h3>\n              <b>Input: </b>\"abbaca\" <br/>\n              <b>Output: </b>\"ca\" <br/>\n              <b>Explanation: </b>\n              For example, in \"abbaca\" we could remove \"bb\" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is \"aaca\", of which only \"aa\" is possible, so the final string is \"ca\".\n\n              <div style={titles}>\n                <PrismCode\n                  code={removeDuplicates}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>10. Longest Substring from a String.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={lonStr}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/> \n\n              <h3>11. Longest Substring Without Repeating Characters.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={lengthOfLongestSubstring}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>            \n\n              <h3>12. Isomorphic Strings.</h3>\n              Given two strings s and t, determine if they are isomorphic.\n              <br/>\n              Two strings are isomorphic if the characters in s can be replaced to get t.\n              <br/>\n              All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.\n              <br/><br/>\n              Input: s = \"egg\", t = \"add\"<br/>\n              Output: true<br/><br/>\n              <div style={titles}>\n                <PrismCode\n                  code={isIsomorphic}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>13. Word Ladder.</h3>\n              Given two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord, such that:\n              <br/><br/>\n              <ul>\n                <li>Only one letter can be changed at a time.</li>\n                <li>Each transformed word must exist in the word list.</li>\n              </ul>\n              <br/>\n              <b>Note: </b>\n              <ul>\n                <li>Return 0 if there is no such transformation sequence.</li>\n                <li>All words have the same length.</li>\n                <li>All words contain only lowercase alphabetic characters.</li>\n                <li>You may assume no duplicates in the word list.</li>\n                <li>You may assume beginWord and endWord are non-empty and are not the same.</li>\n              </ul>\n              <br/>\n              Example 1:\n              <br/>\n              Input:<br/>\n              beginWord = \"hit\",<br/>\n              endWord = \"cog\",<br/>\n              wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]<br/>\n              Output: 5\n              <br/><br/>\n\n              Explanation: As one shortest transformation is \"hit\" - \"hot\" - \"dot\" - \"dog\" - \"cog\",\n              return its length 5.\n              <div style={titles}>\n                <PrismCode\n                  code={ladderLength}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>14. Palindrome Partitioning.</h3>\n              Input: \"aab\"<br/><br/>\n              Output:\n              [<br/>\n                [\"aa\",\"b\"],<br/>\n                [\"a\",\"a\",\"b\"]\n]\n              <div style={titles}>\n                <PrismCode\n                  code={partition}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>15. Longest Palindromic Substring.</h3>\n              Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\n              <br/>\n              Example 1:\n              <br/>\n              Input: \"babad\"<br/>\n              Output: \"bab\"<br/>\n              Note: \"aba\" is also a valid answer.<br/><br/>\n              Example 2:<br/>\n\n              Input: \"cbbd\"<br/>\n              Output: \"bb\"\n              <div style={titles}>\n                <PrismCode\n                  code={longestPalindrome}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic));\n"]},"metadata":{},"sourceType":"module"}