{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var envs=\"\\nhost = \\\"localhost\\\",\\nuser = \\\"root\\\",\\npassword = \\\"root\\\",\\ndatabase = \\\"persons\\\"\\nPORT = 5000\".trim();var config=\"\\nconst mysql = require('mysql');\\n\\nconst dbConn = mysql.createConnection({\\n    host:'localhost',\\n    user:'root',\\n    password:'root',\\n    database:'persons'\\n});\\n\\ndbConn.connect((err)=>{\\n    if(err) throw err;\\n    console.log('Database connected')\\n});\\n\\nmodule.exports = dbConn;\".trim();var models=\"\\nvar dbConn = require('../config/db');\\n\\nvar Order = function (obj) {\\n    this.user=obj.user;\\n    this.paymentMethod=obj.paymentMethod;\\n    this.paymentResult=obj.paymentResult;\\n    this.taxPrice=obj.taxPrice;\\n    this.shippingPrice=obj.shippingPrice;\\n    this.totalPrice=obj.totalPrice;\\n    this.isPaid=obj.isPaid;\\n    this.isDelivered=obj.isDelivered;\\n    this.deliveredAt=obj.deliveredAt;\\n};\\n\\nOrder.create = (newOrd, result) => {\\n    dbConn.query(\\\"INSERT INTO ecommerce set ?\\\", newOrd, (err, res) => {\\n        if (err) \\n            result(err, null);\\n        result(null, res.insertId);\\n    });\\n};\\n\\nOrder.allOrder = (result) => {\\n    dbConn.query(\\\"Select * from ecommerce\\\", (err, res) => {\\n        if (err) \\n            result(null, err);\\n        result(null, res);\\n    });\\n};\\n\\nOrder.orderById = (id,result) => {\\n    dbConn.query(\\\"select * from ecommerce where id = ?\\\", id, (err,res)=>{\\n        if(err)\\n            result(null, err);\\n        result(null, res);\\n    })\\n}\\n\\nOrder.delete = (id, result) => {\\n    dbConn.query(\\\"delete from ecommerce where id = ?\\\", [id], (err, res)=>{\\n        if(err)\\n            result(null,err);\\n        result(null, res);\\n    })\\n}\\n\\nOrder.updateOne = (id, ord, result) => {\\n    dbConn.query(\\\"update ecommerce set user=?, paymentMethod=?, paymentResult=?, taxPrice=?, shippingPrice=?, \\n    totalPrice=?, isPaid=?, isDelivered=?, deliveredAt=?, created_at=?, updated_at=? where id = ?\\\",\\n      \\n      [ord.user, ord.paymentMethod, ord.paymentResult,ord.taxPrice, ord.shippingPrice, ord.totalPrice, \\n      ord.isPaid, ord.isDelivered, ord.deliveredAt, ord.created_at, ord.updated_at, id], (err, res)=>{\\n        if(err)\\n            result(null,err);\\n        result(null,res);\\n    })\\n}\\n\\nmodule.exports = Order;\".trim();var controllers=\"\\nconst Order = require('../models/items');\\n\\n\\nrouter.allOrder = (req, res) => {\\n    Order.allOrder((err, results) =>{\\n        if (err)\\n            res.send(err);\\n        res.send(results);\\n    });\\n};\\n\\nrouter.create = (req, res) => {\\n    const nrw_order = new Order(req.body);\\n    Order.create(nrw_order, (err, results) => {\\n        if (err)\\n            res.send(err);\\n        res.json({ error: false, message: \\\"Order added successfully!\\\", data: results });\\n    });\\n};\\n\\nrouter.orderById = (req, res) => {\\n    Order.orderById(req.params.id, (err, results) => {\\n        if (err)\\n            res.send(err);\\n        res.json(results);\\n    });\\n};\\n\\nrouter.deletes = (req,res) => {\\n    Order.delete(req.params.id, (err, result) => {\\n        if(err)\\n            res.send(err);\\n        res.json({success:true, msg:\\\"Order is deleted\\\"})\\n    })\\n}\\n\\nrouter.updateOrder = (req,res) => {\\n    const orderUpdate = new Order(req.body);\\n    Order.updateOne(req.params.id, orderUpdate, (err,order)=>{\\n        if(err)\\n            res.send(err);\\n        res.json({success:true, msg:\\\"Order updated successfully\\\"});\\n    })\\n}\".trim();var routes=\"\\nnst orderController = require('../controllers/items');\\n\\nrouter.get('/', orderController.allOrder);\\nrouter.post('/', orderController.create);\\nrouter.get('/:id', orderController.orderById);\\nrouter.delete('/:id', orderController.deletes)\\nrouter.put('/:id',orderController.updateOrder);\\n\\nmodule.exports = router;\\n\".trim();var server=\"\\nrequire('dotenv').config();\\nconst express = require('express');\\nconst app = express();\\nconst cors = require(\\\"cors\\\");\\nconst session = require(\\\"express-session\\\");\\n\\nconst unionRoutes = require('./routes/items');\\n\\napp.use(express.urlencoded({ extended: true }))\\napp.use(express.json());\\n\\napp.use(cors({\\n      origin: [\\\"http://localhost:3000\\\"],\\n      methods: [\\\"GET\\\", \\\"POST\\\"],\\n      credentials: true,\\n    }));\\n\\napp.use(session({\\n    key: \\\"userId\\\",\\n    secret: \\\"subscribe\\\",\\n    resave: false,\\n    saveUninitialized: false,\\n    cookie: {\\n      expires: 60 * 60 * 24,\\n    },\\n  })\\n);\\n\\napp.use('/items', unionRoutes);\\n\\nconst port = process.env.PORT;\\napp.listen(port,()=> console.log('Server is running on port '$'{port}''));\".trim();var chanaModel=\"\\nvar Order = function (obj) {\\n  this.name=obj.name;\\n  this.carMake=obj.carMake;\\n  this.model=obj.model;\\n};\\n\\nOrder.create = (newOrd, result) => {\\ndbConn.query(\\\"INSERT INTO selectData set ?\\\", newOrd, (err, res) => {\\n    if (err) \\n        result(err, null);\\n    result(null, res.insertId);\\n});\\n};\\n\\nOrder.allOrder = (result) => {\\ndbConn.query(\\\"Select * from selectData\\\", (err, res) => {\\n    if (err) \\n        result(null, err);\\n    result(null, res);\\n});\\n};\".trim();var chanaControllers=\"\\nconst Car = require('../models/union');\\n\\nrouter.allOrder = (req, res) => {\\n  Car.allOrder((err, results) =>{\\n      if (err)\\n          res.send(err);\\n      res.send(results);\\n  });\\n};\\n\\nrouter.create = (req, res) => {\\n  const new_order = new Car(req.body);\\n  Car.create(new_order, (err, results) => {\\n      if (err)\\n          res.send(err);\\n      res.json({ error: false, message: \\\"Car added successfully!\\\", data: results });\\n  });\\n};\".trim();var chanaRoutes=\"\\nconst orderController = require('../controllers/union');\\n\\nrouter.get('/', orderController.allOrder);\\nrouter.post('/', orderController.create);\".trim();var chanaServer=\"\\nconst unionRoutes = require('./routes/union');\\n\\napp.use(express.urlencoded({ extended: true }))\\napp.use(express.json());\\napp.use(cors());\\n\\napp.use('/union', unionRoutes);\\n\\nconst port = process.env.PORT || 5000;\\napp.listen(port,()=>console.log('Server is running on port'));\".trim();var MysqlCurd=/*#__PURE__*/function(_Component){_inherits(MysqlCurd,_Component);function MysqlCurd(){_classCallCheck(this,MysqlCurd);return _possibleConstructorReturn(this,_getPrototypeOf(MysqlCurd).apply(this,arguments));}_createClass(MysqlCurd,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"MySqlCurd\"),React.createElement(\"b\",null,\".env\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:envs,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"config/db.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:config,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"models/items.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:models,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"controllers/items.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:controllers,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"routes/items.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:routes,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"server.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:server,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"chainable-dropdown\"),React.createElement(\"b\",null,\"models/union.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:chanaModel,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"controllers/union.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:chanaControllers,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"routes/union.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:chanaRoutes,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"server.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:chanaServer,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return MysqlCurd;}(Component);export default withStyles(styles)(MysqlCurd);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/mongoDB/deepMongodb/mysqlCurd.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","envs","trim","config","models","controllers","routes","server","chanaModel","chanaControllers","chanaRoutes","chanaServer","MysqlCurd","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst envs = `\nhost = \"localhost\",\nuser = \"root\",\npassword = \"root\",\ndatabase = \"persons\"\nPORT = 5000`.trim();\n\nconst config = `\nconst mysql = require('mysql');\n\nconst dbConn = mysql.createConnection({\n    host:'localhost',\n    user:'root',\n    password:'root',\n    database:'persons'\n});\n\ndbConn.connect((err)=>{\n    if(err) throw err;\n    console.log('Database connected')\n});\n\nmodule.exports = dbConn;`.trim();\n\nconst models = `\nvar dbConn = require('../config/db');\n\nvar Order = function (obj) {\n    this.user=obj.user;\n    this.paymentMethod=obj.paymentMethod;\n    this.paymentResult=obj.paymentResult;\n    this.taxPrice=obj.taxPrice;\n    this.shippingPrice=obj.shippingPrice;\n    this.totalPrice=obj.totalPrice;\n    this.isPaid=obj.isPaid;\n    this.isDelivered=obj.isDelivered;\n    this.deliveredAt=obj.deliveredAt;\n};\n\nOrder.create = (newOrd, result) => {\n    dbConn.query(\"INSERT INTO ecommerce set ?\", newOrd, (err, res) => {\n        if (err) \n            result(err, null);\n        result(null, res.insertId);\n    });\n};\n\nOrder.allOrder = (result) => {\n    dbConn.query(\"Select * from ecommerce\", (err, res) => {\n        if (err) \n            result(null, err);\n        result(null, res);\n    });\n};\n\nOrder.orderById = (id,result) => {\n    dbConn.query(\"select * from ecommerce where id = ?\", id, (err,res)=>{\n        if(err)\n            result(null, err);\n        result(null, res);\n    })\n}\n\nOrder.delete = (id, result) => {\n    dbConn.query(\"delete from ecommerce where id = ?\", [id], (err, res)=>{\n        if(err)\n            result(null,err);\n        result(null, res);\n    })\n}\n\nOrder.updateOne = (id, ord, result) => {\n    dbConn.query(\"update ecommerce set user=?, paymentMethod=?, paymentResult=?, taxPrice=?, shippingPrice=?, \n    totalPrice=?, isPaid=?, isDelivered=?, deliveredAt=?, created_at=?, updated_at=? where id = ?\",\n      \n      [ord.user, ord.paymentMethod, ord.paymentResult,ord.taxPrice, ord.shippingPrice, ord.totalPrice, \n      ord.isPaid, ord.isDelivered, ord.deliveredAt, ord.created_at, ord.updated_at, id], (err, res)=>{\n        if(err)\n            result(null,err);\n        result(null,res);\n    })\n}\n\nmodule.exports = Order;`.trim();\n\nconst controllers = `\nconst Order = require('../models/items');\n\n\nrouter.allOrder = (req, res) => {\n    Order.allOrder((err, results) =>{\n        if (err)\n            res.send(err);\n        res.send(results);\n    });\n};\n\nrouter.create = (req, res) => {\n    const nrw_order = new Order(req.body);\n    Order.create(nrw_order, (err, results) => {\n        if (err)\n            res.send(err);\n        res.json({ error: false, message: \"Order added successfully!\", data: results });\n    });\n};\n\nrouter.orderById = (req, res) => {\n    Order.orderById(req.params.id, (err, results) => {\n        if (err)\n            res.send(err);\n        res.json(results);\n    });\n};\n\nrouter.deletes = (req,res) => {\n    Order.delete(req.params.id, (err, result) => {\n        if(err)\n            res.send(err);\n        res.json({success:true, msg:\"Order is deleted\"})\n    })\n}\n\nrouter.updateOrder = (req,res) => {\n    const orderUpdate = new Order(req.body);\n    Order.updateOne(req.params.id, orderUpdate, (err,order)=>{\n        if(err)\n            res.send(err);\n        res.json({success:true, msg:\"Order updated successfully\"});\n    })\n}`.trim();\n\nconst routes = `\nnst orderController = require('../controllers/items');\n\nrouter.get('/', orderController.allOrder);\nrouter.post('/', orderController.create);\nrouter.get('/:id', orderController.orderById);\nrouter.delete('/:id', orderController.deletes)\nrouter.put('/:id',orderController.updateOrder);\n\nmodule.exports = router;\n`.trim();\n\nconst server = `\nrequire('dotenv').config();\nconst express = require('express');\nconst app = express();\nconst cors = require(\"cors\");\nconst session = require(\"express-session\");\n\nconst unionRoutes = require('./routes/items');\n\napp.use(express.urlencoded({ extended: true }))\napp.use(express.json());\n\napp.use(cors({\n      origin: [\"http://localhost:3000\"],\n      methods: [\"GET\", \"POST\"],\n      credentials: true,\n    }));\n\napp.use(session({\n    key: \"userId\",\n    secret: \"subscribe\",\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      expires: 60 * 60 * 24,\n    },\n  })\n);\n\napp.use('/items', unionRoutes);\n\nconst port = process.env.PORT;\napp.listen(port,()=> console.log('Server is running on port '$'{port}''));`.trim();\n\nconst chanaModel = `\nvar Order = function (obj) {\n  this.name=obj.name;\n  this.carMake=obj.carMake;\n  this.model=obj.model;\n};\n\nOrder.create = (newOrd, result) => {\ndbConn.query(\"INSERT INTO selectData set ?\", newOrd, (err, res) => {\n    if (err) \n        result(err, null);\n    result(null, res.insertId);\n});\n};\n\nOrder.allOrder = (result) => {\ndbConn.query(\"Select * from selectData\", (err, res) => {\n    if (err) \n        result(null, err);\n    result(null, res);\n});\n};`.trim();\n\nconst chanaControllers = `\nconst Car = require('../models/union');\n\nrouter.allOrder = (req, res) => {\n  Car.allOrder((err, results) =>{\n      if (err)\n          res.send(err);\n      res.send(results);\n  });\n};\n\nrouter.create = (req, res) => {\n  const new_order = new Car(req.body);\n  Car.create(new_order, (err, results) => {\n      if (err)\n          res.send(err);\n      res.json({ error: false, message: \"Car added successfully!\", data: results });\n  });\n};`.trim();\n\nconst chanaRoutes = `\nconst orderController = require('../controllers/union');\n\nrouter.get('/', orderController.allOrder);\nrouter.post('/', orderController.create);`.trim();\n\nconst chanaServer = `\nconst unionRoutes = require('./routes/union');\n\napp.use(express.urlencoded({ extended: true }))\napp.use(express.json());\napp.use(cors());\n\napp.use('/union', unionRoutes);\n\nconst port = process.env.PORT || 5000;\napp.listen(port,()=>console.log('Server is running on port'));`.trim();\n\n\n\nclass MysqlCurd extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>MySqlCurd</h3>\n              <b>.env</b>\n              <div style={titles}>\n                <PrismCode\n                  code={envs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>config/db.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={config}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>models/items.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={models}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>controllers/items.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={controllers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>routes/items.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={routes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>server.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={server}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n\n              <h3>chainable-dropdown</h3>\n              <b>models/union.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={chanaModel}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>controllers/union.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={chanaControllers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>routes/union.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={chanaRoutes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>server.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={chanaServer}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(MysqlCurd));\n"]},"metadata":{},"sourceType":"module"}