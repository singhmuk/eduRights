{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/angularjs/deepAngularjs/stochastic.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Neural from '../../../assets/AI/hp.jpg';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst childsFile = `\nimport pandas as pd\nimport numpy as np\nfrom sklearn import preprocessing\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n\ndf = pd.read_csv(\"homeprices_banglore.csv\")\n\nsx = preprocessing.MinMaxScaler()\nsy = preprocessing.MinMaxScaler()\n\nscaled_X = sx.fit_transform(df.drop('price',axis='columns'))\nscaled_y = sy.fit_transform(df['price'].values.reshape(df.shape[0],1))\n\nscaled_y.reshape(20,)\n`.trim();\nconst batch = `\ndef batch_gradient_descent(X, y_true, epochs, learning_rate = 0.01):\n    number_of_features = X.shape[1]\n    w = np.ones(shape=(number_of_features)) \n    b = 0\n    total_samples = X.shape[0]                                                  # number of rows in X\n    cost_list = []\n    epoch_list = []\n    \n    for i in range(epochs):        \n        y_predicted = np.dot(w, X.T) + b\n\n        w_grad = -(2/total_samples)*(X.T.dot(y_true-y_predicted))\n        b_grad = -(2/total_samples)*np.sum(y_true-y_predicted)\n        \n        w = w - learning_rate * w_grad\n        b = b - learning_rate * b_grad\n        \n        cost = np.mean(np.square(y_true-y_predicted))                          # MSE (Mean Squared Error)\n        \n        if i%10==0:\n            cost_list.append(cost)\n            epoch_list.append(i)\n    return w, b, cost, cost_list, epoch_list\n\nw, b, cost, cost_list, epoch_list = batch_gradient_descent(scaled_X,scaled_y.reshape(scaled_y.shape[0],),500)\nw, b, cost\n\nplt.xlabel(\"epoch\")\nplt.ylabel(\"cost\")\nplt.plot(epoch_list,cost_list)\n\n`.trim();\nconst predictions = `\ndef predict(area,bedrooms,w,b):\n    scaled_X = sx.transform([[area, bedrooms]])[0]\n    scaled_price = w[0] * scaled_X[0] + w[1] * scaled_X[1] + b\n    return sy.inverse_transform([[scaled_price]])[0][0]\n\npredict(2600,4,w,b)\npredict(1000,2,w,b)\npredict(1500,3,w,b)\n`.trim();\nconst stochastics = `\nimport random\nrandom.randint(0,6)                              # randit gives random number between two numbers specified in the argument.\n\ndef stochastic_gradient_descent(X, y_true, epochs, learning_rate = 0.01):\n    number_of_features = X.shape[1]\n    w = np.ones(shape=(number_of_features)) \n    b = 0\n    total_samples = X.shape[0]\n    \n    cost_list = []\n    epoch_list = []\n    \n    for i in range(epochs):    \n        random_index = random.randint(0,total_samples-1) # random index from total samples\n        sample_x = X[random_index]\n        sample_y = y_true[random_index]\n        y_predicted = np.dot(w, sample_x.T) + b\n    \n        w_grad = -(2/total_samples)*(sample_x.T.dot(sample_y-y_predicted))\n        b_grad = -(2/total_samples)*(sample_y-y_predicted)\n        \n        w = w - learning_rate * w_grad\n        b = b - learning_rate * b_grad\n        cost = np.square(sample_y-y_predicted)\n        \n        if i%100==0: # at every 100th iteration record the cost and epoch value\n            cost_list.append(cost)\n            epoch_list.append(i)\n    return w, b, cost, cost_list, epoch_list\n\nw_sgd, b_sgd, cost_sgd, cost_list_sgd, epoch_list_sgd = SGD(scaled_X,scaled_y.reshape(scaled_y.shape[0],),10000)\nw_sgd, b_sgd, cost_sgd\n\nw , b \nplt.xlabel(\"epoch\")\nplt.ylabel(\"cost\")\nplt.plot(epoch_list_sgd,cost_list_sgd)\n\npredict(2600,4,w_sgd, b_sgd) \npredict(1000,2,w_sgd, b_sgd)\npredict(1500,3,w_sgd, b_sgd)\n`.trim(); // const pipes = ``.trim();\n\nclass Stochastic extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Implementation of stochastic and batch grandient descent in python.\"), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"We will use home prices data set to implement batch and stochastic gradient descent in python. Batch gradient descent uses \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"all\"), \" training samples in forward pass to calculate cumulitive error and than we adjust weights using derivaties. In stochastic GD, we \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"randomly pick one\"), \" training sample, perform forward pass, compute the error and immidiately adjust weights.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"Preprocessing/ Scaling: \"), \"Since our columns are on different sacle it is important to perform scaling on them.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: childsFile,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"We should convert target column (price) into one dimensional array. It has become 2D due to scaling that we did above but now we should change to 1D\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: Neural,\n      alt: \"Theata\",\n      className: \"responsive2\",\n      style: redesign,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"Now implement mini batch gradient descent. \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"numpy array with 1 row and columns equal to number of features. In our case number_of_features = 2 (area, bedroom).\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: batch,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, \"Lets do some predictions now. \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"Here w1 = w[0] , w2 = w[1], w3 = w[2] and bias is b.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"Equation for price is w1*area + w2*bedrooms + w3*age + bias.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, \"scaled_X[0] is area.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, \"scaled_X[1] is bedrooms.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, \"scaled_X[2] is age.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"Once we get price prediction we need to to rescal it back to original value also since it returns 2D array, to get single value we need to do value[0][0].\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: predictions,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, \"Stochastic Gradient Descent Implementation\"), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, \"Stochastic GD will use randomly picked single training sample to calculate error and using this error we backpropage to adjust weights.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: stochastics,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, \"Compare this with weights and bias that we got using gradient descent. They both of quite similar.\")))));\n  }\n\n}\n\nexport default withStyles(styles)(Stochastic);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjs/deepAngularjs/stochastic.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Neural","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","childsFile","trim","batch","predictions","stochastics","Stochastic","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Neural from '../../../assets/AI/hp.jpg'\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst childsFile = `\nimport pandas as pd\nimport numpy as np\nfrom sklearn import preprocessing\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n\ndf = pd.read_csv(\"homeprices_banglore.csv\")\n\nsx = preprocessing.MinMaxScaler()\nsy = preprocessing.MinMaxScaler()\n\nscaled_X = sx.fit_transform(df.drop('price',axis='columns'))\nscaled_y = sy.fit_transform(df['price'].values.reshape(df.shape[0],1))\n\nscaled_y.reshape(20,)\n`.trim();\n\nconst batch = `\ndef batch_gradient_descent(X, y_true, epochs, learning_rate = 0.01):\n    number_of_features = X.shape[1]\n    w = np.ones(shape=(number_of_features)) \n    b = 0\n    total_samples = X.shape[0]                                                  # number of rows in X\n    cost_list = []\n    epoch_list = []\n    \n    for i in range(epochs):        \n        y_predicted = np.dot(w, X.T) + b\n\n        w_grad = -(2/total_samples)*(X.T.dot(y_true-y_predicted))\n        b_grad = -(2/total_samples)*np.sum(y_true-y_predicted)\n        \n        w = w - learning_rate * w_grad\n        b = b - learning_rate * b_grad\n        \n        cost = np.mean(np.square(y_true-y_predicted))                          # MSE (Mean Squared Error)\n        \n        if i%10==0:\n            cost_list.append(cost)\n            epoch_list.append(i)\n    return w, b, cost, cost_list, epoch_list\n\nw, b, cost, cost_list, epoch_list = batch_gradient_descent(scaled_X,scaled_y.reshape(scaled_y.shape[0],),500)\nw, b, cost\n\nplt.xlabel(\"epoch\")\nplt.ylabel(\"cost\")\nplt.plot(epoch_list,cost_list)\n\n`.trim();\n\nconst predictions = `\ndef predict(area,bedrooms,w,b):\n    scaled_X = sx.transform([[area, bedrooms]])[0]\n    scaled_price = w[0] * scaled_X[0] + w[1] * scaled_X[1] + b\n    return sy.inverse_transform([[scaled_price]])[0][0]\n\npredict(2600,4,w,b)\npredict(1000,2,w,b)\npredict(1500,3,w,b)\n`.trim();\n\nconst stochastics = `\nimport random\nrandom.randint(0,6)                              # randit gives random number between two numbers specified in the argument.\n\ndef stochastic_gradient_descent(X, y_true, epochs, learning_rate = 0.01):\n    number_of_features = X.shape[1]\n    w = np.ones(shape=(number_of_features)) \n    b = 0\n    total_samples = X.shape[0]\n    \n    cost_list = []\n    epoch_list = []\n    \n    for i in range(epochs):    \n        random_index = random.randint(0,total_samples-1) # random index from total samples\n        sample_x = X[random_index]\n        sample_y = y_true[random_index]\n        y_predicted = np.dot(w, sample_x.T) + b\n    \n        w_grad = -(2/total_samples)*(sample_x.T.dot(sample_y-y_predicted))\n        b_grad = -(2/total_samples)*(sample_y-y_predicted)\n        \n        w = w - learning_rate * w_grad\n        b = b - learning_rate * b_grad\n        cost = np.square(sample_y-y_predicted)\n        \n        if i%100==0: # at every 100th iteration record the cost and epoch value\n            cost_list.append(cost)\n            epoch_list.append(i)\n    return w, b, cost, cost_list, epoch_list\n\nw_sgd, b_sgd, cost_sgd, cost_list_sgd, epoch_list_sgd = SGD(scaled_X,scaled_y.reshape(scaled_y.shape[0],),10000)\nw_sgd, b_sgd, cost_sgd\n\nw , b \nplt.xlabel(\"epoch\")\nplt.ylabel(\"cost\")\nplt.plot(epoch_list_sgd,cost_list_sgd)\n\npredict(2600,4,w_sgd, b_sgd) \npredict(1000,2,w_sgd, b_sgd)\npredict(1500,3,w_sgd, b_sgd)\n`.trim();\n\n// const pipes = ``.trim();\n\n\n\nclass Stochastic extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Implementation of stochastic and batch grandient descent in python.</h3>\n\n              <i>We will use home prices data set to implement batch and stochastic gradient descent in\n                python. Batch gradient descent uses <b>all</b> training samples in forward pass to calculate cumulitive\n                error and than we adjust weights using derivaties. In stochastic GD, we <b>randomly pick one</b> training\n                sample, perform forward pass, compute the error and immidiately adjust weights.</i>\n              <br />\n              <br />\n              <ul>\n                <li><b>Preprocessing/ Scaling: </b>Since our columns are on different sacle it is important to perform scaling on them.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={childsFile}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>We should convert target column (price) into one dimensional array. It has become 2D due to\n                scaling that we did above but now we should change to 1D</i>\n              <br />\n              <img src={Neural} alt=\"Theata\" className=\"responsive2\" style={redesign} />\n\n              <h3>Now implement mini batch gradient descent. </h3>\n              <ul>\n                <li>numpy array with 1 row and columns equal to number of features. In\n                  our case number_of_features = 2 (area, bedroom).</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={batch}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Lets do some predictions now. </h3>\n              <ul>\n                <li>Here w1 = w[0] , w2 = w[1], w3 = w[2] and bias is b.</li>\n                <li>Equation for price is w1*area + w2*bedrooms + w3*age + bias.</li>\n                <li>scaled_X[0] is area.</li>\n                <li>scaled_X[1] is bedrooms.</li>\n                <li>scaled_X[2] is age.</li>\n                <li>Once we get price prediction we need to to rescal it back to original value also since it returns 2D array, to get single value we need to do value[0][0].</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={predictions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Stochastic Gradient Descent Implementation</h3>\n              <i>Stochastic GD will use randomly picked single training sample to calculate error and using this error we backpropage to adjust weights.</i>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={stochastics}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>Compare this with weights and bias that we got using gradient descent. They both of quite similar.</i>\n              {/* <br />\n\n              <h3></h3>\n              <div style={titles}>\n                <PrismCode\n                  code={childsFile}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div> */}\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\n\nexport default (withStyles(styles)(Stochastic));\n"]},"metadata":{},"sourceType":"module"}