{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import\"../../ReactJs/styles.css\";import Sidebar from\"../sidebar\";import PrismCode from\"../../ReactJs/prismCode\";var titles={backgroundColor:\"#F0F8FF\",padding:\"1px\",fontSize:\"16px\"};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var transition=\"\\ntransition('open => closed', [\\n  animate('500ms')\\n]),\".trim();var pipeFor=\"\\n//html\\n<p> Birthday is {{birthday | date}}</p>\\n<p> Birthday is {{birthday | date: 'dd/MM/yyyy'}}</p>\\n<p> Birthday is {{birthday | date: 'fullDate' | uppercase}} </p>\\n\\nexport class AppComponent {\\n  birthday = new Date(1987, 6, 18); \\n}\".trim();var purpose=\"\\n//html\\nTime: {{time | async}}\\n\\nexport class AppComponent {\\n  time = new Observable((observer) => {\\n    setInterval(() => observer.next(new Date().toString()), 2000);\\n  });\\n}\".trim();var typeFunc=\"\\n  template:\\n    '{{ $any(user).contacts.email }}'\\n    \\n    \\n  //The $any() cast function also works with this to allow access to undeclared members of the component.\\n     template:\\n     '{{ $any(this).contacts.email }}'\".trim();var assertionOpp=\"@Component({\\n    selector: 'my-component',\\n    template: '<span *ngIf=\\\"user\\\"> {{user.name}} contacted through {{contact!.email}} </span>'\\n  })\\n  class MyComponent {\\n    user?: User;\\n    contact?: Contact;\\n  \\n    setData(user: User, contact: Contact) {\\n      this.user = user;\\n      this.contact = contact;\\n    }\\n  }\".trim();var narrowing=\"\\n  @Component({\\n    selector: 'my-component',\\n    template: '<span *ngIf=\\\"user\\\"> {{user.contact.email}} </span>'\\n  })\\n  class MyComponent {\\n    user?: User;\\n  }\".trim();var multicasting=\"\\n  var source = Rx.Observable.from([1, 2, 3]);\\n  var subject = new Rx.Subject();\\n  var multicasted = source.multicast(subject);\\n  \\n  // These are, under the hood, 'subject.subscribe({ ...})':\\n  multicasted.subscribe({\\n    next: (v) => console.log('observerA: ' + v)\\n  });\\n  multicasted.subscribe({\\n    next: (v) => console.log('observerB: ' + v)\\n  });\".trim();var changeDetector=\"\\n  import { ChangeDetectionStrategy, Component } from '@angular/core';\\n  \\n@Component({\\n<button (click)='updateName()'>Update</button>\\n  Welcome {{userValue.firstName}} - {{userValue.lastName}}\\n  <div *ngFor=\\\"let str of myStrArr\\\">{{str}}</div>\\n  <p>onPush Stretgy</p>\\n<button (click)='onClick()'>onPush</button>\\n    ',\\n\\nchangeDetection:ChangeDetectionStrategy.OnPush\\n})\\n\\n  export class AppComponent {\\n    title = '3_change_detection';\\n    userValue:any;\\n    myStrArr:any[]=[];\\n  \\n    ngOnInit():void{\\n      this.userValue = {\\n        firstName:'Mukesh',\\n        lastName:'Singh'\\n      };\\n    }\\n  \\n    updateName(){\\n      this.userValue.firstName='Rakesh';\\n      console.log('default Stretgy')\\n    }\\n  \\n    onClick(){\\n      this.myStrArr.push('onPush Stretgy')\\n      console.log('onPush')\\n    }\\n  }\\n  \".trim();var dynamically=\"\\n<h1>Hello created dynamic</h1>\\n\\n//childs.ts\\nexport class ChildCompo {\\n  @Output() loaded: EventEmitter<null> = new EventEmitter<null>();\\n  @Output() destroyed: EventEmitter<null> = new EventEmitter<null>();\\n\\n  ngOnInit() {\\n    this.loaded.emit();\\n  }\\n\\n  ngOnDestroy() {\\n    this.destroyed.emit();\\n  }\\n}\\n\\n\\n//html\\n<ng-container>\\n  <button (click)=\\\"loadComponent()\\\">Click me to load component</button>\\n</ng-container>\\n<p>Hello loaded: {{ childLoaded }}</p>\\n<ng-template #template></ng-template>\\n\\n//app.component.ts\\nimport { Component, ViewChild, ViewContainerRef, ComponentFactoryResolver, ComponentRef } from '@angular/core';\\nimport { ChildCompo } from './child';\\n\\nexport class AppComponent {\\n  childLoaded: boolean = false;\\n  componentRef!: ComponentRef<ChildCompo>;\\n\\n  @ViewChild('template', { read: ViewContainerRef })\\n  viewTemplate!: ViewContainerRef;\\n\\n  constructor(private cfr: ComponentFactoryResolver) {}\\n\\n  loadComponent() {\\n    const componentFactory = this.cfr.resolveComponentFactory(ChildCompo);\\n    this.componentRef = this.viewTemplate.createComponent(componentFactory);\\n\\n    (this.componentRef.instance as any).loaded.subscribe(() => {\\n      this.childLoaded = true;\\n    });\\n  }\\n}\\n\".trim();var capitalize=\"\\n//html\\n<p>{{ \\\"hello\\\" | capital }}</p>\\n<p>{{ \\\"angular pipes are awesome\\\" | capital }}</p>\\n\\n\\nimport { Pipe, PipeTransform } from '@angular/core';\\n\\n@Pipe({\\n  name: 'capital',\\n})\\nexport class ChildComp implements PipeTransform {\\n  transform(value: string): string {\\n    if (!value) return '';\\n    return value\\n      .split(' ')\\n      .map((word) => {\\n        return word.charAt(0).toUpperCase() + word.slice(1);\\n      })\\n      .join(' ');\\n  }\\n}\\n\".trim();var NgModel=/*#__PURE__*/function(_Component){_inherits(NgModel,_Component);function NgModel(){_classCallCheck(this,NgModel);return _possibleConstructorReturn(this,_getPrototypeOf(NgModel).apply(this,arguments));}_createClass(NgModel,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"3. Can you explain the concept of scope hierarchy in Angular?\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"scopes are a way to organize and share data between components and directives. Each component or directive has its own scope, which is a JavaScript object that contains the properties and methods of that component . Scopes can be nested inside one another, forming a hierarchy of scopes.\",\" \"),React.createElement(\"br\",null),React.createElement(\"li\",null,\" \",\"The scope hierarchy in Angular is important because it determines how data is shared between components and directives.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. Why we should use Bazel for Angular builds\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"The initial build time with Bazel will be comparable to the traditional JavaScript tooling. the difference is that the time will not grow exponentially when our application\\u2019s size increases. With Bazel most of the time the build time will stay constant.\"),React.createElement(\"li\",null,\"Bazel rebuilds only the packages which have changed and nothing else.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"7. What is State function\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"A state function is a type of function that is used to manage the state of a component or application. The state function is a pure function that takes in an input state object and returns a new output state object based on the input and any actions that have been dispatched.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"The state function is typically use state management library such as NgRx or Redux.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"The state function is typically defined as a reducer function that takes in the current state and an action object, and returns a new state object based on the action.\",\" \")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"8. What is transition function\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"The animation transition function is used to specify the changes that occur between one state and another over a period of time. It accepts two arguments:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"First argument accepts an expression that defines the direction between two transition states.\"),React.createElement(\"li\",null,\"Second argument accepts an animate() function.\"))),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:transition,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"9. Pipes\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"A pipe takes in data as input and transforms it to a desired output.\"),React.createElement(\"li\",null,\"Pipes used to transform the data before displaying it in a browser. Even we can create custom pipes.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Parameterize Pipes:\"),\" we can pass any number of Parameters to the pipe using colon (:).\"),React.createElement(\"li\",null,\"Mutiple Pipes\"),React.createElement(\"li\",null,\"Pipes with string\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"chain pipes: \"),\"To chain pipes, you simply add additional pipe operators (|) followed by the name of the next pipe.\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Ex. \"),\"DatePipe, UpperCasePipe, LowerCasePipe, CurrencyPipe, and PercentPipe.\",React.createElement(\"br\",null),\"Let us take a pipe to transform a component's birthday property into a human-friendly date using date pipe.\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:pipeFor,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Write a pipe in Angular that capitalizes the first letter of each word in a string.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:capitalize,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"12. Pure and Impure Pipes\"),React.createElement(\"table\",null,React.createElement(\"tr\",null,React.createElement(\"th\",null,\"Pure Pipe\"),React.createElement(\"th\",null,\"Impure Pipe\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"Pure pipes are called only when Angular detects a change in the input data.\"),React.createElement(\"td\",null,\"are called on every change detection cycle, even if the input data has not changed.\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"A pure pipe should always return the same output for the same input, and it should not have any side effects.\"),React.createElement(\"td\",null,\"Impure pipes can have side effects, and they should be used with caution, as they can have a performance impact on the application.\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"Pure pipes are designed to be used with immutable data, such as strings, numbers, and objects that are not modified after creation.\"),React.createElement(\"td\",null,\"Impure pipes are designed to be used with mutable data, such as arrays and objects that can be modified after creation.\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,React.createElement(\"b\",null,\"Ex. \"),\"UpperCasePipe, LowerCasePipe, JsonPipe\"),React.createElement(\"td\",null,React.createElement(\"b\",null,\"Ex. \"),\"AsyncPipe, DatePipe\"))),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"13. What is the purpose of async pipe\"),\"Async pipe is used to handle asynchronous data and subscriptions in templates. The async pipe subscribes to an Observable or a Promise and returns the latest value emitted by the Observable or resolved by the Promise.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"Let's take a time observable which continuously updates the view for every 2 seconds with the current time.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:purpose,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"14. Change Detection:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Means updating the DOM every time the data is changed.\"),React.createElement(\"li\",null,\"When modifying any of the models, Angular detects the changes and updates the views immediately. The purpose of this mechanism is to ensure that the underlying views are always synchronized with their corresponding models.\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Angular provides two strategies for Change Detection:\"),React.createElement(\"br\",null),React.createElement(\"b\",null,\"1. default strategy:\"),React.createElement(\"br\",null),\"Every time you put or edit any data, Angular will run the change detector to update the DOM.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"2. onPush strategy:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Angular will only run change detector when new reference is passed to \",React.createElement(\"b\",null,\"@Input\"),\" data.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"With onPush, the component depends only on its inputs and covers immutability, the change detection strategy will be activated when:\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"The input reference changes;\"),React.createElement(\"li\",null,\"An event originating from the member or one of his children;\"),React.createElement(\"li\",null,\"Execute change detection explicitly\",\" \",React.createElement(\"b\",null,\"(componentRef.markForCheck ());\")),React.createElement(\"li\",null,\"Use the async pipe in the view.\")))),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:changeDetector,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"In the onPush strategy, Angular only performs the change detector when a new reference to the data of @Input() is passed.\")),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Change Detection Mechanism-moves only forward and never looks back, starting from the root component to the last. Each component points to a child, but the child does not point to a parent. One-way flow eliminates the need for a\",\" \",React.createElement(\"b\",null,\"$digest loop\"),\".\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"15. How many Change Detectors can there be in the whole application?\"),\"Each component has its own ChangeDetector. All Change Detectors are inherited from AbstractChangeDetector.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"16. Dynamically Load Component\"),\"Can dynamically load components at runtime using the ComponentFactoryResolver class. Dynamically loading components can be useful when you need to load a component based on user input or need to load a component conditionally based on some criteria.\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:dynamically,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),\"Dynamic component loading is a powerful feature of Angular that allows developers to load components on demand and create more flexible and dynamic user interfaces.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"17. What is ng-template in Angular?\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"ng-template:\"),\" Is an Angular element that is used for rendering HTML in a template. However, it is not rendered directly on DOM. If you include an ng-template tag in a template, the tag and the content inside it will be replaced by comment upon render.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"ng-container: \"),\"Allows us to create a section in a template without introducing a new HTML element. The ng-container does not render in the DOM, but content inside it is rendered.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"18. What is the purpose of any type cast function\"),\"You can disable binding expression type checking using $any() type cast function.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:typeFunc,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"19. What is Non null type assertion operator\"),\"You can use the non-null type assertion operator to suppress the Object is possibly 'undefined' error.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"In the following example, the user and contact properties are always set together, implying that contact is always non-null if user is non-null. The error is suppressed in the example by using contact!.email.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:assertionOpp,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"20. What is type narrowing\"),\"Dynamic checks and predicates gives us information about values at run-time. type narrowing is the process of reflecting this information in the type-checker at compile time.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:narrowing,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"21. What is the purpose of common module\"),\"The commonly-needed services, pipes, and directives provided by @angular/common module.\",React.createElement(\"br\",null),React.createElement(\"h3\",null,\"22. What is angular animation\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Angular animations are based on CSS web transition functionality, so anything that can be styled or transformed in CSS can be animated the same way in Angular.\"),React.createElement(\"li\",null,\"Angular animations allow you to: Set animation timings, styles, keyframes, and transitions.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"23. What is multicasting\"),\"Multi-casting is the process of broadcasting to a list of multiple subscribers in a single execution.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:multicasting,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"24. Angular Module Loading: A module can be loaded eagerly, lazily, preloaded.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"1. Eager loading:\"),\" All of the modules and functions are loaded on application startup. the root module is always eagerly loaded.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"2. Lazy loading:\"),\" is loading modules on demand.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"3. Preloading:\"),\" is loading modules in background just after app starts.\"),React.createElement(\"li\",null,\"To configure Preloading features modules, first we configure them for lazy loading then, using angular in-built PreloadAllModules strategy, we enable to load all lazy loading into Preloading modules.\"),React.createElement(\"li\",null,\"Using PreloadAllModules strategy, all modules configured by loadChildren property will be preloaded. The modules configured by loadChildren property will be either lazily loaded or preloaded but not both. To preload only selective modules, we need to use custom preloading strategy.\"),React.createElement(\"li\",null,\"We can create custom preloading strategy. For this we need to create a service by implementing Angular PreloadingStrategy interface and override its preload method and then configure this service with PreloadingStrategy property in routing module. To select a module for custom preloading we need to use dataproperty in route configuration, configured as data 'preload: true' for selective feature module preloading.\"))))));}}]);return NgModel;}(Component);export default withStyles(styles)(NgModel);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/deepAngularjs/ngModel.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","transition","trim","pipeFor","purpose","typeFunc","assertionOpp","narrowing","multicasting","changeDetector","dynamically","capitalize","NgModel","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst transition = `\ntransition('open => closed', [\n  animate('500ms')\n]),`.trim();\n\nconst pipeFor = `\n//html\n<p> Birthday is {{birthday | date}}</p>\n<p> Birthday is {{birthday | date: 'dd/MM/yyyy'}}</p>\n<p> Birthday is {{birthday | date: 'fullDate' | uppercase}} </p>\n\nexport class AppComponent {\n  birthday = new Date(1987, 6, 18); \n}`.trim();\n\nconst purpose = `\n//html\nTime: {{time | async}}\n\nexport class AppComponent {\n  time = new Observable((observer) => {\n    setInterval(() => observer.next(new Date().toString()), 2000);\n  });\n}`.trim();\n\nconst typeFunc = `\n  template:\n    '{{ $any(user).contacts.email }}'\n    \n    \n  //The $any() cast function also works with this to allow access to undeclared members of the component.\n     template:\n     '{{ $any(this).contacts.email }}'`.trim();\n\nconst assertionOpp = `@Component({\n    selector: 'my-component',\n    template: '<span *ngIf=\"user\"> {{user.name}} contacted through {{contact!.email}} </span>'\n  })\n  class MyComponent {\n    user?: User;\n    contact?: Contact;\n  \n    setData(user: User, contact: Contact) {\n      this.user = user;\n      this.contact = contact;\n    }\n  }`.trim();\n\nconst narrowing = `\n  @Component({\n    selector: 'my-component',\n    template: '<span *ngIf=\"user\"> {{user.contact.email}} </span>'\n  })\n  class MyComponent {\n    user?: User;\n  }`.trim();\n\nconst multicasting = `\n  var source = Rx.Observable.from([1, 2, 3]);\n  var subject = new Rx.Subject();\n  var multicasted = source.multicast(subject);\n  \n  // These are, under the hood, 'subject.subscribe({ ...})':\n  multicasted.subscribe({\n    next: (v) => console.log('observerA: ' + v)\n  });\n  multicasted.subscribe({\n    next: (v) => console.log('observerB: ' + v)\n  });`.trim();\n\nconst changeDetector = `\n  import { ChangeDetectionStrategy, Component } from '@angular/core';\n  \n@Component({\n<button (click)='updateName()'>Update</button>\n  Welcome {{userValue.firstName}} - {{userValue.lastName}}\n  <div *ngFor=\"let str of myStrArr\">{{str}}</div>\n  <p>onPush Stretgy</p>\n<button (click)='onClick()'>onPush</button>\n    ',\n\nchangeDetection:ChangeDetectionStrategy.OnPush\n})\n\n  export class AppComponent {\n    title = '3_change_detection';\n    userValue:any;\n    myStrArr:any[]=[];\n  \n    ngOnInit():void{\n      this.userValue = {\n        firstName:'Mukesh',\n        lastName:'Singh'\n      };\n    }\n  \n    updateName(){\n      this.userValue.firstName='Rakesh';\n      console.log('default Stretgy')\n    }\n  \n    onClick(){\n      this.myStrArr.push('onPush Stretgy')\n      console.log('onPush')\n    }\n  }\n  `.trim();\n\nconst dynamically = `\n<h1>Hello created dynamic</h1>\n\n//childs.ts\nexport class ChildCompo {\n  @Output() loaded: EventEmitter<null> = new EventEmitter<null>();\n  @Output() destroyed: EventEmitter<null> = new EventEmitter<null>();\n\n  ngOnInit() {\n    this.loaded.emit();\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit();\n  }\n}\n\n\n//html\n<ng-container>\n  <button (click)=\"loadComponent()\">Click me to load component</button>\n</ng-container>\n<p>Hello loaded: {{ childLoaded }}</p>\n<ng-template #template></ng-template>\n\n//app.component.ts\nimport { Component, ViewChild, ViewContainerRef, ComponentFactoryResolver, ComponentRef } from '@angular/core';\nimport { ChildCompo } from './child';\n\nexport class AppComponent {\n  childLoaded: boolean = false;\n  componentRef!: ComponentRef<ChildCompo>;\n\n  @ViewChild('template', { read: ViewContainerRef })\n  viewTemplate!: ViewContainerRef;\n\n  constructor(private cfr: ComponentFactoryResolver) {}\n\n  loadComponent() {\n    const componentFactory = this.cfr.resolveComponentFactory(ChildCompo);\n    this.componentRef = this.viewTemplate.createComponent(componentFactory);\n\n    (this.componentRef.instance as any).loaded.subscribe(() => {\n      this.childLoaded = true;\n    });\n  }\n}\n`.trim();\n\nconst capitalize = `\n//html\n<p>{{ \"hello\" | capital }}</p>\n<p>{{ \"angular pipes are awesome\" | capital }}</p>\n\n\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'capital',\n})\nexport class ChildComp implements PipeTransform {\n  transform(value: string): string {\n    if (!value) return '';\n    return value\n      .split(' ')\n      .map((word) => {\n        return word.charAt(0).toUpperCase() + word.slice(1);\n      })\n      .join(' ');\n  }\n}\n`.trim();\n\nclass NgModel extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>\n                3. Can you explain the concept of scope hierarchy in Angular?\n              </h3>\n              <ul>\n                <li>\n                  scopes are a way to organize and share data between components\n                  and directives. Each component or directive has its own scope,\n                  which is a JavaScript object that contains the properties and\n                  methods of that component . Scopes can be nested inside one\n                  another, forming a hierarchy of scopes.{\" \"}\n                </li>\n\n                <br />\n                <li>\n                  {\" \"}\n                  The scope hierarchy in Angular is important because it\n                  determines how data is shared between components and\n                  directives.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>6. Why we should use Bazel for Angular builds</h3>\n              <ul>\n                <li>\n                  The initial build time with Bazel will be comparable to the\n                  traditional JavaScript tooling. the difference is that the\n                  time will not grow exponentially when our application’s size\n                  increases. With Bazel most of the time the build time will\n                  stay constant.\n                </li>\n                <li>\n                  Bazel rebuilds only the packages which have changed and\n                  nothing else.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>7. What is State function</h3>\n              <ul>\n                <li>\n                  A state function is a type of function that is used to manage\n                  the state of a component or application. The state function is\n                  a pure function that takes in an input state object and\n                  returns a new output state object based on the input and any\n                  actions that have been dispatched.\n                </li>\n                <br />\n                <li>\n                  The state function is typically use state management library\n                  such as NgRx or Redux.\n                </li>\n                <br />\n                <li>\n                  The state function is typically defined as a reducer function\n                  that takes in the current state and an action object, and\n                  returns a new state object based on the action.{\" \"}\n                </li>\n              </ul>\n              <br />\n              <h3>8. What is transition function</h3>\n              <ul>\n                <li>\n                  The animation transition function is used to specify the\n                  changes that occur between one state and another over a period\n                  of time. It accepts two arguments:\n                </li>\n                <ul>\n                  <li>\n                    First argument accepts an expression that defines the\n                    direction between two transition states.\n                  </li>\n                  <li>Second argument accepts an animate() function.</li>\n                </ul>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={transition}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>9. Pipes</h3>\n              <ul>\n                <li>\n                  A pipe takes in data as input and transforms it to a desired\n                  output.\n                </li>\n\n                <li>\n                  Pipes used to transform the data before displaying it in a\n                  browser. Even we can create custom pipes.\n                </li>\n                <br />\n                <li>\n                  <b>Parameterize Pipes:</b> we can pass any number of\n                  Parameters to the pipe using colon (:).\n                </li>\n                <li>Mutiple Pipes</li>\n                <li>Pipes with string</li>\n                <br />\n                <li>\n                  <b>chain pipes: </b>To chain pipes, you simply add additional\n                  pipe operators (|) followed by the name of the next pipe.\n                </li>\n              </ul>\n              <br />\n              <b>Ex. </b>DatePipe, UpperCasePipe, LowerCasePipe, CurrencyPipe,\n              and PercentPipe.\n              <br />\n              Let us take a pipe to transform a component's birthday property\n              into a human-friendly date using date pipe.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={pipeFor}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>\n                Write a pipe in Angular that capitalizes the first letter of\n                each word in a string.\n              </h3>\n              <div style={titles}>\n                <PrismCode\n                  code={capitalize}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>12. Pure and Impure Pipes</h3>\n              <table>\n                <tr>\n                  <th>Pure Pipe</th>\n                  <th>Impure Pipe</th>\n                </tr>\n                <tr>\n                  <td>\n                    Pure pipes are called only when Angular detects a change in\n                    the input data.\n                  </td>\n                  <td>\n                    are called on every change detection cycle, even if the\n                    input data has not changed.\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    A pure pipe should always return the same output for the\n                    same input, and it should not have any side effects.\n                  </td>\n                  <td>\n                    Impure pipes can have side effects, and they should be used\n                    with caution, as they can have a performance impact on the\n                    application.\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    Pure pipes are designed to be used with immutable data, such\n                    as strings, numbers, and objects that are not modified after\n                    creation.\n                  </td>\n                  <td>\n                    Impure pipes are designed to be used with mutable data, such\n                    as arrays and objects that can be modified after creation.\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <b>Ex. </b>UpperCasePipe, LowerCasePipe, JsonPipe\n                  </td>\n                  <td>\n                    <b>Ex. </b>AsyncPipe, DatePipe\n                  </td>\n                </tr>\n              </table>\n              <br />\n              <br />\n              <h3>13. What is the purpose of async pipe</h3>\n              Async pipe is used to handle asynchronous data and subscriptions\n              in templates. The async pipe subscribes to an Observable or a\n              Promise and returns the latest value emitted by the Observable or\n              resolved by the Promise.\n              <br />\n              <br />\n              Let's take a time observable which continuously updates the view\n              for every 2 seconds with the current time.\n              <div style={titles}>\n                <PrismCode\n                  code={purpose}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>14. Change Detection:</h3>\n              <ul>\n                <li>Means updating the DOM every time the data is changed.</li>\n                <li>\n                  When modifying any of the models, Angular detects the changes\n                  and updates the views immediately. The purpose of this\n                  mechanism is to ensure that the underlying views are always\n                  synchronized with their corresponding models.\n                </li>\n              </ul>\n              <br />\n              <b>Angular provides two strategies for Change Detection:</b>\n              <br />\n              <b>1. default strategy:</b>\n              <br />\n              Every time you put or edit any data, Angular will run the change\n              detector to update the DOM.\n              <br />\n              <br />\n              <b>2. onPush strategy:</b>\n              <ul>\n                <li>\n                  Angular will only run change detector when new reference is\n                  passed to <b>@Input</b> data.\n                </li>\n                <br />\n                <li>\n                  With onPush, the component depends only on its inputs and\n                  covers immutability, the change detection strategy will be\n                  activated when:\n                  <ul>\n                    <li>The input reference changes;</li>\n                    <li>\n                      An event originating from the member or one of his\n                      children;\n                    </li>\n                    <li>\n                      Execute change detection explicitly{\" \"}\n                      <b>(componentRef.markForCheck ());</b>\n                    </li>\n                    <li>Use the async pipe in the view.</li>\n                  </ul>\n                </li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={changeDetector}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <ul>\n                <li>\n                  In the onPush strategy, Angular only performs the change\n                  detector when a new reference to the data of @Input() is\n                  passed.\n                </li>\n              </ul>\n              <ul>\n                <li>\n                  Change Detection Mechanism-moves only forward and never looks\n                  back, starting from the root component to the last. Each\n                  component points to a child, but the child does not point to a\n                  parent. One-way flow eliminates the need for a{\" \"}\n                  <b>$digest loop</b>.\n                </li>\n              </ul>\n              <br />\n              <h3>\n                15. How many Change Detectors can there be in the whole\n                application?\n              </h3>\n              Each component has its own ChangeDetector. All Change Detectors\n              are inherited from AbstractChangeDetector.\n              <br />\n              <br />\n              <h3>16. Dynamically Load Component</h3>\n              Can dynamically load components at runtime using the\n              ComponentFactoryResolver class. Dynamically loading components can\n              be useful when you need to load a component based on user input or\n              need to load a component conditionally based on some criteria.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={dynamically}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              Dynamic component loading is a powerful feature of Angular that\n              allows developers to load components on demand and create more\n              flexible and dynamic user interfaces.\n              <br />\n              <br />\n              <h3>17. What is ng-template in Angular?</h3>\n              <ul>\n                <li>\n                  <b>ng-template:</b> Is an Angular element that is used for\n                  rendering HTML in a template. However, it is not rendered\n                  directly on DOM. If you include an ng-template tag in a\n                  template, the tag and the content inside it will be replaced\n                  by comment upon render.\n                </li>\n                <br />\n                <li>\n                  <b>ng-container: </b>Allows us to create a section in a\n                  template without introducing a new HTML element. The\n                  ng-container does not render in the DOM, but content inside it\n                  is rendered.\n                </li>\n              </ul>\n              <br />\n              <h3>18. What is the purpose of any type cast function</h3>\n              You can disable binding expression type checking using $any() type\n              cast function.\n              <div style={titles}>\n                <PrismCode\n                  code={typeFunc}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>19. What is Non null type assertion operator</h3>\n              You can use the non-null type assertion operator to suppress the\n              Object is possibly 'undefined' error.\n              <br />\n              <br />\n              In the following example, the user and contact properties are\n              always set together, implying that contact is always non-null if\n              user is non-null. The error is suppressed in the example by using\n              contact!.email.\n              <div style={titles}>\n                <PrismCode\n                  code={assertionOpp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>20. What is type narrowing</h3>\n              Dynamic checks and predicates gives us information about values at\n              run-time. type narrowing is the process of reflecting this\n              information in the type-checker at compile time.\n              <div style={titles}>\n                <PrismCode\n                  code={narrowing}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>21. What is the purpose of common module</h3>\n              The commonly-needed services, pipes, and directives provided by\n              @angular/common module.\n              <br />\n              <h3>22. What is angular animation</h3>\n              <ul>\n                <li>\n                  Angular animations are based on CSS web transition\n                  functionality, so anything that can be styled or transformed\n                  in CSS can be animated the same way in Angular.\n                </li>\n                <li>\n                  Angular animations allow you to: Set animation timings,\n                  styles, keyframes, and transitions.\n                </li>\n              </ul>\n              <br />\n              <h3>23. What is multicasting</h3>\n              Multi-casting is the process of broadcasting to a list of multiple\n              subscribers in a single execution.\n              <div style={titles}>\n                <PrismCode\n                  code={multicasting}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>\n                24. Angular Module Loading: A module can be loaded eagerly,\n                lazily, preloaded.\n              </h3>\n              <ul>\n                <li>\n                  <b>1. Eager loading:</b> All of the modules and functions are\n                  loaded on application startup. the root module is always\n                  eagerly loaded.\n                </li>\n                <li>\n                  <b>2. Lazy loading:</b> is loading modules on demand.\n                </li>\n                <br />\n                <li>\n                  <b>3. Preloading:</b> is loading modules in background just\n                  after app starts.\n                </li>\n                <li>\n                  To configure Preloading features modules, first we configure\n                  them for lazy loading then, using angular in-built\n                  PreloadAllModules strategy, we enable to load all lazy loading\n                  into Preloading modules.\n                </li>\n                <li>\n                  Using PreloadAllModules strategy, all modules configured by\n                  loadChildren property will be preloaded. The modules\n                  configured by loadChildren property will be either lazily\n                  loaded or preloaded but not both. To preload only selective\n                  modules, we need to use custom preloading strategy.\n                </li>\n                <li>\n                  We can create custom preloading strategy. For this we need to\n                  create a service by implementing Angular PreloadingStrategy\n                  interface and override its preload method and then configure\n                  this service with PreloadingStrategy property in routing\n                  module. To select a module for custom preloading we need to\n                  use dataproperty in route configuration, configured as data\n                  'preload: true' for selective feature module preloading.\n                </li>\n              </ul>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(NgModel);\n"]},"metadata":{},"sourceType":"module"}