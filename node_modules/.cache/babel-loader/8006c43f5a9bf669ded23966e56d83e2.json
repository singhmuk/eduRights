{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/mern/projects/googleMap.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst App = `\n//.env\nREACT_APP_GOOGLE_MAPS_API_KEY = AIzaSyACmVis1yWx1wCi2AX9V0lu3JT_PGXT1qI\n\n\n//App.js\nimport React from \"react\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from \"@reach/combobox\";\nimport { formatRelative } from \"date-fns\";\n\nimport \"@reach/combobox/styles.css\";\nimport mapStyles from \"./mapStyles\";\n\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  height: \"100vh\",\n  width: \"100vw\",\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true,\n};\nconst center = {\n  lat: 43.6532,\n  lng: -79.3832,\n};\n\nexport default function App() {\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: 'AIzaSyACmVis1yWx1wCi2AX9V0lu3JT_PGXT1qI',\n    libraries,\n  });\n  const [markers, setMarkers] = React.useState([]);\n  const [selected, setSelected] = React.useState(null);\n\n  const onMapClick = React.useCallback((e) => {\n    setMarkers((current) => [\n      ...current,\n      {\n        lat: e.latLng.lat(),\n        lng: e.latLng.lng(),\n        time: new Date(),\n      },\n    ]);\n  }, []);\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  const panTo = React.useCallback(({ lat, lng }) => {\n    mapRef.current.panTo({ lat, lng });\n    mapRef.current.setZoom(14);\n  }, []);\n\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n\n  return (\n    <div>\n      <h1>\n        Bears{\" \"}\n        <span role=\"img\" aria-label=\"tent\">\n          ‚õ∫Ô∏è\n        </span>\n      </h1>\n\n      <Locate panTo={panTo} />\n      <Search panTo={panTo} />\n\n      <GoogleMap\n        id=\"map\"\n        mapContainerStyle={mapContainerStyle}\n        zoom={4}\n        center={center}\n        options={options}\n        onClick={onMapClick}\n        onLoad={onMapLoad}\n      >\n        {markers.map((marker) => (\n          <Marker\n            key={'$'{ marker.lat }-'$'{ marker.lng } }\n            position={{ lat: marker.lat, lng: marker.lng }}\n            onClick={() => {\n              setSelected(marker);\n            }}\n            icon={{\n              url: '/ bear.svg',\n              origin: new window.google.maps.Point(0, 0),\n              anchor: new window.google.maps.Point(15, 15),\n              scaledSize: new window.google.maps.Size(30, 30),\n            }}\n          />\n        ))}\n\n        {selected ? (\n          <InfoWindow\n            position={{ lat: selected.lat, lng: selected.lng }}\n            onCloseClick={() => {\n              setSelected(null);\n            }}\n          >\n            <div>\n              <h2>\n                <span role=\"img\" aria-label=\"bear\">\n                  üêª\n                </span>{\" \"}\n                Alert\n              </h2>\n              <p>Spotted {formatRelative(selected.time, new Date())}</p>\n            </div>\n          </InfoWindow>\n        ) : null}\n      </GoogleMap>\n    </div>\n  );\n}\n\nfunction Locate({ panTo }) {\n  return (\n    <button\n      className=\"locate\"\n      onClick={() => {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            panTo({\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            });\n          },\n          () => null\n        );\n      }}\n    >\n      <img src=\"/compass.svg\" alt=\"compass\" />\n    </button>\n  );\n}\n\nfunction Search({ panTo }) {\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: { lat: () => 43.6532, lng: () => -79.3832 },\n      radius: 100 * 1000,\n    },\n  });\n\n  // https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service#AutocompletionRequest\n\n  const handleInput = (e) => {\n    setValue(e.target.value);\n  };\n\n  const handleSelect = async (address) => {\n    setValue(address, false);\n    clearSuggestions();\n\n    try {\n      const results = await getGeocode({ address });\n      const { lat, lng } = await getLatLng(results[0]);\n      panTo({ lat, lng });\n      console.log(\"lng\", lng);\n    } catch (error) {\n      console.log(\"üò± Error: \", error);\n    }\n  };\n\n  return (\n    <div className=\"search\">\n      <Combobox onSelect={handleSelect}>\n        <ComboboxInput\n          value={value}\n          onChange={handleInput}\n          disabled={!ready}\n          placeholder=\"Search your location\"\n        />\n        <ComboboxPopover>\n          <ComboboxList>\n            {status === \"OK\" &&\n              data.map(({ id, description }) => (\n                <ComboboxOption key={id} value={description} />\n              ))}\n          </ComboboxList>\n        </ComboboxPopover>\n      </Combobox>\n    </div>\n  );\n}\n\n`.trim();\nconst mainIndex = `\nh1 {\n  position: absolute;\n  top: 1rem;\n  left: 1rem;\n  color: #281414;\n  z-index: 10;\n  margin: 0;\n  padding: 0;\n}\n\n.search {\n  position: absolute;\n  top: 1rem;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 100%;\n  max-width: 400px;\n  z-index: 10;\n}\n\n.search input {\n  padding: 0.5rem;\n  font-size: 1.5rem;\n  width: 100%;\n}\n\n.locate {\n  position: absolute;\n  top: 1rem;\n  right: 1rem;\n  background: none;\n  border: none;\n  z-index: 10;\n}\n.locate img {\n  width: 30px;\n  cursor: pointer;\n}\n`.trim();\nconst mapStyles = `\nexport default [\n  {\n    featureType: \"all\",\n    elementType: \"geometry.fill\",\n    stylers: [\n      {\n        weight: \"2.00\",\n      },\n    ],\n  },\n  {\n    featureType: \"all\",\n    elementType: \"geometry.stroke\",\n    stylers: [\n      {\n        color: \"#9c9c9c\",\n      },\n    ],\n  },\n  {\n    featureType: \"all\",\n    elementType: \"labels.text\",\n    stylers: [\n      {\n        visibility: \"on\",\n      },\n    ],\n  },\n  {\n    featureType: \"landscape\",\n    elementType: \"all\",\n    stylers: [\n      {\n        color: \"#f2f2f2\",\n      },\n    ],\n  },\n  {\n    featureType: \"landscape\",\n    elementType: \"geometry.fill\",\n    stylers: [\n      {\n        color: \"#ffffff\",\n      },\n    ],\n  },\n  {\n    featureType: \"landscape.man_made\",\n    elementType: \"geometry.fill\",\n    stylers: [\n      {\n        color: \"#ffffff\",\n      },\n    ],\n  },\n  {\n    featureType: \"poi\",\n    elementType: \"all\",\n    stylers: [\n      {\n        visibility: \"off\",\n      },\n    ],\n  },\n  {\n    featureType: \"road\",\n    elementType: \"all\",\n    stylers: [\n      {\n        saturation: -100,\n      },\n      {\n        lightness: 45,\n      },\n    ],\n  },\n  {\n    featureType: \"road\",\n    elementType: \"geometry.fill\",\n    stylers: [\n      {\n        color: \"#eeeeee\",\n      },\n    ],\n  },\n  {\n    featureType: \"road\",\n    elementType: \"labels.text.fill\",\n    stylers: [\n      {\n        color: \"#7b7b7b\",\n      },\n    ],\n  },\n  {\n    featureType: \"road\",\n    elementType: \"labels.text.stroke\",\n    stylers: [\n      {\n        color: \"#ffffff\",\n      },\n    ],\n  },\n  {\n    featureType: \"road.highway\",\n    elementType: \"all\",\n    stylers: [\n      {\n        visibility: \"simplified\",\n      },\n    ],\n  },\n  {\n    featureType: \"road.arterial\",\n    elementType: \"labels.icon\",\n    stylers: [\n      {\n        visibility: \"off\",\n      },\n    ],\n  },\n  {\n    featureType: \"transit\",\n    elementType: \"all\",\n    stylers: [\n      {\n        visibility: \"off\",\n      },\n    ],\n  },\n  {\n    featureType: \"water\",\n    elementType: \"all\",\n    stylers: [\n      {\n        color: \"#46bcec\",\n      },\n      {\n        visibility: \"on\",\n      },\n    ],\n  },\n  {\n    featureType: \"water\",\n    elementType: \"geometry.fill\",\n    stylers: [\n      {\n        color: \"#c8d7d4\",\n      },\n    ],\n  },\n  {\n    featureType: \"water\",\n    elementType: \"labels.text.fill\",\n    stylers: [\n      {\n        color: \"#070707\",\n      },\n    ],\n  },\n  {\n    featureType: \"water\",\n    elementType: \"labels.text.stroke\",\n    stylers: [\n      {\n        color: \"#ffffff\",\n      },\n    ],\n  },\n];\n`.trim(); // const serverApp = ``.trim();\n\nclass GoogleMaps extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }, \"React Google Map\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: App,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }, \"index.css\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: mainIndex,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      },\n      __self: this\n    }, \"mapStyles.js\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: mapStyles,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(GoogleMaps);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/mern/projects/googleMap.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","App","trim","mainIndex","mapStyles","GoogleMaps","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst App = `\n//.env\nREACT_APP_GOOGLE_MAPS_API_KEY = AIzaSyACmVis1yWx1wCi2AX9V0lu3JT_PGXT1qI\n\n\n//App.js\nimport React from \"react\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from \"@reach/combobox\";\nimport { formatRelative } from \"date-fns\";\n\nimport \"@reach/combobox/styles.css\";\nimport mapStyles from \"./mapStyles\";\n\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  height: \"100vh\",\n  width: \"100vw\",\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true,\n};\nconst center = {\n  lat: 43.6532,\n  lng: -79.3832,\n};\n\nexport default function App() {\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: 'AIzaSyACmVis1yWx1wCi2AX9V0lu3JT_PGXT1qI',\n    libraries,\n  });\n  const [markers, setMarkers] = React.useState([]);\n  const [selected, setSelected] = React.useState(null);\n\n  const onMapClick = React.useCallback((e) => {\n    setMarkers((current) => [\n      ...current,\n      {\n        lat: e.latLng.lat(),\n        lng: e.latLng.lng(),\n        time: new Date(),\n      },\n    ]);\n  }, []);\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  const panTo = React.useCallback(({ lat, lng }) => {\n    mapRef.current.panTo({ lat, lng });\n    mapRef.current.setZoom(14);\n  }, []);\n\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n\n  return (\n    <div>\n      <h1>\n        Bears{\" \"}\n        <span role=\"img\" aria-label=\"tent\">\n          ‚õ∫Ô∏è\n        </span>\n      </h1>\n\n      <Locate panTo={panTo} />\n      <Search panTo={panTo} />\n\n      <GoogleMap\n        id=\"map\"\n        mapContainerStyle={mapContainerStyle}\n        zoom={4}\n        center={center}\n        options={options}\n        onClick={onMapClick}\n        onLoad={onMapLoad}\n      >\n        {markers.map((marker) => (\n          <Marker\n            key={'$'{ marker.lat }-'$'{ marker.lng } }\n            position={{ lat: marker.lat, lng: marker.lng }}\n            onClick={() => {\n              setSelected(marker);\n            }}\n            icon={{\n              url: '/ bear.svg',\n              origin: new window.google.maps.Point(0, 0),\n              anchor: new window.google.maps.Point(15, 15),\n              scaledSize: new window.google.maps.Size(30, 30),\n            }}\n          />\n        ))}\n\n        {selected ? (\n          <InfoWindow\n            position={{ lat: selected.lat, lng: selected.lng }}\n            onCloseClick={() => {\n              setSelected(null);\n            }}\n          >\n            <div>\n              <h2>\n                <span role=\"img\" aria-label=\"bear\">\n                  üêª\n                </span>{\" \"}\n                Alert\n              </h2>\n              <p>Spotted {formatRelative(selected.time, new Date())}</p>\n            </div>\n          </InfoWindow>\n        ) : null}\n      </GoogleMap>\n    </div>\n  );\n}\n\nfunction Locate({ panTo }) {\n  return (\n    <button\n      className=\"locate\"\n      onClick={() => {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            panTo({\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            });\n          },\n          () => null\n        );\n      }}\n    >\n      <img src=\"/compass.svg\" alt=\"compass\" />\n    </button>\n  );\n}\n\nfunction Search({ panTo }) {\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: { lat: () => 43.6532, lng: () => -79.3832 },\n      radius: 100 * 1000,\n    },\n  });\n\n  // https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service#AutocompletionRequest\n\n  const handleInput = (e) => {\n    setValue(e.target.value);\n  };\n\n  const handleSelect = async (address) => {\n    setValue(address, false);\n    clearSuggestions();\n\n    try {\n      const results = await getGeocode({ address });\n      const { lat, lng } = await getLatLng(results[0]);\n      panTo({ lat, lng });\n      console.log(\"lng\", lng);\n    } catch (error) {\n      console.log(\"üò± Error: \", error);\n    }\n  };\n\n  return (\n    <div className=\"search\">\n      <Combobox onSelect={handleSelect}>\n        <ComboboxInput\n          value={value}\n          onChange={handleInput}\n          disabled={!ready}\n          placeholder=\"Search your location\"\n        />\n        <ComboboxPopover>\n          <ComboboxList>\n            {status === \"OK\" &&\n              data.map(({ id, description }) => (\n                <ComboboxOption key={id} value={description} />\n              ))}\n          </ComboboxList>\n        </ComboboxPopover>\n      </Combobox>\n    </div>\n  );\n}\n\n`.trim();\n\nconst mainIndex = `\nh1 {\n  position: absolute;\n  top: 1rem;\n  left: 1rem;\n  color: #281414;\n  z-index: 10;\n  margin: 0;\n  padding: 0;\n}\n\n.search {\n  position: absolute;\n  top: 1rem;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 100%;\n  max-width: 400px;\n  z-index: 10;\n}\n\n.search input {\n  padding: 0.5rem;\n  font-size: 1.5rem;\n  width: 100%;\n}\n\n.locate {\n  position: absolute;\n  top: 1rem;\n  right: 1rem;\n  background: none;\n  border: none;\n  z-index: 10;\n}\n.locate img {\n  width: 30px;\n  cursor: pointer;\n}\n`.trim();\n\nconst mapStyles = `\nexport default [\n  {\n    featureType: \"all\",\n    elementType: \"geometry.fill\",\n    stylers: [\n      {\n        weight: \"2.00\",\n      },\n    ],\n  },\n  {\n    featureType: \"all\",\n    elementType: \"geometry.stroke\",\n    stylers: [\n      {\n        color: \"#9c9c9c\",\n      },\n    ],\n  },\n  {\n    featureType: \"all\",\n    elementType: \"labels.text\",\n    stylers: [\n      {\n        visibility: \"on\",\n      },\n    ],\n  },\n  {\n    featureType: \"landscape\",\n    elementType: \"all\",\n    stylers: [\n      {\n        color: \"#f2f2f2\",\n      },\n    ],\n  },\n  {\n    featureType: \"landscape\",\n    elementType: \"geometry.fill\",\n    stylers: [\n      {\n        color: \"#ffffff\",\n      },\n    ],\n  },\n  {\n    featureType: \"landscape.man_made\",\n    elementType: \"geometry.fill\",\n    stylers: [\n      {\n        color: \"#ffffff\",\n      },\n    ],\n  },\n  {\n    featureType: \"poi\",\n    elementType: \"all\",\n    stylers: [\n      {\n        visibility: \"off\",\n      },\n    ],\n  },\n  {\n    featureType: \"road\",\n    elementType: \"all\",\n    stylers: [\n      {\n        saturation: -100,\n      },\n      {\n        lightness: 45,\n      },\n    ],\n  },\n  {\n    featureType: \"road\",\n    elementType: \"geometry.fill\",\n    stylers: [\n      {\n        color: \"#eeeeee\",\n      },\n    ],\n  },\n  {\n    featureType: \"road\",\n    elementType: \"labels.text.fill\",\n    stylers: [\n      {\n        color: \"#7b7b7b\",\n      },\n    ],\n  },\n  {\n    featureType: \"road\",\n    elementType: \"labels.text.stroke\",\n    stylers: [\n      {\n        color: \"#ffffff\",\n      },\n    ],\n  },\n  {\n    featureType: \"road.highway\",\n    elementType: \"all\",\n    stylers: [\n      {\n        visibility: \"simplified\",\n      },\n    ],\n  },\n  {\n    featureType: \"road.arterial\",\n    elementType: \"labels.icon\",\n    stylers: [\n      {\n        visibility: \"off\",\n      },\n    ],\n  },\n  {\n    featureType: \"transit\",\n    elementType: \"all\",\n    stylers: [\n      {\n        visibility: \"off\",\n      },\n    ],\n  },\n  {\n    featureType: \"water\",\n    elementType: \"all\",\n    stylers: [\n      {\n        color: \"#46bcec\",\n      },\n      {\n        visibility: \"on\",\n      },\n    ],\n  },\n  {\n    featureType: \"water\",\n    elementType: \"geometry.fill\",\n    stylers: [\n      {\n        color: \"#c8d7d4\",\n      },\n    ],\n  },\n  {\n    featureType: \"water\",\n    elementType: \"labels.text.fill\",\n    stylers: [\n      {\n        color: \"#070707\",\n      },\n    ],\n  },\n  {\n    featureType: \"water\",\n    elementType: \"labels.text.stroke\",\n    stylers: [\n      {\n        color: \"#ffffff\",\n      },\n    ],\n  },\n];\n`.trim();\n\n// const serverApp = ``.trim();\n\n\nclass GoogleMaps extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>React Google Map</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={App}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>index.css</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={mainIndex}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>mapStyles.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={mapStyles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(GoogleMaps));\n"]},"metadata":{},"sourceType":"module"}