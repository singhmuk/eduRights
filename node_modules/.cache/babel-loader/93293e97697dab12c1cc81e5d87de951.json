{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var reactAdd=\"\\nimport { v4 as uuidv4 } from \\\"uuid\\\";\\n\\nconst initialState = [\\n  { id: 1, aim: \\\"Success\\\" },\\n  { id: 2, aim: \\\"Advanced\\\" },\\n  { id: 3, aim: \\\"Properly\\\" },\\n];\\n\\nconst App = () => {\\n  const [list, setList] = useState(initialState);\\n  const [aim, setName] = useState(\\\"\\\");\\n\\n  const handleChange = (e) => {\\n    setName(e.target.value);\\n  };\\n\\n  const handleAdd = () => {\\n    const newItem = list.concat({ aim, id: uuidv4() });\\n    setList(newItem);\\n    console.log(newItem);\\n    setName(\\\"\\\");\\n  };\\n\\n  return (\\n    <div>\\n      <input type=\\\"text\\\" value={aim} onChange={handleChange} />\\n      <button type=\\\"submit\\\" onClick={handleAdd}>\\n        Add\\n      </button>\\n      {list.map((val) => (\\n        <div>{val.aim}</div>\\n      ))}\\n    </div>\\n  );\\n};\\n\".trim();var reduxAdd=\"\\n//App.js\\nimport { connect } from \\\"react-redux\\\";\\nimport { addFun } from \\\"./actions/dataActions\\\";\\n\\nconst App = (props) => {\\n  const [name, setName] = useState(\\\"\\\");\\n\\n  const handleChange = (e) => {\\n    e.preventDefault();\\n    setName(e.target.value);\\n  };\\n\\n  const handleAdd = () => {\\n    const newItem = name;\\n    props.addFun(newItem);\\n    setName(\\\"\\\");\\n  };\\n\\n  return (\\n    <div>\\n      <input type=\\\"text\\\" value={name} onChange={handleChange} />\\n      <button type=\\\"submit\\\" onClick={handleAdd}>\\n        Add\\n      </button>\\n      {props.data.map((val) => (\\n        <div>{val.name}</div>\\n      ))}\\n    </div>\\n  );\\n};\\n\\nconst mapStateToProps = (state) => ({\\n  data: state.data,\\n});\\n\\nconst mapDispatchToProps = {\\n  addFun,\\n};\\n\\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\\n\\n\\n\\n//reducers/data.js\\nconst initialState = [\\n  { id: 1, name: \\\"Mukesh\\\" },\\n  { id: 2, name: \\\"Rakesh\\\" },\\n  { id: 3, name: \\\"Niketh\\\" },\\n];\\n\\nexport default (state = initialState, action) => {\\n  console.log(\\\"props.list\\\", state);\\n  const { type, payload } = action;\\n  switch (type) {\\n    case ADD:\\n      return [...state, { name: payload }];\\n\\n    default:\\n      return state;\\n  }\\n};\\n\\n\\n\\n//actions/dataActions.js\\nexport const addFun = (payload) => {\\n  return {\\n    type: ADD,\\n    payload: payload,\\n  };\\n};\\n\".trim();var reactDelete=\"\\nconst initialState = [\\n  { id: 1, name: \\\"Success\\\" },\\n  { id: 2, name: \\\"Advanced\\\" },\\n  { id: 3, name: \\\"Properly\\\" },\\n];\\n\\nconst App = () => {\\n  const [list, setList] = useState(initialState);\\n\\n  const handleRemoveItem = (id) => {\\n    const deleteItems = list.filter((item) => item.id !== id);\\n    setList(deleteItems);\\n  };\\n\\n  return (\\n    <div>\\n      {list.map((val) => (\\n        <div>\\n          {val.name}\\n          <button onClick={() => handleRemoveItem(val.id)}>X</button>\\n        </div>\\n      ))}\\n    </div>\\n  );\\n};\".trim();var reduxDelete=\"\\n//App.js\\nimport { deletFun } from \\\"./actions/dataActions\\\";\\n\\nconst App = (props) => {\\n  const handleRemoveItem = (id) => {\\n    props.deletFun(id);\\n  };\\n\\n  return (\\n    <div>\\n      {props.data.map((val) => (\\n        <div>\\n          {val.name}\\n          <button onClick={() => handleRemoveItem(val.id)}>X</button>\\n        </div>\\n      ))}\\n    </div>\\n  );\\n};\\n\\nconst mapStateToProps = (state) => ({\\n  data: state.dataVal,\\n});\\n\\nconst mapDispatchToProps = {\\n  deletFun,\\n};\\n\\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\\n\\n\\n\\n//reducers/dataReducers.js\\nconst initialState = [\\n  { id: 1, name: \\\"Mukesh\\\" },\\n  { id: 2, name: \\\"Rakesh\\\" },\\n  { id: 3, name: \\\"Niketh\\\" },\\n];\\n\\nexport default (state = initialState, action) => {\\n  console.log(\\\"props.list\\\", state);\\n  const { type, payload } = action;\\n  switch (type) {\\n    case DELETE_DATA:\\n      state = state.filter((x) => x.id !== payload);\\n      return state;\\n    default:\\n      return state;\\n  }\\n};\\n\\n\\n\\n//actions/dataActions.js\\nexport const deletFun = (id) => {\\n  return {\\n    type: DELETE_DATA,\\n    payload: id,\\n  };\\n};\\n\".trim();var reduxEdit=\"\\n//App.js\\nimport Forms from \\\"./components/form\\\";\\nimport { connect } from \\\"react-redux\\\";\\nimport * as actions from \\\"./actions/transactionActions\\\";\\nimport { bindActionCreators } from \\\"redux\\\";\\n\\nconst App = (props) => {\\n  const handleEdit = (index) => {\\n    props.updateTransactionIndex(index);\\n  };\\n\\n  return (\\n    <div>\\n      <Forms />\\n      <table>\\n        <tbody>\\n          {props.list.map((item, index) => {\\n            return (\\n              <tr key={index}>\\n                <td>{item.bAccountNo}</td>\\n                <td>{item.amount}</td>\\n                <td>\\n                  <button onClick={() => handleEdit(index)}>Edit</button>\\n                </td>\\n              </tr>\\n            );\\n          })}\\n        </tbody>\\n      </table>\\n    </div>\\n  );\\n};\\n\\nconst mapStateToProps = (state) => {\\n  return {\\n    list: state.list,\\n  };\\n};\\n\\nconst mapDispatchToProps = (dispatch) => {\\n  return bindActionCreators(\\n    {\\n      updateTransactionIndex: actions.updateIndex,\\n    },\\n    dispatch\\n  );\\n};\\n\\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\\n\\n\\n\\n//components/form.js\\nimport { connect } from \\\"react-redux\\\";\\nimport * as actions from \\\"../actions/transactionActions\\\";\\nimport { bindActionCreators } from \\\"redux\\\";\\n\\nclass Forms extends Component {\\n  state = {};\\n\\n  returnStateObject() {\\n    if (this.props.currentIndex == -1)\\n      return {\\n        bAccountNo: \\\"\\\",\\n        bName: \\\"\\\",\\n      };\\n    else return this.props.list[this.props.currentIndex];\\n  }\\n\\n  componentDidUpdate(prevProps) {\\n    if (\\n      prevProps.currentIndex != this.props.currentIndex ||\\n      prevProps.list.length != this.props.list.length\\n    ) {\\n      this.setState({ ...this.returnStateObject() });\\n    }\\n  }\\n\\n  handleInputChange = (e) => {\\n    this.setState({\\n      [e.target.name]: e.target.value,\\n    });\\n  };\\n\\n  handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (this.props.currentIndex == -1) this.props.insertTransaction(this.state);\\n    else this.props.updateTransaction(this.state);\\n  };\\n\\n  render() {\\n    return (\\n      <form onSubmit={this.handleSubmit} autoComplete=\\\"off\\\">\\n        <input\\n          name=\\\"bAccountNo\\\"\\n          onChange={this.handleInputChange}\\n          value={this.state.bAccountNo}\\n        />\\n        <br />\\n\\n        <input\\n          name=\\\"amount\\\"\\n          onChange={this.handleInputChange}\\n          value={this.state.amount}\\n        />\\n        <br />\\n        <button type=\\\"submit\\\">Submit</button>\\n      </form>\\n    );\\n  }\\n}\\n\\nconst mapStateToProps = (state) => {\\n  return {\\n    list: state.list,\\n    currentIndex: state.currentIndex,\\n  };\\n};\\n\\nconst mapDispatchToProps = (dispatch) => {\\n  return bindActionCreators(\\n    {\\n      insertTransaction: actions.insert,\\n      updateTransaction: actions.update,\\n    },\\n    dispatch\\n  );\\n};\\n\\nexport default connect(mapStateToProps, mapDispatchToProps)(Forms);\\n\".trim();var actions=\"\\n//reducers/transactionReducer.js\\nexport const transactionReducer = (state, action) => {\\n  var list = JSON.parse(localStorage.getItem(\\\"transactions\\\"));\\n  switch (action.type) {\\n    case \\\"INSERT\\\":\\n      list.push(action.payload);\\n      localStorage.setItem(\\\"transactions\\\", JSON.stringify(list));\\n      return { list, currentIndex: -1 };\\n    case \\\"UPDATE\\\":\\n      list[state.currentIndex] = action.payload;\\n      localStorage.setItem(\\\"transactions\\\", JSON.stringify(list));\\n      return { list, currentIndex: -1 };\\n\\n    case \\\"UPDATE-INDEX\\\":\\n      return { list, currentIndex: action.payload };\\n\\n    case \\\"DELETE\\\":\\n      list.splice(action.payload, 1);\\n      localStorage.setItem(\\\"transactions\\\", JSON.stringify(list));\\n      return { list, currentIndex: -1 };\\n    default:\\n      return state;\\n  }\\n};\\n\\nexport default transactionReducer;\\n\\n\\n\\n\\n//actions/transactionActions.js\\nexport const insert = data => {\\n  return {\\n      type: 'INSERT',\\n      payload: data\\n  }\\n}\\n\\nexport const update = data => {\\n  return {\\n      type: 'UPDATE',\\n      payload: data\\n  }\\n}\\n\\nexport const Delete = id => {\\n  return {\\n      type: 'DELETE',\\n      payload: id\\n  }\\n}\\n\\nexport const updateIndex = index => {\\n  return {\\n      type: 'UPDATE-INDEX',\\n      payload: index\\n  }\\n}\\n\".trim();var ReduxMethods=/*#__PURE__*/function(_Component){_inherits(ReduxMethods,_Component);function ReduxMethods(){_classCallCheck(this,ReduxMethods);return _possibleConstructorReturn(this,_getPrototypeOf(ReduxMethods).apply(this,arguments));}_createClass(ReduxMethods,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h2\",null,\"Add(React)\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:reactAdd,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Add(Redux)\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:reduxAdd,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Delete(React)\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:reactDelete,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Delete(Redux)\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:reduxDelete,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Edit(Redux)\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:reduxEdit,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"actions\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:actions,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return ReduxMethods;}(Component);export default withStyles(styles)(ReduxMethods);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/Redux/deep/reduxMethods.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","reactAdd","trim","reduxAdd","reactDelete","reduxDelete","reduxEdit","actions","ReduxMethods","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst reactAdd = `\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst initialState = [\n  { id: 1, aim: \"Success\" },\n  { id: 2, aim: \"Advanced\" },\n  { id: 3, aim: \"Properly\" },\n];\n\nconst App = () => {\n  const [list, setList] = useState(initialState);\n  const [aim, setName] = useState(\"\");\n\n  const handleChange = (e) => {\n    setName(e.target.value);\n  };\n\n  const handleAdd = () => {\n    const newItem = list.concat({ aim, id: uuidv4() });\n    setList(newItem);\n    console.log(newItem);\n    setName(\"\");\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={aim} onChange={handleChange} />\n      <button type=\"submit\" onClick={handleAdd}>\n        Add\n      </button>\n      {list.map((val) => (\n        <div>{val.aim}</div>\n      ))}\n    </div>\n  );\n};\n`.trim();\n\nconst reduxAdd = `\n//App.js\nimport { connect } from \"react-redux\";\nimport { addFun } from \"./actions/dataActions\";\n\nconst App = (props) => {\n  const [name, setName] = useState(\"\");\n\n  const handleChange = (e) => {\n    e.preventDefault();\n    setName(e.target.value);\n  };\n\n  const handleAdd = () => {\n    const newItem = name;\n    props.addFun(newItem);\n    setName(\"\");\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={name} onChange={handleChange} />\n      <button type=\"submit\" onClick={handleAdd}>\n        Add\n      </button>\n      {props.data.map((val) => (\n        <div>{val.name}</div>\n      ))}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  data: state.data,\n});\n\nconst mapDispatchToProps = {\n  addFun,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n\n\n//reducers/data.js\nconst initialState = [\n  { id: 1, name: \"Mukesh\" },\n  { id: 2, name: \"Rakesh\" },\n  { id: 3, name: \"Niketh\" },\n];\n\nexport default (state = initialState, action) => {\n  console.log(\"props.list\", state);\n  const { type, payload } = action;\n  switch (type) {\n    case ADD:\n      return [...state, { name: payload }];\n\n    default:\n      return state;\n  }\n};\n\n\n\n//actions/dataActions.js\nexport const addFun = (payload) => {\n  return {\n    type: ADD,\n    payload: payload,\n  };\n};\n`.trim();\n\nconst reactDelete = `\nconst initialState = [\n  { id: 1, name: \"Success\" },\n  { id: 2, name: \"Advanced\" },\n  { id: 3, name: \"Properly\" },\n];\n\nconst App = () => {\n  const [list, setList] = useState(initialState);\n\n  const handleRemoveItem = (id) => {\n    const deleteItems = list.filter((item) => item.id !== id);\n    setList(deleteItems);\n  };\n\n  return (\n    <div>\n      {list.map((val) => (\n        <div>\n          {val.name}\n          <button onClick={() => handleRemoveItem(val.id)}>X</button>\n        </div>\n      ))}\n    </div>\n  );\n};`.trim();\n\nconst reduxDelete = `\n//App.js\nimport { deletFun } from \"./actions/dataActions\";\n\nconst App = (props) => {\n  const handleRemoveItem = (id) => {\n    props.deletFun(id);\n  };\n\n  return (\n    <div>\n      {props.data.map((val) => (\n        <div>\n          {val.name}\n          <button onClick={() => handleRemoveItem(val.id)}>X</button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  data: state.dataVal,\n});\n\nconst mapDispatchToProps = {\n  deletFun,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n\n\n//reducers/dataReducers.js\nconst initialState = [\n  { id: 1, name: \"Mukesh\" },\n  { id: 2, name: \"Rakesh\" },\n  { id: 3, name: \"Niketh\" },\n];\n\nexport default (state = initialState, action) => {\n  console.log(\"props.list\", state);\n  const { type, payload } = action;\n  switch (type) {\n    case DELETE_DATA:\n      state = state.filter((x) => x.id !== payload);\n      return state;\n    default:\n      return state;\n  }\n};\n\n\n\n//actions/dataActions.js\nexport const deletFun = (id) => {\n  return {\n    type: DELETE_DATA,\n    payload: id,\n  };\n};\n`.trim();\n\nconst reduxEdit = `\n//App.js\nimport Forms from \"./components/form\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"./actions/transactionActions\";\nimport { bindActionCreators } from \"redux\";\n\nconst App = (props) => {\n  const handleEdit = (index) => {\n    props.updateTransactionIndex(index);\n  };\n\n  return (\n    <div>\n      <Forms />\n      <table>\n        <tbody>\n          {props.list.map((item, index) => {\n            return (\n              <tr key={index}>\n                <td>{item.bAccountNo}</td>\n                <td>{item.amount}</td>\n                <td>\n                  <button onClick={() => handleEdit(index)}>Edit</button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    list: state.list,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      updateTransactionIndex: actions.updateIndex,\n    },\n    dispatch\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n\n\n//components/form.js\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions/transactionActions\";\nimport { bindActionCreators } from \"redux\";\n\nclass Forms extends Component {\n  state = {};\n\n  returnStateObject() {\n    if (this.props.currentIndex == -1)\n      return {\n        bAccountNo: \"\",\n        bName: \"\",\n      };\n    else return this.props.list[this.props.currentIndex];\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.currentIndex != this.props.currentIndex ||\n      prevProps.list.length != this.props.list.length\n    ) {\n      this.setState({ ...this.returnStateObject() });\n    }\n  }\n\n  handleInputChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (this.props.currentIndex == -1) this.props.insertTransaction(this.state);\n    else this.props.updateTransaction(this.state);\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        <input\n          name=\"bAccountNo\"\n          onChange={this.handleInputChange}\n          value={this.state.bAccountNo}\n        />\n        <br />\n\n        <input\n          name=\"amount\"\n          onChange={this.handleInputChange}\n          value={this.state.amount}\n        />\n        <br />\n        <button type=\"submit\">Submit</button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    list: state.list,\n    currentIndex: state.currentIndex,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      insertTransaction: actions.insert,\n      updateTransaction: actions.update,\n    },\n    dispatch\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Forms);\n`.trim();\n\nconst actions = `\n//reducers/transactionReducer.js\nexport const transactionReducer = (state, action) => {\n  var list = JSON.parse(localStorage.getItem(\"transactions\"));\n  switch (action.type) {\n    case \"INSERT\":\n      list.push(action.payload);\n      localStorage.setItem(\"transactions\", JSON.stringify(list));\n      return { list, currentIndex: -1 };\n    case \"UPDATE\":\n      list[state.currentIndex] = action.payload;\n      localStorage.setItem(\"transactions\", JSON.stringify(list));\n      return { list, currentIndex: -1 };\n\n    case \"UPDATE-INDEX\":\n      return { list, currentIndex: action.payload };\n\n    case \"DELETE\":\n      list.splice(action.payload, 1);\n      localStorage.setItem(\"transactions\", JSON.stringify(list));\n      return { list, currentIndex: -1 };\n    default:\n      return state;\n  }\n};\n\nexport default transactionReducer;\n\n\n\n\n//actions/transactionActions.js\nexport const insert = data => {\n  return {\n      type: 'INSERT',\n      payload: data\n  }\n}\n\nexport const update = data => {\n  return {\n      type: 'UPDATE',\n      payload: data\n  }\n}\n\nexport const Delete = id => {\n  return {\n      type: 'DELETE',\n      payload: id\n  }\n}\n\nexport const updateIndex = index => {\n  return {\n      type: 'UPDATE-INDEX',\n      payload: index\n  }\n}\n`.trim();\n\n\nclass ReduxMethods extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h2>Add(React)</h2>\n              <div style={titles}>\n                <PrismCode\n                  code={reactAdd}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Add(Redux)</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={reduxAdd}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>Delete(React)</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={reactDelete}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Delete(Redux)</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={reduxDelete}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Edit(Redux)</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={reduxEdit}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>actions</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={actions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(ReduxMethods));"]},"metadata":{},"sourceType":"module"}