{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic2.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst removeElement = `\nconst removeElement = function (nums, val) {\n  let left = 0\n  const swap = (a, b) => {\n    const temp = nums[a]\n    nums[a] = nums[b]\n    nums[b] = temp\n  }\n  while (left <= nums.length - 1) {\n    while (nums[nums.length - 1] === val) {\n      nums.pop()\n    }\n    while (nums[left] !== val && left <= nums.length - 1) {\n      left += 1\n    }\n\n    if (left < nums.length - 1) {\n      swap(left, nums.length - 1)\n      left += 1\n      nums.pop()\n    }\n  }\n  return nums.length\n}\n\n\nconsole.log(removeElement([0,1,2,2,3,0,4,2],1))`.trim();\nconst strStr = `\nconst strStr = function (haystack, needle) {\n  const base = 256\n  const prime = 1439173969\n  if (needle === '') {\n    return 0\n  }\n  let hashNeedle = 0\n  const magic = (base ** (needle.length - 1)) % prime\n  const product = prime * base\n  for (const c of needle) {\n    hashNeedle = (hashNeedle * base + c.charCodeAt(0)) % prime\n  }\n  const isEqual = i => needle === haystack.slice(i, i + needle.length)\n  let hash = 0\n  for (let i = 0; i <= haystack.length - needle.length; i++) {\n    if (i === 0) {\n      for (let j = 0; j < needle.length; j++) {\n        hash = (hash * base + haystack[j].charCodeAt(0)) % prime\n      }\n    } else {\n      hash = (hash - haystack[i - 1].charCodeAt(0) * magic + product) % prime\n      hash = (hash * base + haystack[i + needle.length - 1].charCodeAt(0)) % prime\n    }\n    if (hash === hashNeedle && isEqual(i)) {\n      return i\n    }\n  }\n  return -1\n}\n\n\nconsole.log(strStr(haystack = \"hello\", needle = \"ll\"))`.trim();\nconst searchRange = `\nconst searchRange = (nums = [], target) => {\n  const binarySearch = (left, right, position = 'middle') => {\n    let pivot = -1\n    while (left <= right) {\n      const middle = Math.floor((left + right) / 2)\n      if (nums[middle] === target) {\n        if (position === 'middle') {\n          pivot = middle\n          break\n        } else if (position === 'left') {\n          pivot = middle\n          right = middle - 1\n        } else if (position === 'right') {\n          pivot = middle\n          left = middle + 1\n        }\n      } else if (nums[middle] < target) {\n        left = middle + 1\n      } else {\n        right = middle - 1\n      }\n    }\n    return pivot\n  }\n\n\n  const pivot = binarySearch(0, nums.length - 1, 'middle')\n  return [\n    binarySearch(0, pivot, 'left'),\n    binarySearch(pivot, nums.length - 1, 'right'),\n  ]\n}\n\nconsole.log(searchRange([5,7,7,8,8,10],6))`.trim();\nconst searchInsert = `\nconst searchInsert = (nums, target) => {\n  const aux = (low, high) => {\n    if (low > high) {\n      return low\n    }\n    const middle = Math.floor((low + high) / 2)\n    if (target === nums[middle]) {\n      return middle\n    } if (target > nums[middle]) {\n      return aux(middle + 1, high)\n    }\n    return aux(low, middle - 1)\n  }\n  return aux(0, nums.length - 1)\n}\n\nconsole.log(searchInsert([1,3,5,6], 5))`.trim();\nconst isValidSudoku = `\nconst isValidSudoku = (board = []) => {\n  const rows = []\n  const columns = []\n  const boxes = []\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      const content = board[i][j]\n      if (content !== '.') {\n        if (!rows[i]) {\n          rows[i] = {}\n        }\n        if (rows[i][content]) {\n          return false\n        }\n        rows[i][content] = 1\n\n        if (!columns[j]) {\n          columns[j] = {}\n        }\n        if (columns[j][content]) {\n          return false\n        }\n        columns[j][content] = 1\n        const boxNum = Math.floor(i / 3) * 3 + Math.floor(j / 3)\n        if (!boxes[boxNum]) {\n          boxes[boxNum] = {}\n        }\n        if (boxes[boxNum][content]) {\n          return false\n        }\n        boxes[boxNum][content] = 1\n      }\n    }\n  }\n  return true\n}\n\nconsole.log(isValidSudoku([\n  [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n  [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n  [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n  [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n  [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n  [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n  [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n  [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n  [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n]))`.trim();\nconst combinationSum = `\nvar combinationSum = function(candidates, target) {\n  const result = []\n  const aux = (start,current=[], sum = 0) => {\n      if(sum > target) {\n          return \n      }\n      if(sum === target) {\n          result.push(current)\n          return\n      }\n      for(let i = start; i < candidates.length; i++) {\n          aux(i, [...current, candidates[i]], sum+candidates[i])\n      }\n  }\n  for(let i = 0; i <  candidates.length; i++) {\n      aux(i, [candidates[i]], candidates[i])\n  }\n  return result\n};\n\nconsole.log(combinationSum([2,3,5],8))`.trim();\nconst firstMissingPositive = `\nconst firstMissingPositive = (nums = []) => {\n  const swap = (a, b) => {\n    const temp = nums[a]\n    nums[a] = nums[b]\n    nums[b] = temp\n  }\n  let index = 0\n  while (index < nums.length) {\n    if (\n      nums[index] !== nums[nums[index] - 1]\n      && nums[index] > 0\n      && nums[index] <= nums.length\n    ) {\n      swap(index, nums[index] - 1)\n    } else {\n      index += 1\n    }\n  }\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] !== i + 1) {\n      return i + 1\n    }\n  }\n  return nums.length + 1\n}\n\nconsole.log(firstMissingPositive([3,4,-1,1]))`.trim();\nconst addStrings = `\nconst addStrings = (num1, num2) => {\n  const reversedNum1 = num1.split('').reverse()\n  const reversedNum2 = num2.split('').reverse()\n  const { shorter, longer } = reversedNum1.length < reversedNum2.length\n    ? { shorter: reversedNum1, longer: reversedNum2 }\n    : { shorter: reversedNum2, longer: reversedNum1 }\n\n  let rem = 0\n  let result = longer.reduce((acc, digit1, index) => {\n    const total = parseInt(digit1, 10) + (parseInt(shorter[index], 10) || 0) + rem\n    if (total >= 10) {\n      rem = 1\n    } else {\n      rem = 0\n    }\n    return [\n      ...acc,\n      total >= 10 ? total - 10 : total,\n    ]\n  }, [])\n  result = rem === 1 ? [...result, rem] : result\n  return result.reverse().join('')\n}\n\nconst zero = (count) => {\n  let result = ''\n  while (count >= 1) {\n    result += '0'\n    count -= 1\n  }\n  return result\n}\nconst multiply = (num1 = '', num2 = '') => {\n  let result = 0\n  for (let i = num2.length - 1; i >= 0; i--) {\n    let current = ''\n    let base = 0\n    for (let j = num1.length - 1; j >= 0; j--) {\n      let currentResult = parseInt(num1[j], 10) * parseInt(num2[i], 10) + base\n      if (currentResult >= 10) {\n        base = Math.floor(currentResult / 10)\n        currentResult -= base * 10\n      } else {\n        base = 0\n      }\n      current = '$'{currentResult + current}'\n    }\n    if (base > 0) {\n      current = base + current\n    }\n    // 偷懒\n    result = addStrings(result || '0', current + zero(num2.length - 1 - i))\n  }\n  if (result.length > 0 && result[0] === '0') {\n    return '0'\n  }\n  return result\n}\n\n\nconsole.log(addStrings(\"2\",\"3\"))`.trim();\nconst jump = `\nconst jump = (nums = []) => {\n  let steps = 0\n  let currentJumpIndex = 0\n  let nextJumpIndex = 0\n  for (let i = 0; i < nums.length - 1; i++) {\n    nextJumpIndex = Math.max(i + nums[i], nextJumpIndex)\n    if (i === currentJumpIndex) {\n      steps += 1\n      currentJumpIndex = nextJumpIndex\n    }\n  }\n  return steps\n}\n\n\nconsole.log(jump([2,3,1,1,4]))`.trim();\nconst permute = `\nconst permute = (nums = []) => {\n  const result = []\n  const aux = (list = [], current = []) => {\n    if (list.length === 0) {\n      result.push(current)\n    }\n    list.forEach((number, index) => {\n      aux(list.filter((v, index2) => index2 !== index), [...current, number])\n    })\n  }\n  aux(nums)\n  return result\n}\n\n\nconsole.log(permute([1,2,3]))`.trim();\n\nclass DSLogic2 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, \"1. Remove Element\"), \"Given an array nums and a value val, remove all instances of that value in-place and return the new length.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }), \"Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }), \"The order of elements can be changed. It doesn't matter what you leave beyond the new length.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }), \"Given nums = [3,2,2,3], val = 3,\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }), \"Your function should return length = 2, with the first two elements of nums being 2.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }), \"It doesn't matter what you leave beyond the returned length.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: removeElement,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, \"2. Implement strStr()\"), \"Implement strStr().\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }), \"Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }), \"Input: haystack = \\\"hello\\\", needle = \\\"ll\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }), \"Output: 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }), \"Input: haystack = \\\"aaaaa\\\", needle = \\\"bba\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }), \"Output: -1\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: strStr,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }, \"3. Find First and Last Position of Element in Sorted Array\"), \"Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }), \"Your algorithm's runtime complexity must be in the order of O(log n).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }), \"If the target is not found in the array, return [-1, -1].\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }), \"Input: nums = [5,7,7,8,8,10], target = 8\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }), \"Output: [3,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    }), \"Input: nums = [5,7,7,8,8,10], target = 6\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }), \"Output: [-1,-1]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: searchRange,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }, \"4. Search Insert Position.\"), \"Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }), \"Input: [1,3,5,6], 5\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }), \"Output: 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }), \"Input: [1,3,5,6], 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }), \"Output: 1\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: searchInsert,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    }, \"5. Valid Sudoku.\"), \"Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    }), \"Each row must contain the digits 1-9 without repetition.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }), \"Each column must contain the digits 1-9 without repetition.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }), \"Each of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }, \"Note: \"), \"A Sudoku board (partially filled) could be valid but is not necessarily solvable.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }), \"Only the filled cells need to be validated according to the mentioned rules.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }), \"The given board contain only digits 1-9 and the character '.'.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }), \"The given board size is always 9x9.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isValidSudoku,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    }, \"6. Combination Sum\"), \"Input: candidates = [2,3,6,7], target = 7,\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }), \"A solution set is:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }), \"[\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    }), \"[7],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }), \"[2,2,3]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    }), \"]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: combinationSum,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489\n      },\n      __self: this\n    }, \"7. First Missing Positive\"), \"Input: [3,4,-1,1]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    }), \"Output: 2\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: firstMissingPositive,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501\n      },\n      __self: this\n    }, \"8. Multiply Strings\"), \"Input: num1 = \\\"2\\\", num2 = \\\"3\\\" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502\n      },\n      __self: this\n    }), \"Output: \\\"6\\\"\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: addStrings,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    }, \"9. Jump Game\"), \"Given an array of non-negative integers, you are initially positioned at the first index of the array.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }), \"Each element in the array represents your maximum jump length at that position.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }), \"Your goal is to reach the last index in the minimum number of jumps.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }), \"Input: [2,3,1,1,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }), \"Output: 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }), \"Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }, \"N: \"), \"You can assume that you can always reach the last index.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: jump,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }, \"10. Permutations.\"), \"Given a collection of distinct integers, return all possible permutations.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: permute,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(DSLogic2);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic2.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","removeElement","trim","strStr","searchRange","searchInsert","isValidSudoku","combinationSum","firstMissingPositive","addStrings","jump","permute","DSLogic2","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst removeElement = `\nconst removeElement = function (nums, val) {\n  let left = 0\n  const swap = (a, b) => {\n    const temp = nums[a]\n    nums[a] = nums[b]\n    nums[b] = temp\n  }\n  while (left <= nums.length - 1) {\n    while (nums[nums.length - 1] === val) {\n      nums.pop()\n    }\n    while (nums[left] !== val && left <= nums.length - 1) {\n      left += 1\n    }\n\n    if (left < nums.length - 1) {\n      swap(left, nums.length - 1)\n      left += 1\n      nums.pop()\n    }\n  }\n  return nums.length\n}\n\n\nconsole.log(removeElement([0,1,2,2,3,0,4,2],1))`.trim();\n\nconst strStr = `\nconst strStr = function (haystack, needle) {\n  const base = 256\n  const prime = 1439173969\n  if (needle === '') {\n    return 0\n  }\n  let hashNeedle = 0\n  const magic = (base ** (needle.length - 1)) % prime\n  const product = prime * base\n  for (const c of needle) {\n    hashNeedle = (hashNeedle * base + c.charCodeAt(0)) % prime\n  }\n  const isEqual = i => needle === haystack.slice(i, i + needle.length)\n  let hash = 0\n  for (let i = 0; i <= haystack.length - needle.length; i++) {\n    if (i === 0) {\n      for (let j = 0; j < needle.length; j++) {\n        hash = (hash * base + haystack[j].charCodeAt(0)) % prime\n      }\n    } else {\n      hash = (hash - haystack[i - 1].charCodeAt(0) * magic + product) % prime\n      hash = (hash * base + haystack[i + needle.length - 1].charCodeAt(0)) % prime\n    }\n    if (hash === hashNeedle && isEqual(i)) {\n      return i\n    }\n  }\n  return -1\n}\n\n\nconsole.log(strStr(haystack = \"hello\", needle = \"ll\"))`.trim();\n\nconst searchRange = `\nconst searchRange = (nums = [], target) => {\n  const binarySearch = (left, right, position = 'middle') => {\n    let pivot = -1\n    while (left <= right) {\n      const middle = Math.floor((left + right) / 2)\n      if (nums[middle] === target) {\n        if (position === 'middle') {\n          pivot = middle\n          break\n        } else if (position === 'left') {\n          pivot = middle\n          right = middle - 1\n        } else if (position === 'right') {\n          pivot = middle\n          left = middle + 1\n        }\n      } else if (nums[middle] < target) {\n        left = middle + 1\n      } else {\n        right = middle - 1\n      }\n    }\n    return pivot\n  }\n\n\n  const pivot = binarySearch(0, nums.length - 1, 'middle')\n  return [\n    binarySearch(0, pivot, 'left'),\n    binarySearch(pivot, nums.length - 1, 'right'),\n  ]\n}\n\nconsole.log(searchRange([5,7,7,8,8,10],6))`.trim();\n\nconst searchInsert = `\nconst searchInsert = (nums, target) => {\n  const aux = (low, high) => {\n    if (low > high) {\n      return low\n    }\n    const middle = Math.floor((low + high) / 2)\n    if (target === nums[middle]) {\n      return middle\n    } if (target > nums[middle]) {\n      return aux(middle + 1, high)\n    }\n    return aux(low, middle - 1)\n  }\n  return aux(0, nums.length - 1)\n}\n\nconsole.log(searchInsert([1,3,5,6], 5))`.trim();\n\nconst isValidSudoku = `\nconst isValidSudoku = (board = []) => {\n  const rows = []\n  const columns = []\n  const boxes = []\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      const content = board[i][j]\n      if (content !== '.') {\n        if (!rows[i]) {\n          rows[i] = {}\n        }\n        if (rows[i][content]) {\n          return false\n        }\n        rows[i][content] = 1\n\n        if (!columns[j]) {\n          columns[j] = {}\n        }\n        if (columns[j][content]) {\n          return false\n        }\n        columns[j][content] = 1\n        const boxNum = Math.floor(i / 3) * 3 + Math.floor(j / 3)\n        if (!boxes[boxNum]) {\n          boxes[boxNum] = {}\n        }\n        if (boxes[boxNum][content]) {\n          return false\n        }\n        boxes[boxNum][content] = 1\n      }\n    }\n  }\n  return true\n}\n\nconsole.log(isValidSudoku([\n  [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n  [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n  [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n  [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n  [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n  [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n  [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n  [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n  [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n]))`.trim();\n\nconst combinationSum = `\nvar combinationSum = function(candidates, target) {\n  const result = []\n  const aux = (start,current=[], sum = 0) => {\n      if(sum > target) {\n          return \n      }\n      if(sum === target) {\n          result.push(current)\n          return\n      }\n      for(let i = start; i < candidates.length; i++) {\n          aux(i, [...current, candidates[i]], sum+candidates[i])\n      }\n  }\n  for(let i = 0; i <  candidates.length; i++) {\n      aux(i, [candidates[i]], candidates[i])\n  }\n  return result\n};\n\nconsole.log(combinationSum([2,3,5],8))`.trim();\n\nconst firstMissingPositive = `\nconst firstMissingPositive = (nums = []) => {\n  const swap = (a, b) => {\n    const temp = nums[a]\n    nums[a] = nums[b]\n    nums[b] = temp\n  }\n  let index = 0\n  while (index < nums.length) {\n    if (\n      nums[index] !== nums[nums[index] - 1]\n      && nums[index] > 0\n      && nums[index] <= nums.length\n    ) {\n      swap(index, nums[index] - 1)\n    } else {\n      index += 1\n    }\n  }\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] !== i + 1) {\n      return i + 1\n    }\n  }\n  return nums.length + 1\n}\n\nconsole.log(firstMissingPositive([3,4,-1,1]))`.trim();\n\nconst addStrings = `\nconst addStrings = (num1, num2) => {\n  const reversedNum1 = num1.split('').reverse()\n  const reversedNum2 = num2.split('').reverse()\n  const { shorter, longer } = reversedNum1.length < reversedNum2.length\n    ? { shorter: reversedNum1, longer: reversedNum2 }\n    : { shorter: reversedNum2, longer: reversedNum1 }\n\n  let rem = 0\n  let result = longer.reduce((acc, digit1, index) => {\n    const total = parseInt(digit1, 10) + (parseInt(shorter[index], 10) || 0) + rem\n    if (total >= 10) {\n      rem = 1\n    } else {\n      rem = 0\n    }\n    return [\n      ...acc,\n      total >= 10 ? total - 10 : total,\n    ]\n  }, [])\n  result = rem === 1 ? [...result, rem] : result\n  return result.reverse().join('')\n}\n\nconst zero = (count) => {\n  let result = ''\n  while (count >= 1) {\n    result += '0'\n    count -= 1\n  }\n  return result\n}\nconst multiply = (num1 = '', num2 = '') => {\n  let result = 0\n  for (let i = num2.length - 1; i >= 0; i--) {\n    let current = ''\n    let base = 0\n    for (let j = num1.length - 1; j >= 0; j--) {\n      let currentResult = parseInt(num1[j], 10) * parseInt(num2[i], 10) + base\n      if (currentResult >= 10) {\n        base = Math.floor(currentResult / 10)\n        currentResult -= base * 10\n      } else {\n        base = 0\n      }\n      current = '$'{currentResult + current}'\n    }\n    if (base > 0) {\n      current = base + current\n    }\n    // 偷懒\n    result = addStrings(result || '0', current + zero(num2.length - 1 - i))\n  }\n  if (result.length > 0 && result[0] === '0') {\n    return '0'\n  }\n  return result\n}\n\n\nconsole.log(addStrings(\"2\",\"3\"))`.trim();\n\nconst jump = `\nconst jump = (nums = []) => {\n  let steps = 0\n  let currentJumpIndex = 0\n  let nextJumpIndex = 0\n  for (let i = 0; i < nums.length - 1; i++) {\n    nextJumpIndex = Math.max(i + nums[i], nextJumpIndex)\n    if (i === currentJumpIndex) {\n      steps += 1\n      currentJumpIndex = nextJumpIndex\n    }\n  }\n  return steps\n}\n\n\nconsole.log(jump([2,3,1,1,4]))`.trim();\n\nconst permute = `\nconst permute = (nums = []) => {\n  const result = []\n  const aux = (list = [], current = []) => {\n    if (list.length === 0) {\n      result.push(current)\n    }\n    list.forEach((number, index) => {\n      aux(list.filter((v, index2) => index2 !== index), [...current, number])\n    })\n  }\n  aux(nums)\n  return result\n}\n\n\nconsole.log(permute([1,2,3]))`.trim();\n\n\nclass DSLogic2 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Remove Element</h3>\n              Given an array nums and a value val, remove all instances of that value in-place and return the new length.\n              <br/>\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n<br/>\nThe order of elements can be changed. It doesn't matter what you leave beyond the new length.\n<br/><br/>\nExample 1:<br/>\n\nGiven nums = [3,2,2,3], val = 3,<br/>\nYour function should return length = 2, with the first two elements of nums being 2.<br/>\nIt doesn't matter what you leave beyond the returned length.\n              <div style={titles}>\n                <PrismCode\n                  code={removeElement}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>2. Implement strStr()</h3>\n              Implement strStr().<br/>\n\nReturn the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n<br/><br/>\nExample 1:<br/>\n\nInput: haystack = \"hello\", needle = \"ll\"<br/>\nOutput: 2<br/><br/>\nExample 2:<br/>\n\nInput: haystack = \"aaaaa\", needle = \"bba\"<br/>\nOutput: -1\n              <div style={titles}>\n                <PrismCode\n                  code={strStr}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>3. Find First and Last Position of Element in Sorted Array</h3>\n              Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\n              <br/>\nYour algorithm's runtime complexity must be in the order of O(log n).<br/>\n\nIf the target is not found in the array, return [-1, -1].<br/>\n\nExample 1:\n<br/>\nInput: nums = [5,7,7,8,8,10], target = 8<br/>\nOutput: [3,4]<br/><br/>\nExample 2:<br/>\n\nInput: nums = [5,7,7,8,8,10], target = 6<br/>\nOutput: [-1,-1]\n              <div style={titles}>\n                <PrismCode\n                  code={searchRange}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>4. Search Insert Position.</h3>\n              Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n              <br/>\n              Input: [1,3,5,6], 5<br/>\nOutput: 2<br/><br/>\nExample 2:<br/>\n\nInput: [1,3,5,6], 2<br/>\nOutput: 1\n              <div style={titles}>\n                <PrismCode\n                  code={searchInsert}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>5. Valid Sudoku.</h3>\n              Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n              <br/><br/>\nEach row must contain the digits 1-9 without repetition.<br/>\nEach column must contain the digits 1-9 without repetition.<br/>\nEach of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.<br/><br/>\n<b>Note: </b>\nA Sudoku board (partially filled) could be valid but is not necessarily solvable.<br/>\nOnly the filled cells need to be validated according to the mentioned rules.<br/>\nThe given board contain only digits 1-9 and the character '.'.<br/>\nThe given board size is always 9x9.\n              <div style={titles}>\n                <PrismCode\n                  code={isValidSudoku}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>6. Combination Sum</h3>\n              Input: candidates = [2,3,6,7], target = 7,<br/>\nA solution set is:<br/>\n[<br/>\n  [7],<br/>\n  [2,2,3]<br/>\n]\n              <div style={titles}>\n                <PrismCode\n                  code={combinationSum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>7. First Missing Positive</h3>\n              Input: [3,4,-1,1]<br/>\nOutput: 2\n              <div style={titles}>\n                <PrismCode\n                  code={firstMissingPositive}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>8. Multiply Strings</h3>\n              Input: num1 = \"2\", num2 = \"3\" <br/>\nOutput: \"6\"\n              <div style={titles}>\n                <PrismCode\n                  code={addStrings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>9. Jump Game</h3>\n              Given an array of non-negative integers, you are initially positioned at the first index of the array.\n              <br/>\nEach element in the array represents your maximum jump length at that position.<br/>\n\nYour goal is to reach the last index in the minimum number of jumps.<br/><br/>\nInput: [2,3,1,1,4]<br/>\nOutput: 2<br/>\nExplanation: The minimum number of jumps to reach the last index is 2.\n    Jump 1 step from index 0 to 1, then 3 steps to the last index.<br/><br/>\n    <b>N: </b>You can assume that you can always reach the last index.\n              <div style={titles}>\n                <PrismCode\n                  code={jump}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>10. Permutations.</h3>\n              Given a collection of distinct integers, return all possible permutations.\n              <div style={titles}>\n                <PrismCode\n                  code={permute}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic2));\n"]},"metadata":{},"sourceType":"module"}