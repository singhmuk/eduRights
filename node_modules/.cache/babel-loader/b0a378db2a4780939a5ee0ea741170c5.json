{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../styles.css';import Sidebar from'../sidebar';import PrismCode from'../prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var getLists=\"\\n//AddTaskForm.js\\nexport default class AddTaskForm extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      editing: false\\n    }\\n  }\\n\\n  onSubmit(event) {\\n    event.preventDefault();\\n    const taskText = this.textInput.value.trim();\\n    const listNumber = this.props.formNum;\\n    console.log(listNumber)\\n    if (taskText && this.props.onAdd) {\\n      this.props.onAdd(taskText, listNumber);\\n    }\\n    this.textInput.value = '';\\n  }\\n\\n setEditing(editing) {\\n    this.setState({\\n      editing\\n    });\\n  }\\n\\n  render() {\\n    if(!this.state.editing) {\\n      return (\\n        <div onClick={() => this.setEditing(true)}>\\n          <a href=\\\"#\\\">Add a task!</a>\\n        </div>  \\n        ); \\n    }\\n      return (\\n        <form onSubmit={(e) => this.onSubmit(e)}>\\n          <input type=\\\"text\\\" ref={input => this.textInput = input} aria-label=\\\"Add a task\\\" />\\n          <div>\\n            <button>Add Task</button>\\n            <button onClick={() => this.setEditing(false)}>Cancel</button>\\n          </div>\\n        </form>\\n      );\\n  }\\n}\\n\\n\\n//TaskCard.js\\nimport React from 'react';\\n\\nexport default function TaskCard(props) {\\n  return (\\n    <div className=\\\"task-card\\\" draggable=\\\"true\\\" id={[props.timeId]} onDragStart={props.onDragStart}>\\n      {props.taskText}\\n    </div>\\n  ) \\n};\\n\\n\\n//List.js\\nimport TaskCard from './TaskCard';\\nimport AddTaskForm from './AddTaskForm';\\n\\n\\nexport default class List extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    }\\n   \\n  render() {\\n    const cards = this.props.cards.map((card, index) => {\\n      return ( \\n        <li key={index}>\\n          <TaskCard {...card} onDragStart={this.props.onDragStart} />\\n        </li>\\n      );\\n    })\\n      \\n    return (\\n      <div>\\n        <h2>{this.props.title}</h2>\\n        <ul className=\\\"list\\\" onDragOver={this.props.onDragOver} onDrop={this.props.onDrop}>\\n          {cards}\\n          <li>\\n            <AddTaskForm formNum={this.props.id} onAdd={this.props.onAdd} />\\n          </li>\\n        </ul>\\n      </div>\\n    );\\n  }\\n}\\n\\n\\n//App.js\\nimport List from './kanban/List';\\nimport \\\"./App.css\\\"\\n\\nexport default class Board extends Component {\\n  constructor(props) {\\n    super(props);\\n      this.state = {\\n        lists: [\\n          {title: 'Derrick', id: 0,\\n            cards: [{ taskText: 'default task card 1', listNumber: 0, timeId: 0 }, \\n            { taskText: 'default task card 2', listNumber: 0, timeId: 1 }]\\n          },\\n          { title: 'Maxwell', id: 1,\\n            cards: [{ taskText: 'default task card 1', listNumber: 1, timeId: 2 }, \\n            { taskText: 'default task card 2', listNumber: 1, timeId: 3 }]\\n          },\\n          { title: 'Zaza', id: 2,\\n            cards: [{ taskText: 'default task card 1', listNumber: 2, timeId: 4 }, \\n            { taskText: 'default task card 2', listNumber: 2, timeId: 5 }]\\n          },\\n          { title: 'Sam', id: 3,\\n            cards: [{ taskText: 'default task card 1', listNumber: 3, timeId: 6 }, \\n            { taskText: 'default task card 2', listNumber: 3, timeId: 7 }]\\n          }\\n        ]\\n      }\\n\\n      localStorage.setItem('lists', JSON.stringify(this.state.lists))\\n    }\\n\\n  //get id of item being dragged and list where it's coming from\\n  onDragStart = (e, fromList) => {\\n    const dragInfo = {\\n      taskId: e.currentTarget.id,\\n      fromList: fromList\\n    }\\n  \\n    localStorage.setItem('dragInfo', JSON.stringify(dragInfo));\\n  }\\n\\n  onDragOver = (e) => {\\n    e.preventDefault();\\n  }\\n\\n  onDrop = (e, listNum) => {\\n    //get the dropped task card, the localStorage, \\n    const droppedTask = localStorage.getItem('dragInfo');\\n    const rawLS = localStorage.getItem('lists');\\n    const parsedLS = JSON.parse(rawLS);\\n    const parsedDragInfo = JSON.parse(droppedTask)\\n    \\n    //get task cards array, get rid of moved card, and put a new card\\n    // in the list where it was dropped\\n    const cardsArray = parsedLS[parsedDragInfo.fromList].cards\\n    const taskCard = cardsArray.find(card => card.timeId == parsedDragInfo.taskId)\\n    const indexOfCard = cardsArray.findIndex(card => card.timeId == parsedDragInfo.taskId)\\n    parsedLS[parsedDragInfo.fromList].cards.splice(indexOfCard, 1)\\n    parsedLS[listNum].cards.push({...taskCard, listNumber: parseInt(listNum)})\\n   \\n    //sync the state and localStorage\\n    this.setState({\\n      lists: parsedLS\\n    });\\n    localStorage.setItem('lists', JSON.stringify(parsedLS));\\n    \\n  }\\n\\n  //add some new task cards\\n  addTaskCard(taskText, listNumber) {\\n    const rawLS = localStorage.getItem('lists');\\n    const parsedLS = JSON.parse(rawLS);\\n\\n    const newTask = {\\n      taskText,\\n      listNumber,\\n      timeId: new Date().valueOf()\\n    }\\n\\n    parsedLS[listNumber].cards.push(newTask)\\n\\n    //sync state and localStorage\\n    this.setState({\\n      lists: parsedLS\\n    })\\n    localStorage.setItem('lists', JSON.stringify(parsedLS))\\n  \\n  }\\n\\n\\nrender() {\\n  const lists = this.state.lists.map((list, index) => (\\n    <li key={index}>\\n      <List {...list} \\n        onAdd={(taskText, listNumber) => this.addTaskCard(taskText, listNumber)} \\n        onDragStart={(e, fromList) => this.onDragStart(e, ''$'{list.id}')}\\n        onDragOver={(e) => this.onDragOver(e)} \\n        onDrop={(e, listNum) => {this.onDrop(e, ''$'{list.id}')}}\\n      />\\n    </li>\\n  ));\\n   \\n  return (\\n    <div>\\n      <ul className=\\\"lists\\\">\\n        {lists}\\n      </ul>\\n    </div>\\n  );\\n  }\\n}\\n\".trim();var App=\"\\n.lists {\\n  display: flex;\\n  flex-direction: row;\\n  flex-wrap: wrap;\\n  align-items: flex-start;\\n  justify-content: space-evenly;\\n  padding: 0;\\n  list-style-type: none;\\n}\\n\\n.list {\\n  list-style-type: none;\\n  background: #E0E0E0;\\n  padding: 8px;\\n}\\n\\n.task-card {\\n  background: #ffffff;\\n  margin-bottom: 8px;\\n  padding: 8px;\\n  border-radius: 2px;\\n  word-break: break-all;\\n  word-wrap: break-word;\\n  cursor: pointer;\\n}\\n\\n.task-card:hover {\\n  background-color: #f9f3f3;\\n}\".trim();var Kanban=/*#__PURE__*/function(_Component){_inherits(Kanban,_Component);function Kanban(){_classCallCheck(this,Kanban);return _possibleConstructorReturn(this,_getPrototypeOf(Kanban).apply(this,arguments));}_createClass(Kanban,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Kanban\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:getLists,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"1App.css\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:App,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return Kanban;}(Component);export default withStyles(styles)(Kanban);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/kanban.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","getLists","trim","App","Kanban","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,eAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,cAAtB,CAGA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,eAAe,CAAE,SAAnB,CAA8BC,OAAO,CAAE,KAAvC,CAA8CC,QAAQ,CAAE,MAAxD,CAAf,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,KAAK,CAAE,CACLC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH,CAELN,OAAO,CAAEG,KAAK,CAACG,OAAN,CAAc,CAAd,CAFJ,CADgB,CAKvBC,QAAQ,CAAE,CACRF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA,CALa,CAQvBE,SAAS,CAAE,CACTC,SAAS,CAAE,QADF,CARY,CAAL,EAApB,CAcA,GAAMC,CAAAA,QAAQ,CAAG,48KA6MfC,IA7Me,EAAjB,CA+MA,GAAMC,CAAAA,GAAG,CAAG,+eA6BTD,IA7BS,EAAZ,C,GAgCME,CAAAA,M,sRACgB,CAClBC,UAAU,CAAC,iBAAMvB,CAAAA,KAAK,CAACwB,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAACZ,KAA1B,EACE,8BAAI,oBAAC,OAAD,MAAJ,CADF,CADF,CADF,CAOE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEY,OAAO,CAACZ,KAA1B,EACE,oBAAC,IAAD,MACE,uCADF,CAEE,2BAAK,KAAK,CAAEN,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEY,QADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAFF,CASE,8BATF,CAWE,yCAXF,CAYE,2BAAK,KAAK,CAAEZ,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEc,GADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAZF,CADF,CADF,CAPF,CADF,CAkCD,C,oBAxCkBtB,S,EA2CrB,cAAgBI,CAAAA,UAAU,CAACQ,MAAD,CAAV,CAAmBW,MAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst getLists = `\n//AddTaskForm.js\nexport default class AddTaskForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editing: false\n    }\n  }\n\n  onSubmit(event) {\n    event.preventDefault();\n    const taskText = this.textInput.value.trim();\n    const listNumber = this.props.formNum;\n    console.log(listNumber)\n    if (taskText && this.props.onAdd) {\n      this.props.onAdd(taskText, listNumber);\n    }\n    this.textInput.value = '';\n  }\n\n setEditing(editing) {\n    this.setState({\n      editing\n    });\n  }\n\n  render() {\n    if(!this.state.editing) {\n      return (\n        <div onClick={() => this.setEditing(true)}>\n          <a href=\"#\">Add a task!</a>\n        </div>  \n        ); \n    }\n      return (\n        <form onSubmit={(e) => this.onSubmit(e)}>\n          <input type=\"text\" ref={input => this.textInput = input} aria-label=\"Add a task\" />\n          <div>\n            <button>Add Task</button>\n            <button onClick={() => this.setEditing(false)}>Cancel</button>\n          </div>\n        </form>\n      );\n  }\n}\n\n\n//TaskCard.js\nimport React from 'react';\n\nexport default function TaskCard(props) {\n  return (\n    <div className=\"task-card\" draggable=\"true\" id={[props.timeId]} onDragStart={props.onDragStart}>\n      {props.taskText}\n    </div>\n  ) \n};\n\n\n//List.js\nimport TaskCard from './TaskCard';\nimport AddTaskForm from './AddTaskForm';\n\n\nexport default class List extends React.Component {\n  constructor(props) {\n    super(props);\n    }\n   \n  render() {\n    const cards = this.props.cards.map((card, index) => {\n      return ( \n        <li key={index}>\n          <TaskCard {...card} onDragStart={this.props.onDragStart} />\n        </li>\n      );\n    })\n      \n    return (\n      <div>\n        <h2>{this.props.title}</h2>\n        <ul className=\"list\" onDragOver={this.props.onDragOver} onDrop={this.props.onDrop}>\n          {cards}\n          <li>\n            <AddTaskForm formNum={this.props.id} onAdd={this.props.onAdd} />\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\n\n//App.js\nimport List from './kanban/List';\nimport \"./App.css\"\n\nexport default class Board extends Component {\n  constructor(props) {\n    super(props);\n      this.state = {\n        lists: [\n          {title: 'Derrick', id: 0,\n            cards: [{ taskText: 'default task card 1', listNumber: 0, timeId: 0 }, \n            { taskText: 'default task card 2', listNumber: 0, timeId: 1 }]\n          },\n          { title: 'Maxwell', id: 1,\n            cards: [{ taskText: 'default task card 1', listNumber: 1, timeId: 2 }, \n            { taskText: 'default task card 2', listNumber: 1, timeId: 3 }]\n          },\n          { title: 'Zaza', id: 2,\n            cards: [{ taskText: 'default task card 1', listNumber: 2, timeId: 4 }, \n            { taskText: 'default task card 2', listNumber: 2, timeId: 5 }]\n          },\n          { title: 'Sam', id: 3,\n            cards: [{ taskText: 'default task card 1', listNumber: 3, timeId: 6 }, \n            { taskText: 'default task card 2', listNumber: 3, timeId: 7 }]\n          }\n        ]\n      }\n\n      localStorage.setItem('lists', JSON.stringify(this.state.lists))\n    }\n\n  //get id of item being dragged and list where it's coming from\n  onDragStart = (e, fromList) => {\n    const dragInfo = {\n      taskId: e.currentTarget.id,\n      fromList: fromList\n    }\n  \n    localStorage.setItem('dragInfo', JSON.stringify(dragInfo));\n  }\n\n  onDragOver = (e) => {\n    e.preventDefault();\n  }\n\n  onDrop = (e, listNum) => {\n    //get the dropped task card, the localStorage, \n    const droppedTask = localStorage.getItem('dragInfo');\n    const rawLS = localStorage.getItem('lists');\n    const parsedLS = JSON.parse(rawLS);\n    const parsedDragInfo = JSON.parse(droppedTask)\n    \n    //get task cards array, get rid of moved card, and put a new card\n    // in the list where it was dropped\n    const cardsArray = parsedLS[parsedDragInfo.fromList].cards\n    const taskCard = cardsArray.find(card => card.timeId == parsedDragInfo.taskId)\n    const indexOfCard = cardsArray.findIndex(card => card.timeId == parsedDragInfo.taskId)\n    parsedLS[parsedDragInfo.fromList].cards.splice(indexOfCard, 1)\n    parsedLS[listNum].cards.push({...taskCard, listNumber: parseInt(listNum)})\n   \n    //sync the state and localStorage\n    this.setState({\n      lists: parsedLS\n    });\n    localStorage.setItem('lists', JSON.stringify(parsedLS));\n    \n  }\n\n  //add some new task cards\n  addTaskCard(taskText, listNumber) {\n    const rawLS = localStorage.getItem('lists');\n    const parsedLS = JSON.parse(rawLS);\n\n    const newTask = {\n      taskText,\n      listNumber,\n      timeId: new Date().valueOf()\n    }\n\n    parsedLS[listNumber].cards.push(newTask)\n\n    //sync state and localStorage\n    this.setState({\n      lists: parsedLS\n    })\n    localStorage.setItem('lists', JSON.stringify(parsedLS))\n  \n  }\n\n\nrender() {\n  const lists = this.state.lists.map((list, index) => (\n    <li key={index}>\n      <List {...list} \n        onAdd={(taskText, listNumber) => this.addTaskCard(taskText, listNumber)} \n        onDragStart={(e, fromList) => this.onDragStart(e, ''$'{list.id}')}\n        onDragOver={(e) => this.onDragOver(e)} \n        onDrop={(e, listNum) => {this.onDrop(e, ''$'{list.id}')}}\n      />\n    </li>\n  ));\n   \n  return (\n    <div>\n      <ul className=\"lists\">\n        {lists}\n      </ul>\n    </div>\n  );\n  }\n}\n`.trim();\n\nconst App = `\n.lists {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  justify-content: space-evenly;\n  padding: 0;\n  list-style-type: none;\n}\n\n.list {\n  list-style-type: none;\n  background: #E0E0E0;\n  padding: 8px;\n}\n\n.task-card {\n  background: #ffffff;\n  margin-bottom: 8px;\n  padding: 8px;\n  border-radius: 2px;\n  word-break: break-all;\n  word-wrap: break-word;\n  cursor: pointer;\n}\n\n.task-card:hover {\n  background-color: #f9f3f3;\n}`.trim();\n\n\nclass Kanban extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Kanban</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={getLists}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>1App.css</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={App}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Kanban));\n"]},"metadata":{},"sourceType":"module"}