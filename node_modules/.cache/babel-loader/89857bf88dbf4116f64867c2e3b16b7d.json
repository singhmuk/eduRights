{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic5.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst rob = `\nconst rob = (nums = []) => {\n  const memo = {}\n  const aux = (index = 0) => {\n    if (memo[index] !== undefined) {\n      return memo[index]\n    }\n    if (index >= nums.length) {\n      return 0\n    }\n    memo[index] = Math.max(\n      aux(index + 2) + nums[index],\n      aux(index + 1),\n    )\n    return memo[index]\n  }\n  return aux()\n}\n\nconsole.log(rob([2,7,9,3,1]))`.trim();\nconst maxArea = `\nconst maxArea = (height = []) => {\n  let max = 0\n  let left = 0\n  let right = height.length - 1\n  while (left < right) {\n    max = Math.max(max, Math.min(height[left], height[right]) * (right - left))\n    if (height[left] <= height[right]) {\n      left += 1\n    } else {\n      right -= 1\n    }\n  }\n  return max\n}\n\nconsole.log(maxArea([1,8,6,2,5,4,8,3,7]))`.trim();\nconst isValidSudoku = `\nconst isValidSudoku = (board = []) => {\n  const rows = []\n  const columns = []\n  const boxes = []\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      const content = board[i][j]\n      if (content !== '.') {\n        if (!rows[i]) {\n          rows[i] = {}\n        }\n        if (rows[i][content]) {\n          return false\n        }\n        rows[i][content] = 1\n\n        if (!columns[j]) {\n          columns[j] = {}\n        }\n        if (columns[j][content]) {\n          return false\n        }\n        columns[j][content] = 1\n        const boxNum = Math.floor(i / 3) * 3 + Math.floor(j / 3)\n        if (!boxes[boxNum]) {\n          boxes[boxNum] = {}\n        }\n        if (boxes[boxNum][content]) {\n          return false\n        }\n        boxes[boxNum][content] = 1\n      }\n    }\n  }\n  return true\n}\n\nconsole.log(isValidSudoku([\n  [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n  [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n  [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n  [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n  [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n  [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n  [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n  [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n  [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n]))`.trim();\nconst jump = `\nconst jump = (nums = []) => {\n  let steps = 0\n  let currentJumpIndex = 0\n  let nextJumpIndex = 0\n  for (let i = 0; i < nums.length - 1; i++) {\n    nextJumpIndex = Math.max(i + nums[i], nextJumpIndex)\n    if (i === currentJumpIndex) {\n      steps += 1\n      currentJumpIndex = nextJumpIndex\n    }\n  }\n  return steps\n}\n\nconsole.log(jump([2,3,1,1,4]))`.trim();\nconst climbStairs = `\nconst climbStairs = (n) => {\n  const memo = {}\n  const aux = (count = 0) => {\n    if (memo[count] !== undefined) {\n      return memo[count]\n    }\n    if (count === n) {\n      return 1\n    }\n    if (count > n) {\n      return 0\n    }\n    memo[count] = aux(count + 1) + aux(count + 2)\n    return memo[count]\n  }\n  return aux()\n}\n\nconsole.log(climbStairs(3))`.trim();\nconst judgePoint24 = `\nconst judgePoint24 = function (nums) {\n  const isValid = x => Math.abs(x - 24) < 0.0000001\n  const aux = (arr = []) => {\n    if (arr.length === 1) {\n      return isValid(arr[0])\n    }\n    let valid = false\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = i + 1; j < arr.length; j++) {\n        const nextArr = arr.filter((x, index) => index !== i && index !== j)\n        valid = valid || aux([...nextArr, arr[i] + arr[j]])\n          || aux([...nextArr, arr[i] - arr[j]])\n          || aux([...nextArr, arr[j] - arr[i]])\n          || aux([...nextArr, arr[i] * arr[j]])\n          || aux([...nextArr, arr[i] / arr[j]])\n          || aux([...nextArr, arr[j] / arr[i]])\n      }\n    }\n    return valid\n  }\n\n  return aux(nums)\n}\n\nconsole.log(judgePoint24([4, 1, 8, 7]))`.trim();\nconst numTimesAllBlue = `\nconst numTimesAllBlue = function (light) {\n  let moment = 0\n  let max = -1\n  for (let i = 0; i < light.length; i++) {\n    max = Math.max(max, light[i])\n    if (i + 1 === max) {\n      moment += 1\n    }\n  }\n  return moment\n}\n\nconsole.log(numTimesAllBlue([3,2,4,1,5]))`.trim();\nconst destCity = `\nconst destCity = function (paths) {\n  let result = ''\n  const map = paths.reduce((acc, [a, b]) => {\n    acc[a] = 1\n    acc[b] = (acc[b] || 0)\n    if (acc[b] === 0) {\n      result = b\n    }\n    return acc\n  }, {})\n  return Object.keys(map).filter(x => map[x] === 0)[0]\n}\n\nconsole.log(destCity([[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]))`.trim();\nconst maxScore = `\nconst maxScore = function (nums, k) {\n  const size = nums.length - k\n  let currentSum = nums.slice(0, size).reduce((acc, num) => acc + num, 0)\n  let min = currentSum\n  for (let i = size; i < nums.length; i++) {\n    currentSum = currentSum + nums[i] - nums[i - size]\n    min = Math.min(min, currentSum)\n  }\n  return nums.reduce((acc, num) => acc + num, 0) - min\n}\n\nconsole.log(maxScore([1,79,80,1,1,1,200,1], 3))`.trim();\nconst getHint = `\nvar getHint = function(secret, guess) {\n  const secretMap = {}\n  for(let c of secret) {\n      secretMap[c] = secretMap[c] || 0\n      secretMap[c] += 1\n  }\n  let bulls = 0\n  let cows = 0\n  let used = {}\n  for(let i = 0; i< guess.length; i++) {\n      if(guess[i] === secret[i] && secretMap[guess[i]] > 0) {\n          bulls += 1\n          secretMap[guess[i]]--\n      }  \n  }\n\n  for(let i = 0; i< guess.length; i++) { \n      if(guess[i] !== secret[i] && secretMap[guess[i]] > 0) {\n          cows += 1\n          secretMap[guess[i]]--\n      }\n  }\n  return bulls + \"A\" + cows + \"B\"\n};\n\nconsole.log(getHint(\"1123\", \"0111\"))`.trim();\nconst graph = ``.trim();\n\nclass DSLogic5 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, \"1. House Robber.\"), \"You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }), \"Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }), \"Input: nums = [1,2,3,1]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }), \"Output: 4\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }), \"Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: rob,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, \"2. Container With Most Water\"), \"Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, \"Note: \"), \"You may not slant the container and n is at least 2.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }), \"Example:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }), \"Input: [1,8,6,2,5,4,8,3,7]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }), \"Output: 49\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maxArea,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, \"3. Valid Sudoku.\"), \"Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }), \"Each row must contain the digits 1-9 without repetition.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }), \"Each column must contain the digits 1-9 without repetition.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }), \"Each of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, \"Note: \"), \"A Sudoku board (partially filled) could be valid but is not necessarily solvable.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }), \"Only the filled cells need to be validated according to the mentioned rules.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }), \"The given board contain only digits 1-9 and the character '.'.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }), \"The given board size is always 9x9.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isValidSudoku,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, \"4. Jump Game\"), \"Given an array of non-negative integers, you are initially positioned at the first index of the array.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }), \"Each element in the array represents your maximum jump length at that position.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }), \"Your goal is to reach the last index in the minimum number of jumps.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }), \"Input: [2,3,1,1,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }), \"Output: 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }), \"Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, \"N: \"), \"You can assume that you can always reach the last index.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: jump,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, \"5. Climbing Stairs.\"), \"You are climbing a stair case. It takes n steps to reach to the top.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }), \"Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }), \"Input: 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }), \"Output: 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }), \"Explanation: There are two ways to climb to the top.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }), \"1. 1 step + 1 step\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }), \"2. 2 steps\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }), \"Input: 3\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }), \"Output: 3\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }), \"Explanation: There are three ways to climb to the top.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }), \"1. 1 step + 1 step + 1 step\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }), \"2. 1 step + 2 steps\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }), \"3. 2 steps + 1 step\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: climbStairs,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }, \"6. 24 Game.\"), \"You have 4 cards each containing a number from 1 to 9. You need to judge whether they could operated through *, /, +, -, (, ) to get the value of 24.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, \"Input: \"), \"[4, 1, 8, 7]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, \"Output: \"), \"True\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, \"Explanation: \"), \"(8-4) * (7-1) = 24\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: judgePoint24,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, \"7. Bulb Switcher.\"), \"There is a room with n bulbs, numbered from 1 to n, arranged in a row from left to right. Initially, all the bulbs are turned off.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }), \"At moment k (for k from 0 to n - 1), we turn on the light[k] bulb. A bulb change color to blue only if it is on and all the previous bulbs (to the left) are turned on too.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }), \"Return the number of moments in which all turned on bulbs are blue.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, \"Input: \"), \"light = [2,1,3,5,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, \"Output: \"), \"3\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }, \"Explanation: \"), \"All bulbs turned on, are blue at the moment 1, 2 and 4.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: numTimesAllBlue,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }, \"8. Destination City.\"), \"You are given the array paths, where paths[i] = [cityAi, cityBi] means there exists a direct path going from cityAi to cityBi. Return the destination city, that is, the city without any path outgoing to another city.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    }), \"It is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, \"Input: \"), \"paths = [[\\\"London\\\",\\\"New York\\\"],[\\\"New York\\\",\\\"Lima\\\"],[\\\"Lima\\\",\\\"Sao Paulo\\\"]]\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, \"Output: \"), \"\\\"Sao Paulo\\\"\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }, \"Explanation: \"), \"Starting at \\\"London\\\" city you will reach \\\"Sao Paulo\\\" city which is the destination city. Your trip consist of: \\\"London\\\" - \\\"New York\\\" - \\\"Lima\\\" - \\\"Sao Paulo\\\".\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: destCity,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }, \"9. Maximum Points You Can Obtain from Cards.\"), \"There are several cards arranged in a row, and each card has an associated number of points The points are given in the integer array cardPoints.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }), \"In one step, you can take one card from the beginning or from the end of the row. You have to take exactly k cards.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }), \"Your score is the sum of the points of the cards you have taken.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }), \"Given the integer array cardPoints and the integer k, return the maximum score you can obtain.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maxScore,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    }, \"10. Bulls and Cows.\"), \"You are playing the following Bulls and Cows game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called \\\"bulls\\\") and how many digits match the secret number but locate in the wrong position (called \\\"cows\\\"). Your friend will use successive guesses and hints to eventually derive the secret number.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }), \"Write a function to return a hint according to the secret number and friend's guess, use A to indicate the bulls and B to indicate the cows.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }), \"Please note that both secret number and friend's guess may contain duplicate digits.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }, \"nput: \"), \"Isecret = \\\"1807\\\", guess = \\\"7810\\\" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, \"Output: \"), \"I\\\"1A3B\\\" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }, \"Explanation: \"), \"I1 bull and 3 cows. The bull is 8, the cows are 0, 1 and 7.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: getHint,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default withStyles(styles)(DSLogic5);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic5.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","rob","trim","maxArea","isValidSudoku","jump","climbStairs","judgePoint24","numTimesAllBlue","destCity","maxScore","getHint","graph","DSLogic5","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst rob = `\nconst rob = (nums = []) => {\n  const memo = {}\n  const aux = (index = 0) => {\n    if (memo[index] !== undefined) {\n      return memo[index]\n    }\n    if (index >= nums.length) {\n      return 0\n    }\n    memo[index] = Math.max(\n      aux(index + 2) + nums[index],\n      aux(index + 1),\n    )\n    return memo[index]\n  }\n  return aux()\n}\n\nconsole.log(rob([2,7,9,3,1]))`.trim();\n\n\nconst maxArea = `\nconst maxArea = (height = []) => {\n  let max = 0\n  let left = 0\n  let right = height.length - 1\n  while (left < right) {\n    max = Math.max(max, Math.min(height[left], height[right]) * (right - left))\n    if (height[left] <= height[right]) {\n      left += 1\n    } else {\n      right -= 1\n    }\n  }\n  return max\n}\n\nconsole.log(maxArea([1,8,6,2,5,4,8,3,7]))`.trim();\n\nconst isValidSudoku = `\nconst isValidSudoku = (board = []) => {\n  const rows = []\n  const columns = []\n  const boxes = []\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      const content = board[i][j]\n      if (content !== '.') {\n        if (!rows[i]) {\n          rows[i] = {}\n        }\n        if (rows[i][content]) {\n          return false\n        }\n        rows[i][content] = 1\n\n        if (!columns[j]) {\n          columns[j] = {}\n        }\n        if (columns[j][content]) {\n          return false\n        }\n        columns[j][content] = 1\n        const boxNum = Math.floor(i / 3) * 3 + Math.floor(j / 3)\n        if (!boxes[boxNum]) {\n          boxes[boxNum] = {}\n        }\n        if (boxes[boxNum][content]) {\n          return false\n        }\n        boxes[boxNum][content] = 1\n      }\n    }\n  }\n  return true\n}\n\nconsole.log(isValidSudoku([\n  [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n  [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n  [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n  [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n  [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n  [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n  [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n  [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n  [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n]))`.trim();\n\nconst jump = `\nconst jump = (nums = []) => {\n  let steps = 0\n  let currentJumpIndex = 0\n  let nextJumpIndex = 0\n  for (let i = 0; i < nums.length - 1; i++) {\n    nextJumpIndex = Math.max(i + nums[i], nextJumpIndex)\n    if (i === currentJumpIndex) {\n      steps += 1\n      currentJumpIndex = nextJumpIndex\n    }\n  }\n  return steps\n}\n\nconsole.log(jump([2,3,1,1,4]))`.trim();\n\nconst climbStairs = `\nconst climbStairs = (n) => {\n  const memo = {}\n  const aux = (count = 0) => {\n    if (memo[count] !== undefined) {\n      return memo[count]\n    }\n    if (count === n) {\n      return 1\n    }\n    if (count > n) {\n      return 0\n    }\n    memo[count] = aux(count + 1) + aux(count + 2)\n    return memo[count]\n  }\n  return aux()\n}\n\nconsole.log(climbStairs(3))`.trim();\n\nconst judgePoint24 = `\nconst judgePoint24 = function (nums) {\n  const isValid = x => Math.abs(x - 24) < 0.0000001\n  const aux = (arr = []) => {\n    if (arr.length === 1) {\n      return isValid(arr[0])\n    }\n    let valid = false\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = i + 1; j < arr.length; j++) {\n        const nextArr = arr.filter((x, index) => index !== i && index !== j)\n        valid = valid || aux([...nextArr, arr[i] + arr[j]])\n          || aux([...nextArr, arr[i] - arr[j]])\n          || aux([...nextArr, arr[j] - arr[i]])\n          || aux([...nextArr, arr[i] * arr[j]])\n          || aux([...nextArr, arr[i] / arr[j]])\n          || aux([...nextArr, arr[j] / arr[i]])\n      }\n    }\n    return valid\n  }\n\n  return aux(nums)\n}\n\nconsole.log(judgePoint24([4, 1, 8, 7]))`.trim();\n\nconst numTimesAllBlue = `\nconst numTimesAllBlue = function (light) {\n  let moment = 0\n  let max = -1\n  for (let i = 0; i < light.length; i++) {\n    max = Math.max(max, light[i])\n    if (i + 1 === max) {\n      moment += 1\n    }\n  }\n  return moment\n}\n\nconsole.log(numTimesAllBlue([3,2,4,1,5]))`.trim();\n\nconst destCity = `\nconst destCity = function (paths) {\n  let result = ''\n  const map = paths.reduce((acc, [a, b]) => {\n    acc[a] = 1\n    acc[b] = (acc[b] || 0)\n    if (acc[b] === 0) {\n      result = b\n    }\n    return acc\n  }, {})\n  return Object.keys(map).filter(x => map[x] === 0)[0]\n}\n\nconsole.log(destCity([[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]))`.trim();\n\nconst maxScore = `\nconst maxScore = function (nums, k) {\n  const size = nums.length - k\n  let currentSum = nums.slice(0, size).reduce((acc, num) => acc + num, 0)\n  let min = currentSum\n  for (let i = size; i < nums.length; i++) {\n    currentSum = currentSum + nums[i] - nums[i - size]\n    min = Math.min(min, currentSum)\n  }\n  return nums.reduce((acc, num) => acc + num, 0) - min\n}\n\nconsole.log(maxScore([1,79,80,1,1,1,200,1], 3))`.trim();\n\nconst getHint = `\nvar getHint = function(secret, guess) {\n  const secretMap = {}\n  for(let c of secret) {\n      secretMap[c] = secretMap[c] || 0\n      secretMap[c] += 1\n  }\n  let bulls = 0\n  let cows = 0\n  let used = {}\n  for(let i = 0; i< guess.length; i++) {\n      if(guess[i] === secret[i] && secretMap[guess[i]] > 0) {\n          bulls += 1\n          secretMap[guess[i]]--\n      }  \n  }\n\n  for(let i = 0; i< guess.length; i++) { \n      if(guess[i] !== secret[i] && secretMap[guess[i]] > 0) {\n          cows += 1\n          secretMap[guess[i]]--\n      }\n  }\n  return bulls + \"A\" + cows + \"B\"\n};\n\nconsole.log(getHint(\"1123\", \"0111\"))`.trim();\n\nconst graph = ``.trim();\n\n\nclass DSLogic5 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. House Robber.</h3>\n              You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\n              <br/><br/>\n              Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.\n              <br/><br/>\n              <b></b>Input: nums = [1,2,3,1]<br/>\n              Output: 4<br/>\n              Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\n             Total amount you can rob = 1 + 3 = 4.\n              <div style={titles}>\n                <PrismCode\n                  code={rob}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>2. Container With Most Water</h3>\n              Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\n              <br/><br/>\n<b>Note: </b>You may not slant the container and n is at least 2.\n<br/><br/>\nExample:<br/>\n\nInput: [1,8,6,2,5,4,8,3,7]<br/>\nOutput: 49\n              <div style={titles}>\n                <PrismCode\n                  code={maxArea}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <h3>3. Valid Sudoku.</h3>\n              Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n              <br/><br/>\nEach row must contain the digits 1-9 without repetition.<br/>\nEach column must contain the digits 1-9 without repetition.<br/>\nEach of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.<br/><br/>\n<b>Note: </b>\nA Sudoku board (partially filled) could be valid but is not necessarily solvable.<br/>\nOnly the filled cells need to be validated according to the mentioned rules.<br/>\nThe given board contain only digits 1-9 and the character '.'.<br/>\nThe given board size is always 9x9.\n              <div style={titles}>\n                <PrismCode\n                  code={isValidSudoku}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>4. Jump Game</h3>\n              Given an array of non-negative integers, you are initially positioned at the first index of the array.\n              <br/>\nEach element in the array represents your maximum jump length at that position.<br/>\n\nYour goal is to reach the last index in the minimum number of jumps.<br/><br/>\nInput: [2,3,1,1,4]<br/>\nOutput: 2<br/>\nExplanation: The minimum number of jumps to reach the last index is 2.\n    Jump 1 step from index 0 to 1, then 3 steps to the last index.<br/><br/>\n    <b>N: </b>You can assume that you can always reach the last index.\n              <div style={titles}>\n                <PrismCode\n                  code={jump}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>5. Climbing Stairs.</h3>\n              You are climbing a stair case. It takes n steps to reach to the top.<br/>\n\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?<br/>\n\nExample 1:<br/>\n\nInput: 2<br/>\nOutput: 2<br/>\nExplanation: There are two ways to climb to the top.<br/>\n1. 1 step + 1 step<br/>\n2. 2 steps<br/><br/>\nExample 2:<br/>\n\nInput: 3<br/>\nOutput: 3<br/>\nExplanation: There are three ways to climb to the top.<br/>\n1. 1 step + 1 step + 1 step<br/>\n2. 1 step + 2 steps<br/>\n3. 2 steps + 1 step\n\n              <div style={titles}>\n                <PrismCode\n                  code={climbStairs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n             <h3>6. 24 Game.</h3>\n              You have 4 cards each containing a number from 1 to 9. You need to judge whether they could operated through *, /, +, -, (, ) to get the value of 24.\n              <br/>\n              <br/>\n              <b>Input: </b>[4, 1, 8, 7]<br/>\n              <b>Output: </b>True<br/>\n              <b>Explanation: </b>(8-4) * (7-1) = 24\n              <div style={titles}>\n                <PrismCode\n                  code={judgePoint24}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/> \n\n              <h3>7. Bulb Switcher.</h3>\n              There is a room with n bulbs, numbered from 1 to n, arranged in a row from left to right. Initially, all the bulbs are turned off.\n              <br/>\n              At moment k (for k from 0 to n - 1), we turn on the light[k] bulb. A bulb change color to blue only if it is on and all the previous bulbs (to the left) are turned on too.\n              <br/>\n              Return the number of moments in which all turned on bulbs are blue.\n              <br/><br/>\n              <b>Input: </b>light = [2,1,3,5,4]<br/>\n              <b>Output: </b>3<br/>\n              <b>Explanation: </b>All bulbs turned on, are blue at the moment 1, 2 and 4.\n              <div style={titles}>\n                <PrismCode\n                  code={numTimesAllBlue}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n<h3>8. Destination City.</h3>\nYou are given the array paths, where paths[i] = [cityAi, cityBi] means there exists a direct path going from cityAi to cityBi. Return the destination city, that is, the city without any path outgoing to another city.\n<br/>\nIt is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.\n<br/>\n<b>Input: </b>paths = [[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]\n<b>Output: </b>\"Sao Paulo\" \n<b>Explanation: </b>Starting at \"London\" city you will reach \"Sao Paulo\" city which is the destination city. Your trip consist of: \"London\" - \"New York\" - \"Lima\" - \"Sao Paulo\".\n\n<div style={titles}>\n  <PrismCode\n    code={destCity}\n    language=\"js\"\n    plugins={[\"line-numbers\"]}\n  />\n</div>\n<br/>\n\n<h3>9. Maximum Points You Can Obtain from Cards.</h3>\nThere are several cards arranged in a row, and each card has an associated number of points The points are given in the integer array cardPoints.\n<br/>\nIn one step, you can take one card from the beginning or from the end of the row. You have to take exactly k cards.\n<br/>\nYour score is the sum of the points of the cards you have taken.\n<br/>\nGiven the integer array cardPoints and the integer k, return the maximum score you can obtain.\n<div style={titles}>\n  <PrismCode\n    code={maxScore}\n    language=\"js\"\n    plugins={[\"line-numbers\"]}\n  />\n</div>\n<br/>\n\n<h3>10. Bulls and Cows.</h3>\n              You are playing the following Bulls and Cows game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called \"bulls\") and how many digits match the secret number but locate in the wrong position (called \"cows\"). Your friend will use successive guesses and hints to eventually derive the secret number.\n              <br/>\n              Write a function to return a hint according to the secret number and friend's guess, use A to indicate the bulls and B to indicate the cows. \n              <br/>\n              Please note that both secret number and friend's guess may contain duplicate digits.\n              <br/>\n\n              <b>nput: </b>Isecret = \"1807\", guess = \"7810\" <br/>\n              <b>Output: </b>I\"1A3B\" <br/>\n              <b>Explanation: </b>I1 bull and 3 cows. The bull is 8, the cows are 0, 1 and 7.\n              <div style={titles}>\n                <PrismCode\n                  code={getHint}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic5));\n"]},"metadata":{},"sourceType":"module"}