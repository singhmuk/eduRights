{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/topTech.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst evalRPN = `\nconst evalRPN = function (tokens) {\n  const stack = []\n  const isOperator = token => token === '+' || token === '-' || token === '*' || token === '/'\n  for (const token of tokens) {\n    if (isOperator(token)) {\n      const b = stack.pop()\n      const a = stack.pop()\n      let result = 0\n      switch (token) {\n        case '+':\n          result = a + b\n          break\n        case '-':\n          result = a - b\n          break\n        case '/':\n          result = a / b\n          result = result < 0 ? Math.ceil(result) : Math.floor(a / b) // 注意负数向上取整\n          break\n        default:\n          result = a * b\n      }\n      stack.push(result)\n    } else {\n      stack.push(parseInt(token, 10))\n    }\n  }\n  return stack[0]\n}\nconsole.log(evalRPN([\"4\", \"13\", \"5\", \"/\", \"+\"]))`.trim();\nconst convertToTitle = `\nvar convertToTitle = function(n) {\n  var A = \"A\".charCodeAt(0);\n  var str = \"\";\n  while(n > 0) {\n      n--;\n      str = String.fromCharCode(A+n%26) + str;\n      n =parseInt(n/26);\n  }\n  \n  return str;\n};\n\nconsole.log(convertToTitle(701))`.trim();\nconst largestNumber = `\nconst largestNumber = function (nums = []) {\n  nums.sort((a, b) => {\n    const digitsA = a.toString(10) + b.toString(10)\n    const digitsB = b.toString(10) + a.toString(10)\n    for (let i = 0; i < digitsA.length; i++) {\n      const digitB = parseInt(digitsB[i], 10)\n      const digitA = parseInt(digitsA[i], 10)\n      if (digitB > digitA || digitB < digitA) {\n        return digitB - digitA\n      }\n    }\n    return 0\n  })\n  const result = nums.join('')\n  return result[0] === '0' ? '0' : result\n}\n\nconsole.log(largestNumber([10,2]))`.trim();\nconst combinationSum3 = `\nconst combinationSum3 = function (k, n) {\n  const result = []\n  const aux = (start, current, sum) => {\n    if (current.length > k) {\n      return\n    }\n    if (current.length === k) {\n      if (sum === n) {\n        result.push([...current])\n        return\n      }\n      return\n    }\n\n    for (let i = start; i <= 9; i++) {\n      current.push(i)\n      aux(i + 1, current, sum + i)\n      current.pop(i)\n    }\n  }\n  for (let i = 1; i <= 9; i++) {\n    aux(i + 1, [i], i)\n  }\n  return result\n}\n\nconsole.log(combinationSum3(3,7))`.trim();\nconst containsDuplicate = `\nconst containsDuplicate = (nums) => {\n  const map = {}\n  for (num of nums) {\n    if (map[num]) {\n      return true\n    }\n    map[num] = 1\n  }\n  return false\n}\n\nconsole.log(containsDuplicate([1,2,3,1]))`.trim();\nconst computeArea = `\nconst computeArea = function (A, B, C, D, E, F, G, H) {\n  const area = (pointA, pointB) => (pointB[0] - pointA[0]) * (pointB[1] - pointA[1])\n  const totalArea = area([A, B], [C, D]) + area([E, F], [G, H])\n  if (E >= C || G <= A || F >= D || H <= B) {\n    return totalArea\n  }\n  const pointA = [Math.max(A, E), Math.max(B, F)]\n  const pointB = [Math.min(C, G), Math.min(D, H)]\n  const overlapping = (pointB[0] - pointA[0]) * (pointB[1] - pointA[1])\n  return totalArea - overlapping\n}\n\nconsole.log(computeArea(-3, 0, 3, 4, 0, -1, 9, 2))`.trim();\nconst summaryRanges = `\nconst summaryRanges = function (nums) {\n  let start = null\n  const result = []\n  for (let i = 0; i < nums.length; i++) {\n    if (start === null) {\n      start = nums[i]\n    }\n    if (nums[i] === nums[i + 1] - 1) {\n      continue\n    }\n    if (nums[i] === start) {\n      result.push(nums[i].toString())\n      start = null\n    } else {\n      result.push('$'{start}->'$'{nums[i]}')\n      start = null\n    }\n  }\n  return result\n}\n\n\nconsole.log(summaryRanges([1,2,3,4,6,7,9]))`.trim();\nconst isPowerOfTwo = `\nconst isPowerOfTwo = (x) => {\n  if (x <= 0) {\n    return false\n  }\n  return (x & (x - 1)) === 0\n}\n\nconsole.log(isPowerOfTwo(16))`.trim();\nconst countDigitOne = `\nconst countDigitOne = function (n) {\n  const memo = {}\n  const aux = (number) => {\n    if (memo[number] !== undefined) {\n      return memo[number]\n    }\n    if (number <= 0) {\n      return 0\n    }\n    const str = number.toString()\n    const first = parseInt(str[0], 10)\n    const base = Math.pow(10, str.length - 1)\n    const reminder = number - first * base\n    if (first === 1) {\n      memo[number] = aux(base - 1) + reminder + 1 + aux(reminder)\n    } else {\n      memo[number] = first * aux(base - 1) + base + aux(reminder)\n    }\n    return memo[number]\n  }\n  return aux(n)\n}\n\nconsole.log(countDigitOne(16))`.trim();\nconst productExceptSelf = `\nconst productExceptSelf = (nums = []) => {\n  if(!nums.length) {\n      return nums\n  }\n  const product = [nums[0]]\n  for(let i = 1; i < nums.length; i++) {\n      product[i] = nums[i] * product[i-1]\n  }\n  let suffixProduct = 1\n  for(let i = nums.length -1; i >= 1; i--) {\n      product[i] = product[i-1] * suffixProduct\n      suffixProduct *= nums[i]\n  }\n  product[0] = suffixProduct\n  return product\n}\n\nconsole.log(productExceptSelf([1,2,3,4]))`.trim();\nconst arrayToClone = ``.trim(); // const arrayToClone = ``.trim();\n// const arrayToClone = ``.trim();\n// const arrayToClone = ``.trim();\n// const arrayToClone = ``.trim();\n// const arrayToClone = ``.trim();\n// const arrayToClone = ``.trim();\n// const arrayToClone = ``.trim();\n// const arrayToClone = ``.trim();\n// const arrayToClone = ``.trim();\n// const arrayToClone = ``.trim();\n// const arrayToClone = ``.trim();\n\nclass TopTech extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, \"1. Evaluate Reverse Polish Notation\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, \"Input: \"), \"[\\\"2\\\", \\\"1\\\", \\\"+\\\", \\\"3\\\", \\\"*\\\"]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, \"Output: \"), \"9\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, \"Explanation: \"), \"((2 + 1) * 3) = 9\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: evalRPN,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, \"2. Reverse Words in a String.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, \"Note: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, \"A word is defined as a sequence of non-space characters.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, \"Input string may contain leading or trailing spaces. However, your reversed string should not contain leading or trailing spaces.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, \"You need to reduce multiple spaces between two words to a single space in the reversed string.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: arrayToClone,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, \"3. Excel Sheet Column Title.\"), \"Given a positive integer, return its corresponding column title as appear in an Excel sheet.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: convertToTitle,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, \"4. Largest Number.\"), \"Given a list of non negative integers, arrange them such that they form the largest number.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: largestNumber,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, \"5. Combination Sum.\"), \"Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, \"Note: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, \"All numbers will be positive integers.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, \"The solution set must not contain duplicate combinations.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: combinationSum3,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, \"6. Contains Duplicate.\"), \"Given an array of integers, find if the array contains any duplicates.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }), \"Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: containsDuplicate,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, \"7. Rectangle Area.\"), \"Find the total area covered by two rectilinear rectangles in a 2D plane.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }), \"Each rectangle is defined by its bottom left corner and top right corner.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: computeArea,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, \"8. Summary Ranges.\"), \"Given a sorted integer array without duplicates, return the summary of its ranges.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: summaryRanges,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, \"9. Power of Two.\"), \"Given an integer, write a function to determine if it is a power of two.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isPowerOfTwo,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, \"10. Number of Digit One.\"), \"Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: countDigitOne,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, \"11. Product of Array Except Self.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: productExceptSelf,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }, \"12. Sliding Window Maximum.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: arrayToClone,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: arrayToClone,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: arrayToClone,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: arrayToClone,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: arrayToClone,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: arrayToClone,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: arrayToClone,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: arrayToClone,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: arrayToClone,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default withStyles(styles)(TopTech);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/topTech.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","evalRPN","trim","convertToTitle","largestNumber","combinationSum3","containsDuplicate","computeArea","summaryRanges","isPowerOfTwo","countDigitOne","productExceptSelf","arrayToClone","TopTech","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = {backgroundColor:'#F0F8FF', padding:'1px', fontSize:'16px'}\n\nconst styles = theme => ({\n  paper: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1)\n  },\n  smMargin: {\n      margin: theme.spacing(1)\n  },\n  actionDiv: {\n      textAlign: \"center\"\n  }\n})\n\n\nconst evalRPN = `\nconst evalRPN = function (tokens) {\n  const stack = []\n  const isOperator = token => token === '+' || token === '-' || token === '*' || token === '/'\n  for (const token of tokens) {\n    if (isOperator(token)) {\n      const b = stack.pop()\n      const a = stack.pop()\n      let result = 0\n      switch (token) {\n        case '+':\n          result = a + b\n          break\n        case '-':\n          result = a - b\n          break\n        case '/':\n          result = a / b\n          result = result < 0 ? Math.ceil(result) : Math.floor(a / b) // 注意负数向上取整\n          break\n        default:\n          result = a * b\n      }\n      stack.push(result)\n    } else {\n      stack.push(parseInt(token, 10))\n    }\n  }\n  return stack[0]\n}\nconsole.log(evalRPN([\"4\", \"13\", \"5\", \"/\", \"+\"]))`.trim();\n\nconst convertToTitle = `\nvar convertToTitle = function(n) {\n  var A = \"A\".charCodeAt(0);\n  var str = \"\";\n  while(n > 0) {\n      n--;\n      str = String.fromCharCode(A+n%26) + str;\n      n =parseInt(n/26);\n  }\n  \n  return str;\n};\n\nconsole.log(convertToTitle(701))`.trim();\n\nconst largestNumber = `\nconst largestNumber = function (nums = []) {\n  nums.sort((a, b) => {\n    const digitsA = a.toString(10) + b.toString(10)\n    const digitsB = b.toString(10) + a.toString(10)\n    for (let i = 0; i < digitsA.length; i++) {\n      const digitB = parseInt(digitsB[i], 10)\n      const digitA = parseInt(digitsA[i], 10)\n      if (digitB > digitA || digitB < digitA) {\n        return digitB - digitA\n      }\n    }\n    return 0\n  })\n  const result = nums.join('')\n  return result[0] === '0' ? '0' : result\n}\n\nconsole.log(largestNumber([10,2]))`.trim();\n\nconst combinationSum3 = `\nconst combinationSum3 = function (k, n) {\n  const result = []\n  const aux = (start, current, sum) => {\n    if (current.length > k) {\n      return\n    }\n    if (current.length === k) {\n      if (sum === n) {\n        result.push([...current])\n        return\n      }\n      return\n    }\n\n    for (let i = start; i <= 9; i++) {\n      current.push(i)\n      aux(i + 1, current, sum + i)\n      current.pop(i)\n    }\n  }\n  for (let i = 1; i <= 9; i++) {\n    aux(i + 1, [i], i)\n  }\n  return result\n}\n\nconsole.log(combinationSum3(3,7))`.trim();\n\nconst containsDuplicate = `\nconst containsDuplicate = (nums) => {\n  const map = {}\n  for (num of nums) {\n    if (map[num]) {\n      return true\n    }\n    map[num] = 1\n  }\n  return false\n}\n\nconsole.log(containsDuplicate([1,2,3,1]))`.trim();\n\nconst computeArea = `\nconst computeArea = function (A, B, C, D, E, F, G, H) {\n  const area = (pointA, pointB) => (pointB[0] - pointA[0]) * (pointB[1] - pointA[1])\n  const totalArea = area([A, B], [C, D]) + area([E, F], [G, H])\n  if (E >= C || G <= A || F >= D || H <= B) {\n    return totalArea\n  }\n  const pointA = [Math.max(A, E), Math.max(B, F)]\n  const pointB = [Math.min(C, G), Math.min(D, H)]\n  const overlapping = (pointB[0] - pointA[0]) * (pointB[1] - pointA[1])\n  return totalArea - overlapping\n}\n\nconsole.log(computeArea(-3, 0, 3, 4, 0, -1, 9, 2))`.trim();\n\nconst summaryRanges = `\nconst summaryRanges = function (nums) {\n  let start = null\n  const result = []\n  for (let i = 0; i < nums.length; i++) {\n    if (start === null) {\n      start = nums[i]\n    }\n    if (nums[i] === nums[i + 1] - 1) {\n      continue\n    }\n    if (nums[i] === start) {\n      result.push(nums[i].toString())\n      start = null\n    } else {\n      result.push('$'{start}->'$'{nums[i]}')\n      start = null\n    }\n  }\n  return result\n}\n\n\nconsole.log(summaryRanges([1,2,3,4,6,7,9]))`.trim();\n\nconst isPowerOfTwo = `\nconst isPowerOfTwo = (x) => {\n  if (x <= 0) {\n    return false\n  }\n  return (x & (x - 1)) === 0\n}\n\nconsole.log(isPowerOfTwo(16))`.trim();\n\nconst countDigitOne = `\nconst countDigitOne = function (n) {\n  const memo = {}\n  const aux = (number) => {\n    if (memo[number] !== undefined) {\n      return memo[number]\n    }\n    if (number <= 0) {\n      return 0\n    }\n    const str = number.toString()\n    const first = parseInt(str[0], 10)\n    const base = Math.pow(10, str.length - 1)\n    const reminder = number - first * base\n    if (first === 1) {\n      memo[number] = aux(base - 1) + reminder + 1 + aux(reminder)\n    } else {\n      memo[number] = first * aux(base - 1) + base + aux(reminder)\n    }\n    return memo[number]\n  }\n  return aux(n)\n}\n\nconsole.log(countDigitOne(16))`.trim();\n\nconst productExceptSelf = `\nconst productExceptSelf = (nums = []) => {\n  if(!nums.length) {\n      return nums\n  }\n  const product = [nums[0]]\n  for(let i = 1; i < nums.length; i++) {\n      product[i] = nums[i] * product[i-1]\n  }\n  let suffixProduct = 1\n  for(let i = nums.length -1; i >= 1; i--) {\n      product[i] = product[i-1] * suffixProduct\n      suffixProduct *= nums[i]\n  }\n  product[0] = suffixProduct\n  return product\n}\n\nconsole.log(productExceptSelf([1,2,3,4]))`.trim();\n\nconst arrayToClone = ``.trim();\n\n// const arrayToClone = ``.trim();\n\n// const arrayToClone = ``.trim();\n\n// const arrayToClone = ``.trim();\n\n// const arrayToClone = ``.trim();\n\n// const arrayToClone = ``.trim();\n\n// const arrayToClone = ``.trim();\n\n// const arrayToClone = ``.trim();\n\n// const arrayToClone = ``.trim();\n\n// const arrayToClone = ``.trim();\n\n// const arrayToClone = ``.trim();\n\n// const arrayToClone = ``.trim();\n\n\n\nclass TopTech extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n            <Grid item xs={2}>\n                <Paper className={classes.paper}>\n                    <h4><Sidebar /></h4>\n                </Paper>\n            </Grid>\n            <Grid item xs={10}>\n            <Paper className={classes.paper}>\n            <List>\n              <h3>1. Evaluate Reverse Polish Notation</h3>\n              <b>Input: </b>[\"2\", \"1\", \"+\", \"3\", \"*\"]<br/>\n              <b>Output: </b>9<br/>\n              <b>Explanation: </b>((2 + 1) * 3) = 9\n              <div style={titles}>\n                <PrismCode\n                  code={evalRPN}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              \n              <h3>2. Reverse Words in a String.</h3>\n              <b>Note: </b>\n              <ul>\n                <li>A word is defined as a sequence of non-space characters.</li>\n                <li>Input string may contain leading or trailing spaces. However, your reversed string should not contain leading or trailing spaces.</li>\n                <li>You need to reduce multiple spaces between two words to a single space in the reversed string.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={arrayToClone}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              \n              <br/>\n              <h3>3. Excel Sheet Column Title.</h3>\n              Given a positive integer, return its corresponding column title as appear in an Excel sheet.\n              <div style={titles}>\n                <PrismCode\n                  code={convertToTitle}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>4. Largest Number.</h3>\n              Given a list of non negative integers, arrange them such that they form the largest number.\n              <div style={titles}>\n                <PrismCode\n                  code={largestNumber}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n             \n              <h3>5. Combination Sum.</h3>\n              Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.\n              <br/>\n\n              <b>Note: </b>\n              <ul>\n                <li>All numbers will be positive integers.</li>\n                <li>The solution set must not contain duplicate combinations.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={combinationSum3}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              \n              <h3>6. Contains Duplicate.</h3>\n              Given an array of integers, find if the array contains any duplicates.\n              <br/>\n              Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.\n              <div style={titles}>\n                <PrismCode\n                  code={containsDuplicate}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n             \n              <h3>7. Rectangle Area.</h3>\n              Find the total area covered by two rectilinear rectangles in a 2D plane.\n              <br/>\n              Each rectangle is defined by its bottom left corner and top right corner.\n              <div style={titles}>\n                <PrismCode\n                  code={computeArea}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n             \n              <h3>8. Summary Ranges.</h3>\n              Given a sorted integer array without duplicates, return the summary of its ranges.\n              <div style={titles}>\n                <PrismCode\n                  code={summaryRanges}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              \n              <h3>9. Power of Two.</h3>\n              Given an integer, write a function to determine if it is a power of two.\n              <div style={titles}>\n                <PrismCode\n                  code={isPowerOfTwo}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              \n              <h3>10. Number of Digit One.</h3>\n              Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.\n              <div style={titles}>\n                <PrismCode\n                  code={countDigitOne}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n          \n              <h3>11. Product of Array Except Self.</h3>\n              \n              <div style={titles}>\n                <PrismCode\n                  code={productExceptSelf}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n           \n              <h3>12. Sliding Window Maximum.</h3>\n              \n              <div style={titles}>\n                <PrismCode\n                  code={arrayToClone}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n              <h3></h3>\n              \n              <br/>\n              <div style={titles}>\n                <PrismCode\n                  code={arrayToClone}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n              <h3></h3>\n              \n              <br/>\n              <div style={titles}>\n                <PrismCode\n                  code={arrayToClone}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n              <h3></h3>\n              \n              <br/>\n              <div style={titles}>\n                <PrismCode\n                  code={arrayToClone}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n              <h3></h3>\n              \n              <br/>\n              <div style={titles}>\n                <PrismCode\n                  code={arrayToClone}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n              <h3></h3>\n              \n              <br/>\n              <div style={titles}>\n                <PrismCode\n                  code={arrayToClone}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n              <h3></h3>\n              \n              <br/>\n              <div style={titles}>\n                <PrismCode\n                  code={arrayToClone}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n              <h3></h3>\n              \n              <br/>\n              <div style={titles}>\n                <PrismCode\n                  code={arrayToClone}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n              <h3></h3>\n              \n              <br/>\n              <div style={titles}>\n                <PrismCode\n                  code={arrayToClone}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n              <h3></h3>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(TopTech));\n"]},"metadata":{},"sourceType":"module"}