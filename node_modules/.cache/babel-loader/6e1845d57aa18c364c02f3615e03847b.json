{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/javaScripts/deepJs/datatypests.js\";\nimport React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\nconst titles = {\n  backgroundColor: \"#F0F8FF\",\n  padding: \"1px\",\n  fontSize: \"16px\"\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst typescriptypes = `\nTypeScript Types => Static, Generics, Decorators\nStatic => Built-in, User-Defined\nBuilt-in Type => Number, String, Boolean, Void, Null\nUser-Defined Type => Array, Touple, Enum, Class, Interface, Functions\n`.trim();\nconst anotations = `\nfunction typeAnotation(a:number, str:string, isActive:boolean){\n  return console.log(a, str, isActive);\n}\n\ntypeAnotation(1, 'Mukesh', true)\n`.trim();\nconst dataType = `\nenum Color { Red, Green, Blue };\n\nconst newColor = Color.Green;\nconsole.log(newColor)\n`.trim();\nconst annotations = `\nconst drawPoint = (point: {x:number, y:number})=>{\n  return console.log(point.x, point.y)\n}\n\ndrawPoint({x:1, y:2});\n\n\n// Better way is use interface as\n interface Poiny{\n   x:number,\n   y:number\n }\n`.trim();\nconst types = `\n//1\nfunction add(n1:number, n2:number){\n  const sum=n1+n2;\n\n  console.log(typeof sum)\n  return console.log(sum)\n}\n\nadd(2,3);\n\n\n//2\nfunction add(n1:number, n2:number){\n    const sum=n1+n2;\n    if(typeof n1 !== 'number' && typeof n2 !=='number'){\n        return new Error('Incorrect Input');\n    }\n\n    return console.log(sum);\n}\n\nadd(2,3);\n`.trim();\nconst arraytypes = `\nconst myArr: number[] = [12, 90, 71];\nconst myArr: Array<number> = [12, 90, 71];\nconst myArr: Array<any> = [12, 'thirteen', false];\n\n\n`.trim();\nconst tupplestypes = `\nlet arr: [number, string];\narr = [121, 'bacon'];\narr = [121, 'Dave', 'Steve'];            //wrong\n\n\n//2\nconst person:{\n  name:string;\n  id:number;\n  hobbies:string[];\n  role:[number,string]                                                              // this mark tuple types\n}= {\nname:'Rakesh',\nid:1,\nhobbies:['Sports','Cooking'],\nrole:[2,'Author']\n}\n\nperson.role.push('admin')\nperson.role[0]=10;\n\nfor(const hobby of person.hobbies){\nconsole.log(hobby)\n}\n\n`.trim();\nconst enumtypes = `\nenum Direction {  \n  Up = 1,  \n  Down,  \n  Left,  \n  Right,  \n}  \nconsole.log(Direction);  \n`.trim();\nconst enumtypes2 = `\nenum AppStatus {  \n  ACTIVE = 'ACT',  \n  INACTIVE = 'INACT',  \n  ONHOLD = 'HLD',  \n  ONSTOP = 'STOP'  \n}  \nfunction checkStatus(status: AppStatus): void {  \n \n  console.log(status);  \n}  \n\ncheckStatus(AppStatus.ONSTOP);  \n`.trim();\nconst enumtypes3 = `\nenum AppStatus {  \n  ACTIVE = 'Yes',  \n  INACTIVE = 1,  \n  ONHOLD = 2,  \n  ONSTOP = 'STOP'  \n}  \nconsole.log(AppStatus.ACTIVE);  \nconsole.log(AppStatus.ONHOLD);  \n`.trim();\nconst alias = `\ntype num = number;\ntype str = string;\ntype Car = {\n  year: num,\n  type: str\n};\n\nconst num: num = 2001\nconst str: str = \"Toyota\"\n\nconst car: Car = {\n  year: num,\n  type: str\n};\n\nconsole.log(car);\n`.trim();\nconst anyis = `\nlet user: unknown; \nlet userName: string;\n\nuser=5;\nuser='Mukesh'\nif(typeof user === 'string'){\n  userName = user\n}\n`.trim();\nconst castings = `\n//Casting with as\nlet x: unknown = 'hello';\nconsole.log((x as string).length);\n\n\n//Casting with <>\nlet x: unknown = 'hello';\nconsole.log((<string>x).length);\n`.trim();\nconst utilitytypes = `\n//Partial\ninterface Point {\n  num: number;\n}\n            \nlet pointPart: Partial<Point> = {}; \npointPart.num = 10;\n\nconsole.log(pointPart);\n\n\n//Required\ninterface Point {\n  num: number;\n  num2?: number;\n  model: string;\n}\n            \nlet pointPart: Required<Point> = {\n  num: 1,\n  num2: 10,\n  model: 'Focus'\n}; \n\nconsole.log(pointPart);\n\n\n//Record\nlet pointPart: Record<string, number> = {     //Record<string, number> is equivalent to { [key: string]: number }\n  'num': 1,\n  'num2': 10,\n}; \n\nconsole.log(pointPart);\n\n\n//Omit\ninterface Point {\n  num: number;\n  model: string;\n  location?: string;\n}\n            \nlet pointPart: Omit<Point, 'num' | 'location'> = {\n  model: 'Focus'\n}; \n\nconsole.log(pointPart);\n\n\n//Pick\ninterface Point {\n  num: number;\n  model: string;\n  location?: string;\n}\n            \nlet pointPart: Pick<Point, 'model'> = {\n  model: 'Focus'\n}; \n\nconsole.log(pointPart);\n\n\n//Exclude\ntype Primitive = string | number | boolean;\n\nconst value: Exclude<Primitive, string> = true;\nconsole.log(typeof value);\n\n\n//ReturnType\ntype PointGenerator = () => { x: number; y: number; };\nconst point: ReturnType<PointGenerator> = {\n  x: 10,\n  y: 20\n};\n\n\n//Parameters\ntype PointPrinter = (p: { x: number; y: number; }) => void;\nconst point: Parameters<PointPrinter>[0] = {\n  x: 10,\n  y: 20\n};\n`.trim();\nconst keyof = `\ninterface Person {\n  name: string;\n  age: number;\n}\n\nfunction show(person: Person, property: keyof Person) {\n  console.log('$'{property}: \"'$'{person[property]}\");\n}\n\nlet person = {\n  name: \"Max\",\n  age: 27\n};\n\nshow(person, \"name\"); \n`.trim();\nconst unions = `\nfunction union(n1:number | string | boolean, n2:number|string){\n  const result = n1;\n  return  console.log(result);\n}\n\nconst combine=union(10,30)\ncombine;\n\n\n//2\nconst popStack = (stack: string[]) => {\n  if (stack.length) {\n    return stack[stack.length-1];                                                 // return type is any\n  } else {\n    return null;                                                                  // return type is null\n  }\n};\nlet toys: string[] = ['Doll', 'Ball', 'Marbles'];\nlet emptyBin: string[] = [];\nlet item: string | null = popStack(toys);                                         // item has union type\nconsole.log(item);                                                                // Prints \"Marbles\"\nitem = popStack(emptyBin);\nconsole.log(item);                                                                // Prints null\n`.trim();\nconst voids = `\nfunction add(n1:number, n2:number){\n  const result = n1;\n  return result;\n}\n\nfunction printResult(num:number):void {\n  console.log('Result', num)\n}\n\nconsole.log(printResult(add(10,30)))                                                    //get undefined\n`.trim();\nconst generics = `\nfunction show<T>(args:T):T{\n  return args;\n}\n\nvar output=show<string>(\"String\")\nvar output2=show<number>(1)\n\nconsole.log(output);\nconsole.log(output2);\n`.trim();\nconst funs = `\n//Tuple:\nlet empTuple = [\"JavaTpoint\", 101, \"Abhishek\"];\nfunction display(tuple_values:any[]) {\n   for(let i = 0;i<empTuple.length;i++) {\n      console.log(empTuple[i]);\n   }\n}\n\ndisplay(empTuple);\n\n\n//Union:\nfunction display(value: (number | string)) {\n    if(typeof(value) === \"number\")\n        console.log(value);\n    else if(typeof(value) === \"string\")\n        console.log(value);\n}\n\ndisplay(123);\ndisplay(\"ABC\");`.trim();\n\nclass Datatypests extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, \"1. What is TypeScript?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, \"TypeScript is superset of js.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, \"It adds optional static typing to the language, along with other features such as classes, interfaces, enums, and modules.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }, \"The main difference between TypeScript and JavaScript is that TypeScript adds type annotations, which allow developers to catch errors at compile-time instead of at runtime.\", \" \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }, \"Why use TypeScript.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }, \"TypeScript supports Static typing, Strongly type, Modules, Optional Parameters, etc.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }, \"It supports OOPS programing features such as classes, inheritance, etc.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }, \"Advantages of TypeScript over js\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, \"TypeScript always highlights errors at compilation time, whereas js points out at the runtime.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }, \"It has a namespace concept by defining a module.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }, \"TypeScript extends this list with a few more, such as :\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }, \"any: \"), \"allow anything.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }, \"unknown: \"), \"ensure someone using this type declares what the type is.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }, \"never: \"), \"it\\u2019s not possible that this type could happen.\")))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: typescriptypes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }, \"2. Static Types\"), \"static types mean \\\"at compile time\\\".\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }), \"Static types can be further divided into two sub-categories:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }, \"1. Built-in or Primitive Type: \"), \"Number, String, Boolean, Void, Null.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    }, \"2. User-Defined DataType: \"), \"Array, Touple, Enum, Functions, Class, Interface.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }, \"Touple: \"), \"Tuple is a data type which includes two sets of values of different data types.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }, \"Interface: \"), \"It cannot be instantiated but can be referenced by the class which implements it.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }, \"Enums: \"), \"Define a set of named constant. TypeScript provides both string-based and numeric-based enums. By default, enums begin numbering their elements starting from 0, but we can also change this by manually setting the value to one of its elements.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: dataType,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    }, \"Number\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: types,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }, \"Array\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: arraytypes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    }, \"Tuples\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }, \"Arrays with a fixed datatype and fixed number of elements.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }, \"It is possible to reassign the value of the indices but not the amount of elements in the tuple.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: tupplestypes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }, \"Enum\"), \"Enums represents a group of constants (unchangeable variables).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }, \"There are three types of enums: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, \"Numeric enum\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }, \"String enum\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }, \"Heterogeneous enum\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541\n      },\n      __self: this\n    }, \"It makes it easy to change values in the future.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }, \"It reduces errors which are caused by transporting or mistyping a number.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }, \"It exists only during compilation time, so it does not allocate memory.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    }, \"It saves runtime and compile-time with inline code in JavaScript.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: enumtypes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562\n      },\n      __self: this\n    }), \"Here, we initialize Up with 1, and all of the following members are auto-incremented from that point.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567\n      },\n      __self: this\n    }, \"String Enums: \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: enumtypes2,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    }, \"Heterogeneous Enums: \"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: enumtypes3,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    }, \"3. TypeScript Annotation\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587\n      },\n      __self: this\n    }, \"type annotation means declared data types during varriable initializtion.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: anotations,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600\n      },\n      __self: this\n    }, \"Inline annotation\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: annotations,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609\n      },\n      __self: this\n    }, \"4. Type Alias\"), \"Type Aliases allow defining types with a custom name.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: alias,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619\n      },\n      __self: this\n    }, \"5. Any\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621\n      },\n      __self: this\n    }, \"unknown is less similar to any.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622\n      },\n      __self: this\n    }, \"never type return anything.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: anyis,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632\n      },\n      __self: this\n    }, \"6. Casting\"), \"Casting is the process of overriding a type.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 634\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: castings,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 635\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 642\n      },\n      __self: this\n    }, \"7. Utility Types\"), \"TypeScript comes with a large number of types that help with some common type manipulation.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647\n      },\n      __self: this\n    }, \"Partial: \"), \"changes all the properties in an object to be optional.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 650\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 651\n      },\n      __self: this\n    }, \"Required: \"), \"changes all the properties in an object to be required.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }, \"Record: \"), \"is a shortcut to defining an object type with a specific key type and value type.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659\n      },\n      __self: this\n    }, \"Omit: \"), \"removes keys from an object type.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662\n      },\n      __self: this\n    }, \"Pick: \"), \"removes all but the specified keys from an object type.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666\n      },\n      __self: this\n    }, \"Exclude: \"), \"removes types from a union.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669\n      },\n      __self: this\n    }, \"ReturnType: \"), \"extracts the return type of a function type.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673\n      },\n      __self: this\n    }, \"Parameters: \"), \"extracts the parameter types of a function type as an array.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: utilitytypes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685\n      },\n      __self: this\n    }, \"keyof\"), \"keyof is used to extract the key type from an object type.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688\n      },\n      __self: this\n    }, \"When used on an object type with explicit keys, keyof creates a union type with those keys.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692\n      },\n      __self: this\n    }, \"keyof can also be used with index signatures to extract the index type.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 697\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: keyof,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704\n      },\n      __self: this\n    }, \"10. Composing Types:\"), \"With TypeScript, can create complex types by combining simple ones. There are two popular ways to do so:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 707\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 708\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 709\n      },\n      __self: this\n    }, \"Unions: \"), \"Can declare that a type could be one of many types.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712\n      },\n      __self: this\n    }, \"Generics\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 714\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715\n      },\n      __self: this\n    }, \"1. Union\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 716\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 717\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: unions,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 718\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725\n      },\n      __self: this\n    }, \"2. Generic\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 726\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 727\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 728\n      },\n      __self: this\n    }, \"Generics provide variables to types. \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 729\n      },\n      __self: this\n    }, \"Ex.\"), \" An array without generics could contain anything. An array with generics can describe the values that the array contains.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: generics,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 741\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 742\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 743\n      },\n      __self: this\n    }, \"Tuple And Union\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 744\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: funs,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 745\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 751\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 752\n      },\n      __self: this\n    }, \"11. Void\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754\n      },\n      __self: this\n    }, \"Void means, function doesn't return anything. It's used where no data type is accessible.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 758\n      },\n      __self: this\n    }, \"A variable of type void is not useful because we can only assign undefined or null to them.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 762\n      },\n      __self: this\n    }, \"An undefined data type denotes uninitialized variable, whereas null represents a variable whose value is undefined.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 766\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 767\n      },\n      __self: this\n    }, \"Any Type\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 768\n      },\n      __self: this\n    }, \"It's the 'super type' of all data type in TypeScript. It's used to represents any js value. It allows us to opt-in and opt-out of type-checking during compilation. If a variable cannot be represented in any of the basic data types, then it can be declared using \\\"Any\\\" data type. Any type is useful when we do not know about the type of value(which might come from an API), and we want to skip the type-checking on compile time.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 778\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 780\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: voids,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 781\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 787\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default withStyles(styles)(Datatypests);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/javaScripts/deepJs/datatypests.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","typescriptypes","trim","anotations","dataType","annotations","types","arraytypes","tupplestypes","enumtypes","enumtypes2","enumtypes3","alias","anyis","castings","utilitytypes","keyof","unions","voids","generics","funs","Datatypests","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,UAAtB,EAAkCC,IAAlC,QAA8C,mBAA9C;AAEA,OAAO,0BAAP;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AAEA,MAAMC,MAAM,GAAG;AAAEC,EAAAA,eAAe,EAAE,SAAnB;AAA8BC,EAAAA,OAAO,EAAE,KAAvC;AAA8CC,EAAAA,QAAQ,EAAE;AAAxD,CAAf;;AAEA,MAAMC,MAAM,GAAIC,KAAD,KAAY;AACzBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH;AAELN,IAAAA,OAAO,EAAEG,KAAK,CAACG,OAAN,CAAc,CAAd;AAFJ,GADkB;AAKzBC,EAAAA,QAAQ,EAAE;AACRF,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd;AADA,GALe;AAQzBE,EAAAA,SAAS,EAAE;AACTC,IAAAA,SAAS,EAAE;AADF;AARc,CAAZ,CAAf;;AAaA,MAAMC,cAAc,GAAI;;;;;CAAD,CAKrBC,IALqB,EAAvB;AAOA,MAAMC,UAAU,GAAI;;;;;;CAAD,CAMjBD,IANiB,EAAnB;AAQA,MAAME,QAAQ,GAAI;;;;;CAAD,CAKfF,IALe,EAAjB;AAOA,MAAMG,WAAW,GAAI;;;;;;;;;;;;;CAAD,CAalBH,IAbkB,EAApB;AAeA,MAAMI,KAAK,GAAI;;;;;;;;;;;;;;;;;;;;;;;CAAD,CAuBZJ,IAvBY,EAAd;AAyBA,MAAMK,UAAU,GAAI;;;;;;CAAD,CAMjBL,IANiB,EAAnB;AAQA,MAAMM,YAAY,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;CAAD,CA0BnBN,IA1BmB,EAArB;AA4BA,MAAMO,SAAS,GAAI;;;;;;;;CAAD,CAQhBP,IARgB,EAAlB;AAUA,MAAMQ,UAAU,GAAI;;;;;;;;;;;;;CAAD,CAajBR,IAbiB,EAAnB;AAeA,MAAMS,UAAU,GAAI;;;;;;;;;CAAD,CASjBT,IATiB,EAAnB;AAWA,MAAMU,KAAK,GAAI;;;;;;;;;;;;;;;;;CAAD,CAiBZV,IAjBY,EAAd;AAmBA,MAAMW,KAAK,GAAI;;;;;;;;;CAAD,CASZX,IATY,EAAd;AAWA,MAAMY,QAAQ,GAAI;;;;;;;;;CAAD,CASfZ,IATe,EAAjB;AAWA,MAAMa,YAAY,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAD,CAsFnBb,IAtFmB,EAArB;AAwFA,MAAMc,KAAK,GAAI;;;;;;;;;;;;;;;;CAAD,CAgBZd,IAhBY,EAAd;AAkBA,MAAMe,MAAM,GAAI;;;;;;;;;;;;;;;;;;;;;;;;CAAD,CAwBbf,IAxBa,EAAf;AA0BA,MAAMgB,KAAK,GAAI;;;;;;;;;;;CAAD,CAWZhB,IAXY,EAAd;AAaA,MAAMiB,QAAQ,GAAI;;;;;;;;;;CAAD,CAUfjB,IAVe,EAAjB;AAYA,MAAMkB,IAAI,GAAI;;;;;;;;;;;;;;;;;;;;;gBAAD,CAqBIlB,IArBJ,EAAb;;AAuBA,MAAMmB,WAAN,SAA0BxC,SAA1B,CAAoC;AAClCyC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,UAAU,CAAC,MAAMzC,KAAK,CAAC0C,YAAN,EAAP,EAA6B,CAA7B,CAAV;AACD;;AACDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB;AACA,WACE,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAED,OAAO,CAAC/B,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF,CADF,EAQE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAE+B,OAAO,CAAC/B,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oIAFF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wLAGsD,GAHtD,CARF,EAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,EAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAdF,EAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfF,EAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8FAhBF,EAoBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iFApBF,EAyBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzBF,EA0BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CA1BF,EA2BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3BF,EA4BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wGA5BF,EAgCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DAhCF,EAiCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjCF,EAkCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kEAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,oBADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,8DAJF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,wDARF,CAFF,CAlCF,CAFF,EAqDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArDF,EAsDE;AAAK,MAAA,KAAK,EAAEN,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEY,cADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAtDF,EA6DE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7DF,EA8DE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBA9DF,4CAgEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhEF,kEAkEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlEF,EAmEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAnEF,0CAqEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArEF,EAsEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtEF,EAuEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAvEF,uDAyEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,oFADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,sFALF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,uPATF,CAzEF,EA0FE;AAAK,MAAA,KAAK,EAAEZ,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEe,QADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA1FF,EAiGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjGF,EAkGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAlGF,EAmGE;AAAK,MAAA,KAAK,EAAEf,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEiB,KADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAnGF,EA0GE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1GF,EA2GE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eA3GF,EA4GE;AAAK,MAAA,KAAK,EAAEjB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEkB,UADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA5GF,EAmHE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnHF,EAoHE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBApHF,EAqHE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oEADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0GAJF,CArHF,EA8HE;AAAK,MAAA,KAAK,EAAElB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEmB,YADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA9HF,EAqIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArIF,EAsIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAtIF,qEAwIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxIF,EAyIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAzIF,EA0IE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAHF,CA1IF,EA+IE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/IF,EAgJE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mFAFF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iFANF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EAVF,CAhJF,EA+JE;AAAK,MAAA,KAAK,EAAEnB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEoB,SADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA/JF,EAsKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtKF,2GAyKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzKF,EA0KE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1KF,EA2KE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBA3KF,EA4KE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5KF,EA6KE;AAAK,MAAA,KAAK,EAAEpB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEqB,UADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA7KF,EAoLE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApLF,EAqLE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BArLF,EAsLE;AAAK,MAAA,KAAK,EAAErB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEsB,UADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAtLF,EA6LE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7LF,EA8LE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCA9LF,EA+LE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mFA/LF,EAmME;AAAK,MAAA,KAAK,EAAEtB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEc,UADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAnMF,EA0ME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1MF,EA2ME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3MF,EA4ME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BA5MF,EA6ME;AAAK,MAAA,KAAK,EAAEd,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEgB,WADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA7MF,EAoNE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApNF,EAqNE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBArNF,2DAuNE;AAAK,MAAA,KAAK,EAAEhB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEuB,KADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAvNF,EA8NE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9NF,EA+NE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA/NF,EAgOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAFF,CAhOF,EAoOE;AAAK,MAAA,KAAK,EAAEvB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEwB,KADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CApOF,EA2OE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3OF,EA4OE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBA5OF,kDA8OE;AAAK,MAAA,KAAK,EAAExB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEyB,QADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA9OF,EAqPE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArPF,EAsPE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAtPF,iGAyPE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,4DADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,4DALF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,sFATF,EAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,sCAbF,EAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,4DAhBF,EAoBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,gCApBF,EAuBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,iDAvBF,EA2BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,iEA3BF,CAzPF,EAyRE;AAAK,MAAA,KAAK,EAAEzB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAE0B,YADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAzRF,EAgSE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhSF,EAiSE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAjSF,gEAmSE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qGADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iFALF,CAnSF,EA6SE;AAAK,MAAA,KAAK,EAAE1B,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAE2B,KADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA7SF,EAoTE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BApTF,8GAuTE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,wDADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALF,CAvTF,EA8TE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9TF,EA+TE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA/TF,EAgUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhUF,EAiUE;AAAK,MAAA,KAAK,EAAE3B,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAE4B,MADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAjUF,EAwUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxUF,EAyUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAzUF,EA0UE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1UF,EA2UE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDACuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADvC,+HADF,CA3UF,EAkVE;AAAK,MAAA,KAAK,EAAE5B,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAE8B,QADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAlVF,EAyVE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzVF,EA0VE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1VF,EA2VE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBA3VF,EA4VE;AAAK,MAAA,KAAK,EAAE9B,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAE+B,IADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA5VF,EAmWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnWF,EAoWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBApWF,EAqWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mGADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qGALF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6HATF,EAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,EAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAdF,EAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ubAfF,EAyBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzBF,CArWF,EAgYE;AAAK,MAAA,KAAK,EAAE/B,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAE6B,KADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAhYF,EAuYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvYF,CADF,CADF,CARF,CADF;AAwZD;;AA9ZiC;;AAiapC,eAAejC,UAAU,CAACQ,MAAD,CAAV,CAAmB4B,WAAnB,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst typescriptypes = `\nTypeScript Types => Static, Generics, Decorators\nStatic => Built-in, User-Defined\nBuilt-in Type => Number, String, Boolean, Void, Null\nUser-Defined Type => Array, Touple, Enum, Class, Interface, Functions\n`.trim();\n\nconst anotations = `\nfunction typeAnotation(a:number, str:string, isActive:boolean){\n  return console.log(a, str, isActive);\n}\n\ntypeAnotation(1, 'Mukesh', true)\n`.trim();\n\nconst dataType = `\nenum Color { Red, Green, Blue };\n\nconst newColor = Color.Green;\nconsole.log(newColor)\n`.trim();\n\nconst annotations = `\nconst drawPoint = (point: {x:number, y:number})=>{\n  return console.log(point.x, point.y)\n}\n\ndrawPoint({x:1, y:2});\n\n\n// Better way is use interface as\n interface Poiny{\n   x:number,\n   y:number\n }\n`.trim();\n\nconst types = `\n//1\nfunction add(n1:number, n2:number){\n  const sum=n1+n2;\n\n  console.log(typeof sum)\n  return console.log(sum)\n}\n\nadd(2,3);\n\n\n//2\nfunction add(n1:number, n2:number){\n    const sum=n1+n2;\n    if(typeof n1 !== 'number' && typeof n2 !=='number'){\n        return new Error('Incorrect Input');\n    }\n\n    return console.log(sum);\n}\n\nadd(2,3);\n`.trim();\n\nconst arraytypes = `\nconst myArr: number[] = [12, 90, 71];\nconst myArr: Array<number> = [12, 90, 71];\nconst myArr: Array<any> = [12, 'thirteen', false];\n\n\n`.trim();\n\nconst tupplestypes = `\nlet arr: [number, string];\narr = [121, 'bacon'];\narr = [121, 'Dave', 'Steve'];            //wrong\n\n\n//2\nconst person:{\n  name:string;\n  id:number;\n  hobbies:string[];\n  role:[number,string]                                                              // this mark tuple types\n}= {\nname:'Rakesh',\nid:1,\nhobbies:['Sports','Cooking'],\nrole:[2,'Author']\n}\n\nperson.role.push('admin')\nperson.role[0]=10;\n\nfor(const hobby of person.hobbies){\nconsole.log(hobby)\n}\n\n`.trim();\n\nconst enumtypes = `\nenum Direction {  \n  Up = 1,  \n  Down,  \n  Left,  \n  Right,  \n}  \nconsole.log(Direction);  \n`.trim();\n\nconst enumtypes2 = `\nenum AppStatus {  \n  ACTIVE = 'ACT',  \n  INACTIVE = 'INACT',  \n  ONHOLD = 'HLD',  \n  ONSTOP = 'STOP'  \n}  \nfunction checkStatus(status: AppStatus): void {  \n \n  console.log(status);  \n}  \n\ncheckStatus(AppStatus.ONSTOP);  \n`.trim();\n\nconst enumtypes3 = `\nenum AppStatus {  \n  ACTIVE = 'Yes',  \n  INACTIVE = 1,  \n  ONHOLD = 2,  \n  ONSTOP = 'STOP'  \n}  \nconsole.log(AppStatus.ACTIVE);  \nconsole.log(AppStatus.ONHOLD);  \n`.trim();\n\nconst alias = `\ntype num = number;\ntype str = string;\ntype Car = {\n  year: num,\n  type: str\n};\n\nconst num: num = 2001\nconst str: str = \"Toyota\"\n\nconst car: Car = {\n  year: num,\n  type: str\n};\n\nconsole.log(car);\n`.trim();\n\nconst anyis = `\nlet user: unknown; \nlet userName: string;\n\nuser=5;\nuser='Mukesh'\nif(typeof user === 'string'){\n  userName = user\n}\n`.trim();\n\nconst castings = `\n//Casting with as\nlet x: unknown = 'hello';\nconsole.log((x as string).length);\n\n\n//Casting with <>\nlet x: unknown = 'hello';\nconsole.log((<string>x).length);\n`.trim();\n\nconst utilitytypes = `\n//Partial\ninterface Point {\n  num: number;\n}\n            \nlet pointPart: Partial<Point> = {}; \npointPart.num = 10;\n\nconsole.log(pointPart);\n\n\n//Required\ninterface Point {\n  num: number;\n  num2?: number;\n  model: string;\n}\n            \nlet pointPart: Required<Point> = {\n  num: 1,\n  num2: 10,\n  model: 'Focus'\n}; \n\nconsole.log(pointPart);\n\n\n//Record\nlet pointPart: Record<string, number> = {     //Record<string, number> is equivalent to { [key: string]: number }\n  'num': 1,\n  'num2': 10,\n}; \n\nconsole.log(pointPart);\n\n\n//Omit\ninterface Point {\n  num: number;\n  model: string;\n  location?: string;\n}\n            \nlet pointPart: Omit<Point, 'num' | 'location'> = {\n  model: 'Focus'\n}; \n\nconsole.log(pointPart);\n\n\n//Pick\ninterface Point {\n  num: number;\n  model: string;\n  location?: string;\n}\n            \nlet pointPart: Pick<Point, 'model'> = {\n  model: 'Focus'\n}; \n\nconsole.log(pointPart);\n\n\n//Exclude\ntype Primitive = string | number | boolean;\n\nconst value: Exclude<Primitive, string> = true;\nconsole.log(typeof value);\n\n\n//ReturnType\ntype PointGenerator = () => { x: number; y: number; };\nconst point: ReturnType<PointGenerator> = {\n  x: 10,\n  y: 20\n};\n\n\n//Parameters\ntype PointPrinter = (p: { x: number; y: number; }) => void;\nconst point: Parameters<PointPrinter>[0] = {\n  x: 10,\n  y: 20\n};\n`.trim();\n\nconst keyof = `\ninterface Person {\n  name: string;\n  age: number;\n}\n\nfunction show(person: Person, property: keyof Person) {\n  console.log('$'{property}: \"'$'{person[property]}\");\n}\n\nlet person = {\n  name: \"Max\",\n  age: 27\n};\n\nshow(person, \"name\"); \n`.trim();\n\nconst unions = `\nfunction union(n1:number | string | boolean, n2:number|string){\n  const result = n1;\n  return  console.log(result);\n}\n\nconst combine=union(10,30)\ncombine;\n\n\n//2\nconst popStack = (stack: string[]) => {\n  if (stack.length) {\n    return stack[stack.length-1];                                                 // return type is any\n  } else {\n    return null;                                                                  // return type is null\n  }\n};\nlet toys: string[] = ['Doll', 'Ball', 'Marbles'];\nlet emptyBin: string[] = [];\nlet item: string | null = popStack(toys);                                         // item has union type\nconsole.log(item);                                                                // Prints \"Marbles\"\nitem = popStack(emptyBin);\nconsole.log(item);                                                                // Prints null\n`.trim();\n\nconst voids = `\nfunction add(n1:number, n2:number){\n  const result = n1;\n  return result;\n}\n\nfunction printResult(num:number):void {\n  console.log('Result', num)\n}\n\nconsole.log(printResult(add(10,30)))                                                    //get undefined\n`.trim();\n\nconst generics = `\nfunction show<T>(args:T):T{\n  return args;\n}\n\nvar output=show<string>(\"String\")\nvar output2=show<number>(1)\n\nconsole.log(output);\nconsole.log(output2);\n`.trim();\n\nconst funs = `\n//Tuple:\nlet empTuple = [\"JavaTpoint\", 101, \"Abhishek\"];\nfunction display(tuple_values:any[]) {\n   for(let i = 0;i<empTuple.length;i++) {\n      console.log(empTuple[i]);\n   }\n}\n\ndisplay(empTuple);\n\n\n//Union:\nfunction display(value: (number | string)) {\n    if(typeof(value) === \"number\")\n        console.log(value);\n    else if(typeof(value) === \"string\")\n        console.log(value);\n}\n\ndisplay(123);\ndisplay(\"ABC\");`.trim();\n\nclass Datatypests extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. What is TypeScript?</h3>\n              <ul>\n                <li>TypeScript is superset of js.</li>\n                <li>\n                  It adds optional static typing to the language, along with\n                  other features such as classes, interfaces, enums, and\n                  modules.\n                </li>\n                <br />\n                <li>\n                  The main difference between TypeScript and JavaScript is that\n                  TypeScript adds type annotations, which allow developers to\n                  catch errors at compile-time instead of at runtime.{\" \"}\n                </li>\n                <br />\n                <b>Why use TypeScript.</b>\n                <br />\n                <li>\n                  TypeScript supports Static typing, Strongly type, Modules,\n                  Optional Parameters, etc.\n                </li>\n                <li>\n                  It supports OOPS programing features such as classes,\n                  inheritance, etc.\n                </li>\n                \n                <br />\n                <b>Advantages of TypeScript over js</b>\n                <br />\n                <li>\n                  TypeScript always highlights errors at compilation time,\n                  whereas js points out at the runtime.\n                </li>\n                <li>It has a namespace concept by defining a module.</li>\n                <br />\n                <p>\n                  TypeScript extends this list with a few more, such as :\n                  <ul>\n                    <li>\n                      <b>any: </b>allow anything.\n                    </li>\n                    <li>\n                      <b>unknown: </b>ensure someone using this type declares\n                      what the type is.\n                    </li>\n                    <li>\n                      <b>never: </b>it’s not possible that this type could\n                      happen.\n                    </li>\n                  </ul>\n                </p>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={typescriptypes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>2. Static Types</h3>\n              static types mean \"at compile time\".\n              <br />\n              Static types can be further divided into two sub-categories:\n              <br />\n              <b>1. Built-in or Primitive Type: </b>\n              Number, String, Boolean, Void, Null.\n              <br />\n              <br />\n              <b>2. User-Defined DataType: </b>\n              Array, Touple, Enum, Functions, Class, Interface.\n              <ul>\n                <li>\n                  <b>Touple: </b>Tuple is a data type which includes two sets of\n                  values of different data types.\n                </li>\n                <li>\n                  <b>Interface: </b>It cannot be instantiated but can be\n                  referenced by the class which implements it.\n                </li>\n                <li>\n                  <b>Enums: </b>Define a set of named constant. TypeScript\n                  provides both string-based and numeric-based enums. By\n                  default, enums begin numbering their elements starting from 0,\n                  but we can also change this by manually setting the value to\n                  one of its elements.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={dataType}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Number</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={types}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Array</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={arraytypes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Tuples</h3>\n              <ul>\n                <li>\n                  Arrays with a fixed datatype and fixed number of elements.\n                </li>\n                <li>\n                  It is possible to reassign the value of the indices but not\n                  the amount of elements in the tuple.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={tupplestypes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Enum</h3>\n              Enums represents a group of constants (unchangeable variables).\n              <br />\n              <b>There are three types of enums: </b>\n              <ul>\n                <li>Numeric enum</li>\n                <li>String enum</li>\n                <li>Heterogeneous enum</li>\n              </ul>\n              <br />\n              <ul>\n                <li>It makes it easy to change values in the future.</li>\n                <li>\n                  It reduces errors which are caused by transporting or\n                  mistyping a number.\n                </li>\n                <li>\n                  It exists only during compilation time, so it does not\n                  allocate memory.\n                </li>\n                <li>\n                  It saves runtime and compile-time with inline code in\n                  JavaScript.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={enumtypes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              Here, we initialize Up with 1, and all of the following members\n              are auto-incremented from that point.\n              <br />\n              <br />\n              <b>String Enums: </b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={enumtypes2}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>Heterogeneous Enums: </b>\n              <div style={titles}>\n                <PrismCode\n                  code={enumtypes3}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>3. TypeScript Annotation</h3>\n              <li>\n                type annotation means declared data types during varriable\n                initializtion.\n              </li>\n              <div style={titles}>\n                <PrismCode\n                  code={anotations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Inline annotation</b>\n              <div style={titles}>\n                <PrismCode\n                  code={annotations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>4. Type Alias</h3>\n              Type Aliases allow defining types with a custom name.\n              <div style={titles}>\n                <PrismCode\n                  code={alias}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>5. Any</h3>\n              <ul>\n                <li>unknown is less similar to any.</li>\n                <li>never type return anything.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={anyis}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>6. Casting</h3>\n              Casting is the process of overriding a type.\n              <div style={titles}>\n                <PrismCode\n                  code={castings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>7. Utility Types</h3>\n              TypeScript comes with a large number of types that help with some\n              common type manipulation.\n              <ul>\n                <li>\n                  <b>Partial: </b>changes all the properties in an object to be\n                  optional.\n                </li>\n                <li>\n                  <b>Required: </b>changes all the properties in an object to be\n                  required.\n                </li>\n                <li>\n                  <b>Record: </b>is a shortcut to defining an object type with a\n                  specific key type and value type.\n                </li>\n                <li>\n                  <b>Omit: </b>removes keys from an object type.\n                </li>\n                <li>\n                  <b>Pick: </b>removes all but the specified keys from an object\n                  type.\n                </li>\n                <li>\n                  <b>Exclude: </b>removes types from a union.\n                </li>\n                <li>\n                  <b>ReturnType: </b>extracts the return type of a function\n                  type.\n                </li>\n                <li>\n                  <b>Parameters: </b>extracts the parameter types of a function\n                  type as an array.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={utilitytypes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>keyof</h3>\n              keyof is used to extract the key type from an object type.\n              <ul>\n                <li>\n                  When used on an object type with explicit keys, keyof creates\n                  a union type with those keys.\n                </li>\n                <li>\n                  keyof can also be used with index signatures to extract the\n                  index type.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={keyof}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <h3>10. Composing Types:</h3>\n              With TypeScript, can create complex types by combining simple\n              ones. There are two popular ways to do so:\n              <ul>\n                <li>\n                  <b>Unions: </b>Can declare that a type could be one of many\n                  types.\n                </li>\n                <li>Generics</li>\n              </ul>\n              <br />\n              <b>1. Union</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={unions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>2. Generic</b>\n              <br />\n              <ul>\n                <li>\n                  Generics provide variables to types. <b>Ex.</b> An array\n                  without generics could contain anything. An array with\n                  generics can describe the values that the array contains.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={generics}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Tuple And Union</b>\n              <div style={titles}>\n                <PrismCode\n                  code={funs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>11. Void</h3>\n              <ul>\n                <li>\n                  Void means, function doesn't return anything. It's used where\n                  no data type is accessible.\n                </li>\n                <li>\n                  A variable of type void is not useful because we can only\n                  assign undefined or null to them.\n                </li>\n                <li>\n                  An undefined data type denotes uninitialized variable, whereas\n                  null represents a variable whose value is undefined.\n                </li>\n                <br />\n                <b>Any Type</b>\n                <li>\n                  It's the 'super type' of all data type in TypeScript. It's\n                  used to represents any js value. It allows us to opt-in and\n                  opt-out of type-checking during compilation. If a variable\n                  cannot be represented in any of the basic data types, then it\n                  can be declared using \"Any\" data type. Any type is useful when\n                  we do not know about the type of value(which might come from\n                  an API), and we want to skip the type-checking on compile\n                  time.\n                </li>\n                <br />\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={voids}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(Datatypests);\n"]},"metadata":{},"sourceType":"module"}