{"ast":null,"code":"import React,{Suspense,lazy}from'react';var IntroAlgo=lazy(function(){return import('./deepAlgorithams/introAlgo');});var Graph=lazy(function(){return import('./deepAlgorithams/graph');});var LinkedList=lazy(function(){return import('./deepAlgorithams/linkedList');});var Queue=lazy(function(){return import('./deepAlgorithams/queue');});var Stack=lazy(function(){return import('./deepAlgorithams/stack');});var Sort=lazy(function(){return import('./deepAlgorithams/sort');});var Search=lazy(function(){return import('./deepAlgorithams/searchAlgo');});var Heap=lazy(function(){return import('./deepAlgorithams/heap');});var TopTech=lazy(function(){return import('./deepAlgorithams/topTech');});var DSLogic=lazy(function(){return import('./deepAlgorithams/stringAlgo');});var DSLogic2=lazy(function(){return import('./deepAlgorithams/arrayAlgo');});var DSLogic3=lazy(function(){return import('./deepAlgorithams/nestingArrAlgo');});var DSLogic4=lazy(function(){return import('./deepAlgorithams/numbersAlgo');});var DSLogic5=lazy(function(){return import('./deepAlgorithams/gameAlgo');});var DSLogic6=lazy(function(){return import('./deepAlgorithams/arrayStrAlgo');});var DSLogic7=lazy(function(){return import('./deepAlgorithams/arrayNumAlgo');});var DSLogic8=lazy(function(){return import('./deepAlgorithams/dslogic8');});var Trees=lazy(function(){return import('./deepAlgorithams/trees');});var components={Graph:Graph,LinkedList:LinkedList,Queue:Queue,IntroAlgo:IntroAlgo,Stack:Stack,Sort:Sort,Search:Search,Heap:Heap,TopTech:TopTech,DSLogic:DSLogic,DSLogic2:DSLogic2,DSLogic3:DSLogic3,DSLogic4:DSLogic4,DSLogic5:DSLogic5,DSLogic6:DSLogic6,DSLogic7:DSLogic7,DSLogic8:DSLogic8,Trees:Trees};export{components};","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/algorithams/index.js"],"names":["React","Suspense","lazy","IntroAlgo","Graph","LinkedList","Queue","Stack","Sort","Search","Heap","TopTech","DSLogic","DSLogic2","DSLogic3","DSLogic4","DSLogic5","DSLogic6","DSLogic7","DSLogic8","Trees","components"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,IAA1B,KAAsC,OAAtC,CAEA,GAAMC,CAAAA,SAAS,CAAGD,IAAI,CAAC,iBAAM,QAAO,6BAAP,CAAN,EAAD,CAAtB,CACA,GAAME,CAAAA,KAAK,CAAGF,IAAI,CAAC,iBAAM,QAAO,yBAAP,CAAN,EAAD,CAAlB,CACA,GAAMG,CAAAA,UAAU,CAAGH,IAAI,CAAC,iBAAM,QAAO,8BAAP,CAAN,EAAD,CAAvB,CACA,GAAMI,CAAAA,KAAK,CAAGJ,IAAI,CAAC,iBAAM,QAAO,yBAAP,CAAN,EAAD,CAAlB,CACA,GAAMK,CAAAA,KAAK,CAAGL,IAAI,CAAC,iBAAM,QAAO,yBAAP,CAAN,EAAD,CAAlB,CACA,GAAMM,CAAAA,IAAI,CAAGN,IAAI,CAAC,iBAAM,QAAO,wBAAP,CAAN,EAAD,CAAjB,CACA,GAAMO,CAAAA,MAAM,CAAGP,IAAI,CAAC,iBAAM,QAAO,8BAAP,CAAN,EAAD,CAAnB,CACA,GAAMQ,CAAAA,IAAI,CAAGR,IAAI,CAAC,iBAAM,QAAO,wBAAP,CAAN,EAAD,CAAjB,CACA,GAAMS,CAAAA,OAAO,CAAGT,IAAI,CAAC,iBAAM,QAAO,2BAAP,CAAN,EAAD,CAApB,CACA,GAAMU,CAAAA,OAAO,CAAGV,IAAI,CAAC,iBAAM,QAAO,8BAAP,CAAN,EAAD,CAApB,CACA,GAAMW,CAAAA,QAAQ,CAAGX,IAAI,CAAC,iBAAM,QAAO,6BAAP,CAAN,EAAD,CAArB,CACA,GAAMY,CAAAA,QAAQ,CAAGZ,IAAI,CAAC,iBAAM,QAAO,kCAAP,CAAN,EAAD,CAArB,CACA,GAAMa,CAAAA,QAAQ,CAAGb,IAAI,CAAC,iBAAM,QAAO,+BAAP,CAAN,EAAD,CAArB,CACA,GAAMc,CAAAA,QAAQ,CAAGd,IAAI,CAAC,iBAAM,QAAO,4BAAP,CAAN,EAAD,CAArB,CACA,GAAMe,CAAAA,QAAQ,CAAGf,IAAI,CAAC,iBAAM,QAAO,gCAAP,CAAN,EAAD,CAArB,CACA,GAAMgB,CAAAA,QAAQ,CAAGhB,IAAI,CAAC,iBAAM,QAAO,gCAAP,CAAN,EAAD,CAArB,CACA,GAAMiB,CAAAA,QAAQ,CAAGjB,IAAI,CAAC,iBAAM,QAAO,4BAAP,CAAN,EAAD,CAArB,CACA,GAAMkB,CAAAA,KAAK,CAAGlB,IAAI,CAAC,iBAAM,QAAO,yBAAP,CAAN,EAAD,CAAlB,CAGA,GAAMmB,CAAAA,UAAU,CAAG,CACjBjB,KAAK,CAALA,KADiB,CACVC,UAAU,CAAVA,UADU,CACEC,KAAK,CAALA,KADF,CACSH,SAAS,CAATA,SADT,CACoBI,KAAK,CAALA,KADpB,CAC2BC,IAAI,CAAJA,IAD3B,CACiCC,MAAM,CAANA,MADjC,CACyCC,IAAI,CAAJA,IADzC,CAC+CC,OAAO,CAAPA,OAD/C,CACwDC,OAAO,CAAPA,OADxD,CACiEC,QAAQ,CAARA,QADjE,CAEjBC,QAAQ,CAARA,QAFiB,CAEPC,QAAQ,CAARA,QAFO,CAEGC,QAAQ,CAARA,QAFH,CAEaC,QAAQ,CAARA,QAFb,CAEuBC,QAAQ,CAARA,QAFvB,CAEiCC,QAAQ,CAARA,QAFjC,CAE2CC,KAAK,CAALA,KAF3C,CAAnB,CAKA,OAASC,UAAT","sourcesContent":["import React, { Suspense, lazy } from 'react';\n\nconst IntroAlgo = lazy(() => import('./deepAlgorithams/introAlgo'));\nconst Graph = lazy(() => import('./deepAlgorithams/graph'));\nconst LinkedList = lazy(() => import('./deepAlgorithams/linkedList'));\nconst Queue = lazy(() => import('./deepAlgorithams/queue'));\nconst Stack = lazy(() => import('./deepAlgorithams/stack'));\nconst Sort = lazy(() => import('./deepAlgorithams/sort'));\nconst Search = lazy(() => import('./deepAlgorithams/searchAlgo'));\nconst Heap = lazy(() => import('./deepAlgorithams/heap'));\nconst TopTech = lazy(() => import('./deepAlgorithams/topTech'));\nconst DSLogic = lazy(() => import('./deepAlgorithams/stringAlgo'));\nconst DSLogic2 = lazy(() => import('./deepAlgorithams/arrayAlgo'));\nconst DSLogic3 = lazy(() => import('./deepAlgorithams/nestingArrAlgo'));\nconst DSLogic4 = lazy(() => import('./deepAlgorithams/numbersAlgo'));\nconst DSLogic5 = lazy(() => import('./deepAlgorithams/gameAlgo'));\nconst DSLogic6 = lazy(() => import('./deepAlgorithams/arrayStrAlgo'));\nconst DSLogic7 = lazy(() => import('./deepAlgorithams/arrayNumAlgo'));\nconst DSLogic8 = lazy(() => import('./deepAlgorithams/dslogic8'));\nconst Trees = lazy(() => import('./deepAlgorithams/trees'));\n\n\nconst components = {\n  Graph, LinkedList, Queue, IntroAlgo, Stack, Sort, Search, Heap, TopTech, DSLogic, DSLogic2, \n  DSLogic3, DSLogic4, DSLogic5, DSLogic6, DSLogic7, DSLogic8, Trees\n};\n\nexport { components };"]},"metadata":{},"sourceType":"module"}