{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var approach=\"\\nf(x) = b0 + {n(sigma)n=0 (bi * wi)}  \\nwhere bi = input\\n      wi = weighteg\\n      b0 = bias\\n\".trim();var sigmoid=\"\\nf(x) = 1/ 1+ e(-x)\\n                \\nHyperbolic Tengent range(1,-1)\\nHyperbolic Tengent tanh(z): cosh x = e(x) + e(-x)/ 2\\n                            sinh x = e(x) - e(-x)/ 2\\n                            tanh x = sinh x/ cosh x\\n                          \\nRectified Linear Unit(reLU): Most useful and relatiely simple function, max(0,z)\\n\".trim();var cost=\"\\nc = sigma(y - a)O2/ n \\ny = mx + c \\n\".trim();var entropy=\"\\nCross Entropy: c =-1/n * n(sigma)n=0 (y * ln(a) + (1 - y) * ln(1 - a))\\n\".trim();var piplines=\"\\ntf_dataset = tf.data.Dataset.list_files('images/*').map(process_img).flter(filter_fun).map(lambda x:x/255)\\n\\n      where images = Load images from folder.\\n            process_img = Convert image content to numpy array. Extract label from folder.\\n            filter_fun = Filter Blurred images\\n            map = Scaling\\n\".trim();var childsFile=\"\".trim();// const pipes = ``.trim();\nvar IntroAngular=/*#__PURE__*/function(_Component){_inherits(IntroAngular,_Component);function IntroAngular(){_classCallCheck(this,IntroAngular);return _possibleConstructorReturn(this,_getPrototypeOf(IntroAngular).apply(this,arguments));}_createClass(IntroAngular,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"What is intelligent.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Capacity for learning, reasoning, understanding and similar forms of mental activity.\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"AI: What is the natural of Intelligent Thought.\"),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Ablity to perceive and act in the world.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Reasoning: \"),\"Proving theorems, medical diagnosis.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Planning: \"),\"Take decision.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Learning and Adaptation: \"),\"Recommend movies, learn traffic patterns.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Understanding: \"),\"text, speech, visual scene.\")),\"Or System that act rationaly.\",React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Weak AI Hypothesis vs. Strong AI Hypothesis.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Weak Hyp: \"),\"Machines could act as if they are intelligent.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Strong Hyp: \"),\"Machines that act intelligent hae to think intelligently too.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"What is State?\"),\"All information necessary to make a decision for the task at hand.\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"state type:\"),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Atomic\"),React.createElement(\"li\",null,\"Propositional\"),React.createElement(\"li\",null,\"Relational\"),React.createElement(\"li\",null,\"First-Order\")),React.createElement(\"br\",null),React.createElement(\"table\",null,React.createElement(\"tr\",null,React.createElement(\"th\",null,\"State Type\"),React.createElement(\"th\",null,\"Description\"),React.createElement(\"th\",null,\"Focus\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"Atomic\"),React.createElement(\"td\",null,\"State are indivisible. No internal structure.\"),React.createElement(\"td\",null,\"Search on atomic state.\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"Propositional\"),React.createElement(\"td\",null,\"State are made of state variables that take values.\"),React.createElement(\"td\",null,React.createElement(\"b\",null,\"Search\"),\" + \",React.createElement(\"b\",null,\"Inference\"),\" in logic and probabilistic representations.\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"Relational\"),React.createElement(\"td\",null,\"State describe the objects in the world and their inter-relation.\"),React.createElement(\"td\",null,React.createElement(\"b\",null,\"Search\"),\" + \",React.createElement(\"b\",null,\"Inference\"),\" in predicate logic.\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"First-Order\"),React.createElement(\"td\",null,React.createElement(\"b\",null,\"+function\"),\" over objects.\"),React.createElement(\"td\",null,React.createElement(\"b\",null,\"Search\"),\" + \",React.createElement(\"b\",null,\"Inference\"),\" in first order logic.\"))),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"DFS\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Time complexity of tree: \"),\"O(bpm)\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Space complexity of tree: \"),\"O(bm)\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"BFS\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Time complexity of tree: \"),\"O(bpm)\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Space complexity of tree: \"),\"O(bpm)\"),React.createElement(\"li\",null,\"Not optimal because, lest cost and sortest path are not same.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Uniform cost Search\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Cheapest first.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Time complexity of tree: \")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"space complexity of tree:\")),React.createElement(\"li\",null,\"optimal\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Slope: \"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Used for linear equation.\"),React.createElement(\"li\",null,\"It is a constant.\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Derivation:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Used for non linear equation.\"),React.createElement(\"li\",null,\"It is a function.\")),\"why we use log loss for Logistic regression.\",React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Neural Networks\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Neurons/ Perceptron's: \"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Neurons is also known as Perceptron. Artificial Neurons Networks are based on Neural biological systems.\"),React.createElement(\"li\",null,\"ANN is a s/w based approach to replicate these biological Neurons.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Perceptron mathematical model: \"),\"also called regression Function.\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:approach,language:\"js\",plugins:[\"line-numbers\"]}))))),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Activation Function: \"),\"This is known as sigmoid function.\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:sigmoid,language:\"js\",plugins:[\"line-numbers\"]}))),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Cost Function: \"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:cost,language:\"js\",plugins:[\"line-numbers\"]}))),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Cross Entropy: \"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:entropy,language:\"js\",plugins:[\"line-numbers\"]}))),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Gradient descent: \"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Is an optimization algorithm for finding the minimum of a function.\"),React.createElement(\"li\",null,\"Gradient descent (in 1D)\"))),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"backpropagation: \"))),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Tensor is an array.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Data augmentation: \"),\"Generate new sample from available samples.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Transfer Learning: \"),\"It save lot of computation power.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Image Classification vs Object Detection vs Image Segmentation\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Image Classification: \"),\"Entire image is one of the classes.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Process of assidning labels is called annotation.\")),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Object Detection: \"),\"What is there in image and where.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"When detect the object within an image with rectangular bounding boxes.\")),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Image Segmentation: \"),\"Which pixels belong to which object.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"When classify each of the pixels as one of the classes.\"))),React.createElement(\"h3\",null,\"Popular datasets for computer vision\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"ImageNet: \")),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"14 million hand annotated images.\"),React.createElement(\"li\",null,\"Annotated bounding boxes for at least 1 million images.\"),React.createElement(\"li\",null,\"Annotated using crowdsourcing amazon mechanical turk.\")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Coco: \")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Google Open images: \"))),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"YOLO algorithm\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Object detection algorithm.\"),React.createElement(\"li\",null,\"So fast.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Recurrent Neural Network(RNN)\"),\"Mainly for NLP.\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"RNN Applicatons:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Email auto-computation.\"),React.createElement(\"li\",null,\"text translation.\"),React.createElement(\"li\",null,\"Named Entity Recognization (NER).\"),React.createElement(\"li\",null,\"Sentiment Analysis.\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Issues using ANN for sequence problems.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Variable size of i/o neurons.\"),React.createElement(\"li\",null,\"Too much computation.\"),React.createElement(\"li\",null,\"No Parameter Sharing.\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Types of RNN:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Many to Many\"),React.createElement(\"li\",null,\"Many yo One\"),React.createElement(\"li\",null,\"One to Many\")),React.createElement(\"h3\",null,\"GRU (Gated Recurrent Units)\"),\"Bidirectional RNN\",React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Technique to compute Word embedding\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Using Supervised Learning:\"),\" Take an NLP problem and try to solve it. In that pursuit as a side effect, we got word embedding.\"),React.createElement(\"li\",null,\"Self-Supervised learning.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Word2Vec\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"embeddings are not hand crafted. Instead, they are learnt during neural network training.\"),React.createElement(\"li\",null,\"Meaning of word can be inferred by surrounding words. This surrounding words also called context.\")),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"1.Take a fake problem.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Fake problem: \"),\"Fill in a missing word in a sentence.\")),React.createElement(\"li\",null,\"2.Solve it using neural network.\"),React.createElement(\"li\",null,\"3.You get word embeddings as a side effect.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"COBW (Continuous Bag Of Words): \"),\"Given context words predict target word.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Skip Gram: \"),\"Given the target predict context words.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Tensorflow Input Pipeline\"),\"In this case use special DS that is tf.data.Dataset.\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:piplines,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"tf.data i/p Pipeline: \"),\"ETL: Extract, Transform, Load.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Tensorflow i/p Pipeline Benifits: \"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"1.Handling huge datasets by streaming them from disk using batching.\"),React.createElement(\"li\",null,\"2.Apply tranformations to make dataset ready for model training.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"BERT\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Bidirectional Encoding Representations from Transformers.\"),React.createElement(\"li\",null,\"Can generate contextualized embeddings.\"),React.createElement(\"li\",null,\"How can we capture similarities b/w two words.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"tf serving: \"),\"Makes model version management and model serving very easy.\",React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Quantization\"),\"Is a process of reducing model size So that can run on EDGE devices.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Benifits of Quantization:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Run ML models efficient on EDGE devices.\"),React.createElement(\"li\",null,\"Faster interference.\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Two ways to perform quantization:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Post training Quantization.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"tf.lite convert\"))),React.createElement(\"br\",null),React.createElement(\"li\",null,\"Quantization aware training.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"q_model = quantize_model(tf_model)\")))),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:childsFile,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return IntroAngular;}(Component);export default withStyles(styles)(IntroAngular);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjs/deepAngularjs/introAngular.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","approach","trim","sigmoid","cost","entropy","piplines","childsFile","IntroAngular","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst approach = `\nf(x) = b0 + {n(sigma)n=0 (bi * wi)}  \nwhere bi = input\n      wi = weighteg\n      b0 = bias\n`.trim();\n\nconst sigmoid = `\nf(x) = 1/ 1+ e(-x)\n                \nHyperbolic Tengent range(1,-1)\nHyperbolic Tengent tanh(z): cosh x = e(x) + e(-x)/ 2\n                            sinh x = e(x) - e(-x)/ 2\n                            tanh x = sinh x/ cosh x\n                          \nRectified Linear Unit(reLU): Most useful and relatiely simple function, max(0,z)\n`.trim();\n\nconst cost = `\nc = sigma(y - a)O2/ n \ny = mx + c \n`.trim();\n\nconst entropy = `\nCross Entropy: c =-1/n * n(sigma)n=0 (y * ln(a) + (1 - y) * ln(1 - a))\n`.trim();\n\nconst piplines = `\ntf_dataset = tf.data.Dataset.list_files('images/*').map(process_img).flter(filter_fun).map(lambda x:x/255)\n\n      where images = Load images from folder.\n            process_img = Convert image content to numpy array. Extract label from folder.\n            filter_fun = Filter Blurred images\n            map = Scaling\n`.trim();\n\nconst childsFile = ``.trim();\n\n// const pipes = ``.trim();\n\n\nclass IntroAngular extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>What is intelligent.</h3>\n              <ul>\n                <li>Capacity for learning, reasoning, understanding and similar forms of mental activity.</li>\n              </ul>\n              <br />\n              <b>AI: What is the natural of Intelligent Thought.</b>\n              <br />\n\n              <b>Ablity to perceive and act in the world.</b>\n              <ul>\n                <li><b>Reasoning: </b>Proving theorems, medical diagnosis.</li>\n                <li><b>Planning: </b>Take decision.</li>\n                <li><b>Learning and Adaptation: </b>Recommend movies, learn traffic patterns.</li>\n                <li><b>Understanding: </b>text, speech, visual scene.</li>\n              </ul>\n              Or System that act rationaly.\n              <br />\n\n              <h3>Weak AI Hypothesis vs. Strong AI Hypothesis.</h3>\n              <ul>\n                <li><b>Weak Hyp: </b>Machines could act as if they are intelligent.</li>\n                <li><b>Strong Hyp: </b>Machines that act intelligent hae to think intelligently too.</li>\n              </ul>\n              <br />\n\n              <h3>What is State?</h3>\n              All information necessary to make a decision for the task at hand.\n              <br />\n              <b>state type:</b>\n              <br />\n              <ul>\n                <li>Atomic</li>\n                <li>Propositional</li>\n                <li>Relational</li>\n                <li>First-Order</li>\n              </ul>\n              <br />\n\n              <table>\n                <tr>\n                  <th>State Type</th>\n                  <th>Description</th>\n                  <th>Focus</th>\n                </tr>\n                <tr>\n                  <td>Atomic</td>\n                  <td>State are indivisible. No internal structure.</td>\n                  <td>Search on atomic state.</td>\n                </tr>\n                <tr>\n                  <td>Propositional</td>\n                  <td>State are made of state variables that take values.</td>\n                  <td><b>Search</b> + <b>Inference</b> in logic and probabilistic representations.</td>\n                </tr>\n                <tr>\n                  <td>Relational</td>\n                  <td>State describe the objects in the world and their inter-relation.</td>\n                  <td><b>Search</b> + <b>Inference</b> in predicate logic.</td>\n                </tr>\n                <tr>\n                  <td>First-Order</td>\n                  <td><b>+function</b> over objects.</td>\n                  <td><b>Search</b> + <b>Inference</b> in first order logic.</td>\n                </tr>\n              </table>\n              <br />\n\n              <h3>DFS</h3>\n              <ul>\n                <li><b>Time complexity of tree: </b>O(bpm)</li>\n                <li><b>Space complexity of tree: </b>O(bm)</li>\n              </ul>\n              <br />\n\n              <h3>BFS</h3>\n              <ul>\n                <li><b>Time complexity of tree: </b>O(bpm)</li>\n                <li><b>Space complexity of tree: </b>O(bpm)</li>\n                <li>Not optimal because, lest cost and sortest path are not same.</li>\n              </ul>\n              <br />\n\n              <h3>Uniform cost Search</h3>\n              <ul>\n                <li>Cheapest first.</li>\n                <li><b>Time complexity of tree: </b></li>\n                <li><b>space complexity of tree:</b></li>\n                <li>optimal</li>\n              </ul>\n              <br />\n\n              <b>Slope: </b>\n              <ul>\n                <li>Used for linear equation.</li>\n                <li>It is a constant.</li>\n              </ul>\n              <br />\n\n              <b>Derivation:</b>\n              <ul>\n                <li>Used for non linear equation.</li>\n                <li>It is a function.</li>\n              </ul>\n              why we use log loss for Logistic regression.\n              <br />\n\n              <h3>Neural Networks</h3>\n              <ul>\n                <li><b>Neurons/ Perceptron's: </b>\n                  <ul>\n                    <li>Neurons is also known as Perceptron. Artificial Neurons Networks are based on Neural biological systems.</li>\n                    <li>ANN is a s/w based approach to replicate these biological Neurons.</li>\n                    <li><b>Perceptron mathematical model: </b>also called regression Function.\n                      <br />\n                      <div style={titles}>\n                        <PrismCode\n                          code={approach}\n                          language=\"js\"\n                          plugins={[\"line-numbers\"]}\n                        />\n                      </div>\n                    </li>\n                  </ul>\n                </li>\n                <br />\n                <li><b>Activation Function: </b>This is known as sigmoid function.\n                  <br />\n                  <div style={titles}>\n                    <PrismCode\n                      code={sigmoid}\n                      language=\"js\"\n                      plugins={[\"line-numbers\"]}\n                    />\n                  </div>\n                </li>\n                <br />\n                <li><b>Cost Function: </b>\n                  <br />\n                  <div style={titles}>\n                    <PrismCode\n                      code={cost}\n                      language=\"js\"\n                      plugins={[\"line-numbers\"]}\n                    />\n                  </div>\n                </li>\n                <br />\n                <li><b>Cross Entropy: </b>\n                  <br />\n                  <div style={titles}>\n                    <PrismCode\n                      code={entropy}\n                      language=\"js\"\n                      plugins={[\"line-numbers\"]}\n                    />\n                  </div>\n                </li>\n                <br />\n                <li><b>Gradient descent: </b><ul>\n                  <li>Is an optimization algorithm for finding the minimum of a function.</li>\n                  <li>Gradient descent (in 1D)</li>\n                </ul>\n                </li>\n                <br />\n                <li><b>backpropagation: </b></li>\n              </ul>\n              <br />\n              <ul>\n                <li>Tensor is an array.</li>\n                <li><b>Data augmentation: </b>Generate new sample from available samples.</li>\n                <li><b>Transfer Learning: </b>It save lot of computation power.</li>\n              </ul>\n              <br />\n\n              <h3>Image Classification vs Object Detection vs Image Segmentation</h3>\n              <ul>\n                <li><b>Image Classification: </b>Entire image is one of the classes.</li>\n                <ul>\n                  <li>Process of assidning labels is called annotation.</li>\n                </ul>\n                <br />\n                <li><b>Object Detection: </b>What is there in image and where.</li>\n                <ul>\n                  <li>When detect the object within an image with rectangular bounding boxes.</li>\n                </ul>\n                <br />\n                <li><b>Image Segmentation: </b>Which pixels belong to which object.</li>\n                <ul>\n                  <li>When classify each of the pixels as one of the classes.</li>\n                </ul>\n              </ul>\n\n              <h3>Popular datasets for computer vision</h3>\n              <ul>\n                <li><b>ImageNet: </b></li>\n                <ul>\n                  <li>14 million hand annotated images.</li>\n                  <li>Annotated bounding boxes for at least 1 million images.</li>\n                  <li>Annotated using crowdsourcing amazon mechanical turk.</li>\n                </ul>\n                <li><b>Coco: </b></li>\n                <li><b>Google Open images: </b></li>\n              </ul>\n              <br />\n\n              <h3>YOLO algorithm</h3>\n              <ul>\n                <li>Object detection algorithm.</li>\n                <li>So fast.</li>\n              </ul>\n              <br />\n\n              <h3>Recurrent Neural Network(RNN)</h3>\n              Mainly for NLP.\n              <br />\n              <b>RNN Applicatons:</b>\n              <ul>\n                <li>Email auto-computation.</li>\n                <li>text translation.</li>\n                <li>Named Entity Recognization (NER).</li>\n                <li>Sentiment Analysis.</li>\n              </ul>\n              <br />\n\n              <b>Issues using ANN for sequence problems.</b>\n              <ul>\n                <li>Variable size of i/o neurons.</li>\n                <li>Too much computation.</li>\n                <li>No Parameter Sharing.</li>\n              </ul>\n              <br />\n\n              <b>Types of RNN:</b>\n              <ul>\n                <li>Many to Many</li>\n                <li>Many yo One</li>\n                <li>One to Many</li>\n              </ul>\n\n              <h3>GRU (Gated Recurrent Units)</h3>\n              Bidirectional RNN\n              <br />\n\n              <h3>Technique to compute Word embedding</h3>\n              <ul>\n                <li><b>Using Supervised Learning:</b> Take an NLP problem and try to solve it. In that pursuit as a side effect, we got word embedding.</li>\n                <li>Self-Supervised learning.</li>\n              </ul>\n              <br />\n\n              <h3>Word2Vec</h3>\n              <ul>\n                <li>embeddings are not hand crafted. Instead, they are learnt during neural network training.</li>\n                <li>Meaning of word can be inferred by surrounding words. This surrounding words also called context.</li>\n              </ul>\n              <br />\n\n              <ul>\n                <li>1.Take a fake problem.</li>\n                <ul>\n                  <li><b>Fake problem: </b>Fill in a missing word in a sentence.</li>\n                </ul>\n                <li>2.Solve it using neural network.</li>\n                <li>3.You get word embeddings as a side effect.</li>\n                <li><b>COBW (Continuous Bag Of Words): </b>Given context words predict target word.</li>\n                <li><b>Skip Gram: </b>Given the target predict context words.</li>\n              </ul>\n              <br />\n\n              <h3>Tensorflow Input Pipeline</h3>\n              In this case use special DS that is tf.data.Dataset.\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={piplines}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>tf.data i/p Pipeline: </b>ETL: Extract, Transform, Load.\n              <br />\n              <br />\n\n              <b>Tensorflow i/p Pipeline Benifits: </b>\n              <ul>\n                <li>1.Handling huge datasets by streaming them from disk using batching.</li>\n                <li>2.Apply tranformations to make dataset ready for model training.</li>\n              </ul>\n              <br />\n\n              <h3>BERT</h3>\n              <ul>\n                <li>Bidirectional Encoding Representations from Transformers.</li>\n                <li>Can generate contextualized embeddings.</li>\n                <li>How can we capture similarities b/w two words.</li>\n              </ul>\n              <br />\n              <br />\n              <b>tf serving: </b>Makes model version management and model serving very easy.\n              <br />\n\n              <h3>Quantization</h3>\n              Is a process of reducing model size So that can run on EDGE devices.\n              <br />\n              <br />\n              <b>Benifits of Quantization:</b>\n              <ul>\n                <li>Run ML models efficient on EDGE devices.</li>\n                <li>Faster interference.</li>\n              </ul>\n              <br />\n\n              <b>Two ways to perform quantization:</b>\n              <ul>\n                <li>Post training Quantization.</li>\n                <ul>\n                  <li><b>tf.lite convert</b></li>\n                </ul>\n                <br />\n\n                <li>Quantization aware training.</li>\n                <ul>\n                  <li><b>q_model = quantize_model(tf_model)</b></li>\n                </ul>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={childsFile}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\n\nexport default (withStyles(styles)(IntroAngular));\n"]},"metadata":{},"sourceType":"module"}