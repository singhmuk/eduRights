{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/nodeJs/nodeDeep/buffers.js\";\nimport React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\nconst titles = {\n  backgroundColor: \"#F0F8FF\",\n  padding: \"1px\",\n  fontSize: \"16px\"\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst buffer = `\nvar buf = Buffer.alloc(10);\nvar buf = new Buffer([10, 20, 30, 40, 50]);\nvar buf = Buffer.from('abc');\nvar buf = Buffer.from(\"Simply Easy Learning\", \"utf-8\");\n\nconsole.log(buf);\n`.trim();\nconst firstBuf = `\nconst firstBuf = Buffer.alloc(1024);\nconst filledBuf = Buffer.alloc(1024, 1);\nconst asciiBuf = Buffer.alloc(5, 'a', 'ascii');          //create a buffer five bytes long \n                                                         //and stores only ASCII characters\nconsole.log(asciiBuf);\n`.trim();\nconst stringBuf = ``.trim();\nconst code = `\nconst stringBuf = Buffer.from('My name is Paul');\nconsole.log(stringBuf);\n\nconst asciiBuf = Buffer.alloc(5, 'a', 'ascii');\nconst asciiCopy = Buffer.from(asciiBuf);\nconsole.log(asciiCopy);\n\nconst tenZeroes = Buffer.alloc(10);\nconsole.log(tenZeroes.toString());\n`.trim();\nconst hiBuf = `\nconst hiBuf = Buffer.from('Hi!');\nconsole.log(hiBuf[0]);\nconsole.log(hiBuf.toString());\nconsole.log(hiBuf.toString('hex'));\nconsole.log(hiBuf.toJSON());\n\n\n//2\nbuf = new Buffer.alloc(26);\nfor (var i = 0; i < 26; i++) {\n  buf[i] = i + 97;\n}\n\nconsole.log(buf.toString(\"ascii\"));                                           // abcdefghijklmnopqrstuvwxyz.\nconsole.log(buf.toString(\"ascii\", 0, 5));                                     // abcde.\nconsole.log(buf.toString(\"utf8\", 0, 5));                                      // abcde.\nconsole.log(buf.toString(undefined, 0, 5));\n`.trim();\nconst hiBufs = `\nconst hiBuf = Buffer.from('Hi!');\nhiBuf[1] = 'e';\nconsole.log(hiBuf.toString());\n\nhiBuf[1] = 101;\nconsole.log(hiBuf.toString());\n\nconst petBuf = Buffer.alloc(3);\npetBuf.write('Cats');\nconsole.log(petBuf.toString());\n\n//first two characters are overwritten, but the rest of the buffer is untouched.\nconst petBuf2 = Buffer.alloc(4);\npetBuf2.write('Cats');\npetBuf2.write('Hi');\nconsole.log(petBuf2.toString());\n`.trim();\nconst buff = `\nbuf = new Buffer.alloc(256);\nlen = buf.write(\"Simply Easy Learning\");\n\nconsole.log(\"Octets written : \" + len);\n\n\n//\nvar buffer1 = new Buffer.from(\"ABC\");\nvar buffer2 = new Buffer.from(\"ABCD\");\nvar result = buffer1.compare(buffer2);\n\nif (result < 0) {\n  console.log(buffer1 + \" comes before \" + buffer2);\n} else if (result === 0) {\n  console.log(buffer1 + \" is same as \" + buffer2);\n} else {\n  console.log(buffer1 + \" comes after \" + buffer2);\n}\n\n\n//\nvar buffer1 = new Buffer.from(\"TutorialsPoint \");\nvar buffer2 = new Buffer.from(\"Simply Easy Learning\");\nvar buffer3 = Buffer.concat([buffer1, buffer2]);\n\nconsole.log(\"buffer3 content: \" + buffer3);\n\n\n//copy a buffer\nvar buffer1 = new Buffer.from(\"ABC\");\n\nvar buffer2 = new Buffer.alloc(3);\nbuffer1.copy(buffer2);\nconsole.log(\"buffer2 content: \" + buffer2.toString());`.trim();\nconst buffJson = `\nconst data = [\n  { name: \"John Doe\", age: 23 },\n  { name: \"John Doe\", age: 2 },\n  { name: \"John Doe\", age: 3 },\n  { name: \"John Doe\", age: 4 },\n];\n\nconst buff = Buffer.from(data);\n\nlet bufferOne = Buffer.from(data);\n\nlet json = bufferOne.toJSON();\n// let json = JSON.stringify(bufferOne);\nconsole.log(json);\n`.trim();\n\nclass BufferNode extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"Buffer\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Pure JavaScript is Unicode friendly, but it is not so for binary data. While dealing with TCP streams or the file system, it's necessary to handle octet streams. Node provides Buffer class which help to store raw data to a raw memory allocation outside the V8 heap.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: buffer,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    })), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"This method returns the number of octets written. If there is not enough space in the buffer to fit the entire string, it will write a part of the string.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"alloc() - \"), \"Creates a Buffer object of the specified length.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"allocUnsafe() - \"), \"Creates a non-zero-filled Buffer of the specified length.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"compare() - \"), \"Compares two Buffer objects.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"concat() - \"), \"Concatenates an array of Buffer objects into one Buffer object.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, \"copy() - \"), \"Copies the specified number of bytes of a Buffer object\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, \"entries() - \"), \"Returns an iterator of \\\"index\\\" \\\"byte\\\" pairs of a Buffer object\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, \"equals() - \"), \"Compares two Buffer objects, and returns true if it is a match, otherwise false\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, \"fill() - \"), \"Fills a Buffer object with the specified values\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, \"from() - \"), \"Creates a Buffer object from an object (string/array/buffer)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, \"includes() - \"), \"Checks if the Buffer object contains the specified value. Returns true if there is a match, otherwise false\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, \"indexOf() - \"), \"Checks if the Buffer object contains the specified value. Returns the first occurrence, otherwise -1\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, \"keys() - \"), \"Returns an array of keys in a Buffer object length - Returns the length of a Buffer object, in bytes\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, \"slice() - \"), \"Slices a Buffer object into a new Buffer objects starting and ending at the specified positions\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, \"swap16()- \"), \"Swaps the byte-order of a 16 bit Buffer object\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, \"toString()- \"), \"Returns a string version of a Buffer object\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, \"toJSON()- \"), \"Returns a JSON version of a Buffer object\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \"values()- \"), \"Returns an array of values in a Buffer object\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, \"write() - \"), \"Writes a specified string to a Buffer object\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, \"Buffering process output\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, \"In cases where the complete buffered output of a child process is sufficient, with no need to manage data through events, child_process offers the exec method. The method takes three arguments:\", \" \"), \"command: A command-line string. Unlike spawn and fork, which pass arguments to a command via an array, this first argument accepts a full command string, such as ps aux | grep node.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, \"options: This is an optional argument.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, \"cwd (String): This sets the working directory for the command process.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, \"env (Object): This is a map of key-value pairs that will be exposed to the child process.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, \"encoding (String): This is the encoding of the child's data stream. The default value is 'utf8'.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, \"timeout (Number): This specifies the milliseconds to wait for the process to complete, at which point the child process will be sent the killSignal.maxBuffer value.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, \"killSignal.maxBuffer (Number): This is the maximum number of bytes allowed on stdout or stderr. When this number is exceeded, the process is killed. This default is 200 KB.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, \"killSignal (String): The child process receives this signal after a timeout. This default is SIGTERM.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }), \"When you want the buffering behavior of exec but are targeting a Node file, use execFile. Importantly, execFile does not spawn a new subshell, which makes it slightly less expensive to run.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, \"Create Buffer\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, \"If we store data in memory that we receive, then create a new buffer. In Node.js we use the alloc().\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, \"The alloc() function takes the size of the buffer as its first and only required argument. The size is an integer representing how many bytes of memory the buffer object will use.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: firstBuf,\n      la: true,\n      nguage: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: buff,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, \"2 Ways to create buffer\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, \"Create a buffer from data that already exists, like a string or array.\"), \"To create a buffer from pre-existing data, we use the from() method. We can use that function to create buffers from:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, \"An array of integers :\"), \" The integer values can be between 0 and 255.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, \"An ArrayBuffer :\"), \" This is a JavaScript object that stores a fixed length of bytes.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, \"A string\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, \"Another buffer\"))), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: stringBuf,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }, \"Reading from buffer\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, \"To access one byte of a buffer, we pass the index or location of the byte we want. Buffers store data sequentially like arrays.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: hiBuf,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, \"Modify buffer\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, \"Buffer can only accept an integer value. We can\\u2019t assign it to the letter.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }, \"If try to write more bytes than a buffer\\u2019s size, the buffer object will only accept what bytes fit.\"))), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: hiBufs,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, \"Buffer to JSON\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: buffJson,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, \"How can you secure a Node.js application?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }, \"Keep dependencies up-to-date: \"), \"Make sure that all dependencies used in your Node.js application are up-to-date to avoid potential vulnerabilities. Use npm audit to scan your dependencies for security issues and update them accordingly.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }, \"Use secure coding practices: \"), \"Write secure code by following best practices such as validating user input, sanitizing data, and using secure data storage techniques.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, \"Use HTTPS: \"), \"Always use HTTPS instead of HTTP to encrypt data in transit. This can be done by obtaining an SSL/TLS certificate and configuring your application to use HTTPS.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }, \"Implement authentication and authorization: \"), \"Implement a secure authentication and authorization mechanism to ensure that only authorized users can access your application. Use techniques such as password hashing, token-based authentication, and session management.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }, \"Use middleware: \"), \"Use middleware to handle security-related tasks such as CSRF protection, rate limiting, and input validation.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    }, \"Use a firewall: \"), \"Use a firewall to restrict access to your application to authorized users only.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }, \"Monitor your application: \"), \"Monitor your application for security threats such as suspicious activity, unauthorized access attempts, and data breaches.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }, \"What are the benefits of using Express.js for building web applications?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, \"Simplicity and flexibility: \"), \"Express.js is a minimalist framework that provides a simple and flexible structure for building web applications. It offers a range of middleware and routing options that allow developers to customize the application as per their requirements.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }, \"Middleware: \"), \"Express.js provides a robust middleware system that enables developers to add additional functionality to the application. Middleware can handle tasks such as parsing data, validating input, and handling errors.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }, \"Routing: \"), \"Express.js offers a powerful routing system that allows developers to create complex routes and handle HTTP requests easily. It also supports multiple routing methods such as GET, POST, PUT, and DELETE.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }, \"Integration with other tools and libraries: \"), \"Express.js integrates seamlessly with other Node.js tools and libraries, such as MongoDB, Passport, and Socket.IO, making it a versatile choice for building web applications.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493\n      },\n      __self: this\n    }, \"Scalability: \"), \"Express.js offers a scalable architecture that can handle a high volume of requests and traffic. It is also easy to deploy and maintain, which makes it an ideal choice for building large-scale applications.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502\n      },\n      __self: this\n    }, \"How can you optimize the performance of a Node.js application?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }, \"Minimize the use of blocking I/O operations: \"), \"Blocking I/O operations can slow down the performance of a Node.js application. To optimize performance, it is important to minimize the use of blocking I/O operations and instead use non-blocking I/O operations.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }, \"Use a load balancer: \"), \"A load balancer can distribute the traffic among multiple instances of the Node.js application, improving performance and increasing availability.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }, \"Cache frequently used data: \"), \"Caching frequently used data can reduce the number of database queries and network requests, improving the performance of the application.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    }, \"Use a cluster module: \"), \"The cluster module in Node.js allows for the creation of multiple worker processes that can handle requests concurrently, improving the performance of the application.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }, \"Optimize database queries: \"), \"Database queries can be optimized by using indexes, minimizing the number of joins, and minimizing the amount of data returned.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    }, \"Use a content delivery network (CDN): \"), \"A CDN can distribute static assets, such as images and videos, to multiple servers around the world, reducing the load on the Node.js application and improving the performance.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }, \"Use a reverse proxy: \"), \"A reverse proxy can cache frequently requested content, reducing the load on the Node.js application and improving performance.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553\n      },\n      __self: this\n    }, \"Use compression: \"), \"Compression can reduce the size of the data sent over the network, improving the performance of the application.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    }, \"Use a profiling tool: \"), \"Profiling tools can help identify performance bottlenecks in the application code, allowing developers to optimize the performance.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    }, \"How can you handle errors in a Node.js application?\"), \"Handling errors in a Node.js application is essential for ensuring that the application runs smoothly and without any unexpected errors or crashes.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572\n      },\n      __self: this\n    }, \"Use try-catch blocks: \"), \"Wrap code that might throw errors in try-catch blocks to handle errors gracefully. If an error is thrown, the catch block will handle the error and take appropriate action.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579\n      },\n      __self: this\n    }, \"Use error events: \"), \"Node.js provides built-in error events that can be used to handle errors in the application. These events can be used to catch unhandled errors that are not caught by try-catch blocks.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    }, \"Use error handling middleware: \"), \"In an Express.js application, error handling middleware can be used to catch and handle errors that occur during the request-response cycle.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593\n      },\n      __self: this\n    }, \"Use logging: \"), \"Logging errors can be helpful in identifying the root cause of errors and fixing them. Use a logging library like Winston or Bunyan to log errors in the application.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600\n      },\n      __self: this\n    }, \"Use domain: \"), \"The domain module in Node.js can be used to handle errors that occur in asynchronous code. A domain can be created to handle errors in a specific part of the application.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 605\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607\n      },\n      __self: this\n    }, \"Use error codes: \"), \"Use error codes to identify specific errors in the application. Error codes can help developers quickly identify the cause of errors and take appropriate action to fix them.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614\n      },\n      __self: this\n    }, \"Use fallbacks: \"), \"If an error occurs, it's important to provide a fallback mechanism to ensure that the application continues to function as expected. For example, if a database connection fails, the application should provide a fallback mechanism to ensure that data is retrieved from another source.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 623\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624\n      },\n      __self: this\n    }, \"What are some popular Node.js modules and frameworks that you have worked with?\"), \"As a language, Node.js has a rich ecosystem of modules and frameworks that can be used to build web applications, APIs, and command-line tools. Some of the popular Node.js modules and frameworks that I have worked with include:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 633\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 634\n      },\n      __self: this\n    }, \"Express.js: \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637\n      },\n      __self: this\n    }, \"Socket.io: \"), \"Socket.io is a real-time web socket library that enables bidirectional communication between clients and servers.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 642\n      },\n      __self: this\n    }, \"Mongoose: \"), \"Mongoose is an Object Data Modeling (ODM) library that provides a straight-forward, schema-based solution for interacting with MongoDB databases.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647\n      },\n      __self: this\n    }, \"Passport.js: \"), \"Passport is an authentication middleware for Node.js that provides a comprehensive set of authentication strategies for applications.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 651\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652\n      },\n      __self: this\n    }, \"Request: \"), \"Request is a simple HTTP request client that can be used to make HTTP requests from Node.js.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    }, \" Nodemon: \"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661\n      },\n      __self: this\n    }, \"Explain how you would deploy a Node.js application to a production environment.\"), \"Deploying a Node.js application to a production environment involves a series of steps that ensure the application is ready to handle a large number of users and can be easily maintained.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670\n      },\n      __self: this\n    }, \"Set up a production environment: \"), \"The first step is to set up a production environment that is different from the development environment. This can include creating a new server or using a cloud hosting service like Amazon Web Services, Microsoft Azure, or Google Cloud Platform.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678\n      },\n      __self: this\n    }, \"Configure the server: \"), \"Once the server is set up, it needs to be configured to run Node.js applications. This includes installing Node.js and setting up environment variables.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685\n      },\n      __self: this\n    }, \"Install dependencies: \"), \"All the required dependencies should be installed on the production server. This can be done by running the command npm install --production in the application's root directory.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692\n      },\n      __self: this\n    }, \"Build the application: \"), \"Before deploying the application, it is recommended to build it using a tool like Webpack or Grunt. This can help in optimizing the application's performance and reducing its file size.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 697\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699\n      },\n      __self: this\n    }, \"Set up a process manager: \"), \"A process manager like PM2 or Forever can be used to manage the Node.js application process and ensure that it runs continuously.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705\n      },\n      __self: this\n    }, \"Set up a reverse proxy: \"), \"A reverse proxy like Nginx or Apache can be used to handle incoming requests and forward them to the Node.js application. This can help in improving the application's performance and security.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712\n      },\n      __self: this\n    }, \"Set up SSL: \"), \"SSL should be enabled on the production server to ensure that all data transmitted between the server and client is encrypted.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 717\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 718\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 719\n      },\n      __self: this\n    }, \"How do you handle file uploads in Node.js?\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 720\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 721\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 722\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 723\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 726\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 727\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 728\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 729\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 730\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 733\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 736\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 737\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 738\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 739\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 740\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 741\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 742\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 743\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default withStyles(styles)(BufferNode);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/nodeJs/nodeDeep/buffers.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","buffer","trim","firstBuf","stringBuf","code","hiBuf","hiBufs","buff","buffJson","BufferNode","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst buffer = `\nvar buf = Buffer.alloc(10);\nvar buf = new Buffer([10, 20, 30, 40, 50]);\nvar buf = Buffer.from('abc');\nvar buf = Buffer.from(\"Simply Easy Learning\", \"utf-8\");\n\nconsole.log(buf);\n`.trim();\n\nconst firstBuf = `\nconst firstBuf = Buffer.alloc(1024);\nconst filledBuf = Buffer.alloc(1024, 1);\nconst asciiBuf = Buffer.alloc(5, 'a', 'ascii');          //create a buffer five bytes long \n                                                         //and stores only ASCII characters\nconsole.log(asciiBuf);\n`.trim();\n\nconst stringBuf = ``.trim();\n\nconst code = `\nconst stringBuf = Buffer.from('My name is Paul');\nconsole.log(stringBuf);\n\nconst asciiBuf = Buffer.alloc(5, 'a', 'ascii');\nconst asciiCopy = Buffer.from(asciiBuf);\nconsole.log(asciiCopy);\n\nconst tenZeroes = Buffer.alloc(10);\nconsole.log(tenZeroes.toString());\n`.trim();\n\nconst hiBuf = `\nconst hiBuf = Buffer.from('Hi!');\nconsole.log(hiBuf[0]);\nconsole.log(hiBuf.toString());\nconsole.log(hiBuf.toString('hex'));\nconsole.log(hiBuf.toJSON());\n\n\n//2\nbuf = new Buffer.alloc(26);\nfor (var i = 0; i < 26; i++) {\n  buf[i] = i + 97;\n}\n\nconsole.log(buf.toString(\"ascii\"));                                           // abcdefghijklmnopqrstuvwxyz.\nconsole.log(buf.toString(\"ascii\", 0, 5));                                     // abcde.\nconsole.log(buf.toString(\"utf8\", 0, 5));                                      // abcde.\nconsole.log(buf.toString(undefined, 0, 5));\n`.trim();\n\nconst hiBufs = `\nconst hiBuf = Buffer.from('Hi!');\nhiBuf[1] = 'e';\nconsole.log(hiBuf.toString());\n\nhiBuf[1] = 101;\nconsole.log(hiBuf.toString());\n\nconst petBuf = Buffer.alloc(3);\npetBuf.write('Cats');\nconsole.log(petBuf.toString());\n\n//first two characters are overwritten, but the rest of the buffer is untouched.\nconst petBuf2 = Buffer.alloc(4);\npetBuf2.write('Cats');\npetBuf2.write('Hi');\nconsole.log(petBuf2.toString());\n`.trim();\n\nconst buff = `\nbuf = new Buffer.alloc(256);\nlen = buf.write(\"Simply Easy Learning\");\n\nconsole.log(\"Octets written : \" + len);\n\n\n//\nvar buffer1 = new Buffer.from(\"ABC\");\nvar buffer2 = new Buffer.from(\"ABCD\");\nvar result = buffer1.compare(buffer2);\n\nif (result < 0) {\n  console.log(buffer1 + \" comes before \" + buffer2);\n} else if (result === 0) {\n  console.log(buffer1 + \" is same as \" + buffer2);\n} else {\n  console.log(buffer1 + \" comes after \" + buffer2);\n}\n\n\n//\nvar buffer1 = new Buffer.from(\"TutorialsPoint \");\nvar buffer2 = new Buffer.from(\"Simply Easy Learning\");\nvar buffer3 = Buffer.concat([buffer1, buffer2]);\n\nconsole.log(\"buffer3 content: \" + buffer3);\n\n\n//copy a buffer\nvar buffer1 = new Buffer.from(\"ABC\");\n\nvar buffer2 = new Buffer.alloc(3);\nbuffer1.copy(buffer2);\nconsole.log(\"buffer2 content: \" + buffer2.toString());`.trim();\n\nconst buffJson = `\nconst data = [\n  { name: \"John Doe\", age: 23 },\n  { name: \"John Doe\", age: 2 },\n  { name: \"John Doe\", age: 3 },\n  { name: \"John Doe\", age: 4 },\n];\n\nconst buff = Buffer.from(data);\n\nlet bufferOne = Buffer.from(data);\n\nlet json = bufferOne.toJSON();\n// let json = JSON.stringify(bufferOne);\nconsole.log(json);\n`.trim();\n\nclass BufferNode extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Buffer</h3>\n              <ul>\n                <li>\n                  Pure JavaScript is Unicode friendly, but it is not so for\n                  binary data. While dealing with TCP streams or the file\n                  system, it's necessary to handle octet streams. Node provides\n                  Buffer class which help to store raw data to a raw memory\n                  allocation outside the V8 heap.\n                </li>\n                <div style={titles}>\n                  <PrismCode\n                    code={buffer}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n                <i>\n                  This method returns the number of octets written. If there is\n                  not enough space in the buffer to fit the entire string, it\n                  will write a part of the string.\n                </i>\n                <br />\n                <br />\n\n                <li>\n                  <b>alloc() - </b>Creates a Buffer object of the specified\n                  length.\n                </li>\n                <li>\n                  <b>allocUnsafe() - </b>Creates a non-zero-filled Buffer of the\n                  specified length.\n                </li>\n                <li>\n                  <b>compare() - </b>Compares two Buffer objects.\n                </li>\n                <li>\n                  <b>concat() - </b>Concatenates an array of Buffer objects into\n                  one Buffer object.\n                </li>\n                <li>\n                  <b>copy() - </b>Copies the specified number of bytes of a\n                  Buffer object\n                </li>\n                <li>\n                  <b>entries() - </b>Returns an iterator of \"index\" \"byte\" pairs\n                  of a Buffer object\n                </li>\n                <li>\n                  <b>equals() - </b>Compares two Buffer objects, and returns\n                  true if it is a match, otherwise false\n                </li>\n                <li>\n                  <b>fill() - </b>Fills a Buffer object with the specified\n                  values\n                </li>\n                <li>\n                  <b>from() - </b>Creates a Buffer object from an object\n                  (string/array/buffer)\n                </li>\n                <li>\n                  <b>includes() - </b>Checks if the Buffer object contains the\n                  specified value. Returns true if there is a match, otherwise\n                  false\n                </li>\n                <li>\n                  <b>indexOf() - </b>Checks if the Buffer object contains the\n                  specified value. Returns the first occurrence, otherwise -1\n                </li>\n                <li>\n                  <b>keys() - </b>Returns an array of keys in a Buffer object\n                  length - Returns the length of a Buffer object, in bytes\n                </li>\n                <li>\n                  <b>slice() - </b>Slices a Buffer object into a new Buffer\n                  objects starting and ending at the specified positions\n                </li>\n                <li>\n                  <b>swap16()- </b>Swaps the byte-order of a 16 bit Buffer\n                  object\n                </li>\n                <li>\n                  <b>toString()- </b>Returns a string version of a Buffer object\n                </li>\n                <li>\n                  <b>toJSON()- </b>Returns a JSON version of a Buffer object\n                </li>\n                <li>\n                  <b>values()- </b>Returns an array of values in a Buffer object\n                </li>\n                <li>\n                  <b>write() - </b>Writes a specified string to a Buffer object\n                </li>\n              </ul>\n              <br />\n              <h3>Buffering process output</h3>\n              <p>\n                In cases where the complete buffered output of a child process\n                is sufficient, with no need to manage data through events,\n                child_process offers the exec method. The method takes three\n                arguments:{\" \"}\n              </p>\n              command: A command-line string. Unlike spawn and fork, which pass\n              arguments to a command via an array, this first argument accepts a\n              full command string, such as ps aux | grep node.\n              <br />\n              <br />\n              <ul>\n                <b>options: This is an optional argument.</b>\n                <li>\n                  cwd (String): This sets the working directory for the command\n                  process.\n                </li>\n                <li>\n                  env (Object): This is a map of key-value pairs that will be\n                  exposed to the child process.\n                </li>\n                <li>\n                  encoding (String): This is the encoding of the child's data\n                  stream. The default value is 'utf8'.\n                </li>\n                <li>\n                  timeout (Number): This specifies the milliseconds to wait for\n                  the process to complete, at which point the child process will\n                  be sent the killSignal.maxBuffer value.\n                </li>\n                <li>\n                  killSignal.maxBuffer (Number): This is the maximum number of\n                  bytes allowed on stdout or stderr. When this number is\n                  exceeded, the process is killed. This default is 200 KB.\n                </li>\n                <li>\n                  killSignal (String): The child process receives this signal\n                  after a timeout. This default is SIGTERM.\n                </li>\n              </ul>\n              <br />\n              When you want the buffering behavior of exec but are targeting a\n              Node file, use execFile. Importantly, execFile does not spawn a\n              new subshell, which makes it slightly less expensive to run.\n              <br />\n              <br />\n              <b>Create Buffer</b>\n              <p>\n                If we store data in memory that we receive, then create a new\n                buffer. In Node.js we use the alloc().\n              </p>\n              <p>\n                The alloc() function takes the size of the buffer as its first\n                and only required argument. The size is an integer representing\n                how many bytes of memory the buffer object will use.\n              </p>\n              <div style={titles}>\n                <PrismCode\n                  code={firstBuf}\n                  la\n                  nguage=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={buff}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>2 Ways to create buffer</b>\n              <p>\n                Create a buffer from data that already exists, like a string or\n                array.\n              </p>\n              To create a buffer from pre-existing data, we use the from()\n              method. We can use that function to create buffers from:\n              <ul>\n                <li>\n                  <b>An array of integers :</b> The integer values can be\n                  between 0 and 255.\n                </li>\n                <li>\n                  <b>An ArrayBuffer :</b> This is a JavaScript object that\n                  stores a fixed length of bytes.\n                </li>\n                <ul>\n                  <li>A string</li>\n                  <li>Another buffer</li>\n                </ul>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={stringBuf}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Reading from buffer</b>\n              <p>\n                To access one byte of a buffer, we pass the index or location of\n                the byte we want. Buffers store data sequentially like arrays.\n              </p>\n              <div style={titles}>\n                <PrismCode\n                  code={hiBuf}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Modify buffer</b>\n              <p>\n                <ul>\n                  <li>\n                    Buffer can only accept an integer value. We can’t assign it\n                    to the letter.\n                  </li>\n                  <li>\n                    If try to write more bytes than a buffer’s size, the buffer\n                    object will only accept what bytes fit.\n                  </li>\n                </ul>\n              </p>\n              <div style={titles}>\n                <PrismCode\n                  code={hiBufs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Buffer to JSON</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={buffJson}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>How can you secure a Node.js application?</h3>\n              <ul>\n                <li>\n                  <b>Keep dependencies up-to-date: </b>Make sure that all\n                  dependencies used in your Node.js application are up-to-date\n                  to avoid potential vulnerabilities. Use npm audit to scan your\n                  dependencies for security issues and update them accordingly.\n                </li>\n                <br />\n                <li>\n                  <b>Use secure coding practices: </b>Write secure code by\n                  following best practices such as validating user input,\n                  sanitizing data, and using secure data storage techniques.\n                </li>\n                <br />\n                <li>\n                  <b>Use HTTPS: </b>Always use HTTPS instead of HTTP to encrypt\n                  data in transit. This can be done by obtaining an SSL/TLS\n                  certificate and configuring your application to use HTTPS.\n                </li>\n                <br />\n                <li>\n                  <b>Implement authentication and authorization: </b>Implement a\n                  secure authentication and authorization mechanism to ensure\n                  that only authorized users can access your application. Use\n                  techniques such as password hashing, token-based\n                  authentication, and session management.\n                </li>\n                <br />\n                <li>\n                  <b>Use middleware: </b>Use middleware to handle\n                  security-related tasks such as CSRF protection, rate limiting,\n                  and input validation.\n                </li>\n                <br />\n                <li>\n                  <b>Use a firewall: </b>Use a firewall to restrict access to\n                  your application to authorized users only.\n                </li>\n                <br />\n                <li>\n                  <b>Monitor your application: </b>Monitor your application for\n                  security threats such as suspicious activity, unauthorized\n                  access attempts, and data breaches.\n                </li>\n                <br />\n              </ul>\n              <br />\n              <br />\n              <h3>\n                What are the benefits of using Express.js for building web\n                applications?\n              </h3>\n              <ul>\n                <li>\n                  <b>Simplicity and flexibility: </b>Express.js is a minimalist\n                  framework that provides a simple and flexible structure for\n                  building web applications. It offers a range of middleware and\n                  routing options that allow developers to customize the\n                  application as per their requirements.\n                </li>\n                <br />\n                <li>\n                  <b>Middleware: </b>Express.js provides a robust middleware\n                  system that enables developers to add additional functionality\n                  to the application. Middleware can handle tasks such as\n                  parsing data, validating input, and handling errors.\n                </li>\n                <br />\n                <li>\n                  <b>Routing: </b>Express.js offers a powerful routing system\n                  that allows developers to create complex routes and handle\n                  HTTP requests easily. It also supports multiple routing\n                  methods such as GET, POST, PUT, and DELETE.\n                </li>\n                <br />\n                <li>\n                  <b>Integration with other tools and libraries: </b>Express.js\n                  integrates seamlessly with other Node.js tools and libraries,\n                  such as MongoDB, Passport, and Socket.IO, making it a\n                  versatile choice for building web applications.\n                </li>\n                <br />\n                <li>\n                  <b>Scalability: </b>Express.js offers a scalable architecture\n                  that can handle a high volume of requests and traffic. It is\n                  also easy to deploy and maintain, which makes it an ideal\n                  choice for building large-scale applications.\n                </li>\n                <br />\n              </ul>\n              <br />\n              <br />\n              <h3>\n                How can you optimize the performance of a Node.js application?\n              </h3>\n              <ul>\n                <li>\n                  <b>Minimize the use of blocking I/O operations: </b>Blocking\n                  I/O operations can slow down the performance of a Node.js\n                  application. To optimize performance, it is important to\n                  minimize the use of blocking I/O operations and instead use\n                  non-blocking I/O operations.\n                </li>\n                <br />\n                <li>\n                  <b>Use a load balancer: </b>A load balancer can distribute the\n                  traffic among multiple instances of the Node.js application,\n                  improving performance and increasing availability.\n                </li>\n                <br />\n                <li>\n                  <b>Cache frequently used data: </b>Caching frequently used\n                  data can reduce the number of database queries and network\n                  requests, improving the performance of the application.\n                </li>\n                <br />\n                <li>\n                  <b>Use a cluster module: </b>The cluster module in Node.js\n                  allows for the creation of multiple worker processes that can\n                  handle requests concurrently, improving the performance of the\n                  application.\n                </li>\n                <br />\n                <li>\n                  <b>Optimize database queries: </b>Database queries can be\n                  optimized by using indexes, minimizing the number of joins,\n                  and minimizing the amount of data returned.\n                </li>\n                <br />\n                <li>\n                  <b>Use a content delivery network (CDN): </b>A CDN can\n                  distribute static assets, such as images and videos, to\n                  multiple servers around the world, reducing the load on the\n                  Node.js application and improving the performance.\n                </li>\n                <br />\n                <li>\n                  <b>Use a reverse proxy: </b>A reverse proxy can cache\n                  frequently requested content, reducing the load on the Node.js\n                  application and improving performance.\n                </li>\n                <br />\n                <li>\n                  <b>Use compression: </b>Compression can reduce the size of the\n                  data sent over the network, improving the performance of the\n                  application.\n                </li>\n                <br />\n                <li>\n                  <b>Use a profiling tool: </b>Profiling tools can help identify\n                  performance bottlenecks in the application code, allowing\n                  developers to optimize the performance.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>How can you handle errors in a Node.js application?</h3>\n              Handling errors in a Node.js application is essential for ensuring\n              that the application runs smoothly and without any unexpected\n              errors or crashes.\n              <ul>\n                <li>\n                  <b>Use try-catch blocks: </b>Wrap code that might throw errors\n                  in try-catch blocks to handle errors gracefully. If an error\n                  is thrown, the catch block will handle the error and take\n                  appropriate action.\n                </li>\n                <br />\n                <li>\n                  <b>Use error events: </b>Node.js provides built-in error\n                  events that can be used to handle errors in the application.\n                  These events can be used to catch unhandled errors that are\n                  not caught by try-catch blocks.\n                </li>\n                <br />\n                <li>\n                  <b>Use error handling middleware: </b>In an Express.js\n                  application, error handling middleware can be used to catch\n                  and handle errors that occur during the request-response\n                  cycle.\n                </li>\n                <br />\n                <li>\n                  <b>Use logging: </b>Logging errors can be helpful in\n                  identifying the root cause of errors and fixing them. Use a\n                  logging library like Winston or Bunyan to log errors in the\n                  application.\n                </li>\n                <br />\n                <li>\n                  <b>Use domain: </b>The domain module in Node.js can be used to\n                  handle errors that occur in asynchronous code. A domain can be\n                  created to handle errors in a specific part of the\n                  application.\n                </li>\n                <br />\n                <li>\n                  <b>Use error codes: </b>Use error codes to identify specific\n                  errors in the application. Error codes can help developers\n                  quickly identify the cause of errors and take appropriate\n                  action to fix them.\n                </li>\n                <br />\n                <li>\n                  <b>Use fallbacks: </b>If an error occurs, it's important to\n                  provide a fallback mechanism to ensure that the application\n                  continues to function as expected. For example, if a database\n                  connection fails, the application should provide a fallback\n                  mechanism to ensure that data is retrieved from another\n                  source.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>\n                What are some popular Node.js modules and frameworks that you\n                have worked with?\n              </h3>\n              As a language, Node.js has a rich ecosystem of modules and\n              frameworks that can be used to build web applications, APIs, and\n              command-line tools. Some of the popular Node.js modules and\n              frameworks that I have worked with include:\n              <ul>\n                <li>\n                  <b>Express.js: </b>\n                </li>\n                <li>\n                  <b>Socket.io: </b>Socket.io is a real-time web socket library\n                  that enables bidirectional communication between clients and\n                  servers.\n                </li>\n                <li>\n                  <b>Mongoose: </b>Mongoose is an Object Data Modeling (ODM)\n                  library that provides a straight-forward, schema-based\n                  solution for interacting with MongoDB databases.\n                </li>\n                <li>\n                  <b>Passport.js: </b>Passport is an authentication middleware\n                  for Node.js that provides a comprehensive set of\n                  authentication strategies for applications.\n                </li>\n                <li>\n                  <b>Request: </b>Request is a simple HTTP request client that\n                  can be used to make HTTP requests from Node.js.\n                </li>\n                <li>\n                  <b> Nodemon: </b>\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>\n                Explain how you would deploy a Node.js application to a\n                production environment.\n              </h3>\n              Deploying a Node.js application to a production environment\n              involves a series of steps that ensure the application is ready to\n              handle a large number of users and can be easily maintained.\n              <ul>\n                <li>\n                  <b>Set up a production environment: </b>The first step is to\n                  set up a production environment that is different from the\n                  development environment. This can include creating a new\n                  server or using a cloud hosting service like Amazon Web\n                  Services, Microsoft Azure, or Google Cloud Platform.\n                </li>\n                <br />\n                <li>\n                  <b>Configure the server: </b>Once the server is set up, it\n                  needs to be configured to run Node.js applications. This\n                  includes installing Node.js and setting up environment\n                  variables.\n                </li>\n                <br />\n                <li>\n                  <b>Install dependencies: </b>All the required dependencies\n                  should be installed on the production server. This can be done\n                  by running the command npm install --production in the\n                  application's root directory.\n                </li>\n                <br />\n                <li>\n                  <b>Build the application: </b>Before deploying the\n                  application, it is recommended to build it using a tool like\n                  Webpack or Grunt. This can help in optimizing the\n                  application's performance and reducing its file size.\n                </li>\n                <br />\n                <li>\n                  <b>Set up a process manager: </b>A process manager like PM2 or\n                  Forever can be used to manage the Node.js application process\n                  and ensure that it runs continuously.\n                </li>\n                <br />\n                <li>\n                  <b>Set up a reverse proxy: </b>A reverse proxy like Nginx or\n                  Apache can be used to handle incoming requests and forward\n                  them to the Node.js application. This can help in improving\n                  the application's performance and security.\n                </li>\n                <br />\n                <li>\n                  <b>Set up SSL: </b>SSL should be enabled on the production\n                  server to ensure that all data transmitted between the server\n                  and client is encrypted.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>How do you handle file uploads in Node.js?</h3>\n              <br />\n              <br />\n              <h3></h3>\n              <br />\n              <br />\n              <h3></h3>\n              <br />\n              <br />\n              <h3></h3>\n              <br />\n              <br />\n              <h3></h3>\n              <br />\n              <br />\n              <h3></h3>\n              <br />\n              <br />\n              <h3></h3>\n              <br />\n              <br />\n              <h3></h3>\n              <br />\n              <br />\n              <h3></h3>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(BufferNode);\n"]},"metadata":{},"sourceType":"module"}