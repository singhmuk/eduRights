{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';import ScatterPlot from'../../../assets/ML/scatterplot.JPG';import ErrorEqu from'../../../assets/ML/error_equation.jpg';import LinearEqu from'../../../assets/ML/linear_equation.png';import Equations from'../../../assets/ML/equation.jpg';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var redesign={height:350,width:600};var oneVarri=\"\\nimport pandas as pd\\nimport numpy as np\\nfrom sklearn import linear_model\\nimport matplotlib.pyplot as plt\\n\\ndf = pd.read_csv('homeprices.csv')\\n\\n%matplotlib inline\\nplt.xlabel('area')\\nplt.ylabel('price')\\nplt.scatter(df.area,df.price,color='red',marker='+')\\n\\nnew_df = df.drop('price',axis='columns')\\nprice = df.price\\n\\nreg = linear_model.LinearRegression()                         # Create linear regression object\\nreg.fit(new_df,price)\\n\\nreg.predict([[3300]])                                         #Predict price of a home with area = 3300 sqr ft.\\nreg.coef_\\nreg.intercept_\\n\\n\\n#Y = m * X + b (m is coefficient and b is intercept)\\n3300*135.78767123 + 180616.43835616432\\n\\nreg.predict([[5000]])\\n\\n#Generate CSV file with list of home price predictions\\narea_df = pd.read_csv(\\\"areas.csv\\\")\\np = reg.predict(area_df)\\narea_df['prices']=p\\n\\narea_df.to_csv(\\\"prediction.csv\\\")\\n\".trim();var linearPy=\"\\n# Data Preprocessing Template\\n\\nimport numpy as np\\nimport matplotlib.pyplot as plt\\nimport pandas as pd\\n\\ndataset = pd.read_csv('Data.csv')\\n\\nX = dataset.iloc[:, :-1].values\\ny = dataset.iloc[:, 3].values\\n\\n# Splitting the dataset into the Training set and Test set\\nfrom sklearn.model_selection import train_test_split\\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\\n\\n\\nfrom sklearn.preprocessing import StandardScaler                                    # Feature Scaling\\nsc_X = StandardScaler()\\nsc_y = StandardScaler()\\n\\nX_train = sc_X.fit_transform(X_train)\\nX_test = sc_X.transform(X_test)\\n\\ny_train = sc_y.fit_transform(y_train)\\n\".trim();var independent=\"\\nimport pandas as pd\\nimport numpy as np\\nfrom sklearn import linear_model\\n\\ndf = pd.read_csv('homeprices.csv')\\n\\ndf.bedrooms.median()                                                          #Fill NA values with median value of a column.\\ndf.bedrooms = df.bedrooms.fillna(df.bedrooms.median())\\n\\nreg = linear_model.LinearRegression()\\nreg.fit(df.drop('price',axis='columns'),df.price)\\n\\nreg.predict([[3000, 3, 40]])\\n112.06244194*3000 + 23388.88007794*3 + -3231.71790863*40 + 221323.00186540384\\n\\nreg.predict([[2500, 4, 5]])\\n\".trim();var testings=\"\\nif __name__ == \\\"__main__\\\":\\n    import matplotlib.pyplot as plt\\n    from sklearn.model_selection import train_test_split\\n    from sklearn import datasets\\n\\n    def mean_squared_error(y_true, y_pred):\\n        return np.mean((y_true - y_pred) ** 2)\\n\\n    X, y = datasets.make_regression(n_samples=100, n_features=1, noise=20, random_state=4)\\n\\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1234)\\n\\n    regressor = LinearRegression(learning_rate=0.01, n_iters=1000)\\n    regressor.fit(X_train, y_train)\\n    predictions = regressor.predict(X_test)\\n\\n    mse = mean_squared_error(y_test, predictions)\\n    print(\\\"MSE:\\\", mse)\\n\\n    accu = r2_score(y_test, predictions)\\n    print(\\\"Accuracy:\\\", accu)\\n\\n    y_pred_line = regressor.predict(X)\\n    cmap = plt.get_cmap(\\\"viridis\\\")\\n    fig = plt.figure(figsize=(8, 6))\\n    m1 = plt.scatter(X_train, y_train, color=cmap(0.9), s=10)\\n    m2 = plt.scatter(X_test, y_test, color=cmap(0.5), s=10)\\n    plt.plot(X, y_pred_line, color=\\\"black\\\", linewidth=2, label=\\\"Prediction\\\")\\n    plt.show()\".trim();var LeanearRegression=/*#__PURE__*/function(_Component){_inherits(LeanearRegression,_Component);function LeanearRegression(){_classCallCheck(this,LeanearRegression);return _possibleConstructorReturn(this,_getPrototypeOf(LeanearRegression).apply(this,arguments));}_createClass(LeanearRegression,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Regression\"),\"Used to find the relationship between variables.\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"R-Squared: \"),\" If there are no relationship between the values of x-axis and the values of y-axis then linear regression can not be used to predict anything.\",React.createElement(\"br\",null),\"The relationship is measured with a value of r-squared. The r-squared value ranges from -1 to 1, where 0 means no relationship, and 1, or -1, means 100% related.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Predict Future Values: \"),\"Now we can use the information we have gathered to predict future values.\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Ex.\"),\" Predict the speed of a 10 years old car. \")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Logistic regression\"),\"It is a classification algorithm, used to predict binary outcomes for a given set of Independent Variables. The dependent Variables outcome is discrete.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"How is linear and logistic regression different\"),React.createElement(\"table\",null,React.createElement(\"tr\",null,React.createElement(\"th\",null,\"Linear Regration\"),React.createElement(\"th\",null,\"Logistic Regression\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"Used to solve Regression problems. The response Variable are continuous in nature. It helps estimate the dependent Variable in the Independent Variable. Is a straight line.\"),React.createElement(\"td\",null,\"Used to solve classification Problems. The response variable is categorical in nature. It helps calculate the possibility of a particular event taking place. An\",React.createElement(\"b\",null,\" S-curve (S = Sigmoid)\"),\".\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,React.createElement(\"i\",null,React.createElement(\"b\",null,\"Linear regression is used to predict the continuous dependent variable using a given set of independent variables.\"))),React.createElement(\"td\",null,React.createElement(\"i\",null,React.createElement(\"b\",null,\"Logistic Regression is used to predict the categorical dependent variable using a given set of independent variables.\")))),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"We predict the value of continuous variables.\"),React.createElement(\"td\",null,\"We predict the values of categorical variables.\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,React.createElement(\"i\",null,React.createElement(\"b\",null,\"We find the best fit line, by which we can easily predict the output.\"))),React.createElement(\"td\",null,React.createElement(\"i\",null,React.createElement(\"b\",null,\"We find the S-curve by which we can classify the samples.\")))),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"Least square estimation method is used for estimation of accuracy.\"),React.createElement(\"td\",null,\"Maximum likelihood estimation method is used for estimation of accuracy.\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,React.createElement(\"i\",null,React.createElement(\"b\",null,\"The output must be a continuous value, such as price, age, etc.\"))),React.createElement(\"td\",null,React.createElement(\"i\",null,React.createElement(\"b\",null,\"The output must be a Categorical value such as 0 or 1, Yes or No, etc.\")))),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"There may be collinearity between the independent variables.\"),React.createElement(\"td\",null,\"There should not be collinearity between the independent variable.\"))),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Applications of Logistic Regression\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Image Segmentation and Categorization Geographic Image Processing.\"),React.createElement(\"li\",null,\"Handwriting recognition Healthcare.\"),React.createElement(\"li\",null,\"Analyzing a group of over million people for myocardial infarction within a period of 10 years.\"),React.createElement(\"li\",null,\"Prediction whether a person is depressed/ not based on bag of words from the corpus seems to be conveniently solvable using logistic regression and SVM.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Linear Regression With One Variable\"),\"Below table represents current home prices in monroe township based on square feet area, new jersey.\",React.createElement(\"table\",null,React.createElement(\"tr\",null,React.createElement(\"th\",null,\"2600\"),React.createElement(\"th\",null,\"550000\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"3000\"),React.createElement(\"td\",null,\"565000\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"3200\"),React.createElement(\"td\",null,\"610000\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"3600\"),React.createElement(\"td\",null,\"680000\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"4000\"),React.createElement(\"td\",null,\"725000\"))),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Problem Statement :\"),\" Given above data build a machine learning model that can predict home prices based on square feet area.\",React.createElement(\"br\",null),\"You can represent values in above table as a scatter plot (values are shown in red markers). After that one can draw a straight line that best fits values on chart.\",React.createElement(\"br\",null),React.createElement(\"img\",{src:ScatterPlot,alt:\"ScatterPlot\",className:\"responsive\",style:redesign}),React.createElement(\"br\",null),\"You can draw multiple lines like this but we choose the one where total sum of error is minimum.\",React.createElement(\"br\",null),React.createElement(\"img\",{src:ErrorEqu,alt:\"ErrorEqu\",className:\"responsive\",style:redesign}),React.createElement(\"br\",null),\"Home prices can be presented as following equation.\",React.createElement(\"br\",null),React.createElement(\"i\",null,React.createElement(\"b\",null,\"home price = m * (area) + b\")),React.createElement(\"br\",null),\"Generic form of same equation is,\",React.createElement(\"br\",null),React.createElement(\"img\",{src:LinearEqu,alt:\"LinearEqu\",className:\"responsive\",style:redesign}),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:oneVarri,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"with Python\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:linearPy,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Linear Regression With Multi Variable\"),React.createElement(\"table\",null,React.createElement(\"tr\",null,React.createElement(\"th\",null,\"Area\"),React.createElement(\"th\",null,\"Bedroom\"),React.createElement(\"th\",null,\"Age\"),React.createElement(\"th\",null,\"Price\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"2600\"),React.createElement(\"td\",null,\"3\"),React.createElement(\"td\",null,\"20\"),React.createElement(\"td\",null,\"550000\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"3000\"),React.createElement(\"td\",null,\"4\"),React.createElement(\"td\",null,\"15\"),React.createElement(\"td\",null,\"565000\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"3200\"),React.createElement(\"td\",null,\" \"),React.createElement(\"td\",null,\"18\"),React.createElement(\"td\",null,\"610000\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"3600\"),React.createElement(\"td\",null,\"3\"),React.createElement(\"td\",null,\"30\"),React.createElement(\"td\",null,\"595000\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"4000\"),React.createElement(\"td\",null,\"5\"),React.createElement(\"td\",null,\"8\"),React.createElement(\"td\",null,\"760000\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"4100\"),React.createElement(\"td\",null,\"6\"),React.createElement(\"td\",null,\"8\"),React.createElement(\"td\",null,\"810000\"))),\"Given the Home Price find out price of a home that has, 3000 sqr ft area, 3 bedroom, 40 years old 2500 sqr ft area, 5 bedroom, 5 years old\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"We will use regression with multiple varriables, So price can be calculated using.\",React.createElement(\"br\",null),React.createElement(\"img\",{src:Equations,alt:\"Equations\",className:\"responsive\",style:redesign}),React.createElement(\"br\",null),\"Here, area, bedroom, age are independent varriable or features whereas price is dependent varriable.\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:independent,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Testing\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:testings,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return LeanearRegression;}(Component);export default withStyles(styles)(LeanearRegression);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ml/deepMl/leanearRegression.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","ScatterPlot","ErrorEqu","LinearEqu","Equations","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","redesign","height","width","oneVarri","trim","linearPy","independent","testings","LeanearRegression","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport ScatterPlot from '../../../assets/ML/scatterplot.JPG'\nimport ErrorEqu from '../../../assets/ML/error_equation.jpg'\nimport LinearEqu from '../../../assets/ML/linear_equation.png'\nimport Equations from '../../../assets/ML/equation.jpg'\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst redesign = {\n  height: 350,\n  width: 600\n}\n\nconst oneVarri = `\nimport pandas as pd\nimport numpy as np\nfrom sklearn import linear_model\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('homeprices.csv')\n\n%matplotlib inline\nplt.xlabel('area')\nplt.ylabel('price')\nplt.scatter(df.area,df.price,color='red',marker='+')\n\nnew_df = df.drop('price',axis='columns')\nprice = df.price\n\nreg = linear_model.LinearRegression()                         # Create linear regression object\nreg.fit(new_df,price)\n\nreg.predict([[3300]])                                         #Predict price of a home with area = 3300 sqr ft.\nreg.coef_\nreg.intercept_\n\n\n#Y = m * X + b (m is coefficient and b is intercept)\n3300*135.78767123 + 180616.43835616432\n\nreg.predict([[5000]])\n\n#Generate CSV file with list of home price predictions\narea_df = pd.read_csv(\"areas.csv\")\np = reg.predict(area_df)\narea_df['prices']=p\n\narea_df.to_csv(\"prediction.csv\")\n`.trim();\n\nconst linearPy = `\n# Data Preprocessing Template\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndataset = pd.read_csv('Data.csv')\n\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, 3].values\n\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n\nfrom sklearn.preprocessing import StandardScaler                                    # Feature Scaling\nsc_X = StandardScaler()\nsc_y = StandardScaler()\n\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\n\ny_train = sc_y.fit_transform(y_train)\n`.trim();\n\nconst independent = `\nimport pandas as pd\nimport numpy as np\nfrom sklearn import linear_model\n\ndf = pd.read_csv('homeprices.csv')\n\ndf.bedrooms.median()                                                          #Fill NA values with median value of a column.\ndf.bedrooms = df.bedrooms.fillna(df.bedrooms.median())\n\nreg = linear_model.LinearRegression()\nreg.fit(df.drop('price',axis='columns'),df.price)\n\nreg.predict([[3000, 3, 40]])\n112.06244194*3000 + 23388.88007794*3 + -3231.71790863*40 + 221323.00186540384\n\nreg.predict([[2500, 4, 5]])\n`.trim();\n\n\n\n\nconst testings = `\nif __name__ == \"__main__\":\n    import matplotlib.pyplot as plt\n    from sklearn.model_selection import train_test_split\n    from sklearn import datasets\n\n    def mean_squared_error(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n\n    X, y = datasets.make_regression(n_samples=100, n_features=1, noise=20, random_state=4)\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1234)\n\n    regressor = LinearRegression(learning_rate=0.01, n_iters=1000)\n    regressor.fit(X_train, y_train)\n    predictions = regressor.predict(X_test)\n\n    mse = mean_squared_error(y_test, predictions)\n    print(\"MSE:\", mse)\n\n    accu = r2_score(y_test, predictions)\n    print(\"Accuracy:\", accu)\n\n    y_pred_line = regressor.predict(X)\n    cmap = plt.get_cmap(\"viridis\")\n    fig = plt.figure(figsize=(8, 6))\n    m1 = plt.scatter(X_train, y_train, color=cmap(0.9), s=10)\n    m2 = plt.scatter(X_test, y_test, color=cmap(0.5), s=10)\n    plt.plot(X, y_pred_line, color=\"black\", linewidth=2, label=\"Prediction\")\n    plt.show()`.trim();\n\n\nclass LeanearRegression extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Regression</h3>\n              Used to find the relationship between variables.\n              <br />\n              <ul>\n                <li><b>R-Squared: </b> If there are no relationship between the values of x-axis and the values of\n                  y-axis then linear regression can not be used to predict anything.\n                  <br />\n                  The relationship is measured with a value of r-squared. The r-squared value ranges from -1 to 1, where 0 means no relationship,\n                  and 1, or -1, means 100% related.</li>\n                <br />\n\n                <li><b>Predict Future Values: </b>Now we can use the information we have gathered to predict future values.\n                  <br />\n                  <b>Ex.</b> Predict the speed of a 10 years old car. </li>\n              </ul>\n              <br />\n\n              <h3>Logistic regression</h3>\n              It is a classification algorithm, used to predict binary outcomes for a given set of Independent Variables. The\n              dependent Variables outcome is discrete.\n              <br />\n              <br />\n\n              <b>How is linear and logistic regression different</b>\n\n              <table>\n                <tr>\n                  <th>Linear Regration</th>\n                  <th>Logistic Regression</th>\n                </tr>\n                <tr>\n                  <td>Used to solve Regression problems. The response Variable are continuous in nature. It helps\n                    estimate the dependent Variable in the Independent Variable. Is a straight line.</td>\n                  <td>Used to solve classification Problems. The response variable is categorical in nature. It helps calculate the possibility of a\n                    particular event taking place. An<b> S-curve (S = Sigmoid)</b>.</td>\n                </tr>\n                <tr>\n                  <td><i><b>Linear regression is used to predict the continuous dependent variable using a given set of independent variables.</b></i></td>\n                  <td><i><b>Logistic Regression is used to predict the categorical dependent variable using a given set of independent variables.</b></i></td>\n                </tr>\n                <tr>\n                  <td>We predict the value of continuous variables.</td>\n                  <td>We predict the values of categorical variables.</td>\n                </tr>\n                <tr>\n                  <td><i><b>We find the best fit line, by which we can easily predict the output.</b></i></td>\n                  <td><i><b>We find the S-curve by which we can classify the samples.</b></i></td>\n                </tr>\n                <tr>\n                  <td>Least square estimation method is used for estimation of accuracy.</td>\n                  <td>Maximum likelihood estimation method is used for estimation of accuracy.</td>\n                </tr>\n                <tr>\n                  <td><i><b>The output must be a continuous value, such as price, age, etc.</b></i></td>\n                  <td><i><b>The output must be a Categorical value such as 0 or 1, Yes or No, etc.</b></i></td>\n                </tr>\n                <tr>\n                  <td>There may be collinearity between the independent variables.</td>\n                  <td>There should not be collinearity between the independent variable.</td>\n                </tr>\n              </table>\n              <br />\n\n              <h3>Applications of Logistic Regression</h3>\n              <ul>\n                <li>Image Segmentation and Categorization Geographic Image Processing.</li>\n                <li>Handwriting recognition Healthcare.</li>\n                <li>Analyzing a group of over million people for myocardial infarction within a period of 10 years.</li>\n                <li>Prediction whether a person is depressed/ not based on bag of words from the corpus seems to be\n                  conveniently solvable using logistic regression and SVM.</li>\n              </ul>\n              <br />\n\n              <h3>Linear Regression With One Variable</h3>\n              Below table represents current home prices in monroe township based on square feet area,\n              new jersey.\n              <table>\n                <tr>\n                  <th>2600</th>\n                  <th>550000</th>\n                </tr>\n                <tr>\n                  <td>3000</td>\n                  <td>565000</td>\n                </tr>\n                <tr>\n                  <td>3200</td>\n                  <td>610000</td>\n                </tr>\n                <tr>\n                  <td>3600</td>\n                  <td>680000</td>\n                </tr>\n                <tr>\n                  <td>4000</td>\n                  <td>725000</td>\n                </tr>\n              </table>\n              <br />\n\n              <b>Problem Statement :</b> Given above data build a machine learning model that can predict\n              home prices based on square feet area.\n              <br />\n              You can represent values in above table as a scatter plot (values are shown in red markers).\n              After that one can draw a straight line that best fits values on chart.\n              <br />\n              <img src={ScatterPlot} alt=\"ScatterPlot\" className=\"responsive\" style={redesign} />\n              <br />\n              You can draw multiple lines like this but we choose the one where total sum of error is\n              minimum.\n              <br />\n              <img src={ErrorEqu} alt=\"ErrorEqu\" className=\"responsive\" style={redesign} />\n              <br />\n              Home prices can be presented as following equation.\n              <br />\n              <i><b>home price = m * (area) + b</b></i>\n              <br />\n              Generic form of same equation is,\n              <br />\n              <img src={LinearEqu} alt=\"LinearEqu\" className=\"responsive\" style={redesign} />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={oneVarri}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>with Python</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={linearPy}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Linear Regression With Multi Variable</h3>\n              <table>\n                <tr>\n                  <th>Area</th>\n                  <th>Bedroom</th>\n                  <th>Age</th>\n                  <th>Price</th>\n                </tr>\n                <tr>\n                  <td>2600</td>\n                  <td>3</td>\n                  <td>20</td>\n                  <td>550000</td>\n                </tr>\n                <tr>\n                  <td>3000</td>\n                  <td>4</td>\n                  <td>15</td>\n                  <td>565000</td>\n                </tr>\n                <tr>\n                  <td>3200</td>\n                  <td> </td>\n                  <td>18</td>\n                  <td>610000</td>\n                </tr>\n                <tr>\n                  <td>3600</td>\n                  <td>3</td>\n                  <td>30</td>\n                  <td>595000</td>\n                </tr>\n                <tr>\n                  <td>4000</td>\n                  <td>5</td>\n                  <td>8</td>\n                  <td>760000</td>\n                </tr>\n                <tr>\n                  <td>4100</td>\n                  <td>6</td>\n                  <td>8</td>\n                  <td>810000</td>\n                </tr>\n              </table>\n              Given the Home Price find out price of a home that has,\n              3000 sqr ft area, 3 bedroom, 40 years old\n              2500 sqr ft area, 5 bedroom, 5 years old\n              <br />\n              <br />\n              We will use regression with multiple varriables, So price can be calculated using.\n              <br />\n              <img src={Equations} alt=\"Equations\" className=\"responsive\" style={redesign} />\n              <br />\n              Here, area, bedroom, age are independent varriable or features whereas price is dependent varriable.\n              <br />\n\n\n              <div style={titles}>\n                <PrismCode\n                  code={independent}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n\n\n              <b>Testing</b>\n              <div style={titles}>\n                <PrismCode\n                  code={testings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(LeanearRegression));\n"]},"metadata":{},"sourceType":"module"}