{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/arrayStrAlgo.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst combine = `\nfunction combine(n, k) {\n  const result = [];\n  \n  function aux(index = 1, current = []){\n    if (current.length === k) {\n      result.push(current);\n      return;\n    }\n    if (index > n) return;\n\n    aux(index + 1, [...current, index]);\n    aux(index + 1, current);\n  }\n  aux();\n  return result;\n}\n\nconsole.log(combine(4,2))\n`.trim();\nconst maxProfit = `\nfunction maxProfit(prices) {\n  let max = 0;\n  let minPrice = Infinity;\n\n  for (const price of prices) {\n    minPrice = Math.min(price, minPrice);\n    max = Math.max(max, price - minPrice);\n  }\n  return max;\n}\n\nconsole.log(maxProfit([7,1,5,3,6,4]))\n`.trim();\nconst maxProduct = `\nfunction maxProduct(nums = []){\n  if (nums.length === 0) return 0;\n\n  let prevMax = nums[0];\n  let prevMin = nums[0];\n  let max = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    const currentMax = Math.max(nums[i], prevMax * nums[i], prevMin * nums[i]);\n    const currentMin = Math.min(nums[i], prevMax * nums[i], prevMin * nums[i]);\n    prevMax = currentMax;\n    prevMin = currentMin;\n\n    if (prevMax > max) {\n      max = prevMax;\n    }\n  }\n  return max;\n}\n\nconsole.log(maxProduct([2,3,-2,4]))\n`.trim();\nconst longestCommonPrefix = `\nfunction fun() {\n  const candies = 10;\n  const numChildren = 3;\n  const result = [];\n  for (let i = 0; i < numChildren; i++) {\n      result[i] = 0;\n  }\n\n  let remainingCandies = candies;\n  let nextCandy = 1;\n  let currentIndex = 0;\n\n  while (remainingCandies > 0) {\n      result[currentIndex] += Math.min(nextCandy, remainingCandies);\n      remainingCandies -= nextCandy;\n      nextCandy++;\n      currentIndex = (currentIndex + 1) % numChildren;\n  }\n\n  return console.log(result);\n}\n\nfun();\n`.trim();\nconst dictionary = `\nfunction fun() {\n  const words = [\"hello\", \"leetcode\"];\n  const order = \"hlabcdefgijkmnopqrstuvwxyz\";\n\n  for (let i = 1; i < words.length; i++) {\n    const prevWord = words[i - 1];\n    const currentWord = words[i];\n\n    let j = 0;\n    while (j < prevWord.length && j < currentWord.length) {\n      const prevCharIndex = order.indexOf(prevWord[j]);\n      const currentCharIndex = order.indexOf(currentWord[j]);\n\n      if (prevCharIndex < currentCharIndex) {\n        break;                    // Correct order, move to the next pair of words\n      } else if (prevCharIndex > currentCharIndex) {\n        console.log('False');     // Incorrect order\n        return;\n      } else {\n        j++;                      // Characters are equal, move to the next character\n      }\n    }\n\n    if (j === currentWord.length && j < prevWord.length) {\n      console.log('False');       // Incorrect order\n      return;\n    }\n  }\n\n  console.log('True'); // All pairs are in correct order\n}\n\nfun();\n`.trim();\nconst pointsMax = `\nfunction fun() {\n  const points = [[1,1],[2,2],[3,3]];\n\n  if (points.length <= 2) {\n      return points.length;\n  }\n\n  let maxCount = 0;\n\n  for (let i = 0; i < points.length; i++) {\n      const slopes = new Map();\n      let duplicatePoints = 0;\n      let verticalPoints = 0;\n      let currentMax = 0;\n\n      for (let j = 0; j < points.length; j++) {\n          if (i !== j) {\n              if (points[i][0] === points[j][0]) {\n                  verticalPoints++;\n                  currentMax = Math.max(currentMax, verticalPoints);\n              } else {\n                  const slope = (points[j][1] - points[i][1]) / (points[j][0] - points[i][0]);\n                  slopes.set(slope, (slopes.get(slope) || 0) + 1);\n                  currentMax = Math.max(currentMax, slopes.get(slope));\n              }\n\n              if (points[i][0] === points[j][0] && points[i][1] === points[j][1]) {\n                  duplicatePoints++;\n              }\n          }\n      }\n\n      maxCount = Math.max(maxCount, currentMax + duplicatePoints + 1);\n  }\n\n  return console.log(maxCount);\n}\n\nfun()\n\n`.trim();\nconst isValidSudoku = `\nfunction isValidSudoku(board) {\n  const seen = new Set();\n\n  for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n          const num = board[i][j];\n\n          if (num !== '.') {\n              const rowKey = row'$'{i}-'$'{num};\n              const colKey = col'$'{j}-$'{num};\n              const subgridKey = subgrid${Math.floor(i / 3)}-${Math.floor(j / 3)}-${num};\n\n              if (seen.has(rowKey) || seen.has(colKey) || seen.has(subgridKey)) {\n                  return false; // Duplicate number found\n              }\n\n              seen.add(rowKey);\n              seen.add(colKey);\n              seen.add(subgridKey);\n          }\n      }\n  }\n\n  return true; \n}\n\nconst sudokuBoard = [\n  ['5','3','.','.','7','.','.','.','.'],\n  ['6','.','.','1','9','5','.','.','.'],\n  ['.','9','8','.','.','.','.','6','.'],\n  ['8','.','.','.','6','.','.','.','3'],\n  ['4','.','.','8','.','3','.','.','1'],\n  ['7','.','.','.','2','.','.','.','6'],\n  ['.','6','.','.','.','.','2','8','.'],\n  ['.','.','.','4','1','9','.','.','5'],\n  ['.','.','.','.','8','.','.','7','9']\n];\nconst result = isValidSudoku(sudokuBoard);\nconsole.log(result);  // Output: true\n\n`.trim();\nconst islandPerimeter = `\nfunction islandPerimeter(grid) {\n  let perimeter = 0;\n  \n  for (let row = 0; row < grid.length; row++) {\n      for (let col = 0; col < grid[0].length; col++) {\n          if (grid[row][col] === 1) {\n              perimeter += 4;\n              \n              if (row > 0 && grid[row - 1][col] === 1) {\n                  perimeter -= 2;               // Subtract for adjacent land on top\n              }\n              \n              if (col > 0 && grid[row][col - 1] === 1) {\n                  perimeter -= 2;               // Subtract for adjacent land on left\n              }\n          }\n      }\n  }\n  \n  return perimeter;\n}\n\nconst grid = [\n  [0, 1, 0, 0],\n  [1, 1, 1, 0],\n  [0, 1, 0, 0],\n  [1, 1, 0, 0]\n];\nconst result = islandPerimeter(grid);\nconsole.log(result);  // Output: 16\n\n`.trim();\n\nclass DSLogic6 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, \"1. Combinations\"), \"Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }), \"You may return the answer in any order.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, \"Example 1: \"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, \"Input: \"), \"n = 4, k = 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, \"Output: \"), \"[\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }), \"[2,4],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }), \"[3,4],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }), \"[2,3],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }), \"[1,2],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }), \"[1,3],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }), \"[1,4],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }), \"]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, \"Example 2: \"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, \"Input: \"), \"n = 1, k = 1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, \"Output: \"), \"[[1]]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: combine,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, \"2. Best Time to Buy and Sell Stock.\"), \"Say you have an array for which the ith element is the price of a given stock on day i.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }), \"If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }), \"Note that you cannot sell a stock before you buy one.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, \"nput: \"), \"I[7,1,5,3,6,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, \"Output: \"), \"I5\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, \"Explanation: \"), \"IBuy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }), \"Not 7-1 = 6, as selling price needs to be larger than buying price.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maxProfit,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, \"3. Maximum Product Subarray.\"), \"Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, \"Input: \"), \"[2,3,-2,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, \"Output: \"), \"6\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maxProduct,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, \"4. Stuff Them Candies\"), \"Distribute candies to a list of children such that each child receives a specific number of candies, and you have a limited number of candies available.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: longestCommonPrefix,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, \"4. Verify the Alien Dictionary\"), \"Given a list of words in an alien language and the order of characters in that language. You need to determine if the given list of words is sorted lexicographically according to the given alien dictionary.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: dictionary,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, \"4. Max Points On a Line\"), \"Finding the maximum number of points that lie on the same line in a given set of points on a 2D plane.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: pointsMax,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, \"4. Valid Sudoku\"), \"given a 9x9 Sudoku board, and you need to determine if the board is valid according to Sudoku rules. The rules state that each row, each column, and each of the nine 3x3 sub-grids that compose the board must contain distinct digits from 1 to 9.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isValidSudoku,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, \"4. Island Perimeter\"), \"finding the perimeter of an island represented as a grid, where '1's represent land and '0's represent water. The goal is to determine the total perimeter of the island.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: islandPerimeter,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(DSLogic6);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/arrayStrAlgo.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","combine","trim","maxProfit","maxProduct","longestCommonPrefix","dictionary","pointsMax","isValidSudoku","Math","floor","i","j","num","islandPerimeter","DSLogic6","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst combine = `\nfunction combine(n, k) {\n  const result = [];\n  \n  function aux(index = 1, current = []){\n    if (current.length === k) {\n      result.push(current);\n      return;\n    }\n    if (index > n) return;\n\n    aux(index + 1, [...current, index]);\n    aux(index + 1, current);\n  }\n  aux();\n  return result;\n}\n\nconsole.log(combine(4,2))\n`.trim();\n\nconst maxProfit = `\nfunction maxProfit(prices) {\n  let max = 0;\n  let minPrice = Infinity;\n\n  for (const price of prices) {\n    minPrice = Math.min(price, minPrice);\n    max = Math.max(max, price - minPrice);\n  }\n  return max;\n}\n\nconsole.log(maxProfit([7,1,5,3,6,4]))\n`.trim();\n\nconst maxProduct = `\nfunction maxProduct(nums = []){\n  if (nums.length === 0) return 0;\n\n  let prevMax = nums[0];\n  let prevMin = nums[0];\n  let max = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    const currentMax = Math.max(nums[i], prevMax * nums[i], prevMin * nums[i]);\n    const currentMin = Math.min(nums[i], prevMax * nums[i], prevMin * nums[i]);\n    prevMax = currentMax;\n    prevMin = currentMin;\n\n    if (prevMax > max) {\n      max = prevMax;\n    }\n  }\n  return max;\n}\n\nconsole.log(maxProduct([2,3,-2,4]))\n`.trim();\n\nconst longestCommonPrefix = `\nfunction fun() {\n  const candies = 10;\n  const numChildren = 3;\n  const result = [];\n  for (let i = 0; i < numChildren; i++) {\n      result[i] = 0;\n  }\n\n  let remainingCandies = candies;\n  let nextCandy = 1;\n  let currentIndex = 0;\n\n  while (remainingCandies > 0) {\n      result[currentIndex] += Math.min(nextCandy, remainingCandies);\n      remainingCandies -= nextCandy;\n      nextCandy++;\n      currentIndex = (currentIndex + 1) % numChildren;\n  }\n\n  return console.log(result);\n}\n\nfun();\n`.trim();\n\nconst dictionary = `\nfunction fun() {\n  const words = [\"hello\", \"leetcode\"];\n  const order = \"hlabcdefgijkmnopqrstuvwxyz\";\n\n  for (let i = 1; i < words.length; i++) {\n    const prevWord = words[i - 1];\n    const currentWord = words[i];\n\n    let j = 0;\n    while (j < prevWord.length && j < currentWord.length) {\n      const prevCharIndex = order.indexOf(prevWord[j]);\n      const currentCharIndex = order.indexOf(currentWord[j]);\n\n      if (prevCharIndex < currentCharIndex) {\n        break;                    // Correct order, move to the next pair of words\n      } else if (prevCharIndex > currentCharIndex) {\n        console.log('False');     // Incorrect order\n        return;\n      } else {\n        j++;                      // Characters are equal, move to the next character\n      }\n    }\n\n    if (j === currentWord.length && j < prevWord.length) {\n      console.log('False');       // Incorrect order\n      return;\n    }\n  }\n\n  console.log('True'); // All pairs are in correct order\n}\n\nfun();\n`.trim();\n\nconst pointsMax = `\nfunction fun() {\n  const points = [[1,1],[2,2],[3,3]];\n\n  if (points.length <= 2) {\n      return points.length;\n  }\n\n  let maxCount = 0;\n\n  for (let i = 0; i < points.length; i++) {\n      const slopes = new Map();\n      let duplicatePoints = 0;\n      let verticalPoints = 0;\n      let currentMax = 0;\n\n      for (let j = 0; j < points.length; j++) {\n          if (i !== j) {\n              if (points[i][0] === points[j][0]) {\n                  verticalPoints++;\n                  currentMax = Math.max(currentMax, verticalPoints);\n              } else {\n                  const slope = (points[j][1] - points[i][1]) / (points[j][0] - points[i][0]);\n                  slopes.set(slope, (slopes.get(slope) || 0) + 1);\n                  currentMax = Math.max(currentMax, slopes.get(slope));\n              }\n\n              if (points[i][0] === points[j][0] && points[i][1] === points[j][1]) {\n                  duplicatePoints++;\n              }\n          }\n      }\n\n      maxCount = Math.max(maxCount, currentMax + duplicatePoints + 1);\n  }\n\n  return console.log(maxCount);\n}\n\nfun()\n\n`.trim();\n\nconst isValidSudoku = `\nfunction isValidSudoku(board) {\n  const seen = new Set();\n\n  for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n          const num = board[i][j];\n\n          if (num !== '.') {\n              const rowKey = row'$'{i}-'$'{num};\n              const colKey = col'$'{j}-$'{num};\n              const subgridKey = subgrid${Math.floor(i / 3)}-${Math.floor(j / 3)}-${num};\n\n              if (seen.has(rowKey) || seen.has(colKey) || seen.has(subgridKey)) {\n                  return false; // Duplicate number found\n              }\n\n              seen.add(rowKey);\n              seen.add(colKey);\n              seen.add(subgridKey);\n          }\n      }\n  }\n\n  return true; \n}\n\nconst sudokuBoard = [\n  ['5','3','.','.','7','.','.','.','.'],\n  ['6','.','.','1','9','5','.','.','.'],\n  ['.','9','8','.','.','.','.','6','.'],\n  ['8','.','.','.','6','.','.','.','3'],\n  ['4','.','.','8','.','3','.','.','1'],\n  ['7','.','.','.','2','.','.','.','6'],\n  ['.','6','.','.','.','.','2','8','.'],\n  ['.','.','.','4','1','9','.','.','5'],\n  ['.','.','.','.','8','.','.','7','9']\n];\nconst result = isValidSudoku(sudokuBoard);\nconsole.log(result);  // Output: true\n\n`.trim();\n\nconst islandPerimeter = `\nfunction islandPerimeter(grid) {\n  let perimeter = 0;\n  \n  for (let row = 0; row < grid.length; row++) {\n      for (let col = 0; col < grid[0].length; col++) {\n          if (grid[row][col] === 1) {\n              perimeter += 4;\n              \n              if (row > 0 && grid[row - 1][col] === 1) {\n                  perimeter -= 2;               // Subtract for adjacent land on top\n              }\n              \n              if (col > 0 && grid[row][col - 1] === 1) {\n                  perimeter -= 2;               // Subtract for adjacent land on left\n              }\n          }\n      }\n  }\n  \n  return perimeter;\n}\n\nconst grid = [\n  [0, 1, 0, 0],\n  [1, 1, 1, 0],\n  [0, 1, 0, 0],\n  [1, 1, 0, 0]\n];\nconst result = islandPerimeter(grid);\nconsole.log(result);  // Output: 16\n\n`.trim();\n\nclass DSLogic6 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Combinations</h3>\n              Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.\n              <br/>\n              You may return the answer in any order.<br/><br/>\n              <b>Example 1: </b>\n\n              <b>Input: </b>n = 4, k = 2<br/>\n              <b>Output: </b>\n              [<br/>\n                [2,4],<br/>\n                [3,4],<br/>\n                [2,3],<br/>\n                [1,2],<br/>\n                [1,3],<br/>\n                [1,4],<br/>\n              ]<br/><br/>\n              <b>Example 2: </b>\n\n              <b>Input: </b>n = 1, k = 1<br/>\n              <b>Output: </b>[[1]]\n              <div style={titles}>\n                <PrismCode\n                  code={combine}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>2. Best Time to Buy and Sell Stock.</h3>\n              Say you have an array for which the ith element is the price of a given stock on day i.\n              <br/>\n              If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.\n              <br/>\n              Note that you cannot sell a stock before you buy one.<br/><br/>\n              <b>nput: </b>I[7,1,5,3,6,4]<br/>\n              <b>Output: </b>I5<br/>\n              <b>Explanation: </b>IBuy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.<br/>\n             Not 7-1 = 6, as selling price needs to be larger than buying price.\n              <div style={titles}>\n                <PrismCode\n                  code={maxProfit}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>3. Maximum Product Subarray.</h3>\n              Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.\n              <br/>\n              <b>Input: </b>[2,3,-2,4]<br/>\n              <b>Output: </b>6\n              <div style={titles}>\n                <PrismCode\n                  code={maxProduct}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>4. Stuff Them Candies</h3>\n              Distribute candies \n              to a list of children such that each child receives a specific number of candies, and you have a limited \n              number of candies available. \n              <div style={titles}>\n                <PrismCode\n                  code={longestCommonPrefix}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>4. Verify the Alien Dictionary</h3>\n              Given a list of words in an alien language and \n              the order of characters in that language. You need to determine if the given list of words is sorted \n              lexicographically according to the given alien dictionary. \n              <div style={titles}>\n                <PrismCode\n                  code={dictionary}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>4. Max Points On a Line</h3>\n              Finding the maximum number of points that lie on the same line in a given set of points on a 2D plane. \n              <div style={titles}>\n                <PrismCode\n                  code={pointsMax}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>4. Valid Sudoku</h3>\n              given a 9x9 Sudoku board, and you need to determine if the board is valid according to Sudoku rules. The \n              rules state that each row, each column, and each of the nine 3x3 sub-grids that compose the board must \n              contain distinct digits from 1 to 9.\n              <div style={titles}>\n                <PrismCode\n                  code={isValidSudoku}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>4. Island Perimeter</h3>\n              finding the perimeter of an island represented as a grid, where '1's represent land and '0's represent \n              water. The goal is to determine the total perimeter of the island.\n              <div style={titles}>\n                <PrismCode\n                  code={islandPerimeter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic6));\n"]},"metadata":{},"sourceType":"module"}