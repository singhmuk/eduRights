{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var childsFile=\"\\nimport numpy as np\\nimport pandas as pd\\nimport matplotlib.pyplot as plt\\nimport seaborn as sns\\nimport warnings\\n\\nwarnings.filterwarnings('ignore')\\n\\ndf = pd.read_csv(\\\"./sonar_dataset.csv\\\", header=None)\\n\\ndf.isna().sum()                                                                               #check for nan values.\\ndf.columns\\ndf[60].value_counts()                                                                         #label is not skewed\\n\\nX = df.drop(60, axis=1)\\ny = df[60]\\n\\ny = pd.get_dummies(y, drop_first=True)\\ny.value_counts()\\n\".trim();var pipes=\"\\nfrom sklearn.model_selection import train_test_split\\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)\\n\\nX_train.head()\\n\".trim();var learning=\"\\nimport tensorflow as tf\\nfrom tensorflow import keras\\n\\nmodel = keras.Sequential([\\n  keras.layers.Dense(60, input_dim=60, activation='relu'),\\n  keras.layers.Dense(30, activation='relu'),\\n  keras.layers.Dense(15, activation='relu'),\\n  keras.layers.Dense(1, activation='sigmoid')\\n])\\n\\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\\nmodel.fit(X_train, y_train, epochs=100, batch_size=8)\\n\\nmodel.evaluate(X_test, y_test)\\n\".trim();var accuracy=\"\\nfrom sklearn.metrics import confusion_matrix , classification_report\\n\\ny_pred = model.predict(X_test).reshape(-1)\\ny_pred = np.round(y_pred)                                             # round the values to nearest integer.\\nprint(y_pred[:10])\\n\\ny_test[:10]\\n\\nprint(classification_report(y_test, y_pred))\\n\".trim();var dropout=\"\\nmodeld = keras.Sequential([\\n  keras.layers.Dense(60, input_dim=60, activation='relu'),\\n  keras.layers.Dropout(0.5),\\n  keras.layers.Dense(30, activation='relu'),\\n  keras.layers.Dropout(0.5),\\n  keras.layers.Dense(15, activation='relu'),\\n  keras.layers.Dropout(0.5),\\n  keras.layers.Dense(1, activation='sigmoid')\\n])\\n\\nmodeld.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\\nmodeld.fit(X_train, y_train, epochs=100, batch_size=8)\\n\\nmodeld.evaluate(X_test, y_test)\\n\".trim();var improved=\"\\nfrom sklearn.metrics import confusion_matrix , classification_report\\n\\ny_pred = modeld.predict(X_test).reshape(-1)\\ny_pred = np.round(y_pred)\\nprint(y_pred[:10])\\n\\nprint(classification_report(y_test, y_pred))\\n\".trim();var RegularizationDeep=/*#__PURE__*/function(_Component){_inherits(RegularizationDeep,_Component);function RegularizationDeep(){_classCallCheck(this,RegularizationDeep);return _possibleConstructorReturn(this,_getPrototypeOf(RegularizationDeep).apply(this,arguments));}_createClass(RegularizationDeep,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Dropout Regularization In Deep Neural Network\"),React.createElement(\"i\",null,\"This is a dataset that describes sonar chirp returns bouncing off different services. The 60 i/p variables are the strength of the returns at different angles. It is a binary classification problem that requires a model to differentiate rocks from metal cylinders.\"),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:childsFile,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:pipes,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Using Deep Learning Model.\"),React.createElement(\"b\",null,\"Model without Dropout Layer.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:learning,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Training Accuracy --- Test Accuracy\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:accuracy,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Model with Dropout Layer\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:dropout,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Training Accuracy is still good but Test Accuracy Improved\"),\"using dropout layer test accuracy increased from 0.77 to 0.81.\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:improved,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return RegularizationDeep;}(Component);export default withStyles(styles)(RegularizationDeep);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjs/deepAngularjs/regularizationDeep.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","childsFile","trim","pipes","learning","accuracy","dropout","improved","RegularizationDeep","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst childsFile = `\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n\nwarnings.filterwarnings('ignore')\n\ndf = pd.read_csv(\"./sonar_dataset.csv\", header=None)\n\ndf.isna().sum()                                                                               #check for nan values.\ndf.columns\ndf[60].value_counts()                                                                         #label is not skewed\n\nX = df.drop(60, axis=1)\ny = df[60]\n\ny = pd.get_dummies(y, drop_first=True)\ny.value_counts()\n`.trim();\n\nconst pipes = `\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)\n\nX_train.head()\n`.trim();\n\nconst learning = `\nimport tensorflow as tf\nfrom tensorflow import keras\n\nmodel = keras.Sequential([\n  keras.layers.Dense(60, input_dim=60, activation='relu'),\n  keras.layers.Dense(30, activation='relu'),\n  keras.layers.Dense(15, activation='relu'),\n  keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(X_train, y_train, epochs=100, batch_size=8)\n\nmodel.evaluate(X_test, y_test)\n`.trim();\n\nconst accuracy = `\nfrom sklearn.metrics import confusion_matrix , classification_report\n\ny_pred = model.predict(X_test).reshape(-1)\ny_pred = np.round(y_pred)                                             # round the values to nearest integer.\nprint(y_pred[:10])\n\ny_test[:10]\n\nprint(classification_report(y_test, y_pred))\n`.trim();\n\nconst dropout = `\nmodeld = keras.Sequential([\n  keras.layers.Dense(60, input_dim=60, activation='relu'),\n  keras.layers.Dropout(0.5),\n  keras.layers.Dense(30, activation='relu'),\n  keras.layers.Dropout(0.5),\n  keras.layers.Dense(15, activation='relu'),\n  keras.layers.Dropout(0.5),\n  keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodeld.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodeld.fit(X_train, y_train, epochs=100, batch_size=8)\n\nmodeld.evaluate(X_test, y_test)\n`.trim();\n\nconst improved = `\nfrom sklearn.metrics import confusion_matrix , classification_report\n\ny_pred = modeld.predict(X_test).reshape(-1)\ny_pred = np.round(y_pred)\nprint(y_pred[:10])\n\nprint(classification_report(y_test, y_pred))\n`.trim();\n\n\nclass RegularizationDeep extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Dropout Regularization In Deep Neural Network</h3>\n              <i>\n                This is a dataset that describes sonar chirp returns bouncing off different services. The 60 i/p\n                variables are the strength of the returns at different angles. It is a binary classification problem\n                that requires a model to differentiate rocks from metal cylinders.\n              </i>\n              <br />\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={childsFile}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3></h3>\n              <div style={titles}>\n                <PrismCode\n                  code={pipes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Using Deep Learning Model.</h3>\n              <b>Model without Dropout Layer.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={learning}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Training Accuracy --- Test Accuracy</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={accuracy}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Model with Dropout Layer</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={dropout}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Training Accuracy is still good but Test Accuracy Improved</h3>\n              using dropout layer test accuracy increased from 0.77 to 0.81.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={improved}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\n\nexport default (withStyles(styles)(RegularizationDeep));\n"]},"metadata":{},"sourceType":"module"}