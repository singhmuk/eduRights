{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/mongoDB/deepMongodb/infoMD.js\";\nimport React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\nimport mongoDB from \"../../../assets/js/mongodb.png\";\nimport Index from \"../../../assets/js/index.gif\";\nimport mongoLikes from \"../../../assets/js/like.png\";\nconst titles = {\n  backgroundColor: \"#F0F8FF\",\n  padding: \"1px\",\n  fontSize: \"16px\"\n};\nconst redesign = {\n  height: 350,\n  width: 600\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst code = `\n    db.createCollection(\"student\", \n                          { capped : true, \n                            autoIndexID : true, \n                            size : 5242880, \n                            max : 5000\n                           }); \n`.trim();\nconst createInd = `\n//Create index\ndb.users.ensureIndex({\"email\":1, \"roll\":-1})\n\n//Drop index\ndb.users.dropIndex({\"email\":1})\n\n//getIndexes\ndb.users.getIndexes()                           //returns the description of all the indexes int the collection.\n`.trim(); // const code = ``.trim();\n// const code = ``.trim();\n// const code = ``.trim();\n// const code = ``.trim();\n// const code = ``.trim();\n// const code = ``.trim();\n// const code = ``.trim();\n\nclass IntroMD extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"1. What makes MongoDB the best?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Schema-less: \"), \"MongoDB is a schema-less database, which means you can store data without defining a fixed structure for it. This makes it easy to add or modify fields as needed, without having to modify the entire schema.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Scalability: \"), \"MongoDB is a horizontally scalable database, which means you can easily scale it out across multiple servers as your application grows. This makes it a good choice for applications that need to handle large volumes of data and traffic.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Performance: \"), \"MongoDB is designed to be fast and efficient, with a high-performance storage engine that can handle large amounts of data. It also supports indexing, which makes queries faster and more efficient.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Flexibility: \"), \"MongoDB is a flexible database that can be used for a wide range of applications, from simple blogs and e-commerce sites to complex social networks and big data applications.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"2. If you remove an object attribute, is it deleted from the database?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Yes, it is deleted. Hence, it is better to eliminate the attribute and then save the object again.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: mongoDB,\n      alt: \"Omega\",\n      className: \"responsive\",\n      style: redesign,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"3. Explain the situation when an index does not fit into RAM.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"In MongoDB, indexes are used to improve query performance by allowing the database to locate and retrieve specific data more quickly. When the size of an index exceeds the amount of available RAM on a server, MongoDB may not be able to keep the entire index in memory. This can result in slower query performance, as MongoDB must read the index from disk rather than from memory.\"), \"In situations where the index is too large to fit in memory, there are several strategies that can be used to improve performance:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"Add more RAM to the server: \"), \"This is the simplest solution and can often improve performance significantly.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"Use a more efficient index: \"), \"If possible, consider using a smaller or more efficient index that can fit in memory.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"Sharding: \"), \"MongoDB supports sharding, which allows data to be distributed across multiple servers. By sharding the data, the index size can be reduced on each individual server, allowing more of the index to fit in memory.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Use SSDs: \"), \"If the index cannot fit in memory, using SSDs can help improve performance by reducing the time it takes to read data from disk.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, \"Tune MongoDB configuration parameters: \"), \"MongoDB provides a number of configuration parameters that can be tuned to optimize performance. For example, increasing the read-ahead cache size can help reduce the number of disk reads required to retrieve data.\")), React.createElement(\"img\", {\n      src: Index,\n      alt: \"Omega\",\n      className: \"responsive\",\n      style: redesign,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"Likes Comments\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: mongoLikes,\n      alt: \"Omega\",\n      className: \"responsive\",\n      style: redesign,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"4. How does MongoDB provide consistency?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"MongoDB provides consistency through its default write concern, which ensures that a write operation has been successfully written to the majority of replica set members before acknowledging the write operation. This ensures that subsequent read operations will see the updated data, even if the primary node fails and a new primary is elected.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, \"In addition, MongoDB supports multi-document transactions, which ensures that a group of operations are executed as a single atomic unit. This guarantees consistency across multiple documents in a collection and can be used to implement complex business logic.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, \"MongoDB also provides a number of features such as read and write concerns, causal consistency, and retryable writes, which enable developers to fine-tune consistency requirements based on their specific use cases.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, \"5. What is the use of Journaling in MongoDB?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"Journaling is used for safe backups in MongoDB.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, \"6. What is the use of Profiler?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, \"Profiler is used to show the performance characteristics of every operation against the database.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, \"7. What is Vertical Scaling?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, \"Vertical scaling adds more CPU and storage resources to increase capacity.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"8. Define Horizontal Scaling.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, \"Horizontal scaling divides the dataset and distributes data over multiple servers, or shards.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, \"9. What are the components of the Sharded cluster?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, \"The sharded cluster has the following components: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, \"Shards\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, \"Query routers\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, \"Config servers\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, \"11. What is the use of the dot notation in MongoDB?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, \"MongoDB uses the dot notation to access the elements of an array and the fields of an embedded document.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, \"12. What is Splitting in MongoDB?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, \"Splitting is a background process that is used to keep chunks from growing too large.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, \"13. What is the difference between MongoDB(non-relational) and MySQL(relational)?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, \"There is a lot of difference between them in:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, \"Terms of data representation\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, \"Relationships\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, \"Transaction\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, \"Querying data\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, \"Schema design and definition\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, \"Performance\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, \"Speed\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, \"Normalization.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, \"14. Explain the structure of ObjectID in MongoDB.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, \"ObjectIds are small, likely unique, fast to generate, and ordered. ObjectId values consist of 12 bytes, where the first four bytes are a timestamp that reflect the ObjectId\\u2019s creation.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, \"15. Why MongoDB is not preferred over a 32-bit system?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, \"MongoDB is not preferred over a 32-bit system because MongoDB uses memory-mapped files for performance reasons, and 32-bit systems have a limited address space, which can lead to problems when working with large data sets. In a 32-bit system, MongoDB can only use up to 4GB of RAM, which is a very small amount for modern databases. This can cause the database to slow down or even crash when working with large amounts of data. Therefore, it is recommended to use a 64-bit system for running MongoDB in order to take advantage of larger address spaces and avoid these limitations.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, \"16. Does MongoDB support ACID transaction management and locking functionalities?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, \"Historically MongoDB does not support default multi-document ACID transactions (multiple-document updates that can be rolled back and are ACID-compliant). However, MongoDB provides atomic operation on a single document.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, \"17. Should I normalize my data before storing it in MongoDB?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, \"It depends from your goals. Normalization will provide an update efficient data representation. Denormalization will make data reading efficient.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, \"In general, use normalized data models: when embedding would result in duplication of data but would not provide sufficient read performance advantages to outweigh the implications of the duplication. to represent more complex many-to-many relationships. to model large hierarchical data sets. Also normalizing your data like you would with a relational database is usually not a good idea in MongoDB.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, \"Normalization in relational databases is only feasible under the premise that JOINs between tables are relatively cheap. The $lookup aggregation operator provides some limited JOIN functionality, but it doesn't work with sharded collections. So joins often need to be emulated by the application through multiple subsequent database queries, which is very slow\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, \"18. What happens if an index does not fit into RAM?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, \"If the indexes do not fit into RAM, MongoDB reads data from disk which is relatively very much slower than reading from RAM.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, \"19. What are Primary and Secondary Replica sets?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, \"Primary and master nodes are the nodes that can accept writes. MongoDB's replication is 'single-master:' only one node can accept write operations at a time. Secondary and slave nodes are read-only nodes that replicate from the primary.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, \"20. How does MongoDB provide concurrency?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, \"MongoDB uses reader-writer locks that allow concurrent readers shared access to a resource, such as a database or collection, but give exclusive access to a single write operation.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, \"21. MongoDB data types\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, \"MongoDB supports many datatypes.Some of them are:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }, \"String- \"), \"String in MongoDB must be UTF - 8 valid.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }, \"Integer- \"), \"Integer can be 32 bit or 64 bit depending upon our server.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, \"Boolean Double- \"), \"Used to store floating point values.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, \"Min/Max keys- \"), \"Compare a value against the lowest and highest BSON elements.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }, \"Arrays- \"), \"Used to store arrays or list or multiple values into one key.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, \"Timestamp- \"), \"Can be handy for recording when a document has been modified or added.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, \"Object- \"), \"Used for embedded documents.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, \"Null- \"), \"Used to store a Null value.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, \"Symbol- \"), \"This datatype is used identically to a string; however, it 's generally reserved for languages that use a specific symbol type.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }, \"Date- \"), \"This datatype is used to store the current date or time in UNIX time format.You can specify your own date time by creating object of Date and passing day, month, year into it.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }, \"Object ID- \"), \"This datatype is used to store the document's ID.\", \" \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }, \"Binary data- \"), \"This datatype is used to store binary data.\", \" \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    }, \"Code- \"), \"This datatype is used to store JavaScript code into the document.\", \" \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, \"Regular expression- \"), \"This datatype is used to store regular expression.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }, \"22. Advantages of MongoDB over RDBMS:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }, \"Schema less \\u2212 MongoDB is a document database in which one collection holds different documents. Number of fields, content and size of the document can differ from one document to another.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }, \"Structure of a single object is clear. \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }, \"No complex joins.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }, \"MongoDB is easy to scale.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }, \"Conversion/mapping of application objects to database objects not needed.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }, \"24. Difference between DELETE, DROP and TRUNCATE:\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }, \"TRUNCATE\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    }, \"TRUNCATE SQL query removes all rows from a table, without logging the individual row deletions.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    }, \"TRUNCATE is faster than the DELETE query.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }, \"TRUNCATE is executed using a table lock and the whole table is locked to remove all records.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }, \"Truncate uses less transaction space than the Delete statement.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, \"Truncate cannot be used with indexed views.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    }, \"DELETE:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469\n      },\n      __self: this\n    }, \"DELETE is executed using a row lock, each row in the table is locked for deletion. The DELETE command is used to remove rows from a table based on WHERE condition. The delete can be used with indexed views. Delete uses more transaction space than the Truncate statement.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    }, \"DROP:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480\n      },\n      __self: this\n    }, \"The DROP command removes a table from the database. All the tables' rows, indexes, and privileges will also be removed.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    }, \"No DML triggers will be fired.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485\n      },\n      __self: this\n    }, \"The operation cannot be rolled back.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }, \"DROP and TRUNCATE are DDL commands, whereas DELETE is a DML command.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    }, \"DELETE operations can be rolled back (undone), while DROP and TRUNCATE operations cannot be rolled\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496\n      },\n      __self: this\n    }, \"25. Replication\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }, \"Replication in MongoDB is the process of creating multiple copies of MongoDB data in order to provide redundancy and fault tolerance. The main purpose of replication is to ensure that data is always available, even in the event of hardware failure, network outages, or other issues that could affect the availability of a MongoDB instance.\"), \"MongoDB uses a primary-secondary replication model, also known as master-slave replication. In this model, there is one primary node that handles all write operations and multiple secondary nodes that replicate data from the primary node. The primary node is responsible for accepting all write operations and applying them to its own database. The secondary nodes copy the data from the primary node and apply the same operations to their own databases.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }, \"Replication in MongoDB provides several benefits:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }, \"High availability: \"), \"With multiple copies of the data, the system is always available, even in the event of hardware or network failures.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }, \"Fault tolerance: \"), \"If the primary node fails, one of the secondary nodes can be promoted to take over as the new primary.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }, \"Scalability: \"), \"Replication allows for horizontal scaling by adding more secondary nodes to the system.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }, \": \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }, \": \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }, \": \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    }, \"How Replication Works in MongoDB : \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }, \"MongoDB achieves replication by the use of replica set. A replica set is a group of mongod instances that host the same data set. In a replica, one node is primary node that receives all write operations. All other instances, such as secondaries, apply operations from the primary so that they have the same data set. Replica set can have only one primary node. Replica set is a group of two or more nodes (generally minimum 3 nodes are required).\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }, \"In a replica set, one node is primary node and remaining nodes are secondary. At the time of automatic failover or maintenance, election establishes for primary and a new primary node is elected. After the recovery of failed node, it again join the replica set and works as a secondary node.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    }, \"Replica Set Features : \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553\n      },\n      __self: this\n    }, \"A cluster of N nodes \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554\n      },\n      __self: this\n    }, \"Any one node can be primary\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555\n      },\n      __self: this\n    }, \"All write operations go to primary\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }, \"Automatic failover \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    }, \"Automatic recovery\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }, \"Consensus election of primary Set Up a Replica Set :\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561\n      },\n      __self: this\n    }, \"Sharding: Sharding is the process of storing data records across multiple machines and it is MongoDB's approach to meeting the demands of data growth. As the size of the data increases, a single machine may not be sufficient to store the data nor provide an acceptable read and write throughput.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568\n      },\n      __self: this\n    }, \"Sharding solves the problem with horizontal scaling. With sharding, you add more machines to support data growth and the demands of read and write operations.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573\n      },\n      __self: this\n    }, \"Why Sharding?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575\n      },\n      __self: this\n    }, \"In replication, all writes go to master node\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576\n      },\n      __self: this\n    }, \"Latency sensitive queries still go to master\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    }, \"Single replica set has limitation of 12 nodes\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578\n      },\n      __self: this\n    }, \"Memory can't be large enough when active dataset is big\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581\n      },\n      __self: this\n    }, \"Local disk is not big enough\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    }, \"Vertical scaling is too expensive\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    }, \"26. Projection\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587\n      },\n      __self: this\n    }, \"Projection means selecting only the necessary data rather than selecting whole of the data of a document.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591\n      },\n      __self: this\n    }, \"If a document has 5 fields and you need to show only 3, then select only 3 fields from them. when you execute find() method, then it displays all fields of a document. To limit this, you need to set a list of fields with value 1 or 0. 1 is used to show the field while 0 is used to hide the fields.\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598\n      },\n      __self: this\n    }, \"27. Creating a Capped Collection\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600\n      },\n      __self: this\n    }, \"Capped collections are fixed-size circular collections that follow the insertion order to support high performance for create, read, and delete operations.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 605\n      },\n      __self: this\n    }, \"By circular, it means that when the fixed size allocated to the collection is exhausted, it will start deleting the oldest document in the collection without providing any explicit commands. Capped collections restrict updates to the documents if the update results in increased document size. Since capped collections store documents in the order of the disk storage, it ensures that the document size does not increase the size allocated on the disk. Capped collections are best for storing log information, cache data, or any other high volume data.\", \" \")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: code,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618\n      },\n      __self: this\n    })), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624\n      },\n      __self: this\n    }, \"This will create a collection named student, with maximum size of 5 megabytes and maximum of 5000 documents.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629\n      },\n      __self: this\n    }, \"28. What is mongodb indexing\"), \"MongoDB uses indexing in order to make the query processing more efficient. If there is no indexing, then the MongoDB must scan every document in the collection and retrieve only those documents that match the query. Indexes are special data structures that stores some information related to the documents such that it becomes easy for MongoDB to find the right data file. The indexes are order by the value of the field specified in the index.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: createInd,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645\n      },\n      __self: this\n    }, \"29. Humongous\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648\n      },\n      __self: this\n    }, \"Humongous: \"), \"Extremely large. So MongoDb is name.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 650\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 651\n      },\n      __self: this\n    }, \"Spider Monkey: \"), \"MongoDb internally used Moilla's Spider Monkey JavaScript engine.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    }, \"MongoDb Physical database contains several logical databases.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660\n      },\n      __self: this\n    }, \"Each database contains several collections. Collection is something like table in relational database.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664\n      },\n      __self: this\n    }, \"Each collection contains several documents. Document is something like record/row in relational database.\")), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669\n      },\n      __self: this\n    }, \"30. Key characteristics of MongoDb database\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671\n      },\n      __self: this\n    }, \"All information related to a document will be stored in a single place. To retrieve data, It's not required to perform join operations and hance retrieval is very fast.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676\n      },\n      __self: this\n    }, \"Documents are independent of each other and no schema. Hence we can store unstructure data like videos, audio files etc.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680\n      },\n      __self: this\n    }, \"We can store very huge amount of data and hence scalability is more.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684\n      },\n      __self: this\n    }, \"Performance and Flexibility are biggest assets of MongoDb.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689\n      },\n      __self: this\n    }, \"31. MongoDb Shell vs MongoDb Server\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691\n      },\n      __self: this\n    }, \"Once we installed MongoDb, We will get MongoDb Shell and MongoDb Server.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 695\n      },\n      __self: this\n    }, \"MongoDb Server is responsible to store our data in database.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698\n      },\n      __self: this\n    }, \"MongoDb Shell is responsible to manage Server. By using this Shell we can perform all required CURD operations.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705\n      },\n      __self: this\n    }, \"MongoDb Server can be either local or remote.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 706\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 707\n      },\n      __self: this\n    }, \"mongod: \"), \"To Launch MongoDb Server\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 709\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710\n      },\n      __self: this\n    }, \"mongo: \"), \"To Launch MongoDb Shell\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 713\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 714\n      },\n      __self: this\n    }, \"32. Default Databases\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 716\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 717\n      },\n      __self: this\n    }, \"admin: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 718\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 719\n      },\n      __self: this\n    }, \"admin db is used to store user authentication and authorization information like username, password, roles etc.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724\n      },\n      __self: this\n    }, \"This database is used by administrators while creating, deleting and updating users and while assigning roles.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 730\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 733\n      },\n      __self: this\n    }, \"config: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735\n      },\n      __self: this\n    }, \"To store configuration information of MongoDb server.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 740\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 742\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 743\n      },\n      __self: this\n    }, \"local: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 744\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 745\n      },\n      __self: this\n    }, \"Can be used by admin while performing Replication process.\")))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 751\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 752\n      },\n      __self: this\n    }, \"33. Data Formats\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754\n      },\n      __self: this\n    }, \"JSON: --- BSON and that BSON will be stored.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 755\n      },\n      __self: this\n    }, \"BSON Formats required less memory.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 756\n      },\n      __self: this\n    }, \"BSON support extra data types.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 757\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 758\n      },\n      __self: this\n    }, \"EJSON (Extended JSON): \"), \"At the time of retrieval BSON data will be converted to EJSON.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 762\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 763\n      },\n      __self: this\n    }, \"34. \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 764\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 765\n      },\n      __self: this\n    }, \"Database will be created dynamically.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 766\n      },\n      __self: this\n    }, \"If anything prefixed with $ symbol, then it is predefined word.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 770\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 771\n      },\n      __self: this\n    }, \"load(\\\"D:\\\\users.js\\\"): \"), \"To load documents.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 773\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 774\n      },\n      __self: this\n    }, \"Inserting documents from JSON file. : \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 775\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 776\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 777\n      },\n      __self: this\n    }, \"mongoimport: \"), \"Tool to import documents from JSON file into MongoDb.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 780\n      },\n      __self: this\n    }, \"mongoimport is not available by default.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 783\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 784\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 785\n      },\n      __self: this\n    }, \"db.getName(): \"), \"To check current database name.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 788\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default withStyles(styles)(IntroMD);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/mongoDB/deepMongodb/infoMD.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","mongoDB","Index","mongoLikes","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","code","trim","createInd","IntroMD","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nimport mongoDB from \"../../../assets/js/mongodb.png\";\nimport Index from \"../../../assets/js/index.gif\";\nimport mongoLikes from \"../../../assets/js/like.png\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst redesign = {\n  height: 350,\n  width: 600,\n};\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst code = `\n    db.createCollection(\"student\", \n                          { capped : true, \n                            autoIndexID : true, \n                            size : 5242880, \n                            max : 5000\n                           }); \n`.trim();\n\nconst createInd = `\n//Create index\ndb.users.ensureIndex({\"email\":1, \"roll\":-1})\n\n//Drop index\ndb.users.dropIndex({\"email\":1})\n\n//getIndexes\ndb.users.getIndexes()                           //returns the description of all the indexes int the collection.\n`.trim();\n\n// const code = ``.trim();\n\n// const code = ``.trim();\n\n// const code = ``.trim();\n\n// const code = ``.trim();\n\n// const code = ``.trim();\n\n// const code = ``.trim();\n\n// const code = ``.trim();\n\nclass IntroMD extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. What makes MongoDB the best?</h3>\n              <ul>\n                <li>\n                  <b>Schema-less: </b>MongoDB is a schema-less database, which\n                  means you can store data without defining a fixed structure\n                  for it. This makes it easy to add or modify fields as needed,\n                  without having to modify the entire schema.\n                </li>\n                <br />\n                <li>\n                  <b>Scalability: </b>MongoDB is a horizontally scalable\n                  database, which means you can easily scale it out across\n                  multiple servers as your application grows. This makes it a\n                  good choice for applications that need to handle large volumes\n                  of data and traffic.\n                </li>\n                <br />\n                <li>\n                  <b>Performance: </b>MongoDB is designed to be fast and\n                  efficient, with a high-performance storage engine that can\n                  handle large amounts of data. It also supports indexing, which\n                  makes queries faster and more efficient.\n                </li>\n                <br />\n                <li>\n                  <b>Flexibility: </b>MongoDB is a flexible database that can be\n                  used for a wide range of applications, from simple blogs and\n                  e-commerce sites to complex social networks and big data\n                  applications.\n                </li>\n              </ul>\n              <br />\n              <h3>\n                2. If you remove an object attribute, is it deleted from the\n                database?\n              </h3>\n              <p>\n                Yes, it is deleted. Hence, it is better to eliminate the\n                attribute and then save the object again.\n              </p>\n              <br />\n              <img\n                src={mongoDB}\n                alt=\"Omega\"\n                className=\"responsive\"\n                style={redesign}\n              />\n              <br />\n              <br />\n              <h3>\n                3. Explain the situation when an index does not fit into RAM.\n              </h3>\n              <p>\n                In MongoDB, indexes are used to improve query performance by\n                allowing the database to locate and retrieve specific data more\n                quickly. When the size of an index exceeds the amount of\n                available RAM on a server, MongoDB may not be able to keep the\n                entire index in memory. This can result in slower query\n                performance, as MongoDB must read the index from disk rather\n                than from memory.\n              </p>\n              In situations where the index is too large to fit in memory, there\n              are several strategies that can be used to improve performance:\n              <ul>\n                <li>\n                  <b>Add more RAM to the server: </b>This is the simplest\n                  solution and can often improve performance significantly.\n                </li>\n                <br />\n                <li>\n                  <b>Use a more efficient index: </b>If possible, consider using\n                  a smaller or more efficient index that can fit in memory.\n                </li>\n                <br />\n                <li>\n                  <b>Sharding: </b>MongoDB supports sharding, which allows data\n                  to be distributed across multiple servers. By sharding the\n                  data, the index size can be reduced on each individual server,\n                  allowing more of the index to fit in memory.\n                </li>\n                <br />\n                <li>\n                  <b>Use SSDs: </b>If the index cannot fit in memory, using SSDs\n                  can help improve performance by reducing the time it takes to\n                  read data from disk.\n                </li>\n                <br />\n                <li>\n                  <b>Tune MongoDB configuration parameters: </b>MongoDB provides\n                  a number of configuration parameters that can be tuned to\n                  optimize performance. For example, increasing the read-ahead\n                  cache size can help reduce the number of disk reads required\n                  to retrieve data.\n                </li>\n              </ul>\n              <img\n                src={Index}\n                alt=\"Omega\"\n                className=\"responsive\"\n                style={redesign}\n              />\n              <br />\n              <br />\n              <br />\n              <b>Likes Comments</b>\n              <br />\n              <img\n                src={mongoLikes}\n                alt=\"Omega\"\n                className=\"responsive\"\n                style={redesign}\n              />\n              <br />\n              <h3>4. How does MongoDB provide consistency?</h3>\n              <ul>\n                <li>\n                  MongoDB provides consistency through its default write\n                  concern, which ensures that a write operation has been\n                  successfully written to the majority of replica set members\n                  before acknowledging the write operation. This ensures that\n                  subsequent read operations will see the updated data, even if\n                  the primary node fails and a new primary is elected.\n                </li>\n                <br />\n                <li>\n                  In addition, MongoDB supports multi-document transactions,\n                  which ensures that a group of operations are executed as a\n                  single atomic unit. This guarantees consistency across\n                  multiple documents in a collection and can be used to\n                  implement complex business logic.\n                </li>\n                <br />\n                <li>\n                  MongoDB also provides a number of features such as read and\n                  write concerns, causal consistency, and retryable writes,\n                  which enable developers to fine-tune consistency requirements\n                  based on their specific use cases.\n                </li>\n              </ul>\n              <br />\n              <h3>5. What is the use of Journaling in MongoDB?</h3>\n              <p>Journaling is used for safe backups in MongoDB.</p>\n              <br />\n              <h3>6. What is the use of Profiler?</h3>\n              <p>\n                Profiler is used to show the performance characteristics of\n                every operation against the database.\n              </p>\n              <br />\n              <h3>7. What is Vertical Scaling?</h3>\n              <p>\n                Vertical scaling adds more CPU and storage resources to increase\n                capacity.\n              </p>\n              <br />\n              <h3>8. Define Horizontal Scaling.</h3>\n              <p>\n                Horizontal scaling divides the dataset and distributes data over\n                multiple servers, or shards.\n              </p>\n              <br />\n              <h3>9. What are the components of the Sharded cluster?</h3>\n              <p>The sharded cluster has the following components: </p>\n              <ul>\n                <li>Shards</li>\n                <li>Query routers</li>\n                <li>Config servers</li>\n              </ul>\n              <br />\n              <h3>11. What is the use of the dot notation in MongoDB?</h3>\n              <p>\n                MongoDB uses the dot notation to access the elements of an array\n                and the fields of an embedded document.\n              </p>\n              <br />\n              <h3>12. What is Splitting in MongoDB?</h3>\n              <p>\n                Splitting is a background process that is used to keep chunks\n                from growing too large.\n              </p>\n              <br />\n              <h3>\n                13. What is the difference between MongoDB(non-relational) and\n                MySQL(relational)?\n              </h3>\n              <p>There is a lot of difference between them in:</p>\n              <ul>\n                <li>Terms of data representation</li>\n                <li>Relationships</li>\n                <li>Transaction</li>\n                <li>Querying data</li>\n                <li>Schema design and definition</li>\n                <li>Performance</li>\n                <li>Speed</li>\n                <li>Normalization.</li>\n              </ul>\n              <br />\n              <h3>14. Explain the structure of ObjectID in MongoDB.</h3>\n              <p>\n                ObjectIds are small, likely unique, fast to generate, and\n                ordered. ObjectId values consist of 12 bytes, where the first\n                four bytes are a timestamp that reflect the ObjectId’s creation.\n              </p>\n              <br />\n              <h3>15. Why MongoDB is not preferred over a 32-bit system?</h3>\n              <p>\n                MongoDB is not preferred over a 32-bit system because MongoDB\n                uses memory-mapped files for performance reasons, and 32-bit\n                systems have a limited address space, which can lead to problems\n                when working with large data sets. In a 32-bit system, MongoDB\n                can only use up to 4GB of RAM, which is a very small amount for\n                modern databases. This can cause the database to slow down or\n                even crash when working with large amounts of data. Therefore,\n                it is recommended to use a 64-bit system for running MongoDB in\n                order to take advantage of larger address spaces and avoid these\n                limitations.\n              </p>\n              <br />\n              <h3>\n                16. Does MongoDB support ACID transaction management and locking\n                functionalities?\n              </h3>\n              <p>\n                Historically MongoDB does not support default multi-document\n                ACID transactions (multiple-document updates that can be rolled\n                back and are ACID-compliant). However, MongoDB provides atomic\n                operation on a single document.\n              </p>\n              <br />\n              <h3>\n                17. Should I normalize my data before storing it in MongoDB?\n              </h3>\n              <ul>\n                <li>\n                  It depends from your goals. Normalization will provide an\n                  update efficient data representation. Denormalization will\n                  make data reading efficient.\n                </li>\n                <br />\n\n                <li>\n                  In general, use normalized data models: when embedding would\n                  result in duplication of data but would not provide sufficient\n                  read performance advantages to outweigh the implications of\n                  the duplication. to represent more complex many-to-many\n                  relationships. to model large hierarchical data sets. Also\n                  normalizing your data like you would with a relational\n                  database is usually not a good idea in MongoDB.\n                </li>\n                <br />\n\n                <li>\n                  Normalization in relational databases is only feasible under\n                  the premise that JOINs between tables are relatively cheap.\n                  The $lookup aggregation operator provides some limited JOIN\n                  functionality, but it doesn't work with sharded collections.\n                  So joins often need to be emulated by the application through\n                  multiple subsequent database queries, which is very slow\n                </li>\n              </ul>\n              <br />\n              <h3>18. What happens if an index does not fit into RAM?</h3>\n              <p>\n                If the indexes do not fit into RAM, MongoDB reads data from disk\n                which is relatively very much slower than reading from RAM.\n              </p>\n              <br />\n              <h3>19. What are Primary and Secondary Replica sets?</h3>\n              <p>\n                Primary and master nodes are the nodes that can accept writes.\n                MongoDB's replication is 'single-master:' only one node can\n                accept write operations at a time. Secondary and slave nodes are\n                read-only nodes that replicate from the primary.\n              </p>\n              <br />\n              <h3>20. How does MongoDB provide concurrency?</h3>\n              <p>\n                MongoDB uses reader-writer locks that allow concurrent readers\n                shared access to a resource, such as a database or collection,\n                but give exclusive access to a single write operation.\n              </p>\n              <br />\n              <h3>21. MongoDB data types</h3>\n              <p>MongoDB supports many datatypes.Some of them are:</p>\n              <ul>\n                <li>\n                  <b>String- </b>String in MongoDB must be UTF - 8 valid.\n                </li>\n                <li>\n                  <b>Integer- </b>Integer can be 32 bit or 64 bit depending upon\n                  our server.\n                </li>\n                <li>\n                  <b>Boolean Double- </b>Used to store floating point values.\n                </li>\n                <li>\n                  <b>Min/Max keys- </b>Compare a value against the lowest and\n                  highest BSON elements.\n                </li>\n                <li>\n                  <b>Arrays- </b>Used to store arrays or list or multiple values\n                  into one key.\n                </li>\n                <li>\n                  <b>Timestamp- </b>Can be handy for recording when a document\n                  has been modified or added.\n                </li>\n                <li>\n                  <b>Object- </b>Used for embedded documents.\n                </li>\n                <li>\n                  <b>Null- </b>Used to store a Null value.\n                </li>\n                <li>\n                  <b>Symbol- </b>This datatype is used identically to a string;\n                  however, it 's generally reserved for languages that use a\n                  specific symbol type.\n                </li>\n                <br />\n\n                <li>\n                  <b>Date- </b>This datatype is used to store the current date\n                  or time in UNIX time format.You can specify your own date time\n                  by creating object of Date and passing day, month, year into\n                  it.\n                </li>\n                <br />\n\n                <li>\n                  <b>Object ID- </b>This datatype is used to store the\n                  document's ID.{\" \"}\n                </li>\n                <li>\n                  <b>Binary data- </b>This datatype is used to store binary\n                  data.{\" \"}\n                </li>\n                <li>\n                  <b>Code- </b>This datatype is used to store JavaScript code\n                  into the document.{\" \"}\n                </li>\n                <li>\n                  <b>Regular expression- </b>This datatype is used to store\n                  regular expression.\n                </li>\n              </ul>\n              <br />\n              <h3>22. Advantages of MongoDB over RDBMS:</h3>\n              <ul>\n                <li>\n                  Schema less − MongoDB is a document database in which one\n                  collection holds different documents. Number of fields,\n                  content and size of the document can differ from one document\n                  to another.\n                </li>\n                <li>Structure of a single object is clear. </li>\n                <li>No complex joins.</li>\n                <li>MongoDB is easy to scale.</li>\n                <li>\n                  Conversion/mapping of application objects to database objects\n                  not needed.\n                </li>\n              </ul>\n              <br />\n              <h3>24. Difference between DELETE, DROP and TRUNCATE:</h3>\n              <p>TRUNCATE</p>\n              <ul>\n                <li>\n                  TRUNCATE SQL query removes all rows from a table, without\n                  logging the individual row deletions.\n                </li>\n                <li>TRUNCATE is faster than the DELETE query.</li>\n                <li>\n                  TRUNCATE is executed using a table lock and the whole table is\n                  locked to remove all records.\n                </li>\n                <li>\n                  Truncate uses less transaction space than the Delete\n                  statement.\n                </li>\n                <li>Truncate cannot be used with indexed views.</li>\n              </ul>\n              <br />\n              <p>DELETE:</p>\n              <ul>\n                <li>\n                  DELETE is executed using a row lock, each row in the table is\n                  locked for deletion. The DELETE command is used to remove rows\n                  from a table based on WHERE condition. The delete can be used\n                  with indexed views. Delete uses more transaction space than\n                  the Truncate statement.\n                </li>\n              </ul>\n              <br />\n              <p>DROP:</p>\n              <ul>\n                <li>\n                  The DROP command removes a table from the database. All the\n                  tables' rows, indexes, and privileges will also be removed.\n                </li>\n                <li>No DML triggers will be fired.</li>\n                <li>The operation cannot be rolled back.</li>\n                <li>\n                  DROP and TRUNCATE are DDL commands, whereas DELETE is a DML\n                  command.\n                </li>\n                <li>\n                  DELETE operations can be rolled back (undone), while DROP and\n                  TRUNCATE operations cannot be rolled\n                </li>\n              </ul>\n              <br />\n              <h3>25. Replication</h3>\n              <p>\n                Replication in MongoDB is the process of creating multiple\n                copies of MongoDB data in order to provide redundancy and fault\n                tolerance. The main purpose of replication is to ensure that\n                data is always available, even in the event of hardware failure,\n                network outages, or other issues that could affect the\n                availability of a MongoDB instance.\n              </p>\n              MongoDB uses a primary-secondary replication model, also known as\n              master-slave replication. In this model, there is one primary node\n              that handles all write operations and multiple secondary nodes\n              that replicate data from the primary node. The primary node is\n              responsible for accepting all write operations and applying them\n              to its own database. The secondary nodes copy the data from the\n              primary node and apply the same operations to their own databases.\n              <br />\n              <br />\n              <b>Replication in MongoDB provides several benefits:</b>\n              <br />\n              <p>\n                <ul>\n                  <li><b>High availability: </b>With multiple copies of the data, the system is always available, even in the event of hardware or network failures.</li><br/>\n                  <li><b>Fault tolerance: </b>If the primary node fails, one of the secondary nodes can be promoted to take over as the new primary.</li><br/>\n                  <li><b>Scalability: </b>Replication allows for horizontal scaling by adding more secondary nodes to the system.</li><br/>\n                  <li><b>: </b></li><br/>\n                  <li><b>: </b></li><br/>\n                  <li><b>: </b></li><br/>\n                </ul>\n              </p>\n              <br />\n              <br />\n              <b>How Replication Works in MongoDB : </b>\n              <br />\n              <ul>\n                <li>\n                  MongoDB achieves replication by the use of replica set. A\n                  replica set is a group of mongod instances that host the same\n                  data set. In a replica, one node is primary node that receives\n                  all write operations. All other instances, such as\n                  secondaries, apply operations from the primary so that they\n                  have the same data set. Replica set can have only one primary\n                  node. Replica set is a group of two or more nodes (generally\n                  minimum 3 nodes are required).\n                </li>\n                <br />\n                <li>\n                  In a replica set, one node is primary node and remaining nodes\n                  are secondary. At the time of automatic failover or\n                  maintenance, election establishes for primary and a new\n                  primary node is elected. After the recovery of failed node, it\n                  again join the replica set and works as a secondary node.\n                </li>\n                <br />\n                <b>Replica Set Features : </b>\n                <br />\n                <ul>\n                  <li>A cluster of N nodes </li>\n                  <li>Any one node can be primary</li>\n                  <li>All write operations go to primary</li>\n                  <li>Automatic failover </li>\n                  <li>Automatic recovery</li>\n                </ul>\n                <br />\n                <b>Consensus election of primary Set Up a Replica Set :</b>\n                <p>\n                  Sharding: Sharding is the process of storing data records\n                  across multiple machines and it is MongoDB's approach to\n                  meeting the demands of data growth. As the size of the data\n                  increases, a single machine may not be sufficient to store the\n                  data nor provide an acceptable read and write throughput.\n                </p>\n                <p>\n                  Sharding solves the problem with horizontal scaling. With\n                  sharding, you add more machines to support data growth and the\n                  demands of read and write operations.\n                </p>\n                <b>Why Sharding?</b>\n                <ul>\n                  <li>In replication, all writes go to master node</li>\n                  <li>Latency sensitive queries still go to master</li>\n                  <li>Single replica set has limitation of 12 nodes</li>\n                  <li>\n                    Memory can't be large enough when active dataset is big\n                  </li>\n                  <li>Local disk is not big enough</li>\n                  <li>Vertical scaling is too expensive</li>\n                </ul>\n                <br />\n              </ul>\n              <h3>26. Projection</h3>\n              <p>\n                Projection means selecting only the necessary data rather than\n                selecting whole of the data of a document.\n              </p>\n              <p>\n                If a document has 5 fields and you need to show only 3, then\n                select only 3 fields from them. when you execute find() method,\n                then it displays all fields of a document. To limit this, you\n                need to set a list of fields with value 1 or 0. 1 is used to\n                show the field while 0 is used to hide the fields.\n              </p>\n              <h3>27. Creating a Capped Collection</h3>\n              <ul>\n                <li>\n                  Capped collections are fixed-size circular collections that\n                  follow the insertion order to support high performance for\n                  create, read, and delete operations.\n                </li>\n                <li>\n                  By circular, it means that when the fixed size allocated to\n                  the collection is exhausted, it will start deleting the oldest\n                  document in the collection without providing any explicit\n                  commands. Capped collections restrict updates to the documents\n                  if the update results in increased document size. Since capped\n                  collections store documents in the order of the disk storage,\n                  it ensures that the document size does not increase the size\n                  allocated on the disk. Capped collections are best for storing\n                  log information, cache data, or any other high volume data.{\" \"}\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={code}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <i>\n                This will create a collection named student, with maximum size\n                of 5 megabytes and maximum of 5000 documents.\n              </i>\n              <br />\n              <h3>28. What is mongodb indexing</h3>\n              MongoDB uses indexing in order to make the query processing more\n              efficient. If there is no indexing, then the MongoDB must scan\n              every document in the collection and retrieve only those documents\n              that match the query. Indexes are special data structures that\n              stores some information related to the documents such that it\n              becomes easy for MongoDB to find the right data file. The indexes\n              are order by the value of the field specified in the index.\n              <div style={titles}>\n                <PrismCode\n                  code={createInd}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>29. Humongous</h3>\n              <ul>\n                <li>\n                  <b>Humongous: </b>Extremely large. So MongoDb is name.\n                </li>\n                <li>\n                  <b>Spider Monkey: </b>MongoDb internally used Moilla's Spider\n                  Monkey JavaScript engine.\n                </li>\n              </ul>\n              <br />\n              <ul>\n                <li>\n                  MongoDb Physical database contains several logical databases.\n                </li>\n                <li>\n                  Each database contains several collections. Collection is\n                  something like table in relational database.\n                </li>\n                <li>\n                  Each collection contains several documents. Document is\n                  something like record/row in relational database.\n                </li>\n              </ul>\n              <h3>30. Key characteristics of MongoDb database</h3>\n              <ul>\n                <li>\n                  All information related to a document will be stored in a\n                  single place. To retrieve data, It's not required to perform\n                  join operations and hance retrieval is very fast.\n                </li>\n                <li>\n                  Documents are independent of each other and no schema. Hence\n                  we can store unstructure data like videos, audio files etc.\n                </li>\n                <li>\n                  We can store very huge amount of data and hence scalability is\n                  more.\n                </li>\n                <li>\n                  Performance and Flexibility are biggest assets of MongoDb.\n                </li>\n              </ul>\n              <br />\n              <h3>31. MongoDb Shell vs MongoDb Server</h3>\n              <ul>\n                <li>\n                  Once we installed MongoDb, We will get MongoDb Shell and\n                  MongoDb Server.\n                </li>\n                <li>\n                  MongoDb Server is responsible to store our data in database.\n                </li>\n                <li>\n                  MongoDb Shell is responsible to manage Server. By using this\n                  Shell we can perform all required CURD operations.\n                </li>\n              </ul>\n              <br />\n              <ul>\n                <li>MongoDb Server can be either local or remote.</li>\n                <li>\n                  <b>mongod: </b>To Launch MongoDb Server\n                </li>\n                <li>\n                  <b>mongo: </b>To Launch MongoDb Shell\n                </li>\n              </ul>\n              <br />\n              <h3>32. Default Databases</h3>\n              <ul>\n                <li>\n                  <b>admin: </b>\n                  <ul>\n                    <li>\n                      admin db is used to store user authentication and\n                      authorization information like username, password, roles\n                      etc.\n                    </li>\n                    <li>\n                      This database is used by administrators while creating,\n                      deleting and updating users and while assigning roles.\n                    </li>\n                  </ul>\n                </li>\n                <br />\n\n                <li>\n                  <b>config: </b>\n                  <ul>\n                    <li>\n                      To store configuration information of MongoDb server.\n                    </li>\n                  </ul>\n                </li>\n                <br />\n\n                <li>\n                  <b>local: </b>\n                  <ul>\n                    <li>\n                      Can be used by admin while performing Replication process.\n                    </li>\n                  </ul>\n                </li>\n              </ul>\n              <br />\n              <h3>33. Data Formats</h3>\n              <ul>\n                <li>JSON: --- BSON and that BSON will be stored.</li>\n                <li>BSON Formats required less memory.</li>\n                <li>BSON support extra data types.</li>\n                <li>\n                  <b>EJSON (Extended JSON): </b>At the time of retrieval BSON\n                  data will be converted to EJSON.\n                </li>\n              </ul>\n              <br />\n              <h3>34. </h3>\n              <ul>\n                <li>Database will be created dynamically.</li>\n                <li>\n                  If anything prefixed with $ symbol, then it is predefined\n                  word.\n                </li>\n                <li>\n                  <b>load(\"D:\\users.js\"): </b>To load documents.\n                </li>\n                <li>\n                  <b>Inserting documents from JSON file. : </b>\n                  <ul>\n                    <li>\n                      <b>mongoimport: </b>Tool to import documents from JSON\n                      file into MongoDb.\n                    </li>\n                    <li>mongoimport is not available by default.</li>\n                  </ul>\n                </li>\n                <br />\n                <li>\n                  <b>db.getName(): </b>To check current database name.\n                </li>\n              </ul>\n              <br />\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(IntroMD);\n"]},"metadata":{},"sourceType":"module"}