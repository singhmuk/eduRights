{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import\"../../ReactJs/styles.css\";import Sidebar from\"../sidebar\";import PrismCode from\"../prismCode\";var titles={backgroundColor:\"#F0F8FF\",padding:\"1px\",fontSize:\"16px\"};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var slideshow=\"\\nimport \\\"./slideshow.css\\\";\\n\\nconst colors = [\\\"green\\\", \\\"blue\\\", \\\"yellow\\\"];\\nconst delay = 2500;\\n\\nexport default function Slideshow() {\\n  const [index, setIndex] = useState(0);\\n  const timeoutRef = useRef(null);\\n\\n  function resetTimeout() {\\n    if (timeoutRef.current) {\\n      clearTimeout(timeoutRef.current);\\n    }\\n  }\\n\\n  useEffect(() => {\\n    resetTimeout();\\n    timeoutRef.current = setTimeout(() => setIndex((prevIndex) =>\\n          prevIndex === colors.length - 1 ? 0 : prevIndex + 1\\n        ), delay);\\n\\n    return () => {\\n      resetTimeout();\\n    };\\n  }, [index]);\\n\\n  return (\\n    <div className=\\\"slideshow\\\">\\n      <div\\n        className=\\\"slideshowSlider\\\"\\n        style={{ transform: 'translate3d('$'{-index * 100}%, 0, 0)' }}\\n      >\\n        {colors.map((backgroundColor, index) => (\\n          <div className=\\\"slide\\\" key={index} style={{ backgroundColor }}></div>\\n        ))}\\n      </div>\\n\\n      <div>\\n        {colors.map((_, idx) => (\\n          <div\\n            className={'slideshowDot'$'{index === idx ? \\\" active\\\" : \\\"\\\"}'}\\n            onClick={() => { setIndex(idx) }} />\\n        ))}\\n      </div>\\n    </div>\\n  );\\n}\".trim();var slideshowCss=\"\\n.slideshow {\\n  margin: 0 auto;\\n  overflow: hidden;\\n  max-width: 500px;\\n}\\n\\n.slideshowSlider {\\n  white-space: nowrap;\\n  transition: ease 1000ms;\\n}\\n\\n.slide {\\n  display: inline-block;\\n\\n  height: 400px;\\n  width: 100%;\\n  border-radius: 40px;\\n}\\n\\n.slideshowDots {\\n  text-align: center;\\n}\\n\\n.slideshowDot {\\n  display: inline-block;\\n  height: 20px;\\n  width: 20px;\\n  border-radius: 50%;\\n  background-color: #c4c4c4;\\n}\\n\\n.slideshowDot.active {\\n  background-color: #6a0dad;\\n}\".trim();var fitersdata=\"\\nconst data = [\\n  { category: \\\"vehicle\\\", name: \\\"car\\\" },\\n  { category: \\\"vehicle\\\", name: \\\"jeep\\\" },\\n  { category: \\\"fruit\\\", name: \\\"apple\\\" },\\n  { category: \\\"fruit\\\", name: \\\"orange\\\" },\\n  { category: \\\"electronics\\\", name: \\\"mobile\\\" },\\n  { category: \\\"electronics\\\", name: \\\"laptop\\\" },\\n];\\n\\nconst App = () => {\\n  const [category, setCategory] = useState(\\\"vehicle\\\");\\n  const filteredNames = data\\n    .filter((item) => item.category === category)\\n    .map((item) => item.name);\\n\\n  return (\\n    <div>\\n      <label>\\n        Select a category:\\n        <select value={category} onChange={(e) => setCategory(e.target.value)}>\\n          <option value=\\\"vehicle\\\">Vehicle</option>\\n          <option value=\\\"fruit\\\">Fruit</option>\\n          <option value=\\\"electronics\\\">Electronics</option>\\n        </select>\\n      </label> \\n      <input\\n        type=\\\"text\\\"\\n        value={category}\\n        onChange={(e) => setCategory(e.target.value)}\\n      />\\n      <ul>\\n        {filteredNames.map((name) => (\\n          <li key={name}>{name}</li>\\n        ))}\\n      </ul>\\n    </div>\\n  );\\n};\\n\".trim();var progressbar=\"\\nconst App = () => {\\n  const [progress, setProgress] = useState(0);\\n\\n  const handleClick = () => {\\n    if (progress < 100) {\\n      setProgress(progress + 10);\\n    }\\n  };\\n\\n  const progressStyle = {\\n    width: '$'{progress}%,\\n    height: \\\"20px\\\",\\n    backgroundColor: \\\"green\\\",\\n  };\\n\\n  return (\\n    <div>\\n      <div style={progressStyle}>{progress}%</div>\\n      <button onClick={handleClick}>Progress</button>\\n    </div>\\n  );\\n};\\n\".trim();var mouseHovers=\"\\nconst App = () => {\\n  const [isHovering, setHovering] = useState(false);\\n\\n  const handleMouseHover = () => {\\n    setHovering(isHovering => !isHovering);\\n  }\\n\\n  return (\\n    <div>\\n      <div\\n        onMouseEnter={handleMouseHover}\\n        onMouseLeave={handleMouseHover}\\n      >\\n        Hover Me\\n      </div>\\n      {isHovering && <div>Hovering right me</div>}\\n    </div>\\n  );\\n}\".trim();var MoveButton=\"\\nconst MoveButton = (props) => {\\n  return (\\n      <button onClick={props.onClick}>\\n          Click To Move\\n      </button>\\n  );\\n}\\n\\nconst BoxOne = () => <p>Box1</p>;\\n\\nconst BoxTwo = () => <p>Box2</p>;\\n\\n\\nclass App extends Component {\\nstate = { positions: 0 }\\n\\nhandleClick = () => {\\n  this.setState({ positions: (this.state.positions + 1) % 3 })\\n}\\n\\nrender () { \\nconst positions = this.state.positions;\\n  return (\\n      <div>\\n          { positions === 0 ? <MoveButton onClick={this.handleClick}/> : ''}\\n          <BoxOne />\\n          { positions === 1 ? <MoveButton onClick={this.handleClick}/> : ''}\\n          <BoxTwo />\\n          { positions === 2 ? <MoveButton onClick={this.handleClick}/> : ''}\\n      </div>\\n  );\\n}\\n}\\n\\nexport default App;\".trim();var sortItems=\"\\nconst items = [1, 2, 3, 4, 5];\\nfunction App() {\\n  const [sortOrder, setSortOrder] = useState(\\\"ascending\\\");\\n\\n  const handleCheckboxChange = (e) => {\\n    if (e.target.checked) {\\n      setSortOrder(\\\"descending\\\");\\n    } else {\\n      setSortOrder(\\\"ascending\\\");\\n    }\\n  };\\n\\n  const sortItems = (a, b) => {\\n    if (sortOrder === \\\"ascending\\\") {\\n      return a - b;\\n    } else {\\n      return b - a;\\n    }\\n  };\\n\\n  const sortedItems = [...items].sort(sortItems);\\n\\n  return (\\n    <div>\\n      <label>\\n        <input type=\\\"checkbox\\\" onChange={handleCheckboxChange} />\\n      </label>\\n      <ul>\\n        {sortedItems.map((item, index) => (\\n          <li key={index}>{item}</li>\\n        ))}\\n      </ul>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\".trim();var sliderBox=\"\\nimport Image1 from \\\"./1.jpg\\\";\\nimport Image2 from \\\"./2.jpg\\\";\\nimport Image3 from \\\"./logo.svg\\\";\\n\\nconst images = [Image1, Image2, Image3];\\n\\nconst App = () => {\\n  const [index, setIndex] = useState(0);\\n\\n  const handleClick = (direction) => {\\n    if (direction === \\\"prev\\\") {\\n      setIndex(index === 0 ? images.length - 1 : index - 1);\\n    } else {\\n      setIndex(index === images.length - 1 ? 0 : index + 1);\\n    }\\n  };\\n\\n  return (\\n    <div>\\n      <img src={images[index]} alt=\\\"\\\" style={{ width: 400, height: 400 }} />\\n      <button onClick={() => handleClick(\\\"prev\\\")}>Previous</button>\\n      <button onClick={() => handleClick(\\\"next\\\")}>Next</button>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\".trim();var checkConditions=\"\\nconst App = () => {\\n  const [items, setItems] = useState([\\n    { id: 1, name: \\\"Item 1\\\", checked: false },\\n    { id: 2, name: \\\"Item 2\\\", checked: true },\\n    { id: 3, name: \\\"Item 3\\\", checked: false },\\n    { id: 4, name: \\\"Item 4\\\", checked: true },\\n    { id: 5, name: \\\"Item 5\\\", checked: false },\\n  ]);\\n  const [sort, setSort] = useState(\\\"all\\\");\\n\\n  const handleCheckboxChange = (item) => {\\n    const newItems = items.map((i) => {\\n      if (i.id === item.id) {\\n        return { ...i, checked: !i.checked };\\n      }\\n      return i;\\n    });\\n    setItems(newItems);\\n  };\\n\\n  const sortedItems = items.sort((a, b) => {\\n    if (sort === \\\"all\\\") {\\n      return a.id - b.id;\\n    }\\n    if (sort === \\\"checked\\\") {\\n      return a.checked - b.checked;\\n    }\\n    if (sort === \\\"unchecked\\\") {\\n      return b.checked - a.checked;\\n    }\\n  });\\n\\n  return (\\n    <div>\\n      <div>\\n        <label>\\n          <input\\n            type=\\\"checkbox\\\"\\n            checked={sort === \\\"all\\\"}\\n            onChange={() => setSort(\\\"all\\\")}\\n          />\\n          Sort by ID\\n        </label>\\n        <label>\\n          <input\\n            type=\\\"checkbox\\\"\\n            checked={sort === \\\"checked\\\"}\\n            onChange={() => setSort(\\\"checked\\\")}\\n          />\\n          Sort by Checked\\n        </label>\\n        <label>\\n          <input\\n            type=\\\"checkbox\\\"\\n            checked={sort === \\\"unchecked\\\"}\\n            onChange={() => setSort(\\\"unchecked\\\")}\\n          />\\n          Sort by Unchecked\\n        </label>\\n      </div>\\n      <ul>\\n        {sortedItems.map((item) => (\\n          <li key={item.id}>\\n            <label>\\n              <input\\n                type=\\\"checkbox\\\"\\n                checked={item.checked}\\n                onChange={() => handleCheckboxChange(item)}\\n              />\\n              {item.name}\\n            </label>\\n          </li>\\n        ))}\\n      </ul>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\".trim();var TicGame=/*#__PURE__*/function(_Component){_inherits(TicGame,_Component);function TicGame(){_classCallCheck(this,TicGame);return _possibleConstructorReturn(this,_getPrototypeOf(TicGame).apply(this,arguments));}_createClass(TicGame,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Filter/Dropdawn\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:fitersdata,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Slideshow\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:slideshow,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"slideshow.css\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:slideshowCss,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. Slider on click\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:sliderBox,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"h3\",null,\"5. Progress incrase upto 100%\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:progressbar,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. Mouse Hover on Card\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:mouseHovers,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6.onClick move button\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:MoveButton,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. Sort items on check box\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:sortItems,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. Sort items on check box conditions\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:checkConditions,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return TicGame;}(Component);export default withStyles(styles)(TicGame);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/ticGame.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","slideshow","trim","slideshowCss","fitersdata","progressbar","mouseHovers","MoveButton","sortItems","sliderBox","checkConditions","TicGame","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst slideshow = `\nimport \"./slideshow.css\";\n\nconst colors = [\"green\", \"blue\", \"yellow\"];\nconst delay = 2500;\n\nexport default function Slideshow() {\n  const [index, setIndex] = useState(0);\n  const timeoutRef = useRef(null);\n\n  function resetTimeout() {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n  }\n\n  useEffect(() => {\n    resetTimeout();\n    timeoutRef.current = setTimeout(() => setIndex((prevIndex) =>\n          prevIndex === colors.length - 1 ? 0 : prevIndex + 1\n        ), delay);\n\n    return () => {\n      resetTimeout();\n    };\n  }, [index]);\n\n  return (\n    <div className=\"slideshow\">\n      <div\n        className=\"slideshowSlider\"\n        style={{ transform: 'translate3d('$'{-index * 100}%, 0, 0)' }}\n      >\n        {colors.map((backgroundColor, index) => (\n          <div className=\"slide\" key={index} style={{ backgroundColor }}></div>\n        ))}\n      </div>\n\n      <div>\n        {colors.map((_, idx) => (\n          <div\n            className={'slideshowDot'$'{index === idx ? \" active\" : \"\"}'}\n            onClick={() => { setIndex(idx) }} />\n        ))}\n      </div>\n    </div>\n  );\n}`.trim();\n\nconst slideshowCss = `\n.slideshow {\n  margin: 0 auto;\n  overflow: hidden;\n  max-width: 500px;\n}\n\n.slideshowSlider {\n  white-space: nowrap;\n  transition: ease 1000ms;\n}\n\n.slide {\n  display: inline-block;\n\n  height: 400px;\n  width: 100%;\n  border-radius: 40px;\n}\n\n.slideshowDots {\n  text-align: center;\n}\n\n.slideshowDot {\n  display: inline-block;\n  height: 20px;\n  width: 20px;\n  border-radius: 50%;\n  background-color: #c4c4c4;\n}\n\n.slideshowDot.active {\n  background-color: #6a0dad;\n}`.trim();\n\nconst fitersdata = `\nconst data = [\n  { category: \"vehicle\", name: \"car\" },\n  { category: \"vehicle\", name: \"jeep\" },\n  { category: \"fruit\", name: \"apple\" },\n  { category: \"fruit\", name: \"orange\" },\n  { category: \"electronics\", name: \"mobile\" },\n  { category: \"electronics\", name: \"laptop\" },\n];\n\nconst App = () => {\n  const [category, setCategory] = useState(\"vehicle\");\n  const filteredNames = data\n    .filter((item) => item.category === category)\n    .map((item) => item.name);\n\n  return (\n    <div>\n      <label>\n        Select a category:\n        <select value={category} onChange={(e) => setCategory(e.target.value)}>\n          <option value=\"vehicle\">Vehicle</option>\n          <option value=\"fruit\">Fruit</option>\n          <option value=\"electronics\">Electronics</option>\n        </select>\n      </label> \n      <input\n        type=\"text\"\n        value={category}\n        onChange={(e) => setCategory(e.target.value)}\n      />\n      <ul>\n        {filteredNames.map((name) => (\n          <li key={name}>{name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n`.trim();\n\nconst progressbar = `\nconst App = () => {\n  const [progress, setProgress] = useState(0);\n\n  const handleClick = () => {\n    if (progress < 100) {\n      setProgress(progress + 10);\n    }\n  };\n\n  const progressStyle = {\n    width: '$'{progress}%,\n    height: \"20px\",\n    backgroundColor: \"green\",\n  };\n\n  return (\n    <div>\n      <div style={progressStyle}>{progress}%</div>\n      <button onClick={handleClick}>Progress</button>\n    </div>\n  );\n};\n`.trim();\n\nconst mouseHovers = `\nconst App = () => {\n  const [isHovering, setHovering] = useState(false);\n\n  const handleMouseHover = () => {\n    setHovering(isHovering => !isHovering);\n  }\n\n  return (\n    <div>\n      <div\n        onMouseEnter={handleMouseHover}\n        onMouseLeave={handleMouseHover}\n      >\n        Hover Me\n      </div>\n      {isHovering && <div>Hovering right me</div>}\n    </div>\n  );\n}`.trim();\n\nconst MoveButton = `\nconst MoveButton = (props) => {\n  return (\n      <button onClick={props.onClick}>\n          Click To Move\n      </button>\n  );\n}\n\nconst BoxOne = () => <p>Box1</p>;\n\nconst BoxTwo = () => <p>Box2</p>;\n\n\nclass App extends Component {\nstate = { positions: 0 }\n\nhandleClick = () => {\n  this.setState({ positions: (this.state.positions + 1) % 3 })\n}\n\nrender () { \nconst positions = this.state.positions;\n  return (\n      <div>\n          { positions === 0 ? <MoveButton onClick={this.handleClick}/> : ''}\n          <BoxOne />\n          { positions === 1 ? <MoveButton onClick={this.handleClick}/> : ''}\n          <BoxTwo />\n          { positions === 2 ? <MoveButton onClick={this.handleClick}/> : ''}\n      </div>\n  );\n}\n}\n\nexport default App;`.trim();\n\nconst sortItems = `\nconst items = [1, 2, 3, 4, 5];\nfunction App() {\n  const [sortOrder, setSortOrder] = useState(\"ascending\");\n\n  const handleCheckboxChange = (e) => {\n    if (e.target.checked) {\n      setSortOrder(\"descending\");\n    } else {\n      setSortOrder(\"ascending\");\n    }\n  };\n\n  const sortItems = (a, b) => {\n    if (sortOrder === \"ascending\") {\n      return a - b;\n    } else {\n      return b - a;\n    }\n  };\n\n  const sortedItems = [...items].sort(sortItems);\n\n  return (\n    <div>\n      <label>\n        <input type=\"checkbox\" onChange={handleCheckboxChange} />\n      </label>\n      <ul>\n        {sortedItems.map((item, index) => (\n          <li key={index}>{item}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n`.trim();\n\nconst sliderBox = `\nimport Image1 from \"./1.jpg\";\nimport Image2 from \"./2.jpg\";\nimport Image3 from \"./logo.svg\";\n\nconst images = [Image1, Image2, Image3];\n\nconst App = () => {\n  const [index, setIndex] = useState(0);\n\n  const handleClick = (direction) => {\n    if (direction === \"prev\") {\n      setIndex(index === 0 ? images.length - 1 : index - 1);\n    } else {\n      setIndex(index === images.length - 1 ? 0 : index + 1);\n    }\n  };\n\n  return (\n    <div>\n      <img src={images[index]} alt=\"\" style={{ width: 400, height: 400 }} />\n      <button onClick={() => handleClick(\"prev\")}>Previous</button>\n      <button onClick={() => handleClick(\"next\")}>Next</button>\n    </div>\n  );\n};\n\nexport default App;\n`.trim();\n\nconst checkConditions = `\nconst App = () => {\n  const [items, setItems] = useState([\n    { id: 1, name: \"Item 1\", checked: false },\n    { id: 2, name: \"Item 2\", checked: true },\n    { id: 3, name: \"Item 3\", checked: false },\n    { id: 4, name: \"Item 4\", checked: true },\n    { id: 5, name: \"Item 5\", checked: false },\n  ]);\n  const [sort, setSort] = useState(\"all\");\n\n  const handleCheckboxChange = (item) => {\n    const newItems = items.map((i) => {\n      if (i.id === item.id) {\n        return { ...i, checked: !i.checked };\n      }\n      return i;\n    });\n    setItems(newItems);\n  };\n\n  const sortedItems = items.sort((a, b) => {\n    if (sort === \"all\") {\n      return a.id - b.id;\n    }\n    if (sort === \"checked\") {\n      return a.checked - b.checked;\n    }\n    if (sort === \"unchecked\") {\n      return b.checked - a.checked;\n    }\n  });\n\n  return (\n    <div>\n      <div>\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={sort === \"all\"}\n            onChange={() => setSort(\"all\")}\n          />\n          Sort by ID\n        </label>\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={sort === \"checked\"}\n            onChange={() => setSort(\"checked\")}\n          />\n          Sort by Checked\n        </label>\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={sort === \"unchecked\"}\n            onChange={() => setSort(\"unchecked\")}\n          />\n          Sort by Unchecked\n        </label>\n      </div>\n      <ul>\n        {sortedItems.map((item) => (\n          <li key={item.id}>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={item.checked}\n                onChange={() => handleCheckboxChange(item)}\n              />\n              {item.name}\n            </label>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n`.trim();\n\nclass TicGame extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Filter/Dropdawn</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={fitersdata}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Slideshow</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={slideshow}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>slideshow.css</b>\n              <div style={titles}>\n                <PrismCode\n                  code={slideshowCss}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Slider on click</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={sliderBox}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <h3>5. Progress incrase upto 100%</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={progressbar}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. Mouse Hover on Card</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={mouseHovers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6.onClick move button</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={MoveButton}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Sort items on check box</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={sortItems}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Sort items on check box conditions</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={checkConditions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(TicGame);\n"]},"metadata":{},"sourceType":"module"}