{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var matplotlib=\"\\nimport matplotlib\\n\\nprint(matplotlib.__version__)\".trim();var Pyplot=\"\\nimport matplotlib.pyplot as plt\\nimport numpy as np\\n\\nx = np.array([1, 2, 6, 8])                            #Multiple Points\\ny = np.array([3, 8, 1, 10])\\n\\nplt.plot(x, y)\\nplt.plot(x, y, 'o')                                   #Draw two points, one at position (0, 0) and (6, 250).\\nplt.plot(y, marker = 'o')                             #Mark each point with a circle.\\nplt.plot(y, marker = 'o', ms = 20)                    #ms to set the size of the markers.\\nplt.plot(y, marker = 'o', mec = 'r')                  #mec to set the color of the edge of the.\\nplt.plot(y,  ms = 20, mfc = 'r')                      #mfc to set the color inside the edge of the markers.\\n\\nplt.show()\\n\".trim();var Plotting=\"\\nplt.plot(y, linestyle = 'dotted')                     #'dashed', \\nplt.plot(y, ls = ':')\\nplt.plot(y, linewidth = '20.5')\\n\\nplt.show()\\n\".trim();var labels=\"\\nplt.xlabel(\\\"Average Pulse\\\")\\nplt.ylabel(\\\"Calorie Burnage\\\")\\nplt.title(\\\"Sports Watch Data\\\")                                      #to set a title for the plot.\\n\\nplt.show()\\n\\n\\n#Set Font Properties for\\nfont1 = {'family':'serif','color':'blue','size':20}\\nplt.xlabel(\\\"Average Pulse\\\", fontdict = font1)\\n\\nplt.show()\\n\".trim();var grids=\"\\nplt.grid()\\nplt.grid(axis = 'x')\\nplt.grid(color = 'green', linestyle = '--', linewidth = 0.5)\\n\\nplt.show()\\n\".trim();var subplots=\"\\nplt.subplot(1, 2, 1)\\nplt.suptitle(\\\"MY SHOP\\\")\\nplt.plot(x,y)\\n\\nplt.show()\\n\".trim();var scatter=\"\\nplt.scatter(x, y)\\nplt.scatter(x, y, color = '#88c999')                         #set color for each scatter plot with the color or c argument.\\nplt.colorbar()                                               #include the colormap.\\nplt.scatter(x, y, s=10)                                      #set size.\\nplt.scatter(x, y, alpha=0.5)                                 #adjust the transparency of the dots.\\n\\nplt.show()\\n\".trim();var bars=\"\\nplt.bar(x,y)\\nplt.barh(x, y)                                                    #bars to be displayed horizontally.\\nplt.bar(x, y, color = \\\"red\\\")\\nplt.bar(x, y, width = 0.1)\\nplt.barh(x, y, height = 0.1)\\n\\nplt.show()\\n\\n\\n#\\nx = [\\\"APPLES\\\", \\\"BANANAS\\\"]\\ny = [400, 350]\\nplt.bar(x, y)\\n\".trim();var histogram=\"\\nx = np.random.normal(170, 10, 250)\\nplt.hist(x)\\n\\nplt.show()\".trim();var pie=\"\\nmylabels = [\\\"Apples\\\", \\\"Bananas\\\", \\\"Cherries\\\", \\\"Dates\\\"]                                 #labels to the pie chart.\\n\\nplt.pie(y, labels = mylabels)\\nplt.pie(y, labels = mylabels, startangle = 90)\\nplt.pie(y, labels = mylabels, explode = myexplode)                                    #explode\\nplt.pie(y, labels = mylabels, shadow = True)                                          #shadow\\nplt.legend()\\n\\nplt.show()\\n\".trim();var Bagging=/*#__PURE__*/function(_Component){_inherits(Bagging,_Component);function Bagging(){_classCallCheck(this,Bagging);return _possibleConstructorReturn(this,_getPrototypeOf(Bagging).apply(this,arguments));}_createClass(Bagging,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Matplotlib (for creating graph)\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Matplotlib for producing plots and other 2D data visualizations.\"),React.createElement(\"li\",null,\"Matplotlib is a low level graph plotting library in python that serves as a data visualization utility. It is a cross-platform library for making 2D plots from data in arrays.\"),React.createElement(\"li\",null,\"Matplotlib is mostly written in python, a few segments are written in C, Objective-C and Javascript for Platform compatibility.\"),React.createElement(\"li\",null,\"Matplotlib is written in Python and makes use of NumPy.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:matplotlib,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Matplotlib Pyplot\"),\"Most of the Matplotlib utilities lies under the pyplot submodule, and are under the plt alias.\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Types of Plots:\"),React.createElement(\"ul\",null,React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"pyplot():\")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"draw():\")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"show() :\")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"title():\")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"xscale():\")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"xticks():\")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"ylabel():\")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"ylim():\")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"acorr():\"),\"Plot the autocorrelation of x.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"angle_spectrum():\"),\"Plot the angle spectrum.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"annotate():\"),\"Annotate the point xy with text text.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"arrow():\"),\"Add an arrow to the Axes.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"autoscale():\"),\"Autoscale the axis view to the data (toggle).\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"axes():\"),\"Add an axes to the current figure and make it the current axes.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"axis():\"),\"Convenience method to get or set some axis properties.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"bar Make():\"),\"a bar plot.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"bar_label():\"),\"Label a bar plot.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"barbs Plot():\"),\"a 2D field of barbs.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"barh():\"),\"Make a horizontal bar plot.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"box():\"),\"Turn the axes box on or off on the current axes.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"boxplot():\"),\"Make a box and whisker plot.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"broken_barh():\"),\"Plot a horizontal sequence of rectangles.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"cla():\"),\"Clear the current axes.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"delaxes():\"),\"Remove an Axes (defaulting to the current axes) from its figure.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"draw():\"),\"Redraw the current figure.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"draw_if_interactive() :\"),\"Redraw the current figure if in interactive mode.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"errorbar():\"),\"Plot y versus x as lines and/or markers with attached errorbars.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"cohere():\"),\"Plot the coherence between x and y.\")),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"bar: \"),\"Make a bar plot.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"barh: \"),\"Make a horizontal bar plot.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"boxplot: \"),\"Make a box and whisker plot.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"hist: \"),\"Plot a histogram.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"hist2d: \"),\"Make a 2D histogram plot.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"pie: \"),\"Plot a pie chart.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"plot: \"),\"Plot lines and/or markers to the Axes.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"plot() function is used to draw points (markers) in a diagram. By default, it draws a line from point to point.\"),React.createElement(\"li\",null,\"Parameter 1 is an array containing the points on the x-axis.\"),React.createElement(\"li\",null,\"Parameter 2 is an array containing the points on the y-axis.\"),React.createElement(\"li\",null,\"If we do not specify the points in the x-axis, they will get the default values 0, 1, 2, 3,... (depending on the length of the y-points.\")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"polar: \"),\"Make a polar plot..\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"scatter: \"),\"Make a scatter plot of x vs y.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"stackplot: \"),\"Draws a stacked area plot.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"stem: \"),\"Create a stem plot.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"step: \"),\"Make a step plot.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"quiver: \"),\"Plot a 2-D field of arrows.\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Image Functions:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"imread: \"),\"Read an image from a file into an array.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"imsave: \"),\"Save an array as in image file.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"imshow: \"),\"Display an image on the axes.\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Axis Functions:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"axes: \"),\"Add axes to the figure.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"text: \"),\"Add text to the axes.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"title: \"),\"Set a title of the current axes.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"xlabel: \"),\"Set the x axis label of the current axis.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"xlim: \"),\"Get or set the x limits of the current axes.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"xscale: \")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"xticks: \"),\"Get or set the x-limits of the current tick locations and labels.\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Figure Functions:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"figtext: \"),\"Add text to figure.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"figure: \"),\"Creates a new figure.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"show: \"),\"Display a figure.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"savefig: \"),\"Save the current figure.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"close: \"),\"Close a figure window.\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Pyplot,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Matplotlib Line\"),\"We use the keyword argument linestyle, or ls, to change the style of the plotted line.\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"linestyle can be written as ls.\"),React.createElement(\"li\",null,\"dotted can be written as :.\"),React.createElement(\"li\",null,\"dashed can be written as --.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Plotting,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Matplotlib Labels and Title\"),\"Use the xlabel() and ylabel() functions to set a label for the x- and y-axis.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"use the loc parameter in title() to position the title.\",React.createElement(\"br\",null),\"Legal values are: 'left', 'right', and 'center'. Default value is 'center'.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:labels,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Matplotlib Adding Grid Lines\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Use the grid() function to add grid lines to the plot.\"),React.createElement(\"li\",null,\"Use the axis parameter in the grid() to specify which grid lines to display.\"),React.createElement(\"li\",null,\"Also set the line properties of the grid, like: grid(color = 'color', linestyle = 'linestyle', linewidth = number).\"),React.createElement(\"li\",null)),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:grids,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Matplotlib Subplots\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"subplots() can draw multiple plots in one figure.\"),React.createElement(\"li\",null,\"It takes three arguments that describes the layout of the figure.\"),React.createElement(\"li\",null,\"The layout is organized in rows and columns, which are represented by the first and second argument, third argument represents the index of the current plot.\"),React.createElement(\"li\",null,\"Add a title to the entire figure with the suptitle() function.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:subplots,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Matplotlib Scatter\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Use the scatter() to draw a scatter plot.\"),React.createElement(\"li\",null,\"The scatter() function plots one dot for each observation. It needs two arrays of the same length, one for the values of the x-axis, and other for y-axis.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:scatter,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Matplotlib Bars\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Use the bar() function to draw bar graphs.\"),React.createElement(\"li\",null,\"The bar() function takes arguments that describes the layout of the bars.\"),React.createElement(\"li\",null,\"The categories and their values represented by the first and second argument as arrays.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:bars,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Matplotlib Histograms\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"A histogram is a graph showing frequency distributions. It is a graph showing the number of observations within each given interval.\"),React.createElement(\"li\",null,\"Use the hist() function to create histograms.\"),React.createElement(\"li\",null,\"The hist() function will use an array of numbers to create a histogram, the array is sent into the function as an argument.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:histogram,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Matplotlib Pie Charts\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Use the pie() function to draw pie charts.\"),React.createElement(\"li\",null,\"The default start angle is at the x-axis, but you can change the start angle by specifying a startangle parameter.\"),React.createElement(\"li\",null,\"With explode allow one of the wedges to stand out\"),React.createElement(\"li\",null,\"To add a list of explanation for each wedge, use the legend() function.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:pie,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null)))));}}]);return Bagging;}(Component);export default withStyles(styles)(Bagging);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ml/deepMl/bagging.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","matplotlib","trim","Pyplot","Plotting","labels","grids","subplots","scatter","bars","histogram","pie","Bagging","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst matplotlib = `\nimport matplotlib\n\nprint(matplotlib.__version__)`.trim();\n\nconst Pyplot = `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([1, 2, 6, 8])                            #Multiple Points\ny = np.array([3, 8, 1, 10])\n\nplt.plot(x, y)\nplt.plot(x, y, 'o')                                   #Draw two points, one at position (0, 0) and (6, 250).\nplt.plot(y, marker = 'o')                             #Mark each point with a circle.\nplt.plot(y, marker = 'o', ms = 20)                    #ms to set the size of the markers.\nplt.plot(y, marker = 'o', mec = 'r')                  #mec to set the color of the edge of the.\nplt.plot(y,  ms = 20, mfc = 'r')                      #mfc to set the color inside the edge of the markers.\n\nplt.show()\n`.trim();\n\nconst Plotting = `\nplt.plot(y, linestyle = 'dotted')                     #'dashed', \nplt.plot(y, ls = ':')\nplt.plot(y, linewidth = '20.5')\n\nplt.show()\n`.trim();\n\nconst labels = `\nplt.xlabel(\"Average Pulse\")\nplt.ylabel(\"Calorie Burnage\")\nplt.title(\"Sports Watch Data\")                                      #to set a title for the plot.\n\nplt.show()\n\n\n#Set Font Properties for\nfont1 = {'family':'serif','color':'blue','size':20}\nplt.xlabel(\"Average Pulse\", fontdict = font1)\n\nplt.show()\n`.trim();\n\nconst grids = `\nplt.grid()\nplt.grid(axis = 'x')\nplt.grid(color = 'green', linestyle = '--', linewidth = 0.5)\n\nplt.show()\n`.trim();\n\nconst subplots = `\nplt.subplot(1, 2, 1)\nplt.suptitle(\"MY SHOP\")\nplt.plot(x,y)\n\nplt.show()\n`.trim();\n\nconst scatter = `\nplt.scatter(x, y)\nplt.scatter(x, y, color = '#88c999')                         #set color for each scatter plot with the color or c argument.\nplt.colorbar()                                               #include the colormap.\nplt.scatter(x, y, s=10)                                      #set size.\nplt.scatter(x, y, alpha=0.5)                                 #adjust the transparency of the dots.\n\nplt.show()\n`.trim();\n\nconst bars = `\nplt.bar(x,y)\nplt.barh(x, y)                                                    #bars to be displayed horizontally.\nplt.bar(x, y, color = \"red\")\nplt.bar(x, y, width = 0.1)\nplt.barh(x, y, height = 0.1)\n\nplt.show()\n\n\n#\nx = [\"APPLES\", \"BANANAS\"]\ny = [400, 350]\nplt.bar(x, y)\n`.trim();\n\nconst histogram = `\nx = np.random.normal(170, 10, 250)\nplt.hist(x)\n\nplt.show()`.trim();\n\nconst pie = `\nmylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]                                 #labels to the pie chart.\n\nplt.pie(y, labels = mylabels)\nplt.pie(y, labels = mylabels, startangle = 90)\nplt.pie(y, labels = mylabels, explode = myexplode)                                    #explode\nplt.pie(y, labels = mylabels, shadow = True)                                          #shadow\nplt.legend()\n\nplt.show()\n`.trim();\n\nclass Bagging extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Matplotlib (for creating graph)</h3>\n              <ul>\n                <li>Matplotlib for producing plots and other 2D data visualizations.</li>\n                <li>Matplotlib is a low level graph plotting library in python that serves as a data visualization\n                  utility. It is a cross-platform library for making 2D plots from data in arrays.</li>\n                <li>Matplotlib is mostly written in python, a few segments are written in C, Objective-C and\n                  Javascript for Platform compatibility.</li>\n                <li>Matplotlib is written in Python and makes use of NumPy.</li>\n              </ul>\n\n              <div style={titles}>\n                <PrismCode\n                  code={matplotlib}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Matplotlib Pyplot</h3>\n              Most of the Matplotlib utilities lies under the pyplot submodule, and are under the plt alias.\n              <br />\n\n              <b>Types of Plots:</b>\n              <ul>\n                <ul>\n                  <li><b>pyplot():</b></li>\n                  <li><b>draw():</b></li>\n                  <li><b>show() :</b></li>\n                  <li><b>title():</b></li>\n                  <li><b>xscale():</b></li>\n                  <li><b>xticks():</b></li>\n                  <li><b>ylabel():</b></li>\n                  <li><b>ylim():</b></li>\n                  <li><b>acorr():</b>Plot the autocorrelation of x.</li>\n                  <li><b>angle_spectrum():</b>Plot the angle spectrum.</li>\n                  <li><b>annotate():</b>Annotate the point xy with text text.</li>\n                  <li><b>arrow():</b>Add an arrow to the Axes.</li>\n                  <li><b>autoscale():</b>Autoscale the axis view to the data (toggle).</li>\n                  <li><b>axes():</b>Add an axes to the current figure and make it the current axes.</li>\n                  <li><b>axis():</b>Convenience method to get or set some axis properties.</li>\n                  <li><b>bar\tMake():</b>a bar plot.</li>\n                  <li><b>bar_label():</b>Label a bar plot.</li>\n                  <li><b>barbs\tPlot():</b>a 2D field of barbs.</li>\n                  <li><b>barh():</b>Make a horizontal bar plot.</li>\n                  <li><b>box():</b>Turn the axes box on or off on the current axes.</li>\n                  <li><b>boxplot():</b>Make a box and whisker plot.</li>\n                  <li><b>broken_barh():</b>Plot a horizontal sequence of rectangles.</li>\n                  <li><b>cla():</b>Clear the current axes.</li>\n                  <li><b>delaxes():</b>Remove an Axes (defaulting to the current axes) from its figure.</li>\n                  <li><b>draw():</b>Redraw the current figure.</li>\n                  <li><b>draw_if_interactive() :</b>Redraw the current figure if in interactive mode.</li>\n                  <li><b>errorbar():</b>Plot y versus x as lines and/or markers with attached errorbars.</li>\n                  <li><b>cohere():</b>Plot the coherence between x and y.</li>\n                </ul>\n                <br />\n\n                <li><b>bar: </b>Make a bar plot.</li>\n                <li><b>barh: </b>Make a horizontal bar plot.</li>\n                <li><b>boxplot: </b>Make a box and whisker plot.</li>\n                <li><b>hist: </b>Plot a histogram.</li>\n                <li><b>hist2d: </b>Make a 2D histogram plot.</li>\n                <li><b>pie: </b>Plot a pie chart.</li>\n                <li><b>plot: </b>Plot lines and/or markers to the Axes.</li>\n                <ul>\n                  <li>plot() function is used to draw points (markers) in a diagram. By default, it draws a line from\n                    point to point.</li>\n                  <li>Parameter 1 is an array containing the points on the x-axis.</li>\n                  <li>Parameter 2 is an array containing the points on the y-axis.</li>\n                  <li>If we do not specify the points in the x-axis, they will get the default values 0, 1, 2, 3,...\n                    (depending on the length of the y-points.</li>\n                </ul>\n                <li><b>polar: </b>Make a polar plot..</li>\n                <li><b>scatter: </b>Make a scatter plot of x vs y.</li>\n                <li><b>stackplot: </b>Draws a stacked area plot.</li>\n                <li><b>stem: </b>Create a stem plot.</li>\n                <li><b>step: </b>Make a step plot.</li>\n                <li><b>quiver: </b>Plot a 2-D field of arrows.</li>\n              </ul>\n              <br />\n\n              <b>Image Functions:</b>\n              <ul>\n                <li><b>imread: </b>Read an image from a file into an array.</li>\n                <li><b>imsave: </b>Save an array as in image file.</li>\n                <li><b>imshow: </b>Display an image on the axes.</li>\n              </ul>\n              <br />\n\n              <b>Axis Functions:</b>\n              <ul>\n                <li><b>axes: </b>Add axes to the figure.</li>\n                <li><b>text: </b>Add text to the axes.</li>\n                <li><b>title: </b>Set a title of the current axes.</li>\n                <li><b>xlabel: </b>Set the x axis label of the current axis.</li>\n                <li><b>xlim: </b>Get or set the x limits of the current axes.</li>\n                <li><b>xscale: </b></li>\n                <li><b>xticks: </b>Get or set the x-limits of the current tick locations and labels.</li>\n              </ul>\n              <br />\n\n              <b>Figure Functions:</b>\n              <ul>\n                <li><b>figtext: </b>Add text to figure.</li>\n                <li><b>figure: </b>Creates a new figure.</li>\n                <li><b>show: </b>Display a figure.</li>\n                <li><b>savefig: </b>Save the current figure.</li>\n                <li><b>close: </b>Close a figure window.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={Pyplot}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Matplotlib Line</h3>\n              We use the keyword argument linestyle, or ls, to change the style of the plotted line.\n              <br />\n\n              <ul>\n                <li>linestyle can be written as ls.</li>\n                <li>dotted can be written as :.</li>\n                <li>dashed can be written as --.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={Plotting}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Matplotlib Labels and Title</h3>\n              Use the xlabel() and ylabel() functions to set a label for the x- and y-axis.\n              <br />\n              <br />\n              use the loc parameter in title() to position the title.\n              <br />\n              Legal values are: 'left', 'right', and 'center'. Default value is 'center'.\n              <br />\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={labels}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Matplotlib Adding Grid Lines</h3>\n              <ul>\n                <li>Use the grid() function to add grid lines to the plot.</li>\n                <li>Use the axis parameter in the grid() to specify which grid lines to display.</li>\n                <li>Also set the line properties of the grid, like: grid(color = 'color', linestyle = 'linestyle',\n                  linewidth = number).</li>\n                <li></li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={grids}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Matplotlib Subplots</h3>\n              <ul>\n                <li>subplots() can draw multiple plots in one figure.</li>\n                <li>It takes three arguments that describes the layout of the figure.</li>\n                <li>The layout is organized in rows and columns, which are represented by the first and second argument,\n                  third argument represents the index of the current plot.\n                </li>\n                <li>Add a title to the entire figure with the suptitle() function.</li>\n              </ul>\n\n              <div style={titles}>\n                <PrismCode\n                  code={subplots}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Matplotlib Scatter</h3>\n              <ul>\n                <li>Use the scatter() to draw a scatter plot.</li>\n                <li>The scatter() function plots one dot for each observation. It needs two arrays of the same length,\n                  one for the values of the x-axis, and other for y-axis.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={scatter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Matplotlib Bars</h3>\n              <ul>\n                <li>Use the bar() function to draw bar graphs.</li>\n                <li>The bar() function takes arguments that describes the layout of the bars.</li>\n                <li>The categories and their values represented by the first and second argument as arrays.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={bars}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Matplotlib Histograms</h3>\n              <ul>\n                <li>A histogram is a graph showing frequency distributions. It is a graph showing the number of\n                  observations within each given interval.</li>\n                <li>Use the hist() function to create histograms.</li>\n                <li>The hist() function will use an array of numbers to create a histogram, the array is sent into\n                  the function as an argument.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={histogram}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Matplotlib Pie Charts</h3>\n              <ul>\n                <li>Use the pie() function to draw pie charts.</li>\n                <li>The default start angle is at the x-axis, but you can change the start angle by specifying a startangle parameter.</li>\n                <li>With explode allow one of the wedges to stand out</li>\n                <li>To add a list of explanation for each wedge, use the legend() function.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={pie}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Bagging));\n"]},"metadata":{},"sourceType":"module"}