{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';import Stcksval from'../../../assets/stcks.png';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var redesign={height:200,width:500};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var combine=\"\\nfunction combine(n, k) {\\n  const result = [];\\n  \\n  function aux(index = 1, current = []){\\n    if (current.length === k) {\\n      result.push(current);\\n      return;\\n    }\\n    if (index > n) return;\\n\\n    aux(index + 1, [...current, index]);\\n    aux(index + 1, current);\\n  }\\n  aux();\\n  return result;\\n}\\n\\nconsole.log(combine(4,2))\\n\".trim();var maxProfit=\"\\nfunction maxProfit(prices) {\\n  let max = 0;\\n  let minPrice = Infinity;\\n\\n  for (const price of prices) {\\n    minPrice = Math.min(price, minPrice);\\n    max = Math.max(max, price - minPrice);\\n  }\\n  return max;\\n}\\n\\nconsole.log(maxProfit([7,1,5,3,6,4]))\\n\".trim();var maxProduct=\"\\nfunction maxProduct(nums = []){\\n  if (nums.length === 0) return 0;\\n\\n  let prevMax = nums[0];\\n  let prevMin = nums[0];\\n  let max = nums[0];\\n\\n  for (let i = 1; i < nums.length; i++) {\\n    const currentMax = Math.max(nums[i], prevMax * nums[i], prevMin * nums[i]);\\n    const currentMin = Math.min(nums[i], prevMax * nums[i], prevMin * nums[i]);\\n    prevMax = currentMax;\\n    prevMin = currentMin;\\n\\n    if (prevMax > max) {\\n      max = prevMax;\\n    }\\n  }\\n  return max;\\n}\\n\\nconsole.log(maxProduct([2,3,-2,4]))\\n\".trim();var longestCommonPrefix=\"\\nfunction longestCommonPrefix(strs = []){\\n  let prefix = '';\\n\\n  let minLength = strs.reduce((acc, str) => (acc < str.length ? acc : str.length), Infinity);\\n  minLength = minLength === Infinity ? 0 : minLength;\\n\\n  for (let i = 0; i < minLength; i++) {\\n    const current = strs[0][i];\\n    const isSame = strs.every(str => str[i] === current);\\n\\n    if (isSame) {\\n      prefix += current;\\n    } else {\\n      return prefix;\\n    }\\n  }\\n  return prefix;\\n}\\n\\nconsole.log(longestCommonPrefix([\\\"flower\\\",\\\"flow\\\",\\\"flight\\\"]))\\n\".trim();var DSLogic6=/*#__PURE__*/function(_Component){_inherits(DSLogic6,_Component);function DSLogic6(){_classCallCheck(this,DSLogic6);return _possibleConstructorReturn(this,_getPrototypeOf(DSLogic6).apply(this,arguments));}_createClass(DSLogic6,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Combinations\"),\"Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.\",React.createElement(\"br\",null),\"You may return the answer in any order.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Example 1: \"),React.createElement(\"b\",null,\"Input: \"),\"n = 4, k = 2\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"[\",React.createElement(\"br\",null),\"[2,4],\",React.createElement(\"br\",null),\"[3,4],\",React.createElement(\"br\",null),\"[2,3],\",React.createElement(\"br\",null),\"[1,2],\",React.createElement(\"br\",null),\"[1,3],\",React.createElement(\"br\",null),\"[1,4],\",React.createElement(\"br\",null),\"]\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Example 2: \"),React.createElement(\"b\",null,\"Input: \"),\"n = 1, k = 1\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"[[1]]\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:combine,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Best Time to Buy and Sell Stock.\"),\"Say you have an array for which the ith element is the price of a given stock on day i.\",React.createElement(\"br\",null),\"If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.\",React.createElement(\"br\",null),\"Note that you cannot sell a stock before you buy one.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"nput: \"),\"I[7,1,5,3,6,4]\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"I5\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Explanation: \"),\"IBuy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\",React.createElement(\"br\",null),\"Not 7-1 = 6, as selling price needs to be larger than buying price.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:maxProfit,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Maximum Product Subarray.\"),\"Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Input: \"),\"[2,3,-2,4]\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"6\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:maxProduct,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. Longest Common Prefix\"),\"Write a function to find the longest common prefix string amongst an array of strings.\",React.createElement(\"br\",null),\"If there is no common prefix, return an empty string \\\"\\\".\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Example 1: \"),React.createElement(\"b\",null,\"Input: \"),\"[\\\"flower\\\",\\\"flow\\\",\\\"flight\\\"]\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"\\\"fl\\\"\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Example 2: \"),React.createElement(\"b\",null,\"Input: \"),\"[\\\"dog\\\",\\\"racecar\\\",\\\"car\\\"]\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"\\\"\\\"\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Explanation: \"),\"There is no common prefix among the input strings.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"N: \"),\"All given inputs are in lowercase letters a-z.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:longestCommonPrefix,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null)))));}}]);return DSLogic6;}(Component);export default withStyles(styles)(DSLogic6);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/arrayStrAlgo.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","combine","trim","maxProfit","maxProduct","longestCommonPrefix","DSLogic6","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst combine = `\nfunction combine(n, k) {\n  const result = [];\n  \n  function aux(index = 1, current = []){\n    if (current.length === k) {\n      result.push(current);\n      return;\n    }\n    if (index > n) return;\n\n    aux(index + 1, [...current, index]);\n    aux(index + 1, current);\n  }\n  aux();\n  return result;\n}\n\nconsole.log(combine(4,2))\n`.trim();\n\nconst maxProfit = `\nfunction maxProfit(prices) {\n  let max = 0;\n  let minPrice = Infinity;\n\n  for (const price of prices) {\n    minPrice = Math.min(price, minPrice);\n    max = Math.max(max, price - minPrice);\n  }\n  return max;\n}\n\nconsole.log(maxProfit([7,1,5,3,6,4]))\n`.trim();\n\nconst maxProduct = `\nfunction maxProduct(nums = []){\n  if (nums.length === 0) return 0;\n\n  let prevMax = nums[0];\n  let prevMin = nums[0];\n  let max = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    const currentMax = Math.max(nums[i], prevMax * nums[i], prevMin * nums[i]);\n    const currentMin = Math.min(nums[i], prevMax * nums[i], prevMin * nums[i]);\n    prevMax = currentMax;\n    prevMin = currentMin;\n\n    if (prevMax > max) {\n      max = prevMax;\n    }\n  }\n  return max;\n}\n\nconsole.log(maxProduct([2,3,-2,4]))\n`.trim();\n\nconst longestCommonPrefix = `\nfunction longestCommonPrefix(strs = []){\n  let prefix = '';\n\n  let minLength = strs.reduce((acc, str) => (acc < str.length ? acc : str.length), Infinity);\n  minLength = minLength === Infinity ? 0 : minLength;\n\n  for (let i = 0; i < minLength; i++) {\n    const current = strs[0][i];\n    const isSame = strs.every(str => str[i] === current);\n\n    if (isSame) {\n      prefix += current;\n    } else {\n      return prefix;\n    }\n  }\n  return prefix;\n}\n\nconsole.log(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\n`.trim();\n\nclass DSLogic6 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Combinations</h3>\n              Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.\n              <br/>\n              You may return the answer in any order.<br/><br/>\n              <b>Example 1: </b>\n\n              <b>Input: </b>n = 4, k = 2<br/>\n              <b>Output: </b>\n              [<br/>\n                [2,4],<br/>\n                [3,4],<br/>\n                [2,3],<br/>\n                [1,2],<br/>\n                [1,3],<br/>\n                [1,4],<br/>\n              ]<br/><br/>\n              <b>Example 2: </b>\n\n              <b>Input: </b>n = 1, k = 1<br/>\n              <b>Output: </b>[[1]]\n              <div style={titles}>\n                <PrismCode\n                  code={combine}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>2. Best Time to Buy and Sell Stock.</h3>\n              Say you have an array for which the ith element is the price of a given stock on day i.\n              <br/>\n              If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.\n              <br/>\n              Note that you cannot sell a stock before you buy one.<br/><br/>\n              <b>nput: </b>I[7,1,5,3,6,4]<br/>\n              <b>Output: </b>I5<br/>\n              <b>Explanation: </b>IBuy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.<br/>\n             Not 7-1 = 6, as selling price needs to be larger than buying price.\n              <div style={titles}>\n                <PrismCode\n                  code={maxProfit}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>3. Maximum Product Subarray.</h3>\n              Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.\n              <br/>\n              <b>Input: </b>[2,3,-2,4]<br/>\n              <b>Output: </b>6\n              <div style={titles}>\n                <PrismCode\n                  code={maxProduct}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>4. Longest Common Prefix</h3>\n              Write a function to find the longest common prefix string amongst an array of strings.\n              <br/>\n              If there is no common prefix, return an empty string \"\".\n              <br/><br/>\n              <b>Example 1: </b>\n\n              <b>Input: </b>[\"flower\",\"flow\",\"flight\"]<br/>\n              <b>Output: </b>\"fl\"<br/><br/>\n              <b>Example 2: </b>\n\n              <b>Input: </b>[\"dog\",\"racecar\",\"car\"]<br/>\n              <b>Output: </b>\"\"<br/>\n              <b>Explanation: </b>There is no common prefix among the input strings.<br/><br/>\n              <b>N: </b>All given inputs are in lowercase letters a-z.\n              <div style={titles}>\n                <PrismCode\n                  code={longestCommonPrefix}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic6));\n"]},"metadata":{},"sourceType":"module"}