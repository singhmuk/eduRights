{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../styles.css';import Sidebar from'../sidebar';import PrismCode from'../prismCode';import UseStates from'../../../assets/useState_useReducers.PNG';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var useReducers=\"\\nfunction App() {\\n  const [sum, dispatch] = useReducer((state, action) => {\\n    return state + action;\\n  }, 0);\\n\\n  return (\\n    <>\\n      {sum}\\n      <button onClick={() => dispatch(1)}>Add</button>\\n    </>\\n  );\\n}\".trim();var useReducers2=\"\\nimport React, { useReducer, useRef } from 'react'\\n\\nconst App = () => {\\n  const inputRef = useRef();\\n  const [items, dispatch] = useReducer((state, action) => {\\n    switch (action.type) {\\n      case \\\"add\\\":\\n        return [\\n          ...state,\\n          {\\n            id: state.length,\\n            name: action.name\\n          }\\n        ];\\n      case \\\"remove\\\":\\n        return state.filter((_, index) => index != action.index);\\n      default:\\n        return state;\\n    }\\n  }, []);\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    dispatch({\\n      type: \\\"add\\\",\\n      name: inputRef.current.value\\n    });\\n    inputRef.current.value = \\\"\\\";\\n  }\\n\\n  return (\\n    <>\\n      <form onSubmit={handleSubmit}>\\n        <input ref={inputRef} />\\n      </form>\\n      <ul>\\n        {items.map((item, index) => (\\n          <li key={item.id}>\\n            {item.name}{\\\" \\\"}\\n            <button onClick={() => dispatch({ type: \\\"remove\\\", index })}>\\n              X\\n            </button>\\n          </li>\\n        ))}\\n      </ul>\\n    </>\\n  );\\n}\".trim();var useReducersCase=\"\\nconst reducer = (state, action) => {\\n  switch (action.type) {\\n    case \\\"INCREMENT\\\":\\n      return { count: state.count + 1, showText: state.showText };\\n    case \\\"toggleShowText\\\":\\n      return { count: state.count, showText: !state.showText };\\n    default:\\n      return state;\\n  }\\n};\\n\\nconst App = () => {\\n  const [state, dispatch] = useReducer(reducer, { count: 0, showText: true });\\n\\n  return (\\n    <div>\\n      <h1>{state.count}</h1>\\n      <button\\n        onClick={() => {\\n          dispatch({ type: \\\"INCREMENT\\\" });\\n          dispatch({ type: \\\"toggleShowText\\\" });\\n        }}\\n      >\\n        Click Here\\n      </button>\\n\\n      {state.showText && <p>This is a text</p>}\\n    </div>\\n  );\\n};\".trim();var UseReducers=/*#__PURE__*/function(_Component){_inherits(UseReducers,_Component);function UseReducers(){_classCallCheck(this,UseReducers);return _possibleConstructorReturn(this,_getPrototypeOf(UseReducers).apply(this,arguments));}_createClass(UseReducers,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"img\",{src:UseStates,alt:\"Omega\",className:\"responsive\"}),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"1. useReducer\"),React.createElement(\"p\",null,\"useReducer is another hook, convenient for dealing with more complex state changes in React components. A \\u201Creducer\\u201D is a fancy word for a function that takes 2 values and returns 1 value. reducer receives the current state and an action, and returns the new state.\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:useReducers,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"2. useReducer 2\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:useReducers2,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"3. useReducer Case\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:useReducersCase,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return UseReducers;}(Component);export default withStyles(styles)(UseReducers);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/useReducersSta.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","UseStates","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","useReducers","trim","useReducers2","useReducersCase","UseReducers","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,eAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,cAAtB,CAEA,MAAOC,CAAAA,SAAP,KAAsB,0CAAtB,CAGA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,eAAe,CAAE,SAAnB,CAA8BC,OAAO,CAAE,KAAvC,CAA8CC,QAAQ,CAAE,MAAxD,CAAf,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,KAAK,CAAE,CACLC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH,CAELN,OAAO,CAAEG,KAAK,CAACG,OAAN,CAAc,CAAd,CAFJ,CADgB,CAKvBC,QAAQ,CAAE,CACRF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA,CALa,CAQvBE,SAAS,CAAE,CACTC,SAAS,CAAE,QADF,CARY,CAAL,EAApB,CAaA,GAAMC,CAAAA,WAAW,CAAG,mOAYjBC,IAZiB,EAApB,CAcA,GAAMC,CAAAA,YAAY,CAAG,+jCAgDlBD,IAhDkB,EAArB,CAkDA,GAAME,CAAAA,eAAe,CAAG,stBA8BpBF,IA9BoB,EAAxB,C,GAiCMG,CAAAA,W,+SACgB,CAClBC,UAAU,CAAC,iBAAMzB,CAAAA,KAAK,CAAC0B,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAACb,KAA1B,EACE,8BAAI,oBAAC,OAAD,MAAJ,CADF,CADF,CADF,CAOE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEa,OAAO,CAACb,KAA1B,EACE,oBAAC,IAAD,MACE,2BAAK,GAAG,CAAEP,SAAV,CAAqB,GAAG,CAAC,OAAzB,CAAiC,SAAS,CAAC,YAA3C,EADF,CAEE,8BAFF,CAGE,8BAHF,CAIE,6CAJF,CAKE,kTALF,CAUE,8BAVF,CAWE,2BAAK,KAAK,CAAEC,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEY,WADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAXF,CAkBE,8BAlBF,CAmBE,8BAnBF,CAoBE,+CApBF,CAqBE,2BAAK,KAAK,CAAEZ,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEc,YADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CArBF,CA4BE,8BA5BF,CA6BE,8BA7BF,CA+BE,kDA/BF,CAgCE,2BAAK,KAAK,CAAEd,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEe,eADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAhCF,CADF,CADF,CAPF,CADF,CAsDD,C,yBA5DuBxB,S,EA+D1B,cAAgBI,CAAAA,UAAU,CAACS,MAAD,CAAV,CAAmBY,WAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../prismCode';\n\nimport UseStates from '../../../assets/useState_useReducers.PNG'\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst useReducers = `\nfunction App() {\n  const [sum, dispatch] = useReducer((state, action) => {\n    return state + action;\n  }, 0);\n\n  return (\n    <>\n      {sum}\n      <button onClick={() => dispatch(1)}>Add</button>\n    </>\n  );\n}`.trim();\n\nconst useReducers2 = `\nimport React, { useReducer, useRef } from 'react'\n\nconst App = () => {\n  const inputRef = useRef();\n  const [items, dispatch] = useReducer((state, action) => {\n    switch (action.type) {\n      case \"add\":\n        return [\n          ...state,\n          {\n            id: state.length,\n            name: action.name\n          }\n        ];\n      case \"remove\":\n        return state.filter((_, index) => index != action.index);\n      default:\n        return state;\n    }\n  }, []);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch({\n      type: \"add\",\n      name: inputRef.current.value\n    });\n    inputRef.current.value = \"\";\n  }\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input ref={inputRef} />\n      </form>\n      <ul>\n        {items.map((item, index) => (\n          <li key={item.id}>\n            {item.name}{\" \"}\n            <button onClick={() => dispatch({ type: \"remove\", index })}>\n              X\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}`.trim();\n\nconst useReducersCase = `\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return { count: state.count + 1, showText: state.showText };\n    case \"toggleShowText\":\n      return { count: state.count, showText: !state.showText };\n    default:\n      return state;\n  }\n};\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, { count: 0, showText: true });\n\n  return (\n    <div>\n      <h1>{state.count}</h1>\n      <button\n        onClick={() => {\n          dispatch({ type: \"INCREMENT\" });\n          dispatch({ type: \"toggleShowText\" });\n        }}\n      >\n        Click Here\n      </button>\n\n      {state.showText && <p>This is a text</p>}\n    </div>\n  );\n};`.trim();\n\n\nclass UseReducers extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <img src={UseStates} alt=\"Omega\" className=\"responsive\" />\n              <br />\n              <br />\n              <b>1. useReducer</b>\n              <p>\n                useReducer is another hook, convenient for dealing with more complex state changes in React components.\n                A “reducer” is a fancy word for a function that takes 2 values and returns 1 value.\n                reducer receives the current state and an action, and returns the new state.\n              </p>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={useReducers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>2. useReducer 2</b>\n              <div style={titles}>\n                <PrismCode\n                  code={useReducers2}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>3. useReducer Case</b>\n              <div style={titles}>\n                <PrismCode\n                  code={useReducersCase}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(UseReducers));\n"]},"metadata":{},"sourceType":"module"}