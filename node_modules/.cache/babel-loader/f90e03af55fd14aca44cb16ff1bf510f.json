{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import\"../../ReactJs/styles.css\";import Sidebar from\"../sidebar\";import PrismCode from\"../../ReactJs/prismCode\";var titles={backgroundColor:\"#F0F8FF\",padding:\"1px\",fontSize:\"16px\"};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var objects=\"\\nconst car: { type: string, model: string, year: number } = {\\n  type: \\\"Toyota\\\",\\n  model: \\\"Corolla\\\",\\n  year: 2009\\n};\\n\\nconsole.log(car);\\n\".trim();var insignature=\"\\nconst nameAgeMap: { [index: string]: number } = {};\\n\\nnameAgeMap.Jack = 25;\\nnameAgeMap.Mark = \\\"Fifty\\\"; \\n\\nconsole.log(nameAgeMap);\\n\".trim();var arrow=\"\\nnpm install -g typescript\\ntsc --version\\ntsc --help\\ntsc app.ts                                             #to run app.ts file.                                             \\n\".trim();var classtypes=\"\\nclass Dog{\\n  age: number\\n  breed: string\\n\\n  constructor(age, breed){\\n      this.age = age\\n      this.breed = breed\\n  }\\n  show(){\\n      return console.log(this.age * 7)\\n  }\\n}\\n\\nconst obj = new Dog(2, 'Labrador');\\nobj.show();\\n\".trim();var constructors=\"\\nclass Point{\\n  x: number;\\n  y: number;\\n\\n  constructor(x?: number, y?:number){\\n    this.x = x;\\n    this.y = y\\n  }\\n\\n  getVal(){\\n    console.log(this.x, this.y)\\n  }\\n}\\n\\nlet obj = Point();\\nobj.getVal();\\n\\n\\n//Access modifier\\nclass Point{\\n  constructor(private x?: number, private y?:number){ }\\n\\n  getVal(){\\n    console.log(this.x, this.y)\\n  }\\n}\\n\\nlet obj = Point();\\nobj.getVal();\\n\".trim();var inheritancetypes=\"\\nclass Animal{\\n  age: number\\n  breed: string\\n  constructor(age, breed){ \\n      this.age = age\\n      this.breed = breed\\n  }\\n  show(sound: string): void{\\n      console.log(sound)\\n  }\\n}\\n\\nclass Dog extends Animal{\\n  bool: boolean\\n  constructor(age: number, breed: string, bool: boolean){\\n       super(age, breed)                            //call parent constructor\\n       this.bool = bool\\n  }\\n  makeSound(): void{\\n      super.show('Dog')\\n  }\\n  getAgeInHumanYears(): number{\\n      return this.age * 7   \\n  }\\n}\\n\\nconst obj = new Dog(1, 'Obj', true)\\nobj.makeSound();\\n\\nclass Cat extends Dog{\\n  newbool: boolean;\\n  constructor(age: number, breed: string, bool, newbool){\\n      super(age, breed, bool)\\n  }\\n  makeSound(): void{\\n      super.show('Cat')\\n  }\\n}\\n\\nconst obj2 = new Cat(2, 'Obj2', false, true);\\nobj2.makeSound();\\n\".trim();var inheritance=\"\\nclass Animal {\\n    eat():void {\\n        console.log(\\\"Eating\\\")\\n     }\\n}\\n\\nclass Dog extends Animal {\\n   bark():void {\\n      console.log(\\\"Barking\\\")\\n   }\\n}\\n\\nclass BabyDog extends Dog{\\n    weep():void {\\n        console.log(\\\"Weeping\\\")\\n     }\\n}\\nlet obj = new BabyDog();\\nobj.eat();\\nobj.bark();\\nobj.weep()\\n\".trim();var declaration=\"\\ninterface Point {\\n  x: number;\\n  y: number;\\n}\\n\\nfunction printCoord(pt: Point) {\\n  console.log(\\\"The coordinate's x value is \\\" + pt.x);\\n  console.log(\\\"The coordinate's y value is \\\" + pt.y);\\n}\\n\\nprintCoord({x: 100, y: 100});\\n\".trim();var inherritancesMul=\"\\nabstract class Character{\\n  hunger:number;\\n  health:number;\\n  \\n  abstract eat(): void\\n}\\n\\ninterface Hero extends Character{\\n  heroId:number;\\n}\\n\\ninterface Enemy extends Character{\\n  enemyId:number\\n}\\n\\nclass Spy implements Hero, Enemy{\\n  hunger:number;\\n  health:number;\\n  heroId:number;\\n  enemyId:number;\\n  \\n  eat() {\\n      this.hunger -= 1\\n  }\\n} \\n\\nconst hero: Hero = new Spy();\\nconst enemy: Enemy = new Spy();\\n\".trim();var Overloading=\"\\nclass A {\\n    public foo(s: string): number;\\n    public foo(n: number): string;\\n\\n    public foo(arg: any): any {\\n        if (typeof(arg) === 'number')\\n            return arg.toString();\\n        if (typeof(arg) === 'string')\\n            return arg.length;\\n    }\\n}\\n\\nlet obj = new A();\\nconsole.log(\\\"Result: \\\" +obj.foo(101));\\nconsole.log(\\\"Length of String: \\\" +obj.foo(\\\"JavaTpoint\\\"));\\n\".trim();var poly=\"\\nclass Hero{\\n  hunger:number;\\n  health:number;\\n  \\n  attack(){\\n     console.log('Attacking')\\n  }\\n  move(){\\n     console.log('Moving')\\n  }\\n  eat(){\\n     console.log('Eating')\\n  }\\n}\\n\\nclass Archer extends Hero{\\n  arrows:number;\\n  attack(){\\n     super.attack()\\n     console.log('Firing an Arrow')\\n     this.arrows -= 1\\n  }\\n}\\n\\nclass Mage extends Hero{\\n  mana:number\\n  \\n  attack(): void {\\n      super.attack()\\n      console.log('Throwing a portion')\\n      this.mana -= 1\\n  }\\n}\\n\\nclass Knight extends Hero{\\n  shield:number\\n  attack(){\\n     console.log('Knight')\\n  }\\n}\\n\\nconst archer:Hero=new Archer();\\nconst mage:Hero=new Mage();\\nconst knight:Hero=new Knight();\\n\\narcher.attack();\\nmage.attack();\\nknight.attack();\\n\\nclass Tribe{\\n  private heros:Hero[];\\n  setHeros(heros:Hero[]){\\n     this.heros = heros;\\n  }\\n  \\n  attack(): void{\\n     for(let hero of this.heros){\\n        hero.attack();\\n     }\\n  }\\n}\\n\\nconst heros: Hero[] = [archer, mage, knight];\\nconst tribe = new Tribe();\\ntribe.setHeros(heros);\\ntribe.attack()\\n\".trim();var polyAbs=\"\\nclass Character{\\n  private hunger:number;\\n  private health:number;\\n  \\n  constructor(hunger: number, health: number){\\n     this.hunger=hunger;\\n     this.health=health;\\n  }\\n   \\n  setHunger(hunger: number): void{\\n     this.hunger = hunger;\\n  }\\n  \\n  setHealth(health: number): void {\\n     this.health = health;\\n  }\\n  \\n  getHunger():number{\\n     return this.hunger;\\n  }\\n  \\n  getHealth():number{\\n   return this.health;\\n}\\n}\\n\\nclass Hero extends Character{\\n  private heroId: number;\\n  \\n  setHeroId(heroId: number): void{\\n     this.heroId = heroId;\\n  }\\n}\\n\\n\\nconst obj = new Hero(10,100)\\nconsole.log(obj.getHunger())\\nconsole.log(obj.getHealth())\\n\".trim();var statics=\"\\nclass Character{\\n  static characterCount = 0;\\n  private hunger:number;\\n  private health:number;\\n  \\n  constructor(hunger: number, health: number){\\n     Character.characterCount +=1;\\n     console.log(Character.characterCount)\\n     this.hunger=hunger;\\n     this.health=health;\\n  }\\n   \\n  setHunger(hunger: number): void{\\n     this.hunger = hunger;\\n  }\\n  \\n  setHealth(health: number): void {\\n     this.health = health;\\n  }\\n  \\n  getHunger():number{\\n     return this.hunger;\\n  }\\n  \\n  getHealth():number{\\n   return this.health;\\n}\\n}\\n\\nclass Hero extends Character{\\n  private heroId: number;\\n  \\n  constructor(heroId: number, hunger: number, health: number){\\n     super(hunger, health)\\n     this.heroId=heroId;\\n  }\\n  \\n  setHeroId(heroId: number): void{\\n     this.heroId = heroId;\\n  }\\n}\\n\\nconst obj = new Hero(10,30,100)\\nconst obj2 = new Hero(10,30,100)\\nconst obj3 = new Hero(10,30,100)\\n\".trim();var readOnly=\"\\nclass Character{\\n  static characterCount = 0;\\n  private hunger:number;\\n  private health:number;\\n  \\n  constructor(hunger: number, health: number){\\n     Character.characterCount +=1;\\n     console.log(Character.characterCount)\\n     this.hunger=hunger;\\n     this.health=health;\\n  }\\n   \\n  setHunger(hunger: number): void{\\n     this.hunger = hunger;\\n  }\\n  \\n  setHealth(health: number): void {\\n     this.health = health;\\n  }\\n  \\n  getHunger():number{\\n     return this.hunger;\\n  }\\n  \\n  getHealth():number{\\n   return this.health;\\n}\\n}\\n\\nclass Hero extends Character{\\n  readonly heroId: number;                                              //cannot mutate after initialize\\n  \\n  constructor(heroId: number, hunger: number, health: number){\\n     super(hunger, health)\\n     this.heroId=heroId;\\n  }\\n}\\n\\n\\nconst obj = new Hero(10,30,100)\\nconst obj2 = new Hero(10,30,100)\\nconst obj3 = new Hero(10,30,100)\\n\".trim();var narrowing=\"\\nfunction padLeft(padding: number | string, input: string) {\\n  if (typeof padding === \\\"number\\\") {\\n    return new Array(padding + 1).join(\\\" \\\") + input;\\n  }\\n  return padding + input;\\n}\\n\\npadLeft({padding:'1'},{input:'input'})\\n\\n\\n2. Function Type Expressions\\nfunction greeter(fn: (a: string) => void) {\\n  fn(\\\"Hello, World\\\");\\n}\\n\\nfunction printToConsole(s: string) {\\n  console.log(s);\\n}\\n\\ngreeter(printToConsole);\".trim();var omitted=\"\\nfunction greet(name:string, greeting:string='Ritesh'):string{\\n  return greeting\\n}\\n\\nconsole.log(greet('Rakesh'))\\n\".trim();var parameters=\"\\nfunction greet(name:string, greeting?:string){\\n  return console.log(name, greeting)\\n}\\n\\ngreet('Rakesh')\\n\\n\\n//2\\nfunction printName(obj: {first: string; last?: string}) {\\n  if (obj.last !== undefined) {\\n    console.log(obj.last.toUpperCase());\\n  }\\n\\n  console.log(obj.last?.toUpperCase());\\n}\\n\\nprintName({ first: \\\"Bob\\\" });\\nprintName({first: \\\"Alice\\\", last: \\\"Alisson\\\"})\\n\".trim();var TypeScript2=/*#__PURE__*/function(_Component){_inherits(TypeScript2,_Component);function TypeScript2(){_classCallCheck(this,TypeScript2);return _possibleConstructorReturn(this,_getPrototypeOf(TypeScript2).apply(this,arguments));}_createClass(TypeScript2,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Cohesion And Coupling Principle\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Component connection inside modules is Cohesion.\"),React.createElement(\"li\",null,\"Connection b/w model is coupling.\"),React.createElement(\"li\",null,\"High Cohesion and Low Coupling.\")),React.createElement(\"p\",null),React.createElement(\"h3\",null,\"2. Arrow function\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:arrow,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Object Types\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:objects,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Index Signatures\"),\"Index signatures can be used for objects without a defined list of properties.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:insignature,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. How without passing constructor parameter run ts\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:constructors,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. Class \"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:classtypes,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. inheritance using super\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:inheritancetypes,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"9. Multi level Inheritance\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:inheritance,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"10. Interface Declaration\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Interface is a structure that defines the contract in our application. It defines the syntax for classes to follow.\"),React.createElement(\"li\",null,\"TypeScript compiler does not convert interface to JavaScript. It uses interface for type checking. This is also known as \\\"duck typing\\\" or \\\"structural subtyping\\\".\"),React.createElement(\"li\",null,\"Interface is defined with the keyword interface and it can include properties and method declarations using a function\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:declaration,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"11. Multiple Inheritance, and Interfaces\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:inherritancesMul,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"12. Polymorphism\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:poly,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"13. Function Overloading\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Overloading,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"14. Constructors, Static, Parameter, and Readonly Properties\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:polyAbs,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"16. Static\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:statics,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"17. Readonly\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:readOnly,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"18. Narrowing\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:narrowing,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"19. Default Parameters\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"TypeScript provides the Option to add default values to Parameters. So, if the user does not provide a value to an argument, TypeScript will initialize the Parameter with the default value. Default Parameters have the same behaviour as Optional Parameters. If a value is not passed for the default Parameters in a function call, the default Parameter must follow the required Parameters in the function signature. Hence, default Parameters can be omitted while calling a function. However, if a function signature has a default Parameter before a required Parameter, the function can still be called, provided the default Parameter is passed a value of undefined.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:omitted,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"20. Optional Parameter\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"The parameters that may or may not receive a value can be appended with a '?' to mark then as optional.\"),React.createElement(\"li\",null,\"All optional parameters must follow required parameters and should be at the end.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:parameters,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return TypeScript2;}(Component);export default withStyles(styles)(TypeScript2);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/javaScripts/deepJs/typeScript_2.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","objects","trim","insignature","arrow","classtypes","constructors","inheritancetypes","inheritance","declaration","inherritancesMul","Overloading","poly","polyAbs","statics","readOnly","narrowing","omitted","parameters","TypeScript2","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,0BAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CAEA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,eAAe,CAAE,SAAnB,CAA8BC,OAAO,CAAE,KAAvC,CAA8CC,QAAQ,CAAE,MAAxD,CAAf,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,KAAD,QAAY,CACzBC,KAAK,CAAE,CACLC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH,CAELN,OAAO,CAAEG,KAAK,CAACG,OAAN,CAAc,CAAd,CAFJ,CADkB,CAKzBC,QAAQ,CAAE,CACRF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA,CALe,CAQzBE,SAAS,CAAE,CACTC,SAAS,CAAE,QADF,CARc,CAAZ,EAAf,CAaA,GAAMC,CAAAA,OAAO,CAAG,sJAQdC,IARc,EAAhB,CAUA,GAAMC,CAAAA,WAAW,CAAG,8IAOlBD,IAPkB,EAApB,CASA,GAAME,CAAAA,KAAK,CAAG,qLAKZF,IALY,EAAd,CAOA,GAAMG,CAAAA,UAAU,CAAG,mPAgBjBH,IAhBiB,EAAnB,CAkBA,GAAMI,CAAAA,YAAY,CAAG,sZA8BnBJ,IA9BmB,EAArB,CAgCA,GAAMK,CAAAA,gBAAgB,CAAG,y1BA0CvBL,IA1CuB,EAAzB,CA4CA,GAAMM,CAAAA,WAAW,CAAG,yUAsBlBN,IAtBkB,EAApB,CAwBA,GAAMO,CAAAA,WAAW,CAAG,iPAYlBP,IAZkB,EAApB,CAcA,GAAMQ,CAAAA,gBAAgB,CAAG,wbA6BvBR,IA7BuB,EAAzB,CA+BA,GAAMS,CAAAA,WAAW,CAAG,sZAgBlBT,IAhBkB,EAApB,CAkBA,GAAMU,CAAAA,IAAI,CAAG,4iCAmEXV,IAnEW,EAAb,CAqEA,GAAMW,CAAAA,OAAO,CAAG,qqBAuCdX,IAvCc,EAAhB,CAyCA,GAAMY,CAAAA,OAAO,CAAG,25BA8CdZ,IA9Cc,EAAhB,CAgDA,GAAMa,CAAAA,QAAQ,CAAG,m6BA2Cfb,IA3Ce,EAAjB,CA6CA,GAAMc,CAAAA,SAAS,CAAG,kbAoBQd,IApBR,EAAlB,CAsBA,GAAMe,CAAAA,OAAO,CAAG,0HAMdf,IANc,EAAhB,CAQA,GAAMgB,CAAAA,UAAU,CAAG,uYAmBjBhB,IAnBiB,EAAnB,C,GAqBMiB,CAAAA,W,+SACgB,CAClBC,UAAU,CAAC,iBAAMtC,CAAAA,KAAK,CAACuC,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAAC3B,KAA1B,EACE,8BACE,oBAAC,OAAD,MADF,CADF,CADF,CADF,CAQE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAE2B,OAAO,CAAC3B,KAA1B,EACE,oBAAC,IAAD,MACE,mEADF,CAEE,8BACE,iFADF,CAEE,kEAFF,CAGE,gEAHF,CAFF,CAOE,6BAPF,CAQE,kDARF,CASE,2BAAK,KAAK,CAAEN,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEe,KADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CATF,CAgBE,8BAhBF,CAiBE,gDAjBF,CAkBE,2BAAK,KAAK,CAAEf,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEY,OADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAlBF,CAyBE,8BAzBF,CA0BE,oDA1BF,kFA6BE,2BAAK,KAAK,CAAEZ,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEc,WADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CA7BF,CAoCE,8BApCF,CAqCE,oFArCF,CAsCE,2BAAK,KAAK,CAAEd,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEiB,YADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAtCF,CA6CE,8BA7CF,CA8CE,0CA9CF,CA+CE,2BAAK,KAAK,CAAEjB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEgB,UADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CA/CF,CAsDE,8BAtDF,CAuDE,2DAvDF,CAwDE,2BAAK,KAAK,CAAEhB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEkB,gBADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAxDF,CA+DE,8BA/DF,CAgEE,2DAhEF,CAiEE,2BAAK,KAAK,CAAElB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEmB,WADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAjEF,CAwEE,8BAxEF,CAyEE,0DAzEF,CA0EE,8BACE,oJADF,CAKE,sMALF,CAUE,uJAVF,CA1EF,CAyFE,2BAAK,KAAK,CAAEnB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEoB,WADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAzFF,CAgGE,8BAhGF,CAiGE,yEAjGF,CAkGE,2BAAK,KAAK,CAAEpB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEqB,gBADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAlGF,CAyGE,8BAzGF,CA0GE,iDA1GF,CA2GE,2BAAK,KAAK,CAAErB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEuB,IADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CA3GF,CAkHE,8BAlHF,CAmHE,yDAnHF,CAoHE,2BAAK,KAAK,CAAEvB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEsB,WADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CApHF,CA2HE,8BA3HF,CA4HE,6FA5HF,CA+HE,2BAAK,KAAK,CAAEtB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEwB,OADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CA/HF,CAsIE,8BAtIF,CAuIE,2CAvIF,CAwIE,2BAAK,KAAK,CAAExB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEyB,OADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAxIF,CA+IE,8BA/IF,CAgJE,6CAhJF,CAiJE,2BAAK,KAAK,CAAEzB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAE0B,QADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAjJF,CAwJE,8BAxJF,CAyJE,8CAzJF,CA0JE,2BAAK,KAAK,CAAE1B,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAE2B,SADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CA1JF,CAiKE,8BAjKF,CAkKE,uDAlKF,CAmKE,8BACE,wrBADF,CAnKF,CAmLE,2BAAK,KAAK,CAAE3B,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAE4B,OADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAnLF,CA0LE,8BA1LF,CA2LE,uDA3LF,CA4LE,8BACE,wIADF,CAKE,kHALF,CA5LF,CAsME,2BAAK,KAAK,CAAE5B,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAE6B,UADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAtMF,CADF,CADF,CARF,CADF,CA6ND,C,yBAnOuBrC,S,EAsO1B,cAAeI,CAAAA,UAAU,CAACQ,MAAD,CAAV,CAAmB0B,WAAnB,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst objects = `\nconst car: { type: string, model: string, year: number } = {\n  type: \"Toyota\",\n  model: \"Corolla\",\n  year: 2009\n};\n\nconsole.log(car);\n`.trim();\n\nconst insignature = `\nconst nameAgeMap: { [index: string]: number } = {};\n\nnameAgeMap.Jack = 25;\nnameAgeMap.Mark = \"Fifty\"; \n\nconsole.log(nameAgeMap);\n`.trim();\n\nconst arrow = `\nnpm install -g typescript\ntsc --version\ntsc --help\ntsc app.ts                                             #to run app.ts file.                                             \n`.trim();\n\nconst classtypes = `\nclass Dog{\n  age: number\n  breed: string\n\n  constructor(age, breed){\n      this.age = age\n      this.breed = breed\n  }\n  show(){\n      return console.log(this.age * 7)\n  }\n}\n\nconst obj = new Dog(2, 'Labrador');\nobj.show();\n`.trim();\n\nconst constructors = `\nclass Point{\n  x: number;\n  y: number;\n\n  constructor(x?: number, y?:number){\n    this.x = x;\n    this.y = y\n  }\n\n  getVal(){\n    console.log(this.x, this.y)\n  }\n}\n\nlet obj = Point();\nobj.getVal();\n\n\n//Access modifier\nclass Point{\n  constructor(private x?: number, private y?:number){ }\n\n  getVal(){\n    console.log(this.x, this.y)\n  }\n}\n\nlet obj = Point();\nobj.getVal();\n`.trim();\n\nconst inheritancetypes = `\nclass Animal{\n  age: number\n  breed: string\n  constructor(age, breed){ \n      this.age = age\n      this.breed = breed\n  }\n  show(sound: string): void{\n      console.log(sound)\n  }\n}\n\nclass Dog extends Animal{\n  bool: boolean\n  constructor(age: number, breed: string, bool: boolean){\n       super(age, breed)                            //call parent constructor\n       this.bool = bool\n  }\n  makeSound(): void{\n      super.show('Dog')\n  }\n  getAgeInHumanYears(): number{\n      return this.age * 7   \n  }\n}\n\nconst obj = new Dog(1, 'Obj', true)\nobj.makeSound();\n\nclass Cat extends Dog{\n  newbool: boolean;\n  constructor(age: number, breed: string, bool, newbool){\n      super(age, breed, bool)\n  }\n  makeSound(): void{\n      super.show('Cat')\n  }\n}\n\nconst obj2 = new Cat(2, 'Obj2', false, true);\nobj2.makeSound();\n`.trim();\n\nconst inheritance = `\nclass Animal {\n    eat():void {\n        console.log(\"Eating\")\n     }\n}\n\nclass Dog extends Animal {\n   bark():void {\n      console.log(\"Barking\")\n   }\n}\n\nclass BabyDog extends Dog{\n    weep():void {\n        console.log(\"Weeping\")\n     }\n}\nlet obj = new BabyDog();\nobj.eat();\nobj.bark();\nobj.weep()\n`.trim();\n\nconst declaration = `\ninterface Point {\n  x: number;\n  y: number;\n}\n\nfunction printCoord(pt: Point) {\n  console.log(\"The coordinate's x value is \" + pt.x);\n  console.log(\"The coordinate's y value is \" + pt.y);\n}\n\nprintCoord({x: 100, y: 100});\n`.trim();\n\nconst inherritancesMul = `\nabstract class Character{\n  hunger:number;\n  health:number;\n  \n  abstract eat(): void\n}\n\ninterface Hero extends Character{\n  heroId:number;\n}\n\ninterface Enemy extends Character{\n  enemyId:number\n}\n\nclass Spy implements Hero, Enemy{\n  hunger:number;\n  health:number;\n  heroId:number;\n  enemyId:number;\n  \n  eat() {\n      this.hunger -= 1\n  }\n} \n\nconst hero: Hero = new Spy();\nconst enemy: Enemy = new Spy();\n`.trim();\n\nconst Overloading = `\nclass A {\n    public foo(s: string): number;\n    public foo(n: number): string;\n\n    public foo(arg: any): any {\n        if (typeof(arg) === 'number')\n            return arg.toString();\n        if (typeof(arg) === 'string')\n            return arg.length;\n    }\n}\n\nlet obj = new A();\nconsole.log(\"Result: \" +obj.foo(101));\nconsole.log(\"Length of String: \" +obj.foo(\"JavaTpoint\"));\n`.trim();\n\nconst poly = `\nclass Hero{\n  hunger:number;\n  health:number;\n  \n  attack(){\n     console.log('Attacking')\n  }\n  move(){\n     console.log('Moving')\n  }\n  eat(){\n     console.log('Eating')\n  }\n}\n\nclass Archer extends Hero{\n  arrows:number;\n  attack(){\n     super.attack()\n     console.log('Firing an Arrow')\n     this.arrows -= 1\n  }\n}\n\nclass Mage extends Hero{\n  mana:number\n  \n  attack(): void {\n      super.attack()\n      console.log('Throwing a portion')\n      this.mana -= 1\n  }\n}\n\nclass Knight extends Hero{\n  shield:number\n  attack(){\n     console.log('Knight')\n  }\n}\n\nconst archer:Hero=new Archer();\nconst mage:Hero=new Mage();\nconst knight:Hero=new Knight();\n\narcher.attack();\nmage.attack();\nknight.attack();\n\nclass Tribe{\n  private heros:Hero[];\n  setHeros(heros:Hero[]){\n     this.heros = heros;\n  }\n  \n  attack(): void{\n     for(let hero of this.heros){\n        hero.attack();\n     }\n  }\n}\n\nconst heros: Hero[] = [archer, mage, knight];\nconst tribe = new Tribe();\ntribe.setHeros(heros);\ntribe.attack()\n`.trim();\n\nconst polyAbs = `\nclass Character{\n  private hunger:number;\n  private health:number;\n  \n  constructor(hunger: number, health: number){\n     this.hunger=hunger;\n     this.health=health;\n  }\n   \n  setHunger(hunger: number): void{\n     this.hunger = hunger;\n  }\n  \n  setHealth(health: number): void {\n     this.health = health;\n  }\n  \n  getHunger():number{\n     return this.hunger;\n  }\n  \n  getHealth():number{\n   return this.health;\n}\n}\n\nclass Hero extends Character{\n  private heroId: number;\n  \n  setHeroId(heroId: number): void{\n     this.heroId = heroId;\n  }\n}\n\n\nconst obj = new Hero(10,100)\nconsole.log(obj.getHunger())\nconsole.log(obj.getHealth())\n`.trim();\n\nconst statics = `\nclass Character{\n  static characterCount = 0;\n  private hunger:number;\n  private health:number;\n  \n  constructor(hunger: number, health: number){\n     Character.characterCount +=1;\n     console.log(Character.characterCount)\n     this.hunger=hunger;\n     this.health=health;\n  }\n   \n  setHunger(hunger: number): void{\n     this.hunger = hunger;\n  }\n  \n  setHealth(health: number): void {\n     this.health = health;\n  }\n  \n  getHunger():number{\n     return this.hunger;\n  }\n  \n  getHealth():number{\n   return this.health;\n}\n}\n\nclass Hero extends Character{\n  private heroId: number;\n  \n  constructor(heroId: number, hunger: number, health: number){\n     super(hunger, health)\n     this.heroId=heroId;\n  }\n  \n  setHeroId(heroId: number): void{\n     this.heroId = heroId;\n  }\n}\n\nconst obj = new Hero(10,30,100)\nconst obj2 = new Hero(10,30,100)\nconst obj3 = new Hero(10,30,100)\n`.trim();\n\nconst readOnly = `\nclass Character{\n  static characterCount = 0;\n  private hunger:number;\n  private health:number;\n  \n  constructor(hunger: number, health: number){\n     Character.characterCount +=1;\n     console.log(Character.characterCount)\n     this.hunger=hunger;\n     this.health=health;\n  }\n   \n  setHunger(hunger: number): void{\n     this.hunger = hunger;\n  }\n  \n  setHealth(health: number): void {\n     this.health = health;\n  }\n  \n  getHunger():number{\n     return this.hunger;\n  }\n  \n  getHealth():number{\n   return this.health;\n}\n}\n\nclass Hero extends Character{\n  readonly heroId: number;                                              //cannot mutate after initialize\n  \n  constructor(heroId: number, hunger: number, health: number){\n     super(hunger, health)\n     this.heroId=heroId;\n  }\n}\n\n\nconst obj = new Hero(10,30,100)\nconst obj2 = new Hero(10,30,100)\nconst obj3 = new Hero(10,30,100)\n`.trim();\n\nconst narrowing = `\nfunction padLeft(padding: number | string, input: string) {\n  if (typeof padding === \"number\") {\n    return new Array(padding + 1).join(\" \") + input;\n  }\n  return padding + input;\n}\n\npadLeft({padding:'1'},{input:'input'})\n\n\n2. Function Type Expressions\nfunction greeter(fn: (a: string) => void) {\n  fn(\"Hello, World\");\n}\n\nfunction printToConsole(s: string) {\n  console.log(s);\n}\n\ngreeter(printToConsole);`.trim();\n\nconst omitted = `\nfunction greet(name:string, greeting:string='Ritesh'):string{\n  return greeting\n}\n\nconsole.log(greet('Rakesh'))\n`.trim();\n\nconst parameters = `\nfunction greet(name:string, greeting?:string){\n  return console.log(name, greeting)\n}\n\ngreet('Rakesh')\n\n\n//2\nfunction printName(obj: {first: string; last?: string}) {\n  if (obj.last !== undefined) {\n    console.log(obj.last.toUpperCase());\n  }\n\n  console.log(obj.last?.toUpperCase());\n}\n\nprintName({ first: \"Bob\" });\nprintName({first: \"Alice\", last: \"Alisson\"})\n`.trim();\n\nclass TypeScript2 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Cohesion And Coupling Principle</h3>\n              <ul>\n                <li>Component connection inside modules is Cohesion.</li>\n                <li>Connection b/w model is coupling.</li>\n                <li>High Cohesion and Low Coupling.</li>\n              </ul>\n              <p></p>\n              <h3>2. Arrow function</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={arrow}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>3. Object Types</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={objects}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>3. Index Signatures</h3>\n              Index signatures can be used for objects without a defined list of\n              properties.\n              <div style={titles}>\n                <PrismCode\n                  code={insignature}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>4. How without passing constructor parameter run ts</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={constructors}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>5. Class </h3>\n              <div style={titles}>\n                <PrismCode\n                  code={classtypes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>6. inheritance using super</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={inheritancetypes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>9. Multi level Inheritance</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={inheritance}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>10. Interface Declaration</h3>\n              <ul>\n                <li>\n                  Interface is a structure that defines the contract in our\n                  application. It defines the syntax for classes to follow.\n                </li>\n                <li>\n                  TypeScript compiler does not convert interface to JavaScript.\n                  It uses interface for type checking. This is also known as\n                  \"duck typing\" or \"structural subtyping\".\n                </li>\n                <li>\n                  Interface is defined with the keyword interface and it can\n                  include properties and method declarations using a function\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={declaration}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>11. Multiple Inheritance, and Interfaces</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={inherritancesMul}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>12. Polymorphism</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={poly}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>13. Function Overloading</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Overloading}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                14. Constructors, Static, Parameter, and Readonly Properties\n              </h3>\n              <div style={titles}>\n                <PrismCode\n                  code={polyAbs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>16. Static</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={statics}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>17. Readonly</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={readOnly}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>18. Narrowing</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={narrowing}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>19. Default Parameters</h3>\n              <ul>\n                <li>\n                  TypeScript provides the Option to add default values to\n                  Parameters. So, if the user does not provide a value to an\n                  argument, TypeScript will initialize the Parameter with the\n                  default value. Default Parameters have the same behaviour as\n                  Optional Parameters. If a value is not passed for the default\n                  Parameters in a function call, the default Parameter must\n                  follow the required Parameters in the function signature.\n                  Hence, default Parameters can be omitted while calling a\n                  function. However, if a function signature has a default\n                  Parameter before a required Parameter, the function can still\n                  be called, provided the default Parameter is passed a value of\n                  undefined.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={omitted}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>20. Optional Parameter</h3>\n              <ul>\n                <li>\n                  The parameters that may or may not receive a value can be\n                  appended with a '?' to mark then as optional.\n                </li>\n                <li>\n                  All optional parameters must follow required parameters and\n                  should be at the end.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={parameters}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(TypeScript2);\n"]},"metadata":{},"sourceType":"module"}