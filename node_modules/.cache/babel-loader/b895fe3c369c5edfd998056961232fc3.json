{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/angularjsd/angular 12/viewProvider.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Theata from '../../../assets/customElement.png';\nimport CustomElement from '../../../assets/create.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst myProvider = `\nexport class MyProvider{\n  constructor(){\n    console.log('myProvider called')\n  }\n  varProvider = \"varProvider\";\n}\n\nexport class MyProvider2{\n  constructor(){}\n  varProvider2 = \"varProvider2\";\n\n  getString(str){\n    console.log('myProvider called2', str)\n  }\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  viewProviders: [MyProvider, MyProvider2]\n})\nexport class AppComponent {\n  constructor(public obj:MyProvider, public obj2:MyProvider2){\n    obj2.getString('Mukesh')\n    console.log(obj.varProvider);\n    console.log(obj2.varProvider2);\n  }\n}`.trim();\nconst viewChild = `\n//childs.ts\nimport { Component } from '@angular/core';\n@Component({\n  selector: 'app-childs',\n  template: '\nUsername: {{username}}\n      <br/>\n    <button (click) = \"clickMe()\"> click</button>\n  '\n})\nexport class Child {\n  username=\"default Value\"\n  clickMe(){\n    alert(this.username)\n  }\n}\n\n\n//viewChild_2.ts\nimport { Component, ViewContainerRef, ViewChild } from '@angular/core';\n@Component({\n  selector: 'app-root',\n  template: '\n  < button(click)=\"show()\"> Show</button>\n    <div id=\"layout\" *ngIf=\"display\">\n      <div #contentPlaceholder></div>\n</div >\n  '\n})\nexport class AppComponent {\n  display = false;\n    @ViewChild('contentPlaceholder', {read: ViewContainerRef}) viewContainerRef;\n\n    show() {\n        this.display = true;\n        console.log(this.viewContainerRef); // undefined\n        setTimeout(()=> {\n            console.log(this.viewContainerRef); // OK\n        }, 1);\n    }\n}\n\n\n//app.component.ts\nimport { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { Child } from './childs';\n\n@Component({\n  selector: 'app-root',\n  template: '<div #box>\n  <p>{{username}}</p>\n</div>\n<div>\n  <button (click)=\"changeProperty()\">Change Child Property</button>\n  <button (click)=\"changeMethod()\">Change Child Method</button>\n</div>\n\n<app-childs></app-childs>'\n})\n\nexport class AppComponent implements OnInit {\n  username=\"username\";\n  @ViewChild('box', {static: false}) box:ElementRef\n  constructor(){}\n\n  ngOnInit(){ }\n  ngAfterViewInit(){\n    // console.log(this.box);\n    // this.box.nativeElement.style.backgroundColor=\"blue\";\n    // this.box.nativeElement.classList=\"viewChild accept class\";\n    // this.box.nativeElement.innerHTML=\"Can change innerHTML value\";\n\n    console.log(this.child)\n  }\n\n  @ViewChild(Child, {static: false}) child:Child;\n  changeProperty(){\n    this.child.username = \"Mukesh\"\n  }\n\n  changeMethod(){\n    this.child.clickMe()\n  }\n}`.trim();\n\nclass AngularDir extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"1. ViewProvider\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"viewProviders property allows us to make providers available only for the component\\u2019s view. When we want to use a class in our component that is defined outside the @Component () decorator function, then, first of all, we need to inject this class into our component, and we can achieve this with the help of the \\\"viewProvider\\\" property of a component.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: myProvider,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"Providers have services list which use by component.\"), \"If component need any service than it ask to injector not to Promises, Injector will create that service by getting blue-print from Promises, But if injector have that service instance than directly provide to component.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"2. ViewChild\"), \"ViewChild is a decorator for Angular component variables, which allow to bind child component data and method.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"are used for component communication. If a parent component want to access child component then use ViewChild. Any component, directive or element which is part of a template is ViewChild.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"ViewChild() decorator can be used to get the first element or directive matching the selector from the view DOM. @ViewChild() provides the instance of another component or directive in a parent component and then parent component can access the method and properties of that component or directive.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }), \"Use @ViewChild with ElementRef or TemplateRef.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: viewChild,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(AngularDir);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/angularjsd/angular 12/viewProvider.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Theata","CustomElement","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","myProvider","trim","viewChild","AngularDir","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Theata from '../../../assets/customElement.png';\nimport CustomElement from '../../../assets/create.png';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst myProvider = `\nexport class MyProvider{\n  constructor(){\n    console.log('myProvider called')\n  }\n  varProvider = \"varProvider\";\n}\n\nexport class MyProvider2{\n  constructor(){}\n  varProvider2 = \"varProvider2\";\n\n  getString(str){\n    console.log('myProvider called2', str)\n  }\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  viewProviders: [MyProvider, MyProvider2]\n})\nexport class AppComponent {\n  constructor(public obj:MyProvider, public obj2:MyProvider2){\n    obj2.getString('Mukesh')\n    console.log(obj.varProvider);\n    console.log(obj2.varProvider2);\n  }\n}`.trim();\n\n\nconst viewChild = `\n//childs.ts\nimport { Component } from '@angular/core';\n@Component({\n  selector: 'app-childs',\n  template: '\nUsername: {{username}}\n      <br/>\n    <button (click) = \"clickMe()\"> click</button>\n  '\n})\nexport class Child {\n  username=\"default Value\"\n  clickMe(){\n    alert(this.username)\n  }\n}\n\n\n//viewChild_2.ts\nimport { Component, ViewContainerRef, ViewChild } from '@angular/core';\n@Component({\n  selector: 'app-root',\n  template: '\n  < button(click)=\"show()\"> Show</button>\n    <div id=\"layout\" *ngIf=\"display\">\n      <div #contentPlaceholder></div>\n</div >\n  '\n})\nexport class AppComponent {\n  display = false;\n    @ViewChild('contentPlaceholder', {read: ViewContainerRef}) viewContainerRef;\n\n    show() {\n        this.display = true;\n        console.log(this.viewContainerRef); // undefined\n        setTimeout(()=> {\n            console.log(this.viewContainerRef); // OK\n        }, 1);\n    }\n}\n\n\n//app.component.ts\nimport { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { Child } from './childs';\n\n@Component({\n  selector: 'app-root',\n  template: '<div #box>\n  <p>{{username}}</p>\n</div>\n<div>\n  <button (click)=\"changeProperty()\">Change Child Property</button>\n  <button (click)=\"changeMethod()\">Change Child Method</button>\n</div>\n\n<app-childs></app-childs>'\n})\n\nexport class AppComponent implements OnInit {\n  username=\"username\";\n  @ViewChild('box', {static: false}) box:ElementRef\n  constructor(){}\n\n  ngOnInit(){ }\n  ngAfterViewInit(){\n    // console.log(this.box);\n    // this.box.nativeElement.style.backgroundColor=\"blue\";\n    // this.box.nativeElement.classList=\"viewChild accept class\";\n    // this.box.nativeElement.innerHTML=\"Can change innerHTML value\";\n\n    console.log(this.child)\n  }\n\n  @ViewChild(Child, {static: false}) child:Child;\n  changeProperty(){\n    this.child.username = \"Mukesh\"\n  }\n\n  changeMethod(){\n    this.child.clickMe()\n  }\n}`.trim();\n\n\n\n\nclass AngularDir extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. ViewProvider</h3>\n              <p>\n                viewProviders property allows us to make providers available only for the component’s view.\n                When we want to use a class in our component that is defined outside the @Component () decorator function, then, first of all, we need to inject this class into our component, and we can achieve this with the help of the \"viewProvider\" property of a component.\n              </p>\n\n              <div style={titles}>\n                <PrismCode\n                  code={myProvider}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Providers have services list which use by component.</h3>\n              If component need any service than it ask to injector not to Promises, Injector will create that service by getting blue-print from Promises, But if injector have that service instance than directly provide to component.\n              <br />\n              <br />\n\n              <h3>2. ViewChild</h3>\n              ViewChild is a decorator for Angular component variables, which allow to bind child component data and method.\n              <br />\n              <ul>\n                <li>are used for component communication. If a parent component want to access child\n                  component then use ViewChild. Any component, directive or element which is part of a template\n                  is ViewChild.</li>\n                <li>ViewChild() decorator can be used to get the first element or directive matching the selector\n                  from the view DOM. @ViewChild() provides the instance of another component or directive in a\n                  parent component and then parent component can access the method and properties of that\n                  component or directive.</li>\n              </ul>\n              <br />\n              Use @ViewChild with ElementRef or TemplateRef.\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={viewChild}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(AngularDir));\n"]},"metadata":{},"sourceType":"module"}