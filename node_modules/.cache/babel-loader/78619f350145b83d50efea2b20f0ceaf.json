{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/pythone/deeppy/tuples.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst createTuples = `\nmy_tuple = (\"Max\", 28, \"New York\")\nmy_tuple_2 = \"Linda\", 25, \"Miami\"                                              # Parentheses are optional\nmy_tuple_3 = (25, 1, 2, 3, 4,)\n\nx = my_tuple.count('Max')\nx = my_tuple[-1]\nx = my_tuple.index(28)                                                         # Return index of first item of 28.\nx = len(my_tuple)\nx = max(my_tuple_3)\nx = min(my_tuple_3)\nx = any(my_tuple_3)\nx = all(my_tuple_3)\nx = enumerate(my_tuple_3)\nx = sum(my_tuple_3)\nx = sorted(my_tuple_3)\nx = tuple(my_tuple_3)                                                         # Convert an iterable to a tuple.\n\nname, age, city = my_tuple\n\nprint(x)\nprint(name, age, city)\n\n\n#2\ntuple_4 = tuple([1,2,3])                     # convert an iterable (list, dict, string) with the built-in tuple function\nprint(tuple_4)`.trim();\nconst usefuls = `\nmy_tuple = ('a', 'b') * 5                                          \nprint(my_tuple)\n\n\n#2 convert list to a tuple.\nmy_list = ['a', 'b', 'c', 'd']\nlist_to_tuple = tuple(my_list)\nprint(list_to_tuple)\n\ntuple_to_list = list(list_to_tuple)\nprint(tuple_to_list)\n\n\n#3 convert string to tuple.\nstring_to_tuple = tuple('Hello')\nprint(string_to_tuple)`.trim();\nconst unpack = `\nmy_tuple = (0, 1, 2, 3, 4, 5)\nfirst, *items_between, last = my_tuple\nprint(first, items_between, last)\n\n\n#2. Nested tuples\na = ((0, 1), ('age', 'height'))\nprint(a[0])\n`.trim();\nconst compare = `\n# compare the size\nimport sys\nmy_list = [0, 1, 2, \"hello\", True]\nmy_tuple = (0, 1, 2, \"hello\", True)\nprint(sys.getsizeof(my_list), \"bytes\")\nprint(sys.getsizeof(my_tuple), \"bytes\")\n\n# compare the execution time of a list vs. tuple creation statement\nimport timeit\nprint(timeit.timeit(stmt=\"[0, 1, 2, 3, 4, 5]\", number=1000000))\nprint(timeit.timeit(stmt=\"(0, 1, 2, 3, 4, 5)\", number=1000000))`.trim();\nconst list = `\nmy_list = [\"banana\", \"cherry\", \"apple\", 5, True, 0, 1, 1]\nprint(my_list)\n\nlist_2 = list()                                                       # Or create an empty list with the list function\nprint(list_2)\n\nx = my_list.append(\"orange\")                                              \nx = my_list.index(1)                                              \nx = my_list.insert(1, \"blueberry\")                                        \nx = my_list.pop()                                                        \nx = my_list.remove(\"cherry\")                                              \nx = my_list.clear()                                                       \nx = my_list.reverse()                                                    \nx = my_list.sort()  \nx = my_list.count(0)  \nx = sum(my_list)  \nx = max(my_list)  \nx = min(my_list)  \nx = all(my_list)  \nx = any(my_list)  \nx = len(my_list)  \nx = enumerate(my_list)  \n\nprint(x)  \n\n\nlist_with_zeros = [0] * 5                                             # create list with repeated elements\nlist_concat = list_with_zeros + my_list\nstring_to_list = list('Hello')                                        # convert string to list\n`.trim();\nconst copylists = `\nlist_org = [\"banana\", \"cherry\", \"apple\"]\nlist_copy = list_org.copy()\nlist_copy.append(True)                                                # modifying the copy not affects the original\n\nprint(list_org)\nprint(list_copy)\n`.trim();\nconst comprehension = `\na = [1, 2, 3, 4, 5, 6, 7, 8]\nb = [i * i for i in a] \nprint(b)\n\n\n# nested Lists\na = [[1, 2], [3, 4]]\nprint(a)\nprint(a[0])\n`.trim();\nconst format = `\nmy_set = {\"apple\", \"banana\", \"cherry\"}\nmy_set_2 = set([\"one\", \"two\", \"three\"])                         # or use the set function and create from an iterable\nmy_set_3 = set(\"aaabbbcccdddeeeeeffff\")\n\nmy_set.add(\"three\") \nmy_set.remove(\"three\") \nmy_set.discard(\"three\")                                         # removes x\nmy_set.pop()                                                    # removes x\nmy_set.clear()  \n\nprint(my_set)\n`.trim();\nconst unions = `\nodds = {1, 3, 5, 7, 9}\nevens = {0, 2, 4, 6, 8}\n\nu = odds.union(evens)\ni = odds.intersection(evens)\n\nprint(u)`.trim();\nconst differences = `\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nsetB = {1, 2, 3, 10, 11, 12}\n\ndiff_set = setA.difference(setB)\ndiff_set = setB.difference(setA)\ndiff_set = setA.symmetric_difference(setB)\ndiff_set = setB.symmetric_difference(setA)\nprint(diff_set)`.trim();\nconst updatings = `\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nsetB = {1, 2, 3, 10, 11, 12}\n\nsetA.update(setB)\n\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nsetA.intersection_update(setB)\n\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nsetA.difference_update(setB)\n\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nsetA.symmetric_difference_update(setB)\n\nsetA.update([1, 2, 3, 4, 5, 6])`.trim();\nconst subsets = `\nsetA = {1, 2, 3, 4, 5, 6}\nsetB = {1, 2, 3}\n\nprint(setA.issubset(setB))\nprint(setB.issubset(setA))                                  # issubset(setX): Returns True if setX contains the set\n\n\nprint(setA.issuperset(setB))                                # issuperset(setX): Returns True if the set contains setX\nprint(setB.issuperset(setA))\n\n\nsetC = {7, 8, 9}\nprint(setA.isdisjoint(setB))                                # True if both sets have a null intersection\nprint(setA.isdisjoint(setC))`.trim();\nconst frozenset = `\nodds = frozenset({1, 3, 5, 7, 9})\nevens = frozenset({0, 2, 4, 6, 8})\n\nprint(odds.union(evens))\nprint(odds.intersection(evens))\nprint(odds.difference(evens))`.trim();\nconst create = `\nmy_dict = {\"name\":\"Max\", \"age\":28, \"city\":\"New York\"}\nmy_dict_2 = dict(name=\"Lisa\", age=27, city=\"Boston\")    \n     \nname_in_dict = my_dict[\"name\"]    \nmy_dict[\"email\"] = \"max@xyz.com\"                                          # add a new key.\nmy_dict[\"email\"] = \"coolmax@xyz.com\"                                      # overwrite the existing key.\ndel my_dict[\"email\"]                                                      # delete a key-value pair.\n\nprint(my_dict)\nprint(\"popped value:\", my_dict.pop(\"age\"))                                # removes the last inserted key-value pair. \nprint(\"popped item:\", my_dict.popitem())\n`.trim();\nconst checkItem = `\nmy_dict = {\"name\":\"Max\", \"age\":28, \"city\":\"New York\"}\n\nif \"name\" in my_dict:\n    print(my_dict[\"name\"])\n\ntry:\n    print(my_dict[\"firstname\"])\nexcept KeyError:\n    print(\"No key found\")`.trim();\nconst looping = `\nfor key in my_dict:\n    print(key, my_dict[key])\n\n\nfor key in my_dict.keys():\n    print(key)\n\n\nfor value in my_dict.values():                                                    # loop over values\n    print(value)\n\n\nfor key, value in my_dict.items():                                                # loop over keys and values\n    print(key, value)`.trim();\nconst mergrs = `\nmy_dict = {\"name\":\"Max\", \"age\":28, \"email\":\"max@xyz.com\"}\nmy_dict_2 = dict(name=\"Lisa\", age=27, city=\"Boston\")\n\nmy_dict.update(my_dict_2)\nprint(my_dict)`.trim();\nconst possibles = `\nmy_dict = {3: 9, 6: 36, 9:81}                                   # use numbers as key, but be careful\nprint(my_dict[3], my_dict[6], my_dict[9])\n\nmy_tuple = (8, 7)                                               # use a tuple with immutable elements (e.g. number, string)\nmy_dict = {my_tuple: 15}\n\nprint(my_dict[my_tuple])\nprint(my_dict[8, 7])\n\n\n# my_list = [8, 7]                                              # a list is not possible because it is not immutable\n# my_dict = {my_list: 15}`.trim();\n\nclass Tuples extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, \"Tuple: \"), \"A tuple is a collection of objects which is ordered and immutable. \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, \"my_tuple = (\\\"Max\\\", 28, \\\"New York\\\")\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, \"Values of a tuple are separated by \\u2018commas\\u2019. Although it is not necessary.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, \"Creation of tuple without the use of parentheses is known as Tuple Packing.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, \"Add/ change items, Not possible and will raise a TypeError.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, \"List: \"), \"List is a collection data type which is ordered and mutable.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, \"my_list = [\\\"banana\\\", \\\"cherry\\\", \\\"apple\\\"]\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, \"Useful for preserving a sequence of data and further iterating over it.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, \"Set: \"), \"A Set is an unordered , unindexed, mutable, and has no duplicate elements.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, \"Use curly braces or the built-in set function to create a set.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, \"An empty set cannot be created with Curly braces, as this is interpreted as dict use set().\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, \"Dictionary: \"), \"Is an unordered, mutable and indexed. No duplicate members.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, \"Collection of key-value pairs.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, \"Dictionary keys are case sensitive.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, \"Create a dictionary with braces, or with the built-in dict funtion.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, \"Reasons to use a tuple over a list\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, \"Use tuple for heterogeneous (different) datatypes and list for homogeneous datatypes.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, \"Since tuple are immutable, iterating through tuple is faster than list.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, \"Tuples with their immutable elements can be used as key for a dictionary. This is not possible with lists.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, \"Create a tuple\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, \"Special case:\"), \" A tuple with only one element needs to have a comma at the end, otherwise it is not recognized as tuple\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: createTuples,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, \"Tuple Usefule methods\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: usefuls,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, \"Unpack tuple\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, \"Number of variables have to match number of tuple elements.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, \"Unpack multiple elements to a list with *.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, \"Nested tuples: \"), \"Tuples can contain other tuples (or other container types).\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: unpack,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, \"Compare tuple and list\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: compare,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, \"Creating A List\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }, \"Extend() :\"), \"Add all elements of a list to the another list.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, \"copy() :\"), \"Returns a copy of the list.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, \"reduce() :\"), \"apply a particular function passed in its argument to all of the list elements stores the intermediate result and only returns the final summation value.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, \"ord() :\"), \"Returns an integer representing the Unicode code point of the given Unicode character.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, \"cmp() :\"), \"This function returns 1, if first list is \\u201Cgreater\\u201D than second list.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, \"enumerate() :\"), \"Returns enumerate object of list.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, \"accumulate() :\"), \"apply a particular function passed in its argument to all of the list elements returns a list containing the intermediate results.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: list,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }, \"Copy a list\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: copylists,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }, \"List comprehension\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, \"A elegant and fast way to create a new list from an existing list.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, \"List comprehension consists of an expression followed by a for statement inside square brackets.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: comprehension,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }, \"Sets\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }, \"update() :\"), \"Updates a set with the union of itself and others.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }, \"union() :\"), \"Returns the union of sets in a new set.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }, \"difference() :\"), \"Returns the difference of two or more sets as a new set.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }, \"difference_update() :\"), \"Removes all elements of another set from this set.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }, \"discard() :\"), \"Removes an element from set if it is a member. (Do nothing if the element is not in set).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }, \"intersection() :\"), \"Returns the intersection of two sets as a new set.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    }, \"intersection_update() :\"), \"Updates the set with the intersection of itself and another.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }, \"isdisjoint() :\"), \"Returns True if two sets have a null intersection.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }, \"issubset() :\"), \"Returns True if another set contains this set.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }, \"issuperset() :\"), \"Returns True if this set contains another set.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }, \"symmetric_difference() :\"), \"Returns the symmetric difference of two sets as a new set.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }, \"symmetric_difference_update() :\"), \"Updates a set with the symmetric difference of itself and another.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: format,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }, \"Union and Intersection\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }, \"union() :\"), \" combine elements from both sets, no duplication. This does not change the two sets\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }, \"intersection():\"), \" take elements that are in both sets\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: unions,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }, \"Difference of sets\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    }, \"difference() :\"), \" returns a set with all the elements from the setA that are not in setB.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }), \"A.difference(B) is not the same as B.difference(A)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    }, \"symmetric_difference() :\"), \" returns a set with all the elements that are in setA and setB but not in both\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    }), \"A.symmetric_difference(B) = B.symmetric_difference(A)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: differences,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    }, \"Updating sets\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    }, \"update() :\"), \" Update the set by adding elements from another set.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    }, \"intersection_update() :\"), \" Update the set by keeping only the elements found in both\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500\n      },\n      __self: this\n    }, \"difference_update() :\"), \" Update the set by removing elements found in another set.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502\n      },\n      __self: this\n    }, \"symmetric_difference_update() :\"), \" Update the set by only keeping the elements found in either set, but not in both\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, \"Note:\"), \" all update methods also work with other iterables as argument, e.g lists, tuples\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: updatings,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }, \"Subset, Superset, and Disjoint\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: subsets,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    }, \"Frozenset\"), \"Frozen set is just an immutable version of normal set. While elements of a set can be modified at any time, elements of frozen set remains the same after creation.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529\n      },\n      __self: this\n    }, \"my_frozenset = frozenset(iterable)\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: frozenset,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }, \"Dictionaries\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541\n      },\n      __self: this\n    }, \"get() :\"), \"It is a conventional method to access a value for a key.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }, \"dictionary_name.values() :\"), \"returns a list of all the values available in a given dictionary.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }, \"str() :\"), \"Produces a printable string representation of a dictionary.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    }, \"update() :\"), \"Adds dictionary dict2\\u2019s key-values pairs to dict.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }, \"setdefault() :\"), \"Set dict[key]=default if key is not already in dict.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }, \"keys() :\"), \"Returns list of dictionary dict\\u2019s keys.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }, \"items() :\"), \"Returns a list of dict\\u2019s (key, value) tuple pairs.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548\n      },\n      __self: this\n    }, \"has_key() :\"), \"Returns true if key in dictionary dict, false otherwise.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }, \"fromkeys() :\"), \"Create a new dictionary with keys from seq and values set to value.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    }, \"type() :\"), \"Returns the type of the passed variable.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    }, \"cmp() :\"), \"Compares elements of both dict.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: create,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    }, \"Check for keys\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: checkItem,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574\n      },\n      __self: this\n    }, \"Looping through dictionary\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: looping,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584\n      },\n      __self: this\n    }, \"Merge two dictionaries\"), \"Use the update() method to merge 2 dicts existing keys are overwritten, new keys are added\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: mergrs,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596\n      },\n      __self: this\n    }, \"Possible key types\"), \"Any immutable type, like strings or numbers can be used as a key. Also, a tuple can be used if it contains only immutable elements.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599\n      },\n      __self: this\n    }), \"do not mistake the keys as indices of a list, e.g my_dict[0] is not possible here\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: possibles,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Tuples);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/pythone/deeppy/tuples.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","createTuples","trim","usefuls","unpack","compare","list","copylists","comprehension","format","unions","differences","updatings","subsets","frozenset","create","checkItem","looping","mergrs","possibles","Tuples","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst createTuples = `\nmy_tuple = (\"Max\", 28, \"New York\")\nmy_tuple_2 = \"Linda\", 25, \"Miami\"                                              # Parentheses are optional\nmy_tuple_3 = (25, 1, 2, 3, 4,)\n\nx = my_tuple.count('Max')\nx = my_tuple[-1]\nx = my_tuple.index(28)                                                         # Return index of first item of 28.\nx = len(my_tuple)\nx = max(my_tuple_3)\nx = min(my_tuple_3)\nx = any(my_tuple_3)\nx = all(my_tuple_3)\nx = enumerate(my_tuple_3)\nx = sum(my_tuple_3)\nx = sorted(my_tuple_3)\nx = tuple(my_tuple_3)                                                         # Convert an iterable to a tuple.\n\nname, age, city = my_tuple\n\nprint(x)\nprint(name, age, city)\n\n\n#2\ntuple_4 = tuple([1,2,3])                     # convert an iterable (list, dict, string) with the built-in tuple function\nprint(tuple_4)`.trim();\n\nconst usefuls = `\nmy_tuple = ('a', 'b') * 5                                          \nprint(my_tuple)\n\n\n#2 convert list to a tuple.\nmy_list = ['a', 'b', 'c', 'd']\nlist_to_tuple = tuple(my_list)\nprint(list_to_tuple)\n\ntuple_to_list = list(list_to_tuple)\nprint(tuple_to_list)\n\n\n#3 convert string to tuple.\nstring_to_tuple = tuple('Hello')\nprint(string_to_tuple)`.trim();\n\nconst unpack = `\nmy_tuple = (0, 1, 2, 3, 4, 5)\nfirst, *items_between, last = my_tuple\nprint(first, items_between, last)\n\n\n#2. Nested tuples\na = ((0, 1), ('age', 'height'))\nprint(a[0])\n`.trim();\n\nconst compare = `\n# compare the size\nimport sys\nmy_list = [0, 1, 2, \"hello\", True]\nmy_tuple = (0, 1, 2, \"hello\", True)\nprint(sys.getsizeof(my_list), \"bytes\")\nprint(sys.getsizeof(my_tuple), \"bytes\")\n\n# compare the execution time of a list vs. tuple creation statement\nimport timeit\nprint(timeit.timeit(stmt=\"[0, 1, 2, 3, 4, 5]\", number=1000000))\nprint(timeit.timeit(stmt=\"(0, 1, 2, 3, 4, 5)\", number=1000000))`.trim();\n\nconst list = `\nmy_list = [\"banana\", \"cherry\", \"apple\", 5, True, 0, 1, 1]\nprint(my_list)\n\nlist_2 = list()                                                       # Or create an empty list with the list function\nprint(list_2)\n\nx = my_list.append(\"orange\")                                              \nx = my_list.index(1)                                              \nx = my_list.insert(1, \"blueberry\")                                        \nx = my_list.pop()                                                        \nx = my_list.remove(\"cherry\")                                              \nx = my_list.clear()                                                       \nx = my_list.reverse()                                                    \nx = my_list.sort()  \nx = my_list.count(0)  \nx = sum(my_list)  \nx = max(my_list)  \nx = min(my_list)  \nx = all(my_list)  \nx = any(my_list)  \nx = len(my_list)  \nx = enumerate(my_list)  \n\nprint(x)  \n\n\nlist_with_zeros = [0] * 5                                             # create list with repeated elements\nlist_concat = list_with_zeros + my_list\nstring_to_list = list('Hello')                                        # convert string to list\n`.trim();\n\nconst copylists = `\nlist_org = [\"banana\", \"cherry\", \"apple\"]\nlist_copy = list_org.copy()\nlist_copy.append(True)                                                # modifying the copy not affects the original\n\nprint(list_org)\nprint(list_copy)\n`.trim();\n\n\nconst comprehension = `\na = [1, 2, 3, 4, 5, 6, 7, 8]\nb = [i * i for i in a] \nprint(b)\n\n\n# nested Lists\na = [[1, 2], [3, 4]]\nprint(a)\nprint(a[0])\n`.trim();\n\nconst format = `\nmy_set = {\"apple\", \"banana\", \"cherry\"}\nmy_set_2 = set([\"one\", \"two\", \"three\"])                         # or use the set function and create from an iterable\nmy_set_3 = set(\"aaabbbcccdddeeeeeffff\")\n\nmy_set.add(\"three\") \nmy_set.remove(\"three\") \nmy_set.discard(\"three\")                                         # removes x\nmy_set.pop()                                                    # removes x\nmy_set.clear()  \n\nprint(my_set)\n`.trim();\n\nconst unions = `\nodds = {1, 3, 5, 7, 9}\nevens = {0, 2, 4, 6, 8}\n\nu = odds.union(evens)\ni = odds.intersection(evens)\n\nprint(u)`.trim();\n\nconst differences = `\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nsetB = {1, 2, 3, 10, 11, 12}\n\ndiff_set = setA.difference(setB)\ndiff_set = setB.difference(setA)\ndiff_set = setA.symmetric_difference(setB)\ndiff_set = setB.symmetric_difference(setA)\nprint(diff_set)`.trim();\n\nconst updatings = `\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nsetB = {1, 2, 3, 10, 11, 12}\n\nsetA.update(setB)\n\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nsetA.intersection_update(setB)\n\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nsetA.difference_update(setB)\n\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nsetA.symmetric_difference_update(setB)\n\nsetA.update([1, 2, 3, 4, 5, 6])`.trim();\n\nconst subsets = `\nsetA = {1, 2, 3, 4, 5, 6}\nsetB = {1, 2, 3}\n\nprint(setA.issubset(setB))\nprint(setB.issubset(setA))                                  # issubset(setX): Returns True if setX contains the set\n\n\nprint(setA.issuperset(setB))                                # issuperset(setX): Returns True if the set contains setX\nprint(setB.issuperset(setA))\n\n\nsetC = {7, 8, 9}\nprint(setA.isdisjoint(setB))                                # True if both sets have a null intersection\nprint(setA.isdisjoint(setC))`.trim();\n\nconst frozenset = `\nodds = frozenset({1, 3, 5, 7, 9})\nevens = frozenset({0, 2, 4, 6, 8})\n\nprint(odds.union(evens))\nprint(odds.intersection(evens))\nprint(odds.difference(evens))`.trim();\n\nconst create = `\nmy_dict = {\"name\":\"Max\", \"age\":28, \"city\":\"New York\"}\nmy_dict_2 = dict(name=\"Lisa\", age=27, city=\"Boston\")    \n     \nname_in_dict = my_dict[\"name\"]    \nmy_dict[\"email\"] = \"max@xyz.com\"                                          # add a new key.\nmy_dict[\"email\"] = \"coolmax@xyz.com\"                                      # overwrite the existing key.\ndel my_dict[\"email\"]                                                      # delete a key-value pair.\n\nprint(my_dict)\nprint(\"popped value:\", my_dict.pop(\"age\"))                                # removes the last inserted key-value pair. \nprint(\"popped item:\", my_dict.popitem())\n`.trim();\n\nconst checkItem = `\nmy_dict = {\"name\":\"Max\", \"age\":28, \"city\":\"New York\"}\n\nif \"name\" in my_dict:\n    print(my_dict[\"name\"])\n\ntry:\n    print(my_dict[\"firstname\"])\nexcept KeyError:\n    print(\"No key found\")`.trim();\n\nconst looping = `\nfor key in my_dict:\n    print(key, my_dict[key])\n\n\nfor key in my_dict.keys():\n    print(key)\n\n\nfor value in my_dict.values():                                                    # loop over values\n    print(value)\n\n\nfor key, value in my_dict.items():                                                # loop over keys and values\n    print(key, value)`.trim();\n\nconst mergrs = `\nmy_dict = {\"name\":\"Max\", \"age\":28, \"email\":\"max@xyz.com\"}\nmy_dict_2 = dict(name=\"Lisa\", age=27, city=\"Boston\")\n\nmy_dict.update(my_dict_2)\nprint(my_dict)`.trim();\n\nconst possibles = `\nmy_dict = {3: 9, 6: 36, 9:81}                                   # use numbers as key, but be careful\nprint(my_dict[3], my_dict[6], my_dict[9])\n\nmy_tuple = (8, 7)                                               # use a tuple with immutable elements (e.g. number, string)\nmy_dict = {my_tuple: 15}\n\nprint(my_dict[my_tuple])\nprint(my_dict[8, 7])\n\n\n# my_list = [8, 7]                                              # a list is not possible because it is not immutable\n# my_dict = {my_list: 15}`.trim();\n\nclass Tuples extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3></h3>\n              <ul>\n                <li><b>Tuple: </b>A tuple is a collection of objects which is ordered and immutable. </li>\n                <ul>\n                  <li><b>my_tuple = (\"Max\", 28, \"New York\")</b></li>\n                  <li>Values of a tuple are separated by ‘commas’. Although it is not necessary.</li>\n                  <li>Creation of tuple without the use of parentheses is known as Tuple Packing.</li>\n                  <li>Add/ change items, Not possible and will raise a TypeError.</li>\n                </ul>\n                <br />\n\n                <li><b>List: </b>List is a collection data type which is ordered and mutable.</li>\n                <ul>\n                  <li><b>my_list = [\"banana\", \"cherry\", \"apple\"]</b></li>\n                  <li>Useful for preserving a sequence of data and further iterating over it.</li>\n                </ul>\n\n                <br />\n                <li><b>Set: </b>A Set is an unordered , unindexed, mutable, and has no duplicate elements.</li>\n                <ul>\n                  <li>Use curly braces or the built-in set function to create a set.</li>\n                  <li>An empty set cannot be created with Curly braces, as this is interpreted as dict use set().</li>\n                </ul>\n\n                <br />\n                <li><b>Dictionary: </b>Is an unordered, mutable and indexed. No duplicate members.</li>\n                <ul>\n                  <li>Collection of key-value pairs.</li>\n                  <li>Dictionary keys are case sensitive.</li>\n                  <li>Create a dictionary with braces, or with the built-in dict funtion.</li>\n                </ul>\n              </ul>\n              <br />\n\n              <b>Reasons to use a tuple over a list</b>\n              <ul>\n                <li>Use tuple for heterogeneous (different) datatypes and list for homogeneous datatypes.</li>\n                <li>Since tuple are immutable, iterating through tuple is faster than list.</li>\n                <li>Tuples with their immutable elements can be used as key for a dictionary. This is not possible with lists.</li>\n              </ul>\n              <br />\n\n              <h3>Create a tuple</h3>\n              <b>Special case:</b> A tuple with only one element needs to have a comma at the end,\n              otherwise it is not recognized as tuple\n              <div style={titles}>\n                <PrismCode\n                  code={createTuples}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Tuple Usefule methods</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={usefuls}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Unpack tuple</h3>\n              <ul>\n                <li>Number of variables have to match number of tuple elements.</li>\n                <li>Unpack multiple elements to a list with *.</li>\n                <li><b>Nested tuples: </b>Tuples can contain other tuples (or other container types).</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={unpack}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Compare tuple and list</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={compare}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Creating A List</h3>\n              <ul>\n                <li><b>Extend() :</b>Add all elements of a list to the another list.</li>\n                <li><b>copy() :</b>Returns a copy of the list.</li>\n                <li><b>reduce() :</b>apply a particular function passed in its argument to all of the list elements stores the intermediate result and only returns the final summation value.</li>\n                <li><b>ord() :</b>Returns an integer representing the Unicode code point of the given Unicode character.</li>\n                <li><b>cmp() :</b>This function returns 1, if first list is “greater” than second list.</li>\n                <li><b>enumerate() :</b>Returns enumerate object of list.</li>\n                <li><b>accumulate() :</b>apply a particular function passed in its argument to all of the list elements returns a list containing the intermediate results.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={list}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Copy a list</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={copylists}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>List comprehension</h3>\n              <ul>\n                <li>A elegant and fast way to create a new list from an existing list.</li>\n                <li>List comprehension consists of an expression followed by a for statement inside square brackets.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={comprehension}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Sets</h3>\n              <ul>\n                <li><b>update() :</b>Updates a set with the union of itself and others.</li>\n                <li><b>union() :</b>Returns the union of sets in a new set.</li>\n                <li><b>difference() :</b>Returns the difference of two or more sets as a new set.</li>\n                <li><b>difference_update() :</b>Removes all elements of another set from this set.</li>\n                <li><b>discard() :</b>Removes an element from set if it is a member. (Do nothing if the element is not in set).</li>\n                <li><b>intersection() :</b>Returns the intersection of two sets as a new set.</li>\n                <li><b>intersection_update() :</b>Updates the set with the intersection of itself and another.</li>\n                <li><b>isdisjoint() :</b>Returns True if two sets have a null intersection.</li>\n                <li><b>issubset() :</b>Returns True if another set contains this set.</li>\n                <li><b>issuperset() :</b>Returns True if this set contains another set.</li>\n                <li><b>symmetric_difference() :</b>Returns the symmetric difference of two sets as a new set.</li>\n                <li><b>symmetric_difference_update() :</b>Updates a set with the symmetric difference of itself and another.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={format}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Union and Intersection</h3>\n              <b>union() :</b> combine elements from both sets, no duplication. This does not change the two sets\n              <br />\n              <b>intersection():</b> take elements that are in both sets\n              <div style={titles}>\n                <PrismCode\n                  code={unions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Difference of sets</h3>\n              <b>difference() :</b> returns a set with all the elements from the setA that are not in setB.\n              <br />\n              A.difference(B) is not the same as B.difference(A)\n              <br />\n              <br />\n              <b>symmetric_difference() :</b> returns a set with all the elements that are in setA and setB but not in both\n              <br />\n              A.symmetric_difference(B) = B.symmetric_difference(A)\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={differences}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Updating sets</h3>\n              <b>update() :</b> Update the set by adding elements from another set.\n              <br />\n              <br />\n              <b>intersection_update() :</b> Update the set by keeping only the elements found in both\n              <br />\n              <b>difference_update() :</b> Update the set by removing elements found in another set.\n              <br />\n              <b>symmetric_difference_update() :</b> Update the set by only keeping the elements found in either set, but not in both\n              <br />\n              <br />\n              <b>Note:</b> all update methods also work with other iterables as argument, e.g lists, tuples\n              <div style={titles}>\n                <PrismCode\n                  code={updatings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Subset, Superset, and Disjoint</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={subsets}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Frozenset</h3>\n              Frozen set is just an immutable version of normal set. While elements of a set can be modified at any\n              time, elements of frozen set remains the same after creation.\n              <br />\n              <b>my_frozenset = frozenset(iterable)</b>\n              <div style={titles}>\n                <PrismCode\n                  code={frozenset}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Dictionaries</h3>\n              <ul>\n                <li><b>get() :</b>It is a conventional method to access a value for a key.</li>\n                <li><b>dictionary_name.values() :</b>returns a list of all the values available in a given dictionary.</li>\n                <li><b>str() :</b>Produces a printable string representation of a dictionary.</li>\n                <li><b>update() :</b>Adds dictionary dict2’s key-values pairs to dict.</li>\n                <li><b>setdefault() :</b>Set dict[key]=default if key is not already in dict.</li>\n                <li><b>keys() :</b>Returns list of dictionary dict’s keys.</li>\n                <li><b>items() :</b>Returns a list of dict’s (key, value) tuple pairs.</li>\n                <li><b>has_key() :</b>Returns true if key in dictionary dict, false otherwise.</li>\n                <li><b>fromkeys() :</b>Create a new dictionary with keys from seq and values set to value.</li>\n                <li><b>type() :</b>Returns the type of the passed variable.</li>\n                <li><b>cmp() :</b>Compares elements of both dict.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={create}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Check for keys</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={checkItem}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Looping through dictionary</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={looping}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Merge two dictionaries</h3>\n              Use the update() method to merge 2 dicts\n              existing keys are overwritten, new keys are added\n              <div style={titles}>\n                <PrismCode\n                  code={mergrs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Possible key types</h3>\n              Any immutable type, like strings or numbers can be used as a key. Also, a tuple can be used if it contains only immutable elements.\n              <br />\n              <br />\n              do not mistake the keys as indices of a list, e.g my_dict[0] is not possible here\n              <div style={titles}>\n                <PrismCode\n                  code={possibles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Tuples));\n"]},"metadata":{},"sourceType":"module"}