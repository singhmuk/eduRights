{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var config=\"\\nconst mongoose = require('mongoose');\\n\\nconst dbCon = mongoose.connect(process.env.MONGO_URL, {\\n    useNewUrlParser: true,\\n    useUnifiedTopology: true\\n  }, err =>{\\n    if(err) throw err;\\n    console.log('Connected to MongoDB')\\n  })\\n\\n\\n  module.exports = dbCon;\".trim();var models=\"\\nconst mongoose = require('mongoose');\\nconst Schems = mongoose.Schema;\\n\\nconst ItemSchema = new Schems({\\n  name: {type:String, required:true, minlength: [3, \\\"Length aleast 3 characters or longer\\\"]},\\n  rank: {type:Number, required: [true, \\\"Please provide a name to the bootcamp\\\"]},\\n  counts: [Number],\\n  isAdmin: { type: Boolean, required: true, default: false },\\n  followers: {type:Array, default:[]},\\n  desc: { type: String, max: 500 },\\n  img: { type: String },\\n  date: {type:Date, default:Date.now}\\n  students: [{ type: 'ObjectId', ref: 'Student' }],               //ref name == schemma name\\n  type: { type: String, required: true, default:'professional' }, //radio\\n},\\n{ timestamps: true })\\n\\nmodule.exports = Item = mongoose.model('item', ItemSchema);\".trim();var controllers=\"\\nconst express = require('express');\\nconst router = express.Router();\\nconst Item = require('../models/items');\\n\\n\\nrouter.getAll = async (req,res) => {\\n    try{\\n        Item.find()\\n             .sort({date:-1})\\n             .then(item=>res.json(item));\\n    }catch(err){\\n        console.log(err)\\n    }\\n}\\n\\nrouter.createItem = async (req,res) => {\\n    try{\\n        const newItem = new Item({\\n            name: req.body.name\\n        });\\n\\n        newItem.save().then(item => res.json(item));\\n    }catch(err){\\n        console.log(err)\\n    }\\n}\\n\\nrouter.getById = async (req,res) => {\\n    try{\\n        Item.findById(req.params.id)\\n            .then(item => res.json(item))\\n    }catch(err){\\n        console.log(err)\\n    }\\n}\\n\\nrouter.remove = async (req, res) => {\\n    Item.findByIdAndDelete(req.params.id)\\n        .then(item => item.remove()\\n        .then(() => res.json({success:true})))\\n}\\n\\nrouter.updates = async (req,res) => {\\n    Item.findByIdAndUpdate(req.params.id, {\\n        name:req.body.name\\n    }, {new:true}).then(data=>res.send(data))\\n}\\n\\n\\nmodule.exports = router;\".trim();var routes=\"\\nconst express = require('express');\\nconst router = express.Router();\\nconst ItemControllers = require('../controllers/items');\\n\\nrouter.route(\\\"/\\\").get(ItemControllers.getAll);\\nrouter.route(\\\"/:id\\\").get(ItemControllers.getById);\\nrouter.route(\\\"/\\\").post(ItemControllers.createItem);\\nrouter.route(\\\"/:id\\\").delete(ItemControllers.remove);\\nrouter.route(\\\"/:id\\\").put(ItemControllers.updates);\\n\\nmodule.exports = router;\".trim();var server=\"\\nconst express=require('express');\\nconst app=express();\\nrequire('dotenv').config();\\nconst dbCon = require('./config/db');\\nconst itemsRouter = require('./routes/items')\\n\\napp.use(express.urlencoded({extended:true}));\\napp.use(express.json());\\n\\ndbCon;\\n\\napp.use(\\\"/items\\\", itemsRouter);\\n\\nconst port = process.env.PORT;\\napp.listen(port,()=> console.log('Server is running on port '$'{port}'))\".trim();var students=\"\\nconst classSchema = new Schema({\\n  name: { type: String, unique: true },\\n  students: [{ type: 'ObjectId', ref: 'Student' }]\\n})\\n//students is refress like objectId not data in a class can be many students should be ref name == schemma name\\n\\nmodule.exports = mongoose.model(\\\"Class\\\", classSchema);\\n\\n\\n//studentSchema\\nconst studentSchema = new Schema({\\n  name: { type: String, unique: true },\\n  age: Number,\\n  subject: String,\\n})\\n\\nmodule.exports = mongoose.model(\\\"Student\\\", studentSchema);\\n\".trim();var controllersClass=\"\\nconst Class = require('../models/class');\\n\\nrouter.all = async (req, res) => {\\n    Class.find({}).populate('students').exec((err, docs) => {\\n      //populate fields which want to pass\\n      if (err) throw (err);\\n      res.json(docs)\\n    })\\n};\\n\\nrouter.createClass = async (req, res) => {\\n    let newClass = new Class();\\n    newClass.name = req.body.name;\\n    newClass.students = [];\\n    newClass.save((err) => {\\n      if (err) res.json({ \\\"error\\\": err });\\n      else res.json(newClass)\\n    })\\n};\\n\\nrouter.updateClass = async (req, res) => {\\n    Class.findOneAndUpdate({ _id: req.params.id },\\n      { $push: { students: req.body.studentsId } }, { new: true }, (err, doc) => {\\n        //$push used to push data in students array, we push studentsId\\n        if (err) throw (err);\\n        else res.json(doc)\\n      })\\n};\".trim();var controllersStudents=\"\\nconst Student = require('../models/students');\\n\\nrouter.all = async (req, res) => {\\n    Student.find({}).exec((err, docs) => {\\n      if (err) throw (err);\\n      res.json(docs)\\n    })\\n};\\n\\nrouter.createStudent = async (req, res) => {\\n    let student = new Student();\\n    student.name = req.body.name;\\n    student.age = req.body.age;\\n    student.subject = req.body.subject;\\n    student.save((err) => {\\n      if (err) res.json({ \\\"error\\\": err });\\n      else res.json(student)\\n    })\\n};\\n\\nrouter.updateStudent = async (req, res) => {\\n    Student.findOneAndUpdate({ _id: req.param.id },\\n      { $set: { age: req.body.age } }, { new: true }, (err, doc) => {\\n        if (err) throw (err);\\n        else res.json(doc)\\n      })\\n};\\n\\n// app.put('/students/:id', (req, res) => {\\n//   Student.findOneAndUpdate({ _id: req.param.id },\\n//     { $set: { age: req.body.age } }, { new: true }, (err, doc) => {\\n//       if (err) throw (err);\\n//       else res.json(doc)\\n//     })\\n// })\".trim();var classRoutes=\"\\nconst classCont = require('../controllers/class');\\n\\nrouter.route(\\\"/\\\").get(classCont.all);\\nrouter.route(\\\"/\\\").post(classCont.createClass);\\nrouter.route(\\\"/:id\\\").put(classCont.updateClass);\\n\\n\\n//Students Routes\\nconst express = require('express');\\nconst router = express.Router();\\nconst studentsCont = require('../controllers/students');\\n\\nrouter.route(\\\"/\\\").get(studentsCont.all);\\nrouter.route(\\\"/\\\").post(studentsCont.createStudent);\\nrouter.route(\\\"/:id\\\").put(studentsCont.updateStudent);\\n\".trim();var serverJoin=\"\\nconst classRoutes = require('./routes/classRoutes');\\nconst studetsRoutes = require('./routes/studentsRoutes');\\n\\napp.use(express.urlencoded({ extended: true }));\\napp.use(express.json());\\n\\ndbCon;\\n\\napp.use('/class', classRoutes);\\napp.use('/students', studetsRoutes);\\n\\nconst PORT = process.env.PORT;\\napp.listen(PORT, () => console.log('Server listening on port.'));\".trim();var modelsJoin=\"\\nconst courseSchema = new mongoose.Schema({\\n  _id: Number,\\n  name: String,\\n  category: String\\n});\\n\\nconst studentSchema = new mongoose.Schema({\\n  name: String,\\n  enroll: Number,\\n  courseId: Number\\n});\\n\\nconst Course = mongoose.model('course', courseSchema);\\nconst Student = mongoose.model('student', studentSchema);\\n\\nmodule.exports = { Student, Course }\\n\\n\\n//ItemsOp\\nconst ItemsOp = mongoose.Schema({\\n  name: String,\\n  date: new Date(),\\n  ItemsOps: [{ type: mongoose.Schema.ObjectId, ref: 'itemsOps' }]\\n});\\n\\nmodule.exports = mongoose.model('itemsOp', ItemsOp);\\n\\n\\n//ItemsOps\\nconst ItemsOps = mongoose.Schema({\\n  name: String,\\n  price: Number,\\n  ItemsOp: [{ type: mongoose.Schema.ObjectId, ref: 'itemsOp' }]\\n});\\n\\nmodule.exports = mongoose.model('itemsOps', ItemsOps);\\n\".trim();var controllersFinds=\"\\nconst { Student, Course } = require('../models/finds');\\n\\nvar dbcourse = [];\\nrouter.all = async (req, res, next) => {\\n    Course.find({ category: \\\"database\\\" })\\n      .then(data => {\\n        console.log(\\\"Database Courses:\\\", data)\\n\\n        data.map((d, k) => {\\n          dbcourse.push(d._id);\\n        })\\n\\n    Student.find({ courseId: { $in: dbcourse } })\\n      .then(data => {\\n        console.log(\\\"Students in Database Courses:\\\"+ data +\\\"dbcourse\\\", dbcourse)\\n      })\\n      .catch(error => {\\n        console.log(error);\\n      })\\n  })\\n};\".trim();var controllersItem=\"\\nconst Item = require('../models/item');\\n\\nrouter.all = async (req, res, next) => {\\n    Item.find()\\n      .populate({\\n        path: 'itemsOps',\\n        populate: { path: 'itemsOps' }\\n      })\\n      .sort({ date: -1 })\\n      .then(items => res.json(items));\\n};\\n\\nrouter.getOne = async (req, res, next) => {\\n    Item.findById(req.params.id)\\n      .sort({ date: -1 })\\n      .then(items => res.json(items));\\n};\\n\\nrouter.creates = async (req, res, next) => {\\n    const newItem = new Item({\\n      name: req.body.name\\n    });\\n\\n    newItem.save().then(item => res.json(item));\\n};\\n\\nrouter.update = async (req, res, next) => {\\n    Item.findByIdAndUpdate(req.params.id, {\\n      name: req.body.name,\\n    }, { new: true }).then(data => { res.send(data) })\\n};\\n\\nrouter.remove = async (req, res, next) => {\\n    Item.findById(req.params.id)\\n      .then(item => item.remove().then(() => res.json({ success: true })))\\n};\".trim();var controllersItemsOp=\"\\nconst Item = require('../models/itemsOp');\\n\\nrouter.allsorts = async (req, res, next) => {\\n    Item.find()\\n      .sort({ price: 1 })\\n      .then(items => res.json(items));\\n};\\n\\nrouter.creates = async (req, res, next) => {\\n    const newItem = new Item({\\n      name: req.body.name,\\n      price: req.body.price\\n    });\\n\\n    newItem.save().then(item => res.json(item));\\n};\\n\\n//Limit\\nrouter.limits = async (req, res, next) => {\\n    Item.find()\\n      .limit(2)\\n      .then(items => res.json(items));\\n};\\n\\n//filter Regx\\nrouter.filtersRegx = async (req, res, next) => {\\n  var query = { name: /^C/ };\\n  \\n    Item.find(query)\\n      .then(items => res.json(items));\\n};\\n\\n//filter \\nrouter.filters = async (req, res, next) => {\\n  var query = { name: \\\"Mobile\\\" };\\n    Item.find(query)\\n      .then(items => res.json(items));\\n};\\n\\n//left join\\nrouter.joins = async (req, res, next) => {\\n  var query = { name: \\\"Mobile\\\" };\\n    Item.find(query)\\n      .then(items => res.json(items));\\n};\".trim();var routesJoin=\"\\nconst itemRoutes = require('../controllers/finds');\\nrouter.route(\\\"/\\\").get(itemRoutes.all);\\n\\n\\n//itemRoutes\\nconst itemRoutes = require('../controllers/item');\\n\\nrouter.route(\\\"/\\\").get(itemRoutes.all);\\nrouter.route(\\\"/:id\\\").get(itemRoutes.getOne);\\nrouter.route(\\\"/\\\").post(itemRoutes.creates);\\nrouter.route(\\\"/:id\\\").patch(itemRoutes.update);\\nrouter.route(\\\"/:id\\\").delete(itemRoutes.remove);\\n\\n\\n//itemOpRoutes\\nconst itemRoutes = require('../controllers/itemsOp');\\n\\nrouter.route(\\\"/\\\").get(itemRoutes.allsorts);\\nrouter.route(\\\"/\\\").post(itemRoutes.creates);\\nrouter.route(\\\"/lmt\\\").get(itemRoutes.limits);\\nrouter.route(\\\"/fltrebx\\\").get(itemRoutes.filtersRegx);\\nrouter.route(\\\"/flt\\\").get(itemRoutes.filters);\\nrouter.route(\\\"/ljoins\\\").get(itemRoutes.joins);\\n\".trim();var serverJoinRef=\"\\nconst itemsOp = require('./routes/itemsOp');\\nconst findsOp = require('./routes/finds');\\n\\nconst app = express();\\n\\napp.use(express.urlencoded({ extended: true }));\\napp.use(express.json());\\n\\ndbCon;\\n\\napp.use('/itemsOp', itemsOp);\\napp.use('/finds', findsOp);\\n\\nconst port = process.env.PORT;\\napp.listen(port, () => console.log('Server listening on port.''));\".trim();var MongoCurd=/*#__PURE__*/function(_Component){_inherits(MongoCurd,_Component);function MongoCurd(){_classCallCheck(this,MongoCurd);return _possibleConstructorReturn(this,_getPrototypeOf(MongoCurd).apply(this,arguments));}_createClass(MongoCurd,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"MongoCurd\"),React.createElement(\"b\",null,\"config/db.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:config,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"models/items.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:models,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"controllers/items.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:controllers,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"routes/items.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:routes,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"server.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:server,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Join\"),React.createElement(\"b\",null,\"models/class.js\"),React.createElement(\"br\",null),React.createElement(\"b\",null,\"models/students.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:students,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"controllers/class.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:controllersClass,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"controllersStudents/students.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:controllersStudents,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"routes/items.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:classRoutes,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"server.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:serverJoin,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Join_Ref\"),React.createElement(\"b\",null,\"modelsJoin/finds.js\"),React.createElement(\"br\",null),React.createElement(\"b\",null,\"modelsJoin/item.js\"),React.createElement(\"br\",null),React.createElement(\"b\",null,\"modelsJoin/itemsOp.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:modelsJoin,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"controllers/finds.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:controllersFinds,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"controllers/item.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:controllersItem,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"controllers/itemsOp.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:controllersItemsOp,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"routes/find.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:routesJoin,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"server.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:serverJoinRef,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return MongoCurd;}(Component);export default withStyles(styles)(MongoCurd);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/mongoDB/deepMongodb/mongoCurd.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","config","trim","models","controllers","routes","server","students","controllersClass","controllersStudents","classRoutes","serverJoin","modelsJoin","controllersFinds","controllersItem","controllersItemsOp","routesJoin","serverJoinRef","MongoCurd","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst config = `\nconst mongoose = require('mongoose');\n\nconst dbCon = mongoose.connect(process.env.MONGO_URL, {\n    useNewUrlParser: true,\n    useUnifiedTopology: true\n  }, err =>{\n    if(err) throw err;\n    console.log('Connected to MongoDB')\n  })\n\n\n  module.exports = dbCon;`.trim();\n\nconst models = `\nconst mongoose = require('mongoose');\nconst Schems = mongoose.Schema;\n\nconst ItemSchema = new Schems({\n  name: {type:String, required:true, minlength: [3, \"Length aleast 3 characters or longer\"]},\n  rank: {type:Number, required: [true, \"Please provide a name to the bootcamp\"]},\n  counts: [Number],\n  isAdmin: { type: Boolean, required: true, default: false },\n  followers: {type:Array, default:[]},\n  desc: { type: String, max: 500 },\n  img: { type: String },\n  date: {type:Date, default:Date.now}\n  students: [{ type: 'ObjectId', ref: 'Student' }],               //ref name == schemma name\n  type: { type: String, required: true, default:'professional' }, //radio\n},\n{ timestamps: true })\n\nmodule.exports = Item = mongoose.model('item', ItemSchema);`.trim();\n\nconst controllers = `\nconst express = require('express');\nconst router = express.Router();\nconst Item = require('../models/items');\n\n\nrouter.getAll = async (req,res) => {\n    try{\n        Item.find()\n             .sort({date:-1})\n             .then(item=>res.json(item));\n    }catch(err){\n        console.log(err)\n    }\n}\n\nrouter.createItem = async (req,res) => {\n    try{\n        const newItem = new Item({\n            name: req.body.name\n        });\n\n        newItem.save().then(item => res.json(item));\n    }catch(err){\n        console.log(err)\n    }\n}\n\nrouter.getById = async (req,res) => {\n    try{\n        Item.findById(req.params.id)\n            .then(item => res.json(item))\n    }catch(err){\n        console.log(err)\n    }\n}\n\nrouter.remove = async (req, res) => {\n    Item.findByIdAndDelete(req.params.id)\n        .then(item => item.remove()\n        .then(() => res.json({success:true})))\n}\n\nrouter.updates = async (req,res) => {\n    Item.findByIdAndUpdate(req.params.id, {\n        name:req.body.name\n    }, {new:true}).then(data=>res.send(data))\n}\n\n\nmodule.exports = router;`.trim();\n\nconst routes = `\nconst express = require('express');\nconst router = express.Router();\nconst ItemControllers = require('../controllers/items');\n\nrouter.route(\"/\").get(ItemControllers.getAll);\nrouter.route(\"/:id\").get(ItemControllers.getById);\nrouter.route(\"/\").post(ItemControllers.createItem);\nrouter.route(\"/:id\").delete(ItemControllers.remove);\nrouter.route(\"/:id\").put(ItemControllers.updates);\n\nmodule.exports = router;`.trim();\n\nconst server = `\nconst express=require('express');\nconst app=express();\nrequire('dotenv').config();\nconst dbCon = require('./config/db');\nconst itemsRouter = require('./routes/items')\n\napp.use(express.urlencoded({extended:true}));\napp.use(express.json());\n\ndbCon;\n\napp.use(\"/items\", itemsRouter);\n\nconst port = process.env.PORT;\napp.listen(port,()=> console.log('Server is running on port '$'{port}'))`.trim();\n\nconst students = `\nconst classSchema = new Schema({\n  name: { type: String, unique: true },\n  students: [{ type: 'ObjectId', ref: 'Student' }]\n})\n//students is refress like objectId not data in a class can be many students should be ref name == schemma name\n\nmodule.exports = mongoose.model(\"Class\", classSchema);\n\n\n//studentSchema\nconst studentSchema = new Schema({\n  name: { type: String, unique: true },\n  age: Number,\n  subject: String,\n})\n\nmodule.exports = mongoose.model(\"Student\", studentSchema);\n`.trim();\n\nconst controllersClass = `\nconst Class = require('../models/class');\n\nrouter.all = async (req, res) => {\n    Class.find({}).populate('students').exec((err, docs) => {\n      //populate fields which want to pass\n      if (err) throw (err);\n      res.json(docs)\n    })\n};\n\nrouter.createClass = async (req, res) => {\n    let newClass = new Class();\n    newClass.name = req.body.name;\n    newClass.students = [];\n    newClass.save((err) => {\n      if (err) res.json({ \"error\": err });\n      else res.json(newClass)\n    })\n};\n\nrouter.updateClass = async (req, res) => {\n    Class.findOneAndUpdate({ _id: req.params.id },\n      { $push: { students: req.body.studentsId } }, { new: true }, (err, doc) => {\n        //$push used to push data in students array, we push studentsId\n        if (err) throw (err);\n        else res.json(doc)\n      })\n};`.trim();\n\nconst controllersStudents = `\nconst Student = require('../models/students');\n\nrouter.all = async (req, res) => {\n    Student.find({}).exec((err, docs) => {\n      if (err) throw (err);\n      res.json(docs)\n    })\n};\n\nrouter.createStudent = async (req, res) => {\n    let student = new Student();\n    student.name = req.body.name;\n    student.age = req.body.age;\n    student.subject = req.body.subject;\n    student.save((err) => {\n      if (err) res.json({ \"error\": err });\n      else res.json(student)\n    })\n};\n\nrouter.updateStudent = async (req, res) => {\n    Student.findOneAndUpdate({ _id: req.param.id },\n      { $set: { age: req.body.age } }, { new: true }, (err, doc) => {\n        if (err) throw (err);\n        else res.json(doc)\n      })\n};\n\n// app.put('/students/:id', (req, res) => {\n//   Student.findOneAndUpdate({ _id: req.param.id },\n//     { $set: { age: req.body.age } }, { new: true }, (err, doc) => {\n//       if (err) throw (err);\n//       else res.json(doc)\n//     })\n// })`.trim();\n\nconst classRoutes = `\nconst classCont = require('../controllers/class');\n\nrouter.route(\"/\").get(classCont.all);\nrouter.route(\"/\").post(classCont.createClass);\nrouter.route(\"/:id\").put(classCont.updateClass);\n\n\n//Students Routes\nconst express = require('express');\nconst router = express.Router();\nconst studentsCont = require('../controllers/students');\n\nrouter.route(\"/\").get(studentsCont.all);\nrouter.route(\"/\").post(studentsCont.createStudent);\nrouter.route(\"/:id\").put(studentsCont.updateStudent);\n`.trim();\n\nconst serverJoin = `\nconst classRoutes = require('./routes/classRoutes');\nconst studetsRoutes = require('./routes/studentsRoutes');\n\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\n\ndbCon;\n\napp.use('/class', classRoutes);\napp.use('/students', studetsRoutes);\n\nconst PORT = process.env.PORT;\napp.listen(PORT, () => console.log('Server listening on port.'));`.trim();\n\nconst modelsJoin = `\nconst courseSchema = new mongoose.Schema({\n  _id: Number,\n  name: String,\n  category: String\n});\n\nconst studentSchema = new mongoose.Schema({\n  name: String,\n  enroll: Number,\n  courseId: Number\n});\n\nconst Course = mongoose.model('course', courseSchema);\nconst Student = mongoose.model('student', studentSchema);\n\nmodule.exports = { Student, Course }\n\n\n//ItemsOp\nconst ItemsOp = mongoose.Schema({\n  name: String,\n  date: new Date(),\n  ItemsOps: [{ type: mongoose.Schema.ObjectId, ref: 'itemsOps' }]\n});\n\nmodule.exports = mongoose.model('itemsOp', ItemsOp);\n\n\n//ItemsOps\nconst ItemsOps = mongoose.Schema({\n  name: String,\n  price: Number,\n  ItemsOp: [{ type: mongoose.Schema.ObjectId, ref: 'itemsOp' }]\n});\n\nmodule.exports = mongoose.model('itemsOps', ItemsOps);\n`.trim();\n\nconst controllersFinds = `\nconst { Student, Course } = require('../models/finds');\n\nvar dbcourse = [];\nrouter.all = async (req, res, next) => {\n    Course.find({ category: \"database\" })\n      .then(data => {\n        console.log(\"Database Courses:\", data)\n\n        data.map((d, k) => {\n          dbcourse.push(d._id);\n        })\n\n    Student.find({ courseId: { $in: dbcourse } })\n      .then(data => {\n        console.log(\"Students in Database Courses:\"+ data +\"dbcourse\", dbcourse)\n      })\n      .catch(error => {\n        console.log(error);\n      })\n  })\n};`.trim();\n\nconst controllersItem = `\nconst Item = require('../models/item');\n\nrouter.all = async (req, res, next) => {\n    Item.find()\n      .populate({\n        path: 'itemsOps',\n        populate: { path: 'itemsOps' }\n      })\n      .sort({ date: -1 })\n      .then(items => res.json(items));\n};\n\nrouter.getOne = async (req, res, next) => {\n    Item.findById(req.params.id)\n      .sort({ date: -1 })\n      .then(items => res.json(items));\n};\n\nrouter.creates = async (req, res, next) => {\n    const newItem = new Item({\n      name: req.body.name\n    });\n\n    newItem.save().then(item => res.json(item));\n};\n\nrouter.update = async (req, res, next) => {\n    Item.findByIdAndUpdate(req.params.id, {\n      name: req.body.name,\n    }, { new: true }).then(data => { res.send(data) })\n};\n\nrouter.remove = async (req, res, next) => {\n    Item.findById(req.params.id)\n      .then(item => item.remove().then(() => res.json({ success: true })))\n};`.trim();\n\nconst controllersItemsOp = `\nconst Item = require('../models/itemsOp');\n\nrouter.allsorts = async (req, res, next) => {\n    Item.find()\n      .sort({ price: 1 })\n      .then(items => res.json(items));\n};\n\nrouter.creates = async (req, res, next) => {\n    const newItem = new Item({\n      name: req.body.name,\n      price: req.body.price\n    });\n\n    newItem.save().then(item => res.json(item));\n};\n\n//Limit\nrouter.limits = async (req, res, next) => {\n    Item.find()\n      .limit(2)\n      .then(items => res.json(items));\n};\n\n//filter Regx\nrouter.filtersRegx = async (req, res, next) => {\n  var query = { name: /^C/ };\n  \n    Item.find(query)\n      .then(items => res.json(items));\n};\n\n//filter \nrouter.filters = async (req, res, next) => {\n  var query = { name: \"Mobile\" };\n    Item.find(query)\n      .then(items => res.json(items));\n};\n\n//left join\nrouter.joins = async (req, res, next) => {\n  var query = { name: \"Mobile\" };\n    Item.find(query)\n      .then(items => res.json(items));\n};`.trim();\n\nconst routesJoin = `\nconst itemRoutes = require('../controllers/finds');\nrouter.route(\"/\").get(itemRoutes.all);\n\n\n//itemRoutes\nconst itemRoutes = require('../controllers/item');\n\nrouter.route(\"/\").get(itemRoutes.all);\nrouter.route(\"/:id\").get(itemRoutes.getOne);\nrouter.route(\"/\").post(itemRoutes.creates);\nrouter.route(\"/:id\").patch(itemRoutes.update);\nrouter.route(\"/:id\").delete(itemRoutes.remove);\n\n\n//itemOpRoutes\nconst itemRoutes = require('../controllers/itemsOp');\n\nrouter.route(\"/\").get(itemRoutes.allsorts);\nrouter.route(\"/\").post(itemRoutes.creates);\nrouter.route(\"/lmt\").get(itemRoutes.limits);\nrouter.route(\"/fltrebx\").get(itemRoutes.filtersRegx);\nrouter.route(\"/flt\").get(itemRoutes.filters);\nrouter.route(\"/ljoins\").get(itemRoutes.joins);\n`.trim();\n\nconst serverJoinRef = `\nconst itemsOp = require('./routes/itemsOp');\nconst findsOp = require('./routes/finds');\n\nconst app = express();\n\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\n\ndbCon;\n\napp.use('/itemsOp', itemsOp);\napp.use('/finds', findsOp);\n\nconst port = process.env.PORT;\napp.listen(port, () => console.log('Server listening on port.''));`.trim();\n\n\nclass MongoCurd extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>MongoCurd</h3>\n              <b>config/db.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={config}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>models/items.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={models}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>controllers/items.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={controllers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>routes/items.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={routes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>server.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={server}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <h3>Join</h3>\n              <b>models/class.js</b><br/>\n              <b>models/students.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={students}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>controllers/class.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={controllersClass}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>controllersStudents/students.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={controllersStudents}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>routes/items.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={classRoutes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>server.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={serverJoin}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <h3>Join_Ref</h3>\n              <b>modelsJoin/finds.js</b><br/>\n              <b>modelsJoin/item.js</b><br/>\n              <b>modelsJoin/itemsOp.js</b><br/>\n              <div style={titles}>\n                <PrismCode\n                  code={modelsJoin}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n\n              <b>controllers/finds.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={controllersFinds}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n\n              <b>controllers/item.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={controllersItem}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n\n              <b>controllers/itemsOp.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={controllersItemsOp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n\n              <b>routes/find.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={routesJoin}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n\n              <b>server.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={serverJoinRef}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(MongoCurd));\n"]},"metadata":{},"sourceType":"module"}