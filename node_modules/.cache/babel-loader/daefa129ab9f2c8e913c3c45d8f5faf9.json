{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/mongoDB/deepMongodb/mongodbMethods.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst UpdateDocs = `db.store.update({_id:1},{$set:{name:['python','javascript']}})\n`.trim();\nconst UpdateSome = `db.store.update({_id:1},{$set:{title:'oops'}})`.trim();\nconst Queries = `db.customers.remove({first_name:\"Mery\"});\ndb.customers.find({name:\"kitchen\"});\ndb.customers.find({$or:[{first_name:\"Mukesh\"},{first_name:\"Troy}]});\n`.trim();\nconst findCond = `db.customers.find({age:{$lt:40}});\ndb.customers.deleteOne({first_name:\"sherif\"});\ndb.customers.deleteMany({first_name:\"sherif\"});\n\n\ndb.customers.find({ age: { $gt: 40 }}); // gt or gte\ndb.customers.find({ age: { $lt: 40 }}); // lt or lte\ndb.customers.find().sort({ field: 1 }); // ascending order is indicated by 1\n\ndb.store.aggregate([{$match:{_id:5}},{$match:{'Scores':{$gt:90}}}]);`.trim();\nconst indexing = `\ndb.indexing.find();\n\n{\n  \"_id\" : ObjectId(\"5ef6f997c5897e0cab0063c1\"),\n  \"title\" : \"Mistborn\",\n  \"year\" : 2006,\n  \"author\" : {\n  \"firstname\" : \"Brandon\",\n  \"lastname\" : \"Sanderson\"\n  }\n }`.trim();\nconst ensureIndex = `db.indexing.ensureIndex({year:1})\n\nIn ensureIndex() method you can pass multiple fields, to create index on multiple fields\ndb.indexing.ensureIndex({first_name:1, last_name:-1});`.trim();\nconst getIndexes = `db.indexing.getIndexes()`.trim();\nconst dropIndex = `db.indexing.dropIndex({year:1})`.trim();\n\nclass MongodbMethods extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: deleteOne,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Update documents\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: UpdateDocs,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Update something is not in collections \"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: UpdateSome,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Queries\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Queries,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Find under the age of 40:\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: findCond,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Indexing\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), \"Indexes support the efficient resolution of queries. Without indexes, MongoDB must scan every document of a collection to select those documents that match the query statement. This scan is highly inefficient and require MongoDB to process a large volume of data.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), \"\\uF0B7 Indexes improve MongoDB query excution\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), \"\\uF0B7 Without index whole collextion must be scanned (COLLSCAN)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), \"\\uF0B7 Index stores sorted field values\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }), \"\\uF0B7 If appropriate index exists, MongoDB performs only index scan (IXSCAN)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), \"Indexes are special data structures, that store a small portion of the data set in an easy-to-traverse form. The index stores the value of a specific field or set of fields, ordered by the value of the field as specified in the index.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: indexing,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"Create Index in collection:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), \"To create an index you need to use ensureIndex() method. We can select any field to create index from collection.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: ensureIndex,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"The getIndexes() method method returns the description of all the indexes in the collection.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: getIndexes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"The dropIndex() method:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: dropIndex,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(MongodbMethods);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/mongoDB/deepMongodb/mongodbMethods.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","UpdateDocs","trim","UpdateSome","Queries","findCond","indexing","ensureIndex","getIndexes","dropIndex","MongodbMethods","componentDidMount","setTimeout","highlightAll","render","classes","props","deleteOne"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = {backgroundColor:'#F0F8FF', padding:'1px', fontSize:'16px'}\n\nconst styles = theme => ({\n  paper: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1)\n  },\n  smMargin: {\n      margin: theme.spacing(1)\n  },\n  actionDiv: {\n      textAlign: \"center\"\n  }\n})\n\n\nconst UpdateDocs = `db.store.update({_id:1},{$set:{name:['python','javascript']}})\n`.trim()\n\nconst UpdateSome = `db.store.update({_id:1},{$set:{title:'oops'}})`.trim()\n\nconst Queries = `db.customers.remove({first_name:\"Mery\"});\ndb.customers.find({name:\"kitchen\"});\ndb.customers.find({$or:[{first_name:\"Mukesh\"},{first_name:\"Troy}]});\n`.trim()\n\nconst findCond = `db.customers.find({age:{$lt:40}});\ndb.customers.deleteOne({first_name:\"sherif\"});\ndb.customers.deleteMany({first_name:\"sherif\"});\n\n\ndb.customers.find({ age: { $gt: 40 }}); // gt or gte\ndb.customers.find({ age: { $lt: 40 }}); // lt or lte\ndb.customers.find().sort({ field: 1 }); // ascending order is indicated by 1\n\ndb.store.aggregate([{$match:{_id:5}},{$match:{'Scores':{$gt:90}}}]);`.trim()\n\nconst indexing = `\ndb.indexing.find();\n\n{\n  \"_id\" : ObjectId(\"5ef6f997c5897e0cab0063c1\"),\n  \"title\" : \"Mistborn\",\n  \"year\" : 2006,\n  \"author\" : {\n  \"firstname\" : \"Brandon\",\n  \"lastname\" : \"Sanderson\"\n  }\n }`.trim()\n\nconst ensureIndex = `db.indexing.ensureIndex({year:1})\n\nIn ensureIndex() method you can pass multiple fields, to create index on multiple fields\ndb.indexing.ensureIndex({first_name:1, last_name:-1});`.trim()\n\nconst getIndexes = `db.indexing.getIndexes()`.trim()\n\nconst dropIndex = `db.indexing.dropIndex({year:1})`.trim()\n\n\nclass MongodbMethods extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n            <Grid item xs={2}>\n                <Paper className={classes.paper}>\n                    <h4><Sidebar /></h4>\n                </Paper>\n            </Grid>\n<Grid item xs={10}>\n<Paper className={classes.paper}>\n<List>\n      \n     \n      <div style={titles}>\n      <PrismCode\n        code={deleteOne}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <br/>\n      <b>Update documents</b>\n      <div style={titles}>\n      <PrismCode\n        code={UpdateDocs}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <br/>\n      <b>Update something is not in collections </b>\n      <div style={titles}>\n      <PrismCode\n        code={UpdateSome}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <br/>\n      <b>Queries</b>\n      <div style={titles}>\n      <PrismCode\n        code={Queries}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <br/>\n      <b>Find under the age of 40:</b>\n      <div style={titles}>\n      <PrismCode\n        code={findCond}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <br/>\n      <b>Indexing</b>\n      <br/>\n      Indexes support the efficient resolution of queries. Without indexes, MongoDB must scan every\ndocument of a collection to select those documents that match the query statement. This scan is\nhighly inefficient and require MongoDB to process a large volume of data.<br/>\n Indexes improve MongoDB query excution<br/>\n Without index whole collextion must be scanned (COLLSCAN)<br/>\n Index stores sorted field values<br/>\n If appropriate index exists, MongoDB performs only index scan (IXSCAN)<br/>\nIndexes are special data structures, that store a small portion of the data set in an easy-to-traverse\nform. The index stores the value of a specific field or set of fields, ordered by the value of the field as\nspecified in the index.\n      <div style={titles}>\n      <PrismCode\n        code={indexing}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <br/>\n      <b>Create Index in collection:</b>\n      <br/>\n      To create an index you need to use ensureIndex() method.\nWe can select any field to create index from collection.\n      <div style={titles}>\n      <PrismCode\n        code={ensureIndex}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <i>The getIndexes() method method returns the description of all the indexes in the collection.</i>\n      <div style={titles}>\n      <PrismCode\n        code={getIndexes}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <i>The dropIndex() method:</i>\n      <br/>\n      <br/>\n      <div style={titles}>\n      <PrismCode\n        code={dropIndex}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      </List>\n      </Paper>\n      </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(MongodbMethods));\n"]},"metadata":{},"sourceType":"module"}