{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var code=\"\\n// Add operation\\ndb.users.insertOne({\\n    name: \\\"sue\\\",\\n    age: 26,\\n    status: \\\"pending\\\"\\n  })\\n  \\n  \\n  // Read operation\\n  Read operations retrieve documents from a collection.\\n  db.collection.find()\\n  \\n  db.users.find(\\n    {age : { $gt: 18 }},\\n    {name: 1, address:1}\\n  ).limit(5)\\n  \\n  \\n  // Update Operations\\n  Update operations modify existing documents in a collection.\\n  db.collection.updateOne() \\n  db.collection.updateMany() \\n  db.collection.replaceOne() \\n  \\n  db.users.updateMany(\\n    {age : { $lt: 18 }},\\n    {$set:  {status: \\\"reject\\\"}}\\n  )\\n  \\n  //Delete Operations\\n  Delete operations remove documents from a collection. \\n  db.collection.deleteOne() \\n  db.collection.deleteMany()\\n  \\n  db.users.deleteMany(\\n      {status: \\\"reject\\\"}\\n  )\".trim();var insert=\"\\n  db.inventory.insertMany([\\n    { item: \\\"journal\\\", qty: 25, tags: [\\\"blank\\\", \\\"red\\\"], size: { h: 14, w: 21, uom: \\\"cm\\\" } },\\n    { item: \\\"mat\\\", qty: 85, tags: [\\\"gray\\\"], size: { h: 27.9, w: 35.5, uom: \\\"cm\\\" } },\\n    { item: \\\"mousepad\\\", qty: 25, tags: [\\\"gel\\\", \\\"blue\\\"], size: { h: 19, w: 22.85, uom: \\\"cm\\\" } }\\n ])\".trim();var finding=\"\\n // Find all students\\ndb.students.find( {} )\\n\\n// Find the first 3 students\\ndb.stuents.find( {} ).limit(3)\\n\\n// Find all students and sort by name in ascending order\\ndb.students.find( {} ).sort( {name: 1} )\\n\\n// Find all students and sort by name in ascending order\\ndb.students.find( {} ).sort( {gpa: -1, name: 1} )\\n\\n// Find all biology majors\\ndb.students.find( {major: \\\"Biology\\\"} )\\n\\n// Find all student's with a phone number 333-3333\\ndb.students.find( {contact: {phone: \\\"333-3333\\\", email: \\\"student@school.edu\\\"} } )\\n\\n// Find all biology majors named Jack\\ndb.students.find( {name: \\\"Jack\\\", major: \\\"Biology\\\"} )\\n\\n// Final all students who are chemistry majors or named Jack\\ndb.students.find( { $or: [ {name: \\\"Jack\\\"}, {major: \\\"Chemistry\\\"} ] } )\\n\\n// Final all students with a gpa above 3.5\\ndb.students.find( {gpa: {$gt: 3.5} } )\\n\\n// Find all students with a gpa less than or equal to 3.2\\ndb.students.find( {gpa: {$lte: 3.2} } ).sort({gpa: -1})         // $eq, $ne, $lt, $lte, $gt, $gte\\n\\n// Find all students with names in the array\\ndb.students.find( {name: {$in: [\\\"Kate\\\", \\\"Claire\\\"]} } )   // $in, $nin\\n\\n// Find all students who have awards\\ndb.students.find( {awards: {$exists: true} } )           // false\\n\\n// Find all db entries where the name is a string\\ndb.students.find({name: {$type: 2} })\\n\\n// Find all students who's first grade is a 90\\ndb.students.find( {\\\"grades.0\\\": 90 } )\\n\\n// Find all students who have a grade greater than 80\\ndb.students.find( {grades: {$elemMatch: { $gte: 80} } } )\\n\\n// Find all students who have 4 grades recorded\\ndb.students.find( {grades: {$size: 4 } } )\".trim();var updating=\"\\n// same filters as inserting\\ndb.stuents.updateOne(<filter>, <update>, <options>)\\n\\n// Do this twice so we can change it back with updateMany\\ndb.students.updateOne(\\n     {major: \\\"Biology\\\"},\\n     {  $set: {major: \\\"Bio\\\"}}\\n  )\\n\\ndb.students.updateMany(\\n     {major: \\\"Bio\\\"},\\n     { $set: {major: \\\"Biology\\\"} }\\n  )\\n\\n// replaceMany()\\ndb.students.replaceOne(\\n     {major: \\\"Bio\\\"},\\n     {name: \\\"new name\\\", major: \\\"new major\\\", gpa: 4.0}\\n  )\\n\\n// Delete all documents\\ndb.students.deleteMany({})\\n\\ndb.students.deleteOne({major: \\\"Biology\\\"})\\n\\ndb.students.deleteMany({gpa: {$gte: 3.5}})\".trim();var CurdOp=/*#__PURE__*/function(_Component){_inherits(CurdOp,_Component);function CurdOp(){_classCallCheck(this,CurdOp);return _possibleConstructorReturn(this,_getPrototypeOf(CurdOp).apply(this,arguments));}_createClass(CurdOp,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"b\",null,\"Curd Operations\"),React.createElement(\"br\",null),React.createElement(\"br\",null),\"Create or insert operations add new documents to a collection. If the collection does not currently exist, insert operations will create the collection.\",React.createElement(\"br\",null),\"MongoDB provides the following methods to insert documents into a collection:\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"i\",null,React.createElement(\"li\",null,\"db.collection.insertOne() \"),React.createElement(\"li\",null,\"db.collection.insertMany()\")),React.createElement(\"br\",null),\"In MongoDB, insert operations target a single collection. All write operations in MongoDB are atomic on the level of a single document\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:code,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Insert Multiple Documents\"),\"db.collection.insertMany()\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:insert,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Finding Documents\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:finding,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Updating & Deleting Documents\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:updating,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return CurdOp;}(Component);export default withStyles(styles)(CurdOp);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/mongoDB/deepMongodb/curdOp.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","code","trim","insert","finding","updating","CurdOp","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = {backgroundColor:'#F0F8FF', padding:'1px', fontSize:'16px'}\n\nconst styles = theme => ({\n  paper: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1)\n  },\n  smMargin: {\n      margin: theme.spacing(1)\n  },\n  actionDiv: {\n      textAlign: \"center\"\n  }\n})\n\nconst code = `\n// Add operation\ndb.users.insertOne({\n    name: \"sue\",\n    age: 26,\n    status: \"pending\"\n  })\n  \n  \n  // Read operation\n  Read operations retrieve documents from a collection.\n  db.collection.find()\n  \n  db.users.find(\n    {age : { $gt: 18 }},\n    {name: 1, address:1}\n  ).limit(5)\n  \n  \n  // Update Operations\n  Update operations modify existing documents in a collection.\n  db.collection.updateOne() \n  db.collection.updateMany() \n  db.collection.replaceOne() \n  \n  db.users.updateMany(\n    {age : { $lt: 18 }},\n    {$set:  {status: \"reject\"}}\n  )\n  \n  //Delete Operations\n  Delete operations remove documents from a collection. \n  db.collection.deleteOne() \n  db.collection.deleteMany()\n  \n  db.users.deleteMany(\n      {status: \"reject\"}\n  )`.trim();\n  \n  \n  const insert = `\n  db.inventory.insertMany([\n    { item: \"journal\", qty: 25, tags: [\"blank\", \"red\"], size: { h: 14, w: 21, uom: \"cm\" } },\n    { item: \"mat\", qty: 85, tags: [\"gray\"], size: { h: 27.9, w: 35.5, uom: \"cm\" } },\n    { item: \"mousepad\", qty: 25, tags: [\"gel\", \"blue\"], size: { h: 19, w: 22.85, uom: \"cm\" } }\n ])`.trim();\n \n \n const finding = `\n // Find all students\ndb.students.find( {} )\n\n// Find the first 3 students\ndb.stuents.find( {} ).limit(3)\n\n// Find all students and sort by name in ascending order\ndb.students.find( {} ).sort( {name: 1} )\n\n// Find all students and sort by name in ascending order\ndb.students.find( {} ).sort( {gpa: -1, name: 1} )\n\n// Find all biology majors\ndb.students.find( {major: \"Biology\"} )\n\n// Find all student's with a phone number 333-3333\ndb.students.find( {contact: {phone: \"333-3333\", email: \"student@school.edu\"} } )\n\n// Find all biology majors named Jack\ndb.students.find( {name: \"Jack\", major: \"Biology\"} )\n\n// Final all students who are chemistry majors or named Jack\ndb.students.find( { $or: [ {name: \"Jack\"}, {major: \"Chemistry\"} ] } )\n\n// Final all students with a gpa above 3.5\ndb.students.find( {gpa: {$gt: 3.5} } )\n\n// Find all students with a gpa less than or equal to 3.2\ndb.students.find( {gpa: {$lte: 3.2} } ).sort({gpa: -1})         // $eq, $ne, $lt, $lte, $gt, $gte\n\n// Find all students with names in the array\ndb.students.find( {name: {$in: [\"Kate\", \"Claire\"]} } )   // $in, $nin\n\n// Find all students who have awards\ndb.students.find( {awards: {$exists: true} } )           // false\n\n// Find all db entries where the name is a string\ndb.students.find({name: {$type: 2} })\n\n// Find all students who's first grade is a 90\ndb.students.find( {\"grades.0\": 90 } )\n\n// Find all students who have a grade greater than 80\ndb.students.find( {grades: {$elemMatch: { $gte: 80} } } )\n\n// Find all students who have 4 grades recorded\ndb.students.find( {grades: {$size: 4 } } )`.trim();\n\n\nconst updating = `\n// same filters as inserting\ndb.stuents.updateOne(<filter>, <update>, <options>)\n\n// Do this twice so we can change it back with updateMany\ndb.students.updateOne(\n     {major: \"Biology\"},\n     {  $set: {major: \"Bio\"}}\n  )\n\ndb.students.updateMany(\n     {major: \"Bio\"},\n     { $set: {major: \"Biology\"} }\n  )\n\n// replaceMany()\ndb.students.replaceOne(\n     {major: \"Bio\"},\n     {name: \"new name\", major: \"new major\", gpa: 4.0}\n  )\n\n// Delete all documents\ndb.students.deleteMany({})\n\ndb.students.deleteOne({major: \"Biology\"})\n\ndb.students.deleteMany({gpa: {$gte: 3.5}})`.trim();\n\n\nclass CurdOp extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n            <Grid item xs={2}>\n                <Paper className={classes.paper}>\n                    <h4><Sidebar /></h4>\n                </Paper>\n            </Grid>\n            <Grid item xs={10}>\n              <Paper className={classes.paper}>\n                <List>\n                 <b>Curd Operations</b>\n                 <br/>\n                 <br/>\n                 Create or insert operations add new documents to a collection. If the collection does not currently exist, insert operations will create the collection.<br/>\n                 MongoDB provides the following methods to insert documents into a collection:<br/><br/>\n                 <i><li>db.collection.insertOne() </li>\n                     <li>db.collection.insertMany()</li></i>\n                     <br/>\n                     In MongoDB, insert operations target a single collection. All write operations in MongoDB are atomic on the level of a single document\n                   <div style={titles}>\n                      <PrismCode\n                        code={code}\n                        language=\"js\"\n                        plugins={[\"line-numbers\"]}\n                      />\n                    </div>\n                    <br/>\n                    <h3>Insert Multiple Documents</h3>\n                    db.collection.insertMany()\n                    <div style={titles}>\n                      <PrismCode\n                        code={insert}\n                        language=\"js\"\n                        plugins={[\"line-numbers\"]}\n                      />\n                    </div>\n                    <br/>\n                    <h3>Finding Documents</h3>\n                    <div style={titles}>\n                      <PrismCode\n                        code={finding}\n                        language=\"js\"\n                        plugins={[\"line-numbers\"]}\n                      />\n                    </div>\n                    <br/>\n                    <h3>Updating & Deleting Documents</h3>\n                    <div style={titles}>\n                      <PrismCode\n                        code={updating}\n                        language=\"js\"\n                        plugins={[\"line-numbers\"]}\n                      />\n                    </div>\n                    </List>\n                </Paper>\n              </Grid>\n            </Grid>\n          )\n        }\n      }\n\nexport default (withStyles(styles)(CurdOp));\n"]},"metadata":{},"sourceType":"module"}