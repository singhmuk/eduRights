{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/numbersAlgo.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst factorial = `\nfunction factorial(n){\n  if(n === 1) return 1;\n  return n * factorial(n-1)\n }\n \nconsole.log(factorial(4));\n `.trim();\nconst prime = `\nfunction countPrimes(n){\n  const map = []\n\n  for (let i = 2; i < n; i++) {\n    map[i] = true\n  }\n  \n  for (let i = 2; i * i < n; i++) {\n    if (map[i]) {\n      for (let j = i * i; j < n; j += i) {\n        map[j] = false\n      }\n    }\n  }\n  return map.filter(num => num === true).length\n}\n\nconsole.log(countPrimes(10))\n`.trim();\nconst magicNumber = `\n function magicNum(){\n   const random = Math.random(0,1)\n   return random;\n }\n \n function main(){\n   const result = Math.random(0, magicNum);\n   console.log(result);\n }\n \n main();\n `.trim();\nconst possible = `\nfunction isInt(value) {\n  var x;\n  if (isNaN(value)) {\n    return false;\n  }\n  x = parseFloat(value);\n  return (x | 0) === x;\n}\n\nconsole.log(isInt(0));`.trim();\nconst common_divisor = `\nfunction numbers(x, y) {\n    if ((typeof x !== 'number') || (typeof y !== 'number'))\n      return false;\n      x = Math.abs(x);\n      y = Math.abs(y);\n        while(y) {\n          var i = y;\n          y = x % y;\n          x = i;\n        }\n  return x;\n  }\n \n  console.log(numbers(12, 4));\n  console.log(numbers(9, 3));`.trim();\nconst addTwoNumbers = `\nfunction ListNode(val) {\n  this.val = val\n  this.next = null\n}\n\nconst addTwoNumbers = (l1, l2) => {\n  let h1 = l1\n  let h2 = l2\n  let digit = 0\n  let head = null\n  let current = null\n  while (h1 || h2) {\n    const num1 = h1 ? h1.val : 0\n    const num2 = h2 ? h2.val : 0\n    let value = num1 + num2 + digit\n    if (value >= 10) {\n      value -= 10\n      digit = 1\n    } else {\n      digit = 0\n    }\n    h1 = h1 ? h1.next : null\n    h2 = h2 ? h2.next : null\n    const node = new ListNode(value)\n    if (!head) {\n      head = node\n      current = node\n    } else {\n      current.next = node\n      current = node\n    }\n  }\n  if (digit === 1) {\n    current.next = new ListNode(1)\n  }\n  return head\n}\n\nconsole.log(addTwoNumbers())`.trim();\nconst reverse = `\nfunction reverse(x){\n  let max = (2 ** 31) - 1;\n  let min = - (2 ** 31);\n  \n  const isMinus = x < 0;\n  const str = String(Math.abs(x)).split('').reverse().join('')\n  const result =  isMinus ? Number('-'$'{str}') : Number(str)\n  if (result > max || result < min) return 0;\n\n  return result\n}\n\nconsole.log(reverse(123))`.trim();\nconst isPowerOfTwo = `\nfunction isPowerOfTwo(x){\n  if (x <= 0) return false;\n  return (x & (x - 1)) === 0\n}\n\nconsole.log(isPowerOfTwo(16))\n`.trim();\nconst getFactors = `\nfunction getFactors(n){\n  const result = [];\n\n  function aux(remain, start = 2, current = []){\n    if (remain === 1) {\n      if (current.length > 1) {\n        result.push([...current])\n      }\n      return\n    }\n    \n    for (let i = start; i <= remain; i++) {\n      if (remain % i === 0) {\n        current.push(i)\n        aux(remain / i, i, current)\n        current.pop()\n      }\n    }\n  }\n  aux(n)\n  return result\n}\n\nconsole.log(getFactors(345))\n`.trim();\nconst addDigits = `\nfunction addDigits(num){\n  function cal(num){\n      var s = num.toString();\n      var digits = s.split(\"\").map(Number);\n\n      if(digits.length === 1) return digits[0];\n\n      num = digits.reduce((pre, cur) => (pre + cur));\n      return cal(num);\n  }\n  \n  return cal(num);\n};\n\nconsole.log(addDigits(38))\n`.trim();\nconst isUgly = `\nfunction isUgly(num){\n  const memo = [];\n\n  function aux(n){\n    if (memo[n] !== undefined) return memo[n];\n    if (n === 1 || n === 2 || n === 3 || n === 5 || n === 4) return true;\n    if (n < 5) return false;\n\n    memo[n] = aux(n / 2) || aux(n / 3) || aux(n / 5);\n    return memo[n]\n  }\n  return aux(num)\n}\n\nconsole.log(isUgly(15))\n`.trim();\nconst getSum = `\nfunction getSum(a, b) {\n  let carry = 0;\n  \n  while (b !== 0) {\n    carry = a & b\n    a ^= b\n    b = carry << 1\n  }\n  return a\n}\n\nconsole.log(getSum(5, 1))\n`.trim();\nconst numSquares = `\nfunction numSquares(n){\n  const maxLength = Math.ceil(Math.sqrt(n));\n  const squareLengths = new Array(maxLength).fill(0).map((v, index) => (index + 1) ** 2);\n  const memo = {};\n\n  function aux(index, sum){\n    memo[index] = memo[index] || {}\n    if (memo[index][sum] !== undefined) {\n      return memo[index][sum]\n    }\n\n    if (sum === n) return 0;\n    if (sum > n || index > squareLengths.length - 1) return Infinity;\n\n    memo[index][sum] = Math.min(\n      aux(index, sum + squareLengths[index]) + 1,\n      aux(index + 1, sum),\n    )\n    return memo[index][sum]\n  }\n  return aux(0, 0)\n}\n\nconsole.log(numSquares(13))\n`.trim();\nconst brokenCalc = `\nfunction brokenCalc(X, Y){\n  let result = 0;\n\n  while (Y > X) {\n    if (Y % 2 === 0) {\n      Y /= 2\n    } \n    else {\n      Y += 1\n    }\n    result += 1\n  }\n  return result + X - Y\n}\n\nconsole.log(brokenCalc(5, 8))\n`.trim();\nconst addStrings = `\nfunction addStrings(num1, num2){\n  const reversedNum1 = num1.split('').reverse();\n  const reversedNum2 = num2.split('').reverse();\n\n  const { shorter, longer } = reversedNum1.length < reversedNum2.length\n    ? { shorter: reversedNum1, longer: reversedNum2 }\n    : { shorter: reversedNum2, longer: reversedNum1 }\n\n  let rem = 0;\n  let result = longer.reduce((acc, digit1, index) => {\n    const total = parseInt(digit1, 10) + (parseInt(shorter[index], 10) || 0) + rem\n    if (total >= 10) {\n      rem = 1\n    } else {\n      rem = 0\n    }\n    return [...acc, total >= 10 ? total - 10 : total]\n  }, [])\n\n  result = rem === 1 ? [...result, rem] : result\n  return result.reverse().join('')\n}\n\nconst zero = (count) => {\n  let result = '';\n\n  while (count >= 1) {\n    result += '0'\n    count -= 1\n  }\n  return result\n}\nfunction multiply(num1 = '', num2 = ''){\n  let result = 0;\n  for (let i = num2.length - 1; i >= 0; i--) {\n    let current = '';\n    let base = 0;\n\n    for (let j = num1.length - 1; j >= 0; j--) {\n      let currentResult = parseInt(num1[j], 10) * parseInt(num2[i], 10) + base;\n      if (currentResult >= 10) {\n        base = Math.floor(currentResult / 10);\n        currentResult -= base * 10;\n      } else {\n        base = 0;\n      }\n      current = '$'{currentResult + current}';\n    }\n    if (base > 0) {\n      current = base + current;\n    }\n  \n    result = addStrings(result || '0', current + zero(num2.length - 1 - i));\n  }\n  if (result.length > 0 && result[0] === '0') {\n    return '0';\n  }\n  return result\n}\n\nconsole.log(addStrings(\"2\",\"3\"))\n`.trim();\nconst mySqrt = `\nfunction mySqrt(x){\n  let r = x\n  while (r * r > x) {\n    r = Math.floor((r + x / r) / 2)\n  }\n\n  return r\n}\n\nconsole.log(mySqrt(4))\n`.trim();\nconst myPow = `\nfunction myPow(x, n){\n  if (n === 0) return 1;\n\n  const temp = myPow(x, Math.floor(Math.abs(n / 2)))\n  const result = n % 2 === 0 ? temp * temp : x * temp * temp\n  return n < 0 ? 1 / result : result\n}\n\nconsole.log(myPow(2.00000, 10))\n`.trim();\nconst letterCombinations = `\nfunction letterCombinations(digits = ''){\n  const map = {\n    2: ['a', 'b', 'c'],\n    3: ['d', 'e', 'f'],\n    4: ['g', 'h', 'i'],\n    5: ['j', 'k', 'l'],\n    6: ['m', 'n', 'o'],\n    7: ['p', 'q', 'r', 's'],\n    8: ['t', 'u', 'v'],\n    9: ['w', 'x', 'y', 'z'],\n  }\n\n  if (!digits.length) return [];\n\n  let result = [''];\n  let index = 0;\n\n  while (index < digits.length) {\n    const next = map[digits[index]];\n    const nextResult = [];\n\n    for (let i = 0; i < result.length; i++) {\n      for (let j = 0; j < next.length; j++) {\n        nextResult.push(result[i] + next[j])\n      }\n    }\n    result = nextResult;\n    index++;\n  }\n  return result;\n}\n\nconsole.log(letterCombinations(\"23\"))\n`.trim();\n\nclass DSLogic4 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }, \"1. Factorial\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: factorial,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }, \"2. Prime\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: prime,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }, \"3. Remove number fro\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: prime,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }, \"2. \"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: prime,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    }, \"3. Given a function magicNumber() that returns a random integer 1 or 0, write a new function that will generate a random number that uses this magicNumber() function.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: magicNumber,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    }, \"4. Discuss possible ways to write a function isInteger(x) that determines if x is an integer.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: possible,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    }, \"5. Common Divisor\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: common_divisor,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    }, \"6. Sum of Two Integers.\"), \"Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: getSum,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }, \"7. Reverse Integer.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: reverse,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529\n      },\n      __self: this\n    }, \"8. Sqrt(x).\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }, \"Input: \"), \"4\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }, \"Output: \"), \"2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }, \"Example 2: \"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }, \"Input: \"), \"8\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, \"Output: \"), \"2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }, \"Explanation: \"), \"The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: mySqrt,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548\n      },\n      __self: this\n    }, \"9. Power of Two.\"), \"Given an integer, write a function to determine if it is a power of two.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isPowerOfTwo,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    }, \"10. Pow(x, n).\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }, \"Input: \"), \"x = 2.00000, n = 10\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561\n      },\n      __self: this\n    }, \"Output: \"), \"1024.00000\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: myPow,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }, \"11. Ugly Number.\"), \"Write a program to check whether a given number is an ugly number.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573\n      },\n      __self: this\n    }), \"Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isUgly,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584\n      },\n      __self: this\n    }, \"12. Broken Calculator.\"), \"On a broken calculator that has a number showing on its display, we can perform two operations:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588\n      },\n      __self: this\n    }, \"Double: \"), \"Multiply the number on the display by 2, or;\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589\n      },\n      __self: this\n    }, \"Decrement: \"), \"Subtract 1 from the number on the display.\")), \"Initially, the calculator is displaying the number X.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592\n      },\n      __self: this\n    }), \"Return the minimum number of operations needed to display the number Y.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: brokenCalc,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603\n      },\n      __self: this\n    }, \"13. Add Digits.\"), \"Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 605\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607\n      },\n      __self: this\n    }, \"Input: \"), \"38\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608\n      },\n      __self: this\n    }, \"Output: \"), \"2 \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609\n      },\n      __self: this\n    }, \"Explanation: \"), \"The process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: addDigits,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620\n      },\n      __self: this\n    }, \"14. Add Two Numbers.\"), \"You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622\n      },\n      __self: this\n    }), \"You may assume the two numbers do not contain any leading zero, except the number 0 itself.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    }, \"Example: \"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626\n      },\n      __self: this\n    }, \"Input: \"), \"(2  4  3) + (5  6  4)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627\n      },\n      __self: this\n    }, \"Output: \"), \"7  0  8\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628\n      },\n      __self: this\n    }, \"Explanation: \"), \"342 + 465 = 807.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: addTwoNumbers,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638\n      },\n      __self: this\n    }, \"15. Factor Combinations.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: getFactors,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648\n      },\n      __self: this\n    }, \"16. Perfect Squares.\"), \"Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 650\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: numSquares,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 651\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659\n      },\n      __self: this\n    }, \"17. Multiply Strings\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660\n      },\n      __self: this\n    }, \"Input: \"), \"num1 = \\\"2\\\", num2 = \\\"3\\\" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661\n      },\n      __self: this\n    }, \"Output: \"), \"\\\"6\\\"\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: addStrings,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671\n      },\n      __self: this\n    }, \"18. Letter Combinations of a Phone Number.\"), \"Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673\n      },\n      __self: this\n    }), \"A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675\n      },\n      __self: this\n    }, \"Example: \"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    }, \"Input: \"), \"\\\"23\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678\n      },\n      __self: this\n    }, \"Output: \"), \"[\\\"ad\\\", \\\"ae\\\", \\\"af\\\", \\\"bd\\\", \\\"be\\\", \\\"bf\\\", \\\"cd\\\", \\\"ce\\\", \\\"cf\\\"].\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: letterCombinations,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(DSLogic4);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/numbersAlgo.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","factorial","trim","prime","magicNumber","possible","common_divisor","addTwoNumbers","reverse","isPowerOfTwo","getFactors","addDigits","isUgly","getSum","numSquares","brokenCalc","addStrings","mySqrt","myPow","letterCombinations","DSLogic4","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst factorial = `\nfunction factorial(n){\n  if(n === 1) return 1;\n  return n * factorial(n-1)\n }\n \nconsole.log(factorial(4));\n `.trim()\n\nconst prime = `\nfunction countPrimes(n){\n  const map = []\n\n  for (let i = 2; i < n; i++) {\n    map[i] = true\n  }\n  \n  for (let i = 2; i * i < n; i++) {\n    if (map[i]) {\n      for (let j = i * i; j < n; j += i) {\n        map[j] = false\n      }\n    }\n  }\n  return map.filter(num => num === true).length\n}\n\nconsole.log(countPrimes(10))\n`.trim()\n\nconst magicNumber = `\n function magicNum(){\n   const random = Math.random(0,1)\n   return random;\n }\n \n function main(){\n   const result = Math.random(0, magicNum);\n   console.log(result);\n }\n \n main();\n `.trim();\n\nconst possible = `\nfunction isInt(value) {\n  var x;\n  if (isNaN(value)) {\n    return false;\n  }\n  x = parseFloat(value);\n  return (x | 0) === x;\n}\n\nconsole.log(isInt(0));`.trim();\n\nconst common_divisor = `\nfunction numbers(x, y) {\n    if ((typeof x !== 'number') || (typeof y !== 'number'))\n      return false;\n      x = Math.abs(x);\n      y = Math.abs(y);\n        while(y) {\n          var i = y;\n          y = x % y;\n          x = i;\n        }\n  return x;\n  }\n \n  console.log(numbers(12, 4));\n  console.log(numbers(9, 3));`.trim()\n\nconst addTwoNumbers = `\nfunction ListNode(val) {\n  this.val = val\n  this.next = null\n}\n\nconst addTwoNumbers = (l1, l2) => {\n  let h1 = l1\n  let h2 = l2\n  let digit = 0\n  let head = null\n  let current = null\n  while (h1 || h2) {\n    const num1 = h1 ? h1.val : 0\n    const num2 = h2 ? h2.val : 0\n    let value = num1 + num2 + digit\n    if (value >= 10) {\n      value -= 10\n      digit = 1\n    } else {\n      digit = 0\n    }\n    h1 = h1 ? h1.next : null\n    h2 = h2 ? h2.next : null\n    const node = new ListNode(value)\n    if (!head) {\n      head = node\n      current = node\n    } else {\n      current.next = node\n      current = node\n    }\n  }\n  if (digit === 1) {\n    current.next = new ListNode(1)\n  }\n  return head\n}\n\nconsole.log(addTwoNumbers())`.trim();\n\nconst reverse = `\nfunction reverse(x){\n  let max = (2 ** 31) - 1;\n  let min = - (2 ** 31);\n  \n  const isMinus = x < 0;\n  const str = String(Math.abs(x)).split('').reverse().join('')\n  const result =  isMinus ? Number('-'$'{str}') : Number(str)\n  if (result > max || result < min) return 0;\n\n  return result\n}\n\nconsole.log(reverse(123))`.trim();\n\nconst isPowerOfTwo = `\nfunction isPowerOfTwo(x){\n  if (x <= 0) return false;\n  return (x & (x - 1)) === 0\n}\n\nconsole.log(isPowerOfTwo(16))\n`.trim();\n\nconst getFactors = `\nfunction getFactors(n){\n  const result = [];\n\n  function aux(remain, start = 2, current = []){\n    if (remain === 1) {\n      if (current.length > 1) {\n        result.push([...current])\n      }\n      return\n    }\n    \n    for (let i = start; i <= remain; i++) {\n      if (remain % i === 0) {\n        current.push(i)\n        aux(remain / i, i, current)\n        current.pop()\n      }\n    }\n  }\n  aux(n)\n  return result\n}\n\nconsole.log(getFactors(345))\n`.trim();\n\nconst addDigits = `\nfunction addDigits(num){\n  function cal(num){\n      var s = num.toString();\n      var digits = s.split(\"\").map(Number);\n\n      if(digits.length === 1) return digits[0];\n\n      num = digits.reduce((pre, cur) => (pre + cur));\n      return cal(num);\n  }\n  \n  return cal(num);\n};\n\nconsole.log(addDigits(38))\n`.trim();\n\nconst isUgly = `\nfunction isUgly(num){\n  const memo = [];\n\n  function aux(n){\n    if (memo[n] !== undefined) return memo[n];\n    if (n === 1 || n === 2 || n === 3 || n === 5 || n === 4) return true;\n    if (n < 5) return false;\n\n    memo[n] = aux(n / 2) || aux(n / 3) || aux(n / 5);\n    return memo[n]\n  }\n  return aux(num)\n}\n\nconsole.log(isUgly(15))\n`.trim();\n\nconst getSum = `\nfunction getSum(a, b) {\n  let carry = 0;\n  \n  while (b !== 0) {\n    carry = a & b\n    a ^= b\n    b = carry << 1\n  }\n  return a\n}\n\nconsole.log(getSum(5, 1))\n`.trim();\n\nconst numSquares = `\nfunction numSquares(n){\n  const maxLength = Math.ceil(Math.sqrt(n));\n  const squareLengths = new Array(maxLength).fill(0).map((v, index) => (index + 1) ** 2);\n  const memo = {};\n\n  function aux(index, sum){\n    memo[index] = memo[index] || {}\n    if (memo[index][sum] !== undefined) {\n      return memo[index][sum]\n    }\n\n    if (sum === n) return 0;\n    if (sum > n || index > squareLengths.length - 1) return Infinity;\n\n    memo[index][sum] = Math.min(\n      aux(index, sum + squareLengths[index]) + 1,\n      aux(index + 1, sum),\n    )\n    return memo[index][sum]\n  }\n  return aux(0, 0)\n}\n\nconsole.log(numSquares(13))\n`.trim();\n\nconst brokenCalc = `\nfunction brokenCalc(X, Y){\n  let result = 0;\n\n  while (Y > X) {\n    if (Y % 2 === 0) {\n      Y /= 2\n    } \n    else {\n      Y += 1\n    }\n    result += 1\n  }\n  return result + X - Y\n}\n\nconsole.log(brokenCalc(5, 8))\n`.trim();\n\nconst addStrings = `\nfunction addStrings(num1, num2){\n  const reversedNum1 = num1.split('').reverse();\n  const reversedNum2 = num2.split('').reverse();\n\n  const { shorter, longer } = reversedNum1.length < reversedNum2.length\n    ? { shorter: reversedNum1, longer: reversedNum2 }\n    : { shorter: reversedNum2, longer: reversedNum1 }\n\n  let rem = 0;\n  let result = longer.reduce((acc, digit1, index) => {\n    const total = parseInt(digit1, 10) + (parseInt(shorter[index], 10) || 0) + rem\n    if (total >= 10) {\n      rem = 1\n    } else {\n      rem = 0\n    }\n    return [...acc, total >= 10 ? total - 10 : total]\n  }, [])\n\n  result = rem === 1 ? [...result, rem] : result\n  return result.reverse().join('')\n}\n\nconst zero = (count) => {\n  let result = '';\n\n  while (count >= 1) {\n    result += '0'\n    count -= 1\n  }\n  return result\n}\nfunction multiply(num1 = '', num2 = ''){\n  let result = 0;\n  for (let i = num2.length - 1; i >= 0; i--) {\n    let current = '';\n    let base = 0;\n\n    for (let j = num1.length - 1; j >= 0; j--) {\n      let currentResult = parseInt(num1[j], 10) * parseInt(num2[i], 10) + base;\n      if (currentResult >= 10) {\n        base = Math.floor(currentResult / 10);\n        currentResult -= base * 10;\n      } else {\n        base = 0;\n      }\n      current = '$'{currentResult + current}';\n    }\n    if (base > 0) {\n      current = base + current;\n    }\n  \n    result = addStrings(result || '0', current + zero(num2.length - 1 - i));\n  }\n  if (result.length > 0 && result[0] === '0') {\n    return '0';\n  }\n  return result\n}\n\nconsole.log(addStrings(\"2\",\"3\"))\n`.trim();\n\nconst mySqrt = `\nfunction mySqrt(x){\n  let r = x\n  while (r * r > x) {\n    r = Math.floor((r + x / r) / 2)\n  }\n\n  return r\n}\n\nconsole.log(mySqrt(4))\n`.trim();\n\nconst myPow = `\nfunction myPow(x, n){\n  if (n === 0) return 1;\n\n  const temp = myPow(x, Math.floor(Math.abs(n / 2)))\n  const result = n % 2 === 0 ? temp * temp : x * temp * temp\n  return n < 0 ? 1 / result : result\n}\n\nconsole.log(myPow(2.00000, 10))\n`.trim();\n\nconst letterCombinations = `\nfunction letterCombinations(digits = ''){\n  const map = {\n    2: ['a', 'b', 'c'],\n    3: ['d', 'e', 'f'],\n    4: ['g', 'h', 'i'],\n    5: ['j', 'k', 'l'],\n    6: ['m', 'n', 'o'],\n    7: ['p', 'q', 'r', 's'],\n    8: ['t', 'u', 'v'],\n    9: ['w', 'x', 'y', 'z'],\n  }\n\n  if (!digits.length) return [];\n\n  let result = [''];\n  let index = 0;\n\n  while (index < digits.length) {\n    const next = map[digits[index]];\n    const nextResult = [];\n\n    for (let i = 0; i < result.length; i++) {\n      for (let j = 0; j < next.length; j++) {\n        nextResult.push(result[i] + next[j])\n      }\n    }\n    result = nextResult;\n    index++;\n  }\n  return result;\n}\n\nconsole.log(letterCombinations(\"23\"))\n`.trim();\n\n\nclass DSLogic4 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n            <h3>1. Factorial</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={factorial}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Prime</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={prime}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Remove number fro</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={prime}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. </h3>\n              <div style={titles}>\n                <PrismCode\n                  code={prime}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>3. Given a function magicNumber() that returns a random integer 1 or 0, write a new function that will generate a random number that uses this magicNumber() function.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={magicNumber}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>4. Discuss possible ways to write a function isInteger(x) that determines if x is an integer.</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={possible}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. Common Divisor</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={common_divisor}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Sum of Two Integers.</h3>\n              Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.\n              <div style={titles}>\n                <PrismCode\n                  code={getSum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>7. Reverse Integer.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={reverse}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>8. Sqrt(x).</h3>\n              <b>Input: </b>4<br/>\n              <b>Output: </b>2<br/><br/>\n              <b>Example 2: </b>\n\n              <b>Input: </b>8<br/>\n              <b>Output: </b>2<br/>\n              <b>Explanation: </b>The square root of 8 is 2.82842..., and since \n                          the decimal part is truncated, 2 is returned.\n\n              <div style={titles}>\n                <PrismCode\n                  code={mySqrt}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>9. Power of Two.</h3>\n              Given an integer, write a function to determine if it is a power of two.\n              <div style={titles}>\n                <PrismCode\n                  code={isPowerOfTwo}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>10. Pow(x, n).</h3>\n              <b>Input: </b>x = 2.00000, n = 10<br/>\n              <b>Output: </b>1024.00000\n              <div style={titles}>\n                <PrismCode\n                  code={myPow}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>11. Ugly Number.</h3>\n              Write a program to check whether a given number is an ugly number.\n              <br/>\n              Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\n              <div style={titles}>\n                <PrismCode\n                  code={isUgly}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>12. Broken Calculator.</h3>\n              On a broken calculator that has a number showing on its display, we can perform two operations:\n              <br/>\n              <ul>\n                <li><b>Double: </b>Multiply the number on the display by 2, or;</li>\n                <li><b>Decrement: </b>Subtract 1 from the number on the display.</li>\n              </ul>\n              Initially, the calculator is displaying the number X.\n              <br/>\n              Return the minimum number of operations needed to display the number Y.\n              <div style={titles}>\n                <PrismCode\n                  code={brokenCalc}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>13. Add Digits.</h3>\n              Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.\n              <br/>\n              <br/>\n              <b>Input: </b>38<br/>\n              <b>Output: </b>2 <br/>\n              <b>Explanation: </b>The process is like: 3 + 8 = 11, 1 + 1 = 2. \n                          Since 2 has only one digit, return it.\n              <div style={titles}>\n                <PrismCode\n                  code={addDigits}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>14. Add Two Numbers.</h3>\n              You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\n              <br/>\n              You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n              <br/>\n              <b>Example: </b>\n              <b>Input: </b>(2  4  3) + (5  6  4)<br/>\n              <b>Output: </b>7  0  8<br/>\n              <b>Explanation: </b>342 + 465 = 807.\n              <div style={titles}>\n                <PrismCode\n                  code={addTwoNumbers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>15. Factor Combinations.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={getFactors}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>16. Perfect Squares.</h3>\n              Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.\n              <div style={titles}>\n                <PrismCode\n                  code={numSquares}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>17. Multiply Strings</h3>\n              <b>Input: </b>num1 = \"2\", num2 = \"3\" <br/>\n              <b>Output: </b>\"6\"\n              <div style={titles}>\n                <PrismCode\n                  code={addStrings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/> \n\n              <h3>18. Letter Combinations of a Phone Number.</h3>\n              Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.\n              <br/><br/>\n            A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.<br/><br/>\n            <b>Example: </b>\n\n            <b>Input: </b>\"23\"<br/>\n            <b>Output: </b>[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\n              <div style={titles}>\n                <PrismCode\n                  code={letterCombinations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic4));\n"]},"metadata":{},"sourceType":"module"}