{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';import Tree from'../../../assets/tree.gif';import Graphs from'../../../assets/graph.jpg';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var redesign={height:200,width:500};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var graph=\"class Graph {\\n  constructor() {\\n      this.adjacencyMap = {}\\n  }\\n\\n  addVertex(v) {\\n      this.adjacencyMap[v] = [];\\n  }\\n  \\n  containsVertex(vertex) {\\n      return typeof(this.adjacencyMap[vertex]) !== \\\"undefined\\\"\\n  }\\n  \\n  addEdge(v, w) {\\n      let result = false\\n      if (this.containsVertex(v) && this.containsVertex(w)) {\\n          this.adjacencyMap[v].push(w);\\n          this.adjacencyMap[w].push(v);\\n          result = true\\n      }\\n      return result\\n  }\\n\\n  printGraph() {\\n      let keys = Object.keys(this.adjacencyMap);\\n      for (let i of keys) {\\n          let values = this.adjacencyMap[i];\\n          let vertex = \\\"\\\";\\n          for (let j of values)\\n              vertex += j + \\\" \\\";\\n          console.log(i + \\\" -> \\\" + vertex);\\n      }\\n    }\\n  }\\n\\nconst example = () => {\\n  let g = new Graph()\\n  g.addVertex(1)\\n  g.addVertex(2)\\n  g.addVertex(3)\\n  g.addEdge(1, 2)\\n  g.addEdge(1, 3)\\n  g.printGraph()\\n}\".trim();var Graph=/*#__PURE__*/function(_Component){_inherits(Graph,_Component);function Graph(){_classCallCheck(this,Graph);return _possibleConstructorReturn(this,_getPrototypeOf(Graph).apply(this,arguments));}_createClass(Graph,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Tree\"),React.createElement(\"img\",{src:Tree,alt:\"DeadLock\",className:\"responsive\",style:redesign}),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"In Binary Search Tree is each node can have no more than two children. We can search for any value in logarithmic time because we can ignore one-half of the branching with each iteration. Inserting and deleting can also happen in logarithmic time. Moreover, the smallest and largest value can easily be found at the leftmost and rightmost leaf, respectively.\"),React.createElement(\"li\",null,\"Traversal through the tree can happen in a vertical or horizontal procedure.\"),React.createElement(\"li\",null,\"In DFT the vertical direction, Nodes traversed in.\"),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Depth-First Traversal (DFT): \"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"pre-order (Root, Left, Right): \"),\"1 2 4 5 3 \"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"in-order (Left, Root, Right): \"),\"4 2 5 1 3 \"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"post-order (Left, Right, Root): \"),\"4 5 2 3 1\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Breadth-First Traversal (BFT): \"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Level order traversal of a tree is breadth first traversal for the tree.\"),React.createElement(\"li\",null,\"BFT In the horizontal direction. This requires the use of a queue to track all the children nodes with each iteration. If the shape of a tree is wider than deep, BFT is a better choice than DFT.\"))),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Graph\"),React.createElement(\"img\",{src:Graphs,alt:\"DeadLock\",className:\"responsive\",style:redesign}),React.createElement(\"br\",null),\"If a tree is free to have more than one parent, it becomes a Graph.\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Edges that connect nodes together in a graph can be directed/ undirected, weighted/ unweighted\"),React.createElement(\"li\",null,\"Edges that have both direction and weight are analogous to vectors.\"),React.createElement(\"li\",null,\"Multiple inheritances in the form of Mixins and data objects that have many-to-many relationships produce graph structures.\"),React.createElement(\"b\",null,\"Ex. \"),\"Social network and the Internet.\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:graph,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return Graph;}(Component);export default withStyles(styles)(Graph);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/graph.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Tree","Graphs","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","graph","trim","Graph","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Tree from '../../../assets/tree.gif';\nimport Graphs from '../../../assets/graph.jpg';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst graph = `class Graph {\n  constructor() {\n      this.adjacencyMap = {}\n  }\n\n  addVertex(v) {\n      this.adjacencyMap[v] = [];\n  }\n  \n  containsVertex(vertex) {\n      return typeof(this.adjacencyMap[vertex]) !== \"undefined\"\n  }\n  \n  addEdge(v, w) {\n      let result = false\n      if (this.containsVertex(v) && this.containsVertex(w)) {\n          this.adjacencyMap[v].push(w);\n          this.adjacencyMap[w].push(v);\n          result = true\n      }\n      return result\n  }\n\n  printGraph() {\n      let keys = Object.keys(this.adjacencyMap);\n      for (let i of keys) {\n          let values = this.adjacencyMap[i];\n          let vertex = \"\";\n          for (let j of values)\n              vertex += j + \" \";\n          console.log(i + \" -> \" + vertex);\n      }\n    }\n  }\n\nconst example = () => {\n  let g = new Graph()\n  g.addVertex(1)\n  g.addVertex(2)\n  g.addVertex(3)\n  g.addEdge(1, 2)\n  g.addEdge(1, 3)\n  g.printGraph()\n}`.trim()\n\n\nclass Graph extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Tree</h3>\n              <img src={Tree} alt=\"DeadLock\" className=\"responsive\" style={redesign} />\n              <br />\n              <br />\n\n              <ul>\n                <li>\n                  In Binary Search Tree is each node can have no more than two children.\n                  We can search for any value in logarithmic time because we can ignore one-half of the branching with\n                  each iteration. Inserting and deleting can also happen in logarithmic time. Moreover, the\n                  smallest and largest value can easily be found at the leftmost and rightmost leaf,\n                  respectively.\n                </li>\n                <li>Traversal through the tree can happen in a vertical or horizontal procedure.</li>\n                <li>In DFT the vertical direction, Nodes traversed in.</li>\n                <br />\n                <br />\n\n                <b>Depth-First Traversal (DFT): </b>\n                <ul>\n                  <li><b>pre-order (Root, Left, Right): </b>1 2 4 5 3 </li>\n                  <li><b>in-order (Left, Root, Right): </b>4 2 5 1 3 </li>\n                  <li><b>post-order (Left, Right, Root): </b>4 5 2 3 1</li>\n                </ul>\n                <br />\n                <br />\n                <b>Breadth-First Traversal (BFT): </b>\n                <ul>\n                  <li>Level order traversal of a tree is breadth first traversal for the tree.</li>\n                  <li>\n                    BFT In the horizontal direction. This requires the use of a queue to\n                    track all the children nodes with each iteration.\n                    If the shape of a tree is wider than deep, BFT is a better choice than\n                    DFT.\n                  </li>\n                </ul>\n\n              </ul>\n              <br />\n\n              <h3>Graph</h3>\n              <img src={Graphs} alt=\"DeadLock\" className=\"responsive\" style={redesign} />\n              <br />\n              If a tree is free to have more than one parent, it becomes a Graph.\n\n              <ul>\n                <li>Edges that connect nodes together in a graph can be directed/ undirected, weighted/ unweighted</li>\n                <li>Edges that have both direction and weight are analogous to vectors.</li>\n                <li>\n                  Multiple inheritances in the form of Mixins and data objects that have many-to-many\n                  relationships produce graph structures.\n                </li>\n                <b>Ex. </b>Social network and the Internet.\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={graph}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Graph));\n"]},"metadata":{},"sourceType":"module"}