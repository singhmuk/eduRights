{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/angularjsd/angular 12/ngrxCounter.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Ngrx from '../../../assets/ngrx.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst counters = `\n//app.module.ts\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { StoreModule } from '@ngrx/store';\nimport { counterReducer } from './counter.reducer';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    StoreModule.forRoot({ count: counterReducer })\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n//app.component.ts\nimport { Component } from \"@angular/core\";\nimport {Store} from \"@ngrx/store\";\nimport { Observable } from \"rxjs\";\nimport {increment, decrement, reset} from \"./counter.actions\";\n\n@Component({\n  selector:'app-root',\n  template:'\n    <button id=\"increment\" (click)=\"increment()\">Increment</button>\n            {{count | async}}\n    <button id=\"decrement\" (click)=\"decrement()\">Decrement</button>\n    <button id=\"reset\" (click)=\"reset()\">Reset</button>\n  '\n})\n\nexport class AppComponent{\n  count:Observable<number>;\n\n  constructor(private store: Store<{count:number}>){\n    this.count=store.select('count')\n  }\n\n  increment(){\n    this.store.dispatch(increment())\n  }\n\n  decrement(){\n    this.store.dispatch(decrement())\n  }\n\n  reset(){\n    this.store.dispatch(reset())\n  }\n}\n`.trim();\nconst ngrxcounters = `\n//counter.actions.ts\nimport { createAction } from '@ngrx/store';\n\nexport const increment = createAction('[Counter Component] Increment');\nexport const decrement = createAction('[Counter Component] Decrement');\nexport const reset = createAction('[Counter Component] Reset');\n\n\n//counter.reducer.ts\nimport { createReducer, on } from '@ngrx/store';\nimport { increment, decrement, reset } from './counter.actions';\n\nexport const initialState = 0;\n\nexport const counterReducer = createReducer(\n  initialState,\n  on(increment, (state) => state + 1),\n  on(decrement, (state) => state - 1),\n  on(reset, (state) => 0)\n);\n`.trim();\nconst addcomponents = `\n//app.module.ts\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { StoreModule } from '@ngrx/store';\nimport { AppComponent } from './app.component';\nimport { todoReducer } from './reducers';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    StoreModule.forRoot({ todoState: todoReducer })\n  ],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n//app.component.ts\nimport { Component } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Todo } from './interfaces';\nimport { Add, Remove } from './actions';\nimport { Observable } from 'rxjs';\n\n\n@Component({\n  selector: 'my-app',\n  template:'\n  <form>\n    \t<input type=\"text\" placeholder=\"Add new TODO task\" [(ngModel)]=\"newTodoText\" [ngModelOptions]=\"{standalone: true}\"/>\n      <button type=\"submit\" (click)=\"addTodo()\">Add</button>\n  </form>\n  <div *ngFor=\"let todo of todos | async\">\n    <span>{{todo.text}}</span>\n    <div>\n      <button (click)=\"removeTodo(todo.id)\">Delete</button>\n    </div>\n  </div>\n  '\n})\nexport class AppComponent {\n  todos: Observable<Todo[]>;\n  newTodoText: string = \"\";\n  constructor(private store: Store<{ todoState: Array<Todo> }>) {\n    this.todos = store.select(state => state.todoState);\n  }\n  addTodo() {\n    this.store.dispatch(Add({ text: this.newTodoText || 'Untitled task' }));\n    this.newTodoText = '';\n  }\n\n  removeTodo(id:any) {\n    this.store.dispatch(Remove({ id }));\n  }\n}\n`.trim();\nconst ngrxcomponents = `\n//interfaces.ts\nexport interface Todo {\n  text: string;\n  todo: boolean;\n  id: string;\n}\n\n\n//actions.ts\nimport {createAction, props} from '@ngrx/store';\n\nexport const Add = createAction('[Todo Component] Add', props<{text: string}>());\nexport const Remove = createAction('[Todo Component] Remove', props<{id: string}>());\nexport const Toggle = createAction('[Todo Component] Toggle', props<{id: string}>());\n\n\n//reducers.ts\nimport { createReducer, on } from '@ngrx/store';\nimport { Todo } from './interfaces';\nimport { Add, Remove, Toggle } from './actions';\nimport * as uuid from 'uuid';\n\nconst initialState: Array<Todo> = [];\n\nexport const todoReducer = createReducer(initialState,\n  on(Add, (state, action) => ([...state, { id: uuid.v4(), text: action.text, todo: true }])),\n  on(Remove, (state, action) => state.filter(i => i.id !== action.id)),\n  on(Toggle, (state, action) => state.map(i => i.id === action.id ? {...i, todo: !i.todo} : i)),\n)\n`.trim();\n\nclass NgrxCounter extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Counter\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: counters,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, \"ngrxcounters\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: ngrxcounters,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"Add - Delete\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: addcomponents,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, \"ngrxadd\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: ngrxcomponents,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(NgrxCounter);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/angularjsd/angular 12/ngrxCounter.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Ngrx","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","counters","trim","ngrxcounters","addcomponents","ngrxcomponents","NgrxCounter","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Ngrx from '../../../assets/ngrx.png';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst counters = `\n//app.module.ts\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { StoreModule } from '@ngrx/store';\nimport { counterReducer } from './counter.reducer';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    StoreModule.forRoot({ count: counterReducer })\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n//app.component.ts\nimport { Component } from \"@angular/core\";\nimport {Store} from \"@ngrx/store\";\nimport { Observable } from \"rxjs\";\nimport {increment, decrement, reset} from \"./counter.actions\";\n\n@Component({\n  selector:'app-root',\n  template:'\n    <button id=\"increment\" (click)=\"increment()\">Increment</button>\n            {{count | async}}\n    <button id=\"decrement\" (click)=\"decrement()\">Decrement</button>\n    <button id=\"reset\" (click)=\"reset()\">Reset</button>\n  '\n})\n\nexport class AppComponent{\n  count:Observable<number>;\n\n  constructor(private store: Store<{count:number}>){\n    this.count=store.select('count')\n  }\n\n  increment(){\n    this.store.dispatch(increment())\n  }\n\n  decrement(){\n    this.store.dispatch(decrement())\n  }\n\n  reset(){\n    this.store.dispatch(reset())\n  }\n}\n`.trim();\n\nconst ngrxcounters = `\n//counter.actions.ts\nimport { createAction } from '@ngrx/store';\n\nexport const increment = createAction('[Counter Component] Increment');\nexport const decrement = createAction('[Counter Component] Decrement');\nexport const reset = createAction('[Counter Component] Reset');\n\n\n//counter.reducer.ts\nimport { createReducer, on } from '@ngrx/store';\nimport { increment, decrement, reset } from './counter.actions';\n\nexport const initialState = 0;\n\nexport const counterReducer = createReducer(\n  initialState,\n  on(increment, (state) => state + 1),\n  on(decrement, (state) => state - 1),\n  on(reset, (state) => 0)\n);\n`.trim();\n\nconst addcomponents = `\n//app.module.ts\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { StoreModule } from '@ngrx/store';\nimport { AppComponent } from './app.component';\nimport { todoReducer } from './reducers';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    StoreModule.forRoot({ todoState: todoReducer })\n  ],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n//app.component.ts\nimport { Component } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Todo } from './interfaces';\nimport { Add, Remove } from './actions';\nimport { Observable } from 'rxjs';\n\n\n@Component({\n  selector: 'my-app',\n  template:'\n  <form>\n    \t<input type=\"text\" placeholder=\"Add new TODO task\" [(ngModel)]=\"newTodoText\" [ngModelOptions]=\"{standalone: true}\"/>\n      <button type=\"submit\" (click)=\"addTodo()\">Add</button>\n  </form>\n  <div *ngFor=\"let todo of todos | async\">\n    <span>{{todo.text}}</span>\n    <div>\n      <button (click)=\"removeTodo(todo.id)\">Delete</button>\n    </div>\n  </div>\n  '\n})\nexport class AppComponent {\n  todos: Observable<Todo[]>;\n  newTodoText: string = \"\";\n  constructor(private store: Store<{ todoState: Array<Todo> }>) {\n    this.todos = store.select(state => state.todoState);\n  }\n  addTodo() {\n    this.store.dispatch(Add({ text: this.newTodoText || 'Untitled task' }));\n    this.newTodoText = '';\n  }\n\n  removeTodo(id:any) {\n    this.store.dispatch(Remove({ id }));\n  }\n}\n`.trim();\n\nconst ngrxcomponents = `\n//interfaces.ts\nexport interface Todo {\n  text: string;\n  todo: boolean;\n  id: string;\n}\n\n\n//actions.ts\nimport {createAction, props} from '@ngrx/store';\n\nexport const Add = createAction('[Todo Component] Add', props<{text: string}>());\nexport const Remove = createAction('[Todo Component] Remove', props<{id: string}>());\nexport const Toggle = createAction('[Todo Component] Toggle', props<{id: string}>());\n\n\n//reducers.ts\nimport { createReducer, on } from '@ngrx/store';\nimport { Todo } from './interfaces';\nimport { Add, Remove, Toggle } from './actions';\nimport * as uuid from 'uuid';\n\nconst initialState: Array<Todo> = [];\n\nexport const todoReducer = createReducer(initialState,\n  on(Add, (state, action) => ([...state, { id: uuid.v4(), text: action.text, todo: true }])),\n  on(Remove, (state, action) => state.filter(i => i.id !== action.id)),\n  on(Toggle, (state, action) => state.map(i => i.id === action.id ? {...i, todo: !i.todo} : i)),\n)\n`.trim();\n\n\nclass NgrxCounter extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Counter</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={counters}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>ngrxcounters</b>\n              <div style={titles}>\n                <PrismCode\n                  code={ngrxcounters}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Add - Delete</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={addcomponents}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>ngrxadd</b>\n              <div style={titles}>\n                <PrismCode\n                  code={ngrxcomponents}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(NgrxCounter));\n"]},"metadata":{},"sourceType":"module"}