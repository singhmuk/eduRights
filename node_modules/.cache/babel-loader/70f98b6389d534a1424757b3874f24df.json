{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/arrayAlgo.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst strArray = `\n    var strArray = \"StackOverflow\".split(\"\");\n    console.log(strArray.join(\"\"));\n`.trim();\nconst Sort = `\nlet i, j, arr=[0,9,8,7,6];\nvar max=0;\n\nfor(i=0; i<arr.length; i++){\n  for(j=i; j<arr.length; j++){\n    if(arr[i]>arr[j]){\n      var temp=arr[i];\n      arr[i]=arr[j];\n      arr[j]=temp;\n    }\n  }\n}\n\nconsole.log(arr);\n\n\n//Greatest Product Of 3\nmax = arr[arr.length-1] * arr[arr.length-2] * arr[arr.length-3]\nconsole.log(max);\n\n\n//optimsed\nconst arr = [0, 9, 8, 7, 6];\narr.sort((a, b) => a - b);\n\nconsole.log(arr);\n`.trim();\nconst duplicates = `\nfunction removeDup(){\n  const arr = [1,2,3,4,3,0,9,0,1];\n  const result=[];\n  \n  for(let i=0; i<arr.length;i++){\n      let count=0;\n     // for(let j=0;j<result.length;j++){\n        for(let j=0;j<arr.length;j++){                                     //Remove Duplicates\n       // if(arr[i]==result[j]) count +=1;                                 //Unique Character\n          if(arr[i]==arr[j]) count +=1;\n      }\n      if(count==1){                                                      //RD\n   // if(count==0){                                                      //UC\n          result.push(arr[i]);\n      }  \n  }\n  \n  console.log(result)\n}\n\nremoveDup();\n`.trim();\nconst compare_array = `\nfunction compare(){\n  const arr=[1,2,3,4,5,6];\n  const arr2=[5,6,7,8,9,0];\n  const result=[];\n  \n  for(let i=0; i<arr.length; i++){\n    if(arr2.indexOf(arr[i]) !== -1){\n      result.push(arr[i]);\n    }\n  }\n  console.log(result)\n}\n\ncompare();\n\n\n//Unique name\nfunction getUnique(){\n  var names = [\"John\", \"Peter\", \"Clark\", \"Harry\", \"John\", \"Alice\"];\n  var newName = [];\n  \n  for(i=0; i < names.length; i++){\n      if(newName.indexOf(names[i]) === -1) {\n          newName.push(names[i]);\n      }\n  }\n  console.log(newName);\n}\n\ngetUnique();\n`.trim();\nconst findMedianSortedArrays = `\nconst median = () => {\n  const arr = [1,12,15,26,38];\n  const arr2 = [4,3,1];\n  let arrMedian=[];\n\n  const result = [...arr, ...arr2].sort((a, b) => a - b);\n  const half = result.length / 2 | 0;\n  \n  if (result.length % 2){\n      arrMedian=result[half];\n  }\n  else{\n      arrMedian=((result[half] + result[half-1])/2);\n  }\n  return console.log(arrMedian);\n}\n\nmedian()\n`.trim();\nconst plusOne = `\nfunction plusOne(){\n  const arr=[1,2,3];\n  let result=[], result2=[];\n\n  for(let i=0; i<arr.length; i++){\n    result.push(arr[i]);\n    result2 = arr[arr.length-1]+1\n  }\n\n  result.pop();\n  result.push(result2);\n  console.log(result)\n}\n\nplusOne();\n`.trim();\nconst arrayCounter = `\nfunction arrCounter(arr){\n  var counter = 0;\n  var maxCount = 0;\n\n    function inner(n){\n      if(!Array.isArray(n)){\n        maxCount = Math.max(maxCount, counter);\n     counter = 0;\n     return\n   }\n   \n   n.forEach(num => {\n   counter ++;\n   inner(num);\n   })\n }\n \n inner(arr);\n console.log(maxCount)\n return maxCount;\n}\n\narrCounter([[3]])\narrCounter([[[[[[[9]]]]]]])\narrCounter([])\n`.trim();\nconst countElements = `\nfunction arrCounts(){\n  const arr = [1,2,3,4,5];\n  var result = 0;\n\n  while(arr[result]!==undefined){\n    result++;\n  }\n  console.log(result);\n}\n\narrCounts();  \n\n\n//\nlet arr=[0,9,8,7,6,6,0];\narr=arr.reduce((acc,curr)=>{\n  return acc[curr]? ++acc[curr]:acc[curr]=1, acc\n},{})\n\nconsole.log(arr)\n`.trim();\nconst occurings = `\nfunction fun() {\n  const arr = [1, 2, 3, 4, 5, 6, 1, 2, 1, 3];\n  const hash = {};\n\n  for (let i = 0; i < arr.length; i++) {\n    if (hash[arr[i]]) {\n      hash[arr[i]] += 1;\n    } else {\n      hash[arr[i]] = 1;\n    }\n  }\n\nconsole.log(hash);\n}\n\nfun();`.trim();\nconst find132pattern = `\nfunction pattern123() {\n  const arr=[1,2,3,4];\n  const number = 132;\n  const result=[];\n\n  const target = number.toString();\n  [target]\n\n  for(let i=0; i<arr.length; i++){\n    if(target.indexOf(arr[i]) !== -1){\n      result.push(arr[i]);\n    }\n  }\n  console.log(result)\n}\n\npattern123();\n`.trim();\nconst numIdenticalPairs = `\nfunction numIdenticalPairs(nums) {\n  let count = 0\n  \n  for (let i=0; i<nums.length; i++) {\n    for (let j=(i+1); j<nums.length; j++) {\n      if (nums[i] === nums[j]) {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\nconsole.log(numIdenticalPairs([1,2,3,1,1,3]))\n`.trim();\nconst removeElement = `\nfunction fun(){\n  const arr=[1,2,3,5,4];\n  const num=5;\n\n  const index = arr.indexOf(num);\n  arr.splice(index,1)\n  console.log(arr)\n}\n\nfun();\n`.trim();\nconst shuffle = `\nfunction fun(){\n  const arr = [7,8,9,10];\n\n  for(let i=0;i<arr.length;i++){\n    const j = Math.floor(Math.random() * (i + 1));\n    let temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  }\n  console.log(arr);\n}\n\nfun();\n`.trim();\nconst searchRange = `\nfunction positionEle(){\n  const arr = [5,7,7,8,8,10], target = 8;\n  let result=[];\n  let i;\n\n  for(i=0; i<arr.length; i++){\n    if(arr[i]==target){\n      result.push(arr.indexOf(target));\n    }\n  }\n  console.log(result);\n}\n\npositionEle();\n`.trim();\nconst combinationSum = `\nfunction combinationSum(){\n  const arr=[1,2,3,6,4,5];\n  const target = 7;\n  let result=[];\n\n  for(let i=0; i<arr.length; i++){\n    for(let j=i; j<arr.length; j++){\n      if(arr[i]+arr[j]==target){\n        result.push(arr[i],arr[j])\n      }\n    }\n  }  \n  console.log(result);\n}\n\ncombinationSum();\n`.trim();\nconst missing_number = `\nfunction missNum() {\n  let i, arr=[0,1,2,4,5], exactsum=0, result=0;\n  exactsum = arr.reduce((a, b) => a + b);\n\n  for (i=0; i<=arr.length; i++) {\n    result += i\n  }\n  \n  result -= exactsum;\n  console.log('Missing Number', result)\n}\n\nmissNum();\n `.trim();\nconst findMissingRanges = `\nconst arr = [1,2,4,8];\nconst missing = [];\nvar count = 1;\n\nfor (let i=0; i<arr.length; i++) {\n  if (arr[i] !== count) {\n    missing.push(count);\n    i--;\n  }\n  count++;\n}\n\nconsole.log(missing);\n\n\n//2\nfunction findMissingRanges(nums, lower, upper) {\n  const result = [];\n  const count = (lo, hi) => hi - lo - 1;\n\n  function set(lo, hi){\n    if (count(lo, hi) === 1) {\n      result.push('$'{lo + 1}')\n    } \n    else if (count(lo, hi) > 1) {\n      result.push('$'{lo + 1}->'$'{hi - 1}')\n    }\n  }\n  \n  for (let i = 0; i <= nums.length; i++) {\n    set(\n      i === 0 ? lower - 1 : nums[i - 1],\n      i === nums.length ? upper + 1 : nums[i],\n    )\n  }\n  return result\n}\n\nconsole.log(findMissingRanges([1,2,3,-2,4]))\n`.trim();\nconst sortname = `\nvar objs = [ \n  { first: 'Mukesh', last: 'Jamf' },\n  { first: 'Rakesh', last: 'Bodine' },\n  { first: 'Bicky', last: 'Prentice' }\n];\n\nfunction fun(){\n  for(let i=0;i<objs.length;i++){\n    for(let j=i;j<objs.length;j++){\n      if(objs[i].first>objs[j].first){\n        let temp=objs[i];\n        objs[i]=objs[j];\n        objs[j]=temp;\n      }\n    }\n    console.log(objs[i])\n  }\n}\n\nfun()\n\n//2\nfunction compare(a, b) {\n  if (a.first < b.first){\n    return -1;\n  }\n  if (a.first > b.first){\n    return 1;\n  }\n  return 0;\n}\n\nconst obj = objs.sort(compare);\nconsole.log(obj)\n`.trim();\nconst concatarr = `\nconst arr1 =[{id:1,name:\"sai\"}, {id:2,name: \"King\"}];\nconst arr2 = [{id:1,age:23},{id:2,age:24}];\n\nfunction fun(){\n   const result = arr1[0].name.concat(arr2[1].age);\n   console.log(result)\n}\n\nfun();\n`.trim();\nconst permute = `\nfunction permute(nums = []){\n  const result = [];\n\n  function aux(list = [], current = []){\n    if (list.length === 0) {\n      result.push(current)\n    }\n\n    list.forEach((number, index) => {\n      aux(list.filter((v, index2) => index2 !== index), [...current, number])\n    })\n  }\n  \n  aux(nums)\n  return result\n}\n\nconsole.log(permute([1,2,3]))\n`.trim();\nconst containsDuplicate = `\nfunction containsDuplicate(nums){\n  const map = {}\n  \n  for (num of nums) {\n    if (map[num]) {\n      return true\n    }\n    map[num] = 1\n  }\n  return false\n}\n\nconsole.log(containsDuplicate([1,2,3,1]))\n`.trim();\nconst summaryRanges = `\nfunction summaryRanges(nums) {\n  let start = null\n  const result = []\n\n  for (let i=0; i<nums.length; i++) {\n    if (start === null) {\n      start = nums[i]\n    }\n    if (nums[i] === nums[i + 1] - 1) continue;\n\n    if (nums[i] === start) {\n      result.push(nums[i].toString())\n      start = null\n    } \n    else {\n      result.push('$'{start}->'$'{nums[i]}')\n      start = null\n    }\n  }\n  \n  return result\n}\n\nconsole.log(summaryRanges([1,2,3,4,6,7,9]))\n`.trim();\nconst productExceptSelf = `\nfunction fun(){\n  const arr = [1,2,3,4];\n  const result = [];\n\n  for(let i=0;i<arr.length;i++){\n    let prod=1;\n    for(let j=0;j<arr.length;j++){\n      if(arr[i] !==arr[j]){\n        prod *=arr[i]\n      }\n    }\n    result.push(prod)\n  }\n  console.log(result)\n}\n\nfun()\n`.trim();\nconst countSmaller = `\nfunction countSmaller(nums) {\n  const result = nums.map(() => 0);\n\n  for (let i=0; i<nums.length; i++) {\n    for (let j=(i+ 1); j<nums.length; j++) {\n      if (nums[j]<nums[i]) {\n        result[i] += 1\n      }\n    }\n  }\n  \n  return result\n}\n\nconsole.log(countSmaller([5,2,6,1]))\n`.trim();\nconst replaceNum = `\nfunction fun(){\n  const arr=[1,2,3,5,4];\n  const num=5;\n  const newnum=6;\n\n  const index=arr.indexOf(num)\n  arr.splice(index,1,newnum)\n\n  console.log(arr)\n}\n\nfun();\n`.trim();\nconst occurence = `\nfunction fun() {\n  const arr = [1, 2, 3, 4, 5, 6];\n  const target = 6;\n  const hash = {};\n  const result = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (hash[target - num] !== undefined) {\n      result.push(hash[target - num], num);\n    }\n\n    hash[num] = num;\n  }\n\n  return console.log(result);\n}\n\nfun();\n\n`.trim();\nconst flateArr = `\n// arr = [10,'h',2,'k',['e','z','y','g'],[44,67,'b','c','a'],[25,100,101,'m','l'],'f',60,55,'x']\n// output [a,b,c,..., 1,2,3....]\n\nconst newArr = [];\nfor (let i = 0; i < arr.length; i++) {\n  if (Array.isArray(arr[i])) {\n    newArr.push(...arr[i]);\n  } else {\n    newArr.push(arr[i]);\n  }\n}\n\nconst result = [];\nfor (let i = 0; i < newArr.length; i++) {\n  for (let j = i; j < newArr.length; j++) {\n    if (newArr[i] > newArr[j]) {\n      let temp = newArr[i];\n      newArr[i] = newArr[j];\n      newArr[j] = temp;\n    }\n  }\n  result.push(newArr[i]);\n}\n\nconsole.log(result);\n\n\n// 2. Separate number and string.\nconst arr=[\n  2,   'a', 10,  'b', 'c', 'e',\n  'f', 'g', 25,  44,  'h', 'k',\n  'l', 55,  60,  67,  'm', 'x',\n  'y', 100, 101, 'z'\n]\nconst str=[], num=[];\n\nfor(let i=0; i<arr.length; i++){\n    if(typeof arr[i]==='number'){\n        num.push(arr[i])\n    }else if(typeof arr[i]==='string'){\n        str.push(arr[i])\n    }\n}\n\nconsole.log(num);\nconsole.log(str);\n`.trim();\n\nclass DSLogic2 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 642\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 643\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645\n      },\n      __self: this\n    }, \"1. Convert a string to an array\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: strArray,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 653\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654\n      },\n      __self: this\n    }, \"Time: \"), \"O(n), where n is the length of the string str. This is because the split() method iterates over the string str once, and the join() method iterates over the array strArray once.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }, \"Space: \"), \"O(n), where n is the length of the string str. This is because the strArray array can store up to n characters.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    }, \"In simple words, the code takes a linear amount of time to run, and it uses a linear amount of space.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660\n      },\n      __self: this\n    }, \"2. Sort\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Sort,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669\n      },\n      __self: this\n    }, \"Time: \"), \"O(n^2), where n is the length of the array arr. This is because the for loop iterates over the array arr twice, and the inner for loop iterates over the array arr once.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670\n      },\n      __self: this\n    }, \"Space: \"), \"O(1), where n is the length of the array arr. This is because the algorithm only uses the variables i, j, temp, and arr.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671\n      },\n      __self: this\n    }, \"In simple words, the code takes a quadratic amount of time to run, and it uses a constant amount of space.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675\n      },\n      __self: this\n    }, \"3. Remove Duplicates\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: duplicates,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685\n      },\n      __self: this\n    }, \"4. Contains Duplicate.\"), \"Given an array of integers, find if the array contains any duplicates.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687\n      },\n      __self: this\n    }), \"Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: containsDuplicate,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 696\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 697\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 697\n      },\n      __self: this\n    }, \"Time: \"), \"O(n), where n is the length of the array nums. This is because the for loop iterates over the array nums once, and the map[num] lookup takes constant time.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 697\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698\n      },\n      __self: this\n    }, \"Space: \"), \"O(n), where n is the length of the array nums. This is because the map object can store up to n keys.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699\n      },\n      __self: this\n    }, \"In simple words, the containsDuplicate() function takes a linear amount of time to run, and it uses a linear amount of space.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703\n      },\n      __self: this\n    }, \"5. Compare Array\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: compare_array,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 713\n      },\n      __self: this\n    }, \"6. Counting Elements.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 714\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: countElements,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715\n      },\n      __self: this\n    })), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 721\n      },\n      __self: this\n    }, \"1:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 721\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 722\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 723\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 723\n      },\n      __self: this\n    }, \"Time: \"), \"O(n), where n is the length of the array arr. This is because the while loop iterates over the array arr once, and the arr[result]!==undefined check takes constant time.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 723\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724\n      },\n      __self: this\n    }, \"Space: \"), \"O(1), where n is the length of the array arr. This is because the function only uses the variables arr and result.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725\n      },\n      __self: this\n    }, \"In simple words, the arrCounts() function takes a linear amount of time to run, and it uses a constant amount of space.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 727\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 728\n      },\n      __self: this\n    }, \"2:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 729\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 730\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 730\n      },\n      __self: this\n    }, \"Time: \"), \"O(n), where n is the length of the array arr. This is because the reduce() method iterates over the array arr once, and the ++acc[curr] or acc[curr]=1 operations take constant time.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 730\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731\n      },\n      __self: this\n    }, \"Space: \"), \"O(n), where n is the length of the array arr. This is because the reduce() method creates a new object to store the results of the reduction.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732\n      },\n      __self: this\n    }, \"In simple words, the code takes a linear amount of time to run, and it uses a linear amount of space.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 736\n      },\n      __self: this\n    }, \"6. Occurence of Elements.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 737\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: occurings,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 738\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 744\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 745\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 745\n      },\n      __self: this\n    }, \"Time: \"), \"O(n), where n is the length of the array arr. This is because the for loop iterates over the array arr once, and the hash[arr[i]] lookup takes constant time.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 745\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746\n      },\n      __self: this\n    }, \"Space: \"), \"O(n), where n is the length of the array arr. This is because the hash object can store up to n keys.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 747\n      },\n      __self: this\n    }, \"In simple words, the function fun() takes a linear amount of time to run, and it uses a linear amount of space.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 749\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 751\n      },\n      __self: this\n    }, \"6. Target Elements.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 752\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: occurence,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 759\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 761\n      },\n      __self: this\n    }, \"6. Flat Arr.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 762\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: flateArr,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 763\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 769\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 771\n      },\n      __self: this\n    }, \"7. 132 Pattern.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 772\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [1,2,3,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 772\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 773\n      },\n      __self: this\n    }, \"Output: \"), \"false\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 773\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 774\n      },\n      __self: this\n    }, \"Explanation: \"), \"There is no 132 pattern in the sequence.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 775\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: find132pattern,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 776\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 782\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 784\n      },\n      __self: this\n    }, \"8. Combination Sum\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 785\n      },\n      __self: this\n    }, \"Input: \"), \"candidates = [2,3,6,7], target = 7,\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 785\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 786\n      },\n      __self: this\n    }, \"A solution set is: \"), \"[ [7],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 788\n      },\n      __self: this\n    }), \"[2,2,3]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 789\n      },\n      __self: this\n    }), \"]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 791\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: combinationSum,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 792\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 798\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 800\n      },\n      __self: this\n    }, \"9. Remove Element\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 801\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: removeElement,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 802\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 808\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 810\n      },\n      __self: this\n    }, \"10. Replace Element\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 811\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: replaceNum,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 812\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 818\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 820\n      },\n      __self: this\n    }, \"10. Shuffle the Array.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 821\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: shuffle,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 822\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 828\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 830\n      },\n      __self: this\n    }, \"11. Median of Two Sorted Arrays.\"), \"Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 832\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 833\n      },\n      __self: this\n    }, \"Follow up: \"), \"The overall run time complexity should be O(log (m+n)).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 834\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 836\n      },\n      __self: this\n    }, \"Example 1:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 837\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 838\n      },\n      __self: this\n    }, \"Input: \"), \"nums1 = [1,3], nums2 = [2]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 838\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 839\n      },\n      __self: this\n    }, \"Output: \"), \"2.00000\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 839\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 840\n      },\n      __self: this\n    }, \"Explanation: \"), \"merged array = [1,2,3] and median is 2.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 840\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 840\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 841\n      },\n      __self: this\n    }, \"Example 2: \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 841\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 843\n      },\n      __self: this\n    }, \"Input: \"), \"nums1 = [1,2], nums2 = [3,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 843\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 844\n      },\n      __self: this\n    }, \"Output: \"), \"2.50000\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 844\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 845\n      },\n      __self: this\n    }, \"Explanation: \"), \"merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 846\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: findMedianSortedArrays,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 847\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 853\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 855\n      },\n      __self: this\n    }, \"12. Plus One.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 856\n      },\n      __self: this\n    }, \"Input: \"), \"digits = [1,2,3]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 856\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 857\n      },\n      __self: this\n    }, \"Output: \"), \"[1,2,4]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 858\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: plusOne,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 859\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 865\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 867\n      },\n      __self: this\n    }, \"13. Missing Number\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 868\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: missing_number,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 869\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 875\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 877\n      },\n      __self: this\n    }, \"14. Missing Ranges.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 878\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: findMissingRanges,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 879\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 885\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 887\n      },\n      __self: this\n    }, \"15. Sort name.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 888\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: sortname,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 889\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 895\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 897\n      },\n      __self: this\n    }, \"16. Concat 2 array on the basis of id\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 898\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: concatarr,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 899\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 905\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 907\n      },\n      __self: this\n    }, \"17. Find First and Last Position of Element in Sorted Array\"), \"Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 909\n      },\n      __self: this\n    }), \"Your algorithm's runtime complexity must be in the order of O(log n).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 910\n      },\n      __self: this\n    }), \"If the target is not found in the array, return [-1, -1].\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 912\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 914\n      },\n      __self: this\n    }, \"Example 1:\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 915\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [5,7,7,8,8,10], target = 8\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 915\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 916\n      },\n      __self: this\n    }, \"Output: \"), \"[3,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 916\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 916\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 917\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: searchRange,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 918\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 925\n      },\n      __self: this\n    }, \"18. Permutations.\"), \"Given a collection of distinct integers, return all possible permutations.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 927\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: permute,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 928\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 934\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 936\n      },\n      __self: this\n    }, \"19. Number of Good Pairs.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 937\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [1,2,3,1,1,3] \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 937\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 938\n      },\n      __self: this\n    }, \"Output: \"), \"4 \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 938\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 939\n      },\n      __self: this\n    }, \"Explanation: \"), \"There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 940\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: numIdenticalPairs,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 941\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 947\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 949\n      },\n      __self: this\n    }, \"20. Product of Array Except Self.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 950\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: productExceptSelf,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 951\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 957\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 959\n      },\n      __self: this\n    }, \"21. Count of Smaller Numbers After Self.\"), \"You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 961\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 962\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [5,2,6,1]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 962\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 963\n      },\n      __self: this\n    }, \"Output: \"), \"[2,1,1,0]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 963\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 964\n      },\n      __self: this\n    }, \"Explanation: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 965\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 966\n      },\n      __self: this\n    }, \"To the right of 5 there are 2 smaller elements (2 and 1).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 967\n      },\n      __self: this\n    }, \"To the right of 2 there is only 1 smaller element (1).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 968\n      },\n      __self: this\n    }, \"To the right of 6 there is 1 smaller element (1).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 969\n      },\n      __self: this\n    }, \"To the right of 1 there is 0 smaller element.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 971\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: countSmaller,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 972\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 978\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 980\n      },\n      __self: this\n    }, \"22. Array Counter\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 981\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: arrayCounter,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 982\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 988\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 990\n      },\n      __self: this\n    }, \"23. Summary Ranges.\"), \"Given a sorted integer array without duplicates, return the summary of its ranges.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 992\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: summaryRanges,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 993\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(DSLogic2);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/arrayAlgo.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","strArray","trim","Sort","duplicates","compare_array","findMedianSortedArrays","plusOne","arrayCounter","countElements","occurings","find132pattern","numIdenticalPairs","removeElement","shuffle","searchRange","combinationSum","missing_number","findMissingRanges","sortname","concatarr","permute","containsDuplicate","summaryRanges","productExceptSelf","countSmaller","replaceNum","occurence","flateArr","DSLogic2","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst strArray = `\n    var strArray = \"StackOverflow\".split(\"\");\n    console.log(strArray.join(\"\"));\n`.trim();\n\nconst Sort = `\nlet i, j, arr=[0,9,8,7,6];\nvar max=0;\n\nfor(i=0; i<arr.length; i++){\n  for(j=i; j<arr.length; j++){\n    if(arr[i]>arr[j]){\n      var temp=arr[i];\n      arr[i]=arr[j];\n      arr[j]=temp;\n    }\n  }\n}\n\nconsole.log(arr);\n\n\n//Greatest Product Of 3\nmax = arr[arr.length-1] * arr[arr.length-2] * arr[arr.length-3]\nconsole.log(max);\n\n\n//optimsed\nconst arr = [0, 9, 8, 7, 6];\narr.sort((a, b) => a - b);\n\nconsole.log(arr);\n`.trim()\n\nconst duplicates = `\nfunction removeDup(){\n  const arr = [1,2,3,4,3,0,9,0,1];\n  const result=[];\n  \n  for(let i=0; i<arr.length;i++){\n      let count=0;\n     // for(let j=0;j<result.length;j++){\n        for(let j=0;j<arr.length;j++){                                     //Remove Duplicates\n       // if(arr[i]==result[j]) count +=1;                                 //Unique Character\n          if(arr[i]==arr[j]) count +=1;\n      }\n      if(count==1){                                                      //RD\n   // if(count==0){                                                      //UC\n          result.push(arr[i]);\n      }  \n  }\n  \n  console.log(result)\n}\n\nremoveDup();\n`.trim()\n\nconst compare_array = `\nfunction compare(){\n  const arr=[1,2,3,4,5,6];\n  const arr2=[5,6,7,8,9,0];\n  const result=[];\n  \n  for(let i=0; i<arr.length; i++){\n    if(arr2.indexOf(arr[i]) !== -1){\n      result.push(arr[i]);\n    }\n  }\n  console.log(result)\n}\n\ncompare();\n\n\n//Unique name\nfunction getUnique(){\n  var names = [\"John\", \"Peter\", \"Clark\", \"Harry\", \"John\", \"Alice\"];\n  var newName = [];\n  \n  for(i=0; i < names.length; i++){\n      if(newName.indexOf(names[i]) === -1) {\n          newName.push(names[i]);\n      }\n  }\n  console.log(newName);\n}\n\ngetUnique();\n`.trim();\n\nconst findMedianSortedArrays = `\nconst median = () => {\n  const arr = [1,12,15,26,38];\n  const arr2 = [4,3,1];\n  let arrMedian=[];\n\n  const result = [...arr, ...arr2].sort((a, b) => a - b);\n  const half = result.length / 2 | 0;\n  \n  if (result.length % 2){\n      arrMedian=result[half];\n  }\n  else{\n      arrMedian=((result[half] + result[half-1])/2);\n  }\n  return console.log(arrMedian);\n}\n\nmedian()\n`.trim();\n\nconst plusOne = `\nfunction plusOne(){\n  const arr=[1,2,3];\n  let result=[], result2=[];\n\n  for(let i=0; i<arr.length; i++){\n    result.push(arr[i]);\n    result2 = arr[arr.length-1]+1\n  }\n\n  result.pop();\n  result.push(result2);\n  console.log(result)\n}\n\nplusOne();\n`.trim();\n\nconst arrayCounter = `\nfunction arrCounter(arr){\n  var counter = 0;\n  var maxCount = 0;\n\n    function inner(n){\n      if(!Array.isArray(n)){\n        maxCount = Math.max(maxCount, counter);\n     counter = 0;\n     return\n   }\n   \n   n.forEach(num => {\n   counter ++;\n   inner(num);\n   })\n }\n \n inner(arr);\n console.log(maxCount)\n return maxCount;\n}\n\narrCounter([[3]])\narrCounter([[[[[[[9]]]]]]])\narrCounter([])\n`.trim()\n\nconst countElements = `\nfunction arrCounts(){\n  const arr = [1,2,3,4,5];\n  var result = 0;\n\n  while(arr[result]!==undefined){\n    result++;\n  }\n  console.log(result);\n}\n\narrCounts();  \n\n\n//\nlet arr=[0,9,8,7,6,6,0];\narr=arr.reduce((acc,curr)=>{\n  return acc[curr]? ++acc[curr]:acc[curr]=1, acc\n},{})\n\nconsole.log(arr)\n`.trim();\n\nconst occurings = `\nfunction fun() {\n  const arr = [1, 2, 3, 4, 5, 6, 1, 2, 1, 3];\n  const hash = {};\n\n  for (let i = 0; i < arr.length; i++) {\n    if (hash[arr[i]]) {\n      hash[arr[i]] += 1;\n    } else {\n      hash[arr[i]] = 1;\n    }\n  }\n\nconsole.log(hash);\n}\n\nfun();`.trim();\n\nconst find132pattern = `\nfunction pattern123() {\n  const arr=[1,2,3,4];\n  const number = 132;\n  const result=[];\n\n  const target = number.toString();\n  [target]\n\n  for(let i=0; i<arr.length; i++){\n    if(target.indexOf(arr[i]) !== -1){\n      result.push(arr[i]);\n    }\n  }\n  console.log(result)\n}\n\npattern123();\n`.trim();\n\nconst numIdenticalPairs = `\nfunction numIdenticalPairs(nums) {\n  let count = 0\n  \n  for (let i=0; i<nums.length; i++) {\n    for (let j=(i+1); j<nums.length; j++) {\n      if (nums[i] === nums[j]) {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\nconsole.log(numIdenticalPairs([1,2,3,1,1,3]))\n`.trim();\n\nconst removeElement = `\nfunction fun(){\n  const arr=[1,2,3,5,4];\n  const num=5;\n\n  const index = arr.indexOf(num);\n  arr.splice(index,1)\n  console.log(arr)\n}\n\nfun();\n`.trim();\n\nconst shuffle = `\nfunction fun(){\n  const arr = [7,8,9,10];\n\n  for(let i=0;i<arr.length;i++){\n    const j = Math.floor(Math.random() * (i + 1));\n    let temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  }\n  console.log(arr);\n}\n\nfun();\n`.trim();\n\nconst searchRange = `\nfunction positionEle(){\n  const arr = [5,7,7,8,8,10], target = 8;\n  let result=[];\n  let i;\n\n  for(i=0; i<arr.length; i++){\n    if(arr[i]==target){\n      result.push(arr.indexOf(target));\n    }\n  }\n  console.log(result);\n}\n\npositionEle();\n`.trim();\n\nconst combinationSum = `\nfunction combinationSum(){\n  const arr=[1,2,3,6,4,5];\n  const target = 7;\n  let result=[];\n\n  for(let i=0; i<arr.length; i++){\n    for(let j=i; j<arr.length; j++){\n      if(arr[i]+arr[j]==target){\n        result.push(arr[i],arr[j])\n      }\n    }\n  }  \n  console.log(result);\n}\n\ncombinationSum();\n`.trim();\n\nconst missing_number = `\nfunction missNum() {\n  let i, arr=[0,1,2,4,5], exactsum=0, result=0;\n  exactsum = arr.reduce((a, b) => a + b);\n\n  for (i=0; i<=arr.length; i++) {\n    result += i\n  }\n  \n  result -= exactsum;\n  console.log('Missing Number', result)\n}\n\nmissNum();\n `.trim()\n\nconst findMissingRanges = `\nconst arr = [1,2,4,8];\nconst missing = [];\nvar count = 1;\n\nfor (let i=0; i<arr.length; i++) {\n  if (arr[i] !== count) {\n    missing.push(count);\n    i--;\n  }\n  count++;\n}\n\nconsole.log(missing);\n\n\n//2\nfunction findMissingRanges(nums, lower, upper) {\n  const result = [];\n  const count = (lo, hi) => hi - lo - 1;\n\n  function set(lo, hi){\n    if (count(lo, hi) === 1) {\n      result.push('$'{lo + 1}')\n    } \n    else if (count(lo, hi) > 1) {\n      result.push('$'{lo + 1}->'$'{hi - 1}')\n    }\n  }\n  \n  for (let i = 0; i <= nums.length; i++) {\n    set(\n      i === 0 ? lower - 1 : nums[i - 1],\n      i === nums.length ? upper + 1 : nums[i],\n    )\n  }\n  return result\n}\n\nconsole.log(findMissingRanges([1,2,3,-2,4]))\n`.trim();\n\nconst sortname = `\nvar objs = [ \n  { first: 'Mukesh', last: 'Jamf' },\n  { first: 'Rakesh', last: 'Bodine' },\n  { first: 'Bicky', last: 'Prentice' }\n];\n\nfunction fun(){\n  for(let i=0;i<objs.length;i++){\n    for(let j=i;j<objs.length;j++){\n      if(objs[i].first>objs[j].first){\n        let temp=objs[i];\n        objs[i]=objs[j];\n        objs[j]=temp;\n      }\n    }\n    console.log(objs[i])\n  }\n}\n\nfun()\n\n//2\nfunction compare(a, b) {\n  if (a.first < b.first){\n    return -1;\n  }\n  if (a.first > b.first){\n    return 1;\n  }\n  return 0;\n}\n\nconst obj = objs.sort(compare);\nconsole.log(obj)\n`.trim();\n\nconst concatarr = `\nconst arr1 =[{id:1,name:\"sai\"}, {id:2,name: \"King\"}];\nconst arr2 = [{id:1,age:23},{id:2,age:24}];\n\nfunction fun(){\n   const result = arr1[0].name.concat(arr2[1].age);\n   console.log(result)\n}\n\nfun();\n`.trim();\n\nconst permute = `\nfunction permute(nums = []){\n  const result = [];\n\n  function aux(list = [], current = []){\n    if (list.length === 0) {\n      result.push(current)\n    }\n\n    list.forEach((number, index) => {\n      aux(list.filter((v, index2) => index2 !== index), [...current, number])\n    })\n  }\n  \n  aux(nums)\n  return result\n}\n\nconsole.log(permute([1,2,3]))\n`.trim();\n\nconst containsDuplicate = `\nfunction containsDuplicate(nums){\n  const map = {}\n  \n  for (num of nums) {\n    if (map[num]) {\n      return true\n    }\n    map[num] = 1\n  }\n  return false\n}\n\nconsole.log(containsDuplicate([1,2,3,1]))\n`.trim();\n\nconst summaryRanges = `\nfunction summaryRanges(nums) {\n  let start = null\n  const result = []\n\n  for (let i=0; i<nums.length; i++) {\n    if (start === null) {\n      start = nums[i]\n    }\n    if (nums[i] === nums[i + 1] - 1) continue;\n\n    if (nums[i] === start) {\n      result.push(nums[i].toString())\n      start = null\n    } \n    else {\n      result.push('$'{start}->'$'{nums[i]}')\n      start = null\n    }\n  }\n  \n  return result\n}\n\nconsole.log(summaryRanges([1,2,3,4,6,7,9]))\n`.trim();\n\nconst productExceptSelf = `\nfunction fun(){\n  const arr = [1,2,3,4];\n  const result = [];\n\n  for(let i=0;i<arr.length;i++){\n    let prod=1;\n    for(let j=0;j<arr.length;j++){\n      if(arr[i] !==arr[j]){\n        prod *=arr[i]\n      }\n    }\n    result.push(prod)\n  }\n  console.log(result)\n}\n\nfun()\n`.trim();\n\nconst countSmaller = `\nfunction countSmaller(nums) {\n  const result = nums.map(() => 0);\n\n  for (let i=0; i<nums.length; i++) {\n    for (let j=(i+ 1); j<nums.length; j++) {\n      if (nums[j]<nums[i]) {\n        result[i] += 1\n      }\n    }\n  }\n  \n  return result\n}\n\nconsole.log(countSmaller([5,2,6,1]))\n`.trim();\n\nconst replaceNum = `\nfunction fun(){\n  const arr=[1,2,3,5,4];\n  const num=5;\n  const newnum=6;\n\n  const index=arr.indexOf(num)\n  arr.splice(index,1,newnum)\n\n  console.log(arr)\n}\n\nfun();\n`.trim();\n\nconst occurence = `\nfunction fun() {\n  const arr = [1, 2, 3, 4, 5, 6];\n  const target = 6;\n  const hash = {};\n  const result = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (hash[target - num] !== undefined) {\n      result.push(hash[target - num], num);\n    }\n\n    hash[num] = num;\n  }\n\n  return console.log(result);\n}\n\nfun();\n\n`.trim();\n\nconst flateArr = `\n// arr = [10,'h',2,'k',['e','z','y','g'],[44,67,'b','c','a'],[25,100,101,'m','l'],'f',60,55,'x']\n// output [a,b,c,..., 1,2,3....]\n\nconst newArr = [];\nfor (let i = 0; i < arr.length; i++) {\n  if (Array.isArray(arr[i])) {\n    newArr.push(...arr[i]);\n  } else {\n    newArr.push(arr[i]);\n  }\n}\n\nconst result = [];\nfor (let i = 0; i < newArr.length; i++) {\n  for (let j = i; j < newArr.length; j++) {\n    if (newArr[i] > newArr[j]) {\n      let temp = newArr[i];\n      newArr[i] = newArr[j];\n      newArr[j] = temp;\n    }\n  }\n  result.push(newArr[i]);\n}\n\nconsole.log(result);\n\n\n// 2. Separate number and string.\nconst arr=[\n  2,   'a', 10,  'b', 'c', 'e',\n  'f', 'g', 25,  44,  'h', 'k',\n  'l', 55,  60,  67,  'm', 'x',\n  'y', 100, 101, 'z'\n]\nconst str=[], num=[];\n\nfor(let i=0; i<arr.length; i++){\n    if(typeof arr[i]==='number'){\n        num.push(arr[i])\n    }else if(typeof arr[i]==='string'){\n        str.push(arr[i])\n    }\n}\n\nconsole.log(num);\nconsole.log(str);\n`.trim();\n\nclass DSLogic2 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n            <h3>1. Convert a string to an array</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={strArray}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <ul>\n                <li><b>Time: </b>O(n), where n is the length of the string str. This is because the split() method iterates over the string str once, and the join() method iterates over the array strArray once.</li><br/>\n                <li><b>Space: </b>O(n), where n is the length of the string str. This is because the strArray array can store up to n characters.</li><br/>\n                <li>In simple words, the code takes a linear amount of time to run, and it uses a linear amount of space.</li>\n              </ul>\n              <br />\n\n              <h3>2. Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Sort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <ul>\n                <li><b>Time: </b>O(n^2), where n is the length of the array arr. This is because the for loop iterates over the array arr twice, and the inner for loop iterates over the array arr once.</li><br/>\n                <li><b>Space: </b>O(1), where n is the length of the array arr. This is because the algorithm only uses the variables i, j, temp, and arr.</li><br/>\n                <li>In simple words, the code takes a quadratic amount of time to run, and it uses a constant amount of space.</li>\n              </ul>\n              <br />\n\n              <h3>3. Remove Duplicates</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={duplicates}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Contains Duplicate.</h3>\n              Given an array of integers, find if the array contains any duplicates.\n              <br/>\n              Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.\n              <div style={titles}>\n                <PrismCode\n                  code={containsDuplicate}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <ul>\n                <li><b>Time: </b>O(n), where n is the length of the array nums. This is because the for loop iterates over the array nums once, and the map[num] lookup takes constant time.</li><br/>\n                <li><b>Space: </b>O(n), where n is the length of the array nums. This is because the map object can store up to n keys.</li><br/>\n                <li>In simple words, the containsDuplicate() function takes a linear amount of time to run, and it uses a linear amount of space.</li>\n              </ul>\n              <br/>\n\n              <h3>5. Compare Array</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={compare_array}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Counting Elements.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={countElements}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <b>1:</b><br/>\n              <ul>\n                <li><b>Time: </b>O(n), where n is the length of the array arr. This is because the while loop iterates over the array arr once, and the arr[result]!==undefined check takes constant time.</li><br/>\n                <li><b>Space: </b>O(1), where n is the length of the array arr. This is because the function only uses the variables arr and result.</li><br/>\n                <li>In simple words, the arrCounts() function takes a linear amount of time to run, and it uses a constant amount of space.</li>\n              </ul>\n              <br/>\n              <b>2:</b>\n              <ul>\n                <li><b>Time: </b>O(n), where n is the length of the array arr. This is because the reduce() method iterates over the array arr once, and the ++acc[curr] or acc[curr]=1 operations take constant time.</li><br/>\n                <li><b>Space: </b>O(n), where n is the length of the array arr. This is because the reduce() method creates a new object to store the results of the reduction.</li><br/>\n                <li>In simple words, the code takes a linear amount of time to run, and it uses a linear amount of space.</li>\n              </ul>\n              <br/>\n\n              <h3>6. Occurence of Elements.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={occurings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <ul>\n                <li><b>Time: </b>O(n), where n is the length of the array arr. This is because the for loop iterates over the array arr once, and the hash[arr[i]] lookup takes constant time.</li><br/>\n                <li><b>Space: </b>O(n), where n is the length of the array arr. This is because the hash object can store up to n keys.</li><br/>\n                <li>In simple words, the function fun() takes a linear amount of time to run, and it uses a linear amount of space.</li>\n              </ul>\n              <br/>\n\n              <h3>6. Target Elements.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={occurence}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>6. Flat Arr.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={flateArr}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>7. 132 Pattern.</h3>\n              <b>Input: </b>nums = [1,2,3,4]<br/>\n              <b>Output: </b>false<br/>\n              <b>Explanation: </b>There is no 132 pattern in the sequence.\n              <div style={titles}>\n                <PrismCode\n                  code={find132pattern}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>8. Combination Sum</h3>\n              <b>Input: </b>candidates = [2,3,6,7], target = 7,<br/>\n              <b>A solution set is: </b>\n              [\n                [7],<br/>\n                [2,2,3]<br/>\n              ]\n              <div style={titles}>\n                <PrismCode\n                  code={combinationSum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>9. Remove Element</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={removeElement}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>10. Replace Element</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={replaceNum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>10. Shuffle the Array.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={shuffle}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>11. Median of Two Sorted Arrays.</h3>\n              Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\n              <br/>\n              <b>Follow up: </b>The overall run time complexity should be O(log (m+n)).\n              <br/>\n\n              <b>Example 1:</b>\n              <br/>\n              <b>Input: </b>nums1 = [1,3], nums2 = [2]<br/>\n              <b>Output: </b>2.00000<br/>\n              <b>Explanation: </b>merged array = [1,2,3] and median is 2.<br/><br/>\n              <b>Example 2: </b><br/>\n\n              <b>Input: </b>nums1 = [1,2], nums2 = [3,4]<br/>\n              <b>Output: </b>2.50000<br/>\n              <b>Explanation: </b>merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n              <div style={titles}>\n                <PrismCode\n                  code={findMedianSortedArrays}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>12. Plus One.</h3>\n              <b>Input: </b>digits = [1,2,3]<br/>\n              <b>Output: </b>[1,2,4]\n              <div style={titles}>\n                <PrismCode\n                  code={plusOne}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>13. Missing Number</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={missing_number}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>14. Missing Ranges.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={findMissingRanges}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>15. Sort name.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={sortname}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>16. Concat 2 array on the basis of id</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={concatarr}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>17. Find First and Last Position of Element in Sorted Array</h3>\n              Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\n              <br/>\n              Your algorithm's runtime complexity must be in the order of O(log n).<br/>\n\n              If the target is not found in the array, return [-1, -1].<br/>\n\n              <b>Example 1:</b>\n              <b>Input: </b>nums = [5,7,7,8,8,10], target = 8<br/>\n              <b>Output: </b>[3,4]<br/><br/>\n              <div style={titles}>\n                <PrismCode\n                  code={searchRange}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <h3>18. Permutations.</h3>\n              Given a collection of distinct integers, return all possible permutations.\n              <div style={titles}>\n                <PrismCode\n                  code={permute}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>19. Number of Good Pairs.</h3>\n              <b>Input: </b>nums = [1,2,3,1,1,3] <br/>\n              <b>Output: </b>4 <br/>\n              <b>Explanation: </b>There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.\n              <div style={titles}>\n                <PrismCode\n                  code={numIdenticalPairs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>20. Product of Array Except Self.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={productExceptSelf}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>21. Count of Smaller Numbers After Self.</h3>\n              You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].\n              <br/>\n              <b>Input: </b>nums = [5,2,6,1]<br/>\n              <b>Output: </b>[2,1,1,0]<br/>\n              <b>Explanation: </b>\n              <ul>\n                <li>To the right of 5 there are 2 smaller elements (2 and 1).</li>\n                <li>To the right of 2 there is only 1 smaller element (1).</li>\n                <li>To the right of 6 there is 1 smaller element (1).</li>\n                <li>To the right of 1 there is 0 smaller element.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={countSmaller}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>22. Array Counter</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={arrayCounter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>23. Summary Ranges.</h3>\n              Given a sorted integer array without duplicates, return the summary of its ranges.\n              <div style={titles}>\n                <PrismCode\n                  code={summaryRanges}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic2));\n"]},"metadata":{},"sourceType":"module"}