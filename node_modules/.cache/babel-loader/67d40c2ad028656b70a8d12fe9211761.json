{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/rxjs.js\";\nimport React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\nconst titles = {\n  backgroundColor: \"#F0F8FF\",\n  padding: \"1px\",\n  fontSize: \"16px\"\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst subscribes = `\nobs.subscribe({\n  next:(data)=>console.log('obj',data),\n  error:(err)=>console.log('obj',err),\n  complete:()=>console.log('complate'),\n})`.trim();\nconst mapfil = `\n//html\n<div *ngFor=\"let post of posts\">{{ post.title }}</div>\n\nexport class AppComponent {\n  posts: any = [];\n\n  constructor(private http: HttpClient) {}\n  ngOnInit() {\n    this.http\n      .get('https://jsonplaceholder.typicode.com/posts')\n      .pipe(map((res: any) => res.slice(0, 5)))\n      .subscribe((res: any) => {\n        this.posts = res;\n      });\n  }\n}\n`.trim();\nconst mergemaps = `\n//html\n{{ data }}\n\nexport class AppComponent {\ndata: any;\nconstructor(private http: HttpClient) {}\n\nngOnInit() {\n  this.http.get('https://jsonplaceholder.typicode.com/posts/1')\n    .pipe(mergeMap((post: any) =>\n        this.http.get('https://jsonplaceholder.typicode.com/users/'$'{post.userId}')\n      )\n    )\n    .subscribe((user: any) => {\n      this.data = 'User: '$'{user.id}, Post Title: '$'{user.name}';\n    });\n  }\n}\n`.trim();\nconst catchError = `\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\n\n\nexport class AppComponent {\n  errorMessage!: string;\n\n  constructor(private http: HttpClient) {}\n\n  fetchData() {\n    this.http.get('https://api.example.com/data').pipe(catchError((error) => {\n          this.errorMessage = error.message;\n          return throwError(error);\n        })\n      )\n      .subscribe((data) => console.log(data));\n  }\n}\n`.trim();\nconst takeUntils = `\n//html\n<button (click)=\"start()\">Start</button>\n<button (click)=\"stop()\">Stop</button>\n{{ message }}\n\n\nimport { interval, Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nexport class AppComponent {\n  private destroy$: Subject<void> = new Subject<void>();\n  message!: string;\n\n  start(): void {\n    const interval$: Observable<number> = interval(1000);\n    interval$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((count) => (this.message = 'Count: '$'{count}'));\n  }\n\n  stop(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n`.trim();\nconst debounceTimes = `\n//html\n<input type=\"text\" [formControl]=\"searchControl\" placeholder=\"Search...\" />\n<li *ngFor=\"let item of filteredItems\">{{ item }}</li>\n\n\nimport { FormControl } from '@angular/forms';\nimport { debounceTime } from 'rxjs/operators';\n\nexport class AppComponent {\n  searchControl = new FormControl();\n  items = ['apple', 'banana', 'cherry', 'date', 'elderberry'];\n  filteredItems: string[] = [];\n\n  constructor() {\n    this.searchControl.valueChanges\n      .pipe(debounceTime(300))\n      .subscribe((value) => {\n        this.filteredItems = this.items.filter((item) => item.includes(value));\n      });\n  }\n}\n`.trim();\nconst mapipe = `\n//import { of } from 'rxjs';\n//import { filter, map } from 'rxjs/operators';\n\nexport class AppComponent  {\n  val:any=[];\n\n  ngOnInit(){\n    const squareOdd = of(1, 2, 3, 4, 5)\n    .pipe(\n      filter(n => n % 2 !== 0),\n      map(n => n * n)\n    );\n\n    squareOdd.subscribe(x => this.val.push(x));\n  }\n}\n`.trim();\nconst filter = `\n//html\n<div *ngFor=\"let num of numbers\">{{ num }}</div>\n\n\nimport { from } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nexport class AppComponent {\n  numbers: any = [];\n\n  constructor() {\n    from([1, 2, 3, 4, 5, 6])\n      .pipe(filter((num) => num % 2 === 0))\n      .subscribe((num) => this.numbers.push(num));\n  }\n}\n`.trim();\nconst placeholders = `\n//html\n<div *ngFor=\"let item of items$ | async\">{{ item }}</div>\n\n\nimport { Observable, of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nexport class AppComponent {\n  items$: Observable<string[]>;\n\n  constructor() {\n    this.items$ = this.getData().pipe(\n      tap(data => console.log('Data:', data))\n    );\n  }\n\n  getData(): Observable<string[]> {\n    return of(['item 1', 'item 2', 'item 3']);\n  }\n}\n`.trim();\nconst otsbservable = `\nimport { Observable } from \"rxjs/Observable\";\n\nconst obs = new Observable((observer)=>{\n  let counter=1;\n  const producer = setInterval(()=>{\n    observer.next(counter++)\n  },1000)\n})\n\nconst sub = obs.subscribe({\n  next:(data)=>console.log('obj1',data),\n  error:(err)=>console.log('obj1',err),\n  complete:()=>console.log('complate'),\n})\n\nsetTimeout(()=>{\n  sub.unsubscribe();\n},5000)`.trim();\nconst otsbservable6 = `\n//html\n{{ data$ | async }}\n\nimport { from } from 'rxjs';\nexport class AppComponent {\n  data$ = from([1, 2, 3, 4, 5]);\n\n  constructor() {\n    this.data$.subscribe((value) => console.log(value));\n  }\n}\n`.trim();\nconst otsbservable7 = `\n//html\n<button #myButton>Click me!</button>\n\n\nimport { fromEvent } from 'rxjs';\nexport class AppComponent {\n  constructor(private elRef: ElementRef) {}\n\n  ngOnInit() {\n    const button = this.elRef.nativeElement.querySelector('button');\n    const click$ = fromEvent(button, 'click');\n\n    click$.subscribe((event) => {\n      console.log('Button clicked!');\n    });\n  }\n}\n`.trim();\nconst otsbservable9 = `\n<p>{{ count }}</p>\n\nimport { timer } from 'rxjs';\nexport class AppComponent {\n  count: number = 0;\n\n  constructor() {\n    const source = timer(0, 1000); // emits a value after a delay of 0ms, then every 1000ms\n\n    source.subscribe((val) => {\n      this.count = val;\n    });\n  }\n}\n`.trim();\nconst otsbservable11 = `\nimport { generate } from \"rxjs\";\n\ngenerate({\n  initialState: 1,\n  condition: (a) => a < 10,\n  iterate: (a) => a + 1,\n  resultSelector: (b: number) => \"Count\" + b,\n}).subscribe(console.log);\n`.trim();\nconst otsbservable12 = `\nimport { ajax } from \"rxjs/ajax\";\n\nconst http3$ = ajax({\n  url: \"https://jsonplaceholder.typicode.com/posts\",\n  method: \"POST\",\n  headers: {\n    Authorization: \"Bearer\",\n    Accept: \"application/json\",\n  },\n  body: {\n    title: \"foo\",\n    body: \"bar\",\n    userId: 1,\n  },\n});\nhttp3$.subscribe({\n  next: (res) => {\n    console.log(res.response);\n  },\n  error: (err) => {\n    console.log(\"Error\", err);\n  },\n});\n\n\n//if response come from server is html type\nconst http5$ = ajax({\n  url: \"https://jsonplaceholder.typicode.com/posts\",\n  responseType: \"text\",\n});\nhttp5$.subscribe({\n  next: (res) => {\n    console.log(res.response);\n  },\n  error: (err) => {\n    console.log(\"Error\", err);\n  },\n});\n\n//post\nconst http6$ = ajax.post(\n  \"https://jsonplaceholder.typicode.com/posts\",\n  { Hi: \"Hello\" },\n  {\n    Authorizaion: \"Beares\",\n  }\n);\nhttp6$.subscribe({\n  next: (res) => {\n    console.log(res.response);\n  },\n  error: (err) => {\n    console.log(\"Error\", err);\n  },\n});\n`.trim();\nconst otsbservable15 = `\nimport { from, concat, of } from \"rxjs\";\n\nconst num$ = of(1, 2, 3);\nconst names$ = from([\"Mukesh\", \"Rakesh\"]);\n\nconcat(num$, names$).subscribe(console.log);`.trim();\n\nclass Rxjs extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }, \"1. What is HttpClient, and what are its benefits?\"), \"HttpClient is a module in Angular that provides a way to make HTTP requests to external APIs or resources. It is a powerful tool for retrieving and sending data over HTTP, and it provides several benefits over other methods of making HTTP requests.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, \"Advantages:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, \"Easy to use: \"), \"HttpClient simplifies the process of making HTTP requests by providing a simple and consistent API for sending and receiving data.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, \"Type safety: \"), \"HttpClient supports TypeScript, which provides type safety for HTTP requests and responses. This means that developers can catch errors at compile time, rather than runtime.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, \"Interceptors: \"), \"HttpClient provides interceptors that allow developers to modify HTTP requests or responses before they are sent or received. This can be useful for adding headers, handling errors, or caching responses.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }, \"Observables: \"), \" HttpClient returns Observables by default, which allows for easier handling of asynchronous data. Observables can also be easily combined with other RxJS operators for complex data manipulation.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }, \"Testing: \"), \"HttpClient can be easily mocked and tested, which makes it easier to write unit tests for code that relies on HTTP requests.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }, \"2. Rxjs With Pure Js (Reactive Extension for JavaScript)\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }, \"RxJS is a library for reactive programming using Observables, which makes it easier to compose asynchronous or callback-based code. It provides a way to work with asynchronous data streams in a more functional and declarative way.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }, \"Some of the key features of RxJS include operators for filtering, transforming, and combining data streams, error handling, and cancellation. It also provides a variety of utility functions for working with Observables, such as merging or combining them, or transforming them into Promises.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }, \"Observables introduced in Rxjs. it's a data source. Observables work on data stream. to use those stream data we need to subscribe. For subscribe observables data we use Observer. Observer is not useful untill it subscribe.\", \" \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    }, \"Observables deals with synchronous and asynchronous both.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    }, \"Create Observables stream: \"), \"observable can be created using the Observable constructor.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }, \"User input(click button)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    }, \"Http Request\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }, \"Array\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }, \"Objects\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }, \"Subscribe accept 3 values: \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: subscribes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }, \"3. What are Observables?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }, \"Observables are declarative which provide support for passing messages between publishers and subscribers in our application.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    }, \"They are mainly used for event handling, asynchronous programming, and handling multiple values. In this case, you define a function for publishing values, but it is not executed until a consumer subscribes to it. The subscribed consumer then receives notifications until the function completes, or until they unsubscribe.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    }, \"4. What is an Observer?\"), \"Observer is an interface for a consumer of push-based notifications delivered by an Observable. It has three values\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491\n      },\n      __self: this\n    }, \"next, error, complate\"), \".\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    }, \"5. What will happen if you do not supply handler for observer\"), \"Normally an observer object can define any combination of next, error and complete notification type handlers. If you don't supply a handler for a notification type, the observer just ignores notifications of that type.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }, \"6. What are the utility functions provided by RxJS\"), \"It provides a wide range of utility functions for working with Observables and performing common data manipulation tasks.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    }, \"map: \"), \"This function transforms each value emitted by an Observable by applying a function to it.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    }, \"filter: \"), \"This function filters out values emitted by an Observable that do not meet a certain condition.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }, \"tap: \"), \"This function allows you to perform side effects (such as logging) on the values emitted by an Observable, without modifying them.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    }, \"tap: \"), \"used to perform side effects for each emission in a stream, without modifying the emission itself.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529\n      },\n      __self: this\n    }, \"mergeMap: \"), \"This function is similar to switchMap(), but it merges the resulting Observables, rather than cancelling the previous one.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, \"catchError: \"), \"This function catches errors emitted by an Observable and returns a new Observable with a default value or error handling logic.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541\n      },\n      __self: this\n    }, \"takeUntil: \"), \"Used to unsubscribe from observables when a certain condition is met.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }, \"debounceTime: \"), \" This function emits a value from an Observable only after a specified amount of time has passed since the last emission.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552\n      },\n      __self: this\n    }, \"distinctUntilChanged: \"), \"This function only emits a value from an Observable if it is different from the previous emission.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    }, \"What is the difference between a cold observable and a hot observable.\"), \"The difference between a cold observable and a hot observable is related to how they handle subscriptions and the timing of data emission.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568\n      },\n      __self: this\n    }, \"Cold observable: \"), \"Starts emitting data only when a subscription is made to it. Each subscription to a cold observable creates a separate execution of the observable, so each subscriber will receive the same sequence of data starting from the beginning. In other words, a cold observable starts from scratch for each subscriber.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    }, \"Hot observable: \"), \"Is already emitting data when the subscription is made. The hot observable does not start a new execution for each subscriber, but all subscribers receive the same sequence of data from the point at which they subscribed. The data emission is shared among subscribers, and late subscribers might miss some data that was emitted before they subscribed.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588\n      },\n      __self: this\n    }, \"7. What are observable creation functions\"), \"RxJS provides creation functions for the process of creating observables from things such as promises, events, timers and Ajax requests.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594\n      },\n      __self: this\n    }, \"1. Observable\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: otsbservable,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 605\n      },\n      __self: this\n    }, \"6. from: \"), \"from get values from iterable item.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: otsbservable6,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616\n      },\n      __self: this\n    }, \"7. fromEvent: \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617\n      },\n      __self: this\n    }), \"fromEvent function can be used in Angular to create an Observable that emits events from a DOM element. Here's an example of using fromEvent to detect button click events in an Angular component:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: otsbservable7,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 623\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632\n      },\n      __self: this\n    }, \"11. generate \"), \"Allows you to create an Observable that emits a sequence of values, based on a generator function that you provide.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 635\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: otsbservable11,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 643\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645\n      },\n      __self: this\n    }, \"12. ajax\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: otsbservable12,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    }, \"15. concat\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: otsbservable15,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667\n      },\n      __self: this\n    }, \"10. What does subscribing mean in RxJS?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669\n      },\n      __self: this\n    }, \"In RxJS, subscribing means that you are creating an Observer that listens for values emitted by an Observable. When you subscribe to an Observable, you are essentially setting up a pipeline for data to flow from the Observable to the Observer.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    }, \"Map\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: mapfil,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 686\n      },\n      __self: this\n    }, \"mergeMap\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: mergemaps,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 695\n      },\n      __self: this\n    }, \"catchError\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 696\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: catchError,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 697\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704\n      },\n      __self: this\n    }, \"takeUntil\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: takeUntils,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 706\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 713\n      },\n      __self: this\n    }, \"debounceTime\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 714\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: debounceTimes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 721\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 722\n      },\n      __self: this\n    }, \"Pipe\"), \"pipe() function is also a method on the RxJS Observable.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: mapipe,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732\n      },\n      __self: this\n    }, \"Filter\"), \"This operator takes values from the source Observable, passes them through a predicate function and only emits those values that get TRUE.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 736\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: filter,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 737\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 743\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 744\n      },\n      __self: this\n    }, \"Tap\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 745\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: placeholders,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Rxjs);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/rxjs.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","subscribes","trim","mapfil","mergemaps","catchError","takeUntils","debounceTimes","mapipe","filter","placeholders","otsbservable","otsbservable6","otsbservable7","otsbservable9","otsbservable11","otsbservable12","otsbservable15","Rxjs","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst subscribes = `\nobs.subscribe({\n  next:(data)=>console.log('obj',data),\n  error:(err)=>console.log('obj',err),\n  complete:()=>console.log('complate'),\n})`.trim();\n\nconst mapfil = `\n//html\n<div *ngFor=\"let post of posts\">{{ post.title }}</div>\n\nexport class AppComponent {\n  posts: any = [];\n\n  constructor(private http: HttpClient) {}\n  ngOnInit() {\n    this.http\n      .get('https://jsonplaceholder.typicode.com/posts')\n      .pipe(map((res: any) => res.slice(0, 5)))\n      .subscribe((res: any) => {\n        this.posts = res;\n      });\n  }\n}\n`.trim();\n\nconst mergemaps = `\n//html\n{{ data }}\n\nexport class AppComponent {\ndata: any;\nconstructor(private http: HttpClient) {}\n\nngOnInit() {\n  this.http.get('https://jsonplaceholder.typicode.com/posts/1')\n    .pipe(mergeMap((post: any) =>\n        this.http.get('https://jsonplaceholder.typicode.com/users/'$'{post.userId}')\n      )\n    )\n    .subscribe((user: any) => {\n      this.data = 'User: '$'{user.id}, Post Title: '$'{user.name}';\n    });\n  }\n}\n`.trim();\n\nconst catchError = `\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\n\n\nexport class AppComponent {\n  errorMessage!: string;\n\n  constructor(private http: HttpClient) {}\n\n  fetchData() {\n    this.http.get('https://api.example.com/data').pipe(catchError((error) => {\n          this.errorMessage = error.message;\n          return throwError(error);\n        })\n      )\n      .subscribe((data) => console.log(data));\n  }\n}\n`.trim();\n\nconst takeUntils = `\n//html\n<button (click)=\"start()\">Start</button>\n<button (click)=\"stop()\">Stop</button>\n{{ message }}\n\n\nimport { interval, Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nexport class AppComponent {\n  private destroy$: Subject<void> = new Subject<void>();\n  message!: string;\n\n  start(): void {\n    const interval$: Observable<number> = interval(1000);\n    interval$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((count) => (this.message = 'Count: '$'{count}'));\n  }\n\n  stop(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n`.trim();\n\nconst debounceTimes = `\n//html\n<input type=\"text\" [formControl]=\"searchControl\" placeholder=\"Search...\" />\n<li *ngFor=\"let item of filteredItems\">{{ item }}</li>\n\n\nimport { FormControl } from '@angular/forms';\nimport { debounceTime } from 'rxjs/operators';\n\nexport class AppComponent {\n  searchControl = new FormControl();\n  items = ['apple', 'banana', 'cherry', 'date', 'elderberry'];\n  filteredItems: string[] = [];\n\n  constructor() {\n    this.searchControl.valueChanges\n      .pipe(debounceTime(300))\n      .subscribe((value) => {\n        this.filteredItems = this.items.filter((item) => item.includes(value));\n      });\n  }\n}\n`.trim();\n\nconst mapipe = `\n//import { of } from 'rxjs';\n//import { filter, map } from 'rxjs/operators';\n\nexport class AppComponent  {\n  val:any=[];\n\n  ngOnInit(){\n    const squareOdd = of(1, 2, 3, 4, 5)\n    .pipe(\n      filter(n => n % 2 !== 0),\n      map(n => n * n)\n    );\n\n    squareOdd.subscribe(x => this.val.push(x));\n  }\n}\n`.trim();\n\nconst filter = `\n//html\n<div *ngFor=\"let num of numbers\">{{ num }}</div>\n\n\nimport { from } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nexport class AppComponent {\n  numbers: any = [];\n\n  constructor() {\n    from([1, 2, 3, 4, 5, 6])\n      .pipe(filter((num) => num % 2 === 0))\n      .subscribe((num) => this.numbers.push(num));\n  }\n}\n`.trim();\n\nconst placeholders = `\n//html\n<div *ngFor=\"let item of items$ | async\">{{ item }}</div>\n\n\nimport { Observable, of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nexport class AppComponent {\n  items$: Observable<string[]>;\n\n  constructor() {\n    this.items$ = this.getData().pipe(\n      tap(data => console.log('Data:', data))\n    );\n  }\n\n  getData(): Observable<string[]> {\n    return of(['item 1', 'item 2', 'item 3']);\n  }\n}\n`.trim();\n\nconst otsbservable = `\nimport { Observable } from \"rxjs/Observable\";\n\nconst obs = new Observable((observer)=>{\n  let counter=1;\n  const producer = setInterval(()=>{\n    observer.next(counter++)\n  },1000)\n})\n\nconst sub = obs.subscribe({\n  next:(data)=>console.log('obj1',data),\n  error:(err)=>console.log('obj1',err),\n  complete:()=>console.log('complate'),\n})\n\nsetTimeout(()=>{\n  sub.unsubscribe();\n},5000)`.trim();\n\nconst otsbservable6 = `\n//html\n{{ data$ | async }}\n\nimport { from } from 'rxjs';\nexport class AppComponent {\n  data$ = from([1, 2, 3, 4, 5]);\n\n  constructor() {\n    this.data$.subscribe((value) => console.log(value));\n  }\n}\n`.trim();\n\nconst otsbservable7 = `\n//html\n<button #myButton>Click me!</button>\n\n\nimport { fromEvent } from 'rxjs';\nexport class AppComponent {\n  constructor(private elRef: ElementRef) {}\n\n  ngOnInit() {\n    const button = this.elRef.nativeElement.querySelector('button');\n    const click$ = fromEvent(button, 'click');\n\n    click$.subscribe((event) => {\n      console.log('Button clicked!');\n    });\n  }\n}\n`.trim();\n\nconst otsbservable9 = `\n<p>{{ count }}</p>\n\nimport { timer } from 'rxjs';\nexport class AppComponent {\n  count: number = 0;\n\n  constructor() {\n    const source = timer(0, 1000); // emits a value after a delay of 0ms, then every 1000ms\n\n    source.subscribe((val) => {\n      this.count = val;\n    });\n  }\n}\n`.trim();\n\nconst otsbservable11 = `\nimport { generate } from \"rxjs\";\n\ngenerate({\n  initialState: 1,\n  condition: (a) => a < 10,\n  iterate: (a) => a + 1,\n  resultSelector: (b: number) => \"Count\" + b,\n}).subscribe(console.log);\n`.trim();\n\nconst otsbservable12 = `\nimport { ajax } from \"rxjs/ajax\";\n\nconst http3$ = ajax({\n  url: \"https://jsonplaceholder.typicode.com/posts\",\n  method: \"POST\",\n  headers: {\n    Authorization: \"Bearer\",\n    Accept: \"application/json\",\n  },\n  body: {\n    title: \"foo\",\n    body: \"bar\",\n    userId: 1,\n  },\n});\nhttp3$.subscribe({\n  next: (res) => {\n    console.log(res.response);\n  },\n  error: (err) => {\n    console.log(\"Error\", err);\n  },\n});\n\n\n//if response come from server is html type\nconst http5$ = ajax({\n  url: \"https://jsonplaceholder.typicode.com/posts\",\n  responseType: \"text\",\n});\nhttp5$.subscribe({\n  next: (res) => {\n    console.log(res.response);\n  },\n  error: (err) => {\n    console.log(\"Error\", err);\n  },\n});\n\n//post\nconst http6$ = ajax.post(\n  \"https://jsonplaceholder.typicode.com/posts\",\n  { Hi: \"Hello\" },\n  {\n    Authorizaion: \"Beares\",\n  }\n);\nhttp6$.subscribe({\n  next: (res) => {\n    console.log(res.response);\n  },\n  error: (err) => {\n    console.log(\"Error\", err);\n  },\n});\n`.trim();\n\nconst otsbservable15 = `\nimport { from, concat, of } from \"rxjs\";\n\nconst num$ = of(1, 2, 3);\nconst names$ = from([\"Mukesh\", \"Rakesh\"]);\n\nconcat(num$, names$).subscribe(console.log);`.trim();\n\nclass Rxjs extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. What is HttpClient, and what are its benefits?</h3>\n              HttpClient is a module in Angular that provides a way to make HTTP\n              requests to external APIs or resources. It is a powerful tool for\n              retrieving and sending data over HTTP, and it provides several\n              benefits over other methods of making HTTP requests.\n              <br />\n              <b>Advantages:</b>\n              <ul>\n                <li>\n                  <b>Easy to use: </b>HttpClient simplifies the process of\n                  making HTTP requests by providing a simple and consistent API\n                  for sending and receiving data.\n                </li>\n                <br />\n                <li>\n                  <b>Type safety: </b>HttpClient supports TypeScript, which\n                  provides type safety for HTTP requests and responses. This\n                  means that developers can catch errors at compile time, rather\n                  than runtime.\n                </li>\n                <br />\n                <li>\n                  <b>Interceptors: </b>HttpClient provides interceptors that\n                  allow developers to modify HTTP requests or responses before\n                  they are sent or received. This can be useful for adding\n                  headers, handling errors, or caching responses.\n                </li>\n                <br />\n                <li>\n                  <b>Observables: </b> HttpClient returns Observables by\n                  default, which allows for easier handling of asynchronous\n                  data. Observables can also be easily combined with other RxJS\n                  operators for complex data manipulation.\n                </li>\n                <br />\n                <li>\n                  <b>Testing: </b>HttpClient can be easily mocked and tested,\n                  which makes it easier to write unit tests for code that relies\n                  on HTTP requests.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>2. Rxjs With Pure Js (Reactive Extension for JavaScript)</h3>\n              <ul>\n                <li>\n                  RxJS is a library for reactive programming using Observables,\n                  which makes it easier to compose asynchronous or\n                  callback-based code. It provides a way to work with\n                  asynchronous data streams in a more functional and declarative\n                  way.\n                </li>\n                <br />\n\n                <li>\n                  Some of the key features of RxJS include operators for\n                  filtering, transforming, and combining data streams, error\n                  handling, and cancellation. It also provides a variety of\n                  utility functions for working with Observables, such as\n                  merging or combining them, or transforming them into Promises.\n                </li>\n                <br />\n\n                <li>\n                  Observables introduced in Rxjs. it's a data source.\n                  Observables work on data stream. to use those stream data we\n                  need to subscribe. For subscribe observables data we use\n                  Observer. Observer is not useful untill it subscribe.{\" \"}\n                </li>\n                <br />\n                <li>\n                  Observables deals with synchronous and asynchronous both.\n                </li>\n              </ul>\n              <br />\n              <ul>\n                <b>Create Observables stream: </b>observable can be created\n                using the Observable constructor.\n                <br />\n                <li>User input(click button)</li>\n                <li>Http Request</li>\n                <li>Array</li>\n                <li>Objects</li>\n              </ul>\n              <br />\n              <b>Subscribe accept 3 values: </b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={subscribes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>3. What are Observables?</h3>\n              <ul>\n                <li>\n                  Observables are declarative which provide support for passing\n                  messages between publishers and subscribers in our\n                  application.\n                </li>\n                <br />\n                <li>\n                  They are mainly used for event handling, asynchronous\n                  programming, and handling multiple values. In this case, you\n                  define a function for publishing values, but it is not\n                  executed until a consumer subscribes to it. The subscribed\n                  consumer then receives notifications until the function\n                  completes, or until they unsubscribe.\n                </li>\n              </ul>\n              <br />\n              <h3>4. What is an Observer?</h3>\n              Observer is an interface for a consumer of push-based\n              notifications delivered by an Observable. It has three values{\" \"}\n              <b>next, error, complate</b>.\n              <br />\n              <br />\n              <h3>\n                5. What will happen if you do not supply handler for observer\n              </h3>\n              Normally an observer object can define any combination of next,\n              error and complete notification type handlers. If you don't supply\n              a handler for a notification type, the observer just ignores\n              notifications of that type.\n              <br />\n              <br />\n              <h3>6. What are the utility functions provided by RxJS</h3>\n              It provides a wide range of utility functions for working with\n              Observables and performing common data manipulation tasks.\n              <ul>\n                <li>\n                  <b>map: </b>This function transforms each value emitted by an\n                  Observable by applying a function to it.\n                </li>\n                <br />\n                <li>\n                  <b>filter: </b>This function filters out values emitted by an\n                  Observable that do not meet a certain condition.\n                </li>\n                <br />\n                <li>\n                  <b>tap: </b>This function allows you to perform side effects\n                  (such as logging) on the values emitted by an Observable,\n                  without modifying them.\n                </li>\n                <br />\n                <li>\n                  <b>tap: </b>used to perform side effects for each emission in\n                  a stream, without modifying the emission itself.\n                </li>\n                <br />\n                <li>\n                  <b>mergeMap: </b>This function is similar to switchMap(), but\n                  it merges the resulting Observables, rather than cancelling\n                  the previous one.\n                </li>\n                <br />\n                <li>\n                  <b>catchError: </b>This function catches errors emitted by an\n                  Observable and returns a new Observable with a default value\n                  or error handling logic.\n                </li>\n                <br />\n                <li>\n                  <b>takeUntil: </b>Used to unsubscribe from observables when a\n                  certain condition is met.\n                </li>\n                <br />\n                <li>\n                  <b>debounceTime: </b> This function emits a value from an\n                  Observable only after a specified amount of time has passed\n                  since the last emission.\n                </li>\n                <br />\n                <li>\n                  <b>distinctUntilChanged: </b>This function only emits a value\n                  from an Observable if it is different from the previous\n                  emission.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>\n                What is the difference between a cold observable and a hot\n                observable.\n              </h3>\n              The difference between a cold observable and a hot observable is\n              related to how they handle subscriptions and the timing of data\n              emission.\n              <ul>\n                <li>\n                  <b>Cold observable: </b>Starts emitting data only when a\n                  subscription is made to it. Each subscription to a cold\n                  observable creates a separate execution of the observable, so\n                  each subscriber will receive the same sequence of data\n                  starting from the beginning. In other words, a cold observable\n                  starts from scratch for each subscriber.\n                </li>\n                <br />\n                <li>\n                  <b>Hot observable: </b>Is already emitting data when the\n                  subscription is made. The hot observable does not start a new\n                  execution for each subscriber, but all subscribers receive the\n                  same sequence of data from the point at which they subscribed.\n                  The data emission is shared among subscribers, and late\n                  subscribers might miss some data that was emitted before they\n                  subscribed.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>7. What are observable creation functions</h3>\n              RxJS provides creation functions for the process of creating\n              observables from things such as promises, events, timers and Ajax\n              requests.\n              <br />\n              <br />\n              <b>1. Observable</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={otsbservable}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>6. from: </b>from get values from iterable item.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={otsbservable6}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>7. fromEvent: </b>\n              <br />\n              fromEvent function can be used in Angular to create an Observable\n              that emits events from a DOM element. Here's an example of using\n              fromEvent to detect button click events in an Angular component:\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={otsbservable7}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              \n              <br />\n              <br />\n              <b>11. generate </b>Allows you to create an Observable that emits\n              a sequence of values, based on a generator function that you\n              provide.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={otsbservable11}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>12. ajax</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={otsbservable12}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>15. concat</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={otsbservable15}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>10. What does subscribing mean in RxJS?</h3>\n              <ul>\n                <li>\n                  In RxJS, subscribing means that you are creating an Observer\n                  that listens for values emitted by an Observable. When you\n                  subscribe to an Observable, you are essentially setting up a\n                  pipeline for data to flow from the Observable to the Observer.\n                </li>\n              </ul>\n              <br />\n              <h3>Map</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={mapfil}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>mergeMap</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={mergemaps}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>catchError</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={catchError}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>takeUntil</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={takeUntils}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>debounceTime</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={debounceTimes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Pipe</h3>\n              pipe() function is also a method on the RxJS Observable.\n              <div style={titles}>\n                <PrismCode\n                  code={mapipe}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Filter</h3>\n              This operator takes values from the source Observable, passes them\n              through a predicate function and only emits those values that get\n              TRUE.\n              <div style={titles}>\n                <PrismCode\n                  code={filter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Tap</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={placeholders}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(Rxjs);\n"]},"metadata":{},"sourceType":"module"}