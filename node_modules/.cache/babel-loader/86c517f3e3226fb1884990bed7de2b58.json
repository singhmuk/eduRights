{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/dropdownsAngu.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst dropdownSelect = `\n//app.component.ts\nimport { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { throwError, of, forkJoin, combineLatest, BehaviorSubject } from 'rxjs';\nimport { catchError, tap, map, switchMap, filter, first, startWith, delay } from 'rxjs/operators';\n\n@Component({\n  selector: 'my-app',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  name = 'Angular';\n  todoUrl = 'https://jsonplaceholder.typicode.com/todos';\n  userUrl = 'https://jsonplaceholder.typicode.com/users';\n  postUrl = 'https://jsonplaceholder.typicode.com/posts';\n\n  // Action stream\n  private userSelectedSubject = new BehaviorSubject<string>('');\n  userSelectedAction$ = this.userSelectedSubject.asObservable();\n\n  // All Users\n  users$ = this.http.get<User[]>(this.userUrl)\n    .pipe(\n      // tap(data => console.log('users', JSON.stringify(data))),\n      catchError(err => throwError('Error occurred'))\n    );\n\n  // Gets multiple sets of related data and returns it all as a single object\n  // Uses an action stream to \"pass in\" the parameter for the first query.\n  // Uses forkJoin\n  dataForUser$ = this.userSelectedAction$\n    .pipe(\n      // Handle the case of no selection\n      filter(userName => Boolean(userName)),\n      // Get the user given the user name\n      switchMap(userName => this.http.get<User[]>(''$'{this.userUrl}?username = '$'{userName}')\n        .pipe(\n          // The query returns an array of users, we only want the first one\n          map(users => users[0]),\n          tap(user => console.log(user)),\n          switchMap(user =>\n            // Pull in any related streams\n            combineLatest([\n              this.http.get<ToDo[]>(''$'{this.todoUrl}?userId = '$'{user.id} ')\n                .pipe(startWith([] as ToDo[])),\n              this.http.get<Post[]>(''$'{this.postUrl}? userId = '$'{user.id}')\n                .pipe(startWith([] as Post[]))\n            ])\n              .pipe(\n                tap(data => console.log('data', data)),\n                // Map the data into the desired format for display\n                map(([todos, posts]) => ({\n                  name: user.name,\n                  todos: todos,\n                  posts: posts\n                }) as UserData)\n              )\n          )\n        )\n      )\n    );\n\n  constructor(private http: HttpClient) { }\n\n  onSelected(userName: string): void {\n    this.userSelectedSubject.next(userName);\n  }\n}\n\nexport interface Post {\n  userId: number;\n  id: number;\n  title: string;\n  body: string\n}\n\nexport interface ToDo {\n  userId: number;\n  id: number;\n  title: string;\n  completed: boolean;\n}\n\nexport interface User {\n  id: number;\n  name: string;\n  username: string;\n  email?: string;\n  website?: string;\n}\n\nexport interface UserData {\n  name: string;\n  posts: Post[];\n  todos: ToDo[];\n}\n\n\n//app.module.ts\nimport { NgModule, Injectable } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule, HTTP_INTERCEPTORS, HttpHeaders, HttpInterceptor, HttpRequest, HttpHandler, HttpEvent,\n   HttpEventType } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\n\nimport { timer, Observable } from 'rxjs';\nimport { tap, delay, switchMap } from 'rxjs/operators';\n\n\n@Injectable()\nexport class PreRequestDelayInterceptor implements HttpInterceptor {\n  static count = -2;\n\n  constructor() { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const timerDelay = timer(5);\n    const start = Date.now();\n\n    // Gradually increase the delay\n    PreRequestDelayInterceptor.count = PreRequestDelayInterceptor.count > 6 ? 0 : PreRequestDelayInterceptor.count + 2;\n\n    return timerDelay\n      .pipe(\n        delay(1000 * PreRequestDelayInterceptor.count),\n        switchMap(() => next.handle(req)),\n        tap(event => {\n          if (event.type == HttpEventType.Response) {\n            const elapsed = Date.now()-start;\n            console.log('Request for '$'{req.urlWithParams} took '$'{elapsed} ms.');\n          }\n        }));\n  }\n}\n\n@NgModule({\n  imports: [BrowserModule, FormsModule,\n    HttpClientModule],\n  declarations: [AppComponent],\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: PreRequestDelayInterceptor, multi: true }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n//app.component.html\n<div *ngIf='users$ | async as users'>\n\t<select (change)=\"onSelected($event.target.value)\">\n    <option value=\"\">--Select a user--</option>\n    <option *ngFor=\"let user of users\"\n            [value]=\"user.username\">{{ user.name }}</option>\n  </select>\n</div>\n\n<div *ngIf='dataForUser$ | async as data'>\n\t<h2>Data for: {{data.name}}</h2>\n\t<table *ngIf=\"data.todos\">\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th>User</th>\n\t\t\t\t<th>Title</th>\n\t\t\t\t<th>Completed?</th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody *ngFor=\"let todo of data.todos\">\n\t\t\t<tr>\n\t\t\t\t<td>{{todo.userId}}</td>\n\t\t\t\t<td>{{todo.title}}</td>\n\t\t\t\t<td>{{todo.completed}}</td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n\t<p></p>\n\t<table *ngIf=\"data.posts\">\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th>User</th>\n\t\t\t\t<th>Title</th>\n\t\t\t\t<th>Body</th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody *ngFor=\"let post of data.posts\">\n\t\t\t<tr>\n\t\t\t\t<td>{{post.userId}}</td>\n\t\t\t\t<td>{{post.title}}</td>\n\t\t\t\t<td>{{post.body}}</td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n</div>\n`.trim();\nconst dropdowns = `\nimport { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-root',\n  template: '\n    <div *ngFor=\"let hero of heroes\" (click)=\"onSelect(hero)\">\n      {{hero.id}}\n      {{hero.name}}\n    </div >\n\n  <div *ngIf=\"selectedHero\">\n    <h2>{{selectedHero.name | uppercase}}</h2>\n      id: {{selectedHero.id}}\n      name: {{selectedHero.name}}\n    </div >',\n  })\n\nexport class AppComponent {\n  constructor(private http: HttpClient){}\n\n  heroes:any=[]\n  ngOnInit(){\n    this.http.get('https://jsonplaceholder.typicode.com/users')\n        .subscribe(val=>{\n            this.heroes = val\n        })\n      }\n\n  selectedHero?;\n  onSelect(hero):void {\n     this.selectedHero = hero\n  }\n}\n\n`.trim();\n\nclass DropDownAngular extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, \"Pick a data from list\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: dropdowns,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(DropDownAngular);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/dropdownsAngu.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","dropdownSelect","trim","dropdowns","DropDownAngular","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst dropdownSelect = `\n//app.component.ts\nimport { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { throwError, of, forkJoin, combineLatest, BehaviorSubject } from 'rxjs';\nimport { catchError, tap, map, switchMap, filter, first, startWith, delay } from 'rxjs/operators';\n\n@Component({\n  selector: 'my-app',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  name = 'Angular';\n  todoUrl = 'https://jsonplaceholder.typicode.com/todos';\n  userUrl = 'https://jsonplaceholder.typicode.com/users';\n  postUrl = 'https://jsonplaceholder.typicode.com/posts';\n\n  // Action stream\n  private userSelectedSubject = new BehaviorSubject<string>('');\n  userSelectedAction$ = this.userSelectedSubject.asObservable();\n\n  // All Users\n  users$ = this.http.get<User[]>(this.userUrl)\n    .pipe(\n      // tap(data => console.log('users', JSON.stringify(data))),\n      catchError(err => throwError('Error occurred'))\n    );\n\n  // Gets multiple sets of related data and returns it all as a single object\n  // Uses an action stream to \"pass in\" the parameter for the first query.\n  // Uses forkJoin\n  dataForUser$ = this.userSelectedAction$\n    .pipe(\n      // Handle the case of no selection\n      filter(userName => Boolean(userName)),\n      // Get the user given the user name\n      switchMap(userName => this.http.get<User[]>(''$'{this.userUrl}?username = '$'{userName}')\n        .pipe(\n          // The query returns an array of users, we only want the first one\n          map(users => users[0]),\n          tap(user => console.log(user)),\n          switchMap(user =>\n            // Pull in any related streams\n            combineLatest([\n              this.http.get<ToDo[]>(''$'{this.todoUrl}?userId = '$'{user.id} ')\n                .pipe(startWith([] as ToDo[])),\n              this.http.get<Post[]>(''$'{this.postUrl}? userId = '$'{user.id}')\n                .pipe(startWith([] as Post[]))\n            ])\n              .pipe(\n                tap(data => console.log('data', data)),\n                // Map the data into the desired format for display\n                map(([todos, posts]) => ({\n                  name: user.name,\n                  todos: todos,\n                  posts: posts\n                }) as UserData)\n              )\n          )\n        )\n      )\n    );\n\n  constructor(private http: HttpClient) { }\n\n  onSelected(userName: string): void {\n    this.userSelectedSubject.next(userName);\n  }\n}\n\nexport interface Post {\n  userId: number;\n  id: number;\n  title: string;\n  body: string\n}\n\nexport interface ToDo {\n  userId: number;\n  id: number;\n  title: string;\n  completed: boolean;\n}\n\nexport interface User {\n  id: number;\n  name: string;\n  username: string;\n  email?: string;\n  website?: string;\n}\n\nexport interface UserData {\n  name: string;\n  posts: Post[];\n  todos: ToDo[];\n}\n\n\n//app.module.ts\nimport { NgModule, Injectable } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule, HTTP_INTERCEPTORS, HttpHeaders, HttpInterceptor, HttpRequest, HttpHandler, HttpEvent,\n   HttpEventType } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\n\nimport { timer, Observable } from 'rxjs';\nimport { tap, delay, switchMap } from 'rxjs/operators';\n\n\n@Injectable()\nexport class PreRequestDelayInterceptor implements HttpInterceptor {\n  static count = -2;\n\n  constructor() { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const timerDelay = timer(5);\n    const start = Date.now();\n\n    // Gradually increase the delay\n    PreRequestDelayInterceptor.count = PreRequestDelayInterceptor.count > 6 ? 0 : PreRequestDelayInterceptor.count + 2;\n\n    return timerDelay\n      .pipe(\n        delay(1000 * PreRequestDelayInterceptor.count),\n        switchMap(() => next.handle(req)),\n        tap(event => {\n          if (event.type == HttpEventType.Response) {\n            const elapsed = Date.now()-start;\n            console.log('Request for '$'{req.urlWithParams} took '$'{elapsed} ms.');\n          }\n        }));\n  }\n}\n\n@NgModule({\n  imports: [BrowserModule, FormsModule,\n    HttpClientModule],\n  declarations: [AppComponent],\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: PreRequestDelayInterceptor, multi: true }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n//app.component.html\n<div *ngIf='users$ | async as users'>\n\t<select (change)=\"onSelected($event.target.value)\">\n    <option value=\"\">--Select a user--</option>\n    <option *ngFor=\"let user of users\"\n            [value]=\"user.username\">{{ user.name }}</option>\n  </select>\n</div>\n\n<div *ngIf='dataForUser$ | async as data'>\n\t<h2>Data for: {{data.name}}</h2>\n\t<table *ngIf=\"data.todos\">\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th>User</th>\n\t\t\t\t<th>Title</th>\n\t\t\t\t<th>Completed?</th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody *ngFor=\"let todo of data.todos\">\n\t\t\t<tr>\n\t\t\t\t<td>{{todo.userId}}</td>\n\t\t\t\t<td>{{todo.title}}</td>\n\t\t\t\t<td>{{todo.completed}}</td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n\t<p></p>\n\t<table *ngIf=\"data.posts\">\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th>User</th>\n\t\t\t\t<th>Title</th>\n\t\t\t\t<th>Body</th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody *ngFor=\"let post of data.posts\">\n\t\t\t<tr>\n\t\t\t\t<td>{{post.userId}}</td>\n\t\t\t\t<td>{{post.title}}</td>\n\t\t\t\t<td>{{post.body}}</td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n</div>\n`.trim();\n\nconst dropdowns = `\nimport { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-root',\n  template: '\n    <div *ngFor=\"let hero of heroes\" (click)=\"onSelect(hero)\">\n      {{hero.id}}\n      {{hero.name}}\n    </div >\n\n  <div *ngIf=\"selectedHero\">\n    <h2>{{selectedHero.name | uppercase}}</h2>\n      id: {{selectedHero.id}}\n      name: {{selectedHero.name}}\n    </div >',\n  })\n\nexport class AppComponent {\n  constructor(private http: HttpClient){}\n\n  heroes:any=[]\n  ngOnInit(){\n    this.http.get('https://jsonplaceholder.typicode.com/users')\n        .subscribe(val=>{\n            this.heroes = val\n        })\n      }\n\n  selectedHero?;\n  onSelect(hero):void {\n     this.selectedHero = hero\n  }\n}\n\n`.trim();\n\n\nclass DropDownAngular extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Pick a data from list</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={dropdowns}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              \n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DropDownAngular));\n"]},"metadata":{},"sourceType":"module"}