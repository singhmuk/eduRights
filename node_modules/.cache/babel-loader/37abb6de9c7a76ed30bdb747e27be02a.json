{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var useSelector=\"\\nimport { useSelector, useDispatch } from \\\"react-redux\\\";\\nimport { INCREMENT, DECREMENT } from \\\"./actions/types\\\"\\n\\nconst App = () => {\\n  const counter = useSelector(state => state.count.counter);  //State\\n  const dispatch = useDispatch();                             //Method\\n  return (\\n    <div>\\n      <h1>{counter}</h1>\\n      <button onClick={() => dispatch({ type: INCREMENT })}>Incr</button>\\n      <button onClick={() => dispatch({ type: DECREMENT })}>Decr</button>\\n    </div>\\n  );\\n};\\n\".trim();var reducers=\"\\n//reducers/reducers.js\\nimport { INCREMENT, DECREMENT } from \\\"../actions/types\\\"\\n\\nconst initialState = {\\n  counter: 0\\n};\\n\\nconst rootReducer = (state = initialState, action) => {\\n  switch (action.type) {\\n    case INCREMENT:\\n      return { counter: ++state.counter };\\n    case DECREMENT:\\n      return { counter: --state.counter };\\n    default:\\n      return state;\\n  }\\n}\\n\\nexport default rootReducer;\\n\\n\\n//actions/types.js\\nexport const INCREMENT = \\\"INCREMENT\\\";\\nexport const DECREMENT = \\\"DECREMENT\\\";\\n\".trim();var curds=\"\\n//components/index.js\\nimport * as actions from \\\"../actions\\\";\\nimport { connect } from \\\"react-redux\\\";\\n\\nclass Input extends Component {\\n  state = {\\n      title: \\\"\\\",\\n      content: \\\"\\\"\\n    };\\n\\n  handleChange = e => {\\n    const state = this.state;\\n    state[e.target.name] = e.target.value;\\n    this.setState({ state });\\n  };\\n\\n  handleSubmit = e => {\\n    e.preventDefault();\\n    this.props.addPost(this.state.title, this.state.content);\\n  };\\n\\n  render() {\\n    return (\\n      <div>\\n        <form onSubmit={this.handleSubmit}>\\n          <input type=\\\"text\\\" name=\\\"title\\\" onChange={this.handleChange} value={this.state.title}\\n            required />\\n          \\n          <input type=\\\"text\\\" name=\\\"content\\\" onChange={this.handleChange} value={this.state.content}\\n            required\\n          />\\n          <button>Add</button>\\n        </form>\\n      </div>\\n    );\\n  }\\n}\\n\\n\\nconst mapDispatchToProps = (dispatch) => ({\\n  addPost: (title, content) => {\\n    dispatch(actions.addPost(title, content));\\n  }\\n})\\n\\nexport default connect(null, mapDispatchToProps)(Input);\\n\\n\\n//components/Item\\nimport { connect } from \\\"react-redux\\\";\\nimport * as actions from \\\"../actions\\\";\\n\\nclass Item extends Component {\\n  state = {\\n      isEdit: false,\\n      title: this.props.title,\\n      content: this.props.content\\n    };\\n\\n  handleChangeTitle = e => {\\n    this.setState({ title: e.target.value });\\n  };\\n\\n  handleChangeContent = e => {\\n    this.setState({ content: e.target.value });\\n  };\\n\\n  removePost = () => {\\n    this.props.removePost(this.props.id);\\n  };\\n\\n  updatePost = () => {\\n    this.setState({ isEdit: true });\\n  };\\n\\n  donePost = () => {\\n    this.props.updatePost(this.props.id, this.state.title, this.state.content);\\n    this.setState({ isEdit: false });\\n  };\\n\\n  renderTitleInput = () => {\\n    return (\\n      <input type=\\\"text\\\" onChange={this.handleChangeTitle} defaultValue={this.props.title} />\\n    );\\n  };\\n\\n  renderContentInput = () => {\\n    return (\\n      <input type=\\\"text\\\" onChange={this.handleChangeContent} defaultValue={this.props.content} />\\n    );\\n  };\\n\\n  renderUpdateButton = () => {\\n    return (\\n      <button onClick={this.updatePost}>EDIT</button>\\n    );\\n  };\\n\\n  renderDoneButton = () => {\\n    return (\\n      <button onClick={this.donePost}>DONE</button>\\n    );\\n  };\\n\\n  render() {\\n    return (\\n      <div>\\n        {this.state.isEdit ? this.renderTitleInput() : this.props.title + ': '}\\n        {this.state.isEdit ? this.renderContentInput() : this.props.content}\\n        <br />\\n        {this.state.isEdit\\n          ? this.renderDoneButton()\\n          : this.renderUpdateButton()}\\n        <button onClick={this.removePost}>REMOVE</button>\\n      </div>\\n    );\\n  }\\n}\\n\\nconst mapDispatchToProps = (dispatch) => ({\\n  removePost: id => {\\n    dispatch(actions.removePost(id));\\n  },\\n  updatePost: (id, title, content) => {\\n    dispatch(actions.updatePost(id, title, content));\\n  }\\n})\\n\\nexport default connect(null, mapDispatchToProps)(Item);\\n\\n\\n//components/List.js\\nimport Item from \\\"./item.jsx\\\";\\n\\nclass List extends Component {\\n  render() {\\n    return (\\n        <div>\\n          {this.props.posts.map((post, index) => (\\n            <Item {...post} key={index} id={post.id} />\\n          ))}\\n        </div>\\n    );\\n  }\\n}\\n\\nconst mapStateToProps = (state) => ({\\n  posts: state.post\\n})\\n\\nexport default connect(mapStateToProps, null)(List);\\n\\n\\n\\n//reducers/post.js\\nimport { ADD_POST, REMOVE_POST, UPDATE_POST } from \\\"../actions/index.js\\\";\\n\\nconst initialState = [];\\n\\nexport default function Post(state = initialState, action) {\\n  switch (action.type) {\\n    case ADD_POST:\\n      return [\\n        ...state,\\n        {\\n          id: action.id,\\n          title: action.title,\\n          content: action.content\\n        }\\n      ];\\n      \\n    case REMOVE_POST:\\n      return state.filter(({ id }) => id !== action.id);\\n      \\n    case UPDATE_POST:\\n      return state.map(\\n        post => (post.id === action.id ? { ...post, ...action } : post)\\n      );\\n      \\n    default:\\n      return state;\\n  }\\n}\\n\\n\\n//actions/types.js\\nexport const ADD_POST = \\\"ADD_POST\\\";\\nexport const REMOVE_POST = \\\"REMOVE_POST\\\";\\nexport const UPDATE_POST = \\\"UPDATE_POST\\\";\\n\\n\\n//actions/index.js\\nimport { ADD_POST, REMOVE_POST, UPDATE_POST } from './types'\\n\\nlet nextId = 0;\\nexport function addPost(title, content) {\\n  return {\\n    type: ADD_POST,\\n    id: nextId++,\\n    title,\\n    content\\n  };\\n}\\n\\nexport function removePost(id) {\\n  return {\\n    type: REMOVE_POST,\\n    id\\n  };\\n}\\n\\nexport function updatePost(id, title, content) {\\n  return {\\n    type: UPDATE_POST,\\n    id,\\n    title,\\n    content\\n  };\\n}\".trim();var ReduxState=/*#__PURE__*/function(_Component){_inherits(ReduxState,_Component);function ReduxState(){_classCallCheck(this,ReduxState);return _possibleConstructorReturn(this,_getPrototypeOf(ReduxState).apply(this,arguments));}_createClass(ReduxState,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. useSelector and useDispatch\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:useSelector,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"reducers\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:reducers,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2.Curd\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:curds,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return ReduxState;}(Component);export default withStyles(styles)(ReduxState);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/Redux/deep/reduxState.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","useSelector","trim","reducers","curds","ReduxState","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,0BAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CAGA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,eAAe,CAAE,SAAnB,CAA8BC,OAAO,CAAE,KAAvC,CAA8CC,QAAQ,CAAE,MAAxD,CAAf,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,KAAK,CAAE,CACLC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH,CAELN,OAAO,CAAEG,KAAK,CAACG,OAAN,CAAc,CAAd,CAFJ,CADgB,CAKvBC,QAAQ,CAAE,CACRF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA,CALa,CAQvBE,SAAS,CAAE,CACTC,SAAS,CAAE,QADF,CARY,CAAL,EAApB,CAaA,GAAMC,CAAAA,WAAW,CAAG,6fAelBC,IAfkB,EAApB,CAiBA,GAAMC,CAAAA,QAAQ,CAAG,+gBAyBfD,IAzBe,EAAjB,CA2BA,GAAME,CAAAA,KAAK,CAAG,wqJA2NXF,IA3NW,EAAd,C,GA8NMG,CAAAA,U,0SACgB,CAClBC,UAAU,CAAC,iBAAMxB,CAAAA,KAAK,CAACyB,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAACb,KAA1B,EACE,8BAAI,oBAAC,OAAD,MAAJ,CADF,CADF,CADF,CAME,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEa,OAAO,CAACb,KAA1B,EACE,oBAAC,IAAD,MACE,+DADF,CAEE,2BAAK,KAAK,CAAEN,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEY,WADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAFF,CASE,8BATF,CAUE,8BAVF,CAWE,wCAXF,CAYE,8BAZF,CAcE,2BAAK,KAAK,CAAEZ,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEc,QADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAdF,CAqBE,8BArBF,CAuBE,uCAvBF,CAwBE,2BAAK,KAAK,CAAEd,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEe,KADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAxBF,CADF,CADF,CANF,CADF,CA6CD,C,wBAnDsBvB,S,EAsDzB,cAAgBI,CAAAA,UAAU,CAACQ,MAAD,CAAV,CAAmBY,UAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst useSelector = `\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { INCREMENT, DECREMENT } from \"./actions/types\"\n\nconst App = () => {\n  const counter = useSelector(state => state.count.counter);  //State\n  const dispatch = useDispatch();                             //Method\n  return (\n    <div>\n      <h1>{counter}</h1>\n      <button onClick={() => dispatch({ type: INCREMENT })}>Incr</button>\n      <button onClick={() => dispatch({ type: DECREMENT })}>Decr</button>\n    </div>\n  );\n};\n`.trim();\n\nconst reducers = `\n//reducers/reducers.js\nimport { INCREMENT, DECREMENT } from \"../actions/types\"\n\nconst initialState = {\n  counter: 0\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INCREMENT:\n      return { counter: ++state.counter };\n    case DECREMENT:\n      return { counter: --state.counter };\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;\n\n\n//actions/types.js\nexport const INCREMENT = \"INCREMENT\";\nexport const DECREMENT = \"DECREMENT\";\n`.trim();\n\nconst curds = `\n//components/index.js\nimport * as actions from \"../actions\";\nimport { connect } from \"react-redux\";\n\nclass Input extends Component {\n  state = {\n      title: \"\",\n      content: \"\"\n    };\n\n  handleChange = e => {\n    const state = this.state;\n    state[e.target.name] = e.target.value;\n    this.setState({ state });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.addPost(this.state.title, this.state.content);\n  };\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <input type=\"text\" name=\"title\" onChange={this.handleChange} value={this.state.title}\n            required />\n          \n          <input type=\"text\" name=\"content\" onChange={this.handleChange} value={this.state.content}\n            required\n          />\n          <button>Add</button>\n        </form>\n      </div>\n    );\n  }\n}\n\n\nconst mapDispatchToProps = (dispatch) => ({\n  addPost: (title, content) => {\n    dispatch(actions.addPost(title, content));\n  }\n})\n\nexport default connect(null, mapDispatchToProps)(Input);\n\n\n//components/Item\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions\";\n\nclass Item extends Component {\n  state = {\n      isEdit: false,\n      title: this.props.title,\n      content: this.props.content\n    };\n\n  handleChangeTitle = e => {\n    this.setState({ title: e.target.value });\n  };\n\n  handleChangeContent = e => {\n    this.setState({ content: e.target.value });\n  };\n\n  removePost = () => {\n    this.props.removePost(this.props.id);\n  };\n\n  updatePost = () => {\n    this.setState({ isEdit: true });\n  };\n\n  donePost = () => {\n    this.props.updatePost(this.props.id, this.state.title, this.state.content);\n    this.setState({ isEdit: false });\n  };\n\n  renderTitleInput = () => {\n    return (\n      <input type=\"text\" onChange={this.handleChangeTitle} defaultValue={this.props.title} />\n    );\n  };\n\n  renderContentInput = () => {\n    return (\n      <input type=\"text\" onChange={this.handleChangeContent} defaultValue={this.props.content} />\n    );\n  };\n\n  renderUpdateButton = () => {\n    return (\n      <button onClick={this.updatePost}>EDIT</button>\n    );\n  };\n\n  renderDoneButton = () => {\n    return (\n      <button onClick={this.donePost}>DONE</button>\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        {this.state.isEdit ? this.renderTitleInput() : this.props.title + ': '}\n        {this.state.isEdit ? this.renderContentInput() : this.props.content}\n        <br />\n        {this.state.isEdit\n          ? this.renderDoneButton()\n          : this.renderUpdateButton()}\n        <button onClick={this.removePost}>REMOVE</button>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  removePost: id => {\n    dispatch(actions.removePost(id));\n  },\n  updatePost: (id, title, content) => {\n    dispatch(actions.updatePost(id, title, content));\n  }\n})\n\nexport default connect(null, mapDispatchToProps)(Item);\n\n\n//components/List.js\nimport Item from \"./item.jsx\";\n\nclass List extends Component {\n  render() {\n    return (\n        <div>\n          {this.props.posts.map((post, index) => (\n            <Item {...post} key={index} id={post.id} />\n          ))}\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  posts: state.post\n})\n\nexport default connect(mapStateToProps, null)(List);\n\n\n\n//reducers/post.js\nimport { ADD_POST, REMOVE_POST, UPDATE_POST } from \"../actions/index.js\";\n\nconst initialState = [];\n\nexport default function Post(state = initialState, action) {\n  switch (action.type) {\n    case ADD_POST:\n      return [\n        ...state,\n        {\n          id: action.id,\n          title: action.title,\n          content: action.content\n        }\n      ];\n      \n    case REMOVE_POST:\n      return state.filter(({ id }) => id !== action.id);\n      \n    case UPDATE_POST:\n      return state.map(\n        post => (post.id === action.id ? { ...post, ...action } : post)\n      );\n      \n    default:\n      return state;\n  }\n}\n\n\n//actions/types.js\nexport const ADD_POST = \"ADD_POST\";\nexport const REMOVE_POST = \"REMOVE_POST\";\nexport const UPDATE_POST = \"UPDATE_POST\";\n\n\n//actions/index.js\nimport { ADD_POST, REMOVE_POST, UPDATE_POST } from './types'\n\nlet nextId = 0;\nexport function addPost(title, content) {\n  return {\n    type: ADD_POST,\n    id: nextId++,\n    title,\n    content\n  };\n}\n\nexport function removePost(id) {\n  return {\n    type: REMOVE_POST,\n    id\n  };\n}\n\nexport function updatePost(id, title, content) {\n  return {\n    type: UPDATE_POST,\n    id,\n    title,\n    content\n  };\n}`.trim();\n\n\nclass ReduxState extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. useSelector and useDispatch</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={useSelector}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>reducers</b>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={reducers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2.Curd</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={curds}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(ReduxState));"]},"metadata":{},"sourceType":"module"}