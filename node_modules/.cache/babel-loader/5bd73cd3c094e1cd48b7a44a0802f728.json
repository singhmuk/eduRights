{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/trees.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst insertData = `\nfunction Nodes(data, left, right){\n  this.data=data;\n  this.left=left;\n  this.right=right;\n  this.show=show;\n}\n\nfunction show(){\n  return this.data;\n}\n\nfunction bst(){\n  this.root=null;\n  this.insert=insert;\n}\n\nfunction insert(data){\n  const node=new Nodes(data,null,null)\n  if(this.root === null){\n    this.root=node;\n  }else{\n    var current=this.root;\n    var parrent;\n    while(current){\n      parrent=current;\n      if(data < current.data){\n        current=current.left;\n        if(current === null){\n          parrent.left=node;\n        }\n      }else{\n        current = current.right;\n        if(current === null){\n          parrent.right = node;\n        }\n      }\n    }\n  }\n}\n\nconst obj= new bst();\nobj.insert(3)\nobj.insert(5)\nobj.insert(2)\nobj.insert(7)\nobj.insert(1)\n\nconsole.log(obj.root)`.trim();\nconst traversing = `\nfunction Nodes(data, left, right){\n  this.data=data;\n  this.left=left;\n  this.right=right;\n  this.show=show;\n}\n\nfunction show(){\n  return this.data;\n}\n\nfunction bst(){\n  this.root=null;\n  this.insert=insert;\n}\n\nfunction insert(data){\n  const node=new Nodes(data,null,null)\n  if(this.root === null){\n    this.root=node;\n  }else{\n    var current=this.root;\n    var parrent;\n    while(current){\n      parrent=current;\n      if(data < current.data){\n        current=current.left;\n        if(current === null){\n          parrent.left=node;\n        }\n      }else{\n        current = current.right;\n        if(current === null){\n          parrent.right = node;\n        }\n      }\n    }\n  }\n}\n\nfunction inOrder(node){\n  if(!(node==null)){\n    inOrder(node.left);\n    console.log(node.show()+ \" \")\n    inOrder(node.right)\n  }\n}\n\nfunction preOrder(node) {\n  if (node !== null) {\n    console.log(node.show() + \" \");\n    preOrder(node.left);\n    preOrder(node.right);\n  }\n}\n\nfunction postOrder(node) {\n  if (node !== null) {\n    postOrder(node.left);\n    postOrder(node.right);\n    console.log(node.show() + \" \");\n  }\n}\n\nconst obj= new bst();\nobj.insert(3)\nobj.insert(5)\nobj.insert(2)\nobj.insert(7)\nobj.insert(1)\n\nconsole.log(obj.root)\n\nconsole.log('Inorder Traversal')\ninOrder(obj.root)\n\nconsole.log('Pre-Order Traversal');\npreOrder(obj.root);\n\nconsole.log('Post-Order Traversal');\npostOrder(obj.root);`.trim();\nconst deleteNode = `\nfunction Node(data,left,right){\n  this.data=data;\n  this.left=left;\n  this.right=right;\n  this.show=show;\n}\n\nfunction show(){\n  return this.data;\n}\n\nfunction bst(){\n  this.root=null;\n  this.insert=insert;\n}\n\nfunction insert(data){\n  const node=new Node(data,null,null);\n\n  if(this.root===null){\n    this.root=node;\n  }else{\n    var current=this.root;\n    var parent;\n\n    while(current){\n      parent=current;\n      if(data < current.data){\n        current=current.left;\n        if(current === null){\n          parent.left = node;\n        }\n      }else{\n        current = current.right;\n        if(current === null){\n          parent.right = node;\n        }\n      }\n    }\n  }\n}\n\nfunction inOrder(node){\n  if(!(node === null)){\n    inOrder(node.left)\n    console.log(node.show())\n    inOrder(node.right)\n  }\n}\n\nfunction deleteNode(root, key){\n  if(root === null){\n    return root;\n  }\n\n  if(key < root.data){\n    root.left = deleteNode(root.left, key)\n  }else if(key > root.data){\n    root.right = deleteNode(root.right, key)\n  }else {\n    if(root.left === null){\n      return root.right;\n    }else if(root.right === null){\n      return root.right;\n    }\n  }\n  return root;\n}\n\nconst obj = new bst()\nobj.insert(5)\nobj.insert(6)\nobj.insert(1)\nobj.insert(2)\nobj.insert(3)\n\ninOrder(obj.root)\n\nobj.root = deleteNode(obj.root, 6)\nconsole.log('After Deleting')\ninOrder(obj.root)`.trim();\nconst updates = `\nfunction Node(data,left,right){\n  this.data=data;\n  this.left=left;\n  this.right=right;\n  this.show=show;\n}\n\nfunction show(){\n  return this.data;\n}\n\nfunction bst(){\n  this.root=null;\n  this.insert=insert;\n}\n\nfunction insert(data){\n  const node=new Node(data,null,null)\n  if(this.root===null){\n    this.root=node;\n  }else{\n    var current=this.root;\n    var parrent;\n    while(current){\n      parrent=current;\n      if(data<current.data){\n        current=current.left;;\n        if(current===null){\n          parrent.left=node;\n        }\n      }else{\n        current=current.right;\n        if(current===null){\n          parrent.right=node;\n        }\n      }\n    }\n  }\n}\n\nfunction inOrder(root){\n  if(!(root===null)){\n    inOrder(root.left)\n    console.log(root.show())\n    inOrder(root.right)\n  }\n}\n\nfunction updateNode(node, target, newValue) {\n  if (node === null) {\n    return null;                                // Target node not found\n  }\n\n  if (target < node.data) {\n    node.left = updateNode(node.left, target, newValue);\n  } else if (target > node.data) {\n    node.right = updateNode(node.right, target, newValue);\n  } else {\n    node.data = newValue;                       // Found the target node, update its data\n  }\n\n  return node;\n}\n\nconst obj=new bst()\nobj.insert(4)\nobj.insert(1)\nobj.insert(2)\nobj.insert(3)\n\ninOrder(obj.root)\n\nconsole.log('Update Node');\nobj.root = updateNode(obj.root, 4, 10);\ninOrder(obj.root);\n`.trim(); // const traversing = ``.trim()\n\nconst generateTrees = `\n\n\nfunction TreeNode(val) {\n  this.val = val\n  this.left = null\n  this.right = null\n}\n\nconst generateTrees = (n) => {\n  if (n === 0) return [];\n\n  const numbers = new Array(n).fill(0).map((v, index) => index + 1)\n  const memo = {}\n\n  const compose = (number, left, right) => {\n    const result = []\n    for (let i = 0; i < left.length; i++) {\n      for (let j = 0; j < right.length; j++) {\n            const node = new TreeNode(number)\n            node.left = left[i]\n            node.right = right[j]\n            result.push(node)\n          }\n        }\n        return result\n      }\n\n  const aux = (list = []) => {\n    const key = list.toString()\n    if (memo[key] !== undefined) {\n      return memo[list.toString()]\n    }\n\n    if (list.length === 0) return [null]\n\n    memo[key] = list.reduce((acc, number) => {\n        acc.push(...compose(number, aux(list.filter(x => x < number)), aux(list.filter(x => x > number)),\n          ),\n        )\n        return acc\n      },\n      [],\n    )\n    return memo[key]\n  }\n  \n  return aux(numbers)\n}\n\nconsole.log(generateTrees(3))\n`.trim();\nconst isValidBST = `\nfunction isValidBST(root) {\n  const aux = (node) => {\n    if (!node) return [true, null, null];\n\n    const [leftValid, leftMin, leftMax] = aux(node.left)\n    const [rightValid, rightMin, rightMax] = aux(node.right)\n    let valid = leftValid && rightValid\n\n    if (leftMax !== null && leftMax >= node.val) {\n      valid = false\n    }\n    if (rightMin !== null && rightMin <= node.val) {\n      valid = false\n    }\n    \n    const currentMin = leftMin === null ? node.val : leftMin\n    const currentMax = rightMax === null ? node.val : rightMax\n    return [valid, currentMin, currentMax]\n  }\n  return aux(root)[0]\n}\n\nconsole.log(isValidBST(3))\n`.trim();\nconst recoverTree = `\nfunction recoverTree(root) {\n  let first = null\n  let second = null\n  let prev = null\n\n  const aux = (node) => {\n    if (node) {\n      aux(node.left)\n      if (prev && prev.val > node.val) {\n        if (!first) {\n          first = prev\n          second = node\n        } else {\n          second = node\n        }\n      }\n      prev = node\n      aux(node.right)\n    }\n  }\n  aux(root)\n\n  if (first && second) {\n    const temp = first.val\n    first.val = second.val\n    second.val = temp\n  }\n}\n\nconsole.log(recoverTree([1,3,null,2]))`.trim();\nconst isSameTree = `\nfunction isSameTree(p, q) {\n  if ((p && !q) || (!p && q)) return false;\n  if (!p && !q) return true;\n\n  const leftSame = isSameTree(p.left, q.left)\n  const rightSame = isSameTree(p.right, q.right)\n  \n  return leftSame && rightSame && (p.val === q.val)\n}\n\nconsole.log(isSameTree([1,3,null,2], [1,3,null,2]))\n`.trim();\nconst isSymmetric = `\nfunction isSymmetric(root){\n  function aux (node, level, result){\n    if (!result[level]) {\n      result[level] = []\n    }\n\n    if (!node) {\n      result[level].push(null)\n      return result\n    }\n\n    result[level].push(node.val)\n    aux(node.left, level + 1, result)\n    aux(node.right, level + 1, result)\n    return result\n  }\n\n  function isSymmetricHelper (values = []){\n    for (let i = 0; i <= values.length / 2; i++) {\n      if (values[i] !== values[values.length - 1 - i]) {\n        return false\n      }\n    }\n    return true\n  }\n\n  const result = aux(root, 0, [])\n  for (let i = 0; i < result.length; i++) {\n    if (!isSymmetricHelper(result[i])) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(isSymmetric([1,2,2,3,4,4,3]))\n `.trim();\nconst sortedArrayToBST = `\nfunction sortedArrayToBST (nums = []){\n  const aux = (low, high) => {\n    if (low <= high) {\n      const middle = Math.floor((low + high) / 2)\n      const node = { val: nums[middle] }\n      \n      node.left = aux(low, middle - 1)\n      node.right = aux(middle + 1, high)\n      return node\n    }\n    return null\n  }\n  return aux(0, nums.length - 1)\n}\n\nconsole.log(sortedArrayToBST([3,9,20,null,null,15,7]))\n`.trim();\nconst sortedListToBST = `\nfunction sortedListToBST(head) {\n  const nodes = []\n\n  while (head) {\n    head.left = null\n    head.right = null\n    nodes.push(head)\n    head = head.next\n  }\n\n  const aux = (nodes, low, high) => { \n    if (low > high) return null;\n\n    const middle = Math.floor((low + high) / 2)\n    nodes[middle].left = aux(nodes, low, middle - 1)\n    nodes[middle].right = aux(nodes, middle + 1, high)\n    return nodes[middle]\n  }\n  return aux(nodes, 0, nodes.length - 1)\n}\n\nconsole.log(sortedListToBST([-10,-3,0,5,9]))\n`.trim();\nconst minDepth = `\nfunction minDepth (root){\n  if (!root) return 0;\n\n  const aux = (node, depth) => {\n    if (!node || (!node.left && !node.right)) return depth;\n\n    if (node.left && !node.right) {\n      return aux(node.left, depth + 1)\n    }\n\n    if (node.right && !node.left) {\n      return aux(node.right, depth + 1)\n    }\n\n    const leftDepth = aux(node.left, depth + 1)\n    const rightDepth = aux(node.right, depth + 1)\n    return leftDepth < rightDepth ? leftDepth : rightDepth\n  }\n\n  return aux(root, 1)\n}\n\nconsole.log(minDepth([3,9,20,null,null,15,7]))\n`.trim();\nconst hasPathSum = `\nfunction hasPathSum (root, sum){\n  function aux (node, currentSum){\n    if (!node) return false;\n\n    if (node && !node.left && !node.right) {\n      return (currentSum + node.val) === sum\n    }\n    const isLeftHas = aux(node.left, currentSum + node.val)\n    const isRightHas = aux(node.right, currentSum + node.val)\n    return (isLeftHas || isRightHas)\n  }\n\n  if (root === null) return false;\n  return aux(root, 0)\n}\n\nconsole.log(hasPathSum([5,4,1],10))\n`.trim();\nconst connect = `\nfunction connect (root){\n  if (!root) return null;\n  let frontier = [root];\n\n  while (frontier.length) {\n    const next = []\n    frontier.forEach((node, index) => {\n      if (frontier[index + 1]) {\n        node.next = frontier[index + 1]\n      } else {\n        node.next = null\n      }\n      if (node.left) {\n        next.push(node.left)\n      }\n      if (node.right) {\n        next.push(node.right)\n      }\n    })\n    frontier = next\n  }\n  return root\n}\n\nconsole.log(connect([1,2,3,4,5,null,7]))\n`.trim();\n\nclass Trees extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 623\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626\n      },\n      __self: this\n    }, \"Create Tree\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: insertData,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 634\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636\n      },\n      __self: this\n    }, \"Traversing\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: traversing,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646\n      },\n      __self: this\n    }, \"Delete\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: deleteNode,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    }, \"Update\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: updates,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666\n      },\n      __self: this\n    }, \"1. Unique Binary Search Trees.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667\n      },\n      __self: this\n    }, \"Input: \"), \"3\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668\n      },\n      __self: this\n    }, \"Output: \"), \"[\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669\n      },\n      __self: this\n    }), \"[1,null,3,2],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670\n      },\n      __self: this\n    }), \"[3,2,null,1],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671\n      },\n      __self: this\n    }), \"[3,1,null,null,2],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672\n      },\n      __self: this\n    }), \"[2,1,3],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673\n      },\n      __self: this\n    }), \"[1,null,2,null,3] ]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: generateTrees,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685\n      },\n      __self: this\n    }, \"2. Validate Binary Search Tree.\"), \"Given a binary tree, determine if it is a valid binary search tree (BST).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687\n      },\n      __self: this\n    }), \"Assume a BST is defined as follows:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690\n      },\n      __self: this\n    }, \"The left subtree of a node contains only nodes with keys less than the node's key.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691\n      },\n      __self: this\n    }, \"The right subtree of a node contains only nodes with keys greater than the node's key.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692\n      },\n      __self: this\n    }, \"Both the left and right subtrees must also be binary search trees.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 695\n      },\n      __self: this\n    }, \"Input: \"), \" [2,1,3]\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 696\n      },\n      __self: this\n    }, \"Output: \"), \" true\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 697\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699\n      },\n      __self: this\n    }, \"Example 2: \"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700\n      },\n      __self: this\n    }, \"Input: \"), \"[5,1,4,null,null,3,6]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701\n      },\n      __self: this\n    }, \"Output: \"), \"false\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 702\n      },\n      __self: this\n    }, \"Explanation: \"), \"The root node's value is 5 but its right child's value is 4.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isValidBST,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712\n      },\n      __self: this\n    }, \"3. Recover Binary Search Tree.\"), \"Two elements of a binary search tree (BST) are swapped by mistake.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 714\n      },\n      __self: this\n    }), \"Recover the tree without changing its structure. \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 716\n      },\n      __self: this\n    }, \"Input: \"), \" [3,1,4,null,null,2]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 716\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 717\n      },\n      __self: this\n    }, \"Output: \"), \" [2,1,4,null,null,3]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 718\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: recoverTree,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 719\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 727\n      },\n      __self: this\n    }, \"4. Same Tree.\"), \"Given two binary trees, write a function to check if they are the same or not.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 729\n      },\n      __self: this\n    }), \"Two binary trees are considered the same if they are structurally identical and the nodes have the same value.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isSameTree,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 738\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 740\n      },\n      __self: this\n    }, \"5. Symmetric Tree.\"), \"Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 742\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isSymmetric,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 743\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 749\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 751\n      },\n      __self: this\n    }, \"6. Convert Sorted Array to Binary Search Tree.\"), \"Given an array where elements are sorted in ascending order, convert it to a height balanced BST.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753\n      },\n      __self: this\n    }), \"For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 755\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: sortedArrayToBST,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 756\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 762\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 764\n      },\n      __self: this\n    }, \"7. Convert Sorted List to Binary Search Tree.\"), \"Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 766\n      },\n      __self: this\n    }), \"For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 768\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 769\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 770\n      },\n      __self: this\n    }, \"Input: \"), \"head = [-10,-3,0,5,9]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 770\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 771\n      },\n      __self: this\n    }, \"Output: \"), \"[0,-3,9,-10,null,5]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 772\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: sortedListToBST,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 773\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 779\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 781\n      },\n      __self: this\n    }, \"8. Minimum Depth of Binary Tree.\"), \"The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 783\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: minDepth,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 784\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 790\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 792\n      },\n      __self: this\n    }, \"9. Path Sum.\"), \"Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 794\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: hasPathSum,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 795\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 801\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 803\n      },\n      __self: this\n    }, \"10. Populating Next Right Pointers in Each Node.\"), \"Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 805\n      },\n      __self: this\n    }), \"Initially, all next pointers are set to NULL.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 807\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 808\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 809\n      },\n      __self: this\n    }, \"You may only use constant extra space.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 810\n      },\n      __self: this\n    }, \"Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 812\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: connect,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 813\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Trees);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/trees.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","insertData","trim","traversing","deleteNode","updates","generateTrees","isValidBST","recoverTree","isSameTree","isSymmetric","sortedArrayToBST","sortedListToBST","minDepth","hasPathSum","connect","Trees","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst insertData = `\nfunction Nodes(data, left, right){\n  this.data=data;\n  this.left=left;\n  this.right=right;\n  this.show=show;\n}\n\nfunction show(){\n  return this.data;\n}\n\nfunction bst(){\n  this.root=null;\n  this.insert=insert;\n}\n\nfunction insert(data){\n  const node=new Nodes(data,null,null)\n  if(this.root === null){\n    this.root=node;\n  }else{\n    var current=this.root;\n    var parrent;\n    while(current){\n      parrent=current;\n      if(data < current.data){\n        current=current.left;\n        if(current === null){\n          parrent.left=node;\n        }\n      }else{\n        current = current.right;\n        if(current === null){\n          parrent.right = node;\n        }\n      }\n    }\n  }\n}\n\nconst obj= new bst();\nobj.insert(3)\nobj.insert(5)\nobj.insert(2)\nobj.insert(7)\nobj.insert(1)\n\nconsole.log(obj.root)`.trim()\n\nconst traversing = `\nfunction Nodes(data, left, right){\n  this.data=data;\n  this.left=left;\n  this.right=right;\n  this.show=show;\n}\n\nfunction show(){\n  return this.data;\n}\n\nfunction bst(){\n  this.root=null;\n  this.insert=insert;\n}\n\nfunction insert(data){\n  const node=new Nodes(data,null,null)\n  if(this.root === null){\n    this.root=node;\n  }else{\n    var current=this.root;\n    var parrent;\n    while(current){\n      parrent=current;\n      if(data < current.data){\n        current=current.left;\n        if(current === null){\n          parrent.left=node;\n        }\n      }else{\n        current = current.right;\n        if(current === null){\n          parrent.right = node;\n        }\n      }\n    }\n  }\n}\n\nfunction inOrder(node){\n  if(!(node==null)){\n    inOrder(node.left);\n    console.log(node.show()+ \" \")\n    inOrder(node.right)\n  }\n}\n\nfunction preOrder(node) {\n  if (node !== null) {\n    console.log(node.show() + \" \");\n    preOrder(node.left);\n    preOrder(node.right);\n  }\n}\n\nfunction postOrder(node) {\n  if (node !== null) {\n    postOrder(node.left);\n    postOrder(node.right);\n    console.log(node.show() + \" \");\n  }\n}\n\nconst obj= new bst();\nobj.insert(3)\nobj.insert(5)\nobj.insert(2)\nobj.insert(7)\nobj.insert(1)\n\nconsole.log(obj.root)\n\nconsole.log('Inorder Traversal')\ninOrder(obj.root)\n\nconsole.log('Pre-Order Traversal');\npreOrder(obj.root);\n\nconsole.log('Post-Order Traversal');\npostOrder(obj.root);`.trim()\n\nconst deleteNode = `\nfunction Node(data,left,right){\n  this.data=data;\n  this.left=left;\n  this.right=right;\n  this.show=show;\n}\n\nfunction show(){\n  return this.data;\n}\n\nfunction bst(){\n  this.root=null;\n  this.insert=insert;\n}\n\nfunction insert(data){\n  const node=new Node(data,null,null);\n\n  if(this.root===null){\n    this.root=node;\n  }else{\n    var current=this.root;\n    var parent;\n\n    while(current){\n      parent=current;\n      if(data < current.data){\n        current=current.left;\n        if(current === null){\n          parent.left = node;\n        }\n      }else{\n        current = current.right;\n        if(current === null){\n          parent.right = node;\n        }\n      }\n    }\n  }\n}\n\nfunction inOrder(node){\n  if(!(node === null)){\n    inOrder(node.left)\n    console.log(node.show())\n    inOrder(node.right)\n  }\n}\n\nfunction deleteNode(root, key){\n  if(root === null){\n    return root;\n  }\n\n  if(key < root.data){\n    root.left = deleteNode(root.left, key)\n  }else if(key > root.data){\n    root.right = deleteNode(root.right, key)\n  }else {\n    if(root.left === null){\n      return root.right;\n    }else if(root.right === null){\n      return root.right;\n    }\n  }\n  return root;\n}\n\nconst obj = new bst()\nobj.insert(5)\nobj.insert(6)\nobj.insert(1)\nobj.insert(2)\nobj.insert(3)\n\ninOrder(obj.root)\n\nobj.root = deleteNode(obj.root, 6)\nconsole.log('After Deleting')\ninOrder(obj.root)`.trim()\n\nconst updates = `\nfunction Node(data,left,right){\n  this.data=data;\n  this.left=left;\n  this.right=right;\n  this.show=show;\n}\n\nfunction show(){\n  return this.data;\n}\n\nfunction bst(){\n  this.root=null;\n  this.insert=insert;\n}\n\nfunction insert(data){\n  const node=new Node(data,null,null)\n  if(this.root===null){\n    this.root=node;\n  }else{\n    var current=this.root;\n    var parrent;\n    while(current){\n      parrent=current;\n      if(data<current.data){\n        current=current.left;;\n        if(current===null){\n          parrent.left=node;\n        }\n      }else{\n        current=current.right;\n        if(current===null){\n          parrent.right=node;\n        }\n      }\n    }\n  }\n}\n\nfunction inOrder(root){\n  if(!(root===null)){\n    inOrder(root.left)\n    console.log(root.show())\n    inOrder(root.right)\n  }\n}\n\nfunction updateNode(node, target, newValue) {\n  if (node === null) {\n    return null;                                // Target node not found\n  }\n\n  if (target < node.data) {\n    node.left = updateNode(node.left, target, newValue);\n  } else if (target > node.data) {\n    node.right = updateNode(node.right, target, newValue);\n  } else {\n    node.data = newValue;                       // Found the target node, update its data\n  }\n\n  return node;\n}\n\nconst obj=new bst()\nobj.insert(4)\nobj.insert(1)\nobj.insert(2)\nobj.insert(3)\n\ninOrder(obj.root)\n\nconsole.log('Update Node');\nobj.root = updateNode(obj.root, 4, 10);\ninOrder(obj.root);\n`.trim()\n\n// const traversing = ``.trim()\n\nconst generateTrees = `\n\n\nfunction TreeNode(val) {\n  this.val = val\n  this.left = null\n  this.right = null\n}\n\nconst generateTrees = (n) => {\n  if (n === 0) return [];\n\n  const numbers = new Array(n).fill(0).map((v, index) => index + 1)\n  const memo = {}\n\n  const compose = (number, left, right) => {\n    const result = []\n    for (let i = 0; i < left.length; i++) {\n      for (let j = 0; j < right.length; j++) {\n            const node = new TreeNode(number)\n            node.left = left[i]\n            node.right = right[j]\n            result.push(node)\n          }\n        }\n        return result\n      }\n\n  const aux = (list = []) => {\n    const key = list.toString()\n    if (memo[key] !== undefined) {\n      return memo[list.toString()]\n    }\n\n    if (list.length === 0) return [null]\n\n    memo[key] = list.reduce((acc, number) => {\n        acc.push(...compose(number, aux(list.filter(x => x < number)), aux(list.filter(x => x > number)),\n          ),\n        )\n        return acc\n      },\n      [],\n    )\n    return memo[key]\n  }\n  \n  return aux(numbers)\n}\n\nconsole.log(generateTrees(3))\n`.trim();\n\nconst isValidBST = `\nfunction isValidBST(root) {\n  const aux = (node) => {\n    if (!node) return [true, null, null];\n\n    const [leftValid, leftMin, leftMax] = aux(node.left)\n    const [rightValid, rightMin, rightMax] = aux(node.right)\n    let valid = leftValid && rightValid\n\n    if (leftMax !== null && leftMax >= node.val) {\n      valid = false\n    }\n    if (rightMin !== null && rightMin <= node.val) {\n      valid = false\n    }\n    \n    const currentMin = leftMin === null ? node.val : leftMin\n    const currentMax = rightMax === null ? node.val : rightMax\n    return [valid, currentMin, currentMax]\n  }\n  return aux(root)[0]\n}\n\nconsole.log(isValidBST(3))\n`.trim();\n\nconst recoverTree = `\nfunction recoverTree(root) {\n  let first = null\n  let second = null\n  let prev = null\n\n  const aux = (node) => {\n    if (node) {\n      aux(node.left)\n      if (prev && prev.val > node.val) {\n        if (!first) {\n          first = prev\n          second = node\n        } else {\n          second = node\n        }\n      }\n      prev = node\n      aux(node.right)\n    }\n  }\n  aux(root)\n\n  if (first && second) {\n    const temp = first.val\n    first.val = second.val\n    second.val = temp\n  }\n}\n\nconsole.log(recoverTree([1,3,null,2]))`.trim();\n\nconst isSameTree = `\nfunction isSameTree(p, q) {\n  if ((p && !q) || (!p && q)) return false;\n  if (!p && !q) return true;\n\n  const leftSame = isSameTree(p.left, q.left)\n  const rightSame = isSameTree(p.right, q.right)\n  \n  return leftSame && rightSame && (p.val === q.val)\n}\n\nconsole.log(isSameTree([1,3,null,2], [1,3,null,2]))\n`.trim();\n\nconst isSymmetric = `\nfunction isSymmetric(root){\n  function aux (node, level, result){\n    if (!result[level]) {\n      result[level] = []\n    }\n\n    if (!node) {\n      result[level].push(null)\n      return result\n    }\n\n    result[level].push(node.val)\n    aux(node.left, level + 1, result)\n    aux(node.right, level + 1, result)\n    return result\n  }\n\n  function isSymmetricHelper (values = []){\n    for (let i = 0; i <= values.length / 2; i++) {\n      if (values[i] !== values[values.length - 1 - i]) {\n        return false\n      }\n    }\n    return true\n  }\n\n  const result = aux(root, 0, [])\n  for (let i = 0; i < result.length; i++) {\n    if (!isSymmetricHelper(result[i])) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(isSymmetric([1,2,2,3,4,4,3]))\n `.trim();\n\nconst sortedArrayToBST = `\nfunction sortedArrayToBST (nums = []){\n  const aux = (low, high) => {\n    if (low <= high) {\n      const middle = Math.floor((low + high) / 2)\n      const node = { val: nums[middle] }\n      \n      node.left = aux(low, middle - 1)\n      node.right = aux(middle + 1, high)\n      return node\n    }\n    return null\n  }\n  return aux(0, nums.length - 1)\n}\n\nconsole.log(sortedArrayToBST([3,9,20,null,null,15,7]))\n`.trim();\n\nconst sortedListToBST = `\nfunction sortedListToBST(head) {\n  const nodes = []\n\n  while (head) {\n    head.left = null\n    head.right = null\n    nodes.push(head)\n    head = head.next\n  }\n\n  const aux = (nodes, low, high) => { \n    if (low > high) return null;\n\n    const middle = Math.floor((low + high) / 2)\n    nodes[middle].left = aux(nodes, low, middle - 1)\n    nodes[middle].right = aux(nodes, middle + 1, high)\n    return nodes[middle]\n  }\n  return aux(nodes, 0, nodes.length - 1)\n}\n\nconsole.log(sortedListToBST([-10,-3,0,5,9]))\n`.trim();\n\nconst minDepth = `\nfunction minDepth (root){\n  if (!root) return 0;\n\n  const aux = (node, depth) => {\n    if (!node || (!node.left && !node.right)) return depth;\n\n    if (node.left && !node.right) {\n      return aux(node.left, depth + 1)\n    }\n\n    if (node.right && !node.left) {\n      return aux(node.right, depth + 1)\n    }\n\n    const leftDepth = aux(node.left, depth + 1)\n    const rightDepth = aux(node.right, depth + 1)\n    return leftDepth < rightDepth ? leftDepth : rightDepth\n  }\n\n  return aux(root, 1)\n}\n\nconsole.log(minDepth([3,9,20,null,null,15,7]))\n`.trim();\n\nconst hasPathSum = `\nfunction hasPathSum (root, sum){\n  function aux (node, currentSum){\n    if (!node) return false;\n\n    if (node && !node.left && !node.right) {\n      return (currentSum + node.val) === sum\n    }\n    const isLeftHas = aux(node.left, currentSum + node.val)\n    const isRightHas = aux(node.right, currentSum + node.val)\n    return (isLeftHas || isRightHas)\n  }\n\n  if (root === null) return false;\n  return aux(root, 0)\n}\n\nconsole.log(hasPathSum([5,4,1],10))\n`.trim();\n\nconst connect = `\nfunction connect (root){\n  if (!root) return null;\n  let frontier = [root];\n\n  while (frontier.length) {\n    const next = []\n    frontier.forEach((node, index) => {\n      if (frontier[index + 1]) {\n        node.next = frontier[index + 1]\n      } else {\n        node.next = null\n      }\n      if (node.left) {\n        next.push(node.left)\n      }\n      if (node.right) {\n        next.push(node.right)\n      }\n    })\n    frontier = next\n  }\n  return root\n}\n\nconsole.log(connect([1,2,3,4,5,null,7]))\n`.trim();\n\n\nclass Trees extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Create Tree</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={insertData}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>Traversing</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={traversing}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>Delete</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={deleteNode}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>Update</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={updates}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>1. Unique Binary Search Trees.</h3>\n              <b>Input: </b>3<br/>\n              <b>Output: </b>\n              [<br/>\n                [1,null,3,2],<br/>\n                [3,2,null,1],<br/>\n                [3,1,null,null,2],<br/>\n                [2,1,3],<br/>\n                [1,null,2,null,3]\n              ]\n              <div style={titles}>\n                <PrismCode\n                  code={generateTrees}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>2. Validate Binary Search Tree.</h3>\n              Given a binary tree, determine if it is a valid binary search tree (BST).\n              <br/>\n              Assume a BST is defined as follows:\n              <ul>\n                <li>The left subtree of a node contains only nodes with keys less than the node's key.</li>\n                <li>The right subtree of a node contains only nodes with keys greater than the node's key.</li>\n                <li>Both the left and right subtrees must also be binary search trees.</li>\n              </ul>\n              <br/>\n              <b>Input: </b> [2,1,3]\n              <b>Output: </b> true\n              <br/>\n              <br/>\n              <b>Example 2: </b> \n              <b>Input: </b>[5,1,4,null,null,3,6]<br/>\n              <b>Output: </b>false<br/>\n              <b>Explanation: </b>The root node's value is 5 but its right child's value is 4.\n              <div style={titles}>\n                <PrismCode\n                  code={isValidBST}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>3. Recover Binary Search Tree.</h3>\n              Two elements of a binary search tree (BST) are swapped by mistake.\n              <br/>\n              Recover the tree without changing its structure. <br/><br/>\n              <b>Input: </b> [3,1,4,null,null,2]<br/>\n              <b>Output: </b> [2,1,4,null,null,3]\n              <div style={titles}>\n                <PrismCode\n                  code={recoverTree}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>4. Same Tree.</h3>\n              Given two binary trees, write a function to check if they are the same or not.\n              <br/>\n              Two binary trees are considered the same if they are structurally identical and the nodes have the same value.\n              <div style={titles}>\n                <PrismCode\n                  code={isSameTree}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>5. Symmetric Tree.</h3>\n              Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n              <div style={titles}>\n                <PrismCode\n                  code={isSymmetric}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>6. Convert Sorted Array to Binary Search Tree.</h3>\n              Given an array where elements are sorted in ascending order, convert it to a height balanced BST.\n              <br/>\n              For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\n              <div style={titles}>\n                <PrismCode\n                  code={sortedArrayToBST}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>7. Convert Sorted List to Binary Search Tree.</h3>\n              Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.\n              <br/>\n              For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\n              <br/>\n              <br/>\n              <b>Input: </b>head = [-10,-3,0,5,9]<br/>\n              <b>Output: </b>[0,-3,9,-10,null,5]\n              <div style={titles}>\n                <PrismCode\n                  code={sortedListToBST}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>8. Minimum Depth of Binary Tree.</h3>\n              The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\n              <div style={titles}>\n                <PrismCode\n                  code={minDepth}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>9. Path Sum.</h3>\n              Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.\n              <div style={titles}>\n                <PrismCode\n                  code={hasPathSum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>10. Populating Next Right Pointers in Each Node.</h3>\n              Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\n              <br/>\n              Initially, all next pointers are set to NULL.\n              <br/>\n              <ul>\n                <li>You may only use constant extra space.</li>\n                <li>Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={connect}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              \n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Trees));\n"]},"metadata":{},"sourceType":"module"}