{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import\"../../ReactJs/styles.css\";import Sidebar from\"../sidebar\";import PrismCode from\"../../ReactJs/prismCode\";var titles={backgroundColor:\"#F0F8FF\",padding:\"1px\",fontSize:\"16px\"};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var nonInteger=\"\\nlet arr = []\\narr[3.4] = 'Oranges'\\n\\narr.length                                                      // 0\\narr.hasOwnProperty(3.4)                                         // true\\n\\narr.property = \\\"value\\\";                                         //Using arrays to store other properties\\nconsole.log(arr);    \\n\".trim();var copyWithin=\"\\nfunction copyWith(){\\n  var arr = [];\\n  fetch('https://jsonplaceholder.typicode.com/users')\\n      .then(res => res.json())\\n      .then(mockdata => {\\n        mockdata.map(val => {\\n          arr.push(val.name);\\n      })\\n      \\n    console.log('copyArr',copyArr(arr))\\n    });\\n  }\\n    \\n  const copyArr = (arr) => {\\n    var result=arr.copyWithin(0,1,3);\\n    return result;\\n  }\\n  \\n  copyWith();\".trim();var iters=\"\\narr.filter(val => 3 > val)\\n\\narr.find(val => 3 > val)\\n\\narr.findIndex(val => 3 > val)\\n\\narr.reduce((a, b) => a + b)\\n\\narr.some((a) => a > 4)\\n\\narr.toLocaleString('en', { timeZone: \\\"UTC\\\" })\\n\".trim();var entries=\"\\nconst entriesArr = (arr) => {\\n  var itr = arr.entries();\\n  for (var e of itr) {\\n    console.log(e);\\n  }\\n}\\n\\nentriesArr(['a', 'b', 'c']);\".trim();var multiArray=\"\\n//1\\nlet a = new Array(4)\\nfor (var i = 0; i < 4; i++) {\\n  a[i] = new Array(4)\\n  for (var j = 0; j < 4; j++) {\\n    a[i][j] = [ + i + ', ' + j ];\\n    console.log(a[i][j]);\\n  }\\n}\\n\\n\\n//2\\nlet myNestedArray = [\\n  ['unshift', false, 1, 2, 3, 'complex', 'nested'],\\n  [['loop'], ['deep'], ['shift', 6, 7, 1000, 'method']],\\n  [[['concat'], ['deeper'], [false, true, 'spread', 'array']],\\n  [[['mutate', 1327.98], ['deepest', 'splice', 'slice', 'push']]\\n  ]]\\n];\\n\\nconsole.log(myNestedArray)\".trim();var combined=\"\\nfunction spreadOut() {\\n  let fragment = ['to', 'code'];\\n  let sentence = ['learning', ...fragment, 'is', 'fun']; \\n  return sentence;\\n}\\n\\nconsole.log(spreadOut());\".trim();var jsNum=\"\\nex. (123).toString()\\n\\nx = Number(true)                                     //1\\nx = Number(false)                                    //0\\nx = Number(new Date())                               //1615382431900\\nx = Number(\\\"999\\\")                                    //999\\nx = Number(\\\"999 888\\\")                                //NaN\\n\\n\\n// parseFloat\\nx = parseFloat(\\\"10\\\")                                 //10\\nx = parseFloat(\\\"10.00\\\")                              //10\\nx = parseFloat(\\\"10.33\\\")                              //10.33\\nx = parseFloat(\\\"34 45 66\\\")                           //34\\nx = parseFloat(\\\"   60   \\\")                           //60\\nx = parseFloat(\\\"40 years\\\")                           //40\\nx = parseFloat(\\\"He was 40\\\")                          //NaN\\n\\n\\n//isFinite\\nx = isFinite(123)                                    //true\\nx = isFinite(-1.23)                                  //true\\nx = isFinite(\\\"123\\\")                                  //true\\nx = isFinite(\\\"Hello\\\")                                //false\\nx = isFinite(\\\"2005/12/12\\\")                           //false\\n\\n\\n//isNaN\\nx = isNaN(123)                                       //false\\nx = isNaN(-1.23)                                     //false\\nx = isNaN(\\\"123\\\")                                     //false\\nx = isNaN(\\\"Hello\\\")                                   //true\\nx = isNaN(\\\" \\\")                                       //false\\nx = isNaN(true)                                      //false\\nx = isNaN(undefined)                                 //true\\nx = isNaN(NaN)                                       //true\\nx = isNaN(0 / 0)                                     //true\\nx = isNaN(null)                                      //false\\n\\nconsole.log(x)\\n\".trim();var dataTypes=\"\\nvar x = Math.abs(-7.25)                                             //7.25\\nvar x = Math.abs(7.25)                                              //7.25\\n\\n\\nvar x = Math.ceil(-7.25)                                            //-7\\nvar x = Math.ceil(7.25)                                             //8\\n\\n\\nvar x = Math.floor(-7.25)                                           //-8\\nvar x = Math.floor(7.25)                                            //7\\n\\n\\nvar x = Math.fround(-7.25)                                          //-7.25\\nvar x = Math.fround(7.25)                                           //7.25\\nvar x = Math.fround(2.60)                                           //2.5999999046325684\\nvar x = Math.fround(2.50)                                           //2.5\\n\\nMath.max(-7.25, 7.25)                                               //7.25\\nMath.min(-7.25, 7.25)                                               //-7.25\\n//Sign\\nvar x = Math.sign(7.25)                                                                //1\\nvar x = Math.sign(-7.25)                                                               //-1\\nvar x = Math.sign(0)                                                                   //0\\nvar x = Math.sqrt(-7.25)                                                               //NaN\\nvar x = Math.sqrt(9) \\n\\nconsole.log(x)\\n\\n\\n//Math.PI\\nconsole.log(Math.PI);                                               //3.14\\n\".trim();var decimal=\"\\nvar num = 123.4567\\nvar mockData = [1, 6, 7, 8, 9, 0, 8, 2, 3, 4, 5]\\n\\nvar x = num.toFixed(2)\\nx = num.toPrecision(6)\\nx = mockData.sort()\\nx = mockData[0] = \\\"cars\\\"\\nx = delete mockData[0];\\nx = mockData.splice(2, 0, \\\"Lemon\\\", \\\"Kiwi\\\");\\nx = mockData.slice(1);\\n\\nconsole.log(x)\\n\".trim();var random=\"\\nfunction getRndInteger(min, max) {\\n  return Math.floor(Math.random() * (max - min)) + min;\\n }\\n \\n getRndInteger(2,7)\\n\".trim();var decimalToBinary=\"function decimalToBinary(num) {\\n  var bin = [];\\n  while (num > 0) {\\n    bin.unshift(num % 2);\\n    num >>= 1;\\n  }\\n  console.log(bin.join(''));\\n }\\n \\n decimalToBinary(2);\\n\".trim();var DecimalToOctal=\"function decimalToOctal(num) {\\n  var oct = 0,c=0;\\n  while (num > 0) {\\n    var r=num%8;\\n    oct=oct+(r*Math.pow(10,c++));\\n    num =Math.floor(num/ 8);                                   //basically /= 8 without remainder if any.\\n  }\\n  console.log(oct);\\n }\\n \\n decimalToOctal(2);\\n \".trim();var DecimalToHex=\"\\n function intToHex(num){\\n   switch(num){\\n         case 10: return \\\"A\\\";\\n         case 11: return \\\"B\\\";\\n         case 12: return \\\"C\\\";\\n         case 13: return \\\"D\\\";\\n         case 14: return \\\"E\\\";\\n         case 15: return \\\"F\\\";\\n       }\\n     return num;\\n  }\\n  \\n  function decimalToHex(num){\\n     let hex_out = [];\\n     while(num > 15) {\\n       hex_out.push(intToHex(num/16))\\n   }\\n   \\n return intToHex(num) + hex_out.join(\\\"\\\");\\n }\\n \\n console.log(decimalToHex(999098) === \\\"F3EBA\\\");\\n console.log(decimalToHex(123) === \\\"7B\\\");\\n \".trim();var stringFun=\"\\n var a = new Date();                                  //Wed Mar 10 2021 19:18:41 GMT+0530 (India Standard Time)\\n var b = \\\"12345\\\";                                                //12345\\n var c = 12345;                                                  //12345\\n \".trim();var trim=\"\\n var str = 'Centralized empowering task-force';\\n var str2 = '';\\n var str3 = '';\\n \\n str = str.charAt(3)\\n str2 = str.concat(str3)\\n str3 = str2.charCodeAt(3)                                                         //116\\n str4 = str.indexOf('t')                                                           //-1\\n str5 = str2.search('empowering')                                                  //12\\n str6 = str2.match('ing')\\n str7 = str2.replace('empowering', 'women')                                 //Centralized women task-force\\n str8 = str2.substr(2, 7)                                                          //ntraliz\\n str9 = str2.substring(2, 7)                                                       //ntral            \\n str10 = str2.valueOf()                                                     //Centralized empowering task-force\\n str11 = \\\"   empowering\\\"\\n str12 = str11.slice(2, 5)                                                         //em\\n str13 = str11.toUpperCase()                                                       //EMPOWERING\\n \\n console.log('toUpperCase', str13)\\n   \".trim();var interpolation=\"\\n let firstName = \\\"John\\\";\\n let lastName = \\\"Doe\\\";\\n \\n let text = 'Welcome '$'{firstName}, '$'{lastName}!';\\n console.log(text)\\n \".trim();var Arrays=/*#__PURE__*/function(_Component){_inherits(Arrays,_Component);function Arrays(){_classCallCheck(this,Arrays);return _possibleConstructorReturn(this,_getPrototypeOf(Arrays).apply(this,arguments));}_createClass(Arrays,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"b\",null,\"Indexed collections: \"),\"An array is an ordered list of values that refer with a name and an index.\",React.createElement(\"br\",null),React.createElement(\"h3\",null,\"1.Creating an array\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"let arr = new Array(0, 1, ..., N);\"),React.createElement(\"li\",null,\"let arr = Array(0, 1, ..., N);\"),React.createElement(\"li\",null,\"let arr = [0, 1, ..., N];\")),React.createElement(\"br\",null),\"If supply a non-integer value to the array operator, a property will be created in the object representing the array, instead of an array element.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:nonInteger,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Array Methods\"),\"const arr = [\\\"Saab\\\", \\\"Volvo\\\", \\\"BMW\\\", 1, 2, 3, 4, 5, new Date('08 Jan 1997 17:12:00 UTC')];\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"Also create an array, and then provide the elements:\",React.createElement(\"br\",null),\"const cars = [];\",React.createElement(\"br\",null),\"cars[0]= \\\"Saab\\\";\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Using new keyword: \"),\"const arr2 = new Array(\\\"Aulto\\\", \\\"Zipsi\\\", \\\"Bokati\\\");\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Accessing array elements: \"),\"arr[0]\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Changing an array element: \"),\"arr[0] = \\\"Opel\\\"\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"arr.length: \")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"arr.sort(): \")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"arr.push(\\\"Lemon\\\"): \"),\"Adds one or more elements to the end of an array.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"arr.pop(): \"),\"Removes and returns the last element of an array.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"shift():\"),\"It removes and returns the first element of an array.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"unshift(): \"),\"Adds one or more elements in the beginning of the given array.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Array.isArray(arr): \"),\"Tests if the passed value ia an array.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"toString(): \"),\"arr.toString()\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"It converts the elements of a specified array into string form, without affecting the original array.\")),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"arr.flat(): \"),\"Creates a new array carrying sub-array elements concatenated recursively till the specified depth.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"arr.fill(\\\"Bootstrap\\\"): \"),\"Fills elements into an array with static values.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Array.from(arr): \"),\"Creates a new array carrying the exact copy of another array element.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"arr.includes(\\\"Saab\\\"): \"),\"Checks whether the given array contains the specified element.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"arr.indexOf(\\\"Saab\\\"): \"),\"Searches the specified element in the given array and returns the index of the first match.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"arr.join(\\\"-\\\"): \"),\"Joins the elements of an array as a string.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"arr.lastIndexOf(\\\"BMW\\\"): \"),\"Searches the specified element in the given array and returns the index\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"arr.reverse(): \"),\"Reverses the elements of given array.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"arr.slice(1, 2): \"),\"Returns a new array containing the copy of the part of the given array.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"arr.sort(): \")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"arr.splice(1, 2): \"),\"Modify original array.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"concat(): \"),\"Returns a new array object that contains two or more merged arrays.\"),\"forEach(), map(), of(), reduceRight()\"),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Iterator Array\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"filter(): \"),\"Returns the new array containing the elements that pass the provided function conditions.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"find(): \"),\"Returns the value of the first element in the given array that satisfies the specified condition.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"findIndex(): \"),\"Returns the index value of the first element in the given array that satisfies the specified condition.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"reduce(): \"),\"Executes a provided function for each value from left to right and reduces the array to a single value.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"some(): \"),\"Determines if any element of the array passes the test of the implemented function.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"toLocaleString(): \"),\"Returns a string containing all the elements of a specified array.\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:iters,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"entries(): \"),\"It creates an iterator object and a loop that iterates over each key/value pair.\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:entries,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"values():\"),\" It creates a new iterator object carrying values for each index in the array.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Multi-dimensional arrays: \"),\"Array can contain another array as an element.\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Ex. \"),\"Creates a two-dimensional array.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:multiArray,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Combine Arrays with the Spread Operator\"),React.createElement(\"p\",null,\"Spread operator have ability to combine arrays, or to insert all the elements of one array into another, at any index.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:combined,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Create a Set\"),\"const my_set = new Set([\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"a\\\"])\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Add items in existing set: \"),\"my_set.add(\\\"ab\\\");\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Set Methods: \"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"my_set.values(): \"),\"returns a new Set containing all the values in a Set.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"my_set.add(\\\"UO\\\"): \"),\"Adds a new element to the Set.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"delete(): \"),\"Removes an element from a Set.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"has(): \"),\"Returns true if a value exists in the Set.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"values: \"),\"Returns an iterator with all the values in a Set.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"size: \"),\"Returns the number of elements in a Set.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. JsNumbers\"),\"JavaScript Numbers are Always 64-bit Floating Point.\",React.createElement(\"br\",null),React.createElement(\"p\",null,React.createElement(\"b\",null,\"parseFloat():\"),\" Parses a string and returns a floating point number.\"),React.createElement(\"p\",null,\"This function determines if the first character in the specified string is a number. If it is, it parses the string until it reaches the end of the number, and returns the number as a number, not as a string.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Only the first number in the string is returned!\"),React.createElement(\"li\",null,\"Leading and trailing spaces are allowed.\"),React.createElement(\"li\",null,\"If the first character cannot be converted to a number, parseFloat() returns NaN.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"isFinite:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Determines whether a number is a finite, legal number.\"),React.createElement(\"li\",null,\"Returns false if the value is +infinity, -infinity, or NaN, Otherwise it returns true.\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"isNan: \"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Returns true if the argument is not a number otherwise it is false.\")),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"This format stores numbers in 64 bits, where the number (the fraction) is stored in bits 0 to 51, the exponent in bits 52 to 62, and the sign in bit 63.\"),React.createElement(\"li\",null,\"Extra large or extra small numbers can be written with scientific (exponent) notation.\"),React.createElement(\"li\",null,\"NaN is a JavaScript reserved word indicating that a number is not a legal number. Trying to do arithmetic with a non-numeric string will result in NaN.\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Ex. \"),\"100 / \\\"Apple\\\";\")),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"toString(): \"),\"Returns a number as a string.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"toFixed(): \"),\"Returns a string, with the number written with a specified number of decimals.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"toPrecision(): \"),\"Returns a string, with a number written with a specified length.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"parseInt(): \"),\"Parses a string and returns a whole number.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"splice(): \"),\"Method can be used to add new items to an array.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"slice(): \"),\"Method creates a new array. It does not remove any elements from the source array.\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:jsNum,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Sign\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Math.abs: \"),\"Return the absolute value of a number.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"ceil():: \"),\"Rounds a number UPWARDS to the nearest integer, and returns the result.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"floor(): \"),\"Round a number downward to its nearest integer.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"round(): \"),\"Returns the nearest (32-bit single precision) float representation of a number.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"max(): \"),\"Returns the number with the highest value.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"min(): \"),\"Returns the number with the lowest value.\"),React.createElement(\"br\",null),React.createElement(\"br\",null),\"The sign() method checks whether a number is negative, positive or zero.\",React.createElement(\"li\",null,\"If the number is positive, this method returns 1.\"),React.createElement(\"li\",null,\"If the number is negative, it returns -1.\"),React.createElement(\"li\",null,\"If the number is zero, it returns 0.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"sqrt(): \"),\"Return the square root of a number.\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:dataTypes,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. Numbers formate\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:decimal,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. Random Number\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:random,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"7. DecimalToBinary\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:decimalToBinary,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"8. DecimalToOctal\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:DecimalToOctal,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"9. DecimalToHex\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:DecimalToHex,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"10. String\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"String() converts the value of an object to a string.\"),React.createElement(\"li\",null,\"String() returns the same value as toString() of the individual objects.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:stringFun,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"There are 2 ways to create string in JavaScript\"),React.createElement(\"br\",null),\"1.By string literal\",React.createElement(\"br\",null),\"var str = \\\"Please locate where 'locate' occurs!\\\";\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"2.By string object\",React.createElement(\"br\",null),\"var str2 = new String(\\\"string literal\\\");\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"charAt:\"),\" It provides the char value present at the specified index.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"charCodeAt():\"),\" It provides the Unicode value of a character present at the specified index.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"concat():\"),\" It provides a combination of two or more strings.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"indexOf():\"),\" It provides the position of a char value present in the given string.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"lastIndexOf():\"),\" It provides the position of a char value present in the given string by searching a character from the last position.\"),\"str.lastIndexOf(\\\"locate\\\", 15)\",React.createElement(\"li\",null,React.createElement(\"b\",null,\"search():\"),\" It searches a specified regular expression in a given string and returns its position if a match occurs.\"),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"indexOf() and search() accept the same arguments, and return the same value. But they has differences as:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"The search() method cannot take a second start position argument.\"),React.createElement(\"li\",null,\"The indexOf() method cannot take regular expressions.\")),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"match():\"),\" It searches a specified regular expression in a given string and returns that regular expression if a match occurs, as an Array object.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"replace():\"),\" It replaces a given string with the specified replacement.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"substr():\"),\" It is used to fetch the part of the given string on the basis of the specified starting position and length.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"substring(): \"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"substring() is similar to slice(), but substring() cannot accept negative indexes.\"),React.createElement(\"li\",null,\"It is used to fetch the part of the given string on the basis of the specified index.\"))),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"valueOf():\"),\" It provides the primitive value of string object.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"trim():\"),\" It trims the white space from the left and right side of the string.\"),\"str.trim()\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"str.length: \")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"str.includes(\\\"Please\\\"): \")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"str.startsWith(\\\"occurs\\\"): \")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"str.endsWith(\\\"locate\\\"): \")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"str.slice(7, 13): \")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"str.toUpperCase(): \")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"str.toLowerCase(): \")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Property Access: \"),\"str[0]\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"String can be converted to an array with the split() method:\",\" \"),\"str.split(\\\" \\\")\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:trim,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"11. String Interpolation\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"It allows injecting variables, function calls, arithmetic expressions directly into a string.\"),React.createElement(\"li\",null,\"In JavaScript, the template literals and $ Curly braces expression as placeholders perform the string interpolation.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:interpolation,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"13. Fetch javaScript\"),\"It copies the part of the given array with its own elements and returns the modified array.\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:copyWithin,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return Arrays;}(Component);export default withStyles(styles)(Arrays);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/javaScripts/deepJs/array.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","nonInteger","trim","copyWithin","iters","entries","multiArray","combined","jsNum","dataTypes","decimal","random","decimalToBinary","DecimalToOctal","DecimalToHex","stringFun","interpolation","Arrays","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst nonInteger = `\nlet arr = []\narr[3.4] = 'Oranges'\n\narr.length                                                      // 0\narr.hasOwnProperty(3.4)                                         // true\n\narr.property = \"value\";                                         //Using arrays to store other properties\nconsole.log(arr);    \n`.trim();\n\nconst copyWithin = `\nfunction copyWith(){\n  var arr = [];\n  fetch('https://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then(mockdata => {\n        mockdata.map(val => {\n          arr.push(val.name);\n      })\n      \n    console.log('copyArr',copyArr(arr))\n    });\n  }\n    \n  const copyArr = (arr) => {\n    var result=arr.copyWithin(0,1,3);\n    return result;\n  }\n  \n  copyWith();`.trim();\n\nconst iters = `\narr.filter(val => 3 > val)\n\narr.find(val => 3 > val)\n\narr.findIndex(val => 3 > val)\n\narr.reduce((a, b) => a + b)\n\narr.some((a) => a > 4)\n\narr.toLocaleString('en', { timeZone: \"UTC\" })\n`.trim();\n\nconst entries = `\nconst entriesArr = (arr) => {\n  var itr = arr.entries();\n  for (var e of itr) {\n    console.log(e);\n  }\n}\n\nentriesArr(['a', 'b', 'c']);`.trim();\n\nconst multiArray = `\n//1\nlet a = new Array(4)\nfor (var i = 0; i < 4; i++) {\n  a[i] = new Array(4)\n  for (var j = 0; j < 4; j++) {\n    a[i][j] = [ + i + ', ' + j ];\n    console.log(a[i][j]);\n  }\n}\n\n\n//2\nlet myNestedArray = [\n  ['unshift', false, 1, 2, 3, 'complex', 'nested'],\n  [['loop'], ['deep'], ['shift', 6, 7, 1000, 'method']],\n  [[['concat'], ['deeper'], [false, true, 'spread', 'array']],\n  [[['mutate', 1327.98], ['deepest', 'splice', 'slice', 'push']]\n  ]]\n];\n\nconsole.log(myNestedArray)`.trim();\n\nconst combined = `\nfunction spreadOut() {\n  let fragment = ['to', 'code'];\n  let sentence = ['learning', ...fragment, 'is', 'fun']; \n  return sentence;\n}\n\nconsole.log(spreadOut());`.trim();\n\nconst jsNum = `\nex. (123).toString()\n\nx = Number(true)                                     //1\nx = Number(false)                                    //0\nx = Number(new Date())                               //1615382431900\nx = Number(\"999\")                                    //999\nx = Number(\"999 888\")                                //NaN\n\n\n// parseFloat\nx = parseFloat(\"10\")                                 //10\nx = parseFloat(\"10.00\")                              //10\nx = parseFloat(\"10.33\")                              //10.33\nx = parseFloat(\"34 45 66\")                           //34\nx = parseFloat(\"   60   \")                           //60\nx = parseFloat(\"40 years\")                           //40\nx = parseFloat(\"He was 40\")                          //NaN\n\n\n//isFinite\nx = isFinite(123)                                    //true\nx = isFinite(-1.23)                                  //true\nx = isFinite(\"123\")                                  //true\nx = isFinite(\"Hello\")                                //false\nx = isFinite(\"2005/12/12\")                           //false\n\n\n//isNaN\nx = isNaN(123)                                       //false\nx = isNaN(-1.23)                                     //false\nx = isNaN(\"123\")                                     //false\nx = isNaN(\"Hello\")                                   //true\nx = isNaN(\" \")                                       //false\nx = isNaN(true)                                      //false\nx = isNaN(undefined)                                 //true\nx = isNaN(NaN)                                       //true\nx = isNaN(0 / 0)                                     //true\nx = isNaN(null)                                      //false\n\nconsole.log(x)\n`.trim();\n\nconst dataTypes = `\nvar x = Math.abs(-7.25)                                             //7.25\nvar x = Math.abs(7.25)                                              //7.25\n\n\nvar x = Math.ceil(-7.25)                                            //-7\nvar x = Math.ceil(7.25)                                             //8\n\n\nvar x = Math.floor(-7.25)                                           //-8\nvar x = Math.floor(7.25)                                            //7\n\n\nvar x = Math.fround(-7.25)                                          //-7.25\nvar x = Math.fround(7.25)                                           //7.25\nvar x = Math.fround(2.60)                                           //2.5999999046325684\nvar x = Math.fround(2.50)                                           //2.5\n\nMath.max(-7.25, 7.25)                                               //7.25\nMath.min(-7.25, 7.25)                                               //-7.25\n//Sign\nvar x = Math.sign(7.25)                                                                //1\nvar x = Math.sign(-7.25)                                                               //-1\nvar x = Math.sign(0)                                                                   //0\nvar x = Math.sqrt(-7.25)                                                               //NaN\nvar x = Math.sqrt(9) \n\nconsole.log(x)\n\n\n//Math.PI\nconsole.log(Math.PI);                                               //3.14\n`.trim();\n\nconst decimal = `\nvar num = 123.4567\nvar mockData = [1, 6, 7, 8, 9, 0, 8, 2, 3, 4, 5]\n\nvar x = num.toFixed(2)\nx = num.toPrecision(6)\nx = mockData.sort()\nx = mockData[0] = \"cars\"\nx = delete mockData[0];\nx = mockData.splice(2, 0, \"Lemon\", \"Kiwi\");\nx = mockData.slice(1);\n\nconsole.log(x)\n`.trim();\n\nconst random = `\nfunction getRndInteger(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n }\n \n getRndInteger(2,7)\n`.trim();\n\nconst decimalToBinary = `function decimalToBinary(num) {\n  var bin = [];\n  while (num > 0) {\n    bin.unshift(num % 2);\n    num >>= 1;\n  }\n  console.log(bin.join(''));\n }\n \n decimalToBinary(2);\n`.trim();\n\nconst DecimalToOctal = `function decimalToOctal(num) {\n  var oct = 0,c=0;\n  while (num > 0) {\n    var r=num%8;\n    oct=oct+(r*Math.pow(10,c++));\n    num =Math.floor(num/ 8);                                   //basically /= 8 without remainder if any.\n  }\n  console.log(oct);\n }\n \n decimalToOctal(2);\n `.trim();\n\nconst DecimalToHex = `\n function intToHex(num){\n   switch(num){\n         case 10: return \"A\";\n         case 11: return \"B\";\n         case 12: return \"C\";\n         case 13: return \"D\";\n         case 14: return \"E\";\n         case 15: return \"F\";\n       }\n     return num;\n  }\n  \n  function decimalToHex(num){\n     let hex_out = [];\n     while(num > 15) {\n       hex_out.push(intToHex(num/16))\n   }\n   \n return intToHex(num) + hex_out.join(\"\");\n }\n \n console.log(decimalToHex(999098) === \"F3EBA\");\n console.log(decimalToHex(123) === \"7B\");\n `.trim();\n\nconst stringFun = `\n var a = new Date();                                  //Wed Mar 10 2021 19:18:41 GMT+0530 (India Standard Time)\n var b = \"12345\";                                                //12345\n var c = 12345;                                                  //12345\n `.trim();\n\nconst trim = `\n var str = 'Centralized empowering task-force';\n var str2 = '';\n var str3 = '';\n \n str = str.charAt(3)\n str2 = str.concat(str3)\n str3 = str2.charCodeAt(3)                                                         //116\n str4 = str.indexOf('t')                                                           //-1\n str5 = str2.search('empowering')                                                  //12\n str6 = str2.match('ing')\n str7 = str2.replace('empowering', 'women')                                 //Centralized women task-force\n str8 = str2.substr(2, 7)                                                          //ntraliz\n str9 = str2.substring(2, 7)                                                       //ntral            \n str10 = str2.valueOf()                                                     //Centralized empowering task-force\n str11 = \"   empowering\"\n str12 = str11.slice(2, 5)                                                         //em\n str13 = str11.toUpperCase()                                                       //EMPOWERING\n \n console.log('toUpperCase', str13)\n   `.trim();\n\nconst interpolation = `\n let firstName = \"John\";\n let lastName = \"Doe\";\n \n let text = 'Welcome '$'{firstName}, '$'{lastName}!';\n console.log(text)\n `.trim();\n\nclass Arrays extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <b>Indexed collections: </b>\n              An array is an ordered list of values that refer with a name and\n              an index.\n              <br />\n              <h3>1.Creating an array</h3>\n              <ul>\n                <li>let arr = new Array(0, 1, ..., N);</li>\n                <li>let arr = Array(0, 1, ..., N);</li>\n                <li>let arr = [0, 1, ..., N];</li>\n              </ul>\n              <br />\n              If supply a non-integer value to the array operator, a property\n              will be created in the object representing the array, instead of\n              an array element.\n              <div style={titles}>\n                <PrismCode\n                  code={nonInteger}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Array Methods</h3>\n              const arr = [\"Saab\", \"Volvo\", \"BMW\", 1, 2, 3, 4, 5, new Date('08\n              Jan 1997 17:12:00 UTC')];\n              <br />\n              <br />\n              Also create an array, and then provide the elements:\n              <br />\n              const cars = [];\n              <br />\n              cars[0]= \"Saab\";\n              <br />\n              <br />\n              <b>Using new keyword: </b>\n              const arr2 = new Array(\"Aulto\", \"Zipsi\", \"Bokati\");\n              <br />\n              <ul>\n                <li>\n                  <b>Accessing array elements: </b>arr[0]\n                </li>\n                <li>\n                  <b>Changing an array element: </b>arr[0] = \"Opel\"\n                </li>\n                <li>\n                  <b>arr.length: </b>\n                </li>\n                <li>\n                  <b>arr.sort(): </b>\n                </li>\n                <li>\n                  <b>arr.push(\"Lemon\"): </b>Adds one or more elements to the end\n                  of an array.\n                </li>\n                <li>\n                  <b>arr.pop(): </b>Removes and returns the last element of an\n                  array.\n                </li>\n                <li>\n                  <b>shift():</b>It removes and returns the first element of an\n                  array.\n                </li>\n                <li>\n                  <b>unshift(): </b>Adds one or more elements in the beginning\n                  of the given array.\n                </li>\n                <li>\n                  <b>Array.isArray(arr): </b>Tests if the passed value ia an\n                  array.\n                </li>\n                <li>\n                  <b>toString(): </b>arr.toString()\n                </li>\n                <ul>\n                  <li>\n                    It converts the elements of a specified array into string\n                    form, without affecting the original array.\n                  </li>\n                </ul>\n                <br />\n                <li>\n                  <b>arr.flat(): </b>Creates a new array carrying sub-array\n                  elements concatenated recursively till the specified depth.\n                </li>\n                <li>\n                  <b>arr.fill(\"Bootstrap\"): </b>Fills elements into an array\n                  with static values.\n                </li>\n                <li>\n                  <b>Array.from(arr): </b>Creates a new array carrying the exact\n                  copy of another array element.\n                </li>\n                <li>\n                  <b>arr.includes(\"Saab\"): </b>Checks whether the given array\n                  contains the specified element.\n                </li>\n                <li>\n                  <b>arr.indexOf(\"Saab\"): </b>Searches the specified element in\n                  the given array and returns the index of the first match.\n                </li>\n                <li>\n                  <b>arr.join(\"-\"): </b>Joins the elements of an array as a\n                  string.\n                </li>\n                <li>\n                  <b>arr.lastIndexOf(\"BMW\"): </b>Searches the specified element\n                  in the given array and returns the index\n                </li>\n                <li>\n                  <b>arr.reverse(): </b>Reverses the elements of given array.\n                </li>\n                <li>\n                  <b>arr.slice(1, 2): </b>Returns a new array containing the\n                  copy of the part of the given array.\n                </li>\n                <li>\n                  <b>arr.sort(): </b>\n                </li>\n                <li>\n                  <b>arr.splice(1, 2): </b>Modify original array.\n                </li>\n                <li>\n                  <b>concat(): </b>Returns a new array object that contains two\n                  or more merged arrays.\n                </li>\n                forEach(), map(), of(), reduceRight()\n              </ul>\n              <br />\n              <h3>Iterator Array</h3>\n              <ul>\n                <li>\n                  <b>filter(): </b>Returns the new array containing the elements\n                  that pass the provided function conditions.\n                </li>\n                <li>\n                  <b>find(): </b>Returns the value of the first element in the\n                  given array that satisfies the specified condition.\n                </li>\n                <li>\n                  <b>findIndex(): </b>Returns the index value of the first\n                  element in the given array that satisfies the specified\n                  condition.\n                </li>\n                <li>\n                  <b>reduce(): </b>Executes a provided function for each value\n                  from left to right and reduces the array to a single value.\n                </li>\n                <li>\n                  <b>some(): </b>Determines if any element of the array passes\n                  the test of the implemented function.\n                </li>\n                <li>\n                  <b>toLocaleString(): </b>Returns a string containing all the\n                  elements of a specified array.\n                </li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={iters}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>entries(): </b>It creates an iterator object and a loop that\n              iterates over each key/value pair.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={entries}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>values():</b> It creates a new iterator object carrying values\n              for each index in the array.\n              <br />\n              <br />\n              <b>Multi-dimensional arrays: </b>Array can contain another array\n              as an element.\n              <br />\n              <b>Ex. </b>Creates a two-dimensional array.\n              <div style={titles}>\n                <PrismCode\n                  code={multiArray}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>2. Combine Arrays with the Spread Operator</h3>\n              <p>\n                Spread operator have ability to combine arrays, or to insert all\n                the elements of one array into another, at any index.\n              </p>\n              <div style={titles}>\n                <PrismCode\n                  code={combined}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>3. Create a Set</h3>\n              const my_set = new Set([\"a\", \"b\", \"c\", \"a\"])\n              <br />\n              <br />\n              <b>Add items in existing set: </b>my_set.add(\"ab\");\n              <br />\n              <b>Set Methods: </b>\n              <ul>\n                <li>\n                  <b>my_set.values(): </b>returns a new Set containing all the\n                  values in a Set.\n                </li>\n                <li>\n                  <b>my_set.add(\"UO\"): </b>Adds a new element to the Set.\n                </li>\n                <li>\n                  <b>delete(): </b>Removes an element from a Set.\n                </li>\n                <li>\n                  <b>has(): </b>Returns true if a value exists in the Set.\n                </li>\n                <li>\n                  <b>values: </b>Returns an iterator with all the values in a\n                  Set.\n                </li>\n                <li>\n                  <b>size: </b>Returns the number of elements in a Set.\n                </li>\n              </ul>\n              <br />\n              <h3>4. JsNumbers</h3>\n              JavaScript Numbers are Always 64-bit Floating Point.\n              <br />\n              <p>\n                <b>parseFloat():</b> Parses a string and returns a floating\n                point number.\n              </p>\n              <p>\n                This function determines if the first character in the specified\n                string is a number. If it is, it parses the string until it\n                reaches the end of the number, and returns the number as a\n                number, not as a string.\n              </p>\n              <ul>\n                <li>Only the first number in the string is returned!</li>\n                <li>Leading and trailing spaces are allowed.</li>\n                <li>\n                  If the first character cannot be converted to a number,\n                  parseFloat() returns NaN.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <b>isFinite:</b>\n              <ul>\n                <li>Determines whether a number is a finite, legal number.</li>\n                <li>\n                  Returns false if the value is +infinity, -infinity, or NaN,\n                  Otherwise it returns true.\n                </li>\n              </ul>\n              <br />\n              <b>isNan: </b>\n              <ul>\n                <li>\n                  Returns true if the argument is not a number otherwise it is\n                  false.\n                </li>\n              </ul>\n              <br />\n              <ul>\n                <li>\n                  This format stores numbers in 64 bits, where the number (the\n                  fraction) is stored in bits 0 to 51, the exponent in bits 52\n                  to 62, and the sign in bit 63.\n                </li>\n                <li>\n                  Extra large or extra small numbers can be written with\n                  scientific (exponent) notation.\n                </li>\n                <li>\n                  NaN is a JavaScript reserved word indicating that a number is\n                  not a legal number. Trying to do arithmetic with a non-numeric\n                  string will result in NaN.\n                  <br />\n                  <b>Ex. </b>100 / \"Apple\";\n                </li>\n              </ul>\n              <br />\n              <ul>\n                <li>\n                  <b>toString(): </b>Returns a number as a string.\n                </li>\n                <li>\n                  <b>toFixed(): </b>Returns a string, with the number written\n                  with a specified number of decimals.\n                </li>\n                <li>\n                  <b>toPrecision(): </b>Returns a string, with a number written\n                  with a specified length.\n                </li>\n                <li>\n                  <b>parseInt(): </b>Parses a string and returns a whole number.\n                </li>\n                <li>\n                  <b>splice(): </b>Method can be used to add new items to an\n                  array.\n                </li>\n                <li>\n                  <b>slice(): </b>Method creates a new array. It does not remove\n                  any elements from the source array.\n                </li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={jsNum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Sign</b>\n              <ul>\n                <li>\n                  <b>Math.abs: </b>Return the absolute value of a number.\n                </li>\n                <li>\n                  <b>ceil():: </b>Rounds a number UPWARDS to the nearest\n                  integer, and returns the result.\n                </li>\n                <li>\n                  <b>floor(): </b>Round a number downward to its nearest\n                  integer.\n                </li>\n                <li>\n                  <b>round(): </b>Returns the nearest (32-bit single precision)\n                  float representation of a number.\n                </li>\n                <li>\n                  <b>max(): </b>Returns the number with the highest value.\n                </li>\n                <li>\n                  <b>min(): </b>Returns the number with the lowest value.\n                </li>\n                <br />\n                <br />\n                The sign() method checks whether a number is negative, positive\n                or zero.\n                <li>If the number is positive, this method returns 1.</li>\n                <li>If the number is negative, it returns -1.</li>\n                <li>If the number is zero, it returns 0.</li>\n                <li>\n                  <b>sqrt(): </b>Return the square root of a number.\n                </li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={dataTypes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>5. Numbers formate</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={decimal}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>6. Random Number</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={random}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>7. DecimalToBinary</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={decimalToBinary}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>8. DecimalToOctal</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={DecimalToOctal}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>9. DecimalToHex</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={DecimalToHex}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>10. String</h3>\n              <ul>\n                <li>String() converts the value of an object to a string.</li>\n                <li>\n                  String() returns the same value as toString() of the\n                  individual objects.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={stringFun}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>There are 2 ways to create string in JavaScript</b>\n              <br />\n              1.By string literal\n              <br />\n              var str = \"Please locate where 'locate' occurs!\";\n              <br />\n              <br />\n              2.By string object\n              <br />\n              var str2 = new String(\"string literal\");\n              <br />\n              <br />\n              <ul>\n                <li>\n                  <b>charAt:</b> It provides the char value present at the\n                  specified index.\n                </li>\n                <li>\n                  <b>charCodeAt():</b> It provides the Unicode value of a\n                  character present at the specified index.\n                </li>\n                <li>\n                  <b>concat():</b> It provides a combination of two or more\n                  strings.\n                </li>\n                <li>\n                  <b>indexOf():</b> It provides the position of a char value\n                  present in the given string.\n                </li>\n                <li>\n                  <b>lastIndexOf():</b> It provides the position of a char value\n                  present in the given string by searching a character from the\n                  last position.\n                </li>\n                str.lastIndexOf(\"locate\", 15)\n                <li>\n                  <b>search():</b> It searches a specified regular expression in\n                  a given string and returns its position if a match occurs.\n                </li>\n                <br />\n                <br />\n                <b>\n                  indexOf() and search() accept the same arguments, and return\n                  the same value. But they has differences as:\n                </b>\n                <ul>\n                  <li>\n                    The search() method cannot take a second start position\n                    argument.\n                  </li>\n                  <li>The indexOf() method cannot take regular expressions.</li>\n                </ul>\n                <br />\n                <li>\n                  <b>match():</b> It searches a specified regular expression in\n                  a given string and returns that regular expression if a match\n                  occurs, as an Array object.\n                </li>\n                <li>\n                  <b>replace():</b> It replaces a given string with the\n                  specified replacement.\n                </li>\n                <li>\n                  <b>substr():</b> It is used to fetch the part of the given\n                  string on the basis of the specified starting position and\n                  length.\n                </li>\n                <li>\n                  <b>substring(): </b>\n                  <ul>\n                    <li>\n                      substring() is similar to slice(), but substring() cannot\n                      accept negative indexes.\n                    </li>\n                    <li>\n                      It is used to fetch the part of the given string on the\n                      basis of the specified index.\n                    </li>\n                  </ul>\n                </li>\n                <br />\n                <li>\n                  <b>valueOf():</b> It provides the primitive value of string\n                  object.\n                </li>\n                <li>\n                  <b>trim():</b> It trims the white space from the left and\n                  right side of the string.\n                </li>\n                str.trim()\n                <br />\n                <br />\n                <li>\n                  <b>str.length: </b>\n                </li>\n                <li>\n                  <b>str.includes(\"Please\"): </b>\n                </li>\n                <li>\n                  <b>str.startsWith(\"occurs\"): </b>\n                </li>\n                <li>\n                  <b>str.endsWith(\"locate\"): </b>\n                </li>\n                <li>\n                  <b>str.slice(7, 13): </b>\n                </li>\n                <li>\n                  <b>str.toUpperCase(): </b>\n                </li>\n                <li>\n                  <b>str.toLowerCase(): </b>\n                </li>\n                <li>\n                  <b>Property Access: </b>str[0]\n                </li>\n                <li>\n                  <b>\n                    String can be converted to an array with the split() method:{\" \"}\n                  </b>\n                  str.split(\" \")\n                </li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={trim}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>11. String Interpolation</h3>\n              <ul>\n                <li>\n                  It allows injecting variables, function calls, arithmetic\n                  expressions directly into a string.\n                </li>\n                <li>\n                  In JavaScript, the template literals and $ Curly braces\n                  expression as placeholders perform the string interpolation.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={interpolation}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>13. Fetch javaScript</h3>\n              It copies the part of the given array with its own elements and\n              returns the modified array.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={copyWithin}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(Arrays);\n"]},"metadata":{},"sourceType":"module"}