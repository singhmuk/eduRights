{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/angularjsd/deepAngularjs/apiLogic3.js\";\nimport React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\nconst titles = {\n  backgroundColor: \"#F0F8FF\",\n  padding: \"1px\",\n  fontSize: \"16px\"\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst choose = `\n//html\n<button (click)=\"onClick()\">Click me</button>\n<div #myButton>Selected element</div>\n\n\nimport { Component, ViewChild, ElementRef } from '@angular/core';\nexport class AppComponent {\n  @ViewChild('myButton') myElement!: ElementRef;\n\n  onClick() {\n    console.log(this.myElement.nativeElement);\n  }\n}`.trim();\nconst ngZone = `\n//html\n<p>Value: {{ value }}</p>\n\n\nimport { Component, NgZone } from '@angular/core';\nexport class MyComponent {\n  value: string;\n\n  constructor(private zone: NgZone) {\n    // Listen for changes to the model data outside the NgZone\n    someExternalService.onDataChanged((newValue) => {\n      // Update the model data inside the NgZone\n      this.zone.run(() => {\n        this.value = newValue;\n      });\n    });\n  }\n}`.trim();\nconst cookies = `\n// Set a cookie\nthis.cookieService.set('myCookie', 'myValue');\n\n// Get a cookie\nconst myCookieValue = this.cookieService.get('myCookie');\n\n// Clear a cookie\nthis.cookieService.delete('myCookie');`.trim();\nconst contentPro = `\n//html\nName\n<ng-content></ng-content>\nexport class ChildCompo {}\n\n\n//app.component.ts\n@Component({\n  selector: 'app-root',\n  template: '\n    <child>Mukesh</child>\n    <child>Rakesh</child>\n    <child>Nitesh</child>\n  ',\n})\nexport class AppComponent {}\n`.trim();\n\nclass Logic3 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"1. How do you choose an element from a component template\"), \"To create a template reference variable, you can add the # symbol followed by a name to the element you want to select.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), \"With the help of the ViewChild decorator can get a reference to the element in the component class.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: choose,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"2. What happens when you use the script tag within a template.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"If you include a script tag within a template, the content of the tag is treated as text and displayed in the template as is. It is not executed as JavaScript code.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"This is because Angular's built-in security system, called \\\"Sanitization\\\", is designed to protect against Cross-Site Scripting (XSS) attacks by removing potentially dangerous code from the HTML before it is rendered in the browser.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"To include a script in an Angular application, you should use the Angular CLI to install and manage external dependencies or create a custom Angular service to handle dynamic script loading.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"3. How will you update the view if your model data is updated outside the 'Zone'.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"In Angular, the NgZone service is responsible for running change detection and updating the view when model data changes. However, if model data is updated outside the NgZone, Angular may not be aware of the changes and may not update the view as expected.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"To update the view if your model data is updated outside the NgZone, you can use the zone.run() method to execute a function inside the NgZone.\", \" \")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: ngZone,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), \"we're using the someExternalService to listen for changes to the model data outside the NgZone. When the data changes, we're using the zone.run() method to update the model data inside the NgZone, which triggers change detection and updates the view.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"4. How will you set, get, and clear cookies in Angular.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"You can use the ngx-cookie-service library to set, get, and clear cookies. This library provides an easy-to-use API for working with cookies in Angular.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"Now, you can use the CookieService to set, get, and clear cookies:\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: cookies,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"5. Content Projection\"), \"Content Projection in Angular is a technique for passing content from a parent component to its child components via the component template.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: contentPro,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Logic3);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/deepAngularjs/apiLogic3.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","choose","trim","ngZone","cookies","contentPro","Logic3","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst choose = `\n//html\n<button (click)=\"onClick()\">Click me</button>\n<div #myButton>Selected element</div>\n\n\nimport { Component, ViewChild, ElementRef } from '@angular/core';\nexport class AppComponent {\n  @ViewChild('myButton') myElement!: ElementRef;\n\n  onClick() {\n    console.log(this.myElement.nativeElement);\n  }\n}`.trim();\n\nconst ngZone = `\n//html\n<p>Value: {{ value }}</p>\n\n\nimport { Component, NgZone } from '@angular/core';\nexport class MyComponent {\n  value: string;\n\n  constructor(private zone: NgZone) {\n    // Listen for changes to the model data outside the NgZone\n    someExternalService.onDataChanged((newValue) => {\n      // Update the model data inside the NgZone\n      this.zone.run(() => {\n        this.value = newValue;\n      });\n    });\n  }\n}`.trim();\n\nconst cookies = `\n// Set a cookie\nthis.cookieService.set('myCookie', 'myValue');\n\n// Get a cookie\nconst myCookieValue = this.cookieService.get('myCookie');\n\n// Clear a cookie\nthis.cookieService.delete('myCookie');`.trim();\n\nconst contentPro = `\n//html\nName\n<ng-content></ng-content>\nexport class ChildCompo {}\n\n\n//app.component.ts\n@Component({\n  selector: 'app-root',\n  template: '\n    <child>Mukesh</child>\n    <child>Rakesh</child>\n    <child>Nitesh</child>\n  ',\n})\nexport class AppComponent {}\n`.trim();\n\nclass Logic3 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. How do you choose an element from a component template</h3>\n              To create a template reference variable, you can add the # symbol\n              followed by a name to the element you want to select.\n              <br />\n              <br />\n              With the help of the ViewChild decorator can get a reference to\n              the element in the component class.\n              <div style={titles}>\n                <PrismCode\n                  code={choose}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                2. What happens when you use the script tag within a template.\n              </h3>\n              <ul>\n                <li>\n                  If you include a script tag within a template, the content of\n                  the tag is treated as text and displayed in the template as\n                  is. It is not executed as JavaScript code.\n                </li>\n                <br />\n                <li>\n                  This is because Angular's built-in security system, called\n                  \"Sanitization\", is designed to protect against Cross-Site\n                  Scripting (XSS) attacks by removing potentially dangerous code\n                  from the HTML before it is rendered in the browser.\n                </li>\n                <br />\n                <li>\n                  To include a script in an Angular application, you should use\n                  the Angular CLI to install and manage external dependencies or\n                  create a custom Angular service to handle dynamic script\n                  loading.\n                </li>\n              </ul>\n              <br />\n              <h3>\n                3. How will you update the view if your model data is updated\n                outside the 'Zone'.\n              </h3>\n              <ul>\n                <li>\n                  In Angular, the NgZone service is responsible for running\n                  change detection and updating the view when model data\n                  changes. However, if model data is updated outside the NgZone,\n                  Angular may not be aware of the changes and may not update the\n                  view as expected.\n                </li>\n                <br />\n                <li>\n                  To update the view if your model data is updated outside the\n                  NgZone, you can use the zone.run() method to execute a\n                  function inside the NgZone.{\" \"}\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={ngZone}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              we're using the someExternalService to listen for changes to the\n              model data outside the NgZone. When the data changes, we're using\n              the zone.run() method to update the model data inside the NgZone,\n              which triggers change detection and updates the view.\n              <br />\n              <br />\n              <h3>4. How will you set, get, and clear cookies in Angular.</h3>\n              <ul>\n                <li>\n                  You can use the ngx-cookie-service library to set, get, and\n                  clear cookies. This library provides an easy-to-use API for\n                  working with cookies in Angular.\n                </li>\n                <li>\n                  Now, you can use the CookieService to set, get, and clear\n                  cookies:\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={cookies}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>5. Content Projection</h3>\n              Content Projection in Angular is a technique for passing content\n              from a parent component to its child components via the component\n              template.\n              <div style={titles}>\n                <PrismCode\n                  code={contentPro}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(Logic3);\n"]},"metadata":{},"sourceType":"module"}