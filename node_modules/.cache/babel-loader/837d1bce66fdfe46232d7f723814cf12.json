{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var objects=\"\\nclass Test:\\n    x=10                                                                //static member varriable\\n    def __init__(self,a,b):\\n        self.a=a\\n        self.b=b\\n    def show(self):\\n        print(self.a, self.b)\\n\\nprint(Test.x)                                                           //Static object\\nobj = Test(3,4)                                   //Instance object, After creating ins obj, Automatically call __init__\\nobj.show()\".trim();var sorts=\"\\n#1\\nl=(4,3,5,6,8,0,1,2)                                                               \\nprint(sorted(l))\\n\\n\\n#2\\nl=[4,3,5,6,8,0,1,2]                                                             \\nprint(l.sort())\\n\".trim();var managed=\"\\nclass Items:\\n    a=10                                                                  # Static member variables\\n    def __init__(self):\\n        self.a=1                                                          # InStance member variable\\n        y=4                                                               # Local variable\\n        Items.b=6                                                         # Static variable\\n\\n    @staticmethod\\n    def f2():\\n        Items.d=8                                                         #Static variable\\n\\n    @classmethod\\n    def f3(cls):\\n        cls.e=1                                                           #Static variable\\n        Items.f=10                                                        #Static variable\\n\\nItems.g=11                                                                #Static variable\\n\".trim();var classeses=\"\\nclass Person:\\n  def __init__(self, name, age):\\n    self.name = name\\n    self.age = age\\n\\np1 = Person(\\\"John\\\", 36)\\n\\nprint(p1.name)\\nprint(p1.age)\\n\\n\\n#2\\nclass Dog:\\n    attr1 = \\\"mammal\\\"\\n    attr2 = \\\"dog\\\"\\n\\n    def fun(self):\\n        print(\\\"I'm a\\\", self.attr1)\\n        print(\\\"I'm a\\\", self.attr2)\\n\\nRodger = Dog()\\n\\nprint(Rodger.attr1)\\nRodger.fun()\".trim();var self=\"class Rectangle:\\ndef __init__(self, length, breadth, unit_cost=0):\\n    self.length = length\\n    self.breadth = breadth\\n    self.unit_cost = unit_cost\\n    \\ndef get_area(self):\\n    return self.length * self.breadth\\n    \\ndef calculate_cost(self):\\n    area = self.get_area()\\n    return area * self.unit_cost\\n\\nr = Rectangle(160, 120, 2000)\\nprint(\\\"%s sq units\\\" % (r.get_area()))\\n\".trim();var initMethod=\"\\nclass Person:\\n\\tdef __init__(self, name):                                        \\n\\t\\tself.name = name\\n\\n\\tdef say_hi(self):\\n\\t\\tprint('Hello, my name is', self.name)\\n\\np = Person('Nikhil')\\np.say_hi()\".trim();var Instance=\"\\nclass Dog:\\n    animal = 'dog'\\n\\n    def __init__(self, breed, color):\\n        self.breed = breed                                                    # Instance Variable\\n        self.color = color\\n\\n\\nRodger = Dog(\\\"Pug\\\", \\\"brown\\\")\\nBuzo = Dog(\\\"Bulldog\\\", \\\"black\\\")\\n\\nprint('Rodger is a', Rodger.animal)\\nprint('Breed: ', Rodger.breed)\\n\\nprint(Dog.animal)\".trim();var staticVariables=\"\\nclass CSStudent:\\n\\tstream = 'cse'\\n\\tdef __init__(self,name,roll):\\n\\t\\tself.name = name\\t\\t                                                        \\n\\t\\tself.roll = roll\\t\\t                                                        \\n\\na = CSStudent('Geek', 1)\\nb = CSStudent('Nerd', 2)\\n\\nprint(a.stream)                                                               \\nprint(b.stream)                                                               \\nprint(CSStudent.stream)                                       # Class variables can be accessed using class name also\\n\\na.stream = 'ece'\\nprint(a.stream)                                                                   # prints 'ece'\\nprint(b.stream)                                                                   # prints 'cse'\\n\\n  \\n# To change the stream for all instances of the class we can change it directly from the class\\nCSStudent.stream = 'mech'\\n\\nprint(a.stream)                                                                   # prints 'mech'\\nprint(b.stream)                                                                   # prints 'mech'\\n\".trim();var staticmethod=\"\\nfrom datetime import date\\n\\nclass Person:\\n    def __init__(self, name, age):\\n        self.name = name\\n        self.age = age\\n\\n    @classmethod\\n    def fromBirthYear(cls, name, year):\\n        return cls(name, date.today().year - year)\\n\\n    \\n    @staticmethod                                                     # Static method to check if a Person is adult or not.\\n    def isAdult(age):\\n        return age > 18\\n\\nperson1 = Person('mayank', 21)\\nperson2 = Person.fromBirthYear('mayank', 1996)\\n\\nprint(person1.age)\\nprint(Person.isAdult(22))\".trim();var constructors=\"\\nclass GeekforGeeks:\\n\\tdef __init__(self):                                                                 # default constructor\\n\\t\\tself.geek = \\\"GeekforGeeks\\\"\\n\\n\\tdef print_Geek(self):\\n\\t\\tprint(self.geek)\\n\\nobj = GeekforGeeks()\\nobj.print_Geek()\\n\\n\\n#2 \\nclass Addition:\\n    first = 0\\n    second = 0\\n    answer = 0\\n    \\n    def __init__(self, f, s):                                                           # parameterized constructor\\n        self.first = f\\n        self.second = s\\n\\n    def display(self):\\n        print(\\\"First number = \\\" + str(self.first))\\n        print(\\\"Second number = \\\" + str(self.second))\\n        print(\\\"Addition of two numbers = \\\" + str(self.answer))\\n\\n    def calculate(self):\\n        self.answer = self.first + self.second\\n\\nobj = Addition(1000, 2000)\\nobj.calculate()\\nobj.display()\".trim();var destructors=\"\\nclass Employee:\\n\\tdef __init__(self):\\n\\t\\tprint('Employee created.')\\n\\n\\tdef __del__(self):                                                            \\n\\t\\tprint('Destructor called, Employee deleted.')\\n\\nobj = Employee()\\ndel obj\".trim();var encapsulations=\"\\nclass Computer:\\n\\n    def __init__(self):\\n        self.__maxprice = 900\\n\\n    def sell(self):\\n        print(\\\"Selling Price: {}\\\".format(self.__maxprice))\\n\\n    def setMaxPrice(self, price):\\n        self.__maxprice = price\\n\\nc = Computer()\\nc.sell()\\n\\nc.__maxprice = 1000\\nc.sell()\\n\\nc.setMaxPrice(1000)                                                                 # using setter function\\nc.sell()\".trim();var inherritance=\"\\nclass A:\\n    def features(self):\\n        print('features1')\\n\\n    def features2(self):\\n        print('features2')\\n\\nclass B:\\n    def features3(self):\\n        print('features3')\\n    def features4(self):\\n        print('features4')\\n\\nclass C(A,B):\\n    def features4(self):\\n        print('features5')\\n\\na1=A()\\n# a1.features()\\n# a1.features2()\\n\\nb1=B()\\nc1=C()\\nc1.features()\\n\\n\\n#2\\nclass Person(object):\\n    def __init__(self, name):\\n        self.name = name\\n\\n    def getName(self):\\n        return self.name\\n\\n    def isEmployee(self):\\n        return False\\n\\n\\nclass Employee(Person):\\n    def isEmployee(self):\\n        return True\\n\\nemp = Person(\\\"Geek1\\\")\\nprint(emp.getName(), emp.isEmployee())\\n\\nemp = Employee(\\\"Geek2\\\")\\nprint(emp.getName(), emp.isEmployee())\".trim();var multipleInheritance=\"\\nclass Base1(object):\\n    def __init__(self):\\n        self.str1 = \\\"Geek1\\\"\\n        print(\\\"Base1\\\")\\n\\nclass Base2(object):\\n    def __init__(self):\\n        self.str2 = \\\"Geek2\\\"\\n        print(\\\"Base2\\\")\\n\\nclass Derived(Base1, Base2):\\n    def __init__(self):\\n        Base1.__init__(self)\\n        Base2.__init__(self)\\n        print(\\\"Derived\\\")\\n\\n    def printStrs(self):\\n        print(self.str1, self.str2)\\n\\nob = Derived()\\nob.printStrs()\".trim();var multilevelInheritance=\"\\nclass Base(object):\\n\\n    def __init__(self, name):\\n        self.name = name\\n    def getName(self):\\n        return self.name\\n\\n\\nclass Child(Base):\\n    def __init__(self, name, age):\\n        Base.__init__(self, name)\\n        self.age = age\\n    def getAge(self):\\n        return self.age\\n\\n\\nclass GrandChild(Child):\\n    def __init__(self, name, age, address):\\n        Child.__init__(self, name, age)\\n        self.address = address\\n\\n    def getAddress(self):\\n        return self.address\\n\\ng = GrandChild(\\\"Geek1\\\", 23, \\\"Noida\\\")\\nprint(g.getName(), g.getAge(), g.getAddress())\".trim();var privateMembers=\"\\nclass C(object):\\n\\tdef __init__(self):\\n\\t\\tself.c = 21\\n\\t\\tself.d = 42\\n    \\nclass D(C):\\n\\tdef __init__(self):\\n\\t\\tself.e = 84\\n\\t\\tC.__init__(self)\\nobject1 = D()\\n\\nprint(object1.d)\".trim();var overriding_methods=\"\\nclass Animal:\\n    multicellular = True\\n    eukaryotic = True\\n\\n    def breathe(self):\\n        print(\\\"I breathe oxygen.\\\")\\n\\n    def feed(self):\\n        print(\\\"I eat food.\\\")\\n\\n\\nclass Herbivorous(Animal):\\n\\n    def feed(self):\\n        print(\\\"I eat only plants. I am vegetarian.\\\")\\n\\n\\nherbi = Herbivorous()\\nherbi.feed()\\nherbi.breathe()\".trim();var polymorphism=\"\\ndef add(x, y, z = 0):\\n\\treturn x + y+z\\n\\nprint(add(2, 3))\\nprint(add(2, 3, 4))\\n\\n\\n#2\\nclass India():\\n\\tdef capital(self):\\n\\t\\tprint(\\\"New Delhi\\\")\\n\\n\\tdef language(self):\\n\\t\\tprint(\\\"Hindi\\\")\\n\\n\\tdef type(self):\\n\\t\\tprint(\\\"India\\\")\\n\\nclass USA():\\n\\tdef capital(self):\\n\\t\\tprint(\\\"Washington\\\")\\n\\n\\tdef language(self):\\n\\t\\tprint(\\\"English\\\")\\n\\n\\tdef type(self):\\n\\t\\tprint(\\\"USA\\\")\\n\\nobj_ind = India()\\nobj_usa = USA()\\nfor country in (obj_ind, obj_usa):\\n\\tcountry.capital()\\n\\tcountry.language()\\n\\tcountry.type()\\n\\n\\n\\n\\n#3\\nclass Parrot:\\n    def fly(self):\\n        print(\\\"Parrot can fly\\\")\\n\\n    def swim(self):\\n        print(\\\"Parrot can't swim\\\")\\n\\n\\nclass Penguin:\\n    def fly(self):\\n        print(\\\"Penguin can't fly\\\")\\n\\n    def swim(self):\\n        print(\\\"Penguin can swim\\\")\\n\\n\\ndef flying_test(bird):                                                              # common interface\\n    bird.fly()\\n\\nblu = Parrot()                                                                      # instantiate objects\\npeggy = Penguin()\\n\\nflying_test(blu)                                                                    # passing the object\\nflying_test(peggy)\\n\".trim();var OopsPyton=/*#__PURE__*/function(_Component){_inherits(OopsPyton,_Component);function OopsPyton(){_classCallCheck(this,OopsPyton);return _possibleConstructorReturn(this,_getPrototypeOf(OopsPyton).apply(this,arguments));}_createClass(OopsPyton,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Objects\"),\"We can create one class object and many instance object. Class object has static member varriables.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:objects,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Difference between sorted and sort function.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"sort(): \"),\"Alwase apply on list and return None. sort() do changes on original list.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"sorted(): \"),\"Alwase return list even pass tuples/ string.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:sorts,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"How memory managed in Python\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Stack Memory: \"),\"Have refrences\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Private Heap Space: \"),\"Have Id of declared values, Objects stored here.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"How to create static member variables in class\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Python don't have static keyword.\"),React.createElement(\"li\",null,\"Static variable get mempry inside class objects.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:managed,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"classes\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"The __init__() function is called automatically every time the class is being used to  create a new object.\"),React.createElement(\"li\",null,\"Create a class named Person, use the __init__() function to assign values for name and age.\"),React.createElement(\"li\",null,\"The self parameter is a reference to the current instance of the class, and is used to access variables that belong to the class.\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"The self\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Class methods must have an extra first parameter in the method definition. We do not give a value for this parameter when we call the method, Python provides it.\"),React.createElement(\"li\",null,\"If we have a method that takes no arguments, then we still to have one argument.\"),React.createElement(\"li\",null,\"When we call a method of this object as myobject.method(arg1, arg2), this is automatically converted by Python into MyClass.method(myobject, arg1, arg2) \\u2013 this is all the special self is about.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:classeses,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"What is __init__  & self in Python?\"),React.createElement(\"br\",null),\"'self' is used to represent the instance of a class. By using the \\\"self\\\" keyword we access the attributes and methods of the class in python.\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"__init__ method: \"),\"This method is called when an object is created from a class and it allows the class to initialize the attributes of the class.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:self,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"h3\",null,\"__init__ method\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:initMethod,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Class and Instance Variables\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Instance variables: \")),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Instance variables are for data, unique to each instance.\"),React.createElement(\"li\",null,\"Instance variables are variables whose value is assigned inside a constructor/ method with self.\"),React.createElement(\"li\",null,\"Defining instance variable using a constructor. \")),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"class variables: \")),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"class variables are for attributes and methods shared by all instances of the class.\"),React.createElement(\"li\",null,\"class variables are variables whose value is assigned in the class.\"))),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Instance,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Class or Static Variables\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"All variables which are assigned a value in the class declaration are class variables.\"),React.createElement(\"li\",null,\"And variables that are assigned values inside methods are instance variables.\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"class method vs static method\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"A static method does not receive an implicit first argument.\"),React.createElement(\"li\",null,\"A static method is also a method which is bound to the class and not the object of the class.\"),React.createElement(\"li\",null,\"A static method can\\u2019t access/ modify class state.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:staticVariables,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"How to define a class method and a static method?\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:staticmethod,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Constructors\"),\"Constructors are generally used for instantiating an object.The task of constructors is to initialize(assign values) to the data members of the class when an object of class is created.In Python the __init__() method is called the constructor and is always called when an object is created.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"default constructor :\"),\"The default constructor is simple constructor which doesn\\u2019t accept any arguments.It\\u2019s definition has only one argument which is a reference to the instance being constructed.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"parameterized constructor :\"),\"The parameterized constructor take its first argument as a reference to the instance being constructed known as self and the rest of the arguments are provided by the programmer.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:constructors,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Destructors\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Destructors are called when an object gets destroyed. In Python, destructors are not needed because Python has a garbage collector that handles memory management automatically.\"),React.createElement(\"li\",null,\"The \",React.createElement(\"b\",null,\"__del__()\"),\" method is called when all references to the object have been deleted.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:destructors,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"b\",null,\"Note :\"),\"The destructor was called after the program ended or when all the references to object are deleted.\",React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Encapsulation\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:encapsulations,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Inherritance\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Single inheritance:  \"),\"A class inherits only one superclass\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Multiple inheritance: \"),\"When a class inherits multiple superclasses\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Multilevel inheritance: \"),\"When a class inherits a superclass and then another class inherits this derived class forming a \\u2018parent, child, and grandchild\\u2019 class structure\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Hierarchical inheritance: \"),\"When one superclass is inherited by multiple derived classes\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:inherritance,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Multiple inheritance\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:multipleInheritance,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Multilevel inheritance\"),\"When we have a child and grandchild relationship.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:multilevelInheritance,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Hierarchical inheritance :\"),\"Hierarchical inheritance More than one derived classes are created from a single base.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Hybrid inheritance :\"),\"This form combines more than one form of inheritance. Basically, it is a blend of more than one type of inheritance.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Private members of parent class \"),\"We can make an instance variable by adding double underscores before its name.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:privateMembers,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"b\",null,\"Note :\"),\"Since \\u2018d\\u2019 is made private by those underscores, it is not available to the child class \\u2018D\\u2019 and hence the error.\",React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Overriding Methods\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:overriding_methods,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Polymorphism\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:polymorphism,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return OopsPyton;}(Component);export default withStyles(styles)(OopsPyton);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/pythone/deeppy/oops_.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","objects","trim","sorts","managed","classeses","self","initMethod","Instance","staticVariables","staticmethod","constructors","destructors","encapsulations","inherritance","multipleInheritance","multilevelInheritance","privateMembers","overriding_methods","polymorphism","OopsPyton","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst objects = `\nclass Test:\n    x=10                                                                //static member varriable\n    def __init__(self,a,b):\n        self.a=a\n        self.b=b\n    def show(self):\n        print(self.a, self.b)\n\nprint(Test.x)                                                           //Static object\nobj = Test(3,4)                                   //Instance object, After creating ins obj, Automatically call __init__\nobj.show()`.trim();\n\nconst sorts = `\n#1\nl=(4,3,5,6,8,0,1,2)                                                               \nprint(sorted(l))\n\n\n#2\nl=[4,3,5,6,8,0,1,2]                                                             \nprint(l.sort())\n`.trim();\n\nconst managed = `\nclass Items:\n    a=10                                                                  # Static member variables\n    def __init__(self):\n        self.a=1                                                          # InStance member variable\n        y=4                                                               # Local variable\n        Items.b=6                                                         # Static variable\n\n    @staticmethod\n    def f2():\n        Items.d=8                                                         #Static variable\n\n    @classmethod\n    def f3(cls):\n        cls.e=1                                                           #Static variable\n        Items.f=10                                                        #Static variable\n\nItems.g=11                                                                #Static variable\n`.trim();\n\nconst classeses = `\nclass Person:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\n\np1 = Person(\"John\", 36)\n\nprint(p1.name)\nprint(p1.age)\n\n\n#2\nclass Dog:\n    attr1 = \"mammal\"\n    attr2 = \"dog\"\n\n    def fun(self):\n        print(\"I'm a\", self.attr1)\n        print(\"I'm a\", self.attr2)\n\nRodger = Dog()\n\nprint(Rodger.attr1)\nRodger.fun()`.trim();\n\n\nconst self = `class Rectangle:\ndef __init__(self, length, breadth, unit_cost=0):\n    self.length = length\n    self.breadth = breadth\n    self.unit_cost = unit_cost\n    \ndef get_area(self):\n    return self.length * self.breadth\n    \ndef calculate_cost(self):\n    area = self.get_area()\n    return area * self.unit_cost\n\nr = Rectangle(160, 120, 2000)\nprint(\"%s sq units\" % (r.get_area()))\n`.trim()\n\nconst initMethod = `\nclass Person:\n\tdef __init__(self, name):                                        \n\t\tself.name = name\n\n\tdef say_hi(self):\n\t\tprint('Hello, my name is', self.name)\n\np = Person('Nikhil')\np.say_hi()`.trim();\n\nconst Instance = `\nclass Dog:\n    animal = 'dog'\n\n    def __init__(self, breed, color):\n        self.breed = breed                                                    # Instance Variable\n        self.color = color\n\n\nRodger = Dog(\"Pug\", \"brown\")\nBuzo = Dog(\"Bulldog\", \"black\")\n\nprint('Rodger is a', Rodger.animal)\nprint('Breed: ', Rodger.breed)\n\nprint(Dog.animal)`.trim();\n\nconst staticVariables = `\nclass CSStudent:\n\tstream = 'cse'\n\tdef __init__(self,name,roll):\n\t\tself.name = name\t\t                                                        \n\t\tself.roll = roll\t\t                                                        \n\na = CSStudent('Geek', 1)\nb = CSStudent('Nerd', 2)\n\nprint(a.stream)                                                               \nprint(b.stream)                                                               \nprint(CSStudent.stream)                                       # Class variables can be accessed using class name also\n\na.stream = 'ece'\nprint(a.stream)                                                                   # prints 'ece'\nprint(b.stream)                                                                   # prints 'cse'\n\n  \n# To change the stream for all instances of the class we can change it directly from the class\nCSStudent.stream = 'mech'\n\nprint(a.stream)                                                                   # prints 'mech'\nprint(b.stream)                                                                   # prints 'mech'\n`.trim();\n\nconst staticmethod = `\nfrom datetime import date\n\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    @classmethod\n    def fromBirthYear(cls, name, year):\n        return cls(name, date.today().year - year)\n\n    \n    @staticmethod                                                     # Static method to check if a Person is adult or not.\n    def isAdult(age):\n        return age > 18\n\nperson1 = Person('mayank', 21)\nperson2 = Person.fromBirthYear('mayank', 1996)\n\nprint(person1.age)\nprint(Person.isAdult(22))`.trim();\n\nconst constructors = `\nclass GeekforGeeks:\n\tdef __init__(self):                                                                 # default constructor\n\t\tself.geek = \"GeekforGeeks\"\n\n\tdef print_Geek(self):\n\t\tprint(self.geek)\n\nobj = GeekforGeeks()\nobj.print_Geek()\n\n\n#2 \nclass Addition:\n    first = 0\n    second = 0\n    answer = 0\n    \n    def __init__(self, f, s):                                                           # parameterized constructor\n        self.first = f\n        self.second = s\n\n    def display(self):\n        print(\"First number = \" + str(self.first))\n        print(\"Second number = \" + str(self.second))\n        print(\"Addition of two numbers = \" + str(self.answer))\n\n    def calculate(self):\n        self.answer = self.first + self.second\n\nobj = Addition(1000, 2000)\nobj.calculate()\nobj.display()`.trim();\n\nconst destructors = `\nclass Employee:\n\tdef __init__(self):\n\t\tprint('Employee created.')\n\n\tdef __del__(self):                                                            \n\t\tprint('Destructor called, Employee deleted.')\n\nobj = Employee()\ndel obj`.trim();\n\nconst encapsulations = `\nclass Computer:\n\n    def __init__(self):\n        self.__maxprice = 900\n\n    def sell(self):\n        print(\"Selling Price: {}\".format(self.__maxprice))\n\n    def setMaxPrice(self, price):\n        self.__maxprice = price\n\nc = Computer()\nc.sell()\n\nc.__maxprice = 1000\nc.sell()\n\nc.setMaxPrice(1000)                                                                 # using setter function\nc.sell()`.trim();\n\nconst inherritance = `\nclass A:\n    def features(self):\n        print('features1')\n\n    def features2(self):\n        print('features2')\n\nclass B:\n    def features3(self):\n        print('features3')\n    def features4(self):\n        print('features4')\n\nclass C(A,B):\n    def features4(self):\n        print('features5')\n\na1=A()\n# a1.features()\n# a1.features2()\n\nb1=B()\nc1=C()\nc1.features()\n\n\n#2\nclass Person(object):\n    def __init__(self, name):\n        self.name = name\n\n    def getName(self):\n        return self.name\n\n    def isEmployee(self):\n        return False\n\n\nclass Employee(Person):\n    def isEmployee(self):\n        return True\n\nemp = Person(\"Geek1\")\nprint(emp.getName(), emp.isEmployee())\n\nemp = Employee(\"Geek2\")\nprint(emp.getName(), emp.isEmployee())`.trim();\n\nconst multipleInheritance = `\nclass Base1(object):\n    def __init__(self):\n        self.str1 = \"Geek1\"\n        print(\"Base1\")\n\nclass Base2(object):\n    def __init__(self):\n        self.str2 = \"Geek2\"\n        print(\"Base2\")\n\nclass Derived(Base1, Base2):\n    def __init__(self):\n        Base1.__init__(self)\n        Base2.__init__(self)\n        print(\"Derived\")\n\n    def printStrs(self):\n        print(self.str1, self.str2)\n\nob = Derived()\nob.printStrs()`.trim();\n\nconst multilevelInheritance = `\nclass Base(object):\n\n    def __init__(self, name):\n        self.name = name\n    def getName(self):\n        return self.name\n\n\nclass Child(Base):\n    def __init__(self, name, age):\n        Base.__init__(self, name)\n        self.age = age\n    def getAge(self):\n        return self.age\n\n\nclass GrandChild(Child):\n    def __init__(self, name, age, address):\n        Child.__init__(self, name, age)\n        self.address = address\n\n    def getAddress(self):\n        return self.address\n\ng = GrandChild(\"Geek1\", 23, \"Noida\")\nprint(g.getName(), g.getAge(), g.getAddress())`.trim();\n\nconst privateMembers = `\nclass C(object):\n\tdef __init__(self):\n\t\tself.c = 21\n\t\tself.d = 42\n    \nclass D(C):\n\tdef __init__(self):\n\t\tself.e = 84\n\t\tC.__init__(self)\nobject1 = D()\n\nprint(object1.d)`.trim();\n\nconst overriding_methods = `\nclass Animal:\n    multicellular = True\n    eukaryotic = True\n\n    def breathe(self):\n        print(\"I breathe oxygen.\")\n\n    def feed(self):\n        print(\"I eat food.\")\n\n\nclass Herbivorous(Animal):\n\n    def feed(self):\n        print(\"I eat only plants. I am vegetarian.\")\n\n\nherbi = Herbivorous()\nherbi.feed()\nherbi.breathe()`.trim();\n\nconst polymorphism = `\ndef add(x, y, z = 0):\n\treturn x + y+z\n\nprint(add(2, 3))\nprint(add(2, 3, 4))\n\n\n#2\nclass India():\n\tdef capital(self):\n\t\tprint(\"New Delhi\")\n\n\tdef language(self):\n\t\tprint(\"Hindi\")\n\n\tdef type(self):\n\t\tprint(\"India\")\n\nclass USA():\n\tdef capital(self):\n\t\tprint(\"Washington\")\n\n\tdef language(self):\n\t\tprint(\"English\")\n\n\tdef type(self):\n\t\tprint(\"USA\")\n\nobj_ind = India()\nobj_usa = USA()\nfor country in (obj_ind, obj_usa):\n\tcountry.capital()\n\tcountry.language()\n\tcountry.type()\n\n\n\n\n#3\nclass Parrot:\n    def fly(self):\n        print(\"Parrot can fly\")\n\n    def swim(self):\n        print(\"Parrot can't swim\")\n\n\nclass Penguin:\n    def fly(self):\n        print(\"Penguin can't fly\")\n\n    def swim(self):\n        print(\"Penguin can swim\")\n\n\ndef flying_test(bird):                                                              # common interface\n    bird.fly()\n\nblu = Parrot()                                                                      # instantiate objects\npeggy = Penguin()\n\nflying_test(blu)                                                                    # passing the object\nflying_test(peggy)\n`.trim();\n\n\nclass OopsPyton extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Objects</h3>\n              We can create one class object and many instance object. Class object has static member varriables.\n\n              <div style={titles}>\n                <PrismCode\n                  code={objects}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Difference between sorted and sort function.</h3>\n              <ul>\n                <li><b>sort(): </b>Alwase apply on list and return None. sort() do changes on original list.</li>\n                <li><b>sorted(): </b>Alwase return list even pass tuples/ string.</li>\n              </ul>\n\n              <div style={titles}>\n                <PrismCode\n                  code={sorts}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>How memory managed in Python</h3>\n              <ul>\n                <li><b>Stack Memory: </b>Have refrences</li>\n                <li><b>Private Heap Space: </b>Have Id of declared values, Objects stored here.</li>\n              </ul>\n              <br />\n\n              <h3>How to create static member variables in class</h3>\n              <ul>\n                <li>Python don't have static keyword.</li>\n                <li>Static variable get mempry inside class objects.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={managed}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>classes</h3>\n              <ul>\n                <li>The __init__() function is called automatically every time the class is being used to  create a new object.</li>\n                <li>Create a class named Person, use the __init__() function to assign values for name and age.</li>\n                <li>The self parameter is a reference to the current instance of the class, and is used to access variables that belong to the class.</li>\n              </ul>\n              <br />\n              <b>The self</b>\n              <ul>\n                <li>Class methods must have an extra first parameter in the method definition. We do not give a value for this parameter when we call the method, Python provides it.</li>\n                <li>If we have a method that takes no arguments, then we still to have one argument.</li>\n                <li>When we call a method of this object as myobject.method(arg1, arg2), this is automatically converted by Python into MyClass.method(myobject, arg1, arg2) – this is all the special self is about.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={classeses}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <br />\n              <br />\n              <b>What is __init__  & self in Python?</b>\n              <br />\n              'self' is used to represent the instance of a class. By using the \"self\" keyword we access the attributes and methods of the class in python.\n              <br />\n              <b>__init__ method: </b>\n              This method is called when an object is created from a class and it allows the class to initialize the attributes of the class.\n              <div style={titles}>\n                <PrismCode\n                  code={self}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <h3>__init__ method</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={initMethod}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Class and Instance Variables</h3>\n              <ul>\n                <li><b>Instance variables: </b></li>\n                <ul>\n                  <li>Instance variables are for data, unique to each instance.</li>\n                  <li>Instance variables are variables whose value is assigned inside a constructor/ method with self.</li>\n                  <li>Defining instance variable using a constructor. </li>\n                </ul>\n                <br />\n\n                <li><b>class variables: </b></li>\n                <ul>\n                  <li>class variables are for attributes and methods shared by all instances of the class.</li>\n                  <li>class variables are variables whose value is assigned in the class.</li>\n                </ul>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={Instance}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Class or Static Variables</h3>\n              <ul>\n                <li>All variables which are assigned a value in the class declaration are class variables.</li>\n                <li>And variables that are assigned values inside methods are instance variables.</li>\n              </ul>\n              <br />\n\n              <b>class method vs static method</b>\n              <ul>\n                <li>A static method does not receive an implicit first argument.</li>\n                <li>A static method is also a method which is bound to the class and not the object of the class.</li>\n                <li>A static method can’t access/ modify class state.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={staticVariables}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>How to define a class method and a static method?</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={staticmethod}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Constructors</h3>\n              Constructors are generally used for instantiating an object.The task of constructors is to initialize(assign values) to the data members of the class when an object of class is created.In Python the __init__() method is called the constructor and is always called when an object is created.\n              <br />\n              <br />\n              <ul>\n                <li><b>default constructor :</b>The default constructor is simple constructor which doesn’t accept any arguments.It’s definition has only one argument which is a reference to the instance being constructed.</li>\n                <li><b>parameterized constructor :</b>The parameterized constructor take its first argument as a reference to the instance being constructed known as self and the rest of the arguments are provided by the programmer.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={constructors}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Destructors</h3>\n              <ul>\n                <li>Destructors are called when an object gets destroyed. In Python, destructors are not needed because Python has a garbage collector that handles memory management automatically.</li>\n                <li>The <b>__del__()</b> method is called when all references to the object have been deleted.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={destructors}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <b>Note :</b>The destructor was called after the program ended or when all the references to object are deleted.\n              <br />\n\n              <h3>Encapsulation</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={encapsulations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Inherritance</h3>\n              <ul>\n                <li><b>Single inheritance:  </b>A class inherits only one superclass</li>\n                <li><b>Multiple inheritance: </b>When a class inherits multiple superclasses</li>\n                <li><b>Multilevel inheritance: </b>When a class inherits a superclass and then another class inherits\n                  this derived class forming a ‘parent, child, and grandchild’ class structure</li>\n                <li><b>Hierarchical inheritance: </b>When one superclass is inherited by multiple derived classes</li>\n              </ul>\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={inherritance}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Multiple inheritance</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={multipleInheritance}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Multilevel inheritance</h3>\n              When we have a child and grandchild relationship.\n              <div style={titles}>\n                <PrismCode\n                  code={multilevelInheritance}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <ul>\n                <li><b>Hierarchical inheritance :</b>Hierarchical inheritance More than one derived classes are created from a single base.</li>\n                <li><b>Hybrid inheritance :</b>This form combines more than one form of inheritance. Basically, it is a blend of more than one type of inheritance.</li>\n              </ul>\n              <br />\n\n              <h3>Private members of parent class </h3>\n              We can make an instance variable by adding double underscores before its name.\n              <div style={titles}>\n                <PrismCode\n                  code={privateMembers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <b>Note :</b>Since ‘d’ is made private by those underscores, it is not available to the child class ‘D’ and hence the error.\n              <br />\n\n              <h3>Overriding Methods</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={overriding_methods}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Polymorphism</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={polymorphism}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(OopsPyton));\n"]},"metadata":{},"sourceType":"module"}