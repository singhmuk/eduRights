{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var assertion=\"\\n1.Using Angular Bracket <>\\nlet empCode: any = 111;\\nlet employeeCode = <number> empCode;\\nconsole.log(typeof(employeeCode));\\n\\n2.Using as keyword\\nlet empCode: any = 111;\\nlet employeeCode = empCode as number;\\nconsole.log(typeof(employeeCode));\\n\\n\\n//2\\nlet arr:string[] = new Array(\\\"JavaTpoint\\\", \\\"2300\\\", \\\"Java\\\", \\\"Abhishek\\\");\\nfunction display(arr_values:string[]) {\\n   for(let i = 0;i<arr_values.length;i++) {\\n      console.log(arr[i]);\\n   }\\n}\\n\\ndisplay(arr); \".trim();var modifier=\"\\n//Public\\nclass Student {  \\n    public studCode: number;  \\n    studName: string;  \\n}  \\n  \\nlet stud = new Student();  \\nstud.studCode = 101;  \\nstud.studName = \\\"Joe Root\\\";  \\n  \\nconsole.log(stud.studCode+ \\\" \\\"+stud.studName);  \\n\\n\\n//Private\\nclass Student {  \\npublic studCode: number;  \\nprivate studName: string;  \\n\\nconstructor(code: number, name: string){  \\nthis.studCode = code;  \\nthis.studName = name;  \\n}  \\n\\npublic display() {  \\nreturn ('My unique code: '$'{this.studCode}, my name: '$'{this.studName}.');  \\n    }  \\n}  \\n  \\nlet student: Student = new Student(1, \\\"JoeRoot\\\");  \\nconsole.log(student.display());  \\n\\n\\n//Protected\\nclass Student {  \\n    public studCode: number;  \\n    protected studName: string;  \\n    constructor(code: number, name: string){  \\n        this.studCode = code;  \\n        this.studName = name;  \\n        }  \\n}  \\nclass Person extends Student {  \\n    private department: string;  \\n  \\n    constructor(code: number, name: string, department: string) {  \\n        super(code, name);  \\n        this.department = department;  \\n    }  \\n    public getElevatorPitch() {  \\n        return ('My unique code: '$'{this.studCode}, my name: '$'{this.studName} \\n        and I am in '$'{this.department} Branch.');\\n    }\\n}\\nlet joeRoot: Person = new Person(1, \\\"JoeRoot\\\", \\\"CS\\\");\\nconsole.log(joeRoot.getElevatorPitch());\".trim();var accessor=\"\\n//getter\\nclass MyDrawing {\\n    length: number = 20;\\n    breadth: number = 15;\\n\\n    get rectangle() {\\n        return this.length * this.breadth;\\n    }\\n}\\nconsole.log(new MyDrawing().rectangle);\\n\\n\\n//setter\\nlet passcode = \\\"secret passcode\\\";\\n\\nclass Student {\\n    private _fullName: string;\\n\\n    get fullName(): string {\\n        return this._fullName;\\n    }\\n\\n    set fullName(newName: string) {\\n        if (passcode && passcode == \\\"secret passcode\\\") {\\n            this._fullName = newName;\\n        }\\n        else {\\n            console.log(\\\"Unauthorized update of student detail!\\\");\\n        }\\n    }\\n}\\n\\nlet stud = new Student();\\nstud.fullName = \\\"Virat Kohli\\\";\\nif (stud.fullName) {\\n    console.log(stud.fullName);\\n}\".trim();var sortArr=\"\\nclass App{\\n  arr:any;\\n  i:number;\\n  j:number;\\n  temp:any;\\n\\n  sortValue(){\\n      for(this.i=0;this.i<this.arr.length;this.i++){\\n          for(this.j=this.i;this.j<this.arr.length;this.j++){\\n              if(this.arr[this.i]>this.arr[this.j]){\\n                  this.temp=this.arr[this.i];\\n                  this.arr[this.i]=this.arr[this.j];\\n                  this.arr[this.j]=this.temp;\\n              }\\n          }\\n      }\\n      console.log(this.arr)\\n  }\\n}\\n\\n\\nconst obj=new App();\\nobj.arr=[5,3,1,9,0];\\nobj.sortValue();\\n\".trim();var missingVal=\"\\nclass App{\\n  i:number;\\n  arr:any=[0,1,3];\\n  result:number=0;\\n  exactSum:number;\\n  missingNum:number;\\n\\n  getSum(){\\n      this.exactSum = this.arr.reduce((a,b)=>a+b);\\n      \\n      for(this.i=0; this.i<=this.arr.length; this.i++){\\n          this.result += this.i;\\n      }\\n\\n      this.missingNum = this.result - this.exactSum;\\n      console.log(this.missingNum);\\n  }\\n}\\n\\nconst obj=new App();\\nobj.getSum();\\n\".trim();var palindroms=\"\\nclass App{\\n  str:string='madam';\\n  str2:string='';\\n  i=0;\\n\\n  getSum(){\\n      for(this.i=this.str.length-1; this.i>=0; this.i--){\\n          this.str2 += this.str[this.i];\\n      }\\n\\n      if(this.str !== this.str2){\\n          console.log('Not Palindrom', this.str2);\\n      } else{\\n          console.log('Palindrom', this.str2);\\n      }\\n      \\n  }\\n}\\n\\nconst obj=new App();\\nobj.getSum();\\n\".trim();var duplicates=\"\\nclass App{\\n  i=0;\\n  j=0;\\n  array = [1,2,3,4,3,0,9,0,1];\\n  result:any=[];\\n  count:number;\\n\\n  getSum(){\\n      for(this.i=0; this.i<=this.array.length; this.i++){\\n          this.count=0;\\n          for(this.j=0; this.j<=this.result.length; this.j++){\\n              if(this.array[this.i]==this.result[this.j]){\\n                  this.count +=1;\\n              }\\n          }\\n\\n          if(this.count==0){\\n              this.result.push(this.array[this.i]);\\n          }\\n      }\\n      console.log(this.result);\\n  }\\n}\\n\\nconst obj=new App();\\nobj.getSum();\\n\".trim();var TypeScript4=/*#__PURE__*/function(_Component){_inherits(TypeScript4,_Component);function TypeScript4(){_classCallCheck(this,TypeScript4);return _possibleConstructorReturn(this,_getPrototypeOf(TypeScript4).apply(this,arguments));}_createClass(TypeScript4,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Type assertion\"),\"Type assertion is explicitly telling the compiler that we want to treat the entity as a different type. It allows us to treat any as a number, or number as a string.\",React.createElement(\"br\",null),\"By default type is any.\",React.createElement(\"br\",null),\"we tell typescript compiler declayed data type is called type assertion.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"TypeScript provides two ways to do Type Assertion.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:assertion,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Access Modifier\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Public: \"),\"We can access this data member anywhere without any restriction.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Private: \"),\"It ensures that the class members are visible only to that class in which it is containing.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Protected: \"),\"A Protected access modifier can be accessed only within the class and its subclass. We cannot access it from the outside of a class in which it is containing.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:modifier,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. TypeScript Accessor\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:accessor,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. SortArr\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:sortArr,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. MissingVal\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:missingVal,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. Palindroms\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:palindroms,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. Remove Duplicates\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:duplicates,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return TypeScript4;}(Component);export default withStyles(styles)(TypeScript4);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjs/angular 12/typeScript_4.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","assertion","trim","modifier","accessor","sortArr","missingVal","palindroms","duplicates","TypeScript4","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\n\n\nconst assertion = `\n1.Using Angular Bracket <>\nlet empCode: any = 111;\nlet employeeCode = <number> empCode;\nconsole.log(typeof(employeeCode));\n\n2.Using as keyword\nlet empCode: any = 111;\nlet employeeCode = empCode as number;\nconsole.log(typeof(employeeCode));\n\n\n//2\nlet arr:string[] = new Array(\"JavaTpoint\", \"2300\", \"Java\", \"Abhishek\");\nfunction display(arr_values:string[]) {\n   for(let i = 0;i<arr_values.length;i++) {\n      console.log(arr[i]);\n   }\n}\n\ndisplay(arr); `.trim();\n\n\nconst modifier = `\n//Public\nclass Student {  \n    public studCode: number;  \n    studName: string;  \n}  \n  \nlet stud = new Student();  \nstud.studCode = 101;  \nstud.studName = \"Joe Root\";  \n  \nconsole.log(stud.studCode+ \" \"+stud.studName);  \n\n\n//Private\nclass Student {  \npublic studCode: number;  \nprivate studName: string;  \n\nconstructor(code: number, name: string){  \nthis.studCode = code;  \nthis.studName = name;  \n}  \n\npublic display() {  \nreturn ('My unique code: '$'{this.studCode}, my name: '$'{this.studName}.');  \n    }  \n}  \n  \nlet student: Student = new Student(1, \"JoeRoot\");  \nconsole.log(student.display());  \n\n\n//Protected\nclass Student {  \n    public studCode: number;  \n    protected studName: string;  \n    constructor(code: number, name: string){  \n        this.studCode = code;  \n        this.studName = name;  \n        }  \n}  \nclass Person extends Student {  \n    private department: string;  \n  \n    constructor(code: number, name: string, department: string) {  \n        super(code, name);  \n        this.department = department;  \n    }  \n    public getElevatorPitch() {  \n        return ('My unique code: '$'{this.studCode}, my name: '$'{this.studName} \n        and I am in '$'{this.department} Branch.');\n    }\n}\nlet joeRoot: Person = new Person(1, \"JoeRoot\", \"CS\");\nconsole.log(joeRoot.getElevatorPitch());`.trim();\n\nconst accessor = `\n//getter\nclass MyDrawing {\n    length: number = 20;\n    breadth: number = 15;\n\n    get rectangle() {\n        return this.length * this.breadth;\n    }\n}\nconsole.log(new MyDrawing().rectangle);\n\n\n//setter\nlet passcode = \"secret passcode\";\n\nclass Student {\n    private _fullName: string;\n\n    get fullName(): string {\n        return this._fullName;\n    }\n\n    set fullName(newName: string) {\n        if (passcode && passcode == \"secret passcode\") {\n            this._fullName = newName;\n        }\n        else {\n            console.log(\"Unauthorized update of student detail!\");\n        }\n    }\n}\n\nlet stud = new Student();\nstud.fullName = \"Virat Kohli\";\nif (stud.fullName) {\n    console.log(stud.fullName);\n}`.trim();\n\nconst sortArr = `\nclass App{\n  arr:any;\n  i:number;\n  j:number;\n  temp:any;\n\n  sortValue(){\n      for(this.i=0;this.i<this.arr.length;this.i++){\n          for(this.j=this.i;this.j<this.arr.length;this.j++){\n              if(this.arr[this.i]>this.arr[this.j]){\n                  this.temp=this.arr[this.i];\n                  this.arr[this.i]=this.arr[this.j];\n                  this.arr[this.j]=this.temp;\n              }\n          }\n      }\n      console.log(this.arr)\n  }\n}\n\n\nconst obj=new App();\nobj.arr=[5,3,1,9,0];\nobj.sortValue();\n`.trim();\n\nconst missingVal = `\nclass App{\n  i:number;\n  arr:any=[0,1,3];\n  result:number=0;\n  exactSum:number;\n  missingNum:number;\n\n  getSum(){\n      this.exactSum = this.arr.reduce((a,b)=>a+b);\n      \n      for(this.i=0; this.i<=this.arr.length; this.i++){\n          this.result += this.i;\n      }\n\n      this.missingNum = this.result - this.exactSum;\n      console.log(this.missingNum);\n  }\n}\n\nconst obj=new App();\nobj.getSum();\n`.trim();\n\nconst palindroms = `\nclass App{\n  str:string='madam';\n  str2:string='';\n  i=0;\n\n  getSum(){\n      for(this.i=this.str.length-1; this.i>=0; this.i--){\n          this.str2 += this.str[this.i];\n      }\n\n      if(this.str !== this.str2){\n          console.log('Not Palindrom', this.str2);\n      } else{\n          console.log('Palindrom', this.str2);\n      }\n      \n  }\n}\n\nconst obj=new App();\nobj.getSum();\n`.trim();\n\nconst duplicates = `\nclass App{\n  i=0;\n  j=0;\n  array = [1,2,3,4,3,0,9,0,1];\n  result:any=[];\n  count:number;\n\n  getSum(){\n      for(this.i=0; this.i<=this.array.length; this.i++){\n          this.count=0;\n          for(this.j=0; this.j<=this.result.length; this.j++){\n              if(this.array[this.i]==this.result[this.j]){\n                  this.count +=1;\n              }\n          }\n\n          if(this.count==0){\n              this.result.push(this.array[this.i]);\n          }\n      }\n      console.log(this.result);\n  }\n}\n\nconst obj=new App();\nobj.getSum();\n`.trim();\n\n\nclass TypeScript4 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Type assertion</h3>\n              Type assertion is explicitly telling the compiler that we want to treat the entity as a different type. It allows us to treat any\n              as a number, or number as a string.\n              <br />\n              By default type is any.<br />\n              we tell typescript compiler declayed data type is called type assertion.\n              <br />\n              <br />\n              <b>TypeScript provides two ways to do Type Assertion.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={assertion}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n\n\n              <h3>2. Access Modifier</h3>\n              <ul>\n                <li><b>Public: </b>We can access this data member anywhere without any restriction.</li>\n                <li><b>Private: </b>It ensures that the class members are visible only to that class in which it is containing.</li>\n                <li><b>Protected: </b>A Protected access modifier can be accessed only within the class and its subclass. We cannot access it\n                  from the outside of a class in which it is containing.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={modifier}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. TypeScript Accessor</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={accessor}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. SortArr</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={sortArr}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. MissingVal</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={missingVal}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Palindroms</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={palindroms}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Remove Duplicates</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={duplicates}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(TypeScript4));\n"]},"metadata":{},"sourceType":"module"}