{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var Previews=\"\\nconst postSchema = new Schema({\\n  text: String,\\n  title: String,\\n});\\n\\nconst Post = mongoose.model(\\\"Post\\\", postSchema);\\nmodule.exports = Post\\n\\n\\n//Controllers\\nconst Post = require('./model.js');\\n\\nrouter.post('/',async (req,res) =>{\\n  const posts = new Post({\\n    text: req.body.text,\\n    title: req.body.title\\n  })\\n      await posts.save()\\n      res.status(201).send(posts)\\n})\\n\\n\\n//Routes\\nrouter.get(\\\"/posts\\\", async (req, res) => {\\n  const sort = {}\\n  \\n  const PAGE_SIZE = 3;                                                           //data per page\\n  const page = parseInt(req.query.page || \\\"0\\\");\\n  const total = await Post.countDocuments({});\\n  const posts = await Post.find({})\\n\\n    .limit(PAGE_SIZE)                                                            //data limit get from mongodb\\n    .skip(PAGE_SIZE * page);\\n    res.json({\\n      totalPages: Math.ceil(total / PAGE_SIZE),\\n      posts,\\n    });\\n  \\n \\n  if(req.query.sortBy){                                             //localhost:5000/posts?sortBy=createdAt:true\\n    const str = req.query.sortBy.split(':')\\n    sort[str[0]] = str[1] === 'desc' ? -1:1\\n    console.log('sort',str)\\n}\\n});\\n\\n\\nrouter.get(\\\"/search/:text\\\", (req, res) => {\\n  var regex = new RegExp(req.params.text,'i');\\n  Post.find({name:regex}).then(result => {\\n    res.status(200).json(result)\\n  })\\n})\\n\\nmodule.exports = router;\\n\\n\\n\\n//server.js\\nconst morgan = require(\\\"morgan\\\");\\nconst cookieParser = require(\\\"cookie-parser\\\");\\n\\nconst app = express();\\napp.use(cookieParser());\\napp.use(\\n  cors({\\n    origin: \\\"http://localhost:3000\\\",\\n    credentials: true\\n  })\\n);\\n\\nif (!process.env.NODE_ENV === \\\"test\\\") {\\n  app.use(morgan(\\\"dev\\\"));\\n}\\n\\napp.use(express.json());\\n\\napp.use(\\\"/users\\\", require(\\\"./routes/users\\\"));\\n\\nconst port = process.env.PORT || 5000\\napp.listen(port, () => console.log('Server Listening on'));\\n\".trim();var ViewDetails=\"\\nfunction App() {\\n  const [pageNumber, setPageNumber] = useState(0);\\n  const [numberOfPages, setNumberOfPages] = useState(0);\\n  const [posts, setPosts] = useState([]);\\n\\n  const pages = new Array(numberOfPages).fill(null).map((v, i) => i);\\n\\n  useEffect(() => {\\n    fetch(http://localhost:5000/posts?page='$'{pageNumber})\\n      .then((res) => res.json())\\n      .then(({ totalPages, posts }) => {\\n        setPosts(posts);\\n        console.log('eeeee',posts)\\n        setNumberOfPages(totalPages);\\n      });\\n  }, [pageNumber]);\\n\\n  const gotoPrevious = () => {\\n    setPageNumber(Math.max(0, pageNumber - 1));\\n  };\\n\\n  const gotoNext = () => {\\n    setPageNumber(Math.min(numberOfPages - 1, pageNumber + 1));\\n  };\\n\\n  return (\\n    <div className=\\\"App\\\">\\n      <h3>Page of {pageNumber + 1}</h3>\\n\\n      {posts.map((post) => (\\n        <div key={post._id} className=\\\"post\\\">\\n          <h4>{post.title}</h4>\\n          <p>{post.text}</p>\\n        </div>\\n      ))}\\n\\n      <button onClick={gotoPrevious}>Previous</button>\\n      {pages.map((pageIndex) => (\\n        <button key={pageIndex} onClick={() => setPageNumber(pageIndex)}>\\n          {pageIndex + 1}\\n        </button>\\n      ))}\\n      <button onClick={gotoNext}>Next</button>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\".trim();var captcha=\"\\nconst bodyParser = require('body-parser');\\nconst fetch = require('node-fetch');\\nconst { stringify } = require('querystring');\\nconst app = express();\\n\\napp.use(express.json());\\n\\napp.get('/', (_, res) => res.sendFile(__dirname + '/index.html'));\\n\\napp.post('/subscribe', async (req, res) => {\\n  if (!req.body.captcha)\\n    return res.json({ success: false, msg: 'Please select captcha' });\\n\\n  const secretKey = '6LdpvDEUAAAAAHszsgB_nnal29BIKDsxwAqEbZzU';                                     // Secret key\\n\\n  // Verify URL\\n  const query = stringify({\\n    secret: secretKey,\\n    response: req.body.captcha,\\n    remoteip: req.connection.remoteAddress\\n  });\\n  const verifyURL = https://google.com/recaptcha/api/siteverify?'$'{query};\\n\\n  const body = await fetch(verifyURL).then(res => res.json());\\n\\n  if (body.success !== undefined && !body.success)\\n    return res.json({ success: false, msg: 'Failed captcha verification' });\\n\\n  return res.json({ success: true, msg: 'Captcha passed' });\\n});\\n\\napp.listen(3000, () => console.log('Server started on port 3000'));\\n\".trim();var PropsModel=/*#__PURE__*/function(_Component){_inherits(PropsModel,_Component);function PropsModel(){_classCallCheck(this,PropsModel);return _possibleConstructorReturn(this,_getPrototypeOf(PropsModel).apply(this,arguments));}_createClass(PropsModel,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1.Server Side Pagination\"),React.createElement(\"b\",null,\"Server\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Previews,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Client\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:ViewDetails,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Captcha\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:captcha,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return PropsModel;}(Component);export default withStyles(styles)(PropsModel);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/mern/projects/propsModel.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","Previews","trim","ViewDetails","captcha","PropsModel","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,0BAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CAGA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,eAAe,CAAE,SAAnB,CAA8BC,OAAO,CAAE,KAAvC,CAA8CC,QAAQ,CAAE,MAAxD,CAAf,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,KAAK,CAAE,CACLC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH,CAELN,OAAO,CAAEG,KAAK,CAACG,OAAN,CAAc,CAAd,CAFJ,CADgB,CAKvBC,QAAQ,CAAE,CACRF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA,CALa,CAQvBE,SAAS,CAAE,CACTC,SAAS,CAAE,QADF,CARY,CAAL,EAApB,CAaA,GAAMC,CAAAA,QAAQ,CAAG,q4DAkFfC,IAlFe,EAAjB,CAoFA,GAAMC,CAAAA,WAAW,CAAG,wxCAiDlBD,IAjDkB,EAApB,CAmDA,GAAME,CAAAA,OAAO,CAAG,kkCAiCdF,IAjCc,EAAhB,C,GAoCMG,CAAAA,U,0SACgB,CAClBC,UAAU,CAAC,iBAAMxB,CAAAA,KAAK,CAACyB,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAACb,KAA1B,EACE,8BAAI,oBAAC,OAAD,MAAJ,CADF,CADF,CADF,CAME,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEa,OAAO,CAACb,KAA1B,EACE,oBAAC,IAAD,MACE,yDADF,CAEE,sCAFF,CAGE,2BAAK,KAAK,CAAEN,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEY,QADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAHF,CAUE,8BAVF,CAWE,uCAXF,CAYE,2BAAK,KAAK,CAAEZ,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEc,WADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAZF,CAmBE,8BAnBF,CAqBE,2CArBF,CAsBE,2BAAK,KAAK,CAAEd,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEe,OADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAtBF,CADF,CADF,CANF,CADF,CA2CD,C,wBAjDsBvB,S,EAoDzB,cAAgBI,CAAAA,UAAU,CAACQ,MAAD,CAAV,CAAmBY,UAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst Previews = `\nconst postSchema = new Schema({\n  text: String,\n  title: String,\n});\n\nconst Post = mongoose.model(\"Post\", postSchema);\nmodule.exports = Post\n\n\n//Controllers\nconst Post = require('./model.js');\n\nrouter.post('/',async (req,res) =>{\n  const posts = new Post({\n    text: req.body.text,\n    title: req.body.title\n  })\n      await posts.save()\n      res.status(201).send(posts)\n})\n\n\n//Routes\nrouter.get(\"/posts\", async (req, res) => {\n  const sort = {}\n  \n  const PAGE_SIZE = 3;                                                           //data per page\n  const page = parseInt(req.query.page || \"0\");\n  const total = await Post.countDocuments({});\n  const posts = await Post.find({})\n\n    .limit(PAGE_SIZE)                                                            //data limit get from mongodb\n    .skip(PAGE_SIZE * page);\n    res.json({\n      totalPages: Math.ceil(total / PAGE_SIZE),\n      posts,\n    });\n  \n \n  if(req.query.sortBy){                                             //localhost:5000/posts?sortBy=createdAt:true\n    const str = req.query.sortBy.split(':')\n    sort[str[0]] = str[1] === 'desc' ? -1:1\n    console.log('sort',str)\n}\n});\n\n\nrouter.get(\"/search/:text\", (req, res) => {\n  var regex = new RegExp(req.params.text,'i');\n  Post.find({name:regex}).then(result => {\n    res.status(200).json(result)\n  })\n})\n\nmodule.exports = router;\n\n\n\n//server.js\nconst morgan = require(\"morgan\");\nconst cookieParser = require(\"cookie-parser\");\n\nconst app = express();\napp.use(cookieParser());\napp.use(\n  cors({\n    origin: \"http://localhost:3000\",\n    credentials: true\n  })\n);\n\nif (!process.env.NODE_ENV === \"test\") {\n  app.use(morgan(\"dev\"));\n}\n\napp.use(express.json());\n\napp.use(\"/users\", require(\"./routes/users\"));\n\nconst port = process.env.PORT || 5000\napp.listen(port, () => console.log('Server Listening on'));\n`.trim();\n\nconst ViewDetails = `\nfunction App() {\n  const [pageNumber, setPageNumber] = useState(0);\n  const [numberOfPages, setNumberOfPages] = useState(0);\n  const [posts, setPosts] = useState([]);\n\n  const pages = new Array(numberOfPages).fill(null).map((v, i) => i);\n\n  useEffect(() => {\n    fetch(http://localhost:5000/posts?page='$'{pageNumber})\n      .then((res) => res.json())\n      .then(({ totalPages, posts }) => {\n        setPosts(posts);\n        console.log('eeeee',posts)\n        setNumberOfPages(totalPages);\n      });\n  }, [pageNumber]);\n\n  const gotoPrevious = () => {\n    setPageNumber(Math.max(0, pageNumber - 1));\n  };\n\n  const gotoNext = () => {\n    setPageNumber(Math.min(numberOfPages - 1, pageNumber + 1));\n  };\n\n  return (\n    <div className=\"App\">\n      <h3>Page of {pageNumber + 1}</h3>\n\n      {posts.map((post) => (\n        <div key={post._id} className=\"post\">\n          <h4>{post.title}</h4>\n          <p>{post.text}</p>\n        </div>\n      ))}\n\n      <button onClick={gotoPrevious}>Previous</button>\n      {pages.map((pageIndex) => (\n        <button key={pageIndex} onClick={() => setPageNumber(pageIndex)}>\n          {pageIndex + 1}\n        </button>\n      ))}\n      <button onClick={gotoNext}>Next</button>\n    </div>\n  );\n}\n\nexport default App;\n`.trim();\n\nconst captcha = `\nconst bodyParser = require('body-parser');\nconst fetch = require('node-fetch');\nconst { stringify } = require('querystring');\nconst app = express();\n\napp.use(express.json());\n\napp.get('/', (_, res) => res.sendFile(__dirname + '/index.html'));\n\napp.post('/subscribe', async (req, res) => {\n  if (!req.body.captcha)\n    return res.json({ success: false, msg: 'Please select captcha' });\n\n  const secretKey = '6LdpvDEUAAAAAHszsgB_nnal29BIKDsxwAqEbZzU';                                     // Secret key\n\n  // Verify URL\n  const query = stringify({\n    secret: secretKey,\n    response: req.body.captcha,\n    remoteip: req.connection.remoteAddress\n  });\n  const verifyURL = https://google.com/recaptcha/api/siteverify?'$'{query};\n\n  const body = await fetch(verifyURL).then(res => res.json());\n\n  if (body.success !== undefined && !body.success)\n    return res.json({ success: false, msg: 'Failed captcha verification' });\n\n  return res.json({ success: true, msg: 'Captcha passed' });\n});\n\napp.listen(3000, () => console.log('Server started on port 3000'));\n`.trim();\n\n\nclass PropsModel extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1.Server Side Pagination</h3>\n              <b>Server</b>\n              <div style={titles}>\n                <PrismCode\n                  code={Previews}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Client</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={ViewDetails}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Captcha</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={captcha}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(PropsModel));\n"]},"metadata":{},"sourceType":"module"}