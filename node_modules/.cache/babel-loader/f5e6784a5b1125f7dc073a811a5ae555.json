{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/nodeJs/nodeDeep/filSystems.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst fsdir = `\nfs.stat('filename.js', (err, stats) => {\n  if (err) {\n    return console.log(err)\n  }\n  console.log(stats)\n  console.log(stats.isFile())\n  console.log(stats.isDirectory())\n  console.log(stats.size)\n})\n\nfs.opendir('filename.js', (err, dir) => {\n  if (err) {\n    return console.log(err)\n  }\n  console.log(dir.path)\n})\n`.trim();\nconst read = `\nconst fs = require(\"fs\"); \n\nfs.readFile('input.txt', (err, data) => {                                         // Asynchronous read \n   if (err) { \n      return console.error(err); \n   } \n   console.log(\"Asynchronous read: \" + data.toString()); \n});\n\n\nconst data = fs.readFileSync('input.txt');                                        // Synchronous read \nconsole.log(\"Synchronous read: \" + data.toString()); \n`.trim();\nconst opens = `\nconst fs = require(\"fs\"); \n  \nconsole.log(\"opening file!\"); \nfs.open('input.txt', 'r+', function(err, fd) { \n   if (err) { \n      return console.error(err); \n   } \n   console.log(\"File open successfully\");      \n}); \n\n\n//2\nvar fs = require(\"fs\"); \nvar buf = new Buffer(1024); \n  \nconsole.log(\"opening an existing file\"); \nfs.open('input.txt', 'r+', (err, fd) => { \n   if (err) { \n      return console.error(err); \n   } \n   console.log(\"File opened successfully!\"); \n   console.log(\"reading the file\"); \n     \n   fs.read(fd, buf, 0, buf.length, 0, (err, bytes) => { \n      if (err){ \n         console.log(err); \n      } \n      console.log(bytes + \" bytes read\"); \n      \n      if(bytes > 0){                                                        // Print only read bytes to avoid junk. \n         console.log(buf.slice(0, bytes).toString()); \n      } \n   }); \n}); `.trim();\nconst writeFiles = `\nvar fs = require(\"fs\"); \n\nconsole.log(\"writing into existing file\"); \nfs.writeFile('input.txt', 'Geeks For Geeks', (err) => { \nif (err) { \n\treturn console.error(err); \n} \n\t\nconsole.log(\"Data written successfully!\"); \nconsole.log(\"Let's read newly written data\"); \n\t\nfs.readFile('input.txt', (err, data) => { \n\tif (err) { \n\t\treturn console.error(err); \n\t} \n\tconsole.log(\"Asynchronous read: \" + data.toString()); \n}); \n}); \n`.trim();\nconst appendFiles = `\nvar fs = require('fs'); \n\nvar data = \"\\nLearn Node.js\"; \n\n// Append data to file \nfs.appendFile('input.txt', data, 'utf8', \n\n\t// Callback function \n\tfunction(err) { \n\t\tif (err) throw err; \n\t\tconsole.log(\"Data is appended to file successfully.\") \n}); `.trim();\nconst rename = `\nvar fs = require('fs');\n\nfs.rename('input.txt', 'myrenamedfile.txt',  (err) => {\n  if (err) throw err;\n  console.log('File Renamed!');\n});`.trim();\nconst delFiles = `\nvar fs = require(\"fs\"); \n\nconsole.log(\"deleting an existing file\"); \nfs.unlink('input.txt', (err) => { \nif (err) { \n\treturn console.error(err); \n} \nconsole.log(\"File deleted successfully!\"); \n}); \n`.trim();\nconst watch = `\nvar fs = require('fs');\nfs.watch(__filename, { persistent: false }, (event, filename) => {\n    console.log(event);\n    console.log(filename);\n})\n\nsetImmediate(function() {\n    fs.rename(__filename, __filename + '.new', () => {});\n});`.trim();\nconst CreateFiles = `\nvar fs = require('fs');\n\nfs.appendFile('demo.txt', 'Hello content!', (err) => {\n    if (err) throw err;\n    console.log('Saved!');\n});`.trim();\nconst ReadFiles = `\n//index.html\n<html>\n<body>\n<h1>My Header</h1>\n<p>My paragraph.</p>\n</body>\n</html>\n\n\n//index.js\nvar http = require('http');\nvar fs = require('fs');\nhttp.createServer(function(req, res) {\n    fs.readFile('index.html', function(err, data) {\n        res.writeHead(200, { 'Content-Type': 'text/html' });\n        res.write(data);\n        res.end();\n    });\n}).listen(4000);`.trim();\nconst RenameFiles = `\nvar fs = require('fs');\n\nfs.rename('demo.txt', 'text.txt', (err) => {\n    if (err) throw err;\n    console.log('File Renamed!');\n});`.trim();\nconst OpenFiles = `\nvar fs = require('fs');\n\nfs.open('read.txt', 'w', (err, file) => {\n    if (err) throw err;\n    console.log('Saved!');\n});`.trim();\nconst deleteFiles = `\nvar fs = require('fs');\n\nfs.unlink('will_delete.txt', function (err) {\n  if (err) throw err;\n  console.log('File deleted!');\n});`.trim();\nconst writeFile = `\nvar fs = require('fs');\n\nfs.writeFile('write.html', 'Hello content!', function (err) {\n  if (err) throw err;\n  console.log('Saved!');\n});`.trim();\nconst UpdateFiles = `\n//append.txt\nThis is my text.\n\n\n//append_file.js\nvar fs = require('fs');\n\nfs.appendFile('append.txt', ' This is my text.', function (err) {\n  if (err) throw err;\n  console.log('Updated!');\n});`.trim();\n\nclass FileSys extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \"What is a control flow function? What are the steps does it execute?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, \"Control flow function runs in between several asynchronous function calls.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, \"Control the order of execution. \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, \"Collect data.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, \"Limit concurrency. \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, \"Call the next step in the program.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, \"Explain the working mechanism of control flow function?\"), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, \"Control flow function is the sequence in which statements or functions are executed. Since I/O operations are non-blocking in Node.js, control flow cannot be linear. Therefore, it registers a callback to the event loop and passes the control back to the node, so that the next lines of code can run without interruption. Ex:Read File\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, \"fs.state(): \"), \"It helps to get various statistic of a file.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }), \"To deal with directories here are 2 methods.\", React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, \"opendir(): \"), \"readfile()/ writefile()\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, \"opendirSync(): \"), \"readfileSync()/ writefileSync()\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: fsdir,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, \"Read File\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, \"fs method read the entire file into buffer.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: read,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, \"Open File\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, \"The fs.open() method is used to create, read, or write a file. \"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: opens,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, \"Write\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: writeFiles,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, \"fs.appendFile(): \"), \"method appends specified content to a file. If the file does not exist, the file will be created.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, \"fs.appendFile(filepath, data, options, callback);\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, \"fs.appendFile(): \"), \"method is used to synchronously append/Update the data to the file or Create a file.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, \"fs.appendFileSync(filepath, data, options);\"))))), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: appendFiles,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, \"Rename File\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: rename,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, \"Delete File\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: delFiles,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, \"Watch File\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }, \"This will set up a watcher on itself, change its own filename, and exit.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, \"Watcher channels can be closed at any time using the following code snippet.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, \"const w = fs.watch('file', function()\", \") w.close();\"))))), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: watch,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, \"File System2\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }, \"Create Files\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: CreateFiles,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }, \"Write File\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: writeFile,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, \"Open File\"), \"A text.txt file create in same the folter.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: OpenFiles,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }, \"Read Files\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: ReadFiles,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }, \"Rename Files\"), \"A text.txt file create without any data in same the folter.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: RenameFiles,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }, \"Delete Files\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: deleteFiles,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }, \"Update Files\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: UpdateFiles,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(FileSys);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/nodeJs/nodeDeep/filSystems.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","fsdir","trim","read","opens","writeFiles","appendFiles","rename","delFiles","watch","CreateFiles","ReadFiles","RenameFiles","OpenFiles","deleteFiles","writeFile","UpdateFiles","FileSys","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst fsdir = `\nfs.stat('filename.js', (err, stats) => {\n  if (err) {\n    return console.log(err)\n  }\n  console.log(stats)\n  console.log(stats.isFile())\n  console.log(stats.isDirectory())\n  console.log(stats.size)\n})\n\nfs.opendir('filename.js', (err, dir) => {\n  if (err) {\n    return console.log(err)\n  }\n  console.log(dir.path)\n})\n`.trim();\n\nconst read = `\nconst fs = require(\"fs\"); \n\nfs.readFile('input.txt', (err, data) => {                                         // Asynchronous read \n   if (err) { \n      return console.error(err); \n   } \n   console.log(\"Asynchronous read: \" + data.toString()); \n});\n\n\nconst data = fs.readFileSync('input.txt');                                        // Synchronous read \nconsole.log(\"Synchronous read: \" + data.toString()); \n`.trim();\n\nconst opens = `\nconst fs = require(\"fs\"); \n  \nconsole.log(\"opening file!\"); \nfs.open('input.txt', 'r+', function(err, fd) { \n   if (err) { \n      return console.error(err); \n   } \n   console.log(\"File open successfully\");      \n}); \n\n\n//2\nvar fs = require(\"fs\"); \nvar buf = new Buffer(1024); \n  \nconsole.log(\"opening an existing file\"); \nfs.open('input.txt', 'r+', (err, fd) => { \n   if (err) { \n      return console.error(err); \n   } \n   console.log(\"File opened successfully!\"); \n   console.log(\"reading the file\"); \n     \n   fs.read(fd, buf, 0, buf.length, 0, (err, bytes) => { \n      if (err){ \n         console.log(err); \n      } \n      console.log(bytes + \" bytes read\"); \n      \n      if(bytes > 0){                                                        // Print only read bytes to avoid junk. \n         console.log(buf.slice(0, bytes).toString()); \n      } \n   }); \n}); `.trim();\n\nconst writeFiles = `\nvar fs = require(\"fs\"); \n\nconsole.log(\"writing into existing file\"); \nfs.writeFile('input.txt', 'Geeks For Geeks', (err) => { \nif (err) { \n\treturn console.error(err); \n} \n\t\nconsole.log(\"Data written successfully!\"); \nconsole.log(\"Let's read newly written data\"); \n\t\nfs.readFile('input.txt', (err, data) => { \n\tif (err) { \n\t\treturn console.error(err); \n\t} \n\tconsole.log(\"Asynchronous read: \" + data.toString()); \n}); \n}); \n`.trim();\n\nconst appendFiles = `\nvar fs = require('fs'); \n\nvar data = \"\\nLearn Node.js\"; \n\n// Append data to file \nfs.appendFile('input.txt', data, 'utf8', \n\n\t// Callback function \n\tfunction(err) { \n\t\tif (err) throw err; \n\t\tconsole.log(\"Data is appended to file successfully.\") \n}); `.trim();\n\nconst rename = `\nvar fs = require('fs');\n\nfs.rename('input.txt', 'myrenamedfile.txt',  (err) => {\n  if (err) throw err;\n  console.log('File Renamed!');\n});`.trim();\n\nconst delFiles = `\nvar fs = require(\"fs\"); \n\nconsole.log(\"deleting an existing file\"); \nfs.unlink('input.txt', (err) => { \nif (err) { \n\treturn console.error(err); \n} \nconsole.log(\"File deleted successfully!\"); \n}); \n`.trim();\n\nconst watch = `\nvar fs = require('fs');\nfs.watch(__filename, { persistent: false }, (event, filename) => {\n    console.log(event);\n    console.log(filename);\n})\n\nsetImmediate(function() {\n    fs.rename(__filename, __filename + '.new', () => {});\n});`.trim();\n\nconst CreateFiles = `\nvar fs = require('fs');\n\nfs.appendFile('demo.txt', 'Hello content!', (err) => {\n    if (err) throw err;\n    console.log('Saved!');\n});`.trim();\n\nconst ReadFiles = `\n//index.html\n<html>\n<body>\n<h1>My Header</h1>\n<p>My paragraph.</p>\n</body>\n</html>\n\n\n//index.js\nvar http = require('http');\nvar fs = require('fs');\nhttp.createServer(function(req, res) {\n    fs.readFile('index.html', function(err, data) {\n        res.writeHead(200, { 'Content-Type': 'text/html' });\n        res.write(data);\n        res.end();\n    });\n}).listen(4000);`.trim();\n\nconst RenameFiles = `\nvar fs = require('fs');\n\nfs.rename('demo.txt', 'text.txt', (err) => {\n    if (err) throw err;\n    console.log('File Renamed!');\n});`.trim();\n\nconst OpenFiles = `\nvar fs = require('fs');\n\nfs.open('read.txt', 'w', (err, file) => {\n    if (err) throw err;\n    console.log('Saved!');\n});`.trim();\n\nconst deleteFiles = `\nvar fs = require('fs');\n\nfs.unlink('will_delete.txt', function (err) {\n  if (err) throw err;\n  console.log('File deleted!');\n});`.trim();\n\nconst writeFile = `\nvar fs = require('fs');\n\nfs.writeFile('write.html', 'Hello content!', function (err) {\n  if (err) throw err;\n  console.log('Saved!');\n});`.trim();\n\nconst UpdateFiles = `\n//append.txt\nThis is my text.\n\n\n//append_file.js\nvar fs = require('fs');\n\nfs.appendFile('append.txt', ' This is my text.', function (err) {\n  if (err) throw err;\n  console.log('Updated!');\n});`.trim();\n\n\nclass FileSys extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>What is a control flow function? What are the steps does it execute?</h3>\n              <p>\n                Control flow function runs in between several asynchronous function calls.\n                <ul>\n                  <li>Control the order of execution. </li>\n                  <li>Collect data.</li>\n                  <li>Limit concurrency. </li>\n                  <li>Call the next step in the program.</li>\n                </ul>\n              </p>\n              <br />\n\n              <h3>Explain the working mechanism of control flow function?</h3>\n              <i>\n                Control flow function is the sequence in which statements or functions are executed. Since I/O operations are non-blocking in Node.js, control flow cannot be linear. Therefore, it registers a callback to the event loop and passes the control back to the node, so that the next lines of code can run without interruption. Ex:Read File\n              </i>\n              <br />\n              <ul>\n                <li><b>fs.state(): </b>It helps to get various statistic of a file.</li>\n                <br />\n                To deal with directories here are 2 methods.\n                <li><b>opendir(): </b>readfile()/ writefile()</li>\n                <li><b>opendirSync(): </b>readfileSync()/ writefileSync()</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={fsdir}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Read File</b>\n              <p>fs method read the entire file into buffer.</p>\n              <div style={titles}>\n                <PrismCode\n                  code={read}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Open File</b>\n              <p>The fs.open() method is used to create, read, or write a file. </p>\n              <div style={titles}>\n                <PrismCode\n                  code={opens}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Write</b>\n              <div style={titles}>\n                <PrismCode\n                  code={writeFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <p>\n                <ul>\n                  <li><b>fs.appendFile(): </b>method appends specified content to a file. If the file does not exist, the file will be created.</li>\n                  <ul><li><b>fs.appendFile(filepath, data, options, callback);</b></li></ul>\n                  <br />\n                  <li><b>fs.appendFile(): </b>method is used to synchronously append/Update the data to the file or Create a file.</li>\n                  <ul><li><b>fs.appendFileSync(filepath, data, options);</b></li></ul>\n                </ul>\n              </p>\n              <div style={titles}>\n                <PrismCode\n                  code={appendFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Rename File</b>\n              <div style={titles}>\n                <PrismCode\n                  code={rename}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Delete File</b>\n              <div style={titles}>\n                <PrismCode\n                  code={delFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Watch File</b>\n              <p>\n                <ul>\n                  <li>This will set up a watcher on itself, change its own filename, and exit.</li>\n                  <li>Watcher channels can be closed at any time using the following code snippet.</li>\n                  <ul><li><b>const w = fs.watch('file', function(){ }) w.close();</b></li></ul>\n                </ul>\n              </p>\n              <div style={titles}>\n                <PrismCode\n                  code={watch}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>File System2</h3>\n              <b>Create Files</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={CreateFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Write File</b>\n              <div style={titles}>\n                <PrismCode\n                  code={writeFile}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Open File</b>\n              A text.txt file create in same the folter.\n              <div style={titles}>\n                <PrismCode\n                  code={OpenFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Read Files</b>\n              <div style={titles}>\n                <PrismCode\n                  code={ReadFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Rename Files</b>\n              A text.txt file create without any data in same the folter.\n              <div style={titles}>\n                <PrismCode\n                  code={RenameFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Delete Files</b>\n              <div style={titles}>\n                <PrismCode\n                  code={deleteFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Update Files</b>\n              <b></b>\n              <div style={titles}>\n                <PrismCode\n                  code={UpdateFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(FileSys));\n"]},"metadata":{},"sourceType":"module"}