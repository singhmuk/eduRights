{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import\"../../ReactJs/styles.css\";import Sidebar from\"../sidebar\";import PrismCode from\"../../ReactJs/prismCode\";var titles={backgroundColor:\"#F0F8FF\",padding:\"1px\",fontSize:\"16px\"};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var trackBy=\"\\ntrackByStudentID(index: number, student: any): string{\\n  return student.studentID;\\n}\\n\\ntemplate: '<div *ngFor=\\\"let emp of students; let i=index; let f=first; let o=odd;\\n            TrackBy: trackById\\\">\\n            {{i}} - {{emp.name}} - {{f}} - {{o}}\\n          </div>\\n        <button (click) = \\\"getMoreStudents()\\\"> getStudets</button>\\n       ',})\\n\\nexport class AppComponent {\\n  students: any[];\\n  constructor(){\\n    this.students = [\\n    { \\\"id\\\": 1, \\\"name\\\": \\\"Leanne\\\", \\\"username\\\": \\\"Bret\\\", \\\"email\\\": \\\"Sincere@april.biz\\\" },\\n    { \\\"id\\\": 2,\\\"name\\\": \\\"Ervin\\\", \\\"username\\\": \\\"Antonette\\\", \\\"email\\\": \\\"Shanna@melissa.tv\\\" },\\n    { \\\"id\\\": 3,\\\"name\\\": \\\"Clement\\\",\\\"username\\\": \\\"Samantha\\\",\\\"email\\\": \\\"Nathan@yesenia.net\\\" },\\n    { \\\"id\\\": 4,\\\"name\\\": \\\"Patricia\\\",\\\"username\\\": \\\"Karianne\\\",\\\"email\\\": \\\"Julianne@kory.org\\\" },\\n    { \\\"id\\\": 5,\\\"name\\\": \\\"Chelsey\\\",\\\"username\\\": \\\"Kamren\\\",\\\"email\\\": \\\"Lucio@annie.ca\\\" }\\n  ]\\n  }\\n\\n  getMoreStudents(): void{\\n    this.students = [\\n    { \\\"id\\\": 1, \\\"name\\\": \\\"Leanne\\\", \\\"username\\\": \\\"Bret\\\", \\\"email\\\": \\\"Sincere@april.biz\\\" },\\n    { \\\"id\\\": 2,\\\"name\\\": \\\"Ervin\\\", \\\"username\\\": \\\"Antonette\\\", \\\"email\\\": \\\"Shanna@melissa.tv\\\" },\\n    { \\\"id\\\": 3,\\\"name\\\": \\\"Clement\\\",\\\"username\\\": \\\"Samantha\\\",\\\"email\\\": \\\"Nathan@yesenia.net\\\" },\\n    { \\\"id\\\": 4,\\\"name\\\": \\\"Patricia\\\",\\\"username\\\": \\\"Karianne\\\",\\\"email\\\": \\\"Julianne@kory.org\\\" },\\n    { \\\"id\\\": 5,\\\"name\\\": \\\"Chelsey\\\",\\\"username\\\": \\\"Kamren\\\",\\\"email\\\": \\\"Lucio@annie.ca\\\" },\\n    { \\\"id\\\": 6,\\\"name\\\": \\\"Chelsey6\\\",\\\"username\\\": \\\"Kamren6\\\",\\\"email\\\": \\\"Lucio6@annie.ca\\\" }\\n  ]\\n  }\\n\\n  trackById(index: number, students: any):string {\\n    return students.id\\n  }\\n}\".trim();var tempLocal=\"\\n@Component({\\n  selector: 'app-root',\\n  template: '\\n    <input #inputInfo type = \\\"text\\\" name = \\\"template\\\" value = \\\"property\\\">\\n    <br/>\\n    <button (click) = \\\"getInfo(inputInfo)\\\"> Refrence Varriable</button>\\n  '})\\nexport class AppComponent {\\n  getInfo(inputInfo){\\n    console.log(inputInfo)\\n    console.log(inputInfo.name)\\n  }\\n}\".trim();var objects=\"\\n@Component({\\n  selector: 'app-root',\\n  template: '\\n  <input(keyup)=\\\"onKey($event)\\\">\\n    <p>{{values}}</p>\\n  '})\\n\\nexport class AppComponent {\\n  values = '';\\n\\n  onKey(event: any) {\\n    this.values += event.target.value + ' | ';\\n  }\".trim();var keyEvents=\"\\n  @Component({\\n   selector: 'app-root',\\n   template: '\\n   <input #box (keyup.enter) = \\\"onEnter(box.value)\\\">\\n     <p>{{value}}</p>\\n   '})\\n \\n export class AppComponent {\\n   values = '';\\n \\n   value = '';\\n   onEnter(value: string) { this.value = value; }\\n }\".trim();var onBlur=\"\\n     <input #box\\n       (keyup.enter)=\\\"update(box.value)\\\"\\n       (blur)=\\\"update(box.value)\\\">\\n     <p>{{value}}</p>'})\\n \\n export class AppComponent {\\n   value = '';\\n   update(value: string) { this.value = value; }\\n }\\n \".trim();var AngularFor=/*#__PURE__*/function(_Component){_inherits(AngularFor,_Component);function AngularFor(){_classCallCheck(this,AngularFor);return _possibleConstructorReturn(this,_getPrototypeOf(AngularFor).apply(this,arguments));}_createClass(AngularFor,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. TrackBy with *ngFor\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"The use of TrackBy it's a performance optimization and is usually not needed by default. it use if running into performance issues.\"),React.createElement(\"li\",null,\"TrackBy help to track the items which have been added/ remove.\"),React.createElement(\"li\",null,\"TrackBy function take 2 arguments first is index and second is current item, return the unique identifier as a return argument.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:trackBy,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. Template/local reference variables: Access by id '#inputInfo'\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:tempLocal,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. Get user input from the $event object:\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:objects,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. Key event filtering (with key.enter):\"),\"bind to Angular's keyup.enter pseudo-event. Then Angular calls the event handler only when the user presses Enter.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:keyEvents,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"7. On blur\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:onBlur,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return AngularFor;}(Component);export default withStyles(styles)(AngularFor);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/ngFor.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","trackBy","trim","tempLocal","objects","keyEvents","onBlur","AngularFor","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst trackBy = `\ntrackByStudentID(index: number, student: any): string{\n  return student.studentID;\n}\n\ntemplate: '<div *ngFor=\"let emp of students; let i=index; let f=first; let o=odd;\n            TrackBy: trackById\">\n            {{i}} - {{emp.name}} - {{f}} - {{o}}\n          </div>\n        <button (click) = \"getMoreStudents()\"> getStudets</button>\n       ',})\n\nexport class AppComponent {\n  students: any[];\n  constructor(){\n    this.students = [\n    { \"id\": 1, \"name\": \"Leanne\", \"username\": \"Bret\", \"email\": \"Sincere@april.biz\" },\n    { \"id\": 2,\"name\": \"Ervin\", \"username\": \"Antonette\", \"email\": \"Shanna@melissa.tv\" },\n    { \"id\": 3,\"name\": \"Clement\",\"username\": \"Samantha\",\"email\": \"Nathan@yesenia.net\" },\n    { \"id\": 4,\"name\": \"Patricia\",\"username\": \"Karianne\",\"email\": \"Julianne@kory.org\" },\n    { \"id\": 5,\"name\": \"Chelsey\",\"username\": \"Kamren\",\"email\": \"Lucio@annie.ca\" }\n  ]\n  }\n\n  getMoreStudents(): void{\n    this.students = [\n    { \"id\": 1, \"name\": \"Leanne\", \"username\": \"Bret\", \"email\": \"Sincere@april.biz\" },\n    { \"id\": 2,\"name\": \"Ervin\", \"username\": \"Antonette\", \"email\": \"Shanna@melissa.tv\" },\n    { \"id\": 3,\"name\": \"Clement\",\"username\": \"Samantha\",\"email\": \"Nathan@yesenia.net\" },\n    { \"id\": 4,\"name\": \"Patricia\",\"username\": \"Karianne\",\"email\": \"Julianne@kory.org\" },\n    { \"id\": 5,\"name\": \"Chelsey\",\"username\": \"Kamren\",\"email\": \"Lucio@annie.ca\" },\n    { \"id\": 6,\"name\": \"Chelsey6\",\"username\": \"Kamren6\",\"email\": \"Lucio6@annie.ca\" }\n  ]\n  }\n\n  trackById(index: number, students: any):string {\n    return students.id\n  }\n}`.trim();\n\nconst tempLocal = `\n@Component({\n  selector: 'app-root',\n  template: '\n    <input #inputInfo type = \"text\" name = \"template\" value = \"property\">\n    <br/>\n    <button (click) = \"getInfo(inputInfo)\"> Refrence Varriable</button>\n  '})\nexport class AppComponent {\n  getInfo(inputInfo){\n    console.log(inputInfo)\n    console.log(inputInfo.name)\n  }\n}`.trim();\n\nconst objects = `\n@Component({\n  selector: 'app-root',\n  template: '\n  <input(keyup)=\"onKey($event)\">\n    <p>{{values}}</p>\n  '})\n\nexport class AppComponent {\n  values = '';\n\n  onKey(event: any) {\n    this.values += event.target.value + ' | ';\n  }`.trim();\n\nconst keyEvents = `\n  @Component({\n   selector: 'app-root',\n   template: '\n   <input #box (keyup.enter) = \"onEnter(box.value)\">\n     <p>{{value}}</p>\n   '})\n \n export class AppComponent {\n   values = '';\n \n   value = '';\n   onEnter(value: string) { this.value = value; }\n }`.trim();\n\nconst onBlur = `\n     <input #box\n       (keyup.enter)=\"update(box.value)\"\n       (blur)=\"update(box.value)\">\n     <p>{{value}}</p>'})\n \n export class AppComponent {\n   value = '';\n   update(value: string) { this.value = value; }\n }\n `.trim();\n\nclass AngularFor extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. TrackBy with *ngFor</h3>\n              <ul>\n                <li>\n                  The use of TrackBy it's a performance optimization and is\n                  usually not needed by default. it use if running into\n                  performance issues.\n                </li>\n                <li>\n                  TrackBy help to track the items which have been added/ remove.\n                </li>\n                <li>\n                  TrackBy function take 2 arguments first is index and second is\n                  current item, return the unique identifier as a return\n                  argument.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={trackBy}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                4. Template/local reference variables: Access by id '#inputInfo'\n              </h3>\n              <div style={titles}>\n                <PrismCode\n                  code={tempLocal}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>5. Get user input from the $event object:</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={objects}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>6. Key event filtering (with key.enter):</h3>\n              bind to Angular's keyup.enter pseudo-event. Then Angular calls the\n              event handler only when the user presses Enter.\n              <div style={titles}>\n                <PrismCode\n                  code={keyEvents}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>7. On blur</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={onBlur}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(AngularFor);\n"]},"metadata":{},"sourceType":"module"}