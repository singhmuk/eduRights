{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/paginations.js\";\nimport React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\nconst titles = {\n  backgroundColor: \"#F0F8FF\",\n  padding: \"1px\",\n  fontSize: \"16px\"\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst pagination = `\n//pagination.component.ts.ts\nimport { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-pagination',\n  template: '\n  < div >\n  <div [ngClass] = \"currentPage === 1 && 'pagination__button--disabled'\"\n    (click) = \"onFirstPage()\" >\n    First\n  </div >\n  <div [ngClass] = \"currentPage === 1 && 'pagination__button--disabled'\"\n    (click) = \"onPreviousPage()\" >\n    Previous\n  </div >\n  <input (input) = \"onSetPage($event)\"[value] = \"currentPage\" > / <span>{{allPagesNumber}}</span >\n    <div [ngClass] = \"currentPage === allPagesNumber && 'pagination__button--disabled'\"\n      (click) = \"onNextPage()\" >\n      Next\n  </div >\n  <div [ngClass] = \"currentPage === allPagesNumber && 'pagination__button--disabled'\"\n    (click) = \"onLastPage()\" >\n    Last\n  </div >\n</div >\n  '})\nexport class PaginationComponent {\n  @Input() itemsPerPage: number;\n  @Input() itemsNumber: number;\n  @Input() allPagesNumber: number;\n  @Output() changePage: EventEmitter<number> = new EventEmitter<number>();\n  private _currentPage: number = 1;\n\nget currentPage(): number {\n    return this._currentPage;\n  }\n\n  set currentPage(page) {\n    this._currentPage = page;\n    this.changePage.emit(this.currentPage);\n  }\n\n  onSetPage(event): void {\n    this.currentPage = event.target.value;\n  }\n\n  onFirstPage(): void {\n    this.currentPage = 1;\n  }\n\n  onLastPage(): void {\n    this.currentPage = this.allPagesNumber;\n  }\n  onNextPage(): void {\n    this.currentPage += 1;\n  }\n\n  onPreviousPage(): void {\n    this.currentPage -= 1;\n  }\n}\n\n\n//data-list.component.ts\n@Component({\n  selector: 'app-data-list',\n  template: '\n  <p *ngFor=\"let item of postsData\">\n    {{item.id}} - {{item.title}}\n        </p>\n  '})\nexport class DataListComponent implements OnInit {\n  @Input() postsData: any = [];\n\n  ngOnInit(): void {}\n}\n\n\n//app.component.ts\ninterface IData {\n  useId: number;\n  id: number;\n  title: string;\n  body: string;\n}\n\n@Component({\n  selector: 'app-root',\n  template: '\n  <div>\n  <h1>Angular Pagination</h1>\n  <app-data-list [postsData] = \"displayedData\"></app-data - list>\n  <app-pagination [allPagesNumber] = \"allPages\" (changePage) = \"onPageChange($event)\"></app - pagination>\n</div >',\n  })\nexport class AppComponent  {\n    fetchedData: IData[] = [];\n  displayedData: IData[] = [];\n  itemsPerPage: number = 10;\n  allPages: number;\n\n  constructor(private http: HttpClient) {\n    this.fetchData();\n  }\n\n  fetchData(): void {\n    const dataConfig$ = this.http.get('https://jsonplaceholder.typicode.com/posts');\n    dataConfig$.subscribe((data: any) => {\n        this.fetchedData = data;\n        this.onPageChange();\n        this.allPages = Math.ceil(this.fetchedData.length / this.itemsPerPage);\n      }\n    );\n  }\n\n  onPageChange(page: number = 1): void {\n    const startItem = (page - 1) * this.itemsPerPage;\n    const endItem = page * this.itemsPerPage;\n    this.displayedData = this.fetchedData.slice(startItem, endItem);\n  }\n}\n`.trim();\nconst scrollTop = `\n@Component({\n  selector: 'app-root',\n  template: '\n  <li *ngFor=\"let product of Images; let  j = index;\">\n    <img [src] = \"product.image\">\n        </li >\n\n  <div (click) = \"scrollToTop()\">\n    scrollToTop \n        </div>\n      '})\n\nexport class AppComponent  {\nscrollToTop(){\n  document.body.scrollTop = document.documentElement.scrollTop = 0;\n}\n   Images = [\n    {ID:1, image: 'https://material-components-web.appspot.com/images/photos/3x2/16.jpg'},\n    {ID:2, image: 'https://material-components-web.appspot.com/images/photos/3x2/16.jpg'}\n  ];\n}\n`.trim();\nconst startRatings = `\n//html\n<ul *ngFor=\"let star of stars\" style=\"display: inline-block\">\n    <li (click) = \"countStar(star)\">\n      <i class=\"fa fa-star\">start</i>\n        </li> \n      </ul>\n\n      \nexport class AppComponent  {\n    stars: number[] = [1, 2, 3, 4, 5];\n    selectedValue: number;\n\n    countStar(star) {\n      //store selected values\n      this.selectedValue = star;\n      console.log('Value of star', this.selectedValue);\n    }\n}`.trim();\n\nclass Paginations extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \"1. Paginations\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: pagination,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, \"2. Scroll-Top\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: scrollTop,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, \"3. Star Rating\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: startRatings,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default withStyles(styles)(Paginations);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/paginations.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","pagination","trim","scrollTop","startRatings","Paginations","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst pagination = `\n//pagination.component.ts.ts\nimport { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-pagination',\n  template: '\n  < div >\n  <div [ngClass] = \"currentPage === 1 && 'pagination__button--disabled'\"\n    (click) = \"onFirstPage()\" >\n    First\n  </div >\n  <div [ngClass] = \"currentPage === 1 && 'pagination__button--disabled'\"\n    (click) = \"onPreviousPage()\" >\n    Previous\n  </div >\n  <input (input) = \"onSetPage($event)\"[value] = \"currentPage\" > / <span>{{allPagesNumber}}</span >\n    <div [ngClass] = \"currentPage === allPagesNumber && 'pagination__button--disabled'\"\n      (click) = \"onNextPage()\" >\n      Next\n  </div >\n  <div [ngClass] = \"currentPage === allPagesNumber && 'pagination__button--disabled'\"\n    (click) = \"onLastPage()\" >\n    Last\n  </div >\n</div >\n  '})\nexport class PaginationComponent {\n  @Input() itemsPerPage: number;\n  @Input() itemsNumber: number;\n  @Input() allPagesNumber: number;\n  @Output() changePage: EventEmitter<number> = new EventEmitter<number>();\n  private _currentPage: number = 1;\n\nget currentPage(): number {\n    return this._currentPage;\n  }\n\n  set currentPage(page) {\n    this._currentPage = page;\n    this.changePage.emit(this.currentPage);\n  }\n\n  onSetPage(event): void {\n    this.currentPage = event.target.value;\n  }\n\n  onFirstPage(): void {\n    this.currentPage = 1;\n  }\n\n  onLastPage(): void {\n    this.currentPage = this.allPagesNumber;\n  }\n  onNextPage(): void {\n    this.currentPage += 1;\n  }\n\n  onPreviousPage(): void {\n    this.currentPage -= 1;\n  }\n}\n\n\n//data-list.component.ts\n@Component({\n  selector: 'app-data-list',\n  template: '\n  <p *ngFor=\"let item of postsData\">\n    {{item.id}} - {{item.title}}\n        </p>\n  '})\nexport class DataListComponent implements OnInit {\n  @Input() postsData: any = [];\n\n  ngOnInit(): void {}\n}\n\n\n//app.component.ts\ninterface IData {\n  useId: number;\n  id: number;\n  title: string;\n  body: string;\n}\n\n@Component({\n  selector: 'app-root',\n  template: '\n  <div>\n  <h1>Angular Pagination</h1>\n  <app-data-list [postsData] = \"displayedData\"></app-data - list>\n  <app-pagination [allPagesNumber] = \"allPages\" (changePage) = \"onPageChange($event)\"></app - pagination>\n</div >',\n  })\nexport class AppComponent  {\n    fetchedData: IData[] = [];\n  displayedData: IData[] = [];\n  itemsPerPage: number = 10;\n  allPages: number;\n\n  constructor(private http: HttpClient) {\n    this.fetchData();\n  }\n\n  fetchData(): void {\n    const dataConfig$ = this.http.get('https://jsonplaceholder.typicode.com/posts');\n    dataConfig$.subscribe((data: any) => {\n        this.fetchedData = data;\n        this.onPageChange();\n        this.allPages = Math.ceil(this.fetchedData.length / this.itemsPerPage);\n      }\n    );\n  }\n\n  onPageChange(page: number = 1): void {\n    const startItem = (page - 1) * this.itemsPerPage;\n    const endItem = page * this.itemsPerPage;\n    this.displayedData = this.fetchedData.slice(startItem, endItem);\n  }\n}\n`.trim();\n\nconst scrollTop = `\n@Component({\n  selector: 'app-root',\n  template: '\n  <li *ngFor=\"let product of Images; let  j = index;\">\n    <img [src] = \"product.image\">\n        </li >\n\n  <div (click) = \"scrollToTop()\">\n    scrollToTop \n        </div>\n      '})\n\nexport class AppComponent  {\nscrollToTop(){\n  document.body.scrollTop = document.documentElement.scrollTop = 0;\n}\n   Images = [\n    {ID:1, image: 'https://material-components-web.appspot.com/images/photos/3x2/16.jpg'},\n    {ID:2, image: 'https://material-components-web.appspot.com/images/photos/3x2/16.jpg'}\n  ];\n}\n`.trim();\n\nconst startRatings = `\n//html\n<ul *ngFor=\"let star of stars\" style=\"display: inline-block\">\n    <li (click) = \"countStar(star)\">\n      <i class=\"fa fa-star\">start</i>\n        </li> \n      </ul>\n\n      \nexport class AppComponent  {\n    stars: number[] = [1, 2, 3, 4, 5];\n    selectedValue: number;\n\n    countStar(star) {\n      //store selected values\n      this.selectedValue = star;\n      console.log('Value of star', this.selectedValue);\n    }\n}`.trim();\n\nclass Paginations extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Paginations</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={pagination}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Scroll-Top</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={scrollTop}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Star Rating</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={startRatings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(Paginations);\n"]},"metadata":{},"sourceType":"module"}