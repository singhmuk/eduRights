{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/arrayAlgo.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst strArray = `\nfunction fun() {\n  const arr1 = [1, 5, 10, 20, 40, 80];\n  const arr2 = [6, 7, 20, 80, 100];\n  const arr3 = [3, 4, 15, 20, 30, 70, 80, 120];\n  let result = [];\n  let i = 0, j = 0, k = 0;\n\n  while (i < arr1.length && j < arr2.length && k < arr3.length) {\n      if (arr1[i] === arr2[j] && arr2[j] === arr3[k]) {\n          result.push(arr1[i]);\n          i++;\n          j++;\n          k++;\n      } else if (arr1[i] < arr2[j]) {\n          i++;\n      } else if (arr2[j] < arr3[k]) {\n          j++;\n      } else {\n          k++;\n      }\n  }\n\n  console.log(result);  \n}\n\n\nfun()\n`.trim();\nconst Sort = `\nlet i, j, arr=[0,9,8,7,6];\nvar max=0;\n\nfor(i=0; i<arr.length; i++){\n  for(j=i; j<arr.length; j++){\n    if(arr[i]>arr[j]){\n      var temp=arr[i];\n      arr[i]=arr[j];\n      arr[j]=temp;\n    }\n  }\n}\n\nconsole.log(arr);\n\n\n//Greatest Product Of 3\nmax = arr[arr.length-1] * arr[arr.length-2] * arr[arr.length-3]\nconsole.log(max);\n\n\n//optimsed\nconst arr = [0, 9, 8, 7, 6];\narr.sort((a, b) => a - b);\n\nconsole.log(arr);\n`.trim();\nconst duplicates = `\nfunction removeDup(){\n  const arr = [1,2,3,4,3,0,9,0,1];\n  const result=[];\n  \n  for(let i=0; i<arr.length;i++){\n      let count=0;\n     // for(let j=0;j<result.length;j++){\n        for(let j=0;j<arr.length;j++){                                     //Remove Duplicates\n       // if(arr[i]==result[j]) count +=1;                                 //Unique Character\n          if(arr[i]==arr[j]) count +=1;\n      }\n      if(count==1){                                                      //RD\n   // if(count==0){                                                      //UC\n          result.push(arr[i]);\n      }  \n  }\n  \n  console.log(result)\n}\n\nremoveDup();\n`.trim();\nconst compare_array = `\nfunction compare(){\n  const arr=[1,2,3,4,5,6];\n  const arr2=[5,6,7,8,9,0];\n  const result=[];\n  \n  for(let i=0; i<arr.length; i++){\n    if(arr2.indexOf(arr[i]) !== -1){\n      result.push(arr[i]);\n    }\n  }\n  console.log(result)\n}\n\ncompare();\n\n\n//Unique name\nfunction getUnique(){\n  var names = [\"John\", \"Peter\", \"Clark\", \"Harry\", \"John\", \"Alice\"];\n  var newName = [];\n  \n  for(i=0; i < names.length; i++){\n      if(newName.indexOf(names[i]) === -1) {\n          newName.push(names[i]);\n      }\n  }\n  console.log(newName);\n}\n\ngetUnique();\n`.trim();\nconst findMedianSortedArrays = `\nconst median = () => {\n  const arr = [1,12,15,26,38];\n  const arr2 = [4,3,1];\n  let arrMedian=[];\n\n  const result = [...arr, ...arr2].sort((a, b) => a - b);\n  const half = result.length / 2 | 0;\n  \n  if (result.length % 2){\n      arrMedian=result[half];\n  }\n  else{\n      arrMedian=((result[half] + result[half-1])/2);\n  }\n  return console.log(arrMedian);\n}\n\nmedian()\n`.trim();\nconst plusOne = `\nfunction plusOne(){\n  const arr=[1,2,3];\n  let result=[], result2=[];\n\n  for(let i=0; i<arr.length; i++){\n    result.push(arr[i]);\n    result2 = arr[arr.length-1]+1\n  }\n\n  result.pop();\n  result.push(result2);\n  console.log(result)\n}\n\nplusOne();\n`.trim();\nconst bulb = ``.trim();\nconst arrayCounter = `\nfunction fun(arr) {\n  let maxDepth = 0;\n  let stack = arr.map(element => ({ nestedArr: element, depth: 1 }));\n\n  while (stack.length > 0) {\n    const { nestedArr, depth } = stack.pop();\n\n    if (!Array.isArray(nestedArr)) {\n      maxDepth = Math.max(maxDepth, depth); // If it's not an array, it's the end of a branch\n    } else {\n      for (const element of nestedArr) { //push its elements to the stack with increased depth\n        stack.push({ nestedArr: element, depth: depth + 1 });\n      }\n    }\n  }\n\n  console.log(maxDepth);\n}\n\nfun([[3]]);\nfun([[[[[[[9]]]]]]]); \nfun([]); \n`.trim();\nconst countElements = `\nfunction fun() {\n  const nums = [-7, -3, 2, 3, 11];\n  const n = nums.length;\n  let left = 0;\n  let right = n - 1;\n  const result = [n]\n\n  for (let index = n - 1; index >= 0; index--) {\n      const leftSquare = nums[left] ** 2;\n      const rightSquare = nums[right] ** 2;\n\n      if (leftSquare > rightSquare) {\n          result[index] = leftSquare;\n          left++;\n      } else {\n          result[index] = rightSquare;\n          right--;\n      }\n  }\n\n  return console.log(result);  \n}\n\nfun()\n`.trim();\nconst occurings = `\nfunction fun() {\n  const arr = [1, 2, 3, 4, 5, 6, 1, 2, 1, 3];\n  const hash = {};\n\n  for (let i = 0; i < arr.length; i++) {\n    if (hash[arr[i]]) {\n      hash[arr[i]] += 1;\n    } else {\n      hash[arr[i]] = 1;\n    }\n  }\n\nconsole.log(hash);\n}\n\nfun();`.trim();\nconst find132pattern = `\nfunction pattern123() {\n  const arr=[1,2,3,4];\n  const number = 132;\n  const result=[];\n\n  const target = number.toString();\n  [target]\n\n  for(let i=0; i<arr.length; i++){\n    if(target.indexOf(arr[i]) !== -1){\n      result.push(arr[i]);\n    }\n  }\n  console.log(result)\n}\n\npattern123();\n`.trim();\nconst numIdenticalPairs = `\nfunction fun(){\n  const arr=[1,2,3,1,1,3];\n  const result=[];\n  let count=0;\n\n  for(let i=0; i<arr.length; i++){\n    for(let j=i+1; j<arr.length; j++){\n      if(arr[i]==arr[j]){\n        result.push([arr[i], arr[j]]);\n        count++;\n      }\n    }\n  }\n  console.log(result)\n  console.log(count)\n}\n\nfun();\n`.trim();\nconst removeElement = `\nfunction fun(){\n  const arr=[1,2,3,5,4];\n  const num=5;\n\n  const index = arr.indexOf(num);\n  arr.splice(index,1)\n  console.log(arr)\n}\n\nfun();\n`.trim();\nconst shuffle = `\nfunction fun(){\n  const arr = [7,8,9,10];\n\n  for(let i=0;i<arr.length;i++){\n    const j = Math.floor(Math.random() * (i + 1));\n    let temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  }\n  console.log(arr);\n}\n\nfun();\n`.trim();\nconst searchRange = `\nfunction fun() {\n  const nums = [5, 7, 7, 8, 8, 10];\n  const target = 8;\n  const result = [];\n  \n  for (let i = 0; i < nums.length; i++) {                  // Find the first occurrence\n      if (nums[i] === target) {\n          result[0] = i;\n          break;\n      }\n  }\n \n  for (let i = nums.length - 1; i >= 0; i--) {             // Find the last occurrence\n      if (nums[i] === target) {\n          result[1] = i;\n          break;\n      }\n  }\n  \n  return result;\n}\n\nconsole.log(fun());  \n`.trim();\nconst combinationSum = `\nfunction combinationSum(){\n  const arr=[1,2,3,6,4,5];\n  const target = 7;\n  let result=[];\n\n  for(let i=0; i<arr.length; i++){\n    for(let j=i; j<arr.length; j++){\n      if(arr[i]+arr[j]==target){\n        result.push(arr[i],arr[j])\n      }\n    }\n  }  \n  console.log(result);\n}\n\ncombinationSum();\n`.trim();\nconst missing_number = `\nfunction missNum() {\n  let i, arr=[0,1,2,4,5], exactsum=0, result=0;\n  exactsum = arr.reduce((a, b) => a + b);\n\n  for (i=0; i<=arr.length; i++) {\n    result += i\n  }\n  \n  result -= exactsum;\n  console.log('Missing Number', result)\n}\n\nmissNum();\n `.trim();\nconst findMissingRanges = `\nconst arr = [1,2,4,8];\nconst missing = [];\nvar count = 1;\n\nfor (let i=0; i<arr.length; i++) {\n  if (arr[i] !== count) {\n    missing.push(count);\n    i--;\n  }\n  count++;\n}\n\nconsole.log(missing);\n`.trim();\nconst sortname = `\nvar objs = [ \n  { first: 'Mukesh', last: 'Jamf' },\n  { first: 'Rakesh', last: 'Bodine' },\n  { first: 'Bicky', last: 'Prentice' }\n];\n\nfunction fun(){\n  for(let i=0;i<objs.length;i++){\n    for(let j=i;j<objs.length;j++){\n      if(objs[i].first>objs[j].first){\n        let temp=objs[i];\n        objs[i]=objs[j];\n        objs[j]=temp;\n      }\n    }\n    console.log(objs[i])\n  }\n}\n\nfun()\n\n//2\nfunction compare(a, b) {\n  if (a.first < b.first){\n    return -1;\n  }\n  if (a.first > b.first){\n    return 1;\n  }\n  return 0;\n}\n\nconst obj = objs.sort(compare);\nconsole.log(obj)\n`.trim();\nconst concatarr = `\nconst arr1 =[{id:1,name:\"sai\"}, {id:2,name: \"King\"}];\nconst arr2 = [{id:1,age:23},{id:2,age:24}];\n\nfunction fun(){\n   const result = arr1[0].name.concat(arr2[1].age);\n   console.log(result)\n}\n\nfun();\n`.trim();\nconst permute = `\nfunction fun() {\n  const nums = [2, 3, 1, 1, 4];\n  let maxReach = 0;\n\n  for (let i = 0; i < nums.length; i++) {\n      if (i > maxReach) {\n          return false;                          // If we can't reach the current index\n      }\n\n      maxReach = Math.max(maxReach, i + nums[i]);\n\n      if (maxReach >= nums.length - 1) {\n          return true;                           // If we can reach the last index\n      }\n  }\n\n  return true;                                   //If we can reach the last index (this line should not be reached)\n}\n\n\nconsole.log(fun()); \n`.trim();\nconst containsDuplicate = `\nfunction containsDuplicate(nums){\n  const map = {}\n  \n  for (num of nums) {\n    if (map[num]) {\n      return true\n    }\n    map[num] = 1\n  }\n  return false\n}\n\nconsole.log(containsDuplicate([1,2,3,1]))\n`.trim();\nconst summaryRanges = `\nfunction summaryRanges(nums) {\n  let start = null\n  const result = []\n\n  for (let i=0; i<nums.length; i++) {\n    if (start === null) {\n      start = nums[i]\n    }\n    if (nums[i] === nums[i + 1] - 1) continue;\n\n    if (nums[i] === start) {\n      result.push(nums[i].toString())\n      start = null\n    } \n    else {\n      result.push('$'{start}->'$'{nums[i]}')\n      start = null\n    }\n  }\n  \n  return result\n}\n\nconsole.log(summaryRanges([1,2,3,4,6,7,9]))\n`.trim();\nconst productExceptSelf = `\nfunction fun() {\n  const arr = [1, 2, 3, 4];\n  const result = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    let prod = 1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[i]!==arr[j]) {\n        prod *= arr[j];\n      }\n    }\n    result.push(prod); \n    console.log(prod);\n  }\n}\n\nfun();\n`.trim();\nconst countSmaller = `\nfunction fun(){\n  const arr = [5,2,6,1];\n  const result = arr.map(() => 0);\n\n  for(let i=0;i<arr.length;i++){\n    for(let j=(i+1);j<arr.length;j++){\n      if(arr[i]>arr[j]){\n        result[i] +=1;\n      }\n    }\n  }\n  console.log(result)\n}\n\nfun()\n`.trim();\nconst replaceNum = `\nfunction fun(){\n  const arr=[1,2,3,5,4];\n  const num=5;\n  const newnum=6;\n\n  const index=arr.indexOf(num)\n  arr.splice(index,1,newnum)\n\n  console.log(arr)\n}\n\nfun();\n`.trim();\nconst occurence = `\nfunction fun() {\n  const arr = [1, 2, 3, 4, 5, 6];\n  const target = 6;\n  const hash = {};\n  const result = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (hash[target - num] !== undefined) {\n      result.push(hash[target - num], num);\n    }\n\n    hash[num] = num;\n  }\n\n  return console.log(result);\n}\n\nfun();\n\n`.trim();\nconst flateArr = `\n// arr = [10,'h',2,'k',['e','z','y','g'],[44,67,'b','c','a'],[25,100,101,'m','l'],'f',60,55,'x']\n// output [a,b,c,..., 1,2,3....]\n\nconst newArr = [];\nfor (let i = 0; i < arr.length; i++) {\n  if (Array.isArray(arr[i])) {\n    newArr.push(...arr[i]);\n  } else {\n    newArr.push(arr[i]);\n  }\n}\n\nconst result = [];\nfor (let i = 0; i < newArr.length; i++) {\n  for (let j = i; j < newArr.length; j++) {\n    if (newArr[i] > newArr[j]) {\n      let temp = newArr[i];\n      newArr[i] = newArr[j];\n      newArr[j] = temp;\n    }\n  }\n  result.push(newArr[i]);\n}\n\nconsole.log(result);\n\n\n// 2. Separate number and string.\nconst arr=[\n  2,   'a', 10,  'b', 'c', 'e',\n  'f', 'g', 25,  44,  'h', 'k',\n  'l', 55,  60,  67,  'm', 'x',\n  'y', 100, 101, 'z'\n]\nconst str=[], num=[];\n\nfor(let i=0; i<arr.length; i++){\n    if(typeof arr[i]==='number'){\n        num.push(arr[i])\n    }else if(typeof arr[i]==='string'){\n        str.push(arr[i])\n    }\n}\n\nconsole.log(num);\nconsole.log(str);\n`.trim();\n\nclass DSLogic2 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663\n      },\n      __self: this\n    }, \"1. Intersection of 3 Sorted Arrays\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: strArray,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673\n      },\n      __self: this\n    }, \"2. Sort\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Sort,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682\n      },\n      __self: this\n    }, \"Time: \"), \"O(n^2), where n is the length of the array arr. This is because the for loop iterates over the array arr twice, and the inner for loop iterates over the array arr once.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683\n      },\n      __self: this\n    }, \"Space: \"), \"O(1), where n is the length of the array arr. This is because the algorithm only uses the variables i, j, temp, and arr.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684\n      },\n      __self: this\n    }, \"In simple words, the code takes a quadratic amount of time to run, and it uses a constant amount of space.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 686\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688\n      },\n      __self: this\n    }, \"3. Remove Duplicates\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: duplicates,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 696\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698\n      },\n      __self: this\n    }, \"4. Contains Duplicate.\"), \"Given an array of integers, find if the array contains any duplicates.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700\n      },\n      __self: this\n    }), \"Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 702\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: containsDuplicate,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 709\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710\n      },\n      __self: this\n    }, \"Time: \"), \"O(n), where n is the length of the array nums. This is because the for loop iterates over the array nums once, and the map[num] lookup takes constant time.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711\n      },\n      __self: this\n    }, \"Space: \"), \"O(n), where n is the length of the array nums. This is because the map object can store up to n keys.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712\n      },\n      __self: this\n    }, \"In simple words, the containsDuplicate() function takes a linear amount of time to run, and it uses a linear amount of space.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 714\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 716\n      },\n      __self: this\n    }, \"5. Compare Array\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 717\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: compare_array,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 718\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 726\n      },\n      __self: this\n    }, \"6. Sort Those Squares.\"), \"\\\"Sort Those Squares\\\" is a problem where you're given an array of integers, some of which could be negative, and you're asked to sort the squares of those integers in ascending order.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 729\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: countElements,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 730\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 736\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 738\n      },\n      __self: this\n    }, \"6. Occurence of Elements.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 739\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: occurings,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 740\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 747\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 747\n      },\n      __self: this\n    }, \"Time: \"), \"O(n), where n is the length of the array arr. This is because the for loop iterates over the array arr once, and the hash[arr[i]] lookup takes constant time.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 747\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 748\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 748\n      },\n      __self: this\n    }, \"Space: \"), \"O(n), where n is the length of the array arr. This is because the hash object can store up to n keys.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 748\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 749\n      },\n      __self: this\n    }, \"In simple words, the function fun() takes a linear amount of time to run, and it uses a linear amount of space.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 751\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753\n      },\n      __self: this\n    }, \"6. Target Elements.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: occurence,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 755\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 761\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 763\n      },\n      __self: this\n    }, \"6. Flat Arr.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 764\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: flateArr,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 765\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 771\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 773\n      },\n      __self: this\n    }, \"7. 132 Pattern.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 774\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [1,2,3,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 774\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 775\n      },\n      __self: this\n    }, \"Output: \"), \"false\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 775\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 776\n      },\n      __self: this\n    }, \"Explanation: \"), \"There is no 132 pattern in the sequence.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 777\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: find132pattern,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 778\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 784\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 786\n      },\n      __self: this\n    }, \"8. Combination Sum\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 787\n      },\n      __self: this\n    }, \"Input: \"), \"candidates = [2,3,6,7], target = 7,\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 787\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 788\n      },\n      __self: this\n    }, \"A solution set is: \"), \"[ [7],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 790\n      },\n      __self: this\n    }), \"[2,2,3]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 791\n      },\n      __self: this\n    }), \"]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 793\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: combinationSum,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 794\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 800\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 802\n      },\n      __self: this\n    }, \"9. Remove Element\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 803\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: removeElement,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 804\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 810\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 812\n      },\n      __self: this\n    }, \"10. Replace Element\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 813\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: replaceNum,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 814\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 820\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 822\n      },\n      __self: this\n    }, \"10. Shuffle the Array.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 823\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: shuffle,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 824\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 830\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 832\n      },\n      __self: this\n    }, \"11. Median of Two Sorted Arrays.\"), \"Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 834\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 835\n      },\n      __self: this\n    }, \"Follow up: \"), \"The overall run time complexity should be O(log (m+n)).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 836\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 838\n      },\n      __self: this\n    }, \"Example 1:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 839\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 840\n      },\n      __self: this\n    }, \"Input: \"), \"nums1 = [1,3], nums2 = [2]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 840\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 841\n      },\n      __self: this\n    }, \"Output: \"), \"2.00000\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 841\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 842\n      },\n      __self: this\n    }, \"Explanation: \"), \"merged array = [1,2,3] and median is 2.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 842\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 842\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 843\n      },\n      __self: this\n    }, \"Example 2: \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 843\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 845\n      },\n      __self: this\n    }, \"Input: \"), \"nums1 = [1,2], nums2 = [3,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 845\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 846\n      },\n      __self: this\n    }, \"Output: \"), \"2.50000\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 846\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 847\n      },\n      __self: this\n    }, \"Explanation: \"), \"merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 848\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: findMedianSortedArrays,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 849\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 855\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 857\n      },\n      __self: this\n    }, \"12. Plus One.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 858\n      },\n      __self: this\n    }, \"Input: \"), \"digits = [1,2,3]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 858\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 859\n      },\n      __self: this\n    }, \"Output: \"), \"[1,2,4]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 860\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: plusOne,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 861\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 867\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 869\n      },\n      __self: this\n    }, \"13. Missing Number\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 870\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: missing_number,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 871\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 877\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 879\n      },\n      __self: this\n    }, \"14. Missing Ranges.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 880\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: findMissingRanges,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 881\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 887\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 889\n      },\n      __self: this\n    }, \"15. Sort name.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 890\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: sortname,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 891\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 897\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 899\n      },\n      __self: this\n    }, \"16. Concat 2 array on the basis of id\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 900\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: concatarr,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 901\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 907\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 909\n      },\n      __self: this\n    }, \"17. Find First and Last Position of Element in Sorted Array\"), \"Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 911\n      },\n      __self: this\n    }), \"Your algorithm's runtime complexity must be in the order of O(log n).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 912\n      },\n      __self: this\n    }), \"If the target is not found in the array, return [-1, -1].\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 914\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 916\n      },\n      __self: this\n    }, \"Example 1:\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 917\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [5,7,7,8,8,10], target = 8\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 917\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 918\n      },\n      __self: this\n    }, \"Output: \"), \"[3,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 918\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 918\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 919\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: searchRange,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 920\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 927\n      },\n      __self: this\n    }, \"18. Jump Game.\"), \"Given an array of non-negative integers representing the maximum jump length from each position. The goal is to determine if you can reach the last index of the array starting from the first position.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 930\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: permute,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 931\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 937\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 939\n      },\n      __self: this\n    }, \"19. Number of Good Pairs.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 940\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [1,2,3,1,1,3] \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 940\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 941\n      },\n      __self: this\n    }, \"Output: \"), \"4 \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 941\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 942\n      },\n      __self: this\n    }, \"Explanation: \"), \"There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 943\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: numIdenticalPairs,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 944\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 950\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 952\n      },\n      __self: this\n    }, \"20. Product of Array Except Self.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 953\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: productExceptSelf,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 954\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 960\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 962\n      },\n      __self: this\n    }, \"21. Count of Smaller Numbers After Self.\"), \"You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 964\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 965\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [5,2,6,1]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 965\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 966\n      },\n      __self: this\n    }, \"Output: \"), \"[2,1,1,0]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 966\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 967\n      },\n      __self: this\n    }, \"Explanation: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 968\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 969\n      },\n      __self: this\n    }, \"To the right of 5 there are 2 smaller elements (2 and 1).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 970\n      },\n      __self: this\n    }, \"To the right of 2 there is only 1 smaller element (1).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 971\n      },\n      __self: this\n    }, \"To the right of 6 there is 1 smaller element (1).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 972\n      },\n      __self: this\n    }, \"To the right of 1 there is 0 smaller element.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 974\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: countSmaller,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 975\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 981\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 983\n      },\n      __self: this\n    }, \"22. Array Counter\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 984\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: arrayCounter,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 985\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 991\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 993\n      },\n      __self: this\n    }, \"22. Array Counter\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 994\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: arrayCounter,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 995\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1001\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1003\n      },\n      __self: this\n    }, \"23. Summary Ranges.\"), \"Given a sorted integer array without duplicates, return the summary of its ranges.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1005\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: summaryRanges,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1006\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(DSLogic2);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/arrayAlgo.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","strArray","trim","Sort","duplicates","compare_array","findMedianSortedArrays","plusOne","bulb","arrayCounter","countElements","occurings","find132pattern","numIdenticalPairs","removeElement","shuffle","searchRange","combinationSum","missing_number","findMissingRanges","sortname","concatarr","permute","containsDuplicate","summaryRanges","productExceptSelf","countSmaller","replaceNum","occurence","flateArr","DSLogic2","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst strArray = `\nfunction fun() {\n  const arr1 = [1, 5, 10, 20, 40, 80];\n  const arr2 = [6, 7, 20, 80, 100];\n  const arr3 = [3, 4, 15, 20, 30, 70, 80, 120];\n  let result = [];\n  let i = 0, j = 0, k = 0;\n\n  while (i < arr1.length && j < arr2.length && k < arr3.length) {\n      if (arr1[i] === arr2[j] && arr2[j] === arr3[k]) {\n          result.push(arr1[i]);\n          i++;\n          j++;\n          k++;\n      } else if (arr1[i] < arr2[j]) {\n          i++;\n      } else if (arr2[j] < arr3[k]) {\n          j++;\n      } else {\n          k++;\n      }\n  }\n\n  console.log(result);  \n}\n\n\nfun()\n`.trim();\n\nconst Sort = `\nlet i, j, arr=[0,9,8,7,6];\nvar max=0;\n\nfor(i=0; i<arr.length; i++){\n  for(j=i; j<arr.length; j++){\n    if(arr[i]>arr[j]){\n      var temp=arr[i];\n      arr[i]=arr[j];\n      arr[j]=temp;\n    }\n  }\n}\n\nconsole.log(arr);\n\n\n//Greatest Product Of 3\nmax = arr[arr.length-1] * arr[arr.length-2] * arr[arr.length-3]\nconsole.log(max);\n\n\n//optimsed\nconst arr = [0, 9, 8, 7, 6];\narr.sort((a, b) => a - b);\n\nconsole.log(arr);\n`.trim()\n\nconst duplicates = `\nfunction removeDup(){\n  const arr = [1,2,3,4,3,0,9,0,1];\n  const result=[];\n  \n  for(let i=0; i<arr.length;i++){\n      let count=0;\n     // for(let j=0;j<result.length;j++){\n        for(let j=0;j<arr.length;j++){                                     //Remove Duplicates\n       // if(arr[i]==result[j]) count +=1;                                 //Unique Character\n          if(arr[i]==arr[j]) count +=1;\n      }\n      if(count==1){                                                      //RD\n   // if(count==0){                                                      //UC\n          result.push(arr[i]);\n      }  \n  }\n  \n  console.log(result)\n}\n\nremoveDup();\n`.trim()\n\nconst compare_array = `\nfunction compare(){\n  const arr=[1,2,3,4,5,6];\n  const arr2=[5,6,7,8,9,0];\n  const result=[];\n  \n  for(let i=0; i<arr.length; i++){\n    if(arr2.indexOf(arr[i]) !== -1){\n      result.push(arr[i]);\n    }\n  }\n  console.log(result)\n}\n\ncompare();\n\n\n//Unique name\nfunction getUnique(){\n  var names = [\"John\", \"Peter\", \"Clark\", \"Harry\", \"John\", \"Alice\"];\n  var newName = [];\n  \n  for(i=0; i < names.length; i++){\n      if(newName.indexOf(names[i]) === -1) {\n          newName.push(names[i]);\n      }\n  }\n  console.log(newName);\n}\n\ngetUnique();\n`.trim();\n\nconst findMedianSortedArrays = `\nconst median = () => {\n  const arr = [1,12,15,26,38];\n  const arr2 = [4,3,1];\n  let arrMedian=[];\n\n  const result = [...arr, ...arr2].sort((a, b) => a - b);\n  const half = result.length / 2 | 0;\n  \n  if (result.length % 2){\n      arrMedian=result[half];\n  }\n  else{\n      arrMedian=((result[half] + result[half-1])/2);\n  }\n  return console.log(arrMedian);\n}\n\nmedian()\n`.trim();\n\nconst plusOne = `\nfunction plusOne(){\n  const arr=[1,2,3];\n  let result=[], result2=[];\n\n  for(let i=0; i<arr.length; i++){\n    result.push(arr[i]);\n    result2 = arr[arr.length-1]+1\n  }\n\n  result.pop();\n  result.push(result2);\n  console.log(result)\n}\n\nplusOne();\n`.trim();\n\nconst bulb = ``.trim();\n\nconst arrayCounter = `\nfunction fun(arr) {\n  let maxDepth = 0;\n  let stack = arr.map(element => ({ nestedArr: element, depth: 1 }));\n\n  while (stack.length > 0) {\n    const { nestedArr, depth } = stack.pop();\n\n    if (!Array.isArray(nestedArr)) {\n      maxDepth = Math.max(maxDepth, depth); // If it's not an array, it's the end of a branch\n    } else {\n      for (const element of nestedArr) { //push its elements to the stack with increased depth\n        stack.push({ nestedArr: element, depth: depth + 1 });\n      }\n    }\n  }\n\n  console.log(maxDepth);\n}\n\nfun([[3]]);\nfun([[[[[[[9]]]]]]]); \nfun([]); \n`.trim()\n\nconst countElements = `\nfunction fun() {\n  const nums = [-7, -3, 2, 3, 11];\n  const n = nums.length;\n  let left = 0;\n  let right = n - 1;\n  const result = [n]\n\n  for (let index = n - 1; index >= 0; index--) {\n      const leftSquare = nums[left] ** 2;\n      const rightSquare = nums[right] ** 2;\n\n      if (leftSquare > rightSquare) {\n          result[index] = leftSquare;\n          left++;\n      } else {\n          result[index] = rightSquare;\n          right--;\n      }\n  }\n\n  return console.log(result);  \n}\n\nfun()\n`.trim();\n\nconst occurings = `\nfunction fun() {\n  const arr = [1, 2, 3, 4, 5, 6, 1, 2, 1, 3];\n  const hash = {};\n\n  for (let i = 0; i < arr.length; i++) {\n    if (hash[arr[i]]) {\n      hash[arr[i]] += 1;\n    } else {\n      hash[arr[i]] = 1;\n    }\n  }\n\nconsole.log(hash);\n}\n\nfun();`.trim();\n\nconst find132pattern = `\nfunction pattern123() {\n  const arr=[1,2,3,4];\n  const number = 132;\n  const result=[];\n\n  const target = number.toString();\n  [target]\n\n  for(let i=0; i<arr.length; i++){\n    if(target.indexOf(arr[i]) !== -1){\n      result.push(arr[i]);\n    }\n  }\n  console.log(result)\n}\n\npattern123();\n`.trim();\n\nconst numIdenticalPairs = `\nfunction fun(){\n  const arr=[1,2,3,1,1,3];\n  const result=[];\n  let count=0;\n\n  for(let i=0; i<arr.length; i++){\n    for(let j=i+1; j<arr.length; j++){\n      if(arr[i]==arr[j]){\n        result.push([arr[i], arr[j]]);\n        count++;\n      }\n    }\n  }\n  console.log(result)\n  console.log(count)\n}\n\nfun();\n`.trim();\n\nconst removeElement = `\nfunction fun(){\n  const arr=[1,2,3,5,4];\n  const num=5;\n\n  const index = arr.indexOf(num);\n  arr.splice(index,1)\n  console.log(arr)\n}\n\nfun();\n`.trim();\n\nconst shuffle = `\nfunction fun(){\n  const arr = [7,8,9,10];\n\n  for(let i=0;i<arr.length;i++){\n    const j = Math.floor(Math.random() * (i + 1));\n    let temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  }\n  console.log(arr);\n}\n\nfun();\n`.trim();\n\nconst searchRange = `\nfunction fun() {\n  const nums = [5, 7, 7, 8, 8, 10];\n  const target = 8;\n  const result = [];\n  \n  for (let i = 0; i < nums.length; i++) {                  // Find the first occurrence\n      if (nums[i] === target) {\n          result[0] = i;\n          break;\n      }\n  }\n \n  for (let i = nums.length - 1; i >= 0; i--) {             // Find the last occurrence\n      if (nums[i] === target) {\n          result[1] = i;\n          break;\n      }\n  }\n  \n  return result;\n}\n\nconsole.log(fun());  \n`.trim();\n\nconst combinationSum = `\nfunction combinationSum(){\n  const arr=[1,2,3,6,4,5];\n  const target = 7;\n  let result=[];\n\n  for(let i=0; i<arr.length; i++){\n    for(let j=i; j<arr.length; j++){\n      if(arr[i]+arr[j]==target){\n        result.push(arr[i],arr[j])\n      }\n    }\n  }  \n  console.log(result);\n}\n\ncombinationSum();\n`.trim();\n\nconst missing_number = `\nfunction missNum() {\n  let i, arr=[0,1,2,4,5], exactsum=0, result=0;\n  exactsum = arr.reduce((a, b) => a + b);\n\n  for (i=0; i<=arr.length; i++) {\n    result += i\n  }\n  \n  result -= exactsum;\n  console.log('Missing Number', result)\n}\n\nmissNum();\n `.trim()\n\nconst findMissingRanges = `\nconst arr = [1,2,4,8];\nconst missing = [];\nvar count = 1;\n\nfor (let i=0; i<arr.length; i++) {\n  if (arr[i] !== count) {\n    missing.push(count);\n    i--;\n  }\n  count++;\n}\n\nconsole.log(missing);\n`.trim();\n\nconst sortname = `\nvar objs = [ \n  { first: 'Mukesh', last: 'Jamf' },\n  { first: 'Rakesh', last: 'Bodine' },\n  { first: 'Bicky', last: 'Prentice' }\n];\n\nfunction fun(){\n  for(let i=0;i<objs.length;i++){\n    for(let j=i;j<objs.length;j++){\n      if(objs[i].first>objs[j].first){\n        let temp=objs[i];\n        objs[i]=objs[j];\n        objs[j]=temp;\n      }\n    }\n    console.log(objs[i])\n  }\n}\n\nfun()\n\n//2\nfunction compare(a, b) {\n  if (a.first < b.first){\n    return -1;\n  }\n  if (a.first > b.first){\n    return 1;\n  }\n  return 0;\n}\n\nconst obj = objs.sort(compare);\nconsole.log(obj)\n`.trim();\n\nconst concatarr = `\nconst arr1 =[{id:1,name:\"sai\"}, {id:2,name: \"King\"}];\nconst arr2 = [{id:1,age:23},{id:2,age:24}];\n\nfunction fun(){\n   const result = arr1[0].name.concat(arr2[1].age);\n   console.log(result)\n}\n\nfun();\n`.trim();\n\nconst permute = `\nfunction fun() {\n  const nums = [2, 3, 1, 1, 4];\n  let maxReach = 0;\n\n  for (let i = 0; i < nums.length; i++) {\n      if (i > maxReach) {\n          return false;                          // If we can't reach the current index\n      }\n\n      maxReach = Math.max(maxReach, i + nums[i]);\n\n      if (maxReach >= nums.length - 1) {\n          return true;                           // If we can reach the last index\n      }\n  }\n\n  return true;                                   //If we can reach the last index (this line should not be reached)\n}\n\n\nconsole.log(fun()); \n`.trim();\n\nconst containsDuplicate = `\nfunction containsDuplicate(nums){\n  const map = {}\n  \n  for (num of nums) {\n    if (map[num]) {\n      return true\n    }\n    map[num] = 1\n  }\n  return false\n}\n\nconsole.log(containsDuplicate([1,2,3,1]))\n`.trim();\n\nconst summaryRanges = `\nfunction summaryRanges(nums) {\n  let start = null\n  const result = []\n\n  for (let i=0; i<nums.length; i++) {\n    if (start === null) {\n      start = nums[i]\n    }\n    if (nums[i] === nums[i + 1] - 1) continue;\n\n    if (nums[i] === start) {\n      result.push(nums[i].toString())\n      start = null\n    } \n    else {\n      result.push('$'{start}->'$'{nums[i]}')\n      start = null\n    }\n  }\n  \n  return result\n}\n\nconsole.log(summaryRanges([1,2,3,4,6,7,9]))\n`.trim();\n\nconst productExceptSelf = `\nfunction fun() {\n  const arr = [1, 2, 3, 4];\n  const result = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    let prod = 1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[i]!==arr[j]) {\n        prod *= arr[j];\n      }\n    }\n    result.push(prod); \n    console.log(prod);\n  }\n}\n\nfun();\n`.trim();\n\nconst countSmaller = `\nfunction fun(){\n  const arr = [5,2,6,1];\n  const result = arr.map(() => 0);\n\n  for(let i=0;i<arr.length;i++){\n    for(let j=(i+1);j<arr.length;j++){\n      if(arr[i]>arr[j]){\n        result[i] +=1;\n      }\n    }\n  }\n  console.log(result)\n}\n\nfun()\n`.trim();\n\nconst replaceNum = `\nfunction fun(){\n  const arr=[1,2,3,5,4];\n  const num=5;\n  const newnum=6;\n\n  const index=arr.indexOf(num)\n  arr.splice(index,1,newnum)\n\n  console.log(arr)\n}\n\nfun();\n`.trim();\n\nconst occurence = `\nfunction fun() {\n  const arr = [1, 2, 3, 4, 5, 6];\n  const target = 6;\n  const hash = {};\n  const result = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (hash[target - num] !== undefined) {\n      result.push(hash[target - num], num);\n    }\n\n    hash[num] = num;\n  }\n\n  return console.log(result);\n}\n\nfun();\n\n`.trim();\n\nconst flateArr = `\n// arr = [10,'h',2,'k',['e','z','y','g'],[44,67,'b','c','a'],[25,100,101,'m','l'],'f',60,55,'x']\n// output [a,b,c,..., 1,2,3....]\n\nconst newArr = [];\nfor (let i = 0; i < arr.length; i++) {\n  if (Array.isArray(arr[i])) {\n    newArr.push(...arr[i]);\n  } else {\n    newArr.push(arr[i]);\n  }\n}\n\nconst result = [];\nfor (let i = 0; i < newArr.length; i++) {\n  for (let j = i; j < newArr.length; j++) {\n    if (newArr[i] > newArr[j]) {\n      let temp = newArr[i];\n      newArr[i] = newArr[j];\n      newArr[j] = temp;\n    }\n  }\n  result.push(newArr[i]);\n}\n\nconsole.log(result);\n\n\n// 2. Separate number and string.\nconst arr=[\n  2,   'a', 10,  'b', 'c', 'e',\n  'f', 'g', 25,  44,  'h', 'k',\n  'l', 55,  60,  67,  'm', 'x',\n  'y', 100, 101, 'z'\n]\nconst str=[], num=[];\n\nfor(let i=0; i<arr.length; i++){\n    if(typeof arr[i]==='number'){\n        num.push(arr[i])\n    }else if(typeof arr[i]==='string'){\n        str.push(arr[i])\n    }\n}\n\nconsole.log(num);\nconsole.log(str);\n`.trim();\n\nclass DSLogic2 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n            <h3>1. Intersection of 3 Sorted Arrays</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={strArray}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Sort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <ul>\n                <li><b>Time: </b>O(n^2), where n is the length of the array arr. This is because the for loop iterates over the array arr twice, and the inner for loop iterates over the array arr once.</li><br/>\n                <li><b>Space: </b>O(1), where n is the length of the array arr. This is because the algorithm only uses the variables i, j, temp, and arr.</li><br/>\n                <li>In simple words, the code takes a quadratic amount of time to run, and it uses a constant amount of space.</li>\n              </ul>\n              <br />\n\n              <h3>3. Remove Duplicates</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={duplicates}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Contains Duplicate.</h3>\n              Given an array of integers, find if the array contains any duplicates.\n              <br/>\n              Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.\n              <div style={titles}>\n                <PrismCode\n                  code={containsDuplicate}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <ul>\n                <li><b>Time: </b>O(n), where n is the length of the array nums. This is because the for loop iterates over the array nums once, and the map[num] lookup takes constant time.</li><br/>\n                <li><b>Space: </b>O(n), where n is the length of the array nums. This is because the map object can store up to n keys.</li><br/>\n                <li>In simple words, the containsDuplicate() function takes a linear amount of time to run, and it uses a linear amount of space.</li>\n              </ul>\n              <br/>\n\n              <h3>5. Compare Array</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={compare_array}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Sort Those Squares.</h3>\n              \"Sort Those Squares\" is a problem where you're given an array of integers, some of which could be \n              negative, and you're asked to sort the squares of those integers in ascending order. \n              <div style={titles}>\n                <PrismCode\n                  code={countElements}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>6. Occurence of Elements.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={occurings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <ul>\n                <li><b>Time: </b>O(n), where n is the length of the array arr. This is because the for loop iterates over the array arr once, and the hash[arr[i]] lookup takes constant time.</li><br/>\n                <li><b>Space: </b>O(n), where n is the length of the array arr. This is because the hash object can store up to n keys.</li><br/>\n                <li>In simple words, the function fun() takes a linear amount of time to run, and it uses a linear amount of space.</li>\n              </ul>\n              <br/>\n\n              <h3>6. Target Elements.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={occurence}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>6. Flat Arr.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={flateArr}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>7. 132 Pattern.</h3>\n              <b>Input: </b>nums = [1,2,3,4]<br/>\n              <b>Output: </b>false<br/>\n              <b>Explanation: </b>There is no 132 pattern in the sequence.\n              <div style={titles}>\n                <PrismCode\n                  code={find132pattern}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>8. Combination Sum</h3>\n              <b>Input: </b>candidates = [2,3,6,7], target = 7,<br/>\n              <b>A solution set is: </b>\n              [\n                [7],<br/>\n                [2,2,3]<br/>\n              ]\n              <div style={titles}>\n                <PrismCode\n                  code={combinationSum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>9. Remove Element</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={removeElement}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>10. Replace Element</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={replaceNum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>10. Shuffle the Array.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={shuffle}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>11. Median of Two Sorted Arrays.</h3>\n              Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\n              <br/>\n              <b>Follow up: </b>The overall run time complexity should be O(log (m+n)).\n              <br/>\n\n              <b>Example 1:</b>\n              <br/>\n              <b>Input: </b>nums1 = [1,3], nums2 = [2]<br/>\n              <b>Output: </b>2.00000<br/>\n              <b>Explanation: </b>merged array = [1,2,3] and median is 2.<br/><br/>\n              <b>Example 2: </b><br/>\n\n              <b>Input: </b>nums1 = [1,2], nums2 = [3,4]<br/>\n              <b>Output: </b>2.50000<br/>\n              <b>Explanation: </b>merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n              <div style={titles}>\n                <PrismCode\n                  code={findMedianSortedArrays}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>12. Plus One.</h3>\n              <b>Input: </b>digits = [1,2,3]<br/>\n              <b>Output: </b>[1,2,4]\n              <div style={titles}>\n                <PrismCode\n                  code={plusOne}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>13. Missing Number</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={missing_number}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>14. Missing Ranges.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={findMissingRanges}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>15. Sort name.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={sortname}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>16. Concat 2 array on the basis of id</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={concatarr}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>17. Find First and Last Position of Element in Sorted Array</h3>\n              Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\n              <br/>\n              Your algorithm's runtime complexity must be in the order of O(log n).<br/>\n\n              If the target is not found in the array, return [-1, -1].<br/>\n\n              <b>Example 1:</b>\n              <b>Input: </b>nums = [5,7,7,8,8,10], target = 8<br/>\n              <b>Output: </b>[3,4]<br/><br/>\n              <div style={titles}>\n                <PrismCode\n                  code={searchRange}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <h3>18. Jump Game.</h3>\n              Given an array of non-negative integers representing the maximum jump length from each position. The goal \n              is to determine if you can reach the last index of the array starting from the first position.\n              <div style={titles}>\n                <PrismCode\n                  code={permute}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>19. Number of Good Pairs.</h3>\n              <b>Input: </b>nums = [1,2,3,1,1,3] <br/>\n              <b>Output: </b>4 <br/>\n              <b>Explanation: </b>There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.\n              <div style={titles}>\n                <PrismCode\n                  code={numIdenticalPairs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>20. Product of Array Except Self.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={productExceptSelf}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>21. Count of Smaller Numbers After Self.</h3>\n              You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].\n              <br/>\n              <b>Input: </b>nums = [5,2,6,1]<br/>\n              <b>Output: </b>[2,1,1,0]<br/>\n              <b>Explanation: </b>\n              <ul>\n                <li>To the right of 5 there are 2 smaller elements (2 and 1).</li>\n                <li>To the right of 2 there is only 1 smaller element (1).</li>\n                <li>To the right of 6 there is 1 smaller element (1).</li>\n                <li>To the right of 1 there is 0 smaller element.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={countSmaller}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>22. Array Counter</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={arrayCounter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>22. Array Counter</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={arrayCounter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>23. Summary Ranges.</h3>\n              Given a sorted integer array without duplicates, return the summary of its ranges.\n              <div style={titles}>\n                <PrismCode\n                  code={summaryRanges}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic2));\n"]},"metadata":{},"sourceType":"module"}