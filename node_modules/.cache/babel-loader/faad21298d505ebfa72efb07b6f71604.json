{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import\"../../ReactJs/styles.css\";import Sidebar from\"../sidebar\";import PrismCode from\"../../ReactJs/prismCode\";var titles={backgroundColor:\"#F0F8FF\",padding:\"1px\",fontSize:\"16px\"};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var evalRPN=\"\\nfunction policeNotation(tokens) {\\n  const stack = [];\\n  for (const tok of tokens) {\\n    if (!isNaN(tok)) {\\n      stack.push(parseInt(tok));\\n    } else {\\n      const b = stack.pop();\\n      const a = stack.pop();\\n      switch (tok) {\\n        case \\\"+\\\":\\n          stack.push(a + b);\\n          break;\\n        case \\\"*\\\":\\n          stack.push(a * b);\\n          break;\\n        case \\\"-\\\":\\n          stack.push(a - b);\\n          break;\\n        case \\\"/\\\":\\n          stack.push(a / b);\\n          break;\\n      }\\n    }\\n  }\\n  return stack.pop();\\n}\\n\\nconsole.log(policeNotation([\\\"2\\\", \\\"1\\\", \\\"+\\\", \\\"3\\\", \\\"*\\\"]));\\n\".trim();var convertToTitle=\"\\nfunction fun(arr) {\\n  if(!arr || arr.length === 0) return \\\"\\\";\\n  let prefix=arr[0];\\n\\n  for(let i=0;i<arr.length;i++){\\n    while(arr[i].indexOf(prefix) !==0){\\n      prefix = prefix.substring(0,prefix.length-1);\\n    }\\n  }\\n  return console.log(prefix);\\n}\\n\\n\\nfun([\\\"flower\\\",\\\"flow\\\",\\\"flight\\\"])\\n\".trim();var combinationSum3=\"\\nfunction fun() {\\n  const arr=[-1,2,1,-4];\\n  let sum=0;\\n\\n  for(let i=0;i<arr.length;i++){\\n    if(arr.includes(1)){\\n      sum = arr.reduce((a,b) => a+b, 0);\\n    }\\n  }\\nconsole.log(sum)\\n}\\n\\nfun()\\n\".trim();var closed3=\"\\nfunction fun() {\\n  const nums = [-1, 2, 10, 1, -4];\\n  const target = 1;\\n  let closed = nums[0] + nums[1] + nums[2];\\n\\n  for (let i = 0; i < nums.length - 2; i++) {\\n    for (let j = i + 1; j < nums.length - 1; j++) {\\n      for (let k = j + 1; k < nums.length; k++) {\\n        const sum = nums[i]+nums[j]+nums[k];\\n        if (Math.abs(sum - target) < Math.abs(closed - target)) {\\n          closed = sum;\\n        }\\n      }\\n    }\\n  }\\n\\n  console.log(closed);\\n}\\n\\nfun();\\n\".trim();var countDigitOne=\"\\nfunction countOnes(n) {\\n  let count = 0;\\n  for (let i = 0; i <= n; i++) {\\n    count += i.toString().split(\\\"1\\\").length - 1;\\n  }\\n  return console.log(count);\\n}\\n\\ncountOnes(16);\\n\\n\".trim();var maxSlidingWindow=\"\\nfunction fun(num) {\\n  if (!num || num.length === 0) return [];\\n\\n  const arr = {\\n    '2': ['a', 'b', 'c'],\\n    '3': ['d', 'e', 'f'],\\n    '4': ['g', 'h', 'i'],\\n    '5': ['j', 'k', 'l'],\\n    '6': ['m', 'n', 'o'],\\n    '7': ['p', 'q', 'r', 's'],\\n    '8': ['t', 'u', 'v'],\\n    '9': ['w', 'x', 'y', 'z'],\\n  };\\n  const result = [''];\\n\\n  for (let i = 0; i < num.length; i++) {\\n    const digit = num[i];\\n    const letters = arr[digit];\\n    const newResult = [];\\n\\n    for (let j = 0; j < result.length; j++) {\\n      for (let k = 0; k < letters.length; k++) {\\n        newResult.push(result[j] + letters[k]);\\n      }\\n    }\\n\\n    result.splice(0, result.length, ...newResult);\\n  }\\n\\n  return result;\\n}\\n\\nconsole.log(fun(\\\"23\\\"));\\n\".trim();var parenthesis=\"\\nfunction fun(s) {\\n  const stack = [];\\n  const brackets = {\\n    '(': ')',\\n    '{': '}',\\n    '[': ']',\\n  };\\n\\n  for (let i = 0; i < s.length; i++) {\\n    const char = s[i];\\n    if (brackets[char]) {\\n      stack.push(char);\\n    } \\n    else {\\n      const lastOpeningBracket = stack.pop();\\n      // If there's no matching opening bracket or if the closing bracket doesn't match.\\n      if ((!lastOpeningBracket || brackets[lastOpeningBracket]) !== char) {\\n        return false;\\n      }\\n    }\\n  }\\n\\n  return stack.length === 0;\\n}\\n\\nconsole.log(fun(\\\"()[]{}\\\"))\\n\".trim();var generate=\"\\nfunction fun(n) {\\n  const result = [];\\n  const stack = [['', 0, 0]];\\n\\n  while (stack.length > 0) {\\n    const [current, open, close] = stack.pop();\\n\\n    if (current.length === 2 * n) {\\n      result.push(current);\\n    } else {\\n      if (open < n) {\\n        stack.push([current + '(', open + 1, close]);\\n      }\\n\\n      if (close < open) {\\n        stack.push([current + ')', open, close + 1]);\\n      }\\n    }\\n  }\\n\\n  return console.log(result);\\n}\\n\\nfun(3);\\n\".trim();var TopTech=/*#__PURE__*/function(_Component){_inherits(TopTech,_Component);function TopTech(){_classCallCheck(this,TopTech);return _possibleConstructorReturn(this,_getPrototypeOf(TopTech).apply(this,arguments));}_createClass(TopTech,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Find the longest common prefix string amongst an array of strings.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:convertToTitle,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Evaluate Reverse Polish Notation\"),React.createElement(\"b\",null,\"Input: \"),\"[\\\"2\\\", \\\"1\\\", \\\"+\\\", \\\"3\\\", \\\"*\\\"]\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"9\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Explanation: \"),\"((2 + 1) * 3) = 9\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:evalRPN,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Find Sum of an array.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:combinationSum3,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Close 3 sum.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:closed3,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. Number of Digit One.\"),\"Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Time complexity: \"),\"O(n), where n is the input number. This is because the countOnes() function iterates over the numbers from 0 to n, and each iteration takes constant time.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Space complexity: \"),\"O(1), where n is the input number. This is because the countOnes() function only uses a constant amount of memory to store the variables count, i, and str.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"In simple words, the countOnes() function takes a linear amount of time to run, and it uses a constant amount of space.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:countDigitOne,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. Letter Combinations of a Phone Number.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:maxSlidingWindow,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. Valid Parentheses.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:parenthesis,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"7. Generate Parentheses.\"),\"Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:generate,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return TopTech;}(Component);export default withStyles(styles)(TopTech);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/topTech.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","evalRPN","trim","convertToTitle","combinationSum3","closed3","countDigitOne","maxSlidingWindow","parenthesis","generate","TopTech","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst evalRPN = `\nfunction policeNotation(tokens) {\n  const stack = [];\n  for (const tok of tokens) {\n    if (!isNaN(tok)) {\n      stack.push(parseInt(tok));\n    } else {\n      const b = stack.pop();\n      const a = stack.pop();\n      switch (tok) {\n        case \"+\":\n          stack.push(a + b);\n          break;\n        case \"*\":\n          stack.push(a * b);\n          break;\n        case \"-\":\n          stack.push(a - b);\n          break;\n        case \"/\":\n          stack.push(a / b);\n          break;\n      }\n    }\n  }\n  return stack.pop();\n}\n\nconsole.log(policeNotation([\"2\", \"1\", \"+\", \"3\", \"*\"]));\n`.trim();\n\nconst convertToTitle = `\nfunction fun(arr) {\n  if(!arr || arr.length === 0) return \"\";\n  let prefix=arr[0];\n\n  for(let i=0;i<arr.length;i++){\n    while(arr[i].indexOf(prefix) !==0){\n      prefix = prefix.substring(0,prefix.length-1);\n    }\n  }\n  return console.log(prefix);\n}\n\n\nfun([\"flower\",\"flow\",\"flight\"])\n`.trim();\n\nconst combinationSum3 = `\nfunction fun() {\n  const arr=[-1,2,1,-4];\n  let sum=0;\n\n  for(let i=0;i<arr.length;i++){\n    if(arr.includes(1)){\n      sum = arr.reduce((a,b) => a+b, 0);\n    }\n  }\nconsole.log(sum)\n}\n\nfun()\n`.trim();\n\nconst closed3 = `\nfunction fun() {\n  const nums = [-1, 2, 10, 1, -4];\n  const target = 1;\n  let closed = nums[0] + nums[1] + nums[2];\n\n  for (let i = 0; i < nums.length - 2; i++) {\n    for (let j = i + 1; j < nums.length - 1; j++) {\n      for (let k = j + 1; k < nums.length; k++) {\n        const sum = nums[i]+nums[j]+nums[k];\n        if (Math.abs(sum - target) < Math.abs(closed - target)) {\n          closed = sum;\n        }\n      }\n    }\n  }\n\n  console.log(closed);\n}\n\nfun();\n`.trim();\n\nconst countDigitOne = `\nfunction countOnes(n) {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    count += i.toString().split(\"1\").length - 1;\n  }\n  return console.log(count);\n}\n\ncountOnes(16);\n\n`.trim();\n\nconst maxSlidingWindow = `\nfunction fun(num) {\n  if (!num || num.length === 0) return [];\n\n  const arr = {\n    '2': ['a', 'b', 'c'],\n    '3': ['d', 'e', 'f'],\n    '4': ['g', 'h', 'i'],\n    '5': ['j', 'k', 'l'],\n    '6': ['m', 'n', 'o'],\n    '7': ['p', 'q', 'r', 's'],\n    '8': ['t', 'u', 'v'],\n    '9': ['w', 'x', 'y', 'z'],\n  };\n  const result = [''];\n\n  for (let i = 0; i < num.length; i++) {\n    const digit = num[i];\n    const letters = arr[digit];\n    const newResult = [];\n\n    for (let j = 0; j < result.length; j++) {\n      for (let k = 0; k < letters.length; k++) {\n        newResult.push(result[j] + letters[k]);\n      }\n    }\n\n    result.splice(0, result.length, ...newResult);\n  }\n\n  return result;\n}\n\nconsole.log(fun(\"23\"));\n`.trim();\n\nconst parenthesis = `\nfunction fun(s) {\n  const stack = [];\n  const brackets = {\n    '(': ')',\n    '{': '}',\n    '[': ']',\n  };\n\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (brackets[char]) {\n      stack.push(char);\n    } \n    else {\n      const lastOpeningBracket = stack.pop();\n      // If there's no matching opening bracket or if the closing bracket doesn't match.\n      if ((!lastOpeningBracket || brackets[lastOpeningBracket]) !== char) {\n        return false;\n      }\n    }\n  }\n\n  return stack.length === 0;\n}\n\nconsole.log(fun(\"()[]{}\"))\n`.trim();\n\nconst generate = `\nfunction fun(n) {\n  const result = [];\n  const stack = [['', 0, 0]];\n\n  while (stack.length > 0) {\n    const [current, open, close] = stack.pop();\n\n    if (current.length === 2 * n) {\n      result.push(current);\n    } else {\n      if (open < n) {\n        stack.push([current + '(', open + 1, close]);\n      }\n\n      if (close < open) {\n        stack.push([current + ')', open, close + 1]);\n      }\n    }\n  }\n\n  return console.log(result);\n}\n\nfun(3);\n`.trim();\n\nclass TopTech extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Find the longest common prefix string amongst an array of strings.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={convertToTitle}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>2. Evaluate Reverse Polish Notation</h3>\n              <b>Input: </b>[\"2\", \"1\", \"+\", \"3\", \"*\"]\n              <br />\n              <b>Output: </b>9<br />\n              <b>Explanation: </b>((2 + 1) * 3) = 9\n              <div style={titles}>\n                <PrismCode\n                  code={evalRPN}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>3. Find Sum of an array.</h3>\n              \n              <div style={titles}>\n                <PrismCode\n                  code={combinationSum3}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              \n              <h3>3. Close 3 sum.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={closed3}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Number of Digit One.</h3>\n              Given an integer n, count the total number of digit 1 appearing in\n              all non-negative integers less than or equal to n.\n              <br/>\n              <ul>\n                <li><b>Time complexity: </b>O(n), where n is the input number. This is because the countOnes() function iterates over the numbers from 0 to n, and each iteration takes constant time.</li><br/>\n                <li><b>Space complexity: </b>O(1), where n is the input number. This is because the countOnes() function only uses a constant amount of memory to store the variables count, i, and str.</li><br/>\n                <li>In simple words, the countOnes() function takes a linear amount of time to run, and it uses a constant amount of space.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={countDigitOne}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>5. Letter Combinations of a Phone Number.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={maxSlidingWindow}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <br />\n              <h3>6. Valid Parentheses.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={parenthesis}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <br />\n              <h3>7. Generate Parentheses.</h3>\n              Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n              <div style={titles}>\n                <PrismCode\n                  code={generate}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(TopTech);\n"]},"metadata":{},"sourceType":"module"}