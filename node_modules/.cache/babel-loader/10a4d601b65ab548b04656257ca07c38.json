{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var childsFile=\"\\nimport numpy as np\\nimport tensorflow as tf\\nfrom tensorflow import keras\\nimport matplotlib.pyplot as plt\\n%matplotlib inline\\n\\n(X_train, y_train) , (X_test, y_test) = keras.datasets.mnist.load_data()\\n\\nplt.matshow(X_train[0])\\n\\nX_train = X_train / 255\\nX_test = X_test / 255\\n\\nX_train_flattened = X_train.reshape(len(X_train), 28*28)\\nX_test_flattened = X_test.reshape(len(X_test), 28*28)\\n\\nX_train_flattened.shape\\n\".trim();var reshape=\"\\nmodel = keras.Sequential([\\n  keras.layers.Flatten(input_shape=(28, 28)),\\n  keras.layers.Dense(100, activation='relu'),\\n  keras.layers.Dense(10, activation='sigmoid')\\n])\\n\\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\\n\\ntb_callback = tf.keras.callbacks.TensorBoard(log_dir=\\\"logs/\\\", histogram_freq=1)\\n\\nmodel.fit(X_train, y_train, epochs=5, callbacks=[tb_callback])\\n\\n%load_ext tensorboard\\n%tensorboard --logdir logs/fit\\n\\nmodel.get_weights()\\n\".trim();// const pipes = ``.trim();\n// const pipes = ``.trim();\nvar Tensorboards=/*#__PURE__*/function(_Component){_inherits(Tensorboards,_Component);function Tensorboards(){_classCallCheck(this,Tensorboards);return _possibleConstructorReturn(this,_getPrototypeOf(Tensorboards).apply(this,arguments));}_createClass(Tensorboards,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Tensorboard\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"It' a TensorFlow's visualization toolkit.\"),React.createElement(\"li\",null,\"Tracking and visualizing metrics such as loss and accuracy.\"),React.createElement(\"li\",null,\"Displaying images, text, and audio data.\"),React.createElement(\"li\",null,\"Profiling TensorFlow programs.\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"we will classify handwritten digits using a simple neural network which has only input and output layers. We will than add a hidden layer and see how the performance of the model improves.\"),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:childsFile,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Using Flatten layer so that we don't have to call .reshape on input dataset.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:reshape,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"i\",null,\"Either run above inline magic or go to git bash or your command prompt and type below to run it, `tensorboard --logdir logs/` This will launch tensorboard at this url which you can open in your browser `http://localhost:6006/`.\")))));}}]);return Tensorboards;}(Component);export default withStyles(styles)(Tensorboards);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjs/deepAngularjs/tensors.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","childsFile","trim","reshape","Tensorboards","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,0BAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CAGA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,eAAe,CAAE,SAAnB,CAA8BC,OAAO,CAAE,KAAvC,CAA8CC,QAAQ,CAAE,MAAxD,CAAf,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,KAAK,CAAE,CACLC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH,CAELN,OAAO,CAAEG,KAAK,CAACG,OAAN,CAAc,CAAd,CAFJ,CADgB,CAKvBC,QAAQ,CAAE,CACRF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA,CALa,CAQvBE,SAAS,CAAE,CACTC,SAAS,CAAE,QADF,CARY,CAAL,EAApB,CAcA,GAAMC,CAAAA,UAAU,CAAG,4aAkBjBC,IAlBiB,EAAnB,CAoBA,GAAMC,CAAAA,OAAO,CAAG,2fAiBdD,IAjBc,EAAhB,CAmBA;AAEA;GAGME,CAAAA,Y,oTACgB,CAClBC,UAAU,CAAC,iBAAMvB,CAAAA,KAAK,CAACwB,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAACZ,KAA1B,EACE,8BAAI,oBAAC,OAAD,MAAJ,CADF,CADF,CADF,CAME,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEY,OAAO,CAACZ,KAA1B,EACE,oBAAC,IAAD,MACE,4CADF,CAEE,8BACE,0EADF,CAEE,4FAFF,CAGE,yEAHF,CAIE,+DAJF,CAFF,CAQE,8BARF,CAUE,4NAVF,CAYE,8BAZF,CAaE,8BAbF,CAeE,2BAAK,KAAK,CAAEN,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEY,UADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAfF,CAsBE,8BAtBF,CAwBE,6GAxBF,CAyBE,2BAAK,KAAK,CAAEZ,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEc,OADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAzBF,CAgCE,8BAhCF,CAiCE,mQAjCF,CADF,CADF,CANF,CADF,CA2DD,C,0BAjEwBtB,S,EAqE3B,cAAgBI,CAAAA,UAAU,CAACQ,MAAD,CAAV,CAAmBW,YAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst childsFile = `\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n(X_train, y_train) , (X_test, y_test) = keras.datasets.mnist.load_data()\n\nplt.matshow(X_train[0])\n\nX_train = X_train / 255\nX_test = X_test / 255\n\nX_train_flattened = X_train.reshape(len(X_train), 28*28)\nX_test_flattened = X_test.reshape(len(X_test), 28*28)\n\nX_train_flattened.shape\n`.trim();\n\nconst reshape = `\nmodel = keras.Sequential([\n  keras.layers.Flatten(input_shape=(28, 28)),\n  keras.layers.Dense(100, activation='relu'),\n  keras.layers.Dense(10, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n\ntb_callback = tf.keras.callbacks.TensorBoard(log_dir=\"logs/\", histogram_freq=1)\n\nmodel.fit(X_train, y_train, epochs=5, callbacks=[tb_callback])\n\n%load_ext tensorboard\n%tensorboard --logdir logs/fit\n\nmodel.get_weights()\n`.trim();\n\n// const pipes = ``.trim();\n\n// const pipes = ``.trim();\n\n\nclass Tensorboards extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Tensorboard</h3>\n              <ul>\n                <li>It' a TensorFlow's visualization toolkit.</li>\n                <li>Tracking and visualizing metrics such as loss and accuracy.</li>\n                <li>Displaying images, text, and audio data.</li>\n                <li>Profiling TensorFlow programs.</li>\n              </ul>\n              <br />\n\n              <b>we will classify handwritten digits using a simple neural network which has only input and output layers. We will than add a\n                hidden layer and see how the performance of the model improves.</b>\n              <br />\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={childsFile}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Using Flatten layer so that we don't have to call .reshape on input dataset.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={reshape}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>Either run above inline magic or go to git bash or your command prompt and type below to run it,\n                `tensorboard --logdir logs/`\n                This will launch tensorboard at this url which you can open in your browser `http://localhost:6006/`.</i>\n\n              {/* <h3></h3>\n              <div style={titles}>\n                <PrismCode\n                  code={childsFile}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div> */}\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\n\nexport default (withStyles(styles)(Tensorboards));\n"]},"metadata":{},"sourceType":"module"}