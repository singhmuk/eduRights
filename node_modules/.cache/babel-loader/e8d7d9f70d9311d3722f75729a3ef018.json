{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var armstrongs=\"\\nnum = int(input(\\\"Enter a number: \\\"))\\n\\nsum = 0\\n\\ntemp = num\\nwhile temp > 0:\\n   digit = temp % 10\\n   sum += digit ** 3\\n   temp //= 10\\n\\nif num == sum:\\n   print(num,\\\"is an Armstrong number\\\")\\nelse:\\n   print(num,\\\"is not an Armstrong number\\\")\".trim();var each_vowel=\"\\nvowels = 'aeiou'\\n\\nip_str = 'Hello, have you tried our tutorial section yet?'\\n\\nip_str = ip_str.casefold()\\n\\ncount = {}.fromkeys(vowels,0)\\n\\nfor char in ip_str:\\n   if char in count:\\n       count[char] += 1\\n\\nprint(count)\".trim();var factorial=\"\\ndef factorial(n):\\n   if n == 1:\\n       return n\\n   else:\\n       return n * factorial(n-1)\\n\\nnum = int(input(\\\"Enter a number: \\\"))\\n\\nif num < 0:\\n   print(\\\"Sorry, factorial does not exist for negative numbers\\\")\\nelif num == 0:\\n   print(\\\"The factorial of 0 is 1\\\")\\nelse:\\n   print(\\\"The factorial of\\\",num,\\\"is\\\",factorial(num))\".trim();var fibonacci=\"\\na, b = 0, 1\\n\\nwhile b < 80:\\n    c=a+b\\n    print(c)\\n    a=b\\n    b=c\".trim();var palindrome=\"\\nmy_str = 'aIbohPhoBiA'\\n\\nmy_str = my_str.casefold()\\n\\nrev_str = reversed(my_str)\\n\\nif list(my_str) == list(rev_str):\\n   print(\\\"The string is a palindrome.\\\")\\nelse:\\n   print(\\\"The string is not a palindrome.\\\")\".trim();var prime=\"\\nnumprimes = input('How many primes to print?  ')\\ncount = 0\\npotentialprime = 2\\n\\ndef primetest(potentialprime):\\n    divisor = 2\\n    while divisor <= potentialprime:\\n        if potentialprime == 2:\\n            return True\\n        elif potentialprime % divisor == 0:\\n            return False\\n            break\\n        while potentialprime % divisor != 0:\\n            if potentialprime - divisor > 1:\\n                divisor += 1\\n            else:\\n                return True\\n\\nwhile count < int(numprimes):\\n    if primetest(potentialprime) == True:\\n        print ('Prime #' + str(count + 1), 'is', potentialprime)\\n        count += 1\\n        potentialprime += 1\\n    else:\\n        potentialprime += 1\".trim();var interval=\"\\nlower = 900\\nupper = 1000\\n\\nprint(\\\"Prime numbers between\\\", lower, \\\"and\\\", upper, \\\"are:\\\")\\n\\nfor num in range(lower, upper + 1):\\n   if num > 1:\\n       for i in range(2, num):\\n           if (num % i) == 0:\\n               break\\n       else:\\n           print(num)\".trim();var shuffle=\"\\nimport itertools, random\\n\\n# make a deck of cards\\ndeck = list(itertools.product(range(1,14),['Spade','Heart','Diamond','Club']))\\n\\n# shuffle the cards\\nrandom.shuffle(deck)\\n\\n# draw five cards\\nprint(\\\"You got:\\\")\\nfor i in range(5):\\n   print(deck[i][0], \\\"of\\\", deck[i][1])\".trim();var Logics=/*#__PURE__*/function(_Component){_inherits(Logics,_Component);function Logics(){_classCallCheck(this,Logics);return _possibleConstructorReturn(this,_getPrototypeOf(Logics).apply(this,arguments));}_createClass(Logics,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Armstrong\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:armstrongs,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Count_Number_of_Each_Vowel\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:each_vowel,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Factorial\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:factorial,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Fibonacci\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:fibonacci,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Palindrome\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:palindrome,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Prime\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:prime,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"print_prime_numbers_an_interval\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:interval,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Shuffle_Deck_of_Cards\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:shuffle,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return Logics;}(Component);export default withStyles(styles)(Logics);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/pythone/deeppy/logic_python.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","armstrongs","trim","each_vowel","factorial","fibonacci","palindrome","prime","interval","shuffle","Logics","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst armstrongs = `\nnum = int(input(\"Enter a number: \"))\n\nsum = 0\n\ntemp = num\nwhile temp > 0:\n   digit = temp % 10\n   sum += digit ** 3\n   temp //= 10\n\nif num == sum:\n   print(num,\"is an Armstrong number\")\nelse:\n   print(num,\"is not an Armstrong number\")`.trim();\n\nconst each_vowel = `\nvowels = 'aeiou'\n\nip_str = 'Hello, have you tried our tutorial section yet?'\n\nip_str = ip_str.casefold()\n\ncount = {}.fromkeys(vowels,0)\n\nfor char in ip_str:\n   if char in count:\n       count[char] += 1\n\nprint(count)`.trim();\n\nconst factorial = `\ndef factorial(n):\n   if n == 1:\n       return n\n   else:\n       return n * factorial(n-1)\n\nnum = int(input(\"Enter a number: \"))\n\nif num < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nelif num == 0:\n   print(\"The factorial of 0 is 1\")\nelse:\n   print(\"The factorial of\",num,\"is\",factorial(num))`.trim();\n\nconst fibonacci = `\na, b = 0, 1\n\nwhile b < 80:\n    c=a+b\n    print(c)\n    a=b\n    b=c`.trim();\n\nconst palindrome = `\nmy_str = 'aIbohPhoBiA'\n\nmy_str = my_str.casefold()\n\nrev_str = reversed(my_str)\n\nif list(my_str) == list(rev_str):\n   print(\"The string is a palindrome.\")\nelse:\n   print(\"The string is not a palindrome.\")`.trim();\n\nconst prime = `\nnumprimes = input('How many primes to print?  ')\ncount = 0\npotentialprime = 2\n\ndef primetest(potentialprime):\n    divisor = 2\n    while divisor <= potentialprime:\n        if potentialprime == 2:\n            return True\n        elif potentialprime % divisor == 0:\n            return False\n            break\n        while potentialprime % divisor != 0:\n            if potentialprime - divisor > 1:\n                divisor += 1\n            else:\n                return True\n\nwhile count < int(numprimes):\n    if primetest(potentialprime) == True:\n        print ('Prime #' + str(count + 1), 'is', potentialprime)\n        count += 1\n        potentialprime += 1\n    else:\n        potentialprime += 1`.trim();\n\nconst interval = `\nlower = 900\nupper = 1000\n\nprint(\"Prime numbers between\", lower, \"and\", upper, \"are:\")\n\nfor num in range(lower, upper + 1):\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)`.trim();\n\nconst shuffle = `\nimport itertools, random\n\n# make a deck of cards\ndeck = list(itertools.product(range(1,14),['Spade','Heart','Diamond','Club']))\n\n# shuffle the cards\nrandom.shuffle(deck)\n\n# draw five cards\nprint(\"You got:\")\nfor i in range(5):\n   print(deck[i][0], \"of\", deck[i][1])`.trim();\n\n\nclass Logics extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Armstrong</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={armstrongs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Count_Number_of_Each_Vowel</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={each_vowel}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Factorial</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={factorial}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Fibonacci</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={fibonacci}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Palindrome</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={palindrome}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Prime</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={prime}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>print_prime_numbers_an_interval</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={interval}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Shuffle_Deck_of_Cards</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={shuffle}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Logics));\n"]},"metadata":{},"sourceType":"module"}