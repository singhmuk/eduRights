{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var arraysSchema=\"\\nconst arraysSchema = new Schema({\\n  email: reqString,\\n  username: reqString,\\n  password: reqString,\\n  messages: Number,          //count number of messages\\n  nameHistory: [String],      //every time name chage\\n  testScore: [Number]\\n})\\n\\nmodule.exports = mongoose.model('arraysOp', arraysSchema);\\n\\n\\n//controllers\\nconst Users = require('../models/arrayOp');\\n\\nrouter.all = async (req, res) => {\\n    Users.find()\\n      .sort({ date: -1 })\\n      .then(main => res.json(main));\\n}\\n\\nrouter.search = async (req, res) => {\\n    Users.find({\\n      testScore: { $all: [10, 20, 30] }\\n    })\\n      .then(main => res.json(main))\\n}\\n\\nrouter.size = async (req, res) => {\\n    Users.find({\\n      testScore: { $size: 3 }\\n    })\\n      .then(main => res.json(main))\\n}\\n\\nrouter.elementMatch = async (req, res) => {\\n    Users.find({\\n      testScore: { $elemMatch: { $gt: 20 } }\\n    })\\n      .then(main => res.json(main))\\n}\\n\\nrouter.creates = async = (req, res) => {\\n    const newUsers = new Users({\\n      email: req.body.email,\\n      username: req.body.username,\\n      password: req.body.password,\\n      testScore: req.body.testScore,\\n    })\\n\\n    newUsers.save().then(item => res.json(item));\\n}\\n\".trim();var conditional=\"\\nconst reqString = { type: String, required: true }\\n\\nconst messageSchema = new Schema({\\n  userId: reqString,\\n  text: reqString\\n})\\n\\nconst userSchema = new Schema({\\n  email: reqString,\\n  username: reqString,\\n  password: reqString,\\n  level: Number,\\n  messages: [messageSchema],\\n  nameHistory: [String]\\n}, {\\n  timeStamps: true\\n})\\n\\nmodule.exports = mongoose.model('conditional', userSchema);\\n\\n\\n//controllers\\nconst Items = require('../models/conditional');\\n\\nrouter.findLevel = async (req, res) => {\\n    //Search an user level > 10\\n    Items.find({\\n      level: {\\n        $exists: true,                    //check value exixt or not\\n        // $gte: 10, $lt: 15               //gte = greater than or equal to\\n      }\\n    })\\n      .then(main => res.json(main));\\n}\\n\\nrouter.messages = async (req, res) => {\\n    Items.findOne({\\n      'messages.text': 'Text'\\n    })\\n      .then(main => res.json(main));\\n}\\n\\nrouter.creates = async = (req, res) => {\\n    const newItems = new Items({\\n      email: req.body.email,\\n      username: req.body.username,\\n      password: req.body.password,\\n      level: req.body.level,\\n    })\\n\\n    newItems.save().then(item => res.json(item));\\n}\\n\".trim();var increase=\"\\nconst reqString = { type: String, required: true }\\n\\nconst userSchema = new Schema({\\n  email: reqString,\\n  username: reqString,\\n  password: reqString,\\n  messages: Number,          //count number of messages\\n})\\n\\nmodule.exports = mongoose.model('users', userSchema);\\n\\n\\n//controllers\\nconst Items = require('../models/conditional');\\n\\nrouter.findLevel = async (req, res) => {\\n    //Search an user level > 10\\n    Items.find({\\n      level: {\\n        $exists: true,                    //check value exixt or not\\n        // $gte: 10, $lt: 15               //gte = greater than or equal to\\n      }\\n    })\\n      .then(main => res.json(main));\\n}\\n\\nrouter.messages = async (req, res) => {\\n    Items.findOne({\\n      'messages.text': 'Text'\\n    })\\n      .then(main => res.json(main));\\n}\\n\\nrouter.creates = async = (req, res) => {\\n    const newItems = new Items({\\n      email: req.body.email,\\n      username: req.body.username,\\n      password: req.body.password,\\n      level: req.body.level,\\n    })\\n\\n    newItems.save().then(item => res.json(item));\\n}\\n\".trim();var insertMany=\"\\nconst reqString = { type: String, required: true }\\n\\nconst plurizedSchema = new Schema({\\n  email: reqString,\\n  username: reqString,\\n  password: reqString,\\n  messages: {\\n    type: Number, default: 5, min: 0, max: 10\\n  },\\n  nameHistory: [String]\\n}, {\\n  timeStamps: true\\n})\\n\\nmodule.exports = mongoose.model('manyQry', plurizedSchema);\\n\\n\\n//controllers\\nconst Items = require('../models/insertMany');\\n\\nrouter.all = async (req, res) => {\\n    Items.find()\\n      .sort({ date: -1 })\\n      .then(main => res.json(main));\\n}\\n\\nrouter.inserts = async = (req, res) => {\\n    Items.insertMany([{\\n      \\\"email\\\": \\\"valid@gmail.com\\\", \\\"username\\\": \\\"min\\\", \\\"password\\\": \\\"password\\\"\\n    },\\n    {\\n      \\\"email\\\": \\\"valid2@gmail.com\\\", \\\"username\\\": \\\"min2\\\", \\\"password\\\": \\\"password2\\\"\\n    },\\n    {\\n      \\\"email\\\": \\\"valid3@gmail.com\\\", \\\"username\\\": \\\"min3\\\", \\\"password\\\": \\\"password3\\\"\\n    }]).then(function () {\\n      console.log(\\\"Data inserted\\\")  // Success\\n    })\\n}\\n\\nrouter.remove = async = (req, res) => {\\n    Items.deleteMany({\\n      username: ['min', 'min2']\\n    }).then(function () {\\n      console.log(\\\"Data inserted\\\")  // Success\\n    })\\n}\\n\".trim();var itemsModels=\"\\nconst MainSchema = new Schema({\\n  title: { type: String, required: true },\\n  age: { type: Number, required: true },\\n  list: { type: Array, required: true },\\n  status: { type: String, required: false },\\n  qty: { type: Number },\\n});\\n\\nmodule.exports = mains = mongoose.model('mains', MainSchema);\\n\\n\\n//controllers\\nconst Items = require('../models/items');\\n\\nrouter.all = async (req, res) => {\\n    Items.find()\\n      .sort({ date: -1 })\\n      .then(main => res.json(main));\\n}\\n\\nrouter.getOne = async (req, res) => {\\n    Items.findById(req.params.id)\\n      .then(main => res.json(main))\\n}\\n\\nrouter.creates = async = (req, res) => {\\n    const newItems = new Items({\\n      title: req.body.title,\\n      age: req.body.age,\\n      list: req.body.list,\\n      status: req.body.status,\\n      qty: req.body.qty,\\n    })\\n\\n    newItems.save().then(item => res.json(item));\\n}\\n\\nrouter.updates = async = (req, res) => {\\n    Items.findByIdAndUpdate(req.params.id, {\\n      title: req.body.title,\\n      age: req.body.age,\\n      list: req.body.list,\\n      status: req.body.status,\\n      qty: req.body.qty,\\n      size: {\\n        h: req.body.h,\\n        w: req.body.w,\\n        uom: req.body.uom,\\n      }\\n    }, { new: true }).then(data => { res.json(data) })\\n}\\n\\nrouter.remove = async (req, res) => {\\n    Items.findByIdAndRemove(req.params.id)\\n      .then(main => main.remove().then(() => res.json({ success: true })))\\n}\\n\".trim();var nested=\"\\nconst reqString = { type: String, required: true }\\n\\nconst messageSchema = new Schema({\\n  userId: reqString,\\n  text: reqString\\n})\\n\\nconst userSchema = new Schema({\\n  email: reqString,\\n  username: reqString,\\n  password: reqString,\\n  messages: [messageSchema],\\n  nameHistory: [String]\\n}, {\\n  timeStamps: true\\n})\\n\\nmodule.exports = mongoose.model('nested', userSchema);\\n\\n\\n//controllers\\nconst Items = require('../models/nested');\\n\\nrouter.all = async (req, res) => {\\n    Items.find()\\n      .sort({ date: -1 })\\n      .then(main => res.json(main));\\n}\\n\\nrouter.messages = async (req, res) => {\\n    Items.findOne({\\n      'messages.text': 'Text'\\n    })\\n      .then(main => res.json(main));\\n}\\n\\nrouter.creates = async = (req, res) => {\\n    const newItems = new Items({\\n      email: req.body.email,\\n      username: req.body.username,\\n      password: req.body.password,\\n      messages: [\\n        {\\n          userId: req.body.email,\\n          text: 'Text'\\n        },\\n      ]\\n    })\\n\\n    newItems.save().then(item => res.json(item));\\n}\\n\".trim();var PluralizedCollectioName=\"\\nconst reqString = { type: String, required: true }\\n\\nconst plurizedSchema = new Schema({\\n  email: reqString,\\n  username: reqString,\\n  password: reqString,\\n  messages: {\\n    type: Number, default: 5, min: 0, max: 10\\n  },\\n  nameHistory: [String]       //every time name chage\\n}, {\\n  timeStamps: true          //created and updated time automatically manage\\n})\\n\\nmodule.exports = mongoose.model('plurized', plurizedSchema);\\n/*\\ncollection name=plurized\\ncollection name is default create plural, if want singular collection name than follow as\\nmodule.exports = mongoose.model('plurized', plurizedSchema,'plurized');\\n*/\\n\\n\\n//controllers\\nconst Items = require('../models/PluralizedCollectioName');\\n\\nrouter.all = async (req, res) => {\\n    Items.find()\\n      .sort({ date: -1 })\\n      .then(main => res.json(main));\\n}\\n\\nrouter.getOne = async (req, res) => {\\n    Items.findById(req.params.id)\\n      .then(main => res.json(main))\\n}\\n\\nrouter.creates = async = (req, res) => {\\n    const newItems = new Items({\\n      title: req.body.title,\\n      age: req.body.age,\\n      list: req.body.list,\\n      status: req.body.status,\\n      qty: req.body.qty,\\n    })\\n\\n    newItems.save().then(item => res.json(item));\\n}\\n\".trim();var primaryUniqeId=\"\\nconst reqString = { type: String, required: true }\\n\\nconst arraysSchema = new Schema({\\n  _id: reqString,            //to use own id\\n  email: reqString,\\n  username: reqString,\\n  password: reqString,\\n  messages: Number,          //count number of messages\\n  nameHistory: [String],      //every time name chage\\n  testScore: [Number]\\n})\\n\\nmodule.exports = mongoose.model('keysIds', arraysSchema);\\n\\n\\n//controllers\\nconst Users = require('../models/primaryUniqeId');\\n\\nrouter.all = async (req, res) => {\\n    Users.find()\\n      .then(main => res.json(main));\\n}\\n\\nrouter.creates = async = (req, res) => {\\n    const newUsers = new Users({\\n      _id: req.body._id,\\n      email: req.body.email,\\n      username: req.body.username,\\n      password: req.body.password,\\n    })\\n\\n    newUsers.save().then(item => res.json(item));\\n}\\n\".trim();var renameDoc=\"\\nconst reqString = { type: String, required: true }\\n\\nconst messageSchema = new Schema({\\n  userId: reqString,\\n  text: reqString\\n})\\n\\nconst userSchema = new Schema({\\n  email: reqString,\\n  username: reqString,\\n  password: reqString,\\n  level: Number,\\n  messages: [messageSchema],\\n  nameHistory: [String]\\n}, \\n{ timeStamps: true })\\n\\nmodule.exports = mongoose.model('renameRemoveDocs', userSchema);\\n\\n\\n//controllers\\nconst Items = require('../models/renameDoc.js');\\n\\nrouter.all = async (req, res) => {\\n    Items.find()\\n      .then(main => res.json(main));\\n}\\n\\nrouter.updates = async = (req, res) => {\\n    const newItems = Items.updateMany({}, {\\n      // $rename: { password: req.body.password },   // rename password to pass\\n      $unst: { pass: '' },                           // remove field\\n    })\\n      .then(main => res.json(main));\\n\\n    newItems.save().then(item => res.json(item));\\n}\\n\".trim();var timeStamps=\"\\nconst reqString = { type: String, required: true }\\n\\nconst timeSchema = new Schema({\\n  email: reqString,\\n  username: reqString,\\n  password: reqString,\\n  messages: {\\n    type: Number, default: 5, min: 0, max: 10\\n  },\\n  nameHistory: [String]       //every time name chage\\n},\\n{ timeStamps: true          //created and updated time automatically manage\\n})\\n\\nmodule.exports = mongoose.model('timeStamps', timeSchema);\\n\\n\\n//controllers\\nconst Users = require('../models/timeStamps');\\n\\nrouter.all = async (req, res) => {\\n    Users.find()\\n      .then(main => res.json(main))\\n}\\n\\n\\nrouter.creates = async = (req, res) => {\\n    const newItems = new Users({\\n      email: req.body.email,\\n      username: req.body.username,\\n      password: req.body.password,\\n      messages: req.body.messages,\\n    })\\n\\n    // const valid = new Promise((res) => {\\n    //   newItems.validate((err) => {\\n    //     if (err) {\\n    //       res(false)\\n    //     } else {\\n    //       res(true)\\n    //     }\\n    //   })\\n    // })\\n\\n    // if (valid) {\\n    //   newItems.save()\\n    // }\\n    newItems.save().then(item => res.json(item));\\n}\\n\".trim();var MongoCurd=/*#__PURE__*/function(_Component){_inherits(MongoCurd,_Component);function MongoCurd(){_classCallCheck(this,MongoCurd);return _possibleConstructorReturn(this,_getPrototypeOf(MongoCurd).apply(this,arguments));}_createClass(MongoCurd,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"b\",null,\"arrayOp.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:arraysSchema,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"conditional.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:conditional,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"increase.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:increase,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"insertMany.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:insertMany,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"items.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:itemsModels,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"nested.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:nested,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"PluralizedCollectioName.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:PluralizedCollectioName,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"primaryUniqeId.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:primaryUniqeId,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"renameDoc.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:renameDoc,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"timeStamps.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:timeStamps,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null)))));}}]);return MongoCurd;}(Component);export default withStyles(styles)(MongoCurd);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/mongoDB/deepMongodb/mongoQueries.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","arraysSchema","trim","conditional","increase","insertMany","itemsModels","nested","PluralizedCollectioName","primaryUniqeId","renameDoc","timeStamps","MongoCurd","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst arraysSchema = `\nconst arraysSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: Number,          //count number of messages\n  nameHistory: [String],      //every time name chage\n  testScore: [Number]\n})\n\nmodule.exports = mongoose.model('arraysOp', arraysSchema);\n\n\n//controllers\nconst Users = require('../models/arrayOp');\n\nrouter.all = async (req, res) => {\n    Users.find()\n      .sort({ date: -1 })\n      .then(main => res.json(main));\n}\n\nrouter.search = async (req, res) => {\n    Users.find({\n      testScore: { $all: [10, 20, 30] }\n    })\n      .then(main => res.json(main))\n}\n\nrouter.size = async (req, res) => {\n    Users.find({\n      testScore: { $size: 3 }\n    })\n      .then(main => res.json(main))\n}\n\nrouter.elementMatch = async (req, res) => {\n    Users.find({\n      testScore: { $elemMatch: { $gt: 20 } }\n    })\n      .then(main => res.json(main))\n}\n\nrouter.creates = async = (req, res) => {\n    const newUsers = new Users({\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n      testScore: req.body.testScore,\n    })\n\n    newUsers.save().then(item => res.json(item));\n}\n`.trim();\n\nconst conditional = `\nconst reqString = { type: String, required: true }\n\nconst messageSchema = new Schema({\n  userId: reqString,\n  text: reqString\n})\n\nconst userSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  level: Number,\n  messages: [messageSchema],\n  nameHistory: [String]\n}, {\n  timeStamps: true\n})\n\nmodule.exports = mongoose.model('conditional', userSchema);\n\n\n//controllers\nconst Items = require('../models/conditional');\n\nrouter.findLevel = async (req, res) => {\n    //Search an user level > 10\n    Items.find({\n      level: {\n        $exists: true,                    //check value exixt or not\n        // $gte: 10, $lt: 15               //gte = greater than or equal to\n      }\n    })\n      .then(main => res.json(main));\n}\n\nrouter.messages = async (req, res) => {\n    Items.findOne({\n      'messages.text': 'Text'\n    })\n      .then(main => res.json(main));\n}\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Items({\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n      level: req.body.level,\n    })\n\n    newItems.save().then(item => res.json(item));\n}\n`.trim();\n\nconst increase = `\nconst reqString = { type: String, required: true }\n\nconst userSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: Number,          //count number of messages\n})\n\nmodule.exports = mongoose.model('users', userSchema);\n\n\n//controllers\nconst Items = require('../models/conditional');\n\nrouter.findLevel = async (req, res) => {\n    //Search an user level > 10\n    Items.find({\n      level: {\n        $exists: true,                    //check value exixt or not\n        // $gte: 10, $lt: 15               //gte = greater than or equal to\n      }\n    })\n      .then(main => res.json(main));\n}\n\nrouter.messages = async (req, res) => {\n    Items.findOne({\n      'messages.text': 'Text'\n    })\n      .then(main => res.json(main));\n}\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Items({\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n      level: req.body.level,\n    })\n\n    newItems.save().then(item => res.json(item));\n}\n`.trim();\n\nconst insertMany = `\nconst reqString = { type: String, required: true }\n\nconst plurizedSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: {\n    type: Number, default: 5, min: 0, max: 10\n  },\n  nameHistory: [String]\n}, {\n  timeStamps: true\n})\n\nmodule.exports = mongoose.model('manyQry', plurizedSchema);\n\n\n//controllers\nconst Items = require('../models/insertMany');\n\nrouter.all = async (req, res) => {\n    Items.find()\n      .sort({ date: -1 })\n      .then(main => res.json(main));\n}\n\nrouter.inserts = async = (req, res) => {\n    Items.insertMany([{\n      \"email\": \"valid@gmail.com\", \"username\": \"min\", \"password\": \"password\"\n    },\n    {\n      \"email\": \"valid2@gmail.com\", \"username\": \"min2\", \"password\": \"password2\"\n    },\n    {\n      \"email\": \"valid3@gmail.com\", \"username\": \"min3\", \"password\": \"password3\"\n    }]).then(function () {\n      console.log(\"Data inserted\")  // Success\n    })\n}\n\nrouter.remove = async = (req, res) => {\n    Items.deleteMany({\n      username: ['min', 'min2']\n    }).then(function () {\n      console.log(\"Data inserted\")  // Success\n    })\n}\n`.trim();\n\nconst itemsModels = `\nconst MainSchema = new Schema({\n  title: { type: String, required: true },\n  age: { type: Number, required: true },\n  list: { type: Array, required: true },\n  status: { type: String, required: false },\n  qty: { type: Number },\n});\n\nmodule.exports = mains = mongoose.model('mains', MainSchema);\n\n\n//controllers\nconst Items = require('../models/items');\n\nrouter.all = async (req, res) => {\n    Items.find()\n      .sort({ date: -1 })\n      .then(main => res.json(main));\n}\n\nrouter.getOne = async (req, res) => {\n    Items.findById(req.params.id)\n      .then(main => res.json(main))\n}\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Items({\n      title: req.body.title,\n      age: req.body.age,\n      list: req.body.list,\n      status: req.body.status,\n      qty: req.body.qty,\n    })\n\n    newItems.save().then(item => res.json(item));\n}\n\nrouter.updates = async = (req, res) => {\n    Items.findByIdAndUpdate(req.params.id, {\n      title: req.body.title,\n      age: req.body.age,\n      list: req.body.list,\n      status: req.body.status,\n      qty: req.body.qty,\n      size: {\n        h: req.body.h,\n        w: req.body.w,\n        uom: req.body.uom,\n      }\n    }, { new: true }).then(data => { res.json(data) })\n}\n\nrouter.remove = async (req, res) => {\n    Items.findByIdAndRemove(req.params.id)\n      .then(main => main.remove().then(() => res.json({ success: true })))\n}\n`.trim();\n\nconst nested = `\nconst reqString = { type: String, required: true }\n\nconst messageSchema = new Schema({\n  userId: reqString,\n  text: reqString\n})\n\nconst userSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: [messageSchema],\n  nameHistory: [String]\n}, {\n  timeStamps: true\n})\n\nmodule.exports = mongoose.model('nested', userSchema);\n\n\n//controllers\nconst Items = require('../models/nested');\n\nrouter.all = async (req, res) => {\n    Items.find()\n      .sort({ date: -1 })\n      .then(main => res.json(main));\n}\n\nrouter.messages = async (req, res) => {\n    Items.findOne({\n      'messages.text': 'Text'\n    })\n      .then(main => res.json(main));\n}\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Items({\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n      messages: [\n        {\n          userId: req.body.email,\n          text: 'Text'\n        },\n      ]\n    })\n\n    newItems.save().then(item => res.json(item));\n}\n`.trim();\n\nconst PluralizedCollectioName = `\nconst reqString = { type: String, required: true }\n\nconst plurizedSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: {\n    type: Number, default: 5, min: 0, max: 10\n  },\n  nameHistory: [String]       //every time name chage\n}, {\n  timeStamps: true          //created and updated time automatically manage\n})\n\nmodule.exports = mongoose.model('plurized', plurizedSchema);\n/*\ncollection name=plurized\ncollection name is default create plural, if want singular collection name than follow as\nmodule.exports = mongoose.model('plurized', plurizedSchema,'plurized');\n*/\n\n\n//controllers\nconst Items = require('../models/PluralizedCollectioName');\n\nrouter.all = async (req, res) => {\n    Items.find()\n      .sort({ date: -1 })\n      .then(main => res.json(main));\n}\n\nrouter.getOne = async (req, res) => {\n    Items.findById(req.params.id)\n      .then(main => res.json(main))\n}\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Items({\n      title: req.body.title,\n      age: req.body.age,\n      list: req.body.list,\n      status: req.body.status,\n      qty: req.body.qty,\n    })\n\n    newItems.save().then(item => res.json(item));\n}\n`.trim();\n\nconst primaryUniqeId = `\nconst reqString = { type: String, required: true }\n\nconst arraysSchema = new Schema({\n  _id: reqString,            //to use own id\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: Number,          //count number of messages\n  nameHistory: [String],      //every time name chage\n  testScore: [Number]\n})\n\nmodule.exports = mongoose.model('keysIds', arraysSchema);\n\n\n//controllers\nconst Users = require('../models/primaryUniqeId');\n\nrouter.all = async (req, res) => {\n    Users.find()\n      .then(main => res.json(main));\n}\n\nrouter.creates = async = (req, res) => {\n    const newUsers = new Users({\n      _id: req.body._id,\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n    })\n\n    newUsers.save().then(item => res.json(item));\n}\n`.trim();\n\nconst renameDoc = `\nconst reqString = { type: String, required: true }\n\nconst messageSchema = new Schema({\n  userId: reqString,\n  text: reqString\n})\n\nconst userSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  level: Number,\n  messages: [messageSchema],\n  nameHistory: [String]\n}, \n{ timeStamps: true })\n\nmodule.exports = mongoose.model('renameRemoveDocs', userSchema);\n\n\n//controllers\nconst Items = require('../models/renameDoc.js');\n\nrouter.all = async (req, res) => {\n    Items.find()\n      .then(main => res.json(main));\n}\n\nrouter.updates = async = (req, res) => {\n    const newItems = Items.updateMany({}, {\n      // $rename: { password: req.body.password },   // rename password to pass\n      $unst: { pass: '' },                           // remove field\n    })\n      .then(main => res.json(main));\n\n    newItems.save().then(item => res.json(item));\n}\n`.trim();\n\nconst timeStamps = `\nconst reqString = { type: String, required: true }\n\nconst timeSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: {\n    type: Number, default: 5, min: 0, max: 10\n  },\n  nameHistory: [String]       //every time name chage\n},\n{ timeStamps: true          //created and updated time automatically manage\n})\n\nmodule.exports = mongoose.model('timeStamps', timeSchema);\n\n\n//controllers\nconst Users = require('../models/timeStamps');\n\nrouter.all = async (req, res) => {\n    Users.find()\n      .then(main => res.json(main))\n}\n\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Users({\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n      messages: req.body.messages,\n    })\n\n    // const valid = new Promise((res) => {\n    //   newItems.validate((err) => {\n    //     if (err) {\n    //       res(false)\n    //     } else {\n    //       res(true)\n    //     }\n    //   })\n    // })\n\n    // if (valid) {\n    //   newItems.save()\n    // }\n    newItems.save().then(item => res.json(item));\n}\n`.trim();\n\n\nclass MongoCurd extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <b>arrayOp.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={arraysSchema}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>conditional.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={conditional}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>increase.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={increase}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>insertMany.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={insertMany}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>items.js</b><br/>\n              <div style={titles}>\n                <PrismCode\n                  code={itemsModels}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>nested.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={nested}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>PluralizedCollectioName.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={PluralizedCollectioName}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>primaryUniqeId.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={primaryUniqeId}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>renameDoc.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={renameDoc}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>timeStamps.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={timeStamps}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n             <br/>\n             <br/>\n\n             <h3></h3>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(MongoCurd));\n"]},"metadata":{},"sourceType":"module"}