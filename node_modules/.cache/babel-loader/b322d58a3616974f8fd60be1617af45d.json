{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/ml/deepMl/pandas.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst Series = `\na = [1, 7, 2]\n\nmyvar = pd.Series(a)\nprint(myvar)`.trim();\nconst dataFrames = `\ndata = {\n  \"calories\": [420, 380, 390],\n  \"duration\": [50, 40, 45]\n}\n\ndf = pd.DataFrame(data)\ndf\n\n\ndf.loc[0]                                                                             #refer to the row index.\ndf = pd.DataFrame(data, index = [\"day1\", \"day2\", \"day3\"])                             #name your own indexes.\ndf.loc[\"day2\"]                                                                        #refer to the named index:\n`.trim();\nconst readJson = `\ndf = pd.read_json('data.json')\n\nprint(df.to_string()) \n`.trim();\nconst cleanData = `\ndf.dropna()                                                             //Remove rows that contain empty cells.\ndf.fillna(130, inplace = True)                                          //Replace NULL values with the number 130.\ndf[\"Calories\"].fillna(130, inplace = True)                              //Replace Only For Specified Columns.\n\nx = df[\"Calories\"].mean()                                               //Find MEAN, and replace any empty values with it.\ndf[\"Calories\"].fillna(x, inplace = True)\n`.trim();\nconst wrongs = `\ndf['Date'] = pd.to_datetime(df['Date'])                                 //Convert to date.\ndf.dropna(subset=['Date'], inplace = True)                              //Remove rows with a NULL value in the \"Date\" column.\n`.trim();\nconst fixings = `\nfor x in df.index:\n  if df.loc[x, \"Duration\"] > 120:\n    df.loc[x, \"Duration\"] = 120\n\n    \ndf.drop_duplicates(inplace = True)                                      //Remove all duplicates.\n`.trim();\nconst correlations = `\ndf.corr()                                                               //Relationship between the columns.\n`.trim();\nconst Plotting = `\ndf.plot()\nplt.show()                                                         \n\n\ndf.plot(kind = 'scatter', x = 'Duration', y = 'Calories')\n\ndf[\"Duration\"].plot(kind = 'hist')\n`.trim();\nconst data_ = `\nimport pandas as pd\nX = music_data = pd.read_csv('music.csv')\nX \ny = music_data['genre']\n`.trim();\nconst preadicting = `\nimport pandas as pd \nfrom sklearn.tree import DecisionTreeClassifier\n\nmusic_data = pd.read_csv('music.csv')\nx = music_data.drop(columns=['genre'])\ny = music_data['genre']\n\nmodel = DecisionTreeClassifier()\nmodel.fit(x, y)\nmusic_data\n\npredictions = model.predict([21, 1], [22, 0])\npredictions\n`.trim();\nconst dataFramesd = `\ndf = pd.read_csv(\"pandas.csv\")\npd.read_csv(\"pandas.csv\", skiprows=1)\npd.read_csv('pandas.csv', nrows=2)\npd.read_csv(\"pandas.csv\", header=1)                                                       #skiprows and header are same\npd.read_csv(\"pandas.csv\", na_values=[\"n.a.\", \"not available\"])\npd.read_csv(\"pandas.csv\", header=None, names = [\"ticker\",\"eps\",\"revenue\",\"people\"])\npd.read_csv('pandas.csv',header=0, parse_dates=[0], index_col=0, squeeze=True)\npd.read_csv('pandas.csv',  na_values={'eps': ['not available'],'revenue': [-1],'people': ['not available','n.a.']})\n    \n    \ndf.to_csv(\"new.csv\", index=False)                                                             #Write to CSV\ndf.to_csv(\"new.csv\", columns=[\"tickers\",\"price\"], index=False)\n\npd.read_excel(\"stock_data.xlsx\",\"Sheet1\")                                                     #Read Excel\ndf.to_excel(\"new.xlsx\", sheet_name=\"stocks\", index=False, startrow=2, startcol=1)             #Write to Excel\n\n\ndf.to_string()                                                                                #Print the entire DataFrame.\ndf=pd.options.display.max_rows                                                                #Maximum returned rows\ndf=pd.options.display.max_rows = 9999                       #Increase max. number of rows to display the entire DataFrame\n\n`.trim();\nconst sheets = `\ndf_stocks = pd.DataFrame({\n    'tickers': ['GOOGL', 'WMT', 'MSFT'],\n    'price': [845, 65, 64 ],\n    'pe': [30.37, 14.26, 30.97],\n    'eps': [27.82, 4.61, 2.12]\n})\n\ndf_weather =  pd.DataFrame({\n    'day': ['1/1/2017','1/2/2017','1/3/2017'],\n    'temperature': [32,35,28],\n    'event': ['Rain', 'Sunny', 'Snow']\n})\n\n\nwith pd.ExcelWriter('stocks_weather.xlsx') as writer:\n    df_stocks.to_excel(writer, sheet_name=\"stocks\")\n    df_weather.to_excel(writer, sheet_name=\"weather\")\n`.trim();\nconst interpolate = `\ndf.fillna(0)                                                                          #fillna\ndf.fillna(130, inplace = True)                                                        #Replace NULL values with the 130.\ndf[\"Calories\"].fillna(130, inplace = True)                                            #Replace Only For Specified Columns.\n\n\nnew_df = df.fillna(method=\"ffill\")                                                    #determine how to fill na values.\nnew_df = df.fillna(method=\"bfill\")\n\n\n#Use of axis\ndf.fillna(method=\"bfill\", axis=\"columns\")                                             # axis is either \"index\" or \"columns\"\ndf.fillna(method=\"ffill\",limit=1)                                                     #limit parameter\ndf.interpolate()                                                                      #interpolate\ndf.interpolate(method=\"time\")\n\ndf.dropna()                                                                           #dropna\ndf.drop_duplicates()\n\n\n#Inserting Missing Dates\ndt = pd.date_range(\"01-01-2017\",\"01-11-2017\")\nidx = pd.DatetimeIndex(dt)\ndf.reindex(idx)\n\n\ndf.replace(-99999, value=np.NaN)                                                      #Handling Missing Data-replace method\ndf.replace(to_replace=[-99999,-88888], value=0)                                       #Replacing list with single value\ndf.replace({'temperature': -99999,'windspeed': -99999,'event': '0'}, np.nan)          #Replacing per column\n          \nnew_df = df.replace({-99999: np.nan, 'no event': 'Sunny', })                          #Replacing by using mapping\ndf['area'][0] = 50                                                                    #Update data.\n\ndf=pd.Series([4.5, 7.2, -5.3, 3.6], index=['d', 'b', 'a', 'c'])                       #reindex\n\n`.trim();\nconst windspeed = `\ndf.replace({'temperature': '[A-Za-z]', 'windspeed': '[a-z]'},'', regex=True) \n\n\n3Replacing list with another list\n    df = pd.DataFrame({\n    'score': ['exceptional','average', 'good', 'poor', 'average', 'exceptional'],\n    'student': ['rob', 'maya', 'parthiv', 'tom', 'julian', 'erica']\n  })\n\n    df.replace(['poor', 'average', 'good', 'exceptional'], [1,2,3,4])\n`.trim();\nconst groupby = `\n    g.get_group('mumbai')\n    g.max()\n    g.min()\n    g.mean()\n    g.describe()\n    g.size()\n    g.count()\n    g.plot()\n`.trim();\nconst temperature = `\ndef grouper(df, idx, col):\n    if 80 <= df[col].loc[idx] <= 90:\n        return '80-90'\n    elif 50 <= df[col].loc[idx] <= 60:\n        return '50-60'\n    else:\n        return 'others'\n        \ng = df.groupby(lambda x: grouper(df, x, 'temperature'))\nfor key, d in g:\nprint(\"Group by Key: {}\\n\".format(key))\nprint(d)\n`.trim();\nconst concatenation = `\nindia_weather = pd.DataFrame({\n  \"city\": [\"mumbai\",\"delhi\",\"banglore\"],\n  \"temperature\": [32,45,30],\n  \"humidity\": [80, 60, 78]\n})\n\ndf = pd.concat([india_weather, us_weather])\n\n\n#Concatenation Using Index.\ntemperature_df = pd.DataFrame({\n  \"city\": [\"mumbai\",\"delhi\",\"banglore\"],\n  \"temperature\": [32,45,30],\n}, index=[0,1,2])\n\npd.concat([temperature_df,windspeed_df],axis=1)\n\n\n#Concatenate dataframe with series\ns = pd.Series([\"Humid\",\"Dry\",\"Rain\"], name=\"event\")\npd.concat([temperature_df,s],axis=1)\n`.trim();\nconst ignore = `\npd.concat([india_weather, us_weather], ignore_index=True)\n\n\n#pivot\ndf.pivot(index='city',columns='date')\ndf.pivot(index='city',columns='date',values=\"humidity\")\n\nf.pivot_table(index=\"city\",columns=\"date\", margins=True,aggfunc=np.sum)                                 #margins\ndf.pivot_table(index=pd.Grouper(freq='M',key='date'),columns='city')                                    #grouper\n\n\n#Melt\npd.melt(df, id_vars=[\"day\"], var_name='city', value_name='temperature')\n\n\n#Reshape dataframe using stack/unstack\ndf = pd.read_excel(\"stocks.xlsx\",header=[0,1])\ndf.stack()\ndf.stack(level=0)\ndf_stacked.unstack()\n\n\npd.read_excel(\"stocks_3_levels.xlsx\",header=[0,1,2])                                      #3 levels of column headers\ndf2.stack(level=1)\n`.trim();\nconst crosstab = `\npd.crosstab(df.Nationality,df.Handedness)\nMargins: pd.crosstab(df.Sex,df.Handedness, margins=True)\nNormalize: pd.crosstab(df.Sex, df.Handedness, normalize='index')\nAggfunc and Values: pd.crosstab(df.Sex, df.Handedness, values=df.Age, aggfunc=np.average)\n`.trim();\nconst specifics = `\n#Partial Date Index\ndf['2017-06-30']\ndf['2017-06'].Close.mean() \n\n\n#Date Range\ndf['2017-01-08':'2017-01-03']\n\ndf['Close'].resample('M').mean().head()                                                       #Resampling\n\n#Finding missing dates from datetimeindex\ndaily_index = pd.date_range(start=\"6/1/2016\",end=\"6/30/2016\",freq='D')\ndaily_index.difference(df.index)\n\n\n#generating DatetimeIndex with periods argument\npd.date_range('1/1/2011', periods=72, freq='H')\n`.trim();\nconst mergeDataframes = `\ndf1 = pd.DataFrame({\n  \"city\": [\"new york\",\"chicago\",\"orlando\"],\n  \"temperature\": [21,14,35],\n})\n\ndf2 = pd.DataFrame({\n  \"city\": [\"chicago\",\"new york\",\"orlando\"],\n  \"humidity\": [65,68,75],\n})\n\ndf3 = pd.merge(df1, df2, on=\"city\")\n\ndf3=pd.merge(df1,df2,on=\"city\",how=\"outer\",indicator=True)\ndf3= pd.merge(df1,df2,on=\"city\",how=\"outer\", suffixes=('_first','_second'))\n`.trim();\nconst sqlalchemes = `\nimport pandas as pd\nimport sqlalchemy\n\nengine = sqlalchemy.create_engine('mysql+pymysql://root:@localhost:3306/application')\n\ndf = pd.read_sql_table('customers',engine)\n\ndf = pd.read_sql_table('customers', engine, columns=[\"name\"])       #Read only selected columns\n\n\n#Join two tables and read them in a dataframe using read_sql_query\ndf = pd.read_sql_query(\"select id,name from customers\",engine)      \n\n\nquery = '''\n SELECT customers.name, customers.phone_number, orders.name, orders.amount\n FROM customers INNER JOIN orders\n ON customers.id=orders.customer_id\n'''\npd.read_sql(query,engine)                           #read_sql is a wrapper around read_sql_query and read_sql_table\n\ndf = pd.read_csv(\"customers.csv\")                   #Write to mysql database using to_sql\n\ndf = pd.read_csv(\"customers.csv\")\n\ndf.rename(columns={\n    'Customer Name': 'name',\n    'Customer Phone': 'phone_number'\n}, inplace=True)\n\n\n\n#to_sql has different parameters such as chunksize which allows to write data in chunks. Useful when size is huge\ndf.to_sql(\n    name='customers', # database table name\n    con=engine,\n    if_exists='append',\n    index=False                                                             \n)                                   \n`.trim();\nconst pandasMethods = `\ndf.shape\ndf.values\ndf.head(10)\ndf.describe()\ndf.memory_usage()\ndf.memory_usage(deep=True)\ndf.loc[1:3]\ndf.drop_duplicates()\ndf.count()\ndf.tail() \ndf.info()\ndf.sort_index()\ndf.isna()                            #Returns a dataframe filled with boolean values with true indicating missing values.\ndf.isnull().sum()                    #Calculate the number of missing values in each column.\n`.trim();\nconst pandasCopy = `\nimport numpy as np\n\nseries = pd.Series([1,2,np.nan,4])\n\nseries_2=series.copy(deep=True)\nprint(series_2)\n`.trim();\nconst addRows = `\n#Add rows\ndict = {'Name':['Martha', 'Tim', 'Rob', 'Georgia'],\n        'Maths':[87, 91, 97, 95],\n        'Science':[83, 99, 84, 76]\n       }\n  \ndf = pd.DataFrame(dict)\n  \ndf2 = {'Name': 'Amy', 'Maths': 89, 'Science': 93}\ndf = df.append(df2, ignore_index = True)\ndf\n\ndf.reset_index()\n\n\n\n#add columns\ndata = {'Name':['Martha', 'Tim', 'Rob', 'Georgia'],\n        'Maths':[87, 91, 97, 95],\n        'Science':[83, 99, 84, 76]\n       }\n\ndf = pd.DataFrame(data)\n\naddress = ['Delhi', 'Bangalore', 'Chennai', 'Patna']\n\ndf['Address'] = address\ndf\n\n\n\n#Add An Index\ndata = pd.read_csv(\"areas.csv\")\ndata.set_index(\"area\", inplace = True)                                                      #Setting area as index column\ndata.head()\n`.trim();\n\nclass Pandas extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }, \"Pandas (Data analysis)\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    }, \"Provides functions to make working with structured or tabular data fast, easy, and expressive.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    }, \"Pandas allows us to analyze big data and make conclusions based on statistical theories.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }, \"Primary objects is DataFrame and data.Series.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    }, \"Pandas find correlation between two/ more columns.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }, \"Pandas is designed for working with tabular/ heterogeneous data.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }, \"Pandas blends the high-performance, array-computing ideas of NumPy with the flexible data manipulation capabilities of spreadsheets and relational databases.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }, \"Pandas has a special Categorical type for holding data that uses the integer-based categorical representation or encoding.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, \"Data Science/ Data Analytics: \"), \"Is a process of analyzing large set of data point to get answer on questions releted to that data set.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    }, \"Data Munging/ Data Wrangling: \"), \"It's a Process of cleaning messy data.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }, \"Dataframe\"), \"Different ways of creating dataframe:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }, \"Using CSV\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }, \"Using excel\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    }, \"From python dictionary\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }, \"From list of tuples\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    }, \"From list of dictionaries\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    }, \"What Are The Most Important Features Of The Pandas Library?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    }, \"Data Alignment\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485\n      },\n      __self: this\n    }, \"Merge and join\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }, \"Memory Efficient\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    }, \"Time series\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    }, \"Reshaping\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }, \"Explain Categorical Data in Pandas?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    }, \"Categorical data refers to real-time data that can be repetitive for instance, data values under categories such as country, gender, codes will always be repetitive.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496\n      },\n      __self: this\n    }, \"Categorical values also take only a limited and fixed number of possible values. \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }, \"Numerical operations cannot be performed on such data. All values of categorical data in pandas are either in categories or np.nan.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502\n      },\n      __self: this\n    }, \"Import file.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: dataFramesd,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }, \"Methods:\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: pandasMethods,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    }, \"Write two dataframes to two separate sheets in excel\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: sheets,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, \"Handle Missing Data\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: interpolate,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }, \"Data Structures: \"), \"2\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }, \"Series: \"), \"Is a 1D array-like object containing a sequence of values and an associated array of data labels, called its index.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }, \"DataFrame: \"), \"A DataFrame represents a rectangular table of data and contains an ordered collection of columns, each of which can be a different value type (numeric, string, boolean, etc.). DataFrame has both a row and column index.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552\n      },\n      __self: this\n    }, \"Panel: \"), \"Is a 3-dimensional DS and includes items such as major_axis and minor_axis.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }, \"Series\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Series,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    }, \"DataFrames\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: dataFrames,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578\n      },\n      __self: this\n    }, \"How can we create copy of series in Pandas?\"), \"copy() Make a deep copy, including a copy of the data and the indices. With deep=False neither the indices or the data are copied.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581\n      },\n      __self: this\n    }), \"Note that when deep=True data is copied, actual python objects will not be copied recursively, only the reference to the object.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: pandasCopy,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594\n      },\n      __self: this\n    }, \"How Will You Add An Index, Row, Or Column To A Dataframe In Pandas?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596\n      },\n      __self: this\n    }, \".loc (): \"), \"Is label based.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    }, \".iloc (): \"), \"Integer based.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598\n      },\n      __self: this\n    }, \".ix(): \"), \"Both label and integer based.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600\n      },\n      __self: this\n    }, \"To add columns to the DataFrame, we can use .loc () or .iloc ().\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: addRows,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611\n      },\n      __self: this\n    }, \"Pandas Read JSON\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: readJson,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621\n      },\n      __self: this\n    }, \"Cleaning Empty Cells\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: cleanData,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 623\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631\n      },\n      __self: this\n    }, \"Cleaning Data of Wrong Format\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: wrongs,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 633\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641\n      },\n      __self: this\n    }, \"Pandas - Fixing Wrong Data\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 642\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: fixings,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 643\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 649\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 651\n      },\n      __self: this\n    }, \"Data Correlations\"), \"The corr() method calculates the relationship between each column in our data set.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 653\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }, \"The number varies from -1 to 1.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    }, \"1 means that there is a 1 to 1 relationship (a perfect correlation), and for this data set, each time a value went up in the first column, the other one went up as well.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659\n      },\n      __self: this\n    }, \"0.9 is also a good relationship, and if you increase one value, the other will probably increase as well.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660\n      },\n      __self: this\n    }, \"-0.9 would be just as good relationship as 0.9, but if you increase one value, the other will probably go down.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662\n      },\n      __self: this\n    }, \"0.2 means NOT a good relationship, meaning that if one value goes up does not mean that the other will.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: correlations,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674\n      },\n      __self: this\n    }, \"Plotting\"), \"Uses the plot() method to create diagrams.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    }), \"Specify that you want a scatter plot with the kind argument:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679\n      },\n      __self: this\n    }), \"kind = 'scatter'\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681\n      },\n      __self: this\n    }), \"A scatter plot needs an x- and a y-axis.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683\n      },\n      __self: this\n    }), \"Will use \\\"Duration\\\" for the x-axis and \\\"Calories\\\" for the y-axis.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685\n      },\n      __self: this\n    }), \"Include the x and y arguments like this:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687\n      },\n      __self: this\n    }), \"x = 'Duration', y = 'Calories'\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692\n      },\n      __self: this\n    }, \"Histogram\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 693\n      },\n      __self: this\n    }), \"Use the kind argument to specify that you want a histogram:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 695\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 696\n      },\n      __self: this\n    }), \"kind = 'hist'\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698\n      },\n      __self: this\n    }), \"A histogram needs only one column.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700\n      },\n      __self: this\n    }), \"A histogram shows us the frequency of each interval, e.g. how many workouts lasted between 50 and 60 minutes?\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 702\n      },\n      __self: this\n    }), \"Will use the \\\"Duration\\\" column to create the histogram.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 706\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Plotting,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 707\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 714\n      },\n      __self: this\n    }, \"Preparing the Data\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: data_,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 716\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 723\n      },\n      __self: this\n    }, \"Learning and Predicting\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: preadicting,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 733\n      },\n      __self: this\n    }, \"Regex\"), \"when windspeed is 6 mph, 7 mph etc. & temperature is 32 F, 28 F etc.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: windspeed,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 736\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 742\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 743\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 745\n      },\n      __self: this\n    }, \"SELECT * from weather_data GROUP BY city\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 747\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: groupby,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 748\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 756\n      },\n      __self: this\n    }, \"Group data using custom function\"), \"Let's say you want to group your data using custom function. Here the requirement is to create three groups.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 758\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 759\n      },\n      __self: this\n    }, \"1.Days when temperature was between 80 and 90.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 760\n      },\n      __self: this\n    }, \"2.Days when it was between 50 and 60.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 761\n      },\n      __self: this\n    }, \"3.Days when it was anything else.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 763\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: temperature,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 764\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 770\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 772\n      },\n      __self: this\n    }, \"Basic Concatenation\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 773\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: concatenation,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 774\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 780\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 782\n      },\n      __self: this\n    }, \"Ignore Index\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 783\n      },\n      __self: this\n    }, \"Pivot: \"), \"Allows to Transform/ reshape data.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 784\n      },\n      __self: this\n    }), \"Pivot table used tosummarize and aggregate data inside dataframe.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 786\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 787\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 788\n      },\n      __self: this\n    }, \"Melt:\"), \"Used to transform/ reshape data.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 789\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 790\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: ignore,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 791\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 797\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 799\n      },\n      __self: this\n    }, \"Crosstab\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 800\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: crosstab,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 801\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 807\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 809\n      },\n      __self: this\n    }, \"Time Series Analysis\"), \"Time Series is a set of data points indexed in time order.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 811\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 812\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 813\n      },\n      __self: this\n    }, \"Benefits of DatetimeIndex:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 814\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 815\n      },\n      __self: this\n    }, \"1.Partial Date Index: Select Specific Months Data.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 816\n      },\n      __self: this\n    }, \"2.Select Date Range.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 818\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 819\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 820\n      },\n      __self: this\n    }, \"Benefits of having DatetimeIndex:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 821\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 822\n      },\n      __self: this\n    }, \"Generating DatetimeIndex with periods argument.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 824\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: specifics,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 825\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 831\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 833\n      },\n      __self: this\n    }, \"Merge DataFrame\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 834\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: mergeDataframes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 835\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 841\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 843\n      },\n      __self: this\n    }, \"sqlalchemy\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 844\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: sqlalchemes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 845\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Pandas);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ml/deepMl/pandas.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","Series","trim","dataFrames","readJson","cleanData","wrongs","fixings","correlations","Plotting","data_","preadicting","dataFramesd","sheets","interpolate","windspeed","groupby","temperature","concatenation","ignore","crosstab","specifics","mergeDataframes","sqlalchemes","pandasMethods","pandasCopy","addRows","Pandas","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst Series = `\na = [1, 7, 2]\n\nmyvar = pd.Series(a)\nprint(myvar)`.trim();\n\nconst dataFrames = `\ndata = {\n  \"calories\": [420, 380, 390],\n  \"duration\": [50, 40, 45]\n}\n\ndf = pd.DataFrame(data)\ndf\n\n\ndf.loc[0]                                                                             #refer to the row index.\ndf = pd.DataFrame(data, index = [\"day1\", \"day2\", \"day3\"])                             #name your own indexes.\ndf.loc[\"day2\"]                                                                        #refer to the named index:\n`.trim();\n\nconst readJson = `\ndf = pd.read_json('data.json')\n\nprint(df.to_string()) \n`.trim();\n\nconst cleanData = `\ndf.dropna()                                                             //Remove rows that contain empty cells.\ndf.fillna(130, inplace = True)                                          //Replace NULL values with the number 130.\ndf[\"Calories\"].fillna(130, inplace = True)                              //Replace Only For Specified Columns.\n\nx = df[\"Calories\"].mean()                                               //Find MEAN, and replace any empty values with it.\ndf[\"Calories\"].fillna(x, inplace = True)\n`.trim();\n\nconst wrongs = `\ndf['Date'] = pd.to_datetime(df['Date'])                                 //Convert to date.\ndf.dropna(subset=['Date'], inplace = True)                              //Remove rows with a NULL value in the \"Date\" column.\n`.trim();\n\nconst fixings = `\nfor x in df.index:\n  if df.loc[x, \"Duration\"] > 120:\n    df.loc[x, \"Duration\"] = 120\n\n    \ndf.drop_duplicates(inplace = True)                                      //Remove all duplicates.\n`.trim();\n\nconst correlations = `\ndf.corr()                                                               //Relationship between the columns.\n`.trim();\n\nconst Plotting = `\ndf.plot()\nplt.show()                                                         \n\n\ndf.plot(kind = 'scatter', x = 'Duration', y = 'Calories')\n\ndf[\"Duration\"].plot(kind = 'hist')\n`.trim();\n\nconst data_ = `\nimport pandas as pd\nX = music_data = pd.read_csv('music.csv')\nX \ny = music_data['genre']\n`.trim()\n\nconst preadicting = `\nimport pandas as pd \nfrom sklearn.tree import DecisionTreeClassifier\n\nmusic_data = pd.read_csv('music.csv')\nx = music_data.drop(columns=['genre'])\ny = music_data['genre']\n\nmodel = DecisionTreeClassifier()\nmodel.fit(x, y)\nmusic_data\n\npredictions = model.predict([21, 1], [22, 0])\npredictions\n`.trim()\n\nconst dataFramesd = `\ndf = pd.read_csv(\"pandas.csv\")\npd.read_csv(\"pandas.csv\", skiprows=1)\npd.read_csv('pandas.csv', nrows=2)\npd.read_csv(\"pandas.csv\", header=1)                                                       #skiprows and header are same\npd.read_csv(\"pandas.csv\", na_values=[\"n.a.\", \"not available\"])\npd.read_csv(\"pandas.csv\", header=None, names = [\"ticker\",\"eps\",\"revenue\",\"people\"])\npd.read_csv('pandas.csv',header=0, parse_dates=[0], index_col=0, squeeze=True)\npd.read_csv('pandas.csv',  na_values={'eps': ['not available'],'revenue': [-1],'people': ['not available','n.a.']})\n    \n    \ndf.to_csv(\"new.csv\", index=False)                                                             #Write to CSV\ndf.to_csv(\"new.csv\", columns=[\"tickers\",\"price\"], index=False)\n\npd.read_excel(\"stock_data.xlsx\",\"Sheet1\")                                                     #Read Excel\ndf.to_excel(\"new.xlsx\", sheet_name=\"stocks\", index=False, startrow=2, startcol=1)             #Write to Excel\n\n\ndf.to_string()                                                                                #Print the entire DataFrame.\ndf=pd.options.display.max_rows                                                                #Maximum returned rows\ndf=pd.options.display.max_rows = 9999                       #Increase max. number of rows to display the entire DataFrame\n\n`.trim();\n\nconst sheets = `\ndf_stocks = pd.DataFrame({\n    'tickers': ['GOOGL', 'WMT', 'MSFT'],\n    'price': [845, 65, 64 ],\n    'pe': [30.37, 14.26, 30.97],\n    'eps': [27.82, 4.61, 2.12]\n})\n\ndf_weather =  pd.DataFrame({\n    'day': ['1/1/2017','1/2/2017','1/3/2017'],\n    'temperature': [32,35,28],\n    'event': ['Rain', 'Sunny', 'Snow']\n})\n\n\nwith pd.ExcelWriter('stocks_weather.xlsx') as writer:\n    df_stocks.to_excel(writer, sheet_name=\"stocks\")\n    df_weather.to_excel(writer, sheet_name=\"weather\")\n`.trim();\n\nconst interpolate = `\ndf.fillna(0)                                                                          #fillna\ndf.fillna(130, inplace = True)                                                        #Replace NULL values with the 130.\ndf[\"Calories\"].fillna(130, inplace = True)                                            #Replace Only For Specified Columns.\n\n\nnew_df = df.fillna(method=\"ffill\")                                                    #determine how to fill na values.\nnew_df = df.fillna(method=\"bfill\")\n\n\n#Use of axis\ndf.fillna(method=\"bfill\", axis=\"columns\")                                             # axis is either \"index\" or \"columns\"\ndf.fillna(method=\"ffill\",limit=1)                                                     #limit parameter\ndf.interpolate()                                                                      #interpolate\ndf.interpolate(method=\"time\")\n\ndf.dropna()                                                                           #dropna\ndf.drop_duplicates()\n\n\n#Inserting Missing Dates\ndt = pd.date_range(\"01-01-2017\",\"01-11-2017\")\nidx = pd.DatetimeIndex(dt)\ndf.reindex(idx)\n\n\ndf.replace(-99999, value=np.NaN)                                                      #Handling Missing Data-replace method\ndf.replace(to_replace=[-99999,-88888], value=0)                                       #Replacing list with single value\ndf.replace({'temperature': -99999,'windspeed': -99999,'event': '0'}, np.nan)          #Replacing per column\n          \nnew_df = df.replace({-99999: np.nan, 'no event': 'Sunny', })                          #Replacing by using mapping\ndf['area'][0] = 50                                                                    #Update data.\n\ndf=pd.Series([4.5, 7.2, -5.3, 3.6], index=['d', 'b', 'a', 'c'])                       #reindex\n\n`.trim();\n\nconst windspeed = `\ndf.replace({'temperature': '[A-Za-z]', 'windspeed': '[a-z]'},'', regex=True) \n\n\n3Replacing list with another list\n    df = pd.DataFrame({\n    'score': ['exceptional','average', 'good', 'poor', 'average', 'exceptional'],\n    'student': ['rob', 'maya', 'parthiv', 'tom', 'julian', 'erica']\n  })\n\n    df.replace(['poor', 'average', 'good', 'exceptional'], [1,2,3,4])\n`.trim();\n\nconst groupby = `\n    g.get_group('mumbai')\n    g.max()\n    g.min()\n    g.mean()\n    g.describe()\n    g.size()\n    g.count()\n    g.plot()\n`.trim();\n\nconst temperature = `\ndef grouper(df, idx, col):\n    if 80 <= df[col].loc[idx] <= 90:\n        return '80-90'\n    elif 50 <= df[col].loc[idx] <= 60:\n        return '50-60'\n    else:\n        return 'others'\n        \ng = df.groupby(lambda x: grouper(df, x, 'temperature'))\nfor key, d in g:\nprint(\"Group by Key: {}\\n\".format(key))\nprint(d)\n`.trim();\n\nconst concatenation = `\nindia_weather = pd.DataFrame({\n  \"city\": [\"mumbai\",\"delhi\",\"banglore\"],\n  \"temperature\": [32,45,30],\n  \"humidity\": [80, 60, 78]\n})\n\ndf = pd.concat([india_weather, us_weather])\n\n\n#Concatenation Using Index.\ntemperature_df = pd.DataFrame({\n  \"city\": [\"mumbai\",\"delhi\",\"banglore\"],\n  \"temperature\": [32,45,30],\n}, index=[0,1,2])\n\npd.concat([temperature_df,windspeed_df],axis=1)\n\n\n#Concatenate dataframe with series\ns = pd.Series([\"Humid\",\"Dry\",\"Rain\"], name=\"event\")\npd.concat([temperature_df,s],axis=1)\n`.trim();\n\nconst ignore = `\npd.concat([india_weather, us_weather], ignore_index=True)\n\n\n#pivot\ndf.pivot(index='city',columns='date')\ndf.pivot(index='city',columns='date',values=\"humidity\")\n\nf.pivot_table(index=\"city\",columns=\"date\", margins=True,aggfunc=np.sum)                                 #margins\ndf.pivot_table(index=pd.Grouper(freq='M',key='date'),columns='city')                                    #grouper\n\n\n#Melt\npd.melt(df, id_vars=[\"day\"], var_name='city', value_name='temperature')\n\n\n#Reshape dataframe using stack/unstack\ndf = pd.read_excel(\"stocks.xlsx\",header=[0,1])\ndf.stack()\ndf.stack(level=0)\ndf_stacked.unstack()\n\n\npd.read_excel(\"stocks_3_levels.xlsx\",header=[0,1,2])                                      #3 levels of column headers\ndf2.stack(level=1)\n`.trim();\n\nconst crosstab = `\npd.crosstab(df.Nationality,df.Handedness)\nMargins: pd.crosstab(df.Sex,df.Handedness, margins=True)\nNormalize: pd.crosstab(df.Sex, df.Handedness, normalize='index')\nAggfunc and Values: pd.crosstab(df.Sex, df.Handedness, values=df.Age, aggfunc=np.average)\n`.trim();\n\nconst specifics = `\n#Partial Date Index\ndf['2017-06-30']\ndf['2017-06'].Close.mean() \n\n\n#Date Range\ndf['2017-01-08':'2017-01-03']\n\ndf['Close'].resample('M').mean().head()                                                       #Resampling\n\n#Finding missing dates from datetimeindex\ndaily_index = pd.date_range(start=\"6/1/2016\",end=\"6/30/2016\",freq='D')\ndaily_index.difference(df.index)\n\n\n#generating DatetimeIndex with periods argument\npd.date_range('1/1/2011', periods=72, freq='H')\n`.trim();\n\nconst mergeDataframes = `\ndf1 = pd.DataFrame({\n  \"city\": [\"new york\",\"chicago\",\"orlando\"],\n  \"temperature\": [21,14,35],\n})\n\ndf2 = pd.DataFrame({\n  \"city\": [\"chicago\",\"new york\",\"orlando\"],\n  \"humidity\": [65,68,75],\n})\n\ndf3 = pd.merge(df1, df2, on=\"city\")\n\ndf3=pd.merge(df1,df2,on=\"city\",how=\"outer\",indicator=True)\ndf3= pd.merge(df1,df2,on=\"city\",how=\"outer\", suffixes=('_first','_second'))\n`.trim();\n\nconst sqlalchemes = `\nimport pandas as pd\nimport sqlalchemy\n\nengine = sqlalchemy.create_engine('mysql+pymysql://root:@localhost:3306/application')\n\ndf = pd.read_sql_table('customers',engine)\n\ndf = pd.read_sql_table('customers', engine, columns=[\"name\"])       #Read only selected columns\n\n\n#Join two tables and read them in a dataframe using read_sql_query\ndf = pd.read_sql_query(\"select id,name from customers\",engine)      \n\n\nquery = '''\n SELECT customers.name, customers.phone_number, orders.name, orders.amount\n FROM customers INNER JOIN orders\n ON customers.id=orders.customer_id\n'''\npd.read_sql(query,engine)                           #read_sql is a wrapper around read_sql_query and read_sql_table\n\ndf = pd.read_csv(\"customers.csv\")                   #Write to mysql database using to_sql\n\ndf = pd.read_csv(\"customers.csv\")\n\ndf.rename(columns={\n    'Customer Name': 'name',\n    'Customer Phone': 'phone_number'\n}, inplace=True)\n\n\n\n#to_sql has different parameters such as chunksize which allows to write data in chunks. Useful when size is huge\ndf.to_sql(\n    name='customers', # database table name\n    con=engine,\n    if_exists='append',\n    index=False                                                             \n)                                   \n`.trim();\n\nconst pandasMethods = `\ndf.shape\ndf.values\ndf.head(10)\ndf.describe()\ndf.memory_usage()\ndf.memory_usage(deep=True)\ndf.loc[1:3]\ndf.drop_duplicates()\ndf.count()\ndf.tail() \ndf.info()\ndf.sort_index()\ndf.isna()                            #Returns a dataframe filled with boolean values with true indicating missing values.\ndf.isnull().sum()                    #Calculate the number of missing values in each column.\n`.trim();\n\nconst pandasCopy = `\nimport numpy as np\n\nseries = pd.Series([1,2,np.nan,4])\n\nseries_2=series.copy(deep=True)\nprint(series_2)\n`.trim();\n\nconst addRows = `\n#Add rows\ndict = {'Name':['Martha', 'Tim', 'Rob', 'Georgia'],\n        'Maths':[87, 91, 97, 95],\n        'Science':[83, 99, 84, 76]\n       }\n  \ndf = pd.DataFrame(dict)\n  \ndf2 = {'Name': 'Amy', 'Maths': 89, 'Science': 93}\ndf = df.append(df2, ignore_index = True)\ndf\n\ndf.reset_index()\n\n\n\n#add columns\ndata = {'Name':['Martha', 'Tim', 'Rob', 'Georgia'],\n        'Maths':[87, 91, 97, 95],\n        'Science':[83, 99, 84, 76]\n       }\n\ndf = pd.DataFrame(data)\n\naddress = ['Delhi', 'Bangalore', 'Chennai', 'Patna']\n\ndf['Address'] = address\ndf\n\n\n\n#Add An Index\ndata = pd.read_csv(\"areas.csv\")\ndata.set_index(\"area\", inplace = True)                                                      #Setting area as index column\ndata.head()\n`.trim();\n\n\nclass Pandas extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Pandas (Data analysis)</h3>\n              <ul>\n                <li>Provides functions to make working with structured or tabular data fast, easy, and expressive.</li>\n                <li>Pandas allows us to analyze big data and make conclusions based on statistical theories.</li>\n                <li>Primary objects is DataFrame and data.Series.</li>\n                <li>Pandas find correlation between two/ more columns.</li>\n                <li>Pandas is designed for working with tabular/ heterogeneous data.</li>\n                <li>Pandas blends the high-performance, array-computing ideas of NumPy with the flexible data manipulation capabilities of spreadsheets and relational databases.</li>\n                <li>Pandas has a special Categorical type for holding data that uses the integer-based categorical representation or encoding.</li>\n              </ul>\n              <br />\n\n              <br />\n              <ul>\n                <li><b>Data Science/ Data Analytics: </b>Is a process of analyzing large set of data point to get answer on questions releted to that data set.</li>\n                <br />\n\n                <li><b>Data Munging/ Data Wrangling: </b>It's a Process of cleaning messy data.</li>\n              </ul>\n              <br />\n\n              <h3>Dataframe</h3>\n              Different ways of creating dataframe:\n              <ul>\n                <li>Using CSV</li>\n                <li>Using excel</li>\n                <li>From python dictionary</li>\n                <li>From list of tuples</li>\n                <li>From list of dictionaries</li>\n              </ul>\n              <br />\n\n              <h3>What Are The Most Important Features Of The Pandas Library?</h3>\n              <ul>\n                <li>Data Alignment</li>\n                <li>Merge and join</li>\n                <li>Memory Efficient</li>\n                <li>Time series</li>\n                <li>Reshaping</li>\n              </ul>\n              <br />\n\n              <h3>Explain Categorical Data in Pandas?</h3>\n              <ul>\n                <li>Categorical data refers to real-time data that can be repetitive for instance, data values under\n                  categories such as country, gender, codes will always be repetitive.</li>\n                <li>Categorical values also take only a limited and fixed number of possible values. </li>\n                <li>Numerical operations cannot be performed on such data. All values of categorical data in pandas\n                  are either in categories or np.nan.</li>\n              </ul>\n              <br />\n\n              <b>Import file.</b>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={dataFramesd}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Methods:</b>\n              <div style={titles}>\n                <PrismCode\n                  code={pandasMethods}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Write two dataframes to two separate sheets in excel</b>\n              <div style={titles}>\n                <PrismCode\n                  code={sheets}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Handle Missing Data</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={interpolate}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Data Structures: </b>2\n              <ul>\n                <li><b>Series: </b>Is a 1D array-like object containing a sequence of values and an associated array of data labels, called its index.</li>\n                <br />\n                <li><b>DataFrame: </b>A DataFrame represents a rectangular table of data and contains an ordered collection of columns, each of which can be\n                  a different value type (numeric, string, boolean, etc.). DataFrame has both a row and column index.</li>\n                <br />\n                <li><b>Panel: </b>Is a 3-dimensional DS and includes items such as major_axis and minor_axis.</li>\n              </ul>\n              <br />\n\n              <h3>Series</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Series}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>DataFrames</h3>\n\n              <div style={titles}>\n                <PrismCode\n                  code={dataFrames}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <br />\n\n              <h3>How can we create copy of series in Pandas?</h3>\n              copy() Make a deep copy, including a copy of the data and the indices. With deep=False neither the\n              indices or the data are copied.\n              <br />\n              Note that when deep=True data is copied, actual python objects will not be copied\n              recursively, only the reference to the object.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={pandasCopy}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>How Will You Add An Index, Row, Or Column To A Dataframe In Pandas?</h3>\n              <ul>\n                <li><b>.loc (): </b>Is label based.</li>\n                <li><b>.iloc (): </b>Integer based.</li>\n                <li><b>.ix(): </b>Both label and integer based.</li>\n                <br />\n                <li>To add columns to the DataFrame, we can use .loc () or .iloc ().</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={addRows}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Pandas Read JSON</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={readJson}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Cleaning Empty Cells</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={cleanData}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Cleaning Data of Wrong Format</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={wrongs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Pandas - Fixing Wrong Data</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={fixings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Data Correlations</h3>\n              The corr() method calculates the relationship between each column in our data set.\n              <br />\n              <br />\n              <b>The number varies from -1 to 1.</b>\n              <ul>\n                <li>1 means that there is a 1 to 1 relationship (a perfect correlation), and for this data set, each\n                  time a value went up in the first column, the other one went up as well.</li>\n                <li>0.9 is also a good relationship, and if you increase one value, the other will probably increase as well.</li>\n                <li>-0.9 would be just as good relationship as 0.9, but if you increase one value, the other will\n                  probably go down.</li>\n                <li>0.2 means NOT a good relationship, meaning that if one value goes up does not mean that the\n                  other will.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={correlations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Plotting</h3>\n              Uses the plot() method to create diagrams.\n              <br />\n              <br />\n              Specify that you want a scatter plot with the kind argument:\n              <br />\n              kind = 'scatter'\n              <br />\n              A scatter plot needs an x- and a y-axis.\n              <br />\n              Will use \"Duration\" for the x-axis and \"Calories\" for the y-axis.\n              <br />\n              Include the x and y arguments like this:\n              <br />\n              x = 'Duration', y = 'Calories'\n              <br />\n              <br />\n\n              <b>Histogram</b>\n              <br />\n              Use the kind argument to specify that you want a histogram:\n              <br />\n              <br />\n              kind = 'hist'\n              <br />\n              A histogram needs only one column.\n              <br />\n              A histogram shows us the frequency of each interval, e.g. how many workouts lasted between 50 and 60 minutes?\n              <br />\n              Will use the \"Duration\" column to create the histogram.\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={Plotting}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <h3>Preparing the Data</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={data_}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <h3>Learning and Predicting</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={preadicting}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Regex</h3>\n              when windspeed is 6 mph, 7 mph etc. & temperature is 32 F, 28 F etc.\n              <div style={titles}>\n                <PrismCode\n                  code={windspeed}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>SELECT * from weather_data GROUP BY city</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={groupby}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Group data using custom function</h3>\n              Let's say you want to group your data using custom function. Here the requirement is to create three groups.\n              <ul>\n                <li>1.Days when temperature was between 80 and 90.</li>\n                <li>2.Days when it was between 50 and 60.</li>\n                <li>3.Days when it was anything else.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={temperature}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Basic Concatenation</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={concatenation}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Ignore Index</h3>\n              <b>Pivot: </b>Allows to Transform/ reshape data.\n              <br />\n              Pivot table used tosummarize and aggregate data inside dataframe.\n              <br />\n              <br />\n              <b>Melt:</b>Used to transform/ reshape data.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={ignore}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Crosstab</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={crosstab}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Time Series Analysis</h3>\n              Time Series is a set of data points indexed in time order.\n              <br />\n              <br />\n              <b>Benefits of DatetimeIndex:</b>\n              <ul>\n                <li>1.Partial Date Index: Select Specific Months Data.</li>\n                <li>2.Select Date Range.</li>\n              </ul>\n              <br />\n              <br />\n              <b>Benefits of having DatetimeIndex:</b>\n              <ul>\n                <li>Generating DatetimeIndex with periods argument.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={specifics}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Merge DataFrame</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={mergeDataframes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>sqlalchemy</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={sqlalchemes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Pandas));\n"]},"metadata":{},"sourceType":"module"}