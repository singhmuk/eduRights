{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var useSelector=\"\\n//components/getPosts.js\\nimport React, { useEffect } from 'react';\\nimport { connect } from 'react-redux';\\nimport { fetchPosts } from '../actions/postData';\\n\\nconst Posts  = (props) => {\\n  useEffect(() => {\\n    props.fetchPosts();\\n  })\\n  \\n  const getItems = () => {\\n    return props.data.map(post => (\\n      <div key={post.id}>\\n        <h3>{post.title}</h3>\\n        <p>{post.body}</p>\\n      </div>\\n    ))\\n  }\\n\\n    return (\\n      <div>{getItems()}</div>\\n    );\\n  }\\n\\nconst mapStateToProps = state => ({\\n  data: state.object.items\\n});\\n\\nexport default connect(mapStateToProps, { fetchPosts })(Posts);\".trim();var reducers=\"\\n//actions/types.js\\nexport const GET_DATA = 'GET_DATA';\\n\\n\\n//actions/postActions.js\\nimport { GET_DATA } from './types';\\n\\nexport const fetchPosts = () => dispatch => {\\n  fetch('https://jsonplaceholder.typicode.com/posts')\\n    .then(res => res.json())\\n    .then(posts =>\\n      dispatch({\\n        type: GET_DATA,\\n        payload: posts\\n      })\\n    );\\n};\\n\\n\\n//reducers/mapList.js\\nimport { GET_DATA } from '../actions/types';\\n\\nconst initialState = {\\n  items: [],\\n};\\n\\nexport default function(state = initialState, action) {\\n  switch (action.type) {\\n    case GET_DATA:\\n      return {\\n        ...state,\\n        items: action.payload\\n      };\\n    \\n    default:\\n      return state;\\n  }\\n}\\n\".trim();var components=\"\\n//AddContact.js\\nimport React, { useState } from \\\"react\\\";\\nimport { useDispatch } from \\\"react-redux\\\";\\nimport { addContact } from \\\"../actions/contactAction\\\";\\nimport shortid from \\\"shortid\\\";\\nimport { useHistory } from \\\"react-router-dom\\\";\\n\\nconst AddContact = () => {\\n  let history = useHistory();\\n  const dispatch = useDispatch();\\n  const [name, setName] = useState(\\\"\\\");\\n  const [email, setEmail] = useState(\\\"\\\");\\n  const [phone, setPhone] = useState(\\\"\\\");\\n\\n  const createContact = (e) => {\\n    e.preventDefault();\\n    const new_contact = {\\n      id: shortid.generate(),\\n      name: name,\\n      phone: phone,\\n      email: email,\\n    };\\n    dispatch(addContact(new_contact));\\n    history.push(\\\"/\\\");\\n  };\\n\\n  return (\\n    <form onSubmit={(e) => createContact(e)}>\\n      <input type=\\\"text\\\" value={name} onChange={(e) => setName(e.target.value)} />\\n      <input type=\\\"text\\\" value={phone} onChange={(e) => setPhone(e.target.value)} />\\n      <input type=\\\"text\\\" value={email} onChange={(e) => setEmail(e.target.value)} />\\n      <button type=\\\"submit\\\"> Create Contact </button>\\n    </form>\\n  );\\n};\\n\\n\\n\\n//Contact.js\\nimport { Link } from \\\"react-router-dom\\\";\\nimport { deleteContact } from \\\"../actions/contactAction\\\";\\nimport { useDispatch } from \\\"react-redux\\\";\\nconst Contact = ({ contact, selectAll }) => {\\n\\n  const dispatch = useDispatch();\\n  const { name, phone, email, id } = contact;\\n  return (\\n    <tr>\\n      <input type=\\\"checkbox\\\" checked={selectAll} />\\n      <td>{name}</td>\\n      <td>{phone}</td>\\n      <td>{email}</td>\\n      <td>\\n        <Link to={'/contacts/edit/'$'{id}'}>E</Link>\\n        <span onClick={() => dispatch(deleteContact(id))}>X</span>\\n      </td>\\n    </tr>\\n  );\\n};\\n\\n\\n\\n//Contacts.js\\nimport React, { useState, useEffect } from \\\"react\\\";\\nimport { useDispatch, useSelector } from \\\"react-redux\\\";\\nimport {\\n  clearAllContact,\\n  selectAllContact,\\n  deleteAllContact,\\n} from \\\"../actions/contactAction\\\";\\nimport Contact from \\\"./Contact\\\";\\n\\nconst Contacts = () => {\\n  const dispatch = useDispatch();\\n  const [selectAll, setSelectAll] = useState(false);\\n  const contacts = useSelector((state) => state.contact.contacts);\\n  const selectedContact = useSelector(\\n    (state) => state.contact.selectedContacts\\n  );\\n\\n  console.log(contacts);\\n\\n  useEffect(() => {\\n    if (selectAll) {\\n      dispatch(selectAllContact(contacts.map((contact) => contact.id)));\\n    } else {\\n      dispatch(clearAllContact());\\n    }\\n  }, [selectAll]);\\n  return (\\n    <div>\\n      {selectedContact.length > 0 ? (\\n        <button\\n          onClick={() => deleteAllContact()}\\n        >\\n          delete all\\n        </button>\\n      ) : null}\\n      <table>\\n        <tr>\\n          <th>\\n            <input type=\\\"checkbox\\\" id=\\\"selectAll\\\" value={selectAll}\\n              onClick={() => setSelectAll(!selectAll)} />\\n          </th>\\n          <th>Name</th>\\n          <th>Phone</th>\\n          <th>Email</th>\\n          <th>Actions</th>\\n        </tr>\\n        <tbody>\\n          {contacts.map((contact) => (\\n            <Contact\\n              contact={contact}\\n              key={contact.id}\\n              selectAll={setSelectAll}\\n            />\\n          ))}\\n        </tbody>\\n      </table>\\n    </div>\\n  );\\n};\\n\\n\\n\\n//EditContact.js\\nimport React, { useState, useEffect } from \\\"react\\\";\\nimport { useDispatch, useSelector } from \\\"react-redux\\\";\\nimport { getContact, updateContact } from \\\"../actions/contactAction\\\";\\nimport { useHistory, useParams } from \\\"react-router-dom\\\";\\n\\n\\nconst EditContact = () => {\\n  let { id } = useParams();\\n  let history = useHistory();\\n  const dispatch = useDispatch();\\n  const contact = useSelector((state) => state.contact.contact);\\n  const [name, setName] = useState(\\\"\\\");\\n  const [email, setEmail] = useState(\\\"\\\");\\n  const [phone, setPhone] = useState(\\\"\\\");\\n\\n  useEffect(() => {\\n    if (contact != null) {\\n      setName(contact.name);\\n      setPhone(contact.phone);\\n      setEmail(contact.email);\\n    }\\n    dispatch(getContact(id));\\n  }, [contact]);\\n\\n  const onUpdateContact = (e) => {\\n    e.preventDefault();\\n\\n    const update_contact = Object.assign(contact, {\\n      name: name,\\n      phone: phone,\\n      email: email,\\n    });\\n    dispatch(updateContact(update_contact));\\n    history.push(\\\"/\\\");\\n  };\\n  return (\\n    <div>\\n      <h3>Add Contacts</h3>\\n      <div>\\n        <form onSubmit={(e) => onUpdateContact(e)}>\\n          <input type=\\\"text\\\" value={name} onChange={(e) => setName(e.target.value)} />\\n          <input type=\\\"text\\\" value={phone} onChange={(e) => setPhone(e.target.value)} />\\n          <input type=\\\"text\\\" value={email} onChange={(e) => setEmail(e.target.value)} />\\n          <button type=\\\"submit\\\">Update</button>\\n        </form>\\n      </div>\\n    </div>\\n  );\\n};\\n\\n\\n\\n//App.js\\nimport { BrowserRouter as Router, Route, Switch, Link } from \\\"react-router-dom\\\";\\nimport Contacts from \\\"./components/Contacts\\\";\\nimport AddContact from \\\"./components/AddContact\\\";\\nimport EditContact from \\\"./components/EditContact\\\";\\n\\nconst App = () => {\\n  return (\\n\\n    <Router>\\n      <div>\\n        <Link to=\\\"/contacts/add\\\"> Add Records</Link>\\n        <Switch>\\n          <Route exact path=\\\"/\\\" component={Contacts} />\\n          <Route exact path=\\\"/contacts/add\\\" component={AddContact} />\\n          <Route exact path=\\\"/contacts/edit/:id\\\" component={EditContact} />\\n        </Switch>\\n      </div>\\n    </Router>\\n  );\\n};\".trim();var reducersCurd=\"\\n//contactReducer.js\\nimport Contact from \\\"../components/Contact\\\";\\nimport {\\n  GET_CONTACT,\\n  CREATE_CONTACT,\\n  UPDATE_CONTACT,\\n  DELETE_CONTACT,\\n  SELECT_CONTACT,\\n  CLEAR_CONTACT,\\n  DELETE_SELECTED_CONTACT,\\n} from \\\"../actions/types\\\";\\n\\nconst initialState = {\\n  contacts: [\\n    {\\n      id: 1,\\n      name: \\\"Leanne Graham\\\",\\n      email: \\\"Sincere@april.biz\\\",\\n      phone: \\\"1-770-736-8031 x56442\\\",\\n    },\\n    {\\n      id: 2,\\n      name: \\\"Ervin Howell\\\",\\n      email: \\\"Shanna@melissa.tv\\\",\\n      phone: \\\"010-692-6593 x09125\\\",\\n    }\\n  ],\\n  contact: null,\\n  selectedContacts: [],\\n};\\nconst contactReducer = (state = initialState, action) => {\\n  switch (action.type) {\\n    case CREATE_CONTACT:\\n      return {\\n        ...state,\\n        contacts: [action.payload, ...state.contacts],\\n      };\\n    case GET_CONTACT:\\n      let arr = state.contacts.filter(\\n        (contact) => contact.id == action.payload\\n      );\\n      arr = arr.values();\\n      for (let val of arr) {\\n        arr = val;\\n      }\\n      return {\\n        ...state,\\n        contact: arr,\\n      };\\n\\n    case UPDATE_CONTACT:\\n      return {\\n        ...state,\\n        contacts: state.contacts.map((contact) =>\\n          Contact.id == action.payload.id ? action.payload : contact\\n        ),\\n      };\\n\\n    case DELETE_CONTACT:\\n      return {\\n        ...state,\\n        contacts: state.contacts.filter(\\n          (contact) => contact.id != action.payload\\n        ),\\n      };\\n\\n    case SELECT_CONTACT:\\n      return {\\n        ...state,\\n        selectedContacts: action.payload,\\n      };\\n\\n    case DELETE_SELECTED_CONTACT:\\n      return {\\n        ...state,\\n        contacts: [],\\n      };\\n    case CLEAR_CONTACT:\\n      return {\\n        ...state,\\n        selectedContacts: [],\\n      };\\n\\n    default:\\n      return state;\\n  }\\n};\\nexport default contactReducer;\\n\".trim();var actions=\"\\n//types.js\\nexport const CREATE_CONTACT = \\\"CREATE_CONTACT\\\";\\nexport const GET_CONTACT = \\\"GET_CONTACT\\\";\\nexport const UPDATE_CONTACT = \\\"UPDATE_CONTACT\\\";\\nexport const DELETE_CONTACT = \\\"DELETE_CONTACT\\\";\\nexport const SELECT_CONTACT = \\\"SELECT_CONTACT\\\";\\nexport const CLEAR_CONTACT = \\\"CLEAR_CONTACT\\\";\\nexport const DELETE_SELECTED_CONTACT = \\\"DELETE_SELECTED_CONTACT\\\";\\n\\n\\n\\n//contactAction.js\\nimport {\\n  CREATE_CONTACT,\\n  GET_CONTACT,\\n  UPDATE_CONTACT,\\n  DELETE_CONTACT,\\n  SELECT_CONTACT,\\n  CLEAR_CONTACT,\\n  DELETE_SELECTED_CONTACT,\\n} from \\\"./types\\\";\\n\\nexport const addContact = (contact) => ({\\n  type: CREATE_CONTACT,\\n  payload: contact,\\n});\\n\\nexport const getContact = (id) => ({\\n  type: GET_CONTACT,\\n  payload: id,\\n});\\n\\nexport const updateContact = (contact) => ({\\n  type: UPDATE_CONTACT,\\n  payload: contact,\\n});\\n\\nexport const deleteContact = (id) => ({\\n  type: DELETE_CONTACT,\\n  payload: id,\\n});\\n\\nexport const selectAllContact = (id) => ({\\n  type: SELECT_CONTACT,\\n  payload: id,\\n});\\n\\nexport const clearAllContact = () => ({\\n  type: CLEAR_CONTACT,\\n});\\n\\n//delete selected contacts\\nexport const deleteAllContact = () => ({\\n  type: DELETE_SELECTED_CONTACT,\\n});\\n\".trim();var ContctHooks=/*#__PURE__*/function(_Component){_inherits(ContctHooks,_Component);function ContctHooks(){_classCallCheck(this,ContctHooks);return _possibleConstructorReturn(this,_getPrototypeOf(ContctHooks).apply(this,arguments));}_createClass(ContctHooks,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Jsonplaceholder\"),React.createElement(\"b\",null,\"App.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:useSelector,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Reducers\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:reducers,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2.Curd(components)\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:components,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"reducers\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:reducersCurd,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"actions\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:actions,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return ContctHooks;}(Component);export default withStyles(styles)(ContctHooks);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/Redux/deep/contactKeeperApi.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","useSelector","trim","reducers","components","reducersCurd","actions","ContctHooks","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,0BAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CAGA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,eAAe,CAAE,SAAnB,CAA8BC,OAAO,CAAE,KAAvC,CAA8CC,QAAQ,CAAE,MAAxD,CAAf,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,KAAK,CAAE,CACLC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH,CAELN,OAAO,CAAEG,KAAK,CAACG,OAAN,CAAc,CAAd,CAFJ,CADgB,CAKvBC,QAAQ,CAAE,CACRF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA,CALa,CAQvBE,SAAS,CAAE,CACTC,SAAS,CAAE,QADF,CARY,CAAL,EAApB,CAaA,GAAMC,CAAAA,WAAW,CAAG,mnBA6B6CC,IA7B7C,EAApB,CA+BA,GAAMC,CAAAA,QAAQ,CAAG,+sBAuCfD,IAvCe,EAAjB,CAyCA,GAAME,CAAAA,UAAU,CAAG,86KAuMfF,IAvMe,EAAnB,CAyMA,GAAMG,CAAAA,YAAY,CAAG,y2DAyFnBH,IAzFmB,EAArB,CA2FA,GAAMI,CAAAA,OAAO,CAAG,qsCAwDdJ,IAxDc,EAAhB,C,GA4DMK,CAAAA,W,+SACgB,CAClBC,UAAU,CAAC,iBAAM1B,CAAAA,KAAK,CAAC2B,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAACf,KAA1B,EACE,8BAAI,oBAAC,OAAD,MAAJ,CADF,CADF,CADF,CAME,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEe,OAAO,CAACf,KAA1B,EACE,oBAAC,IAAD,MACE,mDADF,CAEE,sCAFF,CAGE,2BAAK,KAAK,CAAEN,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEY,WADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAHF,CAUE,8BAVF,CAWE,8BAXF,CAYE,wCAZF,CAaE,2BAAK,KAAK,CAAEZ,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEc,QADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAbF,CAoBE,8BApBF,CAsBE,mDAtBF,CAuBE,2BAAK,KAAK,CAAEd,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEe,UADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAvBF,CA8BE,8BA9BF,CAgCE,wCAhCF,CAiCE,2BAAK,KAAK,CAAEf,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEgB,YADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAjCF,CAwCE,8BAxCF,CA0CE,uCA1CF,CA2CE,2BAAK,KAAK,CAAEhB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEiB,OADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CA3CF,CADF,CADF,CANF,CADF,CAgED,C,yBAtEuBzB,S,EAyE1B,cAAgBI,CAAAA,UAAU,CAACQ,MAAD,CAAV,CAAmBc,WAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst useSelector = `\n//components/getPosts.js\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPosts } from '../actions/postData';\n\nconst Posts  = (props) => {\n  useEffect(() => {\n    props.fetchPosts();\n  })\n  \n  const getItems = () => {\n    return props.data.map(post => (\n      <div key={post.id}>\n        <h3>{post.title}</h3>\n        <p>{post.body}</p>\n      </div>\n    ))\n  }\n\n    return (\n      <div>{getItems()}</div>\n    );\n  }\n\nconst mapStateToProps = state => ({\n  data: state.object.items\n});\n\nexport default connect(mapStateToProps, { fetchPosts })(Posts);`.trim();\n\nconst reducers = `\n//actions/types.js\nexport const GET_DATA = 'GET_DATA';\n\n\n//actions/postActions.js\nimport { GET_DATA } from './types';\n\nexport const fetchPosts = () => dispatch => {\n  fetch('https://jsonplaceholder.typicode.com/posts')\n    .then(res => res.json())\n    .then(posts =>\n      dispatch({\n        type: GET_DATA,\n        payload: posts\n      })\n    );\n};\n\n\n//reducers/mapList.js\nimport { GET_DATA } from '../actions/types';\n\nconst initialState = {\n  items: [],\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_DATA:\n      return {\n        ...state,\n        items: action.payload\n      };\n    \n    default:\n      return state;\n  }\n}\n`.trim();\n\nconst components = `\n//AddContact.js\nimport React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { addContact } from \"../actions/contactAction\";\nimport shortid from \"shortid\";\nimport { useHistory } from \"react-router-dom\";\n\nconst AddContact = () => {\n  let history = useHistory();\n  const dispatch = useDispatch();\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n\n  const createContact = (e) => {\n    e.preventDefault();\n    const new_contact = {\n      id: shortid.generate(),\n      name: name,\n      phone: phone,\n      email: email,\n    };\n    dispatch(addContact(new_contact));\n    history.push(\"/\");\n  };\n\n  return (\n    <form onSubmit={(e) => createContact(e)}>\n      <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n      <input type=\"text\" value={phone} onChange={(e) => setPhone(e.target.value)} />\n      <input type=\"text\" value={email} onChange={(e) => setEmail(e.target.value)} />\n      <button type=\"submit\"> Create Contact </button>\n    </form>\n  );\n};\n\n\n\n//Contact.js\nimport { Link } from \"react-router-dom\";\nimport { deleteContact } from \"../actions/contactAction\";\nimport { useDispatch } from \"react-redux\";\nconst Contact = ({ contact, selectAll }) => {\n\n  const dispatch = useDispatch();\n  const { name, phone, email, id } = contact;\n  return (\n    <tr>\n      <input type=\"checkbox\" checked={selectAll} />\n      <td>{name}</td>\n      <td>{phone}</td>\n      <td>{email}</td>\n      <td>\n        <Link to={'/contacts/edit/'$'{id}'}>E</Link>\n        <span onClick={() => dispatch(deleteContact(id))}>X</span>\n      </td>\n    </tr>\n  );\n};\n\n\n\n//Contacts.js\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  clearAllContact,\n  selectAllContact,\n  deleteAllContact,\n} from \"../actions/contactAction\";\nimport Contact from \"./Contact\";\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const [selectAll, setSelectAll] = useState(false);\n  const contacts = useSelector((state) => state.contact.contacts);\n  const selectedContact = useSelector(\n    (state) => state.contact.selectedContacts\n  );\n\n  console.log(contacts);\n\n  useEffect(() => {\n    if (selectAll) {\n      dispatch(selectAllContact(contacts.map((contact) => contact.id)));\n    } else {\n      dispatch(clearAllContact());\n    }\n  }, [selectAll]);\n  return (\n    <div>\n      {selectedContact.length > 0 ? (\n        <button\n          onClick={() => deleteAllContact()}\n        >\n          delete all\n        </button>\n      ) : null}\n      <table>\n        <tr>\n          <th>\n            <input type=\"checkbox\" id=\"selectAll\" value={selectAll}\n              onClick={() => setSelectAll(!selectAll)} />\n          </th>\n          <th>Name</th>\n          <th>Phone</th>\n          <th>Email</th>\n          <th>Actions</th>\n        </tr>\n        <tbody>\n          {contacts.map((contact) => (\n            <Contact\n              contact={contact}\n              key={contact.id}\n              selectAll={setSelectAll}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\n\n\n//EditContact.js\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getContact, updateContact } from \"../actions/contactAction\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\n\nconst EditContact = () => {\n  let { id } = useParams();\n  let history = useHistory();\n  const dispatch = useDispatch();\n  const contact = useSelector((state) => state.contact.contact);\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n\n  useEffect(() => {\n    if (contact != null) {\n      setName(contact.name);\n      setPhone(contact.phone);\n      setEmail(contact.email);\n    }\n    dispatch(getContact(id));\n  }, [contact]);\n\n  const onUpdateContact = (e) => {\n    e.preventDefault();\n\n    const update_contact = Object.assign(contact, {\n      name: name,\n      phone: phone,\n      email: email,\n    });\n    dispatch(updateContact(update_contact));\n    history.push(\"/\");\n  };\n  return (\n    <div>\n      <h3>Add Contacts</h3>\n      <div>\n        <form onSubmit={(e) => onUpdateContact(e)}>\n          <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n          <input type=\"text\" value={phone} onChange={(e) => setPhone(e.target.value)} />\n          <input type=\"text\" value={email} onChange={(e) => setEmail(e.target.value)} />\n          <button type=\"submit\">Update</button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\n\n\n//App.js\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\nimport Contacts from \"./components/Contacts\";\nimport AddContact from \"./components/AddContact\";\nimport EditContact from \"./components/EditContact\";\n\nconst App = () => {\n  return (\n\n    <Router>\n      <div>\n        <Link to=\"/contacts/add\"> Add Records</Link>\n        <Switch>\n          <Route exact path=\"/\" component={Contacts} />\n          <Route exact path=\"/contacts/add\" component={AddContact} />\n          <Route exact path=\"/contacts/edit/:id\" component={EditContact} />\n        </Switch>\n      </div>\n    </Router>\n  );\n};`.trim();\n\nconst reducersCurd = `\n//contactReducer.js\nimport Contact from \"../components/Contact\";\nimport {\n  GET_CONTACT,\n  CREATE_CONTACT,\n  UPDATE_CONTACT,\n  DELETE_CONTACT,\n  SELECT_CONTACT,\n  CLEAR_CONTACT,\n  DELETE_SELECTED_CONTACT,\n} from \"../actions/types\";\n\nconst initialState = {\n  contacts: [\n    {\n      id: 1,\n      name: \"Leanne Graham\",\n      email: \"Sincere@april.biz\",\n      phone: \"1-770-736-8031 x56442\",\n    },\n    {\n      id: 2,\n      name: \"Ervin Howell\",\n      email: \"Shanna@melissa.tv\",\n      phone: \"010-692-6593 x09125\",\n    }\n  ],\n  contact: null,\n  selectedContacts: [],\n};\nconst contactReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CREATE_CONTACT:\n      return {\n        ...state,\n        contacts: [action.payload, ...state.contacts],\n      };\n    case GET_CONTACT:\n      let arr = state.contacts.filter(\n        (contact) => contact.id == action.payload\n      );\n      arr = arr.values();\n      for (let val of arr) {\n        arr = val;\n      }\n      return {\n        ...state,\n        contact: arr,\n      };\n\n    case UPDATE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.map((contact) =>\n          Contact.id == action.payload.id ? action.payload : contact\n        ),\n      };\n\n    case DELETE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.filter(\n          (contact) => contact.id != action.payload\n        ),\n      };\n\n    case SELECT_CONTACT:\n      return {\n        ...state,\n        selectedContacts: action.payload,\n      };\n\n    case DELETE_SELECTED_CONTACT:\n      return {\n        ...state,\n        contacts: [],\n      };\n    case CLEAR_CONTACT:\n      return {\n        ...state,\n        selectedContacts: [],\n      };\n\n    default:\n      return state;\n  }\n};\nexport default contactReducer;\n`.trim();\n\nconst actions = `\n//types.js\nexport const CREATE_CONTACT = \"CREATE_CONTACT\";\nexport const GET_CONTACT = \"GET_CONTACT\";\nexport const UPDATE_CONTACT = \"UPDATE_CONTACT\";\nexport const DELETE_CONTACT = \"DELETE_CONTACT\";\nexport const SELECT_CONTACT = \"SELECT_CONTACT\";\nexport const CLEAR_CONTACT = \"CLEAR_CONTACT\";\nexport const DELETE_SELECTED_CONTACT = \"DELETE_SELECTED_CONTACT\";\n\n\n\n//contactAction.js\nimport {\n  CREATE_CONTACT,\n  GET_CONTACT,\n  UPDATE_CONTACT,\n  DELETE_CONTACT,\n  SELECT_CONTACT,\n  CLEAR_CONTACT,\n  DELETE_SELECTED_CONTACT,\n} from \"./types\";\n\nexport const addContact = (contact) => ({\n  type: CREATE_CONTACT,\n  payload: contact,\n});\n\nexport const getContact = (id) => ({\n  type: GET_CONTACT,\n  payload: id,\n});\n\nexport const updateContact = (contact) => ({\n  type: UPDATE_CONTACT,\n  payload: contact,\n});\n\nexport const deleteContact = (id) => ({\n  type: DELETE_CONTACT,\n  payload: id,\n});\n\nexport const selectAllContact = (id) => ({\n  type: SELECT_CONTACT,\n  payload: id,\n});\n\nexport const clearAllContact = () => ({\n  type: CLEAR_CONTACT,\n});\n\n//delete selected contacts\nexport const deleteAllContact = () => ({\n  type: DELETE_SELECTED_CONTACT,\n});\n`.trim();\n\n\n\nclass ContctHooks extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Jsonplaceholder</h3>\n              <b>App.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={useSelector}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Reducers</b>\n              <div style={titles}>\n                <PrismCode\n                  code={reducers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2.Curd(components)</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={components}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>reducers</b>\n              <div style={titles}>\n                <PrismCode\n                  code={reducersCurd}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>actions</b>\n              <div style={titles}>\n                <PrismCode\n                  code={actions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(ContctHooks));\n"]},"metadata":{},"sourceType":"module"}