{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/angularjs/deepAngularjs/imbalanced.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst childsFile = `\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport numpy as np\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndf = pd.read_csv(\"customer_churn.csv\")\n\ndf.Churn.value_counts()\n517400/ df.shape[0]\n`.trim();\nconst customerID = `\ndf.drop('customerID',axis='columns',inplace=True)\ndf.TotalCharges.values\n\npd.to_numeric(df.TotalCharges,errors='coerce').isnull()\ndf[pd.to_numeric(df.TotalCharges,errors='coerce').isnull()]\n\ndf.iloc[488].TotalCharges\ndf[df.TotalCharges!=' '].shape\ndf1 = df[df.TotalCharges!=' ']\n\ndf1.TotalCharges = pd.to_numeric(df1.TotalCharges)\ndf1.TotalCharges.values\ndf1[df1.Churn=='No']\n`.trim();\nconst visualization = `\ntenure_churn_no = df1[df1.Churn=='No'].tenure\ntenure_churn_yes = df1[df1.Churn=='Yes'].tenure\n\nplt.xlabel(\"tenure\")\nplt.ylabel(\"Number Of Customers\")\nplt.title(\"Customer Churn Prediction Visualiztion\")\n\nblood_sugar_men = [113, 85, 90, 150, 149, 88, 93, 115, 135, 80, 77, 82, 129]\nblood_sugar_women = [67, 98, 89, 120, 133, 150, 84, 69, 89, 79, 120, 112, 100]\n\nplt.hist([tenure_churn_yes, tenure_churn_no], rwidth=0.95, color=['green','red'],label=['Churn=Yes','Churn=No'])\nplt.legend()\n\n\nmc_churn_no = df1[df1.Churn=='No'].MonthlyCharges      \nmc_churn_yes = df1[df1.Churn=='Yes'].MonthlyCharges      \n\nplt.xlabel(\"Monthly Charges\")\nplt.ylabel(\"Number Of Customers\")\nplt.title(\"Customer Churn Prediction Visualiztion\")\n\nblood_sugar_men = [113, 85, 90, 150, 149, 88, 93, 115, 135, 80, 77, 82, 129]\nblood_sugar_women = [67, 98, 89, 120, 133, 150, 84, 69, 89, 79, 120, 112, 100]\n\nplt.hist([mc_churn_yes, mc_churn_no], rwidth=0.95, color=['green','red'],label=['Churn=Yes','Churn=No'])\nplt.legend()\n\ndef print_unique_col_values(df):                                                        #Many of the columns are yes, no.\n       for column in df:\n            if df[column].dtypes=='object':\n                print(f'{column}: {df[column].unique()}') \n                \nprint_unique_col_values(df1)\n`.trim();\nconst service = `\ndf1.replace('No internet service','No',inplace=True)\ndf1.replace('No phone service','No',inplace=True)\n\nprint_unique_col_values(df1)\n\n#Convert Yes and No to 1 or 0.\nyes_no_columns = ['Partner','Dependents','PhoneService','MultipleLines','OnlineSecurity','OnlineBackup',\n                  'DeviceProtection','TechSupport','StreamingTV','StreamingMovies','PaperlessBilling','Churn']\nfor col in yes_no_columns:\n    df1[col].replace({'Yes': 1,'No': 0},inplace=True)\n    \n    \nfor col in df1:\n    print(f'{col}: {df1[col].unique()}') \n    \ndf1['gender'].replace({'Female':1,'Male':0},inplace=True)\ndf1.gender.unique()\n`.trim();\nconst encoding = `\ndf2 = pd.get_dummies(data=df1, columns=['InternetService','Contract','PaymentMethod'])\ndf2.columns\n\ncols_to_scale = ['tenure','MonthlyCharges','TotalCharges']\n\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\ndf2[cols_to_scale] = scaler.fit_transform(df2[cols_to_scale])\n\nfor col in df2:\n    print(f'{col}: {df2[col].unique()}')\n`.trim();\nconst split = `\nX = df2.drop('Churn',axis='columns')\ny = testLabels = df2.Churn.astype(np.float32)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=15, stratify=y)\n\ny_train.value_counts()\ny.value_counts()\n5163/1869\n\nX_train.shape\nlen(X_train.columns)\n`.trim();\nconst regression = `\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\n\ndef log_reg(X_train, y_train, X_test, y_test, weights):\n    if weights==-1:\n        model = LogisticRegression()\n    else:\n        model = LogisticRegression(class_weight={0:weights[0], 1:weights[1]})\n\n    model.fit(X_train, y_train)\n    acc = model.score(X_test, y_test)\n    print(\"Accuracy\", acc)\n\n    y_pred = model.predict(X_test)\n    print(\"preds\", y_pred[:5])\n\n    cl_rep = classification_report(y_test,y_pred)\n    print(cl_rep)\n    \nweights = -1                                                      # pass -1 to use Logistics Regression without weights.\nlog_reg(X_train, y_train, X_test, y_test, weights)\n\nweights = [1, 1.5]                                                # pass -1 to use Logistics Regression without weights.\nlog_reg(X_train, y_train, X_test, y_test, weights)\n`.trim();\nconst skewdness = `\n# Method1: Undersampling\ncount_class_0, count_class_1 = df1.Churn.value_counts()\n\ndf_class_0 = df2[df2['Churn'] == 0]                               # Divide by class.\ndf_class_1 = df2[df2['Churn'] == 1]\n\n\n# Undersample 0-class and concat the DataFrames of both class.\ndf_class_0_under = df_class_0.sample(count_class_1)\ndf_test_under = pd.concat([df_class_0_under, df_class_1], axis=0)\n\nprint('Random under-sampling:')\nprint(df_test_under.Churn.value_counts())\n\nX = df_test_under.drop('Churn',axis='columns')\ny = df_test_under['Churn']\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=15, stratify=y)\n\n\ny_train.value_counts()                                                        # Number of classes in training Data.\n`.trim();\nconst applying = `\nweights = -1                                                    # pass -1 to use Logistics Regression without weights\nlog_reg(X_train, y_train, X_test, y_test, weights)\n\n\n# Method2: Oversampling\n# Oversample 1-class and concat the DataFrames of both classes\ndf_class_1_over = df_class_1.sample(count_class_0, replace=True)\ndf_test_over = pd.concat([df_class_0, df_class_1_over], axis=0)\n\nprint('Random over-sampling:', df_test_over.Churn.value_counts())\n\nX = df_test_over.drop('Churn',axis='columns')\ny = df_test_over['Churn']\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=15, stratify=y)\n\n\ny_train.value_counts()                                                        # Number of classes in training Data.\n`.trim();\nconst logistic = `\nweights = -1                                                # pass -1 to use Logistics Regression without weights.\nlog_reg(X_train, y_train, X_test, y_test, weights)\n\n# Method3: SMOTE\nX = df2.drop('Churn',axis='columns')\ny = df2['Churn']\n\nfrom imblearn.over_sampling import SMOTE\nsmote = SMOTE(sampling_strategy='minority')\nX_sm, y_sm = smote.fit_sample(X, y)\n\ny_sm.value_counts()\n\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_sm, y_sm, test_size=0.2, random_state=15, stratify=y_sm)\n\ny_train.value_counts()\n\n\n# Logistic Regression\nweights = -1                                                 # pass -1 to use Logistics Regression without weights.\nlog_reg(X_train, y_train, X_test, y_test, weights)\n\n\ndf2.Churn.value_counts()                                    # Method4: Use of Ensemble with undersampling.\n\nX = df2.drop('Churn',axis='columns')                        # Regain Original features and labels.\ny = df2['Churn']\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=15, stratify=y)\n\ny_train.value_counts()\nmodel = LogisticRegression()\n\ndf3 = X_train.copy()\ndf3['Churn'] = y_train\ndf3.head()\n\ndf3_class0 = df3[df3.Churn==0]\ndf3_class1 = df3[df3.Churn==1]\n\ndef get_train_batch(df_majority, df_minority, start, end):\n    df_train = pd.concat([df_majority[start:end], df_minority], axis=0)\n    X_train = df_train.drop('Churn', axis='columns')\n    y_train = df_train.Churn\n    return X_train, y_train    \n    \nX_train, y_train = get_train_batch(df3_class0, df3_class1, 0, 1495)\nmodel1 = LogisticRegression()\nmodel1.fit(X_train, y_train)\ny_pred1 = model1.predict(X_test)\n\nX_train, y_train = get_train_batch(df3_class0, df3_class1, 1495, 2990)\nmodel2 = LogisticRegression()\nmodel2.fit(X_train, y_train)\ny_pred2 = model2.predict(X_test)\n\nX_train, y_train = get_train_batch(df3_class0, df3_class1, 2990, 4130)\nmodel3 = LogisticRegression()\nmodel3.fit(X_train, y_train)\ny_pred3 = model3.predict(X_test)\n\nlen(y_pred1)\n\ny_pred_final = y_pred1.copy()\nfor i in range(len(y_pred1)):\n    n_ones = y_pred1[i] + y_pred2[i] + y_pred3[i]\n    if n_ones>1:\n        y_pred_final[i] = 1\n    else:\n        y_pred_final[i] = 0\n        \n        \ncl_rep = classification_report(y_test, y_pred_final)\nprint(cl_rep)\n`.trim();\n\nclass Imbalanced extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, \"Handle imbalanced data in churn prediction. Logistic Regression\"), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, \"Customer churn prediction is to measure why customers are leaving a business. Looking at customer churn in telecom business. We will build a deep learning model to predict the churn and use precision,recall, f1-score to measure performance of our model.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: childsFile,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, \"First of all, drop customerID column as it is of no use\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: customerID,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, \"Data Visualization\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: visualization,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, \"Some of the columns have no internet service or no phone service, that can be replaced with a simple No.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: service,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }, \"One hot encoding for categorical columns\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: encoding,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, \"Train test split\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: split,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, \"Use logistic regression classifier\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: regression,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, \"Mitigating Skewdness of Data\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: skewdness,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, \"Applying Logistic Regression\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: applying,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, \"Logistic Regression\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: logistic,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Imbalanced);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjs/deepAngularjs/imbalanced.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","childsFile","trim","customerID","visualization","service","encoding","split","regression","skewdness","applying","logistic","Imbalanced","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst childsFile = `\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport numpy as np\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndf = pd.read_csv(\"customer_churn.csv\")\n\ndf.Churn.value_counts()\n517400/ df.shape[0]\n`.trim();\n\nconst customerID = `\ndf.drop('customerID',axis='columns',inplace=True)\ndf.TotalCharges.values\n\npd.to_numeric(df.TotalCharges,errors='coerce').isnull()\ndf[pd.to_numeric(df.TotalCharges,errors='coerce').isnull()]\n\ndf.iloc[488].TotalCharges\ndf[df.TotalCharges!=' '].shape\ndf1 = df[df.TotalCharges!=' ']\n\ndf1.TotalCharges = pd.to_numeric(df1.TotalCharges)\ndf1.TotalCharges.values\ndf1[df1.Churn=='No']\n`.trim();\n\nconst visualization = `\ntenure_churn_no = df1[df1.Churn=='No'].tenure\ntenure_churn_yes = df1[df1.Churn=='Yes'].tenure\n\nplt.xlabel(\"tenure\")\nplt.ylabel(\"Number Of Customers\")\nplt.title(\"Customer Churn Prediction Visualiztion\")\n\nblood_sugar_men = [113, 85, 90, 150, 149, 88, 93, 115, 135, 80, 77, 82, 129]\nblood_sugar_women = [67, 98, 89, 120, 133, 150, 84, 69, 89, 79, 120, 112, 100]\n\nplt.hist([tenure_churn_yes, tenure_churn_no], rwidth=0.95, color=['green','red'],label=['Churn=Yes','Churn=No'])\nplt.legend()\n\n\nmc_churn_no = df1[df1.Churn=='No'].MonthlyCharges      \nmc_churn_yes = df1[df1.Churn=='Yes'].MonthlyCharges      \n\nplt.xlabel(\"Monthly Charges\")\nplt.ylabel(\"Number Of Customers\")\nplt.title(\"Customer Churn Prediction Visualiztion\")\n\nblood_sugar_men = [113, 85, 90, 150, 149, 88, 93, 115, 135, 80, 77, 82, 129]\nblood_sugar_women = [67, 98, 89, 120, 133, 150, 84, 69, 89, 79, 120, 112, 100]\n\nplt.hist([mc_churn_yes, mc_churn_no], rwidth=0.95, color=['green','red'],label=['Churn=Yes','Churn=No'])\nplt.legend()\n\ndef print_unique_col_values(df):                                                        #Many of the columns are yes, no.\n       for column in df:\n            if df[column].dtypes=='object':\n                print(f'{column}: {df[column].unique()}') \n                \nprint_unique_col_values(df1)\n`.trim();\n\nconst service = `\ndf1.replace('No internet service','No',inplace=True)\ndf1.replace('No phone service','No',inplace=True)\n\nprint_unique_col_values(df1)\n\n#Convert Yes and No to 1 or 0.\nyes_no_columns = ['Partner','Dependents','PhoneService','MultipleLines','OnlineSecurity','OnlineBackup',\n                  'DeviceProtection','TechSupport','StreamingTV','StreamingMovies','PaperlessBilling','Churn']\nfor col in yes_no_columns:\n    df1[col].replace({'Yes': 1,'No': 0},inplace=True)\n    \n    \nfor col in df1:\n    print(f'{col}: {df1[col].unique()}') \n    \ndf1['gender'].replace({'Female':1,'Male':0},inplace=True)\ndf1.gender.unique()\n`.trim();\n\nconst encoding = `\ndf2 = pd.get_dummies(data=df1, columns=['InternetService','Contract','PaymentMethod'])\ndf2.columns\n\ncols_to_scale = ['tenure','MonthlyCharges','TotalCharges']\n\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\ndf2[cols_to_scale] = scaler.fit_transform(df2[cols_to_scale])\n\nfor col in df2:\n    print(f'{col}: {df2[col].unique()}')\n`.trim();\n\nconst split = `\nX = df2.drop('Churn',axis='columns')\ny = testLabels = df2.Churn.astype(np.float32)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=15, stratify=y)\n\ny_train.value_counts()\ny.value_counts()\n5163/1869\n\nX_train.shape\nlen(X_train.columns)\n`.trim();\n\nconst regression = `\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\n\ndef log_reg(X_train, y_train, X_test, y_test, weights):\n    if weights==-1:\n        model = LogisticRegression()\n    else:\n        model = LogisticRegression(class_weight={0:weights[0], 1:weights[1]})\n\n    model.fit(X_train, y_train)\n    acc = model.score(X_test, y_test)\n    print(\"Accuracy\", acc)\n\n    y_pred = model.predict(X_test)\n    print(\"preds\", y_pred[:5])\n\n    cl_rep = classification_report(y_test,y_pred)\n    print(cl_rep)\n    \nweights = -1                                                      # pass -1 to use Logistics Regression without weights.\nlog_reg(X_train, y_train, X_test, y_test, weights)\n\nweights = [1, 1.5]                                                # pass -1 to use Logistics Regression without weights.\nlog_reg(X_train, y_train, X_test, y_test, weights)\n`.trim();\n\nconst skewdness = `\n# Method1: Undersampling\ncount_class_0, count_class_1 = df1.Churn.value_counts()\n\ndf_class_0 = df2[df2['Churn'] == 0]                               # Divide by class.\ndf_class_1 = df2[df2['Churn'] == 1]\n\n\n# Undersample 0-class and concat the DataFrames of both class.\ndf_class_0_under = df_class_0.sample(count_class_1)\ndf_test_under = pd.concat([df_class_0_under, df_class_1], axis=0)\n\nprint('Random under-sampling:')\nprint(df_test_under.Churn.value_counts())\n\nX = df_test_under.drop('Churn',axis='columns')\ny = df_test_under['Churn']\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=15, stratify=y)\n\n\ny_train.value_counts()                                                        # Number of classes in training Data.\n`.trim();\n\nconst applying = `\nweights = -1                                                    # pass -1 to use Logistics Regression without weights\nlog_reg(X_train, y_train, X_test, y_test, weights)\n\n\n# Method2: Oversampling\n# Oversample 1-class and concat the DataFrames of both classes\ndf_class_1_over = df_class_1.sample(count_class_0, replace=True)\ndf_test_over = pd.concat([df_class_0, df_class_1_over], axis=0)\n\nprint('Random over-sampling:', df_test_over.Churn.value_counts())\n\nX = df_test_over.drop('Churn',axis='columns')\ny = df_test_over['Churn']\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=15, stratify=y)\n\n\ny_train.value_counts()                                                        # Number of classes in training Data.\n`.trim();\n\nconst logistic = `\nweights = -1                                                # pass -1 to use Logistics Regression without weights.\nlog_reg(X_train, y_train, X_test, y_test, weights)\n\n# Method3: SMOTE\nX = df2.drop('Churn',axis='columns')\ny = df2['Churn']\n\nfrom imblearn.over_sampling import SMOTE\nsmote = SMOTE(sampling_strategy='minority')\nX_sm, y_sm = smote.fit_sample(X, y)\n\ny_sm.value_counts()\n\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_sm, y_sm, test_size=0.2, random_state=15, stratify=y_sm)\n\ny_train.value_counts()\n\n\n# Logistic Regression\nweights = -1                                                 # pass -1 to use Logistics Regression without weights.\nlog_reg(X_train, y_train, X_test, y_test, weights)\n\n\ndf2.Churn.value_counts()                                    # Method4: Use of Ensemble with undersampling.\n\nX = df2.drop('Churn',axis='columns')                        # Regain Original features and labels.\ny = df2['Churn']\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=15, stratify=y)\n\ny_train.value_counts()\nmodel = LogisticRegression()\n\ndf3 = X_train.copy()\ndf3['Churn'] = y_train\ndf3.head()\n\ndf3_class0 = df3[df3.Churn==0]\ndf3_class1 = df3[df3.Churn==1]\n\ndef get_train_batch(df_majority, df_minority, start, end):\n    df_train = pd.concat([df_majority[start:end], df_minority], axis=0)\n    X_train = df_train.drop('Churn', axis='columns')\n    y_train = df_train.Churn\n    return X_train, y_train    \n    \nX_train, y_train = get_train_batch(df3_class0, df3_class1, 0, 1495)\nmodel1 = LogisticRegression()\nmodel1.fit(X_train, y_train)\ny_pred1 = model1.predict(X_test)\n\nX_train, y_train = get_train_batch(df3_class0, df3_class1, 1495, 2990)\nmodel2 = LogisticRegression()\nmodel2.fit(X_train, y_train)\ny_pred2 = model2.predict(X_test)\n\nX_train, y_train = get_train_batch(df3_class0, df3_class1, 2990, 4130)\nmodel3 = LogisticRegression()\nmodel3.fit(X_train, y_train)\ny_pred3 = model3.predict(X_test)\n\nlen(y_pred1)\n\ny_pred_final = y_pred1.copy()\nfor i in range(len(y_pred1)):\n    n_ones = y_pred1[i] + y_pred2[i] + y_pred3[i]\n    if n_ones>1:\n        y_pred_final[i] = 1\n    else:\n        y_pred_final[i] = 0\n        \n        \ncl_rep = classification_report(y_test, y_pred_final)\nprint(cl_rep)\n`.trim();\n\n\n\nclass Imbalanced extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Handle imbalanced data in churn prediction. Logistic Regression</h3>\n              <i>Customer churn prediction is to measure why customers are leaving a business.\n                Looking at customer churn in telecom business. We will build a deep learning model to predict\n                the churn and use precision,recall, f1-score to measure performance of our model.</i>\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={childsFile}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>First of all, drop customerID column as it is of no use</h3>\n\n              <div style={titles}>\n                <PrismCode\n                  code={customerID}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Data Visualization</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={visualization}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Some of the columns have no internet service or no phone service, that can be replaced with a simple No.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={service}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>One hot encoding for categorical columns</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={encoding}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Train test split</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={split}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Use logistic regression classifier</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={regression}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Mitigating Skewdness of Data</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={skewdness}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Applying Logistic Regression</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={applying}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <br />\n\n              <h3>Logistic Regression</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={logistic}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\n\nexport default (withStyles(styles)(Imbalanced));\n"]},"metadata":{},"sourceType":"module"}