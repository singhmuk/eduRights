{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';import Hash from'../../../assets/hash.png';import Hips from'../../../assets/maxhip.png';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var redesign={height:200,width:500};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var heap=\"class MinPriorityQueue {\\n  constructor(c) {\\n    this.heap = [];\\n    this.capacity = c;\\n    this.size = 0;\\n  }\\n\\n  \\n  insert(key) {                               //inserts key at end and rearranges, so the binary heap in appropriate order.\\n    if (this.isFull()) return;\\n    this.heap[this.size + 1] = key;\\n    let k = this.size + 1;\\n    \\n    while (k > 1) {\\n      if (this.heap[k] < this.heap[Math.floor(k / 2)]) {\\n        let temp = this.heap[k];\\n        this.heap[k] = this.heap[Math.floor(k / 2)];\\n        this.heap[Math.floor(k / 2)] = temp;\\n      }\\n      k = Math.floor(k / 2);\\n    }\\n    this.size++;\\n  }\\n\\n  \\n  peek() {                                                            // returns the highest priority value.\\n    return this.heap[1];\\n  }\\n\\n  \\n  isEmpty() {                                                        \\n    if (0 == this.size) return true;\\n    return false;\\n  }\\n\\n  \\n  isFull() {                                                          \\n    if (this.size == this.capacity) return true;\\n    return false;\\n  }\\n\\n\\n  print() {                                                          \\n    console.log(this.heap.slice(1));\\n  }\\n                                                                       \\n  heapSort() {                                                        // heap sorting done by delete function to the \\n    for (let i = 1; i < this.capacity; i++) {                         //number of times of the size of the heap it returns\\n      this.delete();                                                  //reverse sort because it is a min priority queue.\\n    }\\n  }\\n\\n\\n  sink() {                                                            // this function reorders the heap after every delete.\\n    let k = 1;\\n    while (2 * k <= this.size || 2 * k + 1 <= this.size) {\\n      let minIndex;\\n      if (this.heap[2 * k] >= this.heap[k]) {\\n        if (2 * k + 1 <= this.size && this.heap[2*k+1] >= this.heap[k]) {\\n          break;\\n        }\\n        else if(2*k+1 > this.size){\\n          break;\\n        }\\n      }\\n      if (2 * k + 1 > this.size) {\\n        minIndex = this.heap[2 * k] < this.heap[k] ? 2 * k : k;\\n      } else {\\n        if (\\n          this.heap[k] > this.heap[2 * k] ||\\n          this.heap[k] > this.heap[2 * k + 1]\\n        ) {\\n          minIndex =\\n            this.heap[2 * k] < this.heap[2 * k + 1] ? 2 * k : 2 * k + 1;\\n        } else {\\n          minIndex = k;\\n        }\\n      }\\n      let temp = this.heap[k];\\n      this.heap[k] = this.heap[minIndex];\\n      this.heap[minIndex] = temp;\\n      k = minIndex;\\n    }\\n  }\\n\\n  \\n  delete() {                                                            // deletes the highest priority value from the heap.\\n    let min = this.heap[1];\\n    this.heap[1] = this.heap[this.size];\\n    this.heap[this.size] = min;\\n    this.size--;\\n    this.sink();\\n    return min;\\n  }\\n}\\n\\n\\nq = new MinPriorityQueue(8);\\n\\nq.insert(5);\\nq.insert(2);\\nq.insert(4);\\nq.insert(1);\\nq.insert(7);\\n\\nq.print();                                                              // [ 1, 2, 3, 5, 7, 6, 4, 8 ]\\nq.heapSort();\\nq.print();                                                              // [ 8, 7, 6, 5, 4, 3, 2, 1 ]\\n\".trim();var Heap=/*#__PURE__*/function(_Component){_inherits(Heap,_Component);function Heap(){_classCallCheck(this,Heap);return _possibleConstructorReturn(this,_getPrototypeOf(Heap).apply(this,arguments));}_createClass(Heap,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Hash Table\"),React.createElement(\"img\",{src:Hash,alt:\"DeadLock\",className:\"responsive\",style:redesign}),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"A Hash Table is a dictionary-like structure that pairs keys/ values. The location in memory of each pair is determined by a hash function, which accepts a key and returns the address where the value should be inserted and retrieved. Collisions can result if two/ more keys convert to the same address. For robustness, getters and setters should anticipate these events to ensure that all data can be recovered and no data is overwritten.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"If we know our addresses will be in integer sequences, we can simply use Arrays to store our key-value pairs. For more complex address mappings, we can use Maps or Objects. Hash tables have insertion and lookup of constant time on average. Because of collisions and resizing.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Heap\"),React.createElement(\"img\",{src:Hips,alt:\"DeadLock\",className:\"responsive\",style:redesign}),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Minimum Priority Queue: \"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"It is a part of heap data structure\"),React.createElement(\"li\",null,\"A heap is a specific tree based data structure in which all the nodes of tree are in a specific order. that is the children are arranged in some  respect of their parents, can either be greater/ less than the parent. This makes it a min priority queue or max priority queue.\"),React.createElement(\"br\",null)),React.createElement(\"b\",null,\"Functions: \"),\"insert, delete, peek, isEmpty, print, heapSort, sink etc.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:heap,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return Heap;}(Component);export default withStyles(styles)(Heap);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/heap.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Hash","Hips","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","heap","trim","Heap","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,0BAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CAEA,MAAOC,CAAAA,IAAP,KAAiB,0BAAjB,CACA,MAAOC,CAAAA,IAAP,KAAiB,4BAAjB,CAEA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,eAAe,CAAE,SAAnB,CAA8BC,OAAO,CAAE,KAAvC,CAA8CC,QAAQ,CAAE,MAAxD,CAAf,CAEA,GAAMC,CAAAA,QAAQ,CAAG,CACfC,MAAM,CAAE,GADO,CAEfC,KAAK,CAAE,GAFQ,CAAjB,CAKA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,KAAK,CAAE,CACLC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH,CAELT,OAAO,CAAEM,KAAK,CAACG,OAAN,CAAc,CAAd,CAFJ,CADgB,CAKvBC,QAAQ,CAAE,CACRF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA,CALa,CAQvBE,SAAS,CAAE,CACTC,SAAS,CAAE,QADF,CARY,CAAL,EAApB,CAcA,GAAMC,CAAAA,IAAI,CAAG,2rGA4GXC,IA5GW,EAAb,C,GA+GMC,CAAAA,I,4QACgB,CAClBC,UAAU,CAAC,iBAAM3B,CAAAA,KAAK,CAAC4B,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAACX,KAA1B,EACE,8BAAI,oBAAC,OAAD,MAAJ,CADF,CADF,CADF,CAME,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEW,OAAO,CAACX,KAA1B,EACE,oBAAC,IAAD,MACE,2CADF,CAEE,2BAAK,GAAG,CAAEX,IAAV,CAAgB,GAAG,CAAC,UAApB,CAA+B,SAAS,CAAC,YAAzC,CAAsD,KAAK,CAAEM,QAA7D,EAFF,CAGE,8BACE,sdADF,CASE,8BATF,CAWE,oTAXF,CAHF,CAqBE,8BArBF,CAuBE,qCAvBF,CAwBE,2BAAK,GAAG,CAAEL,IAAV,CAAgB,GAAG,CAAC,UAApB,CAA+B,SAAS,CAAC,YAAzC,CAAsD,KAAK,CAAEK,QAA7D,EAxBF,CAyBE,8BAzBF,CA2BE,wDA3BF,CA4BE,8BACE,oEADF,CAEE,mTAFF,CAOE,8BAPF,CA5BF,CAsCE,2CAtCF,6DAuCE,8BAvCF,CAwCE,8BAxCF,CAyCE,2BAAK,KAAK,CAAEJ,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEe,IADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAzCF,CADF,CADF,CANF,CADF,CA8DD,C,kBApEgBzB,S,EAuEnB,cAAgBI,CAAAA,UAAU,CAACa,MAAD,CAAV,CAAmBU,IAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Hash from '../../../assets/hash.png';\nimport Hips from '../../../assets/maxhip.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst heap = `class MinPriorityQueue {\n  constructor(c) {\n    this.heap = [];\n    this.capacity = c;\n    this.size = 0;\n  }\n\n  \n  insert(key) {                               //inserts key at end and rearranges, so the binary heap in appropriate order.\n    if (this.isFull()) return;\n    this.heap[this.size + 1] = key;\n    let k = this.size + 1;\n    \n    while (k > 1) {\n      if (this.heap[k] < this.heap[Math.floor(k / 2)]) {\n        let temp = this.heap[k];\n        this.heap[k] = this.heap[Math.floor(k / 2)];\n        this.heap[Math.floor(k / 2)] = temp;\n      }\n      k = Math.floor(k / 2);\n    }\n    this.size++;\n  }\n\n  \n  peek() {                                                            // returns the highest priority value.\n    return this.heap[1];\n  }\n\n  \n  isEmpty() {                                                        \n    if (0 == this.size) return true;\n    return false;\n  }\n\n  \n  isFull() {                                                          \n    if (this.size == this.capacity) return true;\n    return false;\n  }\n\n\n  print() {                                                          \n    console.log(this.heap.slice(1));\n  }\n                                                                       \n  heapSort() {                                                        // heap sorting done by delete function to the \n    for (let i = 1; i < this.capacity; i++) {                         //number of times of the size of the heap it returns\n      this.delete();                                                  //reverse sort because it is a min priority queue.\n    }\n  }\n\n\n  sink() {                                                            // this function reorders the heap after every delete.\n    let k = 1;\n    while (2 * k <= this.size || 2 * k + 1 <= this.size) {\n      let minIndex;\n      if (this.heap[2 * k] >= this.heap[k]) {\n        if (2 * k + 1 <= this.size && this.heap[2*k+1] >= this.heap[k]) {\n          break;\n        }\n        else if(2*k+1 > this.size){\n          break;\n        }\n      }\n      if (2 * k + 1 > this.size) {\n        minIndex = this.heap[2 * k] < this.heap[k] ? 2 * k : k;\n      } else {\n        if (\n          this.heap[k] > this.heap[2 * k] ||\n          this.heap[k] > this.heap[2 * k + 1]\n        ) {\n          minIndex =\n            this.heap[2 * k] < this.heap[2 * k + 1] ? 2 * k : 2 * k + 1;\n        } else {\n          minIndex = k;\n        }\n      }\n      let temp = this.heap[k];\n      this.heap[k] = this.heap[minIndex];\n      this.heap[minIndex] = temp;\n      k = minIndex;\n    }\n  }\n\n  \n  delete() {                                                            // deletes the highest priority value from the heap.\n    let min = this.heap[1];\n    this.heap[1] = this.heap[this.size];\n    this.heap[this.size] = min;\n    this.size--;\n    this.sink();\n    return min;\n  }\n}\n\n\nq = new MinPriorityQueue(8);\n\nq.insert(5);\nq.insert(2);\nq.insert(4);\nq.insert(1);\nq.insert(7);\n\nq.print();                                                              // [ 1, 2, 3, 5, 7, 6, 4, 8 ]\nq.heapSort();\nq.print();                                                              // [ 8, 7, 6, 5, 4, 3, 2, 1 ]\n`.trim()\n\n\nclass Heap extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Hash Table</h3>\n              <img src={Hash} alt=\"DeadLock\" className=\"responsive\" style={redesign} />\n              <ul>\n                <li>\n                  A Hash Table is a dictionary-like structure that pairs keys/ values. The location in\n                  memory of each pair is determined by a hash function, which accepts a key and returns the\n                  address where the value should be inserted and retrieved. Collisions can result if two/\n                  more keys convert to the same address. For robustness, getters and setters should\n                  anticipate these events to ensure that all data can be recovered and no data is\n                  overwritten.\n                </li>\n                <br />\n\n                <li>\n                  If we know our addresses will be in integer sequences, we can simply use Arrays to store\n                  our key-value pairs. For more complex address mappings, we can use Maps or Objects. Hash\n                  tables have insertion and lookup of constant time on average. Because of collisions and\n                  resizing.\n                </li>\n              </ul>\n              <br />\n\n              <h3>Heap</h3>\n              <img src={Hips} alt=\"DeadLock\" className=\"responsive\" style={redesign} />\n              <br />\n\n              <b>Minimum Priority Queue: </b>\n              <ul>\n                <li>It is a part of heap data structure</li>\n                <li>\n                  A heap is a specific tree based data structure in which all the nodes of tree are in a specific order.\n                  that is the children are arranged in some  respect of their parents, can either be greater/ less than the parent. This makes\n                  it a min priority queue or max priority queue.\n                </li>\n                <br />\n              </ul>\n\n              <b>Functions: </b>insert, delete, peek, isEmpty, print, heapSort, sink etc.\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={heap}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Heap));\n"]},"metadata":{},"sourceType":"module"}