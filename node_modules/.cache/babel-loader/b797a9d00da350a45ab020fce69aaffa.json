{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/mongoDB/deepMongodb/bulkRight.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst code = `\n\ndb.students.bulkWrite(\n  [\n     { insertOne :{\n           \"document\" :{ name: \"Andrew\", major: \"Architecture\", gpa: 3.2 }\n        }},\n     { insertOne :{\n           \"document\" :{ name: \"Terry\", major: \"Math\", gpa: 3.8 }\n        }},\n     { updateOne :{\n           filter : { name : \"Terry\" },\n           update : { $set : { gpa : 4.0 } }\n        }},\n     { deleteOne :{ filter : { name : \"Kate\"} }\n        },\n     { replaceOne :{\n           filter : { name : \"Claire\" },\n           replacement : { name: \"Genny\", major: \"Counsling\", gpa: 2.4 }\n        }}\n],\n{ordered: false}\n);\n`.trim();\nconst indexing = `\ndb.stores.insertMany(\n  [\n    { _id: 1, name: \"Java Hut\", description: \"Coffee and cakes\" },\n    { _id: 2, name: \"Burger Buns\", description: \"Gourmet hamburgers\" },\n    { _id: 3, name: \"Coffee Shop\", description: \"Just coffee\" },\n    { _id: 4, name: \"Clothes Clothes Clothes\", description: \"Discount clothing\" },\n    { _id: 5, name: \"Java Shopping\", description: \"Indonesian goods\" }\n  ]\n)\n\ndb.stores.createIndex( { name: \"text\", description: \"text\" } )\n\ndb.stores.find({ $text: {$search: \"Coffee\" } })\n\ndb.stores.find({ $text: {$search: \"Java Hut Coffee\" } })\n\ndb.stores.find(\n  { $text: { $search: \"java hut coffee\" } },\n  { score: { $meta: \"textScore\" } }\n).sort( { score: { $meta: \"textScore\" } } )`.trim();\nconst aggregation = `\ndb.purchase_orders.insertMany(\n  [\n       {product: \"toothbrush\", total: 4.75, customer: \"Mike\"},\n       {product: \"guitar\", total: 199.99, customer: \"Tom\"},\n       {product: \"milk\", total: 11.33, customer: \"Mike\"},\n       {product: \"pizza\", total: 8.50, customer: \"Karen\"},\n       {product: \"toothbrush\", total: 4.75, customer: \"Karen\"},\n       {product: \"pizza\", total: 4.75, customer: \"Dave\"}\n       {product: \"toothbrush\", total: 4.75, customer: \"Mike\"},\n  ]\n)\n\n// find out how many toothbrushes were sold\ndb.purchase_orders.count({product: \"toothbrush\"})\n\n// Find list of all products sold\ndb.purchase_orders.distinct(\"product\")\n\n// Find the total amount of money spent by each customer\ndb.purchase_orders.aggregate([\n       {$match: {} },\n       {$group: {_id: \"$customer\", total: { $sum: \"$total\"} } }\n  ])\n\n// Find how much has been spent on each product and sort it by price\ndb.purchase_orders.aggregate([\n       {$match: {} },\n       {$group: {_id: \"$product\", total: { $sum: \"$total\"} } },\n       {$sort: {total: -1}}\n  ])\n\n// Find how much money each customer has spent on toothbrushes and pizza\ndb.purchase_orders.aggregate([\n       {$match: {product: {$in: [\"toothbrush\", \"pizza\"]} } },\n       {$group: {_id: \"$product\", total: { $sum: \"$total\"} } },\n  ])`.trim();\nconst search = `\n  //Creating Text Index\n  db.posts.insert({\n    \"post_text\": \"enjoy the mongodb articles on tutorialspoint\",\n    \"tags\": [\"mongodb\", \"tutorialspoint\"]\n }\n {\n   \"post_text\" : \"writing tutorials on mongodb\",\n   \"tags\" : [ \"mongodb\", \"tutorial\" ]\n })\n \n \n //We will create a text index on post_text field so that we can search inside our posts' text âˆ’\n db.posts.createIndex({post_text:\"text\"})\n{\n\t\"createdCollectionAutomatically\" : true,\n\t\"numIndexesBefore\" : 1,\n\t\"numIndexesAfter\" : 2,\n\t\"ok\" : 1\n}\n\n\n//Using Text Index\nNow that we have created the text index on post_text field, we will search for all the posts having the word \ntutorialspoint in their text.\ndb.posts.find({$text:{$search:\"tutorialspoint\"}}).pretty()\n{\n\t\"_id\" : ObjectId(\"5dd7ce28f1dd4583e7103fe0\"),\n\t\"post_text\" : \"enjoy the mongodb articles on tutorialspoint\",\n\t\"tags\" : [\n\t\t\"mongodb\",\n\t\t\"tutorialspoint\"\n\t]\n}\n  `.trim();\nconst deleting = `\n  db.posts.getIndexes()[\n\t{\"v\" : 2,\t\"key\" : {\"_id\" : 1}, \"name\" : \"_id_\",\t\"ns\" : \"mydb.posts\"},\n\t{\"v\" : 2,\t\"key\" : { \"fts\" : \"text\", \"ftsx\" : 1},\t\"name\" : \"post_text_text\",\"ns\" : \"mydb.posts\",\n\t\t\"weights\" : {\"post_text\" : 1},\n\t\t\"default_language\" : \"english\",\n\t\t\"language_override\" : \"language\",\n\t\t\"textIndexVersion\" : 3\n  }\n]\n\n\n//After getting the name of your index from above query, run the following command. Here, post_text_text is the name \nof the index.\ndb.posts.dropIndex(\"post_text_text\")\n`.trim();\n\nclass BulkWright extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"Bulk Write Operations\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }), \"The \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"db.collection.bulkWrite()\"), \" method provides the ability to perform bulk insert, update, and remove operations. MongoDB also supports bulk insert through the \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"db.collection.insertMany().\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), \"Since ordered is true by default, only the first operation completes successfully. The rest are not executed. Running the bulkWrite() with ordered : false would allow the remaining operations to complete despite the error.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: code,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"Aggregation\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: aggregation,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, \"Text Indexing\"), \"MongoDB provides text indexes to support text search queries on string content. text indexes can include any field whose value is a string or an array of string elements.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: indexing,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, \"Text Search\"), \"The Text Search uses stemming techniques to look for specified words in the string fields by dropping stemming stop words like a, an, the, etc.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: search,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, \"Deleting Text Index\"), \"To delete an existing text index, first find the name of index using the following query \\u2212\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: deleting,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(BulkWright);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/mongoDB/deepMongodb/bulkRight.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","code","trim","indexing","aggregation","search","deleting","BulkWright","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = {backgroundColor:'#F0F8FF', padding:'1px', fontSize:'16px'}\n\nconst styles = theme => ({\n  paper: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1)\n  },\n  smMargin: {\n      margin: theme.spacing(1)\n  },\n  actionDiv: {\n      textAlign: \"center\"\n  }\n})\n\nconst code = `\n\ndb.students.bulkWrite(\n  [\n     { insertOne :{\n           \"document\" :{ name: \"Andrew\", major: \"Architecture\", gpa: 3.2 }\n        }},\n     { insertOne :{\n           \"document\" :{ name: \"Terry\", major: \"Math\", gpa: 3.8 }\n        }},\n     { updateOne :{\n           filter : { name : \"Terry\" },\n           update : { $set : { gpa : 4.0 } }\n        }},\n     { deleteOne :{ filter : { name : \"Kate\"} }\n        },\n     { replaceOne :{\n           filter : { name : \"Claire\" },\n           replacement : { name: \"Genny\", major: \"Counsling\", gpa: 2.4 }\n        }}\n],\n{ordered: false}\n);\n`.trim();\n\n\nconst indexing = `\ndb.stores.insertMany(\n  [\n    { _id: 1, name: \"Java Hut\", description: \"Coffee and cakes\" },\n    { _id: 2, name: \"Burger Buns\", description: \"Gourmet hamburgers\" },\n    { _id: 3, name: \"Coffee Shop\", description: \"Just coffee\" },\n    { _id: 4, name: \"Clothes Clothes Clothes\", description: \"Discount clothing\" },\n    { _id: 5, name: \"Java Shopping\", description: \"Indonesian goods\" }\n  ]\n)\n\ndb.stores.createIndex( { name: \"text\", description: \"text\" } )\n\ndb.stores.find({ $text: {$search: \"Coffee\" } })\n\ndb.stores.find({ $text: {$search: \"Java Hut Coffee\" } })\n\ndb.stores.find(\n  { $text: { $search: \"java hut coffee\" } },\n  { score: { $meta: \"textScore\" } }\n).sort( { score: { $meta: \"textScore\" } } )`.trim();\n\n\nconst aggregation = `\ndb.purchase_orders.insertMany(\n  [\n       {product: \"toothbrush\", total: 4.75, customer: \"Mike\"},\n       {product: \"guitar\", total: 199.99, customer: \"Tom\"},\n       {product: \"milk\", total: 11.33, customer: \"Mike\"},\n       {product: \"pizza\", total: 8.50, customer: \"Karen\"},\n       {product: \"toothbrush\", total: 4.75, customer: \"Karen\"},\n       {product: \"pizza\", total: 4.75, customer: \"Dave\"}\n       {product: \"toothbrush\", total: 4.75, customer: \"Mike\"},\n  ]\n)\n\n// find out how many toothbrushes were sold\ndb.purchase_orders.count({product: \"toothbrush\"})\n\n// Find list of all products sold\ndb.purchase_orders.distinct(\"product\")\n\n// Find the total amount of money spent by each customer\ndb.purchase_orders.aggregate([\n       {$match: {} },\n       {$group: {_id: \"$customer\", total: { $sum: \"$total\"} } }\n  ])\n\n// Find how much has been spent on each product and sort it by price\ndb.purchase_orders.aggregate([\n       {$match: {} },\n       {$group: {_id: \"$product\", total: { $sum: \"$total\"} } },\n       {$sort: {total: -1}}\n  ])\n\n// Find how much money each customer has spent on toothbrushes and pizza\ndb.purchase_orders.aggregate([\n       {$match: {product: {$in: [\"toothbrush\", \"pizza\"]} } },\n       {$group: {_id: \"$product\", total: { $sum: \"$total\"} } },\n  ])`.trim();\n  \n  \n  const search = `\n  //Creating Text Index\n  db.posts.insert({\n    \"post_text\": \"enjoy the mongodb articles on tutorialspoint\",\n    \"tags\": [\"mongodb\", \"tutorialspoint\"]\n }\n {\n   \"post_text\" : \"writing tutorials on mongodb\",\n   \"tags\" : [ \"mongodb\", \"tutorial\" ]\n })\n \n \n //We will create a text index on post_text field so that we can search inside our posts' text âˆ’\n db.posts.createIndex({post_text:\"text\"})\n{\n\t\"createdCollectionAutomatically\" : true,\n\t\"numIndexesBefore\" : 1,\n\t\"numIndexesAfter\" : 2,\n\t\"ok\" : 1\n}\n\n\n//Using Text Index\nNow that we have created the text index on post_text field, we will search for all the posts having the word \ntutorialspoint in their text.\ndb.posts.find({$text:{$search:\"tutorialspoint\"}}).pretty()\n{\n\t\"_id\" : ObjectId(\"5dd7ce28f1dd4583e7103fe0\"),\n\t\"post_text\" : \"enjoy the mongodb articles on tutorialspoint\",\n\t\"tags\" : [\n\t\t\"mongodb\",\n\t\t\"tutorialspoint\"\n\t]\n}\n  `.trim();\n  \n  \n  const deleting = `\n  db.posts.getIndexes()[\n\t{\"v\" : 2,\t\"key\" : {\"_id\" : 1}, \"name\" : \"_id_\",\t\"ns\" : \"mydb.posts\"},\n\t{\"v\" : 2,\t\"key\" : { \"fts\" : \"text\", \"ftsx\" : 1},\t\"name\" : \"post_text_text\",\"ns\" : \"mydb.posts\",\n\t\t\"weights\" : {\"post_text\" : 1},\n\t\t\"default_language\" : \"english\",\n\t\t\"language_override\" : \"language\",\n\t\t\"textIndexVersion\" : 3\n  }\n]\n\n\n//After getting the name of your index from above query, run the following command. Here, post_text_text is the name \nof the index.\ndb.posts.dropIndex(\"post_text_text\")\n`.trim();\n\n\nclass BulkWright extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n            <Grid item xs={2}>\n                <Paper className={classes.paper}>\n                    <h4><Sidebar /></h4>\n                </Paper>\n            </Grid>\n            <Grid item xs={10}>\n              <Paper className={classes.paper}>\n                <List>\n                 <b>Bulk Write Operations</b>\n                 <br/>\n                 <br/>\n                 The <b>db.collection.bulkWrite()</b> method provides the ability to perform bulk insert, update, and remove operations. MongoDB also supports bulk insert through the <b>db.collection.insertMany().</b>\n                 <br/><br/>\n                 Since ordered is true by default, only the first operation completes successfully. The rest are not executed. Running the bulkWrite() with ordered : false would allow the remaining operations to complete despite the error.\n                   <div style={titles}>\n                      <PrismCode\n                        code={code}\n                        language=\"js\"\n                        plugins={[\"line-numbers\"]}\n                      />\n                    </div>\n                    <br/>\n                    <h3>Aggregation</h3>\n                    <div style={titles}>\n                      <PrismCode\n                        code={aggregation}\n                        language=\"js\"\n                        plugins={[\"line-numbers\"]}\n                      />\n                    </div>\n                    <br/>\n                    <h3>Text Indexing</h3>\n                    MongoDB provides text indexes to support text search queries on string content. text indexes can include any field whose value is a string or an array of string elements.\n                    <div style={titles}>\n                      <PrismCode\n                        code={indexing}\n                        language=\"js\"\n                        plugins={[\"line-numbers\"]}\n                      />\n                    </div>\n                    <br/>\n                    <h3>Text Search</h3>\n                    The Text Search uses stemming techniques to look for specified words in the string fields by dropping stemming stop words like a, an, the, etc.\n                    <br/>\n                    <div style={titles}>\n                      <PrismCode\n                        code={search}\n                        language=\"js\"\n                        plugins={[\"line-numbers\"]}\n                      />\n                    </div>\n                    <br/>\n                    <h3>Deleting Text Index</h3>\n                    To delete an existing text index, first find the name of index using the following query âˆ’\n                    <div style={titles}>\n                      <PrismCode\n                        code={deleting}\n                        language=\"js\"\n                        plugins={[\"line-numbers\"]}\n                      />\n                    </div>\n                    </List>\n                </Paper>\n              </Grid>\n            </Grid>\n          )\n        }\n      }\n\nexport default (withStyles(styles)(BulkWright));\n"]},"metadata":{},"sourceType":"module"}