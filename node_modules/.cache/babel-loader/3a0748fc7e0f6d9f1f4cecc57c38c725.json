{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/nodeJs/nodeDeep/ejsNode.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst modules = `\n//names.js\nconst john = 'john'\nconst peter = 'peter'\nmodule.exports = { john, peter }\n\n\n//utils.js\nconst sayHi = (name) => {\n  console.log('Hello there '$'{name}')\n}\nmodule.exports = sayHi\n\n\n//mind-grenade.js\nconst num1 = 5\nconst num2 = 10\n\nfunction addValues() {\n  console.log('the sum is : '$'{num1 + num2}')\n}\naddValues()\n\n\n//app.js\nconst fun=()=>{\n  const names = require('./modules/04-names')\n  const sayHi = require('./modules/05-utils')\n  require('./modules/07-mind-grenade')\n  sayHi('susan')\n  sayHi(names.john)\n  sayHi(names.peter)\n  }\n  module.exports={fun}\n\n\n  //server.js\n  const {fun} = require('app.js');\n`.trim();\nconst patterns = `\nconst http = require('http')\n\nconst server = http.createServer((req, res) => {\n  if (req.url === '/') {\n    res.end('Home Page')\n  }\n  if (req.url === '/about') {\n    for (let i = 0; i < 1000; i++) {\n      for (let j = 0; j < 1000; j++) {\n        console.log('$'{i} '$'{j}')\n      }\n    }\n    res.end('About Page')\n  }\n  res.end('Error Page')\n})\n\nserver.listen(5000, () => console.log('Server listening on port : 5000....'))\n`.trim();\nconst awaitPat = `\nconst { readFile, writeFile } = require('fs').promises\n\nconst start = async () => {\n  try {\n    const first = await readFile('./content/first.txt', 'utf8')\n    const second = await readFile('./content/second.txt', 'utf8')\n    await writeFile(\n      './content/result-mind-grenade.txt',\n      'THIS IS AWESOME : '$'{first} '$'{second}',\n      { flag: 'a' }\n    )\n    console.log(first, second)\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nstart();`.trim();\nconst fSync = `\nconst { readFileSync, writeFileSync } = require('fs')\nconst first = readFileSync('./first.txt', 'utf8')\nconst second = readFileSync('./second.txt', 'utf8')\n\nconst fun=()=>{\n    writeFileSync(\n        './result-sync.txt',\n        'Here is the result : '$'{first}, '$'{second}',\n        { flag: 'a' }\n      )\n      console.log('done with this task')\n      console.log('starting the next one')\n}\n\nmodule.exports={fun}`.trim();\nconst fsAsync = `\nconst { readFile, writeFile } = require('fs')\n\nconst fun=()=>{\nreadFile('./first.txt', 'utf8', (err, result) => {\n  if (err) {\n    console.log(err)\n    return\n  }\n  const first = result\n  readFile('./second.txt', 'utf8', (err, result) => {\n    if (err) {\n      console.log(err)\n      return\n    }\n    const second = result\n    writeFile(\n      './result-async.txt',\n      'Here is the result : '$'{first}, '$'{second}',\n      (err, result) => {\n        if (err) {\n          console.log(err)\n          return\n        }\n        console.log('done with this task')\n      }\n    )\n  })\n})\n}\n\nmodule.exports={fun}`.trim();\nconst process = `\nconsole.log(__dirname)\n\n//os-module\nconst os = require('os')\n\nconst user = os.userInfo()                                    // info about current user\nconsole.log(user)\nconsole.log('The System Uptime is '$'{os.uptime()} seconds') // method returns the system uptime in seconds\n\nconst currentOS = {\n  name: os.type(),\n  release: os.release(),\n  totalMem: os.totalmem(),\n  freeMem: os.freemem(),\n}\nconsole.log(currentOS)\n\n\n//path-module\nconst path = require('path')\n\nconsole.log(path.sep)\n\nconst filePath = path.join('/content/', 'subfolder', 'test.txt')\nconsole.log(filePath)\n\nconst base = path.basename(filePath)\nconsole.log(base)\n\nconst absolute = path.resolve(__dirname, 'content', 'subfolder', 'test.txt')\nconsole.log(absolute)\n`.trim();\nconst http = `\nconst http = require('http')\n\nconst fun=()=>{\n    const server = http.createServer((req, res) => {\n          if (req.url === '/') {\n            res.end('Welcome to our home page')\n          }\n          if (req.url === '/about') {\n            res.end('Here is our short history')\n          }\n          res.end('\n          <h1>Oops!</h1>\n        <p>We can't seem to find the page you are looking for</p>\n        <a href=\"/\">back home</a>\n          ')\n          \n        if (req.url === '/') {\n          res.end('Welcome to our home page')\n        } else if (req.url === '/about') {\n          res.end('Here is our short history')\n        } else {\n          res.end('\n          <h1>Oops!</h1>\n          <p>We can't seem to find the page you are looking for</p>\n          <a href=\"/\">back home</a>\n          ')\n        }\n      })\n      server;\n}\n\nmodule.exports={fun}`.trim();\nconst EventEmitter = `\nconst EventEmitter = require('events')\nconst customEmitter = new EventEmitter()\n\ncustomEmitter.on('response', (name, id) => {\n  console.log('data recieved user '$'{name} with id:'$'{id}')\n})\n\ncustomEmitter.on('response', () => {\n  console.log('some other logic here')\n})\n\ncustomEmitter.emit('response', 'john', 34)\n`.trim();\nconst requestEvent = `\nconst http = require('http')\nconst server = http.createServer()\n\nserver.on('request', (req, res) => {\n  res.end('Welcome')\n})\n\nserver.listen(5000)\n`.trim();\nconst createBigFile = `\nconst { writeFileSync } = require('fs')\n\nconst fun=()=>{\n    for (let i = 0; i < 10000; i++) {\n        writeFileSync('./big.txt', 'hello world '$'{i}\\n', { flag: 'a' })\n      }\n}\n\nmodule.exports={fun}`.trim();\nconst streams = `\nconst { createReadStream } = require('fs')\n// const stream = createReadStream('./content/big.txt', { highWaterMark: 90000 })\n// const stream = createReadStream('../content/big.txt', { encoding: 'utf8' })\nconst stream = createReadStream('./big.txt')\n\n\nconst fun=()=>{\n    stream.on('data', (result) => {\n        console.log(result)\n      })\n      stream.on('error', (err) => console.log(err))\n}\n\nmodule.exports={fun}`.trim();\nconst httpStream = `\nvar http = require('http')\nvar fs = require('fs')\n\nconst fun=()=>{\n    http\n    .createServer(function (req, res) {\n      // const text = fs.readFileSync('./content/big.txt', 'utf8')\n      // res.end(text)\n      const fileStream = fs.createReadStream('./content/big.txt', 'utf8')\n      fileStream.on('open', () => {\n        fileStream.pipe(res)\n      })\n      fileStream.on('error', (err) => {\n        res.end(err)\n      })\n    })\n    .listen(5001)\n}\n\nmodule.exports={fun}`.trim();\n\nclass Ejs extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, \"modules\"), \"Every file is module by default.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }), \"Modules - Encapsulated Code (only share minimum)\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: modules,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, \"Async-Patterns\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: patterns,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, \"Await-Pattern\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: awaitPat,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, \"fs-sync\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: fSync,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, \"fs-async\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: fsAsync,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, \"Http\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: http,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, \"EventEmitter\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: EventEmitter,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, \"Request-Event\"), \"Emits request event subcribe to it / listen for it / respond to it.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: requestEvent,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, \"create Big File\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: createBigFile,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }, \"Streams\"), \"default 64kb\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }), \"last buffer - remainder\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }), \"highWaterMark - control size\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: streams,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }, \"http-stream\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: httpStream,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Ejs);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/nodeJs/nodeDeep/ejsNode.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","modules","trim","patterns","awaitPat","fSync","fsAsync","process","http","EventEmitter","requestEvent","createBigFile","streams","httpStream","Ejs","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst modules = `\n//names.js\nconst john = 'john'\nconst peter = 'peter'\nmodule.exports = { john, peter }\n\n\n//utils.js\nconst sayHi = (name) => {\n  console.log('Hello there '$'{name}')\n}\nmodule.exports = sayHi\n\n\n//mind-grenade.js\nconst num1 = 5\nconst num2 = 10\n\nfunction addValues() {\n  console.log('the sum is : '$'{num1 + num2}')\n}\naddValues()\n\n\n//app.js\nconst fun=()=>{\n  const names = require('./modules/04-names')\n  const sayHi = require('./modules/05-utils')\n  require('./modules/07-mind-grenade')\n  sayHi('susan')\n  sayHi(names.john)\n  sayHi(names.peter)\n  }\n  module.exports={fun}\n\n\n  //server.js\n  const {fun} = require('app.js');\n`.trim();\n\nconst patterns = `\nconst http = require('http')\n\nconst server = http.createServer((req, res) => {\n  if (req.url === '/') {\n    res.end('Home Page')\n  }\n  if (req.url === '/about') {\n    for (let i = 0; i < 1000; i++) {\n      for (let j = 0; j < 1000; j++) {\n        console.log('$'{i} '$'{j}')\n      }\n    }\n    res.end('About Page')\n  }\n  res.end('Error Page')\n})\n\nserver.listen(5000, () => console.log('Server listening on port : 5000....'))\n`.trim();\n\nconst awaitPat = `\nconst { readFile, writeFile } = require('fs').promises\n\nconst start = async () => {\n  try {\n    const first = await readFile('./content/first.txt', 'utf8')\n    const second = await readFile('./content/second.txt', 'utf8')\n    await writeFile(\n      './content/result-mind-grenade.txt',\n      'THIS IS AWESOME : '$'{first} '$'{second}',\n      { flag: 'a' }\n    )\n    console.log(first, second)\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nstart();`.trim();\n\nconst fSync = `\nconst { readFileSync, writeFileSync } = require('fs')\nconst first = readFileSync('./first.txt', 'utf8')\nconst second = readFileSync('./second.txt', 'utf8')\n\nconst fun=()=>{\n    writeFileSync(\n        './result-sync.txt',\n        'Here is the result : '$'{first}, '$'{second}',\n        { flag: 'a' }\n      )\n      console.log('done with this task')\n      console.log('starting the next one')\n}\n\nmodule.exports={fun}`.trim();\n\nconst fsAsync = `\nconst { readFile, writeFile } = require('fs')\n\nconst fun=()=>{\nreadFile('./first.txt', 'utf8', (err, result) => {\n  if (err) {\n    console.log(err)\n    return\n  }\n  const first = result\n  readFile('./second.txt', 'utf8', (err, result) => {\n    if (err) {\n      console.log(err)\n      return\n    }\n    const second = result\n    writeFile(\n      './result-async.txt',\n      'Here is the result : '$'{first}, '$'{second}',\n      (err, result) => {\n        if (err) {\n          console.log(err)\n          return\n        }\n        console.log('done with this task')\n      }\n    )\n  })\n})\n}\n\nmodule.exports={fun}`.trim();\n\nconst process = `\nconsole.log(__dirname)\n\n//os-module\nconst os = require('os')\n\nconst user = os.userInfo()                                    // info about current user\nconsole.log(user)\nconsole.log('The System Uptime is '$'{os.uptime()} seconds') // method returns the system uptime in seconds\n\nconst currentOS = {\n  name: os.type(),\n  release: os.release(),\n  totalMem: os.totalmem(),\n  freeMem: os.freemem(),\n}\nconsole.log(currentOS)\n\n\n//path-module\nconst path = require('path')\n\nconsole.log(path.sep)\n\nconst filePath = path.join('/content/', 'subfolder', 'test.txt')\nconsole.log(filePath)\n\nconst base = path.basename(filePath)\nconsole.log(base)\n\nconst absolute = path.resolve(__dirname, 'content', 'subfolder', 'test.txt')\nconsole.log(absolute)\n`.trim();\n\nconst http = `\nconst http = require('http')\n\nconst fun=()=>{\n    const server = http.createServer((req, res) => {\n          if (req.url === '/') {\n            res.end('Welcome to our home page')\n          }\n          if (req.url === '/about') {\n            res.end('Here is our short history')\n          }\n          res.end('\n          <h1>Oops!</h1>\n        <p>We can't seem to find the page you are looking for</p>\n        <a href=\"/\">back home</a>\n          ')\n          \n        if (req.url === '/') {\n          res.end('Welcome to our home page')\n        } else if (req.url === '/about') {\n          res.end('Here is our short history')\n        } else {\n          res.end('\n          <h1>Oops!</h1>\n          <p>We can't seem to find the page you are looking for</p>\n          <a href=\"/\">back home</a>\n          ')\n        }\n      })\n      server;\n}\n\nmodule.exports={fun}`.trim();\n\nconst EventEmitter = `\nconst EventEmitter = require('events')\nconst customEmitter = new EventEmitter()\n\ncustomEmitter.on('response', (name, id) => {\n  console.log('data recieved user '$'{name} with id:'$'{id}')\n})\n\ncustomEmitter.on('response', () => {\n  console.log('some other logic here')\n})\n\ncustomEmitter.emit('response', 'john', 34)\n`.trim();\n\nconst requestEvent = `\nconst http = require('http')\nconst server = http.createServer()\n\nserver.on('request', (req, res) => {\n  res.end('Welcome')\n})\n\nserver.listen(5000)\n`.trim();\n\nconst createBigFile = `\nconst { writeFileSync } = require('fs')\n\nconst fun=()=>{\n    for (let i = 0; i < 10000; i++) {\n        writeFileSync('./big.txt', 'hello world '$'{i}\\n', { flag: 'a' })\n      }\n}\n\nmodule.exports={fun}`.trim();\n\nconst streams = `\nconst { createReadStream } = require('fs')\n// const stream = createReadStream('./content/big.txt', { highWaterMark: 90000 })\n// const stream = createReadStream('../content/big.txt', { encoding: 'utf8' })\nconst stream = createReadStream('./big.txt')\n\n\nconst fun=()=>{\n    stream.on('data', (result) => {\n        console.log(result)\n      })\n      stream.on('error', (err) => console.log(err))\n}\n\nmodule.exports={fun}`.trim();\n\nconst httpStream = `\nvar http = require('http')\nvar fs = require('fs')\n\nconst fun=()=>{\n    http\n    .createServer(function (req, res) {\n      // const text = fs.readFileSync('./content/big.txt', 'utf8')\n      // res.end(text)\n      const fileStream = fs.createReadStream('./content/big.txt', 'utf8')\n      fileStream.on('open', () => {\n        fileStream.pipe(res)\n      })\n      fileStream.on('error', (err) => {\n        res.end(err)\n      })\n    })\n    .listen(5001)\n}\n\nmodule.exports={fun}`.trim();\n\n\nclass Ejs extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>modules</h3>\n              Every file is module by default.<br/>\n              Modules - Encapsulated Code (only share minimum)\n              <div style={titles}>\n                <PrismCode\n                  code={modules}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Async-Patterns</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={patterns}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Await-Pattern</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={awaitPat}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>fs-sync</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={fSync}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <h3>fs-async</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={fsAsync}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Http</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={http}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>EventEmitter</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={EventEmitter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Request-Event</h3>\n              Emits request event subcribe to it / listen for it / respond to it.\n              <div style={titles}>\n                <PrismCode\n                  code={requestEvent}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>create Big File</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={createBigFile}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Streams</h3>\n              default 64kb<br/>\n              last buffer - remainder<br/>\n              highWaterMark - control size<br/>\n              <div style={titles}>\n                <PrismCode\n                  code={streams}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>http-stream</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={httpStream}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Ejs));\n"]},"metadata":{},"sourceType":"module"}