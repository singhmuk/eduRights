{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/ml/deepMl/lda.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst cluster = `\nimport numpy as np\n\n\nclass LDA:\n    def __init__(self, n_components):\n        self.n_components = n_components\n        self.linear_discriminants = None\n\n    def fit(self, X, y):\n        n_features = X.shape[1]\n        class_labels = np.unique(y)\n\n        # SW = sum((X_c - mean_X_c)^2 )                                                     # Within class scatter matrix:\n        # SB = sum( n_c * (mean_X_c - mean_overall)^2 )                                     # Between class scatter:\n\n        mean_overall = np.mean(X, axis=0)\n        SW = np.zeros((n_features, n_features))\n        SB = np.zeros((n_features, n_features))\n        for c in class_labels:\n            X_c = X[y == c]\n            mean_c = np.mean(X_c, axis=0)\n            \n            SW += (X_c - mean_c).T.dot((X_c - mean_c))                            # (4, n_c) * (n_c, 4) = (4,4) -> transpose\n            n_c = X_c.shape[0]                                                    # (4, 1) * (1, 4) = (4,4) -> reshape\n            mean_diff = (mean_c - mean_overall).reshape(n_features, 1)\n            SB += n_c * (mean_diff).dot(mean_diff.T)\n\n        \n        A = np.linalg.inv(SW).dot(SB)                                      # Determine SW^-1 * SB\n                                                                           # Get eigenvalues and eigenvectors of SW^-1 * SB\n        eigenvalues, eigenvectors = np.linalg.eig(A)\n                                                            # eigenvector v = [:,i] column vector, transpose for easier cal.\n        \n        eigenvectors = eigenvectors.T                                      # sort eigenvalues high to low\n        idxs = np.argsort(abs(eigenvalues))[::-1]\n        eigenvalues = eigenvalues[idxs]\n        eigenvectors = eigenvectors[idxs]\n        \n        self.linear_discriminants = eigenvectors[0 : self.n_components]   # store first n eigenvectors\n\n    def transform(self, X):\n        return np.dot(X, self.linear_discriminants.T)                     # project data\n`.trim();\nconst testings = `\nif __name__ == \"__main__\":\n    # Imports\n    import matplotlib.pyplot as plt\n    from sklearn import datasets\n\n    data = datasets.load_iris()\n    X, y = data.data, data.target\n\n    # Project the data onto the 2 primary linear discriminants\n    lda = LDA(2)\n    lda.fit(X, y)\n    X_projected = lda.transform(X)\n\n    print(\"Shape of X:\", X.shape)\n    print(\"Shape of transformed X:\", X_projected.shape)\n\n    x1, x2 = X_projected[:, 0], X_projected[:, 1]\n\n    plt.scatter(\n        x1, x2, c=y, edgecolor=\"none\", alpha=0.8, cmap=plt.cm.get_cmap(\"viridis\", 3)\n    )\n\n    plt.xlabel(\"Linear Discriminant 1\")\n    plt.ylabel(\"Linear Discriminant 2\")\n    plt.colorbar()\n    plt.show()\n`.trim(); // const stack = ``.trim();\n// const stack = ``.trim();\n\nclass LdaPy extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Linear Discriminant Analysis\"), \"It is a linear model for classification and dimensionality reduction. Most commonly used for feature extraction in pattern classification problems.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Why LDA:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Logistic Regression perform well for binary classification but falls short in the case of multiple classification problems with well-separated classes. While LDA handles these.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"LDA also used in data preprocessing to reduce the number of features just as PCA which reduces the computing cost significantly.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"LDA is also used in face detection algorithms. In Fisherfaces LDA is used to extract useful data from different faces. Coupled with eigenfaces it produces effective results.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Shortcomings:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Linear decision boundaries may not effectively separate non-linearly separable classes. More flexible boundaries are desired.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"In cases where the number of observations exceeds the number of features, LDA might not perform as desired. This is called Small Sample Size (SSS) problem. Regularization is required.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Assumptions:\"), \"LDA makes some assumptions about the data:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"Assumes the data to be distributed normally/ Gaussian distribution of data points i.e. each feature must make a bell-shaped curve when plotted. \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"Each of the classes has identical covariance matrices.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: cluster,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"Testing\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: testings,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(LdaPy);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ml/deepMl/lda.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","cluster","trim","testings","LdaPy","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst cluster = `\nimport numpy as np\n\n\nclass LDA:\n    def __init__(self, n_components):\n        self.n_components = n_components\n        self.linear_discriminants = None\n\n    def fit(self, X, y):\n        n_features = X.shape[1]\n        class_labels = np.unique(y)\n\n        # SW = sum((X_c - mean_X_c)^2 )                                                     # Within class scatter matrix:\n        # SB = sum( n_c * (mean_X_c - mean_overall)^2 )                                     # Between class scatter:\n\n        mean_overall = np.mean(X, axis=0)\n        SW = np.zeros((n_features, n_features))\n        SB = np.zeros((n_features, n_features))\n        for c in class_labels:\n            X_c = X[y == c]\n            mean_c = np.mean(X_c, axis=0)\n            \n            SW += (X_c - mean_c).T.dot((X_c - mean_c))                            # (4, n_c) * (n_c, 4) = (4,4) -> transpose\n            n_c = X_c.shape[0]                                                    # (4, 1) * (1, 4) = (4,4) -> reshape\n            mean_diff = (mean_c - mean_overall).reshape(n_features, 1)\n            SB += n_c * (mean_diff).dot(mean_diff.T)\n\n        \n        A = np.linalg.inv(SW).dot(SB)                                      # Determine SW^-1 * SB\n                                                                           # Get eigenvalues and eigenvectors of SW^-1 * SB\n        eigenvalues, eigenvectors = np.linalg.eig(A)\n                                                            # eigenvector v = [:,i] column vector, transpose for easier cal.\n        \n        eigenvectors = eigenvectors.T                                      # sort eigenvalues high to low\n        idxs = np.argsort(abs(eigenvalues))[::-1]\n        eigenvalues = eigenvalues[idxs]\n        eigenvectors = eigenvectors[idxs]\n        \n        self.linear_discriminants = eigenvectors[0 : self.n_components]   # store first n eigenvectors\n\n    def transform(self, X):\n        return np.dot(X, self.linear_discriminants.T)                     # project data\n`.trim();\n\nconst testings = `\nif __name__ == \"__main__\":\n    # Imports\n    import matplotlib.pyplot as plt\n    from sklearn import datasets\n\n    data = datasets.load_iris()\n    X, y = data.data, data.target\n\n    # Project the data onto the 2 primary linear discriminants\n    lda = LDA(2)\n    lda.fit(X, y)\n    X_projected = lda.transform(X)\n\n    print(\"Shape of X:\", X.shape)\n    print(\"Shape of transformed X:\", X_projected.shape)\n\n    x1, x2 = X_projected[:, 0], X_projected[:, 1]\n\n    plt.scatter(\n        x1, x2, c=y, edgecolor=\"none\", alpha=0.8, cmap=plt.cm.get_cmap(\"viridis\", 3)\n    )\n\n    plt.xlabel(\"Linear Discriminant 1\")\n    plt.ylabel(\"Linear Discriminant 2\")\n    plt.colorbar()\n    plt.show()\n`.trim();\n\n// const stack = ``.trim();\n\n// const stack = ``.trim();\n\n\nclass LdaPy extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Linear Discriminant Analysis</h3>\n              It is a linear model for classification and dimensionality reduction. Most commonly used for feature extraction in pattern classification problems.\n              <br />\n              <br />\n              <b>Why LDA:</b>\n              <ul>\n                <li>Logistic Regression perform well for binary classification but falls short in the case of multiple classification problems\n                  with well-separated classes. While LDA handles these.</li>\n                <li>LDA also used in data preprocessing to reduce the number of features just as PCA which\n                  reduces the computing cost significantly.</li>\n                <li>LDA is also used in face detection algorithms. In Fisherfaces LDA is used to extract useful data\n                  from different faces. Coupled with eigenfaces it produces effective results.</li>\n              </ul>\n              <br />\n\n              <b>Shortcomings:</b>\n              <ul>\n                <li>Linear decision boundaries may not effectively separate non-linearly separable classes. More\n                  flexible boundaries are desired.</li>\n                <li>In cases where the number of observations exceeds the number of features, LDA might not perform\n                  as desired. This is called Small Sample Size (SSS) problem. Regularization is required.</li>\n              </ul>\n              <br />\n\n              <b>Assumptions:</b>\n              LDA makes some assumptions about the data:\n              <br />\n              <ul>\n                <li>Assumes the data to be distributed normally/ Gaussian distribution of data points i.e. each\n                  feature must make a bell-shaped curve when plotted. </li>\n                <li>Each of the classes has identical covariance matrices.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={cluster}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Testing</b>\n              <div style={titles}>\n                <PrismCode\n                  code={testings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              {/* <br />\n\n              <h3></h3>\n              <div style={titles}>\n                <PrismCode\n                  code={stack}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3></h3>\n              <div style={titles}>\n                <PrismCode\n                  code={stack}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div> */}\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(LdaPy));\n"]},"metadata":{},"sourceType":"module"}