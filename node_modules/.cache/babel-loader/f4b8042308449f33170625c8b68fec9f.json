{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var linearsea=\"\\nfunction linearSearch(value, list) {\\n  let found = false;\\n  let position = -1;\\n  let index = 0;\\n\\n  while(!found && index < list.length) {\\n      if(list[index] == value) {\\n          found = true;\\n          position = index;\\n      } else {\\n          index += 1;\\n      }\\n  }\\n  return console.log(position);\\n}\\n\\nlinearSearch(3,[3,4,5,1,2,3,4,5])\".trim();var binarySear=\"\\nfunction binarySearch(value, list) {\\n  let first = 0;                                                                            //left endpoint.\\n  let last = list.length - 1;                                                               //right endpoint.\\n  let position = -1;\\n  let found = false;\\n  let middle;\\n\\n  while (found === false && first <= last) {\\n      middle = Math.floor((first + last)/2);\\n      if (list[middle] == value) {\\n          found = true;\\n          position = middle;\\n      } else if (list[middle] > value) {                                                    //if in lower half.\\n          last = middle - 1;\\n      } else {                                                                              //in in upper half.\\n          first = middle + 1;\\n      }\\n  }\\n  return console.log(position);\\n}\\n\\nbinarySearch(5,[4,5,1,2,3,4,5])\".trim();var Search=/*#__PURE__*/function(_Component){_inherits(Search,_Component);function Search(){_classCallCheck(this,Search);return _possibleConstructorReturn(this,_getPrototypeOf(Search).apply(this,arguments));}_createClass(Search,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Linear Search\"),React.createElement(\"i\",null,\"Linear Search is fine when we have a small number of elements. But when we are searching large lists that have thousands/ millions of elements, we need to use binary search.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:linearsea,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Binary Search\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:binarySear,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return Search;}(Component);export default withStyles(styles)(Search);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/searchAlgo.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","linearsea","trim","binarySear","Search","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,0BAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CAGA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,eAAe,CAAE,SAAnB,CAA8BC,OAAO,CAAE,KAAvC,CAA8CC,QAAQ,CAAE,MAAxD,CAAf,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,KAAK,CAAE,CACLC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH,CAELN,OAAO,CAAEG,KAAK,CAACG,OAAN,CAAc,CAAd,CAFJ,CADgB,CAKvBC,QAAQ,CAAE,CACRF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA,CALa,CAQvBE,SAAS,CAAE,CACTC,SAAS,CAAE,QADF,CARY,CAAL,EAApB,CAcA,GAAMC,CAAAA,SAAS,CAAG,yWAiBiBC,IAjBjB,EAAlB,CAmBA,GAAMC,CAAAA,UAAU,CAAG,82BAsBcD,IAtBd,EAAnB,C,GAyBME,CAAAA,M,sRACgB,CAClBC,UAAU,CAAC,iBAAMvB,CAAAA,KAAK,CAACwB,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAACZ,KAA1B,EACE,8BAAI,oBAAC,OAAD,MAAJ,CADF,CADF,CADF,CAME,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEY,OAAO,CAACZ,KAA1B,EACE,oBAAC,IAAD,MACE,8CADF,CAEE,6MAFF,CAIE,2BAAK,KAAK,CAAEN,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEY,SADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAJF,CAWE,8BAXF,CAYE,8BAZF,CAaE,8CAbF,CAcE,2BAAK,KAAK,CAAEZ,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEc,UADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAdF,CADF,CADF,CANF,CADF,CAmCD,C,oBAzCkBtB,S,EA4CrB,cAAgBI,CAAAA,UAAU,CAACQ,MAAD,CAAV,CAAmBW,MAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst linearsea = `\nfunction linearSearch(value, list) {\n  let found = false;\n  let position = -1;\n  let index = 0;\n\n  while(!found && index < list.length) {\n      if(list[index] == value) {\n          found = true;\n          position = index;\n      } else {\n          index += 1;\n      }\n  }\n  return console.log(position);\n}\n\nlinearSearch(3,[3,4,5,1,2,3,4,5])`.trim()\n\nconst binarySear = `\nfunction binarySearch(value, list) {\n  let first = 0;                                                                            //left endpoint.\n  let last = list.length - 1;                                                               //right endpoint.\n  let position = -1;\n  let found = false;\n  let middle;\n\n  while (found === false && first <= last) {\n      middle = Math.floor((first + last)/2);\n      if (list[middle] == value) {\n          found = true;\n          position = middle;\n      } else if (list[middle] > value) {                                                    //if in lower half.\n          last = middle - 1;\n      } else {                                                                              //in in upper half.\n          first = middle + 1;\n      }\n  }\n  return console.log(position);\n}\n\nbinarySearch(5,[4,5,1,2,3,4,5])`.trim()\n\n\nclass Search extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Linear Search</h3>\n              <i>Linear Search is fine when we have a small number of elements. But when we are\n                searching large lists that have thousands/ millions of elements, we need to use binary search.</i>\n              <div style={titles}>\n                <PrismCode\n                  code={linearsea}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>Binary Search</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={binarySear}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Search));\n"]},"metadata":{},"sourceType":"module"}