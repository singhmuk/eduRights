{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';import Stcksval from'../../../assets/stcks.png';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var redesign={height:200,width:500};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var strArray=\"\\n    var strArray = \\\"StackOverflow\\\".split(\\\"\\\");\\n    console.log(strArray.join(\\\"\\\"));\\n\".trim();var Sort=\"\\nlet i, j, arr=[0,9,8,7,6];\\nvar max=0;\\n\\nfor(i=0; i<arr.length; i++){\\n  for(j=i; j<arr.length; j++){\\n    if(arr[i]>arr[j]){\\n      var temp=arr[i];\\n      arr[i]=arr[j];\\n      arr[j]=temp;\\n    }\\n  }\\n}\\n\\nconsole.log(arr);\\n\\n\\n//Greatest Product Of 3\\nmax = arr[arr.length-1] * arr[arr.length-2] * arr[arr.length-3]\\nconsole.log(max);\\n\\n\\n//optimsed\\nconst arr = [0, 9, 8, 7, 6];\\narr.sort((a, b) => a - b);\\n\\nconsole.log(arr);\\n\".trim();var duplicates=\"\\nfunction removeDup(){\\n  const arr = [1,2,3,4,3,0,9,0,1];\\n  const result=[];\\n  \\n  for(let i=0; i<arr.length;i++){\\n      let count=0;\\n     // for(let j=0;j<result.length;j++){\\n        for(let j=0;j<arr.length;j++){                                     //Remove Duplicates\\n       // if(arr[i]==result[j]) count +=1;                                 //Unique Character\\n          if(arr[i]==arr[j]) count +=1;\\n      }\\n      if(count==1){                                                      //RD\\n   // if(count==0){                                                      //UC\\n          result.push(arr[i]);\\n      }  \\n  }\\n  \\n  console.log(result)\\n}\\n\\nremoveDup();\\n\".trim();var compare_array=\"\\nfunction compare(){\\n  const arr=[1,2,3,4,5,6];\\n  const arr2=[5,6,7,8,9,0];\\n  const result=[];\\n  \\n  for(let i=0; i<arr.length; i++){\\n    if(arr2.indexOf(arr[i]) !== -1){\\n      result.push(arr[i]);\\n    }\\n  }\\n  console.log(result)\\n}\\n\\ncompare();\\n\\n\\n//Unique name\\nfunction getUnique(){\\n  var names = [\\\"John\\\", \\\"Peter\\\", \\\"Clark\\\", \\\"Harry\\\", \\\"John\\\", \\\"Alice\\\"];\\n  var newName = [];\\n  \\n  for(i=0; i < names.length; i++){\\n      if(newName.indexOf(names[i]) === -1) {\\n          newName.push(names[i]);\\n      }\\n  }\\n  console.log(newName);\\n}\\n\\ngetUnique();\\n\".trim();var findMedianSortedArrays=\"\\nconst median = () => {\\n  const arr = [1,12,15,26,38];\\n  const arr2 = [4,3,1];\\n  let arrMedian=[];\\n\\n  const result = [...arr, ...arr2].sort((a, b) => a - b);\\n  const half = result.length / 2 | 0;\\n  \\n  if (result.length % 2){\\n      arrMedian=result[half];\\n  }\\n  else{\\n      arrMedian=((result[half] + result[half-1])/2);\\n  }\\n  return console.log(arrMedian);\\n}\\n\\nmedian()\\n\".trim();var plusOne=\"\\nfunction plusOne(){\\n  const arr=[1,2,3];\\n  let result=[], result2=[];\\n\\n  for(let i=0; i<arr.length; i++){\\n    result.push(arr[i]);\\n    result2 = arr[arr.length-1]+1\\n  }\\n\\n  result.pop();\\n  result.push(result2);\\n  console.log(result)\\n}\\n\\nplusOne();\\n\".trim();var arrayCounter=\"\\nfunction fun(arr) {\\n  let maxDepth = 0;\\n  let stack = arr.map(element => ({ nestedArr: element, depth: 1 }));\\n\\n  while (stack.length > 0) {\\n    const { nestedArr, depth } = stack.pop();\\n\\n    if (!Array.isArray(nestedArr)) {\\n      maxDepth = Math.max(maxDepth, depth); // If it's not an array, it's the end of a branch\\n    } else {\\n      for (const element of nestedArr) { //push its elements to the stack with increased depth\\n        stack.push({ nestedArr: element, depth: depth + 1 });\\n      }\\n    }\\n  }\\n\\n  console.log(maxDepth);\\n}\\n\\nfun([[3]]);\\nfun([[[[[[[9]]]]]]]); \\nfun([]); \\n\".trim();var countElements=\"\\nfunction arrCounts(){\\n  const arr = [1,2,3,4,5];\\n  var result = 0;\\n\\n  while(arr[result]!==undefined){\\n    result++;\\n  }\\n  console.log(result);\\n}\\n\\narrCounts();  \\n\\n\\n//\\nlet arr=[0,9,8,7,6,6,0];\\narr=arr.reduce((acc,curr)=>{\\n  return acc[curr]? ++acc[curr]:acc[curr]=1, acc\\n},{})\\n\\nconsole.log(arr)\\n\".trim();var occurings=\"\\nfunction fun() {\\n  const arr = [1, 2, 3, 4, 5, 6, 1, 2, 1, 3];\\n  const hash = {};\\n\\n  for (let i = 0; i < arr.length; i++) {\\n    if (hash[arr[i]]) {\\n      hash[arr[i]] += 1;\\n    } else {\\n      hash[arr[i]] = 1;\\n    }\\n  }\\n\\nconsole.log(hash);\\n}\\n\\nfun();\".trim();var find132pattern=\"\\nfunction pattern123() {\\n  const arr=[1,2,3,4];\\n  const number = 132;\\n  const result=[];\\n\\n  const target = number.toString();\\n  [target]\\n\\n  for(let i=0; i<arr.length; i++){\\n    if(target.indexOf(arr[i]) !== -1){\\n      result.push(arr[i]);\\n    }\\n  }\\n  console.log(result)\\n}\\n\\npattern123();\\n\".trim();var numIdenticalPairs=\"\\nfunction numIdenticalPairs(nums) {\\n  let count = 0\\n  \\n  for (let i=0; i<nums.length; i++) {\\n    for (let j=(i+1); j<nums.length; j++) {\\n      if (nums[i] === nums[j]) {\\n        count += 1\\n      }\\n    }\\n  }\\n  return count\\n}\\n\\nconsole.log(numIdenticalPairs([1,2,3,1,1,3]))\\n\".trim();var removeElement=\"\\nfunction fun(){\\n  const arr=[1,2,3,5,4];\\n  const num=5;\\n\\n  const index = arr.indexOf(num);\\n  arr.splice(index,1)\\n  console.log(arr)\\n}\\n\\nfun();\\n\".trim();var shuffle=\"\\nfunction fun(){\\n  const arr = [7,8,9,10];\\n\\n  for(let i=0;i<arr.length;i++){\\n    const j = Math.floor(Math.random() * (i + 1));\\n    let temp = arr[i];\\n    arr[i] = arr[j];\\n    arr[j] = temp;\\n  }\\n  console.log(arr);\\n}\\n\\nfun();\\n\".trim();var searchRange=\"\\nfunction positionEle(){\\n  const arr = [5,7,7,8,8,10], target = 8;\\n  let result=[];\\n  let i;\\n\\n  for(i=0; i<arr.length; i++){\\n    if(arr[i]==target){\\n      result.push(arr.indexOf(target));\\n    }\\n  }\\n  console.log(result);\\n}\\n\\npositionEle();\\n\".trim();var combinationSum=\"\\nfunction combinationSum(){\\n  const arr=[1,2,3,6,4,5];\\n  const target = 7;\\n  let result=[];\\n\\n  for(let i=0; i<arr.length; i++){\\n    for(let j=i; j<arr.length; j++){\\n      if(arr[i]+arr[j]==target){\\n        result.push(arr[i],arr[j])\\n      }\\n    }\\n  }  \\n  console.log(result);\\n}\\n\\ncombinationSum();\\n\".trim();var missing_number=\"\\nfunction missNum() {\\n  let i, arr=[0,1,2,4,5], exactsum=0, result=0;\\n  exactsum = arr.reduce((a, b) => a + b);\\n\\n  for (i=0; i<=arr.length; i++) {\\n    result += i\\n  }\\n  \\n  result -= exactsum;\\n  console.log('Missing Number', result)\\n}\\n\\nmissNum();\\n \".trim();var findMissingRanges=\"\\nconst arr = [1,2,4,8];\\nconst missing = [];\\nvar count = 1;\\n\\nfor (let i=0; i<arr.length; i++) {\\n  if (arr[i] !== count) {\\n    missing.push(count);\\n    i--;\\n  }\\n  count++;\\n}\\n\\nconsole.log(missing);\\n\\n\\n//2\\nfunction findMissingRanges(nums, lower, upper) {\\n  const result = [];\\n  const count = (lo, hi) => hi - lo - 1;\\n\\n  function set(lo, hi){\\n    if (count(lo, hi) === 1) {\\n      result.push('$'{lo + 1}')\\n    } \\n    else if (count(lo, hi) > 1) {\\n      result.push('$'{lo + 1}->'$'{hi - 1}')\\n    }\\n  }\\n  \\n  for (let i = 0; i <= nums.length; i++) {\\n    set(\\n      i === 0 ? lower - 1 : nums[i - 1],\\n      i === nums.length ? upper + 1 : nums[i],\\n    )\\n  }\\n  return result\\n}\\n\\nconsole.log(findMissingRanges([1,2,3,-2,4]))\\n\".trim();var sortname=\"\\nvar objs = [ \\n  { first: 'Mukesh', last: 'Jamf' },\\n  { first: 'Rakesh', last: 'Bodine' },\\n  { first: 'Bicky', last: 'Prentice' }\\n];\\n\\nfunction fun(){\\n  for(let i=0;i<objs.length;i++){\\n    for(let j=i;j<objs.length;j++){\\n      if(objs[i].first>objs[j].first){\\n        let temp=objs[i];\\n        objs[i]=objs[j];\\n        objs[j]=temp;\\n      }\\n    }\\n    console.log(objs[i])\\n  }\\n}\\n\\nfun()\\n\\n//2\\nfunction compare(a, b) {\\n  if (a.first < b.first){\\n    return -1;\\n  }\\n  if (a.first > b.first){\\n    return 1;\\n  }\\n  return 0;\\n}\\n\\nconst obj = objs.sort(compare);\\nconsole.log(obj)\\n\".trim();var concatarr=\"\\nconst arr1 =[{id:1,name:\\\"sai\\\"}, {id:2,name: \\\"King\\\"}];\\nconst arr2 = [{id:1,age:23},{id:2,age:24}];\\n\\nfunction fun(){\\n   const result = arr1[0].name.concat(arr2[1].age);\\n   console.log(result)\\n}\\n\\nfun();\\n\".trim();var permute=\"\\nfunction permute(nums = []){\\n  const result = [];\\n\\n  function aux(list = [], current = []){\\n    if (list.length === 0) {\\n      result.push(current)\\n    }\\n\\n    list.forEach((number, index) => {\\n      aux(list.filter((v, index2) => index2 !== index), [...current, number])\\n    })\\n  }\\n  \\n  aux(nums)\\n  return result\\n}\\n\\nconsole.log(permute([1,2,3]))\\n\".trim();var containsDuplicate=\"\\nfunction containsDuplicate(nums){\\n  const map = {}\\n  \\n  for (num of nums) {\\n    if (map[num]) {\\n      return true\\n    }\\n    map[num] = 1\\n  }\\n  return false\\n}\\n\\nconsole.log(containsDuplicate([1,2,3,1]))\\n\".trim();var summaryRanges=\"\\nfunction summaryRanges(nums) {\\n  let start = null\\n  const result = []\\n\\n  for (let i=0; i<nums.length; i++) {\\n    if (start === null) {\\n      start = nums[i]\\n    }\\n    if (nums[i] === nums[i + 1] - 1) continue;\\n\\n    if (nums[i] === start) {\\n      result.push(nums[i].toString())\\n      start = null\\n    } \\n    else {\\n      result.push('$'{start}->'$'{nums[i]}')\\n      start = null\\n    }\\n  }\\n  \\n  return result\\n}\\n\\nconsole.log(summaryRanges([1,2,3,4,6,7,9]))\\n\".trim();var productExceptSelf=\"\\nfunction fun(){\\n  const arr = [1,2,3,4];\\n  const result = [];\\n\\n  for(let i=0;i<arr.length;i++){\\n    let prod=1;\\n    for(let j=0;j<arr.length;j++){\\n      if(arr[i] !==arr[j]){\\n        prod *=arr[i]\\n      }\\n    }\\n    result.push(prod)\\n  }\\n  console.log(result)\\n}\\n\\nfun()\\n\".trim();var countSmaller=\"\\nfunction fun(){\\n  const arr = [5,2,6,1];\\n  const result = arr.map(() => 0);\\n\\n  for(let i=0;i<arr.length;i++){\\n    for(let j=(i+1);j<arr.length;j++){\\n      if(arr[i]>arr[j]){\\n        result[i] +=1;\\n      }\\n    }\\n  }\\n  console.log(result)\\n}\\n\\nfun()\\n\".trim();var replaceNum=\"\\nfunction fun(){\\n  const arr=[1,2,3,5,4];\\n  const num=5;\\n  const newnum=6;\\n\\n  const index=arr.indexOf(num)\\n  arr.splice(index,1,newnum)\\n\\n  console.log(arr)\\n}\\n\\nfun();\\n\".trim();var occurence=\"\\nfunction fun() {\\n  const arr = [1, 2, 3, 4, 5, 6];\\n  const target = 6;\\n  const hash = {};\\n  const result = [];\\n\\n  for (let i = 0; i < arr.length; i++) {\\n    const num = arr[i];\\n    if (hash[target - num] !== undefined) {\\n      result.push(hash[target - num], num);\\n    }\\n\\n    hash[num] = num;\\n  }\\n\\n  return console.log(result);\\n}\\n\\nfun();\\n\\n\".trim();var flateArr=\"\\n// arr = [10,'h',2,'k',['e','z','y','g'],[44,67,'b','c','a'],[25,100,101,'m','l'],'f',60,55,'x']\\n// output [a,b,c,..., 1,2,3....]\\n\\nconst newArr = [];\\nfor (let i = 0; i < arr.length; i++) {\\n  if (Array.isArray(arr[i])) {\\n    newArr.push(...arr[i]);\\n  } else {\\n    newArr.push(arr[i]);\\n  }\\n}\\n\\nconst result = [];\\nfor (let i = 0; i < newArr.length; i++) {\\n  for (let j = i; j < newArr.length; j++) {\\n    if (newArr[i] > newArr[j]) {\\n      let temp = newArr[i];\\n      newArr[i] = newArr[j];\\n      newArr[j] = temp;\\n    }\\n  }\\n  result.push(newArr[i]);\\n}\\n\\nconsole.log(result);\\n\\n\\n// 2. Separate number and string.\\nconst arr=[\\n  2,   'a', 10,  'b', 'c', 'e',\\n  'f', 'g', 25,  44,  'h', 'k',\\n  'l', 55,  60,  67,  'm', 'x',\\n  'y', 100, 101, 'z'\\n]\\nconst str=[], num=[];\\n\\nfor(let i=0; i<arr.length; i++){\\n    if(typeof arr[i]==='number'){\\n        num.push(arr[i])\\n    }else if(typeof arr[i]==='string'){\\n        str.push(arr[i])\\n    }\\n}\\n\\nconsole.log(num);\\nconsole.log(str);\\n\".trim();var DSLogic2=/*#__PURE__*/function(_Component){_inherits(DSLogic2,_Component);function DSLogic2(){_classCallCheck(this,DSLogic2);return _possibleConstructorReturn(this,_getPrototypeOf(DSLogic2).apply(this,arguments));}_createClass(DSLogic2,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Convert a string to an array\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:strArray,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Time: \"),\"O(n), where n is the length of the string str. This is because the split() method iterates over the string str once, and the join() method iterates over the array strArray once.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Space: \"),\"O(n), where n is the length of the string str. This is because the strArray array can store up to n characters.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"In simple words, the code takes a linear amount of time to run, and it uses a linear amount of space.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Sort\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Sort,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Time: \"),\"O(n^2), where n is the length of the array arr. This is because the for loop iterates over the array arr twice, and the inner for loop iterates over the array arr once.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Space: \"),\"O(1), where n is the length of the array arr. This is because the algorithm only uses the variables i, j, temp, and arr.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"In simple words, the code takes a quadratic amount of time to run, and it uses a constant amount of space.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Remove Duplicates\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:duplicates,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. Contains Duplicate.\"),\"Given an array of integers, find if the array contains any duplicates.\",React.createElement(\"br\",null),\"Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:containsDuplicate,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Time: \"),\"O(n), where n is the length of the array nums. This is because the for loop iterates over the array nums once, and the map[num] lookup takes constant time.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Space: \"),\"O(n), where n is the length of the array nums. This is because the map object can store up to n keys.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"In simple words, the containsDuplicate() function takes a linear amount of time to run, and it uses a linear amount of space.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. Compare Array\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:compare_array,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. Counting Elements.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:countElements,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"b\",null,\"1:\"),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Time: \"),\"O(n), where n is the length of the array arr. This is because the while loop iterates over the array arr once, and the arr[result]!==undefined check takes constant time.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Space: \"),\"O(1), where n is the length of the array arr. This is because the function only uses the variables arr and result.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"In simple words, the arrCounts() function takes a linear amount of time to run, and it uses a constant amount of space.\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"2:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Time: \"),\"O(n), where n is the length of the array arr. This is because the reduce() method iterates over the array arr once, and the ++acc[curr] or acc[curr]=1 operations take constant time.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Space: \"),\"O(n), where n is the length of the array arr. This is because the reduce() method creates a new object to store the results of the reduction.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"In simple words, the code takes a linear amount of time to run, and it uses a linear amount of space.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. Occurence of Elements.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:occurings,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Time: \"),\"O(n), where n is the length of the array arr. This is because the for loop iterates over the array arr once, and the hash[arr[i]] lookup takes constant time.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Space: \"),\"O(n), where n is the length of the array arr. This is because the hash object can store up to n keys.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"In simple words, the function fun() takes a linear amount of time to run, and it uses a linear amount of space.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. Target Elements.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:occurence,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. Flat Arr.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:flateArr,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"7. 132 Pattern.\"),React.createElement(\"b\",null,\"Input: \"),\"nums = [1,2,3,4]\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"false\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Explanation: \"),\"There is no 132 pattern in the sequence.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:find132pattern,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"8. Combination Sum\"),React.createElement(\"b\",null,\"Input: \"),\"candidates = [2,3,6,7], target = 7,\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"A solution set is: \"),\"[ [7],\",React.createElement(\"br\",null),\"[2,2,3]\",React.createElement(\"br\",null),\"]\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:combinationSum,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"9. Remove Element\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:removeElement,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"10. Replace Element\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:replaceNum,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"10. Shuffle the Array.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:shuffle,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"11. Median of Two Sorted Arrays.\"),\"Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Follow up: \"),\"The overall run time complexity should be O(log (m+n)).\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Example 1:\"),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Input: \"),\"nums1 = [1,3], nums2 = [2]\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"2.00000\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Explanation: \"),\"merged array = [1,2,3] and median is 2.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Example 2: \"),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Input: \"),\"nums1 = [1,2], nums2 = [3,4]\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"2.50000\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Explanation: \"),\"merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:findMedianSortedArrays,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"12. Plus One.\"),React.createElement(\"b\",null,\"Input: \"),\"digits = [1,2,3]\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"[1,2,4]\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:plusOne,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"13. Missing Number\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:missing_number,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"14. Missing Ranges.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:findMissingRanges,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"15. Sort name.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:sortname,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"16. Concat 2 array on the basis of id\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:concatarr,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"17. Find First and Last Position of Element in Sorted Array\"),\"Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\",React.createElement(\"br\",null),\"Your algorithm's runtime complexity must be in the order of O(log n).\",React.createElement(\"br\",null),\"If the target is not found in the array, return [-1, -1].\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Example 1:\"),React.createElement(\"b\",null,\"Input: \"),\"nums = [5,7,7,8,8,10], target = 8\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"[3,4]\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:searchRange,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"h3\",null,\"18. Permutations.\"),\"Given a collection of distinct integers, return all possible permutations.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:permute,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"19. Number of Good Pairs.\"),React.createElement(\"b\",null,\"Input: \"),\"nums = [1,2,3,1,1,3] \",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"4 \",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Explanation: \"),\"There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:numIdenticalPairs,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"20. Product of Array Except Self.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:productExceptSelf,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"21. Count of Smaller Numbers After Self.\"),\"You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Input: \"),\"nums = [5,2,6,1]\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"[2,1,1,0]\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Explanation: \"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"To the right of 5 there are 2 smaller elements (2 and 1).\"),React.createElement(\"li\",null,\"To the right of 2 there is only 1 smaller element (1).\"),React.createElement(\"li\",null,\"To the right of 6 there is 1 smaller element (1).\"),React.createElement(\"li\",null,\"To the right of 1 there is 0 smaller element.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:countSmaller,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"22. Array Counter\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:arrayCounter,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"23. Summary Ranges.\"),\"Given a sorted integer array without duplicates, return the summary of its ranges.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:summaryRanges,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return DSLogic2;}(Component);export default withStyles(styles)(DSLogic2);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/arrayAlgo.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","strArray","trim","Sort","duplicates","compare_array","findMedianSortedArrays","plusOne","arrayCounter","countElements","occurings","find132pattern","numIdenticalPairs","removeElement","shuffle","searchRange","combinationSum","missing_number","findMissingRanges","sortname","concatarr","permute","containsDuplicate","summaryRanges","productExceptSelf","countSmaller","replaceNum","occurence","flateArr","DSLogic2","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst strArray = `\n    var strArray = \"StackOverflow\".split(\"\");\n    console.log(strArray.join(\"\"));\n`.trim();\n\nconst Sort = `\nlet i, j, arr=[0,9,8,7,6];\nvar max=0;\n\nfor(i=0; i<arr.length; i++){\n  for(j=i; j<arr.length; j++){\n    if(arr[i]>arr[j]){\n      var temp=arr[i];\n      arr[i]=arr[j];\n      arr[j]=temp;\n    }\n  }\n}\n\nconsole.log(arr);\n\n\n//Greatest Product Of 3\nmax = arr[arr.length-1] * arr[arr.length-2] * arr[arr.length-3]\nconsole.log(max);\n\n\n//optimsed\nconst arr = [0, 9, 8, 7, 6];\narr.sort((a, b) => a - b);\n\nconsole.log(arr);\n`.trim()\n\nconst duplicates = `\nfunction removeDup(){\n  const arr = [1,2,3,4,3,0,9,0,1];\n  const result=[];\n  \n  for(let i=0; i<arr.length;i++){\n      let count=0;\n     // for(let j=0;j<result.length;j++){\n        for(let j=0;j<arr.length;j++){                                     //Remove Duplicates\n       // if(arr[i]==result[j]) count +=1;                                 //Unique Character\n          if(arr[i]==arr[j]) count +=1;\n      }\n      if(count==1){                                                      //RD\n   // if(count==0){                                                      //UC\n          result.push(arr[i]);\n      }  \n  }\n  \n  console.log(result)\n}\n\nremoveDup();\n`.trim()\n\nconst compare_array = `\nfunction compare(){\n  const arr=[1,2,3,4,5,6];\n  const arr2=[5,6,7,8,9,0];\n  const result=[];\n  \n  for(let i=0; i<arr.length; i++){\n    if(arr2.indexOf(arr[i]) !== -1){\n      result.push(arr[i]);\n    }\n  }\n  console.log(result)\n}\n\ncompare();\n\n\n//Unique name\nfunction getUnique(){\n  var names = [\"John\", \"Peter\", \"Clark\", \"Harry\", \"John\", \"Alice\"];\n  var newName = [];\n  \n  for(i=0; i < names.length; i++){\n      if(newName.indexOf(names[i]) === -1) {\n          newName.push(names[i]);\n      }\n  }\n  console.log(newName);\n}\n\ngetUnique();\n`.trim();\n\nconst findMedianSortedArrays = `\nconst median = () => {\n  const arr = [1,12,15,26,38];\n  const arr2 = [4,3,1];\n  let arrMedian=[];\n\n  const result = [...arr, ...arr2].sort((a, b) => a - b);\n  const half = result.length / 2 | 0;\n  \n  if (result.length % 2){\n      arrMedian=result[half];\n  }\n  else{\n      arrMedian=((result[half] + result[half-1])/2);\n  }\n  return console.log(arrMedian);\n}\n\nmedian()\n`.trim();\n\nconst plusOne = `\nfunction plusOne(){\n  const arr=[1,2,3];\n  let result=[], result2=[];\n\n  for(let i=0; i<arr.length; i++){\n    result.push(arr[i]);\n    result2 = arr[arr.length-1]+1\n  }\n\n  result.pop();\n  result.push(result2);\n  console.log(result)\n}\n\nplusOne();\n`.trim();\n\nconst arrayCounter = `\nfunction fun(arr) {\n  let maxDepth = 0;\n  let stack = arr.map(element => ({ nestedArr: element, depth: 1 }));\n\n  while (stack.length > 0) {\n    const { nestedArr, depth } = stack.pop();\n\n    if (!Array.isArray(nestedArr)) {\n      maxDepth = Math.max(maxDepth, depth); // If it's not an array, it's the end of a branch\n    } else {\n      for (const element of nestedArr) { //push its elements to the stack with increased depth\n        stack.push({ nestedArr: element, depth: depth + 1 });\n      }\n    }\n  }\n\n  console.log(maxDepth);\n}\n\nfun([[3]]);\nfun([[[[[[[9]]]]]]]); \nfun([]); \n`.trim()\n\nconst countElements = `\nfunction arrCounts(){\n  const arr = [1,2,3,4,5];\n  var result = 0;\n\n  while(arr[result]!==undefined){\n    result++;\n  }\n  console.log(result);\n}\n\narrCounts();  \n\n\n//\nlet arr=[0,9,8,7,6,6,0];\narr=arr.reduce((acc,curr)=>{\n  return acc[curr]? ++acc[curr]:acc[curr]=1, acc\n},{})\n\nconsole.log(arr)\n`.trim();\n\nconst occurings = `\nfunction fun() {\n  const arr = [1, 2, 3, 4, 5, 6, 1, 2, 1, 3];\n  const hash = {};\n\n  for (let i = 0; i < arr.length; i++) {\n    if (hash[arr[i]]) {\n      hash[arr[i]] += 1;\n    } else {\n      hash[arr[i]] = 1;\n    }\n  }\n\nconsole.log(hash);\n}\n\nfun();`.trim();\n\nconst find132pattern = `\nfunction pattern123() {\n  const arr=[1,2,3,4];\n  const number = 132;\n  const result=[];\n\n  const target = number.toString();\n  [target]\n\n  for(let i=0; i<arr.length; i++){\n    if(target.indexOf(arr[i]) !== -1){\n      result.push(arr[i]);\n    }\n  }\n  console.log(result)\n}\n\npattern123();\n`.trim();\n\nconst numIdenticalPairs = `\nfunction numIdenticalPairs(nums) {\n  let count = 0\n  \n  for (let i=0; i<nums.length; i++) {\n    for (let j=(i+1); j<nums.length; j++) {\n      if (nums[i] === nums[j]) {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\nconsole.log(numIdenticalPairs([1,2,3,1,1,3]))\n`.trim();\n\nconst removeElement = `\nfunction fun(){\n  const arr=[1,2,3,5,4];\n  const num=5;\n\n  const index = arr.indexOf(num);\n  arr.splice(index,1)\n  console.log(arr)\n}\n\nfun();\n`.trim();\n\nconst shuffle = `\nfunction fun(){\n  const arr = [7,8,9,10];\n\n  for(let i=0;i<arr.length;i++){\n    const j = Math.floor(Math.random() * (i + 1));\n    let temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  }\n  console.log(arr);\n}\n\nfun();\n`.trim();\n\nconst searchRange = `\nfunction positionEle(){\n  const arr = [5,7,7,8,8,10], target = 8;\n  let result=[];\n  let i;\n\n  for(i=0; i<arr.length; i++){\n    if(arr[i]==target){\n      result.push(arr.indexOf(target));\n    }\n  }\n  console.log(result);\n}\n\npositionEle();\n`.trim();\n\nconst combinationSum = `\nfunction combinationSum(){\n  const arr=[1,2,3,6,4,5];\n  const target = 7;\n  let result=[];\n\n  for(let i=0; i<arr.length; i++){\n    for(let j=i; j<arr.length; j++){\n      if(arr[i]+arr[j]==target){\n        result.push(arr[i],arr[j])\n      }\n    }\n  }  \n  console.log(result);\n}\n\ncombinationSum();\n`.trim();\n\nconst missing_number = `\nfunction missNum() {\n  let i, arr=[0,1,2,4,5], exactsum=0, result=0;\n  exactsum = arr.reduce((a, b) => a + b);\n\n  for (i=0; i<=arr.length; i++) {\n    result += i\n  }\n  \n  result -= exactsum;\n  console.log('Missing Number', result)\n}\n\nmissNum();\n `.trim()\n\nconst findMissingRanges = `\nconst arr = [1,2,4,8];\nconst missing = [];\nvar count = 1;\n\nfor (let i=0; i<arr.length; i++) {\n  if (arr[i] !== count) {\n    missing.push(count);\n    i--;\n  }\n  count++;\n}\n\nconsole.log(missing);\n\n\n//2\nfunction findMissingRanges(nums, lower, upper) {\n  const result = [];\n  const count = (lo, hi) => hi - lo - 1;\n\n  function set(lo, hi){\n    if (count(lo, hi) === 1) {\n      result.push('$'{lo + 1}')\n    } \n    else if (count(lo, hi) > 1) {\n      result.push('$'{lo + 1}->'$'{hi - 1}')\n    }\n  }\n  \n  for (let i = 0; i <= nums.length; i++) {\n    set(\n      i === 0 ? lower - 1 : nums[i - 1],\n      i === nums.length ? upper + 1 : nums[i],\n    )\n  }\n  return result\n}\n\nconsole.log(findMissingRanges([1,2,3,-2,4]))\n`.trim();\n\nconst sortname = `\nvar objs = [ \n  { first: 'Mukesh', last: 'Jamf' },\n  { first: 'Rakesh', last: 'Bodine' },\n  { first: 'Bicky', last: 'Prentice' }\n];\n\nfunction fun(){\n  for(let i=0;i<objs.length;i++){\n    for(let j=i;j<objs.length;j++){\n      if(objs[i].first>objs[j].first){\n        let temp=objs[i];\n        objs[i]=objs[j];\n        objs[j]=temp;\n      }\n    }\n    console.log(objs[i])\n  }\n}\n\nfun()\n\n//2\nfunction compare(a, b) {\n  if (a.first < b.first){\n    return -1;\n  }\n  if (a.first > b.first){\n    return 1;\n  }\n  return 0;\n}\n\nconst obj = objs.sort(compare);\nconsole.log(obj)\n`.trim();\n\nconst concatarr = `\nconst arr1 =[{id:1,name:\"sai\"}, {id:2,name: \"King\"}];\nconst arr2 = [{id:1,age:23},{id:2,age:24}];\n\nfunction fun(){\n   const result = arr1[0].name.concat(arr2[1].age);\n   console.log(result)\n}\n\nfun();\n`.trim();\n\nconst permute = `\nfunction permute(nums = []){\n  const result = [];\n\n  function aux(list = [], current = []){\n    if (list.length === 0) {\n      result.push(current)\n    }\n\n    list.forEach((number, index) => {\n      aux(list.filter((v, index2) => index2 !== index), [...current, number])\n    })\n  }\n  \n  aux(nums)\n  return result\n}\n\nconsole.log(permute([1,2,3]))\n`.trim();\n\nconst containsDuplicate = `\nfunction containsDuplicate(nums){\n  const map = {}\n  \n  for (num of nums) {\n    if (map[num]) {\n      return true\n    }\n    map[num] = 1\n  }\n  return false\n}\n\nconsole.log(containsDuplicate([1,2,3,1]))\n`.trim();\n\nconst summaryRanges = `\nfunction summaryRanges(nums) {\n  let start = null\n  const result = []\n\n  for (let i=0; i<nums.length; i++) {\n    if (start === null) {\n      start = nums[i]\n    }\n    if (nums[i] === nums[i + 1] - 1) continue;\n\n    if (nums[i] === start) {\n      result.push(nums[i].toString())\n      start = null\n    } \n    else {\n      result.push('$'{start}->'$'{nums[i]}')\n      start = null\n    }\n  }\n  \n  return result\n}\n\nconsole.log(summaryRanges([1,2,3,4,6,7,9]))\n`.trim();\n\nconst productExceptSelf = `\nfunction fun(){\n  const arr = [1,2,3,4];\n  const result = [];\n\n  for(let i=0;i<arr.length;i++){\n    let prod=1;\n    for(let j=0;j<arr.length;j++){\n      if(arr[i] !==arr[j]){\n        prod *=arr[i]\n      }\n    }\n    result.push(prod)\n  }\n  console.log(result)\n}\n\nfun()\n`.trim();\n\nconst countSmaller = `\nfunction fun(){\n  const arr = [5,2,6,1];\n  const result = arr.map(() => 0);\n\n  for(let i=0;i<arr.length;i++){\n    for(let j=(i+1);j<arr.length;j++){\n      if(arr[i]>arr[j]){\n        result[i] +=1;\n      }\n    }\n  }\n  console.log(result)\n}\n\nfun()\n`.trim();\n\nconst replaceNum = `\nfunction fun(){\n  const arr=[1,2,3,5,4];\n  const num=5;\n  const newnum=6;\n\n  const index=arr.indexOf(num)\n  arr.splice(index,1,newnum)\n\n  console.log(arr)\n}\n\nfun();\n`.trim();\n\nconst occurence = `\nfunction fun() {\n  const arr = [1, 2, 3, 4, 5, 6];\n  const target = 6;\n  const hash = {};\n  const result = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (hash[target - num] !== undefined) {\n      result.push(hash[target - num], num);\n    }\n\n    hash[num] = num;\n  }\n\n  return console.log(result);\n}\n\nfun();\n\n`.trim();\n\nconst flateArr = `\n// arr = [10,'h',2,'k',['e','z','y','g'],[44,67,'b','c','a'],[25,100,101,'m','l'],'f',60,55,'x']\n// output [a,b,c,..., 1,2,3....]\n\nconst newArr = [];\nfor (let i = 0; i < arr.length; i++) {\n  if (Array.isArray(arr[i])) {\n    newArr.push(...arr[i]);\n  } else {\n    newArr.push(arr[i]);\n  }\n}\n\nconst result = [];\nfor (let i = 0; i < newArr.length; i++) {\n  for (let j = i; j < newArr.length; j++) {\n    if (newArr[i] > newArr[j]) {\n      let temp = newArr[i];\n      newArr[i] = newArr[j];\n      newArr[j] = temp;\n    }\n  }\n  result.push(newArr[i]);\n}\n\nconsole.log(result);\n\n\n// 2. Separate number and string.\nconst arr=[\n  2,   'a', 10,  'b', 'c', 'e',\n  'f', 'g', 25,  44,  'h', 'k',\n  'l', 55,  60,  67,  'm', 'x',\n  'y', 100, 101, 'z'\n]\nconst str=[], num=[];\n\nfor(let i=0; i<arr.length; i++){\n    if(typeof arr[i]==='number'){\n        num.push(arr[i])\n    }else if(typeof arr[i]==='string'){\n        str.push(arr[i])\n    }\n}\n\nconsole.log(num);\nconsole.log(str);\n`.trim();\n\nclass DSLogic2 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n            <h3>1. Convert a string to an array</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={strArray}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <ul>\n                <li><b>Time: </b>O(n), where n is the length of the string str. This is because the split() method iterates over the string str once, and the join() method iterates over the array strArray once.</li><br/>\n                <li><b>Space: </b>O(n), where n is the length of the string str. This is because the strArray array can store up to n characters.</li><br/>\n                <li>In simple words, the code takes a linear amount of time to run, and it uses a linear amount of space.</li>\n              </ul>\n              <br />\n\n              <h3>2. Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Sort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <ul>\n                <li><b>Time: </b>O(n^2), where n is the length of the array arr. This is because the for loop iterates over the array arr twice, and the inner for loop iterates over the array arr once.</li><br/>\n                <li><b>Space: </b>O(1), where n is the length of the array arr. This is because the algorithm only uses the variables i, j, temp, and arr.</li><br/>\n                <li>In simple words, the code takes a quadratic amount of time to run, and it uses a constant amount of space.</li>\n              </ul>\n              <br />\n\n              <h3>3. Remove Duplicates</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={duplicates}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Contains Duplicate.</h3>\n              Given an array of integers, find if the array contains any duplicates.\n              <br/>\n              Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.\n              <div style={titles}>\n                <PrismCode\n                  code={containsDuplicate}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <ul>\n                <li><b>Time: </b>O(n), where n is the length of the array nums. This is because the for loop iterates over the array nums once, and the map[num] lookup takes constant time.</li><br/>\n                <li><b>Space: </b>O(n), where n is the length of the array nums. This is because the map object can store up to n keys.</li><br/>\n                <li>In simple words, the containsDuplicate() function takes a linear amount of time to run, and it uses a linear amount of space.</li>\n              </ul>\n              <br/>\n\n              <h3>5. Compare Array</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={compare_array}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Counting Elements.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={countElements}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <b>1:</b><br/>\n              <ul>\n                <li><b>Time: </b>O(n), where n is the length of the array arr. This is because the while loop iterates over the array arr once, and the arr[result]!==undefined check takes constant time.</li><br/>\n                <li><b>Space: </b>O(1), where n is the length of the array arr. This is because the function only uses the variables arr and result.</li><br/>\n                <li>In simple words, the arrCounts() function takes a linear amount of time to run, and it uses a constant amount of space.</li>\n              </ul>\n              <br/>\n              <b>2:</b>\n              <ul>\n                <li><b>Time: </b>O(n), where n is the length of the array arr. This is because the reduce() method iterates over the array arr once, and the ++acc[curr] or acc[curr]=1 operations take constant time.</li><br/>\n                <li><b>Space: </b>O(n), where n is the length of the array arr. This is because the reduce() method creates a new object to store the results of the reduction.</li><br/>\n                <li>In simple words, the code takes a linear amount of time to run, and it uses a linear amount of space.</li>\n              </ul>\n              <br/>\n\n              <h3>6. Occurence of Elements.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={occurings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <ul>\n                <li><b>Time: </b>O(n), where n is the length of the array arr. This is because the for loop iterates over the array arr once, and the hash[arr[i]] lookup takes constant time.</li><br/>\n                <li><b>Space: </b>O(n), where n is the length of the array arr. This is because the hash object can store up to n keys.</li><br/>\n                <li>In simple words, the function fun() takes a linear amount of time to run, and it uses a linear amount of space.</li>\n              </ul>\n              <br/>\n\n              <h3>6. Target Elements.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={occurence}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>6. Flat Arr.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={flateArr}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>7. 132 Pattern.</h3>\n              <b>Input: </b>nums = [1,2,3,4]<br/>\n              <b>Output: </b>false<br/>\n              <b>Explanation: </b>There is no 132 pattern in the sequence.\n              <div style={titles}>\n                <PrismCode\n                  code={find132pattern}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>8. Combination Sum</h3>\n              <b>Input: </b>candidates = [2,3,6,7], target = 7,<br/>\n              <b>A solution set is: </b>\n              [\n                [7],<br/>\n                [2,2,3]<br/>\n              ]\n              <div style={titles}>\n                <PrismCode\n                  code={combinationSum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>9. Remove Element</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={removeElement}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>10. Replace Element</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={replaceNum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>10. Shuffle the Array.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={shuffle}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>11. Median of Two Sorted Arrays.</h3>\n              Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\n              <br/>\n              <b>Follow up: </b>The overall run time complexity should be O(log (m+n)).\n              <br/>\n\n              <b>Example 1:</b>\n              <br/>\n              <b>Input: </b>nums1 = [1,3], nums2 = [2]<br/>\n              <b>Output: </b>2.00000<br/>\n              <b>Explanation: </b>merged array = [1,2,3] and median is 2.<br/><br/>\n              <b>Example 2: </b><br/>\n\n              <b>Input: </b>nums1 = [1,2], nums2 = [3,4]<br/>\n              <b>Output: </b>2.50000<br/>\n              <b>Explanation: </b>merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n              <div style={titles}>\n                <PrismCode\n                  code={findMedianSortedArrays}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>12. Plus One.</h3>\n              <b>Input: </b>digits = [1,2,3]<br/>\n              <b>Output: </b>[1,2,4]\n              <div style={titles}>\n                <PrismCode\n                  code={plusOne}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>13. Missing Number</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={missing_number}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>14. Missing Ranges.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={findMissingRanges}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>15. Sort name.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={sortname}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>16. Concat 2 array on the basis of id</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={concatarr}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>17. Find First and Last Position of Element in Sorted Array</h3>\n              Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\n              <br/>\n              Your algorithm's runtime complexity must be in the order of O(log n).<br/>\n\n              If the target is not found in the array, return [-1, -1].<br/>\n\n              <b>Example 1:</b>\n              <b>Input: </b>nums = [5,7,7,8,8,10], target = 8<br/>\n              <b>Output: </b>[3,4]<br/><br/>\n              <div style={titles}>\n                <PrismCode\n                  code={searchRange}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <h3>18. Permutations.</h3>\n              Given a collection of distinct integers, return all possible permutations.\n              <div style={titles}>\n                <PrismCode\n                  code={permute}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>19. Number of Good Pairs.</h3>\n              <b>Input: </b>nums = [1,2,3,1,1,3] <br/>\n              <b>Output: </b>4 <br/>\n              <b>Explanation: </b>There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.\n              <div style={titles}>\n                <PrismCode\n                  code={numIdenticalPairs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>20. Product of Array Except Self.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={productExceptSelf}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>21. Count of Smaller Numbers After Self.</h3>\n              You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].\n              <br/>\n              <b>Input: </b>nums = [5,2,6,1]<br/>\n              <b>Output: </b>[2,1,1,0]<br/>\n              <b>Explanation: </b>\n              <ul>\n                <li>To the right of 5 there are 2 smaller elements (2 and 1).</li>\n                <li>To the right of 2 there is only 1 smaller element (1).</li>\n                <li>To the right of 6 there is 1 smaller element (1).</li>\n                <li>To the right of 1 there is 0 smaller element.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={countSmaller}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>22. Array Counter</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={arrayCounter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>23. Summary Ranges.</h3>\n              Given a sorted integer array without duplicates, return the summary of its ranges.\n              <div style={titles}>\n                <PrismCode\n                  code={summaryRanges}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic2));\n"]},"metadata":{},"sourceType":"module"}