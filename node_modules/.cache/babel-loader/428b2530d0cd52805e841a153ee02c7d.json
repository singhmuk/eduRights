{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var app=\"\\n//app.js\\nvar app = angular.module('myApp', []);\\nvar root = 'http://jsonplaceholder.typicode.com/users';\\n\\napp.controller('myCtrl', function($scope, $http) {\\n$http({\\n  method:'get',\\n  url:'http://jsonplaceholder.typicode.com/users'\\n})\\n.then(res => {\\n  $scope.myData = res.data;\\n})\\n})\\n\\n\\n//index.html\\n<body ng-controller=\\\"myCtrl\\\">\\n    <div> \\n        <li ng-repeat=\\\"x in myData | filter : 'L'\\\">\\n        {{ x.name }}\\n        <button ng-click=\\\"getResult(x)\\\">Click</button>\\n     </li>\\n     </div>\\n</body>\".trim();var custom=\"\\nvar app = angular.module('myApp', []);\\n  app.filter('myFormat', myFormat);\\n  \\n  function myFormat() {\\n      return function(x) {\\n          var i, c, txt = \\\"\\\";\\n          for (i = 0; i < x.length; i++) {\\n              c = x[i];\\n              if (i % 2 == 0) {\\n                  c = c.toUpperCase();\\n              }\\n              txt += c;\\n          }\\n          return txt;\\n      };\\n  };\\n\\n\\n  app.controller('namesCtrl', namesCtrl);\\n  function namesCtrl($scope) {\\n      $scope.names = [\\n          'Jani',\\n          'Carl',\\n          'Margareth',\\n          'Hege',\\n          'Joe',\\n          'Gustav',\\n          'Birgit',\\n          'Mary',\\n          'Kai'\\n          ];\\n  };\".trim();var customIndex=\"\\n<body  ng-controller=\\\"namesCtrl\\\">\\n    <li ng-repeat=\\\"x in names\\\">\\n        {{x | myFormat}}\\n    </li>\\n</body>\\n \".trim();var Fiters=/*#__PURE__*/function(_Component){_inherits(Fiters,_Component);function Fiters(){_classCallCheck(this,Fiters);return _possibleConstructorReturn(this,_getPrototypeOf(Fiters).apply(this,arguments));}_createClass(Fiters,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Filter\"),React.createElement(\"b\",null,\"Filters can be added in AngularJS to format data:\"),React.createElement(\"br\",null),React.createElement(\"br\",null),\"currency Format a number to a currency format.\",React.createElement(\"br\",null),\"date Format a date to a specified format.\",React.createElement(\"br\",null),\"filter Select a subset of items from an array.\",React.createElement(\"br\",null),\"json Format an object to a JSON string.\",React.createElement(\"br\",null),\"limitTo Limits an array/string, into a specified number of elements/characters.\",React.createElement(\"br\",null),\"lowercase Format a string to lower case.\",React.createElement(\"br\",null),\"number Format a number to a string.\",React.createElement(\"br\",null),\"orderBy Orders an array by an expression.\",React.createElement(\"br\",null),\"uppercase Format a string to upper case.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"Filters can be added to expressions by using the pipe character |, followed by a filter.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"app.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:app,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"custom\"),\"You can make your own filters by registering a new filter factory function with your module.\",React.createElement(\"br\",null),\"The myFormat filter will format every other character to uppercase.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"custom.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:custom,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"customIndex.html\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:customIndex,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return Fiters;}(Component);export default withStyles(styles)(Fiters);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/deepAngularjs/angularlFlters.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","app","trim","custom","customIndex","Fiters","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = {backgroundColor:'#F0F8FF', padding:'1px', fontSize:'16px'}\n\nconst styles = theme => ({\n  paper: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1)\n  },\n  smMargin: {\n      margin: theme.spacing(1)\n  },\n  actionDiv: {\n      textAlign: \"center\"\n  }\n})\n\n\nconst app = `\n//app.js\nvar app = angular.module('myApp', []);\nvar root = 'http://jsonplaceholder.typicode.com/users';\n\napp.controller('myCtrl', function($scope, $http) {\n$http({\n  method:'get',\n  url:'http://jsonplaceholder.typicode.com/users'\n})\n.then(res => {\n  $scope.myData = res.data;\n})\n})\n\n\n//index.html\n<body ng-controller=\"myCtrl\">\n    <div> \n        <li ng-repeat=\"x in myData | filter : 'L'\">\n        {{ x.name }}\n        <button ng-click=\"getResult(x)\">Click</button>\n     </li>\n     </div>\n</body>`.trim()\n\nconst custom = `\nvar app = angular.module('myApp', []);\n  app.filter('myFormat', myFormat);\n  \n  function myFormat() {\n      return function(x) {\n          var i, c, txt = \"\";\n          for (i = 0; i < x.length; i++) {\n              c = x[i];\n              if (i % 2 == 0) {\n                  c = c.toUpperCase();\n              }\n              txt += c;\n          }\n          return txt;\n      };\n  };\n\n\n  app.controller('namesCtrl', namesCtrl);\n  function namesCtrl($scope) {\n      $scope.names = [\n          'Jani',\n          'Carl',\n          'Margareth',\n          'Hege',\n          'Joe',\n          'Gustav',\n          'Birgit',\n          'Mary',\n          'Kai'\n          ];\n  };`.trim()\n\nconst customIndex = `\n<body  ng-controller=\"namesCtrl\">\n    <li ng-repeat=\"x in names\">\n        {{x | myFormat}}\n    </li>\n</body>\n `.trim()\n\n\n\nclass Fiters extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n            <Grid item xs={2}>\n                <Paper className={classes.paper}>\n                    <h4><Sidebar /></h4>\n                </Paper>\n            </Grid>\n<Grid item xs={10}>\n<Paper className={classes.paper}>\n<List>\n      <h3>Filter</h3>\n      <b>Filters can be added in AngularJS to format data:</b>\n<br/>\n<br/>\ncurrency Format a number to a currency format.<br/>\ndate Format a date to a specified format.<br/>\nfilter Select a subset of items from an array.<br/>\njson Format an object to a JSON string.<br/>\nlimitTo Limits an array/string, into a specified number of elements/characters.<br/>\nlowercase Format a string to lower case.<br/>\nnumber Format a number to a string.<br/>\norderBy Orders an array by an expression.<br/>\nuppercase Format a string to upper case.<br/>\n<br/>\nFilters can be added to expressions by using the pipe character |, followed by a filter.<br/>\n<br/>\n      <b>app.js</b>\n      <div style={titles}>\n      <PrismCode\n        code={app}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n       <br/>\n      <h3>custom</h3>\n      You can make your own filters by registering a new filter factory function with your module.\n<br/>\nThe myFormat filter will format every other character to uppercase.\n<br/>\n<br/>\n        <b>custom.js</b>\n      <div style={titles}>\n      <PrismCode\n        code={custom}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n        <br/>\n        <b>customIndex.html</b>\n      <div style={titles}>\n      <PrismCode\n        code={customIndex}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      </List>\n      </Paper>\n      </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Fiters));\n"]},"metadata":{},"sourceType":"module"}