{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic5.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst rob = `\nconst rob = (nums = []) => {\n  const memo = {}\n  const aux = (index = 0) => {\n    if (memo[index] !== undefined) {\n      return memo[index]\n    }\n    if (index >= nums.length) {\n      return 0\n    }\n    memo[index] = Math.max(\n      aux(index + 2) + nums[index],\n      aux(index + 1),\n    )\n    return memo[index]\n  }\n  return aux()\n}\n\n\nconsole.log(rob([2,7,9,3,1]))`.trim();\nconst maxArea = `\nconst maxArea = (height = []) => {\n  let max = 0\n  let left = 0\n  let right = height.length - 1\n  while (left < right) {\n    max = Math.max(max, Math.min(height[left], height[right]) * (right - left))\n    if (height[left] <= height[right]) {\n      left += 1\n    } else {\n      right -= 1\n    }\n  }\n  return max\n}\n\nconsole.log(maxArea([1,8,6,2,5,4,8,3,7]))`.trim();\nconst countElements = `\nvar countElements = function(arr) {\n  const set = new Set()\n  \n  arr.forEach(num => set.add(num))\n  return arr.reduce((acc, num) => {\n      if(set.has(num+1)){\n          return acc + 1\n      }\n      return acc\n  },0)\n};\n\nconsole.log(countElements([1,2,3,0]))`.trim();\nconst find132pattern = `\nconst find132pattern = function (nums) {\n  let max = -Infinity\n  const stack = []\n  for (let i = nums.length - 1; i >= 0; i--) {\n    while (nums[i] > stack[stack.length - 1]) {\n      max = stack.pop()\n    }\n    if (nums[i] < max) {\n      return true\n    }\n    stack.push(nums[i])\n  }\n  return false\n}\n\nconsole.log(find132pattern([3,1,4,2]))`.trim();\nconst numIdenticalPairs = `\nconst numIdenticalPairs = function (nums) {\n  let count = 0\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[i] === nums[j]) {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\nconsole.log(numIdenticalPairs([1,2,3,1,1,3]))`.trim();\nconst graph = ``.trim(); // const stack = ``.trim();\n// const stack = ``.trim();\n// const stack = ``.trim();\n\nclass DSLogic5 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"1. House Robber.\"), \"You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), \"Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), \"Input: nums = [1,2,3,1]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), \"Output: 4\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), \"Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: rob,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"10. Container With Most Water\"), \"Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Note: \"), \"You may not slant the container and n is at least 2.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), \"Example:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), \"Input: [1,8,6,2,5,4,8,3,7]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), \"Output: 49\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maxArea,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"4. Counting Elements.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: countElements,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"5. 132 Pattern.\"), \"Input: nums = [1,2,3,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }), \"Output: false\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }), \"Explanation: There is no 132 pattern in the sequence.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: find132pattern,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \"6. Number of Good Pairs.\"), \"Input: nums = [1,2,3,1,1,3] \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), \"Output: 4 \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }), \"Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: numIdenticalPairs,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, \"7. \"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: graph,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: graph,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: graph,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: graph,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(DSLogic5);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic5.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","rob","trim","maxArea","countElements","find132pattern","numIdenticalPairs","graph","DSLogic5","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst rob = `\nconst rob = (nums = []) => {\n  const memo = {}\n  const aux = (index = 0) => {\n    if (memo[index] !== undefined) {\n      return memo[index]\n    }\n    if (index >= nums.length) {\n      return 0\n    }\n    memo[index] = Math.max(\n      aux(index + 2) + nums[index],\n      aux(index + 1),\n    )\n    return memo[index]\n  }\n  return aux()\n}\n\n\nconsole.log(rob([2,7,9,3,1]))`.trim();\n\n\nconst maxArea = `\nconst maxArea = (height = []) => {\n  let max = 0\n  let left = 0\n  let right = height.length - 1\n  while (left < right) {\n    max = Math.max(max, Math.min(height[left], height[right]) * (right - left))\n    if (height[left] <= height[right]) {\n      left += 1\n    } else {\n      right -= 1\n    }\n  }\n  return max\n}\n\nconsole.log(maxArea([1,8,6,2,5,4,8,3,7]))`.trim();\n\nconst countElements = `\nvar countElements = function(arr) {\n  const set = new Set()\n  \n  arr.forEach(num => set.add(num))\n  return arr.reduce((acc, num) => {\n      if(set.has(num+1)){\n          return acc + 1\n      }\n      return acc\n  },0)\n};\n\nconsole.log(countElements([1,2,3,0]))`.trim();\n\nconst find132pattern = `\nconst find132pattern = function (nums) {\n  let max = -Infinity\n  const stack = []\n  for (let i = nums.length - 1; i >= 0; i--) {\n    while (nums[i] > stack[stack.length - 1]) {\n      max = stack.pop()\n    }\n    if (nums[i] < max) {\n      return true\n    }\n    stack.push(nums[i])\n  }\n  return false\n}\n\nconsole.log(find132pattern([3,1,4,2]))`.trim();\n\nconst numIdenticalPairs = `\nconst numIdenticalPairs = function (nums) {\n  let count = 0\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[i] === nums[j]) {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\nconsole.log(numIdenticalPairs([1,2,3,1,1,3]))`.trim();\n\nconst graph = ``.trim();\n\n// const stack = ``.trim();\n\n// const stack = ``.trim();\n\n// const stack = ``.trim();\n\n\nclass DSLogic5 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. House Robber.</h3>\n              You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\n              <br/><br/>\nGiven a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.\n<br/><br/>\nInput: nums = [1,2,3,1]<br/>\nOutput: 4<br/>\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\n             Total amount you can rob = 1 + 3 = 4.\n              <div style={titles}>\n                <PrismCode\n                  code={rob}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>10. Container With Most Water</h3>\n              Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\n              <br/><br/>\n<b>Note: </b>You may not slant the container and n is at least 2.\n<br/><br/>\nExample:<br/>\n\nInput: [1,8,6,2,5,4,8,3,7]<br/>\nOutput: 49\n              <div style={titles}>\n                <PrismCode\n                  code={maxArea}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n            \n\n              \n\n              <h3>4. Counting Elements.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={countElements}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>5. 132 Pattern.</h3>\n              Input: nums = [1,2,3,4]<br/>\nOutput: false<br/>\nExplanation: There is no 132 pattern in the sequence.\n              <div style={titles}>\n                <PrismCode\n                  code={find132pattern}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>6. Number of Good Pairs.</h3>\n              Input: nums = [1,2,3,1,1,3] <br/>\nOutput: 4 <br/>\nExplanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.\n              <div style={titles}>\n                <PrismCode\n                  code={numIdenticalPairs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>7. </h3>\n\n              <div style={titles}>\n                <PrismCode\n                  code={graph}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3></h3>\n\n              <div style={titles}>\n                <PrismCode\n                  code={graph}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3></h3>\n\n              <div style={titles}>\n                <PrismCode\n                  code={graph}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3></h3>\n\n              <div style={titles}>\n                <PrismCode\n                  code={graph}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic5));\n"]},"metadata":{},"sourceType":"module"}