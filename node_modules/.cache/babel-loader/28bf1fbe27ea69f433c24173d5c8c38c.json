{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/pythone/deeppy/pyLogic.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst output = `\nx = ['ab', 'cd']\nprint(len(list(map(list, x))))\n`.trim();\nconst find = `1.\tset([[1,2],[3,4],[4,5]])\n2.\tset([1,2,2,3,4,5])\n3.\t{1,2,3,4}\n4.\tset((1,2,3,4))\n`.trim();\nconst palindrome = `s1 = string\ns = string[::-1]\n\nif(s1 == s):\n    return 'true'\nelse:\n    return 'false'\n\nprint(fun('madam'))\n`.trim();\nconst sum = `\ndef sum(num):\n    if len(num) == 1:\n        return num[0]\n    else:\n        return num[0] + sum(num[1:])\n\nprint(sum([2, 4, 5, 6, 7]))\n`.trim();\nconst random = `import random\n\ndef read_random(fname):\n    lines = open(fname).read().splitlines()\n    return random.choice(lines)\n`.trim();\nconst randomize = `\n#random() have <shuffle(<list>)> which can randomize any input sequence.\n\nimport random\n\nlist = [2, 18, 8, 4]\n\nprint(\"Prior Shuffling - 0\", list)\nrandom.shuffle(list)\n\nprint(\"After Shuffling - 1\", list)\nrandom.shuffle(list)\n\nprint(\"After Shuffling - 2\", list)\n`.trim();\nconst output_2 = `\ndef fast (items= []):\n    items.append (1)\n    return items\n\nprint (fast ())\nprint (fast ())\n`.trim();\nconst blue = `name = input('what is your name? ')\nfavorite_color = input('What is your favorite color')\nprint(name + ' Likes ' + favorite_color)\n`.trim();\nconst For = `\nfor item in ['Python', 'javaScrupt', 'NodeJs']:\n    print(item)\n\nfor item in range(10):\n    print(item)\n\nfor item in range(5, 10):\n    print(item)\n\nfor item in range(5, 10, 2):\n    print(item)\n`.trim();\nconst Nested_loop = `\nfor x in range(4):\n    for y in range(3):\n        print(f'({x}, {y})')\n\n\nnumbers = [5, 2, 5, 2, 2]\nfor x_count in numbers:\n    output = ''\n    for count in range(x_count):\n            output += 'X'\n            print(output)\n`.trim();\nconst matrix = `matrix = [\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n]\n\nfor row in matrix:\n  for item in row:\n      print(item)\n`.trim();\nconst unpacking = `coordinates = (1, 2, 3)\nx, y, z = coordinates\nprint(x)\nprint(y)\n\ncoordinates = [1, 2, 3]\nx, y, z = coordinates\nprint(z)\n`.trim();\nconst words = `\nphone = input(\"Phone: \")\ndigits_mapping = {\n    \"1\": \"One\",\n    \"2\": \"Two\",\n    \"3\": \"Three\",\n    \"4\": \"Four\"\n  }\n  \noutput = \"\"\nfor ch in phone:\n  output += digits_mapping.get(ch, \"!\") + \" \"\nprint(output)\n  `.trim();\nconst EMOJ = `message = input(\">\")\nwords = message.split(' ')\nemojis = {\n    \":)\":\"*\",\n    \":(\":\"%\"\n}\noutput = \"\"\nfor word in words:\n    output += emojis.get(word, word) + \" \"\nprint(output)\n`.trim();\nconst reusable = `def emoji_converter(message):\nwords = message.split(\" \")\nemojis = {\n    \":)\": \"*\",\n    \":(\": \"%\"\n}\noutput = \"\"\nfor word in words:\n    output += emojis.get(word, word) + \" \"\nreturn  output\n\n\nmessage = input(\">\")\nprint(emoji_converter(message))\n`.trim();\nconst random_ = `import random\n\nfor i in range(3):\n    print(random.randint(10, 20))\nprint(random.randint(10, 20))\n\n\nimport random \n\nclass Dice:\n    def roll(self):\n        first = random.randint(1, 6)\n        second = random.randint(1, 6)\n        return first, second\n\ndice = Dice()\nprint(dice.roll())\n`.trim();\nconst spreadsheet = `\nimport openpyxl as xl\n\nwb = xl.load_workbook('transactions.xlsx')\nsheet = wb['Sheet1']\ncell = sheet['a1']\ncell = sheet.cell(1, 1)\nprint(cell.value)\n\nprint(sheet.max_row)\n\nfor row in range(1, sheet.max_row + 1):\n    print(row)\n\nfor row in range(2, sheet.max_row + 1):\n    cell = sheet.cell(row, 3)\n    print(cell.value)\n`.trim();\nconst openpyxl = `import openpyxl as xl\n\nwb = xl.load_workbook('transactions.xlsx')\nsheet = wb['Sheet1']\ncell = sheet['a1']\ncell = sheet.cell(1, 1)\n\nfor row in range(2, sheet.max_row + 1):\n    cell = sheet.cell(row, 3)\n    corrected_price = cell.value * 2\n    corrected_price_cell = sheet.cell(row, 4)\n    corrected_price_cell = corrected_price\n\nwb.save('transactions2.xlsx')\n`.trim();\nconst primeMus = `\ndef nextPrime(n):\n    while True:\n        n+=1\n        for i in range(2,n):\n\n            if(n%i==0):\n                break\n            else:\n                print(n)\n                return n\n\nnextPrime(13)`.trim();\nconst homogeneous = `\nx=(30,4.5,26,3+4j,'abc', True, 5.6,2-1j)\nt1,t2,t3,t4,t5=[], [], [], [], []\n\nfor e in x:\n    if type(e) == int:\n        t1.append(e)\n    elif type(e) == float:\n        t2.append(e)\n    elif type(e) == complex:\n        t3.append(e)\n    elif type(e) == str:\n        t4.append(e)\n    elif type(e) == bool:\n        t5.append(e)\n\nt1=tuple(t1)\nt2=tuple(t2)\nt3=tuple(t3)\nt4=tuple(t4)\nt5=tuple(t5)\n\nprint(t1, t2, t3, t4, t5, sep='nL')\n`.trim();\nconst greatest = `\nprint('Enter number')\nt1 = tuple([int(e) for e in input().split(',')])\nprint('Enter Greatest number', max(t1))`.trim();\nconst sorted = `\nt1=(10,20,30,40)\nt2=(5,9,12,18,22,25)\nt3=[]\ni,j,k=0,0,0\n\nwhile i<len(t1) and j<len(t2):\n    if t1[i]<t2[j]:\n        t3.append(t1[i])\n        i+=1\n        k+=1\n    else:\n        t3.append(t2[j])\n        j+=1\n        k+=1\n        \nif i==len(t1):\n    while j<len(t2):\n        t3.append(t2[j])\n        j+=1\n        k+=1\n        \nelif j==len(t2):\n    while i<len(t1):\n        t3.append(t1[i])\n        i+=1\n        k+=1\n        \nt3=tuple(t3)\nprint(t3)`.trim();\nconst occurrence = `\nl=[eval(x) for x in input(\"Enter list elements\").split(',')]\nelement=eval(input(\"Enter element value\"))\nindex=0\nwhile index<len(l):\n    if l[index]==element:\n        print(index, end='')\n    index+=1`.trim();\nconst sequence = `\ndef sum(n):\n    if n==1:\n        return 1\n    return n**2+sum(n-1)\n\nsum(4)`.trim();\nconst multiple = `\ndef fun():\n    return 1,2,3\n\nx=fun()\nprint(x)`.trim();\nconst ascii = `\nc = input(\"Enter a character: \")\n\nprint(\"The ASCII value of '\" + c + \"' is\",ord(c)) `.trim();\nconst conversion = `\ndec = int(input(\"Enter a decimal number: \"))\n\nprint(bin(dec), \"in binary.\")\nprint(oct(dec), \"in octal.\")\nprint(hex(dec), \"in hexadecimal.\" )`.trim();\nconst matrixs = `\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\n\nresult = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\n\n\nfor i in range(len(X)):                                                             // iterate through rows of X.\n   for j in range(len(Y[0])):                                                       // iterate through columns of Y.\n       for k in range(len(Y)):                                                      // iterate through rows of Y.\n           result[i][j] += X[i][k] * Y[k][j]\n\nfor r in result:\n   print(r)\n`.trim();\nconst towerOfHanoi = `\ndef TowerOfHanoi(n , source, destination, auxilliary):\n    if n==1:\n        print (\"Move disk 1 from source\",source,\"to destination\",destination)\n        return\n    TowerOfHanoi(n-1, source, auxilliary, destination)\n    print (\"Move disk\",n,\"from source\",source,\"to destination\",destination)\n    TowerOfHanoi(n-1, auxilliary, destination, source)\n\nn = 4\nTowerOfHanoi(n,'A','B','C')`.trim();\nconst calculator = `\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    return x / y\n\n\nprint(\"Select operation.\")\nprint(\"1.Add\")\nprint(\"2.Subtract\")\nprint(\"3.Multiply\")\nprint(\"4.Divide\")\n\nwhile True:\n    choice = input(\"Enter choice(1/2/3/4): \")\n\n    if choice in ('1', '2', '3', '4'):                                      // Check if choice is one of the four options.\n        num1 = float(input(\"Enter first number: \"))\n        num2 = float(input(\"Enter second number: \"))\n\n        if choice == '1':\n            print(num1, \"+\", num2, \"=\", add(num1, num2))\n\n        elif choice == '2':\n            print(num1, \"-\", num2, \"=\", subtract(num1, num2))\n\n        elif choice == '3':\n            print(num1, \"*\", num2, \"=\", multiply(num1, num2))\n\n        elif choice == '4':\n            print(num1, \"/\", num2, \"=\", divide(num1, num2))\n        break\n    else:\n        print(\"Invalid Input\")\n`.trim();\n\nclass PyLogic extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }, \"1. What is the output of the following?\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: output,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    })), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    }, \"Each element of x is converted into a list.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }, \"2. Write a Python program to check whether a given string is a palindrome or not, without using an iterative method. \"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: palindrome,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }, \"3. Write a Python program to calculate the sum of a list of numbers.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: sum,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    }, \"4. How will you read a random line in a file?\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: random,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }, \"5. What is the function to randomize the items of a list in-place?\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: randomize,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }, \"6. What is the result of the below lines of code?\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: output_2,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    }, \"The function fast evaluates its arguments only once after the function gets defined. However, since items is a list, so it\\u2019ll get modified by appending a 1 to it.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }, \"7. Mukesh likes blue\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: blue,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    }, \"8. For\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: For,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    }, \"9. Nested loop\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Nested_loop,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }, \"10. Unpacking\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: unpacking,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    }, \"11. Enter Digit o/p words\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: words,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570\n      },\n      __self: this\n    }, \"12. Print EMOJ\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: EMOJ,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581\n      },\n      __self: this\n    }, \"13. Creating a reusable Functions\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: reusable,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592\n      },\n      __self: this\n    }, \"14. Generating random Values\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: random_,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603\n      },\n      __self: this\n    }, \"15. Excel spreadsheet\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: spreadsheet,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 605\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614\n      },\n      __self: this\n    }, \"16. Create new colom and new excel sheet\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: openpyxl,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624\n      },\n      __self: this\n    }, \"17. Python function to return next Prime number\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: primeMus,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 634\n      },\n      __self: this\n    }, \"18. Create tuples with homogeneous elements from a tuple containing homogeneous elements.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 635\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: homogeneous,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 642\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644\n      },\n      __self: this\n    }, \"19. Fing greatest number from a tuple of ini values.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: greatest,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654\n      },\n      __self: this\n    }, \"20. Merge two sorted tuple.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: sorted,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664\n      },\n      __self: this\n    }, \"21. Print indices of all the occurrence of a given element in a given list.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: occurrence,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674\n      },\n      __self: this\n    }, \"22. Recursive function to calculate sum of sequence of first N natural numbers.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: sequence,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684\n      },\n      __self: this\n    }, \"23. Return multiple values.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: multiple,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 686\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694\n      },\n      __self: this\n    }, \"24. Ascii\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 695\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: ascii,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 696\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 702\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704\n      },\n      __self: this\n    }, \"25. Conversion\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: conversion,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 706\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 714\n      },\n      __self: this\n    }, \"26. Matrix\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: matrix,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 716\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 722\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724\n      },\n      __self: this\n    }, \"Multilpy 2 Matrix\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: matrixs,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 726\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734\n      },\n      __self: this\n    }, \"27. Tower Of Hanoi\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: towerOfHanoi,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 736\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 742\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 744\n      },\n      __self: this\n    }, \"28. Calculator\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 745\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: calculator,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(PyLogic);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/pythone/deeppy/pyLogic.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","output","trim","find","palindrome","sum","random","randomize","output_2","blue","For","Nested_loop","matrix","unpacking","words","EMOJ","reusable","random_","spreadsheet","openpyxl","primeMus","homogeneous","greatest","sorted","occurrence","sequence","multiple","ascii","conversion","matrixs","towerOfHanoi","calculator","PyLogic","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst output = `\nx = ['ab', 'cd']\nprint(len(list(map(list, x))))\n`.trim()\n\nconst find = `1.\tset([[1,2],[3,4],[4,5]])\n2.\tset([1,2,2,3,4,5])\n3.\t{1,2,3,4}\n4.\tset((1,2,3,4))\n`.trim()\n\nconst palindrome = `s1 = string\ns = string[::-1]\n\nif(s1 == s):\n    return 'true'\nelse:\n    return 'false'\n\nprint(fun('madam'))\n`.trim()\n\nconst sum = `\ndef sum(num):\n    if len(num) == 1:\n        return num[0]\n    else:\n        return num[0] + sum(num[1:])\n\nprint(sum([2, 4, 5, 6, 7]))\n`.trim()\n\nconst random = `import random\n\ndef read_random(fname):\n    lines = open(fname).read().splitlines()\n    return random.choice(lines)\n`.trim()\n\nconst randomize = `\n#random() have <shuffle(<list>)> which can randomize any input sequence.\n\nimport random\n\nlist = [2, 18, 8, 4]\n\nprint(\"Prior Shuffling - 0\", list)\nrandom.shuffle(list)\n\nprint(\"After Shuffling - 1\", list)\nrandom.shuffle(list)\n\nprint(\"After Shuffling - 2\", list)\n`.trim()\n\nconst output_2 = `\ndef fast (items= []):\n    items.append (1)\n    return items\n\nprint (fast ())\nprint (fast ())\n`.trim()\n\nconst blue = `name = input('what is your name? ')\nfavorite_color = input('What is your favorite color')\nprint(name + ' Likes ' + favorite_color)\n`.trim()\n\nconst For = `\nfor item in ['Python', 'javaScrupt', 'NodeJs']:\n    print(item)\n\nfor item in range(10):\n    print(item)\n\nfor item in range(5, 10):\n    print(item)\n\nfor item in range(5, 10, 2):\n    print(item)\n`.trim()\n\nconst Nested_loop = `\nfor x in range(4):\n    for y in range(3):\n        print(f'({x}, {y})')\n\n\nnumbers = [5, 2, 5, 2, 2]\nfor x_count in numbers:\n    output = ''\n    for count in range(x_count):\n            output += 'X'\n            print(output)\n`.trim()\n\nconst matrix = `matrix = [\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n]\n\nfor row in matrix:\n  for item in row:\n      print(item)\n`.trim()\n\nconst unpacking = `coordinates = (1, 2, 3)\nx, y, z = coordinates\nprint(x)\nprint(y)\n\ncoordinates = [1, 2, 3]\nx, y, z = coordinates\nprint(z)\n`.trim()\n\nconst words = `\nphone = input(\"Phone: \")\ndigits_mapping = {\n    \"1\": \"One\",\n    \"2\": \"Two\",\n    \"3\": \"Three\",\n    \"4\": \"Four\"\n  }\n  \noutput = \"\"\nfor ch in phone:\n  output += digits_mapping.get(ch, \"!\") + \" \"\nprint(output)\n  `.trim()\n\nconst EMOJ = `message = input(\">\")\nwords = message.split(' ')\nemojis = {\n    \":)\":\"*\",\n    \":(\":\"%\"\n}\noutput = \"\"\nfor word in words:\n    output += emojis.get(word, word) + \" \"\nprint(output)\n`.trim()\n\nconst reusable = `def emoji_converter(message):\nwords = message.split(\" \")\nemojis = {\n    \":)\": \"*\",\n    \":(\": \"%\"\n}\noutput = \"\"\nfor word in words:\n    output += emojis.get(word, word) + \" \"\nreturn  output\n\n\nmessage = input(\">\")\nprint(emoji_converter(message))\n`.trim()\n\nconst random_ = `import random\n\nfor i in range(3):\n    print(random.randint(10, 20))\nprint(random.randint(10, 20))\n\n\nimport random \n\nclass Dice:\n    def roll(self):\n        first = random.randint(1, 6)\n        second = random.randint(1, 6)\n        return first, second\n\ndice = Dice()\nprint(dice.roll())\n`.trim()\n\nconst spreadsheet = `\nimport openpyxl as xl\n\nwb = xl.load_workbook('transactions.xlsx')\nsheet = wb['Sheet1']\ncell = sheet['a1']\ncell = sheet.cell(1, 1)\nprint(cell.value)\n\nprint(sheet.max_row)\n\nfor row in range(1, sheet.max_row + 1):\n    print(row)\n\nfor row in range(2, sheet.max_row + 1):\n    cell = sheet.cell(row, 3)\n    print(cell.value)\n`.trim()\n\nconst openpyxl = `import openpyxl as xl\n\nwb = xl.load_workbook('transactions.xlsx')\nsheet = wb['Sheet1']\ncell = sheet['a1']\ncell = sheet.cell(1, 1)\n\nfor row in range(2, sheet.max_row + 1):\n    cell = sheet.cell(row, 3)\n    corrected_price = cell.value * 2\n    corrected_price_cell = sheet.cell(row, 4)\n    corrected_price_cell = corrected_price\n\nwb.save('transactions2.xlsx')\n`.trim()\n\nconst primeMus = `\ndef nextPrime(n):\n    while True:\n        n+=1\n        for i in range(2,n):\n\n            if(n%i==0):\n                break\n            else:\n                print(n)\n                return n\n\nnextPrime(13)`.trim();\n\nconst homogeneous = `\nx=(30,4.5,26,3+4j,'abc', True, 5.6,2-1j)\nt1,t2,t3,t4,t5=[], [], [], [], []\n\nfor e in x:\n    if type(e) == int:\n        t1.append(e)\n    elif type(e) == float:\n        t2.append(e)\n    elif type(e) == complex:\n        t3.append(e)\n    elif type(e) == str:\n        t4.append(e)\n    elif type(e) == bool:\n        t5.append(e)\n\nt1=tuple(t1)\nt2=tuple(t2)\nt3=tuple(t3)\nt4=tuple(t4)\nt5=tuple(t5)\n\nprint(t1, t2, t3, t4, t5, sep='nL')\n`.trim();\n\nconst greatest = `\nprint('Enter number')\nt1 = tuple([int(e) for e in input().split(',')])\nprint('Enter Greatest number', max(t1))`.trim();\n\nconst sorted = `\nt1=(10,20,30,40)\nt2=(5,9,12,18,22,25)\nt3=[]\ni,j,k=0,0,0\n\nwhile i<len(t1) and j<len(t2):\n    if t1[i]<t2[j]:\n        t3.append(t1[i])\n        i+=1\n        k+=1\n    else:\n        t3.append(t2[j])\n        j+=1\n        k+=1\n        \nif i==len(t1):\n    while j<len(t2):\n        t3.append(t2[j])\n        j+=1\n        k+=1\n        \nelif j==len(t2):\n    while i<len(t1):\n        t3.append(t1[i])\n        i+=1\n        k+=1\n        \nt3=tuple(t3)\nprint(t3)`.trim();\n\nconst occurrence = `\nl=[eval(x) for x in input(\"Enter list elements\").split(',')]\nelement=eval(input(\"Enter element value\"))\nindex=0\nwhile index<len(l):\n    if l[index]==element:\n        print(index, end='')\n    index+=1`.trim();\n\nconst sequence = `\ndef sum(n):\n    if n==1:\n        return 1\n    return n**2+sum(n-1)\n\nsum(4)`.trim();\n\nconst multiple = `\ndef fun():\n    return 1,2,3\n\nx=fun()\nprint(x)`.trim();\n\nconst ascii = `\nc = input(\"Enter a character: \")\n\nprint(\"The ASCII value of '\" + c + \"' is\",ord(c)) `.trim();\n\nconst conversion = `\ndec = int(input(\"Enter a decimal number: \"))\n\nprint(bin(dec), \"in binary.\")\nprint(oct(dec), \"in octal.\")\nprint(hex(dec), \"in hexadecimal.\" )`.trim();\n\nconst matrixs = `\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\n\nresult = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\n\n\nfor i in range(len(X)):                                                             // iterate through rows of X.\n   for j in range(len(Y[0])):                                                       // iterate through columns of Y.\n       for k in range(len(Y)):                                                      // iterate through rows of Y.\n           result[i][j] += X[i][k] * Y[k][j]\n\nfor r in result:\n   print(r)\n`.trim();\n\nconst towerOfHanoi = `\ndef TowerOfHanoi(n , source, destination, auxilliary):\n    if n==1:\n        print (\"Move disk 1 from source\",source,\"to destination\",destination)\n        return\n    TowerOfHanoi(n-1, source, auxilliary, destination)\n    print (\"Move disk\",n,\"from source\",source,\"to destination\",destination)\n    TowerOfHanoi(n-1, auxilliary, destination, source)\n\nn = 4\nTowerOfHanoi(n,'A','B','C')`.trim();\n\nconst calculator = `\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    return x / y\n\n\nprint(\"Select operation.\")\nprint(\"1.Add\")\nprint(\"2.Subtract\")\nprint(\"3.Multiply\")\nprint(\"4.Divide\")\n\nwhile True:\n    choice = input(\"Enter choice(1/2/3/4): \")\n\n    if choice in ('1', '2', '3', '4'):                                      // Check if choice is one of the four options.\n        num1 = float(input(\"Enter first number: \"))\n        num2 = float(input(\"Enter second number: \"))\n\n        if choice == '1':\n            print(num1, \"+\", num2, \"=\", add(num1, num2))\n\n        elif choice == '2':\n            print(num1, \"-\", num2, \"=\", subtract(num1, num2))\n\n        elif choice == '3':\n            print(num1, \"*\", num2, \"=\", multiply(num1, num2))\n\n        elif choice == '4':\n            print(num1, \"/\", num2, \"=\", divide(num1, num2))\n        break\n    else:\n        print(\"Invalid Input\")\n`.trim();\n\n\nclass PyLogic extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <b>1. What is the output of the following?</b>\n              <div style={titles}>\n                <PrismCode\n                  code={output}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <i>Each element of x is converted into a list.</i>\n              <br />\n              <br />\n\n              <b>2. Write a Python program to check whether a given string is a palindrome or not, without using an iterative method. </b>\n              <div style={titles}>\n                <PrismCode\n                  code={palindrome}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>3. Write a Python program to calculate the sum of a list of numbers.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={sum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>4. How will you read a random line in a file?</b>\n              <div style={titles}>\n                <PrismCode\n                  code={random}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>5. What is the function to randomize the items of a list in-place?</b>\n              <div style={titles}>\n                <PrismCode\n                  code={randomize}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>6. What is the result of the below lines of code?</b>\n              <div style={titles}>\n                <PrismCode\n                  code={output_2}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>The function fast evaluates its arguments only once after the function gets defined. However, since items is a list, so it’ll get modified by appending a 1 to it.</i>\n              <br />\n              <br />\n\n              <b>7. Mukesh likes blue</b>\n              <div style={titles}>\n                <PrismCode\n                  code={blue}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>8. For</b>\n              <div style={titles}>\n                <PrismCode\n                  code={For}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>9. Nested loop</b>\n              <div style={titles}>\n                <PrismCode\n                  code={Nested_loop}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>10. Unpacking</b>\n              <div style={titles}>\n                <PrismCode\n                  code={unpacking}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>11. Enter Digit o/p words</b>\n              <div style={titles}>\n                <PrismCode\n                  code={words}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>12. Print EMOJ</b>\n              <div style={titles}>\n                <PrismCode\n                  code={EMOJ}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>13. Creating a reusable Functions</b>\n              <div style={titles}>\n                <PrismCode\n                  code={reusable}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>14. Generating random Values</b>\n              <div style={titles}>\n                <PrismCode\n                  code={random_}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>15. Excel spreadsheet</b>\n              <div style={titles}>\n                <PrismCode\n                  code={spreadsheet}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>16. Create new colom and new excel sheet</b>\n              <div style={titles}>\n                <PrismCode\n                  code={openpyxl}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>17. Python function to return next Prime number</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={primeMus}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>18. Create tuples with homogeneous elements from a tuple containing homogeneous elements.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={homogeneous}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>19. Fing greatest number from a tuple of ini values.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={greatest}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>20. Merge two sorted tuple.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={sorted}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>21. Print indices of all the occurrence of a given element in a given list.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={occurrence}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>22. Recursive function to calculate sum of sequence of first N natural numbers.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={sequence}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>23. Return multiple values.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={multiple}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>24. Ascii</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={ascii}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>25. Conversion</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={conversion}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>26. Matrix</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={matrix}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Multilpy 2 Matrix</b>\n              <div style={titles}>\n                <PrismCode\n                  code={matrixs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>27. Tower Of Hanoi</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={towerOfHanoi}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>28. Calculator</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={calculator}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(PyLogic));\n"]},"metadata":{},"sourceType":"module"}