{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';import Theata from'../../../assets/customElement.png';import CustomElement from'../../../assets/create.png';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var dynamically=\"\\n//in app.module.ts\\nentryComponents: [Child, StudentInfoComponent]\\n\\n\\n//childs.ts\\n@Component({\\n  selector: 'app-childs',\\n  template: 'Child'\\n})\\nexport class Child {\\n  message: string;\\n  constructor() { }\\n\\n  ngOnInit() {\\n    alert('Child Call', this.message);\\n  }\\n}\\n\\n\\n//student-info.ts\\n@Component({\\n  selector: 'app-student-info',\\n  template: 'Student',\\n})\\nexport class StudentInfoComponent implements OnInit {\\n  message: string;\\n  constructor() { }\\n\\n  ngOnInit() {\\n    alert('Student Called', this.message);\\n  }\\n}\\n\\n\\n//app.component.ts\\nimport { Component, ViewChild, ViewContainerRef, ComponentFactoryResolver, ComponentRef,\\n  ComponentFactory } from '@angular/core';\\nimport { Child } from './childs';\\nimport { StudentInfoComponent } from './student-info';\\n\\n@Component({\\n  selector: 'app-root',\\n  templateUrl: './app.component.html',\\n\\n})\\nexport class AppComponent {\\n  componentRef: any;\\n  @ViewChild('loadComponent', {read: ViewContainerRef}) entry: ViewContainerRef;\\n  constructor(private resolver: ComponentFactoryResolver) { }\\n  createComponent(Id: number) {\\n    this.entry.clear();\\n    if (Id == 1) {\\n      const factory = this.resolver.resolveComponentFactory(StudentInfoComponent);\\n      this.componentRef = this.entry.createComponent(factory);\\n    } else if (Id == 2) {\\n      const factory = this.resolver.resolveComponentFactory(Child);\\n      this.componentRef = this.entry.createComponent(factory);\\n    }\\n    this.componentRef.instance.message = \\\"Called by appComponent\\\";\\n  }\\n  destroyComponent() {\\n    this.componentRef.destroy();\\n  }\\n  data = [\\n    { \\\"Id\\\": 1, \\\"Name\\\": \\\"Student Info\\\" },\\n    { \\\"Id\\\": 2, \\\"Name\\\": \\\"Parent Info\\\" }\\n  ]\\n  selectName(id : number) {\\n    this.createComponent(id);\\n  }\\n}\\n\".trim();var blocking=\"\\n//app.component.ts\\nimport { environment } from '../environments/environment';\\n\\n@Component({\\n  selector: 'app-root',\\n  templateUrl: './app.component.html',\\n  styleUrls: ['./app.component.scss']\\n})\\nexport class AppComponent {\\n\\n  title = 'my-web-worker-app';\\n  selectedColour: string;\\n  result: any;\\n  colourArr = ['#9999ff', '#00aaff', '#008000', '#b33c00', '#663300', '#cc3399'];\\n  isBusy = false;\\n  cpuWorker: any;\\n\\n  constructor() {\\n  }\\n\\n  changeColor(color: string) {\\n    this.selectedColour = color;\\n  }\\n\\n  cpuIntensiveWork() {\\n    this.isBusy = true;\\n    const start = new Date().getTime();\\n    let calResult = 0;\\n    for (let i = Math.pow(environment.baseNumber, 7); i >= 0; i--) {\\n      calResult += Math.atan(i) * Math.tan(i);\\n    };\\n\\n    let elapsed = new Date().getTime() - start;\\n    const milliseconds = (elapsed % 1000) / 100;\\n    const seconds = Math.floor((elapsed / 1000) % 60);\\n    const minutes = Math.floor((elapsed / (1000 * 60)) % 60);\\n    this.result = {'TimeElapsed': ''$'{ minutes }m, '$'{ seconds }s, '$'{ milliseconds }ms', 'output': calResult};\\n    this.isBusy = false;\\n  }\\n}\\n\\n\\n\\n//app.component.html\\n<div class=\\\"container pt-4 mt-4\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <div class=\\\"row\\\">\\n                <div id='colorDiv' [ngStyle]=\\\"{'background-color':selectedColour}\\\"></div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <span [style.color]=selectedColour>{{selectedColour}}</span>\\n            </div>\\n            <div class=\\\"row pt-4\\\">\\n                <div class=\\\"dropdown show\\\">\\n                    <a class=\\\"btn btn-primary btn-lg dropdown-toggle\\\" role=\\\"button\\\" id=\\\"dropdownMenuLink\\\" \\n                    data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\">\\n                        Pick colour\\n                        </a>\\n                    <div class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdownMenuLink\\\">\\n                        <a *ngFor=\\\" let colour of colourArr\\\" (click)=\\\"changeColor(colour)\\\" class=\\\"dropdown-item\\\">\\n                            <div class=\\\"drpDwnItem\\\" [style.background-color]=colour>\\n                                <span [style.color]=colour>{{colour}}</span>\\n                            </div>\\n                        </a>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"col\\\">\\n            <div class=\\\"row\\\">\\n                <button class=\\\"btn btn-primary btn-lg\\\" (click)=\\\"cpuIntensiveWork()\\\"> CPU Intensive Work\\n                        <i *ngIf=\\\"isBusy\\\" class=\\\"fa fa-spinner fa-spin fa-2x fa-fw\\\"></i>\\n                </button>\\n            </div>\\n            <ng-container *ngIf=\\\"result\\\">\\n                <div class=\\\"row pt-4\\\">\\n                    <h1 class=\\\"display-4\\\">{{result.TimeElapsed}}</h1>\\n                </div>\\n                <div class=\\\"row\\\">\\n                    <h1 class=\\\"display-4\\\">{{result.output}}</h1>\\n                </div>\\n            </ng-container>\\n        </div>\\n    </div>\\n</div>\\n\".trim();var nonBlocking=\"\\n//app.component.ts\\nimport { Component, OnInit } from '@angular/core';\\nimport { environment } from '../environments/environment';\\n\\n@Component({\\n  selector: 'app-root',\\n  templateUrl: './app.component.html',\\n  styleUrls: ['./app.component.scss']\\n})\\nexport class AppComponent {\\n\\n  title = 'my-web-worker-app';\\n  selectedColour: string;\\n  result: any;\\n  colourArr = ['#9999ff', '#00aaff', '#008000', '#b33c00', '#663300', '#cc3399'];\\n  isBusy = false;\\n  cpuWorker: any;\\n\\n  constructor() {\\n    this.intializeWorker();\\n  }\\n\\n  intializeWorker() {\\n    if (typeof Worker !== 'undefined') {\\n      if (!this.cpuWorker) {\\n        this.cpuWorker = new Worker('./worker/cpu.worker',\\n          { type: \\\"module\\\" });\\n      }\\n    } else {\\n      // Web workers are not supported in this environment.\\n      // You should add a fallback so that your\\n      // program still executes correctly.\\n    }\\n  }\\n\\n  cpuIntensiveWork() {\\n    this.cpuWorker.postMessage('Message from main thread.');\\n    // listen back from worker\\n    this.cpuWorker.addEventListener('message', ({data}) => {\\n      this.result = data;\\n    });\\n  }\\n\\n  changeColor(color: string) {\\n    this.selectedColour = color;\\n  }\\n}\\n\\n\\n//app.component.html\\n<div class=\\\"container pt-4 mt-4\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <div class=\\\"row\\\">\\n                <div id='colorDiv' [ngStyle]=\\\"{'background-color':selectedColour}\\\"></div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <span [style.color]=selectedColour>{{selectedColour}}</span>\\n            </div>\\n            <div class=\\\"row pt-4\\\">\\n                <div class=\\\"dropdown show\\\">\\n                    <a class=\\\"btn btn-primary btn-lg dropdown-toggle\\\" role=\\\"button\\\" id=\\\"dropdownMenuLink\\\" \\n                    data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\">\\n                        Pick colour\\n                        </a>\\n                    <div class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdownMenuLink\\\">\\n                        <a *ngFor=\\\" let colour of colourArr\\\" (click)=\\\"changeColor(colour)\\\" class=\\\"dropdown-item\\\">\\n                            <div class=\\\"drpDwnItem\\\" [style.background-color]=colour>\\n                                <span [style.color]=colour>{{colour}}</span>\\n                            </div>\\n                        </a>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"col\\\">\\n            <div class=\\\"row\\\">\\n                <button class=\\\"btn btn-primary btn-lg\\\" (click)=\\\"cpuIntensiveWork()\\\"> CPU Intensive Work\\n                        <i *ngIf=\\\"isBusy\\\" class=\\\"fa fa-spinner fa-spin fa-2x fa-fw\\\"></i>\\n                </button>\\n            </div>\\n            <ng-container *ngIf=\\\"result\\\">\\n                <div class=\\\"row pt-4\\\">\\n                    <h1 class=\\\"display-4\\\">{{result.TimeElapsed}}</h1>\\n                </div>\\n                <div class=\\\"row\\\">\\n                    <h1 class=\\\"display-4\\\">{{result.output}}</h1>\\n                </div>\\n            </ng-container>\\n        </div>\\n    </div>\\n</div>\\n\\n\\n\\n//worker/cpu.worker.ts\\nimport { environment } from \\\"../../environments/environment\\\";\\n\\naddEventListener('message', ({data}) => {\\n  const result = cpuIntensiveWork();\\n  postMessage(result);\\n});\\n\\nconst cpuIntensiveWork = function () {\\n  const start = new Date().getTime();\\n  let calResult = 0;\\n  for (let i = Math.pow(environment.baseNumber, 7); i >= 0; i--) {\\n    calResult += Math.atan(i) * Math.tan(i);\\n  };\\n\\n  let elapsed = new Date().getTime() - start;\\n  const milliseconds = (elapsed % 1000) / 100;\\n  const seconds = Math.floor((elapsed / 1000) % 60);\\n  const minutes = Math.floor((elapsed / (1000 * 60)) % 60);\\n  const result = {'TimeElapsed': ''$'{ minutes }m, '$'{ seconds }s, '$'{ milliseconds }ms', 'output': calResult};\\n  return result;\\n}\\n\".trim();var ViewContainerRef=\"let componentRef = viewContainerRef.createComponent(componentFactory);\".trim();var DynamicallyLoad=/*#__PURE__*/function(_Component){_inherits(DynamicallyLoad,_Component);function DynamicallyLoad(){_classCallCheck(this,DynamicallyLoad);return _possibleConstructorReturn(this,_getPrototypeOf(DynamicallyLoad).apply(this,arguments));}_createClass(DynamicallyLoad,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Dynamically Load Component\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Dynamic components are the components in which components location in the application is not defined at build time.i.e, They are not used in any angular template. But the component is instantiated and placed in the application at runtime.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"Mainly, in the component template, a component is loaded using the component selector at angular compile time. The component can also be loaded dynamically at runtime with the help of\",React.createElement(\"b\",null,\"ComponentFactory, ComponentFactoryResolver\"),\", and \",React.createElement(\"b\",null,\"ViewContainerRef\"),\".\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"Those components which need to be loaded dynamically must also be configured in \",React.createElement(\"b\",null,\"entryComponents\"),\"metadata of @NgModule decorator. To load a dynamic component in a template we required an insert location and to get it we need \",React.createElement(\"b\",null,\"ViewContainerRef\"),\" of a decorator or a component.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"ComponentFactory is used to create an instance of components where ComponentFactoryResolver resolves a ComponentFactory for a particular component. It is used as follows.\"),React.createElement(\"b\",null,\"let componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"ViewContainerRef\"),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"ViewContainerRef represents a container where we can attach one or more views to a component and also show an API to create components. Some important methods of ViewContainerRef are:\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"createEmbeddedView()\"),React.createElement(\"li\",null,\"clear()\"),React.createElement(\"li\",null,\"get()\"),React.createElement(\"li\",null,\"insert()\"),React.createElement(\"li\",null,\"move()\"),React.createElement(\"li\",null,\"createComponent()\"))),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"CreateEmbeddedView()\"),\" instantiates an embedded view and inserts it into container.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"createComponent()\"),\" instantiates a single component and inserts its host view into the container at a specified index.\")),React.createElement(\"br\",null),\"In dynamic component loader, load component using createComponent() of ViewContainerRef.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:ViewContainerRef,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),\"clear() method of ViewContainerRef destroys all existing views in the container.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:dynamically,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Web-Worker (Blocking UI)\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:blocking,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Web-Worker (Non-Blocking UI)\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:nonBlocking,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return DynamicallyLoad;}(Component);export default withStyles(styles)(DynamicallyLoad);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/dynamicallyLoad.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Theata","CustomElement","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","dynamically","trim","blocking","nonBlocking","ViewContainerRef","DynamicallyLoad","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Theata from '../../../assets/customElement.png';\nimport CustomElement from '../../../assets/create.png';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst dynamically = `\n//in app.module.ts\nentryComponents: [Child, StudentInfoComponent]\n\n\n//childs.ts\n@Component({\n  selector: 'app-childs',\n  template: 'Child'\n})\nexport class Child {\n  message: string;\n  constructor() { }\n\n  ngOnInit() {\n    alert('Child Call', this.message);\n  }\n}\n\n\n//student-info.ts\n@Component({\n  selector: 'app-student-info',\n  template: 'Student',\n})\nexport class StudentInfoComponent implements OnInit {\n  message: string;\n  constructor() { }\n\n  ngOnInit() {\n    alert('Student Called', this.message);\n  }\n}\n\n\n//app.component.ts\nimport { Component, ViewChild, ViewContainerRef, ComponentFactoryResolver, ComponentRef,\n  ComponentFactory } from '@angular/core';\nimport { Child } from './childs';\nimport { StudentInfoComponent } from './student-info';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n\n})\nexport class AppComponent {\n  componentRef: any;\n  @ViewChild('loadComponent', {read: ViewContainerRef}) entry: ViewContainerRef;\n  constructor(private resolver: ComponentFactoryResolver) { }\n  createComponent(Id: number) {\n    this.entry.clear();\n    if (Id == 1) {\n      const factory = this.resolver.resolveComponentFactory(StudentInfoComponent);\n      this.componentRef = this.entry.createComponent(factory);\n    } else if (Id == 2) {\n      const factory = this.resolver.resolveComponentFactory(Child);\n      this.componentRef = this.entry.createComponent(factory);\n    }\n    this.componentRef.instance.message = \"Called by appComponent\";\n  }\n  destroyComponent() {\n    this.componentRef.destroy();\n  }\n  data = [\n    { \"Id\": 1, \"Name\": \"Student Info\" },\n    { \"Id\": 2, \"Name\": \"Parent Info\" }\n  ]\n  selectName(id : number) {\n    this.createComponent(id);\n  }\n}\n`.trim();\n\nconst blocking = `\n//app.component.ts\nimport { environment } from '../environments/environment';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n  title = 'my-web-worker-app';\n  selectedColour: string;\n  result: any;\n  colourArr = ['#9999ff', '#00aaff', '#008000', '#b33c00', '#663300', '#cc3399'];\n  isBusy = false;\n  cpuWorker: any;\n\n  constructor() {\n  }\n\n  changeColor(color: string) {\n    this.selectedColour = color;\n  }\n\n  cpuIntensiveWork() {\n    this.isBusy = true;\n    const start = new Date().getTime();\n    let calResult = 0;\n    for (let i = Math.pow(environment.baseNumber, 7); i >= 0; i--) {\n      calResult += Math.atan(i) * Math.tan(i);\n    };\n\n    let elapsed = new Date().getTime() - start;\n    const milliseconds = (elapsed % 1000) / 100;\n    const seconds = Math.floor((elapsed / 1000) % 60);\n    const minutes = Math.floor((elapsed / (1000 * 60)) % 60);\n    this.result = {'TimeElapsed': ''$'{ minutes }m, '$'{ seconds }s, '$'{ milliseconds }ms', 'output': calResult};\n    this.isBusy = false;\n  }\n}\n\n\n\n//app.component.html\n<div class=\"container pt-4 mt-4\">\n    <div class=\"row\">\n        <div class=\"col\">\n            <div class=\"row\">\n                <div id='colorDiv' [ngStyle]=\"{'background-color':selectedColour}\"></div>\n            </div>\n            <div class=\"row\">\n                <span [style.color]=selectedColour>{{selectedColour}}</span>\n            </div>\n            <div class=\"row pt-4\">\n                <div class=\"dropdown show\">\n                    <a class=\"btn btn-primary btn-lg dropdown-toggle\" role=\"button\" id=\"dropdownMenuLink\" \n                    data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                        Pick colour\n                        </a>\n                    <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuLink\">\n                        <a *ngFor=\" let colour of colourArr\" (click)=\"changeColor(colour)\" class=\"dropdown-item\">\n                            <div class=\"drpDwnItem\" [style.background-color]=colour>\n                                <span [style.color]=colour>{{colour}}</span>\n                            </div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"col\">\n            <div class=\"row\">\n                <button class=\"btn btn-primary btn-lg\" (click)=\"cpuIntensiveWork()\"> CPU Intensive Work\n                        <i *ngIf=\"isBusy\" class=\"fa fa-spinner fa-spin fa-2x fa-fw\"></i>\n                </button>\n            </div>\n            <ng-container *ngIf=\"result\">\n                <div class=\"row pt-4\">\n                    <h1 class=\"display-4\">{{result.TimeElapsed}}</h1>\n                </div>\n                <div class=\"row\">\n                    <h1 class=\"display-4\">{{result.output}}</h1>\n                </div>\n            </ng-container>\n        </div>\n    </div>\n</div>\n`.trim();\n\nconst nonBlocking = `\n//app.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { environment } from '../environments/environment';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n  title = 'my-web-worker-app';\n  selectedColour: string;\n  result: any;\n  colourArr = ['#9999ff', '#00aaff', '#008000', '#b33c00', '#663300', '#cc3399'];\n  isBusy = false;\n  cpuWorker: any;\n\n  constructor() {\n    this.intializeWorker();\n  }\n\n  intializeWorker() {\n    if (typeof Worker !== 'undefined') {\n      if (!this.cpuWorker) {\n        this.cpuWorker = new Worker('./worker/cpu.worker',\n          { type: \"module\" });\n      }\n    } else {\n      // Web workers are not supported in this environment.\n      // You should add a fallback so that your\n      // program still executes correctly.\n    }\n  }\n\n  cpuIntensiveWork() {\n    this.cpuWorker.postMessage('Message from main thread.');\n    // listen back from worker\n    this.cpuWorker.addEventListener('message', ({data}) => {\n      this.result = data;\n    });\n  }\n\n  changeColor(color: string) {\n    this.selectedColour = color;\n  }\n}\n\n\n//app.component.html\n<div class=\"container pt-4 mt-4\">\n    <div class=\"row\">\n        <div class=\"col\">\n            <div class=\"row\">\n                <div id='colorDiv' [ngStyle]=\"{'background-color':selectedColour}\"></div>\n            </div>\n            <div class=\"row\">\n                <span [style.color]=selectedColour>{{selectedColour}}</span>\n            </div>\n            <div class=\"row pt-4\">\n                <div class=\"dropdown show\">\n                    <a class=\"btn btn-primary btn-lg dropdown-toggle\" role=\"button\" id=\"dropdownMenuLink\" \n                    data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                        Pick colour\n                        </a>\n                    <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuLink\">\n                        <a *ngFor=\" let colour of colourArr\" (click)=\"changeColor(colour)\" class=\"dropdown-item\">\n                            <div class=\"drpDwnItem\" [style.background-color]=colour>\n                                <span [style.color]=colour>{{colour}}</span>\n                            </div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"col\">\n            <div class=\"row\">\n                <button class=\"btn btn-primary btn-lg\" (click)=\"cpuIntensiveWork()\"> CPU Intensive Work\n                        <i *ngIf=\"isBusy\" class=\"fa fa-spinner fa-spin fa-2x fa-fw\"></i>\n                </button>\n            </div>\n            <ng-container *ngIf=\"result\">\n                <div class=\"row pt-4\">\n                    <h1 class=\"display-4\">{{result.TimeElapsed}}</h1>\n                </div>\n                <div class=\"row\">\n                    <h1 class=\"display-4\">{{result.output}}</h1>\n                </div>\n            </ng-container>\n        </div>\n    </div>\n</div>\n\n\n\n//worker/cpu.worker.ts\nimport { environment } from \"../../environments/environment\";\n\naddEventListener('message', ({data}) => {\n  const result = cpuIntensiveWork();\n  postMessage(result);\n});\n\nconst cpuIntensiveWork = function () {\n  const start = new Date().getTime();\n  let calResult = 0;\n  for (let i = Math.pow(environment.baseNumber, 7); i >= 0; i--) {\n    calResult += Math.atan(i) * Math.tan(i);\n  };\n\n  let elapsed = new Date().getTime() - start;\n  const milliseconds = (elapsed % 1000) / 100;\n  const seconds = Math.floor((elapsed / 1000) % 60);\n  const minutes = Math.floor((elapsed / (1000 * 60)) % 60);\n  const result = {'TimeElapsed': ''$'{ minutes }m, '$'{ seconds }s, '$'{ milliseconds }ms', 'output': calResult};\n  return result;\n}\n`.trim();\n\nconst ViewContainerRef = `let componentRef = viewContainerRef.createComponent(componentFactory);`.trim();\n\nclass DynamicallyLoad extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Dynamically Load Component</h3>\n              <ul>\n                <li>Dynamic components are the components in which components location in the application is not defined at build \n                    time.i.e, They are not used in any angular template. But the component is instantiated and placed in the \n                    application at runtime.</li><br/>\n                <li>Mainly, in the component template, a component is loaded using the component selector at angular\n                    compile time. The component can also be loaded dynamically at runtime with the help of\n                    <b>ComponentFactory, ComponentFactoryResolver</b>, and <b>ViewContainerRef</b>.</li><br/>\n                <li>Those components which need to be loaded dynamically must also be configured in <b>entryComponents</b>\n                    metadata of @NgModule decorator. To load a dynamic component in a template we required an insert\n                    location and to get it we need <b>ViewContainerRef</b> of a decorator or a component.</li><br/>\n                <li>ComponentFactory is used to create an instance of components where ComponentFactoryResolver resolves a\n                    ComponentFactory for a particular component. It is used as follows.</li>\n              <b>let componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);</b>\n              </ul>\n              <br />\n              <br />\n              \n              <b>ViewContainerRef</b><br />\n              <ul>\n                <li>ViewContainerRef represents a container where we can attach one or more views to a component and\n                  also show an API to create components. Some important methods of ViewContainerRef are:\n                  <ul>\n                    <li>createEmbeddedView()</li>\n                    <li>clear()</li>\n                    <li>get()</li>\n                    <li>insert()</li>\n                    <li>move()</li>\n                    <li>createComponent()</li>\n                  </ul>\n                </li>\n                <br />\n\n                <li><b>CreateEmbeddedView()</b> instantiates an embedded view and inserts it into container.</li>\n                <li><b>createComponent()</b> instantiates a single component and inserts its host view into the container at\n                  a specified index.</li>\n              </ul>\n              <br />\n              In dynamic component loader, load component using createComponent() of ViewContainerRef.\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={ViewContainerRef}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              clear() method of ViewContainerRef destroys all existing views in the container.\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={dynamically}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Web-Worker (Blocking UI)</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={blocking}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Web-Worker (Non-Blocking UI)</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={nonBlocking}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DynamicallyLoad));\n"]},"metadata":{},"sourceType":"module"}