{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import PrismCode from'../prismCode';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../styles.css';import Sidebar from'../sidebar';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var dropSelect=\"\\nclass App extends Component {\\n  state = {\\n      mockData: [],\\n      name: \\\"\\\"\\n    };\\n\\n  handleSubmitCourse = (e) => {\\n    alert(\\\"Your selected value is: \\\" + this.state.name);\\n    e.preventDefault();\\n  }\\n\\n  handleChange = e => {\\n    this.setState({ value: e.target.value });\\n  };\\n\\n  handleChangeCourse = e => {\\n    this.setState({ name: e.target.value });\\n  };\\n\\n  getUnique(arr, comp) {\\n    const unique = arr\\n      //store the comparison values in array\\n      .map(e => e[comp])\\n\\n      // store the keys of the unique objects\\n      .map((e, i, final) => final.indexOf(e) === i && i)\\n\\n      // eliminate the dead keys & store unique objects\\n      .filter(e => arr[e])\\n\\n      .map(e => arr[e]);\\n\\n    return unique;\\n  }\\n  \\ncomponentDidMount(){\\n  let url=\\\"https://jsonplaceholder.typicode.com/users/?q=\\\";\\n    axios.get(url)\\n     .then(res => {\\n        const mockData= res.data\\n        this.setState({ mockData: mockData })\\n    })\\n  }\\n\\n\\n  render() {\\n    const uniqueCouse = this.getUnique(this.state.mockData, \\\"username\\\");\\n\\n    const mockData = this.state.mockData;\\n    const name = this.state.name;\\n\\n    const filterDropdown = mockData.filter(function(result) {\\n      return result.username === name;\\n    });\\n\\n    return (\\n      <div>\\n        <form onSubmit={this.handleSubmitCourse}>\\n            <select value={name} onChange={this.handleChangeCourse}>\\n              {uniqueCouse.map(name => (\\n                <option key={name.id} value={name.username}>\\n                  {name.username}\\n                </option>\\n              ))}\\n            </select>\\n            \\n          <div>\\n            {filterDropdown.map(name => (\\n              <div key={name.id}>{name.name}</div>\\n            ))}\\n          </div>\\n        </form>\\n      </div>\\n    );\\n  }\\n}\".trim();var checkFilter=\"\\n//App.js\\n\\nimport FilterableProductTable from './FilterableProductTable'\\n\\nconst App =() =>{\\n//   const [PRODUCTS, setData ] = useState([]);\\n  \\n//   useEffect(() => {\\n//     loadData();\\n//  }, [])\\n \\n//  const loadData = async () => {\\n//    await fetch(\\\"https://jsonplaceholder.typicode.com/posts\\\")\\n//          .then(res => res.json())\\n//          .then(receivedData => setData(receivedData));\\n//  }\\n//  console.log('ssss',PRODUCTS)\\n  \\n  const PRODUCTS = [\\n    {category: 'Sporting Goods', price: '$49.99', stocked: true, name: 'Football'},\\n    {category: 'Sporting Goods', price: '$9.99', stocked: true, name: 'Baseball'},\\n    {category: 'Sporting Goods', price: '$29.99', stocked: false, name: 'Basketball'},\\n    {category: 'Electronics', price: '$99.99', stocked: true, name: 'iPod Touch'},\\n    {category: 'Electronics', price: '$399.99', stocked: false, name: 'iPhone 5'},\\n    {category: 'Electronics', price: '$199.99', stocked: true, name: 'Nexus 7'}\\n  ];\\n  return (\\n    <div>\\n      <FilterableProductTable products={PRODUCTS} />\\n    </div>\\n  );\\n}\\n\\n\\n//FilterableProductTable.js\\nimport SearchBar from './SearchBar';\\nimport ProductTable from './ProductTable';\\n\\nclass FilterableProductTable extends Component {\\n    constructor(props) {\\n      super(props);\\n      this.state = {\\n        filterText: '',\\n        inStockOnly: false\\n      };\\n    }\\n  \\n    handleFilterTextChange = (filterText)=> {\\n      this.setState({\\n        filterText: filterText\\n      });\\n    }\\n    \\n    handleInStockChange = (inStockOnly) => {\\n      this.setState({\\n        inStockOnly: inStockOnly\\n      })\\n    }\\n  \\n    render() {\\n      return (\\n        <>\\n          <SearchBar\\n            filterText={this.state.filterText}\\n            inStockOnly={this.state.inStockOnly}\\n            onFilterTextChange={this.handleFilterTextChange}\\n            onInStockChange={this.handleInStockChange}\\n          />\\n          <ProductTable\\n            products={this.props.products}\\n            filterText={this.state.filterText}\\n            inStockOnly={this.state.inStockOnly}\\n          />\\n        </>\\n      );\\n    }\\n  }\\n  \\n  \\n  //SearchBar.js\\n  const SearchBar =(props)=> {\\n    const  handleFilterTextChange =(e)=> {\\n        props.onFilterTextChange(e.target.value);\\n      }\\n      \\n      const handleInStockChange=(e) => {\\n        props.onInStockChange(e.target.checked);\\n      }\\n      \\n        return (\\n          <form>\\n            <input\\n              type=\\\"text\\\"\\n              placeholder=\\\"Search...\\\"\\n              value={props.filterText}\\n              onChange={handleFilterTextChange}\\n            />\\n            <p>\\n              <input\\n                type=\\\"checkbox\\\"\\n                checked={props.inStockOnly}\\n                onChange={handleInStockChange}\\n              />\\n              {' '}\\n              Only show products in stock\\n            </p>\\n          </form>\\n        );\\n    }\\n    \\n    \\n//ProductTable.js\\nconst ProductCategoryRow =(props)=> {\\n  const category = props.category;\\n  return (\\n    <tr>\\n      <th colSpan=\\\"2\\\">\\n        {category}\\n      </th>\\n    </tr>\\n  );\\n}\\n\\nconst ProductRow = (props)=>{\\n  const product = props.product;\\n  const name = product.stocked ?\\n    product.name :\\n    <span style={{color: 'red'}}>\\n      {product.name}\\n    </span>;\\n\\n  return (\\n    <tr>\\n      <td>{name}</td>\\n      <td>{product.price}</td>\\n    </tr>\\n  );\\n}\\n\\nconst ProductTable = (props)=> {\\n      const filterText = props.filterText;\\n      const inStockOnly = props.inStockOnly;\\n  \\n      const rows = [];\\n      let lastCategory = null;\\n  \\n      props.products.forEach((product) => {\\n        if ((product.name).toLowerCase().indexOf(filterText.toLowerCase()) === -1) {\\n          return;\\n        }\\n        if (inStockOnly && !product.stocked) {\\n          return;\\n        }\\n        if (product.category !== lastCategory) {\\n          rows.push(\\n            <ProductCategoryRow\\n              category={product.category}\\n              key={product.category} />\\n          );\\n        }\\n        rows.push(\\n          <ProductRow\\n            product={product}\\n            key={product.name}\\n          />\\n        );\\n        lastCategory = product.category;\\n      });\\n  \\n      return (\\n        <table>\\n          <thead>\\n            <tr>\\n              <th>Name</th>\\n              <th>Price</th>\\n            </tr>\\n          </thead>\\n          <tbody>{rows}</tbody>\\n        </table>\\n      );\\n  }\".trim();var countAdd=\"\\nclass App extends Component{\\n  state={ mockData:[] }\\n  \\ncomponentDidMount(){\\n  let url=\\\"https://jsonplaceholder.typicode.com/users\\\";\\n    axios.get(url)\\n     .then(res => {\\n        const mockData= res.data\\n        this.setState({ mockData })\\n    })\\n}\\n\\nrender() {\\n  return ( \\n   <div>\\n      {this.state.mockData.map((value) => (\\n          <Previews data={value}/> \\n      ))}\\n    </div>\\n  );\\n}\\n}\\n\\n  // Previews.js\\n  class Previews extends Component {\\n    state = { count: 0 };\\n    \\n    handleCount = () => {\\n      this.setState({ count: this.state.count + 1 })\\n    }\\n\\n    render() {\\n      return (\\n       <div>\\n         {this.state.count}\\n         <button onClick={this.handleCount}>btn</button>\\n            \\n            <div>{this.props.data.name}</div>\\n         </div>\\n       );\\n     }\\n   }\".trim();var DropdownSelect=/*#__PURE__*/function(_Component){_inherits(DropdownSelect,_Component);function DropdownSelect(){_classCallCheck(this,DropdownSelect);return _possibleConstructorReturn(this,_getPrototypeOf(DropdownSelect).apply(this,arguments));}_createClass(DropdownSelect,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Dropdown filter data on the basis of select key\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:dropSelect,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Check Filter\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:checkFilter,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"3. Update single card count onClick\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:countAdd,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return DropdownSelect;}(Component);export default withStyles(styles)(DropdownSelect);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/dropdownSelect.js"],"names":["React","Component","PrismCode","Prism","Grid","Paper","withStyles","List","Sidebar","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","dropSelect","trim","checkFilter","countAdd","DropdownSelect","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,SAAP,KAAsB,cAAtB,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,eAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CAGA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,eAAe,CAAE,SAAnB,CAA8BC,OAAO,CAAE,KAAvC,CAA8CC,QAAQ,CAAE,MAAxD,CAAf,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,KAAK,CAAE,CACLC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH,CAELN,OAAO,CAAEG,KAAK,CAACG,OAAN,CAAc,CAAd,CAFJ,CADgB,CAKvBC,QAAQ,CAAE,CACRF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA,CALa,CAQvBE,SAAS,CAAE,CACTC,SAAS,CAAE,QADF,CARY,CAAL,EAApB,CAaA,GAAMC,CAAAA,UAAU,CAAG,2yDA4EhBC,IA5EgB,EAAnB,CA8EA,GAAMC,CAAAA,WAAW,CAAG,27IAqLfD,IArLe,EAApB,CAuLA,GAAME,CAAAA,QAAQ,CAAG,q0BA0CXF,IA1CW,EAAjB,C,GA6CMG,CAAAA,c,8TACgB,CAClBC,UAAU,CAAC,iBAAMvB,CAAAA,KAAK,CAACwB,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAACb,KAA1B,EACE,8BAAI,oBAAC,OAAD,MAAJ,CADF,CADF,CADF,CAME,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEa,OAAO,CAACb,KAA1B,EACE,oBAAC,IAAD,MACE,mFADF,CAEE,2BAAK,KAAK,CAAEN,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEY,UADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAFF,CASE,8BATF,CAWE,gDAXF,CAYE,2BAAK,KAAK,CAAEZ,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEc,WADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAZF,CAmBE,8BAnBF,CAoBE,8BApBF,CAqBE,mEArBF,CAsBE,2BAAK,KAAK,CAAEd,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEe,QADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAtBF,CADF,CADF,CANF,CADF,CA2CD,C,4BAjD0BvB,S,EAoD7B,cAAgBK,CAAAA,UAAU,CAACO,MAAD,CAAV,CAAmBY,cAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport PrismCode from '../prismCode';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../styles.css'\nimport Sidebar from '../sidebar';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst dropSelect = `\nclass App extends Component {\n  state = {\n      mockData: [],\n      name: \"\"\n    };\n\n  handleSubmitCourse = (e) => {\n    alert(\"Your selected value is: \" + this.state.name);\n    e.preventDefault();\n  }\n\n  handleChange = e => {\n    this.setState({ value: e.target.value });\n  };\n\n  handleChangeCourse = e => {\n    this.setState({ name: e.target.value });\n  };\n\n  getUnique(arr, comp) {\n    const unique = arr\n      //store the comparison values in array\n      .map(e => e[comp])\n\n      // store the keys of the unique objects\n      .map((e, i, final) => final.indexOf(e) === i && i)\n\n      // eliminate the dead keys & store unique objects\n      .filter(e => arr[e])\n\n      .map(e => arr[e]);\n\n    return unique;\n  }\n  \ncomponentDidMount(){\n  let url=\"https://jsonplaceholder.typicode.com/users/?q=\";\n    axios.get(url)\n     .then(res => {\n        const mockData= res.data\n        this.setState({ mockData: mockData })\n    })\n  }\n\n\n  render() {\n    const uniqueCouse = this.getUnique(this.state.mockData, \"username\");\n\n    const mockData = this.state.mockData;\n    const name = this.state.name;\n\n    const filterDropdown = mockData.filter(function(result) {\n      return result.username === name;\n    });\n\n    return (\n      <div>\n        <form onSubmit={this.handleSubmitCourse}>\n            <select value={name} onChange={this.handleChangeCourse}>\n              {uniqueCouse.map(name => (\n                <option key={name.id} value={name.username}>\n                  {name.username}\n                </option>\n              ))}\n            </select>\n            \n          <div>\n            {filterDropdown.map(name => (\n              <div key={name.id}>{name.name}</div>\n            ))}\n          </div>\n        </form>\n      </div>\n    );\n  }\n}`.trim();\n\nconst checkFilter = `\n//App.js\n\nimport FilterableProductTable from './FilterableProductTable'\n\nconst App =() =>{\n//   const [PRODUCTS, setData ] = useState([]);\n  \n//   useEffect(() => {\n//     loadData();\n//  }, [])\n \n//  const loadData = async () => {\n//    await fetch(\"https://jsonplaceholder.typicode.com/posts\")\n//          .then(res => res.json())\n//          .then(receivedData => setData(receivedData));\n//  }\n//  console.log('ssss',PRODUCTS)\n  \n  const PRODUCTS = [\n    {category: 'Sporting Goods', price: '$49.99', stocked: true, name: 'Football'},\n    {category: 'Sporting Goods', price: '$9.99', stocked: true, name: 'Baseball'},\n    {category: 'Sporting Goods', price: '$29.99', stocked: false, name: 'Basketball'},\n    {category: 'Electronics', price: '$99.99', stocked: true, name: 'iPod Touch'},\n    {category: 'Electronics', price: '$399.99', stocked: false, name: 'iPhone 5'},\n    {category: 'Electronics', price: '$199.99', stocked: true, name: 'Nexus 7'}\n  ];\n  return (\n    <div>\n      <FilterableProductTable products={PRODUCTS} />\n    </div>\n  );\n}\n\n\n//FilterableProductTable.js\nimport SearchBar from './SearchBar';\nimport ProductTable from './ProductTable';\n\nclass FilterableProductTable extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        filterText: '',\n        inStockOnly: false\n      };\n    }\n  \n    handleFilterTextChange = (filterText)=> {\n      this.setState({\n        filterText: filterText\n      });\n    }\n    \n    handleInStockChange = (inStockOnly) => {\n      this.setState({\n        inStockOnly: inStockOnly\n      })\n    }\n  \n    render() {\n      return (\n        <>\n          <SearchBar\n            filterText={this.state.filterText}\n            inStockOnly={this.state.inStockOnly}\n            onFilterTextChange={this.handleFilterTextChange}\n            onInStockChange={this.handleInStockChange}\n          />\n          <ProductTable\n            products={this.props.products}\n            filterText={this.state.filterText}\n            inStockOnly={this.state.inStockOnly}\n          />\n        </>\n      );\n    }\n  }\n  \n  \n  //SearchBar.js\n  const SearchBar =(props)=> {\n    const  handleFilterTextChange =(e)=> {\n        props.onFilterTextChange(e.target.value);\n      }\n      \n      const handleInStockChange=(e) => {\n        props.onInStockChange(e.target.checked);\n      }\n      \n        return (\n          <form>\n            <input\n              type=\"text\"\n              placeholder=\"Search...\"\n              value={props.filterText}\n              onChange={handleFilterTextChange}\n            />\n            <p>\n              <input\n                type=\"checkbox\"\n                checked={props.inStockOnly}\n                onChange={handleInStockChange}\n              />\n              {' '}\n              Only show products in stock\n            </p>\n          </form>\n        );\n    }\n    \n    \n//ProductTable.js\nconst ProductCategoryRow =(props)=> {\n  const category = props.category;\n  return (\n    <tr>\n      <th colSpan=\"2\">\n        {category}\n      </th>\n    </tr>\n  );\n}\n\nconst ProductRow = (props)=>{\n  const product = props.product;\n  const name = product.stocked ?\n    product.name :\n    <span style={{color: 'red'}}>\n      {product.name}\n    </span>;\n\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{product.price}</td>\n    </tr>\n  );\n}\n\nconst ProductTable = (props)=> {\n      const filterText = props.filterText;\n      const inStockOnly = props.inStockOnly;\n  \n      const rows = [];\n      let lastCategory = null;\n  \n      props.products.forEach((product) => {\n        if ((product.name).toLowerCase().indexOf(filterText.toLowerCase()) === -1) {\n          return;\n        }\n        if (inStockOnly && !product.stocked) {\n          return;\n        }\n        if (product.category !== lastCategory) {\n          rows.push(\n            <ProductCategoryRow\n              category={product.category}\n              key={product.category} />\n          );\n        }\n        rows.push(\n          <ProductRow\n            product={product}\n            key={product.name}\n          />\n        );\n        lastCategory = product.category;\n      });\n  \n      return (\n        <table>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Price</th>\n            </tr>\n          </thead>\n          <tbody>{rows}</tbody>\n        </table>\n      );\n  }`.trim();\n\nconst countAdd = `\nclass App extends Component{\n  state={ mockData:[] }\n  \ncomponentDidMount(){\n  let url=\"https://jsonplaceholder.typicode.com/users\";\n    axios.get(url)\n     .then(res => {\n        const mockData= res.data\n        this.setState({ mockData })\n    })\n}\n\nrender() {\n  return ( \n   <div>\n      {this.state.mockData.map((value) => (\n          <Previews data={value}/> \n      ))}\n    </div>\n  );\n}\n}\n\n  // Previews.js\n  class Previews extends Component {\n    state = { count: 0 };\n    \n    handleCount = () => {\n      this.setState({ count: this.state.count + 1 })\n    }\n\n    render() {\n      return (\n       <div>\n         {this.state.count}\n         <button onClick={this.handleCount}>btn</button>\n            \n            <div>{this.props.data.name}</div>\n         </div>\n       );\n     }\n   }`.trim();\n\n\nclass DropdownSelect extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Dropdown filter data on the basis of select key</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={dropSelect}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Check Filter</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={checkFilter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>3. Update single card count onClick</b>\n              <div style={titles}>\n                <PrismCode\n                  code={countAdd}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DropdownSelect));"]},"metadata":{},"sourceType":"module"}