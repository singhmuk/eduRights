{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/nodeJs/nodeDeep/codes.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst UDP_server = `\nvar dgram = require('dgram');\nvar client = dgram.createSocket(\"udp4\");\nvar server = dgram.createSocket(\"udp4\");\nvar message = process.argv[2] || \"message\";\nmessage = new Buffer(message);\nserver.on(\"message\", function(msg) {\n    process.stdout.write(\"Got message: \" + msg + \"\\n\");\n    process.exit();\n}).bind(41234);\n\nclient.send(message, 0, message.length, 41234, \"localhost\");\n`.trim();\nconst assert = `var assert = require('assert');\n    assert(5 > 7);\n`.trim();\nconst http = `var http = require('http');\nhttp.createServer(function (req, res) {\n res.writeHead(200, { 'Content-Type': 'text/html' });\n   //res.write('write name in url to see o/p');\n     res.write(req.url);\n     res.end();\n}).listen(4000);\n`.trim();\nconst https = `var https = require('https');\nhttps.createServer(function (req, res) {\n     res.writeHead(200, {'Content-Type': 'text/plain'});\n     res.write('Hello World!');\n     res.end();\n}).listen(8080);\n`.trim();\nconst HTTPWithoutLibrary = `const https = require('https')\nconst url = 'https://api.darksky.net/forecast/9d1465c6f3bb7a6c71944bdd8548d026\n/40,-75'\nconst request = https.request(url, (response) => {\n let data = ''\n   response.on('data', (chunk) => {\n   data = data + chunk.toString()\n })\n \n response.on('end', () => {\n   const body = JSON.parse(data) \n   console.log(body) \n  })\n})\n\nrequest.on('error', (error) => {\n   console.log('An error', error)\n})\nrequest.end()\n`.trim();\nconst nets = `var net = require('net');\n`.trim();\nconst URL = `var url = require('url');\nvar adr = 'http://localhost:8080/default.htm?year=2017&month=february';\nvar q = url.parse(adr, true);\n  console.log(q.host);\n  console.log(q.pathname);\n  console.log(q.search);\n  \nvar qdata = q.query;\n  console.log(qdata.month);\n`.trim();\nconst sendEmail = `var nodemailer = require('nodemailer');\nvar transporter = nodemailer.createTransport({\n   service: 'gmail',\n     auth: {\n     user: 'youremail@gmail.com',\n     pass: 'yourpassword'\n     }\n});\n\nvar mailOptions = {\n     from: 'youremail@gmail.com',\n     to: 'myfriend@yahoo.com',\n     subject: 'Sending Email using Node.js',\n     text: 'That was easy!'\n    };\n    \ntransporter.sendMail(mailOptions, function(error, info){\n if (error) {\n   console.log(error);\n   } \n   else {\n   console.log('Email sent: ' + info.response);\n }\n});\n`.trim();\nconst crypto = `\nconst crypto = require(\"crypto\");\n\n//.createHash('sha1')md5,sha1\n\nconst hash = crypto.createHash(\"sha256\").update(\"password\").digest(\"hex\");\nconsole.log(hash);`.trim();\nconst decrypo = `\nconst crypto = require(\"crypto\");\n\nconst algorithm = \"aes-192-cbc\";\nconst password = \"password used to generate key\";\nconst key = crypto.scryptSync(password, \"salt\", 24);\nconst decipher = crypto.createDecipher(algorithm, key);\n\nlet decrypted = \"\";\ndecipher.on(\"readable\", () => {\n  let chunk;\n  while (null !== (chunk = decipher.read())) {\n    encrypted += chunk.toString(\"utf8\");\n  }\n});\n\ndecipher.on(\"end\", () => console.log(decrypted));\n\nconst encrypted = \"\";\ndecipher.write(encrypted, \"hex\");\ndecipher.end();`.trim();\nconst encrde = `\nconst crypto = require(\"crypto\");\n\nconst algorithm = \"aes-256-cbc\";\nconst key = crypto.randomBytes(32);\nconst iv = crypto.randomBytes(16);\n\nfunction encrypt(text) {\n  let cipher = crypto.createCipheriv(\"aes-256-cbc\", Buffer.from(key), iv);\n  let encrypted = cipher.update(text);\n  \n  encrypted = Buffer.concat([encrypted, cipher.final()]);\n  return { iv: iv.toString(\"hex\"), encryptedData: encrypted.toString(\"hex\") };\n}\n\nfunction decrypt(text) {\n  let iv = Buffer.from(text.iv, \"hex\");\n  let encryptedText = Buffer.from(text.encryptedData, \"hex\");\n  let decipher = crypto.createDecipheriv(\"aes-256-cbc\", Buffer.from(key), iv);\n  let decrypted = decipher.update(encryptedText);\n  \n  decrypted = Buffer.concat([decrypted, decipher.final()]);\n  return decrypted.toString();\n}\nvar hw = encrypt(\"Some serious stuff\");\nconsole.log(hw);\nconsole.log(decrypt(hw));`.trim();\nconst encrypt = `\nconst crypto = require(\"crypto\");\n\nconst algorithm = \"aes-192-cbc\";\nconst password = \"password used to generate key\";\nconst key = crypto.scryptSync(password, \"salt\", 24);\nconst cipher = crypto.createCipher(algorithm, key);\n\nlet encrypted = \"\";\ncipher.on(\"readable\", () => {\n  let chunk;\n  while (null !== (chunk = cipher.read())) {\n    encrypted += chunk.toString(\"hex\");\n  }\n});\n\ncipher.on(\"end\", () => console.log(encrypted));\n\ncipher.write(\"some clear text data\");\n\ncipher.end();`.trim();\nconst dns = `\nconst dns = require(\"dns\");\n\ndns.lookup(\"edurights.herokuapp.com\", (err, value) => {\n  if (err) {\n    console.log(err);\n    return;\n  }\n\n  console.log(value);\n});`.trim();\nconst net = `\nconst net = require(\"net\");\n\nconst server = net.createServer();\n\nserver.listen({\n  host: \"localhost\",\n  port: 5000,\n});\n\nserver.on(\"connection\", (client) => {\n  console.log(\"Client connected\");\n});\n\n\n//\n//run in another cli\n\nconst net = require(\"net\");\nconst client = net.createConnection({\n  port: 5000,\n});\n`.trim();\nconst os = `\nconst os = require(\"os\");\n\nconsole.log(os.arch());\n\nconsole.log(os.cpus());\n\nconsole.log(os.freemem());\n\nconsole.log(os.getPriority(13512));\n\nconsole.log(os.homedir());\n\nconsole.log(os.hostname());\n\nconsole.log(os.networkInterfaces());\n\nconsole.log(os.platform());\n\nconsole.log(os.totalmem());\n\nconsole.log(os.userInfo());`.trim();\nconst path = `\nconst path = require(\"path\");\n\nconst pathObj = path.parse(__filename);\nconst pathDit = path.dirname(\"/path/path.js\");\nconst pathBasename = path.basename(\"/path/path.js\");\nconst pathExtname = path.extname(\"/path/path.js\");\nconst pathNormalize = path.normalize(\"/path/path.js\");\nconst pathJoin = path.join(\"path\", \"os\", \"...\", \"output.txt\");\n\nconsole.log(pathJoin);\n`.trim();\n\nclass NodeJsCodes extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, \"1. UDP Server\"), \"Let's create a simple program that allows the user to send data between two  UDP servers:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }), \"node udp.js \\\"my message\\\" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }), \"Which will result in the following output:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }), \"Got message: my message\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: UDP_server,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, \"2. Crypto\"), \"crypto module to perform cryptographic operations on data. \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }), \"can do cryptographic operations on strings, buffer, and streams.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: crypto,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, \"3. Decrypo\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: decrypo,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, \"4. Encrypt\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: encrypt,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, \"Encrypt-Decrypt\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: encrde,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, \"5. DNS\"), \"DNS module use to find out information about domain names and IP addresses.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }), \"reverse function to find any reverse DNS records that are configured for IP addresses.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: dns,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, \"6. Net\"), \"how to make a server / client pair of programs using the low level Net module and also how to create a simple web server using the NodeJS HTTP module.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: net,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, \"7. OS\"), \"The os module provides API for getting information about hardware related like CPU, memory, directories, IP address and many more.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, \"os.arch(): \"), \"Return the architecture of the processor.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, \"os.cpus(): \"), \"Returns an array of the object which contains information of logical CPUs.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, \"os.freemem(): \"), \"Returns free main memory bytes in integer.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, \"os.getPriority(pid): \"), \"Returns the scheduling priority of the process.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, \"os.homedir(): \"), \"Method current user\\u2019s home directory as a string.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, \"os.hostname(): \"), \"Returns the hostname of the operating system.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, \"os.networkInterfaces():: \"), \"Method returns objects containing information about network interfacing devices.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }, \"os.platform(): \"), \"Return information about platform.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, \"os.totalmem(): \"), \"Returns total system memory in bytes as a string.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: os,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, \"8. Path\"), \"The path module provides a way to work with files and directory path.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, \"path.dirname(): \"), \"This method allows you to get the directory name of a given path. It does not return the last part of the given path.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }, \"path.basename(): \"), \"Method returns the last part of a given path.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }, \"path.extname(): \"), \"Method returns the extension of the path from the last part of the path.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }, \"If there is no . (period) in the last portion of the path, then an empty string is returned.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, \"path.normalize(): \"), \"Method normalize the given path, by resolving \\u2018..\\u2019, \\u2018.\\u2019 etc.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }, \"If multiple slashes are found they are replaced by a single slash.\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }, \"path.join(): \"), \"Joins all the given path segments together. All the arguments must be string.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: path,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, \"Node.js HTTP Module\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }, \"A set of functions you want to include in your application.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }, \"Node.js has a set of built-in modules which you can use without any further installation.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    }, \"assert - Provides a set of assertion tests The assert module provides a way of testing expressions. If the expression evaluates to 0, or false, an assertion failure is being caused, and the program is terminated.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: assert,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    })), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }, \"o/p: \"), \"AssertionError: false == true\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    }, \"Method -\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    }, \"assert() - Checks if a value is true. Same as assert.ok()\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }, \"deepEqual() - Checks if two values are equal\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }, \"deepStrictEqual() - Checks if two values are equal, using the strict equal operator (===)\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }, \"http - To make Node.js act as an HTTP server\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }), \"The HTTP module provides a way of making Node.js transfer data over HTTP\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: http,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }, \"https - To make Node.js act as an HTTPS server.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    }), \"The HTTPS module provides a way of making Node.js transfer data over HTTP TLS/SSL protocol, which is the secure HTTP protocol.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: https,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    }, \"createServer() -Creates an HTTPS server\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    }, \"get() - Sets the method to GET, and returns an object containing the users request\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489\n      },\n      __self: this\n    }, \"globalAgent - Returns the HTTPS Agent\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    }, \"request - Makes a request to a secure web server\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    }, \"HTTP Requests Without a Library\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: HTTPWithoutLibrary,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }, \"net - To create servers and clients\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: nets,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }, \"connect() - Creates a new connection to the server, and returns a new Socket\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }, \"createConnection() - Creates a new connection to the server, and returns a new Socket\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }, \"createServer() -Creates a new server\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }, \"isIP - Checks if the specified value is an IP address\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }, \"isIPv4 - Checks if the specified value is an IPv4 address\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }, \"isIPv6 - Checks if the specified value is an IPv6 address\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }, \"HTTP Requests Without a Library\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: HTTPWithoutLibrary,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }, \"Node.js URL Module\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    }), \"The URL module splits up a web address into readable parts. Parse an address with the url.parse() method, and it will return a URL object with each part of the address as properties:\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: URL,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }), \"o/p - localhost:8080 /default\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552\n      },\n      __self: this\n    }), \"?year=2017&month=february\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554\n      },\n      __self: this\n    }), \"february\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    }, \"Node.js Send an Email\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }), \"The Nodemailer Module The Nodemailer module makes it easy to send emails from your computer.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    }, \"Send an Email\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565\n      },\n      __self: this\n    }), \"Use the username and password from your selected email provider to send an email. This tutorial wi ll show you how to use your Gmail account to send an email:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: sendEmail,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(NodeJsCodes);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/nodeJs/nodeDeep/codes.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","UDP_server","trim","assert","http","https","HTTPWithoutLibrary","nets","URL","sendEmail","crypto","decrypo","encrde","encrypt","dns","net","os","path","NodeJsCodes","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,UAAtB,EAAkCC,IAAlC,QAA8C,mBAA9C;AAEA,OAAO,0BAAP;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AAGA,MAAMC,MAAM,GAAG;AAAEC,EAAAA,eAAe,EAAE,SAAnB;AAA8BC,EAAAA,OAAO,EAAE,KAAvC;AAA8CC,EAAAA,QAAQ,EAAE;AAAxD,CAAf;;AAEA,MAAMC,MAAM,GAAGC,KAAK,KAAK;AACvBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH;AAELN,IAAAA,OAAO,EAAEG,KAAK,CAACG,OAAN,CAAc,CAAd;AAFJ,GADgB;AAKvBC,EAAAA,QAAQ,EAAE;AACRF,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd;AADA,GALa;AAQvBE,EAAAA,SAAS,EAAE;AACTC,IAAAA,SAAS,EAAE;AADF;AARY,CAAL,CAApB;;AAaA,MAAMC,UAAU,GAAI;;;;;;;;;;;;CAAD,CAYjBC,IAZiB,EAAnB;AAcA,MAAMC,MAAM,GAAI;;CAAD,CAEbD,IAFa,EAAf;AAIA,MAAME,IAAI,GAAI;;;;;;;CAAD,CAOXF,IAPW,EAAb;AASA,MAAMG,KAAK,GAAI;;;;;;CAAD,CAMZH,IANY,EAAd;AAQA,MAAMI,kBAAkB,GAAI;;;;;;;;;;;;;;;;;;;CAAD,CAmBzBJ,IAnByB,EAA3B;AAqBA,MAAMK,IAAI,GAAI;CAAD,CACXL,IADW,EAAb;AAGA,MAAMM,GAAG,GAAI;;;;;;;;;CAAD,CASVN,IATU,EAAZ;AAWA,MAAMO,SAAS,GAAI;;;;;;;;;;;;;;;;;;;;;;;;CAAD,CAwBhBP,IAxBgB,EAAlB;AA0BA,MAAMQ,MAAM,GAAI;;;;;;mBAAD,CAMKR,IANL,EAAf;AAQA,MAAMS,OAAO,GAAI;;;;;;;;;;;;;;;;;;;;gBAAD,CAoBCT,IApBD,EAAhB;AAsBA,MAAMU,MAAM,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;0BAAD,CA0BYV,IA1BZ,EAAf;AA4BA,MAAMW,OAAO,GAAI;;;;;;;;;;;;;;;;;;;;cAAD,CAoBDX,IApBC,EAAhB;AAsBA,MAAMY,GAAG,GAAI;;;;;;;;;;IAAD,CAUPZ,IAVO,EAAZ;AAYA,MAAMa,GAAG,GAAI;;;;;;;;;;;;;;;;;;;;;;CAAD,CAsBVb,IAtBU,EAAZ;AAwBA,MAAMc,EAAE,GAAI;;;;;;;;;;;;;;;;;;;;;4BAAD,CAqBkBd,IArBlB,EAAX;AAuBA,MAAMe,IAAI,GAAI;;;;;;;;;;;CAAD,CAWXf,IAXW,EAAb;;AAcA,MAAMgB,WAAN,SAA0BrC,SAA1B,CAAoC;AAClCsC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,UAAU,CAAC,MAAMtC,KAAK,CAACuC,YAAN,EAAP,EAA6B,CAA7B,CAAV;AACD;;AACDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB;AACA,WACE,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAED,OAAO,CAAC5B,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAJ,CADF,CADF,CADF,EAME,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAE4B,OAAO,CAAC5B,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,+FAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,iCAK2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAL3B,gDAM4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAN5C,6BAQE;AAAK,MAAA,KAAK,EAAEN,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEY,UADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CARF,EAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfF,EAiBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAjBF,iEAkB6D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlB7D,sEAoBE;AAAK,MAAA,KAAK,EAAEZ,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEqB,MADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CApBF,EA2BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3BF,EA6BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBA7BF,EA8BE;AAAK,MAAA,KAAK,EAAErB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEsB,OADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA9BF,EAqCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArCF,EAuCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAvCF,EAwCE;AAAK,MAAA,KAAK,EAAEtB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEwB,OADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAxCF,EA+CE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/CF,EAgDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhDF,EAkDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAlDF,EAmDE;AAAK,MAAA,KAAK,EAAExB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEuB,MADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAnDF,EA0DE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1DF,EA4DE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA5DF,iFA6D6E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7D7E,4FA+DE;AAAK,MAAA,KAAK,EAAEvB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEyB,GADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA/DF,EAsEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtEF,EAwEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAxEF,4JA2EE;AAAK,MAAA,KAAK,EAAEzB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAE0B,GADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA3EF,EAkFE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlFF,EAoFE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eApFF,wIAuFE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvFF,EAwFE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAJ,8CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAJ,+EAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAJ,+CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAJ,oDAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAJ,2DALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAJ,kDANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAJ,qFAPF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAJ,uCARF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAJ,sDATF,CAxFF,EAmGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnGF,EAoGE;AAAK,MAAA,KAAK,EAAE1B,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAE2B,EADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CApGF,EA2GE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3GF,EA6GE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBA7GF,2EA+GE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/GF,EAgHE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAJ,0HADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAJ,kDAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAJ,6EAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sGADF,CAJF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAJ,qFARF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4EADF,CATF,EAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAJ,kFAZF,CAhHF,EA8HE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9HF,EA+HE;AAAK,MAAA,KAAK,EAAE3B,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAE4B,IADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA/HF,EAsIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtIF,EAuIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvIF,EAyIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAzIF,EA0IE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1IF,EA2IE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qEA3IF,EA4IE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5IF,EA6IE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mGADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8NAJF,CA7IF,EAuJE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvJF,EAyJE;AAAK,MAAA,KAAK,EAAE5B,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEc,MADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAzJF,EAgKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAhKF,mCAiKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjKF,EAkKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlKF,EAmKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAnKF,EAoKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApKF,EAqKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mEADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mGAHF,CArKF,EA0KE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1KF,EA2KE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3KF,EA6KE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDA7KF,EA8KE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9KF,8EAgLE;AAAK,MAAA,KAAK,EAAEd,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEe,IADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAhLF,EAuLE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvLF,EAwLE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxLF,EA0LE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDA1LF,EA2LE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3LF,oIA8LE;AAAK,MAAA,KAAK,EAAEf,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEgB,KADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA9LF,EAqME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4FAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DAJF,CArMF,EA2ME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3MF,EA4ME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5MF,EA8ME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCA9MF,EA+ME;AAAK,MAAA,KAAK,EAAEhB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEiB,kBADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA/MF,EAsNE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtNF,EAuNE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvNF,EAyNE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAzNF,EA0NE;AAAK,MAAA,KAAK,EAAEjB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEkB,IADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA1NF,EAiOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjOF,EAkOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sFADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+FAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mEALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mEANF,CAlOF,EA0OE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1OF,EA2OE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3OF,EA6OE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCA7OF,EA8OE;AAAK,MAAA,KAAK,EAAElB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEiB,kBADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA9OF,EAqPE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArPF,EAsPE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtPF,EAwPE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAxPF,EAyPE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzPF,4LA6PE;AAAK,MAAA,KAAK,EAAEjB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEmB,GADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA7PF,EAoQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApQF,mCAuQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvQF,+BAyQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzQF,cA2QE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3QF,EA4QE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5QF,EA8QE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BA9QF,EA+QE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/QF,kGAkRE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlRF,EAmRE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAnRF,EAoRE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApRF,oKAwRE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxRF,EAyRE;AAAK,MAAA,KAAK,EAAEnB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEoB,SADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAzRF,CADF,CADF,CANF,CADF;AA8SD;;AApTiC;;AAuTpC,eAAgBxB,UAAU,CAACQ,MAAD,CAAV,CAAmByB,WAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst UDP_server = `\nvar dgram = require('dgram');\nvar client = dgram.createSocket(\"udp4\");\nvar server = dgram.createSocket(\"udp4\");\nvar message = process.argv[2] || \"message\";\nmessage = new Buffer(message);\nserver.on(\"message\", function(msg) {\n    process.stdout.write(\"Got message: \" + msg + \"\\n\");\n    process.exit();\n}).bind(41234);\n\nclient.send(message, 0, message.length, 41234, \"localhost\");\n`.trim();\n\nconst assert = `var assert = require('assert');\n    assert(5 > 7);\n`.trim()\n\nconst http = `var http = require('http');\nhttp.createServer(function (req, res) {\n res.writeHead(200, { 'Content-Type': 'text/html' });\n   //res.write('write name in url to see o/p');\n     res.write(req.url);\n     res.end();\n}).listen(4000);\n`.trim()\n\nconst https = `var https = require('https');\nhttps.createServer(function (req, res) {\n     res.writeHead(200, {'Content-Type': 'text/plain'});\n     res.write('Hello World!');\n     res.end();\n}).listen(8080);\n`.trim()\n\nconst HTTPWithoutLibrary = `const https = require('https')\nconst url = 'https://api.darksky.net/forecast/9d1465c6f3bb7a6c71944bdd8548d026\n/40,-75'\nconst request = https.request(url, (response) => {\n let data = ''\n   response.on('data', (chunk) => {\n   data = data + chunk.toString()\n })\n \n response.on('end', () => {\n   const body = JSON.parse(data) \n   console.log(body) \n  })\n})\n\nrequest.on('error', (error) => {\n   console.log('An error', error)\n})\nrequest.end()\n`.trim()\n\nconst nets = `var net = require('net');\n`.trim()\n\nconst URL = `var url = require('url');\nvar adr = 'http://localhost:8080/default.htm?year=2017&month=february';\nvar q = url.parse(adr, true);\n  console.log(q.host);\n  console.log(q.pathname);\n  console.log(q.search);\n  \nvar qdata = q.query;\n  console.log(qdata.month);\n`.trim()\n\nconst sendEmail = `var nodemailer = require('nodemailer');\nvar transporter = nodemailer.createTransport({\n   service: 'gmail',\n     auth: {\n     user: 'youremail@gmail.com',\n     pass: 'yourpassword'\n     }\n});\n\nvar mailOptions = {\n     from: 'youremail@gmail.com',\n     to: 'myfriend@yahoo.com',\n     subject: 'Sending Email using Node.js',\n     text: 'That was easy!'\n    };\n    \ntransporter.sendMail(mailOptions, function(error, info){\n if (error) {\n   console.log(error);\n   } \n   else {\n   console.log('Email sent: ' + info.response);\n }\n});\n`.trim()\n\nconst crypto = `\nconst crypto = require(\"crypto\");\n\n//.createHash('sha1')md5,sha1\n\nconst hash = crypto.createHash(\"sha256\").update(\"password\").digest(\"hex\");\nconsole.log(hash);`.trim();\n\nconst decrypo = `\nconst crypto = require(\"crypto\");\n\nconst algorithm = \"aes-192-cbc\";\nconst password = \"password used to generate key\";\nconst key = crypto.scryptSync(password, \"salt\", 24);\nconst decipher = crypto.createDecipher(algorithm, key);\n\nlet decrypted = \"\";\ndecipher.on(\"readable\", () => {\n  let chunk;\n  while (null !== (chunk = decipher.read())) {\n    encrypted += chunk.toString(\"utf8\");\n  }\n});\n\ndecipher.on(\"end\", () => console.log(decrypted));\n\nconst encrypted = \"\";\ndecipher.write(encrypted, \"hex\");\ndecipher.end();`.trim();\n\nconst encrde = `\nconst crypto = require(\"crypto\");\n\nconst algorithm = \"aes-256-cbc\";\nconst key = crypto.randomBytes(32);\nconst iv = crypto.randomBytes(16);\n\nfunction encrypt(text) {\n  let cipher = crypto.createCipheriv(\"aes-256-cbc\", Buffer.from(key), iv);\n  let encrypted = cipher.update(text);\n  \n  encrypted = Buffer.concat([encrypted, cipher.final()]);\n  return { iv: iv.toString(\"hex\"), encryptedData: encrypted.toString(\"hex\") };\n}\n\nfunction decrypt(text) {\n  let iv = Buffer.from(text.iv, \"hex\");\n  let encryptedText = Buffer.from(text.encryptedData, \"hex\");\n  let decipher = crypto.createDecipheriv(\"aes-256-cbc\", Buffer.from(key), iv);\n  let decrypted = decipher.update(encryptedText);\n  \n  decrypted = Buffer.concat([decrypted, decipher.final()]);\n  return decrypted.toString();\n}\nvar hw = encrypt(\"Some serious stuff\");\nconsole.log(hw);\nconsole.log(decrypt(hw));`.trim();\n\nconst encrypt = `\nconst crypto = require(\"crypto\");\n\nconst algorithm = \"aes-192-cbc\";\nconst password = \"password used to generate key\";\nconst key = crypto.scryptSync(password, \"salt\", 24);\nconst cipher = crypto.createCipher(algorithm, key);\n\nlet encrypted = \"\";\ncipher.on(\"readable\", () => {\n  let chunk;\n  while (null !== (chunk = cipher.read())) {\n    encrypted += chunk.toString(\"hex\");\n  }\n});\n\ncipher.on(\"end\", () => console.log(encrypted));\n\ncipher.write(\"some clear text data\");\n\ncipher.end();`.trim();\n\nconst dns = `\nconst dns = require(\"dns\");\n\ndns.lookup(\"edurights.herokuapp.com\", (err, value) => {\n  if (err) {\n    console.log(err);\n    return;\n  }\n\n  console.log(value);\n});`.trim();\n\nconst net = `\nconst net = require(\"net\");\n\nconst server = net.createServer();\n\nserver.listen({\n  host: \"localhost\",\n  port: 5000,\n});\n\nserver.on(\"connection\", (client) => {\n  console.log(\"Client connected\");\n});\n\n\n//\n//run in another cli\n\nconst net = require(\"net\");\nconst client = net.createConnection({\n  port: 5000,\n});\n`.trim();\n\nconst os = `\nconst os = require(\"os\");\n\nconsole.log(os.arch());\n\nconsole.log(os.cpus());\n\nconsole.log(os.freemem());\n\nconsole.log(os.getPriority(13512));\n\nconsole.log(os.homedir());\n\nconsole.log(os.hostname());\n\nconsole.log(os.networkInterfaces());\n\nconsole.log(os.platform());\n\nconsole.log(os.totalmem());\n\nconsole.log(os.userInfo());`.trim();\n\nconst path = `\nconst path = require(\"path\");\n\nconst pathObj = path.parse(__filename);\nconst pathDit = path.dirname(\"/path/path.js\");\nconst pathBasename = path.basename(\"/path/path.js\");\nconst pathExtname = path.extname(\"/path/path.js\");\nconst pathNormalize = path.normalize(\"/path/path.js\");\nconst pathJoin = path.join(\"path\", \"os\", \"...\", \"output.txt\");\n\nconsole.log(pathJoin);\n`.trim();\n\n\nclass NodeJsCodes extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. UDP Server</h3>\n              Let's create a simple program that allows the user to send data between two  UDP servers:\n              <br />\n              <br />\n              node udp.js \"my message\" <br />\n              Which will result in the following output:<br />\n              Got message: my message\n              <div style={titles}>\n                <PrismCode\n                  code={UDP_server}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Crypto</h3>\n              crypto module to perform cryptographic operations on data. <br />\n              can do cryptographic operations on strings, buffer, and streams.\n              <div style={titles}>\n                <PrismCode\n                  code={crypto}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Decrypo</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={decrypo}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Encrypt</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={encrypt}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Encrypt-Decrypt</b>\n              <div style={titles}>\n                <PrismCode\n                  code={encrde}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. DNS</h3>\n              DNS module use to find out information about domain names and IP addresses.<br />\n              reverse function to find any reverse DNS records that are configured for IP addresses.\n              <div style={titles}>\n                <PrismCode\n                  code={dns}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Net</h3>\n              how to make a server / client pair of programs using the low level Net module and also how to create a simple web\n              server using the NodeJS HTTP module.\n              <div style={titles}>\n                <PrismCode\n                  code={net}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7. OS</h3>\n              The os module provides API for getting information about hardware related like CPU, memory, directories, IP address\n              and many more.\n              <br />\n              <ul>\n                <li><b>os.arch(): </b>Return the architecture of the processor.</li>\n                <li><b>os.cpus(): </b>Returns an array of the object which contains information of logical CPUs.</li>\n                <li><b>os.freemem(): </b>Returns free main memory bytes in integer.</li>\n                <li><b>os.getPriority(pid): </b>Returns the scheduling priority of the process.</li>\n                <li><b>os.homedir(): </b>Method current user’s home directory as a string.</li>\n                <li><b>os.hostname(): </b>Returns the hostname of the operating system.</li>\n                <li><b>os.networkInterfaces():: </b>Method returns objects containing information about network interfacing devices.</li>\n                <li><b>os.platform(): </b>Return information about platform.</li>\n                <li><b>os.totalmem(): </b>Returns total system memory in bytes as a string.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={os}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>8. Path</h3>\n              The path module provides a way to work with files and directory path.\n              <br />\n              <ul>\n                <li><b>path.dirname(): </b>This method allows you to get the directory name of a given path. It does not return the last part of the given path.</li>\n                <li><b>path.basename(): </b>Method returns the last part of a given path.</li>\n                <li><b>path.extname(): </b>Method returns the extension of the path from the last part of the path.</li>\n                <ul>\n                  <li>If there is no . (period) in the last portion of the path, then an empty string is returned.</li>\n                </ul>\n                <br />\n                <li><b>path.normalize(): </b>Method normalize the given path, by resolving ‘..’, ‘.’ etc.</li>\n                <ul>\n                  <li>If multiple slashes are found they are replaced by a single slash.</li>\n                </ul>\n                <li><b>path.join(): </b>Joins all the given path segments together. All the arguments must be string.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={path}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Node.js HTTP Module</b>\n              <br />\n              <p>A set of functions you want to include in your application.</p>\n              <br />\n              <ul>\n                <li>Node.js has a set of built-in modules which you can use without any further installation.</li>\n                <br />\n\n                <li>\n                  assert - Provides a set of assertion tests The assert module provides a way of testing expressions. If\n                  the expression evaluates to 0, or false, an assertion failure is being caused, and the program is\n                  terminated.\n                </li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={assert}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <b>o/p: </b>AssertionError: false == true\n              <br />\n              <br />\n              <b>Method -</b>\n              <br />\n              <ul>\n                <li>assert() - Checks if a value is true. Same as assert.ok()</li>\n                <li>deepEqual() - Checks if two values are equal</li>\n                <li>deepStrictEqual() - Checks if two values are equal, using the strict equal operator (===)</li>\n              </ul>\n              <br />\n              <br />\n\n              <b>http - To make Node.js act as an HTTP server</b>\n              <br />\n              The HTTP module provides a way of making Node.js transfer data over HTTP\n              <div style={titles}>\n                <PrismCode\n                  code={http}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>https - To make Node.js act as an HTTPS server.</b>\n              <br />\n              The HTTPS module provides a way of making Node.js transfer data over HTTP TLS/SSL protocol,\n              which is the secure HTTP protocol.\n              <div style={titles}>\n                <PrismCode\n                  code={https}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <ul>\n                <li>createServer() -Creates an HTTPS server</li>\n                <li>get() - Sets the method to GET, and returns an object containing the users request</li>\n                <li>globalAgent - Returns the HTTPS Agent</li>\n                <li>request - Makes a request to a secure web server</li>\n              </ul>\n              <br />\n              <br />\n\n              <b>HTTP Requests Without a Library</b>\n              <div style={titles}>\n                <PrismCode\n                  code={HTTPWithoutLibrary}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>net - To create servers and clients</b>\n              <div style={titles}>\n                <PrismCode\n                  code={nets}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <ul>\n                <li>connect() - Creates a new connection to the server, and returns a new Socket</li>\n                <li>createConnection() - Creates a new connection to the server, and returns a new Socket</li>\n                <li>createServer() -Creates a new server</li>\n                <li>isIP - Checks if the specified value is an IP address</li>\n                <li>isIPv4 - Checks if the specified value is an IPv4 address</li>\n                <li>isIPv6 - Checks if the specified value is an IPv6 address</li>\n              </ul>\n              <br />\n              <br />\n\n              <b>HTTP Requests Without a Library</b>\n              <div style={titles}>\n                <PrismCode\n                  code={HTTPWithoutLibrary}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Node.js URL Module</b>\n              <br />\n              The URL module splits up a web address into readable parts.\n              Parse an address with the url.parse() method, and it will return a URL object with each part of the\n              address as properties:\n              <div style={titles}>\n                <PrismCode\n                  code={URL}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              o/p - localhost:8080\n              /default\n              <br />\n              ?year=2017&month=february\n              <br />\n              february\n              <br />\n              <br />\n\n              <b>Node.js Send an Email</b>\n              <br />\n              The Nodemailer Module\n              The Nodemailer module makes it easy to send emails from your computer.\n              <br />\n              <i>Send an Email</i>\n              <br />\n              Use the username and password from your selected email provider to send an email. This tutorial wi\n              ll show you how to use\n              your Gmail account to send an email:\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={sendEmail}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(NodeJsCodes));\n"]},"metadata":{},"sourceType":"module"}