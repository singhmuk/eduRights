{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/introReact.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../dashboard/blog/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../prismCode';\nimport Tools from \"../../../assets/js/jsToolchain.png\";\nimport Tools2 from \"../../../assets/js/jsToolchain_2.png\";\nimport VDom from \"../../../assets/js/vDom.png\";\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 350\n};\nconst redesigns = {\n  height: 350,\n  width: 600\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst call = `\n// assuming this.state = { value: 0 }\nthis.setState({ value: 1 });\nconsole.log(this.state.value); // 0\n`.trim();\nconst newStates = `\n// assuming this.state = { value: 0 };\nthis.setState((state) => ({ value: state.value + 1}));\nthis.setState((state) => ({ value: state.value + 1}));\nthis.setState((state) => ({ value: state.value + 1}));`.trim();\nconst returnSynchronous = `\nrender() {\n  return <button onClick={this.inc}>Click to update</button>\n}\n\ninc() {\n  console.log('before: ' + this.state.test);\n  this.setState({\n    test: this.state.test+1\n  });\n  console.log('after: ' + this.state.test);\n}\n\n// click!\nbefore: 1\nafter: 1\n\n// click!\nbefore: 2\nafter: 2`.trim();\nconst Lazy = `\nimport React, { Suspense, lazy } from 'react';\nconst OtherComponent = lazy(() => import('./OtherComponent'));\n\nconsr Routes = () => (\n  <Switch>\n   <Suspense fallback={<div>Loading Page...</div>}>\n    <Route path = \"/login\" component={Login} />\n    <Route exact path = \"Home\" component={Home} />\n   </Suspense>\n    <Route component={()=> <h1>Page not found</h1>} />\n  </Switch>`.trim();\nconst Uncontrolled = `\nfunction App() {\n  const inputRef = useRef(null);\n  \n  const handleSubmitButton = () => {\n    alert(inputRef.current.value);\n  };\n  return (\n    <div className=\"App\">\n      <input type=\"text\" ref={inputRef} />\n      <input type=\"submit\" value=\"submit\" onClick={handleSubmitButton} />\n    </div>\n  );\n}`.trim();\nconst Update = `\nclass App extends Component{\n  forceUpdateHandler = () => {\n    this.forceUpdate();\n  };\n  \n  render(){\n    return(\n      <div>\n        <button onClick= {this.forceUpdateHandler} >FORCE UPDATE</button>\n        <h4>Random Number : { Math.random() }</h4>\n      </div>\n    );\n  }\n}`.trim();\nconst code = `\nclass App extends Component{\n  constructor(){\n      super();\n      this.state={count:0}\n  }\n\n  componentDidMount(){\n      console.log('When component render first time')\n  }\n\n  increment(){\n      this.setState({count:this.state.count + 1})\n  }\n\n  componentDidUpdate(prevProps, prevState){\n      console.log(prevState.count)\n      if(prevState.count !=this.state.count){\n          console.log('component update')\n      }\n  }\n\n  componentWillUnmount(){\n      console.log('countis about to be unmounted.')\n  }\n\n  render(){\n      return(\n          <div>\n              {this.state.count}\n              {/* <button onClick={this.increment.bind(this)}>bindThis</button> */}\n              <button onClick={()=>this.increment()}>clickMe</button>\n          </div>\n      )\n  }\n}\n\n\n//functional component\nconst App = () => {\n  const [count, setCount] = useState(0);\n\n  useEffect(()=>{\n      console.log('Mounting')\n      console.log('Updating', count)\n\n      return ()=>{\n          console.log('Unmount')\n      }\n  },[count])\n\n  const increment = () => {\n      setCount(count+1)\n  }\n\n      return(\n          <div>\n              {count}\n              <button onClick={increment}>clickMe</button>\n          </div>\n      )\n  }\n`.trim();\n\nclass IntroRectJs extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, \"1.Explain the standard JavaScript toolchain, transpilation, JSX, and these items. What tools use in the build steps to optimize the compiled output React code?\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: Tools,\n      alt: \"Omega\",\n      className: \"responsive\",\n      style: redesign,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: Tools2,\n      alt: \"Omega\",\n      className: \"responsive\",\n      style: redesign,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"There are a couple primary pillars in the JavaScript toolchain:\")), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, \"1. Dependency Management\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \"2. Linting\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, \"3. Style-checking\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, \"4. Transpilation and Compilation\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, \"5. Minification and Compression\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, \"6. Source-Mapping\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, \"2. How Virtual-DOM is more efficient than Dirty checking\"), React.createElement(\"img\", {\n      src: VDom,\n      alt: \"Omega\",\n      className: \"responsive\",\n      style: redesigns,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, \"In React, each of our components have a state. This state is like an observable. Essentially, React knows when to re-render the scene because it is able to observe when this data changes. Dirty checking is slower than observables because we must poll the data at a regular interval and check all of the values in the data structure recursively.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, \"Virtual DOM: \"), \"Virtual DOM is about avoiding unnecessary changes to the dom. Virtual DOM also allows to collect several changes to be applied at once, so not every single change causes a re-render, but instead re-rendering only happens once after a set of changes was applied to the DOM.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }), \"A virtual DOM is a lightweight JS object. It is simply a copy of the real DOM.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, \"Virtual DOM operates in three simple steps:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, \"1. The entire UI is re-rendered in Virtual DOM representation as data changes.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, \"2. Now, the difference between the previous DOM representation and the new one is calculated.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"3. After the calculations are successfully, the real DOM is updated in line with only the things that actually underwent changes.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, \"How does the Real DOM differ from the Virtual DOM: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, \"DOM Manipulation: \"), \"Real DOM supports a very expensive DOM manipulation.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, \"Element Update: \"), \"Real DOM creates a new DOM when an element updates. While, virtual DOM updates the JSX.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, \"Memory Wastage: \"), \"Real DOM causes a lot of memory wastage while there is no memory wastage for Virtual DOM.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, \"Update Speed: \"), \"Real DOM updates slowly.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \"Updating HTML: \"), \"Real DOM can directly update HTML, while virtual DOM can\\u2019t update HTML directly.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, \"3. What do you understand with the term polling?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, \"The server needs to be monitored for updates w.r.t.time. This process is basically considered as pooling. It checks for the updates approximately after every 5 seconds. Poling make sure that no negative information is present on the servers.\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, \"4. Difference between redux saga and redux thunk.\"), \"Use Thunk instead of Saga for simple and trivial tasks like:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, \"AJAX calls\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, \"data polling and only if they are started directly by the user interaction.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, \"Use Saga for\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, \"intertwined tasks, Ex login example of the docs.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, \"flows with a lot of steps and waitings for other conditions to happen (\\\"finite-state machine\\\" flows)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, \"tasks that work in the background and proceed independently from the user interaction (or a mix of background/interactions)\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, \"5. What is React? What are some of its standouts?\"), \"Writing UI test cases is simple with React, which is also easy to integrate with Angular, Meteor, and other popular JS frameworks.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, \"Excellent for developing complex and interactive web and mobile UI\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, \"Follows the component-based approach and helps in building reusable UI components\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, \"Makes use of the virtual DOM instead of the real DOM\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, \"Relies on server-side rendering\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, \"Supports unidirectional data flow or data binding\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, \"Note: \"), \"JSX is a contraction of the JavaScript and XML.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, \"6. HOC\"), \"A higher-order component (HOC) is a function that takes a component as input and returns a new component with enhanced functionality. It allows for code reuse, abstraction, and the addition of new features to existing components in a flexible and composable manner.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, \"Benefits of HOC: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, \"Reuse of Code.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, \"Offers a high hacking facility\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, \"Supports state abstraction and manipulation\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, \"7. Define Reducers in React?\"), \"Reducers are the pure functions that clearly states as to how the application state changes when certain actions are made. This way, it takes into account the previous state and action to turn out to a new state.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, \"8. When would you use state\"), \"When a component needs to keep track of information between renderings the component itself update, use state.\", React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, \"Component state is a way of holding, processing information and allows to implement its logic. State is usually a POJO (Plain Old JavaScript Object).\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, \"using this.setState, accept an Object that will be eventually merged into Components current state.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, \"To alter state by writing to this.state directly, it will not lead to the Component re-rendering with new data, and generally lead to state inconsistency.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, \"setState is asynchronous (*)\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, \"The setState causes reconciliation is base of the next property \\u2014 setState is asynchronous. This allows us to have multiple calls to setState in a single scope and not trigger not needed re-renders of the whole tree.\"), \"This is why you don\\u2019t see the new values in state right after you updated it.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: call,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, \"setState accepts a function as its parameter\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, \"If you pass a function as the first argument of setState, React will call it with the at-call-time-current state and expect you to return an Object to merge into state. So updating our example above to:\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: newStates,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    })), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, \"Will give us this.state.value = 3\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, \"9. setState is \\u2026 synchronous?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, \"setState is asynchronous? Well, it not always the case! It depends on the execution context.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: returnSynchronous,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, \"Is setState() is async? Props should not change. Why is setState() in React Async instead of Sync?\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, \"setState() actions are asynchronous and are batched for performance gains. setState() does not immediately mutate this.state but creates a pending state transition. Accessing this.state after calling this method can potentially return the existing value.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }, \"There is no guarantee of synchronous operation of calls to setState and calls may be batched for performance gains. This is because setState alters the state and causes rerendering. \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, \"Thus the setState calls are asynchronous as well as batched for better UI experience and performance.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }, \"10. Why can't you update state directly without setState()?.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, \"setState alwase trigger re-rendering of the component.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, \"Mutating state directly can lead to odd bugs, and components that are hard to optimize.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, \"11. Props should not change\"), \"You used to be able to change props with setProps and replaceProps but these have been deprecated.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, \"Since props are passed in, and they cannot change, if a React component that only uses props as \\u201Cpure,\\u201D that is, it will always render the same output given the same input. \"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, \"Render Props\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, \"A render prop is a way to pass a template to a component which should be used while rendering, on the fly.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }, \"Props\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, \"Props are read-only, Whether you declare a component as a function or a class, it must never modify its own props.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, \"All React components must act like pure functions w.r.t their props.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, \"Props prints the name of the user depending on the props that were passed to it. Here, the name of the prop will be name\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }, \"12. Lazy Loading\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, \"We bundle the files in React application using tool such as webpack. Bundling in the end merges the files in the sequence of their imports and creates a single file.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }, \"The problem with this approach is that the bundle file gets larger with the increase in files. User may not be sung all the feature components but still bundle is loading them, this could affect the loading of application.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Lazy,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }, \"13. When might you use React.PureComponent?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }, \"When we want a default implementation of shouldComponentUpdate()\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }, \"14. What is the children prop?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }, \"A property that lets you pass components as data to other components\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }, \"15. What is prop drilling and how can you avoid it?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }, \"When building a React application, there is often the need for a deeply nested component to use data provided by another component that is much higher in the hierarchy. The simplest approach is to simply pass a prop from each component to the next in the hierarchy from the source component to the deeply nested component. This is called prop drilling.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }, \"The primary disadvantage of prop drilling is that components that should not otherwise be aware of the data become unnecessarily complicated and are harder to maintain.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }, \"To avoid prop drilling, a common approach is to use React context. This allows a Provider component that supplies data to be defined, and allows nested components to consume context data via either a Consumer component or a useContext hook.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    }, \"17. Controlled component\"), \"We have 2 ways to handle the input value: Controlled & Uncontrolled\", React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }, \"In a controlled component, form data is handled by a React component. While in uncontroll, form data is handled by the DOM itself.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }, \"In a controlled component, the form data is handled by the state within the component.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    }, \"The controlled component is a way that can handle the form input value using the state and to change the input value by using setState or useState\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    }, \"Change this state using one of the events like onChange and when the user starts writing any character setState or useState will be called and update the state of this input then it will add the new value inside the input.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }, \"Uncontrolled Components\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }, \"The uncontrolled component is like traditional HTML form inputs that you will not be able to handle the value by yourself but the DOM will take care of handling the value of the input and save it then you can get this value using React Ref\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Uncontrolled,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }, \"Use the controlled component when you create\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }, \"Form validation so you always need to know the value of the input when typing to check if it\\u2019s a valid character or not!\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }, \"Disable the submit button unless all fields have valid data\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    }, \"If you have a specific format like the credit card input\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480\n      },\n      __self: this\n    }, \"18. Force Update\"), \"Calling forceUpdate() will cause render() to be called on the component and skip shouldComponentUpdate().\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    }), \"It will skip shouldComponentUpdate(), so you're not getting the optimization benefit.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    }), \"Also, using forceUpdate() \\\"bypasses\\\" the proper lifecycle, making your code less straight-forward and possibly harder to understand and maintain.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Update,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493\n      },\n      __self: this\n    }, \"19. Lifecycle of Components\"), \"Each component in React has a lifecycle which you can monitor and manipulate during its three main phases.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496\n      },\n      __self: this\n    }), \"1. Mounting\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }), \"2. Updating and\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    }), \"3. Unmounting\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501\n      },\n      __self: this\n    }, \"Mounting: \"), \"Mounting means putting elements into the DOM.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502\n      },\n      __self: this\n    }), \"React has four built-in methods that gets called, in this order, when mounting a component:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }), \"1. constructor()\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }), \"3. \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }, \"render():\"), \"  required and will always be called, the others are optional and will be called if you define them.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }), \"4. componentWillMount()\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    }), \"4. componentDidMount()\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    }, \"constructor(): \"), \"Is called before anything else, when the component is initiated, and it is the natural place to set up the initial state and other initial values.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }), \"The constructor() method is called with the props, as arguments, and you should always start by calling the super(props) before anything else, this will initiate the parent's constructor method and allows the component to inherit methods from its parent.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }, \"componentDidMount: \"), \"Method is called after the component is rendered.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }), \"This is where you run statements that requires that the component is already placed in the DOM.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    }, \"Updating: \"), \"A component is updated whenever there is a change in the component's state or props.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }, \"shouldComponentUpdate()\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }, \"render()\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }, \"componentDidUpdate()\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    }, \"shouldComponentUpdate: \"), \"In the shouldComponentUpdate() we can return a Boolean value that specifies whether React should continue with the rendering or not.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }, \"The default value is true.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }, \"render:\"), \"Method is called when a component gets updated, it has to re-render the HTML to the DOM, with the new changes.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552\n      },\n      __self: this\n    }, \"componentDidUpdate: \"), \"The componentDidUpdate method is called after the component is updated in the DOM.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }, \"Unmounting: \"), \"componentWillUnmount:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558\n      },\n      __self: this\n    }), \"This method is called when the component is about to be removed from the DOM.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: code,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570\n      },\n      __self: this\n    }, \"This method is called when there is an error during rendering, in a lifecycle method, or in the constructor of any child component. \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573\n      },\n      __self: this\n    }, \"b. componentDidCatch\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    }, \"20. Event\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578\n      },\n      __self: this\n    }, \"In React, events are the triggered reactions to specific actions like mouse hover, mouse click, key press, etc.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    }, \"1. Events are passed as functions instead of strings. \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583\n      },\n      __self: this\n    }, \"2. The event argument contains a set of properties, which are specific to an event. Each event type contains its own properties and behavior which can be accessed via its event handler only.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590\n      },\n      __self: this\n    }, \"21. What are synthetic events in React?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591\n      },\n      __self: this\n    }, \"Synthetic events are the objects which act as a cross-browser wrapper around the browser\\u2019s native event. They combine the behavior of different browsers into one API. This is done to make sure that the events show consistent properties across different browsers.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596\n      },\n      __self: this\n    }, \"Ex. \"), \"preventDefault\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default withStyles(styles)(IntroRectJs);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/introReact.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Tools","Tools2","VDom","titles","backgroundColor","padding","fontSize","redesign","height","redesigns","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","call","trim","newStates","returnSynchronous","Lazy","Uncontrolled","Update","code","IntroRectJs","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../dashboard/blog/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../prismCode';\n\nimport Tools from \"../../../assets/js/jsToolchain.png\";\nimport Tools2 from \"../../../assets/js/jsToolchain_2.png\";\nimport VDom from \"../../../assets/js/vDom.png\";\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 350,\n}\n\nconst redesigns = {\n  height: 350,\n  width: 600\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst call = `\n// assuming this.state = { value: 0 }\nthis.setState({ value: 1 });\nconsole.log(this.state.value); // 0\n`.trim();\n\nconst newStates = `\n// assuming this.state = { value: 0 };\nthis.setState((state) => ({ value: state.value + 1}));\nthis.setState((state) => ({ value: state.value + 1}));\nthis.setState((state) => ({ value: state.value + 1}));`.trim();\n\nconst returnSynchronous = `\nrender() {\n  return <button onClick={this.inc}>Click to update</button>\n}\n\ninc() {\n  console.log('before: ' + this.state.test);\n  this.setState({\n    test: this.state.test+1\n  });\n  console.log('after: ' + this.state.test);\n}\n\n// click!\nbefore: 1\nafter: 1\n\n// click!\nbefore: 2\nafter: 2`.trim();\n\nconst Lazy = `\nimport React, { Suspense, lazy } from 'react';\nconst OtherComponent = lazy(() => import('./OtherComponent'));\n\nconsr Routes = () => (\n  <Switch>\n   <Suspense fallback={<div>Loading Page...</div>}>\n    <Route path = \"/login\" component={Login} />\n    <Route exact path = \"Home\" component={Home} />\n   </Suspense>\n    <Route component={()=> <h1>Page not found</h1>} />\n  </Switch>`.trim();\n\nconst Uncontrolled = `\nfunction App() {\n  const inputRef = useRef(null);\n  \n  const handleSubmitButton = () => {\n    alert(inputRef.current.value);\n  };\n  return (\n    <div className=\"App\">\n      <input type=\"text\" ref={inputRef} />\n      <input type=\"submit\" value=\"submit\" onClick={handleSubmitButton} />\n    </div>\n  );\n}`.trim();\n\nconst Update = `\nclass App extends Component{\n  forceUpdateHandler = () => {\n    this.forceUpdate();\n  };\n  \n  render(){\n    return(\n      <div>\n        <button onClick= {this.forceUpdateHandler} >FORCE UPDATE</button>\n        <h4>Random Number : { Math.random() }</h4>\n      </div>\n    );\n  }\n}`.trim();\n\nconst code = `\nclass App extends Component{\n  constructor(){\n      super();\n      this.state={count:0}\n  }\n\n  componentDidMount(){\n      console.log('When component render first time')\n  }\n\n  increment(){\n      this.setState({count:this.state.count + 1})\n  }\n\n  componentDidUpdate(prevProps, prevState){\n      console.log(prevState.count)\n      if(prevState.count !=this.state.count){\n          console.log('component update')\n      }\n  }\n\n  componentWillUnmount(){\n      console.log('countis about to be unmounted.')\n  }\n\n  render(){\n      return(\n          <div>\n              {this.state.count}\n              {/* <button onClick={this.increment.bind(this)}>bindThis</button> */}\n              <button onClick={()=>this.increment()}>clickMe</button>\n          </div>\n      )\n  }\n}\n\n\n//functional component\nconst App = () => {\n  const [count, setCount] = useState(0);\n\n  useEffect(()=>{\n      console.log('Mounting')\n      console.log('Updating', count)\n\n      return ()=>{\n          console.log('Unmount')\n      }\n  },[count])\n\n  const increment = () => {\n      setCount(count+1)\n  }\n\n      return(\n          <div>\n              {count}\n              <button onClick={increment}>clickMe</button>\n          </div>\n      )\n  }\n`.trim();\n\n\n\n\nclass IntroRectJs extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <h4><Sidebar /></h4>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n\n              <h3>1.Explain the standard JavaScript toolchain, transpilation, JSX, and these items.\n                What tools use in the build steps to optimize the compiled output React code?</h3>\n              <br />\n              <img src={Tools} alt=\"Omega\" className=\"responsive\" style={redesign} />\n              <img src={Tools2} alt=\"Omega\" className=\"responsive\" style={redesign} />\n              <br />\n              <br />\n\n              <p>\n                <b>There are a couple primary pillars in the JavaScript toolchain:</b>\n              </p>\n              <ul>\n                <li>1. Dependency Management</li>\n                <li>2. Linting</li>\n                <li>3. Style-checking</li>\n                <li>4. Transpilation and Compilation</li>\n                <li>5. Minification and Compression</li>\n                <li>6. Source-Mapping</li>\n              </ul>\n              <br />\n\n              <h3>2. How Virtual-DOM is more efficient than Dirty checking</h3>\n              <img src={VDom} alt=\"Omega\" className=\"responsive\" style={redesigns} />\n              <p>\n                In React, each of our components have a state. This state is like an observable. Essentially, React\n                knows when to re-render the scene because it is able to observe when this data changes. Dirty checking\n                is slower than observables because we must poll the data at a regular interval and check all of the\n                values in the data structure recursively.\n              </p>\n\n              <b>Virtual DOM: </b>Virtual DOM is about avoiding unnecessary changes to the dom. \n              Virtual DOM also allows to collect several changes to \n              be applied at once, so not every single change causes a re-render, but instead re-rendering only happens once after a set \n              of changes was applied to the DOM.\n              <br/>\n              <br/>\n              A virtual DOM is a lightweight JS object. It is simply a copy of the real DOM.\n              <br />\n              <br />\n              <b>Virtual DOM operates in three simple steps:</b>\n              <ul>\n                <li>1. The entire UI is re-rendered in Virtual DOM representation as data changes.</li>\n                <li>2. Now, the difference between the previous DOM representation and the new one is calculated.</li>\n                <li>3. After the calculations are successfully, the real DOM is updated in line\n                  with only the things that actually underwent changes.</li>\n              </ul>\n              <br />\n\n              <h3>How does the Real DOM differ from the Virtual DOM: </h3>\n              <ul>\n                <li><b>DOM Manipulation: </b>Real DOM supports a very expensive DOM manipulation.</li>\n                <li><b>Element Update: </b>Real DOM creates a new DOM when an element updates. While, virtual DOM updates the JSX.</li>\n                <li><b>Memory Wastage: </b>Real DOM causes a lot of memory wastage while there is no memory\n              wastage for Virtual DOM.</li>\n                <li><b>Update Speed: </b>Real DOM updates slowly.</li>\n                <li><b>Updating HTML: </b>Real DOM can directly update HTML, while virtual DOM can’t update HTML directly.</li>\n              </ul>\n              <br />\n              \n              <h3>3. What do you understand with the term polling?</h3>\n              <p>\n                The server needs to be monitored for updates w.r.t.time.\n                This process is basically considered as pooling. It checks for the updates approximately after every 5 seconds.\n                Poling make sure that no negative information is present on the servers.\n              </p>\n\n              <h3>4. Difference between redux saga and redux thunk.</h3>\n              Use Thunk instead of Saga for simple and trivial tasks like:\n              <ul>\n                <li>AJAX calls</li>\n                <li>data polling and only if they are started directly by the user interaction.</li>\n              </ul>\n              <br />\n              <b>Use Saga for</b>\n              <ul>\n                <li>intertwined tasks, Ex login example of the docs.</li>\n                <li>flows with a lot of steps and waitings for other conditions to happen (\"finite-state machine\" flows)</li>\n                <li>tasks that work in the background and proceed independently from the user interaction (or a mix of background/interactions)</li>\n              </ul>\n              <br />\n\n              <h3>5. What is React? What are some of its standouts?</h3>\n              Writing UI test cases is simple with React, which is also easy to integrate with Angular,\n              Meteor, and other popular JS frameworks.\n              <ul>\n                <li>Excellent for developing complex and interactive web and mobile UI</li>\n                <li>Follows the component-based approach and helps in building reusable UI components</li>\n                <li>Makes use of the virtual DOM instead of the real DOM</li>\n                <li>Relies on server-side rendering</li>\n                <li>Supports unidirectional data flow or data binding</li>\n              </ul>\n\n              <br />\n              <b>Note: </b>JSX is a contraction of the JavaScript and XML.\n              <br />\n              <br />\n\n              <h3>6. HOC</h3>\n              A higher-order component (HOC) is a function that takes a component as input and returns a new component with enhanced functionality. It allows for code reuse, abstraction, and the addition of new features to existing components in a flexible and composable manner.\n              <br/>\n              <br/>\n              <b>Benefits of HOC: </b>\n              <ul>\n                <li>Reuse of Code.</li>\n                <li>Offers a high hacking facility</li>\n                <li>Supports state abstraction and manipulation</li>\n              </ul>\n              <br/>\n\n              <h3>7. Define Reducers in React?</h3>\n              Reducers are the pure functions that clearly states as to how the application state changes\n              when certain actions are made. This way, it takes into account the previous state and action\n              to turn out to a new state.\n              <br/>\n\n              <h3>8. When would you use state</h3>\n              When a component needs to keep track of information between renderings the component itself update, use state.\n              <p>\n                Component state is a way of holding, processing information and allows to implement its logic.\n                State is usually a POJO (Plain Old JavaScript Object).</p>\n              <ul>\n                <li>using this.setState, accept an Object that will be eventually merged into Components current state.</li>\n                <li>To alter state by writing to this.state directly, it will not lead to the Component re-rendering\n                  with new data, and generally lead to state inconsistency.</li>\n              </ul>\n              <br />\n              <b>setState is asynchronous (*)</b>\n              <br />\n              <p>The setState causes reconciliation is base of the next property — setState is asynchronous. This\n                allows us to have multiple calls to setState in a single scope and not trigger not\n                needed re-renders of the whole tree.</p>\n              This is why you don’t see the new values in state right after you updated it.\n              <div style={titles}>\n                <PrismCode\n                  code={call}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>setState accepts a function as its parameter</b><br/>\n              <p>If you pass a function as the first argument of setState, React will\n                call it with the at-call-time-current state and expect you to return an\n                Object to merge into state. So updating our example above to:</p>\n              <div style={titles}>\n                <PrismCode\n                  code={newStates}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <i>Will give us this.state.value = 3</i>\n              <br />\n\n              <h3>9. setState is … synchronous?</h3>\n              <p>setState is asynchronous? Well, it not always the case! It depends on the execution context.</p>\n              <div style={titles}>\n                <PrismCode\n                  code={returnSynchronous}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Is setState() is async? Props should not change. Why is setState() in React Async instead of Sync?</b>\n              <br />\n              <ul>\n                <li>setState() actions are asynchronous and are batched for performance gains. setState() does not immediately mutate\n                  this.state but creates a pending state transition. Accessing this.state after calling this method can potentially\n                  return the existing value.</li>\n                <li>There is no guarantee of synchronous operation of calls to setState and calls may be\n                  batched for performance gains. This is because setState alters the state and causes rerendering. </li>\n                <li>Thus the setState calls are asynchronous as well as batched for better UI experience and performance.</li>\n              </ul>\n              <br />\n\n              <h3>10. Why can't you update state directly without setState()?.</h3>\n              <ul>\n                <li>setState alwase trigger re-rendering of the component.</li>\n                <li>Mutating state directly can lead to odd bugs, and components that are hard to optimize.</li>\n              </ul>\n              <br />\n\n              <h3>11. Props should not change</h3>\n              You used to be able to change props with setProps and replaceProps but these have been deprecated.\n              <br />\n              <p>Since props are passed in, and they cannot change, if a React\n                component that only uses props as “pure,” that is, it will always\n                render the same output given the same input. </p>\n              <h3>Render Props</h3>\n              <p>A render prop is a way to pass a template to a component which should be used\n                while rendering, on the fly.</p>\n\n              <b>Props</b>\n              <ul>\n                <li>Props are read-only, Whether you declare a component as a function or a class, it must never modify its own props.</li>\n                <li>All React components must act like pure functions w.r.t their props.</li>\n              </ul>\n              <br />\n              <p>\n                Props prints the name of the user depending on the props that were passed to it.\n                Here, the name of the prop will be name\n              </p>\n            <br />\n\n            <h3>12. Lazy Loading</h3>\n            <ul>\n              <li>We bundle the files in React application using tool such as webpack. Bundling in the end merges the files in the\n            sequence of their imports and creates a single file.</li>\n              <li>The problem with this approach is that the bundle file gets larger with the increase in files. User may not be sung\n            all the feature components but still bundle is loading them, this could affect the loading of application.</li>\n            </ul>\n            <br />\n            <div style={titles}>\n              <PrismCode\n                code={Lazy}\n                language=\"js\"\n                plugins={[\"line-numbers\"]}\n              />\n            </div>\n            <br />\n\n            <h3>13. When might you use React.PureComponent?</h3>\n            <p>When we want a default implementation of shouldComponentUpdate()</p>\n            <br />\n\n            <h3>14. What is the children prop?</h3>\n            <p>A property that lets you pass components as data to other components</p>\n            <br />\n\n            <h3>15. What is prop drilling and how can you avoid it?</h3>\n              <ul>\n                <li>When building a React application, there is often the need for a deeply nested component to use data provided \n                  by another component that is much higher in the hierarchy. The simplest approach is to simply pass a prop from \n                  each component to the next in the hierarchy from the source component to the deeply nested component. This is \n                  called prop drilling.</li><br/>\n                <li>The primary disadvantage of prop drilling is that components that should not otherwise be aware of the data \n                  become unnecessarily complicated and are harder to maintain.</li><br/>\n                <li>To avoid prop drilling, a common approach is to use React context. This allows a Provider component that \n                  supplies data to be defined, and allows nested components to consume context data via either a Consumer \n                  component or a useContext hook.</li>\n              </ul>\n              <br/>\n\n              <h3>17. Controlled component</h3>\n              We have 2 ways to handle the input value: Controlled & Uncontrolled\n              <p>In a controlled component, form data is handled by a React component. While in uncontroll, form data is handled \n                by the DOM itself.</p>\n              <ul>\n                <li>In a controlled component, the form data is handled by the state within the component.</li>\n                <li>The controlled component is a way that can handle the form input value using the state and to change the input \n                  value by using setState or useState</li>\n                <li>Change this state using one of the events like onChange and when the user starts writing any character \n                  setState or useState will be called and update the state of this input then it will add the new value inside \n                  the input.</li>\n              </ul>\n              <br />\n\n              <b>Uncontrolled Components</b>\n              <br />\n              <p>The uncontrolled component is like traditional HTML form inputs that you will not be able to handle the value by yourself but the DOM will take care of handling the value of the input and save it then you can get this value using React Ref</p>\n\n              <div style={titles}>\n                <PrismCode\n                  code={Uncontrolled}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Use the controlled component when you create</b>\n              <ul>\n                <li>Form validation so you always need to know the value of the input when typing to check if it’s a valid character or not!</li>\n                <li>Disable the submit button unless all fields have valid data</li>\n                <li>If you have a specific format like the credit card input</li>\n              </ul>\n              <br/>\n\n              <h3>18. Force Update</h3>\n              Calling forceUpdate() will cause render() to be called on the component and skip shouldComponentUpdate().<br />\n              It will skip shouldComponentUpdate(), so you're not getting the optimization benefit.<br />\n              Also, using forceUpdate() \"bypasses\" the proper lifecycle, making your code less straight-forward and possibly harder to understand and maintain.\n              <div style={titles}>\n                <PrismCode\n                  code={Update}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>19. Lifecycle of Components</h3>\n              Each component in React has a lifecycle which you can monitor and manipulate during its\n              three main phases.\n              <br />\n              1. Mounting<br />\n              2. Updating and<br />\n              3. Unmounting<br />\n              <br />\n              <b>Mounting: </b>Mounting means putting elements into the DOM.\n              <br />\n              React has four built-in methods that gets called, in this order, when mounting a component:\n              <br />\n              <br />\n              1. constructor()<br />\n              3. <b>render():</b>  required and will always be called, the others are optional and will be called if you define them.<br />\n              4. componentWillMount()<br />\n              4. componentDidMount()<br />\n\n              <br />\n              <br />\n              <b>constructor(): </b>Is called before anything else, when the component is initiated,\n              and it is the natural place to set up the initial state and other initial values.\n              <br />\n              <br />\n              The constructor() method is called with the props, as arguments, and you should always start\n              by calling the super(props) before anything else, this will initiate the parent's constructor\n              method and allows the component to inherit methods from its parent.\n              <br />\n              <br />\n              <b>componentDidMount: </b>Method is called after the component is rendered.\n              <br />\n              This is where you run statements that requires that the component is already placed in the\n              DOM.\n              <br />\n              <br />\n              <b>Updating: </b>\n              A component is updated whenever there is a change in the component's state or props.\n              <br />\n              <ul>\n                <li>shouldComponentUpdate()</li>\n                <li>render()</li>\n                <li>componentDidUpdate()</li>\n              </ul>\n              <br />\n\n              <b>shouldComponentUpdate: </b>\n              In the shouldComponentUpdate() we can return a Boolean value that specifies whether\n              React should continue with the rendering or not.\n              <br />\n              <b>The default value is true.</b>\n              <br />\n              <br />\n\n              <b>render:</b>\n              Method is called when a component gets updated, it has to re-render\n              the HTML to the DOM, with the new changes.\n              <br />\n              <br />\n\n              <b>componentDidUpdate: </b>\n              The componentDidUpdate method is called after the component is updated in the DOM.\n              <br />\n              <br />\n              <b>Unmounting: </b>\n              componentWillUnmount:\n              <br />\n              This method is called when the component is about to be removed from the\n              DOM.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={code}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <p>This method is called when there is an error during rendering, in a lifecycle method, or in the constructor of any\n                child component. </p>\n              <ul>\n                <li>b. componentDidCatch</li>\n              </ul>\n              <br />\n\n              <h3>20. Event</h3>\n              <p>\n                In React, events are the triggered reactions to specific actions like mouse hover, mouse click, key press, etc.\n              </p>\n              <ul>\n                <li>1. Events are passed as functions instead of strings. </li>\n                <li>\n                  2. The event argument contains a set of properties, which are specific to an event. Each event type contains its own\n                  properties and behavior which can be accessed via its event handler only.\n                </li>\n              </ul>\n              <br />\n\n              <h3>21. What are synthetic events in React?</h3>\n              <p>\n                Synthetic events are the objects which act as a cross-browser wrapper around the browser’s native event. They combine\n                the behavior of different browsers into one API. This is done to make sure that the events show consistent properties\n                across different browsers.\n              </p>\n              <b>Ex. </b>preventDefault\n              <br />\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(IntroRectJs));\n"]},"metadata":{},"sourceType":"module"}