{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/Redux/deep/contactKeeperApi.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst useSelector = `\n//components/getPosts.js\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPosts } from '../actions/postData';\n\nconst Posts  = (props) => {\n  useEffect(() => {\n    props.fetchPosts();\n  })\n  \n  const getItems = () => {\n    return props.data.map(post => (\n      <div key={post.id}>\n        <h3>{post.title}</h3>\n        <p>{post.body}</p>\n      </div>\n    ))\n  }\n\n    return (\n      <div>{getItems()}</div>\n    );\n  }\n\nconst mapStateToProps = state => ({\n  data: state.object.items\n});\n\nexport default connect(mapStateToProps, { fetchPosts })(Posts);`.trim();\nconst reducers = `\n//actions/types.js\nexport const GET_DATA = 'GET_DATA';\n\n\n//actions/postActions.js\nimport { GET_DATA } from './types';\n\nexport const fetchPosts = () => dispatch => {\n  fetch('https://jsonplaceholder.typicode.com/posts')\n    .then(res => res.json())\n    .then(posts =>\n      dispatch({\n        type: GET_DATA,\n        payload: posts\n      })\n    );\n};\n\n\n//reducers/mapList.js\nimport { GET_DATA } from '../actions/types';\n\nconst initialState = {\n  items: [],\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_DATA:\n      return {\n        ...state,\n        items: action.payload\n      };\n    \n    default:\n      return state;\n  }\n}\n`.trim();\nconst components = `\n//AddContact.js\nimport React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { addContact } from \"../actions/contactAction\";\nimport shortid from \"shortid\";\nimport { useHistory } from \"react-router-dom\";\n\nconst AddContact = () => {\n  let history = useHistory();\n  const dispatch = useDispatch();\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n\n  const createContact = (e) => {\n    e.preventDefault();\n    const new_contact = {\n      id: shortid.generate(),\n      name: name,\n      phone: phone,\n      email: email,\n    };\n    dispatch(addContact(new_contact));\n    history.push(\"/\");\n  };\n\n  return (\n    <form onSubmit={(e) => createContact(e)}>\n      <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n      <input type=\"text\" value={phone} onChange={(e) => setPhone(e.target.value)} />\n      <input type=\"text\" value={email} onChange={(e) => setEmail(e.target.value)} />\n      <button type=\"submit\"> Create Contact </button>\n    </form>\n  );\n};\n\n\n\n//Contact.js\nimport { Link } from \"react-router-dom\";\nimport { deleteContact } from \"../actions/contactAction\";\nimport { useDispatch } from \"react-redux\";\nconst Contact = ({ contact, selectAll }) => {\n\n  const dispatch = useDispatch();\n  const { name, phone, email, id } = contact;\n  return (\n    <tr>\n      <input type=\"checkbox\" checked={selectAll} />\n      <td>{name}</td>\n      <td>{phone}</td>\n      <td>{email}</td>\n      <td>\n        <Link to={'/contacts/edit/'$'{id}'}>E</Link>\n        <span onClick={() => dispatch(deleteContact(id))}>X</span>\n      </td>\n    </tr>\n  );\n};\n\n\n\n//Contacts.js\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  clearAllContact,\n  selectAllContact,\n  deleteAllContact,\n} from \"../actions/contactAction\";\nimport Contact from \"./Contact\";\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const [selectAll, setSelectAll] = useState(false);\n  const contacts = useSelector((state) => state.contact.contacts);\n  const selectedContact = useSelector(\n    (state) => state.contact.selectedContacts\n  );\n\n  console.log(contacts);\n\n  useEffect(() => {\n    if (selectAll) {\n      dispatch(selectAllContact(contacts.map((contact) => contact.id)));\n    } else {\n      dispatch(clearAllContact());\n    }\n  }, [selectAll]);\n  return (\n    <div>\n      {selectedContact.length > 0 ? (\n        <button\n          onClick={() => deleteAllContact()}\n        >\n          delete all\n        </button>\n      ) : null}\n      <table>\n        <tr>\n          <th>\n            <input type=\"checkbox\" id=\"selectAll\" value={selectAll}\n              onClick={() => setSelectAll(!selectAll)} />\n          </th>\n          <th>Name</th>\n          <th>Phone</th>\n          <th>Email</th>\n          <th>Actions</th>\n        </tr>\n        <tbody>\n          {contacts.map((contact) => (\n            <Contact\n              contact={contact}\n              key={contact.id}\n              selectAll={setSelectAll}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\n\n\n//EditContact.js\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getContact, updateContact } from \"../actions/contactAction\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\n\nconst EditContact = () => {\n  let { id } = useParams();\n  let history = useHistory();\n  const dispatch = useDispatch();\n  const contact = useSelector((state) => state.contact.contact);\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n\n  useEffect(() => {\n    if (contact != null) {\n      setName(contact.name);\n      setPhone(contact.phone);\n      setEmail(contact.email);\n    }\n    dispatch(getContact(id));\n  }, [contact]);\n\n  const onUpdateContact = (e) => {\n    e.preventDefault();\n\n    const update_contact = Object.assign(contact, {\n      name: name,\n      phone: phone,\n      email: email,\n    });\n    dispatch(updateContact(update_contact));\n    history.push(\"/\");\n  };\n  return (\n    <div>\n      <h3>Add Contacts</h3>\n      <div>\n        <form onSubmit={(e) => onUpdateContact(e)}>\n          <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n          <input type=\"text\" value={phone} onChange={(e) => setPhone(e.target.value)} />\n          <input type=\"text\" value={email} onChange={(e) => setEmail(e.target.value)} />\n          <button type=\"submit\">Update</button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\n\n\n//App.js\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\nimport Contacts from \"./components/Contacts\";\nimport AddContact from \"./components/AddContact\";\nimport EditContact from \"./components/EditContact\";\n\nconst App = () => {\n  return (\n\n    <Router>\n      <div>\n        <Link to=\"/contacts/add\"> Add Records</Link>\n        <Switch>\n          <Route exact path=\"/\" component={Contacts} />\n          <Route exact path=\"/contacts/add\" component={AddContact} />\n          <Route exact path=\"/contacts/edit/:id\" component={EditContact} />\n        </Switch>\n      </div>\n    </Router>\n  );\n};`.trim();\nconst reducersCurd = `\n//contactReducer.js\nimport Contact from \"../components/Contact\";\nimport {\n  GET_CONTACT,\n  CREATE_CONTACT,\n  UPDATE_CONTACT,\n  DELETE_CONTACT,\n  SELECT_CONTACT,\n  CLEAR_CONTACT,\n  DELETE_SELECTED_CONTACT,\n} from \"../actions/types\";\n\nconst initialState = {\n  contacts: [\n    {\n      id: 1,\n      name: \"Leanne Graham\",\n      email: \"Sincere@april.biz\",\n      phone: \"1-770-736-8031 x56442\",\n    },\n    {\n      id: 2,\n      name: \"Ervin Howell\",\n      email: \"Shanna@melissa.tv\",\n      phone: \"010-692-6593 x09125\",\n    }\n  ],\n  contact: null,\n  selectedContacts: [],\n};\nconst contactReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CREATE_CONTACT:\n      return {\n        ...state,\n        contacts: [action.payload, ...state.contacts],\n      };\n    case GET_CONTACT:\n      let arr = state.contacts.filter(\n        (contact) => contact.id == action.payload\n      );\n      arr = arr.values();\n      for (let val of arr) {\n        arr = val;\n      }\n      return {\n        ...state,\n        contact: arr,\n      };\n\n    case UPDATE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.map((contact) =>\n          Contact.id == action.payload.id ? action.payload : contact\n        ),\n      };\n\n    case DELETE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.filter(\n          (contact) => contact.id != action.payload\n        ),\n      };\n\n    case SELECT_CONTACT:\n      return {\n        ...state,\n        selectedContacts: action.payload,\n      };\n\n    case DELETE_SELECTED_CONTACT:\n      return {\n        ...state,\n        contacts: [],\n      };\n    case CLEAR_CONTACT:\n      return {\n        ...state,\n        selectedContacts: [],\n      };\n\n    default:\n      return state;\n  }\n};\nexport default contactReducer;\n`.trim();\nconst actions = `\n//types.js\nexport const CREATE_CONTACT = \"CREATE_CONTACT\";\nexport const GET_CONTACT = \"GET_CONTACT\";\nexport const UPDATE_CONTACT = \"UPDATE_CONTACT\";\nexport const DELETE_CONTACT = \"DELETE_CONTACT\";\nexport const SELECT_CONTACT = \"SELECT_CONTACT\";\nexport const CLEAR_CONTACT = \"CLEAR_CONTACT\";\nexport const DELETE_SELECTED_CONTACT = \"DELETE_SELECTED_CONTACT\";\n\n\n\n//contactAction.js\nimport {\n  CREATE_CONTACT,\n  GET_CONTACT,\n  UPDATE_CONTACT,\n  DELETE_CONTACT,\n  SELECT_CONTACT,\n  CLEAR_CONTACT,\n  DELETE_SELECTED_CONTACT,\n} from \"./types\";\n\nexport const addContact = (contact) => ({\n  type: CREATE_CONTACT,\n  payload: contact,\n});\n\nexport const getContact = (id) => ({\n  type: GET_CONTACT,\n  payload: id,\n});\n\nexport const updateContact = (contact) => ({\n  type: UPDATE_CONTACT,\n  payload: contact,\n});\n\nexport const deleteContact = (id) => ({\n  type: DELETE_CONTACT,\n  payload: id,\n});\n\nexport const selectAllContact = (id) => ({\n  type: SELECT_CONTACT,\n  payload: id,\n});\n\nexport const clearAllContact = () => ({\n  type: CLEAR_CONTACT,\n});\n\n//delete selected contacts\nexport const deleteAllContact = () => ({\n  type: DELETE_SELECTED_CONTACT,\n});\n`.trim();\n\nclass ContctHooks extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }, \"1. Jsonplaceholder\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }, \"App.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: useSelector,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    }, \"Reducers\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: reducers,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }, \"2.Curd(components)\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: components,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496\n      },\n      __self: this\n    }, \"reducers\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: reducersCurd,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }, \"actions\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: actions,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(ContctHooks);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/Redux/deep/contactKeeperApi.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","useSelector","trim","reducers","components","reducersCurd","actions","ContctHooks","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst useSelector = `\n//components/getPosts.js\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPosts } from '../actions/postData';\n\nconst Posts  = (props) => {\n  useEffect(() => {\n    props.fetchPosts();\n  })\n  \n  const getItems = () => {\n    return props.data.map(post => (\n      <div key={post.id}>\n        <h3>{post.title}</h3>\n        <p>{post.body}</p>\n      </div>\n    ))\n  }\n\n    return (\n      <div>{getItems()}</div>\n    );\n  }\n\nconst mapStateToProps = state => ({\n  data: state.object.items\n});\n\nexport default connect(mapStateToProps, { fetchPosts })(Posts);`.trim();\n\nconst reducers = `\n//actions/types.js\nexport const GET_DATA = 'GET_DATA';\n\n\n//actions/postActions.js\nimport { GET_DATA } from './types';\n\nexport const fetchPosts = () => dispatch => {\n  fetch('https://jsonplaceholder.typicode.com/posts')\n    .then(res => res.json())\n    .then(posts =>\n      dispatch({\n        type: GET_DATA,\n        payload: posts\n      })\n    );\n};\n\n\n//reducers/mapList.js\nimport { GET_DATA } from '../actions/types';\n\nconst initialState = {\n  items: [],\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_DATA:\n      return {\n        ...state,\n        items: action.payload\n      };\n    \n    default:\n      return state;\n  }\n}\n`.trim();\n\nconst components = `\n//AddContact.js\nimport React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { addContact } from \"../actions/contactAction\";\nimport shortid from \"shortid\";\nimport { useHistory } from \"react-router-dom\";\n\nconst AddContact = () => {\n  let history = useHistory();\n  const dispatch = useDispatch();\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n\n  const createContact = (e) => {\n    e.preventDefault();\n    const new_contact = {\n      id: shortid.generate(),\n      name: name,\n      phone: phone,\n      email: email,\n    };\n    dispatch(addContact(new_contact));\n    history.push(\"/\");\n  };\n\n  return (\n    <form onSubmit={(e) => createContact(e)}>\n      <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n      <input type=\"text\" value={phone} onChange={(e) => setPhone(e.target.value)} />\n      <input type=\"text\" value={email} onChange={(e) => setEmail(e.target.value)} />\n      <button type=\"submit\"> Create Contact </button>\n    </form>\n  );\n};\n\n\n\n//Contact.js\nimport { Link } from \"react-router-dom\";\nimport { deleteContact } from \"../actions/contactAction\";\nimport { useDispatch } from \"react-redux\";\nconst Contact = ({ contact, selectAll }) => {\n\n  const dispatch = useDispatch();\n  const { name, phone, email, id } = contact;\n  return (\n    <tr>\n      <input type=\"checkbox\" checked={selectAll} />\n      <td>{name}</td>\n      <td>{phone}</td>\n      <td>{email}</td>\n      <td>\n        <Link to={'/contacts/edit/'$'{id}'}>E</Link>\n        <span onClick={() => dispatch(deleteContact(id))}>X</span>\n      </td>\n    </tr>\n  );\n};\n\n\n\n//Contacts.js\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  clearAllContact,\n  selectAllContact,\n  deleteAllContact,\n} from \"../actions/contactAction\";\nimport Contact from \"./Contact\";\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const [selectAll, setSelectAll] = useState(false);\n  const contacts = useSelector((state) => state.contact.contacts);\n  const selectedContact = useSelector(\n    (state) => state.contact.selectedContacts\n  );\n\n  console.log(contacts);\n\n  useEffect(() => {\n    if (selectAll) {\n      dispatch(selectAllContact(contacts.map((contact) => contact.id)));\n    } else {\n      dispatch(clearAllContact());\n    }\n  }, [selectAll]);\n  return (\n    <div>\n      {selectedContact.length > 0 ? (\n        <button\n          onClick={() => deleteAllContact()}\n        >\n          delete all\n        </button>\n      ) : null}\n      <table>\n        <tr>\n          <th>\n            <input type=\"checkbox\" id=\"selectAll\" value={selectAll}\n              onClick={() => setSelectAll(!selectAll)} />\n          </th>\n          <th>Name</th>\n          <th>Phone</th>\n          <th>Email</th>\n          <th>Actions</th>\n        </tr>\n        <tbody>\n          {contacts.map((contact) => (\n            <Contact\n              contact={contact}\n              key={contact.id}\n              selectAll={setSelectAll}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\n\n\n//EditContact.js\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getContact, updateContact } from \"../actions/contactAction\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\n\nconst EditContact = () => {\n  let { id } = useParams();\n  let history = useHistory();\n  const dispatch = useDispatch();\n  const contact = useSelector((state) => state.contact.contact);\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n\n  useEffect(() => {\n    if (contact != null) {\n      setName(contact.name);\n      setPhone(contact.phone);\n      setEmail(contact.email);\n    }\n    dispatch(getContact(id));\n  }, [contact]);\n\n  const onUpdateContact = (e) => {\n    e.preventDefault();\n\n    const update_contact = Object.assign(contact, {\n      name: name,\n      phone: phone,\n      email: email,\n    });\n    dispatch(updateContact(update_contact));\n    history.push(\"/\");\n  };\n  return (\n    <div>\n      <h3>Add Contacts</h3>\n      <div>\n        <form onSubmit={(e) => onUpdateContact(e)}>\n          <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n          <input type=\"text\" value={phone} onChange={(e) => setPhone(e.target.value)} />\n          <input type=\"text\" value={email} onChange={(e) => setEmail(e.target.value)} />\n          <button type=\"submit\">Update</button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\n\n\n//App.js\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\nimport Contacts from \"./components/Contacts\";\nimport AddContact from \"./components/AddContact\";\nimport EditContact from \"./components/EditContact\";\n\nconst App = () => {\n  return (\n\n    <Router>\n      <div>\n        <Link to=\"/contacts/add\"> Add Records</Link>\n        <Switch>\n          <Route exact path=\"/\" component={Contacts} />\n          <Route exact path=\"/contacts/add\" component={AddContact} />\n          <Route exact path=\"/contacts/edit/:id\" component={EditContact} />\n        </Switch>\n      </div>\n    </Router>\n  );\n};`.trim();\n\nconst reducersCurd = `\n//contactReducer.js\nimport Contact from \"../components/Contact\";\nimport {\n  GET_CONTACT,\n  CREATE_CONTACT,\n  UPDATE_CONTACT,\n  DELETE_CONTACT,\n  SELECT_CONTACT,\n  CLEAR_CONTACT,\n  DELETE_SELECTED_CONTACT,\n} from \"../actions/types\";\n\nconst initialState = {\n  contacts: [\n    {\n      id: 1,\n      name: \"Leanne Graham\",\n      email: \"Sincere@april.biz\",\n      phone: \"1-770-736-8031 x56442\",\n    },\n    {\n      id: 2,\n      name: \"Ervin Howell\",\n      email: \"Shanna@melissa.tv\",\n      phone: \"010-692-6593 x09125\",\n    }\n  ],\n  contact: null,\n  selectedContacts: [],\n};\nconst contactReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CREATE_CONTACT:\n      return {\n        ...state,\n        contacts: [action.payload, ...state.contacts],\n      };\n    case GET_CONTACT:\n      let arr = state.contacts.filter(\n        (contact) => contact.id == action.payload\n      );\n      arr = arr.values();\n      for (let val of arr) {\n        arr = val;\n      }\n      return {\n        ...state,\n        contact: arr,\n      };\n\n    case UPDATE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.map((contact) =>\n          Contact.id == action.payload.id ? action.payload : contact\n        ),\n      };\n\n    case DELETE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.filter(\n          (contact) => contact.id != action.payload\n        ),\n      };\n\n    case SELECT_CONTACT:\n      return {\n        ...state,\n        selectedContacts: action.payload,\n      };\n\n    case DELETE_SELECTED_CONTACT:\n      return {\n        ...state,\n        contacts: [],\n      };\n    case CLEAR_CONTACT:\n      return {\n        ...state,\n        selectedContacts: [],\n      };\n\n    default:\n      return state;\n  }\n};\nexport default contactReducer;\n`.trim();\n\nconst actions = `\n//types.js\nexport const CREATE_CONTACT = \"CREATE_CONTACT\";\nexport const GET_CONTACT = \"GET_CONTACT\";\nexport const UPDATE_CONTACT = \"UPDATE_CONTACT\";\nexport const DELETE_CONTACT = \"DELETE_CONTACT\";\nexport const SELECT_CONTACT = \"SELECT_CONTACT\";\nexport const CLEAR_CONTACT = \"CLEAR_CONTACT\";\nexport const DELETE_SELECTED_CONTACT = \"DELETE_SELECTED_CONTACT\";\n\n\n\n//contactAction.js\nimport {\n  CREATE_CONTACT,\n  GET_CONTACT,\n  UPDATE_CONTACT,\n  DELETE_CONTACT,\n  SELECT_CONTACT,\n  CLEAR_CONTACT,\n  DELETE_SELECTED_CONTACT,\n} from \"./types\";\n\nexport const addContact = (contact) => ({\n  type: CREATE_CONTACT,\n  payload: contact,\n});\n\nexport const getContact = (id) => ({\n  type: GET_CONTACT,\n  payload: id,\n});\n\nexport const updateContact = (contact) => ({\n  type: UPDATE_CONTACT,\n  payload: contact,\n});\n\nexport const deleteContact = (id) => ({\n  type: DELETE_CONTACT,\n  payload: id,\n});\n\nexport const selectAllContact = (id) => ({\n  type: SELECT_CONTACT,\n  payload: id,\n});\n\nexport const clearAllContact = () => ({\n  type: CLEAR_CONTACT,\n});\n\n//delete selected contacts\nexport const deleteAllContact = () => ({\n  type: DELETE_SELECTED_CONTACT,\n});\n`.trim();\n\n\n\nclass ContctHooks extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Jsonplaceholder</h3>\n              <b>App.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={useSelector}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Reducers</b>\n              <div style={titles}>\n                <PrismCode\n                  code={reducers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2.Curd(components)</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={components}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>reducers</b>\n              <div style={titles}>\n                <PrismCode\n                  code={reducersCurd}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>actions</b>\n              <div style={titles}>\n                <PrismCode\n                  code={actions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(ContctHooks));\n"]},"metadata":{},"sourceType":"module"}