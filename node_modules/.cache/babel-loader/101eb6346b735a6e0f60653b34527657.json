{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var myDataBase=\"\\n{\\\"user\\\":{\\\"19aff1ae-35b2-407e-87bc-1b76b2ca54f7\\\":{\\n  \\\"id\\\":\\\"19aff1ae-35b2-407e-87bc-1b76b2ca54f7\\\",\\n  \\\"temp_secret\\\":{\\\"ascii\\\":\\\"[&JnaKh]&Wt9>6Z}Cc1]X$ZMDtIVMH2I\\\",\\n    \\\"hex\\\":\\\"5b264a6e614b685d265774393e365a7d4363315d58245a4d447449564d483249\\\",\\n    \\\"base32\\\":\\\"LMTEU3TBJNUF2JSXOQ4T4NS2PVBWGMK5LASFUTKEOREVMTKIGJEQ\\\",\\n    \\\"otpauth_url\\\":\\\"otpauth://totp/SecretKey?secret=LMTEU3TBJNUF2JSXOQ4T4NS2PVBWGMK5LASFUTKEOREVMTKIGJEQ\\\"}},\\n    \\\"96ae4a35-98a2-48ed-84dd-829c8e882117\\\":{\\\"id\\\":\\\"96ae4a35-98a2-48ed-84dd-829c8e882117\\\",\\n\\\"temp_secret\\\":{\\\"ascii\\\":\\\"7(Jv}W/1i9}J6at0ci)y}m{*I9Xd5I{%\\\",\\n  \\\"hex\\\":\\\"37284a767d572f3169397d4a36617430636929797d6d7b2a4939586435497b25\\\",\\n  \\\"base32\\\":\\\"G4UEU5T5K4XTC2JZPVFDMYLUGBRWSKLZPVWXWKSJHFMGINKJPMSQ\\\",\\n  \\\"otpauth_url\\\":\\\"otpauth://totp/SecretKey?secret=G4UEU5T5K4XTC2JZPVFDMYLUGBRWSKLZPVWXWKSJHFMGINKJPMSQ\\\"}},\\n  \\\"93c92864-8297-40b6-8550-4e7d4666742d\\\":{\\\"id\\\":\\\"93c92864-8297-40b6-8550-4e7d4666742d\\\",\\n    \\\"temp_secret\\\":{\\\"ascii\\\":\\\"OPCeDKax((p;q2Sm[Gny1p!nAChR86HE\\\",\\n      \\\"hex\\\":\\\"4f504365444b61782828703b7132536d5b476e793170216e4143685238364845\\\",\\n      \\\"base32\\\":\\\"J5IEGZKEJNQXQKBIOA5XCMSTNVNUO3TZGFYCC3SBINUFEOBWJBCQ\\\",\\n      \\\"otpauth_url\\\":\\\"otpauth://totp/SecretKey?secret=J5IEGZKEJNQXQKBIOA5XCMSTNVNUO3TZGFYCC3SBINUFEOBWJBCQ\\\"}},\\n      \\\"fa6f9da6-f9db-4caf-8e47-2f9309a11e6d\\\":{\\\"id\\\":\\\"fa6f9da6-f9db-4caf-8e47-2f9309a11e6d\\\",\\n        \\\"temp_secret\\\":{\\\"ascii\\\":\\\"qhRSFJy.;}MM&csaA$5PcaFg}X)LNuoQ\\\",\\n          \\\"hex\\\":\\\"71685253464a792e3b7d4d4d2663736141243550636146677d58294c4e756f51\\\",\\n          \\\"base32\\\":\\\"OFUFEU2GJJ4S4O35JVGSMY3TMFASINKQMNQUMZ35LAUUYTTVN5IQ\\\",\\n          \\\"otpauth_url\\\":\\\"otpauth://totp/SecretKey?secret=OFUFEU2GJJ4S4O35JVGSMY3TMFASINKQMNQUMZ35LAUUYTTVN5IQ\\\"}\\n          }\\n        }\\n      }\".trim();var server=\"\\n\\nconst express = require(\\\"express\\\");\\nconst bodyParser = require('body-parser');\\nconst JsonDB = require('node-json-db').JsonDB;\\nconst Config = require('node-json-db/dist/lib/JsonDBConfig').Config;\\nconst uuid = require(\\\"uuid\\\");\\nconst speakeasy = require(\\\"speakeasy\\\");\\nconst app = express();\\n\\n\\nvar db = new JsonDB(new Config(\\\"myDataBase\\\", true, false, '/'));\\n\\napp.use(bodyParser.json());\\napp.use(bodyParser.urlencoded({ extended: true }));\\n\\napp.post(\\\"/api/register\\\", (req, res) => {\\n  const id = uuid.v4();\\n  try {\\n    const path = '/user/'$'{id}';\\n    const temp_secret = speakeasy.generateSecret();     // Create temporary secret until it verified\\n    \\n    db.push(path, { id, temp_secret });                 // Create user in the database\\n    res.json({ id, secret: temp_secret.base32 })        // Send user id and base32 key to user\\n  } catch(e) {\\n    console.log(e);\\n    res.status(500).json({ message: 'Error generating secret key'})\\n  }\\n})\\n\\napp.post(\\\"/api/verify\\\", (req,res) => {\\n  const { userId, token } = req.body;\\n  try {\\n    const path = '/user/'$'{userId}';                       // Retrieve user from database\\n    const user = db.getData(path);\\n    console.log({ user })\\n    const { base32: secret } = user.temp_secret;\\n    const verified = speakeasy.totp.verify({\\n      secret,\\n      encoding: 'base32',\\n      token\\n    });\\n    if (verified) {\\n      db.push(path, { id: userId, secret: user.temp_secret });      // Update user data\\n      res.json({ verified: true })\\n    } else {\\n      res.json({ verified: false})\\n    }\\n  } catch(error) {\\n    console.error(error);\\n    res.status(500).json({ message: 'Error retrieving user'})\\n  };\\n})\\n\\napp.post(\\\"/api/validate\\\", (req,res) => {\\n  const { userId, token } = req.body;\\n  try {\\n    const path = '/user/'$'{userId}';                 // Retrieve user from database\\n    const user = db.getData(path);\\n    console.log({ user })\\n    const { base32: secret } = user.secret;\\n    const tokenValidates = speakeasy.totp.verify({  // Returns true if the token matches\\n      secret,\\n      encoding: 'base32',\\n      token,\\n      window: 1\\n    });\\n    if (tokenValidates) {\\n      res.json({ validated: true })\\n    } else {\\n      res.json({ validated: false})\\n    }\\n  } catch(error) {\\n    console.error(error);\\n    res.status(500).json({ message: 'Error retrieving user'})\\n  };\\n})\\n\\nconst port = 5000;\\n\\napp.listen(port, () => console.log('App is running on PORT.'));\".trim();var awaitPat=\"\\nGET: localhost:5000/api\\nPOST: localhost:5000/api/register\\n\\nPOST: localhost:5000/api/verify\\n      {\\n        \\\"userid\\\":\\\"fa6f9da6-f9db-4caf-8e47-2f9309a11e6d\\\",\\n         \\\"token\\\":\\\"132276\\\"\\n      }\".trim();var TwoFA=/*#__PURE__*/function(_Component){_inherits(TwoFA,_Component);function TwoFA(){_classCallCheck(this,TwoFA);return _possibleConstructorReturn(this,_getPrototypeOf(TwoFA).apply(this,arguments));}_createClass(TwoFA,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"2fa-speakeasy-example-master\"),React.createElement(\"b\",null,\"myDataBase.json\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:myDataBase,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"server.js\"),React.createElement(\"br\",null),\"The second argument is used to tell the DB to save after each push If you put false, you'll have to call the save() method.\",React.createElement(\"br\",null),\"The third argument is to ask JsonDB to save the database in an human readable format. (default false) The last argument is the separator. By default it's slash (/).\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:server,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"notes\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:awaitPat,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return TwoFA;}(Component);export default withStyles(styles)(TwoFA);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/nodeJs/nodeDeep/2fa_speakearst.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","myDataBase","trim","server","awaitPat","TwoFA","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,0BAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CAGA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,eAAe,CAAE,SAAnB,CAA8BC,OAAO,CAAE,KAAvC,CAA8CC,QAAQ,CAAE,MAAxD,CAAf,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,KAAK,CAAE,CACLC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH,CAELN,OAAO,CAAEG,KAAK,CAACG,OAAN,CAAc,CAAd,CAFJ,CADgB,CAKvBC,QAAQ,CAAE,CACRF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA,CALa,CAQvBE,SAAS,CAAE,CACTC,SAAS,CAAE,QADF,CARY,CAAL,EAApB,CAcA,GAAMC,CAAAA,UAAU,CAAG,6wDAwBVC,IAxBU,EAAnB,CA0BA,GAAMC,CAAAA,MAAM,CAAG,08EAgFkDD,IAhFlD,EAAf,CAkFA,GAAME,CAAAA,QAAQ,CAAG,iNAQRF,IARQ,EAAjB,C,GAWMG,CAAAA,K,iRACgB,CAClBC,UAAU,CAAC,iBAAMxB,CAAAA,KAAK,CAACyB,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAACb,KAA1B,EACE,8BAAI,oBAAC,OAAD,MAAJ,CADF,CADF,CADF,CAME,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEa,OAAO,CAACb,KAA1B,EACE,oBAAC,IAAD,MACE,6DADF,CAEE,+CAFF,CAGE,2BAAK,KAAK,CAAEN,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEY,UADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAHF,CAUE,8BAVF,CAWE,8BAXF,CAaE,yCAbF,CAakB,8BAblB,+HAe0D,8BAf1D,wKAkBE,2BAAK,KAAK,CAAEZ,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEc,MADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAlBF,CAyBE,8BAzBF,CA0BE,8BA1BF,CA4BE,qCA5BF,CA6BE,2BAAK,KAAK,CAAEd,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEe,QADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CA7BF,CADF,CADF,CANF,CADF,CAkDD,C,mBAxDiBvB,S,EA2DpB,cAAgBI,CAAAA,UAAU,CAACQ,MAAD,CAAV,CAAmBY,KAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst myDataBase = `\n{\"user\":{\"19aff1ae-35b2-407e-87bc-1b76b2ca54f7\":{\n  \"id\":\"19aff1ae-35b2-407e-87bc-1b76b2ca54f7\",\n  \"temp_secret\":{\"ascii\":\"[&JnaKh]&Wt9>6Z}Cc1]X$ZMDtIVMH2I\",\n    \"hex\":\"5b264a6e614b685d265774393e365a7d4363315d58245a4d447449564d483249\",\n    \"base32\":\"LMTEU3TBJNUF2JSXOQ4T4NS2PVBWGMK5LASFUTKEOREVMTKIGJEQ\",\n    \"otpauth_url\":\"otpauth://totp/SecretKey?secret=LMTEU3TBJNUF2JSXOQ4T4NS2PVBWGMK5LASFUTKEOREVMTKIGJEQ\"}},\n    \"96ae4a35-98a2-48ed-84dd-829c8e882117\":{\"id\":\"96ae4a35-98a2-48ed-84dd-829c8e882117\",\n\"temp_secret\":{\"ascii\":\"7(Jv}W/1i9}J6at0ci)y}m{*I9Xd5I{%\",\n  \"hex\":\"37284a767d572f3169397d4a36617430636929797d6d7b2a4939586435497b25\",\n  \"base32\":\"G4UEU5T5K4XTC2JZPVFDMYLUGBRWSKLZPVWXWKSJHFMGINKJPMSQ\",\n  \"otpauth_url\":\"otpauth://totp/SecretKey?secret=G4UEU5T5K4XTC2JZPVFDMYLUGBRWSKLZPVWXWKSJHFMGINKJPMSQ\"}},\n  \"93c92864-8297-40b6-8550-4e7d4666742d\":{\"id\":\"93c92864-8297-40b6-8550-4e7d4666742d\",\n    \"temp_secret\":{\"ascii\":\"OPCeDKax((p;q2Sm[Gny1p!nAChR86HE\",\n      \"hex\":\"4f504365444b61782828703b7132536d5b476e793170216e4143685238364845\",\n      \"base32\":\"J5IEGZKEJNQXQKBIOA5XCMSTNVNUO3TZGFYCC3SBINUFEOBWJBCQ\",\n      \"otpauth_url\":\"otpauth://totp/SecretKey?secret=J5IEGZKEJNQXQKBIOA5XCMSTNVNUO3TZGFYCC3SBINUFEOBWJBCQ\"}},\n      \"fa6f9da6-f9db-4caf-8e47-2f9309a11e6d\":{\"id\":\"fa6f9da6-f9db-4caf-8e47-2f9309a11e6d\",\n        \"temp_secret\":{\"ascii\":\"qhRSFJy.;}MM&csaA$5PcaFg}X)LNuoQ\",\n          \"hex\":\"71685253464a792e3b7d4d4d2663736141243550636146677d58294c4e756f51\",\n          \"base32\":\"OFUFEU2GJJ4S4O35JVGSMY3TMFASINKQMNQUMZ35LAUUYTTVN5IQ\",\n          \"otpauth_url\":\"otpauth://totp/SecretKey?secret=OFUFEU2GJJ4S4O35JVGSMY3TMFASINKQMNQUMZ35LAUUYTTVN5IQ\"}\n          }\n        }\n      }`.trim();\n\nconst server = `\n\nconst express = require(\"express\");\nconst bodyParser = require('body-parser');\nconst JsonDB = require('node-json-db').JsonDB;\nconst Config = require('node-json-db/dist/lib/JsonDBConfig').Config;\nconst uuid = require(\"uuid\");\nconst speakeasy = require(\"speakeasy\");\nconst app = express();\n\n\nvar db = new JsonDB(new Config(\"myDataBase\", true, false, '/'));\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post(\"/api/register\", (req, res) => {\n  const id = uuid.v4();\n  try {\n    const path = '/user/'$'{id}';\n    const temp_secret = speakeasy.generateSecret();     // Create temporary secret until it verified\n    \n    db.push(path, { id, temp_secret });                 // Create user in the database\n    res.json({ id, secret: temp_secret.base32 })        // Send user id and base32 key to user\n  } catch(e) {\n    console.log(e);\n    res.status(500).json({ message: 'Error generating secret key'})\n  }\n})\n\napp.post(\"/api/verify\", (req,res) => {\n  const { userId, token } = req.body;\n  try {\n    const path = '/user/'$'{userId}';                       // Retrieve user from database\n    const user = db.getData(path);\n    console.log({ user })\n    const { base32: secret } = user.temp_secret;\n    const verified = speakeasy.totp.verify({\n      secret,\n      encoding: 'base32',\n      token\n    });\n    if (verified) {\n      db.push(path, { id: userId, secret: user.temp_secret });      // Update user data\n      res.json({ verified: true })\n    } else {\n      res.json({ verified: false})\n    }\n  } catch(error) {\n    console.error(error);\n    res.status(500).json({ message: 'Error retrieving user'})\n  };\n})\n\napp.post(\"/api/validate\", (req,res) => {\n  const { userId, token } = req.body;\n  try {\n    const path = '/user/'$'{userId}';                 // Retrieve user from database\n    const user = db.getData(path);\n    console.log({ user })\n    const { base32: secret } = user.secret;\n    const tokenValidates = speakeasy.totp.verify({  // Returns true if the token matches\n      secret,\n      encoding: 'base32',\n      token,\n      window: 1\n    });\n    if (tokenValidates) {\n      res.json({ validated: true })\n    } else {\n      res.json({ validated: false})\n    }\n  } catch(error) {\n    console.error(error);\n    res.status(500).json({ message: 'Error retrieving user'})\n  };\n})\n\nconst port = 5000;\n\napp.listen(port, () => console.log('App is running on PORT.'));`.trim();\n\nconst awaitPat = `\nGET: localhost:5000/api\nPOST: localhost:5000/api/register\n\nPOST: localhost:5000/api/verify\n      {\n        \"userid\":\"fa6f9da6-f9db-4caf-8e47-2f9309a11e6d\",\n         \"token\":\"132276\"\n      }`.trim();\n\n\nclass TwoFA extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>2fa-speakeasy-example-master</h3>\n              <b>myDataBase.json</b>\n              <div style={titles}>\n                <PrismCode\n                  code={myDataBase}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>server.js</b><br/>\n              The second argument is used to tell the DB to save after each push\n              If you put false, you'll have to call the save() method.<br/>\n              The third argument is to ask JsonDB to save the database in an human readable format. (default false)\n              The last argument is the separator. By default it's slash (/).\n              <div style={titles}>\n                <PrismCode\n                  code={server}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>notes</b>\n              <div style={titles}>\n                <PrismCode\n                  code={awaitPat}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(TwoFA));\n"]},"metadata":{},"sourceType":"module"}