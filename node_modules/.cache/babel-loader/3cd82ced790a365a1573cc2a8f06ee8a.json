{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/pythone/deeppy/logicalspy.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst decBinar = `\nbinary_num,base = 0,1\ndecimal_num = int(input(\"Enter a Decimal number:\")) #10\n\nwhile (decimal_num > 0):\n    remainder = decimal_num % 2\n    binary_num = binary_num + remainder * base\n    decimal_num = decimal_num // 2\n    base = base * 10\nprint(binary_num)\n`.trim();\nconst decimals = `\ndecimal_val,base = 0,1\nbinary_val = 1010\n\nwhile (binary_val > 0):\n    rem = binary_val % 10\n    decimal_val = decimal_val + rem * base\n    binary_val = binary_val // 10 \n    base = base * 2\nprint(decimal_val)\n`.trim();\nconst factorials = `\nn = 4\nfact = 1\nfor i in range(1,n+1):\n   fact *= i\nprint(fact)\n`.trim();\nconst firstNum = `\ndef printFun():\n  num = 10\n  for i in range(1, num):\n    print(i, end=\",\")\n  \nprintFun()\n`.trim();\nconst firstNums = `\ndef printFun():\n  num = 10\n  result = 0\n  for i in range(1, num):\n    result += i\n  print(result, end=\",\")\n  \nprintFun()\n`.trim();\nconst multiply = `\ndef multiply():\n    num1 = 3\n    num2 = 4\n    product = 0\n    for i in range(0, num2):\n        product += num1\n    print(product)\n    \nmultiply()\n`.trim();\nconst reverseNum = `\ndef printFun():\n  num = 10\n  for i in range(num, 0, -1):\n    print(i, end=\",\")\n  \nprintFun()\n`.trim();\nconst reverseNums = `\ndef firstDigit():\n    n = 123\n    while (n > 10):\n        n = n // 10\n    print(n)\nfirstDigit()\n`.trim();\nconst reverseNump = `\ndef firstEODigit():\n    n=10\n    for i in range(1,n):\n      if(i%2==0):\n        print('even',i)\n      else:\n        print('Odd',i)\n    \nfirstEODigit()\n`.trim();\nconst armstongs = `\nnum = 407\nsum = 0\ntemp = num\n\nwhile temp > 0:\n   digit = temp % 10\n   sum += digit ** 3\n   temp //= 10\n\nif num == sum:\n   print(num,\"is an Armstrong number\")\nelse:\n   print(num,\"is not an Armstrong number\")\n`.trim();\nconst countVowel = `\nvowels = 'aeiou'\nstr = 'Hello, have you tried our tutorial section yet?'\n\nstr = str.casefold()\ncount = {}.fromkeys(vowels,0)\n\nfor char in str:\n   if char in count:\n       count[char] += 1\n\nprint(count)\n`.trim();\nconst fibnacci = `\na, b = 0, 1\n\nwhile b < 80:\n    c=a+b\n    print(c)\n    a=b\n    b=c`.trim();\nconst palindrom = `\ndef palindrom():\n  str='madam'\n  str2=''\n  \n  for i in str:\n    str2 = i + str2\n  \n  if(str==str2):\n    print('Palindeom',str2)\n  else:\n    print('Not Palindrom',str2)\n    \npalindrom()\n`.trim();\nconst printNums = `\nfor num in range(0, 10 + 1):\n     for i in range(2, num):\n         if (num % i) == 0:\n             break\n     else:\n         print(num)\n`.trim();\nconst shuffle = `\nimport itertools, random\n\ndeck = list(itertools.product(range(1,14),['Spade','Heart','Diamond','Club']))        # make a deck of cards\nrandom.shuffle(deck)                                                                  # shuffle the cards\n\nfor i in range(5):\n   print(deck[i][0], \"of\", deck[i][1])`.trim();\nconst star = `\nn=3\nfor i in range (n, 0, -1):\n   print((n-i) * ' ' + i * '*')\n`.trim();\nconst double_sided_start = `\ndef pattern():\n n = 10\n for i in range(1,n+1):\n     k =i + 1 if(i % 2 != 0) else i\n\n     for g in range(k,n):\n         if g>=k:\n             print(end=\"  \")\n\n     for j in range(0,k):\n         if j == k - 1:\n             print(\" * \")\n         else:\n             print(\" * \", end = \" \")\n   \npattern()\n`.trim();\nconst print_G = `\n   def Pattern(line):\n       pat=\"\"\n       for i in range(0,line):\n           for j in range(0,line):\n               if ((j == 1 and i != 0 and i != line-1) or ((i == 0 or\n                   i == line-1) and j > 1 and j < line-2) or (i == ((line-1)/2)\n                   and j > line-5 and j < line-1) or (j == line-2 and\n                   i != 0 and i != line-1 and i >=((line-1)/2))):\n                   pat=pat+\"*\"\n               else:\n                   pat=pat+\" \"\n           pat=pat+\"nL\"\n       return pat\n   \nline = 7\nprint(Pattern(line)) \n`.trim();\nconst percentiles = `\nimport numpy as np\n\na = np.array([1,2,3,4,5,6,7])\np = np.percentile(a, 50)\nprint(p)\n`.trim();\nconst int = `birth_year = input('Birth Year: ')\nprint(type(birth_year))\nage = 2019 - int(birth_year)\nprint(age)\n`.trim();\nconst Pound = `weight_lbs = input('Weight(lbs):')\nweight_kg = int(weight_lbs) * 0.45\nprint(weight_kg)\n`.trim();\nconst duplicate = `numbers = [5,4,3,6,7,3,6]\nuniques = []\nfor number in numbers:\n    if number not in uniques:\n        uniques.append(number)\n    print(uniques)\n`.trim();\nconst maximum = `numbers = [10,3,6,2]\nmax = numbers[0]\nfor number in numbers:\n    if number > max:\n        max = number\nprint(max)\n`.trim();\nconst tuples = `\nprint(\"Entr element separated by comma for frst tuple\")\nt1=tuple([eval(e) for e in input().split(',')])\n\nprint(\"Entr element separated by comma for second tuple\")\nt2=tuple([eval(e) for e in input().split(',')])\n\nif t1==t2:\n    print(\"Tuples\")\nelse:\n    print(\"Not tuples\")\n`.trim();\nconst duplicates = `\ns = 'Enter a string'\ni = 0\ns1 = \"\"\nfor x in s:\n    if s.index(x) == i:\n        s1 += x\n    i += 1\nprint(s1)\n`.trim();\nconst dictionary = `\nprint(\"Enter three city names\")\na,b,c=input(), input(), input()\nif a<b<c:\n    print(a,b,c)\nelif a<c<b:\n    print(a,c,b)\nelif b<a<c:\n    print(b,a,c)\nelif b<c<a:\n    print(b,c,a)\nelif c<a<b:\n    print(c,a,b)\nelse:\n    print(c,b,a)\n`.trim();\n\nclass LogicalsPy extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, \"1. Decimal-Binary\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: decBinar,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, \"2. Binary-Decimal\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: decimals,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, \"3. Factorial\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: factorials,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }, \"4. First N Numbers\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: firstNum,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, \"5. Sum of natural numbers\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: firstNums,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, \"6. Multiply N numbers without *\"), \"Insteaded multiply num1 and num2, just add num1 for num2 times.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: multiply,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, \"7. Reverse numbers\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: reverseNum,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, \"8. First digit of number\"), \"Given number is continuously divided by 10, till it becomes lesser than 10 and greater than 0. and the final answer is first digit of given number.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: reverseNums,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }, \"9. Odd or Even Number.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: reverseNump,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }, \"10. Armstrong number\"), \"The number whose sum of each digit powered with the total number of digits is the same as the given number.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: armstongs,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }, \"11. Count number of each vowel\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: countVowel,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    }, \"12. Fibonci\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: fibnacci,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    }, \"13. Palindome\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: palindrom,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }, \"14. Prime number\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: printNums,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }, \"15. Shuffle deck of cards\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: shuffle,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485\n      },\n      __self: this\n    }, \"16. Star\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: star,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    }, \"17. Double sided star\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: double_sided_start,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, \"18. Print_G\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: print_G,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }, \"19. What is the easiest way to calculate percentiles when using Python?\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: percentiles,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    }, \"20. Data conversion: int(), float(), bool()\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: int,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, \"21. Pound convert into Kilogram\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Pound,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }, \"22. Write a programe to remove duplicate in a list\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: duplicate,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555\n      },\n      __self: this\n    }, \"23. Find maximum number in array\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maximum,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565\n      },\n      __self: this\n    }, \"24. Compare two tuples whether they contain the same elements in same order or nat.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: tuples,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575\n      },\n      __self: this\n    }, \"25. Remove duplicate character from the string.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: duplicates,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585\n      },\n      __self: this\n    }, \"26. Arrange three words in dictionary order.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: dictionary,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(LogicalsPy);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/pythone/deeppy/logicalspy.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","decBinar","trim","decimals","factorials","firstNum","firstNums","multiply","reverseNum","reverseNums","reverseNump","armstongs","countVowel","fibnacci","palindrom","printNums","shuffle","star","double_sided_start","print_G","percentiles","int","Pound","duplicate","maximum","tuples","duplicates","dictionary","LogicalsPy","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst decBinar = `\nbinary_num,base = 0,1\ndecimal_num = int(input(\"Enter a Decimal number:\")) #10\n\nwhile (decimal_num > 0):\n    remainder = decimal_num % 2\n    binary_num = binary_num + remainder * base\n    decimal_num = decimal_num // 2\n    base = base * 10\nprint(binary_num)\n`.trim();\n\nconst decimals = `\ndecimal_val,base = 0,1\nbinary_val = 1010\n\nwhile (binary_val > 0):\n    rem = binary_val % 10\n    decimal_val = decimal_val + rem * base\n    binary_val = binary_val // 10 \n    base = base * 2\nprint(decimal_val)\n`.trim();\n\nconst factorials = `\nn = 4\nfact = 1\nfor i in range(1,n+1):\n   fact *= i\nprint(fact)\n`.trim();\n\nconst firstNum = `\ndef printFun():\n  num = 10\n  for i in range(1, num):\n    print(i, end=\",\")\n  \nprintFun()\n`.trim();\n\nconst firstNums = `\ndef printFun():\n  num = 10\n  result = 0\n  for i in range(1, num):\n    result += i\n  print(result, end=\",\")\n  \nprintFun()\n`.trim();\n\nconst multiply = `\ndef multiply():\n    num1 = 3\n    num2 = 4\n    product = 0\n    for i in range(0, num2):\n        product += num1\n    print(product)\n    \nmultiply()\n`.trim();\n\nconst reverseNum = `\ndef printFun():\n  num = 10\n  for i in range(num, 0, -1):\n    print(i, end=\",\")\n  \nprintFun()\n`.trim();\n\nconst reverseNums = `\ndef firstDigit():\n    n = 123\n    while (n > 10):\n        n = n // 10\n    print(n)\nfirstDigit()\n`.trim();\n\nconst reverseNump = `\ndef firstEODigit():\n    n=10\n    for i in range(1,n):\n      if(i%2==0):\n        print('even',i)\n      else:\n        print('Odd',i)\n    \nfirstEODigit()\n`.trim();\n\nconst armstongs = `\nnum = 407\nsum = 0\ntemp = num\n\nwhile temp > 0:\n   digit = temp % 10\n   sum += digit ** 3\n   temp //= 10\n\nif num == sum:\n   print(num,\"is an Armstrong number\")\nelse:\n   print(num,\"is not an Armstrong number\")\n`.trim();\n\nconst countVowel = `\nvowels = 'aeiou'\nstr = 'Hello, have you tried our tutorial section yet?'\n\nstr = str.casefold()\ncount = {}.fromkeys(vowels,0)\n\nfor char in str:\n   if char in count:\n       count[char] += 1\n\nprint(count)\n`.trim();\n\nconst fibnacci = `\na, b = 0, 1\n\nwhile b < 80:\n    c=a+b\n    print(c)\n    a=b\n    b=c`.trim();\n\nconst palindrom = `\ndef palindrom():\n  str='madam'\n  str2=''\n  \n  for i in str:\n    str2 = i + str2\n  \n  if(str==str2):\n    print('Palindeom',str2)\n  else:\n    print('Not Palindrom',str2)\n    \npalindrom()\n`.trim();\n\nconst printNums = `\nfor num in range(0, 10 + 1):\n     for i in range(2, num):\n         if (num % i) == 0:\n             break\n     else:\n         print(num)\n`.trim();\n\nconst shuffle = `\nimport itertools, random\n\ndeck = list(itertools.product(range(1,14),['Spade','Heart','Diamond','Club']))        # make a deck of cards\nrandom.shuffle(deck)                                                                  # shuffle the cards\n\nfor i in range(5):\n   print(deck[i][0], \"of\", deck[i][1])`.trim();\n\nconst star = `\nn=3\nfor i in range (n, 0, -1):\n   print((n-i) * ' ' + i * '*')\n`.trim();\n\nconst double_sided_start = `\ndef pattern():\n n = 10\n for i in range(1,n+1):\n     k =i + 1 if(i % 2 != 0) else i\n\n     for g in range(k,n):\n         if g>=k:\n             print(end=\"  \")\n\n     for j in range(0,k):\n         if j == k - 1:\n             print(\" * \")\n         else:\n             print(\" * \", end = \" \")\n   \npattern()\n`.trim();\n\nconst print_G = `\n   def Pattern(line):\n       pat=\"\"\n       for i in range(0,line):\n           for j in range(0,line):\n               if ((j == 1 and i != 0 and i != line-1) or ((i == 0 or\n                   i == line-1) and j > 1 and j < line-2) or (i == ((line-1)/2)\n                   and j > line-5 and j < line-1) or (j == line-2 and\n                   i != 0 and i != line-1 and i >=((line-1)/2))):\n                   pat=pat+\"*\"\n               else:\n                   pat=pat+\" \"\n           pat=pat+\"nL\"\n       return pat\n   \nline = 7\nprint(Pattern(line)) \n`.trim();\n\nconst percentiles = `\nimport numpy as np\n\na = np.array([1,2,3,4,5,6,7])\np = np.percentile(a, 50)\nprint(p)\n`.trim()\n\nconst int = `birth_year = input('Birth Year: ')\nprint(type(birth_year))\nage = 2019 - int(birth_year)\nprint(age)\n`.trim()\n\nconst Pound = `weight_lbs = input('Weight(lbs):')\nweight_kg = int(weight_lbs) * 0.45\nprint(weight_kg)\n`.trim()\n\nconst duplicate = `numbers = [5,4,3,6,7,3,6]\nuniques = []\nfor number in numbers:\n    if number not in uniques:\n        uniques.append(number)\n    print(uniques)\n`.trim()\n\nconst maximum = `numbers = [10,3,6,2]\nmax = numbers[0]\nfor number in numbers:\n    if number > max:\n        max = number\nprint(max)\n`.trim()\n\nconst tuples = `\nprint(\"Entr element separated by comma for frst tuple\")\nt1=tuple([eval(e) for e in input().split(',')])\n\nprint(\"Entr element separated by comma for second tuple\")\nt2=tuple([eval(e) for e in input().split(',')])\n\nif t1==t2:\n    print(\"Tuples\")\nelse:\n    print(\"Not tuples\")\n`.trim();\n\nconst duplicates = `\ns = 'Enter a string'\ni = 0\ns1 = \"\"\nfor x in s:\n    if s.index(x) == i:\n        s1 += x\n    i += 1\nprint(s1)\n`.trim();\n\nconst dictionary = `\nprint(\"Enter three city names\")\na,b,c=input(), input(), input()\nif a<b<c:\n    print(a,b,c)\nelif a<c<b:\n    print(a,c,b)\nelif b<a<c:\n    print(b,a,c)\nelif b<c<a:\n    print(b,c,a)\nelif c<a<b:\n    print(c,a,b)\nelse:\n    print(c,b,a)\n`.trim();\n\n\nclass LogicalsPy extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Decimal-Binary</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={decBinar}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Binary-Decimal</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={decimals}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Factorial</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={factorials}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. First N Numbers</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={firstNum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. Sum of natural numbers</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={firstNums}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Multiply N numbers without *</h3>\n              Insteaded multiply num1 and num2, just add num1 for num2 times.\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={multiply}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7. Reverse numbers</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={reverseNum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>8. First digit of number</h3>\n              Given number is continuously divided by 10, till it becomes lesser than 10 and greater than 0.\n              and the final answer is first digit of given number.\n              <div style={titles}>\n                <PrismCode\n                  code={reverseNums}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>9. Odd or Even Number.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={reverseNump}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>10. Armstrong number</h3>\n              The number whose sum of each digit powered with the total number of digits is the same as the given number.\n              <div style={titles}>\n                <PrismCode\n                  code={armstongs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>11. Count number of each vowel</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={countVowel}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>12. Fibonci</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={fibnacci}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>13. Palindome</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={palindrom}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>14. Prime number</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={printNums}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>15. Shuffle deck of cards</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={shuffle}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>16. Star</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={star}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>17. Double sided star</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={double_sided_start}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>18. Print_G</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={print_G}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>19. What is the easiest way to calculate percentiles when using Python?</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={percentiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>20. Data conversion: int(), float(), bool()</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={int}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>21. Pound convert into Kilogram</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Pound}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>22. Write a programe to remove duplicate in a list</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={duplicate}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>23. Find maximum number in array</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={maximum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>24. Compare two tuples whether they contain the same elements in same order or nat.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={tuples}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>25. Remove duplicate character from the string.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={duplicates}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>26. Arrange three words in dictionary order.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={dictionary}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(LogicalsPy));\n"]},"metadata":{},"sourceType":"module"}