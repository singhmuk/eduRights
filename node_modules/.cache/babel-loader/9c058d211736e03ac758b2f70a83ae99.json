{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/lifeCycleAng.js\";\nimport React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\nconst titles = {\n  backgroundColor: \"#F0F8FF\",\n  padding: \"1px\",\n  fontSize: \"16px\"\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst appcompos = `\nimport {\n  Component,\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewChecked,\n  AfterViewInit,\n  DoCheck,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Input,\n  SimpleChanges\n} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '\n      <h2> Life Cycle Hooks</h2>\n        <button (click) = \"toggle()\"> Hide / Show Child</button >\n        \n        <child-component *ngIf=\"displayChild\" [message] = \"'Hello'\">\n      </child-component>\n  '\n})\nexport class AppComponent implements\n  OnChanges,\n  OnInit,\n  DoCheck,\n  AfterContentInit,\n  AfterContentChecked,\n  AfterViewInit,\n  AfterViewChecked,\n  OnDestroy {\n\n    displayChild: boolean = false;\n\n    constructor() {\n      console.log(\"AppComponent: Constructor\");\n    }\n\n    toggle() {\n      this.displayChild = !this.displayChild;\n    }\n\n    ngOnChanges() {\n      console.log(\"AppComponent: OnChanges\");\n    }\n\n    ngOnInit() {\n      console.log(\"AppComponent: OnInit\");\n    }\n\n    ngDoCheck() {\n      console.log(\"AppComponent: DoCheck\");\n    }\n\n    ngAfterContentInit() {\n      console.log(\"AppComponent: AfterContentInit\");\n    }\n\n    ngAfterContentChecked() {\n    console.log(\"AppComponent:AfterContentChecked\");\n    }\n\n    ngAfterViewInit() {\n    console.log(\"AppComponent:AfterViewInit\");\n    }\n\n    ngAfterViewChecked() {\n      console.log(\"AppComponent:AfterViewChecked\");\n    }\n\n    ngOnDestroy() {\n      console.log(\"AppComponent:OnDestroy\");\n    }\n}\n`.trim();\nconst childcompo = `\nimport {\n  Component,\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewChecked,\n  AfterViewInit,\n  DoCheck,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Input,\n  SimpleChanges\n} from '@angular/core';\n\n@Component({\n  selector: 'child-component',\n  template: '<h > Child Component</h2>'\n})\n\nexport class ChildComponent implements\n  OnChanges,\n  OnInit,\n  DoCheck,\n  AfterContentInit,\n  AfterContentChecked,\n  AfterViewInit,\n  AfterViewChecked,\n  OnDestroy {\n    @Input() message:string = \"\";\n\n    constructor() {\n    console.log(\"ChildComponent:Constructor\");\n    }\n\n    ngOnChanges() {\n      console.log(\"ChildComponent:OnChanges\");\n    }\n\n\n    ngOnInit() {\n      console.log(\"ChildComponent:OnInit\");\n    }\n\n    ngDoCheck() {\n      console.log(\"ChildComponent:DoCheck\");\n    }\n\n    ngAfterContentInit() {\n      console.log(\"ChildComponent:AfterContentInit\");\n    }\n\n    ngAfterContentChecked() {\n      console.log(\"ChildComponent:AfterContentChecked\");\n    }\n\n    ngAfterViewInit() {\n      console.log(\"ChildComponent:AfterViewInit\");\n    }\n\n    ngAfterViewChecked() {\n      console.log(\"ChildComponent:AfterViewChecked\");\n    }\n\n    ngOnDestroy() {\n      console.log(\"ChildComponent:OnDestroy\");\n    }\n}`.trim();\nconst fullResponse = `\nimport { HttpClient, HttpResponse } from '@angular/common/http';\n\n\nconstructor(private http: HttpClient) {}\n\nthis.http.get('https://example.com/api', { observe: 'response' })\n  .subscribe((response: HttpResponse<any>) => {\n    console.log(response.headers); // headers of the response\n    console.log(response.status); // status code of the response\n    console.log(response.body);   // body of the response\n  });\n`.trim();\nconst performError = `\n//html\n<p>{{errorMessage}}</p>\n\n\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\n\nexport class AppComponent {\n  public errorMessage: string;\n\n  constructor(private http: HttpClient) {\n    this.getData().subscribe((res) => console.log(res), (error: HttpErrorResponse) => {\n\n        if (error.error instanceof ErrorEvent) {\n          this.errorMessage = 'Error: '$'{error.error.message}';                            // client-side error\n        } \n        else {\n          this.errorMessage = 'Error Code: '$'{error.status} Message: '$'{error.message}';  // server-side error\n        }\n      }\n    );\n  }\n\n  private getData() {\n    const url = 'https://my-api.com/data';\n    return this.http.get(url).pipe(\n      catchError((error: HttpErrorResponse) => {\n        return throwError(error);\n      })\n    );\n  }\n}\n`.trim();\n\nclass AngularLifeCycle extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"1. lifecycle hook\"), \"Constructor excuite first. If we need to inject any dependencies into component, then Constructor is the best place to inject those dependencies. After excuitiing Constructor angular excuites its lifecycle hooks in a specific order.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, \"Sequeces: \"), \"OnChange - OnInit - DoCheck - AfterContentInit - AfterContentChecked - AfterViewInit - AfterViewChecked - OnDestry.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \"Lifecycle of a component includes:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, \"Creating a component\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, \"Rendering a component\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, \"Creating And Rendering its child component\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, \"Checking data-bound properties\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, \"Checking and removing it from DOM\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, \"ngOnChange:\"), \"Respond when Angular sets data-bound input properties. The method receives a SimpleChanges object of current and previous property values.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, \"Alwase called whenever one of our bound input changes.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, \"Used in any component that has an input.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, \"Called whenever an input value changes\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, \"Is called the first time before ngOnInit\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, \"ngOnInit():\"), \"Initialize the directive/ component after Angular first displays the data-bound properties and sets the directive/ component's input properties.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }), \"can be excuited once component has been initialize. This hook is fired before any of the child directive properties are initialize. This place we put logic related to initialization of properties.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, \"Called once, after the first ngOnChanges().\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, \"Used to initialize data in a component.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, \"called after input values are set when a component is initialized.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, \"Called only once.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, \"ngDoCheck():\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }), \"Called during every change detection run, immediately after ngOnChanges() and ngOnInit().\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }), \"whenever something changes on the template of a component or inside component then it excuites. it called during every changes detection run. This is similar to ngOnChanges() hook, but ngOnChanges() not detect all the changes made to the input properties.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }), \"It detects changes for those properties which passed by value. However, ngDoCheck() detects changes for those properties also which are passed reference such as array.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, \"Called during all changes detection runs.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, \"A run through the view by Angular to update/ detect changes.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, \"ngAfterContentInit():\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, \"Respond after Angular projects external content into the component's view.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, \"Called once after the first ngDoCheck().\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, \"ngAfterContentChecked():\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, \"Respond after Angular checks the content projected into the directive/ component.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, \"Called after the ngAfterContentInit() and every subsequent ngDoCheck().\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, \"ngAfterViewInit():\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, \"Respond after Angular initializes the component's views and child views.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, \"Called once after the first ngAfterContentChecked().\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, \"ngAfterViewChecked():\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, \"Respond after Angular checks the component's views and child views.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }, \"Called after the ngAfterViewInit() and every subsequent ngAfterContentChecked().\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, \"ngOnDestroy():\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, \"Cleanup just before Angular destroys the directive/ component. Unsubscribe Observables and detach event handlers to avoid memory leaks.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }, \"Called just before Angular destroys the directive/ component.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, \"app.component.ts\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: appcompos,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, \"child.component.ts\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: childcompo,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, \"2. What is the use of Codelyzer\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, \"Codelyzer provides a set of rules and guidelines for writing high-quality, maintainable code. It is built on top of TSLint, a popular static analysis tool for TypeScript, and is specifically designed to analyze Angular-specific code.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, \"Codelyzer can be run via angular cli or npm directly.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }, \"3. Why should ngOnInit be used, if we already have a constructor\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }, \"The constructor is a special method that is called when an instance of a component is created. It's primarily used for dependency injection, where you inject services or other dependencies into the component's constructor parameters. You can also perform initialization tasks in the constructor, such as setting default property values.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, \"ngOnInit is a lifecycle hook that is called after the component's constructor is called and all its inputs are set. It's used for initialization tasks that require the component's inputs to be set, such as fetching data from a server or initializing a form.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }, \"To summarize, the constructor is used for dependency injection and initialization tasks that don't require the component's inputs to be set, while ngOnInit is used for initialization tasks that require the component's inputs to be set.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }, \"4. How can you read full response\"), \"To read the full response, you can set the observe option of the HttpClient request to 'response' instead of the default 'body'. This tells HttpClient to return the full HTTP response, including the headers and status code, instead of just the response body.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: fullResponse,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    }, \"5. How do you perform Error handling\"), \"In Angular, error handling can be performed using a combination of techniques, including try-catch blocks, error handling functions, and observable error handling.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: performError,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    }, \"How do you implement server-side rendering in Angular?\"), \"Server-side rendering (SSR) is a technique used to improve the initial load time and search engine optimization (SEO) of web applications by rendering the HTML on the server before sending it to the client.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }, \"Install:\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(AngularLifeCycle);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/lifeCycleAng.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","appcompos","trim","childcompo","fullResponse","performError","AngularLifeCycle","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst appcompos = `\nimport {\n  Component,\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewChecked,\n  AfterViewInit,\n  DoCheck,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Input,\n  SimpleChanges\n} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '\n      <h2> Life Cycle Hooks</h2>\n        <button (click) = \"toggle()\"> Hide / Show Child</button >\n        \n        <child-component *ngIf=\"displayChild\" [message] = \"'Hello'\">\n      </child-component>\n  '\n})\nexport class AppComponent implements\n  OnChanges,\n  OnInit,\n  DoCheck,\n  AfterContentInit,\n  AfterContentChecked,\n  AfterViewInit,\n  AfterViewChecked,\n  OnDestroy {\n\n    displayChild: boolean = false;\n\n    constructor() {\n      console.log(\"AppComponent: Constructor\");\n    }\n\n    toggle() {\n      this.displayChild = !this.displayChild;\n    }\n\n    ngOnChanges() {\n      console.log(\"AppComponent: OnChanges\");\n    }\n\n    ngOnInit() {\n      console.log(\"AppComponent: OnInit\");\n    }\n\n    ngDoCheck() {\n      console.log(\"AppComponent: DoCheck\");\n    }\n\n    ngAfterContentInit() {\n      console.log(\"AppComponent: AfterContentInit\");\n    }\n\n    ngAfterContentChecked() {\n    console.log(\"AppComponent:AfterContentChecked\");\n    }\n\n    ngAfterViewInit() {\n    console.log(\"AppComponent:AfterViewInit\");\n    }\n\n    ngAfterViewChecked() {\n      console.log(\"AppComponent:AfterViewChecked\");\n    }\n\n    ngOnDestroy() {\n      console.log(\"AppComponent:OnDestroy\");\n    }\n}\n`.trim();\n\nconst childcompo = `\nimport {\n  Component,\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewChecked,\n  AfterViewInit,\n  DoCheck,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Input,\n  SimpleChanges\n} from '@angular/core';\n\n@Component({\n  selector: 'child-component',\n  template: '<h > Child Component</h2>'\n})\n\nexport class ChildComponent implements\n  OnChanges,\n  OnInit,\n  DoCheck,\n  AfterContentInit,\n  AfterContentChecked,\n  AfterViewInit,\n  AfterViewChecked,\n  OnDestroy {\n    @Input() message:string = \"\";\n\n    constructor() {\n    console.log(\"ChildComponent:Constructor\");\n    }\n\n    ngOnChanges() {\n      console.log(\"ChildComponent:OnChanges\");\n    }\n\n\n    ngOnInit() {\n      console.log(\"ChildComponent:OnInit\");\n    }\n\n    ngDoCheck() {\n      console.log(\"ChildComponent:DoCheck\");\n    }\n\n    ngAfterContentInit() {\n      console.log(\"ChildComponent:AfterContentInit\");\n    }\n\n    ngAfterContentChecked() {\n      console.log(\"ChildComponent:AfterContentChecked\");\n    }\n\n    ngAfterViewInit() {\n      console.log(\"ChildComponent:AfterViewInit\");\n    }\n\n    ngAfterViewChecked() {\n      console.log(\"ChildComponent:AfterViewChecked\");\n    }\n\n    ngOnDestroy() {\n      console.log(\"ChildComponent:OnDestroy\");\n    }\n}`.trim();\n\nconst fullResponse = `\nimport { HttpClient, HttpResponse } from '@angular/common/http';\n\n\nconstructor(private http: HttpClient) {}\n\nthis.http.get('https://example.com/api', { observe: 'response' })\n  .subscribe((response: HttpResponse<any>) => {\n    console.log(response.headers); // headers of the response\n    console.log(response.status); // status code of the response\n    console.log(response.body);   // body of the response\n  });\n`.trim();\n\nconst performError = `\n//html\n<p>{{errorMessage}}</p>\n\n\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\n\nexport class AppComponent {\n  public errorMessage: string;\n\n  constructor(private http: HttpClient) {\n    this.getData().subscribe((res) => console.log(res), (error: HttpErrorResponse) => {\n\n        if (error.error instanceof ErrorEvent) {\n          this.errorMessage = 'Error: '$'{error.error.message}';                            // client-side error\n        } \n        else {\n          this.errorMessage = 'Error Code: '$'{error.status} Message: '$'{error.message}';  // server-side error\n        }\n      }\n    );\n  }\n\n  private getData() {\n    const url = 'https://my-api.com/data';\n    return this.http.get(url).pipe(\n      catchError((error: HttpErrorResponse) => {\n        return throwError(error);\n      })\n    );\n  }\n}\n`.trim();\n\nclass AngularLifeCycle extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. lifecycle hook</h3>\n              Constructor excuite first. If we need to inject any dependencies\n              into component, then Constructor is the best place to inject those\n              dependencies. After excuitiing Constructor angular excuites its\n              lifecycle hooks in a specific order.\n              <br />\n              <br />\n              <b>Sequeces: </b>\n              OnChange - OnInit - DoCheck - AfterContentInit -\n              AfterContentChecked - AfterViewInit - AfterViewChecked - OnDestry.\n              <br />\n              <br />\n              <b>Lifecycle of a component includes:</b>\n              <br />\n              <ul>\n                <li>Creating a component</li>\n                <li>Rendering a component</li>\n                <li>Creating And Rendering its child component</li>\n                <li>Checking data-bound properties</li>\n                <li>Checking and removing it from DOM</li>\n              </ul>\n              <br />\n              <b>ngOnChange:</b>\n              Respond when Angular sets data-bound input properties. The method\n              receives a SimpleChanges object of current and previous property\n              values.\n              <ul>\n                <li>Alwase called whenever one of our bound input changes.</li>\n                <li>Used in any component that has an input.</li>\n                <li>Called whenever an input value changes</li>\n                <li>Is called the first time before ngOnInit</li>\n              </ul>\n              <br />\n              <b>ngOnInit():</b>\n              Initialize the directive/ component after Angular first displays\n              the data-bound properties and sets the directive/ component's\n              input properties.\n              <br />\n              can be excuited once component has been initialize. This hook is\n              fired before any of the child directive properties are initialize.\n              This place we put logic related to initialization of properties.\n              <ul>\n                <li>Called once, after the first ngOnChanges().</li>\n                <li>Used to initialize data in a component.</li>\n                <li>\n                  called after input values are set when a component is\n                  initialized.\n                </li>\n                <li>Called only once.</li>\n              </ul>\n              <br />\n              <b>ngDoCheck():</b>\n              <br />\n              Called during every change detection run, immediately after\n              ngOnChanges() and ngOnInit().\n              <br />\n              whenever something changes on the template of a component or\n              inside component then it excuites. it called during every changes\n              detection run. This is similar to ngOnChanges() hook, but\n              ngOnChanges() not detect all the changes made to the input\n              properties.\n              <br />\n              <br />\n              It detects changes for those properties which passed by value.\n              However, ngDoCheck() detects changes for those properties also\n              which are passed reference such as array.\n              <br />\n              <br />\n              <ul>\n                <li>Called during all changes detection runs.</li>\n                <li>\n                  A run through the view by Angular to update/ detect changes.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <b>ngAfterContentInit():</b>\n              <br />\n              <ul>\n                <li>\n                  Respond after Angular projects external content into the\n                  component's view.\n                </li>\n                <li>Called once after the first ngDoCheck().</li>\n              </ul>\n              <br />\n              <br />\n              <b>ngAfterContentChecked():</b>\n              <br />\n              <ul>\n                <li>\n                  Respond after Angular checks the content projected into the\n                  directive/ component.\n                </li>\n                <li>\n                  Called after the ngAfterContentInit() and every subsequent\n                  ngDoCheck().\n                </li>\n              </ul>\n              <br />\n              <br />\n              <b>ngAfterViewInit():</b>\n              <br />\n              <ul>\n                <li>\n                  Respond after Angular initializes the component's views and\n                  child views.\n                </li>\n                <li>Called once after the first ngAfterContentChecked().</li>\n              </ul>\n              <br />\n              <br />\n              <b>ngAfterViewChecked():</b>\n              <br />\n              <ul>\n                <li>\n                  Respond after Angular checks the component's views and child\n                  views.\n                </li>\n                <li>\n                  Called after the ngAfterViewInit() and every subsequent\n                  ngAfterContentChecked().\n                </li>\n              </ul>\n              <br />\n              <br />\n              <b>ngOnDestroy():</b>\n              <br />\n              <ul>\n                <li>\n                  Cleanup just before Angular destroys the directive/ component.\n                  Unsubscribe Observables and detach event handlers to avoid\n                  memory leaks.\n                </li>\n                <li>\n                  Called just before Angular destroys the directive/ component.\n                </li>\n              </ul>\n              <br />\n              <b>app.component.ts</b>\n              <div style={titles}>\n                <PrismCode\n                  code={appcompos}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>child.component.ts</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={childcompo}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>2. What is the use of Codelyzer</h3>\n              <ul>\n                <li>\n                  Codelyzer provides a set of rules and guidelines for writing\n                  high-quality, maintainable code. It is built on top of TSLint,\n                  a popular static analysis tool for TypeScript, and is\n                  specifically designed to analyze Angular-specific code.\n                </li>\n\n                <br />\n                <li>Codelyzer can be run via angular cli or npm directly.</li>\n              </ul>\n              <br />\n              <h3>\n                3. Why should ngOnInit be used, if we already have a constructor\n              </h3>\n              <ul>\n                <li>\n                  The constructor is a special method that is called when an\n                  instance of a component is created. It's primarily used for\n                  dependency injection, where you inject services or other\n                  dependencies into the component's constructor parameters. You\n                  can also perform initialization tasks in the constructor, such\n                  as setting default property values.\n                </li>\n                <br />\n                <li>\n                  ngOnInit is a lifecycle hook that is called after the\n                  component's constructor is called and all its inputs are set.\n                  It's used for initialization tasks that require the\n                  component's inputs to be set, such as fetching data from a\n                  server or initializing a form.\n                </li>\n                <br />\n                <li>\n                  To summarize, the constructor is used for dependency injection\n                  and initialization tasks that don't require the component's\n                  inputs to be set, while ngOnInit is used for initialization\n                  tasks that require the component's inputs to be set.\n                </li>\n              </ul>\n              <br />\n              <h3>4. How can you read full response</h3>To read the full\n              response, you can set the observe option of the HttpClient request\n              to 'response' instead of the default 'body'. This tells HttpClient\n              to return the full HTTP response, including the headers and status\n              code, instead of just the response body.\n              <div style={titles}>\n                <PrismCode\n                  code={fullResponse}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>5. How do you perform Error handling</h3>\n              In Angular, error handling can be performed using a combination of\n              techniques, including try-catch blocks, error handling functions,\n              and observable error handling.\n              <div style={titles}>\n                <PrismCode\n                  code={performError}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>How do you implement server-side rendering in Angular?</h3>\n              Server-side rendering (SSR) is a technique used to improve the initial load time and search engine optimization (SEO) of web applications by rendering the HTML on the server before sending it to the client.\n              <ol>\n                <li>Install:</li>\n                <li></li>\n                <li></li>\n                <li></li>\n                <li></li>\n              </ol>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(AngularLifeCycle);\n"]},"metadata":{},"sourceType":"module"}