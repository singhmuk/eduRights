{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic2.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst removeElement = `\nconst removeElement = function (nums, val) {\n  let left = 0\n  const swap = (a, b) => {\n    const temp = nums[a]\n    nums[a] = nums[b]\n    nums[b] = temp\n  }\n  while (left <= nums.length - 1) {\n    while (nums[nums.length - 1] === val) {\n      nums.pop()\n    }\n    while (nums[left] !== val && left <= nums.length - 1) {\n      left += 1\n    }\n\n    if (left < nums.length - 1) {\n      swap(left, nums.length - 1)\n      left += 1\n      nums.pop()\n    }\n  }\n  return nums.length\n}\n\n\nconsole.log(removeElement([0,1,2,2,3,0,4,2],1))`.trim();\nconst searchRange = `\nconst searchRange = (nums = [], target) => {\n  const binarySearch = (left, right, position = 'middle') => {\n    let pivot = -1\n    while (left <= right) {\n      const middle = Math.floor((left + right) / 2)\n      if (nums[middle] === target) {\n        if (position === 'middle') {\n          pivot = middle\n          break\n        } else if (position === 'left') {\n          pivot = middle\n          right = middle - 1\n        } else if (position === 'right') {\n          pivot = middle\n          left = middle + 1\n        }\n      } else if (nums[middle] < target) {\n        left = middle + 1\n      } else {\n        right = middle - 1\n      }\n    }\n    return pivot\n  }\n\n\n  const pivot = binarySearch(0, nums.length - 1, 'middle')\n  return [\n    binarySearch(0, pivot, 'left'),\n    binarySearch(pivot, nums.length - 1, 'right'),\n  ]\n}\n\nconsole.log(searchRange([5,7,7,8,8,10],6))`.trim();\nconst searchInsert = `\nconst searchInsert = (nums, target) => {\n  const aux = (low, high) => {\n    if (low > high) {\n      return low\n    }\n    const middle = Math.floor((low + high) / 2)\n    if (target === nums[middle]) {\n      return middle\n    } if (target > nums[middle]) {\n      return aux(middle + 1, high)\n    }\n    return aux(low, middle - 1)\n  }\n  return aux(0, nums.length - 1)\n}\n\nconsole.log(searchInsert([1,3,5,6], 5))`.trim();\nconst isValidSudoku = `\nconst isValidSudoku = (board = []) => {\n  const rows = []\n  const columns = []\n  const boxes = []\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      const content = board[i][j]\n      if (content !== '.') {\n        if (!rows[i]) {\n          rows[i] = {}\n        }\n        if (rows[i][content]) {\n          return false\n        }\n        rows[i][content] = 1\n\n        if (!columns[j]) {\n          columns[j] = {}\n        }\n        if (columns[j][content]) {\n          return false\n        }\n        columns[j][content] = 1\n        const boxNum = Math.floor(i / 3) * 3 + Math.floor(j / 3)\n        if (!boxes[boxNum]) {\n          boxes[boxNum] = {}\n        }\n        if (boxes[boxNum][content]) {\n          return false\n        }\n        boxes[boxNum][content] = 1\n      }\n    }\n  }\n  return true\n}\n\nconsole.log(isValidSudoku([\n  [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n  [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n  [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n  [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n  [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n  [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n  [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n  [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n  [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n]))`.trim();\nconst combinationSum = `\nvar combinationSum = function(candidates, target) {\n  const result = []\n  const aux = (start,current=[], sum = 0) => {\n      if(sum > target) {\n          return \n      }\n      if(sum === target) {\n          result.push(current)\n          return\n      }\n      for(let i = start; i < candidates.length; i++) {\n          aux(i, [...current, candidates[i]], sum+candidates[i])\n      }\n  }\n  for(let i = 0; i <  candidates.length; i++) {\n      aux(i, [candidates[i]], candidates[i])\n  }\n  return result\n};\n\nconsole.log(combinationSum([2,3,5],8))`.trim();\nconst firstMissingPositive = `\nconst firstMissingPositive = (nums = []) => {\n  const swap = (a, b) => {\n    const temp = nums[a]\n    nums[a] = nums[b]\n    nums[b] = temp\n  }\n  let index = 0\n  while (index < nums.length) {\n    if (\n      nums[index] !== nums[nums[index] - 1]\n      && nums[index] > 0\n      && nums[index] <= nums.length\n    ) {\n      swap(index, nums[index] - 1)\n    } else {\n      index += 1\n    }\n  }\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] !== i + 1) {\n      return i + 1\n    }\n  }\n  return nums.length + 1\n}\n\nconsole.log(firstMissingPositive([3,4,-1,1]))`.trim();\nconst addStrings = `\nconst addStrings = (num1, num2) => {\n  const reversedNum1 = num1.split('').reverse()\n  const reversedNum2 = num2.split('').reverse()\n  const { shorter, longer } = reversedNum1.length < reversedNum2.length\n    ? { shorter: reversedNum1, longer: reversedNum2 }\n    : { shorter: reversedNum2, longer: reversedNum1 }\n\n  let rem = 0\n  let result = longer.reduce((acc, digit1, index) => {\n    const total = parseInt(digit1, 10) + (parseInt(shorter[index], 10) || 0) + rem\n    if (total >= 10) {\n      rem = 1\n    } else {\n      rem = 0\n    }\n    return [\n      ...acc,\n      total >= 10 ? total - 10 : total,\n    ]\n  }, [])\n  result = rem === 1 ? [...result, rem] : result\n  return result.reverse().join('')\n}\n\nconst zero = (count) => {\n  let result = ''\n  while (count >= 1) {\n    result += '0'\n    count -= 1\n  }\n  return result\n}\nconst multiply = (num1 = '', num2 = '') => {\n  let result = 0\n  for (let i = num2.length - 1; i >= 0; i--) {\n    let current = ''\n    let base = 0\n    for (let j = num1.length - 1; j >= 0; j--) {\n      let currentResult = parseInt(num1[j], 10) * parseInt(num2[i], 10) + base\n      if (currentResult >= 10) {\n        base = Math.floor(currentResult / 10)\n        currentResult -= base * 10\n      } else {\n        base = 0\n      }\n      current = '$'{currentResult + current}'\n    }\n    if (base > 0) {\n      current = base + current\n    }\n    // 偷懒\n    result = addStrings(result || '0', current + zero(num2.length - 1 - i))\n  }\n  if (result.length > 0 && result[0] === '0') {\n    return '0'\n  }\n  return result\n}\n\n\nconsole.log(addStrings(\"2\",\"3\"))`.trim();\nconst jump = `\nconst jump = (nums = []) => {\n  let steps = 0\n  let currentJumpIndex = 0\n  let nextJumpIndex = 0\n  for (let i = 0; i < nums.length - 1; i++) {\n    nextJumpIndex = Math.max(i + nums[i], nextJumpIndex)\n    if (i === currentJumpIndex) {\n      steps += 1\n      currentJumpIndex = nextJumpIndex\n    }\n  }\n  return steps\n}\n\n\nconsole.log(jump([2,3,1,1,4]))`.trim();\nconst permute = `\nconst permute = (nums = []) => {\n  const result = []\n  const aux = (list = [], current = []) => {\n    if (list.length === 0) {\n      result.push(current)\n    }\n    list.forEach((number, index) => {\n      aux(list.filter((v, index2) => index2 !== index), [...current, number])\n    })\n  }\n  aux(nums)\n  return result\n}\n\n\nconsole.log(permute([1,2,3]))`.trim();\n\nclass DSLogic2 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, \"3. Convert a string to an array\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: strArray,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, \"1. Remove Element\"), \"Given an array nums and a value val, remove all instances of that value in-place and return the new length.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }), \"Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }), \"The order of elements can be changed. It doesn't matter what you leave beyond the new length.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }), \"Given nums = [3,2,2,3], val = 3,\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }), \"Your function should return length = 2, with the first two elements of nums being 2.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }), \"It doesn't matter what you leave beyond the returned length.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: removeElement,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, \"3. Find First and Last Position of Element in Sorted Array\"), \"Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }), \"Your algorithm's runtime complexity must be in the order of O(log n).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }), \"If the target is not found in the array, return [-1, -1].\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }), \"Input: nums = [5,7,7,8,8,10], target = 8\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }), \"Output: [3,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }), \"Input: nums = [5,7,7,8,8,10], target = 6\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }), \"Output: [-1,-1]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: searchRange,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, \"4. Search Insert Position.\"), \"Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }), \"Input: [1,3,5,6], 5\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }), \"Output: 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }), \"Input: [1,3,5,6], 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }), \"Output: 1\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: searchInsert,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, \"5. Valid Sudoku.\"), \"Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }), \"Each row must contain the digits 1-9 without repetition.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }), \"Each column must contain the digits 1-9 without repetition.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }), \"Each of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }, \"Note: \"), \"A Sudoku board (partially filled) could be valid but is not necessarily solvable.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }), \"Only the filled cells need to be validated according to the mentioned rules.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }), \"The given board contain only digits 1-9 and the character '.'.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }), \"The given board size is always 9x9.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isValidSudoku,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }, \"6. Combination Sum\"), \"Input: candidates = [2,3,6,7], target = 7,\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }), \"A solution set is:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }), \"[\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }), \"[7],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }), \"[2,2,3]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }), \"]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: combinationSum,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }, \"7. First Missing Positive\"), \"Input: [3,4,-1,1]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    }), \"Output: 2\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: firstMissingPositive,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }, \"8. Multiply Strings\"), \"Input: num1 = \\\"2\\\", num2 = \\\"3\\\" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }), \"Output: \\\"6\\\"\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: addStrings,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    }, \"9. Jump Game\"), \"Given an array of non-negative integers, you are initially positioned at the first index of the array.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }), \"Each element in the array represents your maximum jump length at that position.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }), \"Your goal is to reach the last index in the minimum number of jumps.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    }), \"Input: [2,3,1,1,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }), \"Output: 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }), \"Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    }, \"N: \"), \"You can assume that you can always reach the last index.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: jump,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    }, \"10. Permutations.\"), \"Given a collection of distinct integers, return all possible permutations.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: permute,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(DSLogic2);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic2.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","removeElement","trim","searchRange","searchInsert","isValidSudoku","combinationSum","firstMissingPositive","addStrings","jump","permute","DSLogic2","componentDidMount","setTimeout","highlightAll","render","classes","props","strArray"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst removeElement = `\nconst removeElement = function (nums, val) {\n  let left = 0\n  const swap = (a, b) => {\n    const temp = nums[a]\n    nums[a] = nums[b]\n    nums[b] = temp\n  }\n  while (left <= nums.length - 1) {\n    while (nums[nums.length - 1] === val) {\n      nums.pop()\n    }\n    while (nums[left] !== val && left <= nums.length - 1) {\n      left += 1\n    }\n\n    if (left < nums.length - 1) {\n      swap(left, nums.length - 1)\n      left += 1\n      nums.pop()\n    }\n  }\n  return nums.length\n}\n\n\nconsole.log(removeElement([0,1,2,2,3,0,4,2],1))`.trim();\n\nconst searchRange = `\nconst searchRange = (nums = [], target) => {\n  const binarySearch = (left, right, position = 'middle') => {\n    let pivot = -1\n    while (left <= right) {\n      const middle = Math.floor((left + right) / 2)\n      if (nums[middle] === target) {\n        if (position === 'middle') {\n          pivot = middle\n          break\n        } else if (position === 'left') {\n          pivot = middle\n          right = middle - 1\n        } else if (position === 'right') {\n          pivot = middle\n          left = middle + 1\n        }\n      } else if (nums[middle] < target) {\n        left = middle + 1\n      } else {\n        right = middle - 1\n      }\n    }\n    return pivot\n  }\n\n\n  const pivot = binarySearch(0, nums.length - 1, 'middle')\n  return [\n    binarySearch(0, pivot, 'left'),\n    binarySearch(pivot, nums.length - 1, 'right'),\n  ]\n}\n\nconsole.log(searchRange([5,7,7,8,8,10],6))`.trim();\n\nconst searchInsert = `\nconst searchInsert = (nums, target) => {\n  const aux = (low, high) => {\n    if (low > high) {\n      return low\n    }\n    const middle = Math.floor((low + high) / 2)\n    if (target === nums[middle]) {\n      return middle\n    } if (target > nums[middle]) {\n      return aux(middle + 1, high)\n    }\n    return aux(low, middle - 1)\n  }\n  return aux(0, nums.length - 1)\n}\n\nconsole.log(searchInsert([1,3,5,6], 5))`.trim();\n\nconst isValidSudoku = `\nconst isValidSudoku = (board = []) => {\n  const rows = []\n  const columns = []\n  const boxes = []\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      const content = board[i][j]\n      if (content !== '.') {\n        if (!rows[i]) {\n          rows[i] = {}\n        }\n        if (rows[i][content]) {\n          return false\n        }\n        rows[i][content] = 1\n\n        if (!columns[j]) {\n          columns[j] = {}\n        }\n        if (columns[j][content]) {\n          return false\n        }\n        columns[j][content] = 1\n        const boxNum = Math.floor(i / 3) * 3 + Math.floor(j / 3)\n        if (!boxes[boxNum]) {\n          boxes[boxNum] = {}\n        }\n        if (boxes[boxNum][content]) {\n          return false\n        }\n        boxes[boxNum][content] = 1\n      }\n    }\n  }\n  return true\n}\n\nconsole.log(isValidSudoku([\n  [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n  [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n  [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n  [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n  [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n  [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n  [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n  [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n  [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n]))`.trim();\n\nconst combinationSum = `\nvar combinationSum = function(candidates, target) {\n  const result = []\n  const aux = (start,current=[], sum = 0) => {\n      if(sum > target) {\n          return \n      }\n      if(sum === target) {\n          result.push(current)\n          return\n      }\n      for(let i = start; i < candidates.length; i++) {\n          aux(i, [...current, candidates[i]], sum+candidates[i])\n      }\n  }\n  for(let i = 0; i <  candidates.length; i++) {\n      aux(i, [candidates[i]], candidates[i])\n  }\n  return result\n};\n\nconsole.log(combinationSum([2,3,5],8))`.trim();\n\nconst firstMissingPositive = `\nconst firstMissingPositive = (nums = []) => {\n  const swap = (a, b) => {\n    const temp = nums[a]\n    nums[a] = nums[b]\n    nums[b] = temp\n  }\n  let index = 0\n  while (index < nums.length) {\n    if (\n      nums[index] !== nums[nums[index] - 1]\n      && nums[index] > 0\n      && nums[index] <= nums.length\n    ) {\n      swap(index, nums[index] - 1)\n    } else {\n      index += 1\n    }\n  }\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] !== i + 1) {\n      return i + 1\n    }\n  }\n  return nums.length + 1\n}\n\nconsole.log(firstMissingPositive([3,4,-1,1]))`.trim();\n\nconst addStrings = `\nconst addStrings = (num1, num2) => {\n  const reversedNum1 = num1.split('').reverse()\n  const reversedNum2 = num2.split('').reverse()\n  const { shorter, longer } = reversedNum1.length < reversedNum2.length\n    ? { shorter: reversedNum1, longer: reversedNum2 }\n    : { shorter: reversedNum2, longer: reversedNum1 }\n\n  let rem = 0\n  let result = longer.reduce((acc, digit1, index) => {\n    const total = parseInt(digit1, 10) + (parseInt(shorter[index], 10) || 0) + rem\n    if (total >= 10) {\n      rem = 1\n    } else {\n      rem = 0\n    }\n    return [\n      ...acc,\n      total >= 10 ? total - 10 : total,\n    ]\n  }, [])\n  result = rem === 1 ? [...result, rem] : result\n  return result.reverse().join('')\n}\n\nconst zero = (count) => {\n  let result = ''\n  while (count >= 1) {\n    result += '0'\n    count -= 1\n  }\n  return result\n}\nconst multiply = (num1 = '', num2 = '') => {\n  let result = 0\n  for (let i = num2.length - 1; i >= 0; i--) {\n    let current = ''\n    let base = 0\n    for (let j = num1.length - 1; j >= 0; j--) {\n      let currentResult = parseInt(num1[j], 10) * parseInt(num2[i], 10) + base\n      if (currentResult >= 10) {\n        base = Math.floor(currentResult / 10)\n        currentResult -= base * 10\n      } else {\n        base = 0\n      }\n      current = '$'{currentResult + current}'\n    }\n    if (base > 0) {\n      current = base + current\n    }\n    // 偷懒\n    result = addStrings(result || '0', current + zero(num2.length - 1 - i))\n  }\n  if (result.length > 0 && result[0] === '0') {\n    return '0'\n  }\n  return result\n}\n\n\nconsole.log(addStrings(\"2\",\"3\"))`.trim();\n\nconst jump = `\nconst jump = (nums = []) => {\n  let steps = 0\n  let currentJumpIndex = 0\n  let nextJumpIndex = 0\n  for (let i = 0; i < nums.length - 1; i++) {\n    nextJumpIndex = Math.max(i + nums[i], nextJumpIndex)\n    if (i === currentJumpIndex) {\n      steps += 1\n      currentJumpIndex = nextJumpIndex\n    }\n  }\n  return steps\n}\n\n\nconsole.log(jump([2,3,1,1,4]))`.trim();\n\nconst permute = `\nconst permute = (nums = []) => {\n  const result = []\n  const aux = (list = [], current = []) => {\n    if (list.length === 0) {\n      result.push(current)\n    }\n    list.forEach((number, index) => {\n      aux(list.filter((v, index2) => index2 !== index), [...current, number])\n    })\n  }\n  aux(nums)\n  return result\n}\n\n\nconsole.log(permute([1,2,3]))`.trim();\n\n\nclass DSLogic2 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n            <h3>3. Convert a string to an array</h3>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={strArray}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              \n              <h3>1. Remove Element</h3>\n              Given an array nums and a value val, remove all instances of that value in-place and return the new length.\n              <br/>\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n<br/>\nThe order of elements can be changed. It doesn't matter what you leave beyond the new length.\n<br/><br/>\nExample 1:<br/>\n\nGiven nums = [3,2,2,3], val = 3,<br/>\nYour function should return length = 2, with the first two elements of nums being 2.<br/>\nIt doesn't matter what you leave beyond the returned length.\n              <div style={titles}>\n                <PrismCode\n                  code={removeElement}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>3. Find First and Last Position of Element in Sorted Array</h3>\n              Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\n              <br/>\nYour algorithm's runtime complexity must be in the order of O(log n).<br/>\n\nIf the target is not found in the array, return [-1, -1].<br/>\n\nExample 1:\n<br/>\nInput: nums = [5,7,7,8,8,10], target = 8<br/>\nOutput: [3,4]<br/><br/>\nExample 2:<br/>\n\nInput: nums = [5,7,7,8,8,10], target = 6<br/>\nOutput: [-1,-1]\n              <div style={titles}>\n                <PrismCode\n                  code={searchRange}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>4. Search Insert Position.</h3>\n              Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n              <br/>\n              Input: [1,3,5,6], 5<br/>\nOutput: 2<br/><br/>\nExample 2:<br/>\n\nInput: [1,3,5,6], 2<br/>\nOutput: 1\n              <div style={titles}>\n                <PrismCode\n                  code={searchInsert}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>5. Valid Sudoku.</h3>\n              Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n              <br/><br/>\nEach row must contain the digits 1-9 without repetition.<br/>\nEach column must contain the digits 1-9 without repetition.<br/>\nEach of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.<br/><br/>\n<b>Note: </b>\nA Sudoku board (partially filled) could be valid but is not necessarily solvable.<br/>\nOnly the filled cells need to be validated according to the mentioned rules.<br/>\nThe given board contain only digits 1-9 and the character '.'.<br/>\nThe given board size is always 9x9.\n              <div style={titles}>\n                <PrismCode\n                  code={isValidSudoku}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>6. Combination Sum</h3>\n              Input: candidates = [2,3,6,7], target = 7,<br/>\nA solution set is:<br/>\n[<br/>\n  [7],<br/>\n  [2,2,3]<br/>\n]\n              <div style={titles}>\n                <PrismCode\n                  code={combinationSum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>7. First Missing Positive</h3>\n              Input: [3,4,-1,1]<br/>\nOutput: 2\n              <div style={titles}>\n                <PrismCode\n                  code={firstMissingPositive}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>8. Multiply Strings</h3>\n              Input: num1 = \"2\", num2 = \"3\" <br/>\nOutput: \"6\"\n              <div style={titles}>\n                <PrismCode\n                  code={addStrings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>9. Jump Game</h3>\n              Given an array of non-negative integers, you are initially positioned at the first index of the array.\n              <br/>\nEach element in the array represents your maximum jump length at that position.<br/>\n\nYour goal is to reach the last index in the minimum number of jumps.<br/><br/>\nInput: [2,3,1,1,4]<br/>\nOutput: 2<br/>\nExplanation: The minimum number of jumps to reach the last index is 2.\n    Jump 1 step from index 0 to 1, then 3 steps to the last index.<br/><br/>\n    <b>N: </b>You can assume that you can always reach the last index.\n              <div style={titles}>\n                <PrismCode\n                  code={jump}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>10. Permutations.</h3>\n              Given a collection of distinct integers, return all possible permutations.\n              <div style={titles}>\n                <PrismCode\n                  code={permute}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic2));\n"]},"metadata":{},"sourceType":"module"}