{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../styles.css';import Sidebar from'../sidebar';import PrismCode from'../prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var refsReact=\"\\nProblem:\\nthis.setState({\\n  counter: this.state.counter + this.props.increment,\\n});\\n\\nAnswer:\\nthis.setState((state, props) => ({\\n  counter: state.counter + props.increment\\n}));\\n\".trim();var updateState=\"\\nProblem: Have a component that receives a prop that looks like this:\\nconst styles = {\\n  font: {\\n      size: {\\n          value: '22',\\n          unit: 'px'\\n      },\\n      weight: 'bold',\\n      color: '#663300',\\n      family: 'arial',\\n      align: 'center'\\n  }\\n};\\n\\nHow to update only the align property?\\n\\nAnswer: \\nconst { ...styling } = styles;\\nconst [style, setStyle] = useState(styling);\\n...\\n\\nsetStyle(prevStyle => ({\\n      ...prevStyle,\\n      font: { ...prevStyle.font, align: event.target.value }\\n  }));\\n\\n\\n\".trim();var conditionally=\"\\nvar condition = true;\\n\\nvar component = (\\n  <div\\n    value=\\\"foo\\\"\\n    { ...( condition && { disabled: true } ) } />\\n);\\n\".trim();var validation=\"\\nimport PropTypes from 'prop-types';\\n\\nclass User extends React.Component {\\n  render() {\\n    return (\\n      <h1>Welcome, {this.props.name}</h1>\\n      <h2>Age, {this.props.age}\\n    );\\n  }\\n}\\n\\nUser.propTypes = {\\n  name: PropTypes.string.isRequired,\\n  age: PropTypes.number.isRequired\\n\\n};\\n\".trim();var useCallback=\"\\nconst fn = () => 42 // assuming expensive calculation here\\nconst memoFn = useCallback(fn, [dep]) // (1)\\nconst memoFnReturn = useMemo(fn, [dep]) // (2)\\n\".trim();var passProps=\"\\nclass MyComponent extends React.Component {    \\n  constructor(props) {\\n      super(props)\\n\\n      console.log(this.props)\\n  }\\n}\\n\".trim();var getLists=\"\".trim();// const getLists = ``.trim();\n// const getLists = ``.trim();\n// const getLists = ``.trim();\nvar CodingInter=/*#__PURE__*/function(_Component){_inherits(CodingInter,_Component);function CodingInter(){_classCallCheck(this,CodingInter);return _possibleConstructorReturn(this,_getPrototypeOf(CodingInter).apply(this,arguments));}_createClass(CodingInter,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"What's wrong with that code?\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:refsReact,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"i\",null,\"Because \",React.createElement(\"b\",null,\"this.props\"),\" and \",React.createElement(\"b\",null,\"this.state\"),\" may be updated asynchronously, you should not rely on their values for calculating the next state. To fix it, use a second form of \",React.createElement(\"b\",null,\"setState()\"),\" that accepts a function rather than an object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument\"),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"How do I update state on a nested object with useState()?\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:updateState,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"i\",null,\"We need to use spread syntax. Also while trying to update current state based on previous, use the callback pattern os setState:\"),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"How to conditionally add attributes to React components?\"),\"For certain attributes, React is intelligent enough to omit the attribute if the value you pass to it is not truthy.\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Ex. \"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:conditionally,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"How to apply validation on props in ReactJS?\"),\"When the application is running in development mode, React will automatically check for all props that we set on components to make sure they must right correct and right data type. For incorrect type, it will generate warning messages in the console for development mode whereas it is disabled in production mode due performance impact. The mandatory prop is defined with isRequired.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"The set of predefined prop types are below:\",React.createElement(\"ol\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"React.PropTypes.string\")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"React.PropTypes.number\")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"React.PropTypes.func\")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"React.PropTypes.node\")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"React.PropTypes.bool\"))),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:validation,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"How would you go about investigating slow React application rendering?\"),\"One of the most common issues in React applications is when components re-render unnecessarily. There are two tools provided by React that are helpful in these situations:\",React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"React.memo(): \"),\"This prevents unnecessary re-rendering of function components.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"PureComponent: \"),\"This prevents unnecessary re-rendering of class components\")),React.createElement(\"br\",null),\"Both of these tools rely on a shallow comparison of the props passed into the component\\u2014if the props have not changed, then the component will not re-render. While both tools are very useful, the shallow comparison brings with it an additional performance penalty, so both can have a negative performance impact if used incorrectly. By using the React Profiler, performance can be measured before and after using these tools to ensure that performance is actually improved by making a given change.\",React.createElement(\"br\",null),React.createElement(\"h3\",null,\"What is wrong with this code?\"),\"With \",React.createElement(\"b\",null,\"useCallback\"),\" we memoize functions, \",React.createElement(\"b\",null,\"useMemo\"),\" memoizes any computed value:\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"will return a memoized version of fn - same reference across multiple renders, as long as dep is the same. But every time you invoke memoFn, that complex computation starts again.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"will invoke fn every time dep changes and remember its returned value (42 here), which is then stored in memoFnReturn.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:useCallback,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"When is it important to pass props to super(), and why?\"),\"The only one reason when one needs to pass props to \",React.createElement(\"b\",null,\"super()\"),\" is when you want to access \",React.createElement(\"b\",null,\"this.props\"),\"in constructor:\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:passProps,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"i\",null,\"Passing or not passing props to super has no effect on later uses of this.props outside constructor.\"),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"When to use useState vs useReducer?\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"use useState if you have: \"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"JavaScript primitives as state\"),React.createElement(\"li\",null,\"Simple state transitions\"),React.createElement(\"li\",null,\"Business logic within your component\"),React.createElement(\"li\",null,\"Different properties that don't change in any correlated way and can be managed by multiple useState hooks.\"))),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"use useReducer if you have: \"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"JavaScript objects or arrays as state\"),React.createElement(\"li\",null,\"Complex state transitions\"),React.createElement(\"li\",null,\"Different properties tied together that should be managed in one state object (when state depends on state).\")))),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Why would you need to bind event handlers to this?\"),\"In JavaScript, class methods are not bound by default. If forget to bind \",React.createElement(\"b\",null,\"this.someEventHandler\"),\" and pass it to onChange, this will be undefined when the function is actually called.\"))));}}]);return CodingInter;}(Component);export default withStyles(styles)(CodingInter);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/codingInter.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","refsReact","trim","updateState","conditionally","validation","useCallback","passProps","getLists","CodingInter","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst refsReact = `\nProblem:\nthis.setState({\n  counter: this.state.counter + this.props.increment,\n});\n\nAnswer:\nthis.setState((state, props) => ({\n  counter: state.counter + props.increment\n}));\n`.trim();\n\nconst updateState = `\nProblem: Have a component that receives a prop that looks like this:\nconst styles = {\n  font: {\n      size: {\n          value: '22',\n          unit: 'px'\n      },\n      weight: 'bold',\n      color: '#663300',\n      family: 'arial',\n      align: 'center'\n  }\n};\n\nHow to update only the align property?\n\nAnswer: \nconst { ...styling } = styles;\nconst [style, setStyle] = useState(styling);\n...\n\nsetStyle(prevStyle => ({\n      ...prevStyle,\n      font: { ...prevStyle.font, align: event.target.value }\n  }));\n\n\n`.trim();\n\nconst conditionally = `\nvar condition = true;\n\nvar component = (\n  <div\n    value=\"foo\"\n    { ...( condition && { disabled: true } ) } />\n);\n`.trim();\n\nconst validation = `\nimport PropTypes from 'prop-types';\n\nclass User extends React.Component {\n  render() {\n    return (\n      <h1>Welcome, {this.props.name}</h1>\n      <h2>Age, {this.props.age}\n    );\n  }\n}\n\nUser.propTypes = {\n  name: PropTypes.string.isRequired,\n  age: PropTypes.number.isRequired\n\n};\n`.trim();\n\nconst useCallback = `\nconst fn = () => 42 // assuming expensive calculation here\nconst memoFn = useCallback(fn, [dep]) // (1)\nconst memoFnReturn = useMemo(fn, [dep]) // (2)\n`.trim();\n\nconst passProps = `\nclass MyComponent extends React.Component {    \n  constructor(props) {\n      super(props)\n\n      console.log(this.props)\n  }\n}\n`.trim();\n\nconst getLists = ``.trim();\n\n// const getLists = ``.trim();\n\n// const getLists = ``.trim();\n\n// const getLists = ``.trim();\n\n\nclass CodingInter extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>What's wrong with that code?</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={refsReact}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <i>Because <b>this.props</b> and <b>this.state</b> may be updated asynchronously, you should not rely on their \n              values for calculating the next state. To fix it, use a second form of <b>setState()</b> that accepts a \n              function rather than an object. That function will receive the previous state as the first argument, and \n              the props at the time the update is applied as the second argument</i>\n              <br/>\n\n              <h3>How do I update state on a nested object with useState()?</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={updateState}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <i>We need to use spread syntax. Also while trying to update current state based on previous, use the callback pattern \n                  os setState:</i>\n              <br/>\n\n              <h3>How to conditionally add attributes to React components?</h3>\n              For certain attributes, React is intelligent enough to omit the attribute if the value you pass to it is not truthy. \n              <br/>\n              <b>Ex. </b>\n              <div style={titles}>\n                <PrismCode\n                  code={conditionally}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>How to apply validation on props in ReactJS?</h3>\n              When the application is running in development mode, React will automatically check for all props that we set on \n              components to make sure they must right correct and right data type. For incorrect type, it will generate warning \n              messages in the console for development mode whereas it is disabled in production mode due performance impact. The \n              mandatory prop is defined with isRequired.\n              <br/>\n              <br/>\n              The set of predefined prop types are below:\n              <ol>\n                <li><b>React.PropTypes.string</b></li>\n                <li><b>React.PropTypes.number</b></li>\n                <li><b>React.PropTypes.func</b></li>\n                <li><b>React.PropTypes.node</b></li>\n                <li><b>React.PropTypes.bool</b></li>\n              </ol>\n              <div style={titles}>\n                <PrismCode\n                  code={validation}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>How would you go about investigating slow React application rendering?</h3>\n              One of the most common issues in React applications is when components re-render unnecessarily. There are two \n              tools provided by React that are helpful in these situations:\n              <ul>\n                <li><b>React.memo(): </b>This prevents unnecessary re-rendering of function components.</li>\n                <li><b>PureComponent: </b>This prevents unnecessary re-rendering of class components</li>\n              </ul>\n              <br/>\n              Both of these tools rely on a shallow comparison of the props passed into the component—if the props have not \n              changed, then the component will not re-render. While both tools are very useful, the shallow comparison brings \n              with it an additional performance penalty, so both can have a negative performance impact if used incorrectly. \n              By using the React Profiler, performance can be measured before and after using these tools to ensure that \n              performance is actually improved by making a given change.\n              <br/>\n\n              <h3>What is wrong with this code?</h3>\n              With <b>useCallback</b> we memoize functions, <b>useMemo</b> memoizes any computed value:\n              <ul>\n                <li>will return a memoized version of fn - same reference across multiple renders, as long as dep is the same. \n                  But every time you invoke memoFn, that complex computation starts again.</li><br/>\n                <li>will invoke fn every time dep changes and remember its returned value (42 here), which is then stored in \n                  memoFnReturn.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={useCallback}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>When is it important to pass props to super(), and why?</h3>\n              The only one reason when one needs to pass props to <b>super()</b> is when you want to access <b>this.props</b> \n              in constructor:\n              <div style={titles}>\n                <PrismCode\n                  code={passProps}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <i>Passing or not passing props to super has no effect on later uses of this.props outside constructor.</i>\n              <br/>\n\n              <h3>When to use useState vs useReducer?</h3>\n              <ul>\n                <li><b>use useState if you have: </b>\n                <ul>\n                  <li>JavaScript primitives as state</li>\n                  <li>Simple state transitions</li>\n                  <li>Business logic within your component</li>\n                  <li>Different properties that don't change in any correlated way and can be managed by multiple useState hooks.</li>\n                </ul>\n                </li><br/>\n                <li><b>use useReducer if you have: </b>\n                <ul>\n                  <li>JavaScript objects or arrays as state</li>\n                  <li>Complex state transitions</li>\n                  <li>Different properties tied together that should be managed in one state object (when state depends on state).</li>\n                </ul>\n                </li>\n              </ul>\n              <br/>\n\n              <h3>Why would you need to bind event handlers to this?</h3>\n              In JavaScript, class methods are not bound by default. If forget to bind <b>this.someEventHandler</b> and pass it \n              to onChange, this will be undefined when the function is actually called.\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(CodingInter));\n"]},"metadata":{},"sourceType":"module"}