{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/angularjsd/deepAngularjs/apiLogic3.js\";\nimport React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\nconst titles = {\n  backgroundColor: \"#F0F8FF\",\n  padding: \"1px\",\n  fontSize: \"16px\"\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst choose = `\nimport { Component, ViewChild, ElementRef } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '',\n})\nexport class AppComponent {\n  @ViewChild('myButton') myElement!: ElementRef;\n\n  onClick() {\n    console.log(this.myElement.nativeElement);\n  }\n}`.trim();\nconst formBuilder = `\nmyForm: FormGroup = this.fb.group({\n  name: ['', Validators.required],\n  email: ['', [Validators.required, Validators.email]],\n  age: [18, Validators.min(18)]\n});`.trim();\nconst ngZone = `\nimport { Component, NgZone } from '@angular/core';\n\n@Component({\n  selector: 'my-component',\n  template: '<p>Value: {{ value }}</p>'\n})\nexport class MyComponent {\n  value: string;\n\n  constructor(private zone: NgZone) {\n    // Listen for changes to the model data outside the NgZone\n    someExternalService.onDataChanged((newValue) => {\n      // Update the model data inside the NgZone\n      this.zone.run(() => {\n        this.value = newValue;\n      });\n    });\n  }\n}`.trim();\nconst cookies = `\n// Set a cookie\nthis.cookieService.set('myCookie', 'myValue');\n\n// Get a cookie\nconst myCookieValue = this.cookieService.get('myCookie');\n\n// Clear a cookie\nthis.cookieService.delete('myCookie');`.trim();\n\nclass Logic3 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"1. How do you choose an element from a component template\"), \"To create a template reference variable, you can add the # symbol followed by a name to the element you want to select.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), \"With the help of the ViewChild decorator can get a reference to the element in the component class.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: choose,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"2. What happens when you use the script tag within a template.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"In Angular, the content of the component template is usually interpreted as HTML and rendered as such in the browser.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"If you include a script tag within a template, the content of the tag is treated as text and displayed in the template as is. It is not executed as JavaScript code, as it would be if it were included in a regular HTML file.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"This is because Angular's built-in security system, called \\\"Sanitization\\\", is designed to protect against Cross-Site Scripting (XSS) attacks by removing potentially dangerous code from the HTML before it is rendered in the browser.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"To include a script in an Angular application, you should use the Angular CLI to install and manage external dependencies or create a custom Angular service to handle dynamic script loading.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"N: \"), \"It is generally not recommended to include scripts directly within Angular templates, as this can create potential security vulnerabilities and make your code harder to maintain.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"3. What is a FormBuilder? How will you import the FormBuilder into your project\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"FormBuilder is a service provided by Angular that simplifies the creation of reactive forms in Angular. It provides a way to create form controls and groups programmatically, rather than defining them manually in the component code.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Once you've imported FormBuilder, you can inject it into your component's constructor using dependency injection\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"After importing, you can use the FormBuilder to create form controls and groups:\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: formBuilder,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"The first argument to the group() method is an object that defines the initial values of the form controls, and the second argument is an array of validators.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"Using FormBuilder can make it easier and more concise to create reactive forms in Angular, especially for complex forms with many fields and validators. It can also help to reduce boilerplate code and make your code more maintainable.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"4. How will you update the view if your model data is updated outside the 'Zone'.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"In Angular, the NgZone service is responsible for running change detection and updating the view when model data changes. However, if model data is updated outside the NgZone, Angular may not be aware of the changes and may not update the view as expected.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"To update the view if your model data is updated outside the NgZone, you can use the zone.run() method to execute a function inside the NgZone.\", \" \")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: ngZone,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }), \"we're using the someExternalService to listen for changes to the model data outside the NgZone. When the data changes, we're using the zone.run() method to update the model data inside the NgZone, which triggers change detection and updates the view.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"5. How will you set, get, and clear cookies in Angular.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, \"you can use the ngx-cookie-service library to set, get, and clear cookies. This library provides an easy-to-use API for working with cookies in Angular.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, \"Now, you can use the CookieService to set, get, and clear cookies:\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: cookies,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, \"we're using the CookieService to set a cookie with the name myCookie and value myValue, get the value of the myCookie cookie, and clear the myCookie cookie.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \"ngx-cookie-service library provides many other methods for working with cookies, such as setting the expiration date of a cookie and checking if a cookie exists.\", \" \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, \"6. How is Constructor different from ngOnInit.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, \"The constructor is a special method that is called when an instance of a component is created. It's primarily used for dependency injection, where you inject services or other dependencies into the component's constructor parameters. You can also perform initialization tasks in the constructor, such as setting default property values or initializing instance variables.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, \"ngOnInit is a lifecycle hook that is called after the component's constructor is called and all its inputs are set. It's used for initialization tasks that require the component's inputs to be set, such as fetching data from a server or initializing a form.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, \"To summarize, the constructor is used for dependency injection and initialization tasks that don't require the component's inputs to be set, while ngOnInit is used for initialization tasks that require the component's inputs to be set.\"))))));\n  }\n\n}\n\nexport default withStyles(styles)(Logic3);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/deepAngularjs/apiLogic3.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","choose","trim","formBuilder","ngZone","cookies","Logic3","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst choose = `\nimport { Component, ViewChild, ElementRef } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '',\n})\nexport class AppComponent {\n  @ViewChild('myButton') myElement!: ElementRef;\n\n  onClick() {\n    console.log(this.myElement.nativeElement);\n  }\n}`.trim();\n\nconst formBuilder = `\nmyForm: FormGroup = this.fb.group({\n  name: ['', Validators.required],\n  email: ['', [Validators.required, Validators.email]],\n  age: [18, Validators.min(18)]\n});`.trim();\n\nconst ngZone = `\nimport { Component, NgZone } from '@angular/core';\n\n@Component({\n  selector: 'my-component',\n  template: '<p>Value: {{ value }}</p>'\n})\nexport class MyComponent {\n  value: string;\n\n  constructor(private zone: NgZone) {\n    // Listen for changes to the model data outside the NgZone\n    someExternalService.onDataChanged((newValue) => {\n      // Update the model data inside the NgZone\n      this.zone.run(() => {\n        this.value = newValue;\n      });\n    });\n  }\n}`.trim();\n\nconst cookies = `\n// Set a cookie\nthis.cookieService.set('myCookie', 'myValue');\n\n// Get a cookie\nconst myCookieValue = this.cookieService.get('myCookie');\n\n// Clear a cookie\nthis.cookieService.delete('myCookie');`.trim();\n\nclass Logic3 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. How do you choose an element from a component template</h3>\n              To create a template reference variable, you can add the # symbol\n              followed by a name to the element you want to select.\n              <br />\n              <br />\n              With the help of the ViewChild decorator can get a reference to\n              the element in the component class.\n              <div style={titles}>\n                <PrismCode\n                  code={choose}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                2. What happens when you use the script tag within a template.\n              </h3>\n              <ul>\n                <li>\n                  In Angular, the content of the component template is usually\n                  interpreted as HTML and rendered as such in the browser.\n                </li>\n                <br />\n                <li>\n                  If you include a script tag within a template, the content of\n                  the tag is treated as text and displayed in the template as\n                  is. It is not executed as JavaScript code, as it would be if\n                  it were included in a regular HTML file.\n                </li>\n                <br />\n                <li>\n                  This is because Angular's built-in security system, called\n                  \"Sanitization\", is designed to protect against Cross-Site\n                  Scripting (XSS) attacks by removing potentially dangerous code\n                  from the HTML before it is rendered in the browser.\n                </li>\n                <br />\n                <li>\n                  To include a script in an Angular application, you should use\n                  the Angular CLI to install and manage external dependencies or\n                  create a custom Angular service to handle dynamic script\n                  loading.\n                </li>\n                <br />\n                <li>\n                  <b>N: </b>It is generally not recommended to include scripts\n                  directly within Angular templates, as this can create\n                  potential security vulnerabilities and make your code harder\n                  to maintain.\n                </li>\n              </ul>\n              <br />\n              <h3>\n                3. What is a FormBuilder? How will you import the FormBuilder\n                into your project\n              </h3>\n              <ul>\n                <li>\n                  FormBuilder is a service provided by Angular that simplifies\n                  the creation of reactive forms in Angular. It provides a way\n                  to create form controls and groups programmatically, rather\n                  than defining them manually in the component code.\n                </li>\n                <li>\n                  Once you've imported FormBuilder, you can inject it into your\n                  component's constructor using dependency injection\n                </li>\n                <li>\n                  After importing, you can use the FormBuilder to create form\n                  controls and groups:\n                </li>\n              </ul>\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={formBuilder}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <ul>\n                <li>\n                  The first argument to the group() method is an object that\n                  defines the initial values of the form controls, and the\n                  second argument is an array of validators.\n                </li>\n                <li>\n                  Using FormBuilder can make it easier and more concise to\n                  create reactive forms in Angular, especially for complex forms\n                  with many fields and validators. It can also help to reduce\n                  boilerplate code and make your code more maintainable.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>\n                4. How will you update the view if your model data is updated\n                outside the 'Zone'.\n              </h3>\n              <ul>\n                <li>\n                  In Angular, the NgZone service is responsible for running\n                  change detection and updating the view when model data\n                  changes. However, if model data is updated outside the NgZone,\n                  Angular may not be aware of the changes and may not update the\n                  view as expected.\n                </li>\n                <br />\n                <li>\n                  To update the view if your model data is updated outside the\n                  NgZone, you can use the zone.run() method to execute a\n                  function inside the NgZone.{\" \"}\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={ngZone}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              we're using the someExternalService to listen for changes to the\n              model data outside the NgZone. When the data changes, we're using\n              the zone.run() method to update the model data inside the NgZone,\n              which triggers change detection and updates the view.\n              <br />\n              <br />\n              <h3>5. How will you set, get, and clear cookies in Angular.</h3>\n              <ul>\n                <li>\n                  you can use the ngx-cookie-service library to set, get, and\n                  clear cookies. This library provides an easy-to-use API for\n                  working with cookies in Angular.\n                </li>\n                <li>\n                  Now, you can use the CookieService to set, get, and clear\n                  cookies:\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={cookies}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <ul>\n                <li>\n                  we're using the CookieService to set a cookie with the name\n                  myCookie and value myValue, get the value of the myCookie\n                  cookie, and clear the myCookie cookie.\n                </li>\n                <li>\n                  ngx-cookie-service library provides many other methods for\n                  working with cookies, such as setting the expiration date of a\n                  cookie and checking if a cookie exists.{\" \"}\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>6. How is Constructor different from ngOnInit.</h3>\n              <ul>\n                <li>\n                  The constructor is a special method that is called when an\n                  instance of a component is created. It's primarily used for\n                  dependency injection, where you inject services or other\n                  dependencies into the component's constructor parameters. You\n                  can also perform initialization tasks in the constructor, such\n                  as setting default property values or initializing instance\n                  variables.\n                </li>\n                <br />\n                <li>\n                  ngOnInit is a lifecycle hook that is called after the\n                  component's constructor is called and all its inputs are set.\n                  It's used for initialization tasks that require the\n                  component's inputs to be set, such as fetching data from a\n                  server or initializing a form.\n                </li>\n                <br />\n                <li>\n                  To summarize, the constructor is used for dependency injection\n                  and initialization tasks that don't require the component's\n                  inputs to be set, while ngOnInit is used for initialization\n                  tasks that require the component's inputs to be set.\n                </li>\n              </ul>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(Logic3);\n"]},"metadata":{},"sourceType":"module"}