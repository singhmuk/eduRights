{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var App=\"\\n//.env\\nREACT_APP_GOOGLE_MAPS_API_KEY = AIzaSyACmVis1yWx1wCi2AX9V0lu3JT_PGXT1qI\\n\\n\\n//App.js\\nimport React from \\\"react\\\";\\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from \\\"@react-google-maps/api\\\";\\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \\\"use-places-autocomplete\\\";\\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from \\\"@reach/combobox\\\";\\nimport { formatRelative } from \\\"date-fns\\\";\\n\\nimport \\\"@reach/combobox/styles.css\\\";\\nimport mapStyles from \\\"./mapStyles\\\";\\n\\nconst libraries = [\\\"places\\\"];\\nconst mapContainerStyle = {\\n  height: \\\"100vh\\\",\\n  width: \\\"100vw\\\",\\n};\\nconst options = {\\n  styles: mapStyles,\\n  disableDefaultUI: true,\\n  zoomControl: true,\\n};\\nconst center = {\\n  lat: 43.6532,\\n  lng: -79.3832,\\n};\\n\\nexport default function App() {\\n  const { isLoaded, loadError } = useLoadScript({\\n    googleMapsApiKey: 'AIzaSyACmVis1yWx1wCi2AX9V0lu3JT_PGXT1qI',\\n    libraries,\\n  });\\n  const [markers, setMarkers] = React.useState([]);\\n  const [selected, setSelected] = React.useState(null);\\n\\n  const onMapClick = React.useCallback((e) => {\\n    setMarkers((current) => [\\n      ...current,\\n      {\\n        lat: e.latLng.lat(),\\n        lng: e.latLng.lng(),\\n        time: new Date(),\\n      },\\n    ]);\\n  }, []);\\n\\n  const mapRef = React.useRef();\\n  const onMapLoad = React.useCallback((map) => {\\n    mapRef.current = map;\\n  }, []);\\n\\n  const panTo = React.useCallback(({ lat, lng }) => {\\n    mapRef.current.panTo({ lat, lng });\\n    mapRef.current.setZoom(14);\\n  }, []);\\n\\n  if (loadError) return \\\"Error\\\";\\n  if (!isLoaded) return \\\"Loading...\\\";\\n\\n  return (\\n    <div>\\n      <h1>\\n        Bears{\\\" \\\"}\\n        <span role=\\\"img\\\" aria-label=\\\"tent\\\">\\n          \\u26FA\\uFE0F\\n        </span>\\n      </h1>\\n\\n      <Locate panTo={panTo} />\\n      <Search panTo={panTo} />\\n\\n      <GoogleMap\\n        id=\\\"map\\\"\\n        mapContainerStyle={mapContainerStyle}\\n        zoom={4}\\n        center={center}\\n        options={options}\\n        onClick={onMapClick}\\n        onLoad={onMapLoad}\\n      >\\n        {markers.map((marker) => (\\n          <Marker\\n            key={'$'{ marker.lat }-'$'{ marker.lng } }\\n            position={{ lat: marker.lat, lng: marker.lng }}\\n            onClick={() => {\\n              setSelected(marker);\\n            }}\\n            icon={{\\n              url: '/ bear.svg',\\n              origin: new window.google.maps.Point(0, 0),\\n              anchor: new window.google.maps.Point(15, 15),\\n              scaledSize: new window.google.maps.Size(30, 30),\\n            }}\\n          />\\n        ))}\\n\\n        {selected ? (\\n          <InfoWindow\\n            position={{ lat: selected.lat, lng: selected.lng }}\\n            onCloseClick={() => {\\n              setSelected(null);\\n            }}\\n          >\\n            <div>\\n              <h2>\\n                <span role=\\\"img\\\" aria-label=\\\"bear\\\">\\n                  \\uD83D\\uDC3B\\n                </span>{\\\" \\\"}\\n                Alert\\n              </h2>\\n              <p>Spotted {formatRelative(selected.time, new Date())}</p>\\n            </div>\\n          </InfoWindow>\\n        ) : null}\\n      </GoogleMap>\\n    </div>\\n  );\\n}\\n\\nfunction Locate({ panTo }) {\\n  return (\\n    <button\\n      className=\\\"locate\\\"\\n      onClick={() => {\\n        navigator.geolocation.getCurrentPosition(\\n          (position) => {\\n            panTo({\\n              lat: position.coords.latitude,\\n              lng: position.coords.longitude,\\n            });\\n          },\\n          () => null\\n        );\\n      }}\\n    >\\n      <img src=\\\"/compass.svg\\\" alt=\\\"compass\\\" />\\n    </button>\\n  );\\n}\\n\\nfunction Search({ panTo }) {\\n  const {\\n    ready,\\n    value,\\n    suggestions: { status, data },\\n    setValue,\\n    clearSuggestions,\\n  } = usePlacesAutocomplete({\\n    requestOptions: {\\n      location: { lat: () => 43.6532, lng: () => -79.3832 },\\n      radius: 100 * 1000,\\n    },\\n  });\\n\\n  // https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service#AutocompletionRequest\\n\\n  const handleInput = (e) => {\\n    setValue(e.target.value);\\n  };\\n\\n  const handleSelect = async (address) => {\\n    setValue(address, false);\\n    clearSuggestions();\\n\\n    try {\\n      const results = await getGeocode({ address });\\n      const { lat, lng } = await getLatLng(results[0]);\\n      panTo({ lat, lng });\\n      console.log(\\\"lng\\\", lng);\\n    } catch (error) {\\n      console.log(\\\"\\uD83D\\uDE31 Error: \\\", error);\\n    }\\n  };\\n\\n  return (\\n    <div className=\\\"search\\\">\\n      <Combobox onSelect={handleSelect}>\\n        <ComboboxInput\\n          value={value}\\n          onChange={handleInput}\\n          disabled={!ready}\\n          placeholder=\\\"Search your location\\\"\\n        />\\n        <ComboboxPopover>\\n          <ComboboxList>\\n            {status === \\\"OK\\\" &&\\n              data.map(({ id, description }) => (\\n                <ComboboxOption key={id} value={description} />\\n              ))}\\n          </ComboboxList>\\n        </ComboboxPopover>\\n      </Combobox>\\n    </div>\\n  );\\n}\\n\\n\".trim();var mainIndex=\"\\nh1 {\\n  position: absolute;\\n  top: 1rem;\\n  left: 1rem;\\n  color: #281414;\\n  z-index: 10;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.search {\\n  position: absolute;\\n  top: 1rem;\\n  left: 50%;\\n  transform: translateX(-50%);\\n  width: 100%;\\n  max-width: 400px;\\n  z-index: 10;\\n}\\n\\n.search input {\\n  padding: 0.5rem;\\n  font-size: 1.5rem;\\n  width: 100%;\\n}\\n\\n.locate {\\n  position: absolute;\\n  top: 1rem;\\n  right: 1rem;\\n  background: none;\\n  border: none;\\n  z-index: 10;\\n}\\n.locate img {\\n  width: 30px;\\n  cursor: pointer;\\n}\\n\".trim();var mapStyles=\"\\nexport default [\\n  {\\n    featureType: \\\"all\\\",\\n    elementType: \\\"geometry.fill\\\",\\n    stylers: [\\n      {\\n        weight: \\\"2.00\\\",\\n      },\\n    ],\\n  },\\n  {\\n    featureType: \\\"all\\\",\\n    elementType: \\\"geometry.stroke\\\",\\n    stylers: [\\n      {\\n        color: \\\"#9c9c9c\\\",\\n      },\\n    ],\\n  },\\n  {\\n    featureType: \\\"all\\\",\\n    elementType: \\\"labels.text\\\",\\n    stylers: [\\n      {\\n        visibility: \\\"on\\\",\\n      },\\n    ],\\n  },\\n  {\\n    featureType: \\\"landscape\\\",\\n    elementType: \\\"all\\\",\\n    stylers: [\\n      {\\n        color: \\\"#f2f2f2\\\",\\n      },\\n    ],\\n  },\\n  {\\n    featureType: \\\"landscape\\\",\\n    elementType: \\\"geometry.fill\\\",\\n    stylers: [\\n      {\\n        color: \\\"#ffffff\\\",\\n      },\\n    ],\\n  },\\n  {\\n    featureType: \\\"landscape.man_made\\\",\\n    elementType: \\\"geometry.fill\\\",\\n    stylers: [\\n      {\\n        color: \\\"#ffffff\\\",\\n      },\\n    ],\\n  },\\n  {\\n    featureType: \\\"poi\\\",\\n    elementType: \\\"all\\\",\\n    stylers: [\\n      {\\n        visibility: \\\"off\\\",\\n      },\\n    ],\\n  },\\n  {\\n    featureType: \\\"road\\\",\\n    elementType: \\\"all\\\",\\n    stylers: [\\n      {\\n        saturation: -100,\\n      },\\n      {\\n        lightness: 45,\\n      },\\n    ],\\n  },\\n  {\\n    featureType: \\\"road\\\",\\n    elementType: \\\"geometry.fill\\\",\\n    stylers: [\\n      {\\n        color: \\\"#eeeeee\\\",\\n      },\\n    ],\\n  },\\n  {\\n    featureType: \\\"road\\\",\\n    elementType: \\\"labels.text.fill\\\",\\n    stylers: [\\n      {\\n        color: \\\"#7b7b7b\\\",\\n      },\\n    ],\\n  },\\n  {\\n    featureType: \\\"road\\\",\\n    elementType: \\\"labels.text.stroke\\\",\\n    stylers: [\\n      {\\n        color: \\\"#ffffff\\\",\\n      },\\n    ],\\n  },\\n  {\\n    featureType: \\\"road.highway\\\",\\n    elementType: \\\"all\\\",\\n    stylers: [\\n      {\\n        visibility: \\\"simplified\\\",\\n      },\\n    ],\\n  },\\n  {\\n    featureType: \\\"road.arterial\\\",\\n    elementType: \\\"labels.icon\\\",\\n    stylers: [\\n      {\\n        visibility: \\\"off\\\",\\n      },\\n    ],\\n  },\\n  {\\n    featureType: \\\"transit\\\",\\n    elementType: \\\"all\\\",\\n    stylers: [\\n      {\\n        visibility: \\\"off\\\",\\n      },\\n    ],\\n  },\\n  {\\n    featureType: \\\"water\\\",\\n    elementType: \\\"all\\\",\\n    stylers: [\\n      {\\n        color: \\\"#46bcec\\\",\\n      },\\n      {\\n        visibility: \\\"on\\\",\\n      },\\n    ],\\n  },\\n  {\\n    featureType: \\\"water\\\",\\n    elementType: \\\"geometry.fill\\\",\\n    stylers: [\\n      {\\n        color: \\\"#c8d7d4\\\",\\n      },\\n    ],\\n  },\\n  {\\n    featureType: \\\"water\\\",\\n    elementType: \\\"labels.text.fill\\\",\\n    stylers: [\\n      {\\n        color: \\\"#070707\\\",\\n      },\\n    ],\\n  },\\n  {\\n    featureType: \\\"water\\\",\\n    elementType: \\\"labels.text.stroke\\\",\\n    stylers: [\\n      {\\n        color: \\\"#ffffff\\\",\\n      },\\n    ],\\n  },\\n];\\n\".trim();// const serverApp = ``.trim();\nvar GoogleMaps=/*#__PURE__*/function(_Component){_inherits(GoogleMaps,_Component);function GoogleMaps(){_classCallCheck(this,GoogleMaps);return _possibleConstructorReturn(this,_getPrototypeOf(GoogleMaps).apply(this,arguments));}_createClass(GoogleMaps,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"React Google Map\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:App,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"index.css\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:mainIndex,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"mapStyles.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:mapStyles,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return GoogleMaps;}(Component);export default withStyles(styles)(GoogleMaps);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/mern/projects/googleMap.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","App","trim","mainIndex","mapStyles","GoogleMaps","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,0BAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CAGA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,eAAe,CAAE,SAAnB,CAA8BC,OAAO,CAAE,KAAvC,CAA8CC,QAAQ,CAAE,MAAxD,CAAf,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,KAAK,CAAE,CACLC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH,CAELN,OAAO,CAAEG,KAAK,CAACG,OAAN,CAAc,CAAd,CAFJ,CADgB,CAKvBC,QAAQ,CAAE,CACRF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA,CALa,CAQvBE,SAAS,CAAE,CACTC,SAAS,CAAE,QADF,CARY,CAAL,EAApB,CAcA,GAAMC,CAAAA,GAAG,CAAG,4iKAuMVC,IAvMU,EAAZ,CAyMA,GAAMC,CAAAA,SAAS,CAAG,2hBAuChBD,IAvCgB,EAAlB,CAyCA,GAAME,CAAAA,SAAS,CAAG,muFA2KhBF,IA3KgB,EAAlB,CA6KA;GAGMG,CAAAA,U,0SACgB,CAClBC,UAAU,CAAC,iBAAMxB,CAAAA,KAAK,CAACyB,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAACb,KAA1B,EACE,8BAAI,oBAAC,OAAD,MAAJ,CADF,CADF,CADF,CAME,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEa,OAAO,CAACb,KAA1B,EACE,oBAAC,IAAD,MACE,iDADF,CAEE,2BAAK,KAAK,CAAEN,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEY,GADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAFF,CASE,8BATF,CAUE,8BAVF,CAYE,yCAZF,CAaE,8BAbF,CAcE,2BAAK,KAAK,CAAEZ,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEc,SADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAdF,CAqBE,8BArBF,CAsBE,8BAtBF,CAwBE,4CAxBF,CAyBE,8BAzBF,CA0BE,2BAAK,KAAK,CAAEd,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEe,SADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CA1BF,CADF,CADF,CANF,CADF,CA+CD,C,wBArDsBvB,S,EAwDzB,cAAgBI,CAAAA,UAAU,CAACQ,MAAD,CAAV,CAAmBY,UAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst App = `\n//.env\nREACT_APP_GOOGLE_MAPS_API_KEY = AIzaSyACmVis1yWx1wCi2AX9V0lu3JT_PGXT1qI\n\n\n//App.js\nimport React from \"react\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from \"@reach/combobox\";\nimport { formatRelative } from \"date-fns\";\n\nimport \"@reach/combobox/styles.css\";\nimport mapStyles from \"./mapStyles\";\n\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  height: \"100vh\",\n  width: \"100vw\",\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true,\n};\nconst center = {\n  lat: 43.6532,\n  lng: -79.3832,\n};\n\nexport default function App() {\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: 'AIzaSyACmVis1yWx1wCi2AX9V0lu3JT_PGXT1qI',\n    libraries,\n  });\n  const [markers, setMarkers] = React.useState([]);\n  const [selected, setSelected] = React.useState(null);\n\n  const onMapClick = React.useCallback((e) => {\n    setMarkers((current) => [\n      ...current,\n      {\n        lat: e.latLng.lat(),\n        lng: e.latLng.lng(),\n        time: new Date(),\n      },\n    ]);\n  }, []);\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  const panTo = React.useCallback(({ lat, lng }) => {\n    mapRef.current.panTo({ lat, lng });\n    mapRef.current.setZoom(14);\n  }, []);\n\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n\n  return (\n    <div>\n      <h1>\n        Bears{\" \"}\n        <span role=\"img\" aria-label=\"tent\">\n          ⛺️\n        </span>\n      </h1>\n\n      <Locate panTo={panTo} />\n      <Search panTo={panTo} />\n\n      <GoogleMap\n        id=\"map\"\n        mapContainerStyle={mapContainerStyle}\n        zoom={4}\n        center={center}\n        options={options}\n        onClick={onMapClick}\n        onLoad={onMapLoad}\n      >\n        {markers.map((marker) => (\n          <Marker\n            key={'$'{ marker.lat }-'$'{ marker.lng } }\n            position={{ lat: marker.lat, lng: marker.lng }}\n            onClick={() => {\n              setSelected(marker);\n            }}\n            icon={{\n              url: '/ bear.svg',\n              origin: new window.google.maps.Point(0, 0),\n              anchor: new window.google.maps.Point(15, 15),\n              scaledSize: new window.google.maps.Size(30, 30),\n            }}\n          />\n        ))}\n\n        {selected ? (\n          <InfoWindow\n            position={{ lat: selected.lat, lng: selected.lng }}\n            onCloseClick={() => {\n              setSelected(null);\n            }}\n          >\n            <div>\n              <h2>\n                <span role=\"img\" aria-label=\"bear\">\n                  🐻\n                </span>{\" \"}\n                Alert\n              </h2>\n              <p>Spotted {formatRelative(selected.time, new Date())}</p>\n            </div>\n          </InfoWindow>\n        ) : null}\n      </GoogleMap>\n    </div>\n  );\n}\n\nfunction Locate({ panTo }) {\n  return (\n    <button\n      className=\"locate\"\n      onClick={() => {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            panTo({\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            });\n          },\n          () => null\n        );\n      }}\n    >\n      <img src=\"/compass.svg\" alt=\"compass\" />\n    </button>\n  );\n}\n\nfunction Search({ panTo }) {\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: { lat: () => 43.6532, lng: () => -79.3832 },\n      radius: 100 * 1000,\n    },\n  });\n\n  // https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service#AutocompletionRequest\n\n  const handleInput = (e) => {\n    setValue(e.target.value);\n  };\n\n  const handleSelect = async (address) => {\n    setValue(address, false);\n    clearSuggestions();\n\n    try {\n      const results = await getGeocode({ address });\n      const { lat, lng } = await getLatLng(results[0]);\n      panTo({ lat, lng });\n      console.log(\"lng\", lng);\n    } catch (error) {\n      console.log(\"😱 Error: \", error);\n    }\n  };\n\n  return (\n    <div className=\"search\">\n      <Combobox onSelect={handleSelect}>\n        <ComboboxInput\n          value={value}\n          onChange={handleInput}\n          disabled={!ready}\n          placeholder=\"Search your location\"\n        />\n        <ComboboxPopover>\n          <ComboboxList>\n            {status === \"OK\" &&\n              data.map(({ id, description }) => (\n                <ComboboxOption key={id} value={description} />\n              ))}\n          </ComboboxList>\n        </ComboboxPopover>\n      </Combobox>\n    </div>\n  );\n}\n\n`.trim();\n\nconst mainIndex = `\nh1 {\n  position: absolute;\n  top: 1rem;\n  left: 1rem;\n  color: #281414;\n  z-index: 10;\n  margin: 0;\n  padding: 0;\n}\n\n.search {\n  position: absolute;\n  top: 1rem;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 100%;\n  max-width: 400px;\n  z-index: 10;\n}\n\n.search input {\n  padding: 0.5rem;\n  font-size: 1.5rem;\n  width: 100%;\n}\n\n.locate {\n  position: absolute;\n  top: 1rem;\n  right: 1rem;\n  background: none;\n  border: none;\n  z-index: 10;\n}\n.locate img {\n  width: 30px;\n  cursor: pointer;\n}\n`.trim();\n\nconst mapStyles = `\nexport default [\n  {\n    featureType: \"all\",\n    elementType: \"geometry.fill\",\n    stylers: [\n      {\n        weight: \"2.00\",\n      },\n    ],\n  },\n  {\n    featureType: \"all\",\n    elementType: \"geometry.stroke\",\n    stylers: [\n      {\n        color: \"#9c9c9c\",\n      },\n    ],\n  },\n  {\n    featureType: \"all\",\n    elementType: \"labels.text\",\n    stylers: [\n      {\n        visibility: \"on\",\n      },\n    ],\n  },\n  {\n    featureType: \"landscape\",\n    elementType: \"all\",\n    stylers: [\n      {\n        color: \"#f2f2f2\",\n      },\n    ],\n  },\n  {\n    featureType: \"landscape\",\n    elementType: \"geometry.fill\",\n    stylers: [\n      {\n        color: \"#ffffff\",\n      },\n    ],\n  },\n  {\n    featureType: \"landscape.man_made\",\n    elementType: \"geometry.fill\",\n    stylers: [\n      {\n        color: \"#ffffff\",\n      },\n    ],\n  },\n  {\n    featureType: \"poi\",\n    elementType: \"all\",\n    stylers: [\n      {\n        visibility: \"off\",\n      },\n    ],\n  },\n  {\n    featureType: \"road\",\n    elementType: \"all\",\n    stylers: [\n      {\n        saturation: -100,\n      },\n      {\n        lightness: 45,\n      },\n    ],\n  },\n  {\n    featureType: \"road\",\n    elementType: \"geometry.fill\",\n    stylers: [\n      {\n        color: \"#eeeeee\",\n      },\n    ],\n  },\n  {\n    featureType: \"road\",\n    elementType: \"labels.text.fill\",\n    stylers: [\n      {\n        color: \"#7b7b7b\",\n      },\n    ],\n  },\n  {\n    featureType: \"road\",\n    elementType: \"labels.text.stroke\",\n    stylers: [\n      {\n        color: \"#ffffff\",\n      },\n    ],\n  },\n  {\n    featureType: \"road.highway\",\n    elementType: \"all\",\n    stylers: [\n      {\n        visibility: \"simplified\",\n      },\n    ],\n  },\n  {\n    featureType: \"road.arterial\",\n    elementType: \"labels.icon\",\n    stylers: [\n      {\n        visibility: \"off\",\n      },\n    ],\n  },\n  {\n    featureType: \"transit\",\n    elementType: \"all\",\n    stylers: [\n      {\n        visibility: \"off\",\n      },\n    ],\n  },\n  {\n    featureType: \"water\",\n    elementType: \"all\",\n    stylers: [\n      {\n        color: \"#46bcec\",\n      },\n      {\n        visibility: \"on\",\n      },\n    ],\n  },\n  {\n    featureType: \"water\",\n    elementType: \"geometry.fill\",\n    stylers: [\n      {\n        color: \"#c8d7d4\",\n      },\n    ],\n  },\n  {\n    featureType: \"water\",\n    elementType: \"labels.text.fill\",\n    stylers: [\n      {\n        color: \"#070707\",\n      },\n    ],\n  },\n  {\n    featureType: \"water\",\n    elementType: \"labels.text.stroke\",\n    stylers: [\n      {\n        color: \"#ffffff\",\n      },\n    ],\n  },\n];\n`.trim();\n\n// const serverApp = ``.trim();\n\n\nclass GoogleMaps extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>React Google Map</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={App}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>index.css</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={mainIndex}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>mapStyles.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={mapStyles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(GoogleMaps));\n"]},"metadata":{},"sourceType":"module"}