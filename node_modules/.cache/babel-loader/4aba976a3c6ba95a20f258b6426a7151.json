{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/angularjsd/deepAngularjs/ngModel.js\";\nimport React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\nconst titles = {\n  backgroundColor: \"#F0F8FF\",\n  padding: \"1px\",\n  fontSize: \"16px\"\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst forChildFun = `\nimport { MyService } from './my.service';\n\n@NgModule({\n  imports: [ ... ],\n  providers: [ MyService ]\n})\nexport class MyModule {\n  static forRoot(): ModuleWithProviders<MyModule> {\n    return {\n      ngModule: MyModule,\n      providers: [ MyService ]\n    };\n  }\n}`.trim();\nconst forRootFun = `\nimport { MyService } from './my.service';\n\n@NgModule({\n  imports: [ ... ]\n})\nexport class MyFeatureModule {\n  static forChild(): ModuleWithProviders<MyFeatureModule> {\n    return {\n      ngModule: MyFeatureModule,\n      providers: [ MyService ]\n    };\n  }\n}`.trim();\nconst interceptor = `\nimport { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  intercept(request: HttpRequest<any>, next: HttpHandler) {\n    // Get the auth token from local storage\n    const authToken = localStorage.getItem('authToken');\n    \n    // Clone the request and add the auth token to the headers\n    const authRequest = request.clone({\n      headers: request.headers.set('Authorization', 'Bearer '$'{authToken}')\n    });\n    \n    // Pass the auth request on to the next interceptor or to the HttpClient if there are no more interceptors\n    return next.handle(authRequest);\n  }\n}\n`.trim();\nconst stateFun = `\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return { count: state.count + 1 };\n    case 'DECREMENT':\n      return { count: state.count - 1 };\n    default:\n      return state;\n  }\n}`.trim();\nconst transition = `\ntransition('open => closed', [\n  animate('500ms')\n]),`.trim();\nconst pipeFor = `\n@Component({\n  selector: 'app-birthday',\n  template: '<p> Birthday is {{birthday | date}}</p>'\n})\nexport class BirthdayComponent {\n  birthday = new Date(1987, 6, 18); \n}`.trim();\nconst paraPipes = `\n@Component({\n      selector: 'app-birthday',\n      template: '<p> Birthday is {{birthday | date: 'dd/MM/yyyy'}}</p>' // 18/06/1987\n    })\n    export class BirthdayComponent {\n      birthday = new Date(1987, 6, 18);\n    }`.trim();\nconst chainPipe = `\n@Component({\n          selector: 'app-birthday',\n          template: '<p> Birthday is {{birthday | date: 'fullDate' | uppercase}} </p>' // THURSDAY, JUNE 18, 1987\n        })\n        export class BirthdayComponent {\n          birthday = new Date(1987, 6, 18);\n        }`.trim();\nconst purpose = `\n@Component({\n  selector: 'async-observable-pipe',\n  template: '<div> <code>observable|async</code>:\n  Time: {{time | async}}</div >'\n})\nexport class AsyncObservablePipeComponent {\n  time = new Observable(observer =>\n    setInterval(() => observer.next(new Date().toString()), 2000)\n  );\n}`.trim();\nconst ViewContainerRef = `let componentRef = viewContainerRef.createComponent(componentFactory);`.trim();\nconst template = `\n  <p>Hip!</p>\n  <ng-template>\n    <p>Hip!</p>\n  </ng-template>\n  <p>Hooray!</p>\n  \n  //<ng-container>\n  @Component({\n    selector: 'app-root',\n    template: '\n        <ng-template #loading>\n          ng-template rendering\n        </ng-template>\n  \n        <p>ng-container</p>\n        <ng-container *ngIf=\"display else loading\">\n          ng-container rendering\n          \n        </ng-container>\n        <ul>\n            <li *ngFor=\"let emp of employees; let i=index\">\n              <ng-container *ngIf=\"emp.salery>10000\">\n                {{i+1}} - {{emp.name}}\n              </ng-container>\n            </li>\n          </ul>\n    '',\n    providers:[]\n  })\n  \n  export class AppComponent {\n    display=false;\n  \n    employees = [\n      {\"name\":\"Mukesh\", \"salery\":10000},\n      {\"name\":\"Rakesh\", \"salery\":12000},\n      {\"name\":\"Nitesh\", \"salery\":15000},\n    ]\n  }\n  `.trim();\nconst typeFunc = `\n  template:\n    '{{ $any(user).contacts.email }}'\n    \n    \n  //The $any() cast function also works with this to allow access to undeclared members of the component.\n     template:\n     '{{ $any(this).contacts.email }}'`.trim();\nconst assertionOpp = `@Component({\n    selector: 'my-component',\n    template: '<span *ngIf=\"user\"> {{user.name}} contacted through {{contact!.email}} </span>'\n  })\n  class MyComponent {\n    user?: User;\n    contact?: Contact;\n  \n    setData(user: User, contact: Contact) {\n      this.user = user;\n      this.contact = contact;\n    }\n  }`.trim();\nconst narrowing = `\n  @Component({\n    selector: 'my-component',\n    template: '<span *ngIf=\"user\"> {{user.contact.email}} </span>'\n  })\n  class MyComponent {\n    user?: User;\n  }`.trim();\nconst dslSyntax = `\n  (): Used for Output and DOM events.\n  []: Used for Input and specific DOM element attributes.\n  *: Structural directives(*ngFor or *ngIf) will affect/change the DOM structure.`.trim();\nconst multicasting = `\n  var source = Rx.Observable.from([1, 2, 3]);\n  var subject = new Rx.Subject();\n  var multicasted = source.multicast(subject);\n  \n  // These are, under the hood, 'subject.subscribe({ ...})':\n  multicasted.subscribe({\n    next: (v) => console.log('observerA: ' + v)\n  });\n  multicasted.subscribe({\n    next: (v) => console.log('observerB: ' + v)\n  });`.trim();\nconst changeDetector = `\n  import { ChangeDetectionStrategy, Component } from '@angular/core';\n  \n  @Component({\n    selector: 'app-root',\n    template: '\n    <button (click)='updateName()'>Update</button>\n    Welcome {{userValue.firstName}} - {{userValue.lastName}}\n    <div *ngFor=\"let str of myStrArr\">{{str}}</div>\n    <br/>\n    <p>onPush Stretgy</p>\n    <button (click)='onClick()'>onPush</button>\n    ',\n  \n    changeDetection:ChangeDetectionStrategy.OnPush\n  })\n  export class AppComponent {\n    title = '3_change_detection';\n    userValue:any;\n    myStrArr:any[]=[];\n  \n    ngOnInit():void{\n      this.userValue = {\n        firstName:'Mukesh',\n        lastName:'Singh'\n      };\n    }\n  \n    updateName(){\n      this.userValue.firstName='Rakesh';\n      console.log('default Stretgy')\n    }\n  \n    onClick(){\n      this.myStrArr.push('onPush Stretgy')\n      console.log('onPush')\n    }\n  }\n  `.trim();\nconst viewChilds = `\n  //salery.ts\n  @Component({\n    selector: 'salery',\n    template: '{{msg}}:{{empSalery}}',\n    providers: [],\n  })\n  export class Salery {\n    empSalery = 0;\n    msg = '';\n  \n    saleryIncre() {\n      this.empSalery += 500;\n      this.msg = 'Incremented Salery';\n    }\n  \n    saleryDecre() {\n      this.empSalery -= 500;\n      this.msg = 'Decremented Salery';\n    }\n  }\n  \n  \n  //app.component.ts\n  import { Component, ViewChild } from '@angular/core';\n  import { Salery } from './salery';\n  \n  @Component({\n    selector: 'app-root',\n    template: '\n      <button (click)=\"empIncreaseSalery()\">Inc</button>\n      <button (click)=\"empDecreSalery()\">Din</button>\n      <salery></salery>\n    ',\n  })\n  export class AppComponent {\n    @ViewChild(Salery)\n    Salery!: Salery;\n  \n    empIncreaseSalery() {\n      this.Salery.saleryIncre();\n    }\n  \n    empDecreSalery() {\n      this.Salery.saleryDecre();\n    }\n  }\n  `.trim();\nconst viewChildsDir = `\n  //salery.ts\n  @Component({\n    selector: 'app-salery',\n    template: '<p>{{msg}}: {{empSalery}}</p>'',\n  })\n  export class SaleryComponent {\n    empSalery=0;\n    msg='';\n    static saleryIncrement: any;\n  \n    saleryIncrement(){\n        this.empSalery = this.empSalery + 500;\n        this.msg = \"Incremented Salery\"\n        console.log('Incremented');\n    }\n  \n    saleryDec(){\n      this.empSalery = this.empSalery - 500;\n      this.msg = \"Decremented Salery\"\n    }\n  }\n  \n  \n  //employees.ts\n  import { Component, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\n  import { SaleryComponent } from '../salery/salery.component';\n  \n  @Component({\n    selector: 'app-employees',\n    template: '\n      <p appEmpdirective>ViewChild using Directive Employees</p>\n      <input type=\"text\" name=\"username\" #usernameRef /><br/>\n      <input type=\"text\" name=\"email\" #usernameRef />'\n    })\n  export class EmployeesComponent implements AfterViewInit {\n    \n    @ViewChild('usernameRef') usernameRef!: ElementRef;\n  \n    ngAfterViewInit(): void {\n      this.usernameRef.nativeElement.focus();\n    }\n  \n    incremented(){\n      // console.log('Incremented');\n    }\n  \n    decremented(){\n      console.log('Decremented');\n    }\n  }\n  \n  \n  //empdirective.directive.ts\n  import { Directive, ElementRef, AfterViewInit } from '@angular/core';\n  \n  @Directive({\n    selector: '[appEmpdirective]'\n  })\n  export class EmpdirectiveDirective implements AfterViewInit{\n  \n    constructor(private eleRef:ElementRef) { }\n  \n    ngAfterViewInit(): void {\n      this.eleRef.nativeElement.style.color=\"green\";\n    }\n  }\n  \n  //app.ts\n  import { Component } from '@angular/core';\n  \n  @Component({\n    selector: 'app-root',\n    template: '\n        <p>ViewChild using Directive</p>\n        <app-employees></app-employees>',\n    providers:[]\n  })\n  \n  export class AppComponent {\n    display=false;\n  \n    employees = [\n      {\"name\":\"Mukesh\", \"salery\":10000},\n      {\"name\":\"Rakesh\", \"salery\":12000},\n      {\"name\":\"Nitesh\", \"salery\":15000},\n    ]\n  }\n  `.trim();\nconst viewChildsTemp = `\n  //salery.ts\n  @Component({\n    selector: 'app-salery',\n    template: '<p>{{msg}}: {{empSalery}}</p>'',\n  })\n  export class SaleryComponent {\n    empSalery=0;\n    msg='';\n    static saleryIncrement: any;\n  \n    saleryIncrement(){\n        this.empSalery = this.empSalery + 500;\n        this.msg = \"Incremented Salery\"\n    }\n  \n    saleryDec(){\n      this.empSalery = this.empSalery - 500;\n      this.msg = \"Decremented Salery\"\n    }\n  }\n  \n  \n  //employees.ts\n  import { Component, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\n  \n  @Component({\n    selector: 'app-employees',\n    template: '\n      <p #customTitle>ViewChild using Directive Employees</p>\n      <input type=\"text\" name=\"uname\" #username><br/>\n      <input type=\"text\" name=\"email\" #uemail>/\n  })\n  export class EmployeesComponent implements AfterViewInit {\n    @ViewChild('customTitle') customTitle!: ElementRef;\n    @ViewChild('username') username!: ElementRef;\n    @ViewChild('uemail') uemail!: ElementRef;\n  \n    ngAfterViewInit(): void {\n        this.customTitle.nativeElement.style.color=\"blue\";\n        this.username .nativeElement.style.backgroundColor=\"pink\";\n        this.uemail.nativeElement.style.color=\"green\";\n    }\n  }\n  \n  \n  //empdirective.directive.ts\n  import { Directive, ElementRef, AfterViewInit } from '@angular/core';\n  \n  @Directive({\n    selector: '[appEmpdirective]'\n  })\n  export class EmpdirectiveDirective implements AfterViewInit{\n  \n    constructor(private eleRef:ElementRef) { }\n  \n    ngAfterViewInit(): void {\n      this.eleRef.nativeElement.style.color=\"green\";\n    }\n  }\n  \n  \n  //app.ts\n  @Component({\n    selector: 'app-root',\n    template: '\n        <p>ViewChild using Directive</p>\n        <app-employees></app-employees>',\n    providers:[]\n  })\n  \n  export class AppComponent {\n    display=false;\n  \n    employees = [\n      {\"name\":\"Mukesh\", \"salery\":10000},\n      {\"name\":\"Rakesh\", \"salery\":12000},\n      {\"name\":\"Nitesh\", \"salery\":15000},\n    ]\n  }\n  `.trim();\nconst viewProviders = `\n  //child.ts\n  import { EmpsaleryService } from '../empsalery.service';\n  \n  @Component({\n    selector: 'app-child',\n    providers:[EmpsaleryService],\n    viewProviders:[],\n    template: '\n      <p>Child Component</p>\n      <p>Child: {{randomSalery}}</p>\n    ',\n  })\n  export class ChildComponent {\n    randomSalery:any;\n    constructor(private objSalery:EmpsaleryService){\n      this.randomSalery = objSalery.getRandomSalery();\n    }\n  }\n  \n  \n  //parent.ts\n  import { EmpsaleryService } from '../empsalery.service';\n  \n  @Component({\n    selector: 'app-parent',\n    providers:[],\n    viewProviders:[EmpsaleryService],\n    template: '\n      <p>Parent Component</p>\n      <p>Parent: {{randomSalery}}</p>\n      <app-child></app-child>\n    ',\n  })\n  export class ParentComponent {\n    randomSalery:any;\n    constructor(private objSalery:EmpsaleryService){\n      this.randomSalery = objSalery.getRandomSalery();\n    }\n  }\n  \n  \n  //empsalery.service.ts\n  import { Injectable } from '@angular/core';\n  \n  @Injectable({\n    providedIn: 'root'\n  })\n  export class EmpsaleryService {\n    private randomSalery:any;\n    constructor(){\n      this.randomSalery=Math.floor(Math.random()*500);\n    }\n  \n    getRandomSalery(){\n      return this.randomSalery;\n    }\n  }\n  \n  \n  //app.ts\n  import { Component } from '@angular/core';\n  import { EmpsaleryService } from './empsalery.service';\n  \n  @Component({\n    selector: 'app-root',\n    template: '\n        <p>viewProviders</p>\n        <p>randomSalery: {{randomSalery}}</p>\n        <app-parent></app-parent>\n        <br/>\n        <p>Child</p>\n        <app-parent>\n          <app-child></app-child>\n        </app-parent>\n    '',\n    providers:[]\n  })\n  \n  export class AppComponent {\n    randomSalery:any;\n    constructor(private objSalery:EmpsaleryService){\n      this.randomSalery = objSalery.getRandomSalery();\n    }\n  }\n  `.trim();\n\nclass NgModel extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593\n      },\n      __self: this\n    }, \"18. What is the difference between forChild and forRoot? \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595\n      },\n      __self: this\n    }, \"forRoot and forChild are two methods used to provide and configure services in feature modules.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600\n      },\n      __self: this\n    }, \"forRoot is a static method that is used to provide a service and its dependencies at the application level. When you call forRoot on a module, it returns a module with the service and its dependencies provided at the application level. This method should only be called once, in the root module of your application.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610\n      },\n      __self: this\n    }, \"using forRoot to provide and configure a service at the application level.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: forChildFun,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622\n      },\n      __self: this\n    }), \"forChild is a similar method that is used to provide and configure a service and its dependencies at the feature module level. When you call forChild on a module, it returns a module with the service and its dependencies provided at the feature module level. This method should be called for each feature module that requires the service.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: forRootFun,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637\n      },\n      __self: this\n    }), \"In summary, forRoot is used to provide a service and its dependencies at the application level, and should only be called once in the root module of your application. forChild is used to provide a service and its dependencies at the feature module level, and should be called for each feature module that requires the service.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646\n      },\n      __self: this\n    }, \"19. What is Interceptor.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648\n      },\n      __self: this\n    }, \"interceptor is a middleware that intercepts incoming or outgoing HTTP requests and responses. Interceptors can be used to modify or add headers to requests, handle errors, or perform other actions before or after a request or response is sent or received.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    }, \"Interceptors are defined as classes that implement the HttpInterceptor interface, which defines a handle method that intercepts HTTP requests and responses. Interceptors are registered with the HttpClientModule by adding them to the providers array of an Angular module.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664\n      },\n      __self: this\n    }, \"Here's an example of an interceptor that adds an authentication token to outgoing requests:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: interceptor,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    }, \"Interceptors are a powerful feature of Angular that can be used to implement common patterns such as authentication, caching, and error handling in a reusable and modular way.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684\n      },\n      __self: this\n    }, \"20. Can you explain the concept of scope hierarchy in Angular?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688\n      },\n      __self: this\n    }, \"scopes are a way to organize and share data between components and directives. Each component or directive has its own scope, which is a JavaScript object that contains the properties and methods of that component or directive. Scopes can be nested inside one another, forming a hierarchy of scopes.\", \" \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 695\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 696\n      },\n      __self: this\n    }, \" \", \"The scope hierarchy in Angular is determined by the structure of the component tree. Each component has a parent component, except for the root component, which has no parent. When a component is created, it inherits the scope of its parent component, forming a parent-child relationship. The parent component can pass data to the child component by binding data to the child component's input properties.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 706\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 707\n      },\n      __self: this\n    }, \" \", \"In addition to the parent-child relationship, components can also communicate with each other using services, which are instances of classes that provide functionality that can be shared between components. Services can be injected into components using the Angular dependency injection system, and they can be used to share data and functionality between components that are not directly related by the parent-child relationship.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 718\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 719\n      },\n      __self: this\n    }, \" \", \"The scope hierarchy in Angular is important because it determines how data is shared between components and directives. By understanding the scope hierarchy, developers can design their components and directives to share data in a way that is efficient, modular, and maintainable.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 728\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 729\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 730\n      },\n      __self: this\n    }, \"21. What is zone\"), \"a zone is a concept used to track and manage the execution context of asynchronous operations. Zones provide a way to intercept and manage the execution of asynchronous tasks such as callbacks, promises, and timers.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 736\n      },\n      __self: this\n    }, \"Ex.: \"), \"Events, XMLHttpRequests and Timers(setTimeout(), setInterval()) etc.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 738\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 739\n      },\n      __self: this\n    }, \"22. What is ViewEncapsulation and how many ways are there to do it in Angular?\"), \"ViewEncapsulation determines whether the styles defined in a particular component will affect the entire application or not. Angular supports 3 types of ViewEncapsulation:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 747\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 748\n      },\n      __self: this\n    }, \"Emulated: \"), \"Styles used in other HTML spread to the component\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 751\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 752\n      },\n      __self: this\n    }, \"Native: \"), \"Styles used in other HTML doesn\\u2019t spread to the component\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 755\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 756\n      },\n      __self: this\n    }, \"None: \"), \"Styles defined in a component are visible to all components of the application\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 760\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 761\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 762\n      },\n      __self: this\n    }, \"24. What is the use of Bazel in Angular 8.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 763\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 764\n      },\n      __self: this\n    }, \"It provides a platform to make back-end and front-end services with the same tool.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 769\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 770\n      },\n      __self: this\n    }, \"25. Why we should use Bazel for Angular builds\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 771\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 772\n      },\n      __self: this\n    }, \"The initial build time with Bazel will be comparable to the traditional JavaScript tooling. the difference is that the time will not grow exponentially when our application\\u2019s size increases. With Bazel most of the time the build time will stay constant.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 779\n      },\n      __self: this\n    }, \"Bazel rebuilds only the packages which have changed and nothing else.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 784\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 785\n      },\n      __self: this\n    }, \"26. Interface Vs. Model Class\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 786\n      },\n      __self: this\n    }, \"Interface\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 787\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 788\n      },\n      __self: this\n    }, \"An interface is a named shape/structure of related properties & methods that describe an object, but neither provides implementation nor initialisation for them.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 793\n      },\n      __self: this\n    }, \"Interfaces are compile time to check strongly-typed data.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 796\n      },\n      __self: this\n    }, \"An Interface exists only for developers convenience and are not used by angular at run time, They get removed when transpiling down to JS, so they take up no space.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 802\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 803\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 804\n      },\n      __self: this\n    }, \"Model Class\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 805\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 806\n      },\n      __self: this\n    }, \"A model class is a blueprint that contains properties & method and also can provide implementation of something and instantiated using new keyword, unlike just a named shape.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 811\n      },\n      __self: this\n    }, \"Classes are compile time, additional, can be used during runtime as well.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 815\n      },\n      __self: this\n    }, \"A Class transpiled into its ES5-compatible function form and corresponding It generates JS code which persists in final JavaScript output, hence this take up space in memory.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 821\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 822\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 823\n      },\n      __self: this\n    }, \"28. What is State function\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 824\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 825\n      },\n      __self: this\n    }, \"a state function is a type of function that is used to manage the state of a component or application. The state function is a pure function that takes in an input state object and returns a new output state object based on the input and any actions that have been dispatched.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 832\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 833\n      },\n      __self: this\n    }, \"The state function is typically used in conjunction with a state management library such as NgRx or Redux. These libraries provide a centralized store that holds the state of the application and provide a way to dispatch actions that modify the state. The state function is then used to update the state based on the input and the actions that have been dispatched.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 842\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 843\n      },\n      __self: this\n    }, \"The state function is typically defined as a reducer function that takes in the current state and an action object, and returns a new state object based on the action.\", \" \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 848\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 850\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: stateFun,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 851\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 857\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 858\n      },\n      __self: this\n    }, \"29. What is transition function\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 859\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 860\n      },\n      __self: this\n    }, \"The animation transition function is used to specify the changes that occur between one state and another over a period of time. It accepts two arguments:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 865\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 866\n      },\n      __self: this\n    }, \"First argument accepts an expression that defines the direction between two transition states.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 870\n      },\n      __self: this\n    }, \"Second argument accepts an animate() function.\"))), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 873\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: transition,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 874\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 880\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 881\n      },\n      __self: this\n    }, \"30. Pipes\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 882\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 883\n      },\n      __self: this\n    }, \"A pipe takes in data as input and transforms it to a desired output.\", \" \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 887\n      },\n      __self: this\n    }, \"Using pipe operator (|), we can apply the pipe's features to any of property in app.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 891\n      },\n      __self: this\n    }, \"Pipes used to transform the data before displaying it in a browser. Even we can create custom pipes.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 895\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 896\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 897\n      },\n      __self: this\n    }, \"Parameterize Pipes:\"), \" we can pass any number of Parameters to the pipe using colon (:).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 900\n      },\n      __self: this\n    }, \"Mutiple Pipes\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 901\n      },\n      __self: this\n    }, \"Pipes with string\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 903\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 904\n      },\n      __self: this\n    }, \"Ex. \"), \"DatePipe, UpperCasePipe, LowerCasePipe, CurrencyPipe, and PercentPipe.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 906\n      },\n      __self: this\n    }), \"Let us take a pipe to transform a component's birthday property into a human-friendly date using date pipe.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 909\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 910\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: pipeFor,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 911\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 917\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 918\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 919\n      },\n      __self: this\n    }, \"Steps to create custom pipe: \"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 920\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 921\n      },\n      __self: this\n    }, \"Creates a TypeScript class.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 922\n      },\n      __self: this\n    }, \"Decorate the class with \\\"@Pipe\\\" decorator.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 923\n      },\n      __self: this\n    }, \"Implements PipeTransform interface in TypeScript class.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 924\n      },\n      __self: this\n    }, \"Override the transform() method.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 925\n      },\n      __self: this\n    }, \"Configure the class with @NgModule.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 927\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 928\n      },\n      __self: this\n    }, \"31. What is a parameterized pipe\"), \"A parameterized pipe in Angular is a type of pipe that accepts one or more parameters that can be used to modify the output of the pipe. Unlike a regular pipe that has a fixed set of inputs and outputs, a parameterized pipe can be customized based on the values of its input parameters.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 934\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 935\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 936\n      },\n      __self: this\n    }, \"Ex. \"), \"Let's take a birthday example with a particular format(dd/MM/yyyy):\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 938\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: paraPipes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 939\n      },\n      __self: this\n    })), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 945\n      },\n      __self: this\n    }, \"N: The parameter value can be any valid template expression, such as a string literal or a component property.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 949\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 950\n      },\n      __self: this\n    }, \"32. How do you chain pipes\"), \"can chain pipes together to create more complex and powerful data transformations. To chain pipes, you simply add additional pipe operators (|) followed by the name of the next pipe.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 954\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 955\n      },\n      __self: this\n    }), \"Let's take a birthday property which uses date pipe(along with parameter) and uppercase pipes as below.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 958\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: chainPipe,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 959\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 965\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 966\n      },\n      __self: this\n    }, \"33. Pure and Impure Pipes\"), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 967\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 968\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 969\n      },\n      __self: this\n    }, \"Pure Pipe\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 970\n      },\n      __self: this\n    }, \"Impure Pipe\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 972\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 973\n      },\n      __self: this\n    }, \"Pure pipes are called only when Angular detects a change in the input data.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 977\n      },\n      __self: this\n    }, \"are called on every change detection cycle, even if the input data has not changed.\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 982\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 983\n      },\n      __self: this\n    }, \"A pure pipe should always return the same output for the same input, and it should not have any side effects.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 987\n      },\n      __self: this\n    }, \"Impure pipes can have side effects, and they should be used with caution, as they can have a performance impact on the application.\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 993\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 994\n      },\n      __self: this\n    }, \"Pure pipes are designed to be used with immutable data, such as strings, numbers, and objects that are not modified after creation.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 999\n      },\n      __self: this\n    }, \"Impure pipes are designed to be used with mutable data, such as arrays and objects that can be modified after creation.\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1004\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1005\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1006\n      },\n      __self: this\n    }, \"Ex. \"), \"UpperCasePipe, LowerCasePipe, JsonPipe\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1008\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1009\n      },\n      __self: this\n    }, \"Ex. \"), \"AsyncPipe, DatePipe\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1013\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1014\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1015\n      },\n      __self: this\n    }, \"34. What is the purpose of async pipe\"), \"async pipe is used to handle asynchronous data and subscriptions in templates. The async pipe subscribes to an Observable or a Promise and returns the latest value emitted by the Observable or resolved by the Promise.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1020\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1021\n      },\n      __self: this\n    }), \"Let's take a time observable which continuously updates the view for every 2 seconds with the current time.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1024\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: purpose,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1025\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1031\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1032\n      },\n      __self: this\n    }, \"35. Change Detection:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1033\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1034\n      },\n      __self: this\n    }, \"Means updating the DOM every time the data is changed.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1035\n      },\n      __self: this\n    }, \"When modifying any of the models, Angular detects the changes and updates the views immediately. The purpose of this mechanism is to ensure that the underlying views are always synchronized with their corresponding models.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1042\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1043\n      },\n      __self: this\n    }, \"Angular provides two strategies for Change Detection:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1044\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1045\n      },\n      __self: this\n    }, \"1. default strategy:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1046\n      },\n      __self: this\n    }), \"Every time you put or edit any data, Angular will run the change detector to update the DOM.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1049\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1050\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1051\n      },\n      __self: this\n    }, \"2. onPush strategy:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1052\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1053\n      },\n      __self: this\n    }, \"Angular will only run change detector when new reference is passed to \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1055\n      },\n      __self: this\n    }, \"@Input\"), \" data.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1057\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1058\n      },\n      __self: this\n    }, \"With onPush, the component depends only on its inputs and covers immutability, the change detection strategy will be activated when:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1062\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1063\n      },\n      __self: this\n    }, \"The input reference changes;\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1064\n      },\n      __self: this\n    }, \"An event originating from the member or one of his children;\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1068\n      },\n      __self: this\n    }, \"Execute change detection explicitly\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1070\n      },\n      __self: this\n    }, \"(componentRef.markForCheck ());\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1072\n      },\n      __self: this\n    }, \"Use the async pipe in the view.\")))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1076\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1077\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: changeDetector,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1078\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1084\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1085\n      },\n      __self: this\n    }, \"In the onPush strategy, Angular only performs the change detector when a new reference to the data of @Input() is passed.\")), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1091\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1092\n      },\n      __self: this\n    }, \"Change Detection Mechanism-moves only forward and never looks back, starting from the root component to the last. Each component points to a child, but the child does not point to a parent. One-way flow eliminates the need for a\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1097\n      },\n      __self: this\n    }, \"$digest loop\"), \".\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1100\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1101\n      },\n      __self: this\n    }, \"48. How many Change Detectors can there be in the whole application?\"), \"Each component has its own ChangeDetector. All Change Detectors are inherited from AbstractChangeDetector.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1107\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1108\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1109\n      },\n      __self: this\n    }, \"36. ViewProvider\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1110\n      },\n      __self: this\n    }, \"view provider is a provider that is defined at the component level and is only available to the component and its descendants in the component tree.\"), \"view provider used to provide services or values that are specific to a component and its view, without exposing them to the rest of the application.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1118\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: viewProviders,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1119\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1125\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1126\n      },\n      __self: this\n    }, \"37. ViewChild\"), \"ViewChild is a decorator for Angular component variables, which allow to bind child component data and method.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1129\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1130\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1131\n      },\n      __self: this\n    }, \"There may be situation where we want to access a directive, child component or a DOM element from a parent component class. @ViewChild decorator returns the first element that matches a give directive, component or template.\")), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1138\n      },\n      __self: this\n    }, \"ViewChild using Component\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1139\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: viewChilds,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1140\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1146\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1147\n      },\n      __self: this\n    }, \"ViewChild using Directive\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1148\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: viewChildsDir,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1149\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1155\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1156\n      },\n      __self: this\n    }, \"ViewChild using Template\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1157\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: viewChildsTemp,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1158\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1164\n      },\n      __self: this\n    }), \"Use @ViewChild with ElementRef or TemplateRef.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1166\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1167\n      },\n      __self: this\n    }, \"Dynamically Load Component\"), \"you can dynamically load components at runtime using the ComponentFactoryResolver class. Dynamically loading components can be useful when you need to load a component based on user input or when you need to load a component conditionally based on some runtime criteria.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1173\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1174\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1175\n      },\n      __self: this\n    }, \"38. ViewContainerRef\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1176\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1177\n      },\n      __self: this\n    }, \"ViewContainerRef represents a container where we can attach one or more views to a component and also show an API to create components. Some important methods of ViewContainerRef are:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1182\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1183\n      },\n      __self: this\n    }, \"createEmbeddedView()\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1184\n      },\n      __self: this\n    }, \"clear()\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1185\n      },\n      __self: this\n    }, \"get()\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1186\n      },\n      __self: this\n    }, \"insert()\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1187\n      },\n      __self: this\n    }, \"move()\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1188\n      },\n      __self: this\n    }, \"createComponent()\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1191\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1193\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1194\n      },\n      __self: this\n    }, \"CreateEmbeddedView()\"), \" instantiates an embedded view and inserts it into container.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1197\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1198\n      },\n      __self: this\n    }, \"createComponent()\"), \" instantiates a single component and inserts its host view into the container at a specified index.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1202\n      },\n      __self: this\n    }), \"In dynamic component loader, load component using createComponent() of ViewContainerRef.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1205\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1206\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: ViewContainerRef,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1207\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1213\n      },\n      __self: this\n    }), \"clear() method of ViewContainerRef destroys all existing views in the container.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1216\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1217\n      },\n      __self: this\n    }, \"39. What is ng-template in Angular?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1218\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1219\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1220\n      },\n      __self: this\n    }, \"ng-template:\"), \" Is an Angular element that is used for rendering HTML in a template. However, it is not rendered directly on DOM. If you include an ng-template tag to a template, the tag and the content inside it will be replaced by comment upon render.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1226\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1227\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1228\n      },\n      __self: this\n    }, \"ng-container: \"), \"Allows us to create a section in a template without introducing a new HTML element. The ng-container does not render in the DOM, but content inside it is rendered. ng-container is not a directive, component, class or interface, it just a syntax element.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1235\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: template,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1236\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1242\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1243\n      },\n      __self: this\n    }, \"40. What is the purpose of any type cast function\"), \"You can disable binding expression type checking using $any() type cast function.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1246\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: typeFunc,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1247\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1253\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1254\n      },\n      __self: this\n    }, \"41. What is Non null type assertion operator\"), \"You can use the non-null type assertion operator to suppress the Object is possibly 'undefined' error.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1257\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1258\n      },\n      __self: this\n    }), \"In the following example, the user and contact properties are always set together, implying that contact is always non-null if user is non-null. The error is suppressed in the example by using contact!.email.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1263\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: assertionOpp,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1264\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1270\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1271\n      },\n      __self: this\n    }, \"42. What is type narrowing\"), \"Dynamic checks and predicates gives us information about values at run-time. type narrowing is the process of reflecting this information in the type-checker at compile time.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1275\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: narrowing,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1276\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1282\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1283\n      },\n      __self: this\n    }, \"43. What is the purpose of common module\"), \"The commonly-needed services, pipes, and directives provided by @angular/common module.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1286\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1287\n      },\n      __self: this\n    }, \"44. What is angular animation\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1288\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1289\n      },\n      __self: this\n    }, \"Angular animations are based on CSS web transition functionality, so anything that can be styled or transformed in CSS can be animated the same way in Angular.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1294\n      },\n      __self: this\n    }, \"Angular animations allow you to: Set animation timings, styles, keyframes, and transitions.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1299\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1300\n      },\n      __self: this\n    }, \"45. What is Angular DSL (Domain-specific language)\"), \"A DSL is a computer language specialized to a particular application domain. Angulard DSL allows us to write Angular specific html-like syntax on top of normal html. It has its own compiler that compiles this syntax to html that the browser can understand. This DSL is defined in NgModules such as animations, forms, routing and navigation.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1307\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1308\n      },\n      __self: this\n    }), \"Basically you will see 3 main syntax in Angular DSL.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1310\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: dslSyntax,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1311\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1317\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1318\n      },\n      __self: this\n    }, \"46. What is multicasting\"), \"Multi-casting is the process of broadcasting to a list of multiple subscribers in a single execution.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1321\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: multicasting,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1322\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1328\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1329\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1330\n      },\n      __self: this\n    }, \"Angular Module Loading: A module can be loaded eagerly, lazily, preloaded.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1334\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1335\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1336\n      },\n      __self: this\n    }, \"1. Eager loading:\"), \" All of the modules and functions are loaded on application startup. the root module is always eagerly loaded.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1340\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1341\n      },\n      __self: this\n    }, \"2. Lazy loading:\"), \" is loading modules on demand.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1343\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1344\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1345\n      },\n      __self: this\n    }, \"3. Preloading:\"), \" is loading modules in background just after app starts.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1348\n      },\n      __self: this\n    }, \"To configure Preloading features modules, first we configure them for lazy loading then, using angular in-built PreloadAllModules strategy, we enable to load all lazy loading into Preloading modules.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1354\n      },\n      __self: this\n    }, \"Using PreloadAllModules strategy, all modules configured by loadChildren property will be preloaded. The modules configured by loadChildren property will be either lazily loaded or preloaded but not both. To preload only selective modules, we need to use custom preloading strategy.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1361\n      },\n      __self: this\n    }, \"We can create custom preloading strategy. For this we need to create a service by implementing Angular PreloadingStrategy interface and override its preload method and then configure this service with PreloadingStrategy property in routing module. To select a module for custom preloading we need to use dataproperty in route configuration, configured as data 'preload: true' for selective feature module preloading.\"))))));\n  }\n\n}\n\nexport default withStyles(styles)(NgModel);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/deepAngularjs/ngModel.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","forChildFun","trim","forRootFun","interceptor","stateFun","transition","pipeFor","paraPipes","chainPipe","purpose","ViewContainerRef","template","typeFunc","assertionOpp","narrowing","dslSyntax","multicasting","changeDetector","viewChilds","viewChildsDir","viewChildsTemp","viewProviders","NgModel","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst forChildFun = `\nimport { MyService } from './my.service';\n\n@NgModule({\n  imports: [ ... ],\n  providers: [ MyService ]\n})\nexport class MyModule {\n  static forRoot(): ModuleWithProviders<MyModule> {\n    return {\n      ngModule: MyModule,\n      providers: [ MyService ]\n    };\n  }\n}`.trim();\n\nconst forRootFun = `\nimport { MyService } from './my.service';\n\n@NgModule({\n  imports: [ ... ]\n})\nexport class MyFeatureModule {\n  static forChild(): ModuleWithProviders<MyFeatureModule> {\n    return {\n      ngModule: MyFeatureModule,\n      providers: [ MyService ]\n    };\n  }\n}`.trim();\n\nconst interceptor = `\nimport { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  intercept(request: HttpRequest<any>, next: HttpHandler) {\n    // Get the auth token from local storage\n    const authToken = localStorage.getItem('authToken');\n    \n    // Clone the request and add the auth token to the headers\n    const authRequest = request.clone({\n      headers: request.headers.set('Authorization', 'Bearer '$'{authToken}')\n    });\n    \n    // Pass the auth request on to the next interceptor or to the HttpClient if there are no more interceptors\n    return next.handle(authRequest);\n  }\n}\n`.trim();\n\nconst stateFun = `\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return { count: state.count + 1 };\n    case 'DECREMENT':\n      return { count: state.count - 1 };\n    default:\n      return state;\n  }\n}`.trim();\n\nconst transition = `\ntransition('open => closed', [\n  animate('500ms')\n]),`.trim();\n\nconst pipeFor = `\n@Component({\n  selector: 'app-birthday',\n  template: '<p> Birthday is {{birthday | date}}</p>'\n})\nexport class BirthdayComponent {\n  birthday = new Date(1987, 6, 18); \n}`.trim();\n\nconst paraPipes = `\n@Component({\n      selector: 'app-birthday',\n      template: '<p> Birthday is {{birthday | date: 'dd/MM/yyyy'}}</p>' // 18/06/1987\n    })\n    export class BirthdayComponent {\n      birthday = new Date(1987, 6, 18);\n    }`.trim();\n\nconst chainPipe = `\n@Component({\n          selector: 'app-birthday',\n          template: '<p> Birthday is {{birthday | date: 'fullDate' | uppercase}} </p>' // THURSDAY, JUNE 18, 1987\n        })\n        export class BirthdayComponent {\n          birthday = new Date(1987, 6, 18);\n        }`.trim();\n\nconst purpose = `\n@Component({\n  selector: 'async-observable-pipe',\n  template: '<div> <code>observable|async</code>:\n  Time: {{time | async}}</div >'\n})\nexport class AsyncObservablePipeComponent {\n  time = new Observable(observer =>\n    setInterval(() => observer.next(new Date().toString()), 2000)\n  );\n}`.trim();\n\nconst ViewContainerRef =\n  `let componentRef = viewContainerRef.createComponent(componentFactory);`.trim();\n\nconst template = `\n  <p>Hip!</p>\n  <ng-template>\n    <p>Hip!</p>\n  </ng-template>\n  <p>Hooray!</p>\n  \n  //<ng-container>\n  @Component({\n    selector: 'app-root',\n    template: '\n        <ng-template #loading>\n          ng-template rendering\n        </ng-template>\n  \n        <p>ng-container</p>\n        <ng-container *ngIf=\"display else loading\">\n          ng-container rendering\n          \n        </ng-container>\n        <ul>\n            <li *ngFor=\"let emp of employees; let i=index\">\n              <ng-container *ngIf=\"emp.salery>10000\">\n                {{i+1}} - {{emp.name}}\n              </ng-container>\n            </li>\n          </ul>\n    '',\n    providers:[]\n  })\n  \n  export class AppComponent {\n    display=false;\n  \n    employees = [\n      {\"name\":\"Mukesh\", \"salery\":10000},\n      {\"name\":\"Rakesh\", \"salery\":12000},\n      {\"name\":\"Nitesh\", \"salery\":15000},\n    ]\n  }\n  `.trim();\n\nconst typeFunc = `\n  template:\n    '{{ $any(user).contacts.email }}'\n    \n    \n  //The $any() cast function also works with this to allow access to undeclared members of the component.\n     template:\n     '{{ $any(this).contacts.email }}'`.trim();\n\nconst assertionOpp = `@Component({\n    selector: 'my-component',\n    template: '<span *ngIf=\"user\"> {{user.name}} contacted through {{contact!.email}} </span>'\n  })\n  class MyComponent {\n    user?: User;\n    contact?: Contact;\n  \n    setData(user: User, contact: Contact) {\n      this.user = user;\n      this.contact = contact;\n    }\n  }`.trim();\n\nconst narrowing = `\n  @Component({\n    selector: 'my-component',\n    template: '<span *ngIf=\"user\"> {{user.contact.email}} </span>'\n  })\n  class MyComponent {\n    user?: User;\n  }`.trim();\n\nconst dslSyntax = `\n  (): Used for Output and DOM events.\n  []: Used for Input and specific DOM element attributes.\n  *: Structural directives(*ngFor or *ngIf) will affect/change the DOM structure.`.trim();\n\nconst multicasting = `\n  var source = Rx.Observable.from([1, 2, 3]);\n  var subject = new Rx.Subject();\n  var multicasted = source.multicast(subject);\n  \n  // These are, under the hood, 'subject.subscribe({ ...})':\n  multicasted.subscribe({\n    next: (v) => console.log('observerA: ' + v)\n  });\n  multicasted.subscribe({\n    next: (v) => console.log('observerB: ' + v)\n  });`.trim();\n\nconst changeDetector = `\n  import { ChangeDetectionStrategy, Component } from '@angular/core';\n  \n  @Component({\n    selector: 'app-root',\n    template: '\n    <button (click)='updateName()'>Update</button>\n    Welcome {{userValue.firstName}} - {{userValue.lastName}}\n    <div *ngFor=\"let str of myStrArr\">{{str}}</div>\n    <br/>\n    <p>onPush Stretgy</p>\n    <button (click)='onClick()'>onPush</button>\n    ',\n  \n    changeDetection:ChangeDetectionStrategy.OnPush\n  })\n  export class AppComponent {\n    title = '3_change_detection';\n    userValue:any;\n    myStrArr:any[]=[];\n  \n    ngOnInit():void{\n      this.userValue = {\n        firstName:'Mukesh',\n        lastName:'Singh'\n      };\n    }\n  \n    updateName(){\n      this.userValue.firstName='Rakesh';\n      console.log('default Stretgy')\n    }\n  \n    onClick(){\n      this.myStrArr.push('onPush Stretgy')\n      console.log('onPush')\n    }\n  }\n  `.trim();\n\nconst viewChilds = `\n  //salery.ts\n  @Component({\n    selector: 'salery',\n    template: '{{msg}}:{{empSalery}}',\n    providers: [],\n  })\n  export class Salery {\n    empSalery = 0;\n    msg = '';\n  \n    saleryIncre() {\n      this.empSalery += 500;\n      this.msg = 'Incremented Salery';\n    }\n  \n    saleryDecre() {\n      this.empSalery -= 500;\n      this.msg = 'Decremented Salery';\n    }\n  }\n  \n  \n  //app.component.ts\n  import { Component, ViewChild } from '@angular/core';\n  import { Salery } from './salery';\n  \n  @Component({\n    selector: 'app-root',\n    template: '\n      <button (click)=\"empIncreaseSalery()\">Inc</button>\n      <button (click)=\"empDecreSalery()\">Din</button>\n      <salery></salery>\n    ',\n  })\n  export class AppComponent {\n    @ViewChild(Salery)\n    Salery!: Salery;\n  \n    empIncreaseSalery() {\n      this.Salery.saleryIncre();\n    }\n  \n    empDecreSalery() {\n      this.Salery.saleryDecre();\n    }\n  }\n  `.trim();\n\nconst viewChildsDir = `\n  //salery.ts\n  @Component({\n    selector: 'app-salery',\n    template: '<p>{{msg}}: {{empSalery}}</p>'',\n  })\n  export class SaleryComponent {\n    empSalery=0;\n    msg='';\n    static saleryIncrement: any;\n  \n    saleryIncrement(){\n        this.empSalery = this.empSalery + 500;\n        this.msg = \"Incremented Salery\"\n        console.log('Incremented');\n    }\n  \n    saleryDec(){\n      this.empSalery = this.empSalery - 500;\n      this.msg = \"Decremented Salery\"\n    }\n  }\n  \n  \n  //employees.ts\n  import { Component, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\n  import { SaleryComponent } from '../salery/salery.component';\n  \n  @Component({\n    selector: 'app-employees',\n    template: '\n      <p appEmpdirective>ViewChild using Directive Employees</p>\n      <input type=\"text\" name=\"username\" #usernameRef /><br/>\n      <input type=\"text\" name=\"email\" #usernameRef />'\n    })\n  export class EmployeesComponent implements AfterViewInit {\n    \n    @ViewChild('usernameRef') usernameRef!: ElementRef;\n  \n    ngAfterViewInit(): void {\n      this.usernameRef.nativeElement.focus();\n    }\n  \n    incremented(){\n      // console.log('Incremented');\n    }\n  \n    decremented(){\n      console.log('Decremented');\n    }\n  }\n  \n  \n  //empdirective.directive.ts\n  import { Directive, ElementRef, AfterViewInit } from '@angular/core';\n  \n  @Directive({\n    selector: '[appEmpdirective]'\n  })\n  export class EmpdirectiveDirective implements AfterViewInit{\n  \n    constructor(private eleRef:ElementRef) { }\n  \n    ngAfterViewInit(): void {\n      this.eleRef.nativeElement.style.color=\"green\";\n    }\n  }\n  \n  //app.ts\n  import { Component } from '@angular/core';\n  \n  @Component({\n    selector: 'app-root',\n    template: '\n        <p>ViewChild using Directive</p>\n        <app-employees></app-employees>',\n    providers:[]\n  })\n  \n  export class AppComponent {\n    display=false;\n  \n    employees = [\n      {\"name\":\"Mukesh\", \"salery\":10000},\n      {\"name\":\"Rakesh\", \"salery\":12000},\n      {\"name\":\"Nitesh\", \"salery\":15000},\n    ]\n  }\n  `.trim();\n\nconst viewChildsTemp = `\n  //salery.ts\n  @Component({\n    selector: 'app-salery',\n    template: '<p>{{msg}}: {{empSalery}}</p>'',\n  })\n  export class SaleryComponent {\n    empSalery=0;\n    msg='';\n    static saleryIncrement: any;\n  \n    saleryIncrement(){\n        this.empSalery = this.empSalery + 500;\n        this.msg = \"Incremented Salery\"\n    }\n  \n    saleryDec(){\n      this.empSalery = this.empSalery - 500;\n      this.msg = \"Decremented Salery\"\n    }\n  }\n  \n  \n  //employees.ts\n  import { Component, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\n  \n  @Component({\n    selector: 'app-employees',\n    template: '\n      <p #customTitle>ViewChild using Directive Employees</p>\n      <input type=\"text\" name=\"uname\" #username><br/>\n      <input type=\"text\" name=\"email\" #uemail>/\n  })\n  export class EmployeesComponent implements AfterViewInit {\n    @ViewChild('customTitle') customTitle!: ElementRef;\n    @ViewChild('username') username!: ElementRef;\n    @ViewChild('uemail') uemail!: ElementRef;\n  \n    ngAfterViewInit(): void {\n        this.customTitle.nativeElement.style.color=\"blue\";\n        this.username .nativeElement.style.backgroundColor=\"pink\";\n        this.uemail.nativeElement.style.color=\"green\";\n    }\n  }\n  \n  \n  //empdirective.directive.ts\n  import { Directive, ElementRef, AfterViewInit } from '@angular/core';\n  \n  @Directive({\n    selector: '[appEmpdirective]'\n  })\n  export class EmpdirectiveDirective implements AfterViewInit{\n  \n    constructor(private eleRef:ElementRef) { }\n  \n    ngAfterViewInit(): void {\n      this.eleRef.nativeElement.style.color=\"green\";\n    }\n  }\n  \n  \n  //app.ts\n  @Component({\n    selector: 'app-root',\n    template: '\n        <p>ViewChild using Directive</p>\n        <app-employees></app-employees>',\n    providers:[]\n  })\n  \n  export class AppComponent {\n    display=false;\n  \n    employees = [\n      {\"name\":\"Mukesh\", \"salery\":10000},\n      {\"name\":\"Rakesh\", \"salery\":12000},\n      {\"name\":\"Nitesh\", \"salery\":15000},\n    ]\n  }\n  `.trim();\n\nconst viewProviders = `\n  //child.ts\n  import { EmpsaleryService } from '../empsalery.service';\n  \n  @Component({\n    selector: 'app-child',\n    providers:[EmpsaleryService],\n    viewProviders:[],\n    template: '\n      <p>Child Component</p>\n      <p>Child: {{randomSalery}}</p>\n    ',\n  })\n  export class ChildComponent {\n    randomSalery:any;\n    constructor(private objSalery:EmpsaleryService){\n      this.randomSalery = objSalery.getRandomSalery();\n    }\n  }\n  \n  \n  //parent.ts\n  import { EmpsaleryService } from '../empsalery.service';\n  \n  @Component({\n    selector: 'app-parent',\n    providers:[],\n    viewProviders:[EmpsaleryService],\n    template: '\n      <p>Parent Component</p>\n      <p>Parent: {{randomSalery}}</p>\n      <app-child></app-child>\n    ',\n  })\n  export class ParentComponent {\n    randomSalery:any;\n    constructor(private objSalery:EmpsaleryService){\n      this.randomSalery = objSalery.getRandomSalery();\n    }\n  }\n  \n  \n  //empsalery.service.ts\n  import { Injectable } from '@angular/core';\n  \n  @Injectable({\n    providedIn: 'root'\n  })\n  export class EmpsaleryService {\n    private randomSalery:any;\n    constructor(){\n      this.randomSalery=Math.floor(Math.random()*500);\n    }\n  \n    getRandomSalery(){\n      return this.randomSalery;\n    }\n  }\n  \n  \n  //app.ts\n  import { Component } from '@angular/core';\n  import { EmpsaleryService } from './empsalery.service';\n  \n  @Component({\n    selector: 'app-root',\n    template: '\n        <p>viewProviders</p>\n        <p>randomSalery: {{randomSalery}}</p>\n        <app-parent></app-parent>\n        <br/>\n        <p>Child</p>\n        <app-parent>\n          <app-child></app-child>\n        </app-parent>\n    '',\n    providers:[]\n  })\n  \n  export class AppComponent {\n    randomSalery:any;\n    constructor(private objSalery:EmpsaleryService){\n      this.randomSalery = objSalery.getRandomSalery();\n    }\n  }\n  `.trim();\n\nclass NgModel extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>18. What is the difference between forChild and forRoot? </h3>\n              <ul>\n                <li>\n                  forRoot and forChild are two methods used to provide and\n                  configure services in feature modules.\n                </li>\n                <br />\n                <li>\n                  forRoot is a static method that is used to provide a service\n                  and its dependencies at the application level. When you call\n                  forRoot on a module, it returns a module with the service and\n                  its dependencies provided at the application level. This\n                  method should only be called once, in the root module of your\n                  application.\n                </li>\n              </ul>\n              <br />\n              <b>\n                using forRoot to provide and configure a service at the\n                application level.\n              </b>\n              <div style={titles}>\n                <PrismCode\n                  code={forChildFun}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              forChild is a similar method that is used to provide and configure\n              a service and its dependencies at the feature module level. When\n              you call forChild on a module, it returns a module with the\n              service and its dependencies provided at the feature module level.\n              This method should be called for each feature module that requires\n              the service.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={forRootFun}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              In summary, forRoot is used to provide a service and its\n              dependencies at the application level, and should only be called\n              once in the root module of your application. forChild is used to\n              provide a service and its dependencies at the feature module\n              level, and should be called for each feature module that requires\n              the service.\n              <br />\n              <br />\n              <h3>19. What is Interceptor.</h3>\n              <ul>\n                <li>\n                  interceptor is a middleware that intercepts incoming or\n                  outgoing HTTP requests and responses. Interceptors can be used\n                  to modify or add headers to requests, handle errors, or\n                  perform other actions before or after a request or response is\n                  sent or received.\n                </li>\n                <br />\n                <li>\n                  Interceptors are defined as classes that implement the\n                  HttpInterceptor interface, which defines a handle method that\n                  intercepts HTTP requests and responses. Interceptors are\n                  registered with the HttpClientModule by adding them to the\n                  providers array of an Angular module.\n                </li>\n                <br />\n                <li>\n                  Here's an example of an interceptor that adds an\n                  authentication token to outgoing requests:\n                </li>\n                <br />\n                <div style={titles}>\n                  <PrismCode\n                    code={interceptor}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n                <br />\n                <li>\n                  Interceptors are a powerful feature of Angular that can be\n                  used to implement common patterns such as authentication,\n                  caching, and error handling in a reusable and modular way.\n                </li>\n              </ul>\n              <br />\n              <h3>\n                20. Can you explain the concept of scope hierarchy in Angular?\n              </h3>\n              <ul>\n                <li>\n                  scopes are a way to organize and share data between components\n                  and directives. Each component or directive has its own scope,\n                  which is a JavaScript object that contains the properties and\n                  methods of that component or directive. Scopes can be nested\n                  inside one another, forming a hierarchy of scopes.{\" \"}\n                </li>\n                <br />\n                <li>\n                  {\" \"}\n                  The scope hierarchy in Angular is determined by the structure\n                  of the component tree. Each component has a parent component,\n                  except for the root component, which has no parent. When a\n                  component is created, it inherits the scope of its parent\n                  component, forming a parent-child relationship. The parent\n                  component can pass data to the child component by binding data\n                  to the child component's input properties.\n                </li>\n                <br />\n                <li>\n                  {\" \"}\n                  In addition to the parent-child relationship, components can\n                  also communicate with each other using services, which are\n                  instances of classes that provide functionality that can be\n                  shared between components. Services can be injected into\n                  components using the Angular dependency injection system, and\n                  they can be used to share data and functionality between\n                  components that are not directly related by the parent-child\n                  relationship.\n                </li>\n                <br />\n                <li>\n                  {\" \"}\n                  The scope hierarchy in Angular is important because it\n                  determines how data is shared between components and\n                  directives. By understanding the scope hierarchy, developers\n                  can design their components and directives to share data in a\n                  way that is efficient, modular, and maintainable.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>21. What is zone</h3>\n              a zone is a concept used to track and manage the execution context\n              of asynchronous operations. Zones provide a way to intercept and\n              manage the execution of asynchronous tasks such as callbacks,\n              promises, and timers.\n              <br />\n              <b>Ex.: </b>Events, XMLHttpRequests and Timers(setTimeout(),\n              setInterval()) etc.\n              <br />\n              <h3>\n                22. What is ViewEncapsulation and how many ways are there to do\n                it in Angular?\n              </h3>\n              ViewEncapsulation determines whether the styles defined in a\n              particular component will affect the entire application or not.\n              Angular supports 3 types of ViewEncapsulation:\n              <ul>\n                <li>\n                  <b>Emulated: </b>Styles used in other HTML spread to the\n                  component\n                </li>\n                <li>\n                  <b>Native: </b>Styles used in other HTML doesn’t spread to the\n                  component\n                </li>\n                <li>\n                  <b>None: </b>Styles defined in a component are visible to all\n                  components of the application\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>24. What is the use of Bazel in Angular 8.</h3>\n              <ul>\n                <li>\n                  It provides a platform to make back-end and front-end services\n                  with the same tool.\n                </li>\n              </ul>\n              <br />\n              <h3>25. Why we should use Bazel for Angular builds</h3>\n              <ul>\n                <li>\n                  The initial build time with Bazel will be comparable to the\n                  traditional JavaScript tooling. the difference is that the\n                  time will not grow exponentially when our application’s size\n                  increases. With Bazel most of the time the build time will\n                  stay constant.\n                </li>\n                <li>\n                  Bazel rebuilds only the packages which have changed and\n                  nothing else.\n                </li>\n              </ul>\n              <br />\n              <h3>26. Interface Vs. Model Class</h3>\n              <b>Interface</b>\n              <ul>\n                <li>\n                  An interface is a named shape/structure of related properties\n                  & methods that describe an object, but neither provides\n                  implementation nor initialisation for them.\n                </li>\n                <li>\n                  Interfaces are compile time to check strongly-typed data.\n                </li>\n                <li>\n                  An Interface exists only for developers convenience and are\n                  not used by angular at run time, They get removed when\n                  transpiling down to JS, so they take up no space.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <b>Model Class</b>\n              <ul>\n                <li>\n                  A model class is a blueprint that contains properties & method\n                  and also can provide implementation of something and\n                  instantiated using new keyword, unlike just a named shape.\n                </li>\n                <li>\n                  Classes are compile time, additional, can be used during\n                  runtime as well.\n                </li>\n                <li>\n                  A Class transpiled into its ES5-compatible function form and\n                  corresponding It generates JS code which persists in final\n                  JavaScript output, hence this take up space in memory.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>28. What is State function</h3>\n              <ul>\n                <li>\n                  a state function is a type of function that is used to manage\n                  the state of a component or application. The state function is\n                  a pure function that takes in an input state object and\n                  returns a new output state object based on the input and any\n                  actions that have been dispatched.\n                </li>\n                <br />\n                <li>\n                  The state function is typically used in conjunction with a\n                  state management library such as NgRx or Redux. These\n                  libraries provide a centralized store that holds the state of\n                  the application and provide a way to dispatch actions that\n                  modify the state. The state function is then used to update\n                  the state based on the input and the actions that have been\n                  dispatched.\n                </li>\n                <br />\n                <li>\n                  The state function is typically defined as a reducer function\n                  that takes in the current state and an action object, and\n                  returns a new state object based on the action.{\" \"}\n                </li>\n                <br />\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={stateFun}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>29. What is transition function</h3>\n              <ul>\n                <li>\n                  The animation transition function is used to specify the\n                  changes that occur between one state and another over a period\n                  of time. It accepts two arguments:\n                </li>\n                <ul>\n                  <li>\n                    First argument accepts an expression that defines the\n                    direction between two transition states.\n                  </li>\n                  <li>Second argument accepts an animate() function.</li>\n                </ul>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={transition}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>30. Pipes</h3>\n              <ul>\n                <li>\n                  A pipe takes in data as input and transforms it to a desired\n                  output.{\" \"}\n                </li>\n                <li>\n                  Using pipe operator (|), we can apply the pipe's features to\n                  any of property in app.\n                </li>\n                <li>\n                  Pipes used to transform the data before displaying it in a\n                  browser. Even we can create custom pipes.\n                </li>\n                <br />\n                <li>\n                  <b>Parameterize Pipes:</b> we can pass any number of\n                  Parameters to the pipe using colon (:).\n                </li>\n                <li>Mutiple Pipes</li>\n                <li>Pipes with string</li>\n              </ul>\n              <br />\n              <b>Ex. </b>DatePipe, UpperCasePipe, LowerCasePipe, CurrencyPipe,\n              and PercentPipe.\n              <br />\n              Let us take a pipe to transform a component's birthday property\n              into a human-friendly date using date pipe.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={pipeFor}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Steps to create custom pipe: </b>\n              <ol>\n                <li>Creates a TypeScript class.</li>\n                <li>Decorate the class with \"@Pipe\" decorator.</li>\n                <li>Implements PipeTransform interface in TypeScript class.</li>\n                <li>Override the transform() method.</li>\n                <li>Configure the class with @NgModule.</li>\n              </ol>\n              <br />\n              <h3>31. What is a parameterized pipe</h3>\n              A parameterized pipe in Angular is a type of pipe that accepts one\n              or more parameters that can be used to modify the output of the\n              pipe. Unlike a regular pipe that has a fixed set of inputs and\n              outputs, a parameterized pipe can be customized based on the\n              values of its input parameters.\n              <br />\n              <br />\n              <b>Ex. </b>Let's take a birthday example with a particular\n              format(dd/MM/yyyy):\n              <div style={titles}>\n                <PrismCode\n                  code={paraPipes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <b>\n                N: The parameter value can be any valid template expression,\n                such as a string literal or a component property.\n              </b>\n              <br />\n              <h3>32. How do you chain pipes</h3>\n              can chain pipes together to create more complex and powerful data\n              transformations. To chain pipes, you simply add additional pipe\n              operators (|) followed by the name of the next pipe.\n              <br />\n              <br />\n              Let's take a birthday property which uses date pipe(along with\n              parameter) and uppercase pipes as below.\n              <div style={titles}>\n                <PrismCode\n                  code={chainPipe}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>33. Pure and Impure Pipes</h3>\n              <table>\n                <tr>\n                  <th>Pure Pipe</th>\n                  <th>Impure Pipe</th>\n                </tr>\n                <tr>\n                  <td>\n                    Pure pipes are called only when Angular detects a change in\n                    the input data.\n                  </td>\n                  <td>\n                    are called on every change detection cycle, even if the\n                    input data has not changed.\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    A pure pipe should always return the same output for the\n                    same input, and it should not have any side effects.\n                  </td>\n                  <td>\n                    Impure pipes can have side effects, and they should be used\n                    with caution, as they can have a performance impact on the\n                    application.\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    Pure pipes are designed to be used with immutable data, such\n                    as strings, numbers, and objects that are not modified after\n                    creation.\n                  </td>\n                  <td>\n                    Impure pipes are designed to be used with mutable data, such\n                    as arrays and objects that can be modified after creation.\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <b>Ex. </b>UpperCasePipe, LowerCasePipe, JsonPipe\n                  </td>\n                  <td>\n                    <b>Ex. </b>AsyncPipe, DatePipe\n                  </td>\n                </tr>\n              </table>\n              <br />\n              <br />\n              <h3>34. What is the purpose of async pipe</h3>\n              async pipe is used to handle asynchronous data and subscriptions\n              in templates. The async pipe subscribes to an Observable or a\n              Promise and returns the latest value emitted by the Observable or\n              resolved by the Promise.\n              <br />\n              <br />\n              Let's take a time observable which continuously updates the view\n              for every 2 seconds with the current time.\n              <div style={titles}>\n                <PrismCode\n                  code={purpose}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>35. Change Detection:</h3>\n              <ul>\n                <li>Means updating the DOM every time the data is changed.</li>\n                <li>\n                  When modifying any of the models, Angular detects the changes\n                  and updates the views immediately. The purpose of this\n                  mechanism is to ensure that the underlying views are always\n                  synchronized with their corresponding models.\n                </li>\n              </ul>\n              <br />\n              <b>Angular provides two strategies for Change Detection:</b>\n              <br />\n              <b>1. default strategy:</b>\n              <br />\n              Every time you put or edit any data, Angular will run the change\n              detector to update the DOM.\n              <br />\n              <br />\n              <b>2. onPush strategy:</b>\n              <ul>\n                <li>\n                  Angular will only run change detector when new reference is\n                  passed to <b>@Input</b> data.\n                </li>\n                <br />\n                <li>\n                  With onPush, the component depends only on its inputs and\n                  covers immutability, the change detection strategy will be\n                  activated when:\n                  <ul>\n                    <li>The input reference changes;</li>\n                    <li>\n                      An event originating from the member or one of his\n                      children;\n                    </li>\n                    <li>\n                      Execute change detection explicitly{\" \"}\n                      <b>(componentRef.markForCheck ());</b>\n                    </li>\n                    <li>Use the async pipe in the view.</li>\n                  </ul>\n                </li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={changeDetector}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <ul>\n                <li>\n                  In the onPush strategy, Angular only performs the change\n                  detector when a new reference to the data of @Input() is\n                  passed.\n                </li>\n              </ul>\n              <ul>\n                <li>\n                  Change Detection Mechanism-moves only forward and never looks\n                  back, starting from the root component to the last. Each\n                  component points to a child, but the child does not point to a\n                  parent. One-way flow eliminates the need for a{\" \"}\n                  <b>$digest loop</b>.\n                </li>\n              </ul>\n              <br />\n              <h3>\n                48. How many Change Detectors can there be in the whole\n                application?\n              </h3>\n              Each component has its own ChangeDetector. All Change Detectors\n              are inherited from AbstractChangeDetector.\n              <br />\n              <br />\n              <h3>36. ViewProvider</h3>\n              <p>\n                view provider is a provider that is defined at the component\n                level and is only available to the component and its descendants\n                in the component tree.\n              </p>\n              view provider used to provide services or values that are specific\n              to a component and its view, without exposing them to the rest of\n              the application.\n              <div style={titles}>\n                <PrismCode\n                  code={viewProviders}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>37. ViewChild</h3>\n              ViewChild is a decorator for Angular component variables, which\n              allow to bind child component data and method.\n              <br />\n              <ul>\n                <li>\n                  There may be situation where we want to access a directive,\n                  child component or a DOM element from a parent component\n                  class. @ViewChild decorator returns the first element that\n                  matches a give directive, component or template.\n                </li>\n              </ul>\n              <b>ViewChild using Component</b>\n              <div style={titles}>\n                <PrismCode\n                  code={viewChilds}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>ViewChild using Directive</b>\n              <div style={titles}>\n                <PrismCode\n                  code={viewChildsDir}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>ViewChild using Template</b>\n              <div style={titles}>\n                <PrismCode\n                  code={viewChildsTemp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              Use @ViewChild with ElementRef or TemplateRef.\n              <br />\n              <h3>Dynamically Load Component</h3>\n              you can dynamically load components at runtime using the\n              ComponentFactoryResolver class. Dynamically loading components can\n              be useful when you need to load a component based on user input or\n              when you need to load a component conditionally based on some\n              runtime criteria.\n              <br />\n              <br />\n              <h3>38. ViewContainerRef</h3>\n              <ul>\n                <li>\n                  ViewContainerRef represents a container where we can attach\n                  one or more views to a component and also show an API to\n                  create components. Some important methods of ViewContainerRef\n                  are:\n                  <ul>\n                    <li>createEmbeddedView()</li>\n                    <li>clear()</li>\n                    <li>get()</li>\n                    <li>insert()</li>\n                    <li>move()</li>\n                    <li>createComponent()</li>\n                  </ul>\n                </li>\n                <br />\n\n                <li>\n                  <b>CreateEmbeddedView()</b> instantiates an embedded view and\n                  inserts it into container.\n                </li>\n                <li>\n                  <b>createComponent()</b> instantiates a single component and\n                  inserts its host view into the container at a specified index.\n                </li>\n              </ul>\n              <br />\n              In dynamic component loader, load component using\n              createComponent() of ViewContainerRef.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={ViewContainerRef}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              clear() method of ViewContainerRef destroys all existing views in\n              the container.\n              <br />\n              <h3>39. What is ng-template in Angular?</h3>\n              <ul>\n                <li>\n                  <b>ng-template:</b> Is an Angular element that is used for\n                  rendering HTML in a template. However, it is not rendered\n                  directly on DOM. If you include an ng-template tag to a\n                  template, the tag and the content inside it will be replaced\n                  by comment upon render.\n                </li>\n                <br />\n                <li>\n                  <b>ng-container: </b>Allows us to create a section in a\n                  template without introducing a new HTML element. The\n                  ng-container does not render in the DOM, but content inside it\n                  is rendered. ng-container is not a directive, component, class\n                  or interface, it just a syntax element.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={template}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>40. What is the purpose of any type cast function</h3>\n              You can disable binding expression type checking using $any() type\n              cast function.\n              <div style={titles}>\n                <PrismCode\n                  code={typeFunc}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>41. What is Non null type assertion operator</h3>\n              You can use the non-null type assertion operator to suppress the\n              Object is possibly 'undefined' error.\n              <br />\n              <br />\n              In the following example, the user and contact properties are\n              always set together, implying that contact is always non-null if\n              user is non-null. The error is suppressed in the example by using\n              contact!.email.\n              <div style={titles}>\n                <PrismCode\n                  code={assertionOpp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>42. What is type narrowing</h3>\n              Dynamic checks and predicates gives us information about values at\n              run-time. type narrowing is the process of reflecting this\n              information in the type-checker at compile time.\n              <div style={titles}>\n                <PrismCode\n                  code={narrowing}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>43. What is the purpose of common module</h3>\n              The commonly-needed services, pipes, and directives provided by\n              @angular/common module.\n              <br />\n              <h3>44. What is angular animation</h3>\n              <ul>\n                <li>\n                  Angular animations are based on CSS web transition\n                  functionality, so anything that can be styled or transformed\n                  in CSS can be animated the same way in Angular.\n                </li>\n                <li>\n                  Angular animations allow you to: Set animation timings,\n                  styles, keyframes, and transitions.\n                </li>\n              </ul>\n              <br />\n              <h3>45. What is Angular DSL (Domain-specific language)</h3>\n              A DSL is a computer language specialized to a particular\n              application domain. Angulard DSL allows us to write Angular\n              specific html-like syntax on top of normal html. It has its own\n              compiler that compiles this syntax to html that the browser can\n              understand. This DSL is defined in NgModules such as animations,\n              forms, routing and navigation.\n              <br />\n              <br />\n              Basically you will see 3 main syntax in Angular DSL.\n              <div style={titles}>\n                <PrismCode\n                  code={dslSyntax}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>46. What is multicasting</h3>\n              Multi-casting is the process of broadcasting to a list of multiple\n              subscribers in a single execution.\n              <div style={titles}>\n                <PrismCode\n                  code={multicasting}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>\n                Angular Module Loading: A module can be loaded eagerly, lazily,\n                preloaded.\n              </h3>\n              <ul>\n                <li>\n                  <b>1. Eager loading:</b> All of the modules and functions are\n                  loaded on application startup. the root module is always\n                  eagerly loaded.\n                </li>\n                <li>\n                  <b>2. Lazy loading:</b> is loading modules on demand.\n                </li>\n                <br />\n                <li>\n                  <b>3. Preloading:</b> is loading modules in background just\n                  after app starts.\n                </li>\n                <li>\n                  To configure Preloading features modules, first we configure\n                  them for lazy loading then, using angular in-built\n                  PreloadAllModules strategy, we enable to load all lazy loading\n                  into Preloading modules.\n                </li>\n                <li>\n                  Using PreloadAllModules strategy, all modules configured by\n                  loadChildren property will be preloaded. The modules\n                  configured by loadChildren property will be either lazily\n                  loaded or preloaded but not both. To preload only selective\n                  modules, we need to use custom preloading strategy.\n                </li>\n                <li>\n                  We can create custom preloading strategy. For this we need to\n                  create a service by implementing Angular PreloadingStrategy\n                  interface and override its preload method and then configure\n                  this service with PreloadingStrategy property in routing\n                  module. To select a module for custom preloading we need to\n                  use dataproperty in route configuration, configured as data\n                  'preload: true' for selective feature module preloading.\n                </li>\n              </ul>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(NgModel);\n"]},"metadata":{},"sourceType":"module"}