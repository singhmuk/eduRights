{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/angularjsd/deepAngularjs/apiLogic3.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst commonArray = `\nvar mockData=[];\nvar mockData2 = [6,7,8,9,23];\nvar commonEle = [];\nfunction myCtrl($scope, $http){\n    $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n    }).then((res) => {\n        person = res.data;\n        person.map(val=>{\n            mockData.push(val.id)\n        })\n\n    var common = mockData.filter(item=>{\n        return mockData2.includes(item)\n    })\n\n    for(var i=0; i<=common.length; i++){\n        commonEle.push(common[i])\n    }\n    console.log(\"commonEle\",commonEle);\n    })\n}`.trim();\nconst commonStr = `var str='';\nvar str2='';\nvar dict = {};\nfunction myCtrl($scope, $http){\n    $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n    }).then(mySuccess = (res) => {\n        person = res.data;\n        person.map(val=>{\n            str=val.name;\n            str2=val.username;\n        })\n        \n        for(var i=0; i < str.length; i++) {\n            dict[str.charAt(i)] = 1;\n          }\n          console.log('str',dict);\n\n          var commonChars =[];\n      for(var i=0; i < str2.length; i++) {\n        if( dict[str2.charAt(i)] == 1) {\n          commonChars.push(str2.charAt(i)); // this is optional we can simply print\n        }\n        console.log('str2',commonChars);  \n\n      }\n      \n      dict = commonChars.join(\"\"); \n      console.log('commonChars',dict);\n    })\n}`.trim();\nconst arrObj = `var arr = [];\nfunction myCtrl($scope, $http){\n    $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n    }).then(mySuccess = (res) => {\n        person = res.data;\n        \n        console.log('arr',person)\n        console.log('obj',...person)\n        \n       })\n}`.trim();\nconst objArr = `var obj = {};\nvar objKey = [];\nfunction myCtrl($scope, $http){\n    $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n    }).then(mySuccess = (res) => {\n        person = res.data;\n        person.map(val=>{\n            obj=val;\n        })\n        console.log('obj',obj)\n\n        //Convert the keys to Array using - Object.keys()\n        objKey = Object.keys(obj)\n        console.log('objKey',objKey)\n\n        //Converts the Values to Array using - Object.values()\n        objVal = Object.values(obj)\n        console.log('objVal',objVal)\n\n        //Converts both keys and values using - Object.entries()\n        objAll = Object.entries(obj)\n        console.log('objAll',objAll)\n       })\n}`.trim();\nconst sumAll = `var arr=[];\nvar sum = 0;\nfunction myCtrl($scope, $http){\n    $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n    }).then(mySuccess = (res) => {\n        person = res.data;\n        person.map(val=>{\n            arr.push(val.id);\n        })\n        \n        var sum = arr.reduce((a, i) => {\n            return a + i;\n          });\n        console.log('sum',sum)\n       })\n}`.trim();\nconst dotVal = `var person=[];\nvar personEmail=[];\nfunction myCtrl($scope, $http){\n    $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n    }).then(mySuccess = (res) => {\n        $scope.person = res.data;\n        $scope.person.map(val=>{\n             personEmail.push(val.email);\n        })\n        console.log('personEmail',personEmail)\n        $scope.personEmail=personEmail\n    })\n}`.trim();\nconst lastMatch = `\nvar mockData=[];\n var apiId = 10;\n var names = [];\nfunction myCtrl($scope, $http){\n    $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n    }).then(mySuccess = (res) => {\n        $scope.person = res.data;\n        $scope.person.map(val=>{\n             mockData.push(val.id);\n             if(val.id == apiId){\n                names.push(val.name)\n                for(let i=0; i<=names.length; i++){\n                    console.log('inside loop',names)\n                }\n             }\n        })\n    })\n}\n`.trim();\nconst functions = `\nvar app = angular.module(\"myApp\", []);\napp.controller(\"myCtrl\", myCtrl);\n\nvar mainId=1;\nvar subParameters=[];\nvar subParametersIds=[];\nvar matchingData=[];\n\nfunction myCtrl ($scope, $http){\n      $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n      }).then(res => {\n        $scope.person = res.data;\n          \n        for(var i = 0; i < $scope.person.length; i++){\n         // console.log('json placeholder data in loop',$scope.person[i].id)\n         if(mainId == $scope.person[i].id){\n             // console.log('only match id',$scope.person[i].id)\n             \n             $scope.person.map(score=>{\n                 if(subParametersIds.indexOf(score.id)==-1){\n                     // console.log('only unique records',score.id)\n                     let newObj={\"id\":score.id, \"name\":score.name,'value':[]}\n                     // console.log('push object',newObj)\n                     $scope.newObj = newObj.value.push(score.address.zipcode)\n                     // console.log('after push object',newObj)\n                     subParametersIds.push(score.id);\n                     $scope.subParameters = subParameters.push(newObj);\n                     \n                     let scores={\"ids\":[\"2\"]}\n                     // console.log('hard coded',scores.ids)\n                     \n                     var index=subParameters.indexOf(score.id)\n                     // console.log('index value',index,\":\",score.id)\n                     // subParameters[index].value = subParameters[index].concat(score.id)\n                     \n                     if((score.id == scores.ids || score.id == mainId)){\n                         console.log('matching hard coded value: ',score.id,\"=\",scores.ids,\":\",mainId);\n                         matchingData=matchingData.concat(score.id);\n                         console.log('matching values: ',matchingData)\n                     }\n                     \n                 }\n                 else{\n                 var index=subParameters.indexOf(score.phone)\n                 subParameters[index].value = subParameters[index].value.concat(score.id)\n                 }\n             })\n         }\n     }\n    })\n    console.log('concate data in the array',subParameters)\n }`.trim();\nconst functionsH = `\n<body>\n    <div ng-controller=\"myCtrl\">\n        <table>\n            <tr>\n              <th>Country</th>\n              <th>Address</th>\n              <th>Geo</th>\n            </tr>\n            <tr ng-repeat=\"persons in person\">\n              <td>{{persons.name}}</td>\n              <td>{{persons.address.street}}</td>\n              <td>{{persons.address.geo.lat}}</td>\n            </tr>\n          </table> \n          <h1>SubParameters</h1>\n          {{subParameters}}\n          <br/>\n          <b>New object</b>\n          {{newObj}}\n    </div>  \n</body>\n`.trim();\nconst empty = `\n//app.js\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', timeCtrl);\n  \n var mockData=[];\n var apiId = 10;\n var names = [];\n function timeCtrl ($scope, $http){\n   $http({\n     method:'get',\n     url:'https://jsonplaceholder.typicode.com/users'\n   }).then(res => {\n    $scope.person = res.data;\n    $scope.person.map(fields => {\n              mockData.push(fields.id);\n              \n              if(fields.id == apiId){\n                  console.log('fields',mockData)\n                  for(let i=0; i<=mockData.length; i++){\n                      console.log('Matched Id',fields.id)\n                  }\n              }\n          })\n       console.log('after map',mockData);\n   })\n}\n\n\n//index.html\n<body ng-controller=\"myCtrl\">\n</body>\n`.trim();\nconst Pick = `\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', timeCtrl);\n  \nvar mockData=[];\nvar apiId = 2;\nvar names = ['Bret'];\nnameObj = []\n function timeCtrl ($scope, $http){\n   $http({\n     method:'get',\n     url:'https://jsonplaceholder.typicode.com/users'\n   }).then(res => {\n    $scope.person = res.data;\n    $scope.person.map(fields => {\n        if(fields.id == apiId){\n            mockData.push(fields);\n            console.log('map function',mockData)\n        }\n    // apiId = mockData.push(fields);\n    if(fields.username == names){\n        for(let i=0; i<=mockData.length; i++){\n            nameObj.push(mockData)\n        }\n    }\n})\nconsole.log('inside for loop',nameObj)\nconsole.log('after map',mockData);\n});\n}`.trim();\nconst sum = `\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', timeCtrl);\n  \nvar tempObj = [];\nvar sum = 0;\nvar avg;\n function timeCtrl ($scope, $http){\n   $http({\n     method:'get',\n     url:'https://jsonplaceholder.typicode.com/users'\n   }).then(res => {\n    $scope.person = res.data;\n            $scope.person.map(fields => {\n                tempObj.push(fields.id) \n        });\n        for(let i =0; i<=tempObj.length;i++){\n            sum +=tempObj[i];\n            avg = sum/tempObj.length\n            console.log('sum',sum)\n            console.log('avg',avg)\n        }\n     });\n   \n//Flattening an array of arrays\n     const nested = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n     let flat = nested.reduce((acc, it) => [...acc, ...it], []);\n     console.log('flat',flat)\n  }`.trim();\nconst object = `\nvar percentage;\n var sum=0;\n function timeCtrl (){\n        var data = \n           [\n            {label:1, quater :'Q1', y:34},\n            {label:2, quater:'Q1', y:20},\n            {label:3, quater:'Q1', y:30},\n     \n            {label:1, quater:'Q2', y:77},\n            {label:2, quater:'Q2', y:52},\n            {label:3, quater:'Q2', y:3},\n     \n            {label:1, quater:'Q3', y:65},\n            {label:2, quater:'Q3', y:12},\n            {label:3, quater:'Q3', y:9},\n     \n            {label:1, quater:'Q4', y:77},\n            {label:2, quater:'Q4', y:34},\n            {label:3, quater:'Q4', y:5}\n           ];\n \n quartersum = {}\n data.map(function(entry) {\n   quartersum[entry.label] = (quartersum[entry.label]||0) + entry.y\n })\n \n data.map(function(entry) {\n   entry.percent = entry.y / quartersum[entry.label] * 100;\n   console.log(JSON.stringify(entry))\n })\n \n console.log('data',quartersum);\n console.log('extract object keys',Object.keys(quartersum));\n console.log('extract object values',Object.values(quartersum));\n \n        for(let [key, value] of Object.entries(quartersum)){\n            console.log('extract object property',key, value);\n        }\n        percentage = parseInt((sum*100/quartersum.length));\n        console.log('percentage',percentage);\n}`.trim();\nconst Array = `\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', timeCtrl);\n  \nvar names = [];\n function timeCtrl ($scope, $http){\n   $http({\n     method:'get',\n     url:'https://jsonplaceholder.typicode.com/users'\n   }).then(res => {\n    $scope.person = res.data;\n    $scope.person.map(data => {\n      names.push(data.id)\n    })\n    let scores = names.find(element => element > 4);\n    let filterScores = names.filter(element => element > 4);\n    let joinArr = filterScores.join(\"*\");\n    let spliceArr = filterScores.splice(0,2)\n    let concatArr = filterScores.concat(scores,joinArr,\"100\");\n    \n    //The slice() method slices out a piece of an array into a new array.\n    let sliceArr = filterScores.slice(0,2);\n    let toStringArr = names.toString()\n    let position = filterScores.indexOf(8)\n    \n    //The includes() method determines whether an array contains a specified element.\n    let includeArr = filterScores.includes(10)\n    console.log('find',includeArr)\n  });\n}\n`.trim();\n\nclass Logic3 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }, \"Common element in arrays\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: commonArray,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }, \"Common element in strings\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: commonStr,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    }, \"convert an Array to Object\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: arrObj,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }, \"Convert an Object into an Array \"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: objArr,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }, \"Sum of all elements of a given array\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: sumAll,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    }, \"Dispay dot value\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: dotVal,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }, \"Last match name\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: lastMatch,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }, \"Apply deep logic\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }, \"functions.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: functions,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    }, \"functions.html\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: functionsH,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }, \"Add data in empty array from api values\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: empty,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }, \"Pick a record from list of records\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Pick,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    }, \"Add sum/avg of number from a list\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: sum,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558\n      },\n      __self: this\n    }, \"Avrage and keys/valuue pair extract from an object\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: object,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567\n      },\n      __self: this\n    }, \"Array methods\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Array,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Logic3);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/angularjsd/deepAngularjs/apiLogic3.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","commonArray","trim","commonStr","arrObj","objArr","sumAll","dotVal","lastMatch","functions","functionsH","empty","Pick","sum","object","Array","Logic3","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst commonArray = `\nvar mockData=[];\nvar mockData2 = [6,7,8,9,23];\nvar commonEle = [];\nfunction myCtrl($scope, $http){\n    $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n    }).then((res) => {\n        person = res.data;\n        person.map(val=>{\n            mockData.push(val.id)\n        })\n\n    var common = mockData.filter(item=>{\n        return mockData2.includes(item)\n    })\n\n    for(var i=0; i<=common.length; i++){\n        commonEle.push(common[i])\n    }\n    console.log(\"commonEle\",commonEle);\n    })\n}`.trim()\n\nconst commonStr = `var str='';\nvar str2='';\nvar dict = {};\nfunction myCtrl($scope, $http){\n    $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n    }).then(mySuccess = (res) => {\n        person = res.data;\n        person.map(val=>{\n            str=val.name;\n            str2=val.username;\n        })\n        \n        for(var i=0; i < str.length; i++) {\n            dict[str.charAt(i)] = 1;\n          }\n          console.log('str',dict);\n\n          var commonChars =[];\n      for(var i=0; i < str2.length; i++) {\n        if( dict[str2.charAt(i)] == 1) {\n          commonChars.push(str2.charAt(i)); // this is optional we can simply print\n        }\n        console.log('str2',commonChars);  \n\n      }\n      \n      dict = commonChars.join(\"\"); \n      console.log('commonChars',dict);\n    })\n}`.trim()\n\nconst arrObj = `var arr = [];\nfunction myCtrl($scope, $http){\n    $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n    }).then(mySuccess = (res) => {\n        person = res.data;\n        \n        console.log('arr',person)\n        console.log('obj',...person)\n        \n       })\n}`.trim()\n\nconst objArr = `var obj = {};\nvar objKey = [];\nfunction myCtrl($scope, $http){\n    $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n    }).then(mySuccess = (res) => {\n        person = res.data;\n        person.map(val=>{\n            obj=val;\n        })\n        console.log('obj',obj)\n\n        //Convert the keys to Array using - Object.keys()\n        objKey = Object.keys(obj)\n        console.log('objKey',objKey)\n\n        //Converts the Values to Array using - Object.values()\n        objVal = Object.values(obj)\n        console.log('objVal',objVal)\n\n        //Converts both keys and values using - Object.entries()\n        objAll = Object.entries(obj)\n        console.log('objAll',objAll)\n       })\n}`.trim()\n\nconst sumAll = `var arr=[];\nvar sum = 0;\nfunction myCtrl($scope, $http){\n    $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n    }).then(mySuccess = (res) => {\n        person = res.data;\n        person.map(val=>{\n            arr.push(val.id);\n        })\n        \n        var sum = arr.reduce((a, i) => {\n            return a + i;\n          });\n        console.log('sum',sum)\n       })\n}`.trim()\n\nconst dotVal = `var person=[];\nvar personEmail=[];\nfunction myCtrl($scope, $http){\n    $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n    }).then(mySuccess = (res) => {\n        $scope.person = res.data;\n        $scope.person.map(val=>{\n             personEmail.push(val.email);\n        })\n        console.log('personEmail',personEmail)\n        $scope.personEmail=personEmail\n    })\n}`.trim()\n\nconst lastMatch = `\nvar mockData=[];\n var apiId = 10;\n var names = [];\nfunction myCtrl($scope, $http){\n    $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n    }).then(mySuccess = (res) => {\n        $scope.person = res.data;\n        $scope.person.map(val=>{\n             mockData.push(val.id);\n             if(val.id == apiId){\n                names.push(val.name)\n                for(let i=0; i<=names.length; i++){\n                    console.log('inside loop',names)\n                }\n             }\n        })\n    })\n}\n`.trim()\n\nconst functions = `\nvar app = angular.module(\"myApp\", []);\napp.controller(\"myCtrl\", myCtrl);\n\nvar mainId=1;\nvar subParameters=[];\nvar subParametersIds=[];\nvar matchingData=[];\n\nfunction myCtrl ($scope, $http){\n      $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n      }).then(res => {\n        $scope.person = res.data;\n          \n        for(var i = 0; i < $scope.person.length; i++){\n         // console.log('json placeholder data in loop',$scope.person[i].id)\n         if(mainId == $scope.person[i].id){\n             // console.log('only match id',$scope.person[i].id)\n             \n             $scope.person.map(score=>{\n                 if(subParametersIds.indexOf(score.id)==-1){\n                     // console.log('only unique records',score.id)\n                     let newObj={\"id\":score.id, \"name\":score.name,'value':[]}\n                     // console.log('push object',newObj)\n                     $scope.newObj = newObj.value.push(score.address.zipcode)\n                     // console.log('after push object',newObj)\n                     subParametersIds.push(score.id);\n                     $scope.subParameters = subParameters.push(newObj);\n                     \n                     let scores={\"ids\":[\"2\"]}\n                     // console.log('hard coded',scores.ids)\n                     \n                     var index=subParameters.indexOf(score.id)\n                     // console.log('index value',index,\":\",score.id)\n                     // subParameters[index].value = subParameters[index].concat(score.id)\n                     \n                     if((score.id == scores.ids || score.id == mainId)){\n                         console.log('matching hard coded value: ',score.id,\"=\",scores.ids,\":\",mainId);\n                         matchingData=matchingData.concat(score.id);\n                         console.log('matching values: ',matchingData)\n                     }\n                     \n                 }\n                 else{\n                 var index=subParameters.indexOf(score.phone)\n                 subParameters[index].value = subParameters[index].value.concat(score.id)\n                 }\n             })\n         }\n     }\n    })\n    console.log('concate data in the array',subParameters)\n }`.trim()\n\nconst functionsH = `\n<body>\n    <div ng-controller=\"myCtrl\">\n        <table>\n            <tr>\n              <th>Country</th>\n              <th>Address</th>\n              <th>Geo</th>\n            </tr>\n            <tr ng-repeat=\"persons in person\">\n              <td>{{persons.name}}</td>\n              <td>{{persons.address.street}}</td>\n              <td>{{persons.address.geo.lat}}</td>\n            </tr>\n          </table> \n          <h1>SubParameters</h1>\n          {{subParameters}}\n          <br/>\n          <b>New object</b>\n          {{newObj}}\n    </div>  \n</body>\n`.trim()\n\nconst empty = `\n//app.js\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', timeCtrl);\n  \n var mockData=[];\n var apiId = 10;\n var names = [];\n function timeCtrl ($scope, $http){\n   $http({\n     method:'get',\n     url:'https://jsonplaceholder.typicode.com/users'\n   }).then(res => {\n    $scope.person = res.data;\n    $scope.person.map(fields => {\n              mockData.push(fields.id);\n              \n              if(fields.id == apiId){\n                  console.log('fields',mockData)\n                  for(let i=0; i<=mockData.length; i++){\n                      console.log('Matched Id',fields.id)\n                  }\n              }\n          })\n       console.log('after map',mockData);\n   })\n}\n\n\n//index.html\n<body ng-controller=\"myCtrl\">\n</body>\n`.trim();\n\nconst Pick = `\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', timeCtrl);\n  \nvar mockData=[];\nvar apiId = 2;\nvar names = ['Bret'];\nnameObj = []\n function timeCtrl ($scope, $http){\n   $http({\n     method:'get',\n     url:'https://jsonplaceholder.typicode.com/users'\n   }).then(res => {\n    $scope.person = res.data;\n    $scope.person.map(fields => {\n        if(fields.id == apiId){\n            mockData.push(fields);\n            console.log('map function',mockData)\n        }\n    // apiId = mockData.push(fields);\n    if(fields.username == names){\n        for(let i=0; i<=mockData.length; i++){\n            nameObj.push(mockData)\n        }\n    }\n})\nconsole.log('inside for loop',nameObj)\nconsole.log('after map',mockData);\n});\n}`.trim();\n\nconst sum = `\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', timeCtrl);\n  \nvar tempObj = [];\nvar sum = 0;\nvar avg;\n function timeCtrl ($scope, $http){\n   $http({\n     method:'get',\n     url:'https://jsonplaceholder.typicode.com/users'\n   }).then(res => {\n    $scope.person = res.data;\n            $scope.person.map(fields => {\n                tempObj.push(fields.id) \n        });\n        for(let i =0; i<=tempObj.length;i++){\n            sum +=tempObj[i];\n            avg = sum/tempObj.length\n            console.log('sum',sum)\n            console.log('avg',avg)\n        }\n     });\n   \n//Flattening an array of arrays\n     const nested = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n     let flat = nested.reduce((acc, it) => [...acc, ...it], []);\n     console.log('flat',flat)\n  }`.trim();\n\nconst object = `\nvar percentage;\n var sum=0;\n function timeCtrl (){\n        var data = \n           [\n            {label:1, quater :'Q1', y:34},\n            {label:2, quater:'Q1', y:20},\n            {label:3, quater:'Q1', y:30},\n     \n            {label:1, quater:'Q2', y:77},\n            {label:2, quater:'Q2', y:52},\n            {label:3, quater:'Q2', y:3},\n     \n            {label:1, quater:'Q3', y:65},\n            {label:2, quater:'Q3', y:12},\n            {label:3, quater:'Q3', y:9},\n     \n            {label:1, quater:'Q4', y:77},\n            {label:2, quater:'Q4', y:34},\n            {label:3, quater:'Q4', y:5}\n           ];\n \n quartersum = {}\n data.map(function(entry) {\n   quartersum[entry.label] = (quartersum[entry.label]||0) + entry.y\n })\n \n data.map(function(entry) {\n   entry.percent = entry.y / quartersum[entry.label] * 100;\n   console.log(JSON.stringify(entry))\n })\n \n console.log('data',quartersum);\n console.log('extract object keys',Object.keys(quartersum));\n console.log('extract object values',Object.values(quartersum));\n \n        for(let [key, value] of Object.entries(quartersum)){\n            console.log('extract object property',key, value);\n        }\n        percentage = parseInt((sum*100/quartersum.length));\n        console.log('percentage',percentage);\n}`.trim();\n\nconst Array = `\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', timeCtrl);\n  \nvar names = [];\n function timeCtrl ($scope, $http){\n   $http({\n     method:'get',\n     url:'https://jsonplaceholder.typicode.com/users'\n   }).then(res => {\n    $scope.person = res.data;\n    $scope.person.map(data => {\n      names.push(data.id)\n    })\n    let scores = names.find(element => element > 4);\n    let filterScores = names.filter(element => element > 4);\n    let joinArr = filterScores.join(\"*\");\n    let spliceArr = filterScores.splice(0,2)\n    let concatArr = filterScores.concat(scores,joinArr,\"100\");\n    \n    //The slice() method slices out a piece of an array into a new array.\n    let sliceArr = filterScores.slice(0,2);\n    let toStringArr = names.toString()\n    let position = filterScores.indexOf(8)\n    \n    //The includes() method determines whether an array contains a specified element.\n    let includeArr = filterScores.includes(10)\n    console.log('find',includeArr)\n  });\n}\n`.trim();\n\n\nclass Logic3 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Common element in arrays</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={commonArray}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Common element in strings</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={commonStr}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>convert an Array to Object</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={arrObj}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Convert an Object into an Array </h3>\n              <div style={titles}>\n                <PrismCode\n                  code={objArr}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Sum of all elements of a given array</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={sumAll}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Dispay dot value</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={dotVal}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Last match name</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={lastMatch}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Apply deep logic</h3>\n              <b>functions.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={functions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>functions.html</b>\n              <div style={titles}>\n                <PrismCode\n                  code={functionsH}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Add data in empty array from api values</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={empty}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <h3>Pick a record from list of records</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Pick}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <h3>Add sum/avg of number from a list</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={sum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <h3>Avrage and keys/valuue pair extract from an object</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={object}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Array methods</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Array}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Logic3));\n"]},"metadata":{},"sourceType":"module"}