{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/javaScripts/deepJs/keyedCollections.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst code = ``.trim();\nconst WeakMaps = `\nconst privates = new WeakMap();\n\nfunction Public() {\n  const me = {\n    // Private data goes here\n  };\n  privates.set(this, me);\n}\n\nPublic.prototype.method = function () {\n  const me = privates.get(this);\n  // Do stuff with private data in me...\n};\n\nmodule.exports = Public;`.trim();\nconst sets = `\nlet mySet = new Set();\nmySet.add(1);\nmySet.add('some text');\nmySet.add('foo');\n\nmySet.has(1);                                                                               // true\nmySet.delete('foo');\nmySet.size;                                                                                 // 2\n\nfor (let item of mySet) \nconsole.log(item);`.trim();\nconst setsAdv = `\nSet.prototype.subSet = function(otherSet) { \n  if(this.size > otherSet.size) \n      return false; \n  else { \n      for(var elem of this) { \n          if(!otherSet.has(elem)) \n              return false; \n      } \n      return true; \n  } \n} \n\nvar setA = new Set([10, 20, 30]); \nvar setB = new Set([50, 60, 10, 20, 30, 40]); \nvar setC = new Set([10, 30, 40, 50]); \n\nconsole.log(setA.subSet(setB)); \nconsole.log(setA.subSet(setC)); \nconsole.log(setC.subSet(setB));`.trim();\nconst converting = `\nArray.from(mySet);\n[...mySet2];\n\nmySet2 = new Set([1, 2, 3, 4]);`.trim();\nconst attToSets = `\nlet myArray = [11,22,34,65,34,65,34];\nlet mySet = new Set(myArray);\n  mySet.add('100');\n  mySet.add({a: 1, b: 2});\n  mySet.delete(22);\n\nmySet.forEach(function(val){\n  console.log(val);\n});`.trim();\nconst SetsToArr = `\nlet myArray = ['value1', 'value2', 'value3']\n\nlet mySet = new Set(myArray)\nmySet.has('value1')     \n\nconsole.log([...mySet]) `.trim();\nconst weakMap = `\nconst requests2 = new WeakSet();\nclass Request2 {\n    constructor() {\n        requests.set(this, {\n            created: new Date()\n        });\n    }\n    \n    makeRequest() {\n        if (requestIsTooOld(this)) {\n            throw new Error(\"Try again?\");\n        }    // Do work...  \n    }\n}`.trim();\nconst Stack = `\n  function postFixEvaluation(exp) {\n  var stack = new Stack();\n    for (var i = 0; i < exp.length; i++) {\n      var c = exp[i];\n      if (!isNaN(c))\n        stack.push(c - '0');\n        else {\n          var val1 = stack.pop();\n          var val2 = stack.pop();\n      if (val1 == \"Underflow\" || val2 == \"Underflow\")\n        return \"Can't perform postfix evaluation\";\n        \n    switch (c) {\n        case '+':\n          stack.push(val2 + val1);\n        break;\n        case '-':\n          stack.push(val2 - val1);\n        break;\n        case '/':\n          stack.push(val2 / val1);\n        break;\n        case '*':\n          stack.push(val2 * val1);\n        break;\n      }\n    }\n  }\n  return stack.pop();\n}\n\nconsole.log(postFixEvaluation(\"235*+8-\"));\n\nconsole.log(postFixEvaluation(\"23*+\"));                       // returns postfix evaluation can't be performed.\n`.trim();\nconst arrayToClone = `\narrayToClone = [1, 2, 3, 4, 5];\n clone1 = Array.from(arrayToClone); \n clone2 = Array.of(...arrayToClone); \n clone3 = [...arrayToClone] \n  \n   console.log(arrayToClone)\n\n\n  var array1 = [1, 2]; \n  var array2 = [3, 4, 5]; \n  var array3 = [...array1, ...array2]                                             // Concatenating Arrays.\n\n  console.log(array3)\n\n  \n//Multiple Arrays\n   var array1 = [\"a\", \"b\"],\n       array2 = [\"c\", \"d\"],    \n       array3 = [\"e\", \"f\"],    \n       array4 = [\"g\", \"h\"];\n\n       var arrConc = [...array1, ...array2, ...array3, ...array4]\n\n        console.log(arrConc)\n\n\n//Without Copying the First Array\n\tvar longArray = [1, 2, 3, 4, 5, 6, 7, 8],    \n\t\tshortArray = [9, 10]; \n\n\t\tlongArray.push(...shortArray)\n\t\tconsole.log(longArray)\n\nshortArray.forEach(function (elem) {\n    longArray.push(elem); \n});\n\n\nvar columns = [\"Date\", \"Number\", \"Size\", \"Location\", \"Age\"]; \nvar rows = [\"2001\", \"5\", \"Big\", \"Sydney\", \"25\"]; \nvar result =  rows.reduce(function(result, field, index) {\n  result[columns[index]] = field;\n    return result; \n}, {})\nconsole.log(result);\n\nvar a=[1, 2, 3, 4, 5].filter(value => value > 2);\nconsole.log(a)\n\n\n//filter\nfunction startsWithLetterA(str) { \n   if(str && str[0].toLowerCase() == 'a') {\n           return true   \n            }  \n              return false;\n               }\nvar str = 'Since Boolean is a native javascript afunction/constructor that takes';\nvar strArray = str.split(\" \");\nvar wordsStartsWithA = strArray.filter(startsWithLetterA); \n\nconsole.log(wordsStartsWithA)\n`.trim();\nconst circular = `\nclass CircularBuffer {\n  constructor(size) {\n    this.memory = new Array(size);\n    this.head = 0;\n    this.tail = 0;\n    this.isFull = false;\n  }\n  \n  read() {\n    if (this.tail === this.head && !this.isFull) {\n      console.log('Nothing to read.');\n    } else {\n      this.tail = this.next(this.tail);\n      this.isFull = false;\n      return this.memory[this.tail];\n    }\n  }\n  \n  write(value) {\n    if (this.isFull) {\n      console.error('Buffer full');\n      return;\n    } else {\n      this.head = this.next(this.head);\n      this.memory[this.head] = value;\n      if (this.head === this.tail) {\n        this.isFull = true;\n      }\n    }\n  }\n  \n  next(n) {\n    var nxt = n + 1;\n    if (nxt === this.memory.length) {\n      return 0;\n    } else {\n      return nxt;\n    }\n  }\n}\n\nvar buffer = new CircularBuffer(10);\n\ndocument.addEventListener('keydown', event => {\n  buffer.write(event.key);\n});\n\nvar readKeys = () => {\n  console.log(buffer.read());\n  setTimeout(readKeys, 500);\n}\n\nreadKeys();\n`.trim();\nconst changing = `\nfunction reverse(head) {\n  let node = head,\n      previous,\n      tmp;\n\n  while (node) {\n    tmp = node.next;                                            // save next before we overwrite node.next!\n    node.next = previous;                                       // reverse pointer\n    previous = node;                                            // step forward in the list.\n    node = tmp;\n  }\n\n  return previous;\n}`.trim();\n\nclass KeyedCollections extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, \"1.Object and Map compared\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, \"Objects have been used to map strings to values. Objects allow you to set keys to values, retrieve those values, delete keys, and detect whether something is stored at a key. Map objects, however, have a few more advantages that make them better maps.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, \"The keys of an Object are Strings or Symbols, where they can be of any value for a Map.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, \"You can get the size of a Map easily, while you have to manually keep track of size for an Object.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, \"whether to use a Map or an Object:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, \"Use maps over objects when keys are unknown until run time, and when all keys are the same type and all values are the same type.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, \"Use maps if there is a need to store primitive values as keys because object treats each key as a string whether it's a number value, boolean value or any other primitive value.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, \"Use objects when there is logic that operates on individual elements.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, \"2.WeakMap object\"), \"The WeakMap object is a collection of key/value pairs in which the keys are objects only and the values can be arbitrary values. The object references in the keys are held weakly, means they are a target of garbage collection (GC) if there is no other reference to the object anymore. The WeakMap API is the same as the Map API.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, \"One difference to Map objects is that WeakMap keys are not enumerable (i.e., there is no method giving you a list of the keys).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, \"One use case of WeakMap objects is to store private data for an object, or to hide implementation details. \")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: WeakMaps,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, \"3.Sets\"), \"Set objects are collections of values. You can iterate its elements in insertion order. A value in a Set may only occur once, it is unique in the Set's collection.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }, \"Sets Methods:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, \"add(1)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, \"has(1)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, \"delete(5)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }, \"size\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: sets,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: setsAdv,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, \"4.Converting between Array and Set\"), \"You can create an Array from a Set using Array.from or the spread operator. Also, the Set constructor accepts an Array to convert in the other direction.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: converting,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, \"1. Array To Set\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: attToSets,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }, \"2. Set To Array\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: SetsToArr,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }, \"5.WeakMap\"), \"Ability to have weak references used in the form of a WeakSet and WeakMap.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: weakMap,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }, \"6.Array and Set compared\"), \"Traditionally, a set of elements has been stored in arrays in JavaScript in a lot of situations.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }), \"The new Set object, however, has some advantages:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    }, \"Deleting Array elements by value (arr.splice(arr.indexOf(val), 1)) is very slow.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }, \"Set objects let you delete elements by their value. With an array, you would have to splice based on an element's index.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }, \"The value NaN cannot be found with indexOf in an array.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }, \"WeakSet object\"), \"WeakSet objects are collections of objects. An object in the WeakSet may only occur once. It is unique in the WeakSet's collection, and objects are not enumerable.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }, \"Sets, WeakSets are collections of objects only, and not of arbitrary values of any type.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    }, \"The WeakSet is weak: References to objects in the collection are held weakly. If there is no other reference to an object stored in the WeakSet, they can be garbage collected.\")), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }, \"Stack\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Stack,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }, \"Shallow cloning an array\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }), \"Sometimes, you need to work with an array while ensuring you don't modify the original. Instead of a clone method, arrays have a slice method that lets you perform a shallow copy of any part of an array. This only clones the \\uFB01rst level. This works well with primitive types, like numbers and strings, but not objects.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    }, \"If the second array is too long (more than 100,000), we get a stack over\\uFB02ow error (because of how apply works). To be safe, we can iterate instead.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }, \"When we have two separate array and we want to make key value pair from that two array, we can use array's reduce function like below.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: arrayToClone,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    }, \"7.Implement a circular buffer using an array.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: circular,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }, \"8.How do you reverse a linked list?.\"), \"We iterate through the list once, changing the next pointer of each node to the previous node. The order of operations is important: we copy node.next into tmp before setting node.next to previous. Otherwise when we \\u201Cstep forward\\u201D at the end of the list we\\u2019d actually step back to the previous node.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496\n      },\n      __self: this\n    }, \"O(n) time & O(1) space\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: changing,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(KeyedCollections);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/javaScripts/deepJs/keyedCollections.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","code","trim","WeakMaps","sets","setsAdv","converting","attToSets","SetsToArr","weakMap","Stack","arrayToClone","circular","changing","KeyedCollections","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst code = ``.trim();\n\nconst WeakMaps = `\nconst privates = new WeakMap();\n\nfunction Public() {\n  const me = {\n    // Private data goes here\n  };\n  privates.set(this, me);\n}\n\nPublic.prototype.method = function () {\n  const me = privates.get(this);\n  // Do stuff with private data in me...\n};\n\nmodule.exports = Public;`.trim();\n\nconst sets = `\nlet mySet = new Set();\nmySet.add(1);\nmySet.add('some text');\nmySet.add('foo');\n\nmySet.has(1);                                                                               // true\nmySet.delete('foo');\nmySet.size;                                                                                 // 2\n\nfor (let item of mySet) \nconsole.log(item);`.trim();\n\nconst setsAdv = `\nSet.prototype.subSet = function(otherSet) { \n  if(this.size > otherSet.size) \n      return false; \n  else { \n      for(var elem of this) { \n          if(!otherSet.has(elem)) \n              return false; \n      } \n      return true; \n  } \n} \n\nvar setA = new Set([10, 20, 30]); \nvar setB = new Set([50, 60, 10, 20, 30, 40]); \nvar setC = new Set([10, 30, 40, 50]); \n\nconsole.log(setA.subSet(setB)); \nconsole.log(setA.subSet(setC)); \nconsole.log(setC.subSet(setB));`.trim();\n\nconst converting = `\nArray.from(mySet);\n[...mySet2];\n\nmySet2 = new Set([1, 2, 3, 4]);`.trim();\n\nconst attToSets = `\nlet myArray = [11,22,34,65,34,65,34];\nlet mySet = new Set(myArray);\n  mySet.add('100');\n  mySet.add({a: 1, b: 2});\n  mySet.delete(22);\n\nmySet.forEach(function(val){\n  console.log(val);\n});`.trim();\n\nconst SetsToArr = `\nlet myArray = ['value1', 'value2', 'value3']\n\nlet mySet = new Set(myArray)\nmySet.has('value1')     \n\nconsole.log([...mySet]) `.trim();\n\nconst weakMap = `\nconst requests2 = new WeakSet();\nclass Request2 {\n    constructor() {\n        requests.set(this, {\n            created: new Date()\n        });\n    }\n    \n    makeRequest() {\n        if (requestIsTooOld(this)) {\n            throw new Error(\"Try again?\");\n        }    // Do work...  \n    }\n}`.trim();\n\nconst Stack = `\n  function postFixEvaluation(exp) {\n  var stack = new Stack();\n    for (var i = 0; i < exp.length; i++) {\n      var c = exp[i];\n      if (!isNaN(c))\n        stack.push(c - '0');\n        else {\n          var val1 = stack.pop();\n          var val2 = stack.pop();\n      if (val1 == \"Underflow\" || val2 == \"Underflow\")\n        return \"Can't perform postfix evaluation\";\n        \n    switch (c) {\n        case '+':\n          stack.push(val2 + val1);\n        break;\n        case '-':\n          stack.push(val2 - val1);\n        break;\n        case '/':\n          stack.push(val2 / val1);\n        break;\n        case '*':\n          stack.push(val2 * val1);\n        break;\n      }\n    }\n  }\n  return stack.pop();\n}\n\nconsole.log(postFixEvaluation(\"235*+8-\"));\n\nconsole.log(postFixEvaluation(\"23*+\"));                       // returns postfix evaluation can't be performed.\n`.trim();\n\nconst arrayToClone = `\narrayToClone = [1, 2, 3, 4, 5];\n clone1 = Array.from(arrayToClone); \n clone2 = Array.of(...arrayToClone); \n clone3 = [...arrayToClone] \n  \n   console.log(arrayToClone)\n\n\n  var array1 = [1, 2]; \n  var array2 = [3, 4, 5]; \n  var array3 = [...array1, ...array2]                                             // Concatenating Arrays.\n\n  console.log(array3)\n\n  \n//Multiple Arrays\n   var array1 = [\"a\", \"b\"],\n       array2 = [\"c\", \"d\"],    \n       array3 = [\"e\", \"f\"],    \n       array4 = [\"g\", \"h\"];\n\n       var arrConc = [...array1, ...array2, ...array3, ...array4]\n\n        console.log(arrConc)\n\n\n//Without Copying the First Array\n\tvar longArray = [1, 2, 3, 4, 5, 6, 7, 8],    \n\t\tshortArray = [9, 10]; \n\n\t\tlongArray.push(...shortArray)\n\t\tconsole.log(longArray)\n\nshortArray.forEach(function (elem) {\n    longArray.push(elem); \n});\n\n\nvar columns = [\"Date\", \"Number\", \"Size\", \"Location\", \"Age\"]; \nvar rows = [\"2001\", \"5\", \"Big\", \"Sydney\", \"25\"]; \nvar result =  rows.reduce(function(result, field, index) {\n  result[columns[index]] = field;\n    return result; \n}, {})\nconsole.log(result);\n\nvar a=[1, 2, 3, 4, 5].filter(value => value > 2);\nconsole.log(a)\n\n\n//filter\nfunction startsWithLetterA(str) { \n   if(str && str[0].toLowerCase() == 'a') {\n           return true   \n            }  \n              return false;\n               }\nvar str = 'Since Boolean is a native javascript afunction/constructor that takes';\nvar strArray = str.split(\" \");\nvar wordsStartsWithA = strArray.filter(startsWithLetterA); \n\nconsole.log(wordsStartsWithA)\n`.trim();\n\nconst circular = `\nclass CircularBuffer {\n  constructor(size) {\n    this.memory = new Array(size);\n    this.head = 0;\n    this.tail = 0;\n    this.isFull = false;\n  }\n  \n  read() {\n    if (this.tail === this.head && !this.isFull) {\n      console.log('Nothing to read.');\n    } else {\n      this.tail = this.next(this.tail);\n      this.isFull = false;\n      return this.memory[this.tail];\n    }\n  }\n  \n  write(value) {\n    if (this.isFull) {\n      console.error('Buffer full');\n      return;\n    } else {\n      this.head = this.next(this.head);\n      this.memory[this.head] = value;\n      if (this.head === this.tail) {\n        this.isFull = true;\n      }\n    }\n  }\n  \n  next(n) {\n    var nxt = n + 1;\n    if (nxt === this.memory.length) {\n      return 0;\n    } else {\n      return nxt;\n    }\n  }\n}\n\nvar buffer = new CircularBuffer(10);\n\ndocument.addEventListener('keydown', event => {\n  buffer.write(event.key);\n});\n\nvar readKeys = () => {\n  console.log(buffer.read());\n  setTimeout(readKeys, 500);\n}\n\nreadKeys();\n`.trim();\n\nconst changing = `\nfunction reverse(head) {\n  let node = head,\n      previous,\n      tmp;\n\n  while (node) {\n    tmp = node.next;                                            // save next before we overwrite node.next!\n    node.next = previous;                                       // reverse pointer\n    previous = node;                                            // step forward in the list.\n    node = tmp;\n  }\n\n  return previous;\n}`.trim();\n\nclass KeyedCollections extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1.Object and Map compared</h3>\n              <ul>\n                <li>Objects have been used to map strings to values. Objects allow you to set keys to values, retrieve those values,\n                  delete keys, and detect whether something is stored at a key. Map objects, however, have a few more advantages\n                  that make them better maps.</li>\n                <br />\n                <li>The keys of an Object are Strings or Symbols, where they can be of any value for a Map.</li>\n                <br />\n                <li>You can get the size of a Map easily, while you have to manually keep track of size for an Object.</li>\n              </ul>\n              <br />\n              <br />\n\n              <b>whether to use a Map or an Object:</b>\n              <br />\n              <ul>\n                <li>Use maps over objects when keys are unknown until run time, and when all keys are the same\n                  type and all values are the same type.</li>\n                <li>Use maps if there is a need to store primitive values as keys because object treats each\n                  key as a string whether it's a number value, boolean value or any other primitive value.</li>\n                <li>Use objects when there is logic that operates on individual elements.</li>\n              </ul>\n\n              <br />\n              <h3>2.WeakMap object</h3>\n              The WeakMap object is a collection of key/value pairs in which the keys are objects only and the\n              values can be arbitrary values. The object references in the keys are held weakly, means\n              they are a target of garbage collection (GC) if there is no other reference to the object anymore.\n              The WeakMap API is the same as the Map API.\n              <br />\n              <br />\n              <ul>\n                <li>One difference to Map objects is that WeakMap keys are not enumerable (i.e., there is no method giving you a list\n                  of the keys).</li>\n                <li>One use case of WeakMap objects is to store private data for an object, or to hide implementation details. </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={WeakMaps}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3.Sets</h3>\n              Set objects are collections of values. You can iterate its elements in insertion order. A value in a Set may only\n              occur once, it is unique in the Set's collection.\n              <br />\n              <br />\n              <b>Sets Methods:</b>\n              <ul>\n                <li>add(1)</li>\n                <li>has(1)</li>\n                <li>delete(5)</li>\n                <li>size</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={sets}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={setsAdv}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4.Converting between Array and Set</h3>\n              You can create an Array from a Set using Array.from or the spread operator. Also, the Set constructor accepts an\n              Array to convert in the other direction.\n\n              <div style={titles}>\n                <PrismCode\n                  code={converting}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>1. Array To Set</b>\n              <div style={titles}>\n                <PrismCode\n                  code={attToSets}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>2. Set To Array</b>\n              <div style={titles}>\n                <PrismCode\n                  code={SetsToArr}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5.WeakMap</h3>\n              Ability to have weak references used in the form of a WeakSet and WeakMap.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={weakMap}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6.Array and Set compared</h3>\n              Traditionally, a set of elements has been stored in arrays in JavaScript in a lot of situations.\n              <br />\n              The new Set object, however, has some advantages:\n              <br />\n              <br />\n              <ul>\n                <li>Deleting Array elements by value (arr.splice(arr.indexOf(val), 1)) is very slow.</li>\n                <li>Set objects let you delete elements by their value. With an array, you would have to splice\n                  based on an element's index.</li>\n                <li>The value NaN cannot be found with indexOf in an array.</li>\n              </ul>\n              <br />\n              <h3>WeakSet object</h3>\n              WeakSet objects are collections of objects. An object in the WeakSet may only occur once. It is unique in the\n              WeakSet's collection, and objects are not enumerable.\n              <ul>\n                <li>Sets, WeakSets are collections of objects only, and not of arbitrary values of any type.</li>\n                <li>The WeakSet is weak: References to objects in the collection are held weakly. If there is no\n                  other reference to an object stored in the WeakSet, they can be garbage collected.</li>\n              </ul>\n\n              <b>Stack</b>\n              <div style={titles}>\n                <PrismCode\n                  code={Stack}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Shallow cloning an array</b>\n              <br />\n              Sometimes, you need to work with an array while ensuring you don't modify the original. Instead of a clone method,\n              arrays have a slice method that lets you perform a shallow copy of any part of an array. This only\n              clones the ﬁrst level. This works well with primitive types, like numbers and strings, but not objects.\n              <br />\n              <br />\n              <ul>\n                <li>If the second array is too long (more than 100,000), we get a stack overﬂow error (because of how apply\n                  works). To be safe, we can iterate instead.</li>\n                <li>When we have two separate array and we want to make key value pair from that two array, we can use array's reduce\n                  function like below.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={arrayToClone}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7.Implement a circular buffer using an array.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={circular}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>8.How do you reverse a linked list?.</h3>\n              We iterate through the list once, changing the next pointer of each node to the previous node. The order of operations is important: we copy node.next into tmp before setting node.next to previous. Otherwise when we “step forward” at the end of the list we’d actually step back to the previous node.\n              <br />\n              <br />\n              <b>O(n) time & O(1) space</b>\n              <div style={titles}>\n                <PrismCode\n                  code={changing}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(KeyedCollections));\n"]},"metadata":{},"sourceType":"module"}