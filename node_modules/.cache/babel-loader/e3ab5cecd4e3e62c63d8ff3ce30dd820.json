{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var loader=\"\\n@Component({\\n  selector: 'app-root',\\n  template: '\\n  <button(click)=\\\"getResult()\\\"> Get result</button>\\n    <div>\\n      <h2>Results</h2>\\n      <progress *ngIf=\\\"isLoading\\\">Loading...</progress>\\n      <p *ngIf=\\\"results\\\"> {{results | json}}</p >\\n      <p *ngIf=\\\"error\\\"> Error: {{error | json}}</p >\\n    </div >\\n  '})\\n\\nexport class AppComponent  {\\n  results: any;\\n  error: any;\\n  isLoading: boolean;\\n\\n  constructor(private http: HttpClient) {\\n  }\\n\\n  getResult() {\\n    this.error = null;\\n    this.results = '';\\n    this.isLoading = true;\\n    this.http.get('https://jsonplaceholder.typicode.com/users',)\\n      .subscribe(\\n        (res) => {\\n          this.isLoading = false\\n          this.results = res;\\n        },\\n        (err) => {\\n          this.error = err;\\n        },\\n      )\\n  }\\n}\\n\".trim();var dynamically=\"\\nimport { FormGroup, FormBuilder, Validators, FormArray } from '@angular/forms'\\n\\n@Component({\\n  selector: 'app-root',\\n  template: '\\n  < div[formGroup]=\\\"addForm\\\" >\\n    <input type=\\\"checkbox\\\" formControlName=\\\"items\\\">\\n        {{addForm.value.items_value}}\\n\\t\\t\\n\\t\\t\\t\\t<button (click)=\\\"onAddRow()\\\" *ngIf=\\\"addForm.get('rows')\\\">add row</button>\\n\\t\\t\\t\\t<div * ngFor=\\\"let row of addForm.get('rows')?.controls;let index = index;\\\" >\\n  <button (click) = \\\"onRemoveRow(index)\\\" > Remove</button >\\n\\t\\t\\t\\t</div >\\n\\t</div >\\n\\n  <pre>{{ rows.value | json }}</pre>\\n  '})\\nexport class AppComponent {\\n addForm: FormGroup;\\n  rows: FormArray;\\n\\n  constructor(private fb: FormBuilder) {\\n\\n    this.addForm = this.fb.group({\\n      items: [null, Validators.required],\\n      items_value: ['no', Validators.required]\\n    });\\n\\n    this.rows = this.fb.array([]);\\n  }\\n\\n  ngOnInit() {\\n    this.addForm.get(\\\"items\\\").valueChanges.subscribe(val => {\\n      if (val === true) {\\n        this.addForm.get(\\\"items_value\\\").setValue(\\\"yes\\\");\\n\\n        this.addForm.addControl('rows', this.rows);\\n      }\\n      if (val === false) {\\n        this.addForm.get(\\\"items_value\\\").setValue(\\\"no\\\");\\n        this.addForm.removeControl('rows');\\n      }\\n    });\\n  }\\n\\n  createItemFormGroup(): FormGroup {\\n    return this.fb.group({\\n      name: null,\\n      description: null,\\n      qty: null\\n    });\\n  }\\n\\n  onAddRow() {\\n    this.rows.push(this.createItemFormGroup());\\n  }\\n\\n  onRemoveRow(rowIndex:number){\\n    this.rows.removeAt(rowIndex);\\n  }\\n}\".trim();var progress=\"\\n@Component({\\n  selector: 'app-root',\\n  template: '\\n{{progress}}\\n<button (click) = \\\"stop($event)\\\" > Stop</button>\\n  '})\\nexport class AppComponent {\\n  progress = 0;\\n  isStop = false;\\n\\n  ngOnInit(){\\n    setInterval(()=>{\\n      if(!this.isStop && this.progress <99){\\n      this.progress = this.progress + 10\\n    }\\n    else{\\n      if(this.progress==100){\\n        this.progress=0\\n      }\\n\\n      this.progress = this.progress\\n    }\\n    },1000)\\n  }\\n\\n  stop(){\\n    this.isStop = !this.isStop\\n  }\\n}\".trim();var pureImpure=\"\\n// import Pure, Impure component in app.module.ts\\n\\n@Pipe({name: 'purePipe'})\\nexport class Pure   {\\n  transform(item){\\n    return item.value  * 2;\\n  }\\n}\\n\\n@Pipe({\\n  name: 'impurePipe',\\n  pure: false\\n  })\\nexport class Impure   {\\n  transform(item){\\n    return item.value   * 2;\\n  }\\n}\\n\\n@Component({\\n  selector: 'app-root',\\n  template: '\\n  <h1> pure: {{Object | purePipe}}</h1>\\n     <h1>impure: {{Object | impurePipe}}</h1>\\n     <button (click) = 'fun()'> change data</button>\\n      '})\\n\\nexport class AppComponent  {\\nObject = {value: 1};\\n  fun() { this.Object.value++; }\\n}\\n\".trim();var Loader=/*#__PURE__*/function(_Component){_inherits(Loader,_Component);function Loader(){_classCallCheck(this,Loader);return _possibleConstructorReturn(this,_getPrototypeOf(Loader).apply(this,arguments));}_createClass(Loader,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Loader\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:loader,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Dynamically Sdd Row\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:dynamically,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Progress Bar\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:progress,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. Pure-Impure Pipe\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:pureImpure,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return Loader;}(Component);export default withStyles(styles)(Loader);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/loader.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","loader","trim","dynamically","progress","pureImpure","Loader","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,0BAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CAGA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,eAAe,CAAE,SAAnB,CAA8BC,OAAO,CAAE,KAAvC,CAA8CC,QAAQ,CAAE,MAAxD,CAAf,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,KAAK,CAAE,CACLC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH,CAELN,OAAO,CAAEG,KAAK,CAACG,OAAN,CAAc,CAAd,CAFJ,CADgB,CAKvBC,QAAQ,CAAE,CACRF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA,CALa,CAQvBE,SAAS,CAAE,CACTC,SAAS,CAAE,QADF,CARY,CAAL,EAApB,CAcA,GAAMC,CAAAA,MAAM,CAAG,6zBAqCbC,IArCa,EAAf,CAwCA,GAAMC,CAAAA,WAAW,CAAG,miDA6DjBD,IA7DiB,EAApB,CAgEA,GAAME,CAAAA,QAAQ,CAAG,2gBA6BdF,IA7Bc,EAAjB,CAgCA,GAAMG,CAAAA,UAAU,CAAG,2lBAgCjBH,IAhCiB,EAAnB,C,GAmCMI,CAAAA,M,sRACgB,CAClBC,UAAU,CAAC,iBAAMzB,CAAAA,KAAK,CAAC0B,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAACd,KAA1B,EACE,8BAAI,oBAAC,OAAD,MAAJ,CADF,CADF,CADF,CAME,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEc,OAAO,CAACd,KAA1B,EACE,oBAAC,IAAD,MACE,0CADF,CAEE,2BAAK,KAAK,CAAEN,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEY,MADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAFF,CASE,8BATF,CAWE,uDAXF,CAYE,2BAAK,KAAK,CAAEZ,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEc,WADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAZF,CAmBE,8BAnBF,CAqBE,gDArBF,CAsBE,2BAAK,KAAK,CAAEd,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEe,QADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAtBF,CA6BE,8BA7BF,CA+BE,oDA/BF,CAgCE,2BAAK,KAAK,CAAEf,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEgB,UADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAhCF,CADF,CADF,CANF,CADF,CAqDD,C,oBA3DkBxB,S,EA8DrB,cAAgBI,CAAAA,UAAU,CAACQ,MAAD,CAAV,CAAmBa,MAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst loader = `\n@Component({\n  selector: 'app-root',\n  template: '\n  <button(click)=\"getResult()\"> Get result</button>\n    <div>\n      <h2>Results</h2>\n      <progress *ngIf=\"isLoading\">Loading...</progress>\n      <p *ngIf=\"results\"> {{results | json}}</p >\n      <p *ngIf=\"error\"> Error: {{error | json}}</p >\n    </div >\n  '})\n\nexport class AppComponent  {\n  results: any;\n  error: any;\n  isLoading: boolean;\n\n  constructor(private http: HttpClient) {\n  }\n\n  getResult() {\n    this.error = null;\n    this.results = '';\n    this.isLoading = true;\n    this.http.get('https://jsonplaceholder.typicode.com/users',)\n      .subscribe(\n        (res) => {\n          this.isLoading = false\n          this.results = res;\n        },\n        (err) => {\n          this.error = err;\n        },\n      )\n  }\n}\n`.trim();\n\n\nconst dynamically = `\nimport { FormGroup, FormBuilder, Validators, FormArray } from '@angular/forms'\n\n@Component({\n  selector: 'app-root',\n  template: '\n  < div[formGroup]=\"addForm\" >\n    <input type=\"checkbox\" formControlName=\"items\">\n        {{addForm.value.items_value}}\n\t\t\n\t\t\t\t<button (click)=\"onAddRow()\" *ngIf=\"addForm.get('rows')\">add row</button>\n\t\t\t\t<div * ngFor=\"let row of addForm.get('rows')?.controls;let index = index;\" >\n  <button (click) = \"onRemoveRow(index)\" > Remove</button >\n\t\t\t\t</div >\n\t</div >\n\n  <pre>{{ rows.value | json }}</pre>\n  '})\nexport class AppComponent {\n addForm: FormGroup;\n  rows: FormArray;\n\n  constructor(private fb: FormBuilder) {\n\n    this.addForm = this.fb.group({\n      items: [null, Validators.required],\n      items_value: ['no', Validators.required]\n    });\n\n    this.rows = this.fb.array([]);\n  }\n\n  ngOnInit() {\n    this.addForm.get(\"items\").valueChanges.subscribe(val => {\n      if (val === true) {\n        this.addForm.get(\"items_value\").setValue(\"yes\");\n\n        this.addForm.addControl('rows', this.rows);\n      }\n      if (val === false) {\n        this.addForm.get(\"items_value\").setValue(\"no\");\n        this.addForm.removeControl('rows');\n      }\n    });\n  }\n\n  createItemFormGroup(): FormGroup {\n    return this.fb.group({\n      name: null,\n      description: null,\n      qty: null\n    });\n  }\n\n  onAddRow() {\n    this.rows.push(this.createItemFormGroup());\n  }\n\n  onRemoveRow(rowIndex:number){\n    this.rows.removeAt(rowIndex);\n  }\n}`.trim();\n\n\nconst progress = `\n@Component({\n  selector: 'app-root',\n  template: '\n{{progress}}\n<button (click) = \"stop($event)\" > Stop</button>\n  '})\nexport class AppComponent {\n  progress = 0;\n  isStop = false;\n\n  ngOnInit(){\n    setInterval(()=>{\n      if(!this.isStop && this.progress <99){\n      this.progress = this.progress + 10\n    }\n    else{\n      if(this.progress==100){\n        this.progress=0\n      }\n\n      this.progress = this.progress\n    }\n    },1000)\n  }\n\n  stop(){\n    this.isStop = !this.isStop\n  }\n}`.trim();\n\n\nconst pureImpure = `\n// import Pure, Impure component in app.module.ts\n\n@Pipe({name: 'purePipe'})\nexport class Pure   {\n  transform(item){\n    return item.value  * 2;\n  }\n}\n\n@Pipe({\n  name: 'impurePipe',\n  pure: false\n  })\nexport class Impure   {\n  transform(item){\n    return item.value   * 2;\n  }\n}\n\n@Component({\n  selector: 'app-root',\n  template: '\n  <h1> pure: {{Object | purePipe}}</h1>\n     <h1>impure: {{Object | impurePipe}}</h1>\n     <button (click) = 'fun()'> change data</button>\n      '})\n\nexport class AppComponent  {\nObject = {value: 1};\n  fun() { this.Object.value++; }\n}\n`.trim();\n\n\nclass Loader extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Loader</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={loader}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Dynamically Sdd Row</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={dynamically}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Progress Bar</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={progress}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Pure-Impure Pipe</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={pureImpure}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Loader));\n"]},"metadata":{},"sourceType":"module"}