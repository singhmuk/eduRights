{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var serverity=\"\\nimport logging\\nlogging.debug('This is a debug message')\\nlogging.info('This is an info message')\\nlogging.warning('This is a warning message')\\nlogging.error('This is an error message')\\nlogging.critical('This is a critical message')\\n\\n\\no/p:\\nWARNING:root:This is a warning message\\nERROR:root:This is an error message\\nCRITICAL:root:This is a critical message\".trim();var hierarchy=\"\\n# helper.py\\nimport logging\\nlogger = logging.getLogger(__name__)\\nlogger.info('HELLO')\\n\\n# main.py\\nimport logging\\nlogging.basicConfig(level=logging.INFO, format='%(name)s - %(levelname)s - %(message)s')\\nimport helper\\n\\n# o/p:\\n# helper - INFO - HELLO\".trim();var reason=\"\\n# helper.py\\nimport logging\\nlogger = logging.getLogger(__name__)\\nlogger.propagate = False\\nlogger.info('HELLO')\\n\\n# main.py\\nimport logging\\nlogging.basicConfig(level=logging.INFO, format='%(name)s - %(levelname)s - %(message)s')\\nimport helper\\n\".trim();var optionally=\"\\nimport logging\\n\\nlogger = logging.getLogger(__name__)\\n\\nstream_handler = logging.StreamHandler()                                    # Create handlers\\nfile_handler = logging.FileHandler('file.log')\\n\\n                                                                  # Configure level and formatter and add it to handlers\\nstream_handler.setLevel(logging.WARNING)                                    # warning and above is logged to the stream\\nfile_handler.setLevel(logging.ERROR)                                        # error and above is logged to a file\\n\\nstream_format = logging.Formatter('%(name)s - %(levelname)s - %(message)s')\\nfile_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\\nstream_handler.setFormatter(stream_format)\\nfile_handler.setFormatter(file_format)\\n\\n\\nlogger.addHandler(stream_handler)                                           # Add handlers to the logger\\nlogger.addHandler(file_handler)\\n\\nlogger.warning('This is a warning')                                         # logged to the stream\\nlogger.error('This is an error')                                            # logged to the stream AND the file!\\n\".trim();var filters=\"\\nclass InfoFilter(logging.Filter):\\n    def filter(self, record):\\n        return record.levelno == logging.INFO                               # Now only INFO level messages will be logged\\n\\n\\nstream_handler.addFilter(InfoFilter())\\nlogger.addHandler(stream_handler)\".trim();var traceback=\"\\nimport logging\\n\\ntry:\\n    a = [1, 2, 3]\\n    value = a[3]\\nexcept IndexError as e:\\n    logging.error(e)\\n    logging.error(e, exc_info=True)\\n    \\no/p:\\nERROR:root:list index out of range\\nERROR:root:list index out of range\\nTraceback (most recent call last):\\n  File \\\"<ipython-input-6-df97a133cbe6>\\\", line 5, in <module>\\n    value = a[3]\\nIndexError: list index out of range\\n\".trim();var correct=\"\\nimport logging\\nimport traceback\\n\\ntry:\\n    a = [1, 2, 3]\\n    value = a[3]\\nexcept:\\n    logging.error(\\\"uncaught exception: %s\\\", traceback.format_exc())\".trim();var rotating=\"\\nimport logging\\nfrom logging.handlers import RotatingFileHandler\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\nhandler = RotatingFileHandler('app.log', maxBytes=2000, backupCount=5)    \\nlogger.addHandler(handler)                    # roll over after 2KB, and keep backup logs app.log.1, app.log.2 ,...\\n\\nfor _ in range(10000):\\n    logger.info('Hello, world!')\".trim();var midnight=\"\\nimport logging\\nimport time\\nfrom logging.handlers import TimedRotatingFileHandler\\n \\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\n# This will create a new log file every minute, and 5 backup files with a timestamp before overwriting old logs.\\nhandler = TimedRotatingFileHandler('timed_test.log', when='m', interval=1, backupCount=5)\\nlogger.addHandler(handler)\\n \\nfor i in range(6):\\n    logger.info('Hello, world!')\\n    time.sleep(50)\".trim();var records=\"\\nimport logging\\nfrom pythonjsonlogger import jsonlogger\\n\\nlogger = logging.getLogger()\\n\\nlogHandler = logging.StreamHandler()\\nformatter = jsonlogger.JsonFormatter()\\nlogHandler.setFormatter(formatter)\\nlogger.addHandler(logHandler)\".trim();var resources=\"\\nwith open('notes.txt', 'w') as f:\\n    f.write('some todo...')\".trim();var execution=\"\\nclass ManagedFile:\\n    def __init__(self, filename):\\n        print('init', filename)\\n        self.filename = filename\\n        \\n    def __enter__(self):\\n        print('enter')\\n        self.file = open(self.filename, 'w')\\n        return self.file\\n        \\n    def __exit__(self, exc_type, exc_value, exc_traceback):\\n        if self.file:\\n            self.file.close()\\n        print('exit')\\n            \\nwith ManagedFile('notes.txt') as f:\\n    print('doing stuff...')\\n    f.write('some todo...')\".trim();var resource=\"\\nfrom contextlib import contextmanager\\n\\n@contextmanager\\ndef open_managed_file(filename):\\n    f = open(filename, 'w')\\n    try:\\n        yield f\\n    finally:\\n        f.close()\\n        \\nwith open_managed_file('notes.txt') as f:\\n    f.write('some todo...')\".trim();var Logging=/*#__PURE__*/function(_Component){_inherits(Logging,_Component);function Logging(){_classCallCheck(this,Logging);return _possibleConstructorReturn(this,_getPrototypeOf(Logging).apply(this,arguments));}_createClass(Logging,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Log Level\"),\"There are 5 different log levels indicating the serverity of events. By default, the system logs only events with level WARNING and above.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:serverity,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Logging in modules and logger hierarchy\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"To create an internal logger using the __name__ global variable.\"),React.createElement(\"li\",null,\"This will create a logger with the name of our module and ensures no name collisions. The logging module creates a hierarchy of loggers, starting with the root logger, and adding the new logger to this hierarchy.\"),React.createElement(\"li\",null,\"If import our module in another module, log messages can be associated with the correct module through the logger name.\")),React.createElement(\"b\",null,\"N: \"),\"Changing the basicConfig of the root logger will also affect the log events of the other (lower) loggers in the hierarchy.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:hierarchy,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Propagation\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"By default, all created loggers will pass the log events to the handlers of higher loggers, in addition to any handlers attached to the created logger.\"),React.createElement(\"li\",null,\"We can deactivate this by setting \",React.createElement(\"b\",null,\"propagate = False\"),\".\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:reason,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"i\",null,\"No output when running main.py since the helper module logger does not propagate its messages to the root logger.\"),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. LogHandlers\"),\"Handler objects are responsible for dispatching the appropriate log messages to the handler's specific destination.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"For example can use different handlers to send log messaged to the standard output stream, to files, via HTTP, or via Email. Typically you configure each handler with a\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"level (setLevel())\"),React.createElement(\"li\",null,\"formatter (setFormatter())\"),React.createElement(\"li\",null,\"and optionally a filter (addFilter())\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:optionally,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Example of a filter\"),\"overwrite InfoFilter() method. Only log records for which this function evaluates to True will pass the filter.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:filters,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. Capture Stack traces\"),\"Logging the traceback in our exception logs can be very helpful for trouble shooting issues. W can capture the traceback in logging.error() by setting the \",React.createElement(\"b\",null,\"exc_info = True\"),\".\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:traceback,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),\"If don't capture the correct Exception, you can also use the \",React.createElement(\"b\",null,\"traceback.format_exc()\"),\" method to log the exception.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:correct,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. Rotating FileHandler\"),\"When we have a large application that logs many events to a file, and only need to keep track of the most recent events, then use a \",React.createElement(\"b\",null,\"RotatingFileHandler\"),\" that keeps the files small. When the log reaches a certain number of bytes, it gets \",React.createElement(\"b\",null,\"\\\"rolled over\\\"\"),\". We can also keep multiple backup log files before overwriting them.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:rotating,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"7. TimedRotatingFileHandler\"),\"If our application will be running for a long time, Can use a TimedRotatingFileHandler. This will create a rotating log based on how much time has passed. Possible time conditions.\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"second (s)\"),React.createElement(\"li\",null,\"minute (m)\"),React.createElement(\"li\",null,\"hour (h)\"),React.createElement(\"li\",null,\"day (d)\"),React.createElement(\"li\",null,\"w0-w6 (weekday, 0=Monday)\"),React.createElement(\"li\",null,\"midnight\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:midnight,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"8. Logging in JSON Format\"),\"If our application generates many logs from different modules, and especially in a microservice architecture, it can be challenging to locate the important logs for our analysis.\",React.createElement(\"br\",null),\"Therefore, log our messages in JSON format, and send them to a centralized log management system. Then can analyze log records.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:records,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"9. Context managers and the 'with' statement\"),\"Context managers are a great tool for resource management. They allow to allocate and release resources precisely when want to.\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Ex. \"),\"with open() statemtent:\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:resources,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"i\",null,\"This will open a file and makes sure to automatically close it after program execution leaves the context of the with statement. It also handles exceptions and makes sure to properly close the file even in case of an exception.\"),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Examples of context managers\"),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Open and close files\"),React.createElement(\"li\",null,\"open and close database connections\"),React.createElement(\"li\",null,\"Acquire and release locks:\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"10. Implementing a context manager as a class\"),\"To support the with statement for our own classes, we have to implement the __enter__ and __exit__ methods. Python calls __enter__ when execution enters the context of the with statement. Here the resource should be acquired and returned. When execution leaves the context again, __exit__ is called and the resource is freed up.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:execution,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"11. Implementing a context manager as a generator\"),\"Instead of writing a class, we can also write a generator function and decorate it with the\",React.createElement(\"b\",null,\"contextlib.contextmanager\"),\" decorator. Then we can also call the function using a with statement.\",React.createElement(\"br\",null),\"For this approach, the function must yield the resource in a try statement, and all the content of the __exit__ method to free up the resource goes now inside the corresponding finally statement.\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:resource,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"i\",null,\"The generator first acquires the resource. Then temporarily suspends its own execution and yields the resource so it can be used by the caller. When the caller leaves the with context, the generator continues to execute and frees up the resource in the finally statement.\")))));}}]);return Logging;}(Component);export default withStyles(styles)(Logging);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/pythone/deeppy/logging.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","serverity","trim","hierarchy","reason","optionally","filters","traceback","correct","rotating","midnight","records","resources","execution","resource","Logging","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst serverity = `\nimport logging\nlogging.debug('This is a debug message')\nlogging.info('This is an info message')\nlogging.warning('This is a warning message')\nlogging.error('This is an error message')\nlogging.critical('This is a critical message')\n\n\no/p:\nWARNING:root:This is a warning message\nERROR:root:This is an error message\nCRITICAL:root:This is a critical message`.trim();\n\nconst hierarchy = `\n# helper.py\nimport logging\nlogger = logging.getLogger(__name__)\nlogger.info('HELLO')\n\n# main.py\nimport logging\nlogging.basicConfig(level=logging.INFO, format='%(name)s - %(levelname)s - %(message)s')\nimport helper\n\n# o/p:\n# helper - INFO - HELLO`.trim();\n\nconst reason = `\n# helper.py\nimport logging\nlogger = logging.getLogger(__name__)\nlogger.propagate = False\nlogger.info('HELLO')\n\n# main.py\nimport logging\nlogging.basicConfig(level=logging.INFO, format='%(name)s - %(levelname)s - %(message)s')\nimport helper\n`.trim();\n\nconst optionally = `\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nstream_handler = logging.StreamHandler()                                    # Create handlers\nfile_handler = logging.FileHandler('file.log')\n\n                                                                  # Configure level and formatter and add it to handlers\nstream_handler.setLevel(logging.WARNING)                                    # warning and above is logged to the stream\nfile_handler.setLevel(logging.ERROR)                                        # error and above is logged to a file\n\nstream_format = logging.Formatter('%(name)s - %(levelname)s - %(message)s')\nfile_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nstream_handler.setFormatter(stream_format)\nfile_handler.setFormatter(file_format)\n\n\nlogger.addHandler(stream_handler)                                           # Add handlers to the logger\nlogger.addHandler(file_handler)\n\nlogger.warning('This is a warning')                                         # logged to the stream\nlogger.error('This is an error')                                            # logged to the stream AND the file!\n`.trim();\n\nconst filters = `\nclass InfoFilter(logging.Filter):\n    def filter(self, record):\n        return record.levelno == logging.INFO                               # Now only INFO level messages will be logged\n\n\nstream_handler.addFilter(InfoFilter())\nlogger.addHandler(stream_handler)`.trim();\n\nconst traceback = `\nimport logging\n\ntry:\n    a = [1, 2, 3]\n    value = a[3]\nexcept IndexError as e:\n    logging.error(e)\n    logging.error(e, exc_info=True)\n    \no/p:\nERROR:root:list index out of range\nERROR:root:list index out of range\nTraceback (most recent call last):\n  File \"<ipython-input-6-df97a133cbe6>\", line 5, in <module>\n    value = a[3]\nIndexError: list index out of range\n`.trim();\n\nconst correct = `\nimport logging\nimport traceback\n\ntry:\n    a = [1, 2, 3]\n    value = a[3]\nexcept:\n    logging.error(\"uncaught exception: %s\", traceback.format_exc())`.trim();\n\nconst rotating = `\nimport logging\nfrom logging.handlers import RotatingFileHandler\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\nhandler = RotatingFileHandler('app.log', maxBytes=2000, backupCount=5)    \nlogger.addHandler(handler)                    # roll over after 2KB, and keep backup logs app.log.1, app.log.2 ,...\n\nfor _ in range(10000):\n    logger.info('Hello, world!')`.trim();\n\nconst midnight = `\nimport logging\nimport time\nfrom logging.handlers import TimedRotatingFileHandler\n \nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n# This will create a new log file every minute, and 5 backup files with a timestamp before overwriting old logs.\nhandler = TimedRotatingFileHandler('timed_test.log', when='m', interval=1, backupCount=5)\nlogger.addHandler(handler)\n \nfor i in range(6):\n    logger.info('Hello, world!')\n    time.sleep(50)`.trim();\n\nconst records = `\nimport logging\nfrom pythonjsonlogger import jsonlogger\n\nlogger = logging.getLogger()\n\nlogHandler = logging.StreamHandler()\nformatter = jsonlogger.JsonFormatter()\nlogHandler.setFormatter(formatter)\nlogger.addHandler(logHandler)`.trim();\n\nconst resources = `\nwith open('notes.txt', 'w') as f:\n    f.write('some todo...')`.trim();\n\nconst execution = `\nclass ManagedFile:\n    def __init__(self, filename):\n        print('init', filename)\n        self.filename = filename\n        \n    def __enter__(self):\n        print('enter')\n        self.file = open(self.filename, 'w')\n        return self.file\n        \n    def __exit__(self, exc_type, exc_value, exc_traceback):\n        if self.file:\n            self.file.close()\n        print('exit')\n            \nwith ManagedFile('notes.txt') as f:\n    print('doing stuff...')\n    f.write('some todo...')`.trim();\n\nconst resource = `\nfrom contextlib import contextmanager\n\n@contextmanager\ndef open_managed_file(filename):\n    f = open(filename, 'w')\n    try:\n        yield f\n    finally:\n        f.close()\n        \nwith open_managed_file('notes.txt') as f:\n    f.write('some todo...')`.trim();\n\n\nclass Logging extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Log Level</h3>\n              There are 5 different log levels indicating the serverity of events. By default, the system logs only events with level WARNING and above.\n              <div style={titles}>\n                <PrismCode\n                  code={serverity}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Logging in modules and logger hierarchy</h3>\n              <ul>\n                <li>To create an internal logger using the __name__ global variable.</li>\n                <li>This will create a logger with the name of our module and ensures no name collisions. The logging module creates a hierarchy of\n                  loggers, starting with the root logger, and adding the new logger to this hierarchy.</li>\n                <li>If import our module in another module, log messages can be associated with the correct module through the logger name.</li>\n              </ul>\n              <b>N: </b>Changing the basicConfig of the root logger will also affect the log events of the other (lower) loggers in the hierarchy.\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={hierarchy}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Propagation</h3>\n              <ul>\n                <li>By default, all created loggers will pass the log events to the handlers of higher loggers, in addition to any handlers attached\n                  to the created logger.</li>\n                <li>We can deactivate this by setting <b>propagate = False</b>.</li>\n              </ul>\n\n              <div style={titles}>\n                <PrismCode\n                  code={reason}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <i>No output when running main.py since the helper module logger does not propagate its messages to the root logger.</i>\n              <br />\n\n              <h3>4. LogHandlers</h3>\n              Handler objects are responsible for dispatching the appropriate log messages to the handler's specific destination.\n              <br />\n              <br />\n              For example can use different handlers to send log messaged to the standard output stream, to files, via HTTP, or via Email.\n              Typically you configure each handler with a\n              <ul>\n                <li>level (setLevel())</li>\n                <li>formatter (setFormatter())</li>\n                <li>and optionally a filter (addFilter())</li>\n              </ul>\n\n              <div style={titles}>\n                <PrismCode\n                  code={optionally}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Example of a filter</h3>\n              overwrite InfoFilter() method. Only log records for which this\n              function evaluates to True will pass the filter.\n              <div style={titles}>\n                <PrismCode\n                  code={filters}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. Capture Stack traces</h3>\n              Logging the traceback in our exception logs can be very helpful for trouble shooting issues. W can capture the traceback in\n              logging.error() by setting the <b>exc_info = True</b>.\n              <div style={titles}>\n                <PrismCode\n                  code={traceback}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              If don't capture the correct Exception, you can also use the <b>traceback.format_exc()</b> method to log the exception.\n              <div style={titles}>\n                <PrismCode\n                  code={correct}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Rotating FileHandler</h3>\n              When we have a large application that logs many events to a file, and only need to keep track of the most recent events,\n              then use a <b>RotatingFileHandler</b> that keeps the files small. When the log reaches a certain number of bytes, it gets <b>\"rolled over\"</b>.\n              We can also keep multiple backup log files before overwriting them.\n              <div style={titles}>\n                <PrismCode\n                  code={rotating}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7. TimedRotatingFileHandler</h3>\n              If our application will be running for a long time, Can use a TimedRotatingFileHandler. This will create a rotating log\n              based on how much time has passed. Possible time conditions.\n              <ul>\n                <li>second (s)</li>\n                <li>minute (m)</li>\n                <li>hour (h)</li>\n                <li>day (d)</li>\n                <li>w0-w6 (weekday, 0=Monday)</li>\n                <li>midnight</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={midnight}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>8. Logging in JSON Format</h3>\n              If our application generates many logs from different modules, and especially in a microservice architecture, it can be\n              challenging to locate the important logs for our analysis.\n              <br />\n              Therefore, log our messages in JSON format, and send them to a centralized log management system. Then can analyze log records.\n              <div style={titles}>\n                <PrismCode\n                  code={records}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>9. Context managers and the 'with' statement</h3>\n              Context managers are a great tool for resource management. They allow to allocate and release\n              resources precisely when want to.\n              <br />\n              <b>Ex. </b>with open() statemtent:\n              <div style={titles}>\n                <PrismCode\n                  code={resources}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>This will open a file and makes sure to automatically close it after program execution leaves the\n                context of the with statement. It also handles exceptions and makes sure to properly close the file\n                even in case of an exception.</i>\n              <br />\n              <br />\n\n              <b>Examples of context managers</b>\n              <br />\n              <ul>\n                <li>Open and close files</li>\n                <li>open and close database connections</li>\n                <li>Acquire and release locks:</li>\n              </ul>\n              <br />\n\n              <h3>10. Implementing a context manager as a class</h3>\n              To support the with statement for our own classes, we have to implement the __enter__ and __exit__ methods.\n              Python calls __enter__ when execution enters the context of the with statement. Here the resource should be\n              acquired and returned. When execution leaves the context again, __exit__ is called and the resource is freed up.\n              <div style={titles}>\n                <PrismCode\n                  code={execution}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>11. Implementing a context manager as a generator</h3>\n              Instead of writing a class, we can also write a generator function and decorate it with the\n              <b>contextlib.contextmanager</b> decorator. Then we can also call the function using a with statement.\n              <br />\n\n              For this approach, the function must yield the resource in a try statement, and all the content of\n              the __exit__ method to free up the resource goes now inside the corresponding finally statement.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={resource}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>The generator first acquires the resource. Then temporarily suspends its own execution and yields\n                the resource so it can be used by the caller. When the caller leaves the with context, the generator\n                continues to execute and frees up the resource in the finally statement.</i>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Logging));\n"]},"metadata":{},"sourceType":"module"}