{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/angularjs/deepAngularjs/benchmarking.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Small from '../../../assets/AI/small_images.jpg';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst childsFile = `\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\n\ntf.config.experimental.list_physical_devices()\ntf.__version__\ntf.test.is_built_with_cuda()\n`.trim();\nconst available = `\n(X_train, y_train), (X_test,y_test) = tf.keras.datasets.cifar10.load_data()\n\nX_train.shape\ny_train.shape\n`.trim();\nconst visualization = `\ndef plot_sample(index):\n    plt.figure(figsize = (10,1))\n    plt.imshow(X_train[index])\n    \nplot_sample(0)\nplot_sample(1)\n\nclasses = [\"airplane\",\"automobile\",\"bird\",\"cat\",\"deer\",\"dog\",\"frog\",\"horse\",\"ship\",\"truck\"]\n\nclasses[y_train[3][0]]\n\ny_train[:3]\ny_test.shape\nX_train.shape\n`.trim();\nconst preprocessing = `\nX_train_scaled = X_train / 255\nX_test_scaled = X_test / 255\n\ny_train_categorical = keras.utils.to_categorical(y_train, num_classes=10, dtype='float32')\ny_test_categorical = keras.utils.to_categorical(y_test, num_classes=10, dtype='float32')\n\ny_train[0:5]\ny_train_categorical[0:5]\n`.trim();\nconst building = `\nmodel = keras.Sequential([\n  keras.layers.Flatten(input_shape=(32,32,3)),\n  keras.layers.Dense(3000, activation='relu'),\n  keras.layers.Dense(1000, activation='relu'),\n  keras.layers.Dense(10, activation='sigmoid')    \n])\n\nmodel.compile(optimizer='SGD', loss='categorical_crossentropy', metrics=['accuracy'])\n\nmodel.fit(X_train_scaled, y_train_categorical, epochs=1)\n`.trim();\nconst predictions = `\nnp.argmax(model.predict(X_test_scaled)[0])\ny_test[0]\n\ndef get_model():\n    model = keras.Sequential([\n            keras.layers.Flatten(input_shape=(32,32,3)),\n            keras.layers.Dense(3000, activation='relu'),\n            keras.layers.Dense(1000, activation='relu'),\n            keras.layers.Dense(10, activation='sigmoid')    \n        ])\n\n    model.compile(optimizer='SGD', loss='categorical_crossentropy', metrics=['accuracy'])\n    return model\n`.trim();\nconst measure = `\n%%timeit -n1 -r1 \nwith tf.device('/CPU:0'):\n    cpu_model = get_model()\n    cpu_model.fit(X_train_scaled, y_train_categorical, epochs=1)\n    \n\n%%timeit -n1 -r1                                                                  //measure training time on a GPU.\nwith tf.device('/GPU:0'):\n    cpu_model = get_model()\n    cpu_model.fit(X_train_scaled, y_train_categorical, epochs=1)\n`.trim();\nconst epocs = `\n%%timeit -n1 -r1 \nwith tf.device('/CPU:0'):\n    cpu_model = get_model()\n    cpu_model.fit(X_train_scaled, y_train_categorical, epochs=10)\n    \n\n%%timeit -n1 -r1 \nwith tf.device('/GPU:0'):\n    cpu_model = get_model()\n    cpu_model.fit(X_train_scaled, y_train_categorical, epochs=10)\n    `.trim(); // const pipes = ``.trim();\n\nclass IntroAngular extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"Small Image Classification Using Simple Aritifical Neural Network: GPU Benchmarking.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"This command shows list of physical devices available for tensorflow. If you have NVIDIA GPU you need to install CUDA toolkit and cuDNN. Without proper installation you will not see GPU in list of devices.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"tf.config.experimental.list_physical_devices()\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: childsFile,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: Small,\n      alt: \"Theata\",\n      className: \"responsive2\",\n      style: redesign,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: available,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"Data Visualization\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: visualization,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"Preprocessing: Scale images\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: preprocessing,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, \"Model building and training\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: building,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, \"Let's make some predictions\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: predictions,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, \"Measure training time on a CPU.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: measure,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, \"Lets run same test for 10 epocs.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: epocs,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    })), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, \"You can see that GPU is almost 15 times faster. We ran only one epoch for benchmarking but for actual training we have to run many epochs and also when data volume is big running deep learning without GPU can consume so much time. This is the reason why GPUs are becoming popular in the field of deep learning.\")))));\n  }\n\n}\n\nexport default withStyles(styles)(IntroAngular);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/angularjs/deepAngularjs/benchmarking.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Small","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","childsFile","trim","available","visualization","preprocessing","building","predictions","measure","epocs","IntroAngular","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Small from '../../../assets/AI/small_images.jpg'\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst childsFile = `\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\n\ntf.config.experimental.list_physical_devices()\ntf.__version__\ntf.test.is_built_with_cuda()\n`.trim();\n\nconst available = `\n(X_train, y_train), (X_test,y_test) = tf.keras.datasets.cifar10.load_data()\n\nX_train.shape\ny_train.shape\n`.trim();\n\nconst visualization = `\ndef plot_sample(index):\n    plt.figure(figsize = (10,1))\n    plt.imshow(X_train[index])\n    \nplot_sample(0)\nplot_sample(1)\n\nclasses = [\"airplane\",\"automobile\",\"bird\",\"cat\",\"deer\",\"dog\",\"frog\",\"horse\",\"ship\",\"truck\"]\n\nclasses[y_train[3][0]]\n\ny_train[:3]\ny_test.shape\nX_train.shape\n`.trim();\n\nconst preprocessing = `\nX_train_scaled = X_train / 255\nX_test_scaled = X_test / 255\n\ny_train_categorical = keras.utils.to_categorical(y_train, num_classes=10, dtype='float32')\ny_test_categorical = keras.utils.to_categorical(y_test, num_classes=10, dtype='float32')\n\ny_train[0:5]\ny_train_categorical[0:5]\n`.trim();\n\nconst building = `\nmodel = keras.Sequential([\n  keras.layers.Flatten(input_shape=(32,32,3)),\n  keras.layers.Dense(3000, activation='relu'),\n  keras.layers.Dense(1000, activation='relu'),\n  keras.layers.Dense(10, activation='sigmoid')    \n])\n\nmodel.compile(optimizer='SGD', loss='categorical_crossentropy', metrics=['accuracy'])\n\nmodel.fit(X_train_scaled, y_train_categorical, epochs=1)\n`.trim();\n\nconst predictions = `\nnp.argmax(model.predict(X_test_scaled)[0])\ny_test[0]\n\ndef get_model():\n    model = keras.Sequential([\n            keras.layers.Flatten(input_shape=(32,32,3)),\n            keras.layers.Dense(3000, activation='relu'),\n            keras.layers.Dense(1000, activation='relu'),\n            keras.layers.Dense(10, activation='sigmoid')    \n        ])\n\n    model.compile(optimizer='SGD', loss='categorical_crossentropy', metrics=['accuracy'])\n    return model\n`.trim();\n\nconst measure = `\n%%timeit -n1 -r1 \nwith tf.device('/CPU:0'):\n    cpu_model = get_model()\n    cpu_model.fit(X_train_scaled, y_train_categorical, epochs=1)\n    \n\n%%timeit -n1 -r1                                                                  //measure training time on a GPU.\nwith tf.device('/GPU:0'):\n    cpu_model = get_model()\n    cpu_model.fit(X_train_scaled, y_train_categorical, epochs=1)\n`.trim();\n\nconst epocs = `\n%%timeit -n1 -r1 \nwith tf.device('/CPU:0'):\n    cpu_model = get_model()\n    cpu_model.fit(X_train_scaled, y_train_categorical, epochs=10)\n    \n\n%%timeit -n1 -r1 \nwith tf.device('/GPU:0'):\n    cpu_model = get_model()\n    cpu_model.fit(X_train_scaled, y_train_categorical, epochs=10)\n    `.trim();\n\n// const pipes = ``.trim();\n\n\n\n\nclass IntroAngular extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Small Image Classification Using Simple Aritifical Neural Network: GPU Benchmarking.</h3>\n              <ul>\n                <li>This command shows list of physical devices available for tensorflow. If you have NVIDIA GPU you need to install CUDA toolkit\n                  and cuDNN. Without proper installation you will not see GPU in list of devices.</li>\n                <b>tf.config.experimental.list_physical_devices()</b>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={childsFile}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <img src={Small} alt=\"Theata\" className=\"responsive2\" style={redesign} />\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={available}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Data Visualization</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={visualization}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Preprocessing: Scale images</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={preprocessing}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Model building and training</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={building}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Let's make some predictions</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={predictions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Measure training time on a CPU.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={measure}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Lets run same test for 10 epocs.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={epocs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <i>You can see that GPU is almost 15 times faster. We ran only one epoch for benchmarking but for actual training we have to run many epochs and also when data volume is big running deep learning without GPU can consume so much time. This is the reason why GPUs are becoming popular in the field of deep learning.</i>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\n\nexport default (withStyles(styles)(IntroAngular));\n"]},"metadata":{},"sourceType":"module"}