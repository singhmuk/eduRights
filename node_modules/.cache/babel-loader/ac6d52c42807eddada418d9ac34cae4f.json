{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var actions=\"\\n//actions/types.js\\nexport const NEW_ENTRY = 'NEW_ENTRY';\\nexport const LIST = 'LIST';\\nexport const UPDATE_ENTRY = 'UPDATE_ENTRY';\\nexport const DELETE_ENTRY = 'DELETE_ENTRY';\\nexport const LIST_BY_ID = 'LIST_BY_ID';\\n\\n\\n//actions/index.js\\nimport axios from 'axios';\\nimport { NEW_ENTRY, LIST, UPDATE_ENTRY, DELETE_ENTRY, LIST_BY_ID } from './types';\\n\\n\\nexport function newDirectoryEntry( fields ){\\n   const request = axios.post('/create', fields );\\n   return {\\n      type: NEW_ENTRY,\\n      payload: request\\n   }\\n}\\n\\nexport function directoryList(){\\n   const request = axios.get('/read');\\n   return {\\n      type: LIST,\\n      payload: request\\n   }\\n}\\n\\n/* Retrieve a single record by  id */\\nexport function directoryListById( id ){\\n   const request = axios.get('/readbyid/', { params: { id: id } });\\n   return {\\n      type: LIST_BY_ID,\\n      payload: request\\n   }\\n}\\n\\nexport function updateDirectoryEntry( fields ){\\n   const request = axios.put('/update', fields );\\n   return {\\n      type: UPDATE_ENTRY,\\n      payload: request\\n   }\\n}\\n\\nexport function deleteDirectoryEntry( entryid ){\\n   const request = axios.delete('/delete', { params : { entryid: entryid } } );\\n   return {\\n      type: DELETE_ENTRY,\\n      payload: request\\n   }\\n}\\n\".trim();var reducers=\"\\n//reducers/index.js\\nimport { NEW_ENTRY, LIST, UPDATE_ENTRY, DELETE_ENTRY, LIST_BY_ID } from '../actions/types';\\n\\n\\nexport default function( state = [], action ) {\\n    switch(action.type){\\n      case NEW_ENTRY:\\n        return { ...state, directory: action.payload };\\n      case LIST:\\n        return { ...state, directory: action.payload };\\n      case LIST_BY_ID:\\n        return { ...state, directory: action.payload };\\n      case UPDATE_ENTRY:\\n        return { ...state, directory: action.payload };\\n      case DELETE_ENTRY:\\n        return { ...state, directory: action.payload };\\n      default:\\n        return state;\\n    }\\n}\\n\".trim();var comp=\"\\n//components/form.js\\nimport React, { Component } from 'react';\\nimport { Redirect } from 'react-router-dom'\\nimport { connect } from 'react-redux';\\nimport { bindActionCreators } from 'redux';\\nimport { Formik, Field, Form } from 'formik';\\nimport Yup from 'yup';\\nimport { updateDirectoryEntry, newDirectoryEntry } from '../actions/index';\\n\\nconst validationSchema = Yup.object().shape({\\n    name: Yup.string().required('Business name is required!'),\\n    description: Yup.string().required('Business description is required!'),\\n    phone: Yup.string().required('Phone is required!'),\\n    email_address: Yup.string().email('Invalid email address!').required('Email address is required!'),\\n    physical_address: Yup.string().required('Physical address is required!'),\\n});\\n\\nclass form extends Component {\\n   constructor(props){\\n      super(props);\\n      this.state = { id: typeof this.props.row._id !== 'undefined' ? this.props.row._id : '', \\n      name: typeof this.props.row.name !== 'undefined' ? this.props.row.name : '', \\n      description: typeof this.props.row.description !== 'undefined' ? this.props.row.description : '', \\n      phone: typeof this.props.row.phone !== 'undefined' ? this.props.row.phone : '', \\n      email_address: typeof this.props.row.email_address !== 'undefined' ? this.props.row.email_address : '', \\n      physical_address: typeof this.props.row.physical_address !== 'undefined' ? this.props.row.physical_address : '', \\n      redirect: false \\n      }\\n   }\\n   async createUpdateRecord(values){\\n      let results;\\n      if( this.props.mode === 'edit' ) {\\n        results = await this.props.updateDirectoryEntry(values);\\n        if( results.payload.data.response === 'success' ) {\\n            this.setState({ redirect: true });\\n        } else {\\n            console.log(results.payload.data.response);\\n        }\\n      } else {\\n        results = await this.props.newDirectoryEntry(values);\\n        if( results.payload.data.response === 'success' ) {\\n            this.setState({ redirect: true });\\n        } else {\\n            console.log(results.payload.data.response);\\n        }\\n      }\\n   }\\n   render(){\\n      if( this.state.redirect ) {\\n          return (\\n            <Redirect to=\\\"/\\\" />\\n          );\\n      }\\n      return(\\n         <div>\\n           <Formik\\n             initialValues={{\\n               name: this.state.name,\\n               description: this.state.description,\\n               phone: this.state.phone,\\n               email_address: this.state.email_address,\\n               physical_address: this.state.physical_address,\\n               id: this.state.id\\n             }}\\n             validationSchema={validationSchema}\\n             onSubmit={ values => {\\n                this.createUpdateRecord(values);\\n             }}\\n             render={({ errors, touched }) => (\\n               <Form>\\n                 <div>\\n                   <div>\\n                   <h2>{ this.props.mode === 'edit' ? 'Edit Entry' : 'New Entry' }</h2>\\n                   </div>\\n                 </div> \\n                 <div>\\n                   <div className={''$'{errors.name && touched.name && 'has-error'}'}>\\n                     <p>Business Name</p>\\n                     <Field name=\\\"name\\\" type=\\\"text\\\" />\\n                   </div>\\n                   <div className={''$'{errors.description && touched.description && 'has-error'}'}>\\n                     <p>Business Description</p>\\n                     <Field name=\\\"description\\\" type=\\\"text\\\" />\\n                      { errors.description && touched.description && <span>{errors.description}</span> }\\n                   </div>\\n                 </div>\\n                 <div className=\\\"row\\\">\\n                   <div className={''$'{errors.phone && touched.phone && 'has-error'}'}>\\n                     <p>Phone</p>\\n                     <Field name=\\\"phone\\\" type=\\\"text\\\" />\\n                      { errors.phone && touched.phone && <span>{errors.phone}</span> }\\n                   </div>\\n                   <div className={''$'{errors.email_address && touched.email_address && 'has-error'}'}>\\n                     <p>Email Address</p>\\n                     <Field name=\\\"email_address\\\" type=\\\"text\\\" />\\n                      { errors.email_address && touched.email_address && <span>{errors.email_address}</span> }\\n                   </div>\\n                 </div>\\n                 <div className=\\\"row\\\">\\n                   <div className={''$'{errors.physical_address && touched.physical_address && 'has-error'}'}>\\n                     <p>Physical Address</p>\\n                     <Field name=\\\"physical_address\\\" type=\\\"text\\\" />\\n                      { errors.physical_address && touched.physical_address && <span>{errors.physical_address}</span> }\\n                   </div>\\n                 </div> \\n                 <div>\\n                   <div>\\n                      <button>Submit</button>\\n                   </div>\\n                 </div>\\n               </Form>\\n             )} />\\n         </div>\\n      );\\n   }\\n}\\n\\nconst mapStateToDispatch = (dispatch) => {\\n  return bindActionCreators({ updateDirectoryEntry, newDirectoryEntry }, dispatch);\\n};\\n\\nexport default connect(null, mapStateToDispatch)(form);\\n\\n\\n\\n//components/list.js\\nimport React, { Component } from 'react';\\nimport { bindActionCreators } from 'redux';\\nimport { connect } from 'react-redux';\\nimport { deleteDirectoryEntry, directoryList } from '../actions/index';\\nimport { Link } from \\\"react-router-dom\\\";\\n\\nclass List extends Component {\\n   constructor(props){\\n     super(props);\\n     this.state = { list: [] };\\n     this.confirmDelete = this.confirmDelete.bind(this);\\n   }\\n   async getAList() {\\n     let results = await this.props.directoryList();\\n     this.setState({ list : results.payload.data });\\n   }\\n   componentDidMount(){\\n     this.getAList();\\n   }\\n   async confirmDelete(e){\\n     if ( window.confirm('Are you sure you wish to delete this item?') ) {\\n          let results = await this.props.deleteDirectoryEntry(e.target.id);\\n          if( results.payload.data.response === 'success' ) {\\n              this.getAList();\\n          }\\n     }\\n   }\\n   displayAList(){\\n     if( Object.keys(this.state.list).length > 0 ) {\\n         const row = this.state.list.map( ( item, i ) => {\\n            let rowNumber = i + 1;\\n            return <tr key={i}><th scope=\\\"row\\\">{rowNumber}</th><td>{item.name}</td><td>{item.description}</td>\\n            <td>{item.phone}</td>\\n            <td>{item.email_address}</td><td>{item.physical_address}</td>\\n            <td><Link className=\\\"btn btn-warning\\\" to={\\\"/edit/\\\"+item._id}>Edit</Link>&nbsp;\\n            <Link id={item._id} onClick={this.confirmDelete} to=\\\"/\\\">Delete</Link></td></tr>\\n         });\\n         return (\\n            <table className=\\\"table\\\">\\n              <thead>\\n                <tr>\\n                  <th>#</th>\\n                  <th>Name</th>\\n                  <th>Description</th>\\n                  <th>Phone</th>\\n                  <th>Email</th>\\n                  <th>Address</th>\\n                  <th>Edit / Delete</th>\\n                </tr>\\n              </thead>\\n              <tbody>\\n                { row }\\n              </tbody>\\n            </table>\\n         );\\n     } else {\\n         return <p><em>There are no listings at the moment.</em></p>;\\n     }\\n   }\\n   render(){\\n      return(\\n        <div>\\n          <h2>Listings</h2>\\n          { this.displayAList() }\\n        </div> \\n      );\\n   }\\n}\\n\\nconst mapStateToDispatch = (dispatch) => {\\n  return bindActionCreators({ directoryList, deleteDirectoryEntry }, dispatch);\\n};\\n\\nexport default connect(null, mapStateToDispatch)(List);\\n\\n\\n//components/edit.js\\nimport React, { Component } from 'react';\\nimport { bindActionCreators } from 'redux';\\nimport { connect } from 'react-redux';\\nimport { directoryListById } from '../actions/index';\\nimport Form from './form';\\n\\nclass Edit extends Component {\\n   constructor(props){\\n      super(props);\\n      this.id = this.props.match.params.id;\\n      this.state = { row: [] }\\n   }\\n   async getRecord() {\\n      let result = await this.props.directoryListById(this.id);\\n      this.setState({ row : Object.assign( this.state.row, result.payload.data ) });\\n   }\\n   componentDidMount(){\\n      this.getRecord();\\n   }\\n   callForm(){\\n      if ( Object.keys(this.state.row).length > 0 ) {\\n           return <Form mode=\\\"edit\\\" row={this.state.row} />;\\n      }\\n   }\\n   render(){\\n      return(\\n        <div>\\n          { this.callForm() }\\n        </div> \\n      );\\n   }\\n}\\n\\nconst mapStateToDispatch = (dispatch) => {\\n  return bindActionCreators({ directoryListById }, dispatch);\\n};\\n\\nexport default connect(null, mapStateToDispatch)(Edit);\\n\\n\\n//components/entry.js\\nimport Form from './form';\\n\\nconst Entry = () => {\\n    return(\\n      <div>\\n        <Form mode=\\\"new\\\" row=\\\"[]\\\" />\\n      </div>\\n    );\\n}\\n\\n\\n//App.js\\nimport { Link, Route } from \\\"react-router-dom\\\";\\nimport Entry from \\\"./components/entry\\\";\\nimport List from \\\"./components/list\\\";\\nimport Edit from \\\"./components/edit\\\";\\n\\nclass App extends Component {\\n  render() {\\n    return (\\n      <div className=\\\"row\\\">\\n         <Link to=\\\"/\\\">Listings</Link>\\n          <Link to=\\\"/entry\\\">Entry</Link>\\n          <Route exact path=\\\"/\\\" component={List} />\\n          <Route path=\\\"/entry\\\" component={Entry} />\\n          <Route path=\\\"/edit/:id\\\" component={Edit} />\\n      </div>\\n    );\\n  }\\n}\\n\\n\\n//index.js\\nimport { Provider } from \\\"react-redux\\\";\\nimport { createStore, applyMiddleware } from \\\"redux\\\";\\nimport { Router } from \\\"react-router-dom\\\";\\nimport createBrowserHistory from \\\"history/createBrowserHistory\\\";\\nimport promise from \\\"redux-promise\\\";\\n\\nimport reducers from \\\"./reducers\\\";\\nimport App from \\\"./App\\\";\\nimport 'bootstrap/dist/css/bootstrap.min.css';\\n\\nconst createStoreWithMiddleware = applyMiddleware(promise)(createStore);\\nconst history = createBrowserHistory();\\n\\n\\nReactDOM.render(\\n    <Provider store={createStoreWithMiddleware(reducers)}>\\n        <Router history={history}>\\n            <App />\\n        </Router>\\n    </Provider>, document.querySelector(\\\".container\\\") );\".trim();var servers=\"\\n//models/directory.js\\nconst DirectorySchema = new Schema({\\n  name: { type: String, required: true },\\n  description: { type: String, required: true },\\n  phone: { type: String, required: true },\\n  email_address: { type: String, required: true },\\n  physical_address: { type: String, required: true },\\n  createdAt: { type: Date, required: true }\\n});\\n\\n\\nmodule.exports = mongoose.model('Directory', DirectorySchema);\\n\\n\\n//routes/index.js\\nconst Directory = require('../models/directory');\\n\\nmodule.exports = function() {\\n  router.get('/read', async (req, res) => {\\n      let directory_list = await Directory.find({});\\n      res.send(directory_list);\\n  });\\n\\n  router.post(\\\"/create\\\", async ( req, res ) => {\\n      let directory = new Directory({\\n         name: req.body.name,\\n         description: req.body.description,\\n         phone: req.body.phone,\\n         email_address: req.body.email_address,\\n         physical_address: req.body.physical_address,\\n         createdAt: new Date(Date.now())\\n      });\\n\\n        let newDirectory = await directory.save();\\n        res.send({ response: 'success'});\\n  });\\n\\n  router.get('/readbyid/', async ( req, res ) => {\\n       let record = await Directory.findOne({ _id: req.query.id });\\n       res.send(record);\\n  });\\n     \\n  router.put('/update', async ( req, res ) => {\\n        let directory = await Directory.findOneAndUpdate({ _id: req.body.id }, req.body, { new: true });\\n        res.send({ response: 'success' });\\n  });\\n\\n  router.delete('/delete', async (req, res) => {\\n        let directory = await Directory.findOneAndRemove({ _id: req.query.entryid });\\n        return res.send({ response: 'success' });\\n  });\\n\\n  return router;\\n\\n};\\n\\n\\n//server.js\\nconst path = require('path');\\n\\nconst routes = require('./routes/index')();\\n\\napp.use(express.json());\\napp.use('/', routes);\\n\\nconst port = process.env.PORT || 3001;\\napp.listen(port, () => { console.log('Server listening on port ') });\\n\\n\".trim();var MernRedux=/*#__PURE__*/function(_Component){_inherits(MernRedux,_Component);function MernRedux(){_classCallCheck(this,MernRedux);return _possibleConstructorReturn(this,_getPrototypeOf(MernRedux).apply(this,arguments));}_createClass(MernRedux,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Actions\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:actions,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Reducers\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:reducers,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Components\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:comp,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Server\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:servers,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return MernRedux;}(Component);export default withStyles(styles)(MernRedux);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/Redux/deep/mernRedux.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","actions","trim","reducers","comp","servers","MernRedux","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,0BAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CAGA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,eAAe,CAAE,SAAnB,CAA8BC,OAAO,CAAE,KAAvC,CAA8CC,QAAQ,CAAE,MAAxD,CAAf,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,KAAK,CAAE,CACLC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH,CAELN,OAAO,CAAEG,KAAK,CAACG,OAAN,CAAc,CAAd,CAFJ,CADgB,CAKvBC,QAAQ,CAAE,CACRF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA,CALa,CAQvBE,SAAS,CAAE,CACTC,SAAS,CAAE,QADF,CARY,CAAL,EAApB,CAaA,GAAMC,CAAAA,OAAO,CAAG,6vCAsDdC,IAtDc,EAAhB,CAwDA,GAAMC,CAAAA,QAAQ,CAAG,yoBAqBfD,IArBe,EAAjB,CAuBA,GAAME,CAAAA,IAAI,CAAG,ykUAyS6CF,IAzS7C,EAAb,CA2SA,GAAMG,CAAAA,OAAO,CAAG,s8DAqEdH,IArEc,EAAhB,C,GAyEMI,CAAAA,S,qSACgB,CAClBC,UAAU,CAAC,iBAAMzB,CAAAA,KAAK,CAAC0B,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAACd,KAA1B,EACE,8BAAI,oBAAC,OAAD,MAAJ,CADF,CADF,CADF,CAME,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEc,OAAO,CAACd,KAA1B,EACE,oBAAC,IAAD,MACE,wCADF,CAEE,2BAAK,KAAK,CAAEN,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEY,OADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAFF,CASE,8BATF,CAUE,yCAVF,CAWE,2BAAK,KAAK,CAAEZ,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEc,QADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAXF,CAkBE,8BAlBF,CAmBE,2CAnBF,CAoBE,2BAAK,KAAK,CAAEd,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEe,IADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CApBF,CA2BE,8BA3BF,CA4BE,uCA5BF,CA6BE,2BAAK,KAAK,CAAEf,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEgB,OADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CA7BF,CADF,CADF,CANF,CADF,CAkDD,C,uBAxDqBxB,S,EA2DxB,cAAgBI,CAAAA,UAAU,CAACQ,MAAD,CAAV,CAAmBa,SAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst actions = `\n//actions/types.js\nexport const NEW_ENTRY = 'NEW_ENTRY';\nexport const LIST = 'LIST';\nexport const UPDATE_ENTRY = 'UPDATE_ENTRY';\nexport const DELETE_ENTRY = 'DELETE_ENTRY';\nexport const LIST_BY_ID = 'LIST_BY_ID';\n\n\n//actions/index.js\nimport axios from 'axios';\nimport { NEW_ENTRY, LIST, UPDATE_ENTRY, DELETE_ENTRY, LIST_BY_ID } from './types';\n\n\nexport function newDirectoryEntry( fields ){\n   const request = axios.post('/create', fields );\n   return {\n      type: NEW_ENTRY,\n      payload: request\n   }\n}\n\nexport function directoryList(){\n   const request = axios.get('/read');\n   return {\n      type: LIST,\n      payload: request\n   }\n}\n\n/* Retrieve a single record by  id */\nexport function directoryListById( id ){\n   const request = axios.get('/readbyid/', { params: { id: id } });\n   return {\n      type: LIST_BY_ID,\n      payload: request\n   }\n}\n\nexport function updateDirectoryEntry( fields ){\n   const request = axios.put('/update', fields );\n   return {\n      type: UPDATE_ENTRY,\n      payload: request\n   }\n}\n\nexport function deleteDirectoryEntry( entryid ){\n   const request = axios.delete('/delete', { params : { entryid: entryid } } );\n   return {\n      type: DELETE_ENTRY,\n      payload: request\n   }\n}\n`.trim();\n\nconst reducers = `\n//reducers/index.js\nimport { NEW_ENTRY, LIST, UPDATE_ENTRY, DELETE_ENTRY, LIST_BY_ID } from '../actions/types';\n\n\nexport default function( state = [], action ) {\n    switch(action.type){\n      case NEW_ENTRY:\n        return { ...state, directory: action.payload };\n      case LIST:\n        return { ...state, directory: action.payload };\n      case LIST_BY_ID:\n        return { ...state, directory: action.payload };\n      case UPDATE_ENTRY:\n        return { ...state, directory: action.payload };\n      case DELETE_ENTRY:\n        return { ...state, directory: action.payload };\n      default:\n        return state;\n    }\n}\n`.trim();\n\nconst comp = `\n//components/form.js\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Formik, Field, Form } from 'formik';\nimport Yup from 'yup';\nimport { updateDirectoryEntry, newDirectoryEntry } from '../actions/index';\n\nconst validationSchema = Yup.object().shape({\n    name: Yup.string().required('Business name is required!'),\n    description: Yup.string().required('Business description is required!'),\n    phone: Yup.string().required('Phone is required!'),\n    email_address: Yup.string().email('Invalid email address!').required('Email address is required!'),\n    physical_address: Yup.string().required('Physical address is required!'),\n});\n\nclass form extends Component {\n   constructor(props){\n      super(props);\n      this.state = { id: typeof this.props.row._id !== 'undefined' ? this.props.row._id : '', \n      name: typeof this.props.row.name !== 'undefined' ? this.props.row.name : '', \n      description: typeof this.props.row.description !== 'undefined' ? this.props.row.description : '', \n      phone: typeof this.props.row.phone !== 'undefined' ? this.props.row.phone : '', \n      email_address: typeof this.props.row.email_address !== 'undefined' ? this.props.row.email_address : '', \n      physical_address: typeof this.props.row.physical_address !== 'undefined' ? this.props.row.physical_address : '', \n      redirect: false \n      }\n   }\n   async createUpdateRecord(values){\n      let results;\n      if( this.props.mode === 'edit' ) {\n        results = await this.props.updateDirectoryEntry(values);\n        if( results.payload.data.response === 'success' ) {\n            this.setState({ redirect: true });\n        } else {\n            console.log(results.payload.data.response);\n        }\n      } else {\n        results = await this.props.newDirectoryEntry(values);\n        if( results.payload.data.response === 'success' ) {\n            this.setState({ redirect: true });\n        } else {\n            console.log(results.payload.data.response);\n        }\n      }\n   }\n   render(){\n      if( this.state.redirect ) {\n          return (\n            <Redirect to=\"/\" />\n          );\n      }\n      return(\n         <div>\n           <Formik\n             initialValues={{\n               name: this.state.name,\n               description: this.state.description,\n               phone: this.state.phone,\n               email_address: this.state.email_address,\n               physical_address: this.state.physical_address,\n               id: this.state.id\n             }}\n             validationSchema={validationSchema}\n             onSubmit={ values => {\n                this.createUpdateRecord(values);\n             }}\n             render={({ errors, touched }) => (\n               <Form>\n                 <div>\n                   <div>\n                   <h2>{ this.props.mode === 'edit' ? 'Edit Entry' : 'New Entry' }</h2>\n                   </div>\n                 </div> \n                 <div>\n                   <div className={''$'{errors.name && touched.name && 'has-error'}'}>\n                     <p>Business Name</p>\n                     <Field name=\"name\" type=\"text\" />\n                   </div>\n                   <div className={''$'{errors.description && touched.description && 'has-error'}'}>\n                     <p>Business Description</p>\n                     <Field name=\"description\" type=\"text\" />\n                      { errors.description && touched.description && <span>{errors.description}</span> }\n                   </div>\n                 </div>\n                 <div className=\"row\">\n                   <div className={''$'{errors.phone && touched.phone && 'has-error'}'}>\n                     <p>Phone</p>\n                     <Field name=\"phone\" type=\"text\" />\n                      { errors.phone && touched.phone && <span>{errors.phone}</span> }\n                   </div>\n                   <div className={''$'{errors.email_address && touched.email_address && 'has-error'}'}>\n                     <p>Email Address</p>\n                     <Field name=\"email_address\" type=\"text\" />\n                      { errors.email_address && touched.email_address && <span>{errors.email_address}</span> }\n                   </div>\n                 </div>\n                 <div className=\"row\">\n                   <div className={''$'{errors.physical_address && touched.physical_address && 'has-error'}'}>\n                     <p>Physical Address</p>\n                     <Field name=\"physical_address\" type=\"text\" />\n                      { errors.physical_address && touched.physical_address && <span>{errors.physical_address}</span> }\n                   </div>\n                 </div> \n                 <div>\n                   <div>\n                      <button>Submit</button>\n                   </div>\n                 </div>\n               </Form>\n             )} />\n         </div>\n      );\n   }\n}\n\nconst mapStateToDispatch = (dispatch) => {\n  return bindActionCreators({ updateDirectoryEntry, newDirectoryEntry }, dispatch);\n};\n\nexport default connect(null, mapStateToDispatch)(form);\n\n\n\n//components/list.js\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { deleteDirectoryEntry, directoryList } from '../actions/index';\nimport { Link } from \"react-router-dom\";\n\nclass List extends Component {\n   constructor(props){\n     super(props);\n     this.state = { list: [] };\n     this.confirmDelete = this.confirmDelete.bind(this);\n   }\n   async getAList() {\n     let results = await this.props.directoryList();\n     this.setState({ list : results.payload.data });\n   }\n   componentDidMount(){\n     this.getAList();\n   }\n   async confirmDelete(e){\n     if ( window.confirm('Are you sure you wish to delete this item?') ) {\n          let results = await this.props.deleteDirectoryEntry(e.target.id);\n          if( results.payload.data.response === 'success' ) {\n              this.getAList();\n          }\n     }\n   }\n   displayAList(){\n     if( Object.keys(this.state.list).length > 0 ) {\n         const row = this.state.list.map( ( item, i ) => {\n            let rowNumber = i + 1;\n            return <tr key={i}><th scope=\"row\">{rowNumber}</th><td>{item.name}</td><td>{item.description}</td>\n            <td>{item.phone}</td>\n            <td>{item.email_address}</td><td>{item.physical_address}</td>\n            <td><Link className=\"btn btn-warning\" to={\"/edit/\"+item._id}>Edit</Link>&nbsp;\n            <Link id={item._id} onClick={this.confirmDelete} to=\"/\">Delete</Link></td></tr>\n         });\n         return (\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Name</th>\n                  <th>Description</th>\n                  <th>Phone</th>\n                  <th>Email</th>\n                  <th>Address</th>\n                  <th>Edit / Delete</th>\n                </tr>\n              </thead>\n              <tbody>\n                { row }\n              </tbody>\n            </table>\n         );\n     } else {\n         return <p><em>There are no listings at the moment.</em></p>;\n     }\n   }\n   render(){\n      return(\n        <div>\n          <h2>Listings</h2>\n          { this.displayAList() }\n        </div> \n      );\n   }\n}\n\nconst mapStateToDispatch = (dispatch) => {\n  return bindActionCreators({ directoryList, deleteDirectoryEntry }, dispatch);\n};\n\nexport default connect(null, mapStateToDispatch)(List);\n\n\n//components/edit.js\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { directoryListById } from '../actions/index';\nimport Form from './form';\n\nclass Edit extends Component {\n   constructor(props){\n      super(props);\n      this.id = this.props.match.params.id;\n      this.state = { row: [] }\n   }\n   async getRecord() {\n      let result = await this.props.directoryListById(this.id);\n      this.setState({ row : Object.assign( this.state.row, result.payload.data ) });\n   }\n   componentDidMount(){\n      this.getRecord();\n   }\n   callForm(){\n      if ( Object.keys(this.state.row).length > 0 ) {\n           return <Form mode=\"edit\" row={this.state.row} />;\n      }\n   }\n   render(){\n      return(\n        <div>\n          { this.callForm() }\n        </div> \n      );\n   }\n}\n\nconst mapStateToDispatch = (dispatch) => {\n  return bindActionCreators({ directoryListById }, dispatch);\n};\n\nexport default connect(null, mapStateToDispatch)(Edit);\n\n\n//components/entry.js\nimport Form from './form';\n\nconst Entry = () => {\n    return(\n      <div>\n        <Form mode=\"new\" row=\"[]\" />\n      </div>\n    );\n}\n\n\n//App.js\nimport { Link, Route } from \"react-router-dom\";\nimport Entry from \"./components/entry\";\nimport List from \"./components/list\";\nimport Edit from \"./components/edit\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"row\">\n         <Link to=\"/\">Listings</Link>\n          <Link to=\"/entry\">Entry</Link>\n          <Route exact path=\"/\" component={List} />\n          <Route path=\"/entry\" component={Entry} />\n          <Route path=\"/edit/:id\" component={Edit} />\n      </div>\n    );\n  }\n}\n\n\n//index.js\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Router } from \"react-router-dom\";\nimport createBrowserHistory from \"history/createBrowserHistory\";\nimport promise from \"redux-promise\";\n\nimport reducers from \"./reducers\";\nimport App from \"./App\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst createStoreWithMiddleware = applyMiddleware(promise)(createStore);\nconst history = createBrowserHistory();\n\n\nReactDOM.render(\n    <Provider store={createStoreWithMiddleware(reducers)}>\n        <Router history={history}>\n            <App />\n        </Router>\n    </Provider>, document.querySelector(\".container\") );`.trim();\n\nconst servers = `\n//models/directory.js\nconst DirectorySchema = new Schema({\n  name: { type: String, required: true },\n  description: { type: String, required: true },\n  phone: { type: String, required: true },\n  email_address: { type: String, required: true },\n  physical_address: { type: String, required: true },\n  createdAt: { type: Date, required: true }\n});\n\n\nmodule.exports = mongoose.model('Directory', DirectorySchema);\n\n\n//routes/index.js\nconst Directory = require('../models/directory');\n\nmodule.exports = function() {\n  router.get('/read', async (req, res) => {\n      let directory_list = await Directory.find({});\n      res.send(directory_list);\n  });\n\n  router.post(\"/create\", async ( req, res ) => {\n      let directory = new Directory({\n         name: req.body.name,\n         description: req.body.description,\n         phone: req.body.phone,\n         email_address: req.body.email_address,\n         physical_address: req.body.physical_address,\n         createdAt: new Date(Date.now())\n      });\n\n        let newDirectory = await directory.save();\n        res.send({ response: 'success'});\n  });\n\n  router.get('/readbyid/', async ( req, res ) => {\n       let record = await Directory.findOne({ _id: req.query.id });\n       res.send(record);\n  });\n     \n  router.put('/update', async ( req, res ) => {\n        let directory = await Directory.findOneAndUpdate({ _id: req.body.id }, req.body, { new: true });\n        res.send({ response: 'success' });\n  });\n\n  router.delete('/delete', async (req, res) => {\n        let directory = await Directory.findOneAndRemove({ _id: req.query.entryid });\n        return res.send({ response: 'success' });\n  });\n\n  return router;\n\n};\n\n\n//server.js\nconst path = require('path');\n\nconst routes = require('./routes/index')();\n\napp.use(express.json());\napp.use('/', routes);\n\nconst port = process.env.PORT || 3001;\napp.listen(port, () => { console.log('Server listening on port ') });\n\n`.trim();\n\n\n\nclass MernRedux extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Actions</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={actions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Reducers</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={reducers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Components</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={comp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Server</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={servers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(MernRedux));\n"]},"metadata":{},"sourceType":"module"}