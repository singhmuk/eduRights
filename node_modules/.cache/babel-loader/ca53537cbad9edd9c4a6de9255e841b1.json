{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/customHooks.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../prismCode';\nimport UseStates from '../../../assets/useState_useReducers.PNG';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst DocTitleOne = `\nconst App = () => {\n  const [message, setMessage] = useState('Hello');\n  const [count, setCount] = useState(0);\n\n  const handleButtonClick = () => {\n    setMessage('Updated Message');\n  };\n\n  const handleCount = () => {\n    setCount((prevCount) => prevCount + 1);\n  };\n\n  console.log('ParentComponent re-rendered.');\n\n  // Memoize the MessageComponent using useMemo\n  const memoizedMessageComponent = useMemo(() => {\n    return <MessageComponent message={message} count={count} />;\n  }, [message, count]); // Add message and count as dependencies\n\n  return (\n    <div>\n      {memoizedMessageComponent}\n      <button onClick={handleButtonClick}>Message</button>\n      <button onClick={handleCount}>Counts</button>\n    </div>\n  );\n};\n\n\n//\nconst MessageComponent = ({ message, count }) => {\n  console.log('MessageComponent re-rendered.');\n\n  return(\n    <div>\n      {message} - {count}\n    </div>\n  );\n};\n`.trim();\nconst customs = `\nfunction useFetch(url) {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetch(url)\n      .then(response => response.json())\n      .then(data => setData(data));\n  }, []);\n\n  return data;\n}\n\n// import useFetch from \"./useFetch\";\nfunction App(props) {\n  const data = useFetch(\"https://jsonplaceholder.typicode.com/posts\");\n  return (\n    <div>\n      <ul>\n        {data.map(el => (\n          <li key={el.id}>{el.title}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}`.trim();\nconst customsCount = `\nconst useCount = () => {\n  const [count, setCount] = useState(0);\n\n  const handleClick = () => {\n    setCount((prevCount) => prevCount + 1);\n  };\n\n  return [count, handleClick];\n};\n\nfunction App() {\n  const [count, handleClick] = useCount();\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={handleClick}>Click Me</button>\n    </div>\n  );\n}`.trim();\nconst refsReact = `\nconst App = () => {\n  const inputRef = useRef(null);\n\n  const handleFocus = () => {\n    inputRef.current.focus();\n  };\n\n  return (\n    <div>\n      <input type=\"text\" ref={inputRef} />\n      <button onClick={handleFocus}>Focus Input</button>\n    </div>\n  );\n}`.trim();\nconst useReducers = `\nfunction App() {\n  const [sum, dispatch] = useReducer((state, action) => {\n    return state + action;\n  }, 0);\n\n  return (\n    <>\n      {sum}\n      <button onClick={() => dispatch(1)}>Add</button>\n    </>\n  );\n}`.trim();\nconst useReducersCase = `\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return { count: state.count + 1, showText: state.showText };\n    case \"toggleShowText\":\n      return { count: state.count, showText: !state.showText };\n    default:\n      return state;\n  }\n};\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, { count: 0, showText: true });\n\n  return (\n    <div>\n      <h1>{state.count}</h1>\n      <button\n        onClick={() => {\n          dispatch({ type: \"INCREMENT\" });\n          dispatch({ type: \"toggleShowText\" });\n        }}\n      >\n        Click Here\n      </button>\n\n      {state.showText && <p>This is a text</p>}\n    </div>\n  );\n};`.trim();\nconst useReducersc = `\nimport { useCallback, useState, useEffect } from \"react\";\n\n\nfunction Child({ returnComment }) {\n  useEffect(() => {\n  }, [returnComment]);\n\n  return <div>{returnComment(\"Pedro\")}</div>;\n}\n\nexport default function CallBackTutorial() {\n  const [toggle, setToggle] = useState(false);\n  const [data, setData] = useState(\"Yo, pls sub to the channel!\");\n\n  const returnComment = useCallback(\n    (name) => {\n      return data + name;\n    },\n    [data]\n  );\n\n  return (\n    <div className=\"App\">\n      <Child returnComment={returnComment} />\n\n      <button\n        onClick={() => {\n          setToggle(!toggle);\n        }}\n      >\n        {\" \"}\n        Toggle\n      </button>\n      {toggle && <h1> toggle </h1>}\n    </div>\n  );\n}\n`.trim();\nconst usecall = `\nconst App = () => {\n  const [counter, setCounter] = useState(0);\n\n  const incrementCounter = useCallback(() => {\n    setCounter((prevCounter) => prevCounter + 1);\n  }, []);\n\n  return (\n    <div>\n      <h1>Counter: {counter}</h1>\n      <button onClick={incrementCounter}>Increment</button>\n    </div>\n  );\n}`.trim();\n\nclass CustomHooks extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, \"Step use to improves the performance of a react web application\"), \"Improving the performance of a React web application involves various steps that aim to optimize rendering, reduce unnecessary work, and improve the overall user experience.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, \"Use React.memo or useMemo: \"), \"Employ React.memo for functional components and useMemo for memoizing expensive calculations and preventing unnecessary re-renders.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, \"Key-based Lists: \"), \"When rendering lists, provide unique keys to list items. This helps React to efficiently update the DOM when elements are added, removed, or rearranged.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, \"Avoid Rendering Unchanged Data: \"), \"Ensure that components rendering large datasets do not re-render if the data hasn't changed.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, \"Use Event Delegation: \"), \"For handling events, consider using event delegation to avoid attaching listeners to individual elements.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, \"Lazy Loading and Code Splitting: \"), \"Use dynamic imports and React.lazy to load components and resources only when needed, reducing the initial load time and improving performance.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, \": \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, \": \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, \": \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, \": \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, \": \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, \": \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, \"1. What are advantages of using React Hooks?\"), \"Enable the extraction and reuse of stateful logic that is common across multiple components without the burden of HOC or render props. Hooks allow to easily manipulate the state of our functional component without convert them into class components.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, \"Differences between a Class component and Functional component?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, \"Class component: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, \"Uses ES6 class syntax. It can make use of the lifecycle methods.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, \"Extend from React.Component.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, \"Functional component: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, \"Mainly focuses on the UI of the application, not on the behavior.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, \"Can have state and mimic lifecycle events using Reach Hooks\")))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, \"2. Custom Hooks\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, \"Instead of HOCs and render props, we can encapsulate our logic in a React hook and then import that hook whenever we feel the need. In our example we can create a custom hooks for fetching data. A custom hook is a JavaScript function whose name starts with \\\"use\\\".\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: customs,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: customsCount,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, \"3. Explain why and when would you use useMemo()?\"), \"useMemo/ useCallback are use for performance optimization.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }), \"In the lifecycle of a component, React re-renders the component when an update is made. When React checks for any changes in a component, it may detect an unintended or unexpected change due to how JavaScript handles equality and shallow comparisons. This change in the React application will cause it to re-render unnecessarily.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }), \"useMemo takes in a function and an array of dependencies. The dependency\\u2019s list are the elements useMemo watches: if there are no changes, the function result will stay the same. Otherwise, it will re-run the function. If they don\\u2019t change, it doesn\\u2019t matter if our entire component re-renders, the function won\\u2019t re-run but instead return the stored result.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: DocTitleOne,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, \"4. useRef\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, \"allows you to store values that persist across renders. It can be used to keep track of data that you want to access or modify without causing the component to re-render.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, \"It can be used to access a DOM element directly.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, \"Refs are created using useRef() method and attached to React elements via the ref attribute.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: refsReact,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: UseStates,\n      alt: \"Omega\",\n      className: \"responsive\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, \"5. useReducer\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, \"useReducer is another hook, convenient for dealing with more complex state changes in React components. A \\u201Creducer\\u201D is a fancy word for a function that takes 2 values and returns 1 value. reducer receives the current state and an action, and returns the new state.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: useReducers,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, \"2. useReducer Case\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: useReducersCase,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, \"6. useCallback\"), \"The useCallback and useMemo Hooks are similar. The main difference is that useMemo returns a memoized value and useCallback returns a memoized function.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }), \"The useCallback hook in React is used to optimize the performance of functional components by memoizing callback functions. It is particularly useful in scenarios where the callback functions are passed as props to child components.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }, \"why we use useCallback: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, \"Prevent unnecessary re-rendering.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, \"Memoize expensive computations: Sometimes, a callback function might involve heavy computations or calculations. By wrapping the function with useCallback, we can memoize the result, ensuring that the computation is only performed when the dependencies change. This helps avoid repeated expensive computations, improving performance.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, \"Maintain referential equality: When a callback function is passed as a prop to a child component, it's important to maintain referential equality to avoid unnecessary re-renders of the child component. \")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: usecall,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: useReducersc,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(CustomHooks);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/customHooks.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","UseStates","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","DocTitleOne","trim","customs","customsCount","refsReact","useReducers","useReducersCase","useReducersc","usecall","CustomHooks","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../prismCode';\nimport UseStates from '../../../assets/useState_useReducers.PNG'\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst DocTitleOne = `\nconst App = () => {\n  const [message, setMessage] = useState('Hello');\n  const [count, setCount] = useState(0);\n\n  const handleButtonClick = () => {\n    setMessage('Updated Message');\n  };\n\n  const handleCount = () => {\n    setCount((prevCount) => prevCount + 1);\n  };\n\n  console.log('ParentComponent re-rendered.');\n\n  // Memoize the MessageComponent using useMemo\n  const memoizedMessageComponent = useMemo(() => {\n    return <MessageComponent message={message} count={count} />;\n  }, [message, count]); // Add message and count as dependencies\n\n  return (\n    <div>\n      {memoizedMessageComponent}\n      <button onClick={handleButtonClick}>Message</button>\n      <button onClick={handleCount}>Counts</button>\n    </div>\n  );\n};\n\n\n//\nconst MessageComponent = ({ message, count }) => {\n  console.log('MessageComponent re-rendered.');\n\n  return(\n    <div>\n      {message} - {count}\n    </div>\n  );\n};\n`.trim();\n\nconst customs = `\nfunction useFetch(url) {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetch(url)\n      .then(response => response.json())\n      .then(data => setData(data));\n  }, []);\n\n  return data;\n}\n\n// import useFetch from \"./useFetch\";\nfunction App(props) {\n  const data = useFetch(\"https://jsonplaceholder.typicode.com/posts\");\n  return (\n    <div>\n      <ul>\n        {data.map(el => (\n          <li key={el.id}>{el.title}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}`.trim();\n\nconst customsCount =`\nconst useCount = () => {\n  const [count, setCount] = useState(0);\n\n  const handleClick = () => {\n    setCount((prevCount) => prevCount + 1);\n  };\n\n  return [count, handleClick];\n};\n\nfunction App() {\n  const [count, handleClick] = useCount();\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={handleClick}>Click Me</button>\n    </div>\n  );\n}`.trim();\n\nconst refsReact = `\nconst App = () => {\n  const inputRef = useRef(null);\n\n  const handleFocus = () => {\n    inputRef.current.focus();\n  };\n\n  return (\n    <div>\n      <input type=\"text\" ref={inputRef} />\n      <button onClick={handleFocus}>Focus Input</button>\n    </div>\n  );\n}`.trim();\n\nconst useReducers = `\nfunction App() {\n  const [sum, dispatch] = useReducer((state, action) => {\n    return state + action;\n  }, 0);\n\n  return (\n    <>\n      {sum}\n      <button onClick={() => dispatch(1)}>Add</button>\n    </>\n  );\n}`.trim();\n\nconst useReducersCase = `\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return { count: state.count + 1, showText: state.showText };\n    case \"toggleShowText\":\n      return { count: state.count, showText: !state.showText };\n    default:\n      return state;\n  }\n};\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, { count: 0, showText: true });\n\n  return (\n    <div>\n      <h1>{state.count}</h1>\n      <button\n        onClick={() => {\n          dispatch({ type: \"INCREMENT\" });\n          dispatch({ type: \"toggleShowText\" });\n        }}\n      >\n        Click Here\n      </button>\n\n      {state.showText && <p>This is a text</p>}\n    </div>\n  );\n};`.trim();\n\nconst useReducersc = `\nimport { useCallback, useState, useEffect } from \"react\";\n\n\nfunction Child({ returnComment }) {\n  useEffect(() => {\n  }, [returnComment]);\n\n  return <div>{returnComment(\"Pedro\")}</div>;\n}\n\nexport default function CallBackTutorial() {\n  const [toggle, setToggle] = useState(false);\n  const [data, setData] = useState(\"Yo, pls sub to the channel!\");\n\n  const returnComment = useCallback(\n    (name) => {\n      return data + name;\n    },\n    [data]\n  );\n\n  return (\n    <div className=\"App\">\n      <Child returnComment={returnComment} />\n\n      <button\n        onClick={() => {\n          setToggle(!toggle);\n        }}\n      >\n        {\" \"}\n        Toggle\n      </button>\n      {toggle && <h1> toggle </h1>}\n    </div>\n  );\n}\n`.trim();\n\nconst usecall = `\nconst App = () => {\n  const [counter, setCounter] = useState(0);\n\n  const incrementCounter = useCallback(() => {\n    setCounter((prevCounter) => prevCounter + 1);\n  }, []);\n\n  return (\n    <div>\n      <h1>Counter: {counter}</h1>\n      <button onClick={incrementCounter}>Increment</button>\n    </div>\n  );\n}`.trim();\n\n\nclass CustomHooks extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Step use to improves the performance of a react web application</h3>\n              Improving the performance of a React web application involves various steps that aim to optimize rendering, reduce unnecessary work, and improve the overall user experience. \n              <br/>\n              <ul>\n                <li><b>Use React.memo or useMemo: </b>Employ React.memo for functional components and useMemo for memoizing expensive calculations and preventing unnecessary re-renders.</li><br/>\n                <li><b>Key-based Lists: </b>When rendering lists, provide unique keys to list items. This helps React to efficiently update the DOM when elements are added, removed, or rearranged.</li><br/>\n                <li><b>Avoid Rendering Unchanged Data: </b>Ensure that components rendering large datasets do not re-render if the data hasn't changed.</li><br/>\n                <li><b>Use Event Delegation: </b>For handling events, consider using event delegation to avoid attaching listeners to individual elements.</li><br/>\n                <li><b>Lazy Loading and Code Splitting: </b>Use dynamic imports and React.lazy to load components and resources only when needed, reducing the initial load time and improving performance.</li><br/>\n                <li><b>: </b></li><br/>\n                <li><b>: </b></li><br/>\n                <li><b>: </b></li><br/>\n                <li><b>: </b></li><br/>\n                <li><b>: </b></li><br/>\n                <li><b>: </b></li><br/>\n              </ul>\n              <br/>\n\n            <h3>1. What are advantages of using React Hooks?</h3>\n              Enable the extraction and reuse of stateful logic that is common across multiple components without the burden \n              of HOC or render props. Hooks allow to easily manipulate the state of our functional component without convert \n              them into class components.\n              <br/>\n\n              <h3>Differences between a Class component and Functional component?</h3>\n              <ul>\n                <li><b>Class component: </b>\n                  <ul>\n                    <li>Uses ES6 class syntax. It can make use of the lifecycle methods.</li>\n                    <li>Extend from React.Component.</li>\n                  </ul>\n                </li>\n                <br/>\n                <li><b>Functional component: </b>\n                  <ul>\n                    <li>Mainly focuses on the UI of the application, not on the behavior.</li>\n                    <li>Can have state and mimic lifecycle events using Reach Hooks</li>\n                  </ul>\n                </li>\n              </ul>\n              <br/>\n\n              <h3>2. Custom Hooks</h3>\n              <p>\n                Instead of HOCs and render props, we can encapsulate our logic in a React hook and then import that hook whenever\n                we feel the need. In our example we can create a custom hooks for fetching data.\n                A custom hook is a JavaScript function whose name starts with \"use\".\n                     </p>\n              <div style={titles}>\n                <PrismCode\n                  code={customs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <div style={titles}>\n                <PrismCode\n                  code={customsCount}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>3. Explain why and when would you use useMemo()?</h3>\n              useMemo/ useCallback are use for performance optimization.<br/>\n              In the lifecycle of a component, React re-renders the component when an update is made. When React checks for any \n              changes in a component, it may detect an unintended or unexpected change due to how JavaScript handles equality \n              and shallow comparisons. This change in the React application will cause it to re-render unnecessarily.\n              <br/>\n              <br/>\n              useMemo takes in a function and an array of dependencies. The dependency’s list are the elements useMemo watches: \n              if there are no changes, the function result will stay the same. Otherwise, it will re-run the function. If they \n              don’t change, it doesn’t matter if our entire component re-renders, the function won’t re-run but instead return \n              the stored result.\n              <div style={titles}>\n                <PrismCode\n                  code={DocTitleOne}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. useRef</h3>\n              <ul>\n                <li>allows you to store values that persist across renders. It can be used to keep track of data that you want to access or modify without causing the component to re-render.</li>\n                <li>It can be used to access a DOM element directly.</li>\n                <li>Refs are created using useRef() method and attached to React elements via the ref attribute.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={refsReact}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <img src={UseStates} alt=\"Omega\" className=\"responsive\" />\n\n              <h3>5. useReducer</h3>\n              <p>\n                useReducer is another hook, convenient for dealing with more complex state changes in React components.\n                A “reducer” is a fancy word for a function that takes 2 values and returns 1 value.\n                reducer receives the current state and an action, and returns the new state.\n              </p>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={useReducers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>2. useReducer Case</b>\n              <div style={titles}>\n                <PrismCode\n                  code={useReducersCase}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. useCallback</h3>\n              The useCallback and useMemo Hooks are similar. The main difference\n              is that useMemo returns a memoized value and useCallback returns a\n              memoized function.\n              <br/>\n              <br/>\n              The useCallback hook in React is used to optimize the performance of functional components by memoizing callback \n              functions. It is particularly useful in scenarios where the callback functions are passed as props to child \n              components.\n              <br/>\n              <br/>\n              <b>why we use useCallback: </b>\n              <ul>\n                <li>Prevent unnecessary re-rendering.</li>\n                <li>Memoize expensive computations: Sometimes, a callback function might involve heavy computations or calculations. \n                  By wrapping the function with useCallback, we can memoize the result, ensuring that the computation is only \n                  performed when the dependencies change. This helps avoid repeated expensive computations, improving performance.</li>\n                <li>Maintain referential equality: When a callback function is passed as a prop to a child component, it's important \n                  to maintain referential equality to avoid unnecessary re-renders of the child component. </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={usecall}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n\n              <div style={titles}>\n                <PrismCode\n                  code={useReducersc}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(CustomHooks));\n"]},"metadata":{},"sourceType":"module"}