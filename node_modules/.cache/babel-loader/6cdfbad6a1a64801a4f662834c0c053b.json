{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/javaScripts/deepJs/logic.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst Pyramid = ` \n// Upside pyramid.\nfunction pyraminds() {\n  let i, j, k, str = \"\";\n\n  for (i=0; i<5; i++) {\n    for (j=1; j<(5 - i); j++) {\n      str += \" \";\n    }\n    for (k=1; k<=(2 * i +1); k++) {\n      str += \"*\";\n    }\n\n    str += 'newLine';\n  }\n\n  console.log(str)\n}\n\npyraminds();\n\n\n// downside pyramid.\nfor (i=1; i<5; i++) {\n  for (j=0; j<i; j++) {\n    str += \" \";\n  }\n  for (k=(5 - i)*2; k>1; k--) {\n    str += \"*\";\n  }\n\n  str += 'newLine';\n}\n\nconsole.log(str)\n `.trim();\nconst insersonSort = `\nvar insersionSort = function(array){\n  for(var i =1; i< array.length; i++){\n    for(var j=0;j<i;j++){\n      if(array[i] < array[j]){\n        var temp = array.splice(i, 1);\n        array.splice(j,0,temp[0]);\n      }\n    }\n  }\n  \nconsole.log(array)\nreturn array;\n}\n\ninsersionSort([3,5,1,9,6,2,1])\n`.trim();\nconst mergSort = `\nfunction mergeSort(arr){\n    if(arr.length < 2) return arr;\n    var middle = Math.floor(arr.length/2);\n    var left = arr.slice(0, middle);\n    var right = arr.slice(middle, arr.length);\n    return merge(mergeSort(left), mergeSort(right));\n }\n \n function merge(left, right){\n  var result = [];\n    while(left.length && right.length){\n      if(left[0] == right[0]){\n        result.push(left.shift());\n      }\n  else{\n    result.push(right.shift());}\n  }\n  \n  while(left.length) result.push(left.shift());\n  while(right.length) result.push(right.shift());\n  console.log(result)\n  return result;\n }\n mergeSort([3,2,1])`.trim();\nconst quicksort = `\nfunction QuickSort(arr){\n    if(arr.length <= 1) return arr;\n        var pivot = arr[arr.length -1];\n        var left = [];\n        var right = [];\n        for(var i=0;i<arr.length-1;i++){\n        if(arr[i] < pivot){\n        left.push(arr[i])\n      }\n    else right.push(arr[i])\n    }\n    return [...QuickSort(left), pivot, ...QuickSort(right)]\n }\n console.log(QuickSort([5,4,2,7,9]))\n `.trim();\nconst selectionSort = `function selectionSort(arr){\n  var minIdx, temp,\n  len = arr.length;\n    for(var i = 0; i < len; i++){\n    minIdx = i;\n      for(var j = i+1; j<len; j++){\n        if(arr[j]<arr[minIdx]){\n        minIdx = j;\n      }\n    }\n    \n    temp = arr[i];\n    arr[i] = arr[minIdx];\n    arr[minIdx] = temp;\n   }\n \n console.log(arr)\n return arr;\n }\n \n selectionSort([7,5,2,4,3,9]);`.trim();\nconst twoSum = `\nfunction twoSum(arr, s){\n  var sum=[];\n  for(let i=0; i<arr.length; i++){\n    for(let j=i+1; j<arr.length; j++){\n      if(arr[i]+arr[j] == s){\n        sum.push([arr[i], arr[j]])\n      }\n    }\n  }\n  return sum;\n}\n\nconsole.log(twoSum([1,2,3,4],5));`.trim();\nconst arrayCounter = `\n  var arrCounter = function(arr){\n  var counter = 0;\n  var maxCount = 0;\n    var inner = function(n){\n      if(!Array.isArray(n)){\n        maxCount = Math.max(maxCount, counter);\n     counter = 0;\n     return\n   }\n   \n   n.forEach(num => {\n   counter ++;\n   inner(num);\n   })\n }\n \n inner(arr);\n console.log(maxCount)\n return maxCount;\n}\n\narrCounter([[3]])\narrCounter([[[[[[[9]]]]]]])\narrCounter([])`.trim();\nconst common_divisor = `\nfunction numbers(x, y) {\n    if ((typeof x !== 'number') || (typeof y !== 'number'))\n      return false;\n      x = Math.abs(x);\n      y = Math.abs(y);\n        while(y) {\n          var i = y;\n          y = x % y;\n          x = i;\n        }\n  return x;\n  }\n \n  console.log(numbers(12, 4));\n  console.log(numbers(9, 3));`.trim();\nconst Permutations = `\nfunction findPerms(str) {\n  if (str.length === 0) return \"\";\n  if (str.length === 1) return str;\nlet result = [];\nfor (let i = 0; i < str.length; i++) {\n    const currentChar = str[i];\n    const remainingChars = str.slice(0, i) + str.slice(i + 1);\nfor (let j = 0; j < remainingChars.length; j++) {\n  result.push(currentChar + findPerms(remainingChars)[j]);\n    }\n  }\n  return result;\n}\n\nconsole.log(findPerms('abc'))\n  `.trim();\nconst missing_number = `\nfunction missNum() {\n  let i, arr=[0,1,2,4,5], exactsum=0, result=0;\n  exactsum = arr.reduce((a, b) => a + b);\n\n  for (i=0; i<=arr.length; i++) {\n    result += i\n  }\n  \n  result -= exactsum;\n  console.log('Missing Number', result)\n}\n\nmissNum();\n `.trim();\nconst Palindrom = `\nfunction palindrom(){\n  let i, str='madam', str2='';\n  \n  for(i=str.length-1; i>=0; i-- ){\n    str2 += str[i]; \n  }\n  if(str==!str2){\n    console.log('Not Palindrom', str2)\n  }\n  console.log('Palindrom', str2)\n}\n\npalindrom();`.trim();\nconst Pattern = `\nlet i,j, str=\"\";                                                                    //Square pattern.\nfor(i=1; i<=5; i++){\n  for(j=0; j<5; j++){\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nconsole.log(str);\n\n\nlet i, j, str = \"\";                                                               //Right pascal star pattern.\nfor (i=1; i<=5; i++) {\n  for (j=0; j<i; j++) {\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nfor (i=1; i<=(5-1); i++) {\n  for (j=0; j<(5-i); j++) {\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nconsole.log(str);\n`.trim();\nconst magicNumber = `\nfunction magicNum(){\n  const random = Math.random(0,1)\n  return random;\n}\n\nfunction main(){\n  const result = Math.random(0, magicNum);\n  console.log(result);\n}\n\nmain();\n`.trim();\nconst amount = `\nfunction minCoinChange(coins, amount) {\n  const minCoins = new Array(amount + 1).fill(Infinity); \n  \n  // there are 0 ways to make amount 0 with positive coin values\n  minCoins[0] = 0;\n  // look at one coin at a time\n  for(let coin of coins) {\n    for(let i = 0; i <= amount; i += 1) {\n     \n      if((i - coin) >= 0) minCoins[i] = Math.min(minCoins[i], minCoins[i - coin] + 1);\n    }\n  }\n  \n  // if the value remains Infinity, it means that no coin combination can make that amount\n  return minCoins[amount] !== Infinity ? minCoins[amount] : -1;\n}\n\n\nconsole.log(minCoinChange([1,2,3],13));`.trim();\nconst possible = `\nfunction isInt(value) {\n  var x;\n  if (isNaN(value)) {\n    return false;\n  }\n  x = parseFloat(value);\n  return (x | 0) === x;\n}\n\nconsole.log(isInt(0));`.trim();\nconst binaryMatrix = `\nfunction shorPath(grid) {\n  let n = grid.length - 1;\n  let q = [0]\n  \n  if (grid[0][0] || grid[n][n]) return -1\n  \n  grid[0][0] = 1\n  while (q.length) {\n      let curr = q.shift();\n      let i = curr & (1 << 7) - 1;\n      let j = curr >> 7;\n      \n      if (i === n && j === n) return grid[n][n]\n      for (let a = Math.max(i-1,0); a <= Math.min(i+1,n); a++){\n          for (let b = Math.max(j-1,0); b <= Math.min(j+1,n); b++){\n              if (grid[a][b] === 0){\n                  grid[a][b] = grid[i][j] + 1, q.push(a + (b << 7))\n                  }\n                }\n              }\n            }\n            return -1\n          };\n  \n  console.log(shorPath([[0,0,0],[1,1,0],[1,1,0]]));`.trim();\nconst armstrong = `\n  let sum = 0;\nconst number = prompt('Enter a three-digit positive integer: ');\n\nlet temp = number;\nwhile (temp > 0) {                                                       // finding the one's digit\n    let remainder = temp % 10;\n    sum += remainder * remainder * remainder;\n\n    // removing last digit from the number\n    temp = parseInt(temp / 10); // convert float into integer\n}\nif (sum == number) {\n    console.log('is an Armstrong number',number);\n}\nelse {\n    console.log('is Not Armstrong number',number);\n}`.trim();\n\nclass Logic extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }, \"1. Pyramind\"), \"newLine = \\\\n\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Pyramid,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }, \"2. Pattern\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Pattern,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, \"5. Common Divisor\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: common_divisor,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }, \"6. Missing Number\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: missing_number,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }, \"8. Palindrom\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Palindrom,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }, \" Armstrong Number\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: armstrong,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    }, \"14. Permutations\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Permutations,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489\n      },\n      __self: this\n    }, \"16.Two Sum\"), \"Check whether any two numbers in an array sums to a given number\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: twoSum,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }, \"18.Discuss possible ways to write a function isInteger(x) that determines if x is an integer.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: possible,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }, \"19.Given an amount of money, return the minimum number of coins needed to make that change.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: amount,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    }, \"20.Shortest Path in Binary Matrix\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    }, \"In an N by N square grid, each cell is either empty (0) or blocked (1).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    }, \"A clear path from top-left to bottom-right has length k if and only if it is composed of cells C_1, C_2, ..., C_k such that:\"), \"1.Adjacent cells C_i and C_i+1 are connected 8-directionally (ie., they are different and share an edge or corner)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }), \"2.C_1 is at location (0, 0) (ie. has value grid[0][0])\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }), \"3.C_k is at location (N-1, N-1) (ie. has value grid[N-1][N-1])\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }), \"4.If C_i is located at (r, c), then grid[r][c] is empty (ie. grid[r][c] == 0).\", React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }, \"Return the length of the shortest such clear path from top-left to bottom-right. If such a path does not exist, return -1.\")), \"Input:[[0,1],[1,0]], [[0,0,0],[1,1,0],[1,1,0]]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    }), \"Output:2, 4\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: binaryMatrix,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }, \"21. Insersion Sort\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: insersonSort,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    }, \"22. Merg Sort\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: mergSort,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569\n      },\n      __self: this\n    }, \"23. Quick Sort\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: quicksort,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579\n      },\n      __self: this\n    }, \"24. Selection Sort\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: selectionSort,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589\n      },\n      __self: this\n    }, \"25. Array Counter\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: arrayCounter,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Logic);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/javaScripts/deepJs/logic.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","Pyramid","trim","insersonSort","mergSort","quicksort","selectionSort","twoSum","arrayCounter","common_divisor","Permutations","missing_number","Palindrom","Pattern","magicNumber","amount","possible","binaryMatrix","armstrong","Logic","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst Pyramid = ` \n// Upside pyramid.\nfunction pyraminds() {\n  let i, j, k, str = \"\";\n\n  for (i=0; i<5; i++) {\n    for (j=1; j<(5 - i); j++) {\n      str += \" \";\n    }\n    for (k=1; k<=(2 * i +1); k++) {\n      str += \"*\";\n    }\n\n    str += 'newLine';\n  }\n\n  console.log(str)\n}\n\npyraminds();\n\n\n// downside pyramid.\nfor (i=1; i<5; i++) {\n  for (j=0; j<i; j++) {\n    str += \" \";\n  }\n  for (k=(5 - i)*2; k>1; k--) {\n    str += \"*\";\n  }\n\n  str += 'newLine';\n}\n\nconsole.log(str)\n `.trim()\n\nconst insersonSort = `\nvar insersionSort = function(array){\n  for(var i =1; i< array.length; i++){\n    for(var j=0;j<i;j++){\n      if(array[i] < array[j]){\n        var temp = array.splice(i, 1);\n        array.splice(j,0,temp[0]);\n      }\n    }\n  }\n  \nconsole.log(array)\nreturn array;\n}\n\ninsersionSort([3,5,1,9,6,2,1])\n`.trim()\n\nconst mergSort = `\nfunction mergeSort(arr){\n    if(arr.length < 2) return arr;\n    var middle = Math.floor(arr.length/2);\n    var left = arr.slice(0, middle);\n    var right = arr.slice(middle, arr.length);\n    return merge(mergeSort(left), mergeSort(right));\n }\n \n function merge(left, right){\n  var result = [];\n    while(left.length && right.length){\n      if(left[0] == right[0]){\n        result.push(left.shift());\n      }\n  else{\n    result.push(right.shift());}\n  }\n  \n  while(left.length) result.push(left.shift());\n  while(right.length) result.push(right.shift());\n  console.log(result)\n  return result;\n }\n mergeSort([3,2,1])`.trim()\n\nconst quicksort = `\nfunction QuickSort(arr){\n    if(arr.length <= 1) return arr;\n        var pivot = arr[arr.length -1];\n        var left = [];\n        var right = [];\n        for(var i=0;i<arr.length-1;i++){\n        if(arr[i] < pivot){\n        left.push(arr[i])\n      }\n    else right.push(arr[i])\n    }\n    return [...QuickSort(left), pivot, ...QuickSort(right)]\n }\n console.log(QuickSort([5,4,2,7,9]))\n `.trim()\n\nconst selectionSort = `function selectionSort(arr){\n  var minIdx, temp,\n  len = arr.length;\n    for(var i = 0; i < len; i++){\n    minIdx = i;\n      for(var j = i+1; j<len; j++){\n        if(arr[j]<arr[minIdx]){\n        minIdx = j;\n      }\n    }\n    \n    temp = arr[i];\n    arr[i] = arr[minIdx];\n    arr[minIdx] = temp;\n   }\n \n console.log(arr)\n return arr;\n }\n \n selectionSort([7,5,2,4,3,9]);`.trim()\n\nconst twoSum = `\nfunction twoSum(arr, s){\n  var sum=[];\n  for(let i=0; i<arr.length; i++){\n    for(let j=i+1; j<arr.length; j++){\n      if(arr[i]+arr[j] == s){\n        sum.push([arr[i], arr[j]])\n      }\n    }\n  }\n  return sum;\n}\n\nconsole.log(twoSum([1,2,3,4],5));`.trim()\n\nconst arrayCounter = `\n  var arrCounter = function(arr){\n  var counter = 0;\n  var maxCount = 0;\n    var inner = function(n){\n      if(!Array.isArray(n)){\n        maxCount = Math.max(maxCount, counter);\n     counter = 0;\n     return\n   }\n   \n   n.forEach(num => {\n   counter ++;\n   inner(num);\n   })\n }\n \n inner(arr);\n console.log(maxCount)\n return maxCount;\n}\n\narrCounter([[3]])\narrCounter([[[[[[[9]]]]]]])\narrCounter([])`.trim()\n\nconst common_divisor = `\nfunction numbers(x, y) {\n    if ((typeof x !== 'number') || (typeof y !== 'number'))\n      return false;\n      x = Math.abs(x);\n      y = Math.abs(y);\n        while(y) {\n          var i = y;\n          y = x % y;\n          x = i;\n        }\n  return x;\n  }\n \n  console.log(numbers(12, 4));\n  console.log(numbers(9, 3));`.trim()\n\n\n\nconst Permutations = `\nfunction findPerms(str) {\n  if (str.length === 0) return \"\";\n  if (str.length === 1) return str;\nlet result = [];\nfor (let i = 0; i < str.length; i++) {\n    const currentChar = str[i];\n    const remainingChars = str.slice(0, i) + str.slice(i + 1);\nfor (let j = 0; j < remainingChars.length; j++) {\n  result.push(currentChar + findPerms(remainingChars)[j]);\n    }\n  }\n  return result;\n}\n\nconsole.log(findPerms('abc'))\n  `.trim()\n\n\n\n\n\n\n\nconst missing_number = `\nfunction missNum() {\n  let i, arr=[0,1,2,4,5], exactsum=0, result=0;\n  exactsum = arr.reduce((a, b) => a + b);\n\n  for (i=0; i<=arr.length; i++) {\n    result += i\n  }\n  \n  result -= exactsum;\n  console.log('Missing Number', result)\n}\n\nmissNum();\n `.trim()\n\nconst Palindrom = `\nfunction palindrom(){\n  let i, str='madam', str2='';\n  \n  for(i=str.length-1; i>=0; i-- ){\n    str2 += str[i]; \n  }\n  if(str==!str2){\n    console.log('Not Palindrom', str2)\n  }\n  console.log('Palindrom', str2)\n}\n\npalindrom();`.trim()\n\n\n\nconst Pattern = `\nlet i,j, str=\"\";                                                                    //Square pattern.\nfor(i=1; i<=5; i++){\n  for(j=0; j<5; j++){\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nconsole.log(str);\n\n\nlet i, j, str = \"\";                                                               //Right pascal star pattern.\nfor (i=1; i<=5; i++) {\n  for (j=0; j<i; j++) {\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nfor (i=1; i<=(5-1); i++) {\n  for (j=0; j<(5-i); j++) {\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nconsole.log(str);\n`.trim();\n\n\n\nconst magicNumber = `\nfunction magicNum(){\n  const random = Math.random(0,1)\n  return random;\n}\n\nfunction main(){\n  const result = Math.random(0, magicNum);\n  console.log(result);\n}\n\nmain();\n`.trim();\n\nconst amount = `\nfunction minCoinChange(coins, amount) {\n  const minCoins = new Array(amount + 1).fill(Infinity); \n  \n  // there are 0 ways to make amount 0 with positive coin values\n  minCoins[0] = 0;\n  // look at one coin at a time\n  for(let coin of coins) {\n    for(let i = 0; i <= amount; i += 1) {\n     \n      if((i - coin) >= 0) minCoins[i] = Math.min(minCoins[i], minCoins[i - coin] + 1);\n    }\n  }\n  \n  // if the value remains Infinity, it means that no coin combination can make that amount\n  return minCoins[amount] !== Infinity ? minCoins[amount] : -1;\n}\n\n\nconsole.log(minCoinChange([1,2,3],13));`.trim();\n\n\nconst possible = `\nfunction isInt(value) {\n  var x;\n  if (isNaN(value)) {\n    return false;\n  }\n  x = parseFloat(value);\n  return (x | 0) === x;\n}\n\nconsole.log(isInt(0));`.trim();\n\nconst binaryMatrix = `\nfunction shorPath(grid) {\n  let n = grid.length - 1;\n  let q = [0]\n  \n  if (grid[0][0] || grid[n][n]) return -1\n  \n  grid[0][0] = 1\n  while (q.length) {\n      let curr = q.shift();\n      let i = curr & (1 << 7) - 1;\n      let j = curr >> 7;\n      \n      if (i === n && j === n) return grid[n][n]\n      for (let a = Math.max(i-1,0); a <= Math.min(i+1,n); a++){\n          for (let b = Math.max(j-1,0); b <= Math.min(j+1,n); b++){\n              if (grid[a][b] === 0){\n                  grid[a][b] = grid[i][j] + 1, q.push(a + (b << 7))\n                  }\n                }\n              }\n            }\n            return -1\n          };\n  \n  console.log(shorPath([[0,0,0],[1,1,0],[1,1,0]]));`.trim();\n\n  const armstrong = `\n  let sum = 0;\nconst number = prompt('Enter a three-digit positive integer: ');\n\nlet temp = number;\nwhile (temp > 0) {                                                       // finding the one's digit\n    let remainder = temp % 10;\n    sum += remainder * remainder * remainder;\n\n    // removing last digit from the number\n    temp = parseInt(temp / 10); // convert float into integer\n}\nif (sum == number) {\n    console.log('is an Armstrong number',number);\n}\nelse {\n    console.log('is Not Armstrong number',number);\n}`.trim();\n\nclass Logic extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Pyramind</h3>\n              newLine = \\n\n              <div style={titles}>\n                <PrismCode\n                  code={Pyramid}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>2. Pattern</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Pattern}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. Common Divisor</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={common_divisor}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Missing Number</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={missing_number}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              \n\n             \n\n              <h3>8. Palindrom</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Palindrom}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3> Armstrong Number</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={armstrong}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              \n\n              \n\n              \n\n              \n\n              <h3>14. Permutations</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Permutations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n\n              <h3>16.Two Sum</h3>\n              Check whether any two numbers in an array sums to a given number\n              <div style={titles}>\n                <PrismCode\n                  code={twoSum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              \n\n\n              <b>18.Discuss possible ways to write a function isInteger(x) that determines if x is an integer.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={possible}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>19.Given an amount of money, return the minimum number of coins needed to make that change.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={amount}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>20.Shortest Path in Binary Matrix</h3>\n              <ul>\n                <li>In an N by N square grid, each cell is either empty (0) or blocked (1).</li>\n                <li>A clear path from top-left to bottom-right has length k if and only if it is composed of cells C_1, C_2, ..., C_k such that:</li>\n                1.Adjacent cells C_i and C_i+1 are connected 8-directionally (ie., they are different and share an edge or corner)\n                <br />\n                2.C_1 is at location (0, 0) (ie. has value grid[0][0])<br />\n                3.C_k is at location (N-1, N-1) (ie. has value grid[N-1][N-1])<br />\n                4.If C_i is located at (r, c), then grid[r][c] is empty (ie. grid[r][c] == 0).\n                <li>Return the length of the shortest such clear path from top-left to bottom-right. If such a path does not exist, return -1.</li>\n              </ul>\n              Input:[[0,1],[1,0]], [[0,0,0],[1,1,0],[1,1,0]]\n              <br />\n              <br />\n              Output:2, 4\n              <div style={titles}>\n                <PrismCode\n                  code={binaryMatrix}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>21. Insersion Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={insersonSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>22. Merg Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={mergSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>23. Quick Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={quicksort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>24. Selection Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={selectionSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>25. Array Counter</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={arrayCounter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Logic));\n"]},"metadata":{},"sourceType":"module"}