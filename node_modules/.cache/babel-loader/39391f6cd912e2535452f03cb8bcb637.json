{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/javaScripts/deepJs/mcqjs.js\";\nimport React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\nconst titles = {\n  backgroundColor: \"#F0F8FF\",\n  padding: \"1px\",\n  fontSize: \"16px\"\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst change = `\ndocument.title=\"My New Title\";`.trim();\nconst thisKey = ``.trim();\nconst evals = `\nconst obj = [1, 2, [3, 4]];\nconst shallowCopy = obj.slice(); \n\nshallowCopy[2][0] = 99;\nconsole.log(obj); \n\n//2\nconst obj = { a: 1, b: { c: 2 } };\n\nconst shallowCopy = Object.assign({}, obj);\nconst shallowCopy2 = { ...obj };\n\nconsole.log(shallowCopy);\nconsole.log(shallowCopy2);\n\nshallowCopy.b.c = 3; \nconsole.log(obj); \n\n//3\nconst obj = {\n  name: \"John\",\n  age: 30,\n  hobbies: [\"reading\", \"swimming\"],\n};\n\nconst shallowCopy = Object.assign({}, obj);\nshallowCopy.hobbies.push(\"hiking\");\n\nconsole.log(obj.hobbies); \n\n\n\n//Deep Copy\nconst obj = [1, 2, [3, 4]];\nconst shallowCopy = JSON.parse(JSON.stringify(obj));\n\nshallowCopy[2][0] = 99;\nconsole.log(obj); \n\n\n//2\nconst obj = {\n  name: \"John\",\n  age: 30,\n  hobbies: [\"reading\", \"swimming\"],\n};\n\nconst deepCopy = JSON.parse(JSON.stringify(obj));\ndeepCopy.hobbies.push(\"hiking\");\n\nconsole.log(obj.hobbies); \n`.trim();\nconst forIn = `\nconst object = { a: 1, b: 2, c: 3 };\n\nfor (const property in object) {\n  console.log('$'{property}: '$'{object[property]});\n}`.trim();\nconst continues = `\nfunction continueFun() {\n  foo: for (var i = 0; i < 4; i++) {\n    for (var j = 0; j < 4; j++) {\n      if (i == j) {\n        console.log(\"continue\", i, j);\n        continue foo;\n      }\n\n      if ((j * i) % 2 == 1) {\n        continue;\n      }\n\n      if ((i * j) >= 3) {\n        console.log(\"break\", i, j);\n        break foo;\n      }\n    }\n  }\n}\n\ncontinueFun()\n`.trim();\nconst nonLabeledBlock = `function nonLabeledBlock(){\n  bar: {\n    console.log('hello');\n    break bar;\n    console.log('never runs');\n}\nconsole.log('welcome');\n}`.trim();\nconst jsonsObj = `\nconst obj1 = { name: \"John\", age: 30 };\nconst obj2 = { name: \"John\", age: 30 };\n\nconsole.log(obj1 == obj2); \n\n//2\nconst arr1 = [1, 2, 3];\nconst arr2 = [1, 2, 3];\nconst arr3 = arr1;\n\nconsole.log(arr1 == arr2);\nconsole.log(arr1 == arr3);\n\n\n// Deep\nconst num1 = 42;\nconst num2 = \"42\";\n\nconsole.log(num1 === num2); \n`.trim();\nconst textContent = `\n<body> \n<h3>Differences between innerText & textContent.</h3> \n<p id=\"demo\"> This element has extra\t spacing and contains \n<span>a span element</span>.</p> \n\n<button onclick=\"getInnerText()\">Get innerText</button> \n<button onclick=\"getTextContent()\">Get textContent</button> \n\n<p id=\"demo\"></p> \n<script> \n\tfunction getInnerText() { \n\talert(document.getElementById(\"demo\").innerText) \n\t} \n\n\tfunction getTextContent() { \n\talert(document.getElementById(\"demo\").textContent) \n\t} \n</script> \n</body> \n`.trim();\nconst HTMLCollection = `\nconst fruits = document.getElementsByClassName(‘fruits’);\nfruits.item(0).classList.add(‘fruit__01’)`.trim();\nconst NodeList = `\n const fruits = document.querySelectorAll(‘.fruits’);                           // returns static collection.\n\n const fruits = document.querySelector(‘.fruits’);                              // returns live collection.\n const childFruit = fruits.childNodes;`.trim();\nconst traversed = `\nArray.proptotype.map.call(p, tag => {\n  console.log(tag.innerText)\n})`.trim();\nconst childNodes = `\n<script type='text/javascript'>\n$(window).load(function(){\n    console.log(document.getElementById('dd').children.length);\n    console.log(document.getElementById('dd').childNodes.length);\n});\n</script>\n</head>\n<body>\n  <div id=\"dd\">\n    <p>Test paragraph.</p>\n    <div>\n      <p>Test paragraph 2.</p>\n    </div>\n    Text.\n  </div>\n</body>`.trim();\nconst firstElementChild = `\n<ul id=\"list\"><!-- a list item -->\n<li>Item1</li>\n<li>Item2</li>\n</ul>\n\n\n//js\n  var list = document.getElementById(\"list\");\n   \n  console.log(\"First child value is\",list.firstChild);\n   \n  console.log(\"First element child value is\",list.firstElementChild);\n`.trim();\nconst dynamically = `\n<body>\n    <button onclick=\"create()\">Create Heading</button>\n    <script>\n      function create() {\n        var h1 = document.createElement('h1');\n        h1.textContent = \"New Heading!!!\";\n        h1.setAttribute('class', 'note');\n        document.body.appendChild(h1);\n      }\n    </script>\n  </body>`.trim();\nconst removeChild = `\n//RemoveChild.\nlet p = document.querySelector( 'p' )\nlet removed = p.removeChild( p.firstChild )\nconsole.log( removed )                                                      //<i>Hi</i>\n\n\n//Remove\nlet p = document.querySelector( 'p' )\nlet removed = p.childNodes[0].remove()\nconsole.log( removed )                                                      // undefined\n`.trim();\nconst Temporal = ` \nvar foo = 'first';\nfunction main() {\n  console.log(foo);                                                                 //undefined\n  var foo = 'second';\n}\n\n\nlet foo = 'first';\nfunction main() {\n  console.log(foo);                                                                 //ReferenceError\n  let foo = 'second';\n}\n\nmain()\n`.trim();\nconst memorizations = `\nconst add = (n) => (n + 10);\nadd(9);\n\nconst memoizedAdd = () => {\n  let cache = {};\n  return (n) => {\n    if (n in cache) {\n      console.log('Fetching from cache');\n      return cache[n];\n    }\n    else {\n      console.log('Calculating result');\n      let result = n + 10;\n      cache[n] = result;\n      return result;\n    }\n  }\n}\n\nconst newAdd = memoizedAdd();\nconsole.time();\nconsole.log(newAdd(9));\nconsole.log(newAdd(9)); \nconsole.timeEnd();\n`.trim();\nconst window = `\n  var a = 2;\n  \n  (function IIFE(def) {\n     def(window);\n  })(function def(global) {\n     var a = 3;\n     console.log(a);                                                                              // 3\n     console.log(global.a);                                                                       // 2\n  });\n`.trim();\nconst listeners = `\n\n<button id=\"clickMe\">Click me</button>\n\n//1\ndocument.getElementById(\"clickMe\")\n.addEventListener(\"click\", () => {\n  console.log('button clicked')\n});\n\n\n//2 Couser With Event Listeners\nfunction attachedEventListeners(){\n  let count = 0;\ndocument.getElementById(\"clickMe\")\n.addEventListener(\"click\", () => {\n  console.log('button clicked', count++)\n  });\n}\n\nattachedEventListeners();`.trim();\n\nclass McqJs extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, \"1. What do you mean by JavaScript BOM?\"), \"BOM refers to \\u201CBrowser Object Modal\\u201D that permits JavaScript to \\u201Ctalk\\u201D to the browser, modern browsers, no standards apply same BOMS \\u2013 screen, history, window, location, timing, navigator, and cookies.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, \"2. In what way we can change the title of the page in JavaScript?\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: change,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, \"3. Explain JavaScript Cookies.\"), \"Cookies are the tiny test files that are properly stored in a computer, and they get build when the user goes to the websites to store some information that they require. \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }, \"Ex. \"), \" User name details and information about the shopping cart from earlier visits.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, \"4. Explain the role of deferred scripts in JavaScripts.\"), \"The HTML code\\u2019s parsing while the page is loading is stopped by default until the script has not paused executing. If your server is a little slow or the script is specifically heavy, then your webpage will be delayed. While you are using Deferred, scripts delays the execution for sometime of the script till the time the HTML parser is running. This lessens the loading time of web pages and get showed up faster.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: thisKey,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, \"5. Shallow Copy And Deep Copy\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, \"Shallow Copy: \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }), \"A shallow copy creates a new object or array and copies the references to the original elements.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, \"Object.assign()\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, \"spread operator ...\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, \"Deep Copy: \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }), \"On the other hand, creates a completely new copy of the original object or array and all its nested elements.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, \"There are different ways to achieve deep copies: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, \"JSON.parse()\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, \"JSON.stringify()\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: evals,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }, \"7. For...In\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }, \"A for...in loop will not find any property on the array.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, \"A for...in loop only iterates over enumerable, non-Symbol properties. Objects created from built\\u2013in constructors like Array and Object have inherited non\\u2013enumerable properties from Object.prototype and String.prototype, such as String's indexOf() method or Object's toString() method. The loop will iterate over all enumerable properties of the object itself and those the object inherits from its prototype chain.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: forIn,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }, \"9. continue and break\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: continues,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }, \"10. non-labeled block\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: nonLabeledBlock,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }, \"12. Shallow comparision And Deep comparision.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }, \"Shallow comparision true for primitive data type only. In derived data type is false.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: jsonsObj,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }, \"15. Difference between textContent and innerText.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }, \"textContent: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, \"Used to set/ return the text value of the selected node and all its descendants.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    }, \"While setting the textContent property, any child nodes are removed. It is replaced by a single Text node containing the specified string.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }), \"To set the text of node \\u2013\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    }, \"node.textContent = text\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    }), \"To return the text of node \\u2013\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480\n      },\n      __self: this\n    }, \"node.textContent\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: textContent,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491\n      },\n      __self: this\n    }, \"innerText: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493\n      },\n      __self: this\n    }, \"This property also sets/ returns the text value of the selected node and all its descendants.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }, \"The innerText property returns the text, without spacing and the textContent property returns the text along with spacing.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }, \"Other differences:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    }, \"innerText\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    }, \"textContent\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    }, \"Returns the visible text contained in a node.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    }, \"Returns the full text.\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }, \"Much more performance-heavy, as it requires layout information to return the result.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }, \"It is not so much performance-heavy, as it doesn\\u2019t requires layout information to return the result.\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }, \"Defined only for HTMLElement objects.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    }, \"Defined for all Node objects.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }, \"16. What is the difference between HTMLCollection and NodeList\"), \"The main difference between an HTMLCollection and a NodeList is that one is live and one is static. This means that when an element is appended to the DOM, a live node will recognize the new element while a static node will not.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    }, \"HTMLCollection:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541\n      },\n      __self: this\n    }), \"The element methods \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }, \"getElementsByClassName()\"), \" and\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }, \"getElementsByTagName()\"), \" return a live HTMLCollection. It only includes the matching elements (e.g. class name or tag name) and does not include text nodes, it provides only two methods\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }, \"item\"), \" and \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }, \"namedItem\"), \".\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }, \"Ex. \"), \"All the elements with the class name of fruits is selected. The item() method is then used to access the fruit at index 0 and a class name of fruit__01 is added to that element.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: HTMLCollection,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561\n      },\n      __self: this\n    }, \"NodeList: \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    }, \"The element method \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565\n      },\n      __self: this\n    }, \"querySelectorAll()\"), \" returns a static NodeList. They look like arrays but are not.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568\n      },\n      __self: this\n    }, \"NodeLists have a defined forEach method as well as a few other methods including item, entries, keys, and values.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572\n      },\n      __self: this\n    }, \"NodeLists behave differently depending on how we access them. if we access elements using \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574\n      },\n      __self: this\n    }, \"childNodes\"), \", the returned list is live and will update as more elements are added to the node. If it\\u2019s accessed using \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576\n      },\n      __self: this\n    }, \"querySelectorAll()\"), \", the returned list is static and will not update if more elements are added to the node.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: NodeList,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590\n      },\n      __self: this\n    }, \"17. How can an HTMLCollection be traversed?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592\n      },\n      __self: this\n    }, \"If use .map, .filter, or .forEach on an HTML collection got this friendly error.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596\n      },\n      __self: this\n    }, \"Ex. \"), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    }, \"Uncatch TypeError: p.forEach is not a function at 'anonymous':1:3\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604\n      },\n      __self: this\n    }, \"We can interact with an HTML Collection as if it\\u2019s an array in many other ways. We can use index numbers to access data. It looks like an array. But it functions a bit differently. NodeList and HTMLCollection used somewhat interchangeably. They\\u2019re both DOM lists, but HTMLCollection contains DOM elements that are the same, whereas a nodeList can contain a variety of DOM elements. That\\u2019s why \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611\n      },\n      __self: this\n    }, \"querySelectorAll\"), \" \", \"returns a nodeList but \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    }, \"getElementsByTagName\"), \" returns an HTMLCollection. forEach works on a nodeList but not an HTMLCollection.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617\n      },\n      __self: this\n    }, \"Iterate over an HTMLCollection. With for loop/ while loop.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620\n      },\n      __self: this\n    }, \"Our HTMLCollection variable can now be iterated over like an array. If we don\\u2019t want to convert our HTMLCollection we can also use .call to use array methods:\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: traversed,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 633\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 634\n      },\n      __self: this\n    }, \"18. The difference between children and childNodes in javascript\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638\n      },\n      __self: this\n    }, \"childNodes:\"), \" It is a standard property that returns a collection of child elements of the specified element, including HTML nodes, all properties, and text nodes.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 642\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 643\n      },\n      __self: this\n    }, \"children:\"), \" A non-standard property that returns a collection of child elements of the specified element. But it only returns HTML nodes, not even text nodes. Although it is not a standard DOM property.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: childNodes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }, \"19. What is the difference between firstChild and firstElementChild?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661\n      },\n      __self: this\n    }, \"firstChild: \"), \"considers text entered in between html tags as a child element too in addition to html tags.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666\n      },\n      __self: this\n    }, \"firstElementChild: \"), \"ignores text and comments between html tags and only considers html elements as a child.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: firstElementChild,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679\n      },\n      __self: this\n    }, \"20. Name the two functions that are used to create an HTML element dynamically.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685\n      },\n      __self: this\n    }, \"document.createElement: \"), \"is used with an HTML tag to create the element. The textContent is then modified and then the class attribute is modified using setAttribute . This could also be used to add a data attribute. Finally the element is appended to the body using the body element's appendChild method.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 693\n      },\n      __self: this\n    }, \"createElement() method: \"), \"Can create and insert HTML elements at runtime.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 697\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: dynamically,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 706\n      },\n      __self: this\n    }, \"21. What is the difference between remove() and removeChild()\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 709\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710\n      },\n      __self: this\n    }, \"The removeChild and remove are methods to work with elements of DOM, these method removes the element from the DOM.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 714\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715\n      },\n      __self: this\n    }, \"removeChild(): \"), \"Remove the node, and can save it to use it again.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 718\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 719\n      },\n      __self: this\n    }, \"remove(): \"), \"Really remove the child.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 722\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 723\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: removeChild,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 730\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731\n      },\n      __self: this\n    }, \"22. What is the Temporal Dead Zone(TDZ) in ES6.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 733\n      },\n      __self: this\n    }, \"let and const are hoisted, but there is a period between entering scope and being declared where they cannot be accessed. This period is the TDZ.\"), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 738\n      },\n      __self: this\n    }, \"There is a misconception that says let/ const are not hoisted in JavaScript. According to ES6 specification, The variables are created when their containing Lexical Environment is instantiated but may not be accessed in any way until the variable\\u2019s LexicalBinding is evaluated.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 745\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Temporal,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 747\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754\n      },\n      __self: this\n    }, \"The variable is in a \\\"temporal dead zone\\\" from the start of the block until the initialization is processed.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 758\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 759\n      },\n      __self: this\n    }, \"23. Memoization\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 760\n      },\n      __self: this\n    }, \"Memoization is an optimizations technique that can be used to reduce time-consuming calculations by serving previous i/p to something called cache and returning the result from it.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 765\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: memorizations,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 766\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 772\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 773\n      },\n      __self: this\n    }, \"24. window\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 774\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: window,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 775\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 781\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 782\n      },\n      __self: this\n    }, \"25. Browser security\"), \"Each browser tab has its own separate bucket for running code (called execution environments) - this means that in most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab \\u2014 or on another website.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 788\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 789\n      },\n      __self: this\n    }, \"26. Server-side versus client-side code\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 790\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 791\n      },\n      __self: this\n    }, \"Client-side code is code that is run on the user's computer \\u2014 when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 796\n      },\n      __self: this\n    }, \"Server-side code on the other hand is run on the server, then its results are downloaded and displayed in the browser.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 800\n      },\n      __self: this\n    }, \"A web page with no dynamically updating content is referred to as static \\u2014 it just shows the same content all the time.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 805\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 806\n      },\n      __self: this\n    }, \"27. What is JSON Web Token?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 807\n      },\n      __self: this\n    }, \"Is a open standard(RFC) that securely transmitting information between parties as a JSON object. This information can be verifed and trusted because it is a digitally signed. JWTs can be signed using a secret or a public/ private key pair using RSA.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 814\n      },\n      __self: this\n    }, \"When should you use JSON Web Token? \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 815\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 816\n      },\n      __self: this\n    }, \"Authentication is the most scenario for using JWT. Once the user is logged in, each subsequent resquest will include the JWT.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 821\n      },\n      __self: this\n    }, \"Information exchange, JWT is a good way of securely transmitting information between parties.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 826\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 827\n      },\n      __self: this\n    }, \"28. What is the JSON Web Token structure?\"), \"JSON Web Tokens consist of three parts separated by dots (.), which are:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 830\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 831\n      },\n      __self: this\n    }, \"Header\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 832\n      },\n      __self: this\n    }, \"Payload\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 833\n      },\n      __self: this\n    }, \"Signature\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 835\n      },\n      __self: this\n    }), \"Therefore, a JWT typically looks like.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 837\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 838\n      },\n      __self: this\n    }, \"xxxxx.yyyyy.zzzzz\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 839\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 840\n      },\n      __self: this\n    }, \"29. Event Listeners\"), \"Real interactivity on a website requires event handlers.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 842\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: listeners,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 843\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 849\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 851\n      },\n      __self: this\n    }, \"30. How does the Internet Work?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 852\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 853\n      },\n      __self: this\n    }, \"Before we learn what the Internet is, we need to understand what a Network is. A network is a group of computers or other devices which are connected to eachother. For example, you at your home might have a network of computers and devices. Your friend living next door might have a similar network of devices. Their neighbor might have a similar network of devices. All these networks when connected together form the internet.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 854\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 855\n      },\n      __self: this\n    }, \" To send information over the internet, your computer breaks down the data into small pieces called packets. Each packet contains a portion of the information along with the address of the destination (like a website or an email server).\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 856\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 857\n      },\n      __self: this\n    }, \"The packets travel through a series of routers, which are specialized computers that act as traffic directors on the internet. These routers examine the address on each packet and send it along the most efficient path towards its destination.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 857\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 858\n      },\n      __self: this\n    }, \"The packets may take different routes and might arrive out of order at the destination. But don't worry, there's a system in place to handle this. Each packet also contains a sequence number, allowing the receiving computer to rearrange them correctly when they arrive.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 858\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 859\n      },\n      __self: this\n    }, \"When the packets reach their destination, they are reassembled into the original information. If you were accessing a website, for example, the web server would receive the packets and put them back together to display the webpage on your screen.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 859\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 860\n      },\n      __self: this\n    }, \"This process of breaking down data into packets, sending them over the internet, and reassembling them at the destination happens incredibly quickly, allowing us to browse websites, stream videos, and send messages almost instantly.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 860\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 861\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 861\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 862\n      },\n      __self: this\n    }, \"So, in summary, the internet is a vast network that connects computers worldwide. It works by breaking down information into packets, sending them through routers, and reassembling them at their destination. This process enables communication, sharing of information, and all the amazing things we can do online.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 862\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 864\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 865\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 867\n      },\n      __self: this\n    }, \"What is HTTP\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 868\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 869\n      },\n      __self: this\n    }, \"HTTP is a TCP/IP-based application layer communication protocol that standardizes how clients and servers communicate with each other. It defines how content is requested and transmitted across the internet. By application layer protocol, I mean that it's simply an abstraction layer that standardizes how hosts (clients and servers) communicate. HTTP itself depends on TCP/IP to get requests and responses between the client and server. By default, TCP port 80 is used, but other ports can also be used. HTTPS, however, uses port 443.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 869\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 870\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 870\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 871\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 871\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 872\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 872\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 873\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 873\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 874\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 874\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 876\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 877\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default withStyles(styles)(McqJs);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/javaScripts/deepJs/mcqjs.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","change","trim","thisKey","evals","forIn","continues","nonLabeledBlock","jsonsObj","textContent","HTMLCollection","NodeList","traversed","childNodes","firstElementChild","dynamically","removeChild","Temporal","memorizations","window","listeners","McqJs","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst change = `\ndocument.title=\"My New Title\";`.trim();\n\nconst thisKey = ``.trim();\n\nconst evals = `\nconst obj = [1, 2, [3, 4]];\nconst shallowCopy = obj.slice(); \n\nshallowCopy[2][0] = 99;\nconsole.log(obj); \n\n//2\nconst obj = { a: 1, b: { c: 2 } };\n\nconst shallowCopy = Object.assign({}, obj);\nconst shallowCopy2 = { ...obj };\n\nconsole.log(shallowCopy);\nconsole.log(shallowCopy2);\n\nshallowCopy.b.c = 3; \nconsole.log(obj); \n\n//3\nconst obj = {\n  name: \"John\",\n  age: 30,\n  hobbies: [\"reading\", \"swimming\"],\n};\n\nconst shallowCopy = Object.assign({}, obj);\nshallowCopy.hobbies.push(\"hiking\");\n\nconsole.log(obj.hobbies); \n\n\n\n//Deep Copy\nconst obj = [1, 2, [3, 4]];\nconst shallowCopy = JSON.parse(JSON.stringify(obj));\n\nshallowCopy[2][0] = 99;\nconsole.log(obj); \n\n\n//2\nconst obj = {\n  name: \"John\",\n  age: 30,\n  hobbies: [\"reading\", \"swimming\"],\n};\n\nconst deepCopy = JSON.parse(JSON.stringify(obj));\ndeepCopy.hobbies.push(\"hiking\");\n\nconsole.log(obj.hobbies); \n`.trim();\n\nconst forIn = `\nconst object = { a: 1, b: 2, c: 3 };\n\nfor (const property in object) {\n  console.log('$'{property}: '$'{object[property]});\n}`.trim();\n\nconst continues = `\nfunction continueFun() {\n  foo: for (var i = 0; i < 4; i++) {\n    for (var j = 0; j < 4; j++) {\n      if (i == j) {\n        console.log(\"continue\", i, j);\n        continue foo;\n      }\n\n      if ((j * i) % 2 == 1) {\n        continue;\n      }\n\n      if ((i * j) >= 3) {\n        console.log(\"break\", i, j);\n        break foo;\n      }\n    }\n  }\n}\n\ncontinueFun()\n`.trim();\n\nconst nonLabeledBlock = `function nonLabeledBlock(){\n  bar: {\n    console.log('hello');\n    break bar;\n    console.log('never runs');\n}\nconsole.log('welcome');\n}`.trim();\n\nconst jsonsObj = `\nconst obj1 = { name: \"John\", age: 30 };\nconst obj2 = { name: \"John\", age: 30 };\n\nconsole.log(obj1 == obj2); \n\n//2\nconst arr1 = [1, 2, 3];\nconst arr2 = [1, 2, 3];\nconst arr3 = arr1;\n\nconsole.log(arr1 == arr2);\nconsole.log(arr1 == arr3);\n\n\n// Deep\nconst num1 = 42;\nconst num2 = \"42\";\n\nconsole.log(num1 === num2); \n`.trim();\n\nconst textContent = `\n<body> \n<h3>Differences between innerText & textContent.</h3> \n<p id=\"demo\"> This element has extra\t spacing and contains \n<span>a span element</span>.</p> \n\n<button onclick=\"getInnerText()\">Get innerText</button> \n<button onclick=\"getTextContent()\">Get textContent</button> \n\n<p id=\"demo\"></p> \n<script> \n\tfunction getInnerText() { \n\talert(document.getElementById(\"demo\").innerText) \n\t} \n\n\tfunction getTextContent() { \n\talert(document.getElementById(\"demo\").textContent) \n\t} \n</script> \n</body> \n`.trim();\n\nconst HTMLCollection = `\nconst fruits = document.getElementsByClassName(‘fruits’);\nfruits.item(0).classList.add(‘fruit__01’)`.trim();\n\nconst NodeList = `\n const fruits = document.querySelectorAll(‘.fruits’);                           // returns static collection.\n\n const fruits = document.querySelector(‘.fruits’);                              // returns live collection.\n const childFruit = fruits.childNodes;`.trim();\n\nconst traversed = `\nArray.proptotype.map.call(p, tag => {\n  console.log(tag.innerText)\n})`.trim();\n\nconst childNodes = `\n<script type='text/javascript'>\n$(window).load(function(){\n    console.log(document.getElementById('dd').children.length);\n    console.log(document.getElementById('dd').childNodes.length);\n});\n</script>\n</head>\n<body>\n  <div id=\"dd\">\n    <p>Test paragraph.</p>\n    <div>\n      <p>Test paragraph 2.</p>\n    </div>\n    Text.\n  </div>\n</body>`.trim();\n\nconst firstElementChild = `\n<ul id=\"list\"><!-- a list item -->\n<li>Item1</li>\n<li>Item2</li>\n</ul>\n\n\n//js\n  var list = document.getElementById(\"list\");\n   \n  console.log(\"First child value is\",list.firstChild);\n   \n  console.log(\"First element child value is\",list.firstElementChild);\n`.trim();\n\nconst dynamically = `\n<body>\n    <button onclick=\"create()\">Create Heading</button>\n    <script>\n      function create() {\n        var h1 = document.createElement('h1');\n        h1.textContent = \"New Heading!!!\";\n        h1.setAttribute('class', 'note');\n        document.body.appendChild(h1);\n      }\n    </script>\n  </body>`.trim();\n\nconst removeChild = `\n//RemoveChild.\nlet p = document.querySelector( 'p' )\nlet removed = p.removeChild( p.firstChild )\nconsole.log( removed )                                                      //<i>Hi</i>\n\n\n//Remove\nlet p = document.querySelector( 'p' )\nlet removed = p.childNodes[0].remove()\nconsole.log( removed )                                                      // undefined\n`.trim();\n\nconst Temporal = ` \nvar foo = 'first';\nfunction main() {\n  console.log(foo);                                                                 //undefined\n  var foo = 'second';\n}\n\n\nlet foo = 'first';\nfunction main() {\n  console.log(foo);                                                                 //ReferenceError\n  let foo = 'second';\n}\n\nmain()\n`.trim();\n\nconst memorizations = `\nconst add = (n) => (n + 10);\nadd(9);\n\nconst memoizedAdd = () => {\n  let cache = {};\n  return (n) => {\n    if (n in cache) {\n      console.log('Fetching from cache');\n      return cache[n];\n    }\n    else {\n      console.log('Calculating result');\n      let result = n + 10;\n      cache[n] = result;\n      return result;\n    }\n  }\n}\n\nconst newAdd = memoizedAdd();\nconsole.time();\nconsole.log(newAdd(9));\nconsole.log(newAdd(9)); \nconsole.timeEnd();\n`.trim();\n\nconst window = `\n  var a = 2;\n  \n  (function IIFE(def) {\n     def(window);\n  })(function def(global) {\n     var a = 3;\n     console.log(a);                                                                              // 3\n     console.log(global.a);                                                                       // 2\n  });\n`.trim();\n\nconst listeners = `\n\n<button id=\"clickMe\">Click me</button>\n\n//1\ndocument.getElementById(\"clickMe\")\n.addEventListener(\"click\", () => {\n  console.log('button clicked')\n});\n\n\n//2 Couser With Event Listeners\nfunction attachedEventListeners(){\n  let count = 0;\ndocument.getElementById(\"clickMe\")\n.addEventListener(\"click\", () => {\n  console.log('button clicked', count++)\n  });\n}\n\nattachedEventListeners();`.trim();\n\nclass McqJs extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. What do you mean by JavaScript BOM?</h3>\n              BOM refers to “Browser Object Modal” that permits JavaScript to\n              “talk” to the browser, modern browsers, no standards apply same\n              BOMS – screen, history, window, location, timing, navigator, and\n              cookies.\n              <br />\n              <h3>\n                2. In what way we can change the title of the page in\n                JavaScript?\n              </h3>\n              <div style={titles}>\n                <PrismCode\n                  code={change}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>3. Explain JavaScript Cookies.</h3>\n              Cookies are the tiny test files that are properly stored in a\n              computer, and they get build when the user goes to the websites to\n              store some information that they require. <b>Ex. </b> User name\n              details and information about the shopping cart from earlier\n              visits.\n              <br />\n              <h3>4. Explain the role of deferred scripts in JavaScripts.</h3>\n              The HTML code’s parsing while the page is loading is stopped by\n              default until the script has not paused executing. If your server\n              is a little slow or the script is specifically heavy, then your\n              webpage will be delayed. While you are using Deferred, scripts\n              delays the execution for sometime of the script till the time the\n              HTML parser is running. This lessens the loading time of web pages\n              and get showed up faster.\n              <div style={titles}>\n                <PrismCode\n                  code={thisKey}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>5. Shallow Copy And Deep Copy</h3>\n              <b>Shallow Copy: </b><br/>\n              A shallow copy creates a new object or array and copies the references to the original elements.\n              <br/>\n              <ul>\n                <li>Object.assign()</li>\n                <li>spread operator ...</li>\n              </ul>\n              <br/>\n              <b>Deep Copy: </b><br/>\n              On the other hand, creates a completely new copy of the original object or array and all its nested elements.\n              <br/>\n              <b>There are different ways to achieve deep copies: </b>\n              <ul>\n                <li>JSON.parse()</li>\n                <li>JSON.stringify()</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={evals}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>7. For...In</h3>\n              <ul>\n                <li>\n                  A for...in loop will not find any property on the array.\n                </li>\n                <li>\n                  A for...in loop only iterates over enumerable, non-Symbol\n                  properties. Objects created from built–in constructors like\n                  Array and Object have inherited non–enumerable properties from\n                  Object.prototype and String.prototype, such as String's\n                  indexOf() method or Object's toString() method. The loop will\n                  iterate over all enumerable properties of the object itself\n                  and those the object inherits from its prototype chain.\n                </li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={forIn}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>9. continue and break</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={continues}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>10. non-labeled block</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={nonLabeledBlock}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>12. Shallow comparision And Deep comparision.</h3>\n              <ul>\n                <li>Shallow comparision true for primitive data type only. In derived data type is false.</li>\n                <li></li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={jsonsObj}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>15. Difference between textContent and innerText.</h3>\n              <b>textContent: </b>\n              <ul>\n                <li>\n                  Used to set/ return the text value of the selected node and\n                  all its descendants.\n                </li>\n                <li>\n                  While setting the textContent property, any child nodes are\n                  removed. It is replaced by a single Text node containing the\n                  specified string.\n                </li>\n              </ul>\n              <br />\n              To set the text of node –<br />\n              <b>node.textContent = text</b>\n              <br />\n              <br />\n              To return the text of node –<br />\n              <b>node.textContent</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={textContent}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>innerText: </b>\n              <ul>\n                <li>\n                  This property also sets/ returns the text value of the\n                  selected node and all its descendants.\n                </li>\n                <li>\n                  The innerText property returns the text, without spacing and\n                  the textContent property returns the text along with spacing.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <b>Other differences:</b>\n              <br />\n              <table>\n                <tr>\n                  <th>innerText</th>\n                  <th>textContent</th>\n                </tr>\n                <tr>\n                  <td>Returns the visible text contained in a node.</td>\n                  <td>Returns the full text.</td>\n                </tr>\n                <tr>\n                  <td>\n                    Much more performance-heavy, as it requires layout\n                    information to return the result.\n                  </td>\n                  <td>\n                    It is not so much performance-heavy, as it doesn’t requires\n                    layout information to return the result.\n                  </td>\n                </tr>\n                <tr>\n                  <td>Defined only for HTMLElement objects.</td>\n                  <td>Defined for all Node objects.</td>\n                </tr>\n              </table>\n              <br />\n              <h3>\n                16. What is the difference between HTMLCollection and NodeList\n              </h3>\n              The main difference between an HTMLCollection and a NodeList is\n              that one is live and one is static. This means that when an\n              element is appended to the DOM, a live node will recognize the new\n              element while a static node will not.\n              <br />\n              <br />\n              <b>HTMLCollection:</b>\n              <br />\n              The element methods <b>getElementsByClassName()</b> and{\" \"}\n              <b>getElementsByTagName()</b> return a live HTMLCollection. It\n              only includes the matching elements (e.g. class name or tag name)\n              and does not include text nodes, it provides only two methods{\" \"}\n              <b>item</b> and <b>namedItem</b>.\n              <br />\n              <br />\n              <b>Ex. </b>All the elements with the class name of fruits is\n              selected. The item() method is then used to access the fruit at\n              index 0 and a class name of fruit__01 is added to that element.\n              <div style={titles}>\n                <PrismCode\n                  code={HTMLCollection}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>NodeList: </b>\n              <br />\n              <ul>\n                <li>\n                  The element method <b>querySelectorAll()</b> returns a static\n                  NodeList. They look like arrays but are not.\n                </li>\n                <li>\n                  NodeLists have a defined forEach method as well as a few other\n                  methods including item, entries, keys, and values.\n                </li>\n                <li>\n                  NodeLists behave differently depending on how we access them.\n                  if we access elements using <b>childNodes</b>, the returned\n                  list is live and will update as more elements are added to the\n                  node. If it’s accessed using <b>querySelectorAll()</b>, the\n                  returned list is static and will not update if more elements\n                  are added to the node.\n                </li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={NodeList}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>17. How can an HTMLCollection be traversed?</h3>\n              <ul>\n                <li>\n                  If use .map, .filter, or .forEach on an HTML collection got\n                  this friendly error.\n                </li>\n                <b>Ex. </b>\n                <i>\n                  Uncatch TypeError: p.forEach is not a function at\n                  'anonymous':1:3\n                </i>\n                <br />\n                <br />\n\n                <li>\n                  We can interact with an HTML Collection as if it’s an array in\n                  many other ways. We can use index numbers to access data. It\n                  looks like an array. But it functions a bit differently.\n                  NodeList and HTMLCollection used somewhat interchangeably.\n                  They’re both DOM lists, but HTMLCollection contains DOM\n                  elements that are the same, whereas a nodeList can contain a\n                  variety of DOM elements. That’s why <b>querySelectorAll</b>{\" \"}\n                  returns a nodeList but <b>getElementsByTagName</b> returns an\n                  HTMLCollection. forEach works on a nodeList but not an\n                  HTMLCollection.\n                </li>\n\n                <li>\n                  Iterate over an HTMLCollection. With for loop/ while loop.\n                </li>\n                <li>\n                  Our HTMLCollection variable can now be iterated over like an\n                  array. If we don’t want to convert our HTMLCollection we can\n                  also use .call to use array methods:\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={traversed}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                18. The difference between children and childNodes in javascript\n              </h3>\n              <br />\n              <b>childNodes:</b> It is a standard property that returns a\n              collection of child elements of the specified element, including\n              HTML nodes, all properties, and text nodes.\n              <br />\n              <br />\n              <b>children:</b> A non-standard property that returns a collection\n              of child elements of the specified element. But it only returns\n              HTML nodes, not even text nodes. Although it is not a standard DOM\n              property.\n              <div style={titles}>\n                <PrismCode\n                  code={childNodes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                19. What is the difference between firstChild and\n                firstElementChild?\n              </h3>\n              <ul>\n                <li>\n                  <b>firstChild: </b>considers text entered in between html tags\n                  as a child element too in addition to html tags.\n                </li>\n                <br />\n                <li>\n                  <b>firstElementChild: </b>ignores text and comments between\n                  html tags and only considers html elements as a child.\n                </li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={firstElementChild}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                20. Name the two functions that are used to create an HTML\n                element dynamically.\n              </h3>\n              <ul>\n                <li>\n                  <b>document.createElement: </b>is used with an HTML tag to\n                  create the element. The textContent is then modified and then\n                  the class attribute is modified using setAttribute . This\n                  could also be used to add a data attribute. Finally the\n                  element is appended to the body using the body element's\n                  appendChild method.\n                </li>\n                <li>\n                  <b>createElement() method: </b>Can create and insert HTML\n                  elements at runtime.\n                </li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={dynamically}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                21. What is the difference between remove() and removeChild()\n              </h3>\n              <ul>\n                <li>\n                  The removeChild and remove are methods to work with elements\n                  of DOM, these method removes the element from the DOM.\n                </li>\n                <li>\n                  <b>removeChild(): </b>Remove the node, and can save it to use\n                  it again.\n                </li>\n                <li>\n                  <b>remove(): </b>Really remove the child.\n                </li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={removeChild}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>22. What is the Temporal Dead Zone(TDZ) in ES6.</b>\n              <br />\n              <p>\n                let and const are hoisted, but there is a period between\n                entering scope and being declared where they cannot be accessed.\n                This period is the TDZ.\n              </p>\n              <i>\n                There is a misconception that says let/ const are not hoisted in\n                JavaScript. According to ES6 specification, The variables are\n                created when their containing Lexical Environment is\n                instantiated but may not be accessed in any way until the\n                variable’s LexicalBinding is evaluated.\n              </i>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={Temporal}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>\n                The variable is in a \"temporal dead zone\" from the start of the\n                block until the initialization is processed.\n              </i>\n              <br />\n              <h3>23. Memoization</h3>\n              <p>\n                Memoization is an optimizations technique that can be used to\n                reduce time-consuming calculations by serving previous i/p to\n                something called cache and returning the result from it.\n              </p>\n              <div style={titles}>\n                <PrismCode\n                  code={memorizations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>24. window</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={window}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>25. Browser security</h3>\n              Each browser tab has its own separate bucket for running code\n              (called execution environments) - this means that in most cases\n              the code in each tab is run completely separately, and the code in\n              one tab cannot directly affect the code in another tab — or on\n              another website.\n              <br />\n              <h3>26. Server-side versus client-side code</h3>\n              <ul>\n                <li>\n                  Client-side code is code that is run on the user's computer —\n                  when a web page is viewed, the page's client-side code is\n                  downloaded, then run and displayed by the browser.\n                </li>\n                <li>\n                  Server-side code on the other hand is run on the server, then\n                  its results are downloaded and displayed in the browser.\n                </li>\n                <li>\n                  A web page with no dynamically updating content is referred to\n                  as static — it just shows the same content all the time.\n                </li>\n              </ul>\n              <br />\n              <h3>27. What is JSON Web Token?</h3>\n              <p>\n                Is a open standard(RFC) that securely transmitting information\n                between parties as a JSON object. This information can be\n                verifed and trusted because it is a digitally signed. JWTs can\n                be signed using a secret or a public/ private key pair using\n                RSA.\n              </p>\n              <b>When should you use JSON Web Token? </b>\n              <ul>\n                <li>\n                  Authentication is the most scenario for using JWT. Once the\n                  user is logged in, each subsequent resquest will include the\n                  JWT.\n                </li>\n                <li>\n                  Information exchange, JWT is a good way of securely\n                  transmitting information between parties.\n                </li>\n              </ul>\n              <br />\n              <b>28. What is the JSON Web Token structure?</b>\n              JSON Web Tokens consist of three parts separated by dots (.),\n              which are:\n              <ul>\n                <li>Header</li>\n                <li>Payload</li>\n                <li>Signature</li>\n              </ul>\n              <br />\n              Therefore, a JWT typically looks like.\n              <br />\n              <b>xxxxx.yyyyy.zzzzz</b>\n              <br />\n              <h3>29. Event Listeners</h3>\n              Real interactivity on a website requires event handlers.\n              <div style={titles}>\n                <PrismCode\n                  code={listeners}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>30. How does the Internet Work?</h3>\n              <ul>\n                <li>Before we learn what the Internet is, we need to understand what a Network is. A network is a group of computers or other devices which are connected to eachother. For example, you at your home might have a network of computers and devices. Your friend living next door might have a similar network of devices. Their neighbor might have a similar network of devices. All these networks when connected together form the internet.\n             </li><br/>\n                <li> To send information over the internet, your computer breaks down the data into small pieces called packets. Each packet contains a portion of the information along with the address of the destination (like a website or an email server).\n              </li><br/>\n                <li>The packets travel through a series of routers, which are specialized computers that act as traffic directors on the internet. These routers examine the address on each packet and send it along the most efficient path towards its destination.</li><br/>\n                <li>The packets may take different routes and might arrive out of order at the destination. But don't worry, there's a system in place to handle this. Each packet also contains a sequence number, allowing the receiving computer to rearrange them correctly when they arrive.</li><br/>\n                <li>When the packets reach their destination, they are reassembled into the original information. If you were accessing a website, for example, the web server would receive the packets and put them back together to display the webpage on your screen.</li><br/>\n                <li>This process of breaking down data into packets, sending them over the internet, and reassembling them at the destination happens incredibly quickly, allowing us to browse websites, stream videos, and send messages almost instantly.</li><br/>\n                <br/><br/>\n                <li>So, in summary, the internet is a vast network that connects computers worldwide. It works by breaking down information into packets, sending them through routers, and reassembling them at their destination. This process enables communication, sharing of information, and all the amazing things we can do online.</li><br/>\n              </ul>\n              <br/>\n              <br/>\n\n              <h3>What is HTTP</h3>\n                <ul>\n                  <li>HTTP is a TCP/IP-based application layer communication protocol that standardizes how clients and servers communicate with each other. It defines how content is requested and transmitted across the internet. By application layer protocol, I mean that it's simply an abstraction layer that standardizes how hosts (clients and servers) communicate. HTTP itself depends on TCP/IP to get requests and responses between the client and server. By default, TCP port 80 is used, but other ports can also be used. HTTPS, however, uses port 443.</li><br/>\n                  <li></li><br/>\n                  <li></li><br/>\n                  <li></li><br/>\n                  <li></li><br/>\n                  <li></li><br/>\n                </ul>\n              <br/>\n              <br/>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(McqJs);\n"]},"metadata":{},"sourceType":"module"}