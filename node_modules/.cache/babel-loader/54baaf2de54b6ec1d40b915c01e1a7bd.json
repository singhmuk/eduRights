{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';import Ngrx from'../../../assets/ngrx.png';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var counters=\"\\n//app.module.ts\\nimport { NgModule } from '@angular/core';\\nimport { BrowserModule } from '@angular/platform-browser';\\nimport { StoreModule } from '@ngrx/store';\\nimport { counterReducer } from './counter.reducer';\\nimport { AppComponent } from './app.component';\\n\\n@NgModule({\\n  declarations: [\\n    AppComponent\\n  ],\\n  imports: [\\n    BrowserModule,\\n    StoreModule.forRoot({ count: counterReducer })\\n  ],\\n  providers: [],\\n  bootstrap: [AppComponent]\\n})\\nexport class AppModule { }\\n\\n\\n//app.component.ts\\nimport { Component } from \\\"@angular/core\\\";\\nimport {Store} from \\\"@ngrx/store\\\";\\nimport { Observable } from \\\"rxjs\\\";\\nimport {increment, decrement, reset} from \\\"./counter.actions\\\";\\n\\n@Component({\\n  selector:'app-root',\\n  template:'\\n    <button id=\\\"increment\\\" (click)=\\\"increment()\\\">Increment</button>\\n            {{count | async}}\\n    <button id=\\\"decrement\\\" (click)=\\\"decrement()\\\">Decrement</button>\\n    <button id=\\\"reset\\\" (click)=\\\"reset()\\\">Reset</button>\\n  '\\n})\\n\\nexport class AppComponent{\\n  count:Observable<number>;\\n\\n  constructor(private store: Store<{count:number}>){\\n    this.count=store.select('count')\\n  }\\n\\n  increment(){\\n    this.store.dispatch(increment())\\n  }\\n\\n  decrement(){\\n    this.store.dispatch(decrement())\\n  }\\n\\n  reset(){\\n    this.store.dispatch(reset())\\n  }\\n}\\n\".trim();var ngrxcounters=\"\\n//counter.actions.ts\\nimport { createAction } from '@ngrx/store';\\n\\nexport const increment = createAction('[Counter Component] Increment');\\nexport const decrement = createAction('[Counter Component] Decrement');\\nexport const reset = createAction('[Counter Component] Reset');\\n\\n\\n//counter.reducer.ts\\nimport { createReducer, on } from '@ngrx/store';\\nimport { increment, decrement, reset } from './counter.actions';\\n\\nexport const initialState = 0;\\n\\nexport const counterReducer = createReducer(\\n  initialState,\\n  on(increment, (state) => state + 1),\\n  on(decrement, (state) => state - 1),\\n  on(reset, (state) => 0)\\n);\\n\".trim();var addcomponents=\"\\n//app.module.ts\\nimport { NgModule } from '@angular/core';\\nimport { BrowserModule } from '@angular/platform-browser';\\nimport { FormsModule } from '@angular/forms';\\nimport { StoreModule } from '@ngrx/store';\\nimport { AppComponent } from './app.component';\\nimport { todoReducer } from './reducers';\\n\\n@NgModule({\\n  imports: [\\n    BrowserModule,\\n    FormsModule,\\n    StoreModule.forRoot({ todoState: todoReducer })\\n  ],\\n  declarations: [AppComponent],\\n  bootstrap: [AppComponent]\\n})\\nexport class AppModule { }\\n\\n\\n//app.component.ts\\nimport { Component } from '@angular/core';\\nimport { Store } from '@ngrx/store';\\nimport { Todo } from './interfaces';\\nimport { Add, Remove } from './actions';\\nimport { Observable } from 'rxjs';\\n\\n\\n@Component({\\n  selector: 'my-app',\\n  template:'\\n  <form>\\n    \\t<input type=\\\"text\\\" placeholder=\\\"Add new TODO task\\\" [(ngModel)]=\\\"newTodoText\\\" [ngModelOptions]=\\\"{standalone: true}\\\"/>\\n      <button type=\\\"submit\\\" (click)=\\\"addTodo()\\\">Add</button>\\n  </form>\\n  <div *ngFor=\\\"let todo of todos | async\\\">\\n    <span>{{todo.text}}</span>\\n    <div>\\n      <button (click)=\\\"removeTodo(todo.id)\\\">Delete</button>\\n    </div>\\n  </div>\\n  '\\n})\\nexport class AppComponent {\\n  todos: Observable<Todo[]>;\\n  newTodoText: string = \\\"\\\";\\n  constructor(private store: Store<{ todoState: Array<Todo> }>) {\\n    this.todos = store.select(state => state.todoState);\\n  }\\n  addTodo() {\\n    this.store.dispatch(Add({ text: this.newTodoText || 'Untitled task' }));\\n    this.newTodoText = '';\\n  }\\n\\n  removeTodo(id:any) {\\n    this.store.dispatch(Remove({ id }));\\n  }\\n}\\n\".trim();var ngrxcomponents=\"\\n//interfaces.ts\\nexport interface Todo {\\n  text: string;\\n  todo: boolean;\\n  id: string;\\n}\\n\\n\\n//actions.ts\\nimport {createAction, props} from '@ngrx/store';\\n\\nexport const Add = createAction('[Todo Component] Add', props<{text: string}>());\\nexport const Remove = createAction('[Todo Component] Remove', props<{id: string}>());\\nexport const Toggle = createAction('[Todo Component] Toggle', props<{id: string}>());\\n\\n\\n//reducers.ts\\nimport { createReducer, on } from '@ngrx/store';\\nimport { Todo } from './interfaces';\\nimport { Add, Remove, Toggle } from './actions';\\nimport * as uuid from 'uuid';\\n\\nconst initialState: Array<Todo> = [];\\n\\nexport const todoReducer = createReducer(initialState,\\n  on(Add, (state, action) => ([...state, { id: uuid.v4(), text: action.text, todo: true }])),\\n  on(Remove, (state, action) => state.filter(i => i.id !== action.id)),\\n  on(Toggle, (state, action) => state.map(i => i.id === action.id ? {...i, todo: !i.todo} : i)),\\n)\\n\".trim();var NgrxCounter=/*#__PURE__*/function(_Component){_inherits(NgrxCounter,_Component);function NgrxCounter(){_classCallCheck(this,NgrxCounter);return _possibleConstructorReturn(this,_getPrototypeOf(NgrxCounter).apply(this,arguments));}_createClass(NgrxCounter,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Counter\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:counters,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"ngrxcounters\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:ngrxcounters,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Add - Delete\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:addcomponents,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"ngrxadd\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:ngrxcomponents,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return NgrxCounter;}(Component);export default withStyles(styles)(NgrxCounter);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/ngrxCounter.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Ngrx","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","counters","trim","ngrxcounters","addcomponents","ngrxcomponents","NgrxCounter","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Ngrx from '../../../assets/ngrx.png';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst counters = `\n//app.module.ts\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { StoreModule } from '@ngrx/store';\nimport { counterReducer } from './counter.reducer';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    StoreModule.forRoot({ count: counterReducer })\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n//app.component.ts\nimport { Component } from \"@angular/core\";\nimport {Store} from \"@ngrx/store\";\nimport { Observable } from \"rxjs\";\nimport {increment, decrement, reset} from \"./counter.actions\";\n\n@Component({\n  selector:'app-root',\n  template:'\n    <button id=\"increment\" (click)=\"increment()\">Increment</button>\n            {{count | async}}\n    <button id=\"decrement\" (click)=\"decrement()\">Decrement</button>\n    <button id=\"reset\" (click)=\"reset()\">Reset</button>\n  '\n})\n\nexport class AppComponent{\n  count:Observable<number>;\n\n  constructor(private store: Store<{count:number}>){\n    this.count=store.select('count')\n  }\n\n  increment(){\n    this.store.dispatch(increment())\n  }\n\n  decrement(){\n    this.store.dispatch(decrement())\n  }\n\n  reset(){\n    this.store.dispatch(reset())\n  }\n}\n`.trim();\n\nconst ngrxcounters = `\n//counter.actions.ts\nimport { createAction } from '@ngrx/store';\n\nexport const increment = createAction('[Counter Component] Increment');\nexport const decrement = createAction('[Counter Component] Decrement');\nexport const reset = createAction('[Counter Component] Reset');\n\n\n//counter.reducer.ts\nimport { createReducer, on } from '@ngrx/store';\nimport { increment, decrement, reset } from './counter.actions';\n\nexport const initialState = 0;\n\nexport const counterReducer = createReducer(\n  initialState,\n  on(increment, (state) => state + 1),\n  on(decrement, (state) => state - 1),\n  on(reset, (state) => 0)\n);\n`.trim();\n\nconst addcomponents = `\n//app.module.ts\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { StoreModule } from '@ngrx/store';\nimport { AppComponent } from './app.component';\nimport { todoReducer } from './reducers';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    StoreModule.forRoot({ todoState: todoReducer })\n  ],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n//app.component.ts\nimport { Component } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Todo } from './interfaces';\nimport { Add, Remove } from './actions';\nimport { Observable } from 'rxjs';\n\n\n@Component({\n  selector: 'my-app',\n  template:'\n  <form>\n    \t<input type=\"text\" placeholder=\"Add new TODO task\" [(ngModel)]=\"newTodoText\" [ngModelOptions]=\"{standalone: true}\"/>\n      <button type=\"submit\" (click)=\"addTodo()\">Add</button>\n  </form>\n  <div *ngFor=\"let todo of todos | async\">\n    <span>{{todo.text}}</span>\n    <div>\n      <button (click)=\"removeTodo(todo.id)\">Delete</button>\n    </div>\n  </div>\n  '\n})\nexport class AppComponent {\n  todos: Observable<Todo[]>;\n  newTodoText: string = \"\";\n  constructor(private store: Store<{ todoState: Array<Todo> }>) {\n    this.todos = store.select(state => state.todoState);\n  }\n  addTodo() {\n    this.store.dispatch(Add({ text: this.newTodoText || 'Untitled task' }));\n    this.newTodoText = '';\n  }\n\n  removeTodo(id:any) {\n    this.store.dispatch(Remove({ id }));\n  }\n}\n`.trim();\n\nconst ngrxcomponents = `\n//interfaces.ts\nexport interface Todo {\n  text: string;\n  todo: boolean;\n  id: string;\n}\n\n\n//actions.ts\nimport {createAction, props} from '@ngrx/store';\n\nexport const Add = createAction('[Todo Component] Add', props<{text: string}>());\nexport const Remove = createAction('[Todo Component] Remove', props<{id: string}>());\nexport const Toggle = createAction('[Todo Component] Toggle', props<{id: string}>());\n\n\n//reducers.ts\nimport { createReducer, on } from '@ngrx/store';\nimport { Todo } from './interfaces';\nimport { Add, Remove, Toggle } from './actions';\nimport * as uuid from 'uuid';\n\nconst initialState: Array<Todo> = [];\n\nexport const todoReducer = createReducer(initialState,\n  on(Add, (state, action) => ([...state, { id: uuid.v4(), text: action.text, todo: true }])),\n  on(Remove, (state, action) => state.filter(i => i.id !== action.id)),\n  on(Toggle, (state, action) => state.map(i => i.id === action.id ? {...i, todo: !i.todo} : i)),\n)\n`.trim();\n\n\nclass NgrxCounter extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Counter</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={counters}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>ngrxcounters</b>\n              <div style={titles}>\n                <PrismCode\n                  code={ngrxcounters}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Add - Delete</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={addcomponents}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>ngrxadd</b>\n              <div style={titles}>\n                <PrismCode\n                  code={ngrxcomponents}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(NgrxCounter));\n"]},"metadata":{},"sourceType":"module"}