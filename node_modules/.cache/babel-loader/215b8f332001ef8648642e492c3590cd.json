{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/javaScripts/deepJs/logic.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst starSig = `\n// *\n// **\n// ***\n\nfunction star(){\n  var start=\"\";\n  for(let i=0; i<3; i++){\n    for(let j=1; j<=(i+1); j++){\n      start += \"*\"\n    }\n    start +=\"\\n\";\n  }\n  \n  console.log(start);\n}\n\nstar();\n`.trim();\nconst Pyramid = ` \n// Upside pyramid.\nfunction pyraminds() {\n  let i, j, k, str = \"\";\n\n  for (i=0; i<5; i++) {\n    for (j=1; j<(5 - i); j++) {\n      str += \" \";\n    }\n    for (k=1; k<=(2 * i +1); k++) {\n      str += \"*\";\n    }\n\n    str += 'newLine';\n  }\n  console.log(str)\n}\n\npyraminds();\n\n\n// downside pyramid.\nfor (i=1; i<5; i++) {\n  for (j=0; j<i; j++) {\n    str += \" \";\n  }\n  for (k=(5 - i)*2; k>1; k--) {\n    str += \"*\";\n  }\n\n  str += 'newLine';\n}\nconsole.log(str)\n `.trim();\nconst insersonSort = `\nvar insersionSort = function(array){\n  for(var i =1; i< array.length; i++){\n    for(var j=0;j<i;j++){\n      if(array[i] < array[j]){\n        var temp = array.splice(i, 1);\n        array.splice(j,0,temp[0]);\n      }\n    }\n  }\n  \nconsole.log(array)\nreturn array;\n}\n\ninsersionSort([3,5,1,9,6,2,1])\n`.trim();\nconst mergSort = `\nfunction mergeSort(arr){\n    if(arr.length < 2) return arr;\n    var middle = Math.floor(arr.length/2);\n    var left = arr.slice(0, middle);\n    var right = arr.slice(middle, arr.length);\n    return merge(mergeSort(left), mergeSort(right));\n }\n \n function merge(left, right){\n  var result = [];\n    while(left.length && right.length){\n      if(left[0] == right[0]){\n        result.push(left.shift());\n      }\n  else{\n    result.push(right.shift());}\n  }\n  \n  while(left.length) result.push(left.shift());\n  while(right.length) result.push(right.shift());\n  console.log(result)\n  return result;\n }\n mergeSort([3,2,1])`.trim();\nconst quicksort = `\nfunction QuickSort(arr){\n    if(arr.length <= 1) return arr;\n        var pivot = arr[arr.length -1];\n        var left = [];\n        var right = [];\n        for(var i=0;i<arr.length-1;i++){\n        if(arr[i] < pivot){\n        left.push(arr[i])\n      }\n    else right.push(arr[i])\n    }\n    return [...QuickSort(left), pivot, ...QuickSort(right)]\n }\n console.log(QuickSort([5,4,2,7,9]))\n `.trim();\nconst selectionSort = `function selectionSort(arr){\n  var minIdx, temp,\n  len = arr.length;\n    for(var i = 0; i < len; i++){\n    minIdx = i;\n      for(var j = i+1; j<len; j++){\n        if(arr[j]<arr[minIdx]){\n        minIdx = j;\n      }\n    }\n    \n    temp = arr[i];\n    arr[i] = arr[minIdx];\n    arr[minIdx] = temp;\n   }\n \n console.log(arr)\n return arr;\n }\n \n selectionSort([7,5,2,4,3,9]);`.trim();\nconst Permutations = `\nfunction arm(str){\n  let currentChar = [];\n  let remaingChar = [];\n  let result = [];\n\n  if(str.length === 0) return \"\";\n  if(str.length === 1) return str;\n\n  for(let i=0; i<str.length; i++){\n    currentChar = str[i];\n    remaingChar = str.slice(0,i) + str.slice(i+1);\n    for(let j=0; j<remaingChar.length; j++){\n      result.push(currentChar + arm(remaingChar)[j]);\n    }\n  }\n  return result;\n}\n\nconsole.log(arm('abc'));\n  `.trim();\nconst Pattern = `\nlet i,j, str=\"\";                                                                    //Square pattern.\nfor(i=1; i<=5; i++){\n  for(j=0; j<5; j++){\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nconsole.log(str);\n\n\nlet i, j, str = \"\";                                                               //Right pascal star pattern.\nfor (i=1; i<=5; i++) {\n  for (j=0; j<i; j++) {\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nfor (i=1; i<=(5-1); i++) {\n  for (j=0; j<(5-i); j++) {\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nconsole.log(str);\n`.trim();\nconst amount = `\nfunction minCoinChange(coins, amount) {\n  const minCoins = new Array(amount + 1).fill(Infinity); \n  minCoins[0] = 0;                            // there are 0 ways to make amount 0 with positive coin values\n \n  for(let coin of coins) {                    // look at one coin at a time\n    for(let i = 0; i <= amount; i += 1) {\n     \n      if((i - coin) >= 0) minCoins[i] = Math.min(minCoins[i], minCoins[i - coin] + 1);\n    }\n  }\n  \n                        // if the value remains Infinity, it means that no coin combination can make that amount\n  return minCoins[amount] !== Infinity ? minCoins[amount] : -1;\n}\n\nconsole.log(minCoinChange([1,2,3],13));`.trim();\nconst armstrong = `\n  function arm() {\n    const num = prompt('Enter a three-digit positive integer: ');\n    let sum=0,  remainder=0;\n    let temp=num;\n  \n    while(temp>0){\n      remainder = temp%10;\n      sum += remainder*remainder*remainder;\n      temp = parseInt(temp/10)\n    }\n  \n    if(sum == num){\n      console.log('Armstrong', num);\n    }\n    else{\n      console.log('Not an Armstrong', num);\n    }\n  }\n  \n  arm()`.trim();\n\nclass Logic extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, \"1. Star\"), \"newLine = \\\\n\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: starSig,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, \"1. Pyramind\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Pyramid,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, \"2. Pattern\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Pattern,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, \"3. Armstrong Number\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: armstrong,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, \"4. Permutations\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Permutations,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, \"5.Given an amount of money, return the minimum number of coins needed to make that change.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: amount,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, \"6. Insersion Sort\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: insersonSort,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, \"7. Merg Sort\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: mergSort,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, \"8. Quick Sort\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: quicksort,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, \"9. Selection Sort\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: selectionSort,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Logic);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/javaScripts/deepJs/logic.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","starSig","trim","Pyramid","insersonSort","mergSort","quicksort","selectionSort","Permutations","Pattern","amount","armstrong","Logic","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst starSig = `\n// *\n// **\n// ***\n\nfunction star(){\n  var start=\"\";\n  for(let i=0; i<3; i++){\n    for(let j=1; j<=(i+1); j++){\n      start += \"*\"\n    }\n    start +=\"\\n\";\n  }\n  \n  console.log(start);\n}\n\nstar();\n`.trim();\n\nconst Pyramid = ` \n// Upside pyramid.\nfunction pyraminds() {\n  let i, j, k, str = \"\";\n\n  for (i=0; i<5; i++) {\n    for (j=1; j<(5 - i); j++) {\n      str += \" \";\n    }\n    for (k=1; k<=(2 * i +1); k++) {\n      str += \"*\";\n    }\n\n    str += 'newLine';\n  }\n  console.log(str)\n}\n\npyraminds();\n\n\n// downside pyramid.\nfor (i=1; i<5; i++) {\n  for (j=0; j<i; j++) {\n    str += \" \";\n  }\n  for (k=(5 - i)*2; k>1; k--) {\n    str += \"*\";\n  }\n\n  str += 'newLine';\n}\nconsole.log(str)\n `.trim()\n\nconst insersonSort = `\nvar insersionSort = function(array){\n  for(var i =1; i< array.length; i++){\n    for(var j=0;j<i;j++){\n      if(array[i] < array[j]){\n        var temp = array.splice(i, 1);\n        array.splice(j,0,temp[0]);\n      }\n    }\n  }\n  \nconsole.log(array)\nreturn array;\n}\n\ninsersionSort([3,5,1,9,6,2,1])\n`.trim()\n\nconst mergSort = `\nfunction mergeSort(arr){\n    if(arr.length < 2) return arr;\n    var middle = Math.floor(arr.length/2);\n    var left = arr.slice(0, middle);\n    var right = arr.slice(middle, arr.length);\n    return merge(mergeSort(left), mergeSort(right));\n }\n \n function merge(left, right){\n  var result = [];\n    while(left.length && right.length){\n      if(left[0] == right[0]){\n        result.push(left.shift());\n      }\n  else{\n    result.push(right.shift());}\n  }\n  \n  while(left.length) result.push(left.shift());\n  while(right.length) result.push(right.shift());\n  console.log(result)\n  return result;\n }\n mergeSort([3,2,1])`.trim()\n\nconst quicksort = `\nfunction QuickSort(arr){\n    if(arr.length <= 1) return arr;\n        var pivot = arr[arr.length -1];\n        var left = [];\n        var right = [];\n        for(var i=0;i<arr.length-1;i++){\n        if(arr[i] < pivot){\n        left.push(arr[i])\n      }\n    else right.push(arr[i])\n    }\n    return [...QuickSort(left), pivot, ...QuickSort(right)]\n }\n console.log(QuickSort([5,4,2,7,9]))\n `.trim()\n\nconst selectionSort = `function selectionSort(arr){\n  var minIdx, temp,\n  len = arr.length;\n    for(var i = 0; i < len; i++){\n    minIdx = i;\n      for(var j = i+1; j<len; j++){\n        if(arr[j]<arr[minIdx]){\n        minIdx = j;\n      }\n    }\n    \n    temp = arr[i];\n    arr[i] = arr[minIdx];\n    arr[minIdx] = temp;\n   }\n \n console.log(arr)\n return arr;\n }\n \n selectionSort([7,5,2,4,3,9]);`.trim()\n\n\n\nconst Permutations = `\nfunction arm(str){\n  let currentChar = [];\n  let remaingChar = [];\n  let result = [];\n\n  if(str.length === 0) return \"\";\n  if(str.length === 1) return str;\n\n  for(let i=0; i<str.length; i++){\n    currentChar = str[i];\n    remaingChar = str.slice(0,i) + str.slice(i+1);\n    for(let j=0; j<remaingChar.length; j++){\n      result.push(currentChar + arm(remaingChar)[j]);\n    }\n  }\n  return result;\n}\n\nconsole.log(arm('abc'));\n  `.trim()\n\nconst Pattern = `\nlet i,j, str=\"\";                                                                    //Square pattern.\nfor(i=1; i<=5; i++){\n  for(j=0; j<5; j++){\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nconsole.log(str);\n\n\nlet i, j, str = \"\";                                                               //Right pascal star pattern.\nfor (i=1; i<=5; i++) {\n  for (j=0; j<i; j++) {\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nfor (i=1; i<=(5-1); i++) {\n  for (j=0; j<(5-i); j++) {\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nconsole.log(str);\n`.trim();\n\nconst amount = `\nfunction minCoinChange(coins, amount) {\n  const minCoins = new Array(amount + 1).fill(Infinity); \n  minCoins[0] = 0;                            // there are 0 ways to make amount 0 with positive coin values\n \n  for(let coin of coins) {                    // look at one coin at a time\n    for(let i = 0; i <= amount; i += 1) {\n     \n      if((i - coin) >= 0) minCoins[i] = Math.min(minCoins[i], minCoins[i - coin] + 1);\n    }\n  }\n  \n                        // if the value remains Infinity, it means that no coin combination can make that amount\n  return minCoins[amount] !== Infinity ? minCoins[amount] : -1;\n}\n\nconsole.log(minCoinChange([1,2,3],13));`.trim();\n\n  const armstrong = `\n  function arm() {\n    const num = prompt('Enter a three-digit positive integer: ');\n    let sum=0,  remainder=0;\n    let temp=num;\n  \n    while(temp>0){\n      remainder = temp%10;\n      sum += remainder*remainder*remainder;\n      temp = parseInt(temp/10)\n    }\n  \n    if(sum == num){\n      console.log('Armstrong', num);\n    }\n    else{\n      console.log('Not an Armstrong', num);\n    }\n  }\n  \n  arm()`.trim();\n\nclass Logic extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Star</h3>\n              newLine = \\n\n              <div style={titles}>\n                <PrismCode\n                  code={starSig}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>1. Pyramind</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Pyramid}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n             \n              <h3>2. Pattern</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Pattern}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Armstrong Number</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={armstrong}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Permutations</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Permutations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>5.Given an amount of money, return the minimum number of coins needed to make that change.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={amount}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Insersion Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={insersonSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7. Merg Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={mergSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>8. Quick Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={quicksort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>9. Selection Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={selectionSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Logic));\n"]},"metadata":{},"sourceType":"module"}