{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var format=\"\\ntxt = \\\"My name is John, and I am {}\\\"\\n    \\nmy_string = \\\"\\\"\\\"Hello                                              \\nWorld\\\"\\\"\\\"\\n\\nprint(type(my_string))\\nprint(my_string[1])\\nprint(len(my_string))\\nprint(my_string.strip())                            \\nprint(my_string.lower())\\nprint(my_string.upper())\\nprint(my_string.replace(\\\"H\\\", \\\"J\\\"))\\nprint(my_string.split(\\\",\\\"))\\nprint(len(my_string))  \\nprint(\\\"hello\\\".startswith(\\\"he\\\"))                                      # startswith and endswith\\nprint(\\\"hello\\\".endswith(\\\"llo\\\"))\\nprint(\\\"Hello\\\".find(\\\"o\\\"))                                             # find first index of a given substring, -1 otherwise\\nprint(\\\"Hello\\\".count(\\\"e\\\"))\\n\\n\\nmy_list = ['How', 'are', 'you', 'doing']                              \\nstr = ' '.join(my_list)                                              # join elements of a list into a string\\nprint(str)\\n\\nb = my_string[0]                                                     # get character by referring to index\\nb = my_string[1:3]                                                   # Substrings with slicing\\nb = my_string[::2]                                                   # start to end with every second item\\nb = my_string[::-1] \\n\".trim();var iterating=\"\\nmy_string = 'Hello'\\nfor i in my_string:\\n    print(i)\".trim();var formates=\"\\na = \\\"Hello {0} and {1}\\\".format(\\\"Bob\\\", \\\"Tom\\\")                            # use braces as placeholders\\na = \\\"Hello {} and {}\\\".format(\\\"Bob\\\", \\\"Tom\\\")                              # positions are optional for the default order\\na = \\\"The integer value is {}\\\".format(2)\\n\\nprint(a)\\n\\n\\na = \\\"The float value is {0:.3f}\\\".format(2.1234)                         # some special format rules for numbers\\na = \\\"The float value is {0:e}\\\".format(2.1234)\\na = \\\"The binary value is {0:b}\\\".format(2)\\n\\nprint(a)\\n\\n\\nprint(\\\"Hello %s and %s\\\" % (\\\"Bob\\\", \\\"Tom\\\"))                               # must be a tuple for multiple arguments\\nval =  3.14159265359\\nprint(\\\"The decimal value is %d\\\" % val)                                  # old style formatting by using % operator\\n\".trim();var fstrings=\"\\nname = \\\"Eric\\\"\\nage = 25\\na = f\\\"Hello, {name}. You are {age}.\\\"\\nprint(a)\\n\\npi = 3.14159\\na = f\\\"Pi is {pi:.3f}\\\"\\nprint(a)\\n\\na = f\\\"The value is {2*60}\\\"                                   # f-Strings are evaluated at runtime, which allows expressions\\nprint(a)\".trim();var concatenation=\"\\nfrom timeit import default_timer as timer\\nmy_list = [\\\"a\\\"] * 1000000\\n\\nstart = timer()\\na = \\\"\\\".join(my_list)\\nend = timer()\\nprint(\\\"concatenate string with join(): %.5f\\\" % (end - start))\\n\".trim();var splits=\"\\nimport re\\n\\n#split\\nstr = \\\"Split string into list\\\"\\nnewStr = str.split()\\nprint(newStr) \\n\\n\\n#2 sub\\nnewStr = re.sub(\\\"s\\\", \\\"9\\\", str)\\nprint(newStr)\\n\\n\\n#3 subn\\nstr = re.subn('ov', '~*' , 'The rain in Spain', flags = re.IGNORECASE)\\nprint(str)\".trim();var simpleFunction=\"\\ndef sum(a,b):\\n    c=a+b\\n    return c\\nobj=sum(2,3)\\nprint(obj)\\n\\n\\n#2\\nf=lambda a,b:a+b\\nobj=f(2,3)\\nprint(obj)\".trim();var lambda=\"\\nf=lambda n: 1 if n==0 else n+f(n-1)\\nprint(f(5))\\n\\n#2\\nlist(filter(lambda x:x>6,range(9))) [7, 8]\\n\\nlist(map(lambda x:x**2,range(5))) [0, 1, 4, 9, 16, 25]\\n\\nfrom functools import reduce \\nreduce(lambda x,y:x-y,[1,2,3,4,5]) -13\".trim();var filter=\"\\nf = lambda x: x+10                                          \\nval1 = f(5)\\nval2 = f(100)\\nprint(val1, val2)\\n\\n\\nf = lambda x,y: x*y                          \\nval3 = f(2,10)\\nval4 = f(7,5)\\nprint(val3, val4)\".trim();var variations=\"\\ndef myfunc(n):\\n    return lambda x: x * n\\n\\ndoubler = myfunc(2)\\nprint(doubler(6))\\n\".trim();var sorting=\"\\npoints2D = [(1, 9), (4, 1), (5, -3), (10, 2)]\\nsorted_by_y = sorted(points2D, key= lambda x: x[1])\\nprint(sorted_by_y)\\n\\nmylist = [- 1, -4, -2, -3, 1, 2, 3, 4]\\nsorted_by_abs = sorted(mylist, key= lambda x: abs(x))\\nprint(sorted_by_abs)\".trim();var mapFun=\"\\na  = [1, 2, 3, 4, 5, 6]\\nb = list(map(lambda x: x * 2 , a))\\n\\n\\nc = [x*2 for x in a]                                                # Use map if you have an already defined function\\nprint(b)\\nprint(c)\".trim();var evaluates=\"\\na = [1, 2, 3, 4, 5, 6, 7, 8]\\nb = list(filter(lambda x: (x%2 == 0) , a))\\n\\nc = [x for x in a if x%2 == 0]\\nprint(b)\\nprint(c)\".trim();var reduces=\"\\nfrom functools import reduce\\na = [1, 2, 3, 4]\\nproduct_a = reduce(lambda x, y: x*y, a)\\nprint(product_a)\\nsum_a = reduce(lambda x, y: x+y, a)\\nprint(sum_a)\".trim();var StringPy=/*#__PURE__*/function(_Component){_inherits(StringPy,_Component);function StringPy(){_classCallCheck(this,StringPy);return _possibleConstructorReturn(this,_getPrototypeOf(StringPy).apply(this,arguments));}_createClass(StringPy,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Strings\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Python strings are immutable.\"),React.createElement(\"li\",null,\"Use triple quotes for multiline strings.\")),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"count(): \"),\"Returns the number of times a specified value occurs in a string.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"endswith(): \"),\"Returns true if the string ends with the specified value.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"find(): \"),\"Searches the string for a specified value and returns the position.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"format(): \"),\"Formats specified values in a string.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"format_map(): \"),\"Formats specified values in a string\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"index(): \"),\"Searches the string for a specified value and returns the position.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"isalnum(): \"),\"Returns True if all characters in the string are alphanumeric.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"isalpha(): \"),\"Returns True if all characters in the string are in the alphabet.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"isdecimal(): \"),\"Returns True if all characters in the string are decimals.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"isdigit(): \"),\"Returns True if all characters in the string are digits.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"isidentifier(): \"),\"Returns True if the string is an identifier.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"islower(): \"),\"Returns True if all characters in the string are lower case.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"isupper(): \")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"lower(): \"),\"Converts a string into lower case.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"isnumeric(): \"),\"Returns True if all characters in the string are numeric.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"isprintable(): \"),\"Returns True if all characters in the string are printable.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"isspace(): \"),\"Returns True if all characters in the string are whitespaces.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"istitle(): \"),\"Returns True if the string follows the rules of a title.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"join(): \"),\"Joins the elements of an iterable to the end of the string.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"ljust(): \"),\"Returns a left justified version of the string.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"lstrip(): \"),\"Returns a left trim version of the string.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"maketrans(): \"),\"Returns a translation table to be used in translations.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"partition(): \"),\"Returns a tuple where the string is parted into three parts.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"rpartition(): \"),\"Returns a tuple where the string is parted into three parts.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"replace(): \"),\"Returns a string where a specified value is replaced with a specified value.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"rfind(): \"),\"Searches the string for a specified value and returns the last position of where it was found.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"rindex(): \"),\"Searches the string for a specified value and returns the last position of where it was found.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"rjust(): \"),\"Returns a right justified version of the string.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"rstrip(): \"),\"Returns a right trim version of the string.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"rsplit(): \"),\"Splits the string at the specified separator, and returns a list.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"split(): \"),\"Splits the string at the specified separator, and returns a list\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"splitlines(): \"),\"Splits the string at line breaks and returns a list.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"startswith(): \"),\"Returns true if the string starts with the specified value.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"strip(): \"),\"Returns a trimmed version of the string.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"swapcase(): \"),\"Swaps cases, lower case becomes upper case.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"title(): \"),\"Converts the first character of each word to upper case.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"translate(): \"),\"Returns a translated string.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"zfill(): \"),\"Fills the string with a specified number of 0 values at the beginning.\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:format,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Iterating\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:iterating,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Format\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:formates,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. f-Strings\"),\"Use the variables directly inside the braces.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:fstrings,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"More on immutability and concatenation\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"since a string is immutable, adding strings with + always creates a new string, and therefore is expensive for multiple operations.\"),React.createElement(\"li\",null,\"join method is much faster.\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:concatenation,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. What are split(), sub(), and subn() methods in Python?\"),\"These methods belong to Python RegEx,  \\u2018re\\u2019 module and are used to modify strings.\",React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"split():\"),\"Used to split a given string into a list.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"sub(): \"),\"Used to find a substring where a regex pattern matches, and then it replaces the matched substring with a different string.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"subn(): \"),\"similar to the sub() method, but it returns the new string, along with the number of replacements.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:splits,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. Lambda\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:simpleFunction,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. Lambda with Map. Filter\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:lambda,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"7. Lambda functions\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"A lambda function is defined without a name.\"),React.createElement(\"li\",null,\"A lambda function can take any number of arguments, but have only one expression.\"),React.createElement(\"li\",null,\"Anonymous functions are defined using the lambda keyword.\"),React.createElement(\"li\",null,\"It's most common use is as an argument to higher-order functions.\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:filter,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"8. Lamdba inside another function\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:variations,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"9. Custom sorting using a lambda function as key parameter\"),\"The key function transforms each element before sorting.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:sorting,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"10. Use lambda for map function\"),\"map(func, seq), transforms each element with the function.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:mapFun,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"11. Use lambda for filter function\"),\"filter(func, seq), returns all elements for which func evaluates to True.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:evaluates,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"12. Reduce\"),\"reduce(func, seq), repeatedly applies the func to the elements and returns a single value. func takes 2 arguments.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:reduces,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return StringPy;}(Component);export default withStyles(styles)(StringPy);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/pythone/deeppy/stringPy.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","format","trim","iterating","formates","fstrings","concatenation","splits","simpleFunction","lambda","filter","variations","sorting","mapFun","evaluates","reduces","StringPy","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst format = `\ntxt = \"My name is John, and I am {}\"\n    \nmy_string = \"\"\"Hello                                              \nWorld\"\"\"\n\nprint(type(my_string))\nprint(my_string[1])\nprint(len(my_string))\nprint(my_string.strip())                            \nprint(my_string.lower())\nprint(my_string.upper())\nprint(my_string.replace(\"H\", \"J\"))\nprint(my_string.split(\",\"))\nprint(len(my_string))  \nprint(\"hello\".startswith(\"he\"))                                      # startswith and endswith\nprint(\"hello\".endswith(\"llo\"))\nprint(\"Hello\".find(\"o\"))                                             # find first index of a given substring, -1 otherwise\nprint(\"Hello\".count(\"e\"))\n\n\nmy_list = ['How', 'are', 'you', 'doing']                              \nstr = ' '.join(my_list)                                              # join elements of a list into a string\nprint(str)\n\nb = my_string[0]                                                     # get character by referring to index\nb = my_string[1:3]                                                   # Substrings with slicing\nb = my_string[::2]                                                   # start to end with every second item\nb = my_string[::-1] \n`.trim();\n\nconst iterating = `\nmy_string = 'Hello'\nfor i in my_string:\n    print(i)`.trim();\n\nconst formates = `\na = \"Hello {0} and {1}\".format(\"Bob\", \"Tom\")                            # use braces as placeholders\na = \"Hello {} and {}\".format(\"Bob\", \"Tom\")                              # positions are optional for the default order\na = \"The integer value is {}\".format(2)\n\nprint(a)\n\n\na = \"The float value is {0:.3f}\".format(2.1234)                         # some special format rules for numbers\na = \"The float value is {0:e}\".format(2.1234)\na = \"The binary value is {0:b}\".format(2)\n\nprint(a)\n\n\nprint(\"Hello %s and %s\" % (\"Bob\", \"Tom\"))                               # must be a tuple for multiple arguments\nval =  3.14159265359\nprint(\"The decimal value is %d\" % val)                                  # old style formatting by using % operator\n`.trim();\n\nconst fstrings = `\nname = \"Eric\"\nage = 25\na = f\"Hello, {name}. You are {age}.\"\nprint(a)\n\npi = 3.14159\na = f\"Pi is {pi:.3f}\"\nprint(a)\n\na = f\"The value is {2*60}\"                                   # f-Strings are evaluated at runtime, which allows expressions\nprint(a)`.trim();\n\nconst concatenation = `\nfrom timeit import default_timer as timer\nmy_list = [\"a\"] * 1000000\n\nstart = timer()\na = \"\".join(my_list)\nend = timer()\nprint(\"concatenate string with join(): %.5f\" % (end - start))\n`.trim();\n\nconst splits = `\nimport re\n\n#split\nstr = \"Split string into list\"\nnewStr = str.split()\nprint(newStr) \n\n\n#2 sub\nnewStr = re.sub(\"s\", \"9\", str)\nprint(newStr)\n\n\n#3 subn\nstr = re.subn('ov', '~*' , 'The rain in Spain', flags = re.IGNORECASE)\nprint(str)`.trim();\n\nconst simpleFunction = `\ndef sum(a,b):\n    c=a+b\n    return c\nobj=sum(2,3)\nprint(obj)\n\n\n#2\nf=lambda a,b:a+b\nobj=f(2,3)\nprint(obj)`.trim();\n\nconst lambda = `\nf=lambda n: 1 if n==0 else n+f(n-1)\nprint(f(5))\n\n#2\nlist(filter(lambda x:x>6,range(9))) [7, 8]\n\nlist(map(lambda x:x**2,range(5))) [0, 1, 4, 9, 16, 25]\n\nfrom functools import reduce \nreduce(lambda x,y:x-y,[1,2,3,4,5]) -13`.trim();\n\nconst filter = `\nf = lambda x: x+10                                          \nval1 = f(5)\nval2 = f(100)\nprint(val1, val2)\n\n\nf = lambda x,y: x*y                          \nval3 = f(2,10)\nval4 = f(7,5)\nprint(val3, val4)`.trim();\n\nconst variations = `\ndef myfunc(n):\n    return lambda x: x * n\n\ndoubler = myfunc(2)\nprint(doubler(6))\n`.trim();\n\nconst sorting = `\npoints2D = [(1, 9), (4, 1), (5, -3), (10, 2)]\nsorted_by_y = sorted(points2D, key= lambda x: x[1])\nprint(sorted_by_y)\n\nmylist = [- 1, -4, -2, -3, 1, 2, 3, 4]\nsorted_by_abs = sorted(mylist, key= lambda x: abs(x))\nprint(sorted_by_abs)`.trim();\n\nconst mapFun = `\na  = [1, 2, 3, 4, 5, 6]\nb = list(map(lambda x: x * 2 , a))\n\n\nc = [x*2 for x in a]                                                # Use map if you have an already defined function\nprint(b)\nprint(c)`.trim();\n\nconst evaluates = `\na = [1, 2, 3, 4, 5, 6, 7, 8]\nb = list(filter(lambda x: (x%2 == 0) , a))\n\nc = [x for x in a if x%2 == 0]\nprint(b)\nprint(c)`.trim();\n\nconst reduces = `\nfrom functools import reduce\na = [1, 2, 3, 4]\nproduct_a = reduce(lambda x, y: x*y, a)\nprint(product_a)\nsum_a = reduce(lambda x, y: x+y, a)\nprint(sum_a)`.trim();\n\nclass StringPy extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Strings</h3>\n              <ul>\n                <li>Python strings are immutable.</li>\n                <li>Use triple quotes for multiline strings.</li>\n              </ul>\n              <br />\n\n              <ul>\n                <li><b>count(): </b>Returns the number of times a specified value occurs in a string.</li>\n                <li><b>endswith(): </b>Returns true if the string ends with the specified value.</li>\n                <li><b>find(): </b>Searches the string for a specified value and returns the position.</li>\n                <li><b>format(): </b>Formats specified values in a string.</li>\n                <li><b>format_map(): </b>Formats specified values in a string</li>\n                <li><b>index(): </b>Searches the string for a specified value and returns the position.</li>\n                <li><b>isalnum(): </b>Returns True if all characters in the string are alphanumeric.</li>\n                <li><b>isalpha(): </b>Returns True if all characters in the string are in the alphabet.</li>\n                <li><b>isdecimal(): </b>Returns True if all characters in the string are decimals.</li>\n                <li><b>isdigit(): </b>Returns True if all characters in the string are digits.</li>\n                <li><b>isidentifier(): </b>Returns True if the string is an identifier.</li>\n                <li><b>islower(): </b>Returns True if all characters in the string are lower case.</li>\n                <li><b>isupper(): </b></li>\n                <li><b>lower(): </b>Converts a string into lower case.</li>\n                <li><b>isnumeric(): </b>Returns True if all characters in the string are numeric.</li>\n                <li><b>isprintable(): </b>Returns True if all characters in the string are printable.</li>\n                <li><b>isspace(): </b>Returns True if all characters in the string are whitespaces.</li>\n                <li><b>istitle(): </b>Returns True if the string follows the rules of a title.</li>\n                <li><b>join(): </b>Joins the elements of an iterable to the end of the string.</li>\n                <li><b>ljust(): </b>Returns a left justified version of the string.</li>\n                <li><b>lstrip(): </b>Returns a left trim version of the string.</li>\n                <li><b>maketrans(): </b>Returns a translation table to be used in translations.</li>\n                <li><b>partition(): </b>Returns a tuple where the string is parted into three parts.</li>\n                <li><b>rpartition(): </b>Returns a tuple where the string is parted into three parts.</li>\n                <li><b>replace(): </b>Returns a string where a specified value is replaced with a specified value.</li>\n                <li><b>rfind(): </b>Searches the string for a specified value and returns the last position of where it was found.</li>\n                <li><b>rindex(): </b>Searches the string for a specified value and returns the last position of where it was found.</li>\n                <li><b>rjust(): </b>Returns a right justified version of the string.</li>\n                <li><b>rstrip(): </b>Returns a right trim version of the string.</li>\n                <li><b>rsplit(): </b>Splits the string at the specified separator, and returns a list.</li>\n                <li><b>split(): </b>Splits the string at the specified separator, and returns a list</li>\n                <li><b>splitlines(): </b>Splits the string at line breaks and returns a list.</li>\n                <li><b>startswith(): </b>Returns true if the string starts with the specified value.</li>\n                <li><b>strip(): </b>Returns a trimmed version of the string.</li>\n                <li><b>swapcase(): </b>Swaps cases, lower case becomes upper case.</li>\n                <li><b>title(): </b>Converts the first character of each word to upper case.</li>\n                <li><b>translate(): </b>Returns a translated string.</li>\n                <li><b>zfill(): </b>Fills the string with a specified number of 0 values at the beginning.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={format}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Iterating</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={iterating}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Format</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={formates}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. f-Strings</h3>\n              Use the variables directly inside the braces.\n              <div style={titles}>\n                <PrismCode\n                  code={fstrings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>More on immutability and concatenation</h3>\n              <ul>\n                <li>since a string is immutable, adding strings with + always\n                  creates a new string, and therefore is expensive for multiple operations.</li>\n                <li>join method is much faster.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={concatenation}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>4. What are split(), sub(), and subn() methods in Python?</h3>\n              These methods belong to Python RegEx,  ‘re’ module and are used to modify strings.\n              <ul>\n                <li><b>split():</b>Used to split a given string into a list.</li>\n                <li><b>sub(): </b>Used to find a substring where a regex pattern matches,\n                  and then it replaces the matched substring with a different string.</li>\n                <li><b>subn(): </b>similar to the sub()\n                  method, but it returns the new string, along with the number of replacements.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={splits}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. Lambda</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={simpleFunction}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Lambda with Map. Filter</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={lambda}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7. Lambda functions</h3>\n              <ul>\n                <li>A lambda function is defined without a name.</li>\n                <li>A lambda function can take any number of arguments, but have only one expression.</li>\n                <li>Anonymous functions are defined using the lambda keyword.</li>\n                <li>It's most common use is as an argument to higher-order functions.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={filter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>8. Lamdba inside another function</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={variations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>9. Custom sorting using a lambda function as key parameter</h3>\n              The key function transforms each element before sorting.\n              <div style={titles}>\n                <PrismCode\n                  code={sorting}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>10. Use lambda for map function</h3>\n              map(func, seq), transforms each element with the function.\n              <div style={titles}>\n                <PrismCode\n                  code={mapFun}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>11. Use lambda for filter function</h3>\n              filter(func, seq), returns all elements for which func evaluates to True.\n              <div style={titles}>\n                <PrismCode\n                  code={evaluates}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>12. Reduce</h3>\n              reduce(func, seq), repeatedly applies the func to the elements and returns a single value.\n              func takes 2 arguments.\n              <div style={titles}>\n                <PrismCode\n                  code={reduces}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(StringPy));\n"]},"metadata":{},"sourceType":"module"}