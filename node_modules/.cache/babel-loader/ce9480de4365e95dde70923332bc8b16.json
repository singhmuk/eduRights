{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import\"../../ReactJs/styles.css\";import Sidebar from\"../sidebar\";import PrismCode from\"../prismCode\";var titles={backgroundColor:\"#F0F8FF\",padding:\"1px\",fontSize:\"16px\"};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var randoms=\"\\nconst App = () => {\\n  const [step, setStep] = useState(10);\\n\\n  const handleRandom = () => {\\n    setStep(Math.floor(Math.random() * 10) + 1);\\n  };\\n\\n  return (\\n    <div>\\n      <p>{step}</p>\\n      <button onClick={handleRandom}>Generate</button>\\n    </div>\\n  );\\n};\\n\".trim();var numberLib=\"\".trim();var numberFor=\"\".trim();var converts=\"\\nconst App = () => {\\n  const [binary, setBinary] = useState(\\\"\\\");\\n  const [decimal, setDecimal] = useState(\\\"\\\");\\n\\n  const convertBinaryToDecimal = () => {\\n    let decimalNumber = parseInt(binary, 2);\\n    setDecimal(decimalNumber);\\n  };\\n\\n  return (\\n    <div>\\n      <h2>Binary to Decimal Converter</h2>\\n      <input\\n        value={binary}\\n        onChange={(e) => setBinary(e.target.value)}\\n        placeholder=\\\"Enter a binary number\\\"\\n      />\\n      <button onClick={convertBinaryToDecimal}>Convert</button>\\n      {decimal && <p>Decimal Number: {decimal}</p>}\\n    </div>\\n  );\\n};\\n\".trim();var pureComp=\"\\nconst App = () => {\\n  const [form, setForm] = useState({\\n    name: \\\"\\\",\\n    email: \\\"\\\",\\n    password: \\\"\\\",\\n    confirmPassword: \\\"\\\",\\n  });\\n\\n  const [errors, setErrors] = useState({});\\n\\n  const handleChange = (event) => {\\n    const { name, value } = event.target;\\n\\n    setForm({ ...form, [name]: value });\\n\\n    if (errors[name]) {\\n      setErrors({ ...errors, [name]: \\\"\\\" });\\n    }\\n  };\\n\\n  const handleSubmit = (event) => {\\n    event.preventDefault();\\n\\n    // Perform form validation\\n    let errors = {};\\n\\n    if (!form.name.trim()) {\\n      errors.name = \\\"Name is required\\\";\\n    }\\n\\n    if (!form.email.trim()) {\\n      errors.email = \\\"Email is required\\\";\\n    } else if (!/S+@S+.S+/.test(form.email)) {\\n      errors.email = \\\"Invalid email address\\\";\\n    }\\n\\n    if (!form.password.trim()) {\\n      errors.password = \\\"Password is required\\\";\\n    } else if (form.password.length < 8) {\\n      errors.password = \\\"Password must be at least 8 characters\\\";\\n    }\\n\\n    if (form.confirmPassword !== form.password) {\\n      errors.confirmPassword = \\\"Passwords do not match\\\";\\n    }\\n\\n    setErrors(errors);\\n\\n    if (Object.keys(errors).length === 0) {\\n      console.log(\\\"Form submitted!\\\");\\n    }\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <div>\\n        <label htmlFor=\\\"name\\\">Name:</label>\\n        <input\\n          type=\\\"text\\\"\\n          id=\\\"name\\\"\\n          name=\\\"name\\\"\\n          value={form.name}\\n          onChange={handleChange}\\n        />\\n        {errors.name && <span>{errors.name}</span>}\\n      </div>\\n      <div>\\n        <label htmlFor=\\\"email\\\">Email:</label>\\n        <input\\n          type=\\\"email\\\"\\n          id=\\\"email\\\"\\n          name=\\\"email\\\"\\n          value={form.email}\\n          onChange={handleChange}\\n        />\\n        {errors.email && <span>{errors.email}</span>}\\n      </div>\\n      <div>\\n        <label htmlFor=\\\"password\\\">Password:</label>\\n        <input\\n          type=\\\"password\\\"\\n          id=\\\"password\\\"\\n          name=\\\"password\\\"\\n          value={form.password}\\n          onChange={handleChange}\\n        />\\n        {errors.password && <span>{errors.password}</span>}\\n      </div>\\n      <div>\\n        <label htmlFor=\\\"confirmPassword\\\">Confirm Password:</label>\\n        <input\\n          type=\\\"password\\\"\\n          id=\\\"confirmPassword\\\"\\n          name=\\\"confirmPassword\\\"\\n          value={form.confirmPassword}\\n          onChange={handleChange}\\n        />\\n        {errors.confirmPassword && <span>{errors.confirmPassword}</span>}\\n      </div>\\n      <button type=\\\"submit\\\">Submit</button>\\n    </form>\\n  );\\n};\\n}\".trim();var NumberForm=/*#__PURE__*/function(_Component){_inherits(NumberForm,_Component);function NumberForm(){_classCallCheck(this,NumberForm);return _possibleConstructorReturn(this,_getPrototypeOf(NumberForm).apply(this,arguments));}_createClass(NumberForm,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Random Number\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:randoms,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Number format\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:numberLib,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Number format without lib\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:numberFor,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. Convert Binary to Decimal\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:converts,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. Form Validation\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:pureComp,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null)))));}}]);return NumberForm;}(Component);export default withStyles(styles)(NumberForm);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/numberFormats.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","randoms","trim","numberLib","numberFor","converts","pureComp","NumberForm","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst randoms = `\nconst App = () => {\n  const [step, setStep] = useState(10);\n\n  const handleRandom = () => {\n    setStep(Math.floor(Math.random() * 10) + 1);\n  };\n\n  return (\n    <div>\n      <p>{step}</p>\n      <button onClick={handleRandom}>Generate</button>\n    </div>\n  );\n};\n`.trim();\n\nconst numberLib = ``.trim();\n\nconst numberFor = ``.trim();\n\nconst converts = `\nconst App = () => {\n  const [binary, setBinary] = useState(\"\");\n  const [decimal, setDecimal] = useState(\"\");\n\n  const convertBinaryToDecimal = () => {\n    let decimalNumber = parseInt(binary, 2);\n    setDecimal(decimalNumber);\n  };\n\n  return (\n    <div>\n      <h2>Binary to Decimal Converter</h2>\n      <input\n        value={binary}\n        onChange={(e) => setBinary(e.target.value)}\n        placeholder=\"Enter a binary number\"\n      />\n      <button onClick={convertBinaryToDecimal}>Convert</button>\n      {decimal && <p>Decimal Number: {decimal}</p>}\n    </div>\n  );\n};\n`.trim();\n\nconst pureComp = `\nconst App = () => {\n  const [form, setForm] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n\n  const [errors, setErrors] = useState({});\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setForm({ ...form, [name]: value });\n\n    if (errors[name]) {\n      setErrors({ ...errors, [name]: \"\" });\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    // Perform form validation\n    let errors = {};\n\n    if (!form.name.trim()) {\n      errors.name = \"Name is required\";\n    }\n\n    if (!form.email.trim()) {\n      errors.email = \"Email is required\";\n    } else if (!/\\S+@\\S+\\.\\S+/.test(form.email)) {\n      errors.email = \"Invalid email address\";\n    }\n\n    if (!form.password.trim()) {\n      errors.password = \"Password is required\";\n    } else if (form.password.length < 8) {\n      errors.password = \"Password must be at least 8 characters\";\n    }\n\n    if (form.confirmPassword !== form.password) {\n      errors.confirmPassword = \"Passwords do not match\";\n    }\n\n    setErrors(errors);\n\n    if (Object.keys(errors).length === 0) {\n      console.log(\"Form submitted!\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <label htmlFor=\"name\">Name:</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          name=\"name\"\n          value={form.name}\n          onChange={handleChange}\n        />\n        {errors.name && <span>{errors.name}</span>}\n      </div>\n      <div>\n        <label htmlFor=\"email\">Email:</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          name=\"email\"\n          value={form.email}\n          onChange={handleChange}\n        />\n        {errors.email && <span>{errors.email}</span>}\n      </div>\n      <div>\n        <label htmlFor=\"password\">Password:</label>\n        <input\n          type=\"password\"\n          id=\"password\"\n          name=\"password\"\n          value={form.password}\n          onChange={handleChange}\n        />\n        {errors.password && <span>{errors.password}</span>}\n      </div>\n      <div>\n        <label htmlFor=\"confirmPassword\">Confirm Password:</label>\n        <input\n          type=\"password\"\n          id=\"confirmPassword\"\n          name=\"confirmPassword\"\n          value={form.confirmPassword}\n          onChange={handleChange}\n        />\n        {errors.confirmPassword && <span>{errors.confirmPassword}</span>}\n      </div>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n}`.trim();\n\nclass NumberForm extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Random Number</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={randoms}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>2. Number format</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={numberLib}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>3. Number format without lib</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={numberFor}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>4. Convert Binary to Decimal</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={converts}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. Form Validation</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={pureComp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(NumberForm);\n"]},"metadata":{},"sourceType":"module"}