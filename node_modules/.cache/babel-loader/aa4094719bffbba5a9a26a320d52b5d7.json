{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var commonArray=\"\\nvar mockData=[];\\nvar mockData2 = [6,7,8,9,23];\\nvar commonEle = [];\\nfunction myCtrl($scope, $http){\\n    $http({\\n        method:'get',\\n        url:'https://jsonplaceholder.typicode.com/users'\\n    }).then((res) => {\\n        person = res.data;\\n        person.map(val=>{\\n            mockData.push(val.id)\\n        })\\n\\n    var common = mockData.filter(item=>{\\n        return mockData2.includes(item)\\n    })\\n\\n    for(var i=0; i<=common.length; i++){\\n        commonEle.push(common[i])\\n    }\\n    console.log(\\\"commonEle\\\",commonEle);\\n    })\\n}\".trim();var commonStr=\"var str='';\\nvar str2='';\\nvar dict = {};\\nfunction myCtrl($scope, $http){\\n    $http({\\n        method:'get',\\n        url:'https://jsonplaceholder.typicode.com/users'\\n    }).then(mySuccess = (res) => {\\n        person = res.data;\\n        person.map(val=>{\\n            str=val.name;\\n            str2=val.username;\\n        })\\n        \\n        for(var i=0; i < str.length; i++) {\\n            dict[str.charAt(i)] = 1;\\n          }\\n          console.log('str',dict);\\n\\n          var commonChars =[];\\n      for(var i=0; i < str2.length; i++) {\\n        if( dict[str2.charAt(i)] == 1) {\\n          commonChars.push(str2.charAt(i)); // this is optional we can simply print\\n        }\\n        console.log('str2',commonChars);  \\n\\n      }\\n      \\n      dict = commonChars.join(\\\"\\\"); \\n      console.log('commonChars',dict);\\n    })\\n}\".trim();var arrObj=\"var arr = [];\\nfunction myCtrl($scope, $http){\\n    $http({\\n        method:'get',\\n        url:'https://jsonplaceholder.typicode.com/users'\\n    }).then(mySuccess = (res) => {\\n        person = res.data;\\n        \\n        console.log('arr',person)\\n        console.log('obj',...person)\\n        \\n       })\\n}\".trim();var objArr=\"var obj = {};\\nvar objKey = [];\\nfunction myCtrl($scope, $http){\\n    $http({\\n        method:'get',\\n        url:'https://jsonplaceholder.typicode.com/users'\\n    }).then(mySuccess = (res) => {\\n        person = res.data;\\n        person.map(val=>{\\n            obj=val;\\n        })\\n        console.log('obj',obj)\\n\\n        //Convert the keys to Array using - Object.keys()\\n        objKey = Object.keys(obj)\\n        console.log('objKey',objKey)\\n\\n        //Converts the Values to Array using - Object.values()\\n        objVal = Object.values(obj)\\n        console.log('objVal',objVal)\\n\\n        //Converts both keys and values using - Object.entries()\\n        objAll = Object.entries(obj)\\n        console.log('objAll',objAll)\\n       })\\n}\".trim();var sumAll=\"var arr=[];\\nvar sum = 0;\\nfunction myCtrl($scope, $http){\\n    $http({\\n        method:'get',\\n        url:'https://jsonplaceholder.typicode.com/users'\\n    }).then(mySuccess = (res) => {\\n        person = res.data;\\n        person.map(val=>{\\n            arr.push(val.id);\\n        })\\n        \\n        var sum = arr.reduce((a, i) => {\\n            return a + i;\\n          });\\n        console.log('sum',sum)\\n       })\\n}\".trim();var dotVal=\"var person=[];\\nvar personEmail=[];\\nfunction myCtrl($scope, $http){\\n    $http({\\n        method:'get',\\n        url:'https://jsonplaceholder.typicode.com/users'\\n    }).then(mySuccess = (res) => {\\n        $scope.person = res.data;\\n        $scope.person.map(val=>{\\n             personEmail.push(val.email);\\n        })\\n        console.log('personEmail',personEmail)\\n        $scope.personEmail=personEmail\\n    })\\n}\".trim();var lastMatch=\"\\nvar mockData=[];\\n var apiId = 10;\\n var names = [];\\nfunction myCtrl($scope, $http){\\n    $http({\\n        method:'get',\\n        url:'https://jsonplaceholder.typicode.com/users'\\n    }).then(mySuccess = (res) => {\\n        $scope.person = res.data;\\n        $scope.person.map(val=>{\\n             mockData.push(val.id);\\n             if(val.id == apiId){\\n                names.push(val.name)\\n                for(let i=0; i<=names.length; i++){\\n                    console.log('inside loop',names)\\n                }\\n             }\\n        })\\n    })\\n}\\n\".trim();var functions=\"\\nvar app = angular.module(\\\"myApp\\\", []);\\napp.controller(\\\"myCtrl\\\", myCtrl);\\n\\nvar mainId=1;\\nvar subParameters=[];\\nvar subParametersIds=[];\\nvar matchingData=[];\\n\\nfunction myCtrl ($scope, $http){\\n      $http({\\n        method:'get',\\n        url:'https://jsonplaceholder.typicode.com/users'\\n      }).then(res => {\\n        $scope.person = res.data;\\n          \\n        for(var i = 0; i < $scope.person.length; i++){\\n         // console.log('json placeholder data in loop',$scope.person[i].id)\\n         if(mainId == $scope.person[i].id){\\n             // console.log('only match id',$scope.person[i].id)\\n             \\n             $scope.person.map(score=>{\\n                 if(subParametersIds.indexOf(score.id)==-1){\\n                     // console.log('only unique records',score.id)\\n                     let newObj={\\\"id\\\":score.id, \\\"name\\\":score.name,'value':[]}\\n                     // console.log('push object',newObj)\\n                     $scope.newObj = newObj.value.push(score.address.zipcode)\\n                     // console.log('after push object',newObj)\\n                     subParametersIds.push(score.id);\\n                     $scope.subParameters = subParameters.push(newObj);\\n                     \\n                     let scores={\\\"ids\\\":[\\\"2\\\"]}\\n                     // console.log('hard coded',scores.ids)\\n                     \\n                     var index=subParameters.indexOf(score.id)\\n                     // console.log('index value',index,\\\":\\\",score.id)\\n                     // subParameters[index].value = subParameters[index].concat(score.id)\\n                     \\n                     if((score.id == scores.ids || score.id == mainId)){\\n                         console.log('matching hard coded value: ',score.id,\\\"=\\\",scores.ids,\\\":\\\",mainId);\\n                         matchingData=matchingData.concat(score.id);\\n                         console.log('matching values: ',matchingData)\\n                     }\\n                     \\n                 }\\n                 else{\\n                 var index=subParameters.indexOf(score.phone)\\n                 subParameters[index].value = subParameters[index].value.concat(score.id)\\n                 }\\n             })\\n         }\\n     }\\n    })\\n    console.log('concate data in the array',subParameters)\\n }\".trim();var functionsH=\"\\n<body>\\n    <div ng-controller=\\\"myCtrl\\\">\\n        <table>\\n            <tr>\\n              <th>Country</th>\\n              <th>Address</th>\\n              <th>Geo</th>\\n            </tr>\\n            <tr ng-repeat=\\\"persons in person\\\">\\n              <td>{{persons.name}}</td>\\n              <td>{{persons.address.street}}</td>\\n              <td>{{persons.address.geo.lat}}</td>\\n            </tr>\\n          </table> \\n          <h1>SubParameters</h1>\\n          {{subParameters}}\\n          <br/>\\n          <b>New object</b>\\n          {{newObj}}\\n    </div>  \\n</body>\\n\".trim();var empty=\"\\n//app.js\\nvar app = angular.module('myApp', []);\\napp.controller('myCtrl', timeCtrl);\\n  \\n var mockData=[];\\n var apiId = 10;\\n var names = [];\\n function timeCtrl ($scope, $http){\\n   $http({\\n     method:'get',\\n     url:'https://jsonplaceholder.typicode.com/users'\\n   }).then(res => {\\n    $scope.person = res.data;\\n    $scope.person.map(fields => {\\n              mockData.push(fields.id);\\n              \\n              if(fields.id == apiId){\\n                  console.log('fields',mockData)\\n                  for(let i=0; i<=mockData.length; i++){\\n                      console.log('Matched Id',fields.id)\\n                  }\\n              }\\n          })\\n       console.log('after map',mockData);\\n   })\\n}\\n\\n\\n//index.html\\n<body ng-controller=\\\"myCtrl\\\">\\n</body>\\n\".trim();var Pick=\"\\nvar app = angular.module('myApp', []);\\napp.controller('myCtrl', timeCtrl);\\n  \\nvar mockData=[];\\nvar apiId = 2;\\nvar names = ['Bret'];\\nnameObj = []\\n function timeCtrl ($scope, $http){\\n   $http({\\n     method:'get',\\n     url:'https://jsonplaceholder.typicode.com/users'\\n   }).then(res => {\\n    $scope.person = res.data;\\n    $scope.person.map(fields => {\\n        if(fields.id == apiId){\\n            mockData.push(fields);\\n            console.log('map function',mockData)\\n        }\\n    // apiId = mockData.push(fields);\\n    if(fields.username == names){\\n        for(let i=0; i<=mockData.length; i++){\\n            nameObj.push(mockData)\\n        }\\n    }\\n})\\nconsole.log('inside for loop',nameObj)\\nconsole.log('after map',mockData);\\n});\\n}\".trim();var sum=\"\\nvar app = angular.module('myApp', []);\\napp.controller('myCtrl', timeCtrl);\\n  \\nvar tempObj = [];\\nvar sum = 0;\\nvar avg;\\n function timeCtrl ($scope, $http){\\n   $http({\\n     method:'get',\\n     url:'https://jsonplaceholder.typicode.com/users'\\n   }).then(res => {\\n    $scope.person = res.data;\\n            $scope.person.map(fields => {\\n                tempObj.push(fields.id) \\n        });\\n        for(let i =0; i<=tempObj.length;i++){\\n            sum +=tempObj[i];\\n            avg = sum/tempObj.length\\n            console.log('sum',sum)\\n            console.log('avg',avg)\\n        }\\n     });\\n   \\n//Flattening an array of arrays\\n     const nested = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\\n     let flat = nested.reduce((acc, it) => [...acc, ...it], []);\\n     console.log('flat',flat)\\n  }\".trim();var object=\"\\nvar percentage;\\n var sum=0;\\n function timeCtrl (){\\n        var data = \\n           [\\n            {label:1, quater :'Q1', y:34},\\n            {label:2, quater:'Q1', y:20},\\n            {label:3, quater:'Q1', y:30},\\n     \\n            {label:1, quater:'Q2', y:77},\\n            {label:2, quater:'Q2', y:52},\\n            {label:3, quater:'Q2', y:3},\\n     \\n            {label:1, quater:'Q3', y:65},\\n            {label:2, quater:'Q3', y:12},\\n            {label:3, quater:'Q3', y:9},\\n     \\n            {label:1, quater:'Q4', y:77},\\n            {label:2, quater:'Q4', y:34},\\n            {label:3, quater:'Q4', y:5}\\n           ];\\n \\n quartersum = {}\\n data.map(function(entry) {\\n   quartersum[entry.label] = (quartersum[entry.label]||0) + entry.y\\n })\\n \\n data.map(function(entry) {\\n   entry.percent = entry.y / quartersum[entry.label] * 100;\\n   console.log(JSON.stringify(entry))\\n })\\n \\n console.log('data',quartersum);\\n console.log('extract object keys',Object.keys(quartersum));\\n console.log('extract object values',Object.values(quartersum));\\n \\n        for(let [key, value] of Object.entries(quartersum)){\\n            console.log('extract object property',key, value);\\n        }\\n        percentage = parseInt((sum*100/quartersum.length));\\n        console.log('percentage',percentage);\\n}\".trim();var Array=\"\\nvar app = angular.module('myApp', []);\\napp.controller('myCtrl', timeCtrl);\\n  \\nvar names = [];\\n function timeCtrl ($scope, $http){\\n   $http({\\n     method:'get',\\n     url:'https://jsonplaceholder.typicode.com/users'\\n   }).then(res => {\\n    $scope.person = res.data;\\n    $scope.person.map(data => {\\n      names.push(data.id)\\n    })\\n    let scores = names.find(element => element > 4);\\n    let filterScores = names.filter(element => element > 4);\\n    let joinArr = filterScores.join(\\\"*\\\");\\n    let spliceArr = filterScores.splice(0,2)\\n    let concatArr = filterScores.concat(scores,joinArr,\\\"100\\\");\\n    \\n    //The slice() method slices out a piece of an array into a new array.\\n    let sliceArr = filterScores.slice(0,2);\\n    let toStringArr = names.toString()\\n    let position = filterScores.indexOf(8)\\n    \\n    //The includes() method determines whether an array contains a specified element.\\n    let includeArr = filterScores.includes(10)\\n    console.log('find',includeArr)\\n  });\\n}\\n\".trim();var Logic3=/*#__PURE__*/function(_Component){_inherits(Logic3,_Component);function Logic3(){_classCallCheck(this,Logic3);return _possibleConstructorReturn(this,_getPrototypeOf(Logic3).apply(this,arguments));}_createClass(Logic3,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Common element in arrays\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:commonArray,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Common element in strings\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:commonStr,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"convert an Array to Object\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:arrObj,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Convert an Object into an Array \"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:objArr,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Sum of all elements of a given array\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:sumAll,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Dispay dot value\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:dotVal,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Last match name\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:lastMatch,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Apply deep logic\"),React.createElement(\"b\",null,\"functions.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:functions,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"functions.html\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:functionsH,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Add data in empty array from api values\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:empty,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"h3\",null,\"Pick a record from list of records\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Pick,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"h3\",null,\"Add sum/avg of number from a list\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:sum,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"h3\",null,\"Avrage and keys/valuue pair extract from an object\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:object,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Array methods\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Array,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return Logic3;}(Component);export default withStyles(styles)(Logic3);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/deepAngularjs/apiLogic3.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","commonArray","trim","commonStr","arrObj","objArr","sumAll","dotVal","lastMatch","functions","functionsH","empty","Pick","sum","object","Array","Logic3","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst commonArray = `\nvar mockData=[];\nvar mockData2 = [6,7,8,9,23];\nvar commonEle = [];\nfunction myCtrl($scope, $http){\n    $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n    }).then((res) => {\n        person = res.data;\n        person.map(val=>{\n            mockData.push(val.id)\n        })\n\n    var common = mockData.filter(item=>{\n        return mockData2.includes(item)\n    })\n\n    for(var i=0; i<=common.length; i++){\n        commonEle.push(common[i])\n    }\n    console.log(\"commonEle\",commonEle);\n    })\n}`.trim()\n\nconst commonStr = `var str='';\nvar str2='';\nvar dict = {};\nfunction myCtrl($scope, $http){\n    $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n    }).then(mySuccess = (res) => {\n        person = res.data;\n        person.map(val=>{\n            str=val.name;\n            str2=val.username;\n        })\n        \n        for(var i=0; i < str.length; i++) {\n            dict[str.charAt(i)] = 1;\n          }\n          console.log('str',dict);\n\n          var commonChars =[];\n      for(var i=0; i < str2.length; i++) {\n        if( dict[str2.charAt(i)] == 1) {\n          commonChars.push(str2.charAt(i)); // this is optional we can simply print\n        }\n        console.log('str2',commonChars);  \n\n      }\n      \n      dict = commonChars.join(\"\"); \n      console.log('commonChars',dict);\n    })\n}`.trim()\n\nconst arrObj = `var arr = [];\nfunction myCtrl($scope, $http){\n    $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n    }).then(mySuccess = (res) => {\n        person = res.data;\n        \n        console.log('arr',person)\n        console.log('obj',...person)\n        \n       })\n}`.trim()\n\nconst objArr = `var obj = {};\nvar objKey = [];\nfunction myCtrl($scope, $http){\n    $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n    }).then(mySuccess = (res) => {\n        person = res.data;\n        person.map(val=>{\n            obj=val;\n        })\n        console.log('obj',obj)\n\n        //Convert the keys to Array using - Object.keys()\n        objKey = Object.keys(obj)\n        console.log('objKey',objKey)\n\n        //Converts the Values to Array using - Object.values()\n        objVal = Object.values(obj)\n        console.log('objVal',objVal)\n\n        //Converts both keys and values using - Object.entries()\n        objAll = Object.entries(obj)\n        console.log('objAll',objAll)\n       })\n}`.trim()\n\nconst sumAll = `var arr=[];\nvar sum = 0;\nfunction myCtrl($scope, $http){\n    $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n    }).then(mySuccess = (res) => {\n        person = res.data;\n        person.map(val=>{\n            arr.push(val.id);\n        })\n        \n        var sum = arr.reduce((a, i) => {\n            return a + i;\n          });\n        console.log('sum',sum)\n       })\n}`.trim()\n\nconst dotVal = `var person=[];\nvar personEmail=[];\nfunction myCtrl($scope, $http){\n    $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n    }).then(mySuccess = (res) => {\n        $scope.person = res.data;\n        $scope.person.map(val=>{\n             personEmail.push(val.email);\n        })\n        console.log('personEmail',personEmail)\n        $scope.personEmail=personEmail\n    })\n}`.trim()\n\nconst lastMatch = `\nvar mockData=[];\n var apiId = 10;\n var names = [];\nfunction myCtrl($scope, $http){\n    $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n    }).then(mySuccess = (res) => {\n        $scope.person = res.data;\n        $scope.person.map(val=>{\n             mockData.push(val.id);\n             if(val.id == apiId){\n                names.push(val.name)\n                for(let i=0; i<=names.length; i++){\n                    console.log('inside loop',names)\n                }\n             }\n        })\n    })\n}\n`.trim()\n\nconst functions = `\nvar app = angular.module(\"myApp\", []);\napp.controller(\"myCtrl\", myCtrl);\n\nvar mainId=1;\nvar subParameters=[];\nvar subParametersIds=[];\nvar matchingData=[];\n\nfunction myCtrl ($scope, $http){\n      $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n      }).then(res => {\n        $scope.person = res.data;\n          \n        for(var i = 0; i < $scope.person.length; i++){\n         // console.log('json placeholder data in loop',$scope.person[i].id)\n         if(mainId == $scope.person[i].id){\n             // console.log('only match id',$scope.person[i].id)\n             \n             $scope.person.map(score=>{\n                 if(subParametersIds.indexOf(score.id)==-1){\n                     // console.log('only unique records',score.id)\n                     let newObj={\"id\":score.id, \"name\":score.name,'value':[]}\n                     // console.log('push object',newObj)\n                     $scope.newObj = newObj.value.push(score.address.zipcode)\n                     // console.log('after push object',newObj)\n                     subParametersIds.push(score.id);\n                     $scope.subParameters = subParameters.push(newObj);\n                     \n                     let scores={\"ids\":[\"2\"]}\n                     // console.log('hard coded',scores.ids)\n                     \n                     var index=subParameters.indexOf(score.id)\n                     // console.log('index value',index,\":\",score.id)\n                     // subParameters[index].value = subParameters[index].concat(score.id)\n                     \n                     if((score.id == scores.ids || score.id == mainId)){\n                         console.log('matching hard coded value: ',score.id,\"=\",scores.ids,\":\",mainId);\n                         matchingData=matchingData.concat(score.id);\n                         console.log('matching values: ',matchingData)\n                     }\n                     \n                 }\n                 else{\n                 var index=subParameters.indexOf(score.phone)\n                 subParameters[index].value = subParameters[index].value.concat(score.id)\n                 }\n             })\n         }\n     }\n    })\n    console.log('concate data in the array',subParameters)\n }`.trim()\n\nconst functionsH = `\n<body>\n    <div ng-controller=\"myCtrl\">\n        <table>\n            <tr>\n              <th>Country</th>\n              <th>Address</th>\n              <th>Geo</th>\n            </tr>\n            <tr ng-repeat=\"persons in person\">\n              <td>{{persons.name}}</td>\n              <td>{{persons.address.street}}</td>\n              <td>{{persons.address.geo.lat}}</td>\n            </tr>\n          </table> \n          <h1>SubParameters</h1>\n          {{subParameters}}\n          <br/>\n          <b>New object</b>\n          {{newObj}}\n    </div>  \n</body>\n`.trim()\n\nconst empty = `\n//app.js\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', timeCtrl);\n  \n var mockData=[];\n var apiId = 10;\n var names = [];\n function timeCtrl ($scope, $http){\n   $http({\n     method:'get',\n     url:'https://jsonplaceholder.typicode.com/users'\n   }).then(res => {\n    $scope.person = res.data;\n    $scope.person.map(fields => {\n              mockData.push(fields.id);\n              \n              if(fields.id == apiId){\n                  console.log('fields',mockData)\n                  for(let i=0; i<=mockData.length; i++){\n                      console.log('Matched Id',fields.id)\n                  }\n              }\n          })\n       console.log('after map',mockData);\n   })\n}\n\n\n//index.html\n<body ng-controller=\"myCtrl\">\n</body>\n`.trim();\n\nconst Pick = `\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', timeCtrl);\n  \nvar mockData=[];\nvar apiId = 2;\nvar names = ['Bret'];\nnameObj = []\n function timeCtrl ($scope, $http){\n   $http({\n     method:'get',\n     url:'https://jsonplaceholder.typicode.com/users'\n   }).then(res => {\n    $scope.person = res.data;\n    $scope.person.map(fields => {\n        if(fields.id == apiId){\n            mockData.push(fields);\n            console.log('map function',mockData)\n        }\n    // apiId = mockData.push(fields);\n    if(fields.username == names){\n        for(let i=0; i<=mockData.length; i++){\n            nameObj.push(mockData)\n        }\n    }\n})\nconsole.log('inside for loop',nameObj)\nconsole.log('after map',mockData);\n});\n}`.trim();\n\nconst sum = `\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', timeCtrl);\n  \nvar tempObj = [];\nvar sum = 0;\nvar avg;\n function timeCtrl ($scope, $http){\n   $http({\n     method:'get',\n     url:'https://jsonplaceholder.typicode.com/users'\n   }).then(res => {\n    $scope.person = res.data;\n            $scope.person.map(fields => {\n                tempObj.push(fields.id) \n        });\n        for(let i =0; i<=tempObj.length;i++){\n            sum +=tempObj[i];\n            avg = sum/tempObj.length\n            console.log('sum',sum)\n            console.log('avg',avg)\n        }\n     });\n   \n//Flattening an array of arrays\n     const nested = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n     let flat = nested.reduce((acc, it) => [...acc, ...it], []);\n     console.log('flat',flat)\n  }`.trim();\n\nconst object = `\nvar percentage;\n var sum=0;\n function timeCtrl (){\n        var data = \n           [\n            {label:1, quater :'Q1', y:34},\n            {label:2, quater:'Q1', y:20},\n            {label:3, quater:'Q1', y:30},\n     \n            {label:1, quater:'Q2', y:77},\n            {label:2, quater:'Q2', y:52},\n            {label:3, quater:'Q2', y:3},\n     \n            {label:1, quater:'Q3', y:65},\n            {label:2, quater:'Q3', y:12},\n            {label:3, quater:'Q3', y:9},\n     \n            {label:1, quater:'Q4', y:77},\n            {label:2, quater:'Q4', y:34},\n            {label:3, quater:'Q4', y:5}\n           ];\n \n quartersum = {}\n data.map(function(entry) {\n   quartersum[entry.label] = (quartersum[entry.label]||0) + entry.y\n })\n \n data.map(function(entry) {\n   entry.percent = entry.y / quartersum[entry.label] * 100;\n   console.log(JSON.stringify(entry))\n })\n \n console.log('data',quartersum);\n console.log('extract object keys',Object.keys(quartersum));\n console.log('extract object values',Object.values(quartersum));\n \n        for(let [key, value] of Object.entries(quartersum)){\n            console.log('extract object property',key, value);\n        }\n        percentage = parseInt((sum*100/quartersum.length));\n        console.log('percentage',percentage);\n}`.trim();\n\nconst Array = `\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', timeCtrl);\n  \nvar names = [];\n function timeCtrl ($scope, $http){\n   $http({\n     method:'get',\n     url:'https://jsonplaceholder.typicode.com/users'\n   }).then(res => {\n    $scope.person = res.data;\n    $scope.person.map(data => {\n      names.push(data.id)\n    })\n    let scores = names.find(element => element > 4);\n    let filterScores = names.filter(element => element > 4);\n    let joinArr = filterScores.join(\"*\");\n    let spliceArr = filterScores.splice(0,2)\n    let concatArr = filterScores.concat(scores,joinArr,\"100\");\n    \n    //The slice() method slices out a piece of an array into a new array.\n    let sliceArr = filterScores.slice(0,2);\n    let toStringArr = names.toString()\n    let position = filterScores.indexOf(8)\n    \n    //The includes() method determines whether an array contains a specified element.\n    let includeArr = filterScores.includes(10)\n    console.log('find',includeArr)\n  });\n}\n`.trim();\n\n\nclass Logic3 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Common element in arrays</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={commonArray}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Common element in strings</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={commonStr}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>convert an Array to Object</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={arrObj}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Convert an Object into an Array </h3>\n              <div style={titles}>\n                <PrismCode\n                  code={objArr}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Sum of all elements of a given array</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={sumAll}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Dispay dot value</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={dotVal}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Last match name</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={lastMatch}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Apply deep logic</h3>\n              <b>functions.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={functions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>functions.html</b>\n              <div style={titles}>\n                <PrismCode\n                  code={functionsH}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Add data in empty array from api values</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={empty}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <h3>Pick a record from list of records</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Pick}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <h3>Add sum/avg of number from a list</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={sum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <h3>Avrage and keys/valuue pair extract from an object</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={object}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Array methods</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Array}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Logic3));\n"]},"metadata":{},"sourceType":"module"}