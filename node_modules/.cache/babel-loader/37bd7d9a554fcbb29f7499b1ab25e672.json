{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var data_types=\"\\nfunction performOperation(secondInteger, secondDecimal, secondString) {\\n  const firstInteger = 4;\\n  const firstDecimal = 4.0;\\n  const firstString = \\\"HackerRank \\\";\\n\\n  console.log(firstInteger + Number(secondInteger));\\n\\n  const firstNum = Number(firstDecimal).toFixed(2);\\n  const secondNum = Number(secondDecimal).toFixed(2);\\n  const answer = Number(firstNum) + Number(secondNum);\\n\\n  console.log(answer);\\n  console.log(firstString + secondString);\\n}\\n\\nperformOperation(10, 1.2, 'str');\".trim();var getArea=\"\\nfunction arithmatic(length, width){\\n  let area = length * width;\\nthis.getArea = function(){\\n  return console.log('getArea',area)\\n}\\n\\nthis.getPerimeter = function(){\\n  let sumPerimeter = 2 * (length + width);\\n  return console.log('getPerimeter', sumPerimeter);\\n}\\n}\\n\\nconst newArithmatic = new arithmatic(3, 4.5);\\nnewArithmatic.getArea();\\nnewArithmatic.getPerimeter();\".trim();var declared=\"\\nfunction main(){\\n  const PI = Math.PI;\\n  const r=2.6;\\n  const getArea = PI * r * r;\\n  \\n  this.area=function(){\\n    return console.log('getArea', getArea);\\n  }\\n  \\n  const getPerimeter = 2 * PI * r;\\n  this.perimeter = function(){\\n    return console.log('getPerimeter', getPerimeter)\\n  }\\n}\\n\\nconst obj= new main();\\nobj.area();\\nobj.perimeter();\\n\".trim();var scoe_grade=\"\\nfunction getGrade(score) {\\n  if (score > 25) {\\n    return \\\"A\\\";\\n  } else if (score > 20) {\\n    return \\\"B\\\";\\n  } else if (score > 20) {\\n    return \\\"B\\\";\\n  } else if (score > 15) {\\n    return \\\"C\\\";\\n  } else if (score > 10) {\\n    return \\\"D\\\";\\n  } else if (score > 5) {\\n    return \\\"E\\\";\\n  } else {\\n    return \\\"F\\\";\\n  }\\n}\\n\\nconsole.log(getGrade(11));\".trim();var character=\"\\n//1\\nfunction getLetter(s) {\\n  let letter;\\n  switch (true) {\\n    case \\\"aeiou\\\".includes(s[0]):\\n      letter = \\\"A\\\";\\n      break;\\n    case \\\"bcdefg\\\".includes(s[0]):\\n      letter = \\\"B\\\";\\n      break;\\n    case \\\"hijklm\\\".includes(s[0]):\\n      letter = \\\"C\\\";\\n      break;\\n    case \\\"nopqrstuvwxyz\\\".includes(s[0]):\\n      letter = \\\"D\\\";\\n      break;\\n  }\\n  return letter;\\n}\\n\\nconsole.log(getLetter('adfgt'));\\n\\n\\n//2\\nfunction letter(){\\n  let str = 'aeiou';\\n  let str2 = 'bcdefg';\\n  let str3 = 'hijklm';\\n  \\n  let result = str.toUpperCase();\\n  let result2 = str2.toUpperCase();\\n  let result3 = str3.toUpperCase();\\n  \\n  switch(true){\\n    case str.includes(str[0]):\\n      console.log(result.charAt(0));\\n      break;\\n     \\n    case str2.includes(str2[0]):\\n      console.log(result2.charAt(0));\\n      break;\\n      \\n    case str3.includes(str3[0]):\\n      console.log(result3.charAt(0));\\n      break;\\n  }\\n}\\n\\nletter();\\n\".trim();var vowelsAndConsonants=\"function vowelsAndConsonants(s) {\\n  const vowels = [\\\"a\\\", \\\"e\\\", \\\"i\\\", \\\"o\\\", \\\"u\\\"];\\n  const string = s.split(\\\"\\\");\\n  let vowelArr = [];\\n  let consonantArr = [];\\n  for (let i = 0; i < string.length; i++) {\\n    vowels.includes(string[i])\\n      ? vowelArr.push(string[i])\\n      : consonantArr.push(string[i]);\\n  }\\n  for (let i = 0; i < vowelArr.length; i++) {\\n    console.log(vowelArr[i]);\\n  }\\n  for (let i = 0; i < consonantArr.length; i++) {\\n    console.log(consonantArr[i]);\\n  }\\n}\\n\\nvowelsAndConsonants('javascriptloops');\\n\".trim();var getSecondLargest=\"\\nfunction getSecondLargest(nums) {\\n  let firstLargestNum = 0;\\n  let secondLargestNum = 0;\\n\\n  for (let i = 0; i < nums.length; i++) {\\n    if (nums[i] > firstLargestNum) {\\n      secondLargestNum = firstLargestNum;\\n      firstLargestNum = nums[i];\\n    }\\n    if (nums[i] > secondLargestNum && nums[i] < firstLargestNum) {\\n      secondLargestNum = nums[i];\\n    }\\n  }\\n  return secondLargestNum;\\n}\\n\\nconsole.log(getSecondLargest([5, 2, 3, 6, 6, 5]));\\n\".trim();var isPositive=\"function isPositive(a) {\\n  if (a === 0) {\\n    throw Error(\\\"Zero Error\\\");\\n  }\\n  if (a < 0) {\\n    throw Error(\\\"Negative Error\\\");\\n  }\\n  return \\\"YES\\\";\\n}\\n\\nconsole.log(isPositive(6))\".trim();var getCount=\"\\nfunction getCount(objects) {\\n  let pairCount = 0;\\n  for (let i = 0; i < objects.length; i++) {\\n    if (objects[i].x === objects[i].y) {\\n      pairCount++;\\n    }\\n  }\\n  return console.log(pairCount);\\n}\\n\\ngetCount([2,3])\".trim();var Polygon=\"\\n//Explanation:\\nThere are n= 5 objects in the objects array:\\nobjects0 = {x:1, y:1}\\nobjects1 = {x:2, y:3}\\nobjects2 = {x:3, y:3}\\nobjects3 = {x:3, y:4}\\nobjects4 = {x:4, y:5}\\nBecause we have two objects o that satisfy o.x (i.e., objects0 and objects1), we return 2 as \\nour answer.\\n\\n\\nclass Polygon {\\n  constructor(args) {\\n      this.values = args;\\n  }\\n\\n  perimeter() {\\n      return (this.values || []).reduce((target, item) => target + item);\\n  }\\n}\\n\\n// Create a polygon with side lengths 3, 4, and 5\\nlet triangle = new Polygon([3, 4, 5]);\\n\\n// Print the perimeter\\nconsole.log(triangle.perimeter());\".trim();var processData=\"\\nclass Rectangle {\\n  constructor(w, h) {\\n      this.w = w;\\n      this.h = h;\\n  }\\n}\\n//  Write code that adds an 'area' method to the Rectangle class' prototype\\n\\n\\n// Create a Square class that inherits from Rectangle and implement its class constructor\\nRectangle.prototype.area = function() {\\n      return(this.w*this.h);\\n  };\\n\\n// Create a Square class that inherits from Rectangle and implement its class constructor\\n\\n \\n  class Square extends Rectangle {\\n      constructor(s) {\\n          super(s);\\n          this.h = s;\\n          this.w = s;\\n      }\\n  };\\n\\n\\nif (JSON.stringify(Object.getOwnPropertyNames(Square.prototype)) === JSON.stringify([ 'constructor' ])) {\\n  const rec = new Rectangle(3, 4);\\n  const sqr = new Square(3);\\n  \\n  console.log(rec.area());\\n  console.log(sqr.area());\\n} else {\\n  console.log(-1);\\n  console.log(-1);\\n}\".trim();var getMaxLessThanK=\"\\n//We define S to be a sequence of distinct sequential integers from 1  to n; in other words, \\nS = {1, 2, 3, ..., n}. We want to know the maximum bitwise AND value of any two integers, a \\nand b (where a < b), in sequence S that is also less than a given integer, k.\\n\\n\\nfunction getMaxLessThanK(n, k) {\\n  let max = 0;\\n  for (let i = 1; i <= n; i++) {\\n    for (let j = i + 1; j <= n; j++) {\\n      (i & j) > max && (i & j) < k ? (max = i & j) : max;\\n    }\\n  }\\n  return max;\\n}\\n\\nconsole.log(getMaxLessThanK(8, 5));\\n\".trim();var getDayName=\"\\nfunction getDayName(dateString) {\\n  let dayName;\\n  const days = [\\n    \\\"Sunday\\\",\\n    \\\"Monday\\\",\\n    \\\"Tuesday\\\",\\n    \\\"Wednesday\\\",\\n    \\\"Thursday\\\",\\n    \\\"Friday\\\",\\n    \\\"Saturday\\\"\\n  ];\\n  dayName = days[new Date(dateString).getUTCDay()];\\n  return dayName;\\n}\\n\\nconsole.log(getDayName(10/11/2009));\".trim();var regexVar=\"\\nfunction regexVar() {\\n  // It must match a string that starts and ends with the same vowel (i.e., {a, e, i, o, u})\\n  var re = RegExp(/^([aeiou])/);\\n \\n  let str = 'aca';\\n  var res = re.exec(str);\\n  console.log(res);\\n}\\n\\nregexVar();\".trim();var regexVars=\"\\nfunction regexVar() {\\n  // Declare a RegExp object variable named 're'\\n  // It must match a string that starts with 'Mr.', 'Mrs.', 'Ms.', 'Dr.', or 'Er.',\\n  // followed by one or more letters.\\n  let re = RegExp(/^(Mr|Mrs|Ms|Dr|Er)(.)([a-zA-Z])+$/);\\n  let str = 'Mr.X';\\n  var res = re.exec(str);\\n  console.log(res);\\n}\\n\\nregexVar();\".trim();var regexVares=\"\\n//Receive a string of s length of s \\u2265 3\\n  s is a string that contains numbers and letters\\n\\n\\nfunction regexVar() {\\n  var re = RegExp('\\\\d+', 'g');\\n  \\n  let str = 4.5;\\n  var res = re.exec(str);\\n  console.log(res);\\n}\\n\\nregexVar();\".trim();var HackerRank1=/*#__PURE__*/function(_Component){_inherits(HackerRank1,_Component);function HackerRank1(){_classCallCheck(this,HackerRank1);return _possibleConstructorReturn(this,_getPrototypeOf(HackerRank1).apply(this,arguments));}_createClass(HackerRank1,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"p\",null,\"Variables named firstInteger, firstDecimal, and firstString are declared for you in the editor below. You must use the + operator to perform the following sequence of operations:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Convert secondInteger to an integer (Number type), then sum it with firstInteger and print the result on a new line using console.log.\"),React.createElement(\"li\",null,\"Convert secondDecimal to a floating-point number (Number type), then sum it with firstDecimal and print the result on a new line using console.log.\"),React.createElement(\"li\",null,\"Print the concatenation of firstString and secondString on a new line using console.log. Note that firstString must be printed first.\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:data_types,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Arithmetic Operators\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"getArea(length, width): Calculate and return the area of a rectangle having sides length and width.\"),React.createElement(\"li\",null,\"getPerimeter(length, width): Calculate and return the perimeter of a rectangle having sides length and width.\"),React.createElement(\"li\",null,\"Input: 3, 4.5\"),React.createElement(\"li\",null,\"Output: 13.5, 15\"),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Explanation:\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"The area of the rectangle is length * width =3*4.5=13.5.\"),React.createElement(\"li\",null,\"The perimeter of the rectangle is (length * width) =2*(3+4.5)=15.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:getArea,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"p\",null,\"Let and Const\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Declare a constant variable, PI, and assign it the value Math.PI. You will not pass this challenge unless the variable is declared as a constant and named PI (uppercase).\"),React.createElement(\"li\",null,\"Read a number, r, denoting the radius of a circle from stdin.\"),React.createElement(\"li\",null,\"Use PI  and r to calculate the area and perimeter of a circle having radius r .\"),React.createElement(\"li\",null,\"Print area as the first line of output and print perimeter as the second line of output.\"),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Input:\"),React.createElement(\"li\",null,\"A single integer, , r denoting the radius of a circle.\"),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output:\"),\"Print the following two lines:\",React.createElement(\"li\",null,\"On the first line, print the area of the circle having radius .\"),React.createElement(\"li\",null,\"On the second line, print the perimeter of the circle having radius .\"),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Input:\"),\"0, 2.6\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output:\"),\"21.237166338267002, 16.336281798666924\"),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Explanation:\"),React.createElement(\"br\",null),\"Given the radius r=2.0, we calculate the following: area = PI.r pow(2) = 21.2371 perimeter = 2*PI*r = 16.336281 We then print  as our first line of output and  as our second line of output.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:declared,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"If-Else\"),React.createElement(\"p\",null,\"Complete the getGrade(score) function in the editor. It has one parameter: an integer, score , denoting the number of points Julia earned on an exam. It must return the letter corresponding to her grade according to the following rules:\"),React.createElement(\"b\",null,\"Input:\"),\" 11\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output:\"),\" D\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:scoe_grade,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Switch\"),React.createElement(\"p\",null,\"It has one parameter: a string, s, consisting of lowercase English alphabetic letters (i.e., a through z). It must return A, B, C, or D depending on the following criteria:\"),React.createElement(\"b\",null,\"Input:\"),\"adfgt\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output:\"),\" A\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Explanation\"),React.createElement(\"br\",null),\"The first character of string s= adfgt is a. Because the given criteria stipulate that we print A any time the first character is in a,e,i,o,u , we return A as our answer.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:character,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Loops\"),React.createElement(\"p\",null,\"Function has one parameter, a string, s, consisting of lowercase English alphabetic letters (i.e., a through z). The function must do the following:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"First, print each vowel in s on a new line. The English vowels are a, e, i, o, and u, and each vowel must be printed in the same order as it appeared in s.\"),React.createElement(\"li\",null,\"Second, print each consonant (i.e., non-vowel) in s on a new line in the same order as it appeared in s.\"),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Input:\"),\"Locked stub code in the editor reads string s from stdin and passes it to the function.\",React.createElement(\"br\",null),\"javascriptloops\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output:\"),\"First, print each vowel in s on a new line (in the same order as they appeared in s). Second, print each consonant (i.e., non-vowel) in s on a new line (in the same order as they appeared in s).\",React.createElement(\"br\",null),\"a a i o o j v s c r p t l p s\"),React.createElement(\"br\",null),React.createElement(\"br\",null),\"Observe the following:\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:vowelsAndConsonants,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"p\",null,\"Arrays\"),\"Function has one parameter: an array, nums, of n numbers. The function must find and return the second largest number in nums.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Input:\"),\"Reads the following input from stdin and passes it to the function:\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"The first line contains an integer, n, denoting the size of the nums array.\"),React.createElement(\"li\",null,\"The second line contains n space-separated numbers describing the elements in nums.\")),\"2 3 6 6 5\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output:\"),\" 5\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Explanation:\"),React.createElement(\"br\",null),\"Given the array nums=[2,3,6,6,5], we see that the largest value in the array is 6 and the second largest value is 5. Thus, we return 5 as our answer.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:getSecondLargest,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"p\",null,\"Try, Catch, and Finally\"),\"Function has one parameter, s. You must perform the following actions:\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Try to reverse string s using the split, reverse, and join methods.\"),React.createElement(\"li\",null,\"If an exception is thrown, catch it and print the contents of the exception's message on a new line.\"),React.createElement(\"li\",null,\"Print s on a new line. If no exception was thrown, then this should be the reversed string; if an exception was thrown, this should be the original string.\")),React.createElement(\"b\",null,\"Input:\"),\"\\\"1234\\\"\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output:\"),\"You must write two print statements using console.log():\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Print the contents of a caught exception's message on a new line. If no exception was thrown, this line should not be printed.\"),React.createElement(\"li\",null,\"Print s on a new line. If no exception was thrown, then this should be the reversed string; if an exception was thrown, this should be the original string.\")),\"Output: 4321\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Explanation:\"),\"s=\\\"1234\\\" is a string type, so it can be reversed without throwing an exception. Thus, we print the reversed value, 4321, as our answer.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:data_types,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"p\",null,\"Throw\"),\"Function has one integer parameter, a . If the value of a is positive, it must return the string YES. Otherwise, it must throw an Error according to the following rules:\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"If a is 0, throw an Error with message = Zero Error.\"),React.createElement(\"li\",null,\"If a is negative, throw an Error with message = Negative Error.\")),React.createElement(\"b\",null,\"Input:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"The first line is an integer, n, denoting the number of times the function will be called with some a.\"),React.createElement(\"li\",null,\"Each line i of the n subsequent lines contains an integer denoting some a.\")),\"e.g: 3 2 0 6\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output:\"),\"If the value of a is positive, the function must return the string YES. Otherwise, it must throw an Error according to the following rules:\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"If a is 0, throw an Error with message = Zero Error.\"),React.createElement(\"li\",null,\"If a is negative, throw an Error with message = Negative Error.\")),\"e.g:YES Zero Error YES\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Explanation:\"),\"Makes the following three calls to the isPositive function:\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"isPositive(2): This returns YES because 2 is positive.\"),React.createElement(\"li\",null,\"isPositive(0): Because a = 0, we throw an Error with message =  Zero Error. This is caught by the locked stub code and the value of its message is printed.\"),React.createElement(\"li\",null,\"isPositive(6): This returns YES because 6 is positive.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:isPositive,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"p\",null,\"Count Objects\"),React.createElement(\"br\",null),React.createElement(\"p\",null,\"Function has one parameter: an array, a, of objects. Each object in the array has two integer properties denoted by x and y. The function must return a count of all such objects o in array a that satisfy o.x == o.y .\"),React.createElement(\"b\",null,\"Input:\"),\"1 1\",React.createElement(\"br\",null),\"2 3\",React.createElement(\"br\",null),\"3 3\",React.createElement(\"br\",null),\"3 4\",React.createElement(\"br\",null),\"4 5\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output:\"),\" 2\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:getCount,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"p\",null,\"Classes\"),\"Create a Polygon class that has the following properties:\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"A constructor that takes an array of integer values describing the lengths of the polygon's sides.\"),React.createElement(\"li\",null,\"A perimeter() method that returns the polygon's perimeter.\")),React.createElement(\"b\",null,\"Output:\"),\"The perimeter method must return the polygon's perimeter using the side length array passed to the constructor.\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Polygon,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"p\",null,\"Inheritance\"),\"Perform the following tasks: 1. Add an area method to Rectangle's prototype.\",React.createElement(\"br\",null),\"2. Create a Square class that satisfies the following:\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"It is a subclass of Rectangle.\"),React.createElement(\"li\",null,\"It contains a constructor and no other methods.\"),React.createElement(\"li\",null,\"It can use the Rectangle class' area method to print the area of a Square object.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:processData,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"p\",null,\"Bitwise Operators\"),React.createElement(\"b\",null,\"Input:\"),\"3\",React.createElement(\"br\",null),\"5 2\",React.createElement(\"br\",null),\"8 5\",React.createElement(\"br\",null),\"2 2\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output:\"),React.createElement(\"br\",null),\"1\",React.createElement(\"br\",null),\"4\",React.createElement(\"br\",null),\"0\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:getMaxLessThanK,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"p\",null,\"JavaScript Dates\"),React.createElement(\"p\",null,\"Given a date string, dateString , in the format MM/DD/YYYY, find and return the day name for that date. Each day name must be one of the following strings: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, or Saturday. For example, the day name for the date 12/07/2016 is Wednesday.\"),React.createElement(\"b\",null,\"Input:\"),\"10/11/2009\",React.createElement(\"br\",null),\"11/10/2010\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output\"),React.createElement(\"br\",null),\"Sunday\",React.createElement(\"br\",null),\"Wednesday\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Explanation:\"),\"The function is called for the following d = 2 dates:\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"The date 10/11/2009 was a Sunday, so we return Sunday.\",React.createElement(\"br\",null),\"The date 11/10/2010 was a Wednesday, so we return Wednesday.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"getUTCDay() method returns the day of the week in the specified date according to universal time, where 0 represents Sunday.\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:getDayName,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"p\",null,\"Regular Expressions I\"),\"Function returning a RegExp object, re, that matches any string s that begins and ends with the same vowel. Recall that the English vowels are a, e, i, o, and u.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Input:\"),\"bcd\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output:\"),\"false\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Explanation:\"),\"This string starts with (and ends in) a consonant, so it cannot start and end with the same vowel.\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Receive a string of s which is greater than or equal to the length of 3\"),React.createElement(\"li\",null,\"Write a regular expression that validates the string\"),React.createElement(\"li\",null,\"The string must be in all lowercase with characters from a-z\"),React.createElement(\"li\",null,\"The string must start and end with a vowel\"),React.createElement(\"li\",null,\"Return a boolean of true or false if the string meets the requirements\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:regexVar,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"p\",null,\"Receive a string of s which is greater than or equal to the length of 3\"),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Write a regular expression that validates the string\"),React.createElement(\"li\",null,\"String starts with either (Mr., Mrs., Ms., Dr., or Er.)\"),React.createElement(\"li\",null,\"String doesn\\u2019t contain any spaces\"),React.createElement(\"li\",null,\"String contains on the letters a-z or A-Z\"),React.createElement(\"li\",null,\"Return a boolean of true or false if the string meets the requirements\")),React.createElement(\"b\",null,\"Input:\"),\"Mr.X\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output:\"),\"true\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:regexVars,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"p\",null,\"Write a regular expression that validates the string, The expression must only output integer numbers\"),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Input:\"),\"102, 1948948 and 1.3 and 4.5\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output:\"),\"102, 1948948, 1, 3, 4, 5\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Explanation:\"),\"When we call match on string  and pass the correct RegExp as our argument, it returns the following array of results: [ '102', '1948948', '1', '3', '4', '5' ].\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:regexVares,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return HackerRank1;}(Component);export default withStyles(styles)(HackerRank1);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/javaScripts/deepJs/hackerRank.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","data_types","trim","getArea","declared","scoe_grade","character","vowelsAndConsonants","getSecondLargest","isPositive","getCount","Polygon","processData","getMaxLessThanK","getDayName","regexVar","regexVars","regexVares","HackerRank1","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst data_types = `\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n  const firstInteger = 4;\n  const firstDecimal = 4.0;\n  const firstString = \"HackerRank \";\n\n  console.log(firstInteger + Number(secondInteger));\n\n  const firstNum = Number(firstDecimal).toFixed(2);\n  const secondNum = Number(secondDecimal).toFixed(2);\n  const answer = Number(firstNum) + Number(secondNum);\n\n  console.log(answer);\n  console.log(firstString + secondString);\n}\n\nperformOperation(10, 1.2, 'str');`.trim();\n\nconst getArea = `\nfunction arithmatic(length, width){\n  let area = length * width;\nthis.getArea = function(){\n  return console.log('getArea',area)\n}\n\nthis.getPerimeter = function(){\n  let sumPerimeter = 2 * (length + width);\n  return console.log('getPerimeter', sumPerimeter);\n}\n}\n\nconst newArithmatic = new arithmatic(3, 4.5);\nnewArithmatic.getArea();\nnewArithmatic.getPerimeter();`.trim();\n\n\nconst declared = `\nfunction main(){\n  const PI = Math.PI;\n  const r=2.6;\n  const getArea = PI * r * r;\n  \n  this.area=function(){\n    return console.log('getArea', getArea);\n  }\n  \n  const getPerimeter = 2 * PI * r;\n  this.perimeter = function(){\n    return console.log('getPerimeter', getPerimeter)\n  }\n}\n\nconst obj= new main();\nobj.area();\nobj.perimeter();\n`.trim();\n\nconst scoe_grade = `\nfunction getGrade(score) {\n  if (score > 25) {\n    return \"A\";\n  } else if (score > 20) {\n    return \"B\";\n  } else if (score > 20) {\n    return \"B\";\n  } else if (score > 15) {\n    return \"C\";\n  } else if (score > 10) {\n    return \"D\";\n  } else if (score > 5) {\n    return \"E\";\n  } else {\n    return \"F\";\n  }\n}\n\nconsole.log(getGrade(11));`.trim();\n\nconst character = `\n//1\nfunction getLetter(s) {\n  let letter;\n  switch (true) {\n    case \"aeiou\".includes(s[0]):\n      letter = \"A\";\n      break;\n    case \"bcdefg\".includes(s[0]):\n      letter = \"B\";\n      break;\n    case \"hijklm\".includes(s[0]):\n      letter = \"C\";\n      break;\n    case \"nopqrstuvwxyz\".includes(s[0]):\n      letter = \"D\";\n      break;\n  }\n  return letter;\n}\n\nconsole.log(getLetter('adfgt'));\n\n\n//2\nfunction letter(){\n  let str = 'aeiou';\n  let str2 = 'bcdefg';\n  let str3 = 'hijklm';\n  \n  let result = str.toUpperCase();\n  let result2 = str2.toUpperCase();\n  let result3 = str3.toUpperCase();\n  \n  switch(true){\n    case str.includes(str[0]):\n      console.log(result.charAt(0));\n      break;\n     \n    case str2.includes(str2[0]):\n      console.log(result2.charAt(0));\n      break;\n      \n    case str3.includes(str3[0]):\n      console.log(result3.charAt(0));\n      break;\n  }\n}\n\nletter();\n`.trim();\n\nconst vowelsAndConsonants = `function vowelsAndConsonants(s) {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  const string = s.split(\"\");\n  let vowelArr = [];\n  let consonantArr = [];\n  for (let i = 0; i < string.length; i++) {\n    vowels.includes(string[i])\n      ? vowelArr.push(string[i])\n      : consonantArr.push(string[i]);\n  }\n  for (let i = 0; i < vowelArr.length; i++) {\n    console.log(vowelArr[i]);\n  }\n  for (let i = 0; i < consonantArr.length; i++) {\n    console.log(consonantArr[i]);\n  }\n}\n\nvowelsAndConsonants('javascriptloops');\n`.trim();\n\nconst getSecondLargest = `\nfunction getSecondLargest(nums) {\n  let firstLargestNum = 0;\n  let secondLargestNum = 0;\n\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > firstLargestNum) {\n      secondLargestNum = firstLargestNum;\n      firstLargestNum = nums[i];\n    }\n    if (nums[i] > secondLargestNum && nums[i] < firstLargestNum) {\n      secondLargestNum = nums[i];\n    }\n  }\n  return secondLargestNum;\n}\n\nconsole.log(getSecondLargest([5, 2, 3, 6, 6, 5]));\n`.trim();\n\nconst isPositive = `function isPositive(a) {\n  if (a === 0) {\n    throw Error(\"Zero Error\");\n  }\n  if (a < 0) {\n    throw Error(\"Negative Error\");\n  }\n  return \"YES\";\n}\n\nconsole.log(isPositive(6))`.trim();\n\nconst getCount = `\nfunction getCount(objects) {\n  let pairCount = 0;\n  for (let i = 0; i < objects.length; i++) {\n    if (objects[i].x === objects[i].y) {\n      pairCount++;\n    }\n  }\n  return console.log(pairCount);\n}\n\ngetCount([2,3])`.trim();\n\nconst Polygon = `\n//Explanation:\nThere are n= 5 objects in the objects array:\nobjects0 = {x:1, y:1}\nobjects1 = {x:2, y:3}\nobjects2 = {x:3, y:3}\nobjects3 = {x:3, y:4}\nobjects4 = {x:4, y:5}\nBecause we have two objects o that satisfy o.x (i.e., objects0 and objects1), we return 2 as \nour answer.\n\n\nclass Polygon {\n  constructor(args) {\n      this.values = args;\n  }\n\n  perimeter() {\n      return (this.values || []).reduce((target, item) => target + item);\n  }\n}\n\n// Create a polygon with side lengths 3, 4, and 5\nlet triangle = new Polygon([3, 4, 5]);\n\n// Print the perimeter\nconsole.log(triangle.perimeter());`.trim();\n\n\nconst processData = `\nclass Rectangle {\n  constructor(w, h) {\n      this.w = w;\n      this.h = h;\n  }\n}\n//  Write code that adds an 'area' method to the Rectangle class' prototype\n\n\n// Create a Square class that inherits from Rectangle and implement its class constructor\nRectangle.prototype.area = function() {\n      return(this.w*this.h);\n  };\n\n// Create a Square class that inherits from Rectangle and implement its class constructor\n\n \n  class Square extends Rectangle {\n      constructor(s) {\n          super(s);\n          this.h = s;\n          this.w = s;\n      }\n  };\n\n\nif (JSON.stringify(Object.getOwnPropertyNames(Square.prototype)) === JSON.stringify([ 'constructor' ])) {\n  const rec = new Rectangle(3, 4);\n  const sqr = new Square(3);\n  \n  console.log(rec.area());\n  console.log(sqr.area());\n} else {\n  console.log(-1);\n  console.log(-1);\n}`.trim();\n\nconst getMaxLessThanK = `\n//We define S to be a sequence of distinct sequential integers from 1  to n; in other words, \nS = {1, 2, 3, ..., n}. We want to know the maximum bitwise AND value of any two integers, a \nand b (where a < b), in sequence S that is also less than a given integer, k.\n\n\nfunction getMaxLessThanK(n, k) {\n  let max = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      (i & j) > max && (i & j) < k ? (max = i & j) : max;\n    }\n  }\n  return max;\n}\n\nconsole.log(getMaxLessThanK(8, 5));\n`.trim();\n\nconst getDayName = `\nfunction getDayName(dateString) {\n  let dayName;\n  const days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\"\n  ];\n  dayName = days[new Date(dateString).getUTCDay()];\n  return dayName;\n}\n\nconsole.log(getDayName(10/11/2009));`.trim();\n\nconst regexVar = `\nfunction regexVar() {\n  // It must match a string that starts and ends with the same vowel (i.e., {a, e, i, o, u})\n  var re = RegExp(/^([aeiou])/);\n \n  let str = 'aca';\n  var res = re.exec(str);\n  console.log(res);\n}\n\nregexVar();`.trim();\n\nconst regexVars = `\nfunction regexVar() {\n  // Declare a RegExp object variable named 're'\n  // It must match a string that starts with 'Mr.', 'Mrs.', 'Ms.', 'Dr.', or 'Er.',\n  // followed by one or more letters.\n  let re = RegExp(/^(Mr|Mrs|Ms|Dr|Er)(\\.)([a-zA-Z])+$/);\n  let str = 'Mr.X';\n  var res = re.exec(str);\n  console.log(res);\n}\n\nregexVar();`.trim();\n\nconst regexVares = `\n//Receive a string of s length of s ≥ 3\n  s is a string that contains numbers and letters\n\n\nfunction regexVar() {\n  var re = RegExp('\\\\d+', 'g');\n  \n  let str = 4.5;\n  var res = re.exec(str);\n  console.log(res);\n}\n\nregexVar();`.trim();\n\nclass HackerRank1 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <p>Variables named firstInteger, firstDecimal, and firstString are declared for you in the\n                editor below. You must use the + operator to perform the following sequence of operations:\n              </p>\n              <ul>\n                <li>Convert secondInteger to an integer (Number type), then sum it with firstInteger and print\n                  the result on a new line using console.log.</li>\n                <li>Convert secondDecimal to a floating-point number (Number type), then sum it with\n                  firstDecimal and print the result on a new line using console.log.</li>\n                <li>Print the concatenation of firstString and secondString on a new line using console.log.\n                  Note that firstString must be printed first.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={data_types}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Arithmetic Operators</b>\n              <ul>\n                <li>getArea(length, width): Calculate and return the area of a rectangle having sides length and\n                  width.</li>\n                <li>getPerimeter(length, width): Calculate and return the perimeter of a rectangle having sides\n                  length and width.</li>\n                <li>Input: 3, 4.5</li>\n                <li>Output: 13.5, 15</li>\n                <br />\n\n                <b>Explanation:</b>\n                <br />\n                <li>The area of the rectangle is length * width =3*4.5=13.5.</li>\n                <li>The perimeter of the rectangle is (length * width) =2*(3+4.5)=15.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={getArea}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <p>Let and Const</p>\n              <ul>\n                <li>Declare a constant variable, PI, and assign it the value Math.PI. You will not pass this\n                  challenge unless the variable is declared as a constant and named PI (uppercase).</li>\n                <li>Read a number, r, denoting the radius of a circle from stdin.</li>\n                <li>Use PI  and r to calculate the area and perimeter of a circle having radius r .</li>\n                <li>Print area as the first line of output and print perimeter as the second line of output.</li>\n                <br />\n                <b>Input:</b>\n                <li>A single integer, , r denoting the radius of a circle.</li>\n                <br />\n                <b>Output:</b>\n                Print the following two lines:\n                <li>On the first line, print the area of the circle having radius .</li>\n                <li>On the second line, print the perimeter of the circle having radius .</li>\n                <br />\n                <b>Input:</b>0, 2.6\n                <br />\n                <b>Output:</b>21.237166338267002, 16.336281798666924\n              </ul>\n              <br />\n              <b>Explanation:</b>\n              <br />\n              Given the radius r=2.0, we calculate the following:\n              area = PI.r pow(2) = 21.2371\n              perimeter = 2*PI*r = 16.336281\n              We then print  as our first line of output and  as our second line of output.\n              <div style={titles}>\n                <PrismCode\n                  code={declared}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <h3>If-Else</h3>\n              <p>Complete the getGrade(score) function in the editor. It has one parameter: an integer, score ,\n                denoting the number of points Julia earned on an exam. It must return the letter corresponding\n                to her grade according to the following rules:</p>\n              {/* \n  If 25 < score <= 30, then grade = A\n  If 20 < score <= 25, then grade = B\n  If 15 < score <= 20, then grade = C\n  If 10 < score <= 15, then grade = D\n  If 5 < score <= 10, then grade = E\n  If 0 < score <= 5, then grade = F \n*/}\n\n              <b>Input:</b> 11\n              <br />\n              <b>Output:</b> D\n              <div style={titles}>\n                <PrismCode\n                  code={scoe_grade}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Switch</b>\n              <p>\n                It has one parameter: a string, s,\n                consisting of lowercase English alphabetic letters (i.e., a through z). It must return A, B,\n                C, or D depending on the following criteria:\n              </p>\n              {/* <ul>\n                <li>If the first character in string s is in the set {a, e, i, o, u}, then return A.</li>\n                <li>If the first character in string s is in the set {b, c, d, f, g}, then return B.</li>\n                <li>If the first character in string s is in the set {h, j, k, l, m}, then return C.</li>\n                <li>If the first character in string s is in the set {n, p, q, r, s, t, v, w, x, y, z}, then \n  return D.</li>\n              </ul> */}\n              <b>Input:</b>adfgt\n              <br />\n              <b>Output:</b> A\n              <br />\n              <br />\n              <b>Explanation</b>\n              <br />\n              The first character of string s= adfgt is a. Because the given criteria\n              stipulate that we print A any time the first character is in a,e,i,o,u , we return A as our\n              answer.\n              <div style={titles}>\n                <PrismCode\n                  code={character}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <h3>Loops</h3>\n              <p>Function has one parameter, a string,\n                s, consisting of lowercase English alphabetic letters (i.e., a through z). The function must\n                do the following:</p>\n              <ul>\n                <li>First, print each vowel in s on a new line. The English vowels are a, e, i, o, and u, and\n                  each vowel must be printed in the same order as it appeared in s.</li>\n                <li>Second, print each consonant (i.e., non-vowel) in s on a new line in the same order as it\n                  appeared in s.</li>\n                <br />\n                <b>Input:</b>\n                Locked stub code in the editor reads string s from stdin and passes it to the function.\n                <br />\n                javascriptloops\n                <br />\n                <br />\n                <b>Output:</b>\n                First, print each vowel in s on a new line (in the same order as they appeared in s). Second,\n                print each consonant (i.e., non-vowel) in s on a new line (in the same order as they appeared\n                in s).\n                <br />\n                a a i o o j v s c r p t l p s\n              </ul>\n              <br />\n              <br />\n              Observe the following:\n              <div style={titles}>\n                <PrismCode\n                  code={vowelsAndConsonants}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <p>Arrays</p>\n              Function has one parameter: an array,\n              nums, of n numbers. The function must find and return the second largest number in nums.\n              <br />\n              <br />\n              <b>Input:</b>\n              Reads the following input from stdin and passes it to the function:\n              <ul>\n                <li>The first line contains an integer, n, denoting the size of the nums array.</li>\n                <li>The second line contains n space-separated numbers describing the elements in nums.</li>\n              </ul>\n              2 3 6 6 5\n              <br />\n              <b>Output:</b> 5\n              <br />\n              <br />\n              <b>Explanation:</b>\n              <br />\n              Given the array nums=[2,3,6,6,5], we see that the largest value in the array is 6 and the\n              second largest value is 5. Thus, we return 5 as our answer.\n              <div style={titles}>\n                <PrismCode\n                  code={getSecondLargest}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <p>Try, Catch, and Finally</p>\n              Function has one parameter, s. You must perform the following actions:\n              <ul>\n                <li>Try to reverse string s using the split, reverse, and join methods.</li>\n                <li>If an exception is thrown, catch it and print the contents of the exception's message on a\n                  new line.</li>\n                <li>Print s on a new line. If no exception was thrown, then this should be the reversed string;\n                  if an exception was thrown, this should be the original string.</li>\n              </ul>\n              <b>Input:</b>\"1234\"\n              <br />\n              <br />\n              <b>Output:</b>\n              You must write two print statements using console.log():\n              <ul>\n                <li>Print the contents of a caught exception's message on a new line. If no exception was\n                  thrown, this line should not be printed.</li>\n                <li>Print s on a new line. If no exception was thrown, then this should be the reversed string;\n                  if an exception was thrown, this should be the original string.</li>\n              </ul>\n              Output: 4321\n              <br />\n              <br />\n              <b>Explanation:</b>\n              s=\"1234\" is a string type, so it can be reversed without throwing an exception. Thus, we\n              print the reversed value, 4321, as our answer.\n              <div style={titles}>\n                <PrismCode\n                  code={data_types}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <p>Throw</p>\n              Function has one integer parameter, a . If the value of a\n              is positive, it must return the string YES. Otherwise, it must throw an Error according to\n              the following rules:\n              <ul>\n                <li>If a is 0, throw an Error with message = Zero Error.</li>\n                <li>If a is negative, throw an Error with message = Negative Error.</li>\n              </ul>\n              <b>Input:</b>\n              <ul>\n                <li>The first line is an integer, n, denoting the number of times the function will be called\n                  with some a.</li>\n                <li>Each line i of the n subsequent lines contains an integer denoting some a.</li>\n              </ul>\n              e.g: 3\n              2\n              0\n              6\n              <br />\n              <br />\n              <b>Output:</b>\n              If the value of a is positive, the function must return the string YES. Otherwise, it must\n              throw an Error according to the following rules:\n              <ul>\n                <li>If a is 0, throw an Error with message = Zero Error.</li>\n                <li>If a is negative, throw an Error with message = Negative Error.</li>\n              </ul>\n              e.g:YES\n              Zero Error\n              YES\n              <br />\n              <br />\n              <b>Explanation:</b>\n              Makes the following three calls to the isPositive function:\n              <ul>\n                <li>isPositive(2): This returns YES because 2 is positive.</li>\n                <li>isPositive(0): Because a = 0, we throw an Error with message =  Zero Error. This is caught by\n                  the locked stub code and the value of its message is printed.</li>\n                <li>isPositive(6): This returns YES because 6 is positive.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={isPositive}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <p>Count Objects</p>\n              <br />\n              <p>Function has one parameter: an array, a, of objects. Each\n                object in the array has two integer properties denoted by x and y. The function must return a\n                count of all such objects o in array a that satisfy o.x == o.y .</p>\n              <b>Input:</b>\n              1 1<br />\n              2 3<br />\n              3 3<br />\n              3 4<br />\n              4 5\n              <br />\n              <br />\n              <b>Output:</b> 2\n              <div style={titles}>\n                <PrismCode\n                  code={getCount}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <p>Classes</p>\n              Create a Polygon class that has the following properties:\n              <ul>\n                <li>A constructor that takes an array of integer values describing the lengths of the polygon's\n                  sides.</li>\n                <li>A perimeter() method that returns the polygon's perimeter.</li>\n              </ul>\n              <b>Output:</b>\n              The perimeter method must return the polygon's perimeter using the side length array passed\n              to the constructor.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={Polygon}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <p>Inheritance</p>\n              Perform the following tasks:\n              1. Add an area method to Rectangle's prototype.\n              <br />\n              2. Create a Square class that satisfies the following:\n              <ul>\n                <li>It is a subclass of Rectangle.</li>\n                <li>It contains a constructor and no other methods.</li>\n                <li>It can use the Rectangle class' area method to print the area of a Square object.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={processData}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <p>Bitwise Operators</p>\n              <b>Input:</b>\n              3<br />\n              5 2<br />\n              8 5<br />\n              2 2<br />\n              <br />\n              <b>Output:</b><br />\n              1<br />\n              4<br />\n              0\n              <div style={titles}>\n                <PrismCode\n                  code={getMaxLessThanK}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <p>JavaScript Dates</p>\n              <p>\n                Given a date string, dateString , in the format MM/DD/YYYY, find and return the day name for\n                that date. Each day name must be one of the following strings: Sunday, Monday, Tuesday,\n                Wednesday, Thursday, Friday, or Saturday. For example, the day name for the date 12/07/2016\n                is Wednesday.\n              </p>\n              <b>Input:</b>\n              10/11/2009<br />\n              11/10/2010\n              <br />\n              <br />\n              <b>Output</b>\n              <br />\n              Sunday<br />\n              Wednesday\n              <br />\n              <br />\n              <b>Explanation:</b>\n              The function is called for the following d = 2 dates:\n              <br />\n              <br />\n              The date 10/11/2009 was a Sunday, so we return Sunday.<br />\n              The date 11/10/2010 was a Wednesday, so we return Wednesday.\n              <br />\n              <br />\n              getUTCDay() method returns the day of the week in the specified date according to universal\n              time, where 0 represents Sunday.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={getDayName}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <p>Regular Expressions I</p>\n              Function returning a RegExp object, re, that matches any\n              string s that begins and ends with the same vowel. Recall that the English vowels are a, e, i,\n              o, and u.\n              <br />\n              <br />\n              <b>Input:</b>bcd\n              <br />\n              <br />\n              <b>Output:</b>false\n              <br />\n              <br />\n              <b>Explanation:</b>\n              This string starts with (and ends in) a consonant, so it cannot start and end with the same\n              vowel.\n              <ul>\n                <li>Receive a string of s which is greater than or equal to the length of 3</li>\n                <li>Write a regular expression that validates the string</li>\n                <li>The string must be in all lowercase with characters from a-z</li>\n                <li>The string must start and end with a vowel</li>\n                <li>Return a boolean of true or false if the string meets the requirements</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={regexVar}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <p>Receive a string of s which is greater than or equal to the length of 3</p>\n              <br />\n              <ul>\n                <li>Write a regular expression that validates the string</li>\n                <li>String starts with either (Mr., Mrs., Ms., Dr., or Er.)</li>\n                <li>String doesn’t contain any spaces</li>\n                <li>String contains on the letters a-z or A-Z</li>\n                <li>Return a boolean of true or false if the string meets the requirements</li>\n              </ul>\n              <b>Input:</b>Mr.X\n              <br />\n              <b>Output:</b>true\n              <div style={titles}>\n                <PrismCode\n                  code={regexVars}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <p>Write a regular expression that validates the string, The expression must only output integer numbers</p>\n              <br />\n              <b>Input:</b>102, 1948948 and 1.3 and 4.5\n              <br />\n              <b>Output:</b>102, 1948948, 1, 3, 4, 5\n              <br />\n              <br />\n              <b>Explanation:</b>\n              When we call match on string  and pass the correct RegExp as our argument, it returns the\n              following array of results: [ '102', '1948948', '1', '3', '4', '5' ].\n              <div style={titles}>\n                <PrismCode\n                  code={regexVares}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(HackerRank1));\n"]},"metadata":{},"sourceType":"module"}