{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/mongoDB/deepMongodb/intro.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst Create_DB = `\nshow dbs\nuse EmployeeDB\ndb.dropDatabase()\ndb.createUser({user:\"brad\", pwd:\"123\", roles:[\"readWrite\", \"dbAdmin\"]});\n\nshow collections\ndb.createCollection('store');                                          //create collection\ndb.orders.renameCollection('store')                                    //rename collection\ndb.orders.drop()                                                       // drop collection\n `.trim();\nconst findOne = `\ndb.store.find().pretty()\ndb.store.find({name: 'Ritesh'}, {country: 'India', color: 'Green'})\ndb.store.findOne({country: \"UK\"});\ndb.store.find({},{\"name\":1,_id:0}).limit(2);\ndb.store.find().count();\ndb.store.find().limit(4).skip(1);\n\ndb.store.find({$and: [{name:'Mukesh'},{country:'India'}] });\ndb.store.find({$or: [{name:'Mukesh'},{country:'India'}] });\n\ndb.store.find({country:{$in:['India']}})\ndb.store.find({country:{$not:{$in:['India']}}})\n\ndb.store.find({score:{$eq:7}})\ndb.store.find({country:{$not:{$eq:'India'}}})\ndb.store.find({score:{$lt:4}});\ndb.store.find({score:{$gt:4}});\n\n`.trim();\nconst queries = `\ndb.store.insert({'interger':23});\ndb.store.insertOne({_id:1,name:'mukesh',country:'indian'});\n\ndb.store.insertMany([\n     { _id: 20, name: \"John Wick\", country: \"Visual Studio\"},\n     { _id: 22, name: \"Deeksha Raul\", country: \"Unity 3D\" }\n   ]);\n\ndb.store.update({_id:1},{$set:{name:['mukesh'],country:['1234567890']}});\ndb.store.update({name:'Mukesh'},{$set:{country:'India'}})\ndb.store.update({_id: 20}, { $set: { name: [\"Vocals\", \"Violin\", \"Octapad\"] }})\ndb.users.update({_id:2.0},{$set:{userId:1}})          //alter collections, to add new data in existing row.\n\n//Rename Field\ndb.posts.update({ title: 'Post Two' },{ $rename: { likes: 'views' }});\n\ndb.store.remove({})\ndb.store.remove({ name: \"mukesh\" })\ndb.store.remove({_id:1},{justOne:true});\n`.trim();\nconst Filtering = `\ndb.store.remove()\ndb.store.remove({\"_id\":ObjectId(\"5d9f3bd0c02cef7d50bb97fb\")});\n`.trim();\nconst joining = `> db.users.find()\n{ \"_id\" : 1, \"userId\" : 1, \"name\" : \"Al\" }\n{ \"_id\" : 2), \"userId\" : 2, \"name\" : \"Betty\" }\n{ \"_id\" : 3, \"userId\" : 3, \"name\" : \"Cameron\" }\n\n> db.comments.find()\n{ \"_id\" : 1, \"userId\" : 1, \"comment\" : \"Hi, I'm Al and I love comments.\" }\n{ \"_id\" : 2, \"userId\" : 1, \"comment\" : \"Hi, it's Al again. I really do love comments.\" }\n{ \"_id\" : 3, \"userId\" : 2, \"comment\" : \"I'm Betty. This is my first comment onthis site.\" }\n{ \"_id\" : 4, \"userId\" : 3, \"comment\" : \"This is Cameron. I enjoyed reading your website.\" }\n`.trim();\nconst aggregate = `db.users.aggregate([ {$lookup: {\n                            from: \"comments\",\n                            localField: \"userId\",\n                            foreignField: \"userId\",\n                            as: \"combined\"\n                          }\n                       }\n                     ]).pretty()\n`.trim();\nconst Data_Modelling = `db.customers.insert([\n{id: , Emp_ID: \"10025AE336\" Personal_details:{ First_Name: \"Radhika\", Last_Name: \"Sharma\", DOB: \"1995-09-26\"},\n  Contact: { e-mail: \"radhika_sharma.123@gmail.com\", phone: \"9848022338\"},\n  Address: { city: \"Hyderabad\", Area: \"Madapur\", State: \"Telangana\"}\n    ]);\n `.trim();\nconst normalized = `\nEmployee: {_id: <ObjectId101>, Emp_ID: \"10025AE336\"}\n  \nPersonal_details:{ _id: <ObjectId102>, empDocID: \" ObjectId101\", First_Name: \"Radhika\", Last_Name: \"Sharma\",\n                  DOB: \"1995-09-26\"}\n   \n Contact: { _id: <ObjectId103>, empDocID: \" ObjectId101\", e-mail: \"radhika_sharma.123@gmail.com\", \n                  phone: \"9848022338\"}\n   \n Address: { _id: <ObjectId104>, empDocID: \" ObjectId101\", city: \"Hyderabad\", Area: \"Madapur\", State: \"Telangana\"}\n `.trim();\nconst Example = `{ _id: POST_ID title: TITLE_OF_POST, description: POST_DESCRIPTION, by: POST_BY, url: URL_OF_POST, \n  tags: [TAG1, TAG2, TAG3], likes: TOTALL_LIKES,\n  \n    comments: [{ user:'COMMENT_BY', message: TEXT, dateCreated: DATE_TIME, like: LIKES },\n      { user:'COMMENT_BY', message: TEXT, dateCreated: DATE_TIME, like: LIKES }\n    ]}\n  `.trim();\nconst Aggregation = `\ndb.mycol.aggregate([{$group : {_id : \"$by_user\", num_tutorial : {$sum : 1}}}]);\n\n//Used to select some specific fields from a collection.\ndb.user.aggregate([ { $project : { _id : 0, name : 1 } }])\n`.trim();\nconst Pipeline = `> db.user.find()\n{ \"_id\" : 1, \"name\" : \"GENWI\", \"founded_year\" : 2010 }\n{ \"_id\" : 2, \"name\" : \"Needium\", \"founded_year\" : 2010 }\n{ \"_id\" : 3, \"name\" : \"Ziippi\", \"founded_year\" : 2011 }\n{ \"_id\" : 4, \"name\" : \"Pixelmatic\", \"founded_year\" : 2011 }\n{ \"_id\" : 5, \"name\" : \"Clowdy\", \"founded_year\" : 2013 }\n\n\nPipeline\ndb.user.aggregate([\n  { $match : { founded_year : 2011 } },\n  { $sort : {name:-1} },\n  { $project : { _id : 0, name : 1 } }\n ])\n \n \n Or Pipeline\n db.user.aggregate([\n  { $match: { founded_year: { $gte: 2010 } } },\n  { $group: {\n  _id: \"$founded_year\",\n  companies: { $push: \"$name\" }\n  }},\n  { $sort: { \"_id\": 1 } }\n ])`.trim();\nconst match = `\ndb.users.aggregate({$match:{userId:1}})\ndb.users.aggregate({$match:{userId: {$gte:3}}})\n`.trim();\nconst group = `db.user.aggregate({ $group :{_id:ObjectId(\"5ef64c903da2b374c85626a1\"), count:{$sum:1}} })`.trim();\nconst sort = `db.user.aggregate({ $sort : {name:-1} })\n`.trim();\nconst unwind = `db.user.aggregate({ $project: {author : 1, title : 1, tags : 1}},\n                        { $unwind : \"$tags\" });\n \n o/p:\n{ \"_id\" : 1, \"title\" : \"this is my title\", \"author\" : \"bob\", \"tags\" : \"fun\" }\n{ \"_id\" : 2, \"title\" : \"this is my title\", \"author\" : \"bob\", \"tags\" : \"good\" }\n{ \"_id\" : 3, \"title\" : \"this is my title\", \"author\" : \"bob\", \"tags\" : \"fun\" }`.trim();\nconst chaining = `\ndb.customers.find().limit(2).sort({ title: 1 }).pretty()\n\nForeach\ndb.customers.find().forEach(doc=>{\n  print('name',doc.First_Name)\n  });\n `.trim();\nconst update = `db.customers.save(\n  {\"_id\" : ObjectId(5ee08dc1e206f48220a3b08c), \"first_name\":\"Tutorials Point N\n ew Topic\",\"by\":\"mongodb\"}\n );\n `.trim();\nconst update_2 = `db.customers.update({first_name:\"mukesh\"},\n{$set:{first_name:\"Mongodb\"}},{multi:true})\n`.trim();\nconst findOneAndUpdate = `db.customers.updateOne(\n  {first_name: 'ram'},\n  { $set: { Age: '30',e_mail: 'radhika_newemail@gmail.com'}}\n );\n `.trim();\nconst updateOne = `db.customers.updateOne(\n  {first_name: 'mukesh'},\n  { $set: { Age: '30',e_mail: 'radhika_newemail@gmail.com'}}\n );`.trim();\nconst updateMany = `db.customers.updateMany({Age:{ $gt: \"25\" }},\n{ $set: { Age: '00'}}\n);\n`.trim();\nconst Replace = `db.customers.update({first_name:\"John\"},{$set:{gender:\"femail\"}});\n`.trim();\nconst increments = `db.customers.update({first_name:\"John\"},{$set:{age:45}});\ndb.customers.update({first_name:\"John\"},{$inc:{age:5}});\n`.trim();\n\nclass Intro extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, \"1. Create DB\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Create_DB,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \"_id is 12 bytes hexadecimal number unique for every document in a collection. 12 bytes are divided as follows \\u2212\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, \"2. Insert\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: queries,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, \"3. Find Specific Fields\"), \"It is also possible to filter your results by giving or adding some specific criteria in which you are interested to.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: findOne,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, \"4. MongoDB's update\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, \"MongoDB's update() and save() methods are used to update document into a collection. The update() method update the values in the existing document while the save() method replaces the existing document with the document passed in save() method.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: update,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, \" By default, MongoDB will update only a single document. To update multiple documents, you need to set a parameter multi: true\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: update_2,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }), \"he findOneAndUpdate() method updates the values in the existing document.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: findOneAndUpdate,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, \"MongoDB updateOne() method: This methods updates a single document which matches the given filter.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: updateOne,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, \"The customers() method updates all the documents that matches the given filter\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: updateMany,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    })), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, \"Replace documents\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Replace,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, \"match\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }), \"\\u2212 This is a filtering operation and thus this can reduce the amount of documents that are given as input to the next stage.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: match,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, \"group\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }), \"This does the actual aggregation as discussed above.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: group,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }, \"sort\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: sort,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, \"skip\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }, \"limit\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, \"Unwind\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: unwind,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, \"Chaining\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: chaining,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, \"increments numeric value is first\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: increments,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, \"Updates\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }, \"MongoDB's remove() method \"), \"MongoDB's remove() method is used to remove a document from the collection. remove() method accepts two parameters. One is deletion criteria and second is justOne flag.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }), \"If you don't specify deletion criteria, then MongoDB will delete whole documents from the collection.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }), \"If there are multiple records and you want to delete only the first record, then set justOne parameter in remove() method.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Filtering,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }, \"5. joining the data from 2 table queries\"), \"We perform a left outer join by using the $lookup stage. The $lookup stage lets specify which collection we want to join with the current collection, and which fields that should match.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }, \"Consider we have a \\\"users\\\" collection and a \\\"comments\\\" collection:\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: joining,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }), \"As can see in our dataset there is a common field userId on both collections which allows us to match up each user with their comments.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }, \"Use the aggregate() method with the $lookup stage.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: aggregate,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }, \"MongoDB can store lots and lots data. And work in a very performent way. Retrive data very fast. Used in web and mobile applications.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }), \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }, \"Collection = Table\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }), \"Data stored in collection as Documents(BSON). This Documents are Seamaless means we can store different data in same collection.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }), \"It's store embeded Documents(Document inside Document).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }), \"Good to use when there is no ton of inter connected relations Database, Collections, Document data/db folder inside MongoDB To insert data into MongoDB collection.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    }, \"6. Data Modelling\"), \"Data in MongoDB has a flexible schema.documents in the same collection. They do not need to have the same set of fields or structure, Common fields in a collection\\u2019s documents may hold different types of data.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }, \"Data Model Design:\"), \" MongoDB provides two types of data models.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }, \"Embedded data model\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }, \"Normalized data model\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }), \"In Embedded Data Model, you can have (embed) all the related data in a single document, it is also known as de-normalized data model.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480\n      },\n      __self: this\n    }, \"Ex. \"), \"Assume we are getting the details of employees in three different documents namely, Personal_details, Contact and, Address, you can embed all the three documents in a single one as shown below \\u2212\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Data_Modelling,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }, \"7. Normalized: \"), \"In Normalized Data Model, we can refer the sub documents in the original document.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    }, \"Ex. \"), \"we can re-write the above document in the normalized model as.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: normalized,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, \"Suppose a client needs a database design for his blog/website and see the differences between RDBMS and MongoDB schema design. Website has the following requirements\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }), \"Every post has the unique title, description and url.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }), \"Every post can have one or more tags.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    }), \"Every post has the name of its publisher and total number of likes.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    }), \"Every post has comments given by users along with their name, message, data-time and likes.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510\n      },\n      __self: this\n    }), \"On each post, there can be zero or more comments.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }), \"In RDBMS schema, design for above requirements will have minimum three tables. While in MongoDB schema, design will have one collection post and the following structure\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Example,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }, \"8. Aggregation\"), \"Aggregation in MongoDB is the process of retrieving data from multiple documents and performing a set of transformations on the data to get the desired results. Aggregation can be used to perform complex data analysis, such as data grouping, filtering, sorting, and data transformation.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }), \"The aggregation framework in MongoDB provides a set of operators that allow you to manipulate and transform data in a variety of ways. Some of the common operators used in the aggregation framework include:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }, \"$match: \"), \"This operator is used to filter the data based on a specified condition.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }, \"$group: \"), \"This operator is used to group the data based on one or more fields and perform aggregation operations such as sum, average, count, etc.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }, \"$project:: \"), \"This operator is used to reshape the data by including or excluding fields from the output.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }, \"$sort: \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }, \": \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, \": \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }, \": \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }), \"In SQL count(*) and with group by is an equivalent of mongodb aggregation.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541\n      },\n      __self: this\n    }), \"if you want to display a list stating how many tutorials are written by each user, then you will use the following aggregate() method -\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Aggregation,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553\n      },\n      __self: this\n    }, \"9. Pipeline Concept\"), \"Aggregation Framework : Is a set of analytics tools within mongodb that allows to run various reports/ analysis on one/ more mongodb collections.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558\n      },\n      __self: this\n    }, \"Aggregation Pipeline: \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }, \"Take Input from a single collection.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561\n      },\n      __self: this\n    }, \"Pass the documents of the collection through one/ more stages.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562\n      },\n      __self: this\n    }, \"Each stage perform different operations in the Pipeline.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563\n      },\n      __self: this\n    }, \"Each stage take as Input whatever the stage before produced as Output. The Input and Output for all stages are documents (stream of documents).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565\n      },\n      __self: this\n    }, \"At the end of Pipeline we get access to the output of the transformed and aggregated Output.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Pipeline,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Intro);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/mongoDB/deepMongodb/intro.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","Create_DB","trim","findOne","queries","Filtering","joining","aggregate","Data_Modelling","normalized","Example","Aggregation","Pipeline","match","group","sort","unwind","chaining","update","update_2","findOneAndUpdate","updateOne","updateMany","Replace","increments","Intro","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = {backgroundColor:'#F0F8FF', padding:'1px', fontSize:'16px'}\n\nconst styles = theme => ({\n  paper: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1)\n  },\n  smMargin: {\n      margin: theme.spacing(1)\n  },\n  actionDiv: {\n      textAlign: \"center\"\n  }\n})\n\nconst Create_DB = `\nshow dbs\nuse EmployeeDB\ndb.dropDatabase()\ndb.createUser({user:\"brad\", pwd:\"123\", roles:[\"readWrite\", \"dbAdmin\"]});\n\nshow collections\ndb.createCollection('store');                                          //create collection\ndb.orders.renameCollection('store')                                    //rename collection\ndb.orders.drop()                                                       // drop collection\n `.trim()\n\nconst findOne = `\ndb.store.find().pretty()\ndb.store.find({name: 'Ritesh'}, {country: 'India', color: 'Green'})\ndb.store.findOne({country: \"UK\"});\ndb.store.find({},{\"name\":1,_id:0}).limit(2);\ndb.store.find().count();\ndb.store.find().limit(4).skip(1);\n\ndb.store.find({$and: [{name:'Mukesh'},{country:'India'}] });\ndb.store.find({$or: [{name:'Mukesh'},{country:'India'}] });\n\ndb.store.find({country:{$in:['India']}})\ndb.store.find({country:{$not:{$in:['India']}}})\n\ndb.store.find({score:{$eq:7}})\ndb.store.find({country:{$not:{$eq:'India'}}})\ndb.store.find({score:{$lt:4}});\ndb.store.find({score:{$gt:4}});\n\n`.trim()\n\nconst queries = `\ndb.store.insert({'interger':23});\ndb.store.insertOne({_id:1,name:'mukesh',country:'indian'});\n\ndb.store.insertMany([\n     { _id: 20, name: \"John Wick\", country: \"Visual Studio\"},\n     { _id: 22, name: \"Deeksha Raul\", country: \"Unity 3D\" }\n   ]);\n\ndb.store.update({_id:1},{$set:{name:['mukesh'],country:['1234567890']}});\ndb.store.update({name:'Mukesh'},{$set:{country:'India'}})\ndb.store.update({_id: 20}, { $set: { name: [\"Vocals\", \"Violin\", \"Octapad\"] }})\ndb.users.update({_id:2.0},{$set:{userId:1}})          //alter collections, to add new data in existing row.\n\n//Rename Field\ndb.posts.update({ title: 'Post Two' },{ $rename: { likes: 'views' }});\n\ndb.store.remove({})\ndb.store.remove({ name: \"mukesh\" })\ndb.store.remove({_id:1},{justOne:true});\n`.trim()\n\nconst Filtering = `\ndb.store.remove()\ndb.store.remove({\"_id\":ObjectId(\"5d9f3bd0c02cef7d50bb97fb\")});\n`.trim()\n\nconst joining = `> db.users.find()\n{ \"_id\" : 1, \"userId\" : 1, \"name\" : \"Al\" }\n{ \"_id\" : 2), \"userId\" : 2, \"name\" : \"Betty\" }\n{ \"_id\" : 3, \"userId\" : 3, \"name\" : \"Cameron\" }\n\n> db.comments.find()\n{ \"_id\" : 1, \"userId\" : 1, \"comment\" : \"Hi, I'm Al and I love comments.\" }\n{ \"_id\" : 2, \"userId\" : 1, \"comment\" : \"Hi, it's Al again. I really do love comments.\" }\n{ \"_id\" : 3, \"userId\" : 2, \"comment\" : \"I'm Betty. This is my first comment onthis site.\" }\n{ \"_id\" : 4, \"userId\" : 3, \"comment\" : \"This is Cameron. I enjoyed reading your website.\" }\n`.trim()\n\nconst aggregate = `db.users.aggregate([ {$lookup: {\n                            from: \"comments\",\n                            localField: \"userId\",\n                            foreignField: \"userId\",\n                            as: \"combined\"\n                          }\n                       }\n                     ]).pretty()\n`.trim()\n\nconst  Data_Modelling = `db.customers.insert([\n{id: , Emp_ID: \"10025AE336\" Personal_details:{ First_Name: \"Radhika\", Last_Name: \"Sharma\", DOB: \"1995-09-26\"},\n  Contact: { e-mail: \"radhika_sharma.123@gmail.com\", phone: \"9848022338\"},\n  Address: { city: \"Hyderabad\", Area: \"Madapur\", State: \"Telangana\"}\n    ]);\n `.trim()\n\nconst normalized = `\nEmployee: {_id: <ObjectId101>, Emp_ID: \"10025AE336\"}\n  \nPersonal_details:{ _id: <ObjectId102>, empDocID: \" ObjectId101\", First_Name: \"Radhika\", Last_Name: \"Sharma\",\n                  DOB: \"1995-09-26\"}\n   \n Contact: { _id: <ObjectId103>, empDocID: \" ObjectId101\", e-mail: \"radhika_sharma.123@gmail.com\", \n                  phone: \"9848022338\"}\n   \n Address: { _id: <ObjectId104>, empDocID: \" ObjectId101\", city: \"Hyderabad\", Area: \"Madapur\", State: \"Telangana\"}\n `.trim()\n\nconst Example = `{ _id: POST_ID title: TITLE_OF_POST, description: POST_DESCRIPTION, by: POST_BY, url: URL_OF_POST, \n  tags: [TAG1, TAG2, TAG3], likes: TOTALL_LIKES,\n  \n    comments: [{ user:'COMMENT_BY', message: TEXT, dateCreated: DATE_TIME, like: LIKES },\n      { user:'COMMENT_BY', message: TEXT, dateCreated: DATE_TIME, like: LIKES }\n    ]}\n  `.trim()\n\nconst Aggregation = `\ndb.mycol.aggregate([{$group : {_id : \"$by_user\", num_tutorial : {$sum : 1}}}]);\n\n//Used to select some specific fields from a collection.\ndb.user.aggregate([ { $project : { _id : 0, name : 1 } }])\n`.trim()\n\nconst Pipeline = `> db.user.find()\n{ \"_id\" : 1, \"name\" : \"GENWI\", \"founded_year\" : 2010 }\n{ \"_id\" : 2, \"name\" : \"Needium\", \"founded_year\" : 2010 }\n{ \"_id\" : 3, \"name\" : \"Ziippi\", \"founded_year\" : 2011 }\n{ \"_id\" : 4, \"name\" : \"Pixelmatic\", \"founded_year\" : 2011 }\n{ \"_id\" : 5, \"name\" : \"Clowdy\", \"founded_year\" : 2013 }\n\n\nPipeline\ndb.user.aggregate([\n  { $match : { founded_year : 2011 } },\n  { $sort : {name:-1} },\n  { $project : { _id : 0, name : 1 } }\n ])\n \n \n Or Pipeline\n db.user.aggregate([\n  { $match: { founded_year: { $gte: 2010 } } },\n  { $group: {\n  _id: \"$founded_year\",\n  companies: { $push: \"$name\" }\n  }},\n  { $sort: { \"_id\": 1 } }\n ])`.trim()\n\nconst match = `\ndb.users.aggregate({$match:{userId:1}})\ndb.users.aggregate({$match:{userId: {$gte:3}}})\n`.trim()\n\nconst group = `db.user.aggregate({ $group :{_id:ObjectId(\"5ef64c903da2b374c85626a1\"), count:{$sum:1}} })`.trim()\n\nconst sort = `db.user.aggregate({ $sort : {name:-1} })\n`.trim()\n\nconst unwind = `db.user.aggregate({ $project: {author : 1, title : 1, tags : 1}},\n                        { $unwind : \"$tags\" });\n \n o/p:\n{ \"_id\" : 1, \"title\" : \"this is my title\", \"author\" : \"bob\", \"tags\" : \"fun\" }\n{ \"_id\" : 2, \"title\" : \"this is my title\", \"author\" : \"bob\", \"tags\" : \"good\" }\n{ \"_id\" : 3, \"title\" : \"this is my title\", \"author\" : \"bob\", \"tags\" : \"fun\" }`.trim()\n\nconst chaining = `\ndb.customers.find().limit(2).sort({ title: 1 }).pretty()\n\nForeach\ndb.customers.find().forEach(doc=>{\n  print('name',doc.First_Name)\n  });\n `.trim()\n\nconst update = `db.customers.save(\n  {\"_id\" : ObjectId(5ee08dc1e206f48220a3b08c), \"first_name\":\"Tutorials Point N\n ew Topic\",\"by\":\"mongodb\"}\n );\n `.trim()\n\nconst update_2 = `db.customers.update({first_name:\"mukesh\"},\n{$set:{first_name:\"Mongodb\"}},{multi:true})\n`.trim()\n\nconst findOneAndUpdate = `db.customers.updateOne(\n  {first_name: 'ram'},\n  { $set: { Age: '30',e_mail: 'radhika_newemail@gmail.com'}}\n );\n `.trim()\n\nconst updateOne = `db.customers.updateOne(\n  {first_name: 'mukesh'},\n  { $set: { Age: '30',e_mail: 'radhika_newemail@gmail.com'}}\n );`.trim()\n\nconst updateMany = `db.customers.updateMany({Age:{ $gt: \"25\" }},\n{ $set: { Age: '00'}}\n);\n`.trim()\n\nconst Replace = `db.customers.update({first_name:\"John\"},{$set:{gender:\"femail\"}});\n`.trim()\n\nconst increments = `db.customers.update({first_name:\"John\"},{$set:{age:45}});\ndb.customers.update({first_name:\"John\"},{$inc:{age:5}});\n`.trim()\n\nclass Intro extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n            <Grid item xs={2}>\n                <Paper className={classes.paper}>\n                    <h4><Sidebar /></h4>\n                </Paper>\n            </Grid>\n            <Grid item xs={10}>\n            <Paper className={classes.paper}>\n            <List>\n                  <h3>1. Create DB</h3>\n                  <div style={titles}>\n                  <PrismCode\n                    code={Create_DB}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                  </div>\n                  <br/>\n                  <i>_id is 12 bytes hexadecimal number unique for every document in a collection. 12 bytes are divided\n                  as follows −</i>\n                  <br/>\n                  <h3>2. Insert</h3>\n                  <div style={titles}>\n                  <PrismCode\n                    code={queries}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                  </div>\n                  <br/>\n\n                  <h3>3. Find Specific Fields</h3>\n                  It is also possible to filter your results by giving or adding some specific criteria in which you are interested to.\n                  <div style={titles}>\n                  <PrismCode\n                    code={findOne}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                  </div>\n                  <br/>\n                  <br/>\n                  <h3>4. MongoDB's update</h3>\n                  <b>MongoDB's update() and save() methods are used to update document into a collection. The\n                        update() method update the values in the existing document while the save() method replaces the\n                        existing document with the document passed in save() method.</b>\n                  <div style={titles}>\n                  <PrismCode\n                    code={update}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                  </div>\n                  <br/>\n                  <i> By default, MongoDB will update only a single document. To update multiple documents, you\n            need to set a parameter multi: true</i>\n                  <div style={titles}>\n                  <PrismCode\n                    code={update_2}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                  </div>\n                  <br/>\n                  he findOneAndUpdate() method updates the values in the existing document.\n                  <div style={titles}>\n                  <PrismCode\n                    code={findOneAndUpdate}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                  </div>\n                  <br/>\n                  <i>MongoDB updateOne() method: This methods updates a single document which matches the given filter.</i>\n                  <br/>\n                  <br/>\n                        <div style={titles}>\n                        <PrismCode\n                          code={updateOne}\n                          language=\"js\"\n                          plugins={[\"line-numbers\"]}\n                        />\n                        </div>\n                        <br/>\n                        <i>The customers() method updates all the documents that matches the given filter</i>\n                        <br/>\n                        <div style={titles}>\n                        <PrismCode\n                          code={updateMany}\n                          language=\"js\"\n                          plugins={[\"line-numbers\"]}\n                        />\n                        </div>\n                        <i>Replace documents</i>\n                        <br/>\n                    <br/>\n                    <div style={titles}>\n                    <PrismCode\n                      code={Replace}\n                      language=\"js\"\n                      plugins={[\"line-numbers\"]}\n                    />\n                    </div>\n                    <br/>\n                    <b>match</b>\n                    <br/>\n                    − This is a filtering operation and thus this can reduce the amount of documents that are\n              given as input to the next stage.\n\n                    <div style={titles}>\n                    <PrismCode\n                      code={match}\n                      language=\"js\"\n                      plugins={[\"line-numbers\"]}\n                    />\n                    </div>\n                    <br/>\n                    <br/>\n                    <b>group</b>\n                    <br/>\n                    This does the actual aggregation as discussed above.\n                    <div style={titles}>\n                    <PrismCode\n                      code={group}\n                      language=\"js\"\n                      plugins={[\"line-numbers\"]}\n                    />\n                    </div>\n                    <br/>\n                    <br/>\n                    <b>sort</b>\n                    <div style={titles}>\n                    <PrismCode\n                      code={sort}\n                      language=\"js\"\n                      plugins={[\"line-numbers\"]}\n                    />\n                    </div>\n                    <br/>\n                    <i>skip</i>\n                    <br/>\n                    <i>limit</i>\n                    <br/>\n                    <br/>\n                    <b>Unwind</b>\n                    <div style={titles}>\n                    <PrismCode\n                      code={unwind}\n                      language=\"js\"\n                      plugins={[\"line-numbers\"]}\n                    />\n                    </div>\n                    <br/>\n                    <br/>\n                    <b>Chaining</b>\n                    <div style={titles}>\n                    <PrismCode\n                      code={chaining}\n                      language=\"js\"\n                      plugins={[\"line-numbers\"]}\n                    />\n                    </div>\n                    <br/>\n                    <br/>\n                    <b>increments numeric value is first</b>\n                    <div style={titles}>\n                    <PrismCode\n                      code={increments}\n                      language=\"js\"\n                      plugins={[\"line-numbers\"]}\n                    />\n                    </div>\n                    <br/>\n                    <br/>\n                    <b>Updates</b>\n                    <br/>\n                    <b>MongoDB's remove() method </b>\n                    MongoDB's remove() method is used to remove a document from the collection. remove()\n                    method accepts two parameters. One is deletion criteria and second is justOne flag.\n                    <br/>\n                    If you don't specify deletion criteria, then MongoDB will delete whole documents from the\n                    collection.\n                    <br/>\n                    <br/>\n                    If there are multiple records and you want to delete only the first record, then set justOne\n                    parameter in remove() method.\n                          <div style={titles}>\n                          <PrismCode\n                            code={Filtering}\n                            language=\"js\"\n                            plugins={[\"line-numbers\"]}\n                          />\n                          </div>\n                          <br/>\n      \n                        <h3>5. joining the data from 2 table queries</h3>\n                        We perform a left outer join by using the $lookup stage.\n                        The $lookup stage lets specify which collection we want to join with the current collection, and\n                        which fields that should match.\n                        <br/>\n                        <br/>\n                        <i>Consider we have a \"users\" collection and a \"comments\" collection:</i>\n                        <div style={titles}>\n                        <PrismCode\n                          code={joining}\n                          language=\"js\"\n                          plugins={[\"line-numbers\"]}\n                        />\n                        </div>\n                        <br/>\n                        As can see in our dataset there is a common field userId on both collections which allows us to\n                  match up each user with their comments.\n                  <br/>\n                  <br/>\n                  <i>Use the aggregate() method with the $lookup stage.</i>\n                  <br/>\n                  <div style={titles}>\n                  <PrismCode\n                    code={aggregate}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                  </div>\n                  <br/>\n                  <i>MongoDB can store lots and lots data. And work in a very performent way. Retrive data very fast.\n                  Used in web and mobile applications.<br/> <b>Collection = Table</b><br/>\n                  Data stored in collection as Documents(BSON). This Documents are Seamaless means we can store\n                  different data in same collection.<br/>\n                  It's store embeded Documents(Document inside Document).<br/>\n                  Good to use when there is no ton of inter connected relations Database, Collections, Document\n                  data/db folder inside MongoDB\n                  To insert data into MongoDB collection.</i>\n                  <br/>\n\n                <h3>6. Data Modelling</h3>\n                Data in MongoDB has a flexible schema.documents in the same collection. They do not need to have\n                the same set of fields or structure, Common fields in a collection’s documents may hold different\n                types of data.<br/>\n                <b>Data Model Design:</b> MongoDB provides two types of data models.\n                <ul>\n                  <li>Embedded data model</li>\n                  <li>Normalized data model</li>\n                </ul> \n                <br/>\n                In Embedded Data Model, you can have (embed) all the related data in a single document, it is also\n                known as de-normalized data model.<br/>\n                <b>Ex. </b>Assume we are getting the details of employees in three different documents namely,\n                Personal_details, Contact and, Address, you can embed all the three documents in a single one as\n                shown below −\n                <div style={titles}>\n                <PrismCode\n                  code={Data_Modelling}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n                </div>\n                <br/>\n      \n                <h3>7. Normalized: </h3>\n                In Normalized Data Model, we can refer the sub documents in the original document.\n                <br/>\n                <b>Ex. </b>we can re-write the above document in the normalized model as.\n                <div style={titles}>\n                <PrismCode\n                  code={normalized}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n                </div>\n                <br/>\n                <br/>\n                <b>Suppose a client needs a database design for his blog/website and see the differences between\n                  RDBMS and MongoDB schema design. Website has the following requirements<br/>\n                  Every post has the unique title, description and url.<br/>\n                  Every post can have one or more tags.<br/>\n                  Every post has the name of its publisher and total number of likes.<br/>\n                  Every post has comments given by users along with their name, message, data-time and likes.<br/>\n                  On each post, there can be zero or more comments.</b><br/>\n                  In RDBMS schema, design for above requirements will have minimum three tables.\n                  While in MongoDB schema, design will have one collection post and the following structure\n                <div style={titles}>\n                <PrismCode\n                  code={Example}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n                </div>\n                <br/>\n               \n                <h3>8. Aggregation</h3>\n                Aggregation in MongoDB is the process of retrieving data from multiple documents and performing a set of transformations on the data to get the desired results. Aggregation can be used to perform complex data analysis, such as data grouping, filtering, sorting, and data transformation.\n                <br/>\n                <br/>\n                The aggregation framework in MongoDB provides a set of operators that allow you to manipulate and transform data in a variety of ways. Some of the common operators used in the aggregation framework include:\n                <br/>\n                <ul>\n                <li><b>$match: </b>This operator is used to filter the data based on a specified condition.</li><br/>\n                <li><b>$group: </b>This operator is used to group the data based on one or more fields and perform aggregation operations such as sum, average, count, etc.</li><br/>\n                <li><b>$project:: </b>This operator is used to reshape the data by including or excluding fields from the output.</li><br/>\n                <li><b>$sort: </b></li><br/>\n                <li><b>: </b></li><br/>\n                <li><b>: </b></li><br/>\n                <li><b>: </b></li><br/>\n                </ul>\n              <br/>\n              <br/>\n\n              In SQL count(*) and with group by is an equivalent of mongodb aggregation.<br/>\n              if you want to display a list stating how many tutorials are written by each user, then you will\n              use the following aggregate() method -\n              <div style={titles}>\n              <PrismCode\n                code={Aggregation}\n                language=\"js\"\n                plugins={[\"line-numbers\"]}\n              />\n              </div>\n              <br/>\n         \n              <h3>9. Pipeline Concept</h3>\n              Aggregation Framework : Is a set of analytics tools within mongodb that\n              allows to run various reports/ analysis on one/ more mongodb collections.\n              <br/>\n              <br/>\n              <b>Aggregation Pipeline: </b><br/>\n              <ul>\n                <li>Take Input from a single collection.</li>\n                <li>Pass the documents of the collection through one/ more stages.</li>\n                <li>Each stage perform different operations in the Pipeline.</li>\n                <li>Each stage take as Input whatever the stage before produced as Output. \n              The Input and Output for all stages are documents (stream of documents).</li>\n                <li>At the end of Pipeline we get access to the output of the transformed and aggregated Output.</li>\n              </ul>\n                  <div style={titles}>\n                    <PrismCode\n                      code={Pipeline}\n                      language=\"js\"\n                      plugins={[\"line-numbers\"]}\n                    />\n                  </div>\n                </List>\n            </Paper>\n          </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Intro));\n"]},"metadata":{},"sourceType":"module"}