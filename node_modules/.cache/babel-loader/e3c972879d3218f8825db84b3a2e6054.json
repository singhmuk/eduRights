{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/kanban.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst getLists = `\n//AddTaskForm.js\nexport default class AddTaskForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editing: false\n    }\n  }\n\n  onSubmit(event) {\n    event.preventDefault();\n    const taskText = this.textInput.value.trim();\n    const listNumber = this.props.formNum;\n    console.log(listNumber)\n    if (taskText && this.props.onAdd) {\n      this.props.onAdd(taskText, listNumber);\n    }\n    this.textInput.value = '';\n  }\n\n setEditing(editing) {\n    this.setState({\n      editing\n    });\n  }\n\n  render() {\n    if(!this.state.editing) {\n      return (\n        <div onClick={() => this.setEditing(true)}>\n          <a href=\"#\">Add a task!</a>\n        </div>  \n        ); \n    }\n      return (\n        <form onSubmit={(e) => this.onSubmit(e)}>\n          <input type=\"text\" ref={input => this.textInput = input} aria-label=\"Add a task\" />\n          <div>\n            <button>Add Task</button>\n            <button onClick={() => this.setEditing(false)}>Cancel</button>\n          </div>\n        </form>\n      );\n  }\n}\n\n\n//TaskCard.js\nimport React from 'react';\n\nexport default function TaskCard(props) {\n  return (\n    <div className=\"task-card\" draggable=\"true\" id={[props.timeId]} onDragStart={props.onDragStart}>\n      {props.taskText}\n    </div>\n  ) \n};\n\n\n//List.js\nimport TaskCard from './TaskCard';\nimport AddTaskForm from './AddTaskForm';\n\n\nexport default class List extends React.Component {\n  constructor(props) {\n    super(props);\n    }\n   \n  render() {\n    const cards = this.props.cards.map((card, index) => {\n      return ( \n        <li key={index}>\n          <TaskCard {...card} onDragStart={this.props.onDragStart} />\n        </li>\n      );\n    })\n      \n    return (\n      <div>\n        <h2>{this.props.title}</h2>\n        <ul className=\"list\" onDragOver={this.props.onDragOver} onDrop={this.props.onDrop}>\n          {cards}\n          <li>\n            <AddTaskForm formNum={this.props.id} onAdd={this.props.onAdd} />\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\n\n//App.js\nimport List from './kanban/List';\nimport \"./App.css\"\n\nexport default class Board extends Component {\n  constructor(props) {\n    super(props);\n      this.state = {\n        lists: [\n          {title: 'Derrick', id: 0,\n            cards: [{ taskText: 'default task card 1', listNumber: 0, timeId: 0 }, \n            { taskText: 'default task card 2', listNumber: 0, timeId: 1 }]\n          },\n          { title: 'Maxwell', id: 1,\n            cards: [{ taskText: 'default task card 1', listNumber: 1, timeId: 2 }, \n            { taskText: 'default task card 2', listNumber: 1, timeId: 3 }]\n          },\n          { title: 'Zaza', id: 2,\n            cards: [{ taskText: 'default task card 1', listNumber: 2, timeId: 4 }, \n            { taskText: 'default task card 2', listNumber: 2, timeId: 5 }]\n          },\n          { title: 'Sam', id: 3,\n            cards: [{ taskText: 'default task card 1', listNumber: 3, timeId: 6 }, \n            { taskText: 'default task card 2', listNumber: 3, timeId: 7 }]\n          }\n        ]\n      }\n\n      localStorage.setItem('lists', JSON.stringify(this.state.lists))\n    }\n\n  //get id of item being dragged and list where it's coming from\n  onDragStart = (e, fromList) => {\n    const dragInfo = {\n      taskId: e.currentTarget.id,\n      fromList: fromList\n    }\n  \n    localStorage.setItem('dragInfo', JSON.stringify(dragInfo));\n  }\n\n  onDragOver = (e) => {\n    e.preventDefault();\n  }\n\n  onDrop = (e, listNum) => {\n    //get the dropped task card, the localStorage, \n    const droppedTask = localStorage.getItem('dragInfo');\n    const rawLS = localStorage.getItem('lists');\n    const parsedLS = JSON.parse(rawLS);\n    const parsedDragInfo = JSON.parse(droppedTask)\n    \n    //get task cards array, get rid of moved card, and put a new card\n    // in the list where it was dropped\n    const cardsArray = parsedLS[parsedDragInfo.fromList].cards\n    const taskCard = cardsArray.find(card => card.timeId == parsedDragInfo.taskId)\n    const indexOfCard = cardsArray.findIndex(card => card.timeId == parsedDragInfo.taskId)\n    parsedLS[parsedDragInfo.fromList].cards.splice(indexOfCard, 1)\n    parsedLS[listNum].cards.push({...taskCard, listNumber: parseInt(listNum)})\n   \n    //sync the state and localStorage\n    this.setState({\n      lists: parsedLS\n    });\n    localStorage.setItem('lists', JSON.stringify(parsedLS));\n    \n  }\n\n  //add some new task cards\n  addTaskCard(taskText, listNumber) {\n    const rawLS = localStorage.getItem('lists');\n    const parsedLS = JSON.parse(rawLS);\n\n    const newTask = {\n      taskText,\n      listNumber,\n      timeId: new Date().valueOf()\n    }\n\n    parsedLS[listNumber].cards.push(newTask)\n\n    //sync state and localStorage\n    this.setState({\n      lists: parsedLS\n    })\n    localStorage.setItem('lists', JSON.stringify(parsedLS))\n  \n  }\n\n\nrender() {\n  const lists = this.state.lists.map((list, index) => (\n    <li key={index}>\n      <List {...list} \n        onAdd={(taskText, listNumber) => this.addTaskCard(taskText, listNumber)} \n        onDragStart={(e, fromList) => this.onDragStart(e, ''$'{list.id}')}\n        onDragOver={(e) => this.onDragOver(e)} \n        onDrop={(e, listNum) => {this.onDrop(e, ''$'{list.id}')}}\n      />\n    </li>\n  ));\n   \n  return (\n    <div>\n      <ul className=\"lists\">\n        {lists}\n      </ul>\n    </div>\n  );\n  }\n}\n`.trim();\nconst App = `\n.lists {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  justify-content: space-evenly;\n  padding: 0;\n  list-style-type: none;\n}\n\n.list {\n  list-style-type: none;\n  background: #E0E0E0;\n  padding: 8px;\n}\n\n.task-card {\n  background: #ffffff;\n  margin-bottom: 8px;\n  padding: 8px;\n  border-radius: 2px;\n  word-break: break-all;\n  word-wrap: break-word;\n  cursor: pointer;\n}\n\n.task-card:hover {\n  background-color: #f9f3f3;\n}`.trim();\n\nclass Kanban extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, \"Kanban\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: getLists,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, \"1App.css\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: App,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Kanban);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/kanban.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","getLists","trim","App","Kanban","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,UAAtB,EAAkCC,IAAlC,QAA8C,mBAA9C;AAEA,OAAO,eAAP;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAGA,MAAMC,MAAM,GAAG;AAAEC,EAAAA,eAAe,EAAE,SAAnB;AAA8BC,EAAAA,OAAO,EAAE,KAAvC;AAA8CC,EAAAA,QAAQ,EAAE;AAAxD,CAAf;;AAEA,MAAMC,MAAM,GAAGC,KAAK,KAAK;AACvBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH;AAELN,IAAAA,OAAO,EAAEG,KAAK,CAACG,OAAN,CAAc,CAAd;AAFJ,GADgB;AAKvBC,EAAAA,QAAQ,EAAE;AACRF,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd;AADA,GALa;AAQvBE,EAAAA,SAAS,EAAE;AACTC,IAAAA,SAAS,EAAE;AADF;AARY,CAAL,CAApB;;AAcA,MAAMC,QAAQ,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAD,CA6MfC,IA7Me,EAAjB;AA+MA,MAAMC,GAAG,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAD,CA6BTD,IA7BS,EAAZ;;AAgCA,MAAME,MAAN,SAAqBvB,SAArB,CAA+B;AAC7BwB,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,UAAU,CAAC,MAAMxB,KAAK,CAACyB,YAAN,EAAP,EAA6B,CAA7B,CAAV;AACD;;AACDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB;AACA,WACE,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAED,OAAO,CAACd,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAJ,CADF,CADF,CADF,EAOE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAEc,OAAO,CAACd,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAK,MAAA,KAAK,EAAEN,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEY,QADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAFF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAXF,EAYE;AAAK,MAAA,KAAK,EAAEZ,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEc,GADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAZF,CADF,CADF,CAPF,CADF;AAkCD;;AAxC4B;;AA2C/B,eAAgBlB,UAAU,CAACQ,MAAD,CAAV,CAAmBW,MAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst getLists = `\n//AddTaskForm.js\nexport default class AddTaskForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editing: false\n    }\n  }\n\n  onSubmit(event) {\n    event.preventDefault();\n    const taskText = this.textInput.value.trim();\n    const listNumber = this.props.formNum;\n    console.log(listNumber)\n    if (taskText && this.props.onAdd) {\n      this.props.onAdd(taskText, listNumber);\n    }\n    this.textInput.value = '';\n  }\n\n setEditing(editing) {\n    this.setState({\n      editing\n    });\n  }\n\n  render() {\n    if(!this.state.editing) {\n      return (\n        <div onClick={() => this.setEditing(true)}>\n          <a href=\"#\">Add a task!</a>\n        </div>  \n        ); \n    }\n      return (\n        <form onSubmit={(e) => this.onSubmit(e)}>\n          <input type=\"text\" ref={input => this.textInput = input} aria-label=\"Add a task\" />\n          <div>\n            <button>Add Task</button>\n            <button onClick={() => this.setEditing(false)}>Cancel</button>\n          </div>\n        </form>\n      );\n  }\n}\n\n\n//TaskCard.js\nimport React from 'react';\n\nexport default function TaskCard(props) {\n  return (\n    <div className=\"task-card\" draggable=\"true\" id={[props.timeId]} onDragStart={props.onDragStart}>\n      {props.taskText}\n    </div>\n  ) \n};\n\n\n//List.js\nimport TaskCard from './TaskCard';\nimport AddTaskForm from './AddTaskForm';\n\n\nexport default class List extends React.Component {\n  constructor(props) {\n    super(props);\n    }\n   \n  render() {\n    const cards = this.props.cards.map((card, index) => {\n      return ( \n        <li key={index}>\n          <TaskCard {...card} onDragStart={this.props.onDragStart} />\n        </li>\n      );\n    })\n      \n    return (\n      <div>\n        <h2>{this.props.title}</h2>\n        <ul className=\"list\" onDragOver={this.props.onDragOver} onDrop={this.props.onDrop}>\n          {cards}\n          <li>\n            <AddTaskForm formNum={this.props.id} onAdd={this.props.onAdd} />\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\n\n//App.js\nimport List from './kanban/List';\nimport \"./App.css\"\n\nexport default class Board extends Component {\n  constructor(props) {\n    super(props);\n      this.state = {\n        lists: [\n          {title: 'Derrick', id: 0,\n            cards: [{ taskText: 'default task card 1', listNumber: 0, timeId: 0 }, \n            { taskText: 'default task card 2', listNumber: 0, timeId: 1 }]\n          },\n          { title: 'Maxwell', id: 1,\n            cards: [{ taskText: 'default task card 1', listNumber: 1, timeId: 2 }, \n            { taskText: 'default task card 2', listNumber: 1, timeId: 3 }]\n          },\n          { title: 'Zaza', id: 2,\n            cards: [{ taskText: 'default task card 1', listNumber: 2, timeId: 4 }, \n            { taskText: 'default task card 2', listNumber: 2, timeId: 5 }]\n          },\n          { title: 'Sam', id: 3,\n            cards: [{ taskText: 'default task card 1', listNumber: 3, timeId: 6 }, \n            { taskText: 'default task card 2', listNumber: 3, timeId: 7 }]\n          }\n        ]\n      }\n\n      localStorage.setItem('lists', JSON.stringify(this.state.lists))\n    }\n\n  //get id of item being dragged and list where it's coming from\n  onDragStart = (e, fromList) => {\n    const dragInfo = {\n      taskId: e.currentTarget.id,\n      fromList: fromList\n    }\n  \n    localStorage.setItem('dragInfo', JSON.stringify(dragInfo));\n  }\n\n  onDragOver = (e) => {\n    e.preventDefault();\n  }\n\n  onDrop = (e, listNum) => {\n    //get the dropped task card, the localStorage, \n    const droppedTask = localStorage.getItem('dragInfo');\n    const rawLS = localStorage.getItem('lists');\n    const parsedLS = JSON.parse(rawLS);\n    const parsedDragInfo = JSON.parse(droppedTask)\n    \n    //get task cards array, get rid of moved card, and put a new card\n    // in the list where it was dropped\n    const cardsArray = parsedLS[parsedDragInfo.fromList].cards\n    const taskCard = cardsArray.find(card => card.timeId == parsedDragInfo.taskId)\n    const indexOfCard = cardsArray.findIndex(card => card.timeId == parsedDragInfo.taskId)\n    parsedLS[parsedDragInfo.fromList].cards.splice(indexOfCard, 1)\n    parsedLS[listNum].cards.push({...taskCard, listNumber: parseInt(listNum)})\n   \n    //sync the state and localStorage\n    this.setState({\n      lists: parsedLS\n    });\n    localStorage.setItem('lists', JSON.stringify(parsedLS));\n    \n  }\n\n  //add some new task cards\n  addTaskCard(taskText, listNumber) {\n    const rawLS = localStorage.getItem('lists');\n    const parsedLS = JSON.parse(rawLS);\n\n    const newTask = {\n      taskText,\n      listNumber,\n      timeId: new Date().valueOf()\n    }\n\n    parsedLS[listNumber].cards.push(newTask)\n\n    //sync state and localStorage\n    this.setState({\n      lists: parsedLS\n    })\n    localStorage.setItem('lists', JSON.stringify(parsedLS))\n  \n  }\n\n\nrender() {\n  const lists = this.state.lists.map((list, index) => (\n    <li key={index}>\n      <List {...list} \n        onAdd={(taskText, listNumber) => this.addTaskCard(taskText, listNumber)} \n        onDragStart={(e, fromList) => this.onDragStart(e, ''$'{list.id}')}\n        onDragOver={(e) => this.onDragOver(e)} \n        onDrop={(e, listNum) => {this.onDrop(e, ''$'{list.id}')}}\n      />\n    </li>\n  ));\n   \n  return (\n    <div>\n      <ul className=\"lists\">\n        {lists}\n      </ul>\n    </div>\n  );\n  }\n}\n`.trim();\n\nconst App = `\n.lists {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  justify-content: space-evenly;\n  padding: 0;\n  list-style-type: none;\n}\n\n.list {\n  list-style-type: none;\n  background: #E0E0E0;\n  padding: 8px;\n}\n\n.task-card {\n  background: #ffffff;\n  margin-bottom: 8px;\n  padding: 8px;\n  border-radius: 2px;\n  word-break: break-all;\n  word-wrap: break-word;\n  cursor: pointer;\n}\n\n.task-card:hover {\n  background-color: #f9f3f3;\n}`.trim();\n\n\nclass Kanban extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Kanban</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={getLists}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>1App.css</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={App}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Kanban));\n"]},"metadata":{},"sourceType":"module"}