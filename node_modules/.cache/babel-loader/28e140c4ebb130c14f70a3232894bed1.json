{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/javaScripts/deepJs/typeScript_4.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst assertion = `\n1.Using Angular Bracket <>\nlet empCode: any = 111;\nlet employeeCode = <number> empCode;\nconsole.log(typeof(employeeCode));\n\n2.Using as keyword\nlet empCode: any = 111;\nlet employeeCode = empCode as number;\nconsole.log(typeof(employeeCode));\n\n\n//2\nlet arr:string[] = new Array(\"JavaTpoint\", \"2300\", \"Java\", \"Abhishek\");\nfunction display(arr_values:string[]) {\n   for(let i = 0;i<arr_values.length;i++) {\n      console.log(arr[i]);\n   }\n}\n\ndisplay(arr); `.trim();\nconst modifier = `\n//Public\nclass Student {  \n    public studCode: number;  \n    studName: string;  \n}  \n  \nlet stud = new Student();  \nstud.studCode = 101;  \nstud.studName = \"Joe Root\";  \n  \nconsole.log(stud.studCode+ \" \"+stud.studName);  \n\n\n//Private\nclass Student {  \npublic studCode: number;  \nprivate studName: string;  \n\nconstructor(code: number, name: string){  \nthis.studCode = code;  \nthis.studName = name;  \n}  \n\npublic display() {  \nreturn ('My unique code: '$'{this.studCode}, my name: '$'{this.studName}.');  \n    }  \n}  \n  \nlet student: Student = new Student(1, \"JoeRoot\");  \nconsole.log(student.display());  \n\n\n//Protected\nclass Student {  \n    public studCode: number;  \n    protected studName: string;  \n    constructor(code: number, name: string){  \n        this.studCode = code;  \n        this.studName = name;  \n        }  \n}  \nclass Person extends Student {  \n    private department: string;  \n  \n    constructor(code: number, name: string, department: string) {  \n        super(code, name);  \n        this.department = department;  \n    }  \n    public getElevatorPitch() {  \n        return ('My unique code: '$'{this.studCode}, my name: '$'{this.studName} \n        and I am in '$'{this.department} Branch.');\n    }\n}\nlet joeRoot: Person = new Person(1, \"JoeRoot\", \"CS\");\nconsole.log(joeRoot.getElevatorPitch());`.trim();\nconst accessor = `\n//getter\nclass MyDrawing {\n    length: number = 20;\n    breadth: number = 15;\n\n    get rectangle() {\n        return this.length * this.breadth;\n    }\n}\nconsole.log(new MyDrawing().rectangle);\n\n\n//setter\nlet passcode = \"secret passcode\";\n\nclass Student {\n    private _fullName: string;\n\n    get fullName(): string {\n        return this._fullName;\n    }\n\n    set fullName(newName: string) {\n        if (passcode && passcode == \"secret passcode\") {\n            this._fullName = newName;\n        }\n        else {\n            console.log(\"Unauthorized update of student detail!\");\n        }\n    }\n}\n\nlet stud = new Student();\nstud.fullName = \"Virat Kohli\";\nif (stud.fullName) {\n    console.log(stud.fullName);\n}`.trim();\nconst decoratorstypes = `\nfunction logger(constructor: Function){\n  console.log('Loggin')\n}\n\n@logger\nclass Person{\n  name=\"Krishana\";\n  constructor(){\n    console.log('Calling Decorator')\n  }\n}\n\nconst obj = new Person();\nobj; \n`.trim();\nconst prodecoratrs = `\n\n`.trim();\nconst sortArr = `\nclass App{\n  arr:any;\n  i:number;\n  j:number;\n  temp:any;\n\n  sortValue(){\n      for(this.i=0;this.i<this.arr.length;this.i++){\n          for(this.j=this.i;this.j<this.arr.length;this.j++){\n              if(this.arr[this.i]>this.arr[this.j]){\n                  this.temp=this.arr[this.i];\n                  this.arr[this.i]=this.arr[this.j];\n                  this.arr[this.j]=this.temp;\n              }\n          }\n      }\n      console.log(this.arr)\n  }\n}\n\n\nconst obj=new App();\nobj.arr=[5,3,1,9,0];\nobj.sortValue();\n`.trim();\nconst missingVal = `\nclass App{\n  i:number;\n  arr:any=[0,1,3];\n  result:number=0;\n  exactSum:number;\n  missingNum:number;\n\n  getSum(){\n      this.exactSum = this.arr.reduce((a,b)=>a+b);\n      \n      for(this.i=0; this.i<=this.arr.length; this.i++){\n          this.result += this.i;\n      }\n\n      this.missingNum = this.result - this.exactSum;\n      console.log(this.missingNum);\n  }\n}\n\nconst obj=new App();\nobj.getSum();\n`.trim();\nconst palindroms = `\nclass App{\n  str:string='madam';\n  str2:string='';\n  i=0;\n\n  getSum(){\n      for(this.i=this.str.length-1; this.i>=0; this.i--){\n          this.str2 += this.str[this.i];\n      }\n\n      if(this.str !== this.str2){\n          console.log('Not Palindrom', this.str2);\n      } else{\n          console.log('Palindrom', this.str2);\n      }\n      \n  }\n}\n\nconst obj=new App();\nobj.getSum();\n`.trim();\nconst duplicates = `\nclass App{\n  i=0;\n  j=0;\n  array = [1,2,3,4,3,0,9,0,1];\n  result:any=[];\n  count:number;\n\n  getSum(){\n      for(this.i=0; this.i<=this.array.length; this.i++){\n          this.count=0;\n          for(this.j=0; this.j<=this.result.length; this.j++){\n              if(this.array[this.i]==this.result[this.j]){\n                  this.count +=1;\n              }\n          }\n\n          if(this.count==0){\n              this.result.push(this.array[this.i]);\n          }\n      }\n      console.log(this.result);\n  }\n}\n\nconst obj=new App();\nobj.getSum();\n`.trim();\n\nclass TypeScript4 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, \"1. Type assertion\"), \"Type assertion is a technique that informs the compiler about the type of a variable.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, \"TypeScript provides two ways to do Type Assertion.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: assertion,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, \"2. Access Modifier\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, \"Public: \"), \"We can access this data member anywhere without any restriction.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, \"Private: \"), \"It ensures that the class members are visible only to that class in which it is containing.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, \"Protected: \"), \"A Protected access modifier can be accessed only within the class and its subclass. We cannot access it from the outside of a class in which it is containing.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: modifier,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, \"3. TypeScript Accessor\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: accessor,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, \"4. Decorator\"), \"Decorators extends the functionality of classes & methods.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, \"There are five ways to use decorators \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, \"class declaration\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, \"property\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, \"method\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, \"parameter\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, \"accessor\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, \"Class Decorator: \"), \"A class decorator makes it possible to intercept the constructor of class. They are called when the class is declared, not when a new instance is instantiated.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }), \"When a class is decorated decendents will not inherit the decorators. Let\\u2019s freeze the class to prevent inheritence completely.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: decoratorstypes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, \"How do you create and use modules in TypeScript?\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, \"4. SortArr\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: sortArr,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }, \"5. MissingVal\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: missingVal,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, \"6. Palindroms\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: palindroms,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, \"4. Remove Duplicates\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: duplicates,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(TypeScript4);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/javaScripts/deepJs/typeScript_4.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","assertion","trim","modifier","accessor","decoratorstypes","prodecoratrs","sortArr","missingVal","palindroms","duplicates","TypeScript4","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst assertion = `\n1.Using Angular Bracket <>\nlet empCode: any = 111;\nlet employeeCode = <number> empCode;\nconsole.log(typeof(employeeCode));\n\n2.Using as keyword\nlet empCode: any = 111;\nlet employeeCode = empCode as number;\nconsole.log(typeof(employeeCode));\n\n\n//2\nlet arr:string[] = new Array(\"JavaTpoint\", \"2300\", \"Java\", \"Abhishek\");\nfunction display(arr_values:string[]) {\n   for(let i = 0;i<arr_values.length;i++) {\n      console.log(arr[i]);\n   }\n}\n\ndisplay(arr); `.trim();\n\n\nconst modifier = `\n//Public\nclass Student {  \n    public studCode: number;  \n    studName: string;  \n}  \n  \nlet stud = new Student();  \nstud.studCode = 101;  \nstud.studName = \"Joe Root\";  \n  \nconsole.log(stud.studCode+ \" \"+stud.studName);  \n\n\n//Private\nclass Student {  \npublic studCode: number;  \nprivate studName: string;  \n\nconstructor(code: number, name: string){  \nthis.studCode = code;  \nthis.studName = name;  \n}  \n\npublic display() {  \nreturn ('My unique code: '$'{this.studCode}, my name: '$'{this.studName}.');  \n    }  \n}  \n  \nlet student: Student = new Student(1, \"JoeRoot\");  \nconsole.log(student.display());  \n\n\n//Protected\nclass Student {  \n    public studCode: number;  \n    protected studName: string;  \n    constructor(code: number, name: string){  \n        this.studCode = code;  \n        this.studName = name;  \n        }  \n}  \nclass Person extends Student {  \n    private department: string;  \n  \n    constructor(code: number, name: string, department: string) {  \n        super(code, name);  \n        this.department = department;  \n    }  \n    public getElevatorPitch() {  \n        return ('My unique code: '$'{this.studCode}, my name: '$'{this.studName} \n        and I am in '$'{this.department} Branch.');\n    }\n}\nlet joeRoot: Person = new Person(1, \"JoeRoot\", \"CS\");\nconsole.log(joeRoot.getElevatorPitch());`.trim();\n\nconst accessor = `\n//getter\nclass MyDrawing {\n    length: number = 20;\n    breadth: number = 15;\n\n    get rectangle() {\n        return this.length * this.breadth;\n    }\n}\nconsole.log(new MyDrawing().rectangle);\n\n\n//setter\nlet passcode = \"secret passcode\";\n\nclass Student {\n    private _fullName: string;\n\n    get fullName(): string {\n        return this._fullName;\n    }\n\n    set fullName(newName: string) {\n        if (passcode && passcode == \"secret passcode\") {\n            this._fullName = newName;\n        }\n        else {\n            console.log(\"Unauthorized update of student detail!\");\n        }\n    }\n}\n\nlet stud = new Student();\nstud.fullName = \"Virat Kohli\";\nif (stud.fullName) {\n    console.log(stud.fullName);\n}`.trim();\n\nconst decoratorstypes = `\nfunction logger(constructor: Function){\n  console.log('Loggin')\n}\n\n@logger\nclass Person{\n  name=\"Krishana\";\n  constructor(){\n    console.log('Calling Decorator')\n  }\n}\n\nconst obj = new Person();\nobj; \n`.trim();\n\nconst prodecoratrs = `\n\n`.trim();\n\nconst sortArr = `\nclass App{\n  arr:any;\n  i:number;\n  j:number;\n  temp:any;\n\n  sortValue(){\n      for(this.i=0;this.i<this.arr.length;this.i++){\n          for(this.j=this.i;this.j<this.arr.length;this.j++){\n              if(this.arr[this.i]>this.arr[this.j]){\n                  this.temp=this.arr[this.i];\n                  this.arr[this.i]=this.arr[this.j];\n                  this.arr[this.j]=this.temp;\n              }\n          }\n      }\n      console.log(this.arr)\n  }\n}\n\n\nconst obj=new App();\nobj.arr=[5,3,1,9,0];\nobj.sortValue();\n`.trim();\n\nconst missingVal = `\nclass App{\n  i:number;\n  arr:any=[0,1,3];\n  result:number=0;\n  exactSum:number;\n  missingNum:number;\n\n  getSum(){\n      this.exactSum = this.arr.reduce((a,b)=>a+b);\n      \n      for(this.i=0; this.i<=this.arr.length; this.i++){\n          this.result += this.i;\n      }\n\n      this.missingNum = this.result - this.exactSum;\n      console.log(this.missingNum);\n  }\n}\n\nconst obj=new App();\nobj.getSum();\n`.trim();\n\nconst palindroms = `\nclass App{\n  str:string='madam';\n  str2:string='';\n  i=0;\n\n  getSum(){\n      for(this.i=this.str.length-1; this.i>=0; this.i--){\n          this.str2 += this.str[this.i];\n      }\n\n      if(this.str !== this.str2){\n          console.log('Not Palindrom', this.str2);\n      } else{\n          console.log('Palindrom', this.str2);\n      }\n      \n  }\n}\n\nconst obj=new App();\nobj.getSum();\n`.trim();\n\nconst duplicates = `\nclass App{\n  i=0;\n  j=0;\n  array = [1,2,3,4,3,0,9,0,1];\n  result:any=[];\n  count:number;\n\n  getSum(){\n      for(this.i=0; this.i<=this.array.length; this.i++){\n          this.count=0;\n          for(this.j=0; this.j<=this.result.length; this.j++){\n              if(this.array[this.i]==this.result[this.j]){\n                  this.count +=1;\n              }\n          }\n\n          if(this.count==0){\n              this.result.push(this.array[this.i]);\n          }\n      }\n      console.log(this.result);\n  }\n}\n\nconst obj=new App();\nobj.getSum();\n`.trim();\n\n\nclass TypeScript4 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Type assertion</h3>\n              Type assertion is a technique that informs the compiler about the type of a variable. \n              <br />\n              <b>TypeScript provides two ways to do Type Assertion.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={assertion}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n\n\n              <h3>2. Access Modifier</h3>\n              <ul>\n                <li><b>Public: </b>We can access this data member anywhere without any restriction.</li>\n                <li><b>Private: </b>It ensures that the class members are visible only to that class in which it is containing.</li>\n                <li><b>Protected: </b>A Protected access modifier can be accessed only within the class and its subclass. We cannot access it\n                  from the outside of a class in which it is containing.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={modifier}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. TypeScript Accessor</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={accessor}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Decorator</h3>\n              Decorators extends the functionality of classes & methods.\n              <br/>\n              <br/>\n              <b>There are five ways to use decorators </b>\n              <ul>\n                <li>class declaration</li>\n                <li>property</li>\n                <li>method</li>\n                <li>parameter</li>\n                <li>accessor</li>\n              </ul>\n              <br/>\n              <b/>\n              <b>Class Decorator: </b>\n              A class decorator makes it possible to intercept the constructor of class. They are called when the class is \n              declared, not when a new instance is instantiated.\n              <br/>\n              When a class is decorated decendents will not inherit the \n              decorators. Let’s freeze the class to prevent inheritence completely.\n              <div style={titles}>\n                <PrismCode\n                  code={decoratorstypes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>How do you create and use modules in TypeScript?</h3>\n              <br />\n              <br />\n\n\n              <h3>4. SortArr</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={sortArr}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. MissingVal</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={missingVal}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Palindroms</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={palindroms}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Remove Duplicates</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={duplicates}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(TypeScript4));\n"]},"metadata":{},"sourceType":"module"}