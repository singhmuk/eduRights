{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/css/html_1.js\";\nimport React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport \"../ReactJs/styles.css\";\nimport Sidebar from \"./sidebar\";\nimport PrismCode from \"../ReactJs/prismCode\";\nconst titles = {\n  backgroundColor: \"#F0F8FF\",\n  padding: \"1px\",\n  fontSize: \"16px\"\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst iframe = `\n\n `.trim();\nconst autocapitalize = `\n#syntex\n<tag_name autocapitalize=\"off | none | on | sentences | words | characters\" />\n\n\n#Ex.\ndiv.a { text-transform: uppercase/ lowercase/ capitalize; }\n<div class=\"a\">Uppercase.</div>\n\n\n//\n<a href=\"https://www.google.com\" target=\"_blank\">Open new tab</a><br/>\n<a href=\"#local\">SPA</a>\n<p id=\"local\">Move to SPA Block</p>\n`.trim();\nconst video = `\n\n`.trim();\nconst capture = `\n\t<input type=\"file\" id=\"soundFile\" capture=\"user\" accept=\"audio/*\">\n<input type=\"file\" id=\"videoFile\" capture=\"environment\" accept=\"video/*\">\n<input type=\"file\" id=\"imageFile\" capture=\"user\" accept=\"image/*\">\n`.trim();\nconst area = `\n<map name=\"planetmap\">\n  <area shape=\"rect\" coords=\"0,0,82,126\" alt=\"Sun\" href=\"sun.htm\">\n  <area shape=\"circle\" coords=\"90,58,3\" alt=\"Mercury\" href=\"mercur.htm\">\n  <area shape=\"circle\" coords=\"124,58,8\" alt=\"Venus\" href=\"venus.htm\">\n</map>\n`.trim();\nconst object = `\n<object data=\"movie.mp4\" width=\"400\" height=\"300\"></object>\n\n<object data=\"snippet.html\" width=\"500\" height=\"200\"></object>\n`.trim();\nconst optgroup = `\n<form action=\"/action_page.php\">\n  <label for=\"cars\">Choose a car:</label>\n  <select name=\"cars\" id=\"cars\">\n    <optgroup label=\"Swedish Cars\">\n      <option value=\"volvo\">Volvo</option>\n      <option value=\"saab\">Saab</option>\n    </optgroup>\n  </select>\n  <input type=\"submit\" value=\"Submit\">\n</form>\n`.trim();\nconst outputs = `\n<form oninput=\"x.value=parseInt(a.value)+parseInt(b.value)\">\n  <input type=\"range\" id=\"a\" value=\"50\">\n  +<input type=\"number\" id=\"b\" value=\"25\">\n  =<output name=\"x\" for=\"a b\"></output>\n</form>\n`.trim();\nconst geolocation = `\n//index.js\nfunction getLocation() {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(showPosition);\n  } else {\n    x.innerHTML = \"Geolocation is not supported by this browser.\";\n  }\n}\n\nfunction showPosition(position) {\n  x.innerHTML = \"Latitude: \" + position.coords.latitude +\n    \"<br>Longitude: \" + position.coords.longitude;\n}\n\nvar x = document.getElementById(\"demo\");\n\n\n//index.html\n  <body>\n    <button onclick=\"getLocation()\">Get Location</button>\n    <p id=\"demo\"></p>\n    <script type=\"text/javascript\" src=\"index.js\"></script>\n  </body>\n`.trim();\nconst dragDrop = `\n//index.js\nfunction allowDrop(ev) {\n  ev.preventDefault();\n}\n\nfunction drag(ev) {\n  ev.dataTransfer.setData(\"text\", ev.target.id);\n}\n\nfunction drop(ev) {\n  ev.preventDefault();\n  var data = ev.dataTransfer.getData(\"text\");\n  ev.target.appendChild(document.getElementById(data));\n}\n\n\n//index.html\n<style>\n#div1, #div2 {\n  float: left;\n  width: 100px;\n  height: 35px;\n  border: 1px solid black;\n}\n</style>\n  <script type=\"text/javascript\" src=\"index.js\"></script>\n</head>\n\n<body>\n<div id=\"div1\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\">\n  <img src=\"img_w3slogo.gif\" draggable=\"true\" ondragstart=\"drag(event)\" id=\"drag1\" width=\"88\" height=\"31\">\n</div>\n\n  <div id=\"div2\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\"></div>\n</body>\n`.trim();\nconst workerWorker = `var worker = new Worker(\"sample_prog.js\"﴿;`.trim();\nconst serverSentEvent = `\nvar source = new EventSource(\"sse_demo.php\");\nsource.onmessage = function(event) {\ndocument.getElementById(\"result\").innerHTML += event.data + \"<br>\";\n};\n`.trim();\nconst element = `\n<script>\ndocument.createElement(\"myElement\")\n</script>\n\n\n//It can be used in the HTML as.\n<myElement>hello</myElement>\n`.trim();\nconst Session = `\n//Use setItem() function to store data in Session Storage\nsessionStorage.setItem (‘key’,’value’);\n\nsessionStorage.setItem (‘username’,’Meenakshi’)\n\n\n//Use getItem() function to retrieve data from Session Storage\nsessionStorage.getItem(‘key’);\n\nvar username= sessionStorage.getItem(‘username’);\n\n\n/*\n  We can only store String in Session Storage. To save the objects in Session, first, convert \n  the object into JSON string and then store this string in Session Storage as\n*/\n\nsessionStorage.setItem (‘object’, JSON.stringify(object));\n\n\n//If JSON string gets stored in Session Storage, then first convert it into an object as follows.\n\nvar object=JSON.parse(sessionStorage.getItem(‘object’));\n\n\n//Use removeItem() function to delete a particular key from Session Storage.\nsessionStorage.removeItem(‘key’);\n\n`.trim();\nconst htmlStyles = `\n<tagname style=\"property:value;\">`.trim();\nconst quotation = `\nq for: <q>Short Quotations.</q>\n\n<abbr title=\"World Health Organization\">WHO</abbr>\n\n<bdo dir=\"rtl\">This text will be written from right to left</bdo>\n`.trim();\nconst htmltags = `\nHTML Attributes: Attributes provide additional information about an element.\nAlways specifed in the start tag.\nCome in name/ value pairs. Like name=\"value\"\nEx. <p title=\"about paragraph\">Here is containt</p>\n`.trim();\nconst metertags = `\nTemp: <meter min=0 max=10 value=\".5\" low=\"3\" high=\"8\" optimum=\"5\"></meter>\nDownload: <progress max=\"100\" value=\"80\"></progress>\n`.trim();\nconst grisCont = `\n<style>\n  .container {\n    display: grid;\n    grid-template-columns: auto auto auto;\n  }\n\n//2\n  .flex-container {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n  }\n</style>\n\n<body>\n  <div class=\"container\">\n  <p>Paragraph</p>\n  <p>Paragraph2</p>\n  <p>Paragraph3</p>\n  </div>\n</body>`.trim();\nconst definitionList = `\n<dl>\n  <dt>Term 1</dt>\n  <dd>Definition 1</dd>\n  <dt>Term 2</dt>\n  <dd>Definition 2</dd>\n  <dt>Term 3</dt>\n  <dd>Definition 3</dd>\n</dl>\n`.trim();\nconst picturecss = `\n<picture>\n  <source media=\"(min-width: 1024px)\" srcset=\"large-image.jpg\">\n  <source media=\"(min-width: 768px)\" srcset=\"medium-image.jpg\">\n  <img src=\"small-image.jpg\" alt=\"An image\">\n</picture>\n`.trim();\n\nclass Html1 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, \"1. Grid\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: grisCont,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, \"Html: \"), \"Structure\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, \"css: \"), \"Styles\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, \"Div and Span are used to structure webpage. They are structure element.\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, \"div: \"), \"Block Element\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, \"span: \"), \"Inline Element\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, \"4. What is a tag in HTML?\"), \"A tag instructs the Browser about how to format the HTML properly.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, \"5. What is the difference between HTML elements and tags?\"), \"The HTML element is everything from the start tag to the end tag. HTML elements become HTML tags when enclosed within angular brackets.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: htmltags,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, \"6. HTML Attributes\"), \"HTML attributes provide additional information about HTML elements.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, \"All HTML elements can have \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, \"attributes.\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, \"Attributes are always specified in \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, \"the start tag.\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, \"Attributes usually come in name/value pairs like:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, \"name=\\\"value\\\"\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, \"7. What is the purpose of DOCTYPE in HTML, and what are some different types of DOCTYPEs?\"), \"The DOCTYPE declaration in HTML is used to specify the version of HTML or XHTML used in a web document. It informs the browser how to render the page and what rules to follow when parsing the code.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }), \"There are several types of DOCTYPEs:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, \"HTML5 DOCTYPE: \"), \"!DOCTYPE html\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, \"XHTML 1.0 Strict DOCTYPE: \"), \"!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\"\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, \"HTML 4.01 Strict DOCTYPE: \"), \"!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01//EN\\\" \\\"http://www.w3.org/TR/html4/strict.dtd\\\"\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, \"Transitional DOCTYPEs: \"), \"HTML 4.01 Transitional and XHTML 1.0 Transitional\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, \"Frameset DOCTYPEs: \"), \"HTML 4.01 Frameset and XHTML 1.0 Frameset\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    })), \"The DOCTYPE should be placed at the beginning of the HTML document before any other tags. It is important to include a DOCTYPE declaration to ensure that the web page is rendered correctly in all browsers.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, \"8. Explain the difference between HTML and XHTML (Extensible Hypertext Markup Language) .\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, \"Syntax: \"), \"HTML syntax is more forgiving, allowing for unclosed tags, missing attributes, and more. XHTML, on the other hand, requires well-formed XML syntax, with all tags properly closed and attributes quoted.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, \"Document structure: \"), \"HTML does not require a document type declaration, while XHTML requires a specific DOCTYPE declaration at the beginning of the document.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }, \"Validation: \"), \"HTML validation is done against a set of rules, while XHTML validation is done against a specific XML schema.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }, \"MIME type: \"), \"HTML is served with a text/html MIME type, while XHTML is served with an application/xhtml+xml MIME type.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, \"Browser support: \"), \"Most modern browsers support both HTML and XHTML, but older browsers may have difficulty with XHTML due to its stricter syntax.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    })), \"In summary, XHTML is a stricter and more standardized version of HTML that is based on XML syntax. It requires well-formed XML syntax and a specific DOCTYPE declaration, and is validated against an XML schema. While both languages are used for creating web pages, HTML is more forgiving and easier to work with, while XHTML offers greater standardization and stricter rules.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }, \"9. What are the different types of form inputs in HTML, and how do you use them?\"), \"HTML provides different types of form inputs that allow users to enter data in various ways. Some of the commonly used form inputs are:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }, \"Text Input\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }, \"Password Input\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }, \"Checkbox Input\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    }, \"Radio Input\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }, \"Select Input\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }, \"Textarea Input\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }, \"File Input\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }, \"10. What are the different ways to include external stylesheets in an HTML document, and what are the advantages and disadvantages of each?\"), \"There are three main ways to include external stylesheets in an HTML document:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }, \"Using the link element: The disadvantage is that it requires an additional HTTP request to load the stylesheet, which can slow down the initial page load.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    }, \"Using the style element: This method has the advantage of avoiding the extra HTTP request required by the link method, but it has the disadvantage of not allowing the browser to cache the stylesheet.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      },\n      __self: this\n    }, \"Using the @import rule: This method involves using the @import rule in a stylesheet to reference another stylesheet. This method has the advantage of allowing you to conditionally load stylesheets based on certain criteria, but it has the same disadvantage as the link method in that it requires an additional HTTP request.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    }, \"12. How do you use HTML5 tags like 'section', 'article', and 'header', and what are the benefits of using these tags?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500\n      },\n      __self: this\n    }, \"section: \"), \"Used to define a section of a document, such as a chapter or a group of related content. It helps to organize the content into meaningful sections.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }, \"article: \"), \"Used to define a self-contained article or content block, such as a blog post or news article. It allows for the content to be easily identified and repurposed.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    }, \"header: \"), \"Used to define a header section for a document or section, such as a page header or a section heading. It helps to give context to the content and improve accessibility.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }, \"Using these tags can provide several benefits\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    }, \"Improved accessibility: \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    }, \"Improved SEO: \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }, \"Improved readability and maintainability: \"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }, \"13. What is the difference between the 'canvas' and 'svg' tags in HTML, and when might you use one over the other?\"), \"The 'canvas' and 'svg' tags in HTML are both used for creating graphics on the web, but they differ in their approach and use cases.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }, \"canvas: \"), \"tag provides a drawing surface for creating dynamic, bitmap-based images using JavaScript. It creates a bitmap that can be manipulated pixel by pixel using JavaScript, which allows for complex animations and interactive graphics. The 'canvas' tag is well-suited for applications that require a lot of drawing, such as games, data visualizations, and image editors.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }, \"svg: \"), \"tag creates vector-based graphics, which are resolution-independent and scalable without loss of quality. SVG graphics are created using XML, and each element in the graphic is defined as a series of paths and shapes. Because SVG is a markup language, it can be manipulated using CSS and JavaScript. The 'svg' tag is well-suited for creating complex vector graphics, such as logos, icons, and illustrations.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    })), \"In summary, the 'canvas' tag is used for creating bitmap-based graphics that require a lot of drawing and interactivity, while the 'svg' tag is used for creating scalable vector-based graphics that can be easily manipulated and styled with CSS.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572\n      },\n      __self: this\n    }, \"14. What are the different types of lists in HTML, and how do you create them?\"), \"There are three types of lists in HTML: ordered lists, unordered lists, and definition lists.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579\n      },\n      __self: this\n    }, \"Ordered lists\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580\n      },\n      __self: this\n    }, \"Unordered lists\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    }, \"Definition lists: \"), \"A definition list is a list where each item is defined with a term and a definition. To create a definition list, you can use the 'dl' tag, the term is represented by the 'dt' tag, and the definition is represented by the 'dd' tag.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: definitionList,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589\n      },\n      __self: this\n    }))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598\n      },\n      __self: this\n    }, \"15. Explain the difference between the 'img' and 'picture' tags in HTML, and how you might use them.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604\n      },\n      __self: this\n    }, \"img: \"), \"tag is used to display a single image on a web page. It has two required attributes: src, which specifies the URL of the image, and alt, which provides alternative text for the image. The alt attribute is important for accessibility, as it is used by screen readers and other assistive technologies to describe the image to users who are visually impaired.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614\n      },\n      __self: this\n    }, \"picture: \"), \" tag is used to provide different versions of an image for different devices or screen sizes. It can be used to specify multiple sources for an image, each with different resolutions, sizes, or formats. The browser will then choose the best source based on the current device or screen size.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: picturecss,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622\n      },\n      __self: this\n    }))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631\n      },\n      __self: this\n    }, \"16. How do you use HTML entities, and why might you need to use them?\"), \"HTML entities are special codes used to represent characters that have a specific meaning or are difficult to display in HTML documents. For example, the character 'open bracket' is used as an opening tag in HTML, but if you want to display it as regular text, you need to use the HTML entity code 'open bracket'. Similarly, special characters such as accented letters or symbols can be represented using entity codes, such as \\\"\\xE9\\\" for \\\"\\xE9\\\" or \\\"\\xA9\\\" for the copyright symbol.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 643\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645\n      },\n      __self: this\n    }, \"You might need to use HTML entities when you are working with text that contains characters that have a special meaning in HTML, such as the angle brackets used for tags, or when you want to display special characters that are not included in the standard ASCII character set.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 653\n      },\n      __self: this\n    }, \"To use an HTML entity, you simply replace the character you want to display with its corresponding entity code. For example, if you want to display the trademark symbol (\\u2122), you can use the entity code \\\"\\u2122\\\".\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660\n      },\n      __self: this\n    }, \"Using HTML entities can help ensure that your content is displayed correctly across different browsers and devices, and can also make your code more accessible to users who rely on assistive technologies to access web content.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669\n      },\n      __self: this\n    }, \"17. HTML Style Attribute\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: htmlStyles,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679\n      },\n      __self: this\n    }, \"18. Non-semantic elements\"), \"These elements are without any definition. They don\\u2019t describe anything about their structure such as 'span' and 'div'.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683\n      },\n      __self: this\n    }, \"19. What are void elements in HTML?\"), \"HTML elements which don't have closing Tags are Void elements.\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685\n      },\n      __self: this\n    }, \"Ex. \"), \"br, img, hr, etc.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 686\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687\n      },\n      __self: this\n    }, \"20. Is it possible to change an inline element into a block level element?\"), \"Yes, it is possible using the \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691\n      },\n      __self: this\n    }, \"display\"), \" property with its value as \\u201Cblock\\u201D, to change the inline element into a block-level elemen.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 695\n      },\n      __self: this\n    }, \"21. What would happen if the HTML Document does not contain '!DOCTYPE'?\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700\n      },\n      __self: this\n    }, \"It instructs the Web Browser about the version of HTML used for creating the Web page.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705\n      },\n      __self: this\n    }, \"What happens if you miss !DOCTYPE.\")), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 707\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 708\n      },\n      __self: this\n    }, \"then new features and tags provided by HTML5 will not be supported.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712\n      },\n      __self: this\n    }, \"HTML enter Quirks mode.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 716\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 717\n      },\n      __self: this\n    }, \"22. Most Important HTML Tags for SEO, This tags should goes inside head tags.\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 721\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 722\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 723\n      },\n      __self: this\n    }, \"title: \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 726\n      },\n      __self: this\n    }, \"meta: \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 728\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 729\n      },\n      __self: this\n    }, \"header, footer: \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732\n      },\n      __self: this\n    }, \"h1 to h6: \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735\n      },\n      __self: this\n    }, \"img: \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 737\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 738\n      },\n      __self: this\n    }, \"a: \"), \"Helps search engines understand the content of the linked page.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 741\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 742\n      },\n      __self: this\n    }, \"strong, em: \"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 745\n      },\n      __self: this\n    }), \"It's important to note that while HTML tags can help improve the SEO of a web page, they should be used in a natural and relevant way. Overusing or stuffing keywords into tags can actually harm the SEO of a web page.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 750\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 751\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 752\n      },\n      __self: this\n    }, \"23. \"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: iframe,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 760\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 761\n      },\n      __self: this\n    }, \"24. Autocapitalize\"), \"autocapitalize attribute is used to define whether the text present inside the HTML element should be automatically capitalized or not.\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 765\n      },\n      __self: this\n    }, \"Features: \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 766\n      },\n      __self: this\n    }), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 767\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 768\n      },\n      __self: this\n    }, \"It specifies how the text will be automatically capitalized.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 771\n      },\n      __self: this\n    }, \"It indicates that the first letter of the word or sentence would be in Capital.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 775\n      },\n      __self: this\n    }, \"It does not support input tag with type URL, Email, and Password.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 779\n      },\n      __self: this\n    }, \"It is a Global Attribute.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 781\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 782\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: autocapitalize,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 783\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 789\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 790\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 791\n      },\n      __self: this\n    }, \"25. \"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 792\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: video,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 793\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 799\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 800\n      },\n      __self: this\n    }, \"26. Capture\"), \"The capture attribute specifies that, optionally, a new file should be captured, and which device should be used to capture that new media of a type defined by the accept attribute.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 804\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 805\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 806\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: capture,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 807\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 813\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 814\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 815\n      },\n      __self: this\n    }, \"27. Area\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 816\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 817\n      },\n      __self: this\n    }, \"The \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 818\n      },\n      __self: this\n    }, \"area\"), \" tag defines an area inside an image map.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 820\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 821\n      },\n      __self: this\n    }, \"area\"), \" elements are always nested inside a \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 821\n      },\n      __self: this\n    }, \"map\"), \" \", \"tag.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 825\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 826\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: area,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 827\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 833\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 834\n      },\n      __self: this\n    }, \"28. Object\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 835\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 836\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 837\n      },\n      __self: this\n    }, \"object\"), \" tag defines a container for an external resource.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 840\n      },\n      __self: this\n    }, \"The external resource can be a web page, a picture, a media player, or a plug-in application.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 845\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 846\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: object,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 847\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 853\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 854\n      },\n      __self: this\n    }, \"29. Optgroup\"), \"The \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 855\n      },\n      __self: this\n    }, \"optgroup\"), \" tag is used to group related options in a \\\"select\\\" element (drop-down list).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 857\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 858\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 859\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: optgroup,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 860\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 866\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 867\n      },\n      __self: this\n    }, \"30. Output\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 868\n      },\n      __self: this\n    }, \"output\"), \" tag is used to represent the result of a calculation.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 870\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 871\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 872\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: outputs,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 873\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 879\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 880\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 881\n      },\n      __self: this\n    }, \"31. Quotation and Citation Elements\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 883\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: quotation,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 884\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 890\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 891\n      },\n      __self: this\n    }, \"32. How can we create a new HTML element?\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 892\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: element,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 893\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 899\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 900\n      },\n      __self: this\n    }, \"33. What is a meter tag? What is the difference between progress tag and a meter tag?\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 904\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 905\n      },\n      __self: this\n    }, \"Defines a scalar measurement within a known range or a fractional value. We can also call it a gauge.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 909\n      },\n      __self: this\n    }, \"Items represented using 'meter' tag are Disk usage, the relevance of a query resot.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 913\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 914\n      },\n      __self: this\n    }, \"N: \"), \" The 'meter' tag should not be used to indicate progress. For progress bars, use the 'progress' tag.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 918\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 919\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: metertags,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 920\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 926\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 927\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 928\n      },\n      __self: this\n    }, \"34. Web Workers API\"), \"A web worker is a JavaScript running in the background, without affecting the performance of the page.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 931\n      },\n      __self: this\n    }), \"When executing scripts in an HTML page, the page becomes unresponsive until the script is finished.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 934\n      },\n      __self: this\n    }), \"A web worker is a JavaScript that runs in the background, independently of other scripts, without affecting the performance of the page. You can continue to do whatever you want. clicking, selecting things, etc., while the web worker runs in the background.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 940\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 941\n      },\n      __self: this\n    }), \"Web Workers are initialized with the URL of a JavaScript file, which contains the code the worker will execute. This code sets event listeners and communicates with the script that spawned it from the main page.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 946\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 947\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 948\n      },\n      __self: this\n    }, \"Types of Web Workers:\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 949\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 950\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 951\n      },\n      __self: this\n    }, \"Dedicated Web Workers: \"), \"The dedicated worker can be accessed by only one script which has called it.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 954\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 955\n      },\n      __self: this\n    }, \"Shared Web Workers: \"), \"It can be shared by moltiple scripts and can communicate using the port. Shared workers can be accessed by different windows, iframes or workers.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 960\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 961\n      },\n      __self: this\n    }, \"Since Web workers are in external files, they do not have access to the following JavaScript objects.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 965\n      },\n      __self: this\n    }), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 966\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 967\n      },\n      __self: this\n    }, \"The window object\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 968\n      },\n      __self: this\n    }, \"The document object\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 969\n      },\n      __self: this\n    }, \"The parent object\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 971\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 972\n      },\n      __self: this\n    }, \"35. How does a Web worker work?\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 973\n      },\n      __self: this\n    }), \"A Web worker gets initialized with the URL of a JavaScript file that contains its code. This code sets event listeners and starts communication with the script that invoked the worker from the main page. The Syntax is as follows.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 977\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: workerWorker,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 978\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 984\n      },\n      __self: this\n    }, \"36. Server-Sent Events - One Way Messaging\"), \"A server-sent event is when a web page automatically gets updates from a server.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 986\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 987\n      },\n      __self: this\n    }, \"HTML5 Server-Sent Events (SSE) is a new way for the web pages to communicate with the web server. It enables a webpage to get updates from a server automatically. It was possible earlier also, but for this, the web page needs to ask if any updates were available. The client makes a request and waits for the server to respond with data. Once the web server provides its response, the communication is over.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 996\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 997\n      },\n      __self: this\n    }, \"However, there are some situations, where web pages require a long-term connection with the web server. A typical example is stock quotes on finance websites where price update happens automatically. Other examples are news feeds, sports results that run continuously on media websites, Facebook/ Twitter updates.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1005\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1006\n      },\n      __self: this\n    }, \"We can achieve the above, using HTML5 using SSE. It enables a web page to hold an open connection to the web server so that it can send a response automatically at any time. Thus there\\u2019s no need to reconnect and run the same server script from scratch over and over again.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1014\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1015\n      },\n      __self: this\n    }, \"37. Receive Server-Sent Event Notifications.\"), \"The EventSource interface contains the Server-Sent event API. We need to create an EventSource object to receive the Server-Sent event notifications.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1019\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1020\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1021\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: serverSentEvent,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1022\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1028\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1029\n      },\n      __self: this\n    }, \"Above code performs following steps.\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1030\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1031\n      },\n      __self: this\n    }, \"First, create a new EventSource object, and specify the URL of the page sending the updates\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1035\n      },\n      __self: this\n    }, \"Every time an update arrives, onmessage event gets triggered.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1038\n      },\n      __self: this\n    }, \"When an onmessage event occurs, it places the received data into the element that has id = result.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1043\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1044\n      },\n      __self: this\n    }, \"38. What is the concept of Application Cache in HTML5? What are its advantages?\"), \"Following are the key advantages of Application Cache.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1049\n      },\n      __self: this\n    }), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1050\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1051\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1052\n      },\n      __self: this\n    }, \"Offline browsing \\u2013\"), \"Users can use the application even when they are offline.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1055\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1056\n      },\n      __self: this\n    }, \"Speed \\u2013 \"), \"Cached resources load faster as compared to content that gets downloaded, directly from the server.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1059\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1060\n      },\n      __self: this\n    }, \"Reduced server load \\u2013\"), \"The browser will only download/ updated/ modified resources from the server.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1064\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1065\n      },\n      __self: this\n    }, \"39. What is a Manifest file?\"), \"A Manifest file is a simple text file, that tells the browser what to cache and what not.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1068\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1069\n      },\n      __self: this\n    }), \"A Manifest file contains three Sections as\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1071\n      },\n      __self: this\n    }), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1072\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1073\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1074\n      },\n      __self: this\n    }, \"CACHE MANIFEST \\u2013 \"), \"HTML5 performs the caching of files listed under this section after they get downloaded for the first time.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1078\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1079\n      },\n      __self: this\n    }, \"NETWORK \\u2013 \"), \"Files listed here, always need a connection to the server. The browser can never cache them.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1082\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1083\n      },\n      __self: this\n    }, \"FALLBACK \\u2013\"), \" Files listed here specify the fallback pages, if any page in it is not accessible.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1087\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1088\n      },\n      __self: this\n    }, \"40. What are the new features introduced in HTML5?\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1089\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1090\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1091\n      },\n      __self: this\n    }, \"New Semantic Elements \\u2013\"), \"'header', 'footer', and 'section'.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1094\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1095\n      },\n      __self: this\n    }, \"Forms 2.0 \\u2013\"), \" It contains improvements to HTML web forms. It has introduced new attributes for the 'input' tag.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1098\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1099\n      },\n      __self: this\n    }, \"Persistent Local Storage \\u2013\"), \"With HTML5, it is possible to achieve \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1100\n      },\n      __self: this\n    }, \"Local Storage\"), \", without resorting to third-party plugins.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1103\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1104\n      },\n      __self: this\n    }, \"WebSocket \\u2013\"), \" Setting up a bidirectional communication for web applications.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1107\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1108\n      },\n      __self: this\n    }, \"Server-Sent Events(SSE) \\u2013\"), \"The direction of the flow of the execution of these events is from the server to the Web Browser.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1112\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1113\n      },\n      __self: this\n    }, \"Canvas \\u2013\"), \" It supports a 2D drawing surface that is programmable using JavaScript.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1116\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1117\n      },\n      __self: this\n    }, \"Geolocation \\u2013\"), \" It facilitates the visitors to share their physical location with the web application.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1120\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1121\n      },\n      __self: this\n    }, \"Microdata \\u2013\"), \" It allows building our personal vocaolary beyond HTML5 and extends our web pages with those custom semantics.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1125\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1126\n      },\n      __self: this\n    }, \"Drag and drop \\u2013\"), \" It supports to Drag and Drop the items from one location to another location on the same Web page.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1130\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1131\n      },\n      __self: this\n    }, \"41. What are the various tags provided for better structuring in HTML5?\"), \"HTML5 provides several new tags that are designed to provide better structuring and organization of content. These tags are known as semantic tags and are designed to help web developers create web pages that are more readable, accessible, and search engine friendly. Here are some of the tags provided for better structuring in HTML5:\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1141\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1142\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1143\n      },\n      __self: this\n    }, \"article: \"), \"This tag defines an article.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1146\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1147\n      },\n      __self: this\n    }, \"details: \"), \"It outlines the additional details that a user can hide or view as per choice.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1150\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1151\n      },\n      __self: this\n    }, \"dialog: \"), \"It defines a dialog box.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1153\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1154\n      },\n      __self: this\n    }, \"figure: \"), \"This tag specifies content like illustrations, diagrams, photos, code listings, etc.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1157\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1158\n      },\n      __self: this\n    }, \"figcaption: \"), \"It provides a caption for a 'figure' element.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1161\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1162\n      },\n      __self: this\n    }, \"footer: \"), \"This tag defines a footer for a document or a section.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1165\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1166\n      },\n      __self: this\n    }, \"header: \"), \"This tag describes a header for a document or a section.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1169\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1170\n      },\n      __self: this\n    }, \"hgroup: \"), \"When there are oltiple levels in a heading, it groups a set of 'h1' to 'h6' elements.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1174\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1175\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1176\n      },\n      __self: this\n    }, \"42. How can we club two or more rows or columns into a single row or column in an HTML table?\"), \"With \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1180\n      },\n      __self: this\n    }, \"rowspan\"), \" and \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1180\n      },\n      __self: this\n    }, \"colspan\"), \" to make a cell span to multiple rows and columns respectively.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1182\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1183\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1184\n      },\n      __self: this\n    }, \"43. Explain the key differences between SVG and Canvas?\"), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1185\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1186\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1187\n      },\n      __self: this\n    }, \"Property\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1188\n      },\n      __self: this\n    }, \"SVG\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1189\n      },\n      __self: this\n    }, \"Canvas\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1191\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1192\n      },\n      __self: this\n    }, \"Resolution dependent\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1193\n      },\n      __self: this\n    }, \"No\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1194\n      },\n      __self: this\n    }, \"Yes\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1196\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1197\n      },\n      __self: this\n    }, \"Games\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1198\n      },\n      __self: this\n    }, \"Not suitable for gaming.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1199\n      },\n      __self: this\n    }, \"Canvas is suitable for graphic-intensive games.\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1201\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1202\n      },\n      __self: this\n    }, \"Rendering areas\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1203\n      },\n      __self: this\n    }, \"Suitable for large rendering areas like Google maps.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1204\n      },\n      __self: this\n    }, \"Canvas is suitable for small rendering areas.\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1206\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1207\n      },\n      __self: this\n    }, \"Animation\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1208\n      },\n      __self: this\n    }, \"Interface provided by SVG is very highly interactive.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1209\n      },\n      __self: this\n    }, \"Canvas provides a less interactive animated user interface.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1214\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1215\n      },\n      __self: this\n    }, \"44. Drag and Drop API\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1216\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: dragDrop,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1217\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1223\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1224\n      },\n      __self: this\n    }, \"45. Geolocation API\"), \"The HTML Geolocation API is used to locate a user's position.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1226\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1227\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1228\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: geolocation,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1229\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Html1);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/css/html_1.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","iframe","trim","autocapitalize","video","capture","area","object","optgroup","outputs","geolocation","dragDrop","workerWorker","serverSentEvent","element","Session","htmlStyles","quotation","htmltags","metertags","grisCont","definitionList","picturecss","Html1","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../ReactJs/styles.css\";\nimport Sidebar from \"./sidebar\";\nimport PrismCode from \"../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst iframe = `\n\n `.trim();\n\nconst autocapitalize = `\n#syntex\n<tag_name autocapitalize=\"off | none | on | sentences | words | characters\" />\n\n\n#Ex.\ndiv.a { text-transform: uppercase/ lowercase/ capitalize; }\n<div class=\"a\">Uppercase.</div>\n\n\n//\n<a href=\"https://www.google.com\" target=\"_blank\">Open new tab</a><br/>\n<a href=\"#local\">SPA</a>\n<p id=\"local\">Move to SPA Block</p>\n`.trim();\n\nconst video = `\n\n`.trim();\n\nconst capture = `\n\t<input type=\"file\" id=\"soundFile\" capture=\"user\" accept=\"audio/*\">\n<input type=\"file\" id=\"videoFile\" capture=\"environment\" accept=\"video/*\">\n<input type=\"file\" id=\"imageFile\" capture=\"user\" accept=\"image/*\">\n`.trim();\n\nconst area = `\n<map name=\"planetmap\">\n  <area shape=\"rect\" coords=\"0,0,82,126\" alt=\"Sun\" href=\"sun.htm\">\n  <area shape=\"circle\" coords=\"90,58,3\" alt=\"Mercury\" href=\"mercur.htm\">\n  <area shape=\"circle\" coords=\"124,58,8\" alt=\"Venus\" href=\"venus.htm\">\n</map>\n`.trim();\n\nconst object = `\n<object data=\"movie.mp4\" width=\"400\" height=\"300\"></object>\n\n<object data=\"snippet.html\" width=\"500\" height=\"200\"></object>\n`.trim();\n\nconst optgroup = `\n<form action=\"/action_page.php\">\n  <label for=\"cars\">Choose a car:</label>\n  <select name=\"cars\" id=\"cars\">\n    <optgroup label=\"Swedish Cars\">\n      <option value=\"volvo\">Volvo</option>\n      <option value=\"saab\">Saab</option>\n    </optgroup>\n  </select>\n  <input type=\"submit\" value=\"Submit\">\n</form>\n`.trim();\n\nconst outputs = `\n<form oninput=\"x.value=parseInt(a.value)+parseInt(b.value)\">\n  <input type=\"range\" id=\"a\" value=\"50\">\n  +<input type=\"number\" id=\"b\" value=\"25\">\n  =<output name=\"x\" for=\"a b\"></output>\n</form>\n`.trim();\n\nconst geolocation = `\n//index.js\nfunction getLocation() {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(showPosition);\n  } else {\n    x.innerHTML = \"Geolocation is not supported by this browser.\";\n  }\n}\n\nfunction showPosition(position) {\n  x.innerHTML = \"Latitude: \" + position.coords.latitude +\n    \"<br>Longitude: \" + position.coords.longitude;\n}\n\nvar x = document.getElementById(\"demo\");\n\n\n//index.html\n  <body>\n    <button onclick=\"getLocation()\">Get Location</button>\n    <p id=\"demo\"></p>\n    <script type=\"text/javascript\" src=\"index.js\"></script>\n  </body>\n`.trim();\n\nconst dragDrop = `\n//index.js\nfunction allowDrop(ev) {\n  ev.preventDefault();\n}\n\nfunction drag(ev) {\n  ev.dataTransfer.setData(\"text\", ev.target.id);\n}\n\nfunction drop(ev) {\n  ev.preventDefault();\n  var data = ev.dataTransfer.getData(\"text\");\n  ev.target.appendChild(document.getElementById(data));\n}\n\n\n//index.html\n<style>\n#div1, #div2 {\n  float: left;\n  width: 100px;\n  height: 35px;\n  border: 1px solid black;\n}\n</style>\n  <script type=\"text/javascript\" src=\"index.js\"></script>\n</head>\n\n<body>\n<div id=\"div1\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\">\n  <img src=\"img_w3slogo.gif\" draggable=\"true\" ondragstart=\"drag(event)\" id=\"drag1\" width=\"88\" height=\"31\">\n</div>\n\n  <div id=\"div2\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\"></div>\n</body>\n`.trim();\n\nconst workerWorker = `var worker = new Worker(\"sample_prog.js\"﴿;`.trim();\n\nconst serverSentEvent = `\nvar source = new EventSource(\"sse_demo.php\");\nsource.onmessage = function(event) {\ndocument.getElementById(\"result\").innerHTML += event.data + \"<br>\";\n};\n`.trim();\n\nconst element = `\n<script>\ndocument.createElement(\"myElement\")\n</script>\n\n\n//It can be used in the HTML as.\n<myElement>hello</myElement>\n`.trim();\n\nconst Session = `\n//Use setItem() function to store data in Session Storage\nsessionStorage.setItem (‘key’,’value’);\n\nsessionStorage.setItem (‘username’,’Meenakshi’)\n\n\n//Use getItem() function to retrieve data from Session Storage\nsessionStorage.getItem(‘key’);\n\nvar username= sessionStorage.getItem(‘username’);\n\n\n/*\n  We can only store String in Session Storage. To save the objects in Session, first, convert \n  the object into JSON string and then store this string in Session Storage as\n*/\n\nsessionStorage.setItem (‘object’, JSON.stringify(object));\n\n\n//If JSON string gets stored in Session Storage, then first convert it into an object as follows.\n\nvar object=JSON.parse(sessionStorage.getItem(‘object’));\n\n\n//Use removeItem() function to delete a particular key from Session Storage.\nsessionStorage.removeItem(‘key’);\n\n`.trim();\n\nconst htmlStyles = `\n<tagname style=\"property:value;\">`.trim();\n\nconst quotation = `\nq for: <q>Short Quotations.</q>\n\n<abbr title=\"World Health Organization\">WHO</abbr>\n\n<bdo dir=\"rtl\">This text will be written from right to left</bdo>\n`.trim();\n\nconst htmltags = `\nHTML Attributes: Attributes provide additional information about an element.\nAlways specifed in the start tag.\nCome in name/ value pairs. Like name=\"value\"\nEx. <p title=\"about paragraph\">Here is containt</p>\n`.trim();\n\nconst metertags = `\nTemp: <meter min=0 max=10 value=\".5\" low=\"3\" high=\"8\" optimum=\"5\"></meter>\nDownload: <progress max=\"100\" value=\"80\"></progress>\n`.trim();\n\nconst grisCont = `\n<style>\n  .container {\n    display: grid;\n    grid-template-columns: auto auto auto;\n  }\n\n//2\n  .flex-container {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n  }\n</style>\n\n<body>\n  <div class=\"container\">\n  <p>Paragraph</p>\n  <p>Paragraph2</p>\n  <p>Paragraph3</p>\n  </div>\n</body>`.trim();\n\nconst definitionList = `\n<dl>\n  <dt>Term 1</dt>\n  <dd>Definition 1</dd>\n  <dt>Term 2</dt>\n  <dd>Definition 2</dd>\n  <dt>Term 3</dt>\n  <dd>Definition 3</dd>\n</dl>\n`.trim();\n\nconst picturecss = `\n<picture>\n  <source media=\"(min-width: 1024px)\" srcset=\"large-image.jpg\">\n  <source media=\"(min-width: 768px)\" srcset=\"medium-image.jpg\">\n  <img src=\"small-image.jpg\" alt=\"An image\">\n</picture>\n`.trim();\n\nclass Html1 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Grid</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={grisCont}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <ol>\n                <li>\n                  <b>Html: </b>Structure\n                </li>\n                <li>\n                  <b>css: </b>Styles\n                </li>\n              </ol>\n              <br />\n              <b>\n                Div and Span are used to structure webpage. They are structure\n                element.\n              </b>\n              <ol>\n                <li>\n                  <b>div: </b>Block Element\n                </li>\n                <li>\n                  <b>span: </b>Inline Element\n                </li>\n              </ol>\n              <br />\n              <h3>4. What is a tag in HTML?</h3>\n              A tag instructs the Browser about how to format the HTML properly.\n              <br />\n              <h3>5. What is the difference between HTML elements and tags?</h3>\n              The HTML element is everything from the start tag to the end tag.\n              HTML elements become HTML tags when enclosed within angular\n              brackets.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={htmltags}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>6. HTML Attributes</h3>\n              HTML attributes provide additional information about HTML\n              elements.\n              <ol>\n                <li>\n                  All HTML elements can have <b>attributes.</b>\n                </li>\n                <li>\n                  Attributes are always specified in <b>the start tag.</b>\n                </li>\n                <li>\n                  Attributes usually come in name/value pairs like:{\" \"}\n                  <b>name=\"value\"</b>\n                </li>\n              </ol>\n              <br />\n              <br />\n              <h3>\n                7. What is the purpose of DOCTYPE in HTML, and what are some\n                different types of DOCTYPEs?\n              </h3>\n              The DOCTYPE declaration in HTML is used to specify the version of\n              HTML or XHTML used in a web document. It informs the browser how\n              to render the page and what rules to follow when parsing the code.\n              <br />\n              <br />\n              There are several types of DOCTYPEs:\n              <ul>\n                <li>\n                  <b>HTML5 DOCTYPE: </b>!DOCTYPE html\n                </li>\n                <br />\n                <li>\n                  <b>XHTML 1.0 Strict DOCTYPE: </b>!DOCTYPE html PUBLIC\n                  \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n                  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\n                </li>\n                <br />\n                <li>\n                  <b>HTML 4.01 Strict DOCTYPE: </b>!DOCTYPE HTML PUBLIC\n                  \"-//W3C//DTD HTML 4.01//EN\"\n                  \"http://www.w3.org/TR/html4/strict.dtd\"\n                </li>\n                <br />\n                <li>\n                  <b>Transitional DOCTYPEs: </b>HTML 4.01 Transitional and XHTML\n                  1.0 Transitional\n                </li>\n                <br />\n                <li>\n                  <b>Frameset DOCTYPEs: </b>HTML 4.01 Frameset and XHTML 1.0\n                  Frameset\n                </li>\n                <br />\n              </ul>\n              The DOCTYPE should be placed at the beginning of the HTML document\n              before any other tags. It is important to include a DOCTYPE\n              declaration to ensure that the web page is rendered correctly in\n              all browsers.\n              <br />\n              <br />\n              <h3>\n                8. Explain the difference between HTML and XHTML (Extensible\n                Hypertext Markup Language) .\n              </h3>\n              <ul>\n                <li>\n                  <b>Syntax: </b>HTML syntax is more forgiving, allowing for\n                  unclosed tags, missing attributes, and more. XHTML, on the\n                  other hand, requires well-formed XML syntax, with all tags\n                  properly closed and attributes quoted.\n                </li>\n                <br />\n                <li>\n                  <b>Document structure: </b>HTML does not require a document\n                  type declaration, while XHTML requires a specific DOCTYPE\n                  declaration at the beginning of the document.\n                </li>\n                <br />\n                <li>\n                  <b>Validation: </b>HTML validation is done against a set of\n                  rules, while XHTML validation is done against a specific XML\n                  schema.\n                </li>\n                <br />\n                <li>\n                  <b>MIME type: </b>HTML is served with a text/html MIME type,\n                  while XHTML is served with an application/xhtml+xml MIME type.\n                </li>\n                <br />\n                <li>\n                  <b>Browser support: </b>Most modern browsers support both HTML\n                  and XHTML, but older browsers may have difficulty with XHTML\n                  due to its stricter syntax.\n                </li>\n                <br />\n              </ul>\n              In summary, XHTML is a stricter and more standardized version of\n              HTML that is based on XML syntax. It requires well-formed XML\n              syntax and a specific DOCTYPE declaration, and is validated\n              against an XML schema. While both languages are used for creating\n              web pages, HTML is more forgiving and easier to work with, while\n              XHTML offers greater standardization and stricter rules.\n              <br />\n              <br />\n              <h3>\n                9. What are the different types of form inputs in HTML, and how\n                do you use them?\n              </h3>\n              HTML provides different types of form inputs that allow users to\n              enter data in various ways. Some of the commonly used form inputs\n              are:\n              <ul>\n                <li>Text Input</li>\n                <li>Password Input</li>\n\n                <li>Checkbox Input</li>\n\n                <li>Radio Input</li>\n\n                <li>Select Input</li>\n\n                <li>Textarea Input</li>\n\n                <li>File Input</li>\n              </ul>\n              <br />\n              <br />\n              <h3>\n                10. What are the different ways to include external stylesheets\n                in an HTML document, and what are the advantages and\n                disadvantages of each?\n              </h3>\n              There are three main ways to include external stylesheets in an\n              HTML document:\n              <ul>\n                <li>\n                  Using the link element: The disadvantage is that it requires\n                  an additional HTTP request to load the stylesheet, which can\n                  slow down the initial page load.\n                </li>\n                <br />\n                <li>\n                  Using the style element: This method has the advantage of\n                  avoiding the extra HTTP request required by the link method,\n                  but it has the disadvantage of not allowing the browser to\n                  cache the stylesheet.\n                </li>\n                <br />\n                <li>\n                  Using the @import rule: This method involves using the @import\n                  rule in a stylesheet to reference another stylesheet. This\n                  method has the advantage of allowing you to conditionally load\n                  stylesheets based on certain criteria, but it has the same\n                  disadvantage as the link method in that it requires an\n                  additional HTTP request.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>\n                12. How do you use HTML5 tags like 'section', 'article', and\n                'header', and what are the benefits of using these tags?\n              </h3>\n              <ul>\n                <li>\n                  <b>section: </b>Used to define a section of a document, such\n                  as a chapter or a group of related content. It helps to\n                  organize the content into meaningful sections.\n                </li>\n                <br />\n                <li>\n                  <b>article: </b>Used to define a self-contained article or\n                  content block, such as a blog post or news article. It allows\n                  for the content to be easily identified and repurposed.\n                </li>\n                <br />\n                <li>\n                  <b>header: </b>Used to define a header section for a document\n                  or section, such as a page header or a section heading. It\n                  helps to give context to the content and improve\n                  accessibility.\n                </li>\n                <br />\n              </ul>\n              <br />\n              <b>Using these tags can provide several benefits</b>\n              <br />\n              <ul>\n                <li>\n                  <b>Improved accessibility: </b>\n                </li>\n\n                <li>\n                  <b>Improved SEO: </b>\n                </li>\n\n                <li>\n                  <b>Improved readability and maintainability: </b>\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>\n                13. What is the difference between the 'canvas' and 'svg' tags\n                in HTML, and when might you use one over the other?\n              </h3>\n              The 'canvas' and 'svg' tags in HTML are both used for creating\n              graphics on the web, but they differ in their approach and use\n              cases.\n              <ul>\n                <li>\n                  <b>canvas: </b>tag provides a drawing surface for creating\n                  dynamic, bitmap-based images using JavaScript. It creates a\n                  bitmap that can be manipulated pixel by pixel using\n                  JavaScript, which allows for complex animations and\n                  interactive graphics. The 'canvas' tag is well-suited for\n                  applications that require a lot of drawing, such as games,\n                  data visualizations, and image editors.\n                </li>\n                <br />\n                <li>\n                  <b>svg: </b>tag creates vector-based graphics, which are\n                  resolution-independent and scalable without loss of quality.\n                  SVG graphics are created using XML, and each element in the\n                  graphic is defined as a series of paths and shapes. Because\n                  SVG is a markup language, it can be manipulated using CSS and\n                  JavaScript. The 'svg' tag is well-suited for creating complex\n                  vector graphics, such as logos, icons, and illustrations.\n                </li>\n                <br />\n              </ul>\n              In summary, the 'canvas' tag is used for creating bitmap-based\n              graphics that require a lot of drawing and interactivity, while\n              the 'svg' tag is used for creating scalable vector-based graphics\n              that can be easily manipulated and styled with CSS.\n              <br />\n              <br />\n              <h3>\n                14. What are the different types of lists in HTML, and how do\n                you create them?\n              </h3>\n              There are three types of lists in HTML: ordered lists, unordered\n              lists, and definition lists.\n              <ul>\n                <li>Ordered lists</li>\n                <li>Unordered lists</li>\n                <li>\n                  <b>Definition lists: </b>A definition list is a list where\n                  each item is defined with a term and a definition. To create a\n                  definition list, you can use the 'dl' tag, the term is\n                  represented by the 'dt' tag, and the definition is represented\n                  by the 'dd' tag.\n                </li>\n                <div style={titles}>\n                  <PrismCode\n                    code={definitionList}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n              </ul>\n              <br />\n              <br />\n              <h3>\n                15. Explain the difference between the 'img' and 'picture' tags\n                in HTML, and how you might use them.\n              </h3>\n              <ul>\n                <li>\n                  <b>img: </b>tag is used to display a single image on a web\n                  page. It has two required attributes: src, which specifies the\n                  URL of the image, and alt, which provides alternative text for\n                  the image. The alt attribute is important for accessibility,\n                  as it is used by screen readers and other assistive\n                  technologies to describe the image to users who are visually\n                  impaired.\n                </li>\n                <br />\n                <li>\n                  <b>picture: </b> tag is used to provide different versions of\n                  an image for different devices or screen sizes. It can be used\n                  to specify multiple sources for an image, each with different\n                  resolutions, sizes, or formats. The browser will then choose\n                  the best source based on the current device or screen size.\n                </li>\n                <br />\n                <div style={titles}>\n                  <PrismCode\n                    code={picturecss}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n              </ul>\n              <br />\n              <br />\n              <h3>\n                16. How do you use HTML entities, and why might you need to use\n                them?\n              </h3>\n              HTML entities are special codes used to represent characters that\n              have a specific meaning or are difficult to display in HTML\n              documents. For example, the character 'open bracket' is used as an\n              opening tag in HTML, but if you want to display it as regular\n              text, you need to use the HTML entity code 'open bracket'.\n              Similarly, special characters such as accented letters or symbols\n              can be represented using entity codes, such as \"é\" for \"é\" or \"©\"\n              for the copyright symbol.\n              <br />\n              <ul>\n                <li>\n                  You might need to use HTML entities when you are working with\n                  text that contains characters that have a special meaning in\n                  HTML, such as the angle brackets used for tags, or when you\n                  want to display special characters that are not included in\n                  the standard ASCII character set.\n                </li>\n                <br />\n                <li>\n                  To use an HTML entity, you simply replace the character you\n                  want to display with its corresponding entity code. For\n                  example, if you want to display the trademark symbol (™), you\n                  can use the entity code \"™\".\n                </li>\n                <br />\n                <li>\n                  Using HTML entities can help ensure that your content is\n                  displayed correctly across different browsers and devices, and\n                  can also make your code more accessible to users who rely on\n                  assistive technologies to access web content.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>17. HTML Style Attribute</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={htmlStyles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>18. Non-semantic elements</h3>\n              These elements are without any definition. They don’t describe\n              anything about their structure such as 'span' and 'div'.\n              <br />\n              <h3>19. What are void elements in HTML?</h3>\n              HTML elements which don't have closing Tags are Void elements.{\" \"}\n              <b>Ex. </b>br, img, hr, etc.\n              <br />\n              <h3>\n                20. Is it possible to change an inline element into a block\n                level element?\n              </h3>\n              Yes, it is possible using the <b>display</b> property with its\n              value as “block”, to change the inline element into a block-level\n              elemen.\n              <br />\n              <h3>\n                21. What would happen if the HTML Document does not contain\n                '!DOCTYPE'?\n              </h3>\n              <ol>\n                <li>\n                  It instructs the Web Browser about the version of HTML used\n                  for creating the Web page.\n                </li>\n                <li>\n                  <b>What happens if you miss !DOCTYPE.</b>\n                </li>\n                <ol>\n                  <li>\n                    then new features and tags provided by HTML5 will not be\n                    supported.\n                  </li>\n                  <li>HTML enter Quirks mode.</li>\n                </ol>\n              </ol>\n              <br />\n              <br />\n              <h3>\n                22. Most Important HTML Tags for SEO, This tags should goes\n                inside head tags.\n              </h3>\n              <ol>\n                <li>\n                  <b>title: </b>\n                </li>\n                <li>\n                  <b>meta: </b>\n                </li>\n                <li>\n                  <b>header, footer: </b>\n                </li>\n                <li>\n                  <b>h1 to h6: </b>\n                </li>\n                <li>\n                  <b>img: </b>\n                </li>\n                <li>\n                  <b>a: </b>Helps search engines understand the content of the\n                  linked page.\n                </li>\n                <li>\n                  <b>strong, em: </b>\n                </li>\n              </ol>\n              <br />\n              It's important to note that while HTML tags can help improve the\n              SEO of a web page, they should be used in a natural and relevant\n              way. Overusing or stuffing keywords into tags can actually harm\n              the SEO of a web page.\n              <br />\n              <br />\n              <h3>23. </h3>\n              <div style={titles}>\n                <PrismCode\n                  code={iframe}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>24. Autocapitalize</h3>\n              autocapitalize attribute is used to define whether the text\n              present inside the HTML element should be automatically\n              capitalized or not.\n              <b>Features: </b>\n              <br />\n              <ol>\n                <li>\n                  It specifies how the text will be automatically capitalized.\n                </li>\n                <li>\n                  It indicates that the first letter of the word or sentence\n                  would be in Capital.\n                </li>\n                <li>\n                  It does not support input tag with type URL, Email, and\n                  Password.\n                </li>\n                <li>It is a Global Attribute.</li>\n              </ol>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={autocapitalize}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>25. </h3>\n              <div style={titles}>\n                <PrismCode\n                  code={video}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>26. Capture</h3>\n              The capture attribute specifies that, optionally, a new file\n              should be captured, and which device should be used to capture\n              that new media of a type defined by the accept attribute.\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={capture}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>27. Area</h3>\n              <ol>\n                <li>\n                  The <b>area</b> tag defines an area inside an image map.\n                </li>\n                <li>\n                  <b>area</b> elements are always nested inside a <b>map</b>{\" \"}\n                  tag.\n                </li>\n              </ol>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={area}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>28. Object</h3>\n              <ol>\n                <li>\n                  <b>object</b> tag defines a container for an external\n                  resource.\n                </li>\n                <li>\n                  The external resource can be a web page, a picture, a media\n                  player, or a plug-in application.\n                </li>\n              </ol>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={object}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>29. Optgroup</h3>\n              The <b>optgroup</b> tag is used to group related options in a\n              \"select\" element (drop-down list).\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={optgroup}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>30. Output</h3>\n              <b>output</b> tag is used to represent the result of a\n              calculation.\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={outputs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>31. Quotation and Citation Elements</h3>\n             \n              <div style={titles}>\n                <PrismCode\n                  code={quotation}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>32. How can we create a new HTML element?</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={element}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                33. What is a meter tag? What is the difference between progress\n                tag and a meter tag?\n              </h3>\n              <ol>\n                <li>\n                  Defines a scalar measurement within a known range or a\n                  fractional value. We can also call it a gauge.\n                </li>\n                <li>\n                  Items represented using 'meter' tag are Disk usage, the\n                  relevance of a query resot.\n                </li>\n                <li>\n                  <b>N: </b> The 'meter' tag should not be used to indicate\n                  progress. For progress bars, use the 'progress' tag.\n                </li>\n              </ol>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={metertags}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>34. Web Workers API</h3>\n              A web worker is a JavaScript running in the background, without\n              affecting the performance of the page.\n              <br />\n              When executing scripts in an HTML page, the page becomes\n              unresponsive until the script is finished.\n              <br />\n              A web worker is a JavaScript that runs in the background,\n              independently of other scripts, without affecting the performance\n              of the page. You can continue to do whatever you want. clicking,\n              selecting things, etc., while the web worker runs in the\n              background.\n              <br />\n              <br />\n              Web Workers are initialized with the URL of a JavaScript file,\n              which contains the code the worker will execute. This code sets\n              event listeners and communicates with the script that spawned it\n              from the main page.\n              <br />\n              <br />\n              <b>Types of Web Workers:</b>\n              <ol>\n                <li>\n                  <b>Dedicated Web Workers: </b>The dedicated worker can be\n                  accessed by only one script which has called it.\n                </li>\n                <li>\n                  <b>Shared Web Workers: </b>It can be shared by moltiple\n                  scripts and can communicate using the port. Shared workers can\n                  be accessed by different windows, iframes or workers.\n                </li>\n              </ol>\n              <br />\n              <b>\n                Since Web workers are in external files, they do not have access\n                to the following JavaScript objects.\n              </b>\n              <br />\n              <ol>\n                <li>The window object</li>\n                <li>The document object</li>\n                <li>The parent object</li>\n              </ol>\n              <br />\n              <b>35. How does a Web worker work?</b>\n              <br />A Web worker gets initialized with the URL of a JavaScript\n              file that contains its code. This code sets event listeners and\n              starts communication with the script that invoked the worker from\n              the main page. The Syntax is as follows.\n              <div style={titles}>\n                <PrismCode\n                  code={workerWorker}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <h3>36. Server-Sent Events - One Way Messaging</h3>A server-sent\n              event is when a web page automatically gets updates from a server.\n              <ol>\n                <li>\n                  HTML5 Server-Sent Events (SSE) is a new way for the web pages\n                  to communicate with the web server. It enables a webpage to\n                  get updates from a server automatically. It was possible\n                  earlier also, but for this, the web page needs to ask if any\n                  updates were available. The client makes a request and waits\n                  for the server to respond with data. Once the web server\n                  provides its response, the communication is over.\n                </li>\n                <br />\n                <li>\n                  However, there are some situations, where web pages require a\n                  long-term connection with the web server. A typical example is\n                  stock quotes on finance websites where price update happens\n                  automatically. Other examples are news feeds, sports results\n                  that run continuously on media websites, Facebook/ Twitter\n                  updates.\n                </li>\n                <br />\n                <li>\n                  We can achieve the above, using HTML5 using SSE. It enables a\n                  web page to hold an open connection to the web server so that\n                  it can send a response automatically at any time. Thus there’s\n                  no need to reconnect and run the same server script from\n                  scratch over and over again.\n                </li>\n              </ol>\n              <br />\n              <h3>37. Receive Server-Sent Event Notifications.</h3>\n              The EventSource interface contains the Server-Sent event API. We\n              need to create an EventSource object to receive the Server-Sent\n              event notifications.\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={serverSentEvent}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>Above code performs following steps.</b>\n              <ol>\n                <li>\n                  First, create a new EventSource object, and specify the URL of\n                  the page sending the updates\n                </li>\n                <li>\n                  Every time an update arrives, onmessage event gets triggered.\n                </li>\n                <li>\n                  When an onmessage event occurs, it places the received data\n                  into the element that has id = result.\n                </li>\n              </ol>\n              <br />\n              <h3>\n                38. What is the concept of Application Cache in HTML5? What are\n                its advantages?\n              </h3>\n              Following are the key advantages of Application Cache.\n              <br />\n              <ol>\n                <li>\n                  <b>Offline browsing –</b>Users can use the application even\n                  when they are offline.\n                </li>\n                <li>\n                  <b>Speed – </b>Cached resources load faster as compared to\n                  content that gets downloaded, directly from the server.\n                </li>\n                <li>\n                  <b>Reduced server load –</b>The browser will only download/\n                  updated/ modified resources from the server.\n                </li>\n              </ol>\n              <br />\n              <h3>39. What is a Manifest file?</h3>\n              A Manifest file is a simple text file, that tells the browser what\n              to cache and what not.\n              <br />\n              <br />\n              A Manifest file contains three Sections as\n              <br />\n              <ol>\n                <li>\n                  <b>CACHE MANIFEST – </b>HTML5 performs the caching of files\n                  listed under this section after they get downloaded for the\n                  first time.\n                </li>\n                <li>\n                  <b>NETWORK – </b>Files listed here, always need a connection\n                  to the server. The browser can never cache them.\n                </li>\n                <li>\n                  <b>FALLBACK –</b> Files listed here specify the fallback\n                  pages, if any page in it is not accessible.\n                </li>\n              </ol>\n              <br />\n              <h3>40. What are the new features introduced in HTML5?</h3>\n              <ol>\n                <li>\n                  <b>New Semantic Elements –</b>'header', 'footer', and\n                  'section'.\n                </li>\n                <li>\n                  <b>Forms 2.0 –</b> It contains improvements to HTML web forms.\n                  It has introduced new attributes for the 'input' tag.\n                </li>\n                <li>\n                  <b>Persistent Local Storage –</b>With HTML5, it is possible to\n                  achieve <b>Local Storage</b>, without resorting to third-party\n                  plugins.\n                </li>\n                <li>\n                  <b>WebSocket –</b> Setting up a bidirectional communication\n                  for web applications.\n                </li>\n                <li>\n                  <b>Server-Sent Events(SSE) –</b>The direction of the flow of\n                  the execution of these events is from the server to the Web\n                  Browser.\n                </li>\n                <li>\n                  <b>Canvas –</b> It supports a 2D drawing surface that is\n                  programmable using JavaScript.\n                </li>\n                <li>\n                  <b>Geolocation –</b> It facilitates the visitors to share\n                  their physical location with the web application.\n                </li>\n                <li>\n                  <b>Microdata –</b> It allows building our personal vocaolary\n                  beyond HTML5 and extends our web pages with those custom\n                  semantics.\n                </li>\n                <li>\n                  <b>Drag and drop –</b> It supports to Drag and Drop the items\n                  from one location to another location on the same Web page.\n                </li>\n              </ol>\n              <br />\n              <h3>\n                41. What are the various tags provided for better structuring in\n                HTML5?\n              </h3>\n              HTML5 provides several new tags that are designed to provide\n              better structuring and organization of content. These tags are\n              known as semantic tags and are designed to help web developers\n              create web pages that are more readable, accessible, and search\n              engine friendly. Here are some of the tags provided for better\n              structuring in HTML5:\n              <ol>\n                <li>\n                  <b>article: </b>This tag defines an article.\n                </li>\n\n                <li>\n                  <b>details: </b>It outlines the additional details that a user\n                  can hide or view as per choice.\n                </li>\n                <li>\n                  <b>dialog: </b>It defines a dialog box.\n                </li>\n                <li>\n                  <b>figure: </b>This tag specifies content like illustrations,\n                  diagrams, photos, code listings, etc.\n                </li>\n                <li>\n                  <b>figcaption: </b>It provides a caption for a 'figure'\n                  element.\n                </li>\n                <li>\n                  <b>footer: </b>This tag defines a footer for a document or a\n                  section.\n                </li>\n                <li>\n                  <b>header: </b>This tag describes a header for a document or a\n                  section.\n                </li>\n                <li>\n                  <b>hgroup: </b>When there are oltiple levels in a heading, it\n                  groups a set of 'h1' to 'h6' elements.\n                </li>\n              </ol>\n              <br />\n              <br />\n              <h3>\n                42. How can we club two or more rows or columns into a single\n                row or column in an HTML table?\n              </h3>\n              With <b>rowspan</b> and <b>colspan</b> to make a cell span to\n              multiple rows and columns respectively.\n              <br />\n              <br />\n              <h3>43. Explain the key differences between SVG and Canvas?</h3>\n              <table>\n                <tr>\n                  <th>Property</th>\n                  <th>SVG</th>\n                  <th>Canvas</th>\n                </tr>\n                <tr>\n                  <td>Resolution dependent</td>\n                  <td>No</td>\n                  <td>Yes</td>\n                </tr>\n                <tr>\n                  <td>Games</td>\n                  <td>Not suitable for gaming.</td>\n                  <td>Canvas is suitable for graphic-intensive games.</td>\n                </tr>\n                <tr>\n                  <td>Rendering areas</td>\n                  <td>Suitable for large rendering areas like Google maps.</td>\n                  <td>Canvas is suitable for small rendering areas.</td>\n                </tr>\n                <tr>\n                  <td>Animation</td>\n                  <td>Interface provided by SVG is very highly interactive.</td>\n                  <td>\n                    Canvas provides a less interactive animated user interface.\n                  </td>\n                </tr>\n              </table>\n              <br />\n              <h3>44. Drag and Drop API</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={dragDrop}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>45. Geolocation API</h3>\n              The HTML Geolocation API is used to locate a user's position.\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={geolocation}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(Html1);\n"]},"metadata":{},"sourceType":"module"}