{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic6.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst combine = `\nconst combine = function (n, k) {\n  const result = []\n  const aux = (index = 1, current = []) => {\n    if (current.length === k) {\n      result.push(current)\n      return\n    }\n    if (index > n) {\n      return\n    }\n    aux(index + 1, [...current, index])\n    aux(index + 1, current)\n  }\n  aux()\n  return result\n}\n\nconsole.log(combine(4,2))`.trim();\nconst sortedArrayToBST = `\nconst sortedArrayToBST = (nums = []) => {\n  const aux = (low, high) => {\n    if (low <= high) {\n      const middle = Math.floor((low + high) / 2)\n      const node = {\n        val: nums[middle],\n      }\n      node.left = aux(low, middle - 1)\n      node.right = aux(middle + 1, high)\n      return node\n    }\n    return null\n  }\n  return aux(0, nums.length - 1)\n}\n\nconsole.log(sortedArrayToBST([-10,-3,0,5,9]))`.trim();\nconst maxProfit = `\nconst maxProfit = function (prices) {\n  let max = 0\n  let minPrice = Infinity\n  for (const price of prices) {\n    minPrice = Math.min(price, minPrice)\n    max = Math.max(max, price - minPrice)\n  }\n  return max\n}\n\nconsole.log(maxProfit([7,1,5,3,6,4]))`.trim();\nconst maxProduct = `\nconst maxProduct = (nums = []) => {\n  if (nums.length === 0) {\n    return 0\n  }\n  let prevMax = nums[0]\n  let prevMin = nums[0]\n  let max = nums[0]\n  for (let i = 1; i < nums.length; i++) {\n    const currentMax = Math.max(nums[i], prevMax * nums[i], prevMin * nums[i])\n    const currentMin = Math.min(nums[i], prevMax * nums[i], prevMin * nums[i])\n    prevMax = currentMax\n    prevMin = currentMin\n    if (prevMax > max) {\n      max = prevMax\n    }\n  }\n  return max\n}\n\nconsole.log(maxProduct([2,3,-2,4]))`.trim();\nconst longestCommonPrefix = `\nconst longestCommonPrefix = (strs = []) => {\n  let prefix = ''\n  let minLength = strs.reduce(\n    (acc, str) => (acc < str.length ? acc : str.length), Infinity,\n  )\n  minLength = minLength === Infinity ? 0 : minLength\n  for (let i = 0; i < minLength; i++) {\n    const current = strs[0][i]\n    const isSame = strs.every(str => str[i] === current)\n    if (isSame) {\n      prefix += current\n    } else {\n      return prefix\n    }\n  }\n  return prefix\n}`.trim();\n\nclass DSLogic6 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"1. Combinations\"), \"Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), \"You may return the answer in any order.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), \"Input: n = 4, k = 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), \"Output: [\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), \"[2,4],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), \"[3,4],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), \"[2,3],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), \"[1,2],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), \"[1,3],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), \"[1,4],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), \"]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), \"Input: n = 1, k = 1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), \"Output: [[1]]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: combine,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"3. Best Time to Buy and Sell Stock.\"), \"Say you have an array for which the ith element is the price of a given stock on day i.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), \"If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), \"Note that you cannot sell a stock before you buy one.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), \"Input: [7,1,5,3,6,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), \"Output: 5\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }), \"Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Not 7-1 = 6, as selling price needs to be larger than buying price.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maxProfit,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"8. Maximum Product Subarray.\"), \"Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), \"Input: [2,3,-2,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }), \"Output: 6\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maxProduct,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, \"1. Longest Common Prefix\"), \"Write a function to find the longest common prefix string amongst an array of strings.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }), \"If there is no common prefix, return an empty string \\\"\\\".\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), \"Input: [\\\"flower\\\",\\\"flow\\\",\\\"flight\\\"]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }), \"Output: \\\"fl\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }), \"Input: [\\\"dog\\\",\\\"racecar\\\",\\\"car\\\"]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }), \"Output: \\\"\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }), \"Explanation: There is no common prefix among the input strings.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, \"N: \"), \"All given inputs are in lowercase letters a-z.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: longestCommonPrefix,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default withStyles(styles)(DSLogic6);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic6.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","combine","trim","sortedArrayToBST","maxProfit","maxProduct","longestCommonPrefix","DSLogic6","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst combine = `\nconst combine = function (n, k) {\n  const result = []\n  const aux = (index = 1, current = []) => {\n    if (current.length === k) {\n      result.push(current)\n      return\n    }\n    if (index > n) {\n      return\n    }\n    aux(index + 1, [...current, index])\n    aux(index + 1, current)\n  }\n  aux()\n  return result\n}\n\nconsole.log(combine(4,2))`.trim();\n\nconst sortedArrayToBST = `\nconst sortedArrayToBST = (nums = []) => {\n  const aux = (low, high) => {\n    if (low <= high) {\n      const middle = Math.floor((low + high) / 2)\n      const node = {\n        val: nums[middle],\n      }\n      node.left = aux(low, middle - 1)\n      node.right = aux(middle + 1, high)\n      return node\n    }\n    return null\n  }\n  return aux(0, nums.length - 1)\n}\n\nconsole.log(sortedArrayToBST([-10,-3,0,5,9]))`.trim();\n\nconst maxProfit = `\nconst maxProfit = function (prices) {\n  let max = 0\n  let minPrice = Infinity\n  for (const price of prices) {\n    minPrice = Math.min(price, minPrice)\n    max = Math.max(max, price - minPrice)\n  }\n  return max\n}\n\nconsole.log(maxProfit([7,1,5,3,6,4]))`.trim();\n\nconst maxProduct = `\nconst maxProduct = (nums = []) => {\n  if (nums.length === 0) {\n    return 0\n  }\n  let prevMax = nums[0]\n  let prevMin = nums[0]\n  let max = nums[0]\n  for (let i = 1; i < nums.length; i++) {\n    const currentMax = Math.max(nums[i], prevMax * nums[i], prevMin * nums[i])\n    const currentMin = Math.min(nums[i], prevMax * nums[i], prevMin * nums[i])\n    prevMax = currentMax\n    prevMin = currentMin\n    if (prevMax > max) {\n      max = prevMax\n    }\n  }\n  return max\n}\n\nconsole.log(maxProduct([2,3,-2,4]))`.trim();\n\nconst longestCommonPrefix = `\nconst longestCommonPrefix = (strs = []) => {\n  let prefix = ''\n  let minLength = strs.reduce(\n    (acc, str) => (acc < str.length ? acc : str.length), Infinity,\n  )\n  minLength = minLength === Infinity ? 0 : minLength\n  for (let i = 0; i < minLength; i++) {\n    const current = strs[0][i]\n    const isSame = strs.every(str => str[i] === current)\n    if (isSame) {\n      prefix += current\n    } else {\n      return prefix\n    }\n  }\n  return prefix\n}`.trim();\n\nclass DSLogic6 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Combinations</h3>\n              Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.\n              <br/>\nYou may return the answer in any order.<br/><br/>\nExample 1:<br/>\n\nInput: n = 4, k = 2<br/>\nOutput:\n[<br/>\n  [2,4],<br/>\n  [3,4],<br/>\n  [2,3],<br/>\n  [1,2],<br/>\n  [1,3],<br/>\n  [1,4],<br/>\n]<br/><br/>\nExample 2:<br/>\n\nInput: n = 1, k = 1<br/>\nOutput: [[1]]\n              <div style={titles}>\n                <PrismCode\n                  code={combine}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>3. Best Time to Buy and Sell Stock.</h3>\n              Say you have an array for which the ith element is the price of a given stock on day i.\n              <br/>\nIf you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.\n<br/>\nNote that you cannot sell a stock before you buy one.<br/><br/>\nInput: [7,1,5,3,6,4]<br/>\nOutput: 5<br/>\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n             Not 7-1 = 6, as selling price needs to be larger than buying price.\n              <div style={titles}>\n                <PrismCode\n                  code={maxProfit}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              \n\n              <h3>8. Maximum Product Subarray.</h3>\n              Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.\n              <br/>\n              Input: [2,3,-2,4]<br/>\nOutput: 6\n              <div style={titles}>\n                <PrismCode\n                  code={maxProduct}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <h3>1. Longest Common Prefix</h3>\n              Write a function to find the longest common prefix string amongst an array of strings.\n<br/>\nIf there is no common prefix, return an empty string \"\".\n<br/><br/>\nExample 1:<br/>\n\nInput: [\"flower\",\"flow\",\"flight\"]<br/>\nOutput: \"fl\"<br/><br/>\nExample 2:<br/>\n\nInput: [\"dog\",\"racecar\",\"car\"]<br/>\nOutput: \"\"<br/>\nExplanation: There is no common prefix among the input strings.<br/><br/>\n<b>N: </b>All given inputs are in lowercase letters a-z.\n              <div style={titles}>\n                <PrismCode\n                  code={longestCommonPrefix}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic6));\n"]},"metadata":{},"sourceType":"module"}