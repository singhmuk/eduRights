{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/angularDir.js\";\nimport React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\nimport Theata from \"../../../assets/customElement.png\";\nimport CustomElement from \"../../../assets/create.png\";\nconst titles = {\n  backgroundColor: \"#F0F8FF\",\n  padding: \"1px\",\n  fontSize: \"16px\"\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst happens = `\nexport class InnerHtmlBindingComponent {\n  // For example, a user/attacker-controlled value from a URL.\n  htmlSnippet = 'Template <script>alert(\"0wned\")</script> <b>Syntax</b>';\n}`.trim();\nconst step2 = `\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n} from '@angular/animations';`.trim();\nconst step3 = `\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  animations: [\n    // animation triggers go here\n  ]\n})`.trim();\nconst changeDetection = `\n//1\nimport { Component, ChangeDetectorRef ,ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '\n  < button(click)=\"detech()\"> detech</button>\n    <button (click) = \"reattach()\"> reattach</button>\n      <button (click) = \"detect()\"> detect</button>\n        <br />\n      {{count}}\n  ',\n  \n  // changeDetection: ChangeDetectionStrategy.Default,\n  changeDetection: ChangeDetectionStrategy.OnPush,  //count stop by this\n})\nexport class AppComponent {\n   count=0;\n  constructor(private changeDR: ChangeDetectorRef){\n    setInterval(() => {\n      this.count++;\n      this.changeDR.markForCheck();\n    },1000)\n  }\n\n detech(){\n   //stop change detection\n   this.changeDR.detach();\n }\n\n reattach(){\n   //satrt change detection from stopping place\n   this.changeDR.reattach();\n }\n\n detect(){\n   //satrt change detection from continue increased place but count remain stop\n   this.changeDR.detectChanges();\n }\n}\n\n\n\n//2 childs.ts\nimport { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n@Component({\n  selector: 'app-childs',\n  // changeDetection: ChangeDetectionStrategy.Default,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: '\n          {{data.name}} <br/>\n          {{data.email}}\n  '})\n  \nexport class Child {\n  @Input() data\n}\n\n\n//app.component.ts\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: '\n    <app-childs [data]=\"parentVar\"></app-childs>\n    <button (click)=\"defaultStratgy()\">default</button>\n    <button (click)=\"defaultObj()\">defaultObj</button>',\n})\nexport class AppComponent {\n  private parentVar: { name: string, email?: string }\n\n  constructor(){\n    this.parentVar = {\n      name: \"Mukesh\",\n      email: 'mukesh7@gmail.com'\n    }\n  }\n\n  defaultStratgy(){\n    this.parentVar.name=\"Rakesh\";\n  }\n\n  defaultObj(){\n    this.parentVar = {\n      name: \"Ritesh\",\n      email: \"ritesh@gmail.com\"\n    }\n  }\n}`.trim();\nconst myProvider = `\nexport class MyProvider{\n  constructor(){\n    console.log('myProvider called')\n  }\n  varProvider = \"varProvider\";\n}\n\nexport class MyProvider2{\n  constructor(){}\n  varProvider2 = \"varProvider2\";\n\n  getString(str){\n    console.log('myProvider called2', str)\n  }\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  viewProviders: [MyProvider, MyProvider2]\n})\nexport class AppComponent {\n  constructor(public obj:MyProvider, public obj2:MyProvider2){\n    obj2.getString('Mukesh')\n    console.log(obj.varProvider);\n    console.log(obj2.varProvider2);\n  }\n}`.trim();\nconst anguEle = `\nimport { Component, Input, OnInit } from '@angular/core';\nimport { createCustomElement } from '@angular/elements';\n\n@Component({\n  selector: 'hello-world',\n  template: '<h1>Hello {{name}}!</h1>'\n})\nexport class HelloWorldComponent implements OnInit {\n  @Input() name: string;\n\n  ngOnInit() {\n    if (!customElements.get('hello-world')) {\n      const HelloWorldElement = createCustomElement(HelloWorldComponent, { injector: this.injector });\n      customElements.define('hello-world', HelloWorldElement);\n    }\n  }\n}\n`.trim();\nconst anguEles = `\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Hello World Example</title>\n    <script src=\"path/to/your/element.js\"></script>\n  </head>\n  <body>\n    <hello-world name=\"John\"></hello-world>\n  </body>\n</html>\n`.trim();\nconst custEle = `\n@Component({\n  selector: 'my-custom-element',\n  template: '<h1>Hello, World!</h1>'\n})\nexport class MyCustomElementComponent {}`.trim();\nconst custEle2 = `\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { createCustomElement } from '@angular/elements';\nimport { MyCustomElementComponent } from './my-custom-element.component';\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [MyCustomElementComponent],\n  entryComponents: [MyCustomElementComponent]\n})\nexport class MyCustomElementModule {\n  constructor() {\n    const customElement = createCustomElement(MyCustomElementComponent, { injector: this.injector });\n    customElements.define('my-custom-element', customElement);\n  }\n  ngDoBootstrap() {}\n}\n`.trim();\nconst custEle3 = `\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { MyCustomElementModule } from './my-custom-element.module';\n\nplatformBrowserDynamic().bootstrapModule(MyCustomElementModule);\n`.trim();\nconst custEle4 = `<my-custom-element></my-custom-element>`.trim();\n\nclass AngularDir extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, \"1. Angular Elements: npm install @angular/elements\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, \"Angular Elements is a feature of Angular that allows developers to create reusable web components using Angular. These components can then be used in non-Angular applications or integrated into existing Angular applications.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }), \"To create an Angular Element, you can use the @angular/elements package and Angular's built-in createCustomElement function.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: anguEle,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, \"we create a simple Angular component called HelloWorldComponent that takes a name input and displays a message using that input. We then use the createCustomElement function to create an Angular Element from this component.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, \"The createCustomElement function takes two arguments: the component class and an options object. In this case, we pass the HelloWorldComponent class and an injector object that allows the Angular Element to access Angular services.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, \"Finally, we use the customElements.define method to register the new Angular Element with the browser's custom elements registry. We also add a check to make sure the element has not already been defined before defining it.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, \"Once the Angular Element is defined, it can be used in any HTML document as follows:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: anguEles,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }), \"Overall, Angular Elements provides a powerful way to create reusable web components using Angular that can be used in any web application. By using the @angular/elements package and the createCustomElement function.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, \"2. Custom Element\"), \"Angular Custom Elements is a feature that allows Angular components to be used as standalone custom elements in HTML. This means that an Angular component can be used in any HTML page, regardless of whether it is an Angular application or not.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }), \"To create an Angular custom element, we can use the @angular/elements package and the createCustomElement function. Here is an example of how to create a simple Angular custom element:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, \"First, create a new Angular component using the @Component decorator:\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: custEle,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, \"Next, convert the component into a custom element using the createCustomElement function from the @angular/elements package:\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: custEle2,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    })), \" \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, \"Finally, we need to bootstrap our custom element using the bootstrapModule function:\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: custEle3,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }, \"Once we have completed these steps, we can use our custom element in any HTML page like this:\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: custEle4,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, \"3. What is the browser support of Angular Elements\"), \"Since Angular elements are packaged as custom elements the browser support of angular elements is same as custom elements support.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, \"4. Do I need to bootstrap custom elements\"), \"No, custom elements bootstrap automatically when they are added to the DOM, and are automatically destroyed when removed from the DOM. Once a custom element is added to the DOM for any page, it looks and behaves like any other HTML element.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }, \"5. Explain how custom elements works internally\"), \"Below are the steps in an order about custom elements functionality,\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, \"App registers custom element with browser: \"), \"Use the createCustomElement function to convert a component into a class that can be registered with the browser as a custom element.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }, \"App adds custom element to DOM: \"), \"Add custom element just like a built-in HTML element directly into the DOM.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }, \"Browser instantiate component based class: \"), \"Browser creates an instance of the registered class and adds it to the DOM.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }, \"Instance provides content with data binding and change detection:\", \" \"), \"The content with in template is rendered using the component and DOM data. The flow chart of the custom elements functionality would be as follows,\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: Theata,\n      alt: \"Theata\",\n      className: \"responsive\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }, \"6. How to transfer components to custom elements\"), \"Transforming components to custom elements involves two major steps.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }, \"Build custom element class: \"), \"Angular provides the createCustomElement function for converting an Angular component (along with its dependencies) to a custom element. The conversion process implements NgElementConstructor interface, and creates a constructor class which is used to produce a self-bootstrapping instance of Angular component.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    }, \"Register element class with browser: \"), \"It uses customElements.define JS function, to register the configured constructor and its associated custom-element tag with the browser's CustomElementRegistry. When the browser encounters the tag for the registered element, it uses the constructor to create a custom-element instance.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: CustomElement,\n      alt: \"Theata\",\n      className: \"responsive\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }, \"7. animations\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    }, \"The main Angular modules for animations are @angular/animations and @angular/platform-browser.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }, \"Step 1: \"), \"Import BrowserAnimationsModule, which introduces the animation capabilities into your Angular root application module.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }, \"Step 2: \"), \"If you plan to use specific animation functions in component files, import those functions from @angular/animations.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: step2,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491\n      },\n      __self: this\n    }, \"Step 3: \"), \"Adding the animation metadata property.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: step3,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    }))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502\n      },\n      __self: this\n    }, \"8. JQuery\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }, \"first install jquery as npm install jquery\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, \"inside ./angular-cli.json file, find script, and include the path to jQuery as \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }), \"\\\"script\\\":[\\\"./node_moules/jquery/dist/jquery.min.js\\\"]\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }, \"Note:\"), \" jQuery should be before bootstrap, if use both.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }, \"9. Change Detection\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: changeDetection,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    }, \"10. ViewProvider\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: myProvider,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }, \"11. Providers have services list which use by component.\"), \"If component need any service than it ask to injector not to Promises, Injector will create that service by getting blue-print from Promises, But if injector have that service instance than directly provide to component.\"))));\n  }\n\n}\n\nexport default withStyles(styles)(AngularDir);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/angularDir.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Theata","CustomElement","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","happens","trim","step2","step3","changeDetection","myProvider","anguEle","anguEles","custEle","custEle2","custEle3","custEle4","AngularDir","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\nimport Theata from \"../../../assets/customElement.png\";\nimport CustomElement from \"../../../assets/create.png\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst happens = `\nexport class InnerHtmlBindingComponent {\n  // For example, a user/attacker-controlled value from a URL.\n  htmlSnippet = 'Template <script>alert(\"0wned\")</script> <b>Syntax</b>';\n}`.trim();\n\nconst step2 = `\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n} from '@angular/animations';`.trim();\n\nconst step3 = `\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  animations: [\n    // animation triggers go here\n  ]\n})`.trim();\n\nconst changeDetection = `\n//1\nimport { Component, ChangeDetectorRef ,ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '\n  < button(click)=\"detech()\"> detech</button>\n    <button (click) = \"reattach()\"> reattach</button>\n      <button (click) = \"detect()\"> detect</button>\n        <br />\n      {{count}}\n  ',\n  \n  // changeDetection: ChangeDetectionStrategy.Default,\n  changeDetection: ChangeDetectionStrategy.OnPush,  //count stop by this\n})\nexport class AppComponent {\n   count=0;\n  constructor(private changeDR: ChangeDetectorRef){\n    setInterval(() => {\n      this.count++;\n      this.changeDR.markForCheck();\n    },1000)\n  }\n\n detech(){\n   //stop change detection\n   this.changeDR.detach();\n }\n\n reattach(){\n   //satrt change detection from stopping place\n   this.changeDR.reattach();\n }\n\n detect(){\n   //satrt change detection from continue increased place but count remain stop\n   this.changeDR.detectChanges();\n }\n}\n\n\n\n//2 childs.ts\nimport { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n@Component({\n  selector: 'app-childs',\n  // changeDetection: ChangeDetectionStrategy.Default,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: '\n          {{data.name}} <br/>\n          {{data.email}}\n  '})\n  \nexport class Child {\n  @Input() data\n}\n\n\n//app.component.ts\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: '\n    <app-childs [data]=\"parentVar\"></app-childs>\n    <button (click)=\"defaultStratgy()\">default</button>\n    <button (click)=\"defaultObj()\">defaultObj</button>',\n})\nexport class AppComponent {\n  private parentVar: { name: string, email?: string }\n\n  constructor(){\n    this.parentVar = {\n      name: \"Mukesh\",\n      email: 'mukesh7@gmail.com'\n    }\n  }\n\n  defaultStratgy(){\n    this.parentVar.name=\"Rakesh\";\n  }\n\n  defaultObj(){\n    this.parentVar = {\n      name: \"Ritesh\",\n      email: \"ritesh@gmail.com\"\n    }\n  }\n}`.trim();\n\nconst myProvider = `\nexport class MyProvider{\n  constructor(){\n    console.log('myProvider called')\n  }\n  varProvider = \"varProvider\";\n}\n\nexport class MyProvider2{\n  constructor(){}\n  varProvider2 = \"varProvider2\";\n\n  getString(str){\n    console.log('myProvider called2', str)\n  }\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  viewProviders: [MyProvider, MyProvider2]\n})\nexport class AppComponent {\n  constructor(public obj:MyProvider, public obj2:MyProvider2){\n    obj2.getString('Mukesh')\n    console.log(obj.varProvider);\n    console.log(obj2.varProvider2);\n  }\n}`.trim();\n\nconst anguEle = `\nimport { Component, Input, OnInit } from '@angular/core';\nimport { createCustomElement } from '@angular/elements';\n\n@Component({\n  selector: 'hello-world',\n  template: '<h1>Hello {{name}}!</h1>'\n})\nexport class HelloWorldComponent implements OnInit {\n  @Input() name: string;\n\n  ngOnInit() {\n    if (!customElements.get('hello-world')) {\n      const HelloWorldElement = createCustomElement(HelloWorldComponent, { injector: this.injector });\n      customElements.define('hello-world', HelloWorldElement);\n    }\n  }\n}\n`.trim();\n\nconst anguEles = `\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Hello World Example</title>\n    <script src=\"path/to/your/element.js\"></script>\n  </head>\n  <body>\n    <hello-world name=\"John\"></hello-world>\n  </body>\n</html>\n`.trim();\n\nconst custEle = `\n@Component({\n  selector: 'my-custom-element',\n  template: '<h1>Hello, World!</h1>'\n})\nexport class MyCustomElementComponent {}`.trim();\n\nconst custEle2 = `\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { createCustomElement } from '@angular/elements';\nimport { MyCustomElementComponent } from './my-custom-element.component';\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [MyCustomElementComponent],\n  entryComponents: [MyCustomElementComponent]\n})\nexport class MyCustomElementModule {\n  constructor() {\n    const customElement = createCustomElement(MyCustomElementComponent, { injector: this.injector });\n    customElements.define('my-custom-element', customElement);\n  }\n  ngDoBootstrap() {}\n}\n`.trim();\n\nconst custEle3 = `\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { MyCustomElementModule } from './my-custom-element.module';\n\nplatformBrowserDynamic().bootstrapModule(MyCustomElementModule);\n`.trim();\n\nconst custEle4 = `<my-custom-element></my-custom-element>`.trim();\n\nclass AngularDir extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Angular Elements: npm install @angular/elements</h3>\n              <ul>\n                <li>\n                  Angular Elements is a feature of Angular that allows\n                  developers to create reusable web components using Angular.\n                  These components can then be used in non-Angular applications\n                  or integrated into existing Angular applications.\n                </li>\n              </ul>\n              <br />\n              To create an Angular Element, you can use the @angular/elements\n              package and Angular's built-in createCustomElement function.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={anguEle}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <ul>\n                <li>\n                  we create a simple Angular component called\n                  HelloWorldComponent that takes a name input and displays a\n                  message using that input. We then use the createCustomElement\n                  function to create an Angular Element from this component.\n                </li>\n                <br />\n                <li>\n                  The createCustomElement function takes two arguments: the\n                  component class and an options object. In this case, we pass\n                  the HelloWorldComponent class and an injector object that\n                  allows the Angular Element to access Angular services.\n                </li>\n                <br />\n                <li>\n                  Finally, we use the customElements.define method to register\n                  the new Angular Element with the browser's custom elements\n                  registry. We also add a check to make sure the element has not\n                  already been defined before defining it.\n                </li>\n                <br />\n                <li>\n                  Once the Angular Element is defined, it can be used in any\n                  HTML document as follows:\n                </li>\n                <br />\n                <li>\n                  <div style={titles}>\n                    <PrismCode\n                      code={anguEles}\n                      language=\"js\"\n                      plugins={[\"line-numbers\"]}\n                    />\n                  </div>\n                </li>\n                <br />\n                Overall, Angular Elements provides a powerful way to create\n                reusable web components using Angular that can be used in any\n                web application. By using the @angular/elements package and the\n                createCustomElement function.\n              </ul>\n              <br />\n              <h3>2. Custom Element</h3>\n              Angular Custom Elements is a feature that allows Angular\n              components to be used as standalone custom elements in HTML. This\n              means that an Angular component can be used in any HTML page,\n              regardless of whether it is an Angular application or not.\n              <br />\n              <br />\n              To create an Angular custom element, we can use the\n              @angular/elements package and the createCustomElement function.\n              Here is an example of how to create a simple Angular custom\n              element:\n              <br />\n              <ol>\n                <li>\n                  First, create a new Angular component using the @Component\n                  decorator:\n                  <div style={titles}>\n                    <PrismCode\n                      code={custEle}\n                      language=\"js\"\n                      plugins={[\"line-numbers\"]}\n                    />\n                  </div>\n                </li>\n                <br />\n                <li>\n                  Next, convert the component into a custom element using the\n                  createCustomElement function from the @angular/elements\n                  package:\n                  <div style={titles}>\n                <PrismCode\n                  code={custEle2}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\t</li>\n                <br />\n                <li>Finally, we need to bootstrap our custom element using the bootstrapModule function:\n                <div style={titles}>\n                <PrismCode\n                  code={custEle3}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\t\t\t  \n                </li>\n                <br />\n                <li>Once we have completed these steps, we can use our custom element in any HTML page like this:\n                <div style={titles}>\n                <PrismCode\n                  code={custEle4}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\t\t\n                </li>\n                <br />\n                <li></li>\n                <br />\n                <li></li>\n                <br />\n                <li></li>\n                <br />\n              </ol>\n              <br />\n              <br />\n              <h3>3. What is the browser support of Angular Elements</h3>\n              Since Angular elements are packaged as custom elements the browser\n              support of angular elements is same as custom elements support.\n              <br />\n              <br />\n              <h3>4. Do I need to bootstrap custom elements</h3>\n              No, custom elements bootstrap automatically when they are added to\n              the DOM, and are automatically destroyed when removed from the\n              DOM. Once a custom element is added to the DOM for any page, it\n              looks and behaves like any other HTML element.\n              <br />\n              <br />\n              <h3>5. Explain how custom elements works internally</h3>\n              Below are the steps in an order about custom elements\n              functionality,\n              <br />\n              <ul>\n                <li>\n                  <b>App registers custom element with browser: </b>Use the\n                  createCustomElement function to convert a component into a\n                  class that can be registered with the browser as a custom\n                  element.\n                </li>\n                <li>\n                  <b>App adds custom element to DOM: </b>Add custom element just\n                  like a built-in HTML element directly into the DOM.\n                </li>\n                <li>\n                  <b>Browser instantiate component based class: </b>Browser\n                  creates an instance of the registered class and adds it to the\n                  DOM.\n                </li>\n                <li>\n                  <b>\n                    Instance provides content with data binding and change\n                    detection:{\" \"}\n                  </b>\n                  The content with in template is rendered using the component\n                  and DOM data. The flow chart of the custom elements\n                  functionality would be as follows,\n                </li>\n              </ul>\n              <br />\n              <br />\n              <img src={Theata} alt=\"Theata\" className=\"responsive\" />\n              <br />\n              <br />\n              <h3>6. How to transfer components to custom elements</h3>\n              Transforming components to custom elements involves two major\n              steps.\n              <ul>\n                <li>\n                  <b>Build custom element class: </b>Angular provides the\n                  createCustomElement function for converting an Angular\n                  component (along with its dependencies) to a custom element.\n                  The conversion process implements NgElementConstructor\n                  interface, and creates a constructor class which is used to\n                  produce a self-bootstrapping instance of Angular component.\n                </li>\n                <br />\n                <li>\n                  <b>Register element class with browser: </b>It uses\n                  customElements.define JS function, to register the configured\n                  constructor and its associated custom-element tag with the\n                  browser's CustomElementRegistry. When the browser encounters\n                  the tag for the registered element, it uses the constructor to\n                  create a custom-element instance.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <img src={CustomElement} alt=\"Theata\" className=\"responsive\" />\n              <br />\n              <br />\n              <h3>7. animations</h3>\n              <ul>\n                <li>\n                  The main Angular modules for animations are\n                  @angular/animations and @angular/platform-browser.\n                </li>\n                <li>\n                  <b>Step 1: </b>Import BrowserAnimationsModule, which\n                  introduces the animation capabilities into your Angular root\n                  application module.\n                </li>\n                <li>\n                  <b>Step 2: </b>If you plan to use specific animation functions\n                  in component files, import those functions from\n                  @angular/animations.\n                </li>\n                <div style={titles}>\n                  <PrismCode\n                    code={step2}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n                <br />\n\n                <li>\n                  <b>Step 3: </b>Adding the animation metadata property.\n                </li>\n                <div style={titles}>\n                  <PrismCode\n                    code={step3}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n              </ul>\n              <br />\n              <h3>8. JQuery</h3>\n              <ul>\n                <li>first install jquery as npm install jquery</li>\n                <li>\n                  inside ./angular-cli.json file, find script, and include the\n                  path to jQuery as <br />\n                  \"script\":[\"./node_moules/jquery/dist/jquery.min.js\"]\n                </li>\n                <li>\n                  <b>Note:</b> jQuery should be before bootstrap, if use both.\n                </li>\n              </ul>\n              <br />\n              <h3>9. Change Detection</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={changeDetection}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>10. ViewProvider</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={myProvider}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>11. Providers have services list which use by component.</h3>\n              If component need any service than it ask to injector not to\n              Promises, Injector will create that service by getting blue-print\n              from Promises, But if injector have that service instance than\n              directly provide to component.\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(AngularDir);\n"]},"metadata":{},"sourceType":"module"}