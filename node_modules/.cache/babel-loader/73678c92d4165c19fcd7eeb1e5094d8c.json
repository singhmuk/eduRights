{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import\"../../ReactJs/styles.css\";import Sidebar from\"../sidebar\";import PrismCode from\"../../ReactJs/prismCode\";var titles={backgroundColor:\"#F0F8FF\",padding:\"1px\",fontSize:\"16px\"};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var editForm=\"\\nimport EditUserForm from \\\"./EditUserForm\\\";\\n\\nconst App = () => {\\n  const usersData = [\\n    { id: 1, name: \\\"AAA\\\", username: \\\"aiueo\\\" }\\n  ];\\n\\n  const initialFormState = { id: null, name: \\\"\\\", username: \\\"\\\" };\\n  const [mockData, setMockData] = useState(usersData);\\n  const [user, setUser] = useState(initialFormState);\\n\\n  const [editing, setEditing] = useState(false);\\n  const [currentUser, setCurrentUser] = useState(initialFormState);\\n\\n  const handleInputChange = e => {\\n    const { name, value } = e.target;\\n    setUser({ ...user, [name]: value });\\n  };\\n\\n  const addUser = user => {\\n    user.id = mockData.length + 1;\\n    setMockData([...mockData, user]);\\n    setUser(initialFormState);\\n  };\\n\\n  const deleteUser = id => {\\n    setMockData(mockData.filter(user => user.id !== id));\\n  };\\n\\n  const editRow = user => {\\n    setEditing(true);\\n    setCurrentUser({ id: user.id, name: user.name, username: user.username });\\n  };\\n\\n  const updateUser = (id, updateUser) => {\\n    setEditing(false);\\n    setMockData(mockData.map(user => (user.id === id ? updateUser : user)));\\n  };\\n\\n  return (\\n    <div className=\\\"container\\\">\\n      {editing?\\n      <EditUserForm\\n      editing={editing}\\n      setEditing={setEditing}\\n      currentUser={currentUser}\\n      updateUser={updateUser}\\n    />:\\n      <form\\n        onSubmit={e => {\\n          e.preventDefault();\\n          addUser(user);\\n        }}\\n      >\\n        <input type=\\\"text\\\" name=\\\"name\\\" value={user.name} placeholder=\\\"Name\\\" onChange={handleInputChange} />\\n        <input type=\\\"text\\\" name=\\\"username\\\" value={user.username} onChange={handleInputChange} />\\n        <button>Add new user</button>\\n      </form>\\n}\\n          {mockData.map(user => (\\n            <li key={user.id}>\\n              {user.name}---\\n              {user.username}\\n              <button onClick={() => editRow(user)}>Edit</button>\\n              <button onClick={() => deleteUser(user.id)}>Delete</button>\\n            </li>\\n          ))\\n        }\\n    </div>\\n  );\\n};\\n\\n\\n//EditUserForm.js\\nconst EditUserForm = props => {\\n  const [user, setUser] = useState(props.currentUser);\\n\\n  useEffect(() => { setUser(props.currentUser) },\\n    [props]\\n  );\\n\\n  const handleInputChange = e => {\\n    const { name, value } = e.target;\\n    setUser({ ...user, [name]: value });\\n  };\\n\\n  return (\\n    <form onSubmit={e => { e.preventDefault(); props.updateUser(user.id, user) }} >\\n      <label>Name</label>\\n      <input type=\\\"text\\\" name=\\\"name\\\" value={user.name} onChange={handleInputChange} />\\n      <label>Username</label>\\n      <input type=\\\"text\\\" name=\\\"username\\\" value={user.username} onChange={handleInputChange} />\\n      <button>Update user</button>\\n      <button onClick={() => props.setEditing(false)}>Cancel</button>\\n    </form>\\n  );\\n};\\n\".trim();var curdcom=\"\\nclass App extends Component {\\n  state = {\\n    mockData: [],\\n    text: \\\"\\\",\\n    id: Math.random(1,100),\\n    editItem: false\\n  };\\n  \\n  handleChange = e => {\\n    this.setState({text: e.target.value});\\n  };\\n  \\n  handleAdd = e => {\\n    e.preventDefault();\\n    if (this.state.text.length === 0) return;\\n\\n    const newItem = {\\n      id: this.state.id,\\n      title: this.state.text\\n    };\\n    \\n    const updatedItems = [...this.state.mockData].concat(newItem);\\n\\n    this.setState({\\n      mockData: updatedItems,\\n      text: \\\"\\\",\\n      id: Math.random(1,100),\\n      editItem: false\\n    });\\n  };\\n  \\n  clearList = () => {\\n    this.setState({ mockData: [] });\\n    };\\n    \\n  handleDelete = (id) => {\\n      this.setState({ mockData: this.state.mockData.filter(item => item.id !== id) });\\n    };\\n    \\n  handleEdit = id => {\\n    const filteredItems = this.state.mockData.filter(item => item.id !== id);\\n    const selectedItem = this.state.mockData.find(item => item.id === id);\\n\\n    this.setState({\\n      mockData: filteredItems,\\n      text: selectedItem.title,\\n      editItem: true,\\n      id: id\\n    });\\n  };\\n  \\n  render() {\\n    return (\\n      <div>\\n         <form onSubmit={this.handleAdd}>\\n          <div>\\n            <input type=\\\"text\\\" value={this.state.text} onChange={this.handleChange} />\\n          </div>\\n          <button>{this.state.editItem ? \\\"edit item\\\" : \\\"add item\\\"}</button>\\n        </form>\\n            \\n        <ul>\\n        {this.state.mockData.map(item => {\\n          return (\\n            <div>\\n              <h1>{item.title}</h1>\\n            \\n              <button onClick={() => this.handleEdit(item.id)}>edit</button>\\n              <button onClick={() => this.handleDelete(item.id)}>delete</button>\\n            </div>\\n          );\\n        })}\\n\\n        <button onClick={this.clearList}>clear list</button>\\n        </ul>\\n      </div>\\n    );\\n  }\\n}\".trim();var localStorage=\"\\nimport React, { useState, useEffect } from \\\"react\\\";\\n\\nconst App = () => {\\n  const [todos, setTodos] = useState([]);\\n  const [todo, setTodo] = useState(\\\"\\\");\\n  const [todoEditing, setTodoEditing] = useState(null);\\n  const [editingText, setEditingText] = useState(\\\"\\\");\\n\\n  useEffect(() => {\\n    const json = localStorage.getItem(\\\"todos\\\");\\n    const loadedTodos = JSON.parse(json);\\n    if (loadedTodos) {\\n      setTodos(loadedTodos);\\n    }\\n  }, []);\\n\\n  useEffect(() => {\\n    const json = JSON.stringify(todos);\\n    localStorage.setItem(\\\"todos\\\", json);\\n  }, [todos]);\\n\\n  function handleSubmit(e) {\\n    e.preventDefault();\\n\\n    const newTodo = {\\n      id: new Date().getTime(),\\n      text: todo,\\n      completed: false,\\n    };\\n    setTodos([...todos].concat(newTodo));\\n    setTodo(\\\"\\\");\\n  }\\n\\n  function deleteTodo(id) {\\n    let updatedTodos = [...todos].filter((todo) => todo.id !== id);\\n    setTodos(updatedTodos);\\n  }\\n\\n  function toggleComplete(id) {\\n    let updatedTodos = [...todos].map((todo) => {\\n      if (todo.id === id) {\\n        todo.completed = !todo.completed;\\n      }\\n      return todo;\\n    });\\n    setTodos(updatedTodos);\\n  }\\n\\n  function submitEdits(id) {\\n    const updatedTodos = [...todos].map((todo) => {\\n      if (todo.id === id) {\\n        todo.text = editingText;\\n      }\\n      return todo;\\n    });\\n    setTodos(updatedTodos);\\n    setTodoEditing(null);\\n  }\\n\\n  return (\\n    <div id=\\\"todo-list\\\">\\n      <h1>Todo List</h1>\\n      <form onSubmit={handleSubmit}>\\n        <input\\n          type=\\\"text\\\"\\n          onChange={(e) => setTodo(e.target.value)}\\n          value={todo}\\n        />\\n        <button type=\\\"submit\\\">Add Todo</button>\\n      </form>\\n      {todos.map((todo) => (\\n        <div key={todo.id} className=\\\"todo\\\">\\n          <div className=\\\"todo-text\\\">\\n            <input\\n              type=\\\"checkbox\\\"\\n              id=\\\"completed\\\"\\n              checked={todo.completed}\\n              onChange={() => toggleComplete(todo.id)}\\n            />\\n            {todo.id === todoEditing ? (\\n              <input\\n                type=\\\"text\\\"\\n                onChange={(e) => setEditingText(e.target.value)}\\n              />\\n            ) : (\\n              <div>{todo.text}</div>\\n            )}\\n          </div>\\n          <div className=\\\"todo-actions\\\">\\n            {todo.id === todoEditing ? (\\n              <button onClick={() => submitEdits(todo.id)}>Submit Edits</button>\\n            ) : (\\n              <button onClick={() => setTodoEditing(todo.id)}>Edit</button>\\n            )}\\n\\n            <button onClick={() => deleteTodo(todo.id)}>Delete</button>\\n          </div>\\n        </div>\\n      ))}\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\".trim();var addtext=\"\\nconst App = () => {\\n  const [user, setUser] = useState('');\\n  const [mocks, setMocks] = useState([]);\\n\\n  const handleChange = (e) => {\\n    const {value} = e.target;\\n    setUser(value);\\n  } \\n\\n  const handleAdd = () => {\\n    setMocks([...mocks, user])\\n  };\\n\\n  return (\\n    <div>\\n      <input type=\\\"text\\\" name=\\\"user\\\" value={user} onChange={handleChange} />\\n      <button onClick={handleAdd}>Add</button>\\n      {mocks.map(vals=>(\\n        <li>{vals}</li>\\n      ))}\\n    </div>\\n  );\\n};\".trim();var addRef=\"\\nconst App = () => {\\n  const user = useRef(\\\"\\\");\\n  const mocks = useRef([]);\\n\\n  const handleChange = (e) => {\\n    const { value } = e.target;\\n    user.current = value;\\n  };\\n\\n  const handleAdd = () => {\\n    mocks.current = [...mocks.current, user.current];\\n    console.log(mocks.current)\\n    user.current = \\\"\\\";\\n  };\\n\\n  return (\\n    <div>\\n      <input type=\\\"text\\\" name=\\\"user\\\" onChange={handleChange} />\\n      <button onClick={handleAdd}>Add</button>\\n        {mocks.current.map((vals, index) => (\\n          <li key={index}>{vals}</li>\\n        ))}\\n    </div>\\n  );\\n};\".trim();var MainCompo=/*#__PURE__*/function(_Component){_inherits(MainCompo,_Component);function MainCompo(){_classCallCheck(this,MainCompo);return _possibleConstructorReturn(this,_getPrototypeOf(MainCompo).apply(this,arguments));}_createClass(MainCompo,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Curd Component\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:curdcom,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Curd\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:editForm,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Curd Local Storage\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:localStorage,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. Add Text Only\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:addtext,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. UsRef\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:addRef,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return MainCompo;}(Component);export default withStyles(styles)(MainCompo);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/mainCompo.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","editForm","trim","curdcom","localStorage","addtext","addRef","MainCompo","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst editForm = `\nimport EditUserForm from \"./EditUserForm\";\n\nconst App = () => {\n  const usersData = [\n    { id: 1, name: \"AAA\", username: \"aiueo\" }\n  ];\n\n  const initialFormState = { id: null, name: \"\", username: \"\" };\n  const [mockData, setMockData] = useState(usersData);\n  const [user, setUser] = useState(initialFormState);\n\n  const [editing, setEditing] = useState(false);\n  const [currentUser, setCurrentUser] = useState(initialFormState);\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setUser({ ...user, [name]: value });\n  };\n\n  const addUser = user => {\n    user.id = mockData.length + 1;\n    setMockData([...mockData, user]);\n    setUser(initialFormState);\n  };\n\n  const deleteUser = id => {\n    setMockData(mockData.filter(user => user.id !== id));\n  };\n\n  const editRow = user => {\n    setEditing(true);\n    setCurrentUser({ id: user.id, name: user.name, username: user.username });\n  };\n\n  const updateUser = (id, updateUser) => {\n    setEditing(false);\n    setMockData(mockData.map(user => (user.id === id ? updateUser : user)));\n  };\n\n  return (\n    <div className=\"container\">\n      {editing?\n      <EditUserForm\n      editing={editing}\n      setEditing={setEditing}\n      currentUser={currentUser}\n      updateUser={updateUser}\n    />:\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          addUser(user);\n        }}\n      >\n        <input type=\"text\" name=\"name\" value={user.name} placeholder=\"Name\" onChange={handleInputChange} />\n        <input type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\n        <button>Add new user</button>\n      </form>\n}\n          {mockData.map(user => (\n            <li key={user.id}>\n              {user.name}---\n              {user.username}\n              <button onClick={() => editRow(user)}>Edit</button>\n              <button onClick={() => deleteUser(user.id)}>Delete</button>\n            </li>\n          ))\n        }\n    </div>\n  );\n};\n\n\n//EditUserForm.js\nconst EditUserForm = props => {\n  const [user, setUser] = useState(props.currentUser);\n\n  useEffect(() => { setUser(props.currentUser) },\n    [props]\n  );\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setUser({ ...user, [name]: value });\n  };\n\n  return (\n    <form onSubmit={e => { e.preventDefault(); props.updateUser(user.id, user) }} >\n      <label>Name</label>\n      <input type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange} />\n      <label>Username</label>\n      <input type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\n      <button>Update user</button>\n      <button onClick={() => props.setEditing(false)}>Cancel</button>\n    </form>\n  );\n};\n`.trim();\n\nconst curdcom = `\nclass App extends Component {\n  state = {\n    mockData: [],\n    text: \"\",\n    id: Math.random(1,100),\n    editItem: false\n  };\n  \n  handleChange = e => {\n    this.setState({text: e.target.value});\n  };\n  \n  handleAdd = e => {\n    e.preventDefault();\n    if (this.state.text.length === 0) return;\n\n    const newItem = {\n      id: this.state.id,\n      title: this.state.text\n    };\n    \n    const updatedItems = [...this.state.mockData].concat(newItem);\n\n    this.setState({\n      mockData: updatedItems,\n      text: \"\",\n      id: Math.random(1,100),\n      editItem: false\n    });\n  };\n  \n  clearList = () => {\n    this.setState({ mockData: [] });\n    };\n    \n  handleDelete = (id) => {\n      this.setState({ mockData: this.state.mockData.filter(item => item.id !== id) });\n    };\n    \n  handleEdit = id => {\n    const filteredItems = this.state.mockData.filter(item => item.id !== id);\n    const selectedItem = this.state.mockData.find(item => item.id === id);\n\n    this.setState({\n      mockData: filteredItems,\n      text: selectedItem.title,\n      editItem: true,\n      id: id\n    });\n  };\n  \n  render() {\n    return (\n      <div>\n         <form onSubmit={this.handleAdd}>\n          <div>\n            <input type=\"text\" value={this.state.text} onChange={this.handleChange} />\n          </div>\n          <button>{this.state.editItem ? \"edit item\" : \"add item\"}</button>\n        </form>\n            \n        <ul>\n        {this.state.mockData.map(item => {\n          return (\n            <div>\n              <h1>{item.title}</h1>\n            \n              <button onClick={() => this.handleEdit(item.id)}>edit</button>\n              <button onClick={() => this.handleDelete(item.id)}>delete</button>\n            </div>\n          );\n        })}\n\n        <button onClick={this.clearList}>clear list</button>\n        </ul>\n      </div>\n    );\n  }\n}`.trim();\n\nconst localStorage = `\nimport React, { useState, useEffect } from \"react\";\n\nconst App = () => {\n  const [todos, setTodos] = useState([]);\n  const [todo, setTodo] = useState(\"\");\n  const [todoEditing, setTodoEditing] = useState(null);\n  const [editingText, setEditingText] = useState(\"\");\n\n  useEffect(() => {\n    const json = localStorage.getItem(\"todos\");\n    const loadedTodos = JSON.parse(json);\n    if (loadedTodos) {\n      setTodos(loadedTodos);\n    }\n  }, []);\n\n  useEffect(() => {\n    const json = JSON.stringify(todos);\n    localStorage.setItem(\"todos\", json);\n  }, [todos]);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    const newTodo = {\n      id: new Date().getTime(),\n      text: todo,\n      completed: false,\n    };\n    setTodos([...todos].concat(newTodo));\n    setTodo(\"\");\n  }\n\n  function deleteTodo(id) {\n    let updatedTodos = [...todos].filter((todo) => todo.id !== id);\n    setTodos(updatedTodos);\n  }\n\n  function toggleComplete(id) {\n    let updatedTodos = [...todos].map((todo) => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  }\n\n  function submitEdits(id) {\n    const updatedTodos = [...todos].map((todo) => {\n      if (todo.id === id) {\n        todo.text = editingText;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n    setTodoEditing(null);\n  }\n\n  return (\n    <div id=\"todo-list\">\n      <h1>Todo List</h1>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          onChange={(e) => setTodo(e.target.value)}\n          value={todo}\n        />\n        <button type=\"submit\">Add Todo</button>\n      </form>\n      {todos.map((todo) => (\n        <div key={todo.id} className=\"todo\">\n          <div className=\"todo-text\">\n            <input\n              type=\"checkbox\"\n              id=\"completed\"\n              checked={todo.completed}\n              onChange={() => toggleComplete(todo.id)}\n            />\n            {todo.id === todoEditing ? (\n              <input\n                type=\"text\"\n                onChange={(e) => setEditingText(e.target.value)}\n              />\n            ) : (\n              <div>{todo.text}</div>\n            )}\n          </div>\n          <div className=\"todo-actions\">\n            {todo.id === todoEditing ? (\n              <button onClick={() => submitEdits(todo.id)}>Submit Edits</button>\n            ) : (\n              <button onClick={() => setTodoEditing(todo.id)}>Edit</button>\n            )}\n\n            <button onClick={() => deleteTodo(todo.id)}>Delete</button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n`.trim();\n\nconst addtext = `\nconst App = () => {\n  const [user, setUser] = useState('');\n  const [mocks, setMocks] = useState([]);\n\n  const handleChange = (e) => {\n    const {value} = e.target;\n    setUser(value);\n  } \n\n  const handleAdd = () => {\n    setMocks([...mocks, user])\n  };\n\n  return (\n    <div>\n      <input type=\"text\" name=\"user\" value={user} onChange={handleChange} />\n      <button onClick={handleAdd}>Add</button>\n      {mocks.map(vals=>(\n        <li>{vals}</li>\n      ))}\n    </div>\n  );\n};`.trim();\n\nconst addRef = `\nconst App = () => {\n  const user = useRef(\"\");\n  const mocks = useRef([]);\n\n  const handleChange = (e) => {\n    const { value } = e.target;\n    user.current = value;\n  };\n\n  const handleAdd = () => {\n    mocks.current = [...mocks.current, user.current];\n    console.log(mocks.current)\n    user.current = \"\";\n  };\n\n  return (\n    <div>\n      <input type=\"text\" name=\"user\" onChange={handleChange} />\n      <button onClick={handleAdd}>Add</button>\n        {mocks.current.map((vals, index) => (\n          <li key={index}>{vals}</li>\n        ))}\n    </div>\n  );\n};`.trim();\n\nclass MainCompo extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Curd Component</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={curdcom}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Curd</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={editForm}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Curd Local Storage</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={localStorage}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Add Text Only</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={addtext}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. UsRef</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={addRef}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(MainCompo);\n"]},"metadata":{},"sourceType":"module"}