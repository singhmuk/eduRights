{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var filters=\"\\nimport { FormsModule } from '@angular/forms';\\nimport { HttpClientModule } from '@angular/common/http';\\n\\n\\n//app.component.ts\\nimport { HttpClient } from '@angular/common/http';\\n\\n@Component({\\n  selector: 'my-app',\\n  template: '\\n  <input type = \\\"text\\\" [(ngModel)] = \\\"filterBy\\\" (keyup) = \\\"getUsers()\\\">\\n    <div *ngFor=\\\"let user of filtersUser\\\"> {{user.name}}</div>',  })\\n\\n\\nexport class AppComponent  {\\n users: any[];\\n filtersUser: any[];\\n filterBy;\\n\\n constructor(private http:HttpClient){}\\n\\n ngOnInit(){\\n   this.http.get('https://jsonplaceholder.typicode.com/users')\\n        .subscribe(user=>{\\n          this.users=user;\\n          this.filtersUser=[...this.users]\\n        })\\n }\\n getUsers(){\\n     this.filtersUser = [...this.users.filter(user => {\\n       user.name.includes(this.filterBy)})];\\n  }\\n}\\n\".trim();var tempCon=\"\\n@Component({\\n  selector: 'app-root',\\n  template:'\\n  <div>\\n  Celsius\\n  <input type = \\\"number\\\" [(ngModel)] = \\\"c\\\" (ngModelChange) = \\\"onChange($event, 'c')\\\" />\\n    Fahrenheit\\n    <input type = \\\"number\\\" [(ngModel)] = \\\"f\\\" (ngModelChange) = \\\"onChange($event, 'f')\\\" />\\n</div >\\n  '})\\n\\nexport class AppComponent {\\n   c = \\\"\\\";\\n   f = \\\"\\\";\\n\\n   onChange(value: string | null, type: \\\"c\\\" | \\\"f\\\") {\\n    if (value === null) {\\n      this.c = \\\"\\\";\\n      this.f = \\\"\\\";\\n      return;\\n    }\\n\\n    const temperature = Number(value);\\n    if (type === \\\"c\\\") {\\n      this.f = ((temperature * 9) / 5 + 32).toFixed(1);\\n    } else {\\n      this.c = (((temperature - 32) * 5) / 9).toFixed(1);\\n    }\\n  }\\n}\".trim();var liveInput=\"\\n//app.component.ts\\n@Component({\\n  selector: 'my-app',\\n  template: '\\n  <input #box (keyup) = 'onKey(box.value)' >\\n    {{result}}',\\n            })\\n\\nexport class HomeComponent {\\n  values = '';\\n  result = '';\\n\\n  constructor() { }\\n\\n  onKey(value: string) {\\n    this.values=String(value).replace('a','');\\n    this.result =(this.values).replace('a','');\\n  }\\n}\\n\".trim();var agreeDis=\"\\n//app.component.ts\\n@Component({\\n  selector: 'app-root',\\n  template: '\\n  <h3> Agree: {{agreed}}, Disagree: {{disagreed}}</h3>\\n    <app-voters *ngFor=\\\"let voter of voters\\\"\\n    [name] = \\\"voter\\\"\\n      (voted) = \\\"onVoted($event)\\\" >\\n    </app-voters>\\n  '\\n})\\n\\nexport class AppComponent {\\n  agreed = 0;\\n  disagreed = 0;\\n  voters = ['Narco', 'Celeritas', 'Bombasto'];\\n\\n  onVoted(agreed: boolean) {\\n    agreed ? this.agreed++ : this.disagreed++;\\n  }\\n}\\n\\n\\n//voters.component.ts\\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\\n\\n@Component({\\n  selector: 'app-voters',\\n  template: '\\n  <h4> {{name}}</h4>\\n    <button (click) = \\\"vote(true)\\\" [disabled] = \\\"didVote\\\"> Agree</button >\\n      <button (click) = \\\"vote(false)\\\" [disabled] = \\\"didVote\\\"> Disagree</button >\\n  '\\n})\\nexport class VotersComponent {\\n  @Input()  name = '';\\n  @Output() voted = new EventEmitter<boolean>();\\n  didVote = false;\\n\\n  vote(agreed: boolean) {\\n    this.voted.emit(agreed);\\n    this.didVote = true;\\n  }\\n}\\n\".trim();var setname=\"\\n//app.component.ts\\n@Component({\\n  selector: 'app-root',\\n  template: '\\n  <p> Master controls {{names.length}} names</p>\\n    <app-voters *ngFor=\\\"let name of names\\\" [name] = \\\"name\\\"></app-voters>\\n        '})\\n\\nexport class AppComponent {\\n  names = ['Dr IQ', '   ', '  Bombasto  '];\\n}\\n\\n\\n//voters.component.ts\\n@Component({\\n  selector: 'app-voters',\\n  template: '<h4>{{name}}</h4>'\\n})\\n\\nexport class VotersComponent {\\n  @Input()\\n  get name(): string { return this._name; }\\n  set name(name: string) {\\n    this._name = (name && name.trim()) || '<no name set>';\\n  }\\n  private _name = '';\\n}\\n\".trim();var excell=\"\\n//app.component.ts\\nimport * as XLSX from 'xlsx';\\n\\n@Component({\\n  selector: 'app-root',\\n  template: '<div>\\n  <button (click) = \\\"exportexcel()\\\" > Export to Excel</button >\\n\\n    <table id=\\\"excel-table\\\">\\n      <tr>\\n        <th>Id</th>\\n        <th>Name</th>\\n        <th>Username</th>\\n        <th>Email</th>\\n      </tr>\\n      <tr *ngFor=\\\"let item of userList\\\">\\n      <td>{{ item.id }}</td>\\n      <td>{{ item.name }}</td>\\n      <td>{{ item.username }}</td>\\n      <td>{{ item.email }}</td>\\n                  </tr>\\n                </table>\\n              </div>',})\\n\\nexport class AppComponent {\\n  fileName= 'ExcelSheet.xlsx';\\n  userList = [\\n    { \\\"id\\\": 1, \\\"name\\\": \\\"Leanne\\\", \\\"username\\\": \\\"Bret\\\", \\\"email\\\": \\\"Sincere@april.biz\\\" },\\n    { \\\"id\\\": 2,\\\"name\\\": \\\"Ervin\\\", \\\"username\\\": \\\"Antonette\\\", \\\"email\\\": \\\"Shanna@melissa.tv\\\" },\\n    { \\\"id\\\": 3,\\\"name\\\": \\\"Clement\\\",\\\"username\\\": \\\"Samantha\\\",\\\"email\\\": \\\"Nathan@yesenia.net\\\" },\\n    { \\\"id\\\": 4,\\\"name\\\": \\\"Patricia\\\",\\\"username\\\": \\\"Karianne\\\",\\\"email\\\": \\\"Julianne@kory.org\\\" },\\n    { \\\"id\\\": 5,\\\"name\\\": \\\"Chelsey\\\",\\\"username\\\": \\\"Kamren\\\",\\\"email\\\": \\\"Lucio@annie.ca\\\" }\\n  ]\\n\\n  exportexcel(): void {\\n       /* table id is passed over here */\\n       let element = document.getElementById('excel-table');\\n       const ws: XLSX.WorkSheet =XLSX.utils.table_to_sheet(element);\\n\\n       /* generate workbook and add the worksheet */\\n       const wb: XLSX.WorkBook = XLSX.utils.book_new();\\n       XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\\n\\n       /* save to file */\\n       XLSX.writeFile(wb, this.fileName);\\n\\n    }\\n}\\n\".trim();var getData=\"\\nimport { HttpClient } from '@angular/common/http';\\n\\n@Component({\\n  selector: 'app-root',\\n  template: '\\n  <div>\\n  Enter Name\\n<input type=\\\"text\\\" [(ngModel)] =\\\"searchTerm\\\" (ngModelChange) =\\\"onChange($event)\\\" />\\n\\n   <div *ngIf=\\\"searchedData\\\">\\n    id: {{searchedData.id}}\\n    email: {{searchedData.email}}\\n   </div>\\n  <div *ngIf=\\\"searchTerm && !searchedData\\\">\\n      No Results Found\\n    </div>\\n  </div>\\n  '})\\n\\n  export class AppComponent {\\n  constructor(private http:HttpClient){}\\n  mockData:any =[];\\n\\n  ngOnInit(){\\n    this.http.get('https://jsonplaceholder.typicode.com/users')\\n        .subscribe(val=>{\\n          this.mockData=val;\\n        })\\n  }\\n  searchTerm = \\\"\\\";\\n  searchedData?;\\n\\n  onChange(value: string | null) {\\n    this.searchedData = this.mockData.find(\\n      ({name}) => name.toLowerCase() === value.toLowerCase()\\n    );\\n  }\\n}\".trim();var FilterPlace=/*#__PURE__*/function(_Component){_inherits(FilterPlace,_Component);function FilterPlace(){_classCallCheck(this,FilterPlace);return _possibleConstructorReturn(this,_getPrototypeOf(FilterPlace).apply(this,arguments));}_createClass(FilterPlace,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Get-jsonPlaceholder\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:getData,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Filter-jsonPlaceholder\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:filters,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Temperature Converter\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:tempCon,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Live Input\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:liveInput,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"h3\",null,\"Agree-Disagree\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:agreeDis,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"h3\",null,\"No Name Set\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:setname,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Export Excel\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:excell,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return FilterPlace;}(Component);export default withStyles(styles)(FilterPlace);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/filterPlace.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","filters","trim","tempCon","liveInput","agreeDis","setname","excell","getData","FilterPlace","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst filters = `\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\n\n//app.component.ts\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'my-app',\n  template: '\n  <input type = \"text\" [(ngModel)] = \"filterBy\" (keyup) = \"getUsers()\">\n    <div *ngFor=\"let user of filtersUser\"> {{user.name}}</div>',  })\n\n\nexport class AppComponent  {\n users: any[];\n filtersUser: any[];\n filterBy;\n\n constructor(private http:HttpClient){}\n\n ngOnInit(){\n   this.http.get('https://jsonplaceholder.typicode.com/users')\n        .subscribe(user=>{\n          this.users=user;\n          this.filtersUser=[...this.users]\n        })\n }\n getUsers(){\n     this.filtersUser = [...this.users.filter(user => {\n       user.name.includes(this.filterBy)})];\n  }\n}\n`.trim();\n\nconst tempCon = `\n@Component({\n  selector: 'app-root',\n  template:'\n  <div>\n  Celsius\n  <input type = \"number\" [(ngModel)] = \"c\" (ngModelChange) = \"onChange($event, 'c')\" />\n    Fahrenheit\n    <input type = \"number\" [(ngModel)] = \"f\" (ngModelChange) = \"onChange($event, 'f')\" />\n</div >\n  '})\n\nexport class AppComponent {\n   c = \"\";\n   f = \"\";\n\n   onChange(value: string | null, type: \"c\" | \"f\") {\n    if (value === null) {\n      this.c = \"\";\n      this.f = \"\";\n      return;\n    }\n\n    const temperature = Number(value);\n    if (type === \"c\") {\n      this.f = ((temperature * 9) / 5 + 32).toFixed(1);\n    } else {\n      this.c = (((temperature - 32) * 5) / 9).toFixed(1);\n    }\n  }\n}`.trim();\n\nconst liveInput = `\n//app.component.ts\n@Component({\n  selector: 'my-app',\n  template: '\n  <input #box (keyup) = 'onKey(box.value)' >\n    {{result}}',\n            })\n\nexport class HomeComponent {\n  values = '';\n  result = '';\n\n  constructor() { }\n\n  onKey(value: string) {\n    this.values=String(value).replace('a','');\n    this.result =(this.values).replace('a','');\n  }\n}\n`.trim();\n\nconst agreeDis = `\n//app.component.ts\n@Component({\n  selector: 'app-root',\n  template: '\n  <h3> Agree: {{agreed}}, Disagree: {{disagreed}}</h3>\n    <app-voters *ngFor=\"let voter of voters\"\n    [name] = \"voter\"\n      (voted) = \"onVoted($event)\" >\n    </app-voters>\n  '\n})\n\nexport class AppComponent {\n  agreed = 0;\n  disagreed = 0;\n  voters = ['Narco', 'Celeritas', 'Bombasto'];\n\n  onVoted(agreed: boolean) {\n    agreed ? this.agreed++ : this.disagreed++;\n  }\n}\n\n\n//voters.component.ts\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-voters',\n  template: '\n  <h4> {{name}}</h4>\n    <button (click) = \"vote(true)\" [disabled] = \"didVote\"> Agree</button >\n      <button (click) = \"vote(false)\" [disabled] = \"didVote\"> Disagree</button >\n  '\n})\nexport class VotersComponent {\n  @Input()  name = '';\n  @Output() voted = new EventEmitter<boolean>();\n  didVote = false;\n\n  vote(agreed: boolean) {\n    this.voted.emit(agreed);\n    this.didVote = true;\n  }\n}\n`.trim();\n\nconst setname = `\n//app.component.ts\n@Component({\n  selector: 'app-root',\n  template: '\n  <p> Master controls {{names.length}} names</p>\n    <app-voters *ngFor=\"let name of names\" [name] = \"name\"></app-voters>\n        '})\n\nexport class AppComponent {\n  names = ['Dr IQ', '   ', '  Bombasto  '];\n}\n\n\n//voters.component.ts\n@Component({\n  selector: 'app-voters',\n  template: '<h4>{{name}}</h4>'\n})\n\nexport class VotersComponent {\n  @Input()\n  get name(): string { return this._name; }\n  set name(name: string) {\n    this._name = (name && name.trim()) || '<no name set>';\n  }\n  private _name = '';\n}\n`.trim();\n\n\nconst excell = `\n//app.component.ts\nimport * as XLSX from 'xlsx';\n\n@Component({\n  selector: 'app-root',\n  template: '<div>\n  <button (click) = \"exportexcel()\" > Export to Excel</button >\n\n    <table id=\"excel-table\">\n      <tr>\n        <th>Id</th>\n        <th>Name</th>\n        <th>Username</th>\n        <th>Email</th>\n      </tr>\n      <tr *ngFor=\"let item of userList\">\n      <td>{{ item.id }}</td>\n      <td>{{ item.name }}</td>\n      <td>{{ item.username }}</td>\n      <td>{{ item.email }}</td>\n                  </tr>\n                </table>\n              </div>',})\n\nexport class AppComponent {\n  fileName= 'ExcelSheet.xlsx';\n  userList = [\n    { \"id\": 1, \"name\": \"Leanne\", \"username\": \"Bret\", \"email\": \"Sincere@april.biz\" },\n    { \"id\": 2,\"name\": \"Ervin\", \"username\": \"Antonette\", \"email\": \"Shanna@melissa.tv\" },\n    { \"id\": 3,\"name\": \"Clement\",\"username\": \"Samantha\",\"email\": \"Nathan@yesenia.net\" },\n    { \"id\": 4,\"name\": \"Patricia\",\"username\": \"Karianne\",\"email\": \"Julianne@kory.org\" },\n    { \"id\": 5,\"name\": \"Chelsey\",\"username\": \"Kamren\",\"email\": \"Lucio@annie.ca\" }\n  ]\n\n  exportexcel(): void {\n       /* table id is passed over here */\n       let element = document.getElementById('excel-table');\n       const ws: XLSX.WorkSheet =XLSX.utils.table_to_sheet(element);\n\n       /* generate workbook and add the worksheet */\n       const wb: XLSX.WorkBook = XLSX.utils.book_new();\n       XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\n\n       /* save to file */\n       XLSX.writeFile(wb, this.fileName);\n\n    }\n}\n`.trim();\n\nconst getData = `\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-root',\n  template: '\n  <div>\n  Enter Name\n<input type=\"text\" [(ngModel)] =\"searchTerm\" (ngModelChange) =\"onChange($event)\" />\n\n   <div *ngIf=\"searchedData\">\n    id: {{searchedData.id}}\n    email: {{searchedData.email}}\n   </div>\n  <div *ngIf=\"searchTerm && !searchedData\">\n      No Results Found\n    </div>\n  </div>\n  '})\n\n  export class AppComponent {\n  constructor(private http:HttpClient){}\n  mockData:any =[];\n\n  ngOnInit(){\n    this.http.get('https://jsonplaceholder.typicode.com/users')\n        .subscribe(val=>{\n          this.mockData=val;\n        })\n  }\n  searchTerm = \"\";\n  searchedData?;\n\n  onChange(value: string | null) {\n    this.searchedData = this.mockData.find(\n      ({name}) => name.toLowerCase() === value.toLowerCase()\n    );\n  }\n}`.trim();\n\n\nclass FilterPlace extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Get-jsonPlaceholder</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={getData}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Filter-jsonPlaceholder</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={filters}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Temperature Converter</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={tempCon}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Live Input</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={liveInput}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <h3>Agree-Disagree</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={agreeDis}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <h3>No Name Set</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={setname}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Export Excel</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={excell}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(FilterPlace));\n"]},"metadata":{},"sourceType":"module"}