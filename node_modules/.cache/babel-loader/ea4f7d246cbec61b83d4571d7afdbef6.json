{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/pythone/deeppy/pyIntro.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst pickle = `import pickle\nmylist = ['a', 'b', 'c', 'd']\nwith open('datafile.txt', 'wb') as fh:\n   pickle.dump(mylist, fh)\n   \n   \n#2\nimport pickle\ncars = ['A', 'B', 'C', 'D']\nfile = \"myCar.pkl\"\nfileobj = open(file, 'wb')\npickle.dump(cars, fileobj)\n\nfileobj.close()\n\n# Second Part\n\nfile = \"myCar.pkl\"\nfileobj = open(file,'rb')\nmycar = pickle.load(fileobj)\nprint(mycar)\nprint(type(mycar))\n`.trim();\nconst unpickling = `\nimport pickle\npickle_off = open (\"datafile.txt\", \"rb\")\nemp = pickle.load(pickle_off)\nprint(emp)\n\nO/P: ['a', 'b', 'c', 'd']`.trim();\nconst monkey_patching = `# monkeyy.py \nclass X: \n     def func(self): \n          print \"func() is being called\"\n\n          \nimport monkeyy \ndef monkey_f(self): \n     print \"monkey_f() is being called\"                                # replacing address of “func” with “monkey_f”\n\nmonkeyy.X.func = monkey_f \nobj = monk.X()                                          # calling “func” whose address got replaced with “monkey_f()”\n\nobj.func()\n`.trim();\nconst monkey_patchings = `\nclass Test:\n    def __init__(self,x):\n        self.a=x;\n    def get_data(self):\n        print(\"Some code to fetch data from database\")\n    def f1(self):\n        self.get_data()\n    def f2(self):\n        self.get_data()\nt1=Test(5)\n# t1.f1()\n# t1.f2()\n\ndef new_get_data(self):\n    print(\"Some code to fetch data from test data\")\nTest.get_data = new_get_data\nprint(\"After Monkey Patching\")\nt1.f1()\nt1.f2()`.trim();\nconst generators = `\ndef my_generator():\n        yield 1\n        yield 2\n        yield 3\n              \n\n#2\ndef evenNumbers(n):\n    i=1\n    while n:                                                      # Return keyword return value with control.\n        yield 2*i                                                 # Yield return value but function paouse not control.\n        i+=1\n        n-=1\n\nit=evenNumbers(10)\neven_list=[]\nwhile True:\n    try:\n        even_list.append(next(it))\n        # even_list += next(it)\n    except StopIteration:\n        break\nprint(even_list)\n`.trim();\nconst format = `\ndef countdown(num):\n    print('Starting')\n    while num > 0:\n        yield num\n        num -= 1\n\ncd = countdown(3)                                                         # this will not print 'Starting'\nprint(next(cd))                                                           # this will print 'Starting' and the first value\n\nprint(next(cd))                                                           # will print the next values\nprint(next(cd))\nprint(next(cd))                                                           # this will raise a StopIteration\n`.trim();\nconst memory = `\n# without a generator\ndef firstn(n):\n    num, nums = 0, []\n    while num < n:\n        nums.append(num)\n        num += 1\n    return nums\n\nsum_of_first_n = sum(firstn(1000000))\nprint(sum_of_first_n)\nimport sys\nprint(sys.getsizeof(firstn(1000000)), \"bytes\")\n\n\n# with a generator\ndef firstn(n):\n    num = 0\n    while num < n:\n        yield num\n        num += 1\n\nsum_of_first_n = sum(firstn(1000000))\nprint(sum_of_first_n)\nimport sys\nprint(sys.getsizeof(firstn(1000000)), \"bytes\")\n`.trim();\nconst fibonacci = `\ndef fibonacci(limit):\n    a, b = 0, 1 \n    while a < limit:\n        yield a\n        a, b = b, a + b\n\nfib = fibonacci(30)\nprint(list(fib))                                                  # generator objects can be converted to a list\n`.trim();\nconst comprehensions = `\nmygenerator = (i for i in range(1000) if i % 2 == 0)                # generator expression\nprint(sys.getsizeof(mygenerator))\n\nmylist = [i for i in range(1000) if i % 2 == 0]                     # list comprehension\nprint(sys.getsizeof(mylist))`.trim();\nconst behind = `\nclass firstn:\n    def __init__(self, n):\n        self.n = n\n        self.num = 0\n        \n    def __iter__(self):\n        return self\n    \n    def __next__(self):\n        if self.num < self.n:\n            cur = self.num\n            self.num += 1\n            return cur\n        else:\n            raise StopIteration()\n             \nfirstn_object = firstn(1000000)\nprint(sum(firstn_object))\n`.trim();\n\nclass PyIntro extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, \"Define pickling and unpickling.\"), \"Pickling is the process of converting Python objects, such as lists, dicts, etc., into a character stream.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: pickle,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    })), \"In the above code, list \\u2013 \\u201Cmylist\\u201D contains four elements (\\u2018a\\u2019, \\u2018b\\u2019, \\u2018c\\u2019, \\u2018d\\u2019). We open the file in \\u201Cwb\\u201D mode instead of \\u201Cw\\u201D as all the operations are done using bytes in the current working directory. A new file named \\u201Cdatafile.txt\\u201D is created, which converts the mylist data in the byte stream.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, \"The process of retrieving the original Python objects from the stored string representation, which is the reverse of the pickling process, is called unpickling.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: unpickling,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, \"Pickle Exceptions\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }), \"Some of the common exceptions raised while dealing with pickle module:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, \"Pickle.PicklingError: \"), \"If the pickle object doesn\\u2019t support pickling, this exception is raised.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, \"Pickle.UnpicklingError: \"), \"In case the file contains bad/ corrupted data.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \"EOFError: \"), \"In case the end of file is detected, this exception is raised.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, \"Prons:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, \"Save complicated data.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, \"Easy to use, lighter and doesn\\u2019t require several lines of code.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, \"The pickled file generated is not easily readable and thus provide some security.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, \"Cons:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, \"Languages other than python may not able to reconstruct pickled python objects.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, \"Risk of unpickling data from malicious sources.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, \"Monkey patching\"), \"Change object behavior during run time.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, \"Monkey patching is the process of modifications that are done to a class/ module during the runtime.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, \"This is done as Python supports changes in the behavior of the program while ssbeing executed.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: monkey_patching,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: monkey_patchings,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, \"Generators\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, \"Generators are functions that can be paused and resumed, returning an object that can be iterated over. \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, \"They are lazy and thus produce items one at a time and only when asked. Furthermore, we do not need to wait until all the elements have been generated before we start to use them.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, \"They are much more memory efficient when dealing with large datasets.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, \"A generator is defined like a normal function but use the yield statement instead of return.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: generators,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, \"Execution of a generator function\"), \"Calling the function does not execute it. Instead, the function returns a generator object which is used to control execution.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, \"Generator objects execute when next() is called. When calling next() the first time, execution begins at the start of the function and continues until the first yield statement.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, \"Subsequent calls to next() continue from the yield statement (and loop around) until another yield is reached.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }), \"If yield is not called because of a condition or the end is reached, a StopIteration exception is raised.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: format,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, \"Generators save memory!\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, \"Without a generator, the complete sequence has to be stored in a list.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, \"With a generator, no additional sequence is needed to store the numbers.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: memory,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, \"Another example: Fibonacci numbers\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: fibonacci,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, \"Generator expressions\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, \"Like list, generators can be written in the same syntax except with parenthesis instead of square brackets.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, \"Generator expressions are slower than list because of the overhead of function calls.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: comprehensions,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, \"Concept behind a generator\"), \"It has to implement \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, \"__iter__\"), \" and \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, \"__next__\"), \" to make it iterable, keep, and take care of a StopIteration.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: behind,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(PyIntro);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/pythone/deeppy/pyIntro.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","pickle","trim","unpickling","monkey_patching","monkey_patchings","generators","format","memory","fibonacci","comprehensions","behind","PyIntro","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst pickle = `import pickle\nmylist = ['a', 'b', 'c', 'd']\nwith open('datafile.txt', 'wb') as fh:\n   pickle.dump(mylist, fh)\n   \n   \n#2\nimport pickle\ncars = ['A', 'B', 'C', 'D']\nfile = \"myCar.pkl\"\nfileobj = open(file, 'wb')\npickle.dump(cars, fileobj)\n\nfileobj.close()\n\n# Second Part\n\nfile = \"myCar.pkl\"\nfileobj = open(file,'rb')\nmycar = pickle.load(fileobj)\nprint(mycar)\nprint(type(mycar))\n`.trim()\n\nconst unpickling = `\nimport pickle\npickle_off = open (\"datafile.txt\", \"rb\")\nemp = pickle.load(pickle_off)\nprint(emp)\n\nO/P: ['a', 'b', 'c', 'd']`.trim()\n\n\nconst monkey_patching = `# monkeyy.py \nclass X: \n     def func(self): \n          print \"func() is being called\"\n\n          \nimport monkeyy \ndef monkey_f(self): \n     print \"monkey_f() is being called\"                                # replacing address of “func” with “monkey_f”\n\nmonkeyy.X.func = monkey_f \nobj = monk.X()                                          # calling “func” whose address got replaced with “monkey_f()”\n\nobj.func()\n`.trim()\n\nconst monkey_patchings = `\nclass Test:\n    def __init__(self,x):\n        self.a=x;\n    def get_data(self):\n        print(\"Some code to fetch data from database\")\n    def f1(self):\n        self.get_data()\n    def f2(self):\n        self.get_data()\nt1=Test(5)\n# t1.f1()\n# t1.f2()\n\ndef new_get_data(self):\n    print(\"Some code to fetch data from test data\")\nTest.get_data = new_get_data\nprint(\"After Monkey Patching\")\nt1.f1()\nt1.f2()`.trim();\n\nconst generators = `\ndef my_generator():\n        yield 1\n        yield 2\n        yield 3\n              \n\n#2\ndef evenNumbers(n):\n    i=1\n    while n:                                                      # Return keyword return value with control.\n        yield 2*i                                                 # Yield return value but function paouse not control.\n        i+=1\n        n-=1\n\nit=evenNumbers(10)\neven_list=[]\nwhile True:\n    try:\n        even_list.append(next(it))\n        # even_list += next(it)\n    except StopIteration:\n        break\nprint(even_list)\n`.trim();\n\nconst format = `\ndef countdown(num):\n    print('Starting')\n    while num > 0:\n        yield num\n        num -= 1\n\ncd = countdown(3)                                                         # this will not print 'Starting'\nprint(next(cd))                                                           # this will print 'Starting' and the first value\n\nprint(next(cd))                                                           # will print the next values\nprint(next(cd))\nprint(next(cd))                                                           # this will raise a StopIteration\n`.trim();\n\nconst memory = `\n# without a generator\ndef firstn(n):\n    num, nums = 0, []\n    while num < n:\n        nums.append(num)\n        num += 1\n    return nums\n\nsum_of_first_n = sum(firstn(1000000))\nprint(sum_of_first_n)\nimport sys\nprint(sys.getsizeof(firstn(1000000)), \"bytes\")\n\n\n# with a generator\ndef firstn(n):\n    num = 0\n    while num < n:\n        yield num\n        num += 1\n\nsum_of_first_n = sum(firstn(1000000))\nprint(sum_of_first_n)\nimport sys\nprint(sys.getsizeof(firstn(1000000)), \"bytes\")\n`.trim();\n\nconst fibonacci = `\ndef fibonacci(limit):\n    a, b = 0, 1 \n    while a < limit:\n        yield a\n        a, b = b, a + b\n\nfib = fibonacci(30)\nprint(list(fib))                                                  # generator objects can be converted to a list\n`.trim();\n\nconst comprehensions = `\nmygenerator = (i for i in range(1000) if i % 2 == 0)                # generator expression\nprint(sys.getsizeof(mygenerator))\n\nmylist = [i for i in range(1000) if i % 2 == 0]                     # list comprehension\nprint(sys.getsizeof(mylist))`.trim();\n\nconst behind = `\nclass firstn:\n    def __init__(self, n):\n        self.n = n\n        self.num = 0\n        \n    def __iter__(self):\n        return self\n    \n    def __next__(self):\n        if self.num < self.n:\n            cur = self.num\n            self.num += 1\n            return cur\n        else:\n            raise StopIteration()\n             \nfirstn_object = firstn(1000000)\nprint(sum(firstn_object))\n`.trim();\n\n\n\nclass PyIntro extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Define pickling and unpickling.</h3>\n              Pickling is the process of converting Python objects, such as lists, dicts, etc., into a character stream.\n\n              <div style={titles}>\n                <PrismCode\n                  code={pickle}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              In the above code, list – “mylist” contains four elements (‘a’, ‘b’, ‘c’, ‘d’). We open the file in “wb” mode instead of “w” as all the operations are done using bytes in the current working directory. A new file named “datafile.txt” is created, which converts the mylist data in the byte stream.\n              <br />\n              <i>The process of retrieving the original Python objects from the stored string representation, which is the reverse of the pickling process, is called unpickling.</i>\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={unpickling}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Pickle Exceptions</b>\n              <br />\n              Some of the common exceptions raised while dealing with pickle module:\n              <ul>\n                <li><b>Pickle.PicklingError: </b>If the pickle object doesn’t support pickling, this exception is raised.</li>\n                <li><b>Pickle.UnpicklingError: </b>In case the file contains bad/ corrupted data.</li>\n                <li><b>EOFError: </b>In case the end of file is detected, this exception is raised.</li>\n              </ul>\n              <br />\n\n              <b>Prons:</b><br />\n              <ul>\n                <li>Save complicated data.</li>\n                <li>Easy to use, lighter and doesn’t require several lines of code.</li>\n                <li>The pickled file generated is not easily readable and thus provide some security.</li>\n              </ul>\n              <br />\n\n              <b>Cons:</b><br />\n              <ul>\n                <li>Languages other than python may not able to reconstruct pickled python objects.</li>\n                <li>Risk of unpickling data from malicious sources.</li>\n              </ul>\n              <br />\n\n              <h3>Monkey patching</h3>\n              Change object behavior during run time.\n              <br />\n              <ul>\n                <li>Monkey patching is the process of modifications that are done to a class/ module during the runtime.</li>\n                <li>This is done as Python supports changes in the behavior of the program while ssbeing executed.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={monkey_patching}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={monkey_patchings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Generators</h3>\n              <ul>\n                <li>Generators are functions that can be paused and resumed, returning an object that can be iterated over. </li>\n                <li>They are lazy and thus produce items one at a time and only when asked. Furthermore, we do not\n                  need to wait until all the elements have been generated before we start to use them.</li>\n                <li>They are much more memory efficient when dealing with large datasets.</li>\n                <li>A generator is defined like a normal function but use the yield statement instead of return.</li>\n              </ul>\n              <br />\n\n\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={generators}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Execution of a generator function</h3>\n              Calling the function does not execute it. Instead, the function returns a generator object which is\n              used to control execution.\n              <br />\n              <ul>\n                <li>Generator objects execute when next() is called. When calling next() the\n                  first time, execution begins at the start of the function and continues until the first yield statement.</li>\n                <li>Subsequent calls to next() continue from the yield statement (and loop around) until another yield is reached.</li>\n              </ul>\n              <br />\n              If yield is not called because of a condition or the end is reached, a StopIteration exception is raised.\n              <br />\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={format}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Generators save memory!</h3>\n              <ul>\n                <li>Without a generator, the complete sequence has to be stored in a list.</li>\n                <li>With a generator, no additional sequence is needed to store the numbers.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={memory}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Another example: Fibonacci numbers</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={fibonacci}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Generator expressions</h3>\n              <ul>\n                <li>Like list, generators can be written in the same syntax except with parenthesis instead of square brackets.</li>\n                <li>Generator expressions are slower than list because of the overhead of function calls.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={comprehensions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Concept behind a generator</h3>\n              It has to implement <b>__iter__</b> and <b>__next__</b> to make it iterable, keep, and take care of a StopIteration.\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={behind}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(PyIntro));\n"]},"metadata":{},"sourceType":"module"}