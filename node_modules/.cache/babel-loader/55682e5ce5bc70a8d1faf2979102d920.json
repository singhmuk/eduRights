{"ast":null,"code":"import React,{Suspense,lazy}from'react';var InfoML=lazy(function(){return import('./deepMl/infoMl');});var Capture=lazy(function(){return import('./deepMl/capture');});var JoinImages=lazy(function(){return import('./deepMl/joinImages');});var K_Mean=lazy(function(){return import('./deepMl/k_meanClustring');});var Pandas=lazy(function(){return import('./deepMl/pandas');});var Numpys=lazy(function(){return import('./deepMl/numpyPy');});var Adaboots=lazy(function(){return import('./deepMl/adaboost');});var DecisionTree=lazy(function(){return import('./deepMl/decisiontree');});var KnnPy=lazy(function(){return import('./deepMl/knn');});var LdaPy=lazy(function(){return import('./deepMl/lda');});var LeanearRegression=lazy(function(){return import('./deepMl/leanearRegression');});var LogisticReg=lazy(function(){return import('./deepMl/logisticRegrations');});var NaiveBrs=lazy(function(){return import('./deepMl/naiveBar');});var PcaPy=lazy(function(){return import('./deepMl/pcaPy');});var Perceptron=lazy(function(){return import('./deepMl/perceptron');});var RandomForest=lazy(function(){return import('./deepMl/randomForest');});var Rgrations=lazy(function(){return import('./deepMl/regrations');});var SvmPy=lazy(function(){return import('./deepMl/svmPy');});var Gradient=lazy(function(){return import('./deepMl/gredient_decents');});var Libraries=lazy(function(){return import('./deepMl/libraries');});var Traning=lazy(function(){return import('./deepMl/training');});var LogisticRegs=lazy(function(){return import('./deepMl/logisticReg');});var GreedSearch=lazy(function(){return import('./deepMl/greedSearch');});var Regularizations=lazy(function(){return import('./deepMl/regularizations');});var Bagging=lazy(function(){return import('./deepMl/bagging');});var FeaturesEng=lazy(function(){return import('./deepMl/featuresEng');});var Superwise=lazy(function(){return import('./deepMl/superwise');});var components={Capture:Capture,JoinImages:JoinImages,K_Mean:K_Mean,Pandas:Pandas,LogisticRegs:LogisticRegs,GreedSearch:GreedSearch,Regularizations:Regularizations,Bagging:Bagging,FeaturesEng:FeaturesEng,InfoML:InfoML,Adaboots:Adaboots,DecisionTree:DecisionTree,KnnPy:KnnPy,LdaPy:LdaPy,LeanearRegression:LeanearRegression,LogisticReg:LogisticReg,NaiveBrs:NaiveBrs,PcaPy:PcaPy,Perceptron:Perceptron,RandomForest:RandomForest,Rgrations:Rgrations,SvmPy:SvmPy,Traning:Traning,Numpys:Numpys,Libraries:Libraries,Gradient:Gradient,Superwise:Superwise};export{components};","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ml/index.js"],"names":["React","Suspense","lazy","InfoML","Capture","JoinImages","K_Mean","Pandas","Numpys","Adaboots","DecisionTree","KnnPy","LdaPy","LeanearRegression","LogisticReg","NaiveBrs","PcaPy","Perceptron","RandomForest","Rgrations","SvmPy","Gradient","Libraries","Traning","LogisticRegs","GreedSearch","Regularizations","Bagging","FeaturesEng","Superwise","components"],"mappings":"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","sourcesContent":["import React, { Suspense, lazy } from 'react';\n\n\nconst InfoML = lazy(() => import('./deepMl/infoMl'));\nconst Capture = lazy(() => import('./deepMl/capture'));\nconst JoinImages = lazy(() => import('./deepMl/joinImages'));\nconst K_Mean = lazy(() => import('./deepMl/k_meanClustring'));\nconst Pandas = lazy(() => import('./deepMl/pandas'));\nconst Numpys = lazy(() => import('./deepMl/numpyPy'));\nconst Adaboots = lazy(() => import('./deepMl/adaboost'));\nconst DecisionTree = lazy(() => import('./deepMl/decisiontree'));\nconst KnnPy = lazy(() => import('./deepMl/knn'));\nconst LdaPy = lazy(() => import('./deepMl/lda'));\nconst LeanearRegression = lazy(() => import('./deepMl/leanearRegression'));\nconst LogisticReg = lazy(() => import('./deepMl/logisticRegrations'));\nconst NaiveBrs = lazy(() => import('./deepMl/naiveBar'));\nconst PcaPy = lazy(() => import('./deepMl/pcaPy'));\nconst Perceptron = lazy(() => import('./deepMl/perceptron'));\nconst RandomForest = lazy(() => import('./deepMl/randomForest'));\nconst Rgrations = lazy(() => import('./deepMl/regrations'));\nconst SvmPy = lazy(() => import('./deepMl/svmPy'));\nconst Gradient = lazy(() => import('./deepMl/gredient_decents'));\n\nconst Libraries = lazy(() => import('./deepMl/libraries'));\nconst Traning = lazy(() => import('./deepMl/training'));\nconst LogisticRegs = lazy(() => import('./deepMl/logisticReg'));\nconst GreedSearch = lazy(() => import('./deepMl/greedSearch'));\nconst Regularizations = lazy(() => import('./deepMl/regularizations'));\nconst Bagging = lazy(() => import('./deepMl/bagging'));\nconst FeaturesEng = lazy(() => import('./deepMl/featuresEng'));\nconst Superwise = lazy(() => import('./deepMl/superwise'));\n\n\n\nconst components = {\n  Capture, JoinImages, K_Mean, Pandas, LogisticRegs, GreedSearch, Regularizations, Bagging, FeaturesEng,\n  InfoML, Adaboots, DecisionTree, KnnPy, LdaPy, LeanearRegression,\n  LogisticReg, NaiveBrs, PcaPy, Perceptron, RandomForest, Rgrations, SvmPy, Traning,\n  Numpys, Libraries, Gradient,\n  Superwise\n};\n\nexport { components };"]},"metadata":{},"sourceType":"module"}