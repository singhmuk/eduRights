{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/javaScripts/deepJs/logic.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst Pyramid = ` \n// Upside pyramid.\nfunction pyraminds() {\n  let i, j, k, str = \"\";\n\n  for (i=0; i<5; i++) {\n    for (j=1; j<(5 - i); j++) {\n      str += \" \";\n    }\n    for (k=1; k<=(2 * i +1); k++) {\n      str += \"*\";\n    }\n\n    str += 'newLine';\n  }\n\n  console.log(str)\n}\n\npyraminds();\n\n\n// downside pyramid.\nfor (i=1; i<5; i++) {\n  for (j=0; j<i; j++) {\n    str += \" \";\n  }\n  for (k=(5 - i)*2; k>1; k--) {\n    str += \"*\";\n  }\n\n  str += 'newLine';\n}\n\nconsole.log(str)\n `.trim();\nconst insersonSort = `\nvar insersionSort = function(array){\n  for(var i =1; i< array.length; i++){\n    for(var j=0;j<i;j++){\n      if(array[i] < array[j]){\n        var temp = array.splice(i, 1);\n        array.splice(j,0,temp[0]);\n      }\n    }\n  }\n  \nconsole.log(array)\nreturn array;\n}\n\ninsersionSort([3,5,1,9,6,2,1])\n`.trim();\nconst mergSort = `\nfunction mergeSort(arr){\n    if(arr.length < 2) return arr;\n    var middle = Math.floor(arr.length/2);\n    var left = arr.slice(0, middle);\n    var right = arr.slice(middle, arr.length);\n    return merge(mergeSort(left), mergeSort(right));\n }\n \n function merge(left, right){\n  var result = [];\n    while(left.length && right.length){\n      if(left[0] == right[0]){\n        result.push(left.shift());\n      }\n  else{\n    result.push(right.shift());}\n  }\n  \n  while(left.length) result.push(left.shift());\n  while(right.length) result.push(right.shift());\n  console.log(result)\n  return result;\n }\n mergeSort([3,2,1])`.trim();\nconst quicksort = `\nfunction QuickSort(arr){\n    if(arr.length <= 1) return arr;\n        var pivot = arr[arr.length -1];\n        var left = [];\n        var right = [];\n        for(var i=0;i<arr.length-1;i++){\n        if(arr[i] < pivot){\n        left.push(arr[i])\n      }\n    else right.push(arr[i])\n    }\n    return [...QuickSort(left), pivot, ...QuickSort(right)]\n }\n console.log(QuickSort([5,4,2,7,9]))\n `.trim();\nconst selectionSort = `function selectionSort(arr){\n  var minIdx, temp,\n  len = arr.length;\n    for(var i = 0; i < len; i++){\n    minIdx = i;\n      for(var j = i+1; j<len; j++){\n        if(arr[j]<arr[minIdx]){\n        minIdx = j;\n      }\n    }\n    \n    temp = arr[i];\n    arr[i] = arr[minIdx];\n    arr[minIdx] = temp;\n   }\n \n console.log(arr)\n return arr;\n }\n \n selectionSort([7,5,2,4,3,9]);`.trim();\nconst twoSum = `\nfunction twoSum(arr, s){\n  var sum=[];\n  for(let i=0; i<arr.length; i++){\n    for(let j=i+1; j<arr.length; j++){\n      if(arr[i]+arr[j] == s){\n        sum.push([arr[i], arr[j]])\n      }\n    }\n  }\n  return sum;\n}\n\nconsole.log(twoSum([1,2,3,4],5));`.trim();\nconst Permutations = `\nfunction findPerms(str) {\n  if (str.length === 0) return \"\";\n  if (str.length === 1) return str;\nlet result = [];\nfor (let i = 0; i < str.length; i++) {\n    const currentChar = str[i];\n    const remainingChars = str.slice(0, i) + str.slice(i + 1);\nfor (let j = 0; j < remainingChars.length; j++) {\n  result.push(currentChar + findPerms(remainingChars)[j]);\n    }\n  }\n  return result;\n}\n\nconsole.log(findPerms('abc'))\n  `.trim();\nconst Pattern = `\nlet i,j, str=\"\";                                                                    //Square pattern.\nfor(i=1; i<=5; i++){\n  for(j=0; j<5; j++){\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nconsole.log(str);\n\n\nlet i, j, str = \"\";                                                               //Right pascal star pattern.\nfor (i=1; i<=5; i++) {\n  for (j=0; j<i; j++) {\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nfor (i=1; i<=(5-1); i++) {\n  for (j=0; j<(5-i); j++) {\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nconsole.log(str);\n`.trim();\nconst amount = `\nfunction minCoinChange(coins, amount) {\n  const minCoins = new Array(amount + 1).fill(Infinity); \n  \n  // there are 0 ways to make amount 0 with positive coin values\n  minCoins[0] = 0;\n  // look at one coin at a time\n  for(let coin of coins) {\n    for(let i = 0; i <= amount; i += 1) {\n     \n      if((i - coin) >= 0) minCoins[i] = Math.min(minCoins[i], minCoins[i - coin] + 1);\n    }\n  }\n  \n  // if the value remains Infinity, it means that no coin combination can make that amount\n  return minCoins[amount] !== Infinity ? minCoins[amount] : -1;\n}\n\n\nconsole.log(minCoinChange([1,2,3],13));`.trim();\nconst binaryMatrix = `\nfunction shorPath(grid) {\n  let n = grid.length - 1;\n  let q = [0]\n  \n  if (grid[0][0] || grid[n][n]) return -1\n  \n  grid[0][0] = 1\n  while (q.length) {\n      let curr = q.shift();\n      let i = curr & (1 << 7) - 1;\n      let j = curr >> 7;\n      \n      if (i === n && j === n) return grid[n][n]\n      for (let a = Math.max(i-1,0); a <= Math.min(i+1,n); a++){\n          for (let b = Math.max(j-1,0); b <= Math.min(j+1,n); b++){\n              if (grid[a][b] === 0){\n                  grid[a][b] = grid[i][j] + 1, q.push(a + (b << 7))\n                  }\n                }\n              }\n            }\n            return -1\n          };\n  \n  console.log(shorPath([[0,0,0],[1,1,0],[1,1,0]]));`.trim();\nconst armstrong = `\n  let sum = 0;\nconst number = prompt('Enter a three-digit positive integer: ');\n\nlet temp = number;\nwhile (temp > 0) {                                                       // finding the one's digit\n    let remainder = temp % 10;\n    sum += remainder * remainder * remainder;\n\n    // removing last digit from the number\n    temp = parseInt(temp / 10); // convert float into integer\n}\nif (sum == number) {\n    console.log('is an Armstrong number',number);\n}\nelse {\n    console.log('is Not Armstrong number',number);\n}`.trim();\n\nclass Logic extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, \"1. Pyramind\"), \"newLine = \\\\n\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Pyramid,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, \"2. Pattern\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Pattern,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, \" Armstrong Number\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: armstrong,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, \"14. Permutations\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Permutations,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }, \"19.Given an amount of money, return the minimum number of coins needed to make that change.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: amount,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, \"20.Shortest Path in Binary Matrix\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, \"In an N by N square grid, each cell is either empty (0) or blocked (1).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, \"A clear path from top-left to bottom-right has length k if and only if it is composed of cells C_1, C_2, ..., C_k such that:\"), \"1.Adjacent cells C_i and C_i+1 are connected 8-directionally (ie., they are different and share an edge or corner)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }), \"2.C_1 is at location (0, 0) (ie. has value grid[0][0])\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }), \"3.C_k is at location (N-1, N-1) (ie. has value grid[N-1][N-1])\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }), \"4.If C_i is located at (r, c), then grid[r][c] is empty (ie. grid[r][c] == 0).\", React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, \"Return the length of the shortest such clear path from top-left to bottom-right. If such a path does not exist, return -1.\")), \"Input:[[0,1],[1,0]], [[0,0,0],[1,1,0],[1,1,0]]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }), \"Output:2, 4\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: binaryMatrix,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }, \"21. Insersion Sort\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: insersonSort,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }, \"22. Merg Sort\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: mergSort,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, \"23. Quick Sort\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: quicksort,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }, \"24. Selection Sort\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: selectionSort,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Logic);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/javaScripts/deepJs/logic.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","Pyramid","trim","insersonSort","mergSort","quicksort","selectionSort","twoSum","Permutations","Pattern","amount","binaryMatrix","armstrong","Logic","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst Pyramid = ` \n// Upside pyramid.\nfunction pyraminds() {\n  let i, j, k, str = \"\";\n\n  for (i=0; i<5; i++) {\n    for (j=1; j<(5 - i); j++) {\n      str += \" \";\n    }\n    for (k=1; k<=(2 * i +1); k++) {\n      str += \"*\";\n    }\n\n    str += 'newLine';\n  }\n\n  console.log(str)\n}\n\npyraminds();\n\n\n// downside pyramid.\nfor (i=1; i<5; i++) {\n  for (j=0; j<i; j++) {\n    str += \" \";\n  }\n  for (k=(5 - i)*2; k>1; k--) {\n    str += \"*\";\n  }\n\n  str += 'newLine';\n}\n\nconsole.log(str)\n `.trim()\n\nconst insersonSort = `\nvar insersionSort = function(array){\n  for(var i =1; i< array.length; i++){\n    for(var j=0;j<i;j++){\n      if(array[i] < array[j]){\n        var temp = array.splice(i, 1);\n        array.splice(j,0,temp[0]);\n      }\n    }\n  }\n  \nconsole.log(array)\nreturn array;\n}\n\ninsersionSort([3,5,1,9,6,2,1])\n`.trim()\n\nconst mergSort = `\nfunction mergeSort(arr){\n    if(arr.length < 2) return arr;\n    var middle = Math.floor(arr.length/2);\n    var left = arr.slice(0, middle);\n    var right = arr.slice(middle, arr.length);\n    return merge(mergeSort(left), mergeSort(right));\n }\n \n function merge(left, right){\n  var result = [];\n    while(left.length && right.length){\n      if(left[0] == right[0]){\n        result.push(left.shift());\n      }\n  else{\n    result.push(right.shift());}\n  }\n  \n  while(left.length) result.push(left.shift());\n  while(right.length) result.push(right.shift());\n  console.log(result)\n  return result;\n }\n mergeSort([3,2,1])`.trim()\n\nconst quicksort = `\nfunction QuickSort(arr){\n    if(arr.length <= 1) return arr;\n        var pivot = arr[arr.length -1];\n        var left = [];\n        var right = [];\n        for(var i=0;i<arr.length-1;i++){\n        if(arr[i] < pivot){\n        left.push(arr[i])\n      }\n    else right.push(arr[i])\n    }\n    return [...QuickSort(left), pivot, ...QuickSort(right)]\n }\n console.log(QuickSort([5,4,2,7,9]))\n `.trim()\n\nconst selectionSort = `function selectionSort(arr){\n  var minIdx, temp,\n  len = arr.length;\n    for(var i = 0; i < len; i++){\n    minIdx = i;\n      for(var j = i+1; j<len; j++){\n        if(arr[j]<arr[minIdx]){\n        minIdx = j;\n      }\n    }\n    \n    temp = arr[i];\n    arr[i] = arr[minIdx];\n    arr[minIdx] = temp;\n   }\n \n console.log(arr)\n return arr;\n }\n \n selectionSort([7,5,2,4,3,9]);`.trim()\n\nconst twoSum = `\nfunction twoSum(arr, s){\n  var sum=[];\n  for(let i=0; i<arr.length; i++){\n    for(let j=i+1; j<arr.length; j++){\n      if(arr[i]+arr[j] == s){\n        sum.push([arr[i], arr[j]])\n      }\n    }\n  }\n  return sum;\n}\n\nconsole.log(twoSum([1,2,3,4],5));`.trim()\n\nconst Permutations = `\nfunction findPerms(str) {\n  if (str.length === 0) return \"\";\n  if (str.length === 1) return str;\nlet result = [];\nfor (let i = 0; i < str.length; i++) {\n    const currentChar = str[i];\n    const remainingChars = str.slice(0, i) + str.slice(i + 1);\nfor (let j = 0; j < remainingChars.length; j++) {\n  result.push(currentChar + findPerms(remainingChars)[j]);\n    }\n  }\n  return result;\n}\n\nconsole.log(findPerms('abc'))\n  `.trim()\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst Pattern = `\nlet i,j, str=\"\";                                                                    //Square pattern.\nfor(i=1; i<=5; i++){\n  for(j=0; j<5; j++){\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nconsole.log(str);\n\n\nlet i, j, str = \"\";                                                               //Right pascal star pattern.\nfor (i=1; i<=5; i++) {\n  for (j=0; j<i; j++) {\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nfor (i=1; i<=(5-1); i++) {\n  for (j=0; j<(5-i); j++) {\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nconsole.log(str);\n`.trim();\n\n\n\n\n\nconst amount = `\nfunction minCoinChange(coins, amount) {\n  const minCoins = new Array(amount + 1).fill(Infinity); \n  \n  // there are 0 ways to make amount 0 with positive coin values\n  minCoins[0] = 0;\n  // look at one coin at a time\n  for(let coin of coins) {\n    for(let i = 0; i <= amount; i += 1) {\n     \n      if((i - coin) >= 0) minCoins[i] = Math.min(minCoins[i], minCoins[i - coin] + 1);\n    }\n  }\n  \n  // if the value remains Infinity, it means that no coin combination can make that amount\n  return minCoins[amount] !== Infinity ? minCoins[amount] : -1;\n}\n\n\nconsole.log(minCoinChange([1,2,3],13));`.trim();\n\n\n\n\nconst binaryMatrix = `\nfunction shorPath(grid) {\n  let n = grid.length - 1;\n  let q = [0]\n  \n  if (grid[0][0] || grid[n][n]) return -1\n  \n  grid[0][0] = 1\n  while (q.length) {\n      let curr = q.shift();\n      let i = curr & (1 << 7) - 1;\n      let j = curr >> 7;\n      \n      if (i === n && j === n) return grid[n][n]\n      for (let a = Math.max(i-1,0); a <= Math.min(i+1,n); a++){\n          for (let b = Math.max(j-1,0); b <= Math.min(j+1,n); b++){\n              if (grid[a][b] === 0){\n                  grid[a][b] = grid[i][j] + 1, q.push(a + (b << 7))\n                  }\n                }\n              }\n            }\n            return -1\n          };\n  \n  console.log(shorPath([[0,0,0],[1,1,0],[1,1,0]]));`.trim();\n\n  const armstrong = `\n  let sum = 0;\nconst number = prompt('Enter a three-digit positive integer: ');\n\nlet temp = number;\nwhile (temp > 0) {                                                       // finding the one's digit\n    let remainder = temp % 10;\n    sum += remainder * remainder * remainder;\n\n    // removing last digit from the number\n    temp = parseInt(temp / 10); // convert float into integer\n}\nif (sum == number) {\n    console.log('is an Armstrong number',number);\n}\nelse {\n    console.log('is Not Armstrong number',number);\n}`.trim();\n\nclass Logic extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Pyramind</h3>\n              newLine = \\n\n              <div style={titles}>\n                <PrismCode\n                  code={Pyramid}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>2. Pattern</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Pattern}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              \n\n              <h3> Armstrong Number</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={armstrong}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              \n\n              \n\n              \n\n              \n\n              <h3>14. Permutations</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Permutations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n\n              \n              <br />\n\n              \n\n\n              \n\n              <b>19.Given an amount of money, return the minimum number of coins needed to make that change.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={amount}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>20.Shortest Path in Binary Matrix</h3>\n              <ul>\n                <li>In an N by N square grid, each cell is either empty (0) or blocked (1).</li>\n                <li>A clear path from top-left to bottom-right has length k if and only if it is composed of cells C_1, C_2, ..., C_k such that:</li>\n                1.Adjacent cells C_i and C_i+1 are connected 8-directionally (ie., they are different and share an edge or corner)\n                <br />\n                2.C_1 is at location (0, 0) (ie. has value grid[0][0])<br />\n                3.C_k is at location (N-1, N-1) (ie. has value grid[N-1][N-1])<br />\n                4.If C_i is located at (r, c), then grid[r][c] is empty (ie. grid[r][c] == 0).\n                <li>Return the length of the shortest such clear path from top-left to bottom-right. If such a path does not exist, return -1.</li>\n              </ul>\n              Input:[[0,1],[1,0]], [[0,0,0],[1,1,0],[1,1,0]]\n              <br />\n              <br />\n              Output:2, 4\n              <div style={titles}>\n                <PrismCode\n                  code={binaryMatrix}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>21. Insersion Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={insersonSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>22. Merg Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={mergSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>23. Quick Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={quicksort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>24. Selection Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={selectionSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Logic));\n"]},"metadata":{},"sourceType":"module"}