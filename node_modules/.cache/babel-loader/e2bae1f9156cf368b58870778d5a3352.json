{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic2.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst strArray = `\n    var strArray = \"StackOverflow\".split(\"\");\n    \n    console.log(strArray)\n    console.log(strArray.join(\"\"));\n`.trim();\nconst Sort = `\nlet i, j, arr=[0,9,8,7,6];\nvar max=0;\n\nfor(i=0; i<arr.length; i++){\n  for(j=i; j<arr.length; j++){\n    if(arr[i]>arr[j]){\n      var temp=arr[i];\n      arr[i]=arr[j];\n      arr[j]=temp;\n    }\n  }\n}\n\nconsole.log(arr);\n\n\n//Greatest Product Of 3\nmax = arr[arr.length-1] * arr[arr.length-2] * arr[arr.length-3]\nconsole.log(max);\n`.trim();\nconst duplicates = `\nvar array = [1,2,3,4,3,0,9,0,1];\nvar result=[];\n\nfor(let i=0; i<array.length;i++){\n    let count=0;\n    for(let j=0;j<result.length;j++){\n        if(array[i]==result[j]){\n            count +=1;\n        }\n    }\n    if(count==0){\n        result.push(array[i]);\n    }  \n}\nconsole.log(result) `.trim();\nconst compare_array = `\nfunction compare(){\n  const arr=[1,2,3,4,5,6];\n  const arr2=[5,6,7,8,9,0];\n  const result=[];\n  \n  for(let i=0; i<arr.length; i++){\n    if(arr2.indexOf(arr[i]) !== -1){\n      result.push(arr[i]);\n    }\n  }\n  console.log(result)\n}\n\ncompare();\n\n\n//Unique name\nfunction getUnique(){\n  var names = [\"John\", \"Peter\", \"Clark\", \"Harry\", \"John\", \"Alice\"];\n  var newName = [];\n  \n  for(i=0; i < names.length; i++){\n      if(newName.indexOf(names[i]) === -1) {\n          newName.push(names[i]);\n      }\n  }\n  console.log(newName);\n}\n\ngetUnique();\n`.trim();\nconst recursionReverseArray = `\nvar apple = [5,6,7,8,9];\nvar reverse = function(arr){\n var result = [];\n var newArr = [];\n   arr.forEach((item) => newArr.push(item));\n     var inner = function(x){\n     if(x.length > 0){\n       result.push(x.pop())\n       inner(x);\n     }\n   return;\n }\n \n inner(newArr);\n return result;\n}\n\nconsole.log(apple)\nconsole.log(reverse(apple))`.trim();\nconst findMedianSortedArrays = `\nconst findMedianSortedArrays = (nums1, nums2) => {\n  const merge = (xs1, xs2) => {\n    if (!xs1 || !xs1.length) {\n      return xs2\n    }\n    if (!xs2 || !xs2.length) {\n      return xs1\n    }\n    const [hd1, ...rest1] = xs1\n    const [hd2, ...rest2] = xs2\n    return hd1 <= hd2 ? [hd1, ...merge(rest1, xs2)] : [hd2, ...merge(xs1, rest2)]\n  }\n  const nums = merge(nums1, nums2)\n  const middle = Math.floor((nums.length-1) / 2)\n\n  return (middle * 2 === (nums.length-1)) ?  nums[middle] : ((nums[middle] + nums[middle + 1]) / 2) \n}\n\n\nconsole.log(findMedianSortedArrays([1,2],[3,4]))`.trim();\nconst maxSubArray = `\nconst maxSubArray = function (nums) {\n  let max = -Infinity\n  let currentMax = -Infinity\n  for (let i = 0; i < nums.length; i++) {\n    currentMax = Math.max(\n      currentMax + nums[i],\n      nums[i],\n    )\n    max = Math.max(max, currentMax)\n  }\n  return max\n}\n\nconsole.log(maxSubArray([-2,1,-3,4,-1,2,1,-5,4]))`.trim();\nconst plusOne = `\nconst plusOne = (digits = []) => {\n  if (digits.length === 0) {\n    return digits\n  }\n  if (digits[digits.length - 1] < 9) {\n    digits[digits.length - 1] += 1\n    return digits\n  }\n  let index = digits.length - 1\n  let current = 1\n  while (index >= 0) {\n    const sum = current + digits[index]\n    if (sum > 9) {\n      digits[index] = sum - 10\n      current = 1\n      index -= 1\n    } else {\n      digits[index] = sum\n      current = 0\n      index -= 1\n      return digits\n    }\n  }\n  return current === 1 ? [1, ...digits] : digits\n}\n\n\nconsole.log(plusOne([1,2,3]))`.trim();\nconst arrayCounter = `\n  var arrCounter = function(arr){\n  var counter = 0;\n  var maxCount = 0;\n    var inner = function(n){\n      if(!Array.isArray(n)){\n        maxCount = Math.max(maxCount, counter);\n     counter = 0;\n     return\n   }\n   \n   n.forEach(num => {\n   counter ++;\n   inner(num);\n   })\n }\n \n inner(arr);\n console.log(maxCount)\n return maxCount;\n}\n\narrCounter([[3]])\narrCounter([[[[[[[9]]]]]]])\narrCounter([])`.trim();\nconst countElements = `\nvar countElements = function(arr) {\n  const set = new Set()\n  \n  arr.forEach(num => set.add(num))\n  return arr.reduce((acc, num) => {\n      if(set.has(num+1)){\n          return acc + 1\n      }\n      return acc\n  },0)\n};\n\nconsole.log(countElements([1,2,3,0]))`.trim();\nconst find132pattern = `\nconst find132pattern = function (nums) {\n  let max = -Infinity\n  const stack = []\n  for (let i = nums.length - 1; i >= 0; i--) {\n    while (nums[i] > stack[stack.length - 1]) {\n      max = stack.pop()\n    }\n    if (nums[i] < max) {\n      return true\n    }\n    stack.push(nums[i])\n  }\n  return false\n}\n\nconsole.log(find132pattern([3,1,4,2]))`.trim();\nconst numIdenticalPairs = `\nconst numIdenticalPairs = function (nums) {\n  let count = 0\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[i] === nums[j]) {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\nconsole.log(numIdenticalPairs([1,2,3,1,1,3]))`.trim();\nconst removeElement = `\nconst removeElement = function (nums, val) {\n  let left = 0\n  const swap = (a, b) => {\n    const temp = nums[a]\n    nums[a] = nums[b]\n    nums[b] = temp\n  }\n  while (left <= nums.length - 1) {\n    while (nums[nums.length - 1] === val) {\n      nums.pop()\n    }\n    while (nums[left] !== val && left <= nums.length - 1) {\n      left += 1\n    }\n\n    if (left < nums.length - 1) {\n      swap(left, nums.length - 1)\n      left += 1\n      nums.pop()\n    }\n  }\n  return nums.length\n}\n\n\nconsole.log(removeElement([0,1,2,2,3,0,4,2],1))`.trim();\nconst searchRange = `\nconst searchRange = (nums = [], target) => {\n  const binarySearch = (left, right, position = 'middle') => {\n    let pivot = -1\n    while (left <= right) {\n      const middle = Math.floor((left + right) / 2)\n      if (nums[middle] === target) {\n        if (position === 'middle') {\n          pivot = middle\n          break\n        } else if (position === 'left') {\n          pivot = middle\n          right = middle - 1\n        } else if (position === 'right') {\n          pivot = middle\n          left = middle + 1\n        }\n      } else if (nums[middle] < target) {\n        left = middle + 1\n      } else {\n        right = middle - 1\n      }\n    }\n    return pivot\n  }\n\n\n  const pivot = binarySearch(0, nums.length - 1, 'middle')\n  return [\n    binarySearch(0, pivot, 'left'),\n    binarySearch(pivot, nums.length - 1, 'right'),\n  ]\n}\n\nconsole.log(searchRange([5,7,7,8,8,10],6))`.trim();\nconst searchInsert = `\nconst searchInsert = (nums, target) => {\n  const aux = (low, high) => {\n    if (low > high) {\n      return low\n    }\n    const middle = Math.floor((low + high) / 2)\n    if (target === nums[middle]) {\n      return middle\n    } if (target > nums[middle]) {\n      return aux(middle + 1, high)\n    }\n    return aux(low, middle - 1)\n  }\n  return aux(0, nums.length - 1)\n}\n\nconsole.log(searchInsert([1,3,5,6], 5))`.trim();\nconst combinationSum = `\nvar combinationSum = function(candidates, target) {\n  const result = []\n  const aux = (start,current=[], sum = 0) => {\n      if(sum > target) {\n          return \n      }\n      if(sum === target) {\n          result.push(current)\n          return\n      }\n      for(let i = start; i < candidates.length; i++) {\n          aux(i, [...current, candidates[i]], sum+candidates[i])\n      }\n  }\n  for(let i = 0; i <  candidates.length; i++) {\n      aux(i, [candidates[i]], candidates[i])\n  }\n  return result\n};\n\nconsole.log(combinationSum([2,3,5],8))`.trim();\nconst firstMissingPositive = `\nconst firstMissingPositive = (nums = []) => {\n  const swap = (a, b) => {\n    const temp = nums[a]\n    nums[a] = nums[b]\n    nums[b] = temp\n  }\n  let index = 0\n  while (index < nums.length) {\n    if (\n      nums[index] !== nums[nums[index] - 1]\n      && nums[index] > 0\n      && nums[index] <= nums.length\n    ) {\n      swap(index, nums[index] - 1)\n    } else {\n      index += 1\n    }\n  }\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] !== i + 1) {\n      return i + 1\n    }\n  }\n  return nums.length + 1\n}\n\nconsole.log(firstMissingPositive([3,4,-1,1]))`.trim();\nconst addStrings = `\nconst addStrings = (num1, num2) => {\n  const reversedNum1 = num1.split('').reverse()\n  const reversedNum2 = num2.split('').reverse()\n  const { shorter, longer } = reversedNum1.length < reversedNum2.length\n    ? { shorter: reversedNum1, longer: reversedNum2 }\n    : { shorter: reversedNum2, longer: reversedNum1 }\n\n  let rem = 0\n  let result = longer.reduce((acc, digit1, index) => {\n    const total = parseInt(digit1, 10) + (parseInt(shorter[index], 10) || 0) + rem\n    if (total >= 10) {\n      rem = 1\n    } else {\n      rem = 0\n    }\n    return [\n      ...acc,\n      total >= 10 ? total - 10 : total,\n    ]\n  }, [])\n  result = rem === 1 ? [...result, rem] : result\n  return result.reverse().join('')\n}\n\nconst zero = (count) => {\n  let result = ''\n  while (count >= 1) {\n    result += '0'\n    count -= 1\n  }\n  return result\n}\nconst multiply = (num1 = '', num2 = '') => {\n  let result = 0\n  for (let i = num2.length - 1; i >= 0; i--) {\n    let current = ''\n    let base = 0\n    for (let j = num1.length - 1; j >= 0; j--) {\n      let currentResult = parseInt(num1[j], 10) * parseInt(num2[i], 10) + base\n      if (currentResult >= 10) {\n        base = Math.floor(currentResult / 10)\n        currentResult -= base * 10\n      } else {\n        base = 0\n      }\n      current = '$'{currentResult + current}'\n    }\n    if (base > 0) {\n      current = base + current\n    }\n    // 偷懒\n    result = addStrings(result || '0', current + zero(num2.length - 1 - i))\n  }\n  if (result.length > 0 && result[0] === '0') {\n    return '0'\n  }\n  return result\n}\n\n\nconsole.log(addStrings(\"2\",\"3\"))`.trim();\nconst permute = `\nconst permute = (nums = []) => {\n  const result = []\n  const aux = (list = [], current = []) => {\n    if (list.length === 0) {\n      result.push(current)\n    }\n    list.forEach((number, index) => {\n      aux(list.filter((v, index2) => index2 !== index), [...current, number])\n    })\n  }\n  aux(nums)\n  return result\n}\n\n\nconsole.log(permute([1,2,3]))`.trim();\n\nclass DSLogic2 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }, \"3. Convert a string to an array\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: strArray,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }, \"4. Sort\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Sort,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }, \"7. Remove Duplicates\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: duplicates,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541\n      },\n      __self: this\n    }, \"12. Compare Array\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: compare_array,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552\n      },\n      __self: this\n    }, \"13. Recursion Reverse Array\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: recursionReverseArray,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562\n      },\n      __self: this\n    }, \"5. Median of Two Sorted Arrays.\"), \"Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    }), \"Follow up: The overall run time complexity should be O(log (m+n)).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570\n      },\n      __self: this\n    }), \"Input: nums1 = [1,3], nums2 = [2]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }), \"Output: 2.00000\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572\n      },\n      __self: this\n    }), \"Explanation: merged array = [1,2,3] and median is 2.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574\n      },\n      __self: this\n    }), \"Input: nums1 = [1,2], nums2 = [3,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576\n      },\n      __self: this\n    }), \"Output: 2.50000\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    }), \"Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: findMedianSortedArrays,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588\n      },\n      __self: this\n    }, \"4. Maximum Subarray.\"), \"Input: nums = [-2,1,-3,4,-1,2,1,-5,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589\n      },\n      __self: this\n    }), \"Output: 6\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590\n      },\n      __self: this\n    }), \"Explanation: [4,-1,2,1] has the largest sum = 6.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maxSubArray,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601\n      },\n      __self: this\n    }, \"7. Plus One.\"), \"Input: digits = [1,2,3]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602\n      },\n      __self: this\n    }), \"Output: [1,2,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 605\n      },\n      __self: this\n    }), \"Input: digits = [4,3,2,1]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606\n      },\n      __self: this\n    }), \"Output: [4,3,2,2]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: plusOne,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617\n      },\n      __self: this\n    }, \"25. Array Counter\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: arrayCounter,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627\n      },\n      __self: this\n    }, \"4. Counting Elements.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: countElements,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 635\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637\n      },\n      __self: this\n    }, \"5. 132 Pattern.\"), \"Input: nums = [1,2,3,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638\n      },\n      __self: this\n    }), \"Output: false\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639\n      },\n      __self: this\n    }), \"Explanation: There is no 132 pattern in the sequence.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: find132pattern,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 642\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 650\n      },\n      __self: this\n    }, \"6. Number of Good Pairs.\"), \"Input: nums = [1,2,3,1,1,3] \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 651\n      },\n      __self: this\n    }), \"Output: 4 \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652\n      },\n      __self: this\n    }), \"Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: numIdenticalPairs,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663\n      },\n      __self: this\n    }, \"1. Remove Element\"), \"Given an array nums and a value val, remove all instances of that value in-place and return the new length.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665\n      },\n      __self: this\n    }), \"Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667\n      },\n      __self: this\n    }), \"The order of elements can be changed. It doesn't matter what you leave beyond the new length.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670\n      },\n      __self: this\n    }), \"Given nums = [3,2,2,3], val = 3,\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672\n      },\n      __self: this\n    }), \"Your function should return length = 2, with the first two elements of nums being 2.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673\n      },\n      __self: this\n    }), \"It doesn't matter what you leave beyond the returned length.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: removeElement,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684\n      },\n      __self: this\n    }, \"3. Find First and Last Position of Element in Sorted Array\"), \"Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 686\n      },\n      __self: this\n    }), \"Your algorithm's runtime complexity must be in the order of O(log n).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687\n      },\n      __self: this\n    }), \"If the target is not found in the array, return [-1, -1].\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692\n      },\n      __self: this\n    }), \"Input: nums = [5,7,7,8,8,10], target = 8\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 693\n      },\n      __self: this\n    }), \"Output: [3,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 695\n      },\n      __self: this\n    }), \"Input: nums = [5,7,7,8,8,10], target = 6\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 697\n      },\n      __self: this\n    }), \"Output: [-1,-1]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: searchRange,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 706\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 708\n      },\n      __self: this\n    }, \"4. Search Insert Position.\"), \"Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710\n      },\n      __self: this\n    }), \"Input: [1,3,5,6], 5\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711\n      },\n      __self: this\n    }), \"Output: 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 713\n      },\n      __self: this\n    }), \"Input: [1,3,5,6], 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715\n      },\n      __self: this\n    }), \"Output: 1\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 717\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: searchInsert,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 718\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 728\n      },\n      __self: this\n    }, \"6. Combination Sum\"), \"Input: candidates = [2,3,6,7], target = 7,\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 729\n      },\n      __self: this\n    }), \"A solution set is:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 730\n      },\n      __self: this\n    }), \"[\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731\n      },\n      __self: this\n    }), \"[7],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732\n      },\n      __self: this\n    }), \"[2,2,3]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 733\n      },\n      __self: this\n    }), \"]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: combinationSum,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 736\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 742\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 744\n      },\n      __self: this\n    }, \"6. Missing Number\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 745\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: missing_number,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 752\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754\n      },\n      __self: this\n    }, \"7. First Missing Positive\"), \"Input: [3,4,-1,1]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 755\n      },\n      __self: this\n    }), \"Output: 2\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 757\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: firstMissingPositive,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 758\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 764\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 766\n      },\n      __self: this\n    }, \"8. Multiply Strings\"), \"Input: num1 = \\\"2\\\", num2 = \\\"3\\\" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 767\n      },\n      __self: this\n    }), \"Output: \\\"6\\\"\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 769\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: addStrings,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 770\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 776\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 780\n      },\n      __self: this\n    }, \"10. Permutations.\"), \"Given a collection of distinct integers, return all possible permutations.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 782\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: permute,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 783\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(DSLogic2);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic2.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","strArray","trim","Sort","duplicates","compare_array","recursionReverseArray","findMedianSortedArrays","maxSubArray","plusOne","arrayCounter","countElements","find132pattern","numIdenticalPairs","removeElement","searchRange","searchInsert","combinationSum","firstMissingPositive","addStrings","permute","DSLogic2","componentDidMount","setTimeout","highlightAll","render","classes","props","missing_number"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst strArray = `\n    var strArray = \"StackOverflow\".split(\"\");\n    \n    console.log(strArray)\n    console.log(strArray.join(\"\"));\n`.trim();\n\nconst Sort = `\nlet i, j, arr=[0,9,8,7,6];\nvar max=0;\n\nfor(i=0; i<arr.length; i++){\n  for(j=i; j<arr.length; j++){\n    if(arr[i]>arr[j]){\n      var temp=arr[i];\n      arr[i]=arr[j];\n      arr[j]=temp;\n    }\n  }\n}\n\nconsole.log(arr);\n\n\n//Greatest Product Of 3\nmax = arr[arr.length-1] * arr[arr.length-2] * arr[arr.length-3]\nconsole.log(max);\n`.trim()\n\nconst duplicates = `\nvar array = [1,2,3,4,3,0,9,0,1];\nvar result=[];\n\nfor(let i=0; i<array.length;i++){\n    let count=0;\n    for(let j=0;j<result.length;j++){\n        if(array[i]==result[j]){\n            count +=1;\n        }\n    }\n    if(count==0){\n        result.push(array[i]);\n    }  \n}\nconsole.log(result) `.trim()\n\nconst compare_array = `\nfunction compare(){\n  const arr=[1,2,3,4,5,6];\n  const arr2=[5,6,7,8,9,0];\n  const result=[];\n  \n  for(let i=0; i<arr.length; i++){\n    if(arr2.indexOf(arr[i]) !== -1){\n      result.push(arr[i]);\n    }\n  }\n  console.log(result)\n}\n\ncompare();\n\n\n//Unique name\nfunction getUnique(){\n  var names = [\"John\", \"Peter\", \"Clark\", \"Harry\", \"John\", \"Alice\"];\n  var newName = [];\n  \n  for(i=0; i < names.length; i++){\n      if(newName.indexOf(names[i]) === -1) {\n          newName.push(names[i]);\n      }\n  }\n  console.log(newName);\n}\n\ngetUnique();\n`.trim();\n\nconst recursionReverseArray = `\nvar apple = [5,6,7,8,9];\nvar reverse = function(arr){\n var result = [];\n var newArr = [];\n   arr.forEach((item) => newArr.push(item));\n     var inner = function(x){\n     if(x.length > 0){\n       result.push(x.pop())\n       inner(x);\n     }\n   return;\n }\n \n inner(newArr);\n return result;\n}\n\nconsole.log(apple)\nconsole.log(reverse(apple))`.trim()\n\nconst findMedianSortedArrays = `\nconst findMedianSortedArrays = (nums1, nums2) => {\n  const merge = (xs1, xs2) => {\n    if (!xs1 || !xs1.length) {\n      return xs2\n    }\n    if (!xs2 || !xs2.length) {\n      return xs1\n    }\n    const [hd1, ...rest1] = xs1\n    const [hd2, ...rest2] = xs2\n    return hd1 <= hd2 ? [hd1, ...merge(rest1, xs2)] : [hd2, ...merge(xs1, rest2)]\n  }\n  const nums = merge(nums1, nums2)\n  const middle = Math.floor((nums.length-1) / 2)\n\n  return (middle * 2 === (nums.length-1)) ?  nums[middle] : ((nums[middle] + nums[middle + 1]) / 2) \n}\n\n\nconsole.log(findMedianSortedArrays([1,2],[3,4]))`.trim();\n\nconst maxSubArray = `\nconst maxSubArray = function (nums) {\n  let max = -Infinity\n  let currentMax = -Infinity\n  for (let i = 0; i < nums.length; i++) {\n    currentMax = Math.max(\n      currentMax + nums[i],\n      nums[i],\n    )\n    max = Math.max(max, currentMax)\n  }\n  return max\n}\n\nconsole.log(maxSubArray([-2,1,-3,4,-1,2,1,-5,4]))`.trim();\n\nconst plusOne = `\nconst plusOne = (digits = []) => {\n  if (digits.length === 0) {\n    return digits\n  }\n  if (digits[digits.length - 1] < 9) {\n    digits[digits.length - 1] += 1\n    return digits\n  }\n  let index = digits.length - 1\n  let current = 1\n  while (index >= 0) {\n    const sum = current + digits[index]\n    if (sum > 9) {\n      digits[index] = sum - 10\n      current = 1\n      index -= 1\n    } else {\n      digits[index] = sum\n      current = 0\n      index -= 1\n      return digits\n    }\n  }\n  return current === 1 ? [1, ...digits] : digits\n}\n\n\nconsole.log(plusOne([1,2,3]))`.trim();\n\nconst arrayCounter = `\n  var arrCounter = function(arr){\n  var counter = 0;\n  var maxCount = 0;\n    var inner = function(n){\n      if(!Array.isArray(n)){\n        maxCount = Math.max(maxCount, counter);\n     counter = 0;\n     return\n   }\n   \n   n.forEach(num => {\n   counter ++;\n   inner(num);\n   })\n }\n \n inner(arr);\n console.log(maxCount)\n return maxCount;\n}\n\narrCounter([[3]])\narrCounter([[[[[[[9]]]]]]])\narrCounter([])`.trim()\n\nconst countElements = `\nvar countElements = function(arr) {\n  const set = new Set()\n  \n  arr.forEach(num => set.add(num))\n  return arr.reduce((acc, num) => {\n      if(set.has(num+1)){\n          return acc + 1\n      }\n      return acc\n  },0)\n};\n\nconsole.log(countElements([1,2,3,0]))`.trim();\n\nconst find132pattern = `\nconst find132pattern = function (nums) {\n  let max = -Infinity\n  const stack = []\n  for (let i = nums.length - 1; i >= 0; i--) {\n    while (nums[i] > stack[stack.length - 1]) {\n      max = stack.pop()\n    }\n    if (nums[i] < max) {\n      return true\n    }\n    stack.push(nums[i])\n  }\n  return false\n}\n\nconsole.log(find132pattern([3,1,4,2]))`.trim();\n\nconst numIdenticalPairs = `\nconst numIdenticalPairs = function (nums) {\n  let count = 0\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[i] === nums[j]) {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\nconsole.log(numIdenticalPairs([1,2,3,1,1,3]))`.trim();\n\nconst removeElement = `\nconst removeElement = function (nums, val) {\n  let left = 0\n  const swap = (a, b) => {\n    const temp = nums[a]\n    nums[a] = nums[b]\n    nums[b] = temp\n  }\n  while (left <= nums.length - 1) {\n    while (nums[nums.length - 1] === val) {\n      nums.pop()\n    }\n    while (nums[left] !== val && left <= nums.length - 1) {\n      left += 1\n    }\n\n    if (left < nums.length - 1) {\n      swap(left, nums.length - 1)\n      left += 1\n      nums.pop()\n    }\n  }\n  return nums.length\n}\n\n\nconsole.log(removeElement([0,1,2,2,3,0,4,2],1))`.trim();\n\nconst searchRange = `\nconst searchRange = (nums = [], target) => {\n  const binarySearch = (left, right, position = 'middle') => {\n    let pivot = -1\n    while (left <= right) {\n      const middle = Math.floor((left + right) / 2)\n      if (nums[middle] === target) {\n        if (position === 'middle') {\n          pivot = middle\n          break\n        } else if (position === 'left') {\n          pivot = middle\n          right = middle - 1\n        } else if (position === 'right') {\n          pivot = middle\n          left = middle + 1\n        }\n      } else if (nums[middle] < target) {\n        left = middle + 1\n      } else {\n        right = middle - 1\n      }\n    }\n    return pivot\n  }\n\n\n  const pivot = binarySearch(0, nums.length - 1, 'middle')\n  return [\n    binarySearch(0, pivot, 'left'),\n    binarySearch(pivot, nums.length - 1, 'right'),\n  ]\n}\n\nconsole.log(searchRange([5,7,7,8,8,10],6))`.trim();\n\nconst searchInsert = `\nconst searchInsert = (nums, target) => {\n  const aux = (low, high) => {\n    if (low > high) {\n      return low\n    }\n    const middle = Math.floor((low + high) / 2)\n    if (target === nums[middle]) {\n      return middle\n    } if (target > nums[middle]) {\n      return aux(middle + 1, high)\n    }\n    return aux(low, middle - 1)\n  }\n  return aux(0, nums.length - 1)\n}\n\nconsole.log(searchInsert([1,3,5,6], 5))`.trim();\n\n\n\nconst combinationSum = `\nvar combinationSum = function(candidates, target) {\n  const result = []\n  const aux = (start,current=[], sum = 0) => {\n      if(sum > target) {\n          return \n      }\n      if(sum === target) {\n          result.push(current)\n          return\n      }\n      for(let i = start; i < candidates.length; i++) {\n          aux(i, [...current, candidates[i]], sum+candidates[i])\n      }\n  }\n  for(let i = 0; i <  candidates.length; i++) {\n      aux(i, [candidates[i]], candidates[i])\n  }\n  return result\n};\n\nconsole.log(combinationSum([2,3,5],8))`.trim();\n\nconst firstMissingPositive = `\nconst firstMissingPositive = (nums = []) => {\n  const swap = (a, b) => {\n    const temp = nums[a]\n    nums[a] = nums[b]\n    nums[b] = temp\n  }\n  let index = 0\n  while (index < nums.length) {\n    if (\n      nums[index] !== nums[nums[index] - 1]\n      && nums[index] > 0\n      && nums[index] <= nums.length\n    ) {\n      swap(index, nums[index] - 1)\n    } else {\n      index += 1\n    }\n  }\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] !== i + 1) {\n      return i + 1\n    }\n  }\n  return nums.length + 1\n}\n\nconsole.log(firstMissingPositive([3,4,-1,1]))`.trim();\n\nconst addStrings = `\nconst addStrings = (num1, num2) => {\n  const reversedNum1 = num1.split('').reverse()\n  const reversedNum2 = num2.split('').reverse()\n  const { shorter, longer } = reversedNum1.length < reversedNum2.length\n    ? { shorter: reversedNum1, longer: reversedNum2 }\n    : { shorter: reversedNum2, longer: reversedNum1 }\n\n  let rem = 0\n  let result = longer.reduce((acc, digit1, index) => {\n    const total = parseInt(digit1, 10) + (parseInt(shorter[index], 10) || 0) + rem\n    if (total >= 10) {\n      rem = 1\n    } else {\n      rem = 0\n    }\n    return [\n      ...acc,\n      total >= 10 ? total - 10 : total,\n    ]\n  }, [])\n  result = rem === 1 ? [...result, rem] : result\n  return result.reverse().join('')\n}\n\nconst zero = (count) => {\n  let result = ''\n  while (count >= 1) {\n    result += '0'\n    count -= 1\n  }\n  return result\n}\nconst multiply = (num1 = '', num2 = '') => {\n  let result = 0\n  for (let i = num2.length - 1; i >= 0; i--) {\n    let current = ''\n    let base = 0\n    for (let j = num1.length - 1; j >= 0; j--) {\n      let currentResult = parseInt(num1[j], 10) * parseInt(num2[i], 10) + base\n      if (currentResult >= 10) {\n        base = Math.floor(currentResult / 10)\n        currentResult -= base * 10\n      } else {\n        base = 0\n      }\n      current = '$'{currentResult + current}'\n    }\n    if (base > 0) {\n      current = base + current\n    }\n    // 偷懒\n    result = addStrings(result || '0', current + zero(num2.length - 1 - i))\n  }\n  if (result.length > 0 && result[0] === '0') {\n    return '0'\n  }\n  return result\n}\n\n\nconsole.log(addStrings(\"2\",\"3\"))`.trim();\n\n\n\nconst permute = `\nconst permute = (nums = []) => {\n  const result = []\n  const aux = (list = [], current = []) => {\n    if (list.length === 0) {\n      result.push(current)\n    }\n    list.forEach((number, index) => {\n      aux(list.filter((v, index2) => index2 !== index), [...current, number])\n    })\n  }\n  aux(nums)\n  return result\n}\n\n\nconsole.log(permute([1,2,3]))`.trim();\n\n\nclass DSLogic2 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n            <h3>3. Convert a string to an array</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={strArray}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Sort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7. Remove Duplicates</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={duplicates}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>12. Compare Array</h3>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={compare_array}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>13. Recursion Reverse Array</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={recursionReverseArray}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. Median of Two Sorted Arrays.</h3>\n              Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\n              <br/>\nFollow up: The overall run time complexity should be O(log (m+n)).\n<br/>\n \n\nExample 1:\n<br/>\nInput: nums1 = [1,3], nums2 = [2]<br/>\nOutput: 2.00000<br/>\nExplanation: merged array = [1,2,3] and median is 2.<br/><br/>\nExample 2:<br/>\n\nInput: nums1 = [1,2], nums2 = [3,4]<br/>\nOutput: 2.50000<br/>\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n              <div style={titles}>\n                <PrismCode\n                  code={findMedianSortedArrays}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>4. Maximum Subarray.</h3>\n              Input: nums = [-2,1,-3,4,-1,2,1,-5,4]<br/>\nOutput: 6<br/>\nExplanation: [4,-1,2,1] has the largest sum = 6.\n              <div style={titles}>\n                <PrismCode\n                  code={maxSubArray}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>7. Plus One.</h3>\n              Input: digits = [1,2,3]<br/>\nOutput: [1,2,4]<br/>\n<br/><br/>\nExample 2:<br/>\nInput: digits = [4,3,2,1]<br/>\nOutput: [4,3,2,2]\n              <div style={titles}>\n                <PrismCode\n                  code={plusOne}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>25. Array Counter</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={arrayCounter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Counting Elements.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={countElements}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>5. 132 Pattern.</h3>\n              Input: nums = [1,2,3,4]<br/>\nOutput: false<br/>\nExplanation: There is no 132 pattern in the sequence.\n              <div style={titles}>\n                <PrismCode\n                  code={find132pattern}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>6. Number of Good Pairs.</h3>\n              Input: nums = [1,2,3,1,1,3] <br/>\nOutput: 4 <br/>\nExplanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.\n              <div style={titles}>\n                <PrismCode\n                  code={numIdenticalPairs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>1. Remove Element</h3>\n              Given an array nums and a value val, remove all instances of that value in-place and return the new length.\n              <br/>\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n<br/>\nThe order of elements can be changed. It doesn't matter what you leave beyond the new length.\n<br/><br/>\nExample 1:<br/>\n\nGiven nums = [3,2,2,3], val = 3,<br/>\nYour function should return length = 2, with the first two elements of nums being 2.<br/>\nIt doesn't matter what you leave beyond the returned length.\n              <div style={titles}>\n                <PrismCode\n                  code={removeElement}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>3. Find First and Last Position of Element in Sorted Array</h3>\n              Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\n              <br/>\nYour algorithm's runtime complexity must be in the order of O(log n).<br/>\n\nIf the target is not found in the array, return [-1, -1].<br/>\n\nExample 1:\n<br/>\nInput: nums = [5,7,7,8,8,10], target = 8<br/>\nOutput: [3,4]<br/><br/>\nExample 2:<br/>\n\nInput: nums = [5,7,7,8,8,10], target = 6<br/>\nOutput: [-1,-1]\n              <div style={titles}>\n                <PrismCode\n                  code={searchRange}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>4. Search Insert Position.</h3>\n              Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n              <br/>\n              Input: [1,3,5,6], 5<br/>\nOutput: 2<br/><br/>\nExample 2:<br/>\n\nInput: [1,3,5,6], 2<br/>\nOutput: 1\n              <div style={titles}>\n                <PrismCode\n                  code={searchInsert}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n             \n\n              <h3>6. Combination Sum</h3>\n              Input: candidates = [2,3,6,7], target = 7,<br/>\nA solution set is:<br/>\n[<br/>\n  [7],<br/>\n  [2,2,3]<br/>\n]\n              <div style={titles}>\n                <PrismCode\n                  code={combinationSum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>6. Missing Number</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={missing_number}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7. First Missing Positive</h3>\n              Input: [3,4,-1,1]<br/>\nOutput: 2\n              <div style={titles}>\n                <PrismCode\n                  code={firstMissingPositive}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>8. Multiply Strings</h3>\n              Input: num1 = \"2\", num2 = \"3\" <br/>\nOutput: \"6\"\n              <div style={titles}>\n                <PrismCode\n                  code={addStrings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n             \n\n              <h3>10. Permutations.</h3>\n              Given a collection of distinct integers, return all possible permutations.\n              <div style={titles}>\n                <PrismCode\n                  code={permute}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic2));\n"]},"metadata":{},"sourceType":"module"}