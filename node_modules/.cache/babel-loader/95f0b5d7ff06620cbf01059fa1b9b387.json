{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/ml/deepMl/joinImages.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst images = `\nimport cv2\nimport numpy as np\n\nimg = cv2.imread(\"D:\\Python\\Machin_Learning\\openCV\\Resources\\imgs.jpg\")\n\nimgHor = np.hstack((img, img))\n\ncv2.imshow(\"Horizontal\", imgHor)\n\ncv2.waitKey(0)\n`.trim();\nconst images_2 = `import cv2\nimport numpy as np\n\n\ndef stackImages(scale,imgArray):\n    rows = len(imgArray)\n    cols = len(imgArray[0])\n    rowsAvailable = isinstance(imgArray[0], list)\n    width = imgArray[0][0].shape[1]\n    height = imgArray[0][0].shape[0]\n    if rowsAvailable:\n        for x in range ( 0, rows):\n            for y in range(0, cols):\n                if imgArray[x][y].shape[:2] == imgArray[0][0].shape [:2]:\n                    imgArray[x][y] = cv2.resize(imgArray[x][y], (0, 0), None, scale, scale)\n                else:\n                    imgArray[x][y] = cv2.resize(imgArray[x][y], (imgArray[0][0].shape[1], imgArray[0][0].shape[0]), \n                                        None, scale, scale)\n                if len(imgArray[x][y].shape) == 2: imgArray[x][y]= cv2.cvtColor( imgArray[x][y], cv2.COLOR_GRAY2BGR)\n        imageBlank = np.zeros((height, width, 3), np.uint8)\n        hor = [imageBlank]*rows\n        hor_con = [imageBlank]*rows\n        for x in range(0, rows):\n            hor[x] = np.hstack(imgArray[x])\n        ver = np.vstack(hor)\n    else:\n        for x in range(0, rows):\n            if imgArray[x].shape[:2] == imgArray[0].shape[:2]:\n                imgArray[x] = cv2.resize(imgArray[x], (0, 0), None, scale, scale)\n            else:\n                imgArray[x] = cv2.resize(imgArray[x], (imgArray[0].shape[1], imgArray[0].shape[0]), None,scale, scale)\n            if len(imgArray[x].shape) == 2: imgArray[x] = cv2.cvtColor(imgArray[x], cv2.COLOR_GRAY2BGR)\n        hor= np.hstack(imgArray)\n        ver = hor\n    return ver\n\nimg = cv2.imread('D:\\Python\\Machin_Learning\\openCV\\Resources\\imgs.jpg')\nimgGray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n\nimgStack = stackImages(0.5,([img,imgGray,img],[img,img,img]))\n\n\ncv2.imshow(\"ImageStack\",imgStack)\n\ncv2.waitKey(0)\n`.trim();\nconst detection = `\nimport cv2\nimport numpy as np\n\ndef empty(a):\n    pass\n\ndef stackImages(scale,imgArray):\n    rows = len(imgArray)\n    cols = len(imgArray[0])\n    rowsAvailable = isinstance(imgArray[0], list)\n    width = imgArray[0][0].shape[1]\n    height = imgArray[0][0].shape[0]\n    if rowsAvailable:\n        for x in range ( 0, rows):\n            for y in range(0, cols):\n                if imgArray[x][y].shape[:2] == imgArray[0][0].shape [:2]:\n                    imgArray[x][y] = cv2.resize(imgArray[x][y], (0, 0), None, scale, scale)\n                else:\n                    imgArray[x][y] = cv2.resize(imgArray[x][y], (imgArray[0][0].shape[1], imgArray[0][0].shape[0]), \n                                                None, scale, scale)\n                if len(imgArray[x][y].shape) == 2: imgArray[x][y]= cv2.cvtColor( imgArray[x][y], cv2.COLOR_GRAY2BGR)\n        imageBlank = np.zeros((height, width, 3), np.uint8)\n        hor = [imageBlank]*rows\n        hor_con = [imageBlank]*rows\n        for x in range(0, rows):\n            hor[x] = np.hstack(imgArray[x])\n        ver = np.vstack(hor)\n    else:\n        for x in range(0, rows):\n            if imgArray[x].shape[:2] == imgArray[0].shape[:2]:\n                imgArray[x] = cv2.resize(imgArray[x], (0, 0), None, scale, scale)\n            else:\n                imgArray[x] = cv2.resize(imgArray[x], (imgArray[0].shape[1], imgArray[0].shape[0]), None,scale, scale)\n            if len(imgArray[x].shape) == 2: imgArray[x] = cv2.cvtColor(imgArray[x], cv2.COLOR_GRAY2BGR)\n        hor= np.hstack(imgArray)\n        ver = hor\n    return ver\n\n\n\npath = 'D:\\Python\\Machin_Learning\\openCV\\Resources\\imgs.jpg'\ncv2.namedWindow(\"TrackBars\")\ncv2.resizeWindow(\"TrackBars\",640,240)\ncv2.createTrackbar(\"Hue Min\",\"TrackBars\",0,179,empty)\ncv2.createTrackbar(\"Hue Max\",\"TrackBars\",19,179,empty)\ncv2.createTrackbar(\"Sat Min\",\"TrackBars\",110,255,empty)\ncv2.createTrackbar(\"Sat Max\",\"TrackBars\",240,255,empty)\ncv2.createTrackbar(\"Val Min\",\"TrackBars\",153,255,empty)\ncv2.createTrackbar(\"Val Max\",\"TrackBars\",255,255,empty)\n\nwhile True:\n    img = cv2.imread(path)\n    imgHSV = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)\n    h_min = cv2.getTrackbarPos(\"Hue Min\",\"TrackBars\")\n    h_max = cv2.getTrackbarPos(\"Hue Max\", \"TrackBars\")\n    s_min = cv2.getTrackbarPos(\"Sat Min\", \"TrackBars\")\n    s_max = cv2.getTrackbarPos(\"Sat Max\", \"TrackBars\")\n    v_min = cv2.getTrackbarPos(\"Val Min\", \"TrackBars\")\n    v_max = cv2.getTrackbarPos(\"Val Max\", \"TrackBars\")\n    print(h_min,h_max,s_min,s_max,v_min,v_max)\n    lower = np.array([h_min,s_min,v_min])\n    upper = np.array([h_max,s_max,v_max])\n    mask = cv2.inRange(imgHSV,lower,upper)\n    imgResult = cv2.bitwise_and(img,img,mask=mask)\n\n\n    # cv2.imshow(\"Original\",img)\n    # cv2.imshow(\"HSV\",imgHSV)\n    # cv2.imshow(\"Mask\", mask)\n    # cv2.imshow(\"Result\", imgResult)\n\n    imgStack = stackImages(0.6,([img,imgHSV],[mask,imgResult]))\n    cv2.imshow(\"Stacked Images\", imgStack)\n\n    cv2.waitKey(1)\n`.trim();\nconst shape = `\nimport cv2\nimport numpy as np\n\ndef stackImages(scale,imgArray):\n    rows = len(imgArray)\n    cols = len(imgArray[0])\n    rowsAvailable = isinstance(imgArray[0], list)\n    width = imgArray[0][0].shape[1]\n    height = imgArray[0][0].shape[0]\n    if rowsAvailable:\n        for x in range ( 0, rows):\n            for y in range(0, cols):\n                if imgArray[x][y].shape[:2] == imgArray[0][0].shape [:2]:\n                    imgArray[x][y] = cv2.resize(imgArray[x][y], (0, 0), None, scale, scale)\n                else:\n                    imgArray[x][y] = cv2.resize(imgArray[x][y], (imgArray[0][0].shape[1], imgArray[0][0].shape[0]), \n                                     None, scale, scale)\n                if len(imgArray[x][y].shape) == 2: imgArray[x][y]= cv2.cvtColor( imgArray[x][y], cv2.COLOR_GRAY2BGR)\n        imageBlank = np.zeros((height, width, 3), np.uint8)\n        hor = [imageBlank]*rows\n        hor_con = [imageBlank]*rows\n        for x in range(0, rows):\n            hor[x] = np.hstack(imgArray[x])\n        ver = np.vstack(hor)\n    else:\n        for x in range(0, rows):\n            if imgArray[x].shape[:2] == imgArray[0].shape[:2]:\n                imgArray[x] = cv2.resize(imgArray[x], (0, 0), None, scale, scale)\n            else:\n                imgArray[x] = cv2.resize(imgArray[x], (imgArray[0].shape[1], imgArray[0].shape[0]), None,scale, scale)\n            if len(imgArray[x].shape) == 2: imgArray[x] = cv2.cvtColor(imgArray[x], cv2.COLOR_GRAY2BGR)\n        hor= np.hstack(imgArray)\n        ver = hor\n    return ver\n\ndef getContours(img):\n    contours,hierarchy = cv2.findContours(img,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)\n    for cnt in contours:\n        area = cv2.contourArea(cnt)\n        print(area)\n        if area>500:\n            cv2.drawContours(imgContour, cnt, -1, (255, 0, 0), 3)\n            peri = cv2.arcLength(cnt,True)\n            #print(peri)\n            approx = cv2.approxPolyDP(cnt,0.02*peri,True)\n            print(len(approx))\n            objCor = len(approx)\n            x, y, w, h = cv2.boundingRect(approx)\n\n            if objCor ==3: objectType =\"Tri\"\n            elif objCor == 4:\n                aspRatio = w/float(h)\n                if aspRatio >0.98 and aspRatio <1.03: objectType= \"Square\"\n                else:objectType=\"Rectangle\"\n            elif objCor>4: objectType= \"Circles\"\n            else:objectType=\"None\"\n\n\n\n            cv2.rectangle(imgContour,(x,y),(x+w,y+h),(0,255,0),2)\n            cv2.putText(imgContour,objectType,\n                        (x+(w//2)-10,y+(h//2)-10),cv2.FONT_HERSHEY_COMPLEX,0.7,\n                        (0,0,0),2)\n\n\n\n\npath = 'D:\\Python\\Machin_Learning\\openCV\\Resources\\imgs.jpg'\nimg = cv2.imread(path)\nimgContour = img.copy()\n\nimgGray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\nimgBlur = cv2.GaussianBlur(imgGray,(7,7),1)\nimgCanny = cv2.Canny(imgBlur,50,50)\ngetContours(imgCanny)\n\nimgBlank = np.zeros_like(img)\nimgStack = stackImages(0.8,([img,imgGray,imgBlur],\n                            [imgCanny,imgContour,imgBlank]))\n\ncv2.imshow(\"Stack\", imgStack)\n\ncv2.waitKey(0)\nimport cv2\n\nfaceCascade= cv2.CascadeClassifier(\"Resources/haarcascade_frontalface_default.xml\")\nimg = cv2.imread('D:\\Python\\Machin_Learning\\openCV\\Resources\\imgs.jpg')\nimgGray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n\nfaces = faceCascade.detectMultiScale(imgGray,1.1,4)\n\nfor (x,y,w,h) in faces:\n    cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)\n\n\ncv2.imshow(\"Result\", img)\ncv2.waitKey(0)\n`.trim();\n\nclass JoinImages extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, \"Joining images:\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: images,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, \"Joining Multiple Images to Display:\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: images_2,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, \"Color Detection:\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: detection,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, \"Contour/Shape Detection\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: shape,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(JoinImages);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/ml/deepMl/joinImages.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","images","trim","images_2","detection","shape","JoinImages","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,UAAtB,EAAkCC,IAAlC,QAA8C,mBAA9C;AAEA,OAAO,0BAAP;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AAGA,MAAMC,MAAM,GAAG;AAAEC,EAAAA,eAAe,EAAE,SAAnB;AAA8BC,EAAAA,OAAO,EAAE,KAAvC;AAA8CC,EAAAA,QAAQ,EAAE;AAAxD,CAAf;;AAEA,MAAMC,MAAM,GAAGC,KAAK,KAAK;AACrBC,EAAAA,KAAK,EAAE;AACHC,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADL;AAEHN,IAAAA,OAAO,EAAEG,KAAK,CAACG,OAAN,CAAc,CAAd;AAFN,GADc;AAKrBC,EAAAA,QAAQ,EAAE;AACNF,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd;AADF,GALW;AAQrBE,EAAAA,SAAS,EAAE;AACPC,IAAAA,SAAS,EAAE;AADJ;AARU,CAAL,CAApB;;AAcA,MAAMC,MAAM,GAAI;;;;;;;;;;;CAAD,CAWbC,IAXa,EAAf;AAaA,MAAMC,QAAQ,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAD,CA6CfD,IA7Ce,EAAjB;AA+CA,MAAME,SAAS,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAD,CA4EhBF,IA5EgB,EAAlB;AA8EA,MAAMG,KAAK,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAD,CAkGZH,IAlGY,EAAd;;AAqGA,MAAMI,UAAN,SAAyBzB,SAAzB,CAAmC;AAC/B0B,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,UAAU,CAAC,MAAM1B,KAAK,CAAC2B,YAAN,EAAP,EAA6B,CAA7B,CAAV;AACH;;AACDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB;AACA,WACI,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAED,OAAO,CAAChB,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAJ,CADJ,CADJ,CADJ,EAMI,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAEgB,OAAO,CAAChB,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADJ,EAEI;AAAK,MAAA,KAAK,EAAEN,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AACI,MAAA,IAAI,EAAEY,MADV;AAEI,MAAA,QAAQ,EAAC,IAFb;AAGI,MAAA,OAAO,EAAE,CAAC,cAAD,CAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAFJ,EASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,EAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVJ,EAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAXJ,EAYI;AAAK,MAAA,KAAK,EAAEZ,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AACI,MAAA,IAAI,EAAEc,QADV;AAEI,MAAA,QAAQ,EAAC,IAFb;AAGI,MAAA,OAAO,EAAE,CAAC,cAAD,CAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAZJ,EAmBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnBJ,EAoBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApBJ,EAqBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BArBJ,EAsBI;AAAK,MAAA,KAAK,EAAEd,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AACI,MAAA,IAAI,EAAEe,SADV;AAEI,MAAA,QAAQ,EAAC,IAFb;AAGI,MAAA,OAAO,EAAE,CAAC,cAAD,CAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAtBJ,EA6BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7BJ,EA8BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9BJ,EA+BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCA/BJ,EAgCI;AAAK,MAAA,KAAK,EAAEf,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AACI,MAAA,IAAI,EAAEgB,KADV;AAEI,MAAA,QAAQ,EAAC,IAFb;AAGI,MAAA,OAAO,EAAE,CAAC,cAAD,CAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAhCJ,CADJ,CADJ,CANJ,CADJ;AAqDH;;AA3D8B;;AA8DnC,eAAgBpB,UAAU,CAACQ,MAAD,CAAV,CAAmBa,UAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n    paper: {\n        margin: theme.spacing(1),\n        padding: theme.spacing(1)\n    },\n    smMargin: {\n        margin: theme.spacing(1)\n    },\n    actionDiv: {\n        textAlign: \"center\"\n    }\n})\n\n\nconst images = `\nimport cv2\nimport numpy as np\n\nimg = cv2.imread(\"D:\\Python\\Machin_Learning\\openCV\\Resources\\imgs.jpg\")\n\nimgHor = np.hstack((img, img))\n\ncv2.imshow(\"Horizontal\", imgHor)\n\ncv2.waitKey(0)\n`.trim()\n\nconst images_2 = `import cv2\nimport numpy as np\n\n\ndef stackImages(scale,imgArray):\n    rows = len(imgArray)\n    cols = len(imgArray[0])\n    rowsAvailable = isinstance(imgArray[0], list)\n    width = imgArray[0][0].shape[1]\n    height = imgArray[0][0].shape[0]\n    if rowsAvailable:\n        for x in range ( 0, rows):\n            for y in range(0, cols):\n                if imgArray[x][y].shape[:2] == imgArray[0][0].shape [:2]:\n                    imgArray[x][y] = cv2.resize(imgArray[x][y], (0, 0), None, scale, scale)\n                else:\n                    imgArray[x][y] = cv2.resize(imgArray[x][y], (imgArray[0][0].shape[1], imgArray[0][0].shape[0]), \n                                        None, scale, scale)\n                if len(imgArray[x][y].shape) == 2: imgArray[x][y]= cv2.cvtColor( imgArray[x][y], cv2.COLOR_GRAY2BGR)\n        imageBlank = np.zeros((height, width, 3), np.uint8)\n        hor = [imageBlank]*rows\n        hor_con = [imageBlank]*rows\n        for x in range(0, rows):\n            hor[x] = np.hstack(imgArray[x])\n        ver = np.vstack(hor)\n    else:\n        for x in range(0, rows):\n            if imgArray[x].shape[:2] == imgArray[0].shape[:2]:\n                imgArray[x] = cv2.resize(imgArray[x], (0, 0), None, scale, scale)\n            else:\n                imgArray[x] = cv2.resize(imgArray[x], (imgArray[0].shape[1], imgArray[0].shape[0]), None,scale, scale)\n            if len(imgArray[x].shape) == 2: imgArray[x] = cv2.cvtColor(imgArray[x], cv2.COLOR_GRAY2BGR)\n        hor= np.hstack(imgArray)\n        ver = hor\n    return ver\n\nimg = cv2.imread('D:\\Python\\Machin_Learning\\openCV\\Resources\\imgs.jpg')\nimgGray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n\nimgStack = stackImages(0.5,([img,imgGray,img],[img,img,img]))\n\n\ncv2.imshow(\"ImageStack\",imgStack)\n\ncv2.waitKey(0)\n`.trim()\n\nconst detection = `\nimport cv2\nimport numpy as np\n\ndef empty(a):\n    pass\n\ndef stackImages(scale,imgArray):\n    rows = len(imgArray)\n    cols = len(imgArray[0])\n    rowsAvailable = isinstance(imgArray[0], list)\n    width = imgArray[0][0].shape[1]\n    height = imgArray[0][0].shape[0]\n    if rowsAvailable:\n        for x in range ( 0, rows):\n            for y in range(0, cols):\n                if imgArray[x][y].shape[:2] == imgArray[0][0].shape [:2]:\n                    imgArray[x][y] = cv2.resize(imgArray[x][y], (0, 0), None, scale, scale)\n                else:\n                    imgArray[x][y] = cv2.resize(imgArray[x][y], (imgArray[0][0].shape[1], imgArray[0][0].shape[0]), \n                                                None, scale, scale)\n                if len(imgArray[x][y].shape) == 2: imgArray[x][y]= cv2.cvtColor( imgArray[x][y], cv2.COLOR_GRAY2BGR)\n        imageBlank = np.zeros((height, width, 3), np.uint8)\n        hor = [imageBlank]*rows\n        hor_con = [imageBlank]*rows\n        for x in range(0, rows):\n            hor[x] = np.hstack(imgArray[x])\n        ver = np.vstack(hor)\n    else:\n        for x in range(0, rows):\n            if imgArray[x].shape[:2] == imgArray[0].shape[:2]:\n                imgArray[x] = cv2.resize(imgArray[x], (0, 0), None, scale, scale)\n            else:\n                imgArray[x] = cv2.resize(imgArray[x], (imgArray[0].shape[1], imgArray[0].shape[0]), None,scale, scale)\n            if len(imgArray[x].shape) == 2: imgArray[x] = cv2.cvtColor(imgArray[x], cv2.COLOR_GRAY2BGR)\n        hor= np.hstack(imgArray)\n        ver = hor\n    return ver\n\n\n\npath = 'D:\\Python\\Machin_Learning\\openCV\\Resources\\imgs.jpg'\ncv2.namedWindow(\"TrackBars\")\ncv2.resizeWindow(\"TrackBars\",640,240)\ncv2.createTrackbar(\"Hue Min\",\"TrackBars\",0,179,empty)\ncv2.createTrackbar(\"Hue Max\",\"TrackBars\",19,179,empty)\ncv2.createTrackbar(\"Sat Min\",\"TrackBars\",110,255,empty)\ncv2.createTrackbar(\"Sat Max\",\"TrackBars\",240,255,empty)\ncv2.createTrackbar(\"Val Min\",\"TrackBars\",153,255,empty)\ncv2.createTrackbar(\"Val Max\",\"TrackBars\",255,255,empty)\n\nwhile True:\n    img = cv2.imread(path)\n    imgHSV = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)\n    h_min = cv2.getTrackbarPos(\"Hue Min\",\"TrackBars\")\n    h_max = cv2.getTrackbarPos(\"Hue Max\", \"TrackBars\")\n    s_min = cv2.getTrackbarPos(\"Sat Min\", \"TrackBars\")\n    s_max = cv2.getTrackbarPos(\"Sat Max\", \"TrackBars\")\n    v_min = cv2.getTrackbarPos(\"Val Min\", \"TrackBars\")\n    v_max = cv2.getTrackbarPos(\"Val Max\", \"TrackBars\")\n    print(h_min,h_max,s_min,s_max,v_min,v_max)\n    lower = np.array([h_min,s_min,v_min])\n    upper = np.array([h_max,s_max,v_max])\n    mask = cv2.inRange(imgHSV,lower,upper)\n    imgResult = cv2.bitwise_and(img,img,mask=mask)\n\n\n    # cv2.imshow(\"Original\",img)\n    # cv2.imshow(\"HSV\",imgHSV)\n    # cv2.imshow(\"Mask\", mask)\n    # cv2.imshow(\"Result\", imgResult)\n\n    imgStack = stackImages(0.6,([img,imgHSV],[mask,imgResult]))\n    cv2.imshow(\"Stacked Images\", imgStack)\n\n    cv2.waitKey(1)\n`.trim()\n\nconst shape = `\nimport cv2\nimport numpy as np\n\ndef stackImages(scale,imgArray):\n    rows = len(imgArray)\n    cols = len(imgArray[0])\n    rowsAvailable = isinstance(imgArray[0], list)\n    width = imgArray[0][0].shape[1]\n    height = imgArray[0][0].shape[0]\n    if rowsAvailable:\n        for x in range ( 0, rows):\n            for y in range(0, cols):\n                if imgArray[x][y].shape[:2] == imgArray[0][0].shape [:2]:\n                    imgArray[x][y] = cv2.resize(imgArray[x][y], (0, 0), None, scale, scale)\n                else:\n                    imgArray[x][y] = cv2.resize(imgArray[x][y], (imgArray[0][0].shape[1], imgArray[0][0].shape[0]), \n                                     None, scale, scale)\n                if len(imgArray[x][y].shape) == 2: imgArray[x][y]= cv2.cvtColor( imgArray[x][y], cv2.COLOR_GRAY2BGR)\n        imageBlank = np.zeros((height, width, 3), np.uint8)\n        hor = [imageBlank]*rows\n        hor_con = [imageBlank]*rows\n        for x in range(0, rows):\n            hor[x] = np.hstack(imgArray[x])\n        ver = np.vstack(hor)\n    else:\n        for x in range(0, rows):\n            if imgArray[x].shape[:2] == imgArray[0].shape[:2]:\n                imgArray[x] = cv2.resize(imgArray[x], (0, 0), None, scale, scale)\n            else:\n                imgArray[x] = cv2.resize(imgArray[x], (imgArray[0].shape[1], imgArray[0].shape[0]), None,scale, scale)\n            if len(imgArray[x].shape) == 2: imgArray[x] = cv2.cvtColor(imgArray[x], cv2.COLOR_GRAY2BGR)\n        hor= np.hstack(imgArray)\n        ver = hor\n    return ver\n\ndef getContours(img):\n    contours,hierarchy = cv2.findContours(img,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)\n    for cnt in contours:\n        area = cv2.contourArea(cnt)\n        print(area)\n        if area>500:\n            cv2.drawContours(imgContour, cnt, -1, (255, 0, 0), 3)\n            peri = cv2.arcLength(cnt,True)\n            #print(peri)\n            approx = cv2.approxPolyDP(cnt,0.02*peri,True)\n            print(len(approx))\n            objCor = len(approx)\n            x, y, w, h = cv2.boundingRect(approx)\n\n            if objCor ==3: objectType =\"Tri\"\n            elif objCor == 4:\n                aspRatio = w/float(h)\n                if aspRatio >0.98 and aspRatio <1.03: objectType= \"Square\"\n                else:objectType=\"Rectangle\"\n            elif objCor>4: objectType= \"Circles\"\n            else:objectType=\"None\"\n\n\n\n            cv2.rectangle(imgContour,(x,y),(x+w,y+h),(0,255,0),2)\n            cv2.putText(imgContour,objectType,\n                        (x+(w//2)-10,y+(h//2)-10),cv2.FONT_HERSHEY_COMPLEX,0.7,\n                        (0,0,0),2)\n\n\n\n\npath = 'D:\\Python\\Machin_Learning\\openCV\\Resources\\imgs.jpg'\nimg = cv2.imread(path)\nimgContour = img.copy()\n\nimgGray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\nimgBlur = cv2.GaussianBlur(imgGray,(7,7),1)\nimgCanny = cv2.Canny(imgBlur,50,50)\ngetContours(imgCanny)\n\nimgBlank = np.zeros_like(img)\nimgStack = stackImages(0.8,([img,imgGray,imgBlur],\n                            [imgCanny,imgContour,imgBlank]))\n\ncv2.imshow(\"Stack\", imgStack)\n\ncv2.waitKey(0)\nimport cv2\n\nfaceCascade= cv2.CascadeClassifier(\"Resources/haarcascade_frontalface_default.xml\")\nimg = cv2.imread('D:\\Python\\Machin_Learning\\openCV\\Resources\\imgs.jpg')\nimgGray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n\nfaces = faceCascade.detectMultiScale(imgGray,1.1,4)\n\nfor (x,y,w,h) in faces:\n    cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)\n\n\ncv2.imshow(\"Result\", img)\ncv2.waitKey(0)\n`.trim()\n\n\nclass JoinImages extends Component {\n    componentDidMount() {\n        setTimeout(() => Prism.highlightAll(), 0)\n    }\n    render() {\n        const { classes } = this.props;\n        return (\n            <Grid container>\n                <Grid item xs={2}>\n                    <Paper className={classes.paper}>\n                        <h4><Sidebar /></h4>\n                    </Paper>\n                </Grid>\n                <Grid item xs={10}>\n                    <Paper className={classes.paper}>\n                        <List>\n                            <h3>Joining images:</h3>\n                            <div style={titles}>\n                                <PrismCode\n                                    code={images}\n                                    language=\"js\"\n                                    plugins={[\"line-numbers\"]}\n                                />\n                            </div>\n                            <br />\n                            <br />\n                            <h3>Joining Multiple Images to Display:</h3>\n                            <div style={titles}>\n                                <PrismCode\n                                    code={images_2}\n                                    language=\"js\"\n                                    plugins={[\"line-numbers\"]}\n                                />\n                            </div>\n                            <br />\n                            <br />\n                            <h3>Color Detection:</h3>\n                            <div style={titles}>\n                                <PrismCode\n                                    code={detection}\n                                    language=\"js\"\n                                    plugins={[\"line-numbers\"]}\n                                />\n                            </div>\n                            <br />\n                            <br />\n                            <h3>Contour/Shape Detection</h3>\n                            <div style={titles}>\n                                <PrismCode\n                                    code={shape}\n                                    language=\"js\"\n                                    plugins={[\"line-numbers\"]}\n                                />\n                            </div>\n                        </List>\n                    </Paper>\n                </Grid>\n            </Grid>\n        )\n    }\n}\n\nexport default (withStyles(styles)(JoinImages));\n"]},"metadata":{},"sourceType":"module"}