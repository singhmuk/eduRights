{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import\"../../ReactJs/styles.css\";import Sidebar from\"../sidebar\";import PrismCode from\"../../ReactJs/prismCode\";var titles={backgroundColor:\"#F0F8FF\",padding:\"1px\",fontSize:\"16px\"};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var starSig=\"\\nnewLine = \\n\\n\\n// *\\n// **\\n// ***\\nfunction star(){\\n  var start=\\\"\\\";\\n  for(let i=0; i<3; i++){\\n    for(let j=1; j<=(i+1); j++){\\n      start += \\\"*\\\"\\n    }\\n    start +=\\\"newLine\\\";\\n  }\\n  console.log(start);\\n}\\nstar();\\n\\n//   *\\n//  **\\n// ***\\nfunction star(){\\n  let n = 3;\\n  let str = \\\"\\\";\\n  for (let i = 1; i <= n; i++){\\n    for (let j=0; j<(n-i); j++){\\n      str += \\\" \\\";\\n    }\\n    for (let k=0; k<i; k++){\\n      str += \\\"*\\\";\\n    }\\n    str += \\\"newLine\\\";\\n  }\\nconsole.log(str);\\n}\\nstar();\\n\\n// ***\\n// **\\n// *\\nfunction star(){\\n  var start=\\\"\\\";\\n  for(let i=3; i>0; i--){\\n    for(let j=(i+1); j>1; j--){\\n      start += \\\"*\\\"\\n    }\\n    start +=\\\"newLine\\\";\\n  }\\n  console.log(start);\\n}\\nstar();\\n\\n// ***\\n//  **\\n//   *\\nfunction star(){\\n  let n = 3;\\n  let str = \\\"\\\";\\n  for (let i = n; i >= 1; i--){\\n    for (let j=0; j<(n-i); j++){\\n      str += \\\" \\\";\\n    }\\n    for (let k=0; k<i; k++){\\n      str += \\\"*\\\";\\n    }\\n    str += \\\"newLine\\\";\\n  }\\nconsole.log(str);\\n}\\nstar();\\n\".trim();var Pyramid=\" \\n// Upside pyramid.\\nfunction pyraminds() {\\n  let i, j, k, str = \\\"\\\";\\n\\n  for (i=0; i<5; i++) {\\n    for (j=1; j<(5 - i); j++) {\\n      str += \\\" \\\";\\n    }\\n    for (k=1; k<=(2 * i +1); k++) {\\n      str += \\\"*\\\";\\n    }\\n\\n    str += 'newLine';\\n  }\\n  console.log(str)\\n}\\n\\npyraminds();\\n\\n\\n// downside pyramid.\\nfor (i=1; i<5; i++) {\\n  for (j=0; j<i; j++) {\\n    str += \\\" \\\";\\n  }\\n  for (k=(5 - i)*2; k>1; k--) {\\n    str += \\\"*\\\";\\n  }\\n\\n  str += 'newLine';\\n}\\nconsole.log(str)\\n \".trim();var insersonSort=\"\\nconst arr = [3, 5, 1, 9, 6, 2, 1];\\narr.sort();\\nconsole.log(arr);\\n\\n\\n//2\\nTime complexity: O(n^2)\\nSpace complexity: O(n)\\n\\nfunction minCoin() {\\n  const arr = [3, 5, 1, 9, 6, 2, 1, -1];\\n  const result = [];\\n\\n  for (let i = 0; i < arr.length; i++) {\\n    for (let j = i; j < arr.length; j++) {\\n      if (arr[i] > arr[j]) {\\n        let temp = arr[i];\\n        arr[i] = arr[j];\\n        arr[j] = temp;\\n      }\\n    }\\n    result.push(arr[i]);\\n  }\\n  console.log(result);\\n}\\n\\nminCoin();\\n\".trim();var mergSort=\"\\nfunction mergeSort(arr){\\n    if(arr.length < 2) return arr;\\n    var middle = Math.floor(arr.length/2);\\n    var left = arr.slice(0, middle);\\n    var right = arr.slice(middle, arr.length);\\n    return merge(mergeSort(left), mergeSort(right));\\n }\\n \\n function merge(left, right){\\n  var result = [];\\n    while(left.length && right.length){\\n      if(left[0] == right[0]){\\n        result.push(left.shift());\\n      }\\n  else{\\n    result.push(right.shift());}\\n  }\\n  \\n  while(left.length) result.push(left.shift());\\n  while(right.length) result.push(right.shift());\\n  console.log(result)\\n  return result;\\n }\\n mergeSort([3,2,1])\".trim();var quicksort=\"\\nfunction QuickSort(arr){\\n    if(arr.length <= 1) return arr;\\n        var pivot = arr[arr.length -1];\\n        var left = [];\\n        var right = [];\\n        for(var i=0;i<arr.length-1;i++){\\n        if(arr[i] < pivot){\\n        left.push(arr[i])\\n      }\\n    else right.push(arr[i])\\n    }\\n    return [...QuickSort(left), pivot, ...QuickSort(right)]\\n }\\n console.log(QuickSort([5,4,2,7,9]))\\n \".trim();var selectionSort=\"function selectionSort(arr){\\n  var minIdx, temp,\\n  len = arr.length;\\n    for(var i = 0; i < len; i++){\\n    minIdx = i;\\n      for(var j = i+1; j<len; j++){\\n        if(arr[j]<arr[minIdx]){\\n        minIdx = j;\\n      }\\n    }\\n    \\n    temp = arr[i];\\n    arr[i] = arr[minIdx];\\n    arr[minIdx] = temp;\\n   }\\n \\n console.log(arr)\\n return arr;\\n }\\n \\n selectionSort([7,5,2,4,3,9]);\".trim();var Permutations=\"\\nTime complexity:\\tO(n^3)\\nSpace complexity:\\tO(n^2)\\n\\nfunction arm(str){\\n  let currentChar = [];\\n  let remaingChar = [];\\n  let result = [];\\n\\n  if(str.length === 0) return \\\"\\\";\\n  if(str.length === 1) return str;\\n\\n  for(let i=0; i<str.length; i++){\\n    currentChar = str[i];\\n    remaingChar = str.slice(0,i) + str.slice(i+1);\\n    for(let j=0; j<remaingChar.length; j++){\\n      result.push(currentChar + arm(remaingChar)[j]);\\n    }\\n  }\\n  return result;\\n}\\n\\nconsole.log(arm('abc'));\\n  \".trim();var Pattern=\"\\nlet i,j, str=\\\"\\\";                                                                    //Square pattern.\\nfor(i=1; i<=5; i++){\\n  for(j=0; j<5; j++){\\n    str += \\\"*\\\";\\n  }\\n  str += \\\"newLine\\\";\\n}\\n\\nconsole.log(str);\\n\\n\\nlet i, j, str = \\\"\\\";                                                               //Right pascal star pattern.\\nfor (i=1; i<=5; i++) {\\n  for (j=0; j<i; j++) {\\n    str += \\\"*\\\";\\n  }\\n  str += \\\"newLine\\\";\\n}\\n\\nfor (i=1; i<=(5-1); i++) {\\n  for (j=0; j<(5-i); j++) {\\n    str += \\\"*\\\";\\n  }\\n  str += \\\"newLine\\\";\\n}\\n\\nconsole.log(str);\\n\".trim();var amount=\"\\nTime complexity: O(ks)\\nSpace complexity:\\tO(s)\\n\\nfunction minCoin(amount, coins) {\\n  let count = 0;\\n  for (let i = 0; i < coins.length; i++) {\\n    while (coins[i] <= amount) {\\n      amount -= coins[i];\\n      count++;\\n    }\\n  }\\n  return console.log(count);\\n}\\n\\nminCoin(87, [25, 10, 5, 1]);\".trim();var armstrong=\"\\n  function arm() {\\n    const num = prompt('Enter a three-digit positive integer: ');\\n    let sum=0,  remainder=0;\\n    let temp=num;\\n  \\n    while(temp>0){\\n      remainder = temp%10;\\n      sum += remainder*remainder*remainder;\\n      temp = parseInt(temp/10)\\n    }\\n  \\n    if(sum == num){\\n      console.log('Armstrong', num);\\n    }\\n    else{\\n      console.log('Not an Armstrong', num);\\n    }\\n  }\\n  \\n  arm()\".trim();var satisfy=\"\\nfunction isEven(num) {\\n  return num % 2 === 0;\\n}\\n\\nfunction isPrime(num) {\\n  if (num < 2) {\\n    return false;\\n  }\\n  for (let i = 2; i <= Math.sqrt(num); i++) {\\n    if (num % i === 0) {\\n      return false;\\n    }\\n  }\\n  return true;\\n}\\n\\n// Function to loop through an array and check if n elements satisfy the condition function\\nfunction some(array, n, isCheck) {\\n  let count = 0;\\n  for (let i = 0; i < array.length; i++) {\\n    if (isCheck(array[i])) {\\n      count++;\\n    }\\n    if (count === n) {\\n      return true;\\n    }\\n  }\\n  return false;\\n}\\n\\nconsole.log(some([2, 4, 6], 3, isEven)); // true\\nconsole.log(some([2, 3, 4], 3, isEven)); // false\\nconsole.log(some([2, 3, 11], 4, isPrime)); // false\\nconsole.log(some([2, 3, 5, 9], 3, isPrime)); // true\".trim();var generates=\"\\nfunction fibbo() {\\n  let a = 0;\\n  let b = 1;\\n\\n  return function() {\\n    const result = a;\\n    const next = a + b;\\n    a = b;\\n    b = next;\\n    return result;\\n  };\\n}\\n\\nlet obj = fibbo();\\nconsole.log(obj()); // 0\\nconsole.log(obj()); // 1\\nconsole.log(obj()); // 1\\nconsole.log(obj()); // 2\\nconsole.log(obj()); // 3\\nconsole.log(obj()); // 5\\nconsole.log(obj()); // 8\\n\".trim();var Logic=/*#__PURE__*/function(_Component){_inherits(Logic,_Component);function Logic(){_classCallCheck(this,Logic);return _possibleConstructorReturn(this,_getPrototypeOf(Logic).apply(this,arguments));}_createClass(Logic,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Star\"),React.createElement(\"b\",null,\"Time Complexity: \"),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"The inner loop runs 1 time for the first iteration of the outer loop, 2 times for the second iteration, and 3 times for the third iteration.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"The number of iterations in the inner loop is 1 + 2 + 3 = 6.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"Therefore, the total number of iterations in the nested loops is 3 (outer loop) * 6 (inner loop) = 18.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"The function would be O(n^2) if the inner for loop iterated n+1 times, and the outer for loop iterated n times. In this case, the total number of iterations would be n * (n+1) = n^2 + n. This is also a quadratic time complexity.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"So, the function is similar to O(n^2), but it is not strictly O(n^2). The difference is that the function's runtime is dependent on the constant 3, instead of the input size n. However, for most practical purposes, the difference is negligible.\"),React.createElement(\"br\",null)),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Space Complexity: \"),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"The number of characters stored in the start variable is equal to the number of stars and newlines produced by the nested loops.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"For each iteration of the inner loop, we add one star character to the start variable.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"For each iteration of the outer loop, we add a newline character to the start variable.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"Therefore, the space complexity is directly proportional to the number of stars and newlines produced, which is 3 lines with 1, 2, and 3 stars, respectively. So the space complexity of the star() function can be considered as O(1) or constant space complexity.\"),React.createElement(\"br\",null)),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:starSig,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Pyramind\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Pyramid,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Pattern\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Pattern,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. Armstrong Number\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"The time complexity of the arm() function is O(n), where n is the number of digits in the input number. This is because the while loop iterates n times, and each iteration takes constant time.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"The space complexity of the arm() function is O(1), because it only uses a constant amount of memory to store the variables num, sum, remainder, and temp.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"In simple words, the arm() function takes a linear amount of time to run, and it uses a constant amount of space.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"The time complexity is O(n) because the while loop iterates n times. This is the worst-case scenario, where the input number is a three-digit number with all the digits equal to 9.\"),React.createElement(\"br\",null)),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:armstrong,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. Permutations\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"The time complexity of the arm() function is O(n^3), where n is the length of the input string. This is because the for loop iterates n times, and the arm() function is called recursively n times. The recursive call of the arm() function takes O(n^2) time, so the total time complexity is O(n^3).\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"The space complexity of the arm() function is O(n^2), because the result array can contain up to n^2 elements.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"In simple words, the arm() function takes a cubic amount of time to run, and it uses a quadratic amount of space.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"The space complexity is O(n^2) because the result array can contain up to n^2 elements. However, the actual space complexity is likely to be lower, because the result array will only contain unique strings.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"The function could be made more efficient by using a memoization technique to store the results of the recursive calls. This would reduce the time complexity to O(n^2).\"),React.createElement(\"br\",null)),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Permutations,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"6. Given an amount of money, return the minimum number of coins needed to make that change.\"),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"The time complexity of the minCoin() function is O(ks), where k is the amount of money and s is the number of coins. This is because the while loop iterates at most k times, and each iteration takes constant time.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"The space complexity of the minCoin() function is O(s), because it only uses a constant amount of memory to store the variables amount, coins, and count.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"In simple words, the minCoin() function takes a linear amount of time to run, and it uses a constant amount of space.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:amount,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"7. Sort an Array\"),React.createElement(\"b\",null,\"1: \"),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"The time complexity of the arr.sort() method in JavaScript is O(n log n), where n is the length of the array. This is because the arr.sort() method uses the Timsort algorithm, which is a hybrid of merge sort and insertion sort. Merge sort has a time complexity of O(n log n), and insertion sort has a time complexity of O(n^2). The Timsort algorithm uses merge sort for large arrays, and insertion sort for small arrays.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"The space complexity of the arr.sort() method is O(n), where n is the length of the array. This is because the arr.sort() method sorts the array in place, which means that it does not create a new array.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"In simple words, the arr.sort() method takes a logarithmic amount of time to run, and it uses a linear amount of space.\"),React.createElement(\"br\",null)),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"2: \"),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"The time complexity of the minCoin() function is O(n^2), where n is the length of the array. This is because the for loop iterates n times, and the inner for loop iterates n times. The total number of iterations is therefore n * n = n^2.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"The space complexity of the minCoin() function is O(n), because it only uses a linear amount of memory to store the variables arr, result, temp, and i, and j.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"In simple words, the minCoin() function takes a quadratic amount of time to run, and it uses a linear amount of space.\"),React.createElement(\"br\",null)),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:insersonSort,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"8. Merg Sort\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:mergSort,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"9. Quick Sort\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:quicksort,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"10. Selection Sort\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:selectionSort,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"11. Write a function which loops through an array and checks if n of the elements of the array satisfy the condition function that is passed\"),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"i\",null,\"Write the some function and isEven and isPrime functions\"),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"console.log(some([2,4,6], 3, isEven)) // should print true\"),React.createElement(\"li\",null,\"console.log(some([2,3,4], 3, isEven)) // should print false\"),React.createElement(\"li\",null,\"console.log(some([2,3,11], 4, isPrime)) // should print false\"),React.createElement(\"li\",null,\"console.log(some([2,3,5,9], 3, isPrime)) // should print true\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:satisfy,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"12. Write a function whch returns a function that generates fibonacci numbers. Don't use generators.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:generates,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return Logic;}(Component);export default withStyles(styles)(Logic);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/javaScripts/deepJs/logic.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","starSig","trim","Pyramid","insersonSort","mergSort","quicksort","selectionSort","Permutations","Pattern","amount","armstrong","satisfy","generates","Logic","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst starSig = `\nnewLine = \\n\n\n// *\n// **\n// ***\nfunction star(){\n  var start=\"\";\n  for(let i=0; i<3; i++){\n    for(let j=1; j<=(i+1); j++){\n      start += \"*\"\n    }\n    start +=\"newLine\";\n  }\n  console.log(start);\n}\nstar();\n\n//   *\n//  **\n// ***\nfunction star(){\n  let n = 3;\n  let str = \"\";\n  for (let i = 1; i <= n; i++){\n    for (let j=0; j<(n-i); j++){\n      str += \" \";\n    }\n    for (let k=0; k<i; k++){\n      str += \"*\";\n    }\n    str += \"newLine\";\n  }\nconsole.log(str);\n}\nstar();\n\n// ***\n// **\n// *\nfunction star(){\n  var start=\"\";\n  for(let i=3; i>0; i--){\n    for(let j=(i+1); j>1; j--){\n      start += \"*\"\n    }\n    start +=\"newLine\";\n  }\n  console.log(start);\n}\nstar();\n\n// ***\n//  **\n//   *\nfunction star(){\n  let n = 3;\n  let str = \"\";\n  for (let i = n; i >= 1; i--){\n    for (let j=0; j<(n-i); j++){\n      str += \" \";\n    }\n    for (let k=0; k<i; k++){\n      str += \"*\";\n    }\n    str += \"newLine\";\n  }\nconsole.log(str);\n}\nstar();\n`.trim();\n\nconst Pyramid = ` \n// Upside pyramid.\nfunction pyraminds() {\n  let i, j, k, str = \"\";\n\n  for (i=0; i<5; i++) {\n    for (j=1; j<(5 - i); j++) {\n      str += \" \";\n    }\n    for (k=1; k<=(2 * i +1); k++) {\n      str += \"*\";\n    }\n\n    str += 'newLine';\n  }\n  console.log(str)\n}\n\npyraminds();\n\n\n// downside pyramid.\nfor (i=1; i<5; i++) {\n  for (j=0; j<i; j++) {\n    str += \" \";\n  }\n  for (k=(5 - i)*2; k>1; k--) {\n    str += \"*\";\n  }\n\n  str += 'newLine';\n}\nconsole.log(str)\n `.trim();\n\nconst insersonSort = `\nconst arr = [3, 5, 1, 9, 6, 2, 1];\narr.sort();\nconsole.log(arr);\n\n\n//2\nTime complexity: O(n^2)\nSpace complexity: O(n)\n\nfunction minCoin() {\n  const arr = [3, 5, 1, 9, 6, 2, 1, -1];\n  const result = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n      }\n    }\n    result.push(arr[i]);\n  }\n  console.log(result);\n}\n\nminCoin();\n`.trim();\n\nconst mergSort = `\nfunction mergeSort(arr){\n    if(arr.length < 2) return arr;\n    var middle = Math.floor(arr.length/2);\n    var left = arr.slice(0, middle);\n    var right = arr.slice(middle, arr.length);\n    return merge(mergeSort(left), mergeSort(right));\n }\n \n function merge(left, right){\n  var result = [];\n    while(left.length && right.length){\n      if(left[0] == right[0]){\n        result.push(left.shift());\n      }\n  else{\n    result.push(right.shift());}\n  }\n  \n  while(left.length) result.push(left.shift());\n  while(right.length) result.push(right.shift());\n  console.log(result)\n  return result;\n }\n mergeSort([3,2,1])`.trim();\n\nconst quicksort = `\nfunction QuickSort(arr){\n    if(arr.length <= 1) return arr;\n        var pivot = arr[arr.length -1];\n        var left = [];\n        var right = [];\n        for(var i=0;i<arr.length-1;i++){\n        if(arr[i] < pivot){\n        left.push(arr[i])\n      }\n    else right.push(arr[i])\n    }\n    return [...QuickSort(left), pivot, ...QuickSort(right)]\n }\n console.log(QuickSort([5,4,2,7,9]))\n `.trim();\n\nconst selectionSort = `function selectionSort(arr){\n  var minIdx, temp,\n  len = arr.length;\n    for(var i = 0; i < len; i++){\n    minIdx = i;\n      for(var j = i+1; j<len; j++){\n        if(arr[j]<arr[minIdx]){\n        minIdx = j;\n      }\n    }\n    \n    temp = arr[i];\n    arr[i] = arr[minIdx];\n    arr[minIdx] = temp;\n   }\n \n console.log(arr)\n return arr;\n }\n \n selectionSort([7,5,2,4,3,9]);`.trim();\n\nconst Permutations = `\nTime complexity:\tO(n^3)\nSpace complexity:\tO(n^2)\n\nfunction arm(str){\n  let currentChar = [];\n  let remaingChar = [];\n  let result = [];\n\n  if(str.length === 0) return \"\";\n  if(str.length === 1) return str;\n\n  for(let i=0; i<str.length; i++){\n    currentChar = str[i];\n    remaingChar = str.slice(0,i) + str.slice(i+1);\n    for(let j=0; j<remaingChar.length; j++){\n      result.push(currentChar + arm(remaingChar)[j]);\n    }\n  }\n  return result;\n}\n\nconsole.log(arm('abc'));\n  `.trim();\n\nconst Pattern = `\nlet i,j, str=\"\";                                                                    //Square pattern.\nfor(i=1; i<=5; i++){\n  for(j=0; j<5; j++){\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nconsole.log(str);\n\n\nlet i, j, str = \"\";                                                               //Right pascal star pattern.\nfor (i=1; i<=5; i++) {\n  for (j=0; j<i; j++) {\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nfor (i=1; i<=(5-1); i++) {\n  for (j=0; j<(5-i); j++) {\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nconsole.log(str);\n`.trim();\n\nconst amount = `\nTime complexity: O(ks)\nSpace complexity:\tO(s)\n\nfunction minCoin(amount, coins) {\n  let count = 0;\n  for (let i = 0; i < coins.length; i++) {\n    while (coins[i] <= amount) {\n      amount -= coins[i];\n      count++;\n    }\n  }\n  return console.log(count);\n}\n\nminCoin(87, [25, 10, 5, 1]);`.trim();\n\nconst armstrong = `\n  function arm() {\n    const num = prompt('Enter a three-digit positive integer: ');\n    let sum=0,  remainder=0;\n    let temp=num;\n  \n    while(temp>0){\n      remainder = temp%10;\n      sum += remainder*remainder*remainder;\n      temp = parseInt(temp/10)\n    }\n  \n    if(sum == num){\n      console.log('Armstrong', num);\n    }\n    else{\n      console.log('Not an Armstrong', num);\n    }\n  }\n  \n  arm()`.trim(); \n\nconst satisfy = `\nfunction isEven(num) {\n  return num % 2 === 0;\n}\n\nfunction isPrime(num) {\n  if (num < 2) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Function to loop through an array and check if n elements satisfy the condition function\nfunction some(array, n, isCheck) {\n  let count = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (isCheck(array[i])) {\n      count++;\n    }\n    if (count === n) {\n      return true;\n    }\n  }\n  return false;\n}\n\nconsole.log(some([2, 4, 6], 3, isEven)); // true\nconsole.log(some([2, 3, 4], 3, isEven)); // false\nconsole.log(some([2, 3, 11], 4, isPrime)); // false\nconsole.log(some([2, 3, 5, 9], 3, isPrime)); // true`.trim();\n\nconst generates = `\nfunction fibbo() {\n  let a = 0;\n  let b = 1;\n\n  return function() {\n    const result = a;\n    const next = a + b;\n    a = b;\n    b = next;\n    return result;\n  };\n}\n\nlet obj = fibbo();\nconsole.log(obj()); // 0\nconsole.log(obj()); // 1\nconsole.log(obj()); // 1\nconsole.log(obj()); // 2\nconsole.log(obj()); // 3\nconsole.log(obj()); // 5\nconsole.log(obj()); // 8\n`.trim();\n\nclass Logic extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Star</h3>\n              <b>Time Complexity: </b><br/>\n              <ul>\n                <li>The inner loop runs 1 time for the first iteration of the outer loop, 2 times for the second iteration, and 3 times for the third iteration.</li><br/>\n                <li>The number of iterations in the inner loop is 1 + 2 + 3 = 6.</li><br/>\n                <li>Therefore, the total number of iterations in the nested loops is 3 (outer loop) * 6 (inner loop) = 18.</li><br/>\n                <li>The function would be O(n^2) if the inner for loop iterated n+1 times, and the outer for loop iterated n times. In this case, the total number of iterations would be n * (n+1) = n^2 + n. This is also a quadratic time complexity.</li><br/>\n                <li>So, the function is similar to O(n^2), but it is not strictly O(n^2). The difference is that the function's runtime is dependent on the constant 3, instead of the input size n. However, for most practical purposes, the difference is negligible.</li><br/>\n              </ul>\n              <br/>\n              <b>Space Complexity: </b><br/>\n              <ul>\n                <li>The number of characters stored in the start variable is equal to the number of stars and newlines produced by the nested loops.</li><br/>\n                <li>For each iteration of the inner loop, we add one star character to the start variable.</li><br/>\n                <li>For each iteration of the outer loop, we add a newline character to the start variable.</li><br/>\n                <li>Therefore, the space complexity is directly proportional to the number of stars and newlines produced, which is 3 lines with 1, 2, and 3 stars, respectively. So the space complexity of the star() function can be considered as O(1) or constant space complexity.</li><br/>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={starSig}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>2. Pyramind</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Pyramid}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>3. Pattern</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Pattern}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>4. Armstrong Number</h3>\n              <ul>\n                <li>The time complexity of the arm() function is O(n), where n is the number of digits in the input number. This is because the while loop iterates n times, and each iteration takes constant time.</li><br/>\n                <li>The space complexity of the arm() function is O(1), because it only uses a constant amount of memory to store the variables num, sum, remainder, and temp.</li><br/>\n                <li>In simple words, the arm() function takes a linear amount of time to run, and it uses a constant amount of space.</li><br/>\n                <li>The time complexity is O(n) because the while loop iterates n times. This is the worst-case scenario, where the input number is a three-digit number with all the digits equal to 9.</li><br/>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={armstrong}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>5. Permutations</h3>\n              <ul>\n                <li>The time complexity of the arm() function is O(n^3), where n is the length of the input string. This is because the for loop iterates n times, and the arm() function is called recursively n times. The recursive call of the arm() function takes O(n^2) time, so the total time complexity is O(n^3).</li><br/>\n                <li>The space complexity of the arm() function is O(n^2), because the result array can contain up to n^2 elements.</li><br/>\n                <li>In simple words, the arm() function takes a cubic amount of time to run, and it uses a quadratic amount of space.</li><br/>\n                <li>The space complexity is O(n^2) because the result array can contain up to n^2 elements. However, the actual space complexity is likely to be lower, because the result array will only contain unique strings.</li><br/>\n                <li>The function could be made more efficient by using a memoization technique to store the results of the recursive calls. This would reduce the time complexity to O(n^2).</li><br/>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={Permutations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>\n                6. Given an amount of money, return the minimum number of coins\n                needed to make that change.\n              </b><br/>\n              <ul>\n                <li>The time complexity of the minCoin() function is O(ks), where k is the amount of money and s is the number of coins. This is because the while loop iterates at most k times, and each iteration takes constant time.</li><br/>\n                <li>The space complexity of the minCoin() function is O(s), because it only uses a constant amount of memory to store the variables amount, coins, and count.\n\n</li><br/>\n                <li>In simple words, the minCoin() function takes a linear amount of time to run, and it uses a constant amount of space.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={amount}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>7. Sort an Array</h3>\n              <b>1: </b><br/>\n              <ul>\n                <li>The time complexity of the arr.sort() method in JavaScript is O(n log n), where n is the length of the array. This is because the arr.sort() method uses the Timsort algorithm, which is a hybrid of merge sort and insertion sort. Merge sort has a time complexity of O(n log n), and insertion sort has a time complexity of O(n^2). The Timsort algorithm uses merge sort for large arrays, and insertion sort for small arrays.</li><br/>\n                <li>The space complexity of the arr.sort() method is O(n), where n is the length of the array. This is because the arr.sort() method sorts the array in place, which means that it does not create a new array.</li><br/>\n                <li>In simple words, the arr.sort() method takes a logarithmic amount of time to run, and it uses a linear amount of space.</li><br/>\n              </ul>\n              <br/>\n              <br/>\n              <b>2: </b>\n              <br/>\n              <ul>\n                <li>The time complexity of the minCoin() function is O(n^2), where n is the length of the array. This is because the for loop iterates n times, and the inner for loop iterates n times. The total number of iterations is therefore n * n = n^2.</li><br/>\n                <li>The space complexity of the minCoin() function is O(n), because it only uses a linear amount of memory to store the variables arr, result, temp, and i, and j.</li><br/>\n                <li>In simple words, the minCoin() function takes a quadratic amount of time to run, and it uses a linear amount of space.</li><br/>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={insersonSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>8. Merg Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={mergSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>9. Quick Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={quicksort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>10. Selection Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={selectionSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br/>\n\n              <b>11. Write a function which loops through an array and checks if n of the elements\n                of the array satisfy the condition function that is passed</b>\n                <br/>\n                <br/>\n                <i>Write the some function and isEven and isPrime functions</i>\n                <br/>\n                <br/>\n                <ul>\n                  <li>console.log(some([2,4,6], 3, isEven)) // should print true</li>\n                  <li>console.log(some([2,3,4], 3, isEven)) // should print false</li>\n                  <li>console.log(some([2,3,11], 4, isPrime)) // should print false</li>\n                  <li>console.log(some([2,3,5,9], 3, isPrime)) // should print true</li>\n                </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={satisfy}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>12. Write a function whch returns a function that generates fibonacci numbers.\nDon't use generators.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={generates}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(Logic);\n"]},"metadata":{},"sourceType":"module"}