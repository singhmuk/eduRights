{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var inputs=\"\\nconst App = () => {\\n  const usersData = [\\n      { id: 1, name: \\\"AAA\\\", username: \\\"aiueo\\\" },\\n      { id: 2, name: \\\"BBB\\\", username: \\\"kakikukeko\\\" },\\n      { id: 3, name: \\\"CCC\\\", username: \\\"sasisuseso\\\" }\\n    ];\\n  const [users, setUsers] = useState(usersData);\\n\\n  const initialFormState={id:'',name:'',username:''};\\n  const [user,setUser]=useState(initialFormState);\\n\\n  const handleInputChange=(e)=>{\\n      const {name,value}=e.target;\\n      setUser({...user,[name]:value})        \\n  };\\n\\n  const addUser = user => {\\n      user.id = users.length + 1;\\n      setUsers([...users, user]);\\n    };\\n\\n  return(\\n      <div>\\n      <form \\n       onSubmit={e=>{\\n          e.preventDefault();\\n          addUser(user);\\n          setUser(initialFormState);\\n       }}>\\n          <label>Name</label>\\n              <input type=\\\"text\\\" name=\\\"name\\\" value={user.name} onChange={handleInputChange} />\\n              <label>Username</label>\\n              <input type=\\\"text\\\" name=\\\"username\\\" value={user.username} onChange={handleInputChange} />\\n              <button>Add new user</button>\\n       </form>\\n       {users.map(items=>(\\n          <li>{items.name}-{items.username}</li>\\n       ))}\\n       </div> \\n  )\\n}\\n\\nexport default App;\\n\".trim();var curd2=\"const url = 'https://jsonplaceholder.typicode.com/posts';\\n\\nclass App extends Component{\\n    state = {\\n      posts: []\\n    };\\n\\n   async componentDidMount(){\\n      const { data: posts } = await axios.get(url)\\n      this.setState({posts})\\n    }\\n\\n    handleAdd = async () => {\\n      const obj = {title:'title', body: 'body'}\\n      const {data: post} = await axios.post(url, obj)\\n      const posts = [post, ...this.state.posts]\\n      this.setState({posts})\\n    }\\n\\n    handleUpdate = async post => {\\n      post.title = \\\"update\\\"\\n      await axios.put('$'{ url }/'$'{post.id}', post)\\n\\nconst posts = [...this.state.posts]\\nconst index = posts.indexOf(post)\\nposts[index] = { ...post }\\nthis.setState({ posts })\\n    }\\n\\nhandleDelete = async post => {\\n  await axios.delete('$'{url}/'$'{post.id}')\\n\\n  const posts = this.state.posts.filter(p => p.id !== post.id)\\n  this.setState({ posts })\\n}\\n\\nrender(){\\n  return (\\n    <div>\\n      <button onClick={this.handleAdd}>Add</button>\\n      <ul>\\n        <li>Title</li>\\n        <li>Update</li>\\n        <li>Delete</li>\\n      </ul>\\n      {this.state.posts.map(post => (\\n        <li>\\n          {post.title}\\n          <button onClick={() => this.handleUpdate(post)}>Update</button>\\n          <button onClick={() => this.handleDelete(post)}>Delete</button>\\n        </li>\\n      ))}\\n    </div>\\n  )\\n}\\n}\".trim();var states=\"\\n//components/myContext.js\\nimport React from 'react';\\n\\nconst MyContext = React.createContext();\\n\\nexport default MyContext;\\n\\n\\n//components/compA.js\\nimport Comp2 from './compB';\\n\\nconst Comp = () => {\\n  return(\\n    <div>\\n      <Comp2 />\\n    </div>\\n  )\\n}\\n\\nexport default Comp;\\n\\n\\n//components/compB.js\\nimport MyContext from './myContext';\\n\\nconst Comp2 = () => {\\n    return(\\n    <MyContext.Consumer>\\n      {(data)=>(\\n        <li>{data.name}</li>\\n      )}\\n    </MyContext.Consumer>\\n    )\\n  }\\n\\nexport default Comp2;\\n\\n\\n//App.js\\nimport React, { useState } from 'react';\\nimport MyContext from './components/myContext';\\nimport CompA from './components/compA';\\n\\nconst App = () => {\\n  const [ name ] = useState('Mukesh')\\n  \\n    return(\\n      <div>\\n        <MyContext.Provider\\n          value={{name:name}}>\\n          <CompA />\\n        </MyContext.Provider>\\n      </div>\\n    )\\n  }\\n\\nexport default App;\\n\".trim();var expensAction=\"\\n//forms/AddUserForm.js\\nconst AddUserForm = props => {\\n  const initialFormState = { id: null, name: \\\"\\\", username: \\\"\\\" };\\n  const [user, setUser] = useState(initialFormState);\\n\\n  const handleInputChange = e => {\\n    const { name, value } = e.target;\\n    setUser({ ...user, [name]: value });\\n  };\\n\\n  return (\\n    <form\\n      onSubmit={e => {\\n        e.preventDefault();\\n        if (!user.name || !user.username) return;\\n        props.addUser(user);\\n        setUser(initialFormState);\\n      }}\\n    >\\n      <label>Name</label>\\n      <input type=\\\"text\\\" name=\\\"name\\\" value={user.name} onChange={handleInputChange} />\\n      <label>Username</label>\\n      <input type=\\\"text\\\" name=\\\"username\\\" value={user.username} onChange={handleInputChange} />\\n      <button>Add new user</button>\\n    </form>\\n  );\\n};\\n\\n\\n//forms/EditUserForm.js\\nconst EditUserForm = props => {\\n  const [user, setUser] = useState(props.currentUser);\\n\\n  useEffect(() => { setUser(props.currentUser) },\\n    [props]\\n  );\\n\\n  const handleInputChange = e => {\\n    const { name, value } = e.target;\\n    setUser({ ...user, [name]: value });\\n  };\\n\\n  return (\\n    <form onSubmit={e => { e.preventDefault(); props.updateUser(user.id, user) }} >\\n      <label>Name</label>\\n      <input type=\\\"text\\\" name=\\\"name\\\" value={user.name} onChange={handleInputChange} />\\n      <label>Username</label>\\n      <input type=\\\"text\\\" name=\\\"username\\\" value={user.username} onChange={handleInputChange} />\\n      <button>Update user</button>\\n      <button onClick={() => props.setEditing(false)}>Cancel</button>\\n    </form>\\n  );\\n};\\n\\n\\n//tables/UserTable.js\\nconst UserTable = props => (\\n  <table>\\n    <thead>\\n      <tr>\\n        <th>Name</th>\\n        <th>Username</th>\\n        <th>Actions</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      {props.users.length > 0 ? (\\n        props.users.map(user => (\\n          <tr key={user.id}>\\n            <td>{user.name}</td>\\n            <td>{user.username}</td>\\n            <td>\\n              <button onClick={() => props.editRow(user)}>Edit</button>\\n              <button onClick={() => props.deleteUser(user.id)}>Delete</button>\\n            </td>\\n          </tr>\\n        ))\\n      ) : (\\n        <tr>\\n          <td colSpan={3}>No users</td>\\n        </tr>\\n      )}\\n    </tbody>\\n  </table>\\n);\\n\\n\\n//App.js\\nimport UserTable from \\\"./tables/UserTable\\\";\\nimport AddUserForm from \\\"./forms/AddUserForm\\\";\\nimport EditUserForm from \\\"./forms/EditUserForm\\\";\\n\\nconst App = () => {\\n  const usersData = [\\n    { id: 1, name: \\\"AAA\\\", username: \\\"aiueo\\\" },\\n    { id: 2, name: \\\"BBB\\\", username: \\\"kakikukeko\\\" },\\n    { id: 3, name: \\\"CCC\\\", username: \\\"sasisuseso\\\" }\\n  ];\\n\\n  const [users, setUsers] = useState(usersData);\\n\\n  const addUser = user => {\\n    user.id = users.length + 1;\\n    setUsers([...users, user]);\\n  };\\n\\n  const deleteUser = id => {\\n    setUsers(users.filter(user => user.id !== id));\\n  };\\n\\n  const [editing, setEditing] = useState(false);\\n  const initialFormState = { id: null, name: \\\"\\\", username: \\\"\\\" };\\n  const [currentUser, setCurrentUser] = useState(initialFormState);\\n\\n  const editRow = user => {\\n    setEditing(true);\\n    setCurrentUser({ id: user.id, name: user.name, username: user.username });\\n  };\\n\\n  const updateUser = (id, updateUser) => {\\n    setEditing(false);\\n    setUsers(users.map(user => (user.id === id ? updateUser : user)));\\n  };\\n\\n  return (\\n    <div className=\\\"container\\\">\\n      <h1>CRUD App with Hooks</h1>\\n      <div className=\\\"flex-row\\\">\\n        <div className=\\\"flex-large\\\">\\n          {editing ? (\\n            <div>\\n              <h2>Eidt User</h2>\\n              <EditUserForm\\n                editing={editing}\\n                setEditing={setEditing}\\n                currentUser={currentUser}\\n                updateUser={updateUser}\\n              />\\n            </div>\\n          ) : (\\n            <div>\\n              <h2>Add User</h2>\\n              <AddUserForm addUser={addUser} />\\n            </div>\\n          )}\\n        </div>\\n        <div className=\\\"flex-large\\\">\\n          <h2>View users</h2>\\n          <UserTable users={users} deleteUser={deleteUser} editRow={editRow} />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n};\".trim();var curd=\"\\nclass App extends Component {\\n  state = {\\n    mockData: [],\\n    text: \\\"\\\",\\n    id: Math.random(1,100),\\n    editItem: false\\n  };\\n  \\n  handleChange = e => {\\n    this.setState({text: e.target.value});\\n  };\\n  \\n  handleAdd = e => {\\n    e.preventDefault();\\n    if (this.state.text.length === 0) return;\\n\\n    const newItem = {\\n      id: this.state.id,\\n      title: this.state.text\\n    };\\n    \\n    const updatedItems = [...this.state.mockData].concat(newItem);\\n\\n    this.setState({\\n      mockData: updatedItems,\\n      text: \\\"\\\",\\n      id: Math.random(1,100),\\n      editItem: false\\n    });\\n  };\\n  \\n  clearList = () => {\\n    this.setState({ mockData: [] });\\n    };\\n    \\n  handleDelete = (id) => {\\n      this.setState({ mockData: this.state.mockData.filter(item => item.id !== id) });\\n    };\\n    \\n  handleEdit = id => {\\n    const filteredItems = this.state.mockData.filter(item => item.id !== id);\\n    const selectedItem = this.state.mockData.find(item => item.id === id);\\n\\n    this.setState({\\n      mockData: filteredItems,\\n      text: selectedItem.title,\\n      editItem: true,\\n      id: id\\n    });\\n  };\\n  \\n  render() {\\n    return (\\n      <div>\\n         <form onSubmit={this.handleAdd}>\\n          <div>\\n            <input type=\\\"text\\\" value={this.state.text} onChange={this.handleChange} />\\n          </div>\\n          <button>{this.state.editItem ? \\\"edit item\\\" : \\\"add item\\\"}</button>\\n        </form>\\n            \\n        <ul>\\n        {this.state.mockData.map(item => {\\n          return (\\n            <div>\\n              <h1>{item.title}</h1>\\n            \\n              <button onClick={() => this.handleEdit(item.id)}>edit</button>\\n              <button onClick={() => this.handleDelete(item.id)}>delete</button>\\n            </div>\\n          );\\n        })}\\n\\n        <button onClick={this.clearList}>clear list</button>\\n        </ul>\\n      </div>\\n    );\\n  }\\n}\".trim();var ContextMeth=/*#__PURE__*/function(_Component){_inherits(ContextMeth,_Component);function ContextMeth(){_classCallCheck(this,ContextMeth);return _possibleConstructorReturn(this,_getPrototypeOf(ContextMeth).apply(this,arguments));}_createClass(ContextMeth,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Input\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:inputs,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Curd\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:curd2,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. ReactCurd JsonPlaceholder\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:expensAction,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. Curd\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:curd,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. Context API State\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:states,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return ContextMeth;}(Component);export default withStyles(styles)(ContextMeth);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/contextMethods.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","inputs","trim","curd2","states","expensAction","curd","ContextMeth","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,0BAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CAGA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,eAAe,CAAE,SAAnB,CAA8BC,OAAO,CAAE,KAAvC,CAA8CC,QAAQ,CAAE,MAAxD,CAAf,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,KAAK,CAAE,CACLC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH,CAELN,OAAO,CAAEG,KAAK,CAACG,OAAN,CAAc,CAAd,CAFJ,CADgB,CAKvBC,QAAQ,CAAE,CACRF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA,CALa,CAQvBE,SAAS,CAAE,CACTC,SAAS,CAAE,QADF,CARY,CAAL,EAApB,CAaA,GAAMC,CAAAA,MAAM,CAAG,mvCA4CbC,IA5Ca,EAAf,CA8CA,GAAMC,CAAAA,KAAK,CAAG,i2CAuDXD,IAvDW,EAAd,CAyDA,GAAME,CAAAA,MAAM,CAAG,o7BA0DbF,IA1Da,EAAf,CA6DA,GAAMG,CAAAA,YAAY,CAAG,msIA0JjBH,IA1JiB,EAArB,CA6JA,GAAMI,CAAAA,IAAI,CAAG,k5DA+EVJ,IA/EU,EAAb,C,GAkFMK,CAAAA,W,+SACgB,CAClBC,UAAU,CAAC,iBAAM1B,CAAAA,KAAK,CAAC2B,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAACf,KAA1B,EACE,8BAAI,oBAAC,OAAD,MAAJ,CADF,CADF,CADF,CAME,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEe,OAAO,CAACf,KAA1B,EACE,oBAAC,IAAD,MACA,yCADA,CAEE,2BAAK,KAAK,CAAEN,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEY,MADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAFF,CASE,8BATF,CAWE,wCAXF,CAYE,2BAAK,KAAK,CAAEZ,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEc,KADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAZF,CAmBE,8BAnBF,CAqBE,6DArBF,CAsBE,2BAAK,KAAK,CAAEd,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEgB,YADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAtBF,CA6BE,8BA7BF,CA+BE,wCA/BF,CAgCE,2BAAK,KAAK,CAAEhB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEiB,IADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAhCF,CAuCE,8BAvCF,CAyCE,qDAzCF,CA0CE,2BAAK,KAAK,CAAEjB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEe,MADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CA1CF,CADF,CADF,CANF,CADF,CA+DD,C,yBArEuBvB,S,EAwE1B,cAAgBI,CAAAA,UAAU,CAACQ,MAAD,CAAV,CAAmBc,WAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst inputs = `\nconst App = () => {\n  const usersData = [\n      { id: 1, name: \"AAA\", username: \"aiueo\" },\n      { id: 2, name: \"BBB\", username: \"kakikukeko\" },\n      { id: 3, name: \"CCC\", username: \"sasisuseso\" }\n    ];\n  const [users, setUsers] = useState(usersData);\n\n  const initialFormState={id:'',name:'',username:''};\n  const [user,setUser]=useState(initialFormState);\n\n  const handleInputChange=(e)=>{\n      const {name,value}=e.target;\n      setUser({...user,[name]:value})        \n  };\n\n  const addUser = user => {\n      user.id = users.length + 1;\n      setUsers([...users, user]);\n    };\n\n  return(\n      <div>\n      <form \n       onSubmit={e=>{\n          e.preventDefault();\n          addUser(user);\n          setUser(initialFormState);\n       }}>\n          <label>Name</label>\n              <input type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange} />\n              <label>Username</label>\n              <input type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\n              <button>Add new user</button>\n       </form>\n       {users.map(items=>(\n          <li>{items.name}-{items.username}</li>\n       ))}\n       </div> \n  )\n}\n\nexport default App;\n`.trim();\n\nconst curd2 = `const url = 'https://jsonplaceholder.typicode.com/posts';\n\nclass App extends Component{\n    state = {\n      posts: []\n    };\n\n   async componentDidMount(){\n      const { data: posts } = await axios.get(url)\n      this.setState({posts})\n    }\n\n    handleAdd = async () => {\n      const obj = {title:'title', body: 'body'}\n      const {data: post} = await axios.post(url, obj)\n      const posts = [post, ...this.state.posts]\n      this.setState({posts})\n    }\n\n    handleUpdate = async post => {\n      post.title = \"update\"\n      await axios.put('$'{ url }/'$'{post.id}', post)\n\nconst posts = [...this.state.posts]\nconst index = posts.indexOf(post)\nposts[index] = { ...post }\nthis.setState({ posts })\n    }\n\nhandleDelete = async post => {\n  await axios.delete('$'{url}/'$'{post.id}')\n\n  const posts = this.state.posts.filter(p => p.id !== post.id)\n  this.setState({ posts })\n}\n\nrender(){\n  return (\n    <div>\n      <button onClick={this.handleAdd}>Add</button>\n      <ul>\n        <li>Title</li>\n        <li>Update</li>\n        <li>Delete</li>\n      </ul>\n      {this.state.posts.map(post => (\n        <li>\n          {post.title}\n          <button onClick={() => this.handleUpdate(post)}>Update</button>\n          <button onClick={() => this.handleDelete(post)}>Delete</button>\n        </li>\n      ))}\n    </div>\n  )\n}\n}`.trim();\n\nconst states = `\n//components/myContext.js\nimport React from 'react';\n\nconst MyContext = React.createContext();\n\nexport default MyContext;\n\n\n//components/compA.js\nimport Comp2 from './compB';\n\nconst Comp = () => {\n  return(\n    <div>\n      <Comp2 />\n    </div>\n  )\n}\n\nexport default Comp;\n\n\n//components/compB.js\nimport MyContext from './myContext';\n\nconst Comp2 = () => {\n    return(\n    <MyContext.Consumer>\n      {(data)=>(\n        <li>{data.name}</li>\n      )}\n    </MyContext.Consumer>\n    )\n  }\n\nexport default Comp2;\n\n\n//App.js\nimport React, { useState } from 'react';\nimport MyContext from './components/myContext';\nimport CompA from './components/compA';\n\nconst App = () => {\n  const [ name ] = useState('Mukesh')\n  \n    return(\n      <div>\n        <MyContext.Provider\n          value={{name:name}}>\n          <CompA />\n        </MyContext.Provider>\n      </div>\n    )\n  }\n\nexport default App;\n`.trim();\n\n\nconst expensAction = `\n//forms/AddUserForm.js\nconst AddUserForm = props => {\n  const initialFormState = { id: null, name: \"\", username: \"\" };\n  const [user, setUser] = useState(initialFormState);\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setUser({ ...user, [name]: value });\n  };\n\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault();\n        if (!user.name || !user.username) return;\n        props.addUser(user);\n        setUser(initialFormState);\n      }}\n    >\n      <label>Name</label>\n      <input type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange} />\n      <label>Username</label>\n      <input type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\n      <button>Add new user</button>\n    </form>\n  );\n};\n\n\n//forms/EditUserForm.js\nconst EditUserForm = props => {\n  const [user, setUser] = useState(props.currentUser);\n\n  useEffect(() => { setUser(props.currentUser) },\n    [props]\n  );\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setUser({ ...user, [name]: value });\n  };\n\n  return (\n    <form onSubmit={e => { e.preventDefault(); props.updateUser(user.id, user) }} >\n      <label>Name</label>\n      <input type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange} />\n      <label>Username</label>\n      <input type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\n      <button>Update user</button>\n      <button onClick={() => props.setEditing(false)}>Cancel</button>\n    </form>\n  );\n};\n\n\n//tables/UserTable.js\nconst UserTable = props => (\n  <table>\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Username</th>\n        <th>Actions</th>\n      </tr>\n    </thead>\n    <tbody>\n      {props.users.length > 0 ? (\n        props.users.map(user => (\n          <tr key={user.id}>\n            <td>{user.name}</td>\n            <td>{user.username}</td>\n            <td>\n              <button onClick={() => props.editRow(user)}>Edit</button>\n              <button onClick={() => props.deleteUser(user.id)}>Delete</button>\n            </td>\n          </tr>\n        ))\n      ) : (\n        <tr>\n          <td colSpan={3}>No users</td>\n        </tr>\n      )}\n    </tbody>\n  </table>\n);\n\n\n//App.js\nimport UserTable from \"./tables/UserTable\";\nimport AddUserForm from \"./forms/AddUserForm\";\nimport EditUserForm from \"./forms/EditUserForm\";\n\nconst App = () => {\n  const usersData = [\n    { id: 1, name: \"AAA\", username: \"aiueo\" },\n    { id: 2, name: \"BBB\", username: \"kakikukeko\" },\n    { id: 3, name: \"CCC\", username: \"sasisuseso\" }\n  ];\n\n  const [users, setUsers] = useState(usersData);\n\n  const addUser = user => {\n    user.id = users.length + 1;\n    setUsers([...users, user]);\n  };\n\n  const deleteUser = id => {\n    setUsers(users.filter(user => user.id !== id));\n  };\n\n  const [editing, setEditing] = useState(false);\n  const initialFormState = { id: null, name: \"\", username: \"\" };\n  const [currentUser, setCurrentUser] = useState(initialFormState);\n\n  const editRow = user => {\n    setEditing(true);\n    setCurrentUser({ id: user.id, name: user.name, username: user.username });\n  };\n\n  const updateUser = (id, updateUser) => {\n    setEditing(false);\n    setUsers(users.map(user => (user.id === id ? updateUser : user)));\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>CRUD App with Hooks</h1>\n      <div className=\"flex-row\">\n        <div className=\"flex-large\">\n          {editing ? (\n            <div>\n              <h2>Eidt User</h2>\n              <EditUserForm\n                editing={editing}\n                setEditing={setEditing}\n                currentUser={currentUser}\n                updateUser={updateUser}\n              />\n            </div>\n          ) : (\n            <div>\n              <h2>Add User</h2>\n              <AddUserForm addUser={addUser} />\n            </div>\n          )}\n        </div>\n        <div className=\"flex-large\">\n          <h2>View users</h2>\n          <UserTable users={users} deleteUser={deleteUser} editRow={editRow} />\n        </div>\n      </div>\n    </div>\n  );\n};`.trim();\n\n\nconst curd = `\nclass App extends Component {\n  state = {\n    mockData: [],\n    text: \"\",\n    id: Math.random(1,100),\n    editItem: false\n  };\n  \n  handleChange = e => {\n    this.setState({text: e.target.value});\n  };\n  \n  handleAdd = e => {\n    e.preventDefault();\n    if (this.state.text.length === 0) return;\n\n    const newItem = {\n      id: this.state.id,\n      title: this.state.text\n    };\n    \n    const updatedItems = [...this.state.mockData].concat(newItem);\n\n    this.setState({\n      mockData: updatedItems,\n      text: \"\",\n      id: Math.random(1,100),\n      editItem: false\n    });\n  };\n  \n  clearList = () => {\n    this.setState({ mockData: [] });\n    };\n    \n  handleDelete = (id) => {\n      this.setState({ mockData: this.state.mockData.filter(item => item.id !== id) });\n    };\n    \n  handleEdit = id => {\n    const filteredItems = this.state.mockData.filter(item => item.id !== id);\n    const selectedItem = this.state.mockData.find(item => item.id === id);\n\n    this.setState({\n      mockData: filteredItems,\n      text: selectedItem.title,\n      editItem: true,\n      id: id\n    });\n  };\n  \n  render() {\n    return (\n      <div>\n         <form onSubmit={this.handleAdd}>\n          <div>\n            <input type=\"text\" value={this.state.text} onChange={this.handleChange} />\n          </div>\n          <button>{this.state.editItem ? \"edit item\" : \"add item\"}</button>\n        </form>\n            \n        <ul>\n        {this.state.mockData.map(item => {\n          return (\n            <div>\n              <h1>{item.title}</h1>\n            \n              <button onClick={() => this.handleEdit(item.id)}>edit</button>\n              <button onClick={() => this.handleDelete(item.id)}>delete</button>\n            </div>\n          );\n        })}\n\n        <button onClick={this.clearList}>clear list</button>\n        </ul>\n      </div>\n    );\n  }\n}`.trim();\n\n\nclass ContextMeth extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n            <h3>1. Input</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={inputs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Curd</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={curd2}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. ReactCurd JsonPlaceholder</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={expensAction}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Curd</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={curd}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. Context API State</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={states}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(ContextMeth));\n"]},"metadata":{},"sourceType":"module"}