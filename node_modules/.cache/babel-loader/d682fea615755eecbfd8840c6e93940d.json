{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/css/enzymes.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../ReactJs/styles.css';\nimport Sidebar from './sidebar';\nimport PrismCode from '../ReactJs/prismCode';\nimport Browser from '../../assets/css1.PNG';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst shallow = `\nimport React from \"react\";\nimport { shallow } from \"enzyme\";\n\nconst Foo = (props) => <div>\n  <button onClick={() => props.onButtonClick && props.onButtonClick()}></button>\n</div>;\n\nconst MyComponent = props => (\n  <div>\n    <Foo />\n    <Foo />\n    <Foo />\n    <div className=\"icon-star\"></div>\n    {props.children}\n  </div>\n);\n\ndescribe(\"<MyComponent />\", () => {\n  it(\"renders three <Foo /> components\", () => {\n    const wrapper = shallow(<MyComponent />);\n    expect(wrapper.find(Foo)).toHaveLength(3);\n    expect(wrapper).toMatchInlineSnapshot('\n      <div>\n        <Foo />\n        <Foo />\n        <Foo />\n        <div\n          className=\"icon-star\"\n        />\n      </div>\n    ');\n  });\n\n  it(\"renders an '.icon-star'\", () => {\n    const wrapper = shallow(<MyComponent />);\n    expect(wrapper.find(\".icon-star\")).toHaveLength(1);\n  });\n\n  it(\"renders children when passed in\", () => {\n    const wrapper = shallow(\n      <MyComponent>\n        <div className=\"unique\" />\n      </MyComponent>\n    );\n    expect(wrapper.contains(<div className=\"unique\" />)).toEqual(true);\n    expect(wrapper).toMatchInlineSnapshot('\n      <div>\n        <Foo />\n        <Foo />\n        <Foo />\n        <div\n          className=\"icon-star\"\n        />\n        <div\n          className=\"unique\"\n        />\n      </div>\n    ');\n  });\n\n  it(\"simulates click events\", () => {\n    const onButtonClick = jest.fn();\n    const wrapper = shallow(<Foo onButtonClick={onButtonClick} />);\n    wrapper.find(\"button\").simulate(\"click\");\n    expect(onButtonClick).toHaveBeenCalledTimes(1);\n  });\n});\n`.trim();\nconst shallow2 = `\nimport React, { Suspense, Component } from \"react\";\nimport { shallow } from \"enzyme\";\nimport PropTypes from \"prop-types\";\n\nconst ThemeContext = React.createContext({ theme: \"light\" });\n\nclass ThemeComponent extends Component {\n  render() {\n    return (\n      <ThemeContext.Provider value={{ theme: \"dark\" }}>\n        {this.props.children}\n      </ThemeContext.Provider>\n    );\n  }\n}\n\nclass CustomComponent extends Component {\n  state = {\n    authenticated: false\n  };\n\n  componentDidMount() {\n    this.setState({ authenticated: true });\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"theme\">\n          <ThemeContext.Consumer>\n            {value => String(value.theme)}\n          </ThemeContext.Consumer>\n        </div>\n        <div id=\"user\">{this.state.authenticated ? \"User\" : \"Guest\"}</div>\n      </div>\n    );\n  }\n}\n\ndescribe(\"options\", () => {\n  test(\"context\", () => {\n    function SimpleComponent(props, context) {\n      const { name } = context;\n      return <div>{name}</div>;\n    }\n\n    SimpleComponent.contextTypes = {\n      name: PropTypes.string\n    };\n\n    const context = { name: \"foo\" };\n    const wrapper = shallow(<SimpleComponent />, { context });\n    expect(wrapper.text()).toEqual(\"foo\");\n  });\n\n  test(\"disableLifecycleMethods\", () => {\n    const wrapper = shallow(<CustomComponent></CustomComponent>, {\n      disableLifecycleMethods: true\n    });\n\n    expect(wrapper.find(\"#user\").text()).toBe(\"Guest\");\n  });\n\n  test(\"wrappingComponent\", () => {\n    const wrapper = shallow(<CustomComponent></CustomComponent>, {\n      wrappingComponent: ThemeComponent\n    });\n\n    expect(wrapper.getWrappingComponent().html()).toMatchInlineSnapshot(\n      '\"<div><div id=\\\\\"theme\\\\\">dark</div><div id=\\\\\"user\\\\\">Guest</div></div>\"'\n    );\n  });\n\n  test(\"suspenseFallback\", () => {\n    const LazyComponent = React.lazy(() => import(\"../../LazyComponent\"));\n\n    const wrapper = shallow(\n      <Suspense fallback={<div>Loading...</div>}>\n        <LazyComponent />\n      </Suspense>,\n      { suspenseFallback: true }\n    );\n\n    expect(wrapper).toMatchInlineSnapshot('\n      <div>\n        Loading...\n      </div>\n    ');\n  });\n});\n`.trim();\nconst fullDom = `\nimport { mount } from \"enzyme\";\nimport React from \"react\";\n\nconst Foo = props => (\n  <div>\n    <button onClick={() => props.onButtonClick && props.onButtonClick()} />\n  </div>\n);\n\nconst MyComponent = props => (\n  <div>\n    <Foo />\n    <Foo />\n    <Foo />\n    <div className=\"icon-star\"></div>\n    {props.children}\n  </div>\n);\n\ndescribe(\"<MyComponent />\", () => {\n  it(\"renders three <Foo /> components\", () => {\n    const wrapper = mount(<MyComponent />);\n    expect(wrapper.find(Foo)).toHaveLength(3);\n  });\n\n  it(\"renders an '.icon-star'\", () => {\n    const wrapper = mount(<MyComponent />);\n    expect(wrapper.find(\".icon-star\")).toHaveLength(1);\n  });\n\n  it(\"renders children when passed in\", () => {\n    const wrapper = mount(\n      <MyComponent>\n        <div className=\"unique\" />\n      </MyComponent>\n    );\n    expect(wrapper.contains(<div className=\"unique\" />)).toEqual(true);\n\n    expect(wrapper).toMatchInlineSnapshot('\n      <MyComponent>\n        <div>\n          <Foo>\n            <div>\n              <button\n                onClick={[Function]}\n              />\n            </div>\n          </Foo>\n          <Foo>\n            <div>\n              <button\n                onClick={[Function]}\n              />\n            </div>\n          </Foo>\n          <Foo>\n            <div>\n              <button\n                onClick={[Function]}\n              />\n            </div>\n          </Foo>\n          <div\n            className=\"icon-star\"\n          />\n          <div\n            className=\"unique\"\n          />\n        </div>\n      </MyComponent>\n    );\n  });\n\n  it(\"simulates click events\", () => {\n    const onButtonClick = jest.fn();\n    const wrapper = mount(<Foo onButtonClick={onButtonClick} />);\n    wrapper.find(\"button\").simulate(\"click\");\n    expect(onButtonClick).toHaveBeenCalledTimes(1);\n  });\n});\n`.trim();\nconst fullDom2 = `\nimport React, { Component } from \"react\";\nimport { mount } from \"enzyme\";\nimport PropTypes from \"prop-types\";\n\nconst ThemeContext = React.createContext({ theme: \"light\" });\n\nclass ThemeComponent extends Component {\n  render() {\n    return (\n      <ThemeContext.Provider value={{ theme: this.props.theme || \"dark\" }}>\n        {this.props.children}\n      </ThemeContext.Provider>\n    );\n  }\n}\n\nclass CustomComponent extends Component {\n  state = {\n    authenticated: false\n  };\n\n  componentDidMount() {\n    this.setState({ authenticated: true });\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"theme\">\n          <ThemeContext.Consumer>\n            {value => String(value.theme)}\n          </ThemeContext.Consumer>\n        </div>\n        <div id=\"user\">{this.state.authenticated ? \"User\" : \"Guest\"}</div>\n      </div>\n    );\n  }\n}\n\ndescribe(\"options\", () => {\n  test(\"context\", () => {\n    function SimpleComponent(props, context) {\n      const { name } = context;\n      return <div>{name}</div>;\n    }\n\n    SimpleComponent.contextTypes = {\n      name: PropTypes.string\n    };\n\n    const context = { name: \"foo\" };\n    const wrapper = mount(<SimpleComponent />, { context });\n    expect(wrapper.text()).toEqual(\"foo\");\n  });\n\n  test(\"wrappingComponent\", () => {\n    const wrapper = mount(<CustomComponent></CustomComponent>, {\n      wrappingComponent: ThemeComponent,\n      wrappingComponentProps: { theme: \"custom\" }\n    });\n\n    expect(wrapper.getWrappingComponent().html()).toMatchInlineSnapshot(\n      '\"<div><div id=\\\\\"theme\\\\\">custom</div><div id=\\\\\"user\\\\\">User</div></div>\"'\n    );\n  });\n\n  test(\"attachTo\", () => {\n    document.body.innerHTML = '<div id=\"attach-here\"></div><div id=\"not-here\"></div>';\n    const attachHere = document.getElementById(\"attach-here\");\n\n    mount(<CustomComponent></CustomComponent>, {\n      attachTo: attachHere\n    });\n\n    expect(document.body.innerHTML).toMatchInlineSnapshot(\n      '\"<div id=\\\\\"attach-here\\\\\"><div><div id=\\\\\"theme\\\\\">light</div><div id=\\\\\"user\\\\\">User</div></div></div><div id=\\\\\"not-here\\\\\"></div>\"'\n    );\n  });\n});\n`.trim();\nconst statics = `\nimport { render } from \"enzyme\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Foo = props => (\n  <div>\n    <h1>{props.title}</h1>\n    <div className=\"foo-bar\"></div>\n    <div className=\"foo-bar\"></div>\n    <div className=\"foo-bar\"></div>\n  </div>\n);\n\ndescribe(\"<Foo />\", () => {\n  it(\"renders three '.foo-bar's\", () => {\n    const wrapper = render(<Foo />);\n    expect(wrapper.find(\".foo-bar\")).toHaveLength(3);\n  });\n\n  it(\"rendered the title\", () => {\n    const wrapper = render(<Foo title=\"unique\" />);\n    expect(wrapper.text()).toContain(\"unique\");\n  });\n\n  it(\"renders a div\", () => {\n    const wrapper = render(<Foo />);\n    expect(wrapper.html()).toMatch(/div/);\n  });\n\n  it(\"can pass in context\", () => {\n    function SimpleComponent(props, context) {\n      const { name } = context;\n      return <div>{name}</div>;\n    }\n    SimpleComponent.contextTypes = {\n      name: PropTypes.string\n    };\n\n    const context = { name: \"foo\" };\n    const wrapper = render(<SimpleComponent />, { context });\n    expect(wrapper.text()).toEqual(\"foo\");\n  });\n});\n`.trim();\nconst selectors = `\nfunction Foo(props) {\n  return (\n    <div>\n      <button\n        id=\"foo-button\"\n        onClick={() => props.onButtonClick && props.onButtonClick()}\n      />\n    </div>\n  );\n}\n\nfunction MyComponent(props) {\n  return (\n    <div>\n      <Foo anum={3} abool={false} />\n      <Foo anum=\"3\" abool=\"false\" />\n      <Foo id=\"foo-id\" abool={undefined} />\n      <div className=\"icon-star\"></div>\n      <a href=\"foo\">Foo</a>\n      {[1, 2, 3].map(item => (\n        <div key={item}>{item}</div>\n      ))}\n      {props.children}\n    </div>\n  );\n}\n\nMyComponent.displayName = \"My Component\";\n\nlet wrapper;\n\nbeforeEach(() => {\n  wrapper = mount(<MyComponent />);\n});\n\nafterEach(() => {\n  wrapper.unmount();\n});\n\ntest(\".icon-start\", () => {\n  expect(wrapper.find(\".icon-star\")).toHaveLength(1);\n});\n\ntest(\"button#foo-button\", () => {\n  expect(wrapper.find(\"button#foo-button\")).toHaveLength(3);\n});\n\ntest(\"a[href=foo]\", () => {\n  expect(wrapper.find('a[href=\"foo\"]')).toHaveLength(1);\n});\n\ntest(\"a[href=foo]\", () => {\n  expect(wrapper.find('a[href=\"foo\"]')).toHaveLength(1);\n});\n\ntest(\"#foo-id *\", () => {\n  expect(wrapper.find('#foo-id *')).toHaveLength(2);\n});\n\ntest(\"key doesn't work\", () => {\n  expect(wrapper.find('[key=1]')).toHaveLength(0);\n});\n\ntest(\"ref doesn't work\", () => {\n  class SimpleComponent extends React.Component {\n    render() {\n      return <div ref=\"foo\">Ref</div>;\n    }\n  }\n\n  const wrapper = mount(<SimpleComponent />);\n  expect(wrapper.find('[ref=\"foo\"]')).toHaveLength(0);\n});\n\ntest(\"Foo\", () => {\n  expect(wrapper.find(Foo)).toHaveLength(3);\n});\n\ntest.skip(\"My Component\", () => {\n  expect(wrapper.find(\"My Component\")).toHaveLength(1);\n});\n\ntest(\"anum={3} abool={false}\", () => {\n  expect(wrapper.find(\"[anum=3][abool=false]\")).toHaveLength(1);\n\n  expect(\n    wrapper.find({\n      anum: 3,\n      abool: false\n    })\n  ).toHaveLength(1);\n});\n\ntest('anum=\"3\" abool=\"false\"', () => {\n  expect(wrapper.find('[anum=\"3\"][abool=\"false\"]')).toHaveLength(1);\n\n  expect(\n    wrapper.find({\n      anum: \"3\",\n      abool: \"false\"\n    })\n  ).toHaveLength(1);\n});\n\ntest('abool={undefined}', () => {\n  // wont work\n  // expect(\n  //   wrapper.find({\n  //     aundefined: undefined\n  //   })\n  // ).toHaveLength(1);\n  expect(\n    wrapper.findWhere(n => n.is(Foo) && n.props().abool === undefined)\n  ).toHaveLength(1);\n});\n`.trim();\n\nclass Enzymes extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    }, \"2-shallow-rendering\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: shallow,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548\n      },\n      __self: this\n    }, \"shallow-rendering\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: shallow2,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    }, \"3-full-dom-rendering\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: fullDom,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569\n      },\n      __self: this\n    }, \"full-dom-rendering\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: fullDom,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580\n      },\n      __self: this\n    }, \"4-static-rendering\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: statics,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590\n      },\n      __self: this\n    }, \"5-selectors\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: selectors,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Enzymes);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/css/enzymes.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Browser","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","shallow","trim","shallow2","fullDom","fullDom2","statics","selectors","Enzymes","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../ReactJs/styles.css'\nimport Sidebar from './sidebar';\nimport PrismCode from '../ReactJs/prismCode';\n\nimport Browser from '../../assets/css1.PNG';\n\n\nconst titles = {backgroundColor:'#F0F8FF', padding:'1px', fontSize:'16px'}\n\nconst styles = theme => ({\n  paper: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1)\n  },\n  smMargin: {\n      margin: theme.spacing(1)\n  },\n  actionDiv: {\n      textAlign: \"center\"\n  }\n})\n\n\nconst shallow = `\nimport React from \"react\";\nimport { shallow } from \"enzyme\";\n\nconst Foo = (props) => <div>\n  <button onClick={() => props.onButtonClick && props.onButtonClick()}></button>\n</div>;\n\nconst MyComponent = props => (\n  <div>\n    <Foo />\n    <Foo />\n    <Foo />\n    <div className=\"icon-star\"></div>\n    {props.children}\n  </div>\n);\n\ndescribe(\"<MyComponent />\", () => {\n  it(\"renders three <Foo /> components\", () => {\n    const wrapper = shallow(<MyComponent />);\n    expect(wrapper.find(Foo)).toHaveLength(3);\n    expect(wrapper).toMatchInlineSnapshot('\n      <div>\n        <Foo />\n        <Foo />\n        <Foo />\n        <div\n          className=\"icon-star\"\n        />\n      </div>\n    ');\n  });\n\n  it(\"renders an '.icon-star'\", () => {\n    const wrapper = shallow(<MyComponent />);\n    expect(wrapper.find(\".icon-star\")).toHaveLength(1);\n  });\n\n  it(\"renders children when passed in\", () => {\n    const wrapper = shallow(\n      <MyComponent>\n        <div className=\"unique\" />\n      </MyComponent>\n    );\n    expect(wrapper.contains(<div className=\"unique\" />)).toEqual(true);\n    expect(wrapper).toMatchInlineSnapshot('\n      <div>\n        <Foo />\n        <Foo />\n        <Foo />\n        <div\n          className=\"icon-star\"\n        />\n        <div\n          className=\"unique\"\n        />\n      </div>\n    ');\n  });\n\n  it(\"simulates click events\", () => {\n    const onButtonClick = jest.fn();\n    const wrapper = shallow(<Foo onButtonClick={onButtonClick} />);\n    wrapper.find(\"button\").simulate(\"click\");\n    expect(onButtonClick).toHaveBeenCalledTimes(1);\n  });\n});\n`.trim();\n\nconst shallow2 = `\nimport React, { Suspense, Component } from \"react\";\nimport { shallow } from \"enzyme\";\nimport PropTypes from \"prop-types\";\n\nconst ThemeContext = React.createContext({ theme: \"light\" });\n\nclass ThemeComponent extends Component {\n  render() {\n    return (\n      <ThemeContext.Provider value={{ theme: \"dark\" }}>\n        {this.props.children}\n      </ThemeContext.Provider>\n    );\n  }\n}\n\nclass CustomComponent extends Component {\n  state = {\n    authenticated: false\n  };\n\n  componentDidMount() {\n    this.setState({ authenticated: true });\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"theme\">\n          <ThemeContext.Consumer>\n            {value => String(value.theme)}\n          </ThemeContext.Consumer>\n        </div>\n        <div id=\"user\">{this.state.authenticated ? \"User\" : \"Guest\"}</div>\n      </div>\n    );\n  }\n}\n\ndescribe(\"options\", () => {\n  test(\"context\", () => {\n    function SimpleComponent(props, context) {\n      const { name } = context;\n      return <div>{name}</div>;\n    }\n\n    SimpleComponent.contextTypes = {\n      name: PropTypes.string\n    };\n\n    const context = { name: \"foo\" };\n    const wrapper = shallow(<SimpleComponent />, { context });\n    expect(wrapper.text()).toEqual(\"foo\");\n  });\n\n  test(\"disableLifecycleMethods\", () => {\n    const wrapper = shallow(<CustomComponent></CustomComponent>, {\n      disableLifecycleMethods: true\n    });\n\n    expect(wrapper.find(\"#user\").text()).toBe(\"Guest\");\n  });\n\n  test(\"wrappingComponent\", () => {\n    const wrapper = shallow(<CustomComponent></CustomComponent>, {\n      wrappingComponent: ThemeComponent\n    });\n\n    expect(wrapper.getWrappingComponent().html()).toMatchInlineSnapshot(\n      '\"<div><div id=\\\\\"theme\\\\\">dark</div><div id=\\\\\"user\\\\\">Guest</div></div>\"'\n    );\n  });\n\n  test(\"suspenseFallback\", () => {\n    const LazyComponent = React.lazy(() => import(\"../../LazyComponent\"));\n\n    const wrapper = shallow(\n      <Suspense fallback={<div>Loading...</div>}>\n        <LazyComponent />\n      </Suspense>,\n      { suspenseFallback: true }\n    );\n\n    expect(wrapper).toMatchInlineSnapshot('\n      <div>\n        Loading...\n      </div>\n    ');\n  });\n});\n`.trim();\n\nconst fullDom = `\nimport { mount } from \"enzyme\";\nimport React from \"react\";\n\nconst Foo = props => (\n  <div>\n    <button onClick={() => props.onButtonClick && props.onButtonClick()} />\n  </div>\n);\n\nconst MyComponent = props => (\n  <div>\n    <Foo />\n    <Foo />\n    <Foo />\n    <div className=\"icon-star\"></div>\n    {props.children}\n  </div>\n);\n\ndescribe(\"<MyComponent />\", () => {\n  it(\"renders three <Foo /> components\", () => {\n    const wrapper = mount(<MyComponent />);\n    expect(wrapper.find(Foo)).toHaveLength(3);\n  });\n\n  it(\"renders an '.icon-star'\", () => {\n    const wrapper = mount(<MyComponent />);\n    expect(wrapper.find(\".icon-star\")).toHaveLength(1);\n  });\n\n  it(\"renders children when passed in\", () => {\n    const wrapper = mount(\n      <MyComponent>\n        <div className=\"unique\" />\n      </MyComponent>\n    );\n    expect(wrapper.contains(<div className=\"unique\" />)).toEqual(true);\n\n    expect(wrapper).toMatchInlineSnapshot('\n      <MyComponent>\n        <div>\n          <Foo>\n            <div>\n              <button\n                onClick={[Function]}\n              />\n            </div>\n          </Foo>\n          <Foo>\n            <div>\n              <button\n                onClick={[Function]}\n              />\n            </div>\n          </Foo>\n          <Foo>\n            <div>\n              <button\n                onClick={[Function]}\n              />\n            </div>\n          </Foo>\n          <div\n            className=\"icon-star\"\n          />\n          <div\n            className=\"unique\"\n          />\n        </div>\n      </MyComponent>\n    );\n  });\n\n  it(\"simulates click events\", () => {\n    const onButtonClick = jest.fn();\n    const wrapper = mount(<Foo onButtonClick={onButtonClick} />);\n    wrapper.find(\"button\").simulate(\"click\");\n    expect(onButtonClick).toHaveBeenCalledTimes(1);\n  });\n});\n`.trim();\n\nconst fullDom2 = `\nimport React, { Component } from \"react\";\nimport { mount } from \"enzyme\";\nimport PropTypes from \"prop-types\";\n\nconst ThemeContext = React.createContext({ theme: \"light\" });\n\nclass ThemeComponent extends Component {\n  render() {\n    return (\n      <ThemeContext.Provider value={{ theme: this.props.theme || \"dark\" }}>\n        {this.props.children}\n      </ThemeContext.Provider>\n    );\n  }\n}\n\nclass CustomComponent extends Component {\n  state = {\n    authenticated: false\n  };\n\n  componentDidMount() {\n    this.setState({ authenticated: true });\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"theme\">\n          <ThemeContext.Consumer>\n            {value => String(value.theme)}\n          </ThemeContext.Consumer>\n        </div>\n        <div id=\"user\">{this.state.authenticated ? \"User\" : \"Guest\"}</div>\n      </div>\n    );\n  }\n}\n\ndescribe(\"options\", () => {\n  test(\"context\", () => {\n    function SimpleComponent(props, context) {\n      const { name } = context;\n      return <div>{name}</div>;\n    }\n\n    SimpleComponent.contextTypes = {\n      name: PropTypes.string\n    };\n\n    const context = { name: \"foo\" };\n    const wrapper = mount(<SimpleComponent />, { context });\n    expect(wrapper.text()).toEqual(\"foo\");\n  });\n\n  test(\"wrappingComponent\", () => {\n    const wrapper = mount(<CustomComponent></CustomComponent>, {\n      wrappingComponent: ThemeComponent,\n      wrappingComponentProps: { theme: \"custom\" }\n    });\n\n    expect(wrapper.getWrappingComponent().html()).toMatchInlineSnapshot(\n      '\"<div><div id=\\\\\"theme\\\\\">custom</div><div id=\\\\\"user\\\\\">User</div></div>\"'\n    );\n  });\n\n  test(\"attachTo\", () => {\n    document.body.innerHTML = '<div id=\"attach-here\"></div><div id=\"not-here\"></div>';\n    const attachHere = document.getElementById(\"attach-here\");\n\n    mount(<CustomComponent></CustomComponent>, {\n      attachTo: attachHere\n    });\n\n    expect(document.body.innerHTML).toMatchInlineSnapshot(\n      '\"<div id=\\\\\"attach-here\\\\\"><div><div id=\\\\\"theme\\\\\">light</div><div id=\\\\\"user\\\\\">User</div></div></div><div id=\\\\\"not-here\\\\\"></div>\"'\n    );\n  });\n});\n`.trim();\n\nconst statics = `\nimport { render } from \"enzyme\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Foo = props => (\n  <div>\n    <h1>{props.title}</h1>\n    <div className=\"foo-bar\"></div>\n    <div className=\"foo-bar\"></div>\n    <div className=\"foo-bar\"></div>\n  </div>\n);\n\ndescribe(\"<Foo />\", () => {\n  it(\"renders three '.foo-bar's\", () => {\n    const wrapper = render(<Foo />);\n    expect(wrapper.find(\".foo-bar\")).toHaveLength(3);\n  });\n\n  it(\"rendered the title\", () => {\n    const wrapper = render(<Foo title=\"unique\" />);\n    expect(wrapper.text()).toContain(\"unique\");\n  });\n\n  it(\"renders a div\", () => {\n    const wrapper = render(<Foo />);\n    expect(wrapper.html()).toMatch(/div/);\n  });\n\n  it(\"can pass in context\", () => {\n    function SimpleComponent(props, context) {\n      const { name } = context;\n      return <div>{name}</div>;\n    }\n    SimpleComponent.contextTypes = {\n      name: PropTypes.string\n    };\n\n    const context = { name: \"foo\" };\n    const wrapper = render(<SimpleComponent />, { context });\n    expect(wrapper.text()).toEqual(\"foo\");\n  });\n});\n`.trim();\n\nconst selectors = `\nfunction Foo(props) {\n  return (\n    <div>\n      <button\n        id=\"foo-button\"\n        onClick={() => props.onButtonClick && props.onButtonClick()}\n      />\n    </div>\n  );\n}\n\nfunction MyComponent(props) {\n  return (\n    <div>\n      <Foo anum={3} abool={false} />\n      <Foo anum=\"3\" abool=\"false\" />\n      <Foo id=\"foo-id\" abool={undefined} />\n      <div className=\"icon-star\"></div>\n      <a href=\"foo\">Foo</a>\n      {[1, 2, 3].map(item => (\n        <div key={item}>{item}</div>\n      ))}\n      {props.children}\n    </div>\n  );\n}\n\nMyComponent.displayName = \"My Component\";\n\nlet wrapper;\n\nbeforeEach(() => {\n  wrapper = mount(<MyComponent />);\n});\n\nafterEach(() => {\n  wrapper.unmount();\n});\n\ntest(\".icon-start\", () => {\n  expect(wrapper.find(\".icon-star\")).toHaveLength(1);\n});\n\ntest(\"button#foo-button\", () => {\n  expect(wrapper.find(\"button#foo-button\")).toHaveLength(3);\n});\n\ntest(\"a[href=foo]\", () => {\n  expect(wrapper.find('a[href=\"foo\"]')).toHaveLength(1);\n});\n\ntest(\"a[href=foo]\", () => {\n  expect(wrapper.find('a[href=\"foo\"]')).toHaveLength(1);\n});\n\ntest(\"#foo-id *\", () => {\n  expect(wrapper.find('#foo-id *')).toHaveLength(2);\n});\n\ntest(\"key doesn't work\", () => {\n  expect(wrapper.find('[key=1]')).toHaveLength(0);\n});\n\ntest(\"ref doesn't work\", () => {\n  class SimpleComponent extends React.Component {\n    render() {\n      return <div ref=\"foo\">Ref</div>;\n    }\n  }\n\n  const wrapper = mount(<SimpleComponent />);\n  expect(wrapper.find('[ref=\"foo\"]')).toHaveLength(0);\n});\n\ntest(\"Foo\", () => {\n  expect(wrapper.find(Foo)).toHaveLength(3);\n});\n\ntest.skip(\"My Component\", () => {\n  expect(wrapper.find(\"My Component\")).toHaveLength(1);\n});\n\ntest(\"anum={3} abool={false}\", () => {\n  expect(wrapper.find(\"[anum=3][abool=false]\")).toHaveLength(1);\n\n  expect(\n    wrapper.find({\n      anum: 3,\n      abool: false\n    })\n  ).toHaveLength(1);\n});\n\ntest('anum=\"3\" abool=\"false\"', () => {\n  expect(wrapper.find('[anum=\"3\"][abool=\"false\"]')).toHaveLength(1);\n\n  expect(\n    wrapper.find({\n      anum: \"3\",\n      abool: \"false\"\n    })\n  ).toHaveLength(1);\n});\n\ntest('abool={undefined}', () => {\n  // wont work\n  // expect(\n  //   wrapper.find({\n  //     aundefined: undefined\n  //   })\n  // ).toHaveLength(1);\n  expect(\n    wrapper.findWhere(n => n.is(Foo) && n.props().abool === undefined)\n  ).toHaveLength(1);\n});\n`.trim();\n\n\n\nclass Enzymes extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n            <Grid item xs={2}>\n                <Paper className={classes.paper}>\n                    <h4><Sidebar /></h4>\n                </Paper>\n            </Grid>\n    <Grid item xs={10}>\n    <Paper className={classes.paper}>\n    <List>\n      <h3>2-shallow-rendering</h3>\n      <div style={titles}>\n      <PrismCode\n        code={shallow}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <br/>\n      <b>shallow-rendering</b>\n      <br/>\n      <div style={titles}>\n      <PrismCode\n        code={shallow2}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      \n      <h3>3-full-dom-rendering</h3>\n      <div style={titles}>\n      <PrismCode\n        code={fullDom}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <br/>\n      <b>full-dom-rendering</b>\n      <br/>\n      <div style={titles}>\n      <PrismCode\n        code={fullDom}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      \n      <h3>4-static-rendering</h3>\n      <div style={titles}>\n      <PrismCode\n        code={statics}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      \n      <h3>5-selectors</h3>\n      <div style={titles}>\n      <PrismCode\n        code={selectors}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      </List>\n      </Paper>\n      </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Enzymes));\n"]},"metadata":{},"sourceType":"module"}