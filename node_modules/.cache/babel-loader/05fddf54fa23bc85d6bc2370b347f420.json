{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import\"../../ReactJs/styles.css\";import Sidebar from\"../sidebar\";import PrismCode from\"../../ReactJs/prismCode\";var titles={backgroundColor:\"#F0F8FF\",padding:\"1px\",fontSize:\"16px\"};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var modules=\"\\n//names.js\\nconst john = 'john'\\nconst peter = 'peter'\\nmodule.exports = { john, peter }\\n\\n\\n//utils.js\\nconst sayHi = (name) => {\\n  console.log('Hello there '$'{name}')\\n}\\nmodule.exports = sayHi\\n\\n\\n//mind-grenade.js\\nconst num1 = 5\\nconst num2 = 10\\n\\nfunction addValues() {\\n  console.log('the sum is : '$'{num1 + num2}')\\n}\\naddValues()\\n\\n\\n//app.js\\nconst fun=()=>{\\n  const names = require('./modules/04-names')\\n  const sayHi = require('./modules/05-utils')\\n  require('./modules/07-mind-grenade')\\n  sayHi('susan')\\n  sayHi(names.john)\\n  sayHi(names.peter)\\n  }\\n  module.exports={fun}\\n\\n\\n  //server.js\\n  const {fun} = require('app.js');\\n\".trim();var patterns=\"\\nconst http = require('http')\\n\\nconst server = http.createServer((req, res) => {\\n  if (req.url === '/') {\\n    res.end('Home Page')\\n  }\\n  if (req.url === '/about') {\\n    for (let i = 0; i < 1000; i++) {\\n      for (let j = 0; j < 1000; j++) {\\n        console.log('$'{i} '$'{j}')\\n      }\\n    }\\n    res.end('About Page')\\n  }\\n  res.end('Error Page')\\n})\\n\\nserver.listen(5000, () => console.log('Server listening on port : 5000....'))\\n\".trim();var awaitPat=\"\\nconst { readFile, writeFile } = require('fs').promises\\n\\nconst start = async () => {\\n  try {\\n    const first = await readFile('./content/first.txt', 'utf8')\\n    const second = await readFile('./content/second.txt', 'utf8')\\n    await writeFile(\\n      './content/result-mind-grenade.txt',\\n      'THIS IS AWESOME : '$'{first} '$'{second}',\\n      { flag: 'a' }\\n    )\\n    console.log(first, second)\\n  } catch (error) {\\n    console.log(error)\\n  }\\n}\\n\\nstart();\".trim();var fSync=\"\\nconst { readFileSync, writeFileSync } = require('fs')\\nconst first = readFileSync('./first.txt', 'utf8')\\nconst second = readFileSync('./second.txt', 'utf8')\\n\\nconst fun=()=>{\\n    writeFileSync(\\n        './result-sync.txt',\\n        'Here is the result : '$'{first}, '$'{second}',\\n        { flag: 'a' }\\n      )\\n      console.log('done with this task')\\n      console.log('starting the next one')\\n}\\n\\nmodule.exports={fun}\".trim();var fsAsync=\"\\nconst { readFile, writeFile } = require('fs')\\n\\nconst fun=()=>{\\nreadFile('./first.txt', 'utf8', (err, result) => {\\n  if (err) {\\n    console.log(err)\\n    return\\n  }\\n  const first = result\\n  readFile('./second.txt', 'utf8', (err, result) => {\\n    if (err) {\\n      console.log(err)\\n      return\\n    }\\n    const second = result\\n    writeFile(\\n      './result-async.txt',\\n      'Here is the result : '$'{first}, '$'{second}',\\n      (err, result) => {\\n        if (err) {\\n          console.log(err)\\n          return\\n        }\\n        console.log('done with this task')\\n      }\\n    )\\n  })\\n})\\n}\\n\\nmodule.exports={fun}\".trim();var http=\"\\nconst http = require('http')\\n\\nconst fun=()=>{\\n    const server = http.createServer((req, res) => {\\n          if (req.url === '/') {\\n            res.end('Welcome to our home page')\\n          }\\n          if (req.url === '/about') {\\n            res.end('Here is our short history')\\n          }\\n          res.end('\\n          <h1>Oops!</h1>\\n        <p>We can't seem to find the page you are looking for</p>\\n        <a href=\\\"/\\\">back home</a>\\n          ')\\n          \\n        if (req.url === '/') {\\n          res.end('Welcome to our home page')\\n        } else if (req.url === '/about') {\\n          res.end('Here is our short history')\\n        } else {\\n          res.end('\\n          <h1>Oops!</h1>\\n          <p>We can't seem to find the page you are looking for</p>\\n          <a href=\\\"/\\\">back home</a>\\n          ')\\n        }\\n      })\\n      server;\\n}\\n\\nmodule.exports={fun}\".trim();var EventEmitter=\"\\nconst EventEmitter = require('events')\\nconst customEmitter = new EventEmitter()\\n\\ncustomEmitter.on('response', (name, id) => {\\n  console.log('data recieved user '$'{name} with id:'$'{id}')\\n})\\n\\ncustomEmitter.on('response', () => {\\n  console.log('some other logic here')\\n})\\n\\ncustomEmitter.emit('response', 'john', 34)\\n\".trim();var requestEvent=\"\\nconst http = require('http')\\nconst server = http.createServer()\\n\\nserver.on('request', (req, res) => {\\n  res.end('Welcome')\\n})\\n\\nserver.listen(5000)\\n\".trim();var createBigFile=\"\\nconst { writeFileSync } = require('fs')\\n\\nconst fun=()=>{\\n    for (let i = 0; i < 10000; i++) {\\n        writeFileSync('./big.txt', 'hello world '$'{i}\\n', { flag: 'a' })\\n      }\\n}\\n\\nmodule.exports={fun}\".trim();var streams=\"\\nconst { createReadStream } = require('fs')\\n// const stream = createReadStream('./content/big.txt', { highWaterMark: 90000 })\\n// const stream = createReadStream('../content/big.txt', { encoding: 'utf8' })\\nconst stream = createReadStream('./big.txt')\\n\\n\\nconst fun=()=>{\\n    stream.on('data', (result) => {\\n        console.log(result)\\n      })\\n      stream.on('error', (err) => console.log(err))\\n}\\n\\nmodule.exports={fun}\".trim();var httpStream=\"\\nvar http = require('http')\\nvar fs = require('fs')\\n\\nconst fun=()=>{\\n    http\\n    .createServer(function (req, res) {\\n      // const text = fs.readFileSync('./content/big.txt', 'utf8')\\n      // res.end(text)\\n      const fileStream = fs.createReadStream('./content/big.txt', 'utf8')\\n      fileStream.on('open', () => {\\n        fileStream.pipe(res)\\n      })\\n      fileStream.on('error', (err) => {\\n        res.end(err)\\n      })\\n    })\\n    .listen(5001)\\n}\\n\\nmodule.exports={fun}\".trim();var ipc=\"\\nsetInterval(() => {}, 1e6);\\nprocess.on('SIGINT', () => {\\n    console.log('SIGINT signal received');\\n    process.exit(1);\\n})\\n\".trim();var nextTick=\"\\nconst events = require('events').EventEmitter;\\nconst emitter = new events();\\n\\nconst getEmitter = () => {\\n  process.nextTick(() => {\\n    emitter.emit('start');\\n  });\\n  return emitter;\\n}\\n\\nconst myEmitter = getEmitter();\\nmyEmitter.on('start', () => {\\n  console.log('Started');\\n})\\n\".trim();var timers=\"\\nconsole.log(\\\"Foo: Start\\\", new Date().toLocaleTimeString());\\n\\nsetTimeout(() => {\\n  console.log(\\\"Poo\\\", new Date().toLocaleTimeString());\\n}, 5000);\\n\\nconst waitlogForNseconds = (seconds) => {\\n  const startTime = new Date().getTime();\\n  const milliseconds = 1000;\\n  const endTime = startTime + seconds * milliseconds;\\n  let currTime = new Date().getTime();\\n\\n  while (endTime > currTime) {\\n    currTime = new Date().getTime();\\n  }\\n  console.log('Goo: To be called after '$'{seconds} End ', new Date().toLocaleTimeString());\\n};\\n\\nwaitlogForNseconds(10);\\n\".trim();var handles=\"\\nconst args = process.argv.slice(2);\\n\\nargs.forEach(arg => {\\nlet envVar = process.env[arg];\\nif (envVar === undefined) {\\n console.error(Could not find \\\"'$'{arg}\\\" in environment);\\n} else {\\n console.log(envVar);\\n}\\n});\\n\".trim();var Render_HTML=\"var http = require('http').createServer(onRequest);\\n  var fs = require('fs');\\n    function onRequest(request, response) {\\n       response.writeHead(200, { 'Content-Type': 'text/html' });\\n         fs.readFile('./index.html', null, ((error, data) => {\\n           if (error) {\\n               response.writeHead(404);\\n               response.write('File not found!');\\n             } \\n             else {\\n               response.write(data);\\n           }\\n         response.end();\\n      })\\n    );\\n  }\\n  \\nhttp.listen(8000);\\n\".trim();var Date_time_main=\"var http = require('http').createServer(onRequest);\\n  var dt = require('./date_time');\\n    function onRequest(req, res) {\\n       res.writeHead(200, { 'Content-Type': 'text/html' });\\n       res.write(\\\"The date and time currently\\\" + dt.myDateTime());\\n     res.end();\\n  }\\n  \\nhttp.listen(4000);\\n\".trim();var Ejs=/*#__PURE__*/function(_Component){_inherits(Ejs,_Component);function Ejs(){_classCallCheck(this,Ejs);return _possibleConstructorReturn(this,_getPrototypeOf(Ejs).apply(this,arguments));}_createClass(Ejs,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. modules\"),\"Every file is module by default.\",React.createElement(\"br\",null),\"Modules - Encapsulated Code (only share minimum)\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:modules,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Async-Patterns\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:patterns,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Await-Pattern\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:awaitPat,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. fs-sync\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:fSync,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. fs-async\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:fsAsync,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. Http\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:http,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"7. EventEmitter\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:EventEmitter,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"8. Request-Event\"),\"Emits request event subcribe to it / listen for it / respond to it.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:requestEvent,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"9. create Big File\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:createBigFile,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"10. Streams\"),\"default 64kb\",React.createElement(\"br\",null),\"last buffer - remainder\",React.createElement(\"br\",null),\"highWaterMark - control size\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:streams,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"11. http-stream\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:httpStream,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"12. What are the timing features of Node.js?\"),React.createElement(\"p\",null,\"The Timers module in Node.js contains functions that execute code after a set period of time.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"setTimeout/ clearTimeout -\"),\" Can be used to schedule code execution after a designated amount of milliseconds.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"setInterval/ clearInterval -\"),\" Can be used to execute a block of code multiple times.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"setImmediate/ clearImmediate -\"),\" Will execute code at the end of the current event loop cycle.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"process.nextTick -\"),\" Used to schedule a callback function to be invoked in the next iteration of the Event Loop.\")),React.createElement(\"i\",null,\"On any given context process.nextTick() has higher priority over setImmediate().\"),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"timers: \"),\"This phase executes callbacks scheduled by setTimeout() and setInterval().\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"pending callbacks: \"),\"executes I/O callbacks deferred to the next loop iteration.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"idle prepare: \"),\"only used internally.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"poll: \"),\"retrieve new I/O events; execute I/O related callbacks (almost all with the exception of close callbacks, the ones scheduled by timers, and setImmediate()); node will block here when appropriate.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"check: \"),\"setImmediate() callbacks are invoked here.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"close callbacks: \"),\"some close callbacks, e.g. socket.on('close', ...)\"),\"setImmediate() is processed in the Check handlers phase, while process.nextTick() is processed at the starting of the event loop and between each phase of the event loop.\"),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"13. ipc\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:ipc,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"14. nextTick \"),\"This code set up a simple transaction when an instance of\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:nextTick,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"15. Timers\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:timers,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"16. Handling Undefined Input\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:handles,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"i\",null,\"node echo.js HOME PWD NOT_DEFINED\"),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"17. Node.js on Browser\"),React.createElement(\"b\",null,\" Render HTML\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Render_HTML,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"18. Date time main\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Date_time_main,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"19. Provide some example of config file separation for dev and prod environments.\"),React.createElement(\"p\",null,\"A perfect and flawless configuration setup should ensure:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Keys can be read from file and from environment variable.\"),React.createElement(\"li\",null,\"Secrets are kept outside committed code.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"20. Explain usage of NODE_ENV .\"),React.createElement(\"p\",null,\"NODE_ENV allows components to provide better diagnostics during development, for example by disabling caching or emitting verbose log statements. Setting NODE_ENV to production makes our application 3 times faster.\"),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"21. Why should you separate Express 'app' and 'server'?\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"In a Node.js and Express application, the app object is responsible for creating and configuring the Express application, while the server object is responsible for creating the HTTP server to listen for incoming requests.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"It is a good practice to separate the app and server objects because it allows for better flexibility and scalability of the application. By separating the two, you can reuse the app object and configure it for different environments (e.g. development, staging, production) without having to recreate the HTTP server each time.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"22. OS - Provides information about the operating system\")))));}}]);return Ejs;}(Component);export default withStyles(styles)(Ejs);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/nodeJs/nodeDeep/ejsNode.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","modules","trim","patterns","awaitPat","fSync","fsAsync","http","EventEmitter","requestEvent","createBigFile","streams","httpStream","ipc","nextTick","timers","handles","Render_HTML","Date_time_main","Ejs","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst modules = `\n//names.js\nconst john = 'john'\nconst peter = 'peter'\nmodule.exports = { john, peter }\n\n\n//utils.js\nconst sayHi = (name) => {\n  console.log('Hello there '$'{name}')\n}\nmodule.exports = sayHi\n\n\n//mind-grenade.js\nconst num1 = 5\nconst num2 = 10\n\nfunction addValues() {\n  console.log('the sum is : '$'{num1 + num2}')\n}\naddValues()\n\n\n//app.js\nconst fun=()=>{\n  const names = require('./modules/04-names')\n  const sayHi = require('./modules/05-utils')\n  require('./modules/07-mind-grenade')\n  sayHi('susan')\n  sayHi(names.john)\n  sayHi(names.peter)\n  }\n  module.exports={fun}\n\n\n  //server.js\n  const {fun} = require('app.js');\n`.trim();\n\nconst patterns = `\nconst http = require('http')\n\nconst server = http.createServer((req, res) => {\n  if (req.url === '/') {\n    res.end('Home Page')\n  }\n  if (req.url === '/about') {\n    for (let i = 0; i < 1000; i++) {\n      for (let j = 0; j < 1000; j++) {\n        console.log('$'{i} '$'{j}')\n      }\n    }\n    res.end('About Page')\n  }\n  res.end('Error Page')\n})\n\nserver.listen(5000, () => console.log('Server listening on port : 5000....'))\n`.trim();\n\nconst awaitPat = `\nconst { readFile, writeFile } = require('fs').promises\n\nconst start = async () => {\n  try {\n    const first = await readFile('./content/first.txt', 'utf8')\n    const second = await readFile('./content/second.txt', 'utf8')\n    await writeFile(\n      './content/result-mind-grenade.txt',\n      'THIS IS AWESOME : '$'{first} '$'{second}',\n      { flag: 'a' }\n    )\n    console.log(first, second)\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nstart();`.trim();\n\nconst fSync = `\nconst { readFileSync, writeFileSync } = require('fs')\nconst first = readFileSync('./first.txt', 'utf8')\nconst second = readFileSync('./second.txt', 'utf8')\n\nconst fun=()=>{\n    writeFileSync(\n        './result-sync.txt',\n        'Here is the result : '$'{first}, '$'{second}',\n        { flag: 'a' }\n      )\n      console.log('done with this task')\n      console.log('starting the next one')\n}\n\nmodule.exports={fun}`.trim();\n\nconst fsAsync = `\nconst { readFile, writeFile } = require('fs')\n\nconst fun=()=>{\nreadFile('./first.txt', 'utf8', (err, result) => {\n  if (err) {\n    console.log(err)\n    return\n  }\n  const first = result\n  readFile('./second.txt', 'utf8', (err, result) => {\n    if (err) {\n      console.log(err)\n      return\n    }\n    const second = result\n    writeFile(\n      './result-async.txt',\n      'Here is the result : '$'{first}, '$'{second}',\n      (err, result) => {\n        if (err) {\n          console.log(err)\n          return\n        }\n        console.log('done with this task')\n      }\n    )\n  })\n})\n}\n\nmodule.exports={fun}`.trim();\n\nconst http = `\nconst http = require('http')\n\nconst fun=()=>{\n    const server = http.createServer((req, res) => {\n          if (req.url === '/') {\n            res.end('Welcome to our home page')\n          }\n          if (req.url === '/about') {\n            res.end('Here is our short history')\n          }\n          res.end('\n          <h1>Oops!</h1>\n        <p>We can't seem to find the page you are looking for</p>\n        <a href=\"/\">back home</a>\n          ')\n          \n        if (req.url === '/') {\n          res.end('Welcome to our home page')\n        } else if (req.url === '/about') {\n          res.end('Here is our short history')\n        } else {\n          res.end('\n          <h1>Oops!</h1>\n          <p>We can't seem to find the page you are looking for</p>\n          <a href=\"/\">back home</a>\n          ')\n        }\n      })\n      server;\n}\n\nmodule.exports={fun}`.trim();\n\nconst EventEmitter = `\nconst EventEmitter = require('events')\nconst customEmitter = new EventEmitter()\n\ncustomEmitter.on('response', (name, id) => {\n  console.log('data recieved user '$'{name} with id:'$'{id}')\n})\n\ncustomEmitter.on('response', () => {\n  console.log('some other logic here')\n})\n\ncustomEmitter.emit('response', 'john', 34)\n`.trim();\n\nconst requestEvent = `\nconst http = require('http')\nconst server = http.createServer()\n\nserver.on('request', (req, res) => {\n  res.end('Welcome')\n})\n\nserver.listen(5000)\n`.trim();\n\nconst createBigFile = `\nconst { writeFileSync } = require('fs')\n\nconst fun=()=>{\n    for (let i = 0; i < 10000; i++) {\n        writeFileSync('./big.txt', 'hello world '$'{i}\\n', { flag: 'a' })\n      }\n}\n\nmodule.exports={fun}`.trim();\n\nconst streams = `\nconst { createReadStream } = require('fs')\n// const stream = createReadStream('./content/big.txt', { highWaterMark: 90000 })\n// const stream = createReadStream('../content/big.txt', { encoding: 'utf8' })\nconst stream = createReadStream('./big.txt')\n\n\nconst fun=()=>{\n    stream.on('data', (result) => {\n        console.log(result)\n      })\n      stream.on('error', (err) => console.log(err))\n}\n\nmodule.exports={fun}`.trim();\n\nconst httpStream = `\nvar http = require('http')\nvar fs = require('fs')\n\nconst fun=()=>{\n    http\n    .createServer(function (req, res) {\n      // const text = fs.readFileSync('./content/big.txt', 'utf8')\n      // res.end(text)\n      const fileStream = fs.createReadStream('./content/big.txt', 'utf8')\n      fileStream.on('open', () => {\n        fileStream.pipe(res)\n      })\n      fileStream.on('error', (err) => {\n        res.end(err)\n      })\n    })\n    .listen(5001)\n}\n\nmodule.exports={fun}`.trim();\n\nconst ipc = `\nsetInterval(() => {}, 1e6);\nprocess.on('SIGINT', () => {\n    console.log('SIGINT signal received');\n    process.exit(1);\n})\n`.trim();\n\nconst nextTick = `\nconst events = require('events').EventEmitter;\nconst emitter = new events();\n\nconst getEmitter = () => {\n  process.nextTick(() => {\n    emitter.emit('start');\n  });\n  return emitter;\n}\n\nconst myEmitter = getEmitter();\nmyEmitter.on('start', () => {\n  console.log('Started');\n})\n`.trim();\n\nconst timers = `\nconsole.log(\"Foo: Start\", new Date().toLocaleTimeString());\n\nsetTimeout(() => {\n  console.log(\"Poo\", new Date().toLocaleTimeString());\n}, 5000);\n\nconst waitlogForNseconds = (seconds) => {\n  const startTime = new Date().getTime();\n  const milliseconds = 1000;\n  const endTime = startTime + seconds * milliseconds;\n  let currTime = new Date().getTime();\n\n  while (endTime > currTime) {\n    currTime = new Date().getTime();\n  }\n  console.log('Goo: To be called after '$'{seconds} End ', new Date().toLocaleTimeString());\n};\n\nwaitlogForNseconds(10);\n`.trim();\n\nconst handles = `\nconst args = process.argv.slice(2);\n\nargs.forEach(arg => {\nlet envVar = process.env[arg];\nif (envVar === undefined) {\n console.error(Could not find \"'$'{arg}\" in environment);\n} else {\n console.log(envVar);\n}\n});\n`.trim();\n\nconst Render_HTML = `var http = require('http').createServer(onRequest);\n  var fs = require('fs');\n    function onRequest(request, response) {\n       response.writeHead(200, { 'Content-Type': 'text/html' });\n         fs.readFile('./index.html', null, ((error, data) => {\n           if (error) {\n               response.writeHead(404);\n               response.write('File not found!');\n             } \n             else {\n               response.write(data);\n           }\n         response.end();\n      })\n    );\n  }\n  \nhttp.listen(8000);\n`.trim();\n\nconst Date_time_main = `var http = require('http').createServer(onRequest);\n  var dt = require('./date_time');\n    function onRequest(req, res) {\n       res.writeHead(200, { 'Content-Type': 'text/html' });\n       res.write(\"The date and time currently\" + dt.myDateTime());\n     res.end();\n  }\n  \nhttp.listen(4000);\n`.trim();\n\nclass Ejs extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. modules</h3>\n              Every file is module by default.\n              <br />\n              Modules - Encapsulated Code (only share minimum)\n              <div style={titles}>\n                <PrismCode\n                  code={modules}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>2. Async-Patterns</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={patterns}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>3. Await-Pattern</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={awaitPat}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>4. fs-sync</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={fSync}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>5. fs-async</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={fsAsync}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>6. Http</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={http}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>7. EventEmitter</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={EventEmitter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>8. Request-Event</h3>\n              Emits request event subcribe to it / listen for it / respond to\n              it.\n              <div style={titles}>\n                <PrismCode\n                  code={requestEvent}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>9. create Big File</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={createBigFile}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>10. Streams</h3>\n              default 64kb\n              <br />\n              last buffer - remainder\n              <br />\n              highWaterMark - control size\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={streams}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>11. http-stream</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={httpStream}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>12. What are the timing features of Node.js?</h3>\n              <p>\n                The Timers module in Node.js contains functions that execute\n                code after a set period of time.\n              </p>\n              <ul>\n                <li>\n                  <b>setTimeout/ clearTimeout -</b> Can be used to schedule code\n                  execution after a designated amount of milliseconds.\n                </li>\n                <li>\n                  <b>setInterval/ clearInterval -</b> Can be used to execute a\n                  block of code multiple times.\n                </li>\n                <li>\n                  <b>setImmediate/ clearImmediate -</b> Will execute code at the\n                  end of the current event loop cycle.\n                </li>\n                <li>\n                  <b>process.nextTick -</b> Used to schedule a callback function\n                  to be invoked in the next iteration of the Event Loop.\n                </li>\n              </ul>\n              <i>\n                On any given context process.nextTick() has higher priority over\n                setImmediate().\n              </i>\n              <br />\n              <br />\n              <ul>\n                <li>\n                  <b>timers: </b>This phase executes callbacks scheduled by\n                  setTimeout() and setInterval().\n                </li>\n                <li>\n                  <b>pending callbacks: </b>executes I/O callbacks deferred to\n                  the next loop iteration.\n                </li>\n                <li>\n                  <b>idle prepare: </b>only used internally.\n                </li>\n                <li>\n                  <b>poll: </b>retrieve new I/O events; execute I/O related\n                  callbacks (almost all with the exception of close callbacks,\n                  the ones scheduled by timers, and setImmediate()); node will\n                  block here when appropriate.\n                </li>\n                <li>\n                  <b>check: </b>setImmediate() callbacks are invoked here.\n                </li>\n                <li>\n                  <b>close callbacks: </b>some close callbacks, e.g.\n                  socket.on('close', ...)\n                </li>\n                setImmediate() is processed in the Check handlers phase, while\n                process.nextTick() is processed at the starting of the event\n                loop and between each phase of the event loop.\n              </ul>\n              <br />\n              <h3>13. ipc</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={ipc}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>14. nextTick </h3>\n              This code set up a simple transaction when an instance of\n              <div style={titles}>\n                <PrismCode\n                  code={nextTick}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>15. Timers</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={timers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>16. Handling Undefined Input</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={handles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <i>node echo.js HOME PWD NOT_DEFINED</i>\n              <br />\n              <h3>17. Node.js on Browser</h3>\n              <b> Render HTML</b>\n              <div style={titles}>\n                <PrismCode\n                  code={Render_HTML}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>18. Date time main</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Date_time_main}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                19. Provide some example of config file separation for dev and\n                prod environments.\n              </h3>\n              <p>A perfect and flawless configuration setup should ensure:</p>\n              <ul>\n                <li>\n                  Keys can be read from file and from environment variable.\n                </li>\n                <li>Secrets are kept outside committed code.</li>\n              </ul>\n              <br />\n              <h3>20. Explain usage of NODE_ENV .</h3>\n              <p>\n                NODE_ENV allows components to provide better diagnostics during\n                development, for example by disabling caching or emitting\n                verbose log statements. Setting NODE_ENV to production makes our\n                application 3 times faster.\n              </p>\n              <br />\n              <h3>21. Why should you separate Express 'app' and 'server'?</h3>\n              <ul>\n                <li>\n                  In a Node.js and Express application, the app object is\n                  responsible for creating and configuring the Express\n                  application, while the server object is responsible for\n                  creating the HTTP server to listen for incoming requests.\n                </li>\n                <br />\n                <li>\n                  It is a good practice to separate the app and server objects\n                  because it allows for better flexibility and scalability of\n                  the application. By separating the two, you can reuse the app\n                  object and configure it for different environments (e.g.\n                  development, staging, production) without having to recreate\n                  the HTTP server each time.\n                </li>\n              </ul>\n              <br />\n              <h3>22. OS - Provides information about the operating system</h3>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(Ejs);\n"]},"metadata":{},"sourceType":"module"}