{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var UDP_server=\"\\nvar dgram = require('dgram');\\nvar client = dgram.createSocket(\\\"udp4\\\");\\nvar server = dgram.createSocket(\\\"udp4\\\");\\nvar message = process.argv[2] || \\\"message\\\";\\nmessage = new Buffer(message);\\nserver.on(\\\"message\\\", function(msg) {\\n    process.stdout.write(\\\"Got message: \\\" + msg + \\\"\\n\\\");\\n    process.exit();\\n}).bind(41234);\\n\\nclient.send(message, 0, message.length, 41234, \\\"localhost\\\");\\n\".trim();var assert=\"var assert = require('assert');\\n    assert(5 > 7);\\n\".trim();var http=\"var http = require('http');\\nhttp.createServer(function (req, res) {\\n res.writeHead(200, { 'Content-Type': 'text/html' });\\n   //res.write('write name in url to see o/p');\\n     res.write(req.url);\\n     res.end();\\n}).listen(4000);\\n\".trim();var https=\"var https = require('https');\\nhttps.createServer(function (req, res) {\\n     res.writeHead(200, {'Content-Type': 'text/plain'});\\n     res.write('Hello World!');\\n     res.end();\\n}).listen(8080);\\n\".trim();var HTTPWithoutLibrary=\"const https = require('https')\\nconst url = 'https://api.darksky.net/forecast/9d1465c6f3bb7a6c71944bdd8548d026\\n/40,-75'\\nconst request = https.request(url, (response) => {\\n let data = ''\\n   response.on('data', (chunk) => {\\n   data = data + chunk.toString()\\n })\\n \\n response.on('end', () => {\\n   const body = JSON.parse(data) \\n   console.log(body) \\n  })\\n})\\n\\nrequest.on('error', (error) => {\\n   console.log('An error', error)\\n})\\nrequest.end()\\n\".trim();var nets=\"var net = require('net');\\n\".trim();var URL=\"var url = require('url');\\nvar adr = 'http://localhost:8080/default.htm?year=2017&month=february';\\nvar q = url.parse(adr, true);\\n  console.log(q.host);\\n  console.log(q.pathname);\\n  console.log(q.search);\\n  \\nvar qdata = q.query;\\n  console.log(qdata.month);\\n\".trim();var sendEmail=\"var nodemailer = require('nodemailer');\\nvar transporter = nodemailer.createTransport({\\n   service: 'gmail',\\n     auth: {\\n     user: 'youremail@gmail.com',\\n     pass: 'yourpassword'\\n     }\\n});\\n\\nvar mailOptions = {\\n     from: 'youremail@gmail.com',\\n     to: 'myfriend@yahoo.com',\\n     subject: 'Sending Email using Node.js',\\n     text: 'That was easy!'\\n    };\\n    \\ntransporter.sendMail(mailOptions, function(error, info){\\n if (error) {\\n   console.log(error);\\n   } \\n   else {\\n   console.log('Email sent: ' + info.response);\\n }\\n});\\n\".trim();var crypto=\"\\nconst crypto = require(\\\"crypto\\\");\\n\\n//.createHash('sha1')md5,sha1\\n\\nconst hash = crypto.createHash(\\\"sha256\\\").update(\\\"password\\\").digest(\\\"hex\\\");\\nconsole.log(hash);\".trim();var decrypo=\"\\nconst crypto = require(\\\"crypto\\\");\\n\\nconst algorithm = \\\"aes-192-cbc\\\";\\nconst password = \\\"password used to generate key\\\";\\nconst key = crypto.scryptSync(password, \\\"salt\\\", 24);\\nconst decipher = crypto.createDecipher(algorithm, key);\\n\\nlet decrypted = \\\"\\\";\\ndecipher.on(\\\"readable\\\", () => {\\n  let chunk;\\n  while (null !== (chunk = decipher.read())) {\\n    encrypted += chunk.toString(\\\"utf8\\\");\\n  }\\n});\\n\\ndecipher.on(\\\"end\\\", () => console.log(decrypted));\\n\\nconst encrypted = \\\"\\\";\\ndecipher.write(encrypted, \\\"hex\\\");\\ndecipher.end();\".trim();var encrde=\"\\nconst crypto = require(\\\"crypto\\\");\\n\\nconst algorithm = \\\"aes-256-cbc\\\";\\nconst key = crypto.randomBytes(32);\\nconst iv = crypto.randomBytes(16);\\n\\nfunction encrypt(text) {\\n  let cipher = crypto.createCipheriv(\\\"aes-256-cbc\\\", Buffer.from(key), iv);\\n  let encrypted = cipher.update(text);\\n  \\n  encrypted = Buffer.concat([encrypted, cipher.final()]);\\n  return { iv: iv.toString(\\\"hex\\\"), encryptedData: encrypted.toString(\\\"hex\\\") };\\n}\\n\\nfunction decrypt(text) {\\n  let iv = Buffer.from(text.iv, \\\"hex\\\");\\n  let encryptedText = Buffer.from(text.encryptedData, \\\"hex\\\");\\n  let decipher = crypto.createDecipheriv(\\\"aes-256-cbc\\\", Buffer.from(key), iv);\\n  let decrypted = decipher.update(encryptedText);\\n  \\n  decrypted = Buffer.concat([decrypted, decipher.final()]);\\n  return decrypted.toString();\\n}\\nvar hw = encrypt(\\\"Some serious stuff\\\");\\nconsole.log(hw);\\nconsole.log(decrypt(hw));\".trim();var encrypt=\"\\nconst crypto = require(\\\"crypto\\\");\\n\\nconst algorithm = \\\"aes-192-cbc\\\";\\nconst password = \\\"password used to generate key\\\";\\nconst key = crypto.scryptSync(password, \\\"salt\\\", 24);\\nconst cipher = crypto.createCipher(algorithm, key);\\n\\nlet encrypted = \\\"\\\";\\ncipher.on(\\\"readable\\\", () => {\\n  let chunk;\\n  while (null !== (chunk = cipher.read())) {\\n    encrypted += chunk.toString(\\\"hex\\\");\\n  }\\n});\\n\\ncipher.on(\\\"end\\\", () => console.log(encrypted));\\n\\ncipher.write(\\\"some clear text data\\\");\\n\\ncipher.end();\".trim();var dns=\"\\nconst dns = require(\\\"dns\\\");\\n\\ndns.lookup(\\\"edurights.herokuapp.com\\\", (err, value) => {\\n  if (err) {\\n    console.log(err);\\n    return;\\n  }\\n\\n  console.log(value);\\n});\".trim();var net=\"\\nconst net = require(\\\"net\\\");\\n\\nconst server = net.createServer();\\n\\nserver.listen({\\n  host: \\\"localhost\\\",\\n  port: 5000,\\n});\\n\\nserver.on(\\\"connection\\\", (client) => {\\n  console.log(\\\"Client connected\\\");\\n});\\n\\n\\n//\\n//run in another cli\\n\\nconst net = require(\\\"net\\\");\\nconst client = net.createConnection({\\n  port: 5000,\\n});\\n\".trim();var os=\"\\nconst os = require(\\\"os\\\");\\n\\nconsole.log(os.arch());\\n\\nconsole.log(os.cpus());\\n\\nconsole.log(os.freemem());\\n\\nconsole.log(os.getPriority(13512));\\n\\nconsole.log(os.homedir());\\n\\nconsole.log(os.hostname());\\n\\nconsole.log(os.networkInterfaces());\\n\\nconsole.log(os.platform());\\n\\nconsole.log(os.totalmem());\\n\\nconsole.log(os.userInfo());\".trim();var path=\"\\nconst path = require(\\\"path\\\");\\n\\nconst pathObj = path.parse(__filename);\\nconst pathDit = path.dirname(\\\"/path/path.js\\\");\\nconst pathBasename = path.basename(\\\"/path/path.js\\\");\\nconst pathExtname = path.extname(\\\"/path/path.js\\\");\\nconst pathNormalize = path.normalize(\\\"/path/path.js\\\");\\nconst pathJoin = path.join(\\\"path\\\", \\\"os\\\", \\\"...\\\", \\\"output.txt\\\");\\n\\nconsole.log(pathJoin);\\n\".trim();var NodeJsCodes=/*#__PURE__*/function(_Component){_inherits(NodeJsCodes,_Component);function NodeJsCodes(){_classCallCheck(this,NodeJsCodes);return _possibleConstructorReturn(this,_getPrototypeOf(NodeJsCodes).apply(this,arguments));}_createClass(NodeJsCodes,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. UDP Server\"),\"Let's create a simple program that allows the user to send data between two  UDP servers:\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"node udp.js \\\"my message\\\" \",React.createElement(\"br\",null),\"Which will result in the following output:\",React.createElement(\"br\",null),\"Got message: my message\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:UDP_server,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Crypto\"),\"crypto module to perform cryptographic operations on data. \",React.createElement(\"br\",null),\"can do cryptographic operations on strings, buffer, and streams.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:crypto,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Decrypo\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:decrypo,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. Encrypt\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:encrypt,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Encrypt-Decrypt\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:encrde,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. DNS\"),\"DNS module use to find out information about domain names and IP addresses.\",React.createElement(\"br\",null),\"reverse function to find any reverse DNS records that are configured for IP addresses.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:dns,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. Net\"),\"how to make a server / client pair of programs using the low level Net module and also how to create a simple web server using the NodeJS HTTP module.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:net,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"7. OS\"),\"The os module provides API for getting information about hardware related like CPU, memory, directories, IP address and many more.\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"os.arch(): \"),\"Return the architecture of the processor.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"os.cpus(): \"),\"Returns an array of the object which contains information of logical CPUs.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"os.freemem(): \"),\"Returns free main memory bytes in integer.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"os.getPriority(pid): \"),\"Returns the scheduling priority of the process.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"os.homedir(): \"),\"Method current user\\u2019s home directory as a string.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"os.hostname(): \"),\"Returns the hostname of the operating system.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"os.networkInterfaces():: \"),\"Method returns objects containing information about network interfacing devices.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"os.platform(): \"),\"Return information about platform.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"os.totalmem(): \"),\"Returns total system memory in bytes as a string.\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:os,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"8. Path\"),\"The path module provides a way to work with files and directory path.\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"path.dirname(): \"),\"This method allows you to get the directory name of a given path. It does not return the last part of the given path.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"path.basename(): \"),\"Method returns the last part of a given path.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"path.extname(): \"),\"Method returns the extension of the path from the last part of the path.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"If there is no . (period) in the last portion of the path, then an empty string is returned.\")),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"path.normalize(): \"),\"Method normalize the given path, by resolving \\u2018..\\u2019, \\u2018.\\u2019 etc.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"If multiple slashes are found they are replaced by a single slash.\")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"path.join(): \"),\"Joins all the given path segments together. All the arguments must be string.\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:path,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Node.js HTTP Module\"),React.createElement(\"br\",null),React.createElement(\"p\",null,\"A set of functions you want to include in your application.\"),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Node.js has a set of built-in modules which you can use without any further installation.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"assert - Provides a set of assertion tests The assert module provides a way of testing expressions. If the expression evaluates to 0, or false, an assertion failure is being caused, and the program is terminated.\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:assert,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"b\",null,\"o/p: \"),\"AssertionError: false == true\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Method -\"),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"assert() - Checks if a value is true. Same as assert.ok()\"),React.createElement(\"li\",null,\"deepEqual() - Checks if two values are equal\"),React.createElement(\"li\",null,\"deepStrictEqual() - Checks if two values are equal, using the strict equal operator (===)\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"http - To make Node.js act as an HTTP server\"),React.createElement(\"br\",null),\"The HTTP module provides a way of making Node.js transfer data over HTTP\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:http,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"https - To make Node.js act as an HTTPS server.\"),React.createElement(\"br\",null),\"The HTTPS module provides a way of making Node.js transfer data over HTTP TLS/SSL protocol, which is the secure HTTP protocol.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:https,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"createServer() -Creates an HTTPS server\"),React.createElement(\"li\",null,\"get() - Sets the method to GET, and returns an object containing the users request\"),React.createElement(\"li\",null,\"globalAgent - Returns the HTTPS Agent\"),React.createElement(\"li\",null,\"request - Makes a request to a secure web server\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"HTTP Requests Without a Library\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:HTTPWithoutLibrary,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"net - To create servers and clients\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:nets,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"connect() - Creates a new connection to the server, and returns a new Socket\"),React.createElement(\"li\",null,\"createConnection() - Creates a new connection to the server, and returns a new Socket\"),React.createElement(\"li\",null,\"createServer() -Creates a new server\"),React.createElement(\"li\",null,\"isIP - Checks if the specified value is an IP address\"),React.createElement(\"li\",null,\"isIPv4 - Checks if the specified value is an IPv4 address\"),React.createElement(\"li\",null,\"isIPv6 - Checks if the specified value is an IPv6 address\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"HTTP Requests Without a Library\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:HTTPWithoutLibrary,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Node.js URL Module\"),React.createElement(\"br\",null),\"The URL module splits up a web address into readable parts. Parse an address with the url.parse() method, and it will return a URL object with each part of the address as properties:\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:URL,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),\"o/p - localhost:8080 /default\",React.createElement(\"br\",null),\"?year=2017&month=february\",React.createElement(\"br\",null),\"february\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Node.js Send an Email\"),React.createElement(\"br\",null),\"The Nodemailer Module The Nodemailer module makes it easy to send emails from your computer.\",React.createElement(\"br\",null),React.createElement(\"i\",null,\"Send an Email\"),React.createElement(\"br\",null),\"Use the username and password from your selected email provider to send an email. This tutorial wi ll show you how to use your Gmail account to send an email:\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:sendEmail,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return NodeJsCodes;}(Component);export default withStyles(styles)(NodeJsCodes);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/nodeJs/nodeDeep/codes.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","UDP_server","trim","assert","http","https","HTTPWithoutLibrary","nets","URL","sendEmail","crypto","decrypo","encrde","encrypt","dns","net","os","path","NodeJsCodes","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst UDP_server = `\nvar dgram = require('dgram');\nvar client = dgram.createSocket(\"udp4\");\nvar server = dgram.createSocket(\"udp4\");\nvar message = process.argv[2] || \"message\";\nmessage = new Buffer(message);\nserver.on(\"message\", function(msg) {\n    process.stdout.write(\"Got message: \" + msg + \"\\n\");\n    process.exit();\n}).bind(41234);\n\nclient.send(message, 0, message.length, 41234, \"localhost\");\n`.trim();\n\nconst assert = `var assert = require('assert');\n    assert(5 > 7);\n`.trim()\n\nconst http = `var http = require('http');\nhttp.createServer(function (req, res) {\n res.writeHead(200, { 'Content-Type': 'text/html' });\n   //res.write('write name in url to see o/p');\n     res.write(req.url);\n     res.end();\n}).listen(4000);\n`.trim()\n\nconst https = `var https = require('https');\nhttps.createServer(function (req, res) {\n     res.writeHead(200, {'Content-Type': 'text/plain'});\n     res.write('Hello World!');\n     res.end();\n}).listen(8080);\n`.trim()\n\nconst HTTPWithoutLibrary = `const https = require('https')\nconst url = 'https://api.darksky.net/forecast/9d1465c6f3bb7a6c71944bdd8548d026\n/40,-75'\nconst request = https.request(url, (response) => {\n let data = ''\n   response.on('data', (chunk) => {\n   data = data + chunk.toString()\n })\n \n response.on('end', () => {\n   const body = JSON.parse(data) \n   console.log(body) \n  })\n})\n\nrequest.on('error', (error) => {\n   console.log('An error', error)\n})\nrequest.end()\n`.trim()\n\nconst nets = `var net = require('net');\n`.trim()\n\nconst URL = `var url = require('url');\nvar adr = 'http://localhost:8080/default.htm?year=2017&month=february';\nvar q = url.parse(adr, true);\n  console.log(q.host);\n  console.log(q.pathname);\n  console.log(q.search);\n  \nvar qdata = q.query;\n  console.log(qdata.month);\n`.trim()\n\nconst sendEmail = `var nodemailer = require('nodemailer');\nvar transporter = nodemailer.createTransport({\n   service: 'gmail',\n     auth: {\n     user: 'youremail@gmail.com',\n     pass: 'yourpassword'\n     }\n});\n\nvar mailOptions = {\n     from: 'youremail@gmail.com',\n     to: 'myfriend@yahoo.com',\n     subject: 'Sending Email using Node.js',\n     text: 'That was easy!'\n    };\n    \ntransporter.sendMail(mailOptions, function(error, info){\n if (error) {\n   console.log(error);\n   } \n   else {\n   console.log('Email sent: ' + info.response);\n }\n});\n`.trim()\n\nconst crypto = `\nconst crypto = require(\"crypto\");\n\n//.createHash('sha1')md5,sha1\n\nconst hash = crypto.createHash(\"sha256\").update(\"password\").digest(\"hex\");\nconsole.log(hash);`.trim();\n\nconst decrypo = `\nconst crypto = require(\"crypto\");\n\nconst algorithm = \"aes-192-cbc\";\nconst password = \"password used to generate key\";\nconst key = crypto.scryptSync(password, \"salt\", 24);\nconst decipher = crypto.createDecipher(algorithm, key);\n\nlet decrypted = \"\";\ndecipher.on(\"readable\", () => {\n  let chunk;\n  while (null !== (chunk = decipher.read())) {\n    encrypted += chunk.toString(\"utf8\");\n  }\n});\n\ndecipher.on(\"end\", () => console.log(decrypted));\n\nconst encrypted = \"\";\ndecipher.write(encrypted, \"hex\");\ndecipher.end();`.trim();\n\nconst encrde = `\nconst crypto = require(\"crypto\");\n\nconst algorithm = \"aes-256-cbc\";\nconst key = crypto.randomBytes(32);\nconst iv = crypto.randomBytes(16);\n\nfunction encrypt(text) {\n  let cipher = crypto.createCipheriv(\"aes-256-cbc\", Buffer.from(key), iv);\n  let encrypted = cipher.update(text);\n  \n  encrypted = Buffer.concat([encrypted, cipher.final()]);\n  return { iv: iv.toString(\"hex\"), encryptedData: encrypted.toString(\"hex\") };\n}\n\nfunction decrypt(text) {\n  let iv = Buffer.from(text.iv, \"hex\");\n  let encryptedText = Buffer.from(text.encryptedData, \"hex\");\n  let decipher = crypto.createDecipheriv(\"aes-256-cbc\", Buffer.from(key), iv);\n  let decrypted = decipher.update(encryptedText);\n  \n  decrypted = Buffer.concat([decrypted, decipher.final()]);\n  return decrypted.toString();\n}\nvar hw = encrypt(\"Some serious stuff\");\nconsole.log(hw);\nconsole.log(decrypt(hw));`.trim();\n\nconst encrypt = `\nconst crypto = require(\"crypto\");\n\nconst algorithm = \"aes-192-cbc\";\nconst password = \"password used to generate key\";\nconst key = crypto.scryptSync(password, \"salt\", 24);\nconst cipher = crypto.createCipher(algorithm, key);\n\nlet encrypted = \"\";\ncipher.on(\"readable\", () => {\n  let chunk;\n  while (null !== (chunk = cipher.read())) {\n    encrypted += chunk.toString(\"hex\");\n  }\n});\n\ncipher.on(\"end\", () => console.log(encrypted));\n\ncipher.write(\"some clear text data\");\n\ncipher.end();`.trim();\n\nconst dns = `\nconst dns = require(\"dns\");\n\ndns.lookup(\"edurights.herokuapp.com\", (err, value) => {\n  if (err) {\n    console.log(err);\n    return;\n  }\n\n  console.log(value);\n});`.trim();\n\nconst net = `\nconst net = require(\"net\");\n\nconst server = net.createServer();\n\nserver.listen({\n  host: \"localhost\",\n  port: 5000,\n});\n\nserver.on(\"connection\", (client) => {\n  console.log(\"Client connected\");\n});\n\n\n//\n//run in another cli\n\nconst net = require(\"net\");\nconst client = net.createConnection({\n  port: 5000,\n});\n`.trim();\n\nconst os = `\nconst os = require(\"os\");\n\nconsole.log(os.arch());\n\nconsole.log(os.cpus());\n\nconsole.log(os.freemem());\n\nconsole.log(os.getPriority(13512));\n\nconsole.log(os.homedir());\n\nconsole.log(os.hostname());\n\nconsole.log(os.networkInterfaces());\n\nconsole.log(os.platform());\n\nconsole.log(os.totalmem());\n\nconsole.log(os.userInfo());`.trim();\n\nconst path = `\nconst path = require(\"path\");\n\nconst pathObj = path.parse(__filename);\nconst pathDit = path.dirname(\"/path/path.js\");\nconst pathBasename = path.basename(\"/path/path.js\");\nconst pathExtname = path.extname(\"/path/path.js\");\nconst pathNormalize = path.normalize(\"/path/path.js\");\nconst pathJoin = path.join(\"path\", \"os\", \"...\", \"output.txt\");\n\nconsole.log(pathJoin);\n`.trim();\n\n\nclass NodeJsCodes extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. UDP Server</h3>\n              Let's create a simple program that allows the user to send data between two  UDP servers:\n              <br />\n              <br />\n              node udp.js \"my message\" <br />\n              Which will result in the following output:<br />\n              Got message: my message\n              <div style={titles}>\n                <PrismCode\n                  code={UDP_server}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Crypto</h3>\n              crypto module to perform cryptographic operations on data. <br />\n              can do cryptographic operations on strings, buffer, and streams.\n              <div style={titles}>\n                <PrismCode\n                  code={crypto}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Decrypo</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={decrypo}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Encrypt</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={encrypt}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Encrypt-Decrypt</b>\n              <div style={titles}>\n                <PrismCode\n                  code={encrde}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. DNS</h3>\n              DNS module use to find out information about domain names and IP addresses.<br />\n              reverse function to find any reverse DNS records that are configured for IP addresses.\n              <div style={titles}>\n                <PrismCode\n                  code={dns}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Net</h3>\n              how to make a server / client pair of programs using the low level Net module and also how to create a simple web\n              server using the NodeJS HTTP module.\n              <div style={titles}>\n                <PrismCode\n                  code={net}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7. OS</h3>\n              The os module provides API for getting information about hardware related like CPU, memory, directories, IP address\n              and many more.\n              <br />\n              <ul>\n                <li><b>os.arch(): </b>Return the architecture of the processor.</li>\n                <li><b>os.cpus(): </b>Returns an array of the object which contains information of logical CPUs.</li>\n                <li><b>os.freemem(): </b>Returns free main memory bytes in integer.</li>\n                <li><b>os.getPriority(pid): </b>Returns the scheduling priority of the process.</li>\n                <li><b>os.homedir(): </b>Method current user’s home directory as a string.</li>\n                <li><b>os.hostname(): </b>Returns the hostname of the operating system.</li>\n                <li><b>os.networkInterfaces():: </b>Method returns objects containing information about network interfacing devices.</li>\n                <li><b>os.platform(): </b>Return information about platform.</li>\n                <li><b>os.totalmem(): </b>Returns total system memory in bytes as a string.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={os}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>8. Path</h3>\n              The path module provides a way to work with files and directory path.\n              <br />\n              <ul>\n                <li><b>path.dirname(): </b>This method allows you to get the directory name of a given path. It does not return the last part of the given path.</li>\n                <li><b>path.basename(): </b>Method returns the last part of a given path.</li>\n                <li><b>path.extname(): </b>Method returns the extension of the path from the last part of the path.</li>\n                <ul>\n                  <li>If there is no . (period) in the last portion of the path, then an empty string is returned.</li>\n                </ul>\n                <br />\n                <li><b>path.normalize(): </b>Method normalize the given path, by resolving ‘..’, ‘.’ etc.</li>\n                <ul>\n                  <li>If multiple slashes are found they are replaced by a single slash.</li>\n                </ul>\n                <li><b>path.join(): </b>Joins all the given path segments together. All the arguments must be string.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={path}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Node.js HTTP Module</b>\n              <br />\n              <p>A set of functions you want to include in your application.</p>\n              <br />\n              <ul>\n                <li>Node.js has a set of built-in modules which you can use without any further installation.</li>\n                <br />\n\n                <li>\n                  assert - Provides a set of assertion tests The assert module provides a way of testing expressions. If\n                  the expression evaluates to 0, or false, an assertion failure is being caused, and the program is\n                  terminated.\n                </li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={assert}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <b>o/p: </b>AssertionError: false == true\n              <br />\n              <br />\n              <b>Method -</b>\n              <br />\n              <ul>\n                <li>assert() - Checks if a value is true. Same as assert.ok()</li>\n                <li>deepEqual() - Checks if two values are equal</li>\n                <li>deepStrictEqual() - Checks if two values are equal, using the strict equal operator (===)</li>\n              </ul>\n              <br />\n              <br />\n\n              <b>http - To make Node.js act as an HTTP server</b>\n              <br />\n              The HTTP module provides a way of making Node.js transfer data over HTTP\n              <div style={titles}>\n                <PrismCode\n                  code={http}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>https - To make Node.js act as an HTTPS server.</b>\n              <br />\n              The HTTPS module provides a way of making Node.js transfer data over HTTP TLS/SSL protocol,\n              which is the secure HTTP protocol.\n              <div style={titles}>\n                <PrismCode\n                  code={https}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <ul>\n                <li>createServer() -Creates an HTTPS server</li>\n                <li>get() - Sets the method to GET, and returns an object containing the users request</li>\n                <li>globalAgent - Returns the HTTPS Agent</li>\n                <li>request - Makes a request to a secure web server</li>\n              </ul>\n              <br />\n              <br />\n\n              <b>HTTP Requests Without a Library</b>\n              <div style={titles}>\n                <PrismCode\n                  code={HTTPWithoutLibrary}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>net - To create servers and clients</b>\n              <div style={titles}>\n                <PrismCode\n                  code={nets}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <ul>\n                <li>connect() - Creates a new connection to the server, and returns a new Socket</li>\n                <li>createConnection() - Creates a new connection to the server, and returns a new Socket</li>\n                <li>createServer() -Creates a new server</li>\n                <li>isIP - Checks if the specified value is an IP address</li>\n                <li>isIPv4 - Checks if the specified value is an IPv4 address</li>\n                <li>isIPv6 - Checks if the specified value is an IPv6 address</li>\n              </ul>\n              <br />\n              <br />\n\n              <b>HTTP Requests Without a Library</b>\n              <div style={titles}>\n                <PrismCode\n                  code={HTTPWithoutLibrary}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Node.js URL Module</b>\n              <br />\n              The URL module splits up a web address into readable parts.\n              Parse an address with the url.parse() method, and it will return a URL object with each part of the\n              address as properties:\n              <div style={titles}>\n                <PrismCode\n                  code={URL}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              o/p - localhost:8080\n              /default\n              <br />\n              ?year=2017&month=february\n              <br />\n              february\n              <br />\n              <br />\n\n              <b>Node.js Send an Email</b>\n              <br />\n              The Nodemailer Module\n              The Nodemailer module makes it easy to send emails from your computer.\n              <br />\n              <i>Send an Email</i>\n              <br />\n              Use the username and password from your selected email provider to send an email. This tutorial wi\n              ll show you how to use\n              your Gmail account to send an email:\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={sendEmail}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(NodeJsCodes));\n"]},"metadata":{},"sourceType":"module"}