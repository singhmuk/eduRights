{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic5.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst rob = `\nconst rob = (nums = []) => {\n  const memo = {}\n  const aux = (index = 0) => {\n    if (memo[index] !== undefined) {\n      return memo[index]\n    }\n    if (index >= nums.length) {\n      return 0\n    }\n    memo[index] = Math.max(\n      aux(index + 2) + nums[index],\n      aux(index + 1),\n    )\n    return memo[index]\n  }\n  return aux()\n}\n\n\nconsole.log(rob([2,7,9,3,1]))`.trim();\nconst maxArea = `\nconst maxArea = (height = []) => {\n  let max = 0\n  let left = 0\n  let right = height.length - 1\n  while (left < right) {\n    max = Math.max(max, Math.min(height[left], height[right]) * (right - left))\n    if (height[left] <= height[right]) {\n      left += 1\n    } else {\n      right -= 1\n    }\n  }\n  return max\n}\n\nconsole.log(maxArea([1,8,6,2,5,4,8,3,7]))`.trim();\nconst isValidSudoku = `\nconst isValidSudoku = (board = []) => {\n  const rows = []\n  const columns = []\n  const boxes = []\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      const content = board[i][j]\n      if (content !== '.') {\n        if (!rows[i]) {\n          rows[i] = {}\n        }\n        if (rows[i][content]) {\n          return false\n        }\n        rows[i][content] = 1\n\n        if (!columns[j]) {\n          columns[j] = {}\n        }\n        if (columns[j][content]) {\n          return false\n        }\n        columns[j][content] = 1\n        const boxNum = Math.floor(i / 3) * 3 + Math.floor(j / 3)\n        if (!boxes[boxNum]) {\n          boxes[boxNum] = {}\n        }\n        if (boxes[boxNum][content]) {\n          return false\n        }\n        boxes[boxNum][content] = 1\n      }\n    }\n  }\n  return true\n}\n\nconsole.log(isValidSudoku([\n  [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n  [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n  [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n  [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n  [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n  [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n  [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n  [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n  [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n]))`.trim();\nconst jump = `\nconst jump = (nums = []) => {\n  let steps = 0\n  let currentJumpIndex = 0\n  let nextJumpIndex = 0\n  for (let i = 0; i < nums.length - 1; i++) {\n    nextJumpIndex = Math.max(i + nums[i], nextJumpIndex)\n    if (i === currentJumpIndex) {\n      steps += 1\n      currentJumpIndex = nextJumpIndex\n    }\n  }\n  return steps\n}\n\n\nconsole.log(jump([2,3,1,1,4]))`.trim();\nconst climbStairs = `\nconst climbStairs = (n) => {\n  const memo = {}\n  const aux = (count = 0) => {\n    if (memo[count] !== undefined) {\n      return memo[count]\n    }\n    if (count === n) {\n      return 1\n    }\n    if (count > n) {\n      return 0\n    }\n    memo[count] = aux(count + 1) + aux(count + 2)\n    return memo[count]\n  }\n  return aux()\n}\n\nconsole.log(climbStairs(3))`.trim();\nconst find132pattern = `\nconst find132pattern = function (nums) {\n  let max = -Infinity\n  const stack = []\n  for (let i = nums.length - 1; i >= 0; i--) {\n    while (nums[i] > stack[stack.length - 1]) {\n      max = stack.pop()\n    }\n    if (nums[i] < max) {\n      return true\n    }\n    stack.push(nums[i])\n  }\n  return false\n}\n\nconsole.log(find132pattern([3,1,4,2]))`.trim();\nconst numIdenticalPairs = `\nconst numIdenticalPairs = function (nums) {\n  let count = 0\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[i] === nums[j]) {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\nconsole.log(numIdenticalPairs([1,2,3,1,1,3]))`.trim();\nconst graph = ``.trim(); // const stack = ``.trim();\n// const stack = ``.trim();\n// const stack = ``.trim();\n\nclass DSLogic5 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, \"1. House Robber.\"), \"You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }), \"Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }), \"Input: nums = [1,2,3,1]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }), \"Output: 4\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }), \"Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: rob,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, \"10. Container With Most Water\"), \"Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, \"Note: \"), \"You may not slant the container and n is at least 2.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }), \"Example:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }), \"Input: [1,8,6,2,5,4,8,3,7]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }), \"Output: 49\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maxArea,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, \"5. Valid Sudoku.\"), \"Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }), \"Each row must contain the digits 1-9 without repetition.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }), \"Each column must contain the digits 1-9 without repetition.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }), \"Each of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, \"Note: \"), \"A Sudoku board (partially filled) could be valid but is not necessarily solvable.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }), \"Only the filled cells need to be validated according to the mentioned rules.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }), \"The given board contain only digits 1-9 and the character '.'.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }), \"The given board size is always 9x9.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isValidSudoku,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, \"9. Jump Game\"), \"Given an array of non-negative integers, you are initially positioned at the first index of the array.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }), \"Each element in the array represents your maximum jump length at that position.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }), \"Your goal is to reach the last index in the minimum number of jumps.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }), \"Input: [2,3,1,1,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }), \"Output: 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }), \"Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, \"N: \"), \"You can assume that you can always reach the last index.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: jump,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, \"10. Climbing Stairs.\"), \"You are climbing a stair case. It takes n steps to reach to the top.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }), \"Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }), \"Input: 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }), \"Output: 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }), \"Explanation: There are two ways to climb to the top.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }), \"1. 1 step + 1 step\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }), \"2. 2 steps\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }), \"Input: 3\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }), \"Output: 3\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }), \"Explanation: There are three ways to climb to the top.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }), \"1. 1 step + 1 step + 1 step\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }), \"2. 1 step + 2 steps\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }), \"3. 2 steps + 1 step\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: climbStairs,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, \"5. 132 Pattern.\"), \"Input: nums = [1,2,3,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }), \"Output: false\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }), \"Explanation: There is no 132 pattern in the sequence.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: find132pattern,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, \"6. Number of Good Pairs.\"), \"Input: nums = [1,2,3,1,1,3] \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }), \"Output: 4 \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }), \"Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: numIdenticalPairs,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, \"7. \"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: graph,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: graph,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: graph,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: graph,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(DSLogic5);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic5.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","rob","trim","maxArea","isValidSudoku","jump","climbStairs","find132pattern","numIdenticalPairs","graph","DSLogic5","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst rob = `\nconst rob = (nums = []) => {\n  const memo = {}\n  const aux = (index = 0) => {\n    if (memo[index] !== undefined) {\n      return memo[index]\n    }\n    if (index >= nums.length) {\n      return 0\n    }\n    memo[index] = Math.max(\n      aux(index + 2) + nums[index],\n      aux(index + 1),\n    )\n    return memo[index]\n  }\n  return aux()\n}\n\n\nconsole.log(rob([2,7,9,3,1]))`.trim();\n\n\nconst maxArea = `\nconst maxArea = (height = []) => {\n  let max = 0\n  let left = 0\n  let right = height.length - 1\n  while (left < right) {\n    max = Math.max(max, Math.min(height[left], height[right]) * (right - left))\n    if (height[left] <= height[right]) {\n      left += 1\n    } else {\n      right -= 1\n    }\n  }\n  return max\n}\n\nconsole.log(maxArea([1,8,6,2,5,4,8,3,7]))`.trim();\n\nconst isValidSudoku = `\nconst isValidSudoku = (board = []) => {\n  const rows = []\n  const columns = []\n  const boxes = []\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      const content = board[i][j]\n      if (content !== '.') {\n        if (!rows[i]) {\n          rows[i] = {}\n        }\n        if (rows[i][content]) {\n          return false\n        }\n        rows[i][content] = 1\n\n        if (!columns[j]) {\n          columns[j] = {}\n        }\n        if (columns[j][content]) {\n          return false\n        }\n        columns[j][content] = 1\n        const boxNum = Math.floor(i / 3) * 3 + Math.floor(j / 3)\n        if (!boxes[boxNum]) {\n          boxes[boxNum] = {}\n        }\n        if (boxes[boxNum][content]) {\n          return false\n        }\n        boxes[boxNum][content] = 1\n      }\n    }\n  }\n  return true\n}\n\nconsole.log(isValidSudoku([\n  [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n  [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n  [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n  [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n  [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n  [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n  [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n  [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n  [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n]))`.trim();\n\nconst jump = `\nconst jump = (nums = []) => {\n  let steps = 0\n  let currentJumpIndex = 0\n  let nextJumpIndex = 0\n  for (let i = 0; i < nums.length - 1; i++) {\n    nextJumpIndex = Math.max(i + nums[i], nextJumpIndex)\n    if (i === currentJumpIndex) {\n      steps += 1\n      currentJumpIndex = nextJumpIndex\n    }\n  }\n  return steps\n}\n\n\nconsole.log(jump([2,3,1,1,4]))`.trim();\n\nconst climbStairs = `\nconst climbStairs = (n) => {\n  const memo = {}\n  const aux = (count = 0) => {\n    if (memo[count] !== undefined) {\n      return memo[count]\n    }\n    if (count === n) {\n      return 1\n    }\n    if (count > n) {\n      return 0\n    }\n    memo[count] = aux(count + 1) + aux(count + 2)\n    return memo[count]\n  }\n  return aux()\n}\n\nconsole.log(climbStairs(3))`.trim();\n\n\n\nconst find132pattern = `\nconst find132pattern = function (nums) {\n  let max = -Infinity\n  const stack = []\n  for (let i = nums.length - 1; i >= 0; i--) {\n    while (nums[i] > stack[stack.length - 1]) {\n      max = stack.pop()\n    }\n    if (nums[i] < max) {\n      return true\n    }\n    stack.push(nums[i])\n  }\n  return false\n}\n\nconsole.log(find132pattern([3,1,4,2]))`.trim();\n\nconst numIdenticalPairs = `\nconst numIdenticalPairs = function (nums) {\n  let count = 0\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[i] === nums[j]) {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\nconsole.log(numIdenticalPairs([1,2,3,1,1,3]))`.trim();\n\nconst graph = ``.trim();\n\n// const stack = ``.trim();\n\n// const stack = ``.trim();\n\n// const stack = ``.trim();\n\n\nclass DSLogic5 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. House Robber.</h3>\n              You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\n              <br/><br/>\nGiven a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.\n<br/><br/>\nInput: nums = [1,2,3,1]<br/>\nOutput: 4<br/>\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\n             Total amount you can rob = 1 + 3 = 4.\n              <div style={titles}>\n                <PrismCode\n                  code={rob}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>10. Container With Most Water</h3>\n              Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\n              <br/><br/>\n<b>Note: </b>You may not slant the container and n is at least 2.\n<br/><br/>\nExample:<br/>\n\nInput: [1,8,6,2,5,4,8,3,7]<br/>\nOutput: 49\n              <div style={titles}>\n                <PrismCode\n                  code={maxArea}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <h3>5. Valid Sudoku.</h3>\n              Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n              <br/><br/>\nEach row must contain the digits 1-9 without repetition.<br/>\nEach column must contain the digits 1-9 without repetition.<br/>\nEach of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.<br/><br/>\n<b>Note: </b>\nA Sudoku board (partially filled) could be valid but is not necessarily solvable.<br/>\nOnly the filled cells need to be validated according to the mentioned rules.<br/>\nThe given board contain only digits 1-9 and the character '.'.<br/>\nThe given board size is always 9x9.\n              <div style={titles}>\n                <PrismCode\n                  code={isValidSudoku}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>9. Jump Game</h3>\n              Given an array of non-negative integers, you are initially positioned at the first index of the array.\n              <br/>\nEach element in the array represents your maximum jump length at that position.<br/>\n\nYour goal is to reach the last index in the minimum number of jumps.<br/><br/>\nInput: [2,3,1,1,4]<br/>\nOutput: 2<br/>\nExplanation: The minimum number of jumps to reach the last index is 2.\n    Jump 1 step from index 0 to 1, then 3 steps to the last index.<br/><br/>\n    <b>N: </b>You can assume that you can always reach the last index.\n              <div style={titles}>\n                <PrismCode\n                  code={jump}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>10. Climbing Stairs.</h3>\n              You are climbing a stair case. It takes n steps to reach to the top.<br/>\n\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?<br/>\n\nExample 1:<br/>\n\nInput: 2<br/>\nOutput: 2<br/>\nExplanation: There are two ways to climb to the top.<br/>\n1. 1 step + 1 step<br/>\n2. 2 steps<br/><br/>\nExample 2:<br/>\n\nInput: 3<br/>\nOutput: 3<br/>\nExplanation: There are three ways to climb to the top.<br/>\n1. 1 step + 1 step + 1 step<br/>\n2. 1 step + 2 steps<br/>\n3. 2 steps + 1 step\n\n              <div style={titles}>\n                <PrismCode\n                  code={climbStairs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              \n\n              \n\n              <h3>5. 132 Pattern.</h3>\n              Input: nums = [1,2,3,4]<br/>\nOutput: false<br/>\nExplanation: There is no 132 pattern in the sequence.\n              <div style={titles}>\n                <PrismCode\n                  code={find132pattern}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>6. Number of Good Pairs.</h3>\n              Input: nums = [1,2,3,1,1,3] <br/>\nOutput: 4 <br/>\nExplanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.\n              <div style={titles}>\n                <PrismCode\n                  code={numIdenticalPairs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>7. </h3>\n\n              <div style={titles}>\n                <PrismCode\n                  code={graph}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3></h3>\n\n              <div style={titles}>\n                <PrismCode\n                  code={graph}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3></h3>\n\n              <div style={titles}>\n                <PrismCode\n                  code={graph}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3></h3>\n\n              <div style={titles}>\n                <PrismCode\n                  code={graph}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic5));\n"]},"metadata":{},"sourceType":"module"}