{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../styles.css';import Sidebar from'../sidebar';import PrismCode from'../prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var mainApp=\"\\nimport React, { useState, useEffect } from \\\"react\\\";\\n\\nimport { User } from \\\"./components/User\\\";\\nimport { AddUser } from \\\"./components/AddUser\\\";\\n\\nfunction App() {\\n  const [users, setUsers] = useState([]);\\n\\n  useEffect(() => {\\n    fetchData();\\n  }, []);\\n\\n  const fetchData = async () => {\\n    await fetch(\\\"https://jsonplaceholder.typicode.com/users\\\")\\n      .then((res) => res.json())\\n      .then((data) => setUsers(data))\\n      .catch((error) => console.log(error));\\n  };\\n\\n  const onAdd = async (name, email) => {\\n    await fetch(\\\"https://jsonplaceholder.typicode.com/users\\\", {\\n      method: \\\"POST\\\",\\n      body: JSON.stringify({\\n        name: name,\\n        email: email,\\n      }),\\n      headers: {\\n        \\\"Content-type\\\": \\\"application/json; charset=UTF-8\\\",\\n      },\\n    })\\n      .then((res) => {\\n        if (res.status !== 201) {\\n          return;\\n        } else {\\n          return res.json();\\n        }\\n      })\\n      .then((data) => {\\n        setUsers((users) => [...users, data]);\\n      })\\n      .catch((error) => console.log(error));\\n  };\\n\\n  const onEdit = async (id, name, email) => {\\n    await fetch('https://jsonplaceholder.typicode.com/users/'$'{id}', {\\n      method: \\\"PUT\\\",\\n      body: JSON.stringify({\\n        name: name,\\n        email: email,\\n      }),\\n      headers: {\\n        \\\"Content-type\\\": \\\"application/json; charset=UTF-8\\\",\\n      },\\n    })\\n      .then((res) => {\\n        if (res.status !== 200) {\\n          return;\\n        } else {\\n          return res.json();\\n        }\\n      })\\n      .then((data) => {\\n        const updatedUsers = users.map((user) => {\\n          if (user.id === id) {\\n            user.name = name;\\n            user.email = email;\\n          }\\n\\n          return user;\\n        });\\n\\n        setUsers((users) => updatedUsers);\\n      })\\n      .catch((error) => console.log(error));\\n  };\\n\\n  const onDelete = async (id) => {\\n    await fetch('https://jsonplaceholder.typicode.com/users/'$'{id}', {\\n      method: \\\"DELETE\\\",\\n    })\\n      .then((res) => {\\n        if (res.status !== 200) {\\n          return;\\n        } else {\\n          setUsers(\\n            users.filter((user) => {\\n              return user.id !== id;\\n            })\\n          );\\n        }\\n      })\\n      .catch((error) => console.log(error));\\n  };\\n\\n  return (\\n    <div className=\\\"App\\\">\\n      <h1>Users</h1>\\n      <AddUser onAdd={onAdd} />\\n      {users.map((user) => (\\n        <User\\n          id={user.id}\\n          key={user.id}\\n          name={user.name}\\n          email={user.email}\\n          onEdit={onEdit}\\n          onDelete={onDelete}\\n        />\\n      ))}\\n    </div>\\n  );\\n}\".trim();var compos=\"\\n//components/AddUser.js\\nexport const AddUser = ({ onAdd }) => {\\n  const handleOnSubmit = (e) => {\\n    e.preventDefault();\\n    onAdd(e.target.name.value, e.target.email.value);\\n    e.target.name.value = \\\"\\\";\\n    e.target.email.value = \\\"\\\";\\n  };\\n\\n  return (\\n    <form onSubmit={handleOnSubmit}>\\n      <h3>Add User</h3>\\n      <input placeholder=\\\"Name\\\" name=\\\"name\\\" />\\n      <input placeholder=\\\"Email\\\" name=\\\"email\\\" />\\n      <button onSubmit={handleOnSubmit}>Add</button>\\n      <hr />\\n    </form>\\n  );\\n};\\n\\n\\n//components/User.js\\nexport const User = ({ name, email, id, onEdit, onDelete }) => {\\n  const [isEdit, setIsEdit] = useState(false);\\n\\n  const handleEdit = () => {\\n    setIsEdit(!isEdit);\\n  };\\n\\n  const handleDelete = () => {\\n    onDelete(id);\\n  };\\n\\n  const handleOnEditSubmit = (e) => {\\n    e.preventDefault();\\n    onEdit(id, e.target.name.value, e.target.email.value);\\n    setIsEdit(!isEdit);\\n  };\\n\\n  return (\\n    <div>\\n      {isEdit ? (\\n        <form onSubmit={handleOnEditSubmit}>\\n          <input placeholder=\\\"Name\\\" name=\\\"name\\\" defaultValue={name} />\\n          <input placeholder=\\\"Email\\\" name=\\\"email\\\" defaultValue={email} />\\n          <button onSubmit={handleOnEditSubmit}>Save</button>\\n        </form>\\n      ) : (\\n        <div className=\\\"user\\\">\\n          <span className=\\\"user-name\\\">{name}</span>\\n          <span className=\\\"user-email\\\">{email}</span>\\n          <div>\\n            <button onClick={handleEdit}>Edit</button>\\n            <button onClick={handleDelete}>Delete</button>\\n          </div>\\n        </div>\\n      )}\\n    </div>\\n  );\\n};\\n\".trim();var edits=\"\\n//editLists.js\\nconst EditLists = (props) => {\\n  const [document, setDocument] = useState(props.currentLists);\\n  useEffect(() => {\\n    setDocument(props.currentLists);\\n  }, [props]);\\n\\n  const handleInputChange = (event) => {\\n    const { name, value } = event.target;\\n\\n    setDocument({ ...document, [name]: value });\\n  };\\n\\n  return (\\n    <form\\n      onSubmit={(event) => {\\n        event.preventDefault();\\n        if (!document.docTitle || !document.description || !document.publisher)\\n          return;\\n\\n        props.updateLists(document.id, document);\\n      }}\\n    >\\n      <input\\n        type=\\\"text\\\"\\n        name=\\\"docTitle\\\"\\n        placeholder=\\\"Enter Title\\\"\\n        value={document.docTitle}\\n        onChange={handleInputChange}\\n      />\\n      <input\\n        type=\\\"text\\\"\\n        name=\\\"description\\\"\\n        placeholder=\\\"Enter Description\\\"\\n        value={document.description}\\n        onChange={handleInputChange}\\n      />\\n      <input\\n        type=\\\"text\\\"\\n        name=\\\"publisher\\\"\\n        placeholder=\\\"Enter Publisher\\\"\\n        value={document.publisher}\\n        onChange={handleInputChange}\\n      />\\n      <button>Edit Document</button>\\n      <button onClick={() => props.setEditing(false)}>Cancel</button>\\n    </form>\\n  );\\n};\\n\\n\\n\\n//App.js\\nimport EditLists from \\\"./editLists\\\";\\n\\nconst initialState = [\\n  {\\n    id: 1,\\n    docTitle: \\\"document1\\\",\\n    description: \\\"desc1\\\",\\n    publisher: \\\"publisher1\\\",\\n  },\\n];\\n\\nconst App = () => {\\n  const initialFormState = {\\n    id: null,\\n    docTitle: \\\"\\\",\\n    description: \\\"\\\",\\n    publisher: \\\"\\\",\\n  };\\n\\n  const [lists, setLists] = useState(initialState);\\n  const [editing, setEditing] = useState(false);\\n  const [currentLists, setCurrentLists] = useState(initialFormState);\\n\\n  const [data, setData] = useState(initialFormState);\\n\\n  const handleInputChange = (event) => {\\n    const { name, value } = event.target;\\n    setData({ ...data, [name]: value });\\n  };\\n\\n  const handleAdd = (data) => {\\n    data.id = lists.length + 1;\\n    setLists([...lists, data]);\\n  };\\n\\n  const handleEdit = (data) => {\\n    setEditing(true);\\n    setCurrentLists({\\n      id: data.id,\\n      docTitle: data.docTitle,\\n      description: data.description,\\n      publisher: data.publisher,\\n    });\\n  };\\n  const updateLists = (id, updatedDocument) => {\\n    setEditing(false);\\n    setLists(lists.map((item) => (item.id === id ? updatedDocument : item)));\\n  };\\n\\n  return (\\n    <>\\n      <div className=\\\"row\\\">\\n        {editing ? (\\n          <EditLists\\n            editing={editing}\\n            setEditing={setEditing}\\n            currentLists={currentLists}\\n            updateLists={updateLists}\\n          />\\n        ) : (\\n          <form\\n            onSubmit={(event) => {\\n              event.preventDefault();\\n\\n              handleAdd(data);\\n              setData(initialFormState);\\n            }}\\n          >\\n            <input\\n              type=\\\"text\\\"\\n              name=\\\"docTitle\\\"\\n              placeholder=\\\"Enter Title\\\"\\n              value={data.docTitle}\\n              onChange={handleInputChange}\\n            />\\n            <input\\n              type=\\\"text\\\"\\n              name=\\\"description\\\"\\n              placeholder=\\\"Enter Description\\\"\\n              value={data.description}\\n              onChange={handleInputChange}\\n            />\\n            <input\\n              type=\\\"text\\\"\\n              name=\\\"publisher\\\"\\n              placeholder=\\\"Enter Publisher\\\"\\n              value={data.name}\\n              onChange={handleInputChange}\\n            />\\n            <button>Add Document</button>\\n          </form>\\n        )}\\n      </div>\\n      <table>\\n        <thead>\\n          <tr>\\n            <th>Title</th>\\n            <th>Description</th>\\n            <th>Publisher</th>\\n            <th>Actions</th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          {lists.length > 0\\n            ? lists.map((item) => (\\n                <tr key={item.id}>\\n                  <td>{item.docTitle}</td>\\n                  <td>{item.description}</td>\\n                  <td>{item.publisher}</td>\\n                  <td>\\n                    <button\\n                      onClick={() => {\\n                        handleEdit(item);\\n                      }}\\n                    >\\n                      Edit\\n                    </button>\\n                  </td>\\n                </tr>\\n              ))\\n            : null}\\n        </tbody>\\n      </table>\\n    </>\\n  );\\n};\\n\".trim();var localStorage=\"\\nimport React, { useState, useEffect } from \\\"react\\\";\\n\\nconst App = () => {\\n  const [todos, setTodos] = useState([]);\\n  const [todo, setTodo] = useState(\\\"\\\");\\n  const [todoEditing, setTodoEditing] = useState(null);\\n  const [editingText, setEditingText] = useState(\\\"\\\");\\n\\n  useEffect(() => {\\n    const json = localStorage.getItem(\\\"todos\\\");\\n    const loadedTodos = JSON.parse(json);\\n    if (loadedTodos) {\\n      setTodos(loadedTodos);\\n    }\\n  }, []);\\n\\n  useEffect(() => {\\n    const json = JSON.stringify(todos);\\n    localStorage.setItem(\\\"todos\\\", json);\\n  }, [todos]);\\n\\n  function handleSubmit(e) {\\n    e.preventDefault();\\n\\n    const newTodo = {\\n      id: new Date().getTime(),\\n      text: todo,\\n      completed: false,\\n    };\\n    setTodos([...todos].concat(newTodo));\\n    setTodo(\\\"\\\");\\n  }\\n\\n  function deleteTodo(id) {\\n    let updatedTodos = [...todos].filter((todo) => todo.id !== id);\\n    setTodos(updatedTodos);\\n  }\\n\\n  function toggleComplete(id) {\\n    let updatedTodos = [...todos].map((todo) => {\\n      if (todo.id === id) {\\n        todo.completed = !todo.completed;\\n      }\\n      return todo;\\n    });\\n    setTodos(updatedTodos);\\n  }\\n\\n  function submitEdits(id) {\\n    const updatedTodos = [...todos].map((todo) => {\\n      if (todo.id === id) {\\n        todo.text = editingText;\\n      }\\n      return todo;\\n    });\\n    setTodos(updatedTodos);\\n    setTodoEditing(null);\\n  }\\n\\n  return (\\n    <div id=\\\"todo-list\\\">\\n      <h1>Todo List</h1>\\n      <form onSubmit={handleSubmit}>\\n        <input\\n          type=\\\"text\\\"\\n          onChange={(e) => setTodo(e.target.value)}\\n          value={todo}\\n        />\\n        <button type=\\\"submit\\\">Add Todo</button>\\n      </form>\\n      {todos.map((todo) => (\\n        <div key={todo.id} className=\\\"todo\\\">\\n          <div className=\\\"todo-text\\\">\\n            <input\\n              type=\\\"checkbox\\\"\\n              id=\\\"completed\\\"\\n              checked={todo.completed}\\n              onChange={() => toggleComplete(todo.id)}\\n            />\\n            {todo.id === todoEditing ? (\\n              <input\\n                type=\\\"text\\\"\\n                onChange={(e) => setEditingText(e.target.value)}\\n              />\\n            ) : (\\n              <div>{todo.text}</div>\\n            )}\\n          </div>\\n          <div className=\\\"todo-actions\\\">\\n            {todo.id === todoEditing ? (\\n              <button onClick={() => submitEdits(todo.id)}>Submit Edits</button>\\n            ) : (\\n              <button onClick={() => setTodoEditing(todo.id)}>Edit</button>\\n            )}\\n\\n            <button onClick={() => deleteTodo(todo.id)}>Delete</button>\\n          </div>\\n        </div>\\n      ))}\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\".trim();var JsonPlaceholder=/*#__PURE__*/function(_Component){_inherits(JsonPlaceholder,_Component);function JsonPlaceholder(){_classCallCheck(this,JsonPlaceholder);return _possibleConstructorReturn(this,_getPrototypeOf(JsonPlaceholder).apply(this,arguments));}_createClass(JsonPlaceholder,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"JsonPlaceholder(Curd)\"),React.createElement(\"b\",null,\"App.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:mainApp,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"components/\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:compos,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Edit\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:edits,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Local Storage\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:localStorage,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return JsonPlaceholder;}(Component);export default withStyles(styles)(JsonPlaceholder);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/jsonPlaceholder.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","mainApp","trim","compos","edits","localStorage","JsonPlaceholder","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,eAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,cAAtB,CAGA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,eAAe,CAAE,SAAnB,CAA8BC,OAAO,CAAE,KAAvC,CAA8CC,QAAQ,CAAE,MAAxD,CAAf,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,KAAK,CAAE,CACLC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH,CAELN,OAAO,CAAEG,KAAK,CAACG,OAAN,CAAc,CAAd,CAFJ,CADgB,CAKvBC,QAAQ,CAAE,CACRF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA,CALa,CAQvBE,SAAS,CAAE,CACTC,SAAS,CAAE,QADF,CARY,CAAL,EAApB,CAaA,GAAMC,CAAAA,OAAO,CAAG,mpFA+GbC,IA/Ga,EAAhB,CAiHA,GAAMC,CAAAA,MAAM,CAAG,mmDA6DbD,IA7Da,EAAf,CA+DA,GAAME,CAAAA,KAAK,CAAG,k+IAoLZF,IApLY,EAAd,CAsLA,GAAMG,CAAAA,YAAY,CAAG,utFAyGnBH,IAzGmB,EAArB,C,GA2GMI,CAAAA,e,mUACgB,CAClBC,UAAU,CAAC,iBAAMzB,CAAAA,KAAK,CAAC0B,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAACd,KAA1B,EACE,8BAAI,oBAAC,OAAD,MAAJ,CADF,CADF,CADF,CAOE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEc,OAAO,CAACd,KAA1B,EACE,oBAAC,IAAD,MACE,sDADF,CAEE,sCAFF,CAGE,8BAHF,CAIE,2BAAK,KAAK,CAAEN,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEY,OADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAJF,CAWE,8BAXF,CAYE,8BAZF,CAaE,2CAbF,CAcE,2BAAK,KAAK,CAAEZ,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEc,MADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAdF,CAqBE,8BArBF,CAuBE,qCAvBF,CAwBE,2BAAK,KAAK,CAAEd,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEe,KADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAxBF,CA+BE,8BA/BF,CAiCE,8CAjCF,CAkCE,2BAAK,KAAK,CAAEf,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEgB,YADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAlCF,CADF,CADF,CAPF,CADF,CAwDD,C,6BA9D2BxB,S,EAiE9B,cAAgBI,CAAAA,UAAU,CAACQ,MAAD,CAAV,CAAmBa,eAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst mainApp = `\nimport React, { useState, useEffect } from \"react\";\n\nimport { User } from \"./components/User\";\nimport { AddUser } from \"./components/AddUser\";\n\nfunction App() {\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    await fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json())\n      .then((data) => setUsers(data))\n      .catch((error) => console.log(error));\n  };\n\n  const onAdd = async (name, email) => {\n    await fetch(\"https://jsonplaceholder.typicode.com/users\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        name: name,\n        email: email,\n      }),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\",\n      },\n    })\n      .then((res) => {\n        if (res.status !== 201) {\n          return;\n        } else {\n          return res.json();\n        }\n      })\n      .then((data) => {\n        setUsers((users) => [...users, data]);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  const onEdit = async (id, name, email) => {\n    await fetch('https://jsonplaceholder.typicode.com/users/'$'{id}', {\n      method: \"PUT\",\n      body: JSON.stringify({\n        name: name,\n        email: email,\n      }),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\",\n      },\n    })\n      .then((res) => {\n        if (res.status !== 200) {\n          return;\n        } else {\n          return res.json();\n        }\n      })\n      .then((data) => {\n        const updatedUsers = users.map((user) => {\n          if (user.id === id) {\n            user.name = name;\n            user.email = email;\n          }\n\n          return user;\n        });\n\n        setUsers((users) => updatedUsers);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  const onDelete = async (id) => {\n    await fetch('https://jsonplaceholder.typicode.com/users/'$'{id}', {\n      method: \"DELETE\",\n    })\n      .then((res) => {\n        if (res.status !== 200) {\n          return;\n        } else {\n          setUsers(\n            users.filter((user) => {\n              return user.id !== id;\n            })\n          );\n        }\n      })\n      .catch((error) => console.log(error));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Users</h1>\n      <AddUser onAdd={onAdd} />\n      {users.map((user) => (\n        <User\n          id={user.id}\n          key={user.id}\n          name={user.name}\n          email={user.email}\n          onEdit={onEdit}\n          onDelete={onDelete}\n        />\n      ))}\n    </div>\n  );\n}`.trim();\n\nconst compos = `\n//components/AddUser.js\nexport const AddUser = ({ onAdd }) => {\n  const handleOnSubmit = (e) => {\n    e.preventDefault();\n    onAdd(e.target.name.value, e.target.email.value);\n    e.target.name.value = \"\";\n    e.target.email.value = \"\";\n  };\n\n  return (\n    <form onSubmit={handleOnSubmit}>\n      <h3>Add User</h3>\n      <input placeholder=\"Name\" name=\"name\" />\n      <input placeholder=\"Email\" name=\"email\" />\n      <button onSubmit={handleOnSubmit}>Add</button>\n      <hr />\n    </form>\n  );\n};\n\n\n//components/User.js\nexport const User = ({ name, email, id, onEdit, onDelete }) => {\n  const [isEdit, setIsEdit] = useState(false);\n\n  const handleEdit = () => {\n    setIsEdit(!isEdit);\n  };\n\n  const handleDelete = () => {\n    onDelete(id);\n  };\n\n  const handleOnEditSubmit = (e) => {\n    e.preventDefault();\n    onEdit(id, e.target.name.value, e.target.email.value);\n    setIsEdit(!isEdit);\n  };\n\n  return (\n    <div>\n      {isEdit ? (\n        <form onSubmit={handleOnEditSubmit}>\n          <input placeholder=\"Name\" name=\"name\" defaultValue={name} />\n          <input placeholder=\"Email\" name=\"email\" defaultValue={email} />\n          <button onSubmit={handleOnEditSubmit}>Save</button>\n        </form>\n      ) : (\n        <div className=\"user\">\n          <span className=\"user-name\">{name}</span>\n          <span className=\"user-email\">{email}</span>\n          <div>\n            <button onClick={handleEdit}>Edit</button>\n            <button onClick={handleDelete}>Delete</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n`.trim();\n\nconst edits = `\n//editLists.js\nconst EditLists = (props) => {\n  const [document, setDocument] = useState(props.currentLists);\n  useEffect(() => {\n    setDocument(props.currentLists);\n  }, [props]);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n\n    setDocument({ ...document, [name]: value });\n  };\n\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        if (!document.docTitle || !document.description || !document.publisher)\n          return;\n\n        props.updateLists(document.id, document);\n      }}\n    >\n      <input\n        type=\"text\"\n        name=\"docTitle\"\n        placeholder=\"Enter Title\"\n        value={document.docTitle}\n        onChange={handleInputChange}\n      />\n      <input\n        type=\"text\"\n        name=\"description\"\n        placeholder=\"Enter Description\"\n        value={document.description}\n        onChange={handleInputChange}\n      />\n      <input\n        type=\"text\"\n        name=\"publisher\"\n        placeholder=\"Enter Publisher\"\n        value={document.publisher}\n        onChange={handleInputChange}\n      />\n      <button>Edit Document</button>\n      <button onClick={() => props.setEditing(false)}>Cancel</button>\n    </form>\n  );\n};\n\n\n\n//App.js\nimport EditLists from \"./editLists\";\n\nconst initialState = [\n  {\n    id: 1,\n    docTitle: \"document1\",\n    description: \"desc1\",\n    publisher: \"publisher1\",\n  },\n];\n\nconst App = () => {\n  const initialFormState = {\n    id: null,\n    docTitle: \"\",\n    description: \"\",\n    publisher: \"\",\n  };\n\n  const [lists, setLists] = useState(initialState);\n  const [editing, setEditing] = useState(false);\n  const [currentLists, setCurrentLists] = useState(initialFormState);\n\n  const [data, setData] = useState(initialFormState);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setData({ ...data, [name]: value });\n  };\n\n  const handleAdd = (data) => {\n    data.id = lists.length + 1;\n    setLists([...lists, data]);\n  };\n\n  const handleEdit = (data) => {\n    setEditing(true);\n    setCurrentLists({\n      id: data.id,\n      docTitle: data.docTitle,\n      description: data.description,\n      publisher: data.publisher,\n    });\n  };\n  const updateLists = (id, updatedDocument) => {\n    setEditing(false);\n    setLists(lists.map((item) => (item.id === id ? updatedDocument : item)));\n  };\n\n  return (\n    <>\n      <div className=\"row\">\n        {editing ? (\n          <EditLists\n            editing={editing}\n            setEditing={setEditing}\n            currentLists={currentLists}\n            updateLists={updateLists}\n          />\n        ) : (\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n\n              handleAdd(data);\n              setData(initialFormState);\n            }}\n          >\n            <input\n              type=\"text\"\n              name=\"docTitle\"\n              placeholder=\"Enter Title\"\n              value={data.docTitle}\n              onChange={handleInputChange}\n            />\n            <input\n              type=\"text\"\n              name=\"description\"\n              placeholder=\"Enter Description\"\n              value={data.description}\n              onChange={handleInputChange}\n            />\n            <input\n              type=\"text\"\n              name=\"publisher\"\n              placeholder=\"Enter Publisher\"\n              value={data.name}\n              onChange={handleInputChange}\n            />\n            <button>Add Document</button>\n          </form>\n        )}\n      </div>\n      <table>\n        <thead>\n          <tr>\n            <th>Title</th>\n            <th>Description</th>\n            <th>Publisher</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {lists.length > 0\n            ? lists.map((item) => (\n                <tr key={item.id}>\n                  <td>{item.docTitle}</td>\n                  <td>{item.description}</td>\n                  <td>{item.publisher}</td>\n                  <td>\n                    <button\n                      onClick={() => {\n                        handleEdit(item);\n                      }}\n                    >\n                      Edit\n                    </button>\n                  </td>\n                </tr>\n              ))\n            : null}\n        </tbody>\n      </table>\n    </>\n  );\n};\n`.trim();\n\nconst localStorage = `\nimport React, { useState, useEffect } from \"react\";\n\nconst App = () => {\n  const [todos, setTodos] = useState([]);\n  const [todo, setTodo] = useState(\"\");\n  const [todoEditing, setTodoEditing] = useState(null);\n  const [editingText, setEditingText] = useState(\"\");\n\n  useEffect(() => {\n    const json = localStorage.getItem(\"todos\");\n    const loadedTodos = JSON.parse(json);\n    if (loadedTodos) {\n      setTodos(loadedTodos);\n    }\n  }, []);\n\n  useEffect(() => {\n    const json = JSON.stringify(todos);\n    localStorage.setItem(\"todos\", json);\n  }, [todos]);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    const newTodo = {\n      id: new Date().getTime(),\n      text: todo,\n      completed: false,\n    };\n    setTodos([...todos].concat(newTodo));\n    setTodo(\"\");\n  }\n\n  function deleteTodo(id) {\n    let updatedTodos = [...todos].filter((todo) => todo.id !== id);\n    setTodos(updatedTodos);\n  }\n\n  function toggleComplete(id) {\n    let updatedTodos = [...todos].map((todo) => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  }\n\n  function submitEdits(id) {\n    const updatedTodos = [...todos].map((todo) => {\n      if (todo.id === id) {\n        todo.text = editingText;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n    setTodoEditing(null);\n  }\n\n  return (\n    <div id=\"todo-list\">\n      <h1>Todo List</h1>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          onChange={(e) => setTodo(e.target.value)}\n          value={todo}\n        />\n        <button type=\"submit\">Add Todo</button>\n      </form>\n      {todos.map((todo) => (\n        <div key={todo.id} className=\"todo\">\n          <div className=\"todo-text\">\n            <input\n              type=\"checkbox\"\n              id=\"completed\"\n              checked={todo.completed}\n              onChange={() => toggleComplete(todo.id)}\n            />\n            {todo.id === todoEditing ? (\n              <input\n                type=\"text\"\n                onChange={(e) => setEditingText(e.target.value)}\n              />\n            ) : (\n              <div>{todo.text}</div>\n            )}\n          </div>\n          <div className=\"todo-actions\">\n            {todo.id === todoEditing ? (\n              <button onClick={() => submitEdits(todo.id)}>Submit Edits</button>\n            ) : (\n              <button onClick={() => setTodoEditing(todo.id)}>Edit</button>\n            )}\n\n            <button onClick={() => deleteTodo(todo.id)}>Delete</button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n`.trim();\n\nclass JsonPlaceholder extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>JsonPlaceholder(Curd)</h3>\n              <b>App.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={mainApp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>components/</b>\n              <div style={titles}>\n                <PrismCode\n                  code={compos}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Edit</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={edits}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Local Storage</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={localStorage}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(JsonPlaceholder));\n"]},"metadata":{},"sourceType":"module"}