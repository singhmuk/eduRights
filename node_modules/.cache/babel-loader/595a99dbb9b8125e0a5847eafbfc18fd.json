{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var radio=\"\\nimport { FormsModule } from '@angular/forms';\\n\\n//app.component.ts\\n@Component({\\n  selector: 'my-app',\\n  template: '\\n    <div *ngFor=\\\"let season of seasons; let i = index\\\">\\n    <input type=\\\"radio\\\" id=\\\"season{{i}}\\\" name=\\\"seasons\\\" [value]=\\\"season\\\" [(ngModel)]=\\\"chhose\\\" />\\n      {{season}}\\n    </div >\\n    {{chhose}}',\\n            })\\n\\nexport class AppComponent {\\n  chhose: string;\\n  seasons: string[] = ['Winter', 'Spring', 'Summer', 'Autumn'];\\n}\\n\".trim();var showHide=\"\\n@Component({\\n  selector: 'app-child',\\n  template: '\\n  <button (click)=\\\"handleBtn()\\\">handle</button>\\n    <div *ngIf=\\\"isShow\\\">\\n      {{name}}\\n    </div>',\\n})\\n\\nexport class ChildComponent implements OnInit {\\n  constructor() { }\\n  ngOnInit() {\\n\\n  }\\n  isShow: false;\\n  name=\\\"Name\\\"\\n\\n  handleBtn(){\\n    this.isShow = !this.isShow\\n  }\\n}\\n\".trim();var displays=\"\\nimport { FormsModule } from '@angular/forms';\\n\\n\\n//app.component.ts\\nexport class AppComponent  {\\n  name = 'Angular';\\n  newEmployeeClick=false\\n  empl=[\\n    {id:1, name:'a', positons:'a'},\\n    {id:2, name:'b', positons:'a'},\\n    {id:3, name:'c', positons:'a'},\\n  ];\\n\\n  constructor(){}\\n  ngOnInit(){}\\n\\n  model:any={};\\n  model2:any={}\\n\\n  addEmployee(){\\n    this.empl.push(this.model);\\n    this.model={}\\n  }\\n\\n  addButton(){\\n    this.newEmployeeClick=!this.newEmployeeClick;\\n  }\\n}\\n\\n\\n//app.component.html\\n<p>Add Employee</p>\\n<div (click)=\\\"addButton()\\\">add</div>\\n<div *ngIf=\\\"newEmployeeClick\\\">\\n  <form>\\n    <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\" [(ngModel)]=\\\"model.name\\\">\\n    <input type=\\\"text\\\" id=\\\"positons\\\" name=\\\"positons\\\" [(ngModel)]=\\\"model.positons\\\">\\n\\n    <button type=\\\"submit\\\" (click)=\\\"addEmployee()\\\">Save</button>\\n  </form>\\n</div>\\n\\n<div *ngFor=\\\"let empls of empl\\\">\\n  {{empls.name}}\\n  {{empls.positons}}\\n</div>\".trim();var version=\"\\nimport { Component, Input, SimpleChanges } from '@angular/core';\\n\\n@Component({\\n  selector: 'app-root',\\n  template: '\\n  <h2> Source code version</h2>\\n    <button (click) = \\\"newMinor()\\\"> New minor version</button>\\n      <button (click) = \\\"newMajor()\\\"> New major version</button>\\n        <app-voters [major] = \\\"major\\\"[minor] = \\\"minor\\\"></app-voters>\\n          '})\\n\\nexport class AppComponent {\\n  major = 1;\\n  minor = 23;\\n\\n  newMinor() { this.minor++; }\\n\\n  newMajor() {\\n    this.major++;\\n    this.minor = 0;\\n  }\\n}\\n\\n\\n@Component({\\n  selector: 'app-voters',\\n  template: '\\n          <li *ngFor=\\\"let change of changeLog\\\"> {{change}}</li>\\n  '\\n})\\n\\nexport class VotersComponent {\\n  @Input() major = 0;\\n  @Input() minor = 0;\\n  changeLog: string[] = [];\\n\\n  ngOnChanges(changes: SimpleChanges) {\\n    const log: string[] = [];\\n    \\n    for (const propName in changes) {\\n      const changedProp = changes[propName];\\n      const to = JSON.stringify(changedProp.currentValue);\\n      \\n      if (changedProp.isFirstChange()) {\\n        log.push('Initial value of '$'{propName} set to '$'{to}');\\n      } else {\\n        const from = JSON.stringify(changedProp.previousValue);\\n        log.push('$'{propName} changed from '$'{from} to '$'{to}');\\n      }\\n    }\\n    this.changeLog.push(log.join(', '));\\n  }\\n}\\n\\n\".trim();var launch=\"\\nimport { Component, Output } from '@angular/core';\\n\\n@Component({\\n  selector: 'app-root',\\n  template: '\\n  <button (click)=\\\"start()\\\"> start</button>\\n    {{seconds}}\\n    {{message}}\\n      ',\\n    })\\n  \\nexport class AppComponent { \\n  invalidId=0;\\n  message=\\\"\\\";\\n  seconds=10;\\n  \\n  start(){\\n    setInterval(()=>{\\n      this.seconds -= 1;\\n      if(this.seconds==0){\\n        this.message = 'Blast off!'\\n      }\\n      else{\\n        if (this.seconds < 0) {this.seconds = 10;} \\n        this.message = 'Holding at T - '$'{this.seconds} seconds';\\n      }\\n    },1000)\\n  }\\n}\\n\".trim();var changeFonts=\"\\n@Component({\\n  selector: 'app-root',\\n  template: '\\n  <button (click)=\\\"dec()\\\">Smaller</button>\\n    <button (click) = \\\"inc()\\\"> Bigger</button>\\n      <label [style.font-size.px] = \\\"fontSize\\\"> {{fontSize}}px</label>\\n        ',\\n      })\\n\\nexport class AppComponent {\\n  constructor() { }\\n  fontSize = 16;\\n\\n  resize(delta: number){\\n    this.fontSize = Math.min(40, Math.max(8, +this.fontSize + delta))\\n  }\\n\\n  dec(){ this.resize(-1)}\\n\\n  inc(){ this.resize(+1)}\\n}\".trim();var RadioButton12=/*#__PURE__*/function(_Component){_inherits(RadioButton12,_Component);function RadioButton12(){_classCallCheck(this,RadioButton12);return _possibleConstructorReturn(this,_getPrototypeOf(RadioButton12).apply(this,arguments));}_createClass(RadioButton12,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Radio\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:radio,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Show Hide\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:showHide,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Add Input\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:displays,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Version\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:version,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Launch\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:launch,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Change Font\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:changeFonts,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return RadioButton12;}(Component);export default withStyles(styles)(RadioButton12);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/radioButton.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","radio","trim","showHide","displays","version","launch","changeFonts","RadioButton12","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst radio = `\nimport { FormsModule } from '@angular/forms';\n\n//app.component.ts\n@Component({\n  selector: 'my-app',\n  template: '\n    <div *ngFor=\"let season of seasons; let i = index\">\n    <input type=\"radio\" id=\"season{{i}}\" name=\"seasons\" [value]=\"season\" [(ngModel)]=\"chhose\" />\n      {{season}}\n    </div >\n    {{chhose}}',\n            })\n\nexport class AppComponent {\n  chhose: string;\n  seasons: string[] = ['Winter', 'Spring', 'Summer', 'Autumn'];\n}\n`.trim();\n\n\nconst showHide = `\n@Component({\n  selector: 'app-child',\n  template: '\n  <button (click)=\"handleBtn()\">handle</button>\n    <div *ngIf=\"isShow\">\n      {{name}}\n    </div>',\n})\n\nexport class ChildComponent implements OnInit {\n  constructor() { }\n  ngOnInit() {\n\n  }\n  isShow: false;\n  name=\"Name\"\n\n  handleBtn(){\n    this.isShow = !this.isShow\n  }\n}\n`.trim();\n\n\nconst displays = `\nimport { FormsModule } from '@angular/forms';\n\n\n//app.component.ts\nexport class AppComponent  {\n  name = 'Angular';\n  newEmployeeClick=false\n  empl=[\n    {id:1, name:'a', positons:'a'},\n    {id:2, name:'b', positons:'a'},\n    {id:3, name:'c', positons:'a'},\n  ];\n\n  constructor(){}\n  ngOnInit(){}\n\n  model:any={};\n  model2:any={}\n\n  addEmployee(){\n    this.empl.push(this.model);\n    this.model={}\n  }\n\n  addButton(){\n    this.newEmployeeClick=!this.newEmployeeClick;\n  }\n}\n\n\n//app.component.html\n<p>Add Employee</p>\n<div (click)=\"addButton()\">add</div>\n<div *ngIf=\"newEmployeeClick\">\n  <form>\n    <input type=\"text\" id=\"name\" name=\"name\" [(ngModel)]=\"model.name\">\n    <input type=\"text\" id=\"positons\" name=\"positons\" [(ngModel)]=\"model.positons\">\n\n    <button type=\"submit\" (click)=\"addEmployee()\">Save</button>\n  </form>\n</div>\n\n<div *ngFor=\"let empls of empl\">\n  {{empls.name}}\n  {{empls.positons}}\n</div>`.trim();\n\n\nconst version = `\nimport { Component, Input, SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '\n  <h2> Source code version</h2>\n    <button (click) = \"newMinor()\"> New minor version</button>\n      <button (click) = \"newMajor()\"> New major version</button>\n        <app-voters [major] = \"major\"[minor] = \"minor\"></app-voters>\n          '})\n\nexport class AppComponent {\n  major = 1;\n  minor = 23;\n\n  newMinor() { this.minor++; }\n\n  newMajor() {\n    this.major++;\n    this.minor = 0;\n  }\n}\n\n\n@Component({\n  selector: 'app-voters',\n  template: '\n          <li *ngFor=\"let change of changeLog\"> {{change}}</li>\n  '\n})\n\nexport class VotersComponent {\n  @Input() major = 0;\n  @Input() minor = 0;\n  changeLog: string[] = [];\n\n  ngOnChanges(changes: SimpleChanges) {\n    const log: string[] = [];\n    \n    for (const propName in changes) {\n      const changedProp = changes[propName];\n      const to = JSON.stringify(changedProp.currentValue);\n      \n      if (changedProp.isFirstChange()) {\n        log.push('Initial value of '$'{propName} set to '$'{to}');\n      } else {\n        const from = JSON.stringify(changedProp.previousValue);\n        log.push('$'{propName} changed from '$'{from} to '$'{to}');\n      }\n    }\n    this.changeLog.push(log.join(', '));\n  }\n}\n\n`.trim();\n\nconst launch = `\nimport { Component, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '\n  <button (click)=\"start()\"> start</button>\n    {{seconds}}\n    {{message}}\n      ',\n    })\n  \nexport class AppComponent { \n  invalidId=0;\n  message=\"\";\n  seconds=10;\n  \n  start(){\n    setInterval(()=>{\n      this.seconds -= 1;\n      if(this.seconds==0){\n        this.message = 'Blast off!'\n      }\n      else{\n        if (this.seconds < 0) {this.seconds = 10;} \n        this.message = 'Holding at T - '$'{this.seconds} seconds';\n      }\n    },1000)\n  }\n}\n`.trim();\n\nconst changeFonts = `\n@Component({\n  selector: 'app-root',\n  template: '\n  <button (click)=\"dec()\">Smaller</button>\n    <button (click) = \"inc()\"> Bigger</button>\n      <label [style.font-size.px] = \"fontSize\"> {{fontSize}}px</label>\n        ',\n      })\n\nexport class AppComponent {\n  constructor() { }\n  fontSize = 16;\n\n  resize(delta: number){\n    this.fontSize = Math.min(40, Math.max(8, +this.fontSize + delta))\n  }\n\n  dec(){ this.resize(-1)}\n\n  inc(){ this.resize(+1)}\n}`.trim();\n\n\nclass RadioButton12 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Radio</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={radio}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Show Hide</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={showHide}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Add Input</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={displays}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Version</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={version}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Launch</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={launch}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Change Font</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={changeFonts}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(RadioButton12));\n"]},"metadata":{},"sourceType":"module"}