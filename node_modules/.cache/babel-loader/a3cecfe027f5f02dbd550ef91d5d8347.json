{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/pythone/deeppy/iteratorsPy.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst addition = `\nclass MyNumbers:\n  def __iter__(self):\n    self.a = 1\n    return self\n\n  def __next__(self):\n    if self.a <= 20:\n      x = self.a\n      self.a += 1\n      return x\n    else:\n      raise StopIteration\n\nmyclass = MyNumbers()\nmyiter = iter(myclass)\n\nfor x in myiter:\n  print(x)\n`.trim();\nconst product = `\nfrom itertools import product\n\nprod = product([1, 2], [3, 4])\nprint(list(prod))                                                       # convert the iterator to a list\n\nprod = product([1, 2], [3], repeat=2)\nprint(list(prod))                             \n`.trim();\nconst permutations = `\nfrom itertools import permutations\n\nperm = permutations([1, 2, 3])\nprint(list(perm))\n\nperm = permutations([1, 2, 3], 2)                                         # optional: the length of the permutation tuples\nprint(list(perm))`.trim();\nconst combinations = `\nfrom itertools import combinations, combinations_with_replacement\n\n\ncomb = combinations([1, 2, 3, 4], 2)              # second argument is mandatory and specifies length of the output tuples.\nprint(list(comb))\n\ncomb = combinations_with_replacement([1, 2, 3, 4], 2)\nprint(list(comb))`.trim();\nconst accumulate = `\nfrom itertools import accumulate\n\nacc = accumulate([1,2,3,4])                                       # return accumulated sums\nprint(list(acc))\n\n\n# other possible functions are possible\nimport operator\nacc = accumulate([1,2,3,4], func=operator.mul)\nprint(list(acc))\n\nacc = accumulate([1,5,2,6,3,4], func=max)\nprint(list(acc))`.trim();\nconst groupby = `\nfrom itertools import groupby\n\ndef smaller_than_3(x):                                                              # use a function as key\n    return x < 3\n\ngroup_obj = groupby([1, 2, 3, 4], key=smaller_than_3)\nfor key, group in group_obj:\n    print(key, list(group))\n    \n    \n# or use a lamda expression, e.g. words with an 'i':\ngroup_obj = groupby([\"hi\", \"nice\", \"hello\", \"cool\"], key=lambda x: \"i\" in x)\nfor key, group in group_obj:\n    print(key, list(group))\n    \npersons = [{'name': 'Tim', 'age': 25}, {'name': 'Dan', 'age': 25}, \n           {'name': 'Lisa', 'age': 27}, {'name': 'Claire', 'age': 28}]\n\nfor key, group in groupby(persons, key=lambda x: x['age']):\n    print(key, list(group))`.trim();\nconst repeat = `\nfrom itertools import count, cycle, repeat\n\nfor i in count(10):                                                 # count(x): count from x: x, x+1, x+2, x+3...\n    print(i)\n    if  i >= 13:\n        break\n\n\nsum = 0\nfor i in cycle([1, 2, 3]):                                         # cycle infinitely through an iterable\n    print(i)\n    sum += i\n    if sum >= 12:\n        break\n\n\nfor i in repeat(\"A\", 3):                                           # repeat x infinitely or n times\n    print(i)`.trim();\nconst iteration = `\nd = dict()\nd['xyz'] = 123\nd['abc'] = 345\n\nfor i in d:\n    print(\"% s % d\" % (i, d[i]))\n    \n    \n    \n#2 \nfor letter in 'geeksforgeeks':\n  if letter == 'e' or letter == 's':                              #Returns the control to the beginning of the loop.\n    continue\n  print('Current Letter :', letter)\n    \n    \n    \n#3 \nfor letter in 'geeksforgeeks':\n  if letter == 'e' or letter == 's':\n    break                                                         #Brings control out of the loop.\n\nprint('Current Letter :', letter)\n    \n    \n#4 pass\nfunction and classes.\nfor letter in 'geeksforgeeks':\n  pass\nprint('Last Letter :', letter)\n\n\n#5 \ndef addition(n):                                                  #Pass one or more iterable to the map() function.\n    return n + n \n\nnumbers = (1, 2, 3, 4) \nresult = map(addition, numbers) \nprint(list(result))\n`.trim();\nconst arraysTypes = `\nfrom array import  *\n\nvals = array('i', [1,2,3,4,5,-6,7,8,9,10])                                  // Creating an Array\nfloatArr = array('d', [2.5, 3.2, 3.3])                                      // creating an array with float type\n\nprint(vals.typecode)\nvals.append(100)\nvals.insert(1, 4)\nvals.remove(1)\nvals.pop(2)\nvals.index(2)\nvals[2] = 6                                                                # Updating an Elements in an Array\nprint(len(vals))\n`.trim();\nconst arrays = `\nimport array as arr                                           \n\na = arr.array('i', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])                                         \nfor i in range(0, 3):\n    print(a[i], end=\" \")\n\n    \n//2. Sum of the array\ndef _sum(arr):\n    return(sum(arr))\n\nans = _sum([12, 3, 4, 15])\nprint (ans)\n\n\n//3. Slpit Array\ndef splitArr(arr, n, k):\n    for i in range(0, k):\n        x = arr[0]\n        for j in range(0, n-1):\n            arr[j] = arr[j + 1]\n\n        arr[n-1] = x\n\n\narr = [12, 10, 5, 6, 52, 36]\nn = len(arr)\nposition = 2\n\nsplitArr(arr, n, position)\n\nfor i in range(0, n):\n    print(arr[i], end = ' ')\n`.trim();\nconst arrayRotetions = `\ndef leftRotate(arr, d, n):\n    for i in range(d):\n        leftRotatebyOne(arr, n)\n\ndef leftRotatebyOne(arr, n):\n    temp = arr[0]\n    for i in range(n-1):\n        arr[i] = arr[i+1]\n    arr[n-1] = temp\n\n\ndef printArray(arr,size):\n    for i in range(size):\n        print (\"%d\"% arr[i],end=\" \")\n\n\narr = [1, 2, 3, 4, 5, 6, 7]\nleftRotate(arr, 2, 7)\nprintArray(arr, 7) \n `.trim();\nconst reverseRotetions = `\ndef rverseArray(arr, start, end):\n    while (start < end):\n        temp = arr[start]\n        arr[start] = arr[end]\n        arr[end] = temp\n        start += 1\n        end = end-1\n\ndef leftRotate(arr, d):\n    n = len(arr)\n    rverseArray(arr, 0, d-1)\n    rverseArray(arr, d, n-1)\n    rverseArray(arr, 0, n-1)\n\ndef printArray(arr):\n    for i in range(0, len(arr)):\n        print (arr[i])\n\narr = [1, 2, 3, 4, 5, 6, 7]\nleftRotate(arr, 2)                                                                           # Rotate array by 2\nprintArray(arr)`.trim();\nconst monotonic = `\ndef isMonotonic(A):\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or  all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n\nA = [6, 5, 4, 4]\nprint(isMonotonic(A))\n`.trim();\n\nclass IteratorsPy extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, \"Stop after 20 iterations\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: addition,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, \"For\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, \"To prevent the iteration to go on forever, use the StopIteration statement.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, \"Use pass statement to write empty loops.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, \"Pass is also used for empty control statements\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: iteration,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, \"product()\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, \"It computes the cartesian product of input iterables.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, \"To allow the product of an iterable with itself, specify the number of repetitions\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, \"It is equivalent to nested for-loops.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, \"Ex. product(A, B) returns the same as ((x,y) for x in A for y in B).\")))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: product,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, \"permutations()\"), \"This tool returns successive length permutations of elements in an iterable, with all possible orderings, and no repeated elements.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: permutations,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, \"combinations() and combinations_with_replacement()\"), \"r-length tuples, in sorted order. So, if the input iterable is sorted, the combination tuples will be produced in sorted order. combinations() does not allow repeated elements, but combinations_with_replacement() does.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: combinations,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, \"accumulate()\"), \"Make an iterator that returns accumulated sums, or accumulated results of other binary functions.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: accumulate,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }, \"groupby()\"), \"Make an iterator that returns consecutive keys and groups from the iterable. The key is a function computing a key value for each element. If not specified, key defaults to an identity function and returns unchanged element.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: groupby,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, \"Infinite iterators: count(), cycle(), repeat()\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: repeat,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, \"Array\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, \"Array don't have fixed size.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }, \"append()\"), \" Adds an element at the end of the list\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }, \"clear()\"), \" Removes all the elements from the list\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }, \"copy()\"), \" Returns a copy of the list\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }, \"count()\"), \" Returns the number of elements with the specified value\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }, \"extend()\"), \" Add the elements of a list (or any iterable), to the end of the current list\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, \"index()\"), \" Returns the index of the first element with the specified value\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, \"insert()\"), \" Adds an element at the specified position\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }, \"pop()\"), \" Removes the element at the specified position\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }, \"remove()\"), \" Removes the first item with the specified value\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }, \"reverse()\"), \" Reverses the order of the list\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }, \"sort()\"), \" Sorts the list\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: arraysTypes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: arrays,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    }, \"Array Rotation\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: arrayRotetions,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }, \"Reverse Array Rotation\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: reverseRotetions,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }, \"Monotonic\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: monotonic,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(IteratorsPy);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/pythone/deeppy/iteratorsPy.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","addition","trim","product","permutations","combinations","accumulate","groupby","repeat","iteration","arraysTypes","arrays","arrayRotetions","reverseRotetions","monotonic","IteratorsPy","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst addition = `\nclass MyNumbers:\n  def __iter__(self):\n    self.a = 1\n    return self\n\n  def __next__(self):\n    if self.a <= 20:\n      x = self.a\n      self.a += 1\n      return x\n    else:\n      raise StopIteration\n\nmyclass = MyNumbers()\nmyiter = iter(myclass)\n\nfor x in myiter:\n  print(x)\n`.trim()\n\nconst product = `\nfrom itertools import product\n\nprod = product([1, 2], [3, 4])\nprint(list(prod))                                                       # convert the iterator to a list\n\nprod = product([1, 2], [3], repeat=2)\nprint(list(prod))                             \n`.trim();\n\nconst permutations = `\nfrom itertools import permutations\n\nperm = permutations([1, 2, 3])\nprint(list(perm))\n\nperm = permutations([1, 2, 3], 2)                                         # optional: the length of the permutation tuples\nprint(list(perm))`.trim();\n\nconst combinations = `\nfrom itertools import combinations, combinations_with_replacement\n\n\ncomb = combinations([1, 2, 3, 4], 2)              # second argument is mandatory and specifies length of the output tuples.\nprint(list(comb))\n\ncomb = combinations_with_replacement([1, 2, 3, 4], 2)\nprint(list(comb))`.trim();\n\nconst accumulate = `\nfrom itertools import accumulate\n\nacc = accumulate([1,2,3,4])                                       # return accumulated sums\nprint(list(acc))\n\n\n# other possible functions are possible\nimport operator\nacc = accumulate([1,2,3,4], func=operator.mul)\nprint(list(acc))\n\nacc = accumulate([1,5,2,6,3,4], func=max)\nprint(list(acc))`.trim();\n\nconst groupby = `\nfrom itertools import groupby\n\ndef smaller_than_3(x):                                                              # use a function as key\n    return x < 3\n\ngroup_obj = groupby([1, 2, 3, 4], key=smaller_than_3)\nfor key, group in group_obj:\n    print(key, list(group))\n    \n    \n# or use a lamda expression, e.g. words with an 'i':\ngroup_obj = groupby([\"hi\", \"nice\", \"hello\", \"cool\"], key=lambda x: \"i\" in x)\nfor key, group in group_obj:\n    print(key, list(group))\n    \npersons = [{'name': 'Tim', 'age': 25}, {'name': 'Dan', 'age': 25}, \n           {'name': 'Lisa', 'age': 27}, {'name': 'Claire', 'age': 28}]\n\nfor key, group in groupby(persons, key=lambda x: x['age']):\n    print(key, list(group))`.trim();\n\nconst repeat = `\nfrom itertools import count, cycle, repeat\n\nfor i in count(10):                                                 # count(x): count from x: x, x+1, x+2, x+3...\n    print(i)\n    if  i >= 13:\n        break\n\n\nsum = 0\nfor i in cycle([1, 2, 3]):                                         # cycle infinitely through an iterable\n    print(i)\n    sum += i\n    if sum >= 12:\n        break\n\n\nfor i in repeat(\"A\", 3):                                           # repeat x infinitely or n times\n    print(i)`.trim();\n\nconst iteration = `\nd = dict()\nd['xyz'] = 123\nd['abc'] = 345\n\nfor i in d:\n    print(\"% s % d\" % (i, d[i]))\n    \n    \n    \n#2 \nfor letter in 'geeksforgeeks':\n  if letter == 'e' or letter == 's':                              #Returns the control to the beginning of the loop.\n    continue\n  print('Current Letter :', letter)\n    \n    \n    \n#3 \nfor letter in 'geeksforgeeks':\n  if letter == 'e' or letter == 's':\n    break                                                         #Brings control out of the loop.\n\nprint('Current Letter :', letter)\n    \n    \n#4 pass\nfunction and classes.\nfor letter in 'geeksforgeeks':\n  pass\nprint('Last Letter :', letter)\n\n\n#5 \ndef addition(n):                                                  #Pass one or more iterable to the map() function.\n    return n + n \n\nnumbers = (1, 2, 3, 4) \nresult = map(addition, numbers) \nprint(list(result))\n`.trim();\n\nconst arraysTypes = `\nfrom array import  *\n\nvals = array('i', [1,2,3,4,5,-6,7,8,9,10])                                  // Creating an Array\nfloatArr = array('d', [2.5, 3.2, 3.3])                                      // creating an array with float type\n\nprint(vals.typecode)\nvals.append(100)\nvals.insert(1, 4)\nvals.remove(1)\nvals.pop(2)\nvals.index(2)\nvals[2] = 6                                                                # Updating an Elements in an Array\nprint(len(vals))\n`.trim();\n\nconst arrays = `\nimport array as arr                                           \n\na = arr.array('i', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])                                         \nfor i in range(0, 3):\n    print(a[i], end=\" \")\n\n    \n//2. Sum of the array\ndef _sum(arr):\n    return(sum(arr))\n\nans = _sum([12, 3, 4, 15])\nprint (ans)\n\n\n//3. Slpit Array\ndef splitArr(arr, n, k):\n    for i in range(0, k):\n        x = arr[0]\n        for j in range(0, n-1):\n            arr[j] = arr[j + 1]\n\n        arr[n-1] = x\n\n\narr = [12, 10, 5, 6, 52, 36]\nn = len(arr)\nposition = 2\n\nsplitArr(arr, n, position)\n\nfor i in range(0, n):\n    print(arr[i], end = ' ')\n`.trim();\n\nconst arrayRotetions = `\ndef leftRotate(arr, d, n):\n    for i in range(d):\n        leftRotatebyOne(arr, n)\n\ndef leftRotatebyOne(arr, n):\n    temp = arr[0]\n    for i in range(n-1):\n        arr[i] = arr[i+1]\n    arr[n-1] = temp\n\n\ndef printArray(arr,size):\n    for i in range(size):\n        print (\"%d\"% arr[i],end=\" \")\n\n\narr = [1, 2, 3, 4, 5, 6, 7]\nleftRotate(arr, 2, 7)\nprintArray(arr, 7) \n `.trim();\n\nconst reverseRotetions = `\ndef rverseArray(arr, start, end):\n    while (start < end):\n        temp = arr[start]\n        arr[start] = arr[end]\n        arr[end] = temp\n        start += 1\n        end = end-1\n\ndef leftRotate(arr, d):\n    n = len(arr)\n    rverseArray(arr, 0, d-1)\n    rverseArray(arr, d, n-1)\n    rverseArray(arr, 0, n-1)\n\ndef printArray(arr):\n    for i in range(0, len(arr)):\n        print (arr[i])\n\narr = [1, 2, 3, 4, 5, 6, 7]\nleftRotate(arr, 2)                                                                           # Rotate array by 2\nprintArray(arr)`.trim();\n\nconst monotonic = `\ndef isMonotonic(A):\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or  all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n\nA = [6, 5, 4, 4]\nprint(isMonotonic(A))\n`.trim();\n\n\nclass IteratorsPy extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Stop after 20 iterations</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={addition}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>For</h3>\n              <ul>\n                <li>To prevent the iteration to go on forever, use the StopIteration statement.</li>\n                <li>Use pass statement to write empty loops.</li>\n                <li>Pass is also used for empty control statements</li>\n              </ul>\n\n              <div style={titles}>\n                <PrismCode\n                  code={iteration}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>product()</h3>\n              <ul>\n                <li>It computes the cartesian product of input iterables.</li>\n                <li>To allow the product of an iterable with itself, specify the number of repetitions</li>\n                <li>It is equivalent to nested for-loops.</li>\n                <ul>\n                  <li><b>Ex. product(A, B) returns the same as ((x,y) for x in A for y in B).</b></li>\n                </ul>\n\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={product}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>permutations()</h3>\n              This tool returns successive length permutations of elements in an iterable, with all possible orderings, and no repeated elements.\n              <div style={titles}>\n                <PrismCode\n                  code={permutations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>combinations() and combinations_with_replacement()</h3>\n              r-length tuples, in sorted order. So, if the input iterable is sorted, the combination tuples will be produced in sorted order. combinations() does not allow repeated elements, but combinations_with_replacement() does.\n              <div style={titles}>\n                <PrismCode\n                  code={combinations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>accumulate()</h3>\n              Make an iterator that returns accumulated sums, or accumulated results of other binary functions.\n              <div style={titles}>\n                <PrismCode\n                  code={accumulate}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>groupby()</h3>\n              Make an iterator that returns consecutive keys and groups from the iterable. The key is a function computing a key value for each\n              element. If not specified, key defaults to an identity function and returns unchanged element.\n              <div style={titles}>\n                <PrismCode\n                  code={groupby}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Infinite iterators: count(), cycle(), repeat()</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={repeat}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Array</h3>\n              <b>Array don't have fixed size.</b>\n              <br />\n              <br />\n\n              <i><b>append()</b>\tAdds an element at the end of the list<br />\n                <b>clear()</b>\tRemoves all the elements from the list<br />\n                <b>copy()</b>\tReturns a copy of the list<br />\n                <b>count()</b>\tReturns the number of elements with the specified value<br />\n                <b>extend()</b>\tAdd the elements of a list (or any iterable), to the end of the current list<br />\n                <b>index()</b>\tReturns the index of the first element with the specified value<br />\n                <b>insert()</b>\tAdds an element at the specified position<br />\n                <b>pop()</b>\tRemoves the element at the specified position<br />\n                <b>remove()</b>\tRemoves the first item with the specified value<br />\n                <b>reverse()</b>\tReverses the order of the list<br />\n                <b>sort()</b>\tSorts the list<br />\n                <br />\n              </i>\n              <div style={titles}>\n                <PrismCode\n                  code={arraysTypes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={arrays}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Array Rotation</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={arrayRotetions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Reverse Array Rotation</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={reverseRotetions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Monotonic</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={monotonic}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(IteratorsPy));\n"]},"metadata":{},"sourceType":"module"}