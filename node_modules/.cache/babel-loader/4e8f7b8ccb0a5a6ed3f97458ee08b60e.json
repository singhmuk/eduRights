{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/mongoDB/deepMongodb/curdOp.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst code = `\n// Add operation\ndb.users.insertOne({\n    name: \"sue\",\n    age: 26,\n    status: \"pending\"\n  })\n  \n  \n  // Read operation\n  Read operations retrieve documents from a collection.\n  db.collection.find()\n  \n  db.users.find(\n    {age : { $gt: 18 }},\n    {name: 1, address:1}\n  ).limit(5)\n  \n  \n  // Update Operations\n  Update operations modify existing documents in a collection.\n  db.collection.updateOne() \n  db.collection.updateMany() \n  db.collection.replaceOne() \n  \n  db.users.updateMany(\n    {age : { $lt: 18 }},\n    {$set:  {status: \"reject\"}}\n  )\n  \n  //Delete Operations\n  Delete operations remove documents from a collection. \n  db.collection.deleteOne() \n  db.collection.deleteMany()\n  \n  db.users.deleteMany(\n      {status: \"reject\"}\n  )`.trim();\nconst insert = `\n  db.inventory.insertMany([\n    { item: \"journal\", qty: 25, tags: [\"blank\", \"red\"], size: { h: 14, w: 21, uom: \"cm\" } },\n    { item: \"mat\", qty: 85, tags: [\"gray\"], size: { h: 27.9, w: 35.5, uom: \"cm\" } },\n    { item: \"mousepad\", qty: 25, tags: [\"gel\", \"blue\"], size: { h: 19, w: 22.85, uom: \"cm\" } }\n ])`.trim();\nconst finding = `\n // Find all students\ndb.students.find( {} )\n\n// Find the first 3 students\ndb.stuents.find( {} ).limit(3)\n\n// Find all students and sort by name in ascending order\ndb.students.find( {} ).sort( {name: 1} )\n\n// Find all students and sort by name in ascending order\ndb.students.find( {} ).sort( {gpa: -1, name: 1} )\n\n// Find all biology majors\ndb.students.find( {major: \"Biology\"} )\n\n// Find all student's with a phone number 333-3333\ndb.students.find( {contact: {phone: \"333-3333\", email: \"student@school.edu\"} } )\n\n// Find all biology majors named Jack\ndb.students.find( {name: \"Jack\", major: \"Biology\"} )\n\n// Final all students who are chemistry majors or named Jack\ndb.students.find( { $or: [ {name: \"Jack\"}, {major: \"Chemistry\"} ] } )\n\n// Final all students with a gpa above 3.5\ndb.students.find( {gpa: {$gt: 3.5} } )\n\n// Find all students with a gpa less than or equal to 3.2\ndb.students.find( {gpa: {$lte: 3.2} } ).sort({gpa: -1})         // $eq, $ne, $lt, $lte, $gt, $gte\n\n// Find all students with names in the array\ndb.students.find( {name: {$in: [\"Kate\", \"Claire\"]} } )   // $in, $nin\n\n// Find all students who have awards\ndb.students.find( {awards: {$exists: true} } )           // false\n\n// Find all db entries where the name is a string\ndb.students.find({name: {$type: 2} })\n\n// Find all students who's first grade is a 90\ndb.students.find( {\"grades.0\": 90 } )\n\n// Find all students who have a grade greater than 80\ndb.students.find( {grades: {$elemMatch: { $gte: 80} } } )\n\n// Find all students who have 4 grades recorded\ndb.students.find( {grades: {$size: 4 } } )`.trim();\nconst updating = `\n// same filters as inserting\ndb.stuents.updateOne(<filter>, <update>, <options>)\n\n// Do this twice so we can change it back with updateMany\ndb.students.updateOne(\n     {major: \"Biology\"},\n     {  $set: {major: \"Bio\"}}\n  )\n\ndb.students.updateMany(\n     {major: \"Bio\"},\n     { $set: {major: \"Biology\"} }\n  )\n\n// replaceMany()\ndb.students.replaceOne(\n     {major: \"Bio\"},\n     {name: \"new name\", major: \"new major\", gpa: 4.0}\n  )\n\n// Delete all documents\ndb.students.deleteMany({})\n\ndb.students.deleteOne({major: \"Biology\"})\n\ndb.students.deleteMany({gpa: {$gte: 3.5}})`.trim();\n\nclass CurdOp extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"Curd Operations\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), \"Create or insert operations add new documents to a collection. If the collection does not currently exist, insert operations will create the collection.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), \"MongoDB provides the following methods to insert documents into a collection:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, \"db.collection.insertOne() \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"db.collection.insertMany()\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), \"In MongoDB, insert operations target a single collection. All write operations in MongoDB are atomic on the level of a single document\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: code,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"Insert Multiple Documents\"), \"db.collection.insertMany()\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: insert,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"Finding Documents\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: finding,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, \"Updating & Deleting Documents\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: updating,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(CurdOp);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/mongoDB/deepMongodb/curdOp.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","code","trim","insert","finding","updating","CurdOp","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = {backgroundColor:'#F0F8FF', padding:'1px', fontSize:'16px'}\n\nconst styles = theme => ({\n  paper: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1)\n  },\n  smMargin: {\n      margin: theme.spacing(1)\n  },\n  actionDiv: {\n      textAlign: \"center\"\n  }\n})\n\nconst code = `\n// Add operation\ndb.users.insertOne({\n    name: \"sue\",\n    age: 26,\n    status: \"pending\"\n  })\n  \n  \n  // Read operation\n  Read operations retrieve documents from a collection.\n  db.collection.find()\n  \n  db.users.find(\n    {age : { $gt: 18 }},\n    {name: 1, address:1}\n  ).limit(5)\n  \n  \n  // Update Operations\n  Update operations modify existing documents in a collection.\n  db.collection.updateOne() \n  db.collection.updateMany() \n  db.collection.replaceOne() \n  \n  db.users.updateMany(\n    {age : { $lt: 18 }},\n    {$set:  {status: \"reject\"}}\n  )\n  \n  //Delete Operations\n  Delete operations remove documents from a collection. \n  db.collection.deleteOne() \n  db.collection.deleteMany()\n  \n  db.users.deleteMany(\n      {status: \"reject\"}\n  )`.trim();\n  \n  \n  const insert = `\n  db.inventory.insertMany([\n    { item: \"journal\", qty: 25, tags: [\"blank\", \"red\"], size: { h: 14, w: 21, uom: \"cm\" } },\n    { item: \"mat\", qty: 85, tags: [\"gray\"], size: { h: 27.9, w: 35.5, uom: \"cm\" } },\n    { item: \"mousepad\", qty: 25, tags: [\"gel\", \"blue\"], size: { h: 19, w: 22.85, uom: \"cm\" } }\n ])`.trim();\n \n \n const finding = `\n // Find all students\ndb.students.find( {} )\n\n// Find the first 3 students\ndb.stuents.find( {} ).limit(3)\n\n// Find all students and sort by name in ascending order\ndb.students.find( {} ).sort( {name: 1} )\n\n// Find all students and sort by name in ascending order\ndb.students.find( {} ).sort( {gpa: -1, name: 1} )\n\n// Find all biology majors\ndb.students.find( {major: \"Biology\"} )\n\n// Find all student's with a phone number 333-3333\ndb.students.find( {contact: {phone: \"333-3333\", email: \"student@school.edu\"} } )\n\n// Find all biology majors named Jack\ndb.students.find( {name: \"Jack\", major: \"Biology\"} )\n\n// Final all students who are chemistry majors or named Jack\ndb.students.find( { $or: [ {name: \"Jack\"}, {major: \"Chemistry\"} ] } )\n\n// Final all students with a gpa above 3.5\ndb.students.find( {gpa: {$gt: 3.5} } )\n\n// Find all students with a gpa less than or equal to 3.2\ndb.students.find( {gpa: {$lte: 3.2} } ).sort({gpa: -1})         // $eq, $ne, $lt, $lte, $gt, $gte\n\n// Find all students with names in the array\ndb.students.find( {name: {$in: [\"Kate\", \"Claire\"]} } )   // $in, $nin\n\n// Find all students who have awards\ndb.students.find( {awards: {$exists: true} } )           // false\n\n// Find all db entries where the name is a string\ndb.students.find({name: {$type: 2} })\n\n// Find all students who's first grade is a 90\ndb.students.find( {\"grades.0\": 90 } )\n\n// Find all students who have a grade greater than 80\ndb.students.find( {grades: {$elemMatch: { $gte: 80} } } )\n\n// Find all students who have 4 grades recorded\ndb.students.find( {grades: {$size: 4 } } )`.trim();\n\n\nconst updating = `\n// same filters as inserting\ndb.stuents.updateOne(<filter>, <update>, <options>)\n\n// Do this twice so we can change it back with updateMany\ndb.students.updateOne(\n     {major: \"Biology\"},\n     {  $set: {major: \"Bio\"}}\n  )\n\ndb.students.updateMany(\n     {major: \"Bio\"},\n     { $set: {major: \"Biology\"} }\n  )\n\n// replaceMany()\ndb.students.replaceOne(\n     {major: \"Bio\"},\n     {name: \"new name\", major: \"new major\", gpa: 4.0}\n  )\n\n// Delete all documents\ndb.students.deleteMany({})\n\ndb.students.deleteOne({major: \"Biology\"})\n\ndb.students.deleteMany({gpa: {$gte: 3.5}})`.trim();\n\n\nclass CurdOp extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n            <Grid item xs={2}>\n                <Paper className={classes.paper}>\n                    <h4><Sidebar /></h4>\n                </Paper>\n            </Grid>\n            <Grid item xs={10}>\n              <Paper className={classes.paper}>\n                <List>\n                 <b>Curd Operations</b>\n                 <br/>\n                 <br/>\n                 Create or insert operations add new documents to a collection. If the collection does not currently exist, insert operations will create the collection.<br/>\n                 MongoDB provides the following methods to insert documents into a collection:<br/><br/>\n                 <i><li>db.collection.insertOne() </li>\n                     <li>db.collection.insertMany()</li></i>\n                     <br/>\n                     In MongoDB, insert operations target a single collection. All write operations in MongoDB are atomic on the level of a single document\n                   <div style={titles}>\n                      <PrismCode\n                        code={code}\n                        language=\"js\"\n                        plugins={[\"line-numbers\"]}\n                      />\n                    </div>\n                    <br/>\n                    <h3>Insert Multiple Documents</h3>\n                    db.collection.insertMany()\n                    <div style={titles}>\n                      <PrismCode\n                        code={insert}\n                        language=\"js\"\n                        plugins={[\"line-numbers\"]}\n                      />\n                    </div>\n                    <br/>\n                    <h3>Finding Documents</h3>\n                    <div style={titles}>\n                      <PrismCode\n                        code={finding}\n                        language=\"js\"\n                        plugins={[\"line-numbers\"]}\n                      />\n                    </div>\n                    <br/>\n                    <h3>Updating & Deleting Documents</h3>\n                    <div style={titles}>\n                      <PrismCode\n                        code={updating}\n                        language=\"js\"\n                        plugins={[\"line-numbers\"]}\n                      />\n                    </div>\n                    </List>\n                </Paper>\n              </Grid>\n            </Grid>\n          )\n        }\n      }\n\nexport default (withStyles(styles)(CurdOp));\n"]},"metadata":{},"sourceType":"module"}