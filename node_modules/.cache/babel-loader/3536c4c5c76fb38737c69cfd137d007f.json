{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import\"../../ReactJs/styles.css\";import Sidebar from\"../sidebar\";import PrismCode from\"../../ReactJs/prismCode\";var titles={backgroundColor:\"#F0F8FF\",padding:\"1px\",fontSize:\"16px\"};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var redesign={height:200,width:500};var NgClass=\"\\n@Component({\\n  selector: 'app-root',\\n  template: '\\n  <p [ngStyle] = \\\"{backgroundColor: getColor()}\\\" [ngClass] = \\\"{Online: serverStatus === 'Online'}\\\"> \\n    Server  with ID {{serverID}} is {{serverStatus}}. \\n  </p >,\\n  styles: ['.Online{ color: yellow; }']'})\\n\\nexport class AppComponent {\\n  serverID: number = 10;\\n  serverStatus: string = 'Offline';\\n\\n  constructor () {\\n  this.serverStatus = Math.random() > 0.5 ? 'Online' : 'Offline';\\n  }\\n\\n  getServerStatus() {\\n    return this.serverStatus;\\n  }\\n  getColor() {\\n    return this.serverStatus === 'Online' ? 'green' : 'red';\\n  }\\n}\".trim();var databinding=\"\\nDOM               Component\\n<----{{value}}-----\\n<-[propery]=\\\"value\\\" --                        <img [src]=\\\"imageUrl\\\">\\n--(event)=\\\"handler\\\" -->                       <button (click)=\\\"onClick()\\\">Click me</button>\\n<-[(NgModule)]=\\\"propery\\\" --                   [ngModel];\\n\".trim();var property=\"\\nsyntax: [property]='expression\\n\\n//html\\n<button (click)=\\\"toggleSecret()\\\">Toggle Secret</button>\\n<h3 [hidden]=\\\"secretTextHidden\\\">Property Binding</h3>\\n\\n    \\nexport class AppComponent {\\n  secretTextHidden = false;\\n  toggleSecret() {\\n    this.secretTextHidden = !this.secretTextHidden;\\n  }\\n}\\n\".trim();var NgStyles=\"\\n//1\\n<div [ngStyle]=\\\"{'color':green}\\\"></div>\\nngStyle become much more useful when the value is dynamic.\\n<div [ngStyle]=\\\"{'color': person.country==='UK' ? 'green' : 'red'}\\\"></div>\\n\\n\\n//2\\n@Component({\\n  selector: 'app-root',\\n  template: '\\n  <p[ngStyle]=\\\"{backgroundColor: 'green'}\\\"> Server with ID {{serverID}} is {{serverStatus}}.</p>\\n  '})\\nexport class AppComponent {\\n  serverID: number = 10;\\n  serverStatus: string = 'Offline';\\n\\n  constructor () {\\n  this.serverStatus = Math.random() > 0.5 ? 'Online' : 'Offline';\\n  }\\n}\".trim();var templateState=\"\\nexport class AppComponent {\\n  isHsow = false;\\n\\n  onToggle() {\\n    this.isHsow = !this.isHsow;\\n  }\\n}\\n\\n\\n//html\\n{{ isHsow }}\\n<button (click)=\\\"onToggle()\\\">Click</button>\\n\\n\".trim();var hostBinding=\"\\nimport { Component, ElementRef, HostBinding, HostListener} from '@angular/core';\\n\\n@Component({\\n  selector: 'app-root',\\n  template: '<p>@HostBinding() & @HostListener()</p>',\\n  providers:[]\\n})\\n\\nexport class AppComponent{\\n  constructor(private el:ElementRef){\\n\\n  }\\n\\n  @HostBinding('style.color') textColor: any;\\n  ngOnInit(){\\n    this.textColor=\\\"green\\\";\\n  }\\n\\n  @HostListener('click') onClick(){\\n    // alert('HostListener')\\n    this.textColor = \\\"red\\\";\\n  }\\n\\n  @HostListener('mouseover') onMouseHover(){\\n    this.textColor = \\\"blue\\\";\\n  }\\n\\n  @HostListener('mouseout') onMouseOut(){\\n    this.textColor = \\\"pink\\\";\\n  }\\n}\".trim();var makeServices=\"\\n//myService.ts\\nimport { Injectable } from '@angular/core';\\n\\n@Injectable({\\n  providedIn: 'root',\\n})\\nexport class myService {\\n  name = 'Mukesh';\\n  sayHello() {\\n    console.log(this.name);\\n  }\\n}\\n\\n\\n//app.component.ts\\nimport { myService } from './myservice';\\n\\n@Component({\\n  selector: 'app-root',\\n  template: '',\\n})\\nexport class AppComponent {\\n  constructor(private myServices: myService) {\\n    this.myServices.sayHello();\\n  }\\n}\\n\\n\\n//app.module.ts\\n@NgModule({\\n  declarations: [AppComponent, Child],\\n  imports: [\\n    BrowserModule,\\n    AppRoutingModule,\\n    FormsModule,\\n    StoreModule.forRoot({}),\\n  ],\\n  providers: [myService],\\n  bootstrap: [AppComponent],\\n})\\n\".trim();var makeServices1=\"\\n@Injectable({\\n  providedIn: 'root'\\n})\".trim();var makeServices2=\"\\nimport { Injectable } from '@angular/core';\\nimport { MyModule } from './my.module';\\n\\n@Injectable({\\n  providedIn: MyModule\\n})\\nexport class MyService {}\".trim();var httpClients=\"\\n//html\\n<tr *ngFor=\\\"let datas of httpData\\\">\\n  <td>{{ datas.title }}</td>\\n</tr>'\\n\\n\\ninterface Kafein {\\n  name: string;\\n  address: string;\\n}\\n\\nexport class AppComponent {\\n  url = 'https://jsonplaceholder.typicode.com/todos';\\n  httpData: any;\\n\\n  constructor(private http: HttpClient) {}\\n\\n  ngOnInit() {\\n    this.callApi();\\n  }\\n\\n  callApi() {\\n    this.http.get<Kafein[]>(this.url).subscribe((data) => {\\n      this.httpData = data;\\n    });\\n  }\\n}\\n\".trim();var reactiveforms=\"\\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\\n\\nexport class AppComponent {\\n  myForm: FormGroup;\\n\\n  constructor(private fb: FormBuilder) {\\n    this.myForm = this.fb.group({\\n      name: ['', Validators.required],\\n      email: ['', [Validators.required, Validators.email]],\\n    });\\n  }\\n\\n  onSubmit() {\\n    console.log(this.myForm.value);\\n  }\\n}\\n\\n\\n//\\n<form [formGroup]=\\\"myForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n  <input type=\\\"text\\\" formControlName=\\\"name\\\" required />\\n  <input type=\\\"email\\\" formControlName=\\\"email\\\" required />\\n  <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\".trim();var tempForm=\"\\n//html\\n<form #userForm=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n  <input type=\\\"text\\\" name=\\\"name\\\" [(ngModel)]=\\\"user.name\\\" required />\\n  <input type=\\\"text\\\" name=\\\"email\\\" [(ngModel)]=\\\"user.email\\\" required />\\n\\n  <button type=\\\"submit\\\" [disabled]=\\\"!userForm.valid\\\">Submit</button>\\n</form>\\n\\n\\nexport class AppComponent {\\n  user = { name: '', email: '' };\\n\\n  onSubmit() {\\n    console.log(this.user);\\n  }\\n}\".trim();var formBuilder=\"\\nmyForm: FormGroup = this.fb.group({\\n  name: ['', Validators.required],\\n  email: ['', [Validators.required, Validators.email]],\\n  age: [18, Validators.min(18)]\\n});\".trim();var templateexp=\"\\n1+2={{ 1 + 2 }}\\n\".trim();var IntroAngulard=/*#__PURE__*/function(_Component){_inherits(IntroAngulard,_Component);function IntroAngulard(){_classCallCheck(this,IntroAngulard);return _possibleConstructorReturn(this,_getPrototypeOf(IntroAngulard).apply(this,arguments));}_createClass(IntroAngulard,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Please explain the various features of Angular.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Components: \"),\"Angular is a component-based framework, which means that applications are built by assembling components that represent different parts of the application's user interface. Components are reusable, self-contained, and can be easily combined to create complex user interfaces.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Templates: \"),\" Angular uses templates to define the user interface of a component. Templates are written in HTML and contain Angular-specific syntax that allows for data binding and other features.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Directives: \"),\"Angular provides a number of built-in directives that allow you to manipulate the DOM, add or remove elements, and apply conditional logic to your templates. You can also create custom directives to extend the functionality of Angular.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Services: \"),\"Services are used to provide functionality that can be shared across different components of an application. Services can be used for things like fetching data from a server, performing complex calculations, or managing state.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Dependency Injection: \"),\"Angular's dependency injection system allows you to easily manage dependencies between different components and services. Dependencies are injected into components and services through their constructors.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Routing: \"),\"Angular's routing system allows you to define routes for different parts of your application and navigate between them using URLs.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Forms: \"),\"Angular provides powerful support for building forms, including both template-driven and reactive forms. This includes features like form validation, form submission, and handling user input.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Observables: \"),\"Angular uses observables to handle asynchronous operations such as HTTP requests. Observables provide a way to work with asynchronous data streams in a more efficient and predictable way.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Testing: \"),\"Angular provides a number of tools and utilities for testing your application, including both unit tests and end-to-end tests. This includes features like the Angular testing library and the Protractor testing framework.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Mobile Support: \"),\"Angular provides support for building mobile applications using technologies like Ionic and NativeScript.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. What is difference between package.json and package-lock.json.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"package.json: \"),\"This file is used to define the dependencies and other metadata of an application. It contains information about the application, such as its name, version, author, and dependencies required for the application to run.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"package.lock.json: \"),\"This file is used to keep track of the exact version of every package and its dependencies that are installed in an application. The package-lock.json file ensures that the exact same version of a package and its dependencies are installed on all machines running the application. This helps to avoid dependency conflicts and ensures that the application runs consistently across different environments.\")),React.createElement(\"br\",null),\"In summary, package.json defines the metadata and dependencies required for the application to run, while package-lock.json is used to lock the dependencies to specific versions to ensure consistency across different machines.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. What is metadata\"),\"Metadata, Annotation and Decorator is same thing.\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Metadata is used to decorate a class so that it can configure the expected behavior of the class.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"Decorator accept object. decorator are simply functions that return functions. decorator are invoke at runtime. decorator allows you to excuite functions.\")),React.createElement(\"br\",null),\"There are four main types of decorators:\",React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Class decorators: \"),\", @Component, @Directive, @NgModule, @Injectable, and @Pipes.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Property decorators: \"),\"These decorators are used to modify the behavior of a class property. \",React.createElement(\"b\",null,\"Ex \"),\"@Input, @Output, @HostBinding, @ContentChild, @ContentChildren, @ViewChild, @ViewChildren.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Method decorators: \"),\"These decorators are used to modify the behavior of a class method. \",React.createElement(\"b\",null,\"Ex \"),\"@HostListener.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Parameter decorators for parameters inside class constructors\"),\"@Inject.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"@HostBinding: \"),\"Decorator is used to bind a property of a directive to a property of its host element. This allows the directive to set properties on the host element based on its own state or configuration.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"@HostListener: \"),\"Decorator is used to subscribe to events that occur on the host element of a directive. The host element is the element that the directive is attached to, and the @HostListener decorator is used to specify which events the directive should listen to.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:hostBinding,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"ii. Parameter decorators: \"),\"Used for parameters inside class constructors, e.g. @Inject, Optional.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. Explain Components, Modules and Services in Angular.\"),React.createElement(\"b\",null,\"i. Components: \"),\"Components are the most basic building blocks of an Angular application, and they can be reused throughout the application to create a consistent user interface.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"key features: \"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Selector: \"),\"Components are identified by a selector, which is a CSS selector that identifies the HTML element that the component represents. The selector is used to tell Angular where to insert the component in the DOM.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Template: \"),\"A component has its own template, which is the HTML code that defines the structure and layout of the component. The template can include data binding syntax, which allows the component to display dynamic data.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"styleUrls: \"))),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"ii. Modules \"),\"A module is a mechanism for organizing code into separate, reusable, and encapsulated units. A module can contain components, services, directives, and other types of Angular constructs that are needed for a particular feature or functionality in an application.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"To define a module, we use \",React.createElement(\"b\",null,\"@NgModule\"),\" decorator.\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Default module is app.module.ts.\"),React.createElement(\"li\",null,\"We can includes a module inside another module.\"),React.createElement(\"li\",null,\"A module have at least one component. components declared inside \\\"declarations\\\" in module. while module inside \\\"imports\\\" in app.module.ts.\",\" \"),React.createElement(\"li\",null,\"We can import a module and use inside another module. For injecting a module we use, exports:[ModuleName].\"),React.createElement(\"li\",null,\"A component cannot be import in two diffrent modules. If do than show runtime error. this is features module.\")),React.createElement(\"br\",null),\"By default, modules are of two types:\",React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Root Module: \")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Feature Module: \"),\"Every application can have only one root module whereas, it can have one or more feature modules.\",React.createElement(\"ol\",null,React.createElement(\"li\",null,\"A root module imports\\xA0BrowserModule,\"),React.createElement(\"li\",null,\"whereas a feature module imports\\xA0CommonModule.\")))),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"iii. Services \"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Are a greate way to share information among classes that don't know each other.\"),React.createElement(\"li\",null,\"Are basically a classes which may have some data, property or some functions. And we can use these data,property and functions in multiple files.\"),React.createElement(\"li\",null,\"Services are objects which get instantiated only once during the lifetime of an application.\",\" \"),React.createElement(\"li\",null,\"Services can depend on other services.\")),React.createElement(\"br\",null),\"A service is defined using a\\xA0\",React.createElement(\"b\",null,\"@Injectable\"),\"\\xA0decorator.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"providedIn: \"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"providedIn property is used to specify the provider of a service or a dependency injection token. It is a property of the @Injectable decorator, which is used to annotate a class that can be injected as a dependency in other classes.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"The providedIn property can have one of two possible values: 'root' or an NgModule class. When 'root' is specified, the service is registered with the application's root injector, which makes it available to the entire application. When an NgModule class is specified, the service is registered with the injector of that module, which makes it available to all components and services declared in that module.\")),React.createElement(\"br\",null),\"Here's an example of using providedIn to specify the provider of a service:\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:makeServices1,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),\"In this example, the providedIn property is set to 'root', which means that MyService will be registered with the root injector and will be available to the entire application.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"Alternatively, you can specify an NgModule as the provider:\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:makeServices2,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"In this example, MyService is registered with the injector of the MyModule module, which means that it will be available to all components and services declared in that module.\"),React.createElement(\"li\",null,\"Using providedIn is a convenient way to register services and DI tokens in Angular, and it can help simplify the process of managing dependencies and provider hierarchies in an application.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:makeServices,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. What are directives\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Directives are used to extend the power of the HTML attributes and to change the appearance or behavior of a DOM element.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Elements which change the appearence/ behavior of the DOM element. 3 types of Directives.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Component Directives:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"These are directives that are used to define a new custom component, which can be used in templates like any other component. Component directives are declared using the @Component decorator.\"))),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Structural Directives:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Do manipulation in DOM.\"),React.createElement(\"li\",null,\"Structural directive modifies or manipulates the structure of DOM by adding or removing DOM elements. it works on the structure of a DOM.\"),React.createElement(\"li\",null,\"Structural directives which have a * sign before the directive. *ngIf and *ngFor.\"))),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Attribute Directives/ Behavioral Directives:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Do css related things.\"),React.createElement(\"li\",null,\" Change appearence/ behavior of the DOM.\"),React.createElement(\"li\",null,\"Attribute directives deal with the changing of look and behavior of the DOM element, component or another directive. Ex. NgStyle\"))),React.createElement(\"br\",null),\"By default, angular provide two attribute directives\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"1. NgClass: \"),\"dynamically, add or remove CSS class on the basis of the certain conditions.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"Allows us to set the CSS class dynamically for a DOM element. we can use ngClass with string, array, object or component method.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:NgClass,language:\"js\",plugins:[\"line-numbers\"]}))),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"2. NgStyle: \"),\"dynamically, add or remove styles on the basis of the certain conditions.\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:NgStyles,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. What is difference between attribute and structural directives?\"),\"Attribute directives modify the appearance or behavior of DOM elements. Structural directives add or remove elements from the DOM.\",React.createElement(\"br\",null),React.createElement(\"h3\",null,\"7. What are template expressions\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Template expressions are expressions that are evaluated by the Angular template engine and used to dynamically render values or perform calculations in the template.\"),React.createElement(\"li\",null,React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:templateexp,language:\"js\",plugins:[\"line-numbers\"]})))),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"8. What are template statements\"),\"Template statements are a way to define event bindings between the user interface and component logic. They allow you to listen for events triggered by the user, such as button clicks or form submissions, and respond to those events with the appropriate logic.\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:templateState,language:\"js\",plugins:[\"line-numbers\"]}),React.createElement(\"br\",null),React.createElement(\"b\",null,\"N: \"),\"Component send data to Template by using Promises binding or Interpolation.\"),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"9. What is Data Binding? How many ways it can be done?\"),\"In order to connect application data with the DOM, data binding is used. It happens between the template and component. There are 4 ways to achieve data binding:\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Interpolation / String Interpolation (one-way data binding)\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Event Binding: \"),\"Event binding allows you to bind an event of an element to a method in the component. It is done by using parentheses.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Property Binding: \"),\"Means passing data from the component to the template.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Two-way Binding: \"),\"It's a process that gives component a way to share data between the component class and its template. If the data is changed in one place it will automatically change the data at other end.. It is done by using the [(ngModel)] directive.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Data binding Forms:\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:databinding,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Property binding: \"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:property,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"10. What are the differences between Component and Directive\"),React.createElement(\"table\",null,React.createElement(\"tr\",null,React.createElement(\"th\",null,\"Component\"),React.createElement(\"th\",null,\"Directive\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"To register a component we use @Component meta-data annotation\"),React.createElement(\"td\",null,\"To register directives we use @Directive meta-data annotation\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"Components are typically used to create UI widgets\"),React.createElement(\"td\",null,\"Directive is used to add behavior to an existing DOM element\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"Component is used to break up the application into smaller components\"),React.createElement(\"td\",null,\"Directive is use to design re-usable components\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"Only one component can be present per DOM element\"),React.createElement(\"td\",null,\"Many directives can be used per DOM element\"))),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"11. Dependency Injection\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Dependency Injection (DI) is a design pattern used in Angular that allows a class to receive its dependencies from an external source rather than creating them itself. It is a way of providing objects or services to a component that needs to function properly, without creating these objects directly.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"When a component or service is instantiated, the Angular injector checks its constructor for required dependencies and injects them into the component or service automatically. This allows for loose coupling between components and services and makes the code more modular, easier to maintain, and more testable.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"12. HttpClient\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"HttpClient is a built-in service that allows you to make HTTP requests to a server in your application. It provides a simplified client interface for HTTP requests and responses, with support for advanced features such as request and response interception, progress tracking, and error handling.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"import HttpClientModule as imports: [ HttpClientModule] in app.module.ts file.\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:httpClients,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"13. What is the difference between template driven form and reactive based approach?\"),React.createElement(\"b\",null,\"import FormsModule and Reactiveforms Module in Angular to use [(ngModel)] and reactive forms respectively.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Template-driven forms are asynchronous in nature, whereas Reactive forms are mostly synchronous.\"),React.createElement(\"li\",null,\"In a template-driven approach, most of the logic is driven from the template, whereas in reactive-driven approach, the logic resides mainly in the component.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"14. Two ways to collect and validate data from users\"),React.createElement(\"b\",null,\"1. Template-driven forms:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"To use it we need to import FormsModule in application.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:tempForm,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"2. Model-driven forms (Reactive forms)\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"The model which is created in .ts file is responsible for handling all the user interactions/ validations. For this first need to create the model using Angular unbuilt classes like formGroup and formControl and then, we need to bind the model to HTML form.\"),React.createElement(\"li\",null,\"As we create the form controls directly in the component, it makes easier to push data between the data models and UI elements.\",\" \")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"import 'ReactiveFormsModule' in app.module.ts file\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:reactiveforms,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"statusChanges():\"),React.createElement(\"br\",null),\"Is a property of AbstractControl that emits an event every time when the validations status of the control is recalculated.\",React.createElement(\"br\",null),\"statusChanges property is available in formControl, FormArray and formGroup classes because they inherit AbstractControl class.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"15. What is the difference between FormBuilder and FormControl?\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"FormControl: \"),\"Is a class that represents a single form control, which is typically a single input field . A FormControl can be used to capture user input, validate input data, and track the state of the input field.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"FormBuilder: \"),\"Is a service that provides a more convenient way to create and manage form controls and form groups. It allows developers to create complex forms with many form controls and nested form groups.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"In summary, FormControl is used to create and manage a single form control, while FormBuilder is used to create and manage complex forms with many form controls and nested form groups.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"The FormBuilder class has 3 methods: \"),React.createElement(\"ol\",null,React.createElement(\"li\",null,\"control()\"),React.createElement(\"li\",null,\"group()\"),React.createElement(\"li\",null,\"array()\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:formBuilder,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return IntroAngulard;}(Component);export default withStyles(styles)(IntroAngulard);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/deepAngularjs/introAngularjs.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","redesign","height","width","NgClass","trim","databinding","property","NgStyles","templateState","hostBinding","makeServices","makeServices1","makeServices2","httpClients","reactiveforms","tempForm","formBuilder","templateexp","IntroAngulard","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst redesign = {\n  height: 200,\n  width: 500,\n};\n\nconst NgClass = `\n@Component({\n  selector: 'app-root',\n  template: '\n  <p [ngStyle] = \"{backgroundColor: getColor()}\" [ngClass] = \"{Online: serverStatus === 'Online'}\"> \n    Server  with ID {{serverID}} is {{serverStatus}}. \n  </p >,\n  styles: ['.Online{ color: yellow; }']'})\n\nexport class AppComponent {\n  serverID: number = 10;\n  serverStatus: string = 'Offline';\n\n  constructor () {\n  this.serverStatus = Math.random() > 0.5 ? 'Online' : 'Offline';\n  }\n\n  getServerStatus() {\n    return this.serverStatus;\n  }\n  getColor() {\n    return this.serverStatus === 'Online' ? 'green' : 'red';\n  }\n}`.trim();\n\nconst databinding = `\nDOM               Component\n<----{{value}}-----\n<-[propery]=\"value\" --                        <img [src]=\"imageUrl\">\n--(event)=\"handler\" -->                       <button (click)=\"onClick()\">Click me</button>\n<-[(NgModule)]=\"propery\" --                   [ngModel];\n`.trim();\n\nconst property = `\nsyntax: [property]='expression\n\n//html\n<button (click)=\"toggleSecret()\">Toggle Secret</button>\n<h3 [hidden]=\"secretTextHidden\">Property Binding</h3>\n\n    \nexport class AppComponent {\n  secretTextHidden = false;\n  toggleSecret() {\n    this.secretTextHidden = !this.secretTextHidden;\n  }\n}\n`.trim();\n\nconst NgStyles = `\n//1\n<div [ngStyle]=\"{'color':green}\"></div>\nngStyle become much more useful when the value is dynamic.\n<div [ngStyle]=\"{'color': person.country==='UK' ? 'green' : 'red'}\"></div>\n\n\n//2\n@Component({\n  selector: 'app-root',\n  template: '\n  <p[ngStyle]=\"{backgroundColor: 'green'}\"> Server with ID {{serverID}} is {{serverStatus}}.</p>\n  '})\nexport class AppComponent {\n  serverID: number = 10;\n  serverStatus: string = 'Offline';\n\n  constructor () {\n  this.serverStatus = Math.random() > 0.5 ? 'Online' : 'Offline';\n  }\n}`.trim();\n\nconst templateState = `\nexport class AppComponent {\n  isHsow = false;\n\n  onToggle() {\n    this.isHsow = !this.isHsow;\n  }\n}\n\n\n//html\n{{ isHsow }}\n<button (click)=\"onToggle()\">Click</button>\n\n`.trim();\n\nconst hostBinding = `\nimport { Component, ElementRef, HostBinding, HostListener} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '<p>@HostBinding() & @HostListener()</p>',\n  providers:[]\n})\n\nexport class AppComponent{\n  constructor(private el:ElementRef){\n\n  }\n\n  @HostBinding('style.color') textColor: any;\n  ngOnInit(){\n    this.textColor=\"green\";\n  }\n\n  @HostListener('click') onClick(){\n    // alert('HostListener')\n    this.textColor = \"red\";\n  }\n\n  @HostListener('mouseover') onMouseHover(){\n    this.textColor = \"blue\";\n  }\n\n  @HostListener('mouseout') onMouseOut(){\n    this.textColor = \"pink\";\n  }\n}`.trim();\n\nconst makeServices = `\n//myService.ts\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class myService {\n  name = 'Mukesh';\n  sayHello() {\n    console.log(this.name);\n  }\n}\n\n\n//app.component.ts\nimport { myService } from './myservice';\n\n@Component({\n  selector: 'app-root',\n  template: '',\n})\nexport class AppComponent {\n  constructor(private myServices: myService) {\n    this.myServices.sayHello();\n  }\n}\n\n\n//app.module.ts\n@NgModule({\n  declarations: [AppComponent, Child],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    StoreModule.forRoot({}),\n  ],\n  providers: [myService],\n  bootstrap: [AppComponent],\n})\n`.trim();\n\nconst makeServices1 = `\n@Injectable({\n  providedIn: 'root'\n})`.trim();\n\nconst makeServices2 = `\nimport { Injectable } from '@angular/core';\nimport { MyModule } from './my.module';\n\n@Injectable({\n  providedIn: MyModule\n})\nexport class MyService {}`.trim();\n\nconst httpClients = `\n//html\n<tr *ngFor=\"let datas of httpData\">\n  <td>{{ datas.title }}</td>\n</tr>'\n\n\ninterface Kafein {\n  name: string;\n  address: string;\n}\n\nexport class AppComponent {\n  url = 'https://jsonplaceholder.typicode.com/todos';\n  httpData: any;\n\n  constructor(private http: HttpClient) {}\n\n  ngOnInit() {\n    this.callApi();\n  }\n\n  callApi() {\n    this.http.get<Kafein[]>(this.url).subscribe((data) => {\n      this.httpData = data;\n    });\n  }\n}\n`.trim();\n\nconst reactiveforms = `\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nexport class AppComponent {\n  myForm: FormGroup;\n\n  constructor(private fb: FormBuilder) {\n    this.myForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n    });\n  }\n\n  onSubmit() {\n    console.log(this.myForm.value);\n  }\n}\n\n\n//\n<form [formGroup]=\"myForm\" (ngSubmit)=\"onSubmit()\">\n  <input type=\"text\" formControlName=\"name\" required />\n  <input type=\"email\" formControlName=\"email\" required />\n  <button type=\"submit\">Submit</button>\n</form>\n`.trim();\n\nconst tempForm = `\n//html\n<form #userForm=\"ngForm\" (ngSubmit)=\"onSubmit()\">\n  <input type=\"text\" name=\"name\" [(ngModel)]=\"user.name\" required />\n  <input type=\"text\" name=\"email\" [(ngModel)]=\"user.email\" required />\n\n  <button type=\"submit\" [disabled]=\"!userForm.valid\">Submit</button>\n</form>\n\n\nexport class AppComponent {\n  user = { name: '', email: '' };\n\n  onSubmit() {\n    console.log(this.user);\n  }\n}`.trim();\n\nconst formBuilder = `\nmyForm: FormGroup = this.fb.group({\n  name: ['', Validators.required],\n  email: ['', [Validators.required, Validators.email]],\n  age: [18, Validators.min(18)]\n});`.trim();\n\nconst templateexp = `\n1+2={{ 1 + 2 }}\n`.trim();\n\nclass IntroAngulard extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Please explain the various features of Angular.</h3>\n              <ul>\n                <li>\n                  <b>Components: </b>Angular is a component-based framework,\n                  which means that applications are built by assembling\n                  components that represent different parts of the application's\n                  user interface. Components are reusable, self-contained, and\n                  can be easily combined to create complex user interfaces.\n                </li>\n                <br />\n                <li>\n                  <b>Templates: </b> Angular uses templates to define the user\n                  interface of a component. Templates are written in HTML and\n                  contain Angular-specific syntax that allows for data binding\n                  and other features.\n                </li>\n                <br />\n                <li>\n                  <b>Directives: </b>Angular provides a number of built-in\n                  directives that allow you to manipulate the DOM, add or remove\n                  elements, and apply conditional logic to your templates. You\n                  can also create custom directives to extend the functionality\n                  of Angular.\n                </li>\n                <br />\n                <li>\n                  <b>Services: </b>Services are used to provide functionality\n                  that can be shared across different components of an\n                  application. Services can be used for things like fetching\n                  data from a server, performing complex calculations, or\n                  managing state.\n                </li>\n                <br />\n                <li>\n                  <b>Dependency Injection: </b>Angular's dependency injection\n                  system allows you to easily manage dependencies between\n                  different components and services. Dependencies are injected\n                  into components and services through their constructors.\n                </li>\n                <br />\n                <li>\n                  <b>Routing: </b>Angular's routing system allows you to define\n                  routes for different parts of your application and navigate\n                  between them using URLs.\n                </li>\n                <br />\n                <li>\n                  <b>Forms: </b>Angular provides powerful support for building\n                  forms, including both template-driven and reactive forms. This\n                  includes features like form validation, form submission, and\n                  handling user input.\n                </li>\n                <br />\n                <li>\n                  <b>Observables: </b>Angular uses observables to handle\n                  asynchronous operations such as HTTP requests. Observables\n                  provide a way to work with asynchronous data streams in a more\n                  efficient and predictable way.\n                </li>\n                <br />\n                <li>\n                  <b>Testing: </b>Angular provides a number of tools and\n                  utilities for testing your application, including both unit\n                  tests and end-to-end tests. This includes features like the\n                  Angular testing library and the Protractor testing framework.\n                </li>\n                <br />\n                <li>\n                  <b>Mobile Support: </b>Angular provides support for building\n                  mobile applications using technologies like Ionic and\n                  NativeScript.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>\n                2. What is difference between package.json and\n                package-lock.json.\n              </h3>\n              <ul>\n                <li>\n                  <b>package.json: </b>This file is used to define the\n                  dependencies and other metadata of an application. It contains\n                  information about the application, such as its name, version,\n                  author, and dependencies required for the application to run.\n                </li>\n                <br />\n                <li>\n                  <b>package.lock.json: </b>This file is used to keep track of\n                  the exact version of every package and its dependencies that\n                  are installed in an application. The package-lock.json file\n                  ensures that the exact same version of a package and its\n                  dependencies are installed on all machines running the\n                  application. This helps to avoid dependency conflicts and\n                  ensures that the application runs consistently across\n                  different environments.\n                </li>\n              </ul>\n              <br />\n              In summary, package.json defines the metadata and dependencies\n              required for the application to run, while package-lock.json is\n              used to lock the dependencies to specific versions to ensure\n              consistency across different machines.\n              <br />\n              <br />\n              <h3>3. What is metadata</h3>\n              Metadata, Annotation and Decorator is same thing.\n              <br />\n              <ul>\n                <li>\n                  Metadata is used to decorate a class so that it can configure\n                  the expected behavior of the class.\n                </li>\n                <br />\n                <li>\n                  Decorator accept object. decorator are simply functions that\n                  return functions. decorator are invoke at runtime. decorator\n                  allows you to excuite functions.\n                </li>\n              </ul>\n              <br />\n              There are four main types of decorators:\n              <ul>\n                <li>\n                  <b>Class decorators: </b>, @Component, @Directive, @NgModule,\n                  @Injectable, and @Pipes.\n                </li>\n                <li>\n                  <b>Property decorators: </b>These decorators are used to\n                  modify the behavior of a class property. <b>Ex </b>\n                  @Input, @Output, @HostBinding, @ContentChild,\n                  @ContentChildren, @ViewChild, @ViewChildren.\n                </li>\n                <li>\n                  <b>Method decorators: </b>These decorators are used to modify\n                  the behavior of a class method. <b>Ex </b>\n                  @HostListener.\n                </li>\n                <li>\n                  <b>\n                    Parameter decorators for parameters inside class\n                    constructors\n                  </b>\n                  @Inject.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <ul>\n                <li>\n                  <b>@HostBinding: </b>Decorator is used to bind a property of a\n                  directive to a property of its host element. This allows the\n                  directive to set properties on the host element based on its\n                  own state or configuration.\n                </li>\n                <br />\n                <li>\n                  <b>@HostListener: </b>Decorator is used to subscribe to events\n                  that occur on the host element of a directive. The host\n                  element is the element that the directive is attached to, and\n                  the @HostListener decorator is used to specify which events\n                  the directive should listen to.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={hostBinding}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <br />\n              <b>ii. Parameter decorators: </b>Used for parameters inside class\n              constructors, e.g. @Inject, Optional.\n              <br />\n              <br />\n              <h3>4. Explain Components, Modules and Services in Angular.</h3>\n              <b>i. Components: </b>\n              Components are the most basic building blocks of an Angular\n              application, and they can be reused throughout the application to\n              create a consistent user interface.\n              <br />\n              <br />\n              <b>key features: </b>\n              <ul>\n                <li>\n                  <b>Selector: </b>Components are identified by a selector,\n                  which is a CSS selector that identifies the HTML element that\n                  the component represents. The selector is used to tell Angular\n                  where to insert the component in the DOM.\n                </li>\n                <br />\n                <li>\n                  <b>Template: </b>A component has its own template, which is\n                  the HTML code that defines the structure and layout of the\n                  component. The template can include data binding syntax, which\n                  allows the component to display dynamic data.\n                </li>\n                <br />\n                <li>\n                  <b>styleUrls: </b>\n                </li>\n              </ul>\n              <br />\n              <br />\n              <b>ii. Modules </b>\n              A module is a mechanism for organizing code into separate,\n              reusable, and encapsulated units. A module can contain components,\n              services, directives, and other types of Angular constructs that\n              are needed for a particular feature or functionality in an\n              application.\n              <br />\n              <br />\n              To define a module, we use <b>@NgModule</b> decorator.\n              <ul>\n                <li>Default module is app.module.ts.</li>\n                <li>We can includes a module inside another module.</li>\n                <li>\n                  A module have at least one component. components declared\n                  inside \"declarations\" in module. while module inside \"imports\"\n                  in app.module.ts.{\" \"}\n                </li>\n                <li>\n                  We can import a module and use inside another module. For\n                  injecting a module we use, exports:[ModuleName].\n                </li>\n\n                <li>\n                  A component cannot be import in two diffrent modules. If do\n                  than show runtime error. this is features module.\n                </li>\n              </ul>\n              <br />\n              By default, modules are of two types:\n              <ul>\n                <li>\n                  <b>Root Module: </b>\n                </li>\n                <li>\n                  <b>Feature Module: </b>Every application can have only one\n                  root module whereas, it can have one or more feature modules.\n                  <ol>\n                    <li>A root module imports BrowserModule,</li>\n                    <li>whereas a feature module imports CommonModule.</li>\n                  </ol>\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>iii. Services </h3>\n              <ul>\n                <li>\n                  Are a greate way to share information among classes that don't\n                  know each other.\n                </li>\n                <li>\n                  Are basically a classes which may have some data, property or\n                  some functions. And we can use these data,property and\n                  functions in multiple files.\n                </li>\n                <li>\n                  Services are objects which get instantiated only once during\n                  the lifetime of an application.{\" \"}\n                </li>\n                <li>Services can depend on other services.</li>\n              </ul>\n              <br />A service is defined using a <b>@Injectable</b> decorator.\n              <br />\n              <br />\n              <b>providedIn: </b>\n              <ul>\n                <li>\n                  providedIn property is used to specify the provider of a\n                  service or a dependency injection token. It is a property of\n                  the @Injectable decorator, which is used to annotate a class\n                  that can be injected as a dependency in other classes.\n                </li>\n                <br />\n                <li>\n                  The providedIn property can have one of two possible values:\n                  'root' or an NgModule class. When 'root' is specified, the\n                  service is registered with the application's root injector,\n                  which makes it available to the entire application. When an\n                  NgModule class is specified, the service is registered with\n                  the injector of that module, which makes it available to all\n                  components and services declared in that module.\n                </li>\n              </ul>\n              <br />\n              Here's an example of using providedIn to specify the provider of a\n              service:\n              <div style={titles}>\n                <PrismCode\n                  code={makeServices1}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              In this example, the providedIn property is set to 'root', which\n              means that MyService will be registered with the root injector and\n              will be available to the entire application.\n              <br />\n              <br />\n              Alternatively, you can specify an NgModule as the provider:\n              <div style={titles}>\n                <PrismCode\n                  code={makeServices2}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <ul>\n                <li>\n                  In this example, MyService is registered with the injector of\n                  the MyModule module, which means that it will be available to\n                  all components and services declared in that module.\n                </li>\n                <li>\n                  Using providedIn is a convenient way to register services and\n                  DI tokens in Angular, and it can help simplify the process of\n                  managing dependencies and provider hierarchies in an\n                  application.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={makeServices}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>5. What are directives</h3>\n              <ul>\n                <li>\n                  Directives are used to extend the power of the HTML attributes\n                  and to change the appearance or behavior of a DOM element.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <b>\n                Elements which change the appearence/ behavior of the DOM\n                element. 3 types of Directives.\n              </b>\n              <ul>\n                <li>\n                  <b>Component Directives:</b>\n                  <ul>\n                    <li>\n                      These are directives that are used to define a new custom\n                      component, which can be used in templates like any other\n                      component. Component directives are declared using the\n                      @Component decorator.\n                    </li>\n                  </ul>\n                </li>\n                <br />\n                <li>\n                  <b>Structural Directives:</b>\n                  <ul>\n                    <li>Do manipulation in DOM.</li>\n                    <li>\n                      Structural directive modifies or manipulates the structure\n                      of DOM by adding or removing DOM elements. it works on the\n                      structure of a DOM.\n                    </li>\n                    <li>\n                      Structural directives which have a * sign before the\n                      directive. *ngIf and *ngFor.\n                    </li>\n                  </ul>\n                </li>\n                <br />\n                <li>\n                  <b>Attribute Directives/ Behavioral Directives:</b>\n                  <ul>\n                    <li>Do css related things.</li>\n                    <li> Change appearence/ behavior of the DOM.</li>\n                    <li>\n                      Attribute directives deal with the changing of look and\n                      behavior of the DOM element, component or another\n                      directive. Ex. NgStyle\n                    </li>\n                  </ul>\n                </li>\n                <br />\n                By default, angular provide two attribute directives\n                <br />\n                <b>1. NgClass: </b>dynamically, add or remove CSS class on the\n                basis of the certain conditions.\n                <br />\n                <br />\n                Allows us to set the CSS class dynamically for a DOM element. we\n                can use ngClass with string, array, object or component method.\n                <br />\n                <br />\n                <div style={titles}>\n                  <PrismCode\n                    code={NgClass}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n              </ul>\n              <br />\n              <br />\n              <b>2. NgStyle: </b>dynamically, add or remove styles on the basis\n              of the certain conditions.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={NgStyles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>\n                6. What is difference between attribute and structural\n                directives?\n              </h3>\n              Attribute directives modify the appearance or behavior of DOM\n              elements. Structural directives add or remove elements from the\n              DOM.\n              <br />\n              <h3>7. What are template expressions</h3>\n              <ul>\n                <li>\n                  Template expressions are expressions that are evaluated by the\n                  Angular template engine and used to dynamically render values\n                  or perform calculations in the template.\n                </li>\n                <li>\n                  <div style={titles}>\n                    <PrismCode\n                      code={templateexp}\n                      language=\"js\"\n                      plugins={[\"line-numbers\"]}\n                    />\n                  </div>\n                </li>\n              </ul>\n              <br />\n              <h3>8. What are template statements</h3>\n              Template statements are a way to define event bindings between the\n              user interface and component logic. They allow you to listen for\n              events triggered by the user, such as button clicks or form\n              submissions, and respond to those events with the appropriate\n              logic.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={templateState}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n                <br />\n                <b>N: </b>Component send data to Template by using Promises\n                binding or Interpolation.\n              </div>\n              <br />\n              <h3>9. What is Data Binding? How many ways it can be done?</h3>\n              In order to connect application data with the DOM, data binding is\n              used. It happens between the template and component. There are 4\n              ways to achieve data binding:\n              <ul>\n                <li>\n                  Interpolation / String Interpolation (one-way data binding)\n                </li>\n                <li>\n                  <b>Event Binding: </b>Event binding allows you to bind an\n                  event of an element to a method in the component. It is done\n                  by using parentheses.\n                </li>\n                <li>\n                  <b>Property Binding: </b>Means passing data from the component\n                  to the template.\n                </li>\n                <li>\n                  <b>Two-way Binding: </b>It's a process that gives component a\n                  way to share data between the component class and its\n                  template. If the data is changed in one place it will\n                  automatically change the data at other end.. It is done by\n                  using the [(ngModel)] directive.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <b>Data binding Forms:</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={databinding}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Property binding: </b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={property}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>\n                10. What are the differences between Component and Directive\n              </h3>\n              <table>\n                <tr>\n                  <th>Component</th>\n                  <th>Directive</th>\n                </tr>\n                <tr>\n                  <td>\n                    To register a component we use @Component meta-data\n                    annotation\n                  </td>\n                  <td>\n                    To register directives we use @Directive meta-data\n                    annotation\n                  </td>\n                </tr>\n                <tr>\n                  <td>Components are typically used to create UI widgets</td>\n                  <td>\n                    Directive is used to add behavior to an existing DOM element\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    Component is used to break up the application into smaller\n                    components\n                  </td>\n                  <td>Directive is use to design re-usable components</td>\n                </tr>\n                <tr>\n                  <td>Only one component can be present per DOM element</td>\n                  <td>Many directives can be used per DOM element</td>\n                </tr>\n              </table>\n              <br />\n              <h3>11. Dependency Injection</h3>\n              <ul>\n                <li>\n                  Dependency Injection (DI) is a design pattern used in Angular\n                  that allows a class to receive its dependencies from an\n                  external source rather than creating them itself. It is a way\n                  of providing objects or services to a component that needs to\n                  function properly, without creating these objects directly.\n                </li>\n                <br />\n\n                <li>\n                  When a component or service is instantiated, the Angular\n                  injector checks its constructor for required dependencies and\n                  injects them into the component or service automatically. This\n                  allows for loose coupling between components and services and\n                  makes the code more modular, easier to maintain, and more\n                  testable.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>12. HttpClient</h3>\n              <ul>\n                <li>\n                  HttpClient is a built-in service that allows you to make HTTP\n                  requests to a server in your application. It provides a\n                  simplified client interface for HTTP requests and responses,\n                  with support for advanced features such as request and\n                  response interception, progress tracking, and error handling.\n                </li>\n                <br />\n                <li>\n                  import HttpClientModule as imports: [ HttpClientModule] in\n                  app.module.ts file.\n                </li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={httpClients}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                13. What is the difference between template driven form and\n                reactive based approach?\n              </h3>\n              <b>\n                import FormsModule and Reactiveforms Module in Angular to use\n                [(ngModel)] and reactive forms respectively.\n              </b>\n              <ul>\n                <li>\n                  Template-driven forms are asynchronous in nature, whereas\n                  Reactive forms are mostly synchronous.\n                </li>\n                <li>\n                  In a template-driven approach, most of the logic is driven\n                  from the template, whereas in reactive-driven approach, the\n                  logic resides mainly in the component.\n                </li>\n              </ul>\n              <br />\n              <h3>14. Two ways to collect and validate data from users</h3>\n              <b>1. Template-driven forms:</b>\n              <ul>\n                <li>To use it we need to import FormsModule in application.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={tempForm}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>2. Model-driven forms (Reactive forms)</b>\n              <ul>\n                <li>\n                  The model which is created in .ts file is responsible for\n                  handling all the user interactions/ validations. For this\n                  first need to create the model using Angular unbuilt classes\n                  like formGroup and formControl and then, we need to bind the\n                  model to HTML form.\n                </li>\n                <li>\n                  As we create the form controls directly in the component, it\n                  makes easier to push data between the data models and UI\n                  elements.{\" \"}\n                </li>\n              </ul>\n              <br />\n              <b>import 'ReactiveFormsModule' in app.module.ts file</b>\n              <div style={titles}>\n                <PrismCode\n                  code={reactiveforms}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>statusChanges():</b>\n              <br />\n              Is a property of AbstractControl that emits an event every time\n              when the validations status of the control is recalculated.\n              <br />\n              statusChanges property is available in formControl, FormArray and\n              formGroup classes because they inherit AbstractControl class.\n              <br />\n              <br />\n              <h3>\n                15. What is the difference between FormBuilder and FormControl?\n              </h3>\n              <ul>\n                <li>\n                  <b>FormControl: </b>Is a class that represents a single form\n                  control, which is typically a single input field . A\n                  FormControl can be used to capture user input, validate input\n                  data, and track the state of the input field.\n                </li>\n                <br />\n                <li>\n                  <b>FormBuilder: </b>Is a service that provides a more\n                  convenient way to create and manage form controls and form\n                  groups. It allows developers to create complex forms with many\n                  form controls and nested form groups.\n                </li>\n                <br />\n                <li>\n                  In summary, FormControl is used to create and manage a single\n                  form control, while FormBuilder is used to create and manage\n                  complex forms with many form controls and nested form groups.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <b>The FormBuilder class has 3 methods: </b>\n              <ol>\n                <li>control()</li>\n                <li>group()</li>\n                <li>array()</li>\n              </ol>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={formBuilder}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(IntroAngulard);\n"]},"metadata":{},"sourceType":"module"}