{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/angularjsd/deepAngularjs/depenInjection.js\";\nimport React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\nconst titles = {\n  backgroundColor: \"#F0F8FF\",\n  padding: \"1px\",\n  fontSize: \"16px\"\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nclass DepenInjection extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"4. How does an Angular application work?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"Every Angular app consists of a file named\\xA0angular.json. This file will contain all the configurations of the app. While building the app, the builder looks at this file to find the entry point of the application.\\xA0\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"AppModule\\xA0is getting bootstrapped. The AppModule is declared in the app.module.ts file. This module contains declarations of all the components.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Now, AppComponent\\xA0is getting bootstrapped.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Initialization: \"), \"When an Angular application is loaded in the browser, the main.ts file is executed, which initializes the application and bootstraps the root module.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"When an Angular application is launched, the main component is loaded, which in turn loads the other components and services that the application requires. The main component is typically called AppComponent and is defined in the app.component.ts file.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Angular uses a reactive programming approach based on the Observable design pattern to handle events and data streams. This means that the application subscribes to data streams and reacts to changes as they occur, rather than polling for changes at regular intervals.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"index.html \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"The index.html file is the main entry point for an Angular application. When a user navigates to the URL of an Angular application, the web server serves the index.html file, which is loaded into the browser.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"The index.html file contains the necessary scripts and stylesheets that are required to load the Angular application into the browser. It also includes a 'base' tag, which is used by Angular's router to determine the base URL for the application.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"The main app component is usually loaded inside a 'div' element with an id of app-root in the index.html file. This component acts as the root of the application and is responsible for loading and rendering other components in the application.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"In addition to loading the Angular application, the index.html file can also be used to add any other necessary HTML, CSS, or JavaScript to the application, such as third-party libraries or custom stylesheets.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Overall, the index.html file is an important part of an Angular application, as it serves as the entry point for the application and contains the necessary scripts and stylesheets to load the application into the browser.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"5. What is AOT compilation? What are the advantages of AOT?\"), \"Every Angular application consists of components and templates which the browser cannot understand. Therefore, all the Angular applications need to be compiled first before running inside the browser.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), \"Angular provides two types of compilation:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"JIT(Just-in-Time) compilation\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"AOT(Ahead-of-Time) compilation\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), \"The advantages of using AOT compilation are:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Faster rendering: \"), \"The browser downloads a pre-compiled version of the application. So it can render the application immediately without compiling the app.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Fewer asynchronous requests: \"), \"It inlines external HTML templates and CSS style sheets within the application javascript which eliminates separate ajax requests.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"Smaller Angular framework download size: \"), \"Doesn't require downloading the Angular compiler. Hence it dramatically reduces the application payload.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"Detect template errors earlie: \"), \"Detects and reports template binding errors during the build step itself\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"Better security: \"), \"It compiles HTML templates and components into JavaScript. So there won't be any injection attacks.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"By default, angular builds and serves the application using JIT compiler:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"ng build\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"ng serve\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"For using AOT compiler following changes should be made:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"ng build --aot\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"ng serve --aot\")))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"6. What are the three phases of AOT\"), \"The AOT compiler works in three phases\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"Code Analysis: \"), \"The TypeScript compiler and AOT collector create a representation of the source.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"Code generation: \"), \"It handles the interpretation as well as places restrictions on what it interprets.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"Validation: \"), \"Angular template compiler uses the TypeScript compiler to validate the binding expressions in templates.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"N: \"), \"Arrow functions or lambda functions can\\u2019t be used to assign values to the decorator properties.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }), \"If true, the AOT compiler will ignore this directive/ component and will therefore always be compiled using JIT.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \"jit: true\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, \"8. Can I use any javascript feature for expression syntax in AOT\"), \"No, the AOT collector understands limited JavaScript features. If an expression uses unsupported syntax, the collector writes an error node to the .metadata.json file. Later point of time, the compiler reports an error if it needs that piece of metadata to generate the application code.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, \"9. JIT compilation: \"), \"Just-in-Time is a type of compilation that compiles your app in the browser at runtime. JIT compilation is the default when you run the ng build (build only) or ng serve (build and serve locally).\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"A JIT compiler runs after the program has started and compiles the code (usually bytecode or some kind of VM instructions). A JIT has access to dynamic runtime information whereas a standard compiler doesn't and can make better optimizations like inlining functions that are used frequently.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, \"This is in contrast to a traditional compiler that compiles all the code to machine language before the program is first run.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"10. Ivy Compiler\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, \"Ivy is now default compiler and runtime. Ivy improves budle size, allows for better debugging, adds improves type checking, faster testing, enables the AOT compiler on by default, and improves CSS class and style binding.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, \"Reach better build times.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, \"reach better build sizes (with a generated code more compatible with tree-shaking).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, \"Unlock new potential features (metaprogramming or higher order components, lazy loading of component instead of modules).\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, \"12. What is metadata rewriting\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, \"Metadata rewriting in Angular refers to the process of modifying the metadata associated with a class or component during the build process. Metadata in Angular is defined using decorators, which are special functions that modify the behavior of a class or component.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, \"During the build process, Angular's compiler analyzes the application's source code and generates an optimized version of the application's JavaScript code. As part of this process, the compiler can also modify the metadata associated with the application's components.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, \"Metadata rewriting is used to add or modify the metadata of a component, such as changing the selector, modifying the template or styles, or adding new input or output properties. This can be useful in situations where the component needs to be customized or extended for a specific use case.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, \"For example, suppose you have a third-party library that provides a component that you want to use in your Angular application. However, the component's selector conflicts with another component in your application, and you cannot change the selector of either component. In this case, you can use metadata rewriting to modify the selector of the third-party component during the build process, so that it does not conflict with the other component.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, \"Overall, metadata rewriting is a powerful feature of Angular that allows developers to modify the metadata associated with a component during the build process. This can be useful in a variety of situations, such as customizing third-party components, optimizing component performance, or adding new functionality to existing components.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, \"13. Explain the purpose of Service Workers in Angular\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, \"Service Workers are implemented using the @angular/service-worker package. This package provides a set of tools and utilities for configuring and deploying a Service Worker in an Angular application.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, \"The purpose of Service Workers in Angular is to provide advanced caching and offline capabilities to web applications. By intercepting network requests and caching responses, Service Workers can greatly reduce the amount of data that needs to be downloaded and improve the performance of the application. They can also provide offline support, allowing users to continue using the application even when they are not connected to the internet.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, \"Service Workers can also be used to provide push notifications and background synchronization, which can be useful for applications that need to update data in real-time.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, \"Overall, the purpose of Service Workers in Angular is to provide advanced caching, offline, and real-time capabilities to web applications. By leveraging Service Workers, developers can create faster, more reliable, and more engaging web applications that can work seamlessly across different devices and network conditions.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, \"14. What are the design goals of service workers\"), \"Service workers in Angular are designed to help developers build progressive web applications (PWAs) that are reliable, fast, and engaging. The primary design goals of service workers in Angular are as follows:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, \"Offline support: \"), \"Service workers allow Angular applications to work offline by caching assets and data that are necessary for the application to function. This means that even if the user is not connected to the internet, they can still use the application.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, \"Performance: \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, \"Push notifications: \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, \"Security: \"), \"Service workers are designed to be secure and reliable. They run in a separate context from the main application and cannot access sensitive user data or resources without permission.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }, \"15. Difference between local storage, cookies and Session.\"), \"In Angular, there are three common ways to store data on the client-side: local storage, cookies, and session storage. Each has its own advantages and disadvantages, and the choice of which to use depends on the specific needs of the application.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, \"Local Storage: \"), \"Local storage is a key-value store that allows data to be stored on the client-side in a persistent manner. The data stored in local storage is accessible even after the browser is closed, and can be accessed by any page in the same domain. Local storage is a good option for storing large amounts of data that need to persist between sessions.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, \"Cookies: \"), \"Cookies are small text files that are stored on the client-side by the browser. Cookies can be used to store small amounts of data, such as user preferences or authentication tokens. Cookies are accessible by any page in the same domain and can be set to expire after a certain period of time. However, cookies have a size limit of 4KB and are not suitable for storing large amounts of data.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }, \"Session Storage: \"), \"Session storage is similar to local storage, but the data stored in session storage is only accessible within the current browser session. Once the browser is closed, the data is deleted. Session storage is a good option for storing data that needs to be accessible across multiple pages within the same session, but does not need to persist between sessions.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }), \"In summary, local storage is good for large amounts of persistent data, cookies are good for small amounts of data that need to be accessible across pages and sessions, and session storage is good for data that needs to be accessible within the current session only.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }, \"17. What is authentication and authorization in Angular.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }, \"Authentication: \"), \"During login, the credential are sent to an authentication API. This API is present on the server and validation is done there. After a JWT is returned, this token has information about the usr and is used to identify the user. This process is called Authentication.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }, \"Authorization: \"), \"After authentication, user are given various levels of permission/ access. Some users may have access to all the pages and some might not. This process of restricting the content is called Authorization.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }, \"19. How we handle large data api in frontend.\"), \"Pagination, infinite scroll\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }, \"22. Let suppose we have a text field and that is name, and we have to setup a validation to accept only 5 chars so how can we achieve this by template driven forms. If we want to show the error message then how can we do it.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }, \"23. Let suppose we have three API urls as per first response, we need to call second and as per second response we need to call third API. if there would we error then on third api call we need to show the error, what would be the best approach for this. Can we use rxjs operator in this issue?\")))));\n  }\n\n}\n\nexport default withStyles(styles)(DepenInjection);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/deepAngularjs/depenInjection.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","DepenInjection","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nclass DepenInjection extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>4. How does an Angular application work?</h3>\n              <ul>\n                <li>\n                  Every Angular app consists of a file named angular.json. This\n                  file will contain all the configurations of the app. While\n                  building the app, the builder looks at this file to find the\n                  entry point of the application. \n                </li>\n                <br />\n                <li>\n                  AppModule is getting bootstrapped. The AppModule is declared\n                  in the app.module.ts file. This module contains declarations\n                  of all the components.\n                </li>\n                <br />\n                <li>Now, AppComponent is getting bootstrapped.</li>\n                <br />\n                <li>\n                  <b>Initialization: </b>When an Angular application is loaded\n                  in the browser, the main.ts file is executed, which\n                  initializes the application and bootstraps the root module.\n                </li>\n                <br />\n\n                <li>\n                  When an Angular application is launched, the main component is\n                  loaded, which in turn loads the other components and services\n                  that the application requires. The main component is typically\n                  called AppComponent and is defined in the app.component.ts\n                  file.\n                </li>\n                <br />\n                <li>\n                  Angular uses a reactive programming approach based on the\n                  Observable design pattern to handle events and data streams.\n                  This means that the application subscribes to data streams and\n                  reacts to changes as they occur, rather than polling for\n                  changes at regular intervals.\n                </li>\n              </ul>\n              <br />\n              <b>index.html </b>\n              <ul>\n                <li>\n                  The index.html file is the main entry point for an Angular\n                  application. When a user navigates to the URL of an Angular\n                  application, the web server serves the index.html file, which\n                  is loaded into the browser.\n                </li>\n                <br />\n                <li>\n                  The index.html file contains the necessary scripts and\n                  stylesheets that are required to load the Angular application\n                  into the browser. It also includes a 'base' tag, which is used\n                  by Angular's router to determine the base URL for the\n                  application.\n                </li>\n                <br />\n                <li>\n                  The main app component is usually loaded inside a 'div'\n                  element with an id of app-root in the index.html file. This\n                  component acts as the root of the application and is\n                  responsible for loading and rendering other components in the\n                  application.\n                </li>\n                <br />\n                <li>\n                  In addition to loading the Angular application, the index.html\n                  file can also be used to add any other necessary HTML, CSS, or\n                  JavaScript to the application, such as third-party libraries\n                  or custom stylesheets.\n                </li>\n                <br />\n                <li>\n                  Overall, the index.html file is an important part of an\n                  Angular application, as it serves as the entry point for the\n                  application and contains the necessary scripts and stylesheets\n                  to load the application into the browser.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>\n                5. What is AOT compilation? What are the advantages of AOT?\n              </h3>\n              Every Angular application consists of components and templates\n              which the browser cannot understand. Therefore, all the Angular\n              applications need to be compiled first before running inside the\n              browser.\n              <br />\n              Angular provides two types of compilation:\n              <ul>\n                <li>JIT(Just-in-Time) compilation</li>\n                <li>AOT(Ahead-of-Time) compilation</li>\n              </ul>\n              <br />\n              The advantages of using AOT compilation are:\n              <ul>\n                <li>\n                  <b>Faster rendering: </b>The browser downloads a pre-compiled\n                  version of the application. So it can render the application\n                  immediately without compiling the app.\n                </li>\n                <li>\n                  <b>Fewer asynchronous requests: </b>It inlines external HTML\n                  templates and CSS style sheets within the application\n                  javascript which eliminates separate ajax requests.\n                </li>\n                <li>\n                  <b>Smaller Angular framework download size: </b>Doesn't\n                  require downloading the Angular compiler. Hence it\n                  dramatically reduces the application payload.\n                </li>\n                <li>\n                  <b>Detect template errors earlie: </b>Detects and reports\n                  template binding errors during the build step itself\n                </li>\n                <li>\n                  <b>Better security: </b>It compiles HTML templates and\n                  components into JavaScript. So there won't be any injection\n                  attacks.\n                </li>\n                <br />\n                <li>\n                  By default, angular builds and serves the application using\n                  JIT compiler:\n                  <ul>\n                    <li>ng build</li>\n                    <li>ng serve</li>\n                  </ul>\n                </li>\n                <br />\n                <li>\n                  For using AOT compiler following changes should be made:\n                  <ul>\n                    <li>ng build --aot</li>\n                    <li>ng serve --aot</li>\n                  </ul>\n                </li>\n              </ul>\n              <br />\n              <h3>6. What are the three phases of AOT</h3>\n              The AOT compiler works in three phases\n              <ul>\n                <li>\n                  <b>Code Analysis: </b>The TypeScript compiler and AOT\n                  collector create a representation of the source.\n                </li>\n                <li>\n                  <b>Code generation: </b>It handles the interpretation as well\n                  as places restrictions on what it interprets.\n                </li>\n                <li>\n                  <b>Validation: </b>Angular template compiler uses the\n                  TypeScript compiler to validate the binding expressions in\n                  templates.\n                </li>\n              </ul>\n              <br />\n              <b>N: </b>Arrow functions or lambda functions can’t be used to\n              assign values to the decorator properties.\n              <br />\n              <br />\n              If true, the AOT compiler will ignore this directive/ component\n              and will therefore always be compiled using JIT.\n              <br />\n              <b>jit: true</b>\n              <br />\n              <br />\n              <h3>\n                8. Can I use any javascript feature for expression syntax in AOT\n              </h3>\n              No, the AOT collector understands limited JavaScript features. If\n              an expression uses unsupported syntax, the collector writes an\n              error node to the .metadata.json file. Later point of time, the\n              compiler reports an error if it needs that piece of metadata to\n              generate the application code.\n              <br />\n              <h3>9. JIT compilation: </h3>\n              Just-in-Time is a type of compilation that compiles your app in\n              the browser at runtime. JIT compilation is the default when you\n              run the ng build (build only) or ng serve (build and serve\n              locally).\n              <ul>\n                <li>\n                  A JIT compiler runs after the program has started and compiles\n                  the code (usually bytecode or some kind of VM instructions). A\n                  JIT has access to dynamic runtime information whereas a\n                  standard compiler doesn't and can make better optimizations\n                  like inlining functions that are used frequently.\n                </li>\n                <li>\n                  This is in contrast to a traditional compiler that compiles\n                  all the code to machine language before the program is first\n                  run.\n                </li>\n              </ul>\n              <br />\n              <h3>10. Ivy Compiler</h3>\n              <ul>\n                <li>\n                  Ivy is now default compiler and runtime. Ivy improves budle\n                  size, allows for better debugging, adds improves type\n                  checking, faster testing, enables the AOT compiler on by\n                  default, and improves CSS class and style binding.\n                </li>\n                <li>Reach better build times.</li>\n                <li>\n                  reach better build sizes (with a generated code more\n                  compatible with tree-shaking).\n                </li>\n                <li>\n                  Unlock new potential features (metaprogramming or higher order\n                  components, lazy loading of component instead of modules).\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>12. What is metadata rewriting</h3>\n              <ul>\n                <li>\n                  Metadata rewriting in Angular refers to the process of\n                  modifying the metadata associated with a class or component\n                  during the build process. Metadata in Angular is defined using\n                  decorators, which are special functions that modify the\n                  behavior of a class or component.\n                </li>\n                <br />\n                <li>\n                  During the build process, Angular's compiler analyzes the\n                  application's source code and generates an optimized version\n                  of the application's JavaScript code. As part of this process,\n                  the compiler can also modify the metadata associated with the\n                  application's components.\n                </li>\n                <br />\n                <li>\n                  Metadata rewriting is used to add or modify the metadata of a\n                  component, such as changing the selector, modifying the\n                  template or styles, or adding new input or output properties.\n                  This can be useful in situations where the component needs to\n                  be customized or extended for a specific use case.\n                </li>\n                <br />\n                <li>\n                  For example, suppose you have a third-party library that\n                  provides a component that you want to use in your Angular\n                  application. However, the component's selector conflicts with\n                  another component in your application, and you cannot change\n                  the selector of either component. In this case, you can use\n                  metadata rewriting to modify the selector of the third-party\n                  component during the build process, so that it does not\n                  conflict with the other component.\n                </li>\n                <br />\n                <li>\n                  Overall, metadata rewriting is a powerful feature of Angular\n                  that allows developers to modify the metadata associated with\n                  a component during the build process. This can be useful in a\n                  variety of situations, such as customizing third-party\n                  components, optimizing component performance, or adding new\n                  functionality to existing components.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>13. Explain the purpose of Service Workers in Angular</h3>\n              <ul>\n                <li>\n                  Service Workers are implemented using the\n                  @angular/service-worker package. This package provides a set\n                  of tools and utilities for configuring and deploying a Service\n                  Worker in an Angular application.\n                </li>\n                <br />\n                <li>\n                  The purpose of Service Workers in Angular is to provide\n                  advanced caching and offline capabilities to web applications.\n                  By intercepting network requests and caching responses,\n                  Service Workers can greatly reduce the amount of data that\n                  needs to be downloaded and improve the performance of the\n                  application. They can also provide offline support, allowing\n                  users to continue using the application even when they are not\n                  connected to the internet.\n                </li>\n                <br />\n                <li>\n                  Service Workers can also be used to provide push notifications\n                  and background synchronization, which can be useful for\n                  applications that need to update data in real-time.\n                </li>\n                <br />\n                <li>\n                  Overall, the purpose of Service Workers in Angular is to\n                  provide advanced caching, offline, and real-time capabilities\n                  to web applications. By leveraging Service Workers, developers\n                  can create faster, more reliable, and more engaging web\n                  applications that can work seamlessly across different devices\n                  and network conditions.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>14. What are the design goals of service workers</h3>\n              Service workers in Angular are designed to help developers build\n              progressive web applications (PWAs) that are reliable, fast, and\n              engaging. The primary design goals of service workers in Angular\n              are as follows:\n              <ul>\n                <li>\n                  <b>Offline support: </b>Service workers allow Angular\n                  applications to work offline by caching assets and data that\n                  are necessary for the application to function. This means that\n                  even if the user is not connected to the internet, they can\n                  still use the application.\n                </li>\n                <br />\n                <li>\n                  <b>Performance: </b>\n                </li>\n                <li>\n                  <b>Push notifications: </b>\n                </li>\n                <br />\n                <li>\n                  <b>Security: </b>Service workers are designed to be secure and\n                  reliable. They run in a separate context from the main\n                  application and cannot access sensitive user data or resources\n                  without permission.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>\n                15. Difference between local storage, cookies and Session.\n              </h3>\n              In Angular, there are three common ways to store data on the\n              client-side: local storage, cookies, and session storage. Each has\n              its own advantages and disadvantages, and the choice of which to\n              use depends on the specific needs of the application.\n              <ul>\n                <li>\n                  <b>Local Storage: </b>Local storage is a key-value store that\n                  allows data to be stored on the client-side in a persistent\n                  manner. The data stored in local storage is accessible even\n                  after the browser is closed, and can be accessed by any page\n                  in the same domain. Local storage is a good option for storing\n                  large amounts of data that need to persist between sessions.\n                </li>\n                <br />\n                <li>\n                  <b>Cookies: </b>Cookies are small text files that are stored\n                  on the client-side by the browser. Cookies can be used to\n                  store small amounts of data, such as user preferences or\n                  authentication tokens. Cookies are accessible by any page in\n                  the same domain and can be set to expire after a certain\n                  period of time. However, cookies have a size limit of 4KB and\n                  are not suitable for storing large amounts of data.\n                </li>\n                <br />\n                <li>\n                  <b>Session Storage: </b>Session storage is similar to local\n                  storage, but the data stored in session storage is only\n                  accessible within the current browser session. Once the\n                  browser is closed, the data is deleted. Session storage is a\n                  good option for storing data that needs to be accessible\n                  across multiple pages within the same session, but does not\n                  need to persist between sessions.\n                </li>\n                <br />\n                In summary, local storage is good for large amounts of\n                persistent data, cookies are good for small amounts of data that\n                need to be accessible across pages and sessions, and session\n                storage is good for data that needs to be accessible within the\n                current session only.\n              </ul>\n              <br />\n              <br />\n              <h3>17. What is authentication and authorization in Angular.</h3>\n              <ul>\n                <li>\n                  <b>Authentication: </b>During login, the credential are sent\n                  to an authentication API. This API is present on the server\n                  and validation is done there. After a JWT is returned, this\n                  token has information about the usr and is used to identify\n                  the user. This process is called Authentication.\n                </li>\n                <br />\n                <li>\n                  <b>Authorization: </b>After authentication, user are given\n                  various levels of permission/ access. Some users may have\n                  access to all the pages and some might not. This process of\n                  restricting the content is called Authorization.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>19. How we handle large data api in frontend.</h3>\n              Pagination, infinite scroll\n              <br />\n              <h3>\n                22. Let suppose we have a text field and that is name, and we\n                have to setup a validation to accept only 5 chars so how can we\n                achieve this by template driven forms. If we want to show the\n                error message then how can we do it.\n              </h3>\n              <br />\n              <h3>\n                23. Let suppose we have three API urls as per first response, we\n                need to call second and as per second response we need to call\n                third API. if there would we error then on third api call we\n                need to show the error, what would be the best approach for\n                this. Can we use rxjs operator in this issue?\n              </h3>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(DepenInjection);\n"]},"metadata":{},"sourceType":"module"}