{"ast":null,"code":"import React, { Suspense, lazy } from 'react';\nconst IntroAngular = lazy(() => import('./deepAngularjs/introAngular'));\nconst Datatypests = lazy(() => import('./angular 12/datatypests'));\nconst TypeScript2 = lazy(() => import('./angular 12/typeScript_2'));\nconst TypeScript4 = lazy(() => import('./angular 12/typeScript_4'));\nconst AngularCompile = lazy(() => import('./deepAngularjs/angCompiler'));\nconst NeyralNetwork = lazy(() => import('./deepAngularjs/neural'));\nconst ActivationFuns = lazy(() => import('./deepAngularjs/activationFunctions'));\nconst Loss = lazy(() => import('./deepAngularjs/loss'));\nconst GradientNeural = lazy(() => import('./deepAngularjs/gradientNeural'));\nconst Stochastic = lazy(() => import('./deepAngularjs/stochastic'));\nconst Tensorboards = lazy(() => import('./deepAngularjs/tensors'));\nconst Benchmarking = lazy(() => import('./deepAngularjs/benchmarking'));\nconst Customer = lazy(() => import('./deepAngularjs/customer'));\nconst RegularizationDeep = lazy(() => import('./deepAngularjs/regularizationDeep'));\nconst Imbalanced = lazy(() => import('./deepAngularjs/imbalanced'));\nconst Imbalanced2 = lazy(() => import('./deepAngularjs/imbalanced2'));\nconst Convolutionals = lazy(() => import('./deepAngularjs/convolutionals'));\nconst dataAugmentation = lazy(() => import('./deepAngularjs/data_augmentation'));\nconst Transfer = lazy(() => import('./deepAngularjs/transfer'));\nconst WordEmbedding = lazy(() => import('./deepAngularjs/word_embedding'));\nconst TensorFlows = lazy(() => import('./deepAngularjs/tensorflow'));\nconst components = {\n  IntroAngular,\n  AngularCompile,\n  Datatypests,\n  NeyralNetwork,\n  ActivationFuns,\n  Loss,\n  GradientNeural,\n  Stochastic,\n  TypeScript2,\n  TypeScript4,\n  Tensorboards,\n  Benchmarking,\n  Customer,\n  RegularizationDeep,\n  Imbalanced,\n  Imbalanced2,\n  Convolutionals,\n  dataAugmentation,\n  Transfer,\n  WordEmbedding,\n  TensorFlows\n};\nexport { components };","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjs/index.js"],"names":["React","Suspense","lazy","IntroAngular","Datatypests","TypeScript2","TypeScript4","AngularCompile","NeyralNetwork","ActivationFuns","Loss","GradientNeural","Stochastic","Tensorboards","Benchmarking","Customer","RegularizationDeep","Imbalanced","Imbalanced2","Convolutionals","dataAugmentation","Transfer","WordEmbedding","TensorFlows","components"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,IAA1B,QAAsC,OAAtC;AAEA,MAAMC,YAAY,GAAGD,IAAI,CAAC,MAAM,OAAO,8BAAP,CAAP,CAAzB;AACA,MAAME,WAAW,GAAGF,IAAI,CAAC,MAAM,OAAO,0BAAP,CAAP,CAAxB;AACA,MAAMG,WAAW,GAAGH,IAAI,CAAC,MAAM,OAAO,2BAAP,CAAP,CAAxB;AACA,MAAMI,WAAW,GAAGJ,IAAI,CAAC,MAAM,OAAO,2BAAP,CAAP,CAAxB;AACA,MAAMK,cAAc,GAAGL,IAAI,CAAC,MAAM,OAAO,6BAAP,CAAP,CAA3B;AACA,MAAMM,aAAa,GAAGN,IAAI,CAAC,MAAM,OAAO,wBAAP,CAAP,CAA1B;AACA,MAAMO,cAAc,GAAGP,IAAI,CAAC,MAAM,OAAO,qCAAP,CAAP,CAA3B;AACA,MAAMQ,IAAI,GAAGR,IAAI,CAAC,MAAM,OAAO,sBAAP,CAAP,CAAjB;AACA,MAAMS,cAAc,GAAGT,IAAI,CAAC,MAAM,OAAO,gCAAP,CAAP,CAA3B;AACA,MAAMU,UAAU,GAAGV,IAAI,CAAC,MAAM,OAAO,4BAAP,CAAP,CAAvB;AACA,MAAMW,YAAY,GAAGX,IAAI,CAAC,MAAM,OAAO,yBAAP,CAAP,CAAzB;AACA,MAAMY,YAAY,GAAGZ,IAAI,CAAC,MAAM,OAAO,8BAAP,CAAP,CAAzB;AACA,MAAMa,QAAQ,GAAGb,IAAI,CAAC,MAAM,OAAO,0BAAP,CAAP,CAArB;AACA,MAAMc,kBAAkB,GAAGd,IAAI,CAAC,MAAM,OAAO,oCAAP,CAAP,CAA/B;AACA,MAAMe,UAAU,GAAGf,IAAI,CAAC,MAAM,OAAO,4BAAP,CAAP,CAAvB;AACA,MAAMgB,WAAW,GAAGhB,IAAI,CAAC,MAAM,OAAO,6BAAP,CAAP,CAAxB;AACA,MAAMiB,cAAc,GAAGjB,IAAI,CAAC,MAAM,OAAO,gCAAP,CAAP,CAA3B;AACA,MAAMkB,gBAAgB,GAAGlB,IAAI,CAAC,MAAM,OAAO,mCAAP,CAAP,CAA7B;AACA,MAAMmB,QAAQ,GAAGnB,IAAI,CAAC,MAAM,OAAO,0BAAP,CAAP,CAArB;AACA,MAAMoB,aAAa,GAAGpB,IAAI,CAAC,MAAM,OAAO,gCAAP,CAAP,CAA1B;AACA,MAAMqB,WAAW,GAAGrB,IAAI,CAAC,MAAM,OAAO,4BAAP,CAAP,CAAxB;AAGA,MAAMsB,UAAU,GAAG;AACjBrB,EAAAA,YADiB;AACHI,EAAAA,cADG;AACaH,EAAAA,WADb;AAC0BI,EAAAA,aAD1B;AACyCC,EAAAA,cADzC;AAEjBC,EAAAA,IAFiB;AAEXC,EAAAA,cAFW;AAEKC,EAAAA,UAFL;AAEiBP,EAAAA,WAFjB;AAE8BC,EAAAA,WAF9B;AAE2CO,EAAAA,YAF3C;AAEyDC,EAAAA,YAFzD;AAEuEC,EAAAA,QAFvE;AAGjBC,EAAAA,kBAHiB;AAGGC,EAAAA,UAHH;AAGeC,EAAAA,WAHf;AAG4BC,EAAAA,cAH5B;AAG4CC,EAAAA,gBAH5C;AAG8DC,EAAAA,QAH9D;AAIjBC,EAAAA,aAJiB;AAIFC,EAAAA;AAJE,CAAnB;AAOA,SAASC,UAAT","sourcesContent":["import React, { Suspense, lazy } from 'react';\n\nconst IntroAngular = lazy(() => import('./deepAngularjs/introAngular'));\nconst Datatypests = lazy(() => import('./angular 12/datatypests'));\nconst TypeScript2 = lazy(() => import('./angular 12/typeScript_2'));\nconst TypeScript4 = lazy(() => import('./angular 12/typeScript_4'));\nconst AngularCompile = lazy(() => import('./deepAngularjs/angCompiler'));\nconst NeyralNetwork = lazy(() => import('./deepAngularjs/neural'));\nconst ActivationFuns = lazy(() => import('./deepAngularjs/activationFunctions'));\nconst Loss = lazy(() => import('./deepAngularjs/loss'));\nconst GradientNeural = lazy(() => import('./deepAngularjs/gradientNeural'));\nconst Stochastic = lazy(() => import('./deepAngularjs/stochastic'));\nconst Tensorboards = lazy(() => import('./deepAngularjs/tensors'));\nconst Benchmarking = lazy(() => import('./deepAngularjs/benchmarking'));\nconst Customer = lazy(() => import('./deepAngularjs/customer'));\nconst RegularizationDeep = lazy(() => import('./deepAngularjs/regularizationDeep'));\nconst Imbalanced = lazy(() => import('./deepAngularjs/imbalanced'));\nconst Imbalanced2 = lazy(() => import('./deepAngularjs/imbalanced2'));\nconst Convolutionals = lazy(() => import('./deepAngularjs/convolutionals'));\nconst dataAugmentation = lazy(() => import('./deepAngularjs/data_augmentation'));\nconst Transfer = lazy(() => import('./deepAngularjs/transfer'));\nconst WordEmbedding = lazy(() => import('./deepAngularjs/word_embedding'));\nconst TensorFlows = lazy(() => import('./deepAngularjs/tensorflow'));\n\n\nconst components = {\n  IntroAngular, AngularCompile, Datatypests, NeyralNetwork, ActivationFuns,\n  Loss, GradientNeural, Stochastic, TypeScript2, TypeScript4, Tensorboards, Benchmarking, Customer,\n  RegularizationDeep, Imbalanced, Imbalanced2, Convolutionals, dataAugmentation, Transfer,\n  WordEmbedding, TensorFlows\n};\n\nexport { components };"]},"metadata":{},"sourceType":"module"}