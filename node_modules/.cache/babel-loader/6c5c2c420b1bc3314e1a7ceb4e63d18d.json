{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/projection.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst projection = `\n@Component({\n  selector: 'app-root',\n  template: '\n      {{data.name}}\n      <ng-content></ng-content>\n      ',\n})\nexport class AppComponent {\n  data={\n    id:1,\n    name:'Mukesh'\n  }\n}\n`.trim();\nconst parentChild = `\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '<app-childs [items]=\"data\"></app-childs>',\n})\nexport class AppComponent {\n  data={\n    id:1,\n    name:'Mukesh'\n  }\n}\n\n\n@Component({\n  selector: 'app-childs',\n  template: '{{items.id}}',\n})\nexport class ChildsComponent {\n  @Input() items:any\n  constructor() { }\n}\n`.trim();\nconst childParent = `\nimport { Component, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '<app-childs (parentFun)=\"parentFun($event)\"></app-childs>\n  {{name}}\n'})\nexport class AppComponent {\n  title = 'childparrent';\n  name = \"\";\n  parentFun(data:any){\n    console.log(data)\n    this.name = data.name\n  }\n}\n\n\n@Component({\n  selector: 'app-childs',\n  template: '<button (click)='sendData()'> CallParent</button>',\n})\nexport class ChildsComponent {\n\n  @Output() parentFun:EventEmitter<any> = new EventEmitter()\n\n  sendData(){\n     let user = {\n      name: \"Mukesh\",\n      age: 30\n    }\n    this.parentFun.emit(user)\n  }\n}\n`.trim();\nconst counting = `\n@Component({\n  selector: 'app-root',\n  template: '\n  <button (click)=\"handleCount()\"> Count</button>\n    {{ count }}\n<button (click) = \"handleButton()\"> Pause</button>',})\n\nexport class AppComponent {\n  title = 'demo';\n  count=0;\n  isPause: true;\n\n  handleCount(){\n    if(this.isPause==true){\n    this.count=this.count+1\n    }\n    else{\n      this.count=this.count-1\n    }\n  }\n\n  handleButton(){\n    this.isPause = !this.isPause\n  }\n}`.trim();\nconst toggle = `\n@Component({\n  selector: 'app-root',\n  template: '{{ toggle }}\n<button (click) = \"onToggle()\"> Toggle</button>\n    ',\n})\n\nexport class AppComponent {\n  toggle=false;\n\n  onToggle(){\n    this.toggle ? \"ON\" : \"OFF\";\n    this.toggle = !this.toggle\n  }\n}`.trim();\nconst keyInput = `\n@Component({\n  selector: 'app-root',\n  template: '\n  <input type = \"number\" min = \"0\" max = \"100\"\n  [value] = \"progress\">\n        ',\n      })\n\nexport class AppComponent {\n  constructor() { }\n  progress=0;\n}`.trim();\nconst ifConditions = `\n@Component({\n  selector: 'app-root',\n  template: '\n{{hoursOfDay}}<br/>\n    <button (click) = \"checkTime()\"> Check</button> <br/>\n{{msg}}\n',})\n\nexport class AppComponent {\n hoursOfDay = 9;\n msg=\"\"\n\n checkTime(){\n   this.msg = this.hoursOfDay <12 ? \"Good Morning\" : \"Keep on\";\n   this.hoursOfDay = this.hoursOfDay + 1;\n }\n}\n}`.trim();\nconst ifElse = `\n@Component({\n  selector: 'app-root',\n  template: '\n  <button (click)=\"getInfo()\">if</button>\n    <div *ngIf=\"isTrue; else elseblock\">\n      {{data}}\n    </div>\n  <ng-template #elseblock>\n    Else\n  </ng-template>\n  ',\n})\nexport class AppComponent {\n  data=\"If\";\n  isTrue=false\n\n  getInfo(){\n    this.isTrue = !this.isTrue\n  }\n}`.trim();\nconst ifElseThen = `\n@Component({\n  selector: 'app-root',\n  template: '\n  <button (click)=\"getInfo()\"> click</button>\n    <div *ngIf=\"isTrue; then thenblock else elseblock\"> {{data}}</div>\n    <ng-template #thenblock>\n      Then\n    </ng-template>\n    <ng-template #elseblock>\n      Else\n    </ng-template>\n  ',\n})\nexport class AppComponent {\n  data=\"If\";\n  isTrue=false\n\n  getInfo(){\n    this.isTrue = !this.isTrue\n  }\n}`.trim();\nconst switchCase = `\n@Component({\n  selector: 'app-root',\n  template: '\n  < select(change)=\"getValue($event)\" >\n      <option value=\"default\">Select</option>\n      <option value=\"laptop\">Laptop</option>\n      <option value=\"tv\">TV</option>\n      <option value=\"mobile\">Mobile</option>\n      <option value=\"machine\">Machine</option>\n    </select >\n\n  <div [ngSwitch] = \"selectedItems\">\n    <p *ngSwitchCase=\"'laptop'\"> Laptop</p>\n      <p *ngSwitchCase=\"'tv'\"> TV</p>\n        <p *ngSwitchCase=\"'mobile'\"> Mobile</p>\n          <p *ngSwitchCase=\"'machine'\"> Machine</p>\n    </div >\n  ',\n})\nexport class AppComponent {\n  selectedItems?: string;\n\n  getValue(e){\n    this.selectedItems = e.target.value\n  }\n}`.trim();\nconst pushSplice = `\n@Component({\n  selector: 'app-root',\n  template: '\n    <input type = \"text\" name = \"\" #uname><br/>\n    <button (click) = \"createUser(uname)\">Create</button>\n\n\n  <table>\n    <tr *ngFor=\"let user of users; let i=index\">\n    <td>{{user.name}}</td>\n    <button (click)=\"removeUser(i)\">X</button>\n      </tr>\n    </table>\n  '',\n})\nexport class AppComponent {\n  users = [];\n\n  createUser(uname){\n    this.users.push({\n      name:uname.value\n    })\n  }\n\n  removeUser(id){\n    this.users.splice(id, 1)\n  }\n}`.trim();\n\nclass Projection12 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, \"Content projection\"), \"Content projection is a pattern in which we insert or project, the content which want to use inside another component.\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, \"Ex.\"), \" We could have a Card component that accepts content provided by another component.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }), \"The \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, \"ng-content\"), \" element is a placeholder that does not create a real DOM element. Custom attributes applied to \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, \"ng-content\"), \" are ignored.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, \"Is used to project content in a component.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, \"Allows to insert a shadow DOM in our component.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, \"In Angular, achieve content projection using \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, \"'ng-content'  '/ng-content' \"), \".  You\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, \"Single-slot content projection\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, \"Multi-slot content projection\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, \"Conditional content projection\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: projection,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, \"Parent-Child\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: parentChild,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, \"Child-Parent\"), \"The @Output() decorator in a child component or directive allows data to flow from the child to the parent.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }), \"The Child Component exposes an EventEmitter Property. This Property is adorned with the @Output decorator. When Child Component needs to communicate with the parent it raises the event. The Parent Component listens to that event and reacts to it.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: childParent,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }, \"Count Inc-Dec\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: counting,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, \"Toggle\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: toggle,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, \"Key-input\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: keyInput,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, \"If-Condition\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: ifConditions,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, \"If-Else\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: ifElse,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, \"If-Else-Then\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: ifElseThen,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }, \"Switch\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: switchCase,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }, \"Push Splice\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: pushSplice,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Projection12);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/projection.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","projection","trim","parentChild","childParent","counting","toggle","keyInput","ifConditions","ifElse","ifElseThen","switchCase","pushSplice","Projection12","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst projection = `\n@Component({\n  selector: 'app-root',\n  template: '\n      {{data.name}}\n      <ng-content></ng-content>\n      ',\n})\nexport class AppComponent {\n  data={\n    id:1,\n    name:'Mukesh'\n  }\n}\n`.trim();\n\nconst parentChild = `\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '<app-childs [items]=\"data\"></app-childs>',\n})\nexport class AppComponent {\n  data={\n    id:1,\n    name:'Mukesh'\n  }\n}\n\n\n@Component({\n  selector: 'app-childs',\n  template: '{{items.id}}',\n})\nexport class ChildsComponent {\n  @Input() items:any\n  constructor() { }\n}\n`.trim();\n\nconst childParent = `\nimport { Component, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '<app-childs (parentFun)=\"parentFun($event)\"></app-childs>\n  {{name}}\n'})\nexport class AppComponent {\n  title = 'childparrent';\n  name = \"\";\n  parentFun(data:any){\n    console.log(data)\n    this.name = data.name\n  }\n}\n\n\n@Component({\n  selector: 'app-childs',\n  template: '<button (click)='sendData()'> CallParent</button>',\n})\nexport class ChildsComponent {\n\n  @Output() parentFun:EventEmitter<any> = new EventEmitter()\n\n  sendData(){\n     let user = {\n      name: \"Mukesh\",\n      age: 30\n    }\n    this.parentFun.emit(user)\n  }\n}\n`.trim();\n\nconst counting = `\n@Component({\n  selector: 'app-root',\n  template: '\n  <button (click)=\"handleCount()\"> Count</button>\n    {{ count }}\n<button (click) = \"handleButton()\"> Pause</button>',})\n\nexport class AppComponent {\n  title = 'demo';\n  count=0;\n  isPause: true;\n\n  handleCount(){\n    if(this.isPause==true){\n    this.count=this.count+1\n    }\n    else{\n      this.count=this.count-1\n    }\n  }\n\n  handleButton(){\n    this.isPause = !this.isPause\n  }\n}`.trim();\n\nconst toggle = `\n@Component({\n  selector: 'app-root',\n  template: '{{ toggle }}\n<button (click) = \"onToggle()\"> Toggle</button>\n    ',\n})\n\nexport class AppComponent {\n  toggle=false;\n\n  onToggle(){\n    this.toggle ? \"ON\" : \"OFF\";\n    this.toggle = !this.toggle\n  }\n}`.trim();\n\nconst keyInput = `\n@Component({\n  selector: 'app-root',\n  template: '\n  <input type = \"number\" min = \"0\" max = \"100\"\n  [value] = \"progress\">\n        ',\n      })\n\nexport class AppComponent {\n  constructor() { }\n  progress=0;\n}`.trim();\n\nconst ifConditions = `\n@Component({\n  selector: 'app-root',\n  template: '\n{{hoursOfDay}}<br/>\n    <button (click) = \"checkTime()\"> Check</button> <br/>\n{{msg}}\n',})\n\nexport class AppComponent {\n hoursOfDay = 9;\n msg=\"\"\n\n checkTime(){\n   this.msg = this.hoursOfDay <12 ? \"Good Morning\" : \"Keep on\";\n   this.hoursOfDay = this.hoursOfDay + 1;\n }\n}\n}`.trim();\n\nconst ifElse = `\n@Component({\n  selector: 'app-root',\n  template: '\n  <button (click)=\"getInfo()\">if</button>\n    <div *ngIf=\"isTrue; else elseblock\">\n      {{data}}\n    </div>\n  <ng-template #elseblock>\n    Else\n  </ng-template>\n  ',\n})\nexport class AppComponent {\n  data=\"If\";\n  isTrue=false\n\n  getInfo(){\n    this.isTrue = !this.isTrue\n  }\n}`.trim();\n\nconst ifElseThen = `\n@Component({\n  selector: 'app-root',\n  template: '\n  <button (click)=\"getInfo()\"> click</button>\n    <div *ngIf=\"isTrue; then thenblock else elseblock\"> {{data}}</div>\n    <ng-template #thenblock>\n      Then\n    </ng-template>\n    <ng-template #elseblock>\n      Else\n    </ng-template>\n  ',\n})\nexport class AppComponent {\n  data=\"If\";\n  isTrue=false\n\n  getInfo(){\n    this.isTrue = !this.isTrue\n  }\n}`.trim();\n\nconst switchCase = `\n@Component({\n  selector: 'app-root',\n  template: '\n  < select(change)=\"getValue($event)\" >\n      <option value=\"default\">Select</option>\n      <option value=\"laptop\">Laptop</option>\n      <option value=\"tv\">TV</option>\n      <option value=\"mobile\">Mobile</option>\n      <option value=\"machine\">Machine</option>\n    </select >\n\n  <div [ngSwitch] = \"selectedItems\">\n    <p *ngSwitchCase=\"'laptop'\"> Laptop</p>\n      <p *ngSwitchCase=\"'tv'\"> TV</p>\n        <p *ngSwitchCase=\"'mobile'\"> Mobile</p>\n          <p *ngSwitchCase=\"'machine'\"> Machine</p>\n    </div >\n  ',\n})\nexport class AppComponent {\n  selectedItems?: string;\n\n  getValue(e){\n    this.selectedItems = e.target.value\n  }\n}`.trim();\n\n\nconst pushSplice = `\n@Component({\n  selector: 'app-root',\n  template: '\n    <input type = \"text\" name = \"\" #uname><br/>\n    <button (click) = \"createUser(uname)\">Create</button>\n\n\n  <table>\n    <tr *ngFor=\"let user of users; let i=index\">\n    <td>{{user.name}}</td>\n    <button (click)=\"removeUser(i)\">X</button>\n      </tr>\n    </table>\n  '',\n})\nexport class AppComponent {\n  users = [];\n\n  createUser(uname){\n    this.users.push({\n      name:uname.value\n    })\n  }\n\n  removeUser(id){\n    this.users.splice(id, 1)\n  }\n}`.trim();\n\n\nclass Projection12 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Content projection</h3>\n              Content projection is a pattern in which we insert or project, the content which want to use inside another component. \n              <b>Ex.</b> We could have a Card component that accepts content provided by another component.\n              <br/>\n              <br/>\n              The <b>ng-content</b> element is a placeholder that does not create a real DOM element. Custom attributes applied \n              to <b>ng-content</b> are ignored.\n              <br/>\n              <br/>\n              <ul>\n                <li>Is used to project content in a component.</li>\n                <li>Allows to insert a shadow DOM in our component.</li>\n                <li>In Angular, achieve content projection using <b>'ng-content'  '/ng-content' </b>.  You</li>\n              </ul>\n              <br/>\n\n              <ol>\n                <li>Single-slot content projection</li>\n                <li>Multi-slot content projection</li>\n                <li>Conditional content projection</li>\n              </ol>\n              <div style={titles}>\n                <PrismCode\n                  code={projection}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Parent-Child</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={parentChild}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Child-Parent</h3>\n              The @Output() decorator in a child component or directive allows data to flow from the child to the parent.\n              <br />\n              <br />\n              The Child Component exposes an EventEmitter Property. This Property is adorned with the @Output decorator. When Child\n              Component needs to communicate with the parent it raises the event. The Parent Component listens to that event and\n              reacts to it.\n              \n              <div style={titles}>\n                <PrismCode\n                  code={childParent}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Count Inc-Dec</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={counting}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Toggle</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={toggle}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Key-input</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={keyInput}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>If-Condition</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={ifConditions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>If-Else</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={ifElse}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>If-Else-Then</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={ifElseThen}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Switch</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={switchCase}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Push Splice</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={pushSplice}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Projection12));\n"]},"metadata":{},"sourceType":"module"}