{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/Redux/deep/reduxState.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst useSelector = `\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { INCREMENT, DECREMENT } from \"./actions/types\"\n\nconst App = () => {\n  const counter = useSelector(state => state.count.counter);  //State\n  const dispatch = useDispatch();                             //Method\n  return (\n    <div>\n      <h1>{counter}</h1>\n      <button onClick={() => dispatch({ type: INCREMENT })}>Incr</button>\n      <button onClick={() => dispatch({ type: DECREMENT })}>Decr</button>\n    </div>\n  );\n};\n`.trim();\nconst reducers = `\n//reducers/reducers.js\nimport { INCREMENT, DECREMENT } from \"../actions/types\"\n\nconst initialState = {\n  counter: 0\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INCREMENT:\n      return { counter: ++state.counter };\n    case DECREMENT:\n      return { counter: --state.counter };\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;\n\n\n//actions/types.js\nexport const INCREMENT = \"INCREMENT\";\nexport const DECREMENT = \"DECREMENT\";\n`.trim();\nconst curds = `\n//components/index.js\nimport * as actions from \"../actions\";\nimport { connect } from \"react-redux\";\n\nclass Input extends Component {\n  state = {\n      title: \"\",\n      content: \"\"\n    };\n\n  handleChange = e => {\n    const state = this.state;\n    state[e.target.name] = e.target.value;\n    this.setState({ state });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.addPost(this.state.title, this.state.content);\n  };\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <input type=\"text\" name=\"title\" onChange={this.handleChange} value={this.state.title}\n            required />\n          \n          <input type=\"text\" name=\"content\" onChange={this.handleChange} value={this.state.content}\n            required\n          />\n          <button>Add</button>\n        </form>\n      </div>\n    );\n  }\n}\n\n\nconst mapDispatchToProps = (dispatch) => ({\n  addPost: (title, content) => {\n    dispatch(actions.addPost(title, content));\n  }\n})\n\nexport default connect(null, mapDispatchToProps)(Input);\n\n\n//components/Item\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions\";\n\nclass Item extends Component {\n  state = {\n      isEdit: false,\n      title: this.props.title,\n      content: this.props.content\n    };\n\n  handleChangeTitle = e => {\n    this.setState({ title: e.target.value });\n  };\n\n  handleChangeContent = e => {\n    this.setState({ content: e.target.value });\n  };\n\n  removePost = () => {\n    this.props.removePost(this.props.id);\n  };\n\n  updatePost = () => {\n    this.setState({ isEdit: true });\n  };\n\n  donePost = () => {\n    this.props.updatePost(this.props.id, this.state.title, this.state.content);\n    this.setState({ isEdit: false });\n  };\n\n  renderTitleInput = () => {\n    return (\n      <input type=\"text\" onChange={this.handleChangeTitle} defaultValue={this.props.title} />\n    );\n  };\n\n  renderContentInput = () => {\n    return (\n      <input type=\"text\" onChange={this.handleChangeContent} defaultValue={this.props.content} />\n    );\n  };\n\n  renderUpdateButton = () => {\n    return (\n      <button onClick={this.updatePost}>EDIT</button>\n    );\n  };\n\n  renderDoneButton = () => {\n    return (\n      <button onClick={this.donePost}>DONE</button>\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        {this.state.isEdit ? this.renderTitleInput() : this.props.title + ': '}\n        {this.state.isEdit ? this.renderContentInput() : this.props.content}\n        <br />\n        {this.state.isEdit\n          ? this.renderDoneButton()\n          : this.renderUpdateButton()}\n        <button onClick={this.removePost}>REMOVE</button>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  removePost: id => {\n    dispatch(actions.removePost(id));\n  },\n  updatePost: (id, title, content) => {\n    dispatch(actions.updatePost(id, title, content));\n  }\n})\n\nexport default connect(null, mapDispatchToProps)(Item);\n\n\n//components/List.js\nimport Item from \"./item.jsx\";\n\nclass List extends Component {\n  render() {\n    return (\n        <div>\n          {this.props.posts.map((post, index) => (\n            <Item {...post} key={index} id={post.id} />\n          ))}\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  posts: state.post\n})\n\nexport default connect(mapStateToProps, null)(List);\n\n\n\n//reducers/post.js\nimport { ADD_POST, REMOVE_POST, UPDATE_POST } from \"../actions/index.js\";\n\nconst initialState = [];\n\nexport default function Post(state = initialState, action) {\n  switch (action.type) {\n    case ADD_POST:\n      return [\n        ...state,\n        {\n          id: action.id,\n          title: action.title,\n          content: action.content\n        }\n      ];\n      \n    case REMOVE_POST:\n      return state.filter(({ id }) => id !== action.id);\n      \n    case UPDATE_POST:\n      return state.map(\n        post => (post.id === action.id ? { ...post, ...action } : post)\n      );\n      \n    default:\n      return state;\n  }\n}\n\n\n//actions/types.js\nexport const ADD_POST = \"ADD_POST\";\nexport const REMOVE_POST = \"REMOVE_POST\";\nexport const UPDATE_POST = \"UPDATE_POST\";\n\n\n//actions/index.js\nimport { ADD_POST, REMOVE_POST, UPDATE_POST } from './types'\n\nlet nextId = 0;\nexport function addPost(title, content) {\n  return {\n    type: ADD_POST,\n    id: nextId++,\n    title,\n    content\n  };\n}\n\nexport function removePost(id) {\n  return {\n    type: REMOVE_POST,\n    id\n  };\n}\n\nexport function updatePost(id, title, content) {\n  return {\n    type: UPDATE_POST,\n    id,\n    title,\n    content\n  };\n}`.trim();\n\nclass ReduxState extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, \"1. useSelector and useDispatch\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: useSelector,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, \"reducers\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: reducers,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, \"2.Curd\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: curds,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(ReduxState);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/Redux/deep/reduxState.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","useSelector","trim","reducers","curds","ReduxState","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst useSelector = `\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { INCREMENT, DECREMENT } from \"./actions/types\"\n\nconst App = () => {\n  const counter = useSelector(state => state.count.counter);  //State\n  const dispatch = useDispatch();                             //Method\n  return (\n    <div>\n      <h1>{counter}</h1>\n      <button onClick={() => dispatch({ type: INCREMENT })}>Incr</button>\n      <button onClick={() => dispatch({ type: DECREMENT })}>Decr</button>\n    </div>\n  );\n};\n`.trim();\n\nconst reducers = `\n//reducers/reducers.js\nimport { INCREMENT, DECREMENT } from \"../actions/types\"\n\nconst initialState = {\n  counter: 0\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INCREMENT:\n      return { counter: ++state.counter };\n    case DECREMENT:\n      return { counter: --state.counter };\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;\n\n\n//actions/types.js\nexport const INCREMENT = \"INCREMENT\";\nexport const DECREMENT = \"DECREMENT\";\n`.trim();\n\nconst curds = `\n//components/index.js\nimport * as actions from \"../actions\";\nimport { connect } from \"react-redux\";\n\nclass Input extends Component {\n  state = {\n      title: \"\",\n      content: \"\"\n    };\n\n  handleChange = e => {\n    const state = this.state;\n    state[e.target.name] = e.target.value;\n    this.setState({ state });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.addPost(this.state.title, this.state.content);\n  };\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <input type=\"text\" name=\"title\" onChange={this.handleChange} value={this.state.title}\n            required />\n          \n          <input type=\"text\" name=\"content\" onChange={this.handleChange} value={this.state.content}\n            required\n          />\n          <button>Add</button>\n        </form>\n      </div>\n    );\n  }\n}\n\n\nconst mapDispatchToProps = (dispatch) => ({\n  addPost: (title, content) => {\n    dispatch(actions.addPost(title, content));\n  }\n})\n\nexport default connect(null, mapDispatchToProps)(Input);\n\n\n//components/Item\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions\";\n\nclass Item extends Component {\n  state = {\n      isEdit: false,\n      title: this.props.title,\n      content: this.props.content\n    };\n\n  handleChangeTitle = e => {\n    this.setState({ title: e.target.value });\n  };\n\n  handleChangeContent = e => {\n    this.setState({ content: e.target.value });\n  };\n\n  removePost = () => {\n    this.props.removePost(this.props.id);\n  };\n\n  updatePost = () => {\n    this.setState({ isEdit: true });\n  };\n\n  donePost = () => {\n    this.props.updatePost(this.props.id, this.state.title, this.state.content);\n    this.setState({ isEdit: false });\n  };\n\n  renderTitleInput = () => {\n    return (\n      <input type=\"text\" onChange={this.handleChangeTitle} defaultValue={this.props.title} />\n    );\n  };\n\n  renderContentInput = () => {\n    return (\n      <input type=\"text\" onChange={this.handleChangeContent} defaultValue={this.props.content} />\n    );\n  };\n\n  renderUpdateButton = () => {\n    return (\n      <button onClick={this.updatePost}>EDIT</button>\n    );\n  };\n\n  renderDoneButton = () => {\n    return (\n      <button onClick={this.donePost}>DONE</button>\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        {this.state.isEdit ? this.renderTitleInput() : this.props.title + ': '}\n        {this.state.isEdit ? this.renderContentInput() : this.props.content}\n        <br />\n        {this.state.isEdit\n          ? this.renderDoneButton()\n          : this.renderUpdateButton()}\n        <button onClick={this.removePost}>REMOVE</button>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  removePost: id => {\n    dispatch(actions.removePost(id));\n  },\n  updatePost: (id, title, content) => {\n    dispatch(actions.updatePost(id, title, content));\n  }\n})\n\nexport default connect(null, mapDispatchToProps)(Item);\n\n\n//components/List.js\nimport Item from \"./item.jsx\";\n\nclass List extends Component {\n  render() {\n    return (\n        <div>\n          {this.props.posts.map((post, index) => (\n            <Item {...post} key={index} id={post.id} />\n          ))}\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  posts: state.post\n})\n\nexport default connect(mapStateToProps, null)(List);\n\n\n\n//reducers/post.js\nimport { ADD_POST, REMOVE_POST, UPDATE_POST } from \"../actions/index.js\";\n\nconst initialState = [];\n\nexport default function Post(state = initialState, action) {\n  switch (action.type) {\n    case ADD_POST:\n      return [\n        ...state,\n        {\n          id: action.id,\n          title: action.title,\n          content: action.content\n        }\n      ];\n      \n    case REMOVE_POST:\n      return state.filter(({ id }) => id !== action.id);\n      \n    case UPDATE_POST:\n      return state.map(\n        post => (post.id === action.id ? { ...post, ...action } : post)\n      );\n      \n    default:\n      return state;\n  }\n}\n\n\n//actions/types.js\nexport const ADD_POST = \"ADD_POST\";\nexport const REMOVE_POST = \"REMOVE_POST\";\nexport const UPDATE_POST = \"UPDATE_POST\";\n\n\n//actions/index.js\nimport { ADD_POST, REMOVE_POST, UPDATE_POST } from './types'\n\nlet nextId = 0;\nexport function addPost(title, content) {\n  return {\n    type: ADD_POST,\n    id: nextId++,\n    title,\n    content\n  };\n}\n\nexport function removePost(id) {\n  return {\n    type: REMOVE_POST,\n    id\n  };\n}\n\nexport function updatePost(id, title, content) {\n  return {\n    type: UPDATE_POST,\n    id,\n    title,\n    content\n  };\n}`.trim();\n\n\nclass ReduxState extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. useSelector and useDispatch</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={useSelector}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>reducers</b>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={reducers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2.Curd</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={curds}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(ReduxState));"]},"metadata":{},"sourceType":"module"}