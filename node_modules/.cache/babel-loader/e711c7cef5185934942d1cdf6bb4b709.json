{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/nestingArrAlgo.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst rotate = `\nfunction fun() {\n  const matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n\n  for (let i=0; i<matrix.length; i++) {\n    for (let j =i+1; j<matrix.length; j++) {\n      const temp = matrix[i][j];\n      matrix[i][j] = matrix[j][i];\n      matrix[j][i] = temp;\n    }\n  }\n\n  console.log(matrix);\n}\n\nfun();\n`.trim();\nconst groupAnagrams = `\nfunction fun() {\n  const words = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"];\n  const anagramGroups = {};\n\n  for (const word of words) {\n    const sortedWord = word.split('').sort().join('');\n\n    if (anagramGroups[sortedWord]) {\n      anagramGroups[sortedWord].push(word);\n    } else {\n      anagramGroups[sortedWord] = [word];\n    }\n  }\n  console.log(anagramGroups)\n}\n\nfun()\n`.trim();\nconst binaryMatrix = `\nfunction shorPath(grid) {\n  let n = grid.length - 1;\n  let q = [0]\n  \n  if (grid[0][0] || grid[n][n]) return -1\n  \n  grid[0][0] = 1\n  while (q.length) {\n      let curr = q.shift();\n      let i = curr & (1 << 7) - 1;\n      let j = curr >> 7;\n      \n      if (i === n && j === n) return grid[n][n]\n      for (let a = Math.max(i-1,0); a <= Math.min(i+1,n); a++){\n          for (let b = Math.max(j-1,0); b <= Math.min(j+1,n); b++){\n              if (grid[a][b] === 0){\n                  grid[a][b] = grid[i][j] + 1, q.push(a + (b << 7))\n                  }\n                }\n              }\n            }\n            return -1\n          };\n  \n  console.log(shorPath([[0,0,0],[1,1,0],[1,1,0]]));`.trim();\nconst spiralOrder = `\nfunction spiralOrder(matrix) {\n  let result = []\n  if(!matrix.length) return result;\n  \n  let rowMin = 0\n  let rowMax = matrix.length -1\n  let columnMin = 0\n  let columnMax = matrix[0].length - 1\n  \n  let i = 0\n  let j = 0\n  let direction = \"right\"\n\n  while(result.length < matrix.length * matrix[0].length) {\n    result.push(matrix[i][j])\n      if(direction === \"right\") {\n          if(j === columnMax) {\n              rowMin += 1\n              i = rowMin\n              direction = \"down\"\n          } else {\n              j++\n          }\n      } else if(direction === \"down\") {\n          if(i === rowMax) {\n              direction = \"left\"\n              columnMax -= 1\n              j = columnMax\n          } else {\n              i++\n          }\n      } else if(direction === \"left\") {\n\n          if(j === columnMin) {\n              direction = \"up\"\n              rowMax -= 1\n               i = rowMax\n          } else {\n              j--\n          }\n      } else {\n          if(i === rowMin) {\n              direction = \"right\"\n              columnMin += 1\n               j = columnMin\n          } else {\n              i--\n          }\n      }\n  }\n\n  return result \n};\n\n\nconsole.log(spiralOrder([\n  [ 1, 2, 3 ],\n  [ 4, 5, 6 ],\n  [ 7, 8, 9 ]\n ]))\n`.trim();\nconst uniquePaths = `\nfunction uniquePaths(m, n){\n  const memo = {}\n\n  function aux(rowIndex, columnIndex){\n    if (memo[rowIndex] !== undefined && memo[rowIndex][columnIndex] !== undefined) {\n      return memo[rowIndex][columnIndex]\n    }\n\n    if (rowIndex >= m || columnIndex >= n) return 0\n    if (rowIndex === m - 1 && columnIndex === n - 1) return 1\n\n    memo[rowIndex] = memo[rowIndex] || {}\n    memo[rowIndex][columnIndex] = aux(rowIndex + 1, columnIndex) + aux(rowIndex, columnIndex + 1)\n    return memo[rowIndex][columnIndex]\n  }\n  \n  return aux(0, 0)\n}\n\nconsole.log(uniquePaths(7,3))\n`.trim();\nconst addBinary = `\nfunction addBinary(a, b) {\n  const reverse = x => x.split('').reverse()\n  \n  const { shorter, longer } = a.length > b.length\n                              ? { shorter: reverse(b), longer: reverse(a) }\n                              : { shorter: reverse(a), longer: reverse(b) }\n\n  let reminder = 0\n  const digits = longer.map((num1, index) => {\n    let res = parseInt(num1, 10) + reminder + (parseInt(shorter[index], 10) ? parseInt(shorter[index], 10) : 0)\n    if (res >= 2) {\n      res -= 2\n      reminder = 1\n    } else {\n      reminder = 0\n    }\n    return res\n  })\n  \n  if (reminder === 1) {\n    digits.push(reminder)\n  }\n  return digits.reverse().join('')\n}\n\nconsole.log(addBinary(\"1010\", \"1011\"))\n`.trim();\n\nclass DSLogic3 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, \"2. Group Anagrams.\"), \"Given an array of strings strs, group the anagrams together. You can return the answer in any order.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }), \"An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, \"Input: \"), \"strs = [\\\"eat\\\",\\\"tea\\\",\\\"tan\\\",\\\"ate\\\",\\\"nat\\\",\\\"bat\\\"]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, \"Output: \"), \"[[\\\"bat\\\"],[\\\"nat\\\",\\\"tan\\\"],[\\\"ate\\\",\\\"eat\\\",\\\"tea\\\"]]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: groupAnagrams,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, \"break\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, \"3. Shortest Path in Binary Matrix\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, \"In an N by N square grid, each cell is either empty (0) or blocked (1).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, \"A clear path from top-left to bottom-right has length k if and only if it is composed of cells C_1, C_2, ..., C_k such that:\"), \"1.Adjacent cells C_i and C_i+1 are connected 8-directionally (ie., they are different and share an edge or corner)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }), \"2.C_1 is at location (0, 0) (ie. has value grid[0][0])\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }), \"3.C_k is at location (N-1, N-1) (ie. has value grid[N-1][N-1])\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }), \"4.If C_i is located at (r, c), then grid[r][c] is empty (ie. grid[r][c] == 0).\", React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, \"Return the length of the shortest such clear path from top-left to bottom-right. If such a path does not exist, return -1.\")), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, \"Input: \"), \"[[0,1],[1,0]], [[0,0,0],[1,1,0],[1,1,0]]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, \"Output: \"), \"2, 4\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: binaryMatrix,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, \"4. Spiral Matrix.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, \"Input: \"), \"[ [ 1, 2, 3 ],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }), \"[ 4, 5, 6 ],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }), \"[ 7, 8, 9 ] ]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, \"Output: \"), \"[1,2,3,6,9,8,7,4,5]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: spiralOrder,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, \"5. Unique Paths.\"), \"A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }), \"The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }), \"How many possible unique paths are there? \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, \"Input: \"), \"m = 7, n = 3\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, \"Output: \"), \"28\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: uniquePaths,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, \"6. Add Binary\"), \"Given two binary strings, return their sum (also a binary string).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }), \"The input strings are both non-empty and contains only characters 1 or 0.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, \"Input: \"), \"a = \\\"1010\\\", b = \\\"1011\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, \"Output: \"), \"\\\"10101\\\"\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: addBinary,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(DSLogic3);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/nestingArrAlgo.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","rotate","trim","groupAnagrams","binaryMatrix","spiralOrder","uniquePaths","addBinary","DSLogic3","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,UAAtB,EAAkCC,IAAlC,QAA8C,mBAA9C;AAEA,OAAO,0BAAP;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AAEA,OAAOC,QAAP,MAAqB,2BAArB;AAEA,MAAMC,MAAM,GAAG;AAAEC,EAAAA,eAAe,EAAE,SAAnB;AAA8BC,EAAAA,OAAO,EAAE,KAAvC;AAA8CC,EAAAA,QAAQ,EAAE;AAAxD,CAAf;AAEA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,MAAM,EAAE,GADO;AAEfC,EAAAA,KAAK,EAAE;AAFQ,CAAjB;;AAKA,MAAMC,MAAM,GAAGC,KAAK,KAAK;AACvBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH;AAELT,IAAAA,OAAO,EAAEM,KAAK,CAACG,OAAN,CAAc,CAAd;AAFJ,GADgB;AAKvBC,EAAAA,QAAQ,EAAE;AACRF,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd;AADA,GALa;AAQvBE,EAAAA,SAAS,EAAE;AACTC,IAAAA,SAAS,EAAE;AADF;AARY,CAAL,CAApB;;AAcA,MAAMC,MAAM,GAAI;;;;;;;;;;;;;;;;CAAD,CAgBbC,IAhBa,EAAf;AAkBA,MAAMC,aAAa,GAAI;;;;;;;;;;;;;;;;;;CAAD,CAkBpBD,IAlBoB,EAAtB;AAoBA,MAAME,YAAY,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;oDAAD,CAyBgCF,IAzBhC,EAArB;AA2BA,MAAMG,WAAW,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAD,CA6DlBH,IA7DkB,EAApB;AA+DA,MAAMI,WAAW,GAAI;;;;;;;;;;;;;;;;;;;;;CAAD,CAqBlBJ,IArBkB,EAApB;AAyBA,MAAMK,SAAS,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAD,CA2BhBL,IA3BgB,EAAlB;;AA8BA,MAAMM,QAAN,SAAuB/B,SAAvB,CAAiC;AAC/BgC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,UAAU,CAAC,MAAMhC,KAAK,CAACiC,YAAN,EAAP,EAA6B,CAA7B,CAAV;AACD;;AACDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB;AACA,WACE,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAED,OAAO,CAAClB,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAJ,CADF,CADF,CADF,EAME,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAEkB,OAAO,CAAClB,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADf,0GAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,4JAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,OAKQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALR,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBANF,8DAM4D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAN5D,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF,6DAQE;AAAK,MAAA,KAAK,EAAET,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEiB,aADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CARF,EAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfF,EAiBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAjBF,EAkBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAlBF,EAmBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iFADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sIAFF,wHAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,4DAKwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALxD,oEAMgE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANhE,oFAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oIARF,CAnBF,EA6BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBA7BF,8CA8BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9BF,EA+BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA/BF,UAgCE;AAAK,MAAA,KAAK,EAAEjB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEkB,YADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAhCF,EAuCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvCF,EAyCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAzCF,EA0CE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBA1CF,oBA4CgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5ChB,kBA6CgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7ChB,mBA+CK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/CL,EA+CU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/CV,EAgDI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAhDJ,yBAiDE;AAAK,MAAA,KAAK,EAAElB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEmB,WADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAjDF,EAwDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxDF,EA0DE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BA1DF,sGA4DE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5DF,iLA8DE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9DF,gDA+D4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/D5C,OA+DkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/DlD,EAgEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAhEF,kBAgE4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhE5B,EAiEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAjEF,QAkEE;AAAK,MAAA,KAAK,EAAEnB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEoB,WADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAlEF,EAyEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzEF,EA2EE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBA3EF,wEA6EE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7EF,+EA8E2E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9E3E,EA+EE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBA/EF,gCA+EsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/EtC,EAgFE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAhFF,eAiFE;AAAK,MAAA,KAAK,EAAEpB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEqB,SADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAjFF,CADF,CADF,CANF,CADF;AAsGD;;AA5G8B;;AA+GjC,eAAgB1B,UAAU,CAACY,MAAD,CAAV,CAAmBe,QAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst rotate = `\nfunction fun() {\n  const matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n\n  for (let i=0; i<matrix.length; i++) {\n    for (let j =i+1; j<matrix.length; j++) {\n      const temp = matrix[i][j];\n      matrix[i][j] = matrix[j][i];\n      matrix[j][i] = temp;\n    }\n  }\n\n  console.log(matrix);\n}\n\nfun();\n`.trim();\n\nconst groupAnagrams = `\nfunction fun() {\n  const words = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"];\n  const anagramGroups = {};\n\n  for (const word of words) {\n    const sortedWord = word.split('').sort().join('');\n\n    if (anagramGroups[sortedWord]) {\n      anagramGroups[sortedWord].push(word);\n    } else {\n      anagramGroups[sortedWord] = [word];\n    }\n  }\n  console.log(anagramGroups)\n}\n\nfun()\n`.trim();\n\nconst binaryMatrix = `\nfunction shorPath(grid) {\n  let n = grid.length - 1;\n  let q = [0]\n  \n  if (grid[0][0] || grid[n][n]) return -1\n  \n  grid[0][0] = 1\n  while (q.length) {\n      let curr = q.shift();\n      let i = curr & (1 << 7) - 1;\n      let j = curr >> 7;\n      \n      if (i === n && j === n) return grid[n][n]\n      for (let a = Math.max(i-1,0); a <= Math.min(i+1,n); a++){\n          for (let b = Math.max(j-1,0); b <= Math.min(j+1,n); b++){\n              if (grid[a][b] === 0){\n                  grid[a][b] = grid[i][j] + 1, q.push(a + (b << 7))\n                  }\n                }\n              }\n            }\n            return -1\n          };\n  \n  console.log(shorPath([[0,0,0],[1,1,0],[1,1,0]]));`.trim();\n\nconst spiralOrder = `\nfunction spiralOrder(matrix) {\n  let result = []\n  if(!matrix.length) return result;\n  \n  let rowMin = 0\n  let rowMax = matrix.length -1\n  let columnMin = 0\n  let columnMax = matrix[0].length - 1\n  \n  let i = 0\n  let j = 0\n  let direction = \"right\"\n\n  while(result.length < matrix.length * matrix[0].length) {\n    result.push(matrix[i][j])\n      if(direction === \"right\") {\n          if(j === columnMax) {\n              rowMin += 1\n              i = rowMin\n              direction = \"down\"\n          } else {\n              j++\n          }\n      } else if(direction === \"down\") {\n          if(i === rowMax) {\n              direction = \"left\"\n              columnMax -= 1\n              j = columnMax\n          } else {\n              i++\n          }\n      } else if(direction === \"left\") {\n\n          if(j === columnMin) {\n              direction = \"up\"\n              rowMax -= 1\n               i = rowMax\n          } else {\n              j--\n          }\n      } else {\n          if(i === rowMin) {\n              direction = \"right\"\n              columnMin += 1\n               j = columnMin\n          } else {\n              i--\n          }\n      }\n  }\n\n  return result \n};\n\n\nconsole.log(spiralOrder([\n  [ 1, 2, 3 ],\n  [ 4, 5, 6 ],\n  [ 7, 8, 9 ]\n ]))\n`.trim();\n\nconst uniquePaths = `\nfunction uniquePaths(m, n){\n  const memo = {}\n\n  function aux(rowIndex, columnIndex){\n    if (memo[rowIndex] !== undefined && memo[rowIndex][columnIndex] !== undefined) {\n      return memo[rowIndex][columnIndex]\n    }\n\n    if (rowIndex >= m || columnIndex >= n) return 0\n    if (rowIndex === m - 1 && columnIndex === n - 1) return 1\n\n    memo[rowIndex] = memo[rowIndex] || {}\n    memo[rowIndex][columnIndex] = aux(rowIndex + 1, columnIndex) + aux(rowIndex, columnIndex + 1)\n    return memo[rowIndex][columnIndex]\n  }\n  \n  return aux(0, 0)\n}\n\nconsole.log(uniquePaths(7,3))\n`.trim();\n\n\n\nconst addBinary = `\nfunction addBinary(a, b) {\n  const reverse = x => x.split('').reverse()\n  \n  const { shorter, longer } = a.length > b.length\n                              ? { shorter: reverse(b), longer: reverse(a) }\n                              : { shorter: reverse(a), longer: reverse(b) }\n\n  let reminder = 0\n  const digits = longer.map((num1, index) => {\n    let res = parseInt(num1, 10) + reminder + (parseInt(shorter[index], 10) ? parseInt(shorter[index], 10) : 0)\n    if (res >= 2) {\n      res -= 2\n      reminder = 1\n    } else {\n      reminder = 0\n    }\n    return res\n  })\n  \n  if (reminder === 1) {\n    digits.push(reminder)\n  }\n  return digits.reverse().join('')\n}\n\nconsole.log(addBinary(\"1010\", \"1011\"))\n`.trim();\n\n\nclass DSLogic3 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n                           <h3>2. Group Anagrams.</h3>\n              Given an array of strings strs, group the anagrams together. You can return the answer in any order.\n              <br/>\n              An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n              <br/> <br/>\n              <b>Input: </b>strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]<br/>\n              <b>Output: </b>[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n              <div style={titles}>\n                <PrismCode\n                  code={groupAnagrams}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <b>break</b>\n              <h3>3. Shortest Path in Binary Matrix</h3>\n              <ul>\n                <li>In an N by N square grid, each cell is either empty (0) or blocked (1).</li>\n                <li>A clear path from top-left to bottom-right has length k if and only if it is composed of cells C_1, C_2, ..., C_k such that:</li>\n                1.Adjacent cells C_i and C_i+1 are connected 8-directionally (ie., they are different and share an edge or corner)\n                <br />\n                2.C_1 is at location (0, 0) (ie. has value grid[0][0])<br />\n                3.C_k is at location (N-1, N-1) (ie. has value grid[N-1][N-1])<br />\n                4.If C_i is located at (r, c), then grid[r][c] is empty (ie. grid[r][c] == 0).\n                <li>Return the length of the shortest such clear path from top-left to bottom-right. If such a path does not exist, return -1.</li>\n              </ul>\n              <b>Input: </b>[[0,1],[1,0]], [[0,0,0],[1,1,0],[1,1,0]]\n              <br />\n              <b>Output: </b>2, 4\n              <div style={titles}>\n                <PrismCode\n                  code={binaryMatrix}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />              \n\n              <h3>4. Spiral Matrix.</h3>\n              <b>Input: </b>\n                [\n                [ 1, 2, 3 ],<br/>\n                [ 4, 5, 6 ],<br/>\n                [ 7, 8, 9 ]\n                ]<br/><br/>\n                <b>Output: </b>[1,2,3,6,9,8,7,4,5]\n              <div style={titles}>\n                <PrismCode\n                  code={spiralOrder}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>5. Unique Paths.</h3>\n              A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\n              <br/>\n              The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\n              <br/>\n              How many possible unique paths are there? <br/> <br/>\n              <b>Input: </b>m = 7, n = 3<br/>\n              <b>Output: </b>28\n              <div style={titles}>\n                <PrismCode\n                  code={uniquePaths}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>6. Add Binary</h3>\n              Given two binary strings, return their sum (also a binary string).\n              <br/>\n              The input strings are both non-empty and contains only characters 1 or 0.<br/>\n              <b>Input: </b>a = \"1010\", b = \"1011\"<br/>\n              <b>Output: </b>\"10101\"\n              <div style={titles}>\n                <PrismCode\n                  code={addBinary}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic3));\n"]},"metadata":{},"sourceType":"module"}