{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';import Theata from'../../../assets/customElement.png';import CustomElement from'../../../assets/create.png';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var myProvider=\"\\nexport class MyProvider{\\n  constructor(){\\n    console.log('myProvider called')\\n  }\\n  varProvider = \\\"varProvider\\\";\\n}\\n\\nexport class MyProvider2{\\n  constructor(){}\\n  varProvider2 = \\\"varProvider2\\\";\\n\\n  getString(str){\\n    console.log('myProvider called2', str)\\n  }\\n}\\n\\n@Component({\\n  selector: 'app-root',\\n  templateUrl: './app.component.html',\\n  viewProviders: [MyProvider, MyProvider2]\\n})\\nexport class AppComponent {\\n  constructor(public obj:MyProvider, public obj2:MyProvider2){\\n    obj2.getString('Mukesh')\\n    console.log(obj.varProvider);\\n    console.log(obj2.varProvider2);\\n  }\\n}\".trim();var viewChild=\"\\n//childs.ts\\nimport { Component } from '@angular/core';\\n@Component({\\n  selector: 'app-childs',\\n  template: '\\nUsername: {{username}}\\n      <br/>\\n    <button (click) = \\\"clickMe()\\\"> click</button>\\n  '\\n})\\nexport class Child {\\n  username=\\\"default Value\\\"\\n  clickMe(){\\n    alert(this.username)\\n  }\\n}\\n\\n\\n//viewChild_2.ts\\nimport { Component, ViewContainerRef, ViewChild } from '@angular/core';\\n@Component({\\n  selector: 'app-root',\\n  template: '\\n  < button(click)=\\\"show()\\\"> Show</button>\\n    <div id=\\\"layout\\\" *ngIf=\\\"display\\\">\\n      <div #contentPlaceholder></div>\\n</div >\\n  '\\n})\\nexport class AppComponent {\\n  display = false;\\n    @ViewChild('contentPlaceholder', {read: ViewContainerRef}) viewContainerRef;\\n\\n    show() {\\n        this.display = true;\\n        console.log(this.viewContainerRef); // undefined\\n        setTimeout(()=> {\\n            console.log(this.viewContainerRef); // OK\\n        }, 1);\\n    }\\n}\\n\\n\\n//app.component.ts\\nimport { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\\nimport { Child } from './childs';\\n\\n@Component({\\n  selector: 'app-root',\\n  template: '<div #box>\\n  <p>{{username}}</p>\\n</div>\\n<div>\\n  <button (click)=\\\"changeProperty()\\\">Change Child Property</button>\\n  <button (click)=\\\"changeMethod()\\\">Change Child Method</button>\\n</div>\\n\\n<app-childs></app-childs>'\\n})\\n\\nexport class AppComponent implements OnInit {\\n  username=\\\"username\\\";\\n  @ViewChild('box', {static: false}) box:ElementRef\\n  constructor(){}\\n\\n  ngOnInit(){ }\\n  ngAfterViewInit(){\\n    // console.log(this.box);\\n    // this.box.nativeElement.style.backgroundColor=\\\"blue\\\";\\n    // this.box.nativeElement.classList=\\\"viewChild accept class\\\";\\n    // this.box.nativeElement.innerHTML=\\\"Can change innerHTML value\\\";\\n\\n    console.log(this.child)\\n  }\\n\\n  @ViewChild(Child, {static: false}) child:Child;\\n  changeProperty(){\\n    this.child.username = \\\"Mukesh\\\"\\n  }\\n\\n  changeMethod(){\\n    this.child.clickMe()\\n  }\\n}\".trim();var AngularDir=/*#__PURE__*/function(_Component){_inherits(AngularDir,_Component);function AngularDir(){_classCallCheck(this,AngularDir);return _possibleConstructorReturn(this,_getPrototypeOf(AngularDir).apply(this,arguments));}_createClass(AngularDir,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. ViewProvider\"),React.createElement(\"p\",null,\"viewProviders property allows us to make providers available only for the component\\u2019s view. When we want to use a class in our component that is defined outside the @Component () decorator function, then, first of all, we need to inject this class into our component, and we can achieve this with the help of the \\\"viewProvider\\\" property of a component.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:myProvider,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Providers have services list which use by component.\"),\"If component need any service than it ask to injector not to Promises, Injector will create that service by getting blue-print from Promises, But if injector have that service instance than directly provide to component.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. ViewChild\"),\"ViewChild is a decorator for Angular component variables, which allow to bind child component data and method.\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"are used for component communication. If a parent component want to access child component then use ViewChild. Any component, directive or element which is part of a template is ViewChild.\"),React.createElement(\"li\",null,\"ViewChild() decorator can be used to get the first element or directive matching the selector from the view DOM. @ViewChild() provides the instance of another component or directive in a parent component and then parent component can access the method and properties of that component or directive.\")),React.createElement(\"br\",null),\"Use @ViewChild with ElementRef or TemplateRef.\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:viewChild,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return AngularDir;}(Component);export default withStyles(styles)(AngularDir);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/viewProvider.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Theata","CustomElement","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","myProvider","trim","viewChild","AngularDir","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,0BAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CACA,MAAOC,CAAAA,MAAP,KAAmB,mCAAnB,CACA,MAAOC,CAAAA,aAAP,KAA0B,4BAA1B,CAGA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,eAAe,CAAE,SAAnB,CAA8BC,OAAO,CAAE,KAAvC,CAA8CC,QAAQ,CAAE,MAAxD,CAAf,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,KAAK,CAAE,CACLC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH,CAELN,OAAO,CAAEG,KAAK,CAACG,OAAN,CAAc,CAAd,CAFJ,CADgB,CAKvBC,QAAQ,CAAE,CACRF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA,CALa,CAQvBE,SAAS,CAAE,CACTC,SAAS,CAAE,QADF,CARY,CAAL,EAApB,CAcA,GAAMC,CAAAA,UAAU,CAAG,wmBA4BhBC,IA5BgB,EAAnB,CA+BA,GAAMC,CAAAA,SAAS,CAAG,k9DAoFfD,IApFe,EAAlB,C,GAyFME,CAAAA,U,0SACgB,CAClBC,UAAU,CAAC,iBAAMzB,CAAAA,KAAK,CAAC0B,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAACZ,KAA1B,EACE,8BAAI,oBAAC,OAAD,MAAJ,CADF,CADF,CADF,CAME,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEY,OAAO,CAACZ,KAA1B,EACE,oBAAC,IAAD,MACE,gDADF,CAEE,uYAFF,CAOE,2BAAK,KAAK,CAAEN,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEY,UADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAPF,CAcE,8BAdF,CAgBE,qFAhBF,gOAkBE,8BAlBF,CAmBE,8BAnBF,CAqBE,6CArBF,kHAuBE,8BAvBF,CAwBE,8BACE,6NADF,CAIE,2UAJF,CAxBF,CAiCE,8BAjCF,kDAmCE,8BAnCF,CAqCE,2BAAK,KAAK,CAAEZ,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEc,SADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CArCF,CADF,CADF,CANF,CADF,CA2DD,C,wBAjEsBxB,S,EAoEzB,cAAgBI,CAAAA,UAAU,CAACU,MAAD,CAAV,CAAmBW,UAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Theata from '../../../assets/customElement.png';\nimport CustomElement from '../../../assets/create.png';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst myProvider = `\nexport class MyProvider{\n  constructor(){\n    console.log('myProvider called')\n  }\n  varProvider = \"varProvider\";\n}\n\nexport class MyProvider2{\n  constructor(){}\n  varProvider2 = \"varProvider2\";\n\n  getString(str){\n    console.log('myProvider called2', str)\n  }\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  viewProviders: [MyProvider, MyProvider2]\n})\nexport class AppComponent {\n  constructor(public obj:MyProvider, public obj2:MyProvider2){\n    obj2.getString('Mukesh')\n    console.log(obj.varProvider);\n    console.log(obj2.varProvider2);\n  }\n}`.trim();\n\n\nconst viewChild = `\n//childs.ts\nimport { Component } from '@angular/core';\n@Component({\n  selector: 'app-childs',\n  template: '\nUsername: {{username}}\n      <br/>\n    <button (click) = \"clickMe()\"> click</button>\n  '\n})\nexport class Child {\n  username=\"default Value\"\n  clickMe(){\n    alert(this.username)\n  }\n}\n\n\n//viewChild_2.ts\nimport { Component, ViewContainerRef, ViewChild } from '@angular/core';\n@Component({\n  selector: 'app-root',\n  template: '\n  < button(click)=\"show()\"> Show</button>\n    <div id=\"layout\" *ngIf=\"display\">\n      <div #contentPlaceholder></div>\n</div >\n  '\n})\nexport class AppComponent {\n  display = false;\n    @ViewChild('contentPlaceholder', {read: ViewContainerRef}) viewContainerRef;\n\n    show() {\n        this.display = true;\n        console.log(this.viewContainerRef); // undefined\n        setTimeout(()=> {\n            console.log(this.viewContainerRef); // OK\n        }, 1);\n    }\n}\n\n\n//app.component.ts\nimport { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { Child } from './childs';\n\n@Component({\n  selector: 'app-root',\n  template: '<div #box>\n  <p>{{username}}</p>\n</div>\n<div>\n  <button (click)=\"changeProperty()\">Change Child Property</button>\n  <button (click)=\"changeMethod()\">Change Child Method</button>\n</div>\n\n<app-childs></app-childs>'\n})\n\nexport class AppComponent implements OnInit {\n  username=\"username\";\n  @ViewChild('box', {static: false}) box:ElementRef\n  constructor(){}\n\n  ngOnInit(){ }\n  ngAfterViewInit(){\n    // console.log(this.box);\n    // this.box.nativeElement.style.backgroundColor=\"blue\";\n    // this.box.nativeElement.classList=\"viewChild accept class\";\n    // this.box.nativeElement.innerHTML=\"Can change innerHTML value\";\n\n    console.log(this.child)\n  }\n\n  @ViewChild(Child, {static: false}) child:Child;\n  changeProperty(){\n    this.child.username = \"Mukesh\"\n  }\n\n  changeMethod(){\n    this.child.clickMe()\n  }\n}`.trim();\n\n\n\n\nclass AngularDir extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. ViewProvider</h3>\n              <p>\n                viewProviders property allows us to make providers available only for the component’s view.\n                When we want to use a class in our component that is defined outside the @Component () decorator function, then, first of all, we need to inject this class into our component, and we can achieve this with the help of the \"viewProvider\" property of a component.\n              </p>\n\n              <div style={titles}>\n                <PrismCode\n                  code={myProvider}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Providers have services list which use by component.</h3>\n              If component need any service than it ask to injector not to Promises, Injector will create that service by getting blue-print from Promises, But if injector have that service instance than directly provide to component.\n              <br />\n              <br />\n\n              <h3>2. ViewChild</h3>\n              ViewChild is a decorator for Angular component variables, which allow to bind child component data and method.\n              <br />\n              <ul>\n                <li>are used for component communication. If a parent component want to access child\n                  component then use ViewChild. Any component, directive or element which is part of a template\n                  is ViewChild.</li>\n                <li>ViewChild() decorator can be used to get the first element or directive matching the selector\n                  from the view DOM. @ViewChild() provides the instance of another component or directive in a\n                  parent component and then parent component can access the method and properties of that\n                  component or directive.</li>\n              </ul>\n              <br />\n              Use @ViewChild with ElementRef or TemplateRef.\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={viewChild}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(AngularDir));\n"]},"metadata":{},"sourceType":"module"}