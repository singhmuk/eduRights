{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';import gradient from'../../../assets/ML/array_vs_list.png';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var redesign={height:200,width:500};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var ndarray=\"\\narr = np.array(42)                                                                      #0-D arrays, or Scalars.\\narr = np.array([1, 2, 3, 4, 5])                                                         #1-D Arrays\\narr = np.array([[1, 2, 3], [4, 5, 6]])                                                  #2-D Arrays\\narr = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])                        #3-D arrays\\narr2 = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]], dtype=np.float64)\\narr3 = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]], dtype=complex)\\narrStr = np.array([1, 2, 3, 4], dtype='S')                                              #Creating Arrays With a Data String.\\narrFloat = np.array([1.1, 2.1, 3.1])\\n\".trim();var pyFuns=\"\\narr = np.array([1, 2, 3, 6, 7, 8, 9, 0])\\narrs = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])\\narr2 = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]], dtype=np.float64)\\narr3 = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]], dtype=complex)\\narr4 = np.array([[1,2],[3,4],[5,6]])\\narrStr = np.array([1, 2, 3, 4], dtype='S')                             #array with data type string\\narrFloat = np.array([1.1, 2.1, 3.1])\\n\\n\\nx = arr[0]\\nx = arr[0, 1]\\nx = arr[1:5:2]                                                          #[start:end:step]\\nx = arr.dtype\\nx = arrFloat.astype(int)                                                #Change data type from float to integer\\nx = arrFloat.astype(bool)                                               #float to boolean\\n\\n\\nx = arr.ndim\\nx = arr.itemsize                                                        # itemsize is 4 bytes\\nx = arr.size                                                            # total bunber of elements\\nx = arr.shape                                                           \\nx = arr4.reshape(2,3)                                                   # information of dimension\\nx = arr4.ravel()\\nx = arr4.min() \\nx = arr4.max() \\nx = arr4.sum()  \\nx = arr.sum(axis=0)\\n\\nnewarr = np.concatenate((arr, arr2), axis=1)                            #join array\\nnewarr = np.stack((arr, arr2), axis=1)                                  #join array using stack\\nnewarr = np.hstack((arr, arr2))                                         #join array along rows\\nnewarr = np.vstack((arr, arr2))                                         #join array along colom\\n\\nnewarr = np.array_split(arr, 3, axis=0)                                #Splitting breaks one array into multiple.\\nx = np.where(arr == 7)                                                 #Find the indexes where the value is 7.\\nx = np.searchsorted(arr, 7)\\nx = np.sort(arr)\\n\\nx = np.sqrt(arr)  \\nx = np.std(arr)                                                         #standard deviation\\nx = arr + arr2  \\nx = arr.dot(arr4) \\n\".trim();var zeros=\"\\nx = np.zeros((3,4))\\nx = np.ones((3,4))\\nx = np.arange(1, 5, 2)                                                  # 2 steps\\nx = np.linspace(1, 5, 50)                                               # start, stop, num\\n\\nprint(x)\\n\".trim();var numpy=\"import numpy as np\\nar = np.array([1, 3, 2, 4, 5, 6])\\nprint(ar.argsort()[-3:][::-1])\\n\".trim();var Copy=\"\\n#Copy\\narr = np.array([1, 2, 3])\\narrCopy = arr.copy()\\narr[0] = 42\\n\\nprint(arr)\\nprint(arrCopy)\\n\\n\\n#View\\narr = np.array([1, 2, 3])\\narrView = arr.view()\\narr[0] = 42\\n\\nprint(arr)\\nprint(arrView)\\n\".trim();var iterating=\"\\narr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\\n\\nfor x in arr:\\n  print(x)\\n\".trim();// const Series = ``.trim()\n// const Series = ``.trim()\nvar Numpys=/*#__PURE__*/function(_Component){_inherits(Numpys,_Component);function Numpys(){_classCallCheck(this,Numpys);return _possibleConstructorReturn(this,_getPrototypeOf(Numpys).apply(this,arguments));}_createClass(Numpys,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Different forms of data\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Tabular/ spreadsheet-like data in which each column may be a different type (string, numeric, date, etc). \"),React.createElement(\"li\",null,\"Multiple tables of data interrelated by key columns (primary/ foreign keys for a SQL user).\")),React.createElement(\"b\",null,\"A large percentage of datasets can be transformed into a structured form that is more suitable for analysis and modeling.\"),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"NumPy\"),\"Benifits of numpy over python list.\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Fast.\"),React.createElement(\"li\",null,\"Less Memory.\"),React.createElement(\"li\",null,\"NumPy create a N-dimensional array in python.\"),React.createElement(\"li\",null,\"Used for working with arrays.\"),React.createElement(\"li\",null,\"It also has functions for working in domain of linear algebra, fourier transform, and matrices.\"),React.createElement(\"li\",null,\"NumPy aims to provide an array object that is up to 50x faster than traditional Python lists.\"),React.createElement(\"li\",null,\"NumPy Data Types is Objects\"),React.createElement(\"li\",null,\"It internally stores data in a contiguous block of memory, independent of other built-in Python objects.\")),React.createElement(\"br\",null),React.createElement(\"img\",{src:gradient,alt:\"gradient\",className:\"responsive\",style:redesign}),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Data Types\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"i: \"),\"integer\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"b: \"),\"boolean\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"u: \"),\"unsigned integer\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"f: \"),\"float\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"c: \"),\"complex float\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"m: \"),\"timedelta\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"M: \"),\"datetime\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"O: \"),\"object\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"S: \"),\"string\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"U: \"),\"unicode string\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"V: \"),\"fixed chunk of memory for other type ( void )\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Create a NumPy ndarray Object\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"The array object in NumPy is called ndarray.\"),React.createElement(\"li\",null,\"An array can have any number of dimensions.\"),React.createElement(\"li\",null,\"When the array is created, you can define the number of dimensions by using the ndmin argument.\"),React.createElement(\"b\",null,\"arr = np.array([1, 2, 3, 4], ndmin=5)\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:ndarray,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"zeros\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:zeros,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Write a code to get the indices of N maximum values from a NumPy array.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:numpy,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"The Difference Between Copy and View\"),\"Copy is a new array, and the view is just a view of the original array.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Copy,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Iterating\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:iterating,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Functions:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"ndim: \"),\"Return how many dimensions the array have.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"ravel(): \"),\"Used to change a 2-dimensional array or a multi-dimensional array into a contiguous flattened array (1D array with all the input-array elements and with the same type as it. ravel() return new array.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"arr.reshape(4, 3): \"),\"Reshape From 1-D to 2-D.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"arr[0]: \"),\"Array indexing to access an array element.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"dtype: \"),\"Returns the data type of the array.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"arr.shape: \"),\"Returns a tuple with each index having the number of corresponding elements.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Stack: \"),\"Stacking is same as concatenation, the only difference is that stacking is done along a new axis.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"np.hstack((arr1, arr2)): \"),\"To stack along rows.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"np.vstack((arr1, arr2)): \"),\"To stack along columns.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"np.dstack((arr1, arr2)): \"),\"To stack along height, which is the same as depth.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"np.where(arr == 4): \"),\"Search an array for a certain value, and return the indexes that get a match.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"np.searchsorted(arr, 7, side='right'): \"),\"Performs a binary search in the array, and returns the index where the specified value would be inserted to maintain the search order.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"np.linspace(1, 5, 50): \"),\"Is Linear list space. Returns evenly separated values over a specified period. The system implicitly calculates the step size.\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:pyFuns,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return Numpys;}(Component);export default withStyles(styles)(Numpys);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ml/deepMl/numpyPy.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","gradient","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","ndarray","trim","pyFuns","zeros","numpy","Copy","iterating","Numpys","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport gradient from '../../../assets/ML/array_vs_list.png'\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst ndarray = `\narr = np.array(42)                                                                      #0-D arrays, or Scalars.\narr = np.array([1, 2, 3, 4, 5])                                                         #1-D Arrays\narr = np.array([[1, 2, 3], [4, 5, 6]])                                                  #2-D Arrays\narr = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])                        #3-D arrays\narr2 = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]], dtype=np.float64)\narr3 = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]], dtype=complex)\narrStr = np.array([1, 2, 3, 4], dtype='S')                                              #Creating Arrays With a Data String.\narrFloat = np.array([1.1, 2.1, 3.1])\n`.trim()\n\nconst pyFuns = `\narr = np.array([1, 2, 3, 6, 7, 8, 9, 0])\narrs = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])\narr2 = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]], dtype=np.float64)\narr3 = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]], dtype=complex)\narr4 = np.array([[1,2],[3,4],[5,6]])\narrStr = np.array([1, 2, 3, 4], dtype='S')                             #array with data type string\narrFloat = np.array([1.1, 2.1, 3.1])\n\n\nx = arr[0]\nx = arr[0, 1]\nx = arr[1:5:2]                                                          #[start:end:step]\nx = arr.dtype\nx = arrFloat.astype(int)                                                #Change data type from float to integer\nx = arrFloat.astype(bool)                                               #float to boolean\n\n\nx = arr.ndim\nx = arr.itemsize                                                        # itemsize is 4 bytes\nx = arr.size                                                            # total bunber of elements\nx = arr.shape                                                           \nx = arr4.reshape(2,3)                                                   # information of dimension\nx = arr4.ravel()\nx = arr4.min() \nx = arr4.max() \nx = arr4.sum()  \nx = arr.sum(axis=0)\n\nnewarr = np.concatenate((arr, arr2), axis=1)                            #join array\nnewarr = np.stack((arr, arr2), axis=1)                                  #join array using stack\nnewarr = np.hstack((arr, arr2))                                         #join array along rows\nnewarr = np.vstack((arr, arr2))                                         #join array along colom\n\nnewarr = np.array_split(arr, 3, axis=0)                                #Splitting breaks one array into multiple.\nx = np.where(arr == 7)                                                 #Find the indexes where the value is 7.\nx = np.searchsorted(arr, 7)\nx = np.sort(arr)\n\nx = np.sqrt(arr)  \nx = np.std(arr)                                                         #standard deviation\nx = arr + arr2  \nx = arr.dot(arr4) \n`.trim()\n\nconst zeros = `\nx = np.zeros((3,4))\nx = np.ones((3,4))\nx = np.arange(1, 5, 2)                                                  # 2 steps\nx = np.linspace(1, 5, 50)                                               # start, stop, num\n\nprint(x)\n`.trim()\n\n\nconst numpy = `import numpy as np\nar = np.array([1, 3, 2, 4, 5, 6])\nprint(ar.argsort()[-3:][::-1])\n`.trim()\n\nconst Copy = `\n#Copy\narr = np.array([1, 2, 3])\narrCopy = arr.copy()\narr[0] = 42\n\nprint(arr)\nprint(arrCopy)\n\n\n#View\narr = np.array([1, 2, 3])\narrView = arr.view()\narr[0] = 42\n\nprint(arr)\nprint(arrView)\n`.trim()\n\nconst iterating = `\narr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\n\nfor x in arr:\n  print(x)\n`.trim()\n\n// const Series = ``.trim()\n\n// const Series = ``.trim()\n\n\n\nclass Numpys extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Different forms of data</h3>\n              <ul>\n                <li>Tabular/ spreadsheet-like data in which each column may be a different type (string, numeric, date, etc). </li>\n                <li>Multiple tables of data interrelated by key columns (primary/ foreign keys for a SQL user).</li>\n              </ul>\n              <b>A large percentage of datasets can be transformed into a structured form that is more suitable for analysis and modeling.</b>\n              <br />\n\n              <h3>NumPy</h3>\n              Benifits of numpy over python list.\n              <ul>\n                <li>Fast.</li>\n                <li>Less Memory.</li>\n                <li>NumPy create a N-dimensional array in python.</li>\n                <li>Used for working with arrays.</li>\n                <li>It also has functions for working in domain of linear algebra, fourier transform, and matrices.</li>\n                <li>NumPy aims to provide an array object that is up to 50x faster than traditional Python lists.</li>\n                <li>NumPy Data Types is Objects</li>\n                <li>It internally stores data in a contiguous block of memory, independent of other built-in Python objects.</li>\n              </ul>\n              <br />\n              <img src={gradient} alt=\"gradient\" className=\"responsive\" style={redesign} />\n              <br />\n\n              <h3>Data Types</h3>\n              <ul>\n                <li><b>i: </b>integer</li>\n                <li><b>b: </b>boolean</li>\n                <li><b>u: </b>unsigned integer</li>\n                <li><b>f: </b>float</li>\n                <li><b>c: </b>complex float</li>\n                <li><b>m: </b>timedelta</li>\n                <li><b>M: </b>datetime</li>\n                <li><b>O: </b>object</li>\n                <li><b>S: </b>string</li>\n                <li><b>U: </b>unicode string</li>\n                <li><b>V: </b>fixed chunk of memory for other type ( void )</li>\n              </ul>\n              <br />\n\n              <h3>Create a NumPy ndarray Object</h3>\n              <ul>\n                <li>The array object in NumPy is called ndarray.</li>\n                <li>An array can have any number of dimensions.</li>\n                <li>When the array is created, you can define the number of dimensions by using the ndmin argument.</li>\n                <b>arr = np.array([1, 2, 3, 4], ndmin=5)</b>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={ndarray}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>zeros</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={zeros}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Write a code to get the indices of N maximum values from a NumPy array.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={numpy}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>The Difference Between Copy and View</h3>\n              Copy is a new array, and the view is just a view of the original array.\n              <div style={titles}>\n                <PrismCode\n                  code={Copy}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Iterating</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={iterating}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Functions:</b>\n              <ul>\n                <li><b>ndim: </b>Return how many dimensions the array have.</li>\n                <li><b>ravel(): </b>Used to change a 2-dimensional array or a multi-dimensional array into a contiguous flattened array\n                  (1D array with all the input-array elements and with the same type as it. ravel() return new array.</li>\n                <li><b>arr.reshape(4, 3): </b>Reshape From 1-D to 2-D.</li>\n                <li><b>arr[0]: </b>Array indexing to access an array element.</li>\n                <li><b>dtype: </b>Returns the data type of the array.</li>\n                <li><b>arr.shape: </b>Returns a tuple with each index having the number of corresponding elements.</li>\n                <li><b>Stack: </b>Stacking is same as concatenation, the only difference is that stacking is done along a new axis.</li>\n                <li><b>np.hstack((arr1, arr2)): </b>To stack along rows.</li>\n                <li><b>np.vstack((arr1, arr2)): </b>To stack along columns.</li>\n                <li><b>np.dstack((arr1, arr2)): </b>To stack along height, which is the same as depth.</li>\n                <li><b>np.where(arr == 4): </b>Search an array for a certain value, and return the indexes that get a match.</li>\n                <li><b>np.searchsorted(arr, 7, side='right'): </b>Performs a binary search in the array, and returns the index where the specified\n                  value would be inserted to maintain the search order.</li>\n                <li><b>np.linspace(1, 5, 50): </b>Is Linear list space. Returns evenly separated values over a specified period. The system implicitly\n                  calculates the step size.</li>\n\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={pyFuns}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid >\n    )\n  }\n}\n\nexport default (withStyles(styles)(Numpys));\n"]},"metadata":{},"sourceType":"module"}