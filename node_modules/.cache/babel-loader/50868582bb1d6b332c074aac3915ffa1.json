{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/nodeJs/nodeDeep/search_pagination.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst commentsModel = `\nconst CommentSchema  = new Schems({\n  comment:{ type:String, trim: true },\n  author:{ type: mongoose.Schema.Types.ObjectId, required:true, ref:'User' },\n  postId:{ type: mongoose.Schema.Types.ObjectId, required:true, ref:'Post' },\n  createdAt:{ type: Date, default: Date.now }\n});\n\nconst Comment = mongoose.model('Comment', CommentSchema);\nmodule.exports = Comment;\n`.trim();\nconst postModel = `\nconst PostSchema  = new Schems({\n  title:{ type:String, unique:true, required: true, trim: true },\n  description:{ type: String, required:true, trim: true },\n  author:{ type: mongoose.Schema.Types.ObjectId, required:true, ref:'User' },\n  createdAt:{ type: Date, default: Date.now }\n});\n\nPostSchema.virtual('comments', {\n  ref: 'Comment',\n  localField: '_id',\n  foreignField: 'postId'\n})\n\nconst Post = mongoose.model('Post', PostSchema);\nmodule.exports = Post;\n`.trim();\nconst userModel = `\nconst validator = require('validator')\nconst bcrypt    = require('bcryptjs')\nconst jwt       = require('jsonwebtoken')\nconst Post      = require('./post')\n\nconst UserSchema  = Schems({\n    name:{ type: String, required: true, trim: true },\n    age:{ type: Number, default: 0,\n        validate(value){\n            if(value < 0){\n                throw new Error('Age must be a positive number')\n            }\n        }\n    },\n    email:{ type: String, required: true, unique:true, trim: true,\n        validate(value){\n            if(!validator.isEmail(value)){\n                throw new Error('Email is invalid!')\n            }\n        }\n    },\n    password:{ type:String, required:true, trim:true, minlength: 7,\n        validate(value){\n            if(validator.isEmpty(value)){\n                throw new Error('Please enter your password!')\n            }else if(validator.equals(value.toLowerCase(),\"password\")){\n                throw new Error('Password is invalid!')\n            }else if(validator.contains(value.toLowerCase(), \"password\")){\n                throw new Error('Password should not contain password!')\n            }\n        }\n    },\n    tokens:[{\n        token:{ type:String, required: true }\n    }],\n    createdAt:{ type: Date, default: Date.now }\n});\n\nUserSchema.virtual('posts', {\n    ref: 'Post',\n    localField: '_id',\n    foreignField: 'author'\n})\n\n\n\n\nUserSchema.statics.checkValidCredentials = async (email, password) => {\n    const user = await User.findOne({email})\n\n    if(!user){\n        throw new Error('Unable to login 2')\n    }\n    const isMatch = await bcrypt.compare(password,user.password)\n\n    if(!isMatch){\n        throw new Error('Unable to login 2')\n    }\n\n    return user\n}\n\nUserSchema.methods.newAuthToken = async function(){\n    const user  = this\n    const token =  jwt.sign({ _id: user.id.toString()}, \"thisiskey\")\n    user.tokens = user.tokens.concat({ token })\n    await user.save()\n    return token\n}\n\nUserSchema.methods.toJSON = function(){\n    const user = this\n    const userObj = user.toObject()\n\n    delete userObj.password\n    delete userObj.tokens\n\n    return userObj\n}\n\n//hash the plain text password before saving\nUserSchema.pre('save', async function(next){\n    const user = this\n    if(user.isModified('password')){\n        user.password = await bcrypt.hash(user.password, 8)\n    }\n    next()\n})\n\nUserSchema.pre('remove', async function(next){\n    const user = this\n    await Post.deleteMany({author: user._id})\n    next()\n})\n\nconst User = mongoose.model('User', UserSchema);\nmodule.exports = User;`.trim();\nconst middleware = `\nconst jwt  = require('jsonwebtoken')\nconst User = require('../models/user')\n\nconst auth = async (req,res,next) => {\n    try {\n        const token = req.header('Authorization').replace('Bearer', '').trim()\n        const decoded  =  jwt.verify(token, \"thisiskey\")\n        const user  = await User.findOne({ _id:decoded._id, 'tokens.token': token})\n\n        if(!user){\n            throw new Error()\n        }\n        req.token = token\n        req.user = user\n        next()\n    } catch (error) {\n        console.log(error)\n        res.status(401).send({error:'Please authenticate!'})\n    }\n}\n\nmodule.exports = auth;\n`.trim();\nconst userRoutes = `\nconst Post          = require('../models/post')\nconst Comment       = require('../models/comment')\nconst {ObjectID}    = require('mongodb')\nconst  authenticate = require('../middleware/auth')\n\nrouter.post('/posts',authenticate, async (req,res) => {\n    const post =  new Post({\n        ...req.body,\n        author: req.user._id\n    })\n    try {\n        await post.save()\n        res.status(201).send(post)\n    } catch (error) {\n        res.status(400).send(error)\n    }\n})\n\nrouter.get('/posts',async (req,res) => {\n    try {\n        const posts = await Post.find({})\n        res.send(posts)\n    } catch (error) {\n        res.status(500).send()\n    }\n})\n\nrouter.get('/posts/:id',authenticate, async (req,res) => {\n    const _id =  req.params.id\n    if (!ObjectID.isValid(_id)) {\n        return res.status(404).send();\n    }\n    try {\n        const post = await Post.findOne({ _id, author: req.user._id })\n        if(!post){\n            return res.status(404).send()\n        }\n        res.send(post);\n    } catch (error) {\n        res.status(500).send()\n    }\n})\n\nrouter.post('/posts/:id/comment',authenticate, async (req,res) => {   \n    const _id = req.params.id\n    const userid = req.user._id\n\n    if (!ObjectID.isValid(_id)) {\n        return res.status(404).send();\n    }\n\n    if (!ObjectID.isValid(userid)) {\n        return res.status(404).send();\n    }\n\n    const comment = new Comment({\n        ...req.body,\n        author: userid,\n        postId: _id\n    })\n\n    try {\n        await comment.save()\n        res.status(201).send(comment)\n    } catch (error) {\n        res.status(400).send(error)\n    }\n\n})\n\n//get all the comments related to the post\nrouter.get('/posts/:id/comment', async (req,res) => {\n    try {\n        const post = await Post.findOne({_id: req.params.id})\n        await post.populate('comments').execPopulate()\n        res.send(post.comments)\n    } catch (error) {\n        res.status(500).send()\n    }\n})\n\nrouter.patch('/posts/:id',authenticate, async (req, res) => {\n    const _id = req.params.id\n    const updates = Object.keys(req.body);\n    const allowedUpdates = [\"description\", \"title\"]\n    const isValidOperation  = updates.every((update) => allowedUpdates.includes(update))\n    if(!isValidOperation){\n        res.status(400).send({error:'Invalid updates'})\n    }\n    if (!ObjectID.isValid(_id)) {\n        res.status(404).send();\n    }\n    try {\n        const post = await Post.findOne({_id: req.params.id, author:req.user._id})\n        \n       if(!post){\n        res.status(404).send();\n       }\n\n       updates.forEach((update) => post[update] = req.body[update])\n       await post.save()\n\n       res.send(post);\n    } catch (error) {\n        res.status(400).send();\n    }\n})\n\nrouter.delete('/posts/:id', authenticate,async (req,res) => {\n    const _id = req.params.id\n    if (!ObjectID.isValid(_id)) {\n        return res.status(404).send();\n    }\n    try {\n        const deletepost = await Post.findOneAndDelete({_id:_id, author: req.user._id})\n        if (!deletepost) {\n            return res.status(404).send();\n        }\n        res.send(deletepost)\n    } catch (error) {\n        res.status(500).send()\n    }\n})\n\nmodule.exports = router;`.trim();\nconst postRoutes = `\nconst User = require('../models/user')\nconst {ObjectID} = require('mongodb')\n\nconst authenticate  = require('../middleware/auth')\n\nrouter.post('/users', async (req,res) => {\n    const user = new User(req.body);\n    try{\n        const token = await user.newAuthToken()\n        res.status(201).send({user, token})\n    }catch(e){\n        res.status(400).send(e)\n    }\n})\n\nrouter.get('/users/me', authenticate ,async (req,res)=> {\n   res.send(req.user)\n})\n\n\nrouter.patch('/users/me',authenticate ,async (req,res) => {\n    const updates  = Object.keys(req.body)\n    const allowedUpdates = [\"name\", \"email\", \"password\", \"age\"]\n    const isValidOperation = updates.every((update) => allowedUpdates.includes(update))\n    const _id =  req.user._id\n\n    if(!isValidOperation){\n        res.status(400).send({error:'Invalid request'})\n    }\n\n    if (!ObjectID.isValid(_id)) {\n        return res.status(404).send();\n    }\n\n    try {        \n        updates.forEach((update) => req.user[update] = req.body[update]) \n        await req.user.save()\n        res.send(req.user);\n    } catch (error) {\n        res.status(400).send()\n    }\n\n})\n\nrouter.delete('/users/me', authenticate, async (req,res) => {\n    if (!ObjectID.isValid(req.user._id)) {\n        return res.status(404).send();\n    }\n\n    try {\n        await req.user.remove()\n        res.send(req.user)\n    } catch (error) {\n        res.status(500).send()\n    }\n})\n\nrouter.post('/users/login', async (req, res) => {\n    try {\n        const user  = await User.checkValidCredentials(req.body.email, req.body.password)\n        const token = await user.newAuthToken()\n        console.log(user,token)\n        res.send({ user, token})\n    } catch (error) {\n        console.log(error);\n        res.status(400).send({error})        \n    }\n})\n\nrouter.post('/users/logout', authenticate, async (req, res) => {\n    try {\n        req.user.tokens = req.user.tokens.filter((token) =>{\n         return token.token !== req.token \n        })\n        await req.user.save()\n        res.send()\n    } catch (error) {\n        res.status(500).send()\n    }\n})\n\n\nrouter.post('/users/logoutall', authenticate, async (req, res) => {\n    try {\n        req.user.tokens = []\n        await req.user.save()\n        res.send()\n    } catch (error) {\n        res.status(500).send()\n    }\n})\n\nmodule.exports = router;`.trim();\nconst server = `\nconst dbCon = require('./db/db');\nconst userRoutes = require('./router/user')\nconst PostRoutes = require('./router/post')\n\napp.use(\"/items\",userRoutes)\napp.use(\"/items\",PostRoutes)\n`.trim();\nconst postman = `\n{\n\t\"info\": {\n\t\t\"_postman_id\": \"2adff8c6-a833-4fdd-8846-929dea464969\",\n\t\t\"name\": \"NodejsAuth\",\n\t\t\"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n\t},\n\t\"item\": [\n\t\t{\n\t\t\t\"name\": \"Create Users\",\n\t\t\t\"request\": {\n\t\t\t\t\"auth\": {\n\t\t\t\t\t\"type\": \"noauth\"\n\t\t\t\t},\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n\\t\\\"name\\\":\\\"qwerty\\\",\\n\\t\\\"age\\\":40,\\n\\t\\\"email\\\":\\\"dummy1222@gmail.com\\\",\\n\\t\\\"password\\\":\\\"12345678\\\"\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/users\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"users\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Create Post\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n\\t\\\"title\\\":\\\"Nodejs blog12\\\",\\n\\t\\\"description\\\":\\\"this is new blog on nodejs\\\"\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/posts\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"posts\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Read Profile\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/users/me\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"users\",\n\t\t\t\t\t\t\"me\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Read Single Post\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/posts/5ca765dcde6cdb0017d34fd2\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"posts\",\n\t\t\t\t\t\t\"5ca765dcde6cdb0017d34fd2\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Comment on single post\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n\\t\\\"comment\\\":\\\"Nice article\\\"\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/posts/5ca765dcde6cdb0017d34fd2/comment\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"posts\",\n\t\t\t\t\t\t\"5ca765dcde6cdb0017d34fd2\",\n\t\t\t\t\t\t\"comment\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Fecth comment on single post\",\n\t\t\t\"protocolProfileBehavior\": {\n\t\t\t\t\"disableBodyPruning\": true\n\t\t\t},\n\t\t\t\"request\": {\n\t\t\t\t\"auth\": {\n\t\t\t\t\t\"type\": \"noauth\"\n\t\t\t\t},\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n\\t\\\"comment\\\":\\\"Nice article\\\"\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/posts/5ca765dcde6cdb0017d34fd2/comment\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"posts\",\n\t\t\t\t\t\t\"5ca765dcde6cdb0017d34fd2\",\n\t\t\t\t\t\t\"comment\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Read Posts\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/posts\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"posts\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Update user\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"PATCH\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n  \\\"name\\\": \\\"dummy12\\\",\\n  \\\"password\\\":\\\"1234567890\\\"\\n\\t\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/users/me\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"users\",\n\t\t\t\t\t\t\"me\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Update Post\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"PATCH\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n  \\\"title\\\":\\\"dummy blog\\\",\\n  \\\"description\\\":\\\"this is the first post\\\"\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/posts/5ca733287c6a7fe6b373c0d6\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"posts\",\n\t\t\t\t\t\t\"5ca733287c6a7fe6b373c0d6\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Delete User\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"DELETE\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n  \\\"description\\\":\\\"goto  sleep\\\",\\n  \\\"completed\\\":false\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/users/me\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"users\",\n\t\t\t\t\t\t\"me\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Delete Post\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"DELETE\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/posts/5ca733287c6a7fe6b373c0d6\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"posts\",\n\t\t\t\t\t\t\"5ca733287c6a7fe6b373c0d6\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"User Login\",\n\t\t\t\"event\": [\n\t\t\t\t{\n\t\t\t\t\t\"listen\": \"test\",\n\t\t\t\t\t\"script\": {\n\t\t\t\t\t\t\"id\": \"0e178f47-3f34-456f-b738-ca330497c1f3\",\n\t\t\t\t\t\t\"exec\": [\n\t\t\t\t\t\t\t\"if(pm.response.code === 200 ){\",\n\t\t\t\t\t\t\t\"    pm.environment.set('authtoken', pm.response.json().token)\",\n\t\t\t\t\t\t\t\"}\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"type\": \"text/javascript\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"request\": {\n\t\t\t\t\"auth\": {\n\t\t\t\t\t\"type\": \"noauth\"\n\t\t\t\t},\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n \\\"email\\\":\\\"dummy1222@gmail.com\\\",\\n \\\"password\\\":\\\"12345678\\\"\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/users/login\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"users\",\n\t\t\t\t\t\t\"login\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Logout \",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/users/logout\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"users\",\n\t\t\t\t\t\t\"logout\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Logout All\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/users/logout\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"users\",\n\t\t\t\t\t\t\"logout\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t}\n\t],\n\t\"auth\": {\n\t\t\"type\": \"bearer\",\n\t\t\"bearer\": [\n\t\t\t{\n\t\t\t\t\"key\": \"token\",\n\t\t\t\t\"value\": \"{{authtoken}}\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t]\n\t},\n\t\"event\": [\n\t\t{\n\t\t\t\"listen\": \"prerequest\",\n\t\t\t\"script\": {\n\t\t\t\t\"id\": \"9c7ef4d3-64b2-49fe-b1db-65a8c6b26b1a\",\n\t\t\t\t\"type\": \"text/javascript\",\n\t\t\t\t\"exec\": [\n\t\t\t\t\t\"\"\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"listen\": \"test\",\n\t\t\t\"script\": {\n\t\t\t\t\"id\": \"5df7dc9c-9a59-4ceb-befc-6dcef99063dd\",\n\t\t\t\t\"type\": \"text/javascript\",\n\t\t\t\t\"exec\": [\n\t\t\t\t\t\"\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t]\n}`.trim();\n\nclass SearchPagination extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 865\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 866\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 867\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 868\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 868\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 871\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 872\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 873\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 874\n      },\n      __self: this\n    }, \"Search_Pagination_Sort\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 875\n      },\n      __self: this\n    }, \"middleware/auth.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 876\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: middleware,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 877\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 883\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 884\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 886\n      },\n      __self: this\n    }, \"models/commets.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 887\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: commentsModel,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 888\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 894\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 895\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 897\n      },\n      __self: this\n    }, \"models/post.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 898\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: postModel,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 899\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 905\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 906\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 908\n      },\n      __self: this\n    }, \"models/user.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 909\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: userModel,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 910\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 916\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 917\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 919\n      },\n      __self: this\n    }, \"router/post.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 920\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: userRoutes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 921\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 927\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 928\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 930\n      },\n      __self: this\n    }, \"router/user.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 931\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: postRoutes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 932\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 938\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 939\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 941\n      },\n      __self: this\n    }, \"server.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 942\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: server,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 943\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 949\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 950\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 952\n      },\n      __self: this\n    }, \"postman\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 953\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: postman,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 954\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(SearchPagination);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/nodeJs/nodeDeep/search_pagination.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","commentsModel","trim","postModel","userModel","middleware","userRoutes","postRoutes","server","postman","SearchPagination","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst commentsModel = `\nconst CommentSchema  = new Schems({\n  comment:{ type:String, trim: true },\n  author:{ type: mongoose.Schema.Types.ObjectId, required:true, ref:'User' },\n  postId:{ type: mongoose.Schema.Types.ObjectId, required:true, ref:'Post' },\n  createdAt:{ type: Date, default: Date.now }\n});\n\nconst Comment = mongoose.model('Comment', CommentSchema);\nmodule.exports = Comment;\n`.trim();\n\nconst postModel = `\nconst PostSchema  = new Schems({\n  title:{ type:String, unique:true, required: true, trim: true },\n  description:{ type: String, required:true, trim: true },\n  author:{ type: mongoose.Schema.Types.ObjectId, required:true, ref:'User' },\n  createdAt:{ type: Date, default: Date.now }\n});\n\nPostSchema.virtual('comments', {\n  ref: 'Comment',\n  localField: '_id',\n  foreignField: 'postId'\n})\n\nconst Post = mongoose.model('Post', PostSchema);\nmodule.exports = Post;\n`.trim();\n\nconst userModel = `\nconst validator = require('validator')\nconst bcrypt    = require('bcryptjs')\nconst jwt       = require('jsonwebtoken')\nconst Post      = require('./post')\n\nconst UserSchema  = Schems({\n    name:{ type: String, required: true, trim: true },\n    age:{ type: Number, default: 0,\n        validate(value){\n            if(value < 0){\n                throw new Error('Age must be a positive number')\n            }\n        }\n    },\n    email:{ type: String, required: true, unique:true, trim: true,\n        validate(value){\n            if(!validator.isEmail(value)){\n                throw new Error('Email is invalid!')\n            }\n        }\n    },\n    password:{ type:String, required:true, trim:true, minlength: 7,\n        validate(value){\n            if(validator.isEmpty(value)){\n                throw new Error('Please enter your password!')\n            }else if(validator.equals(value.toLowerCase(),\"password\")){\n                throw new Error('Password is invalid!')\n            }else if(validator.contains(value.toLowerCase(), \"password\")){\n                throw new Error('Password should not contain password!')\n            }\n        }\n    },\n    tokens:[{\n        token:{ type:String, required: true }\n    }],\n    createdAt:{ type: Date, default: Date.now }\n});\n\nUserSchema.virtual('posts', {\n    ref: 'Post',\n    localField: '_id',\n    foreignField: 'author'\n})\n\n\n\n\nUserSchema.statics.checkValidCredentials = async (email, password) => {\n    const user = await User.findOne({email})\n\n    if(!user){\n        throw new Error('Unable to login 2')\n    }\n    const isMatch = await bcrypt.compare(password,user.password)\n\n    if(!isMatch){\n        throw new Error('Unable to login 2')\n    }\n\n    return user\n}\n\nUserSchema.methods.newAuthToken = async function(){\n    const user  = this\n    const token =  jwt.sign({ _id: user.id.toString()}, \"thisiskey\")\n    user.tokens = user.tokens.concat({ token })\n    await user.save()\n    return token\n}\n\nUserSchema.methods.toJSON = function(){\n    const user = this\n    const userObj = user.toObject()\n\n    delete userObj.password\n    delete userObj.tokens\n\n    return userObj\n}\n\n//hash the plain text password before saving\nUserSchema.pre('save', async function(next){\n    const user = this\n    if(user.isModified('password')){\n        user.password = await bcrypt.hash(user.password, 8)\n    }\n    next()\n})\n\nUserSchema.pre('remove', async function(next){\n    const user = this\n    await Post.deleteMany({author: user._id})\n    next()\n})\n\nconst User = mongoose.model('User', UserSchema);\nmodule.exports = User;`.trim();\n\nconst middleware = `\nconst jwt  = require('jsonwebtoken')\nconst User = require('../models/user')\n\nconst auth = async (req,res,next) => {\n    try {\n        const token = req.header('Authorization').replace('Bearer', '').trim()\n        const decoded  =  jwt.verify(token, \"thisiskey\")\n        const user  = await User.findOne({ _id:decoded._id, 'tokens.token': token})\n\n        if(!user){\n            throw new Error()\n        }\n        req.token = token\n        req.user = user\n        next()\n    } catch (error) {\n        console.log(error)\n        res.status(401).send({error:'Please authenticate!'})\n    }\n}\n\nmodule.exports = auth;\n`.trim();\n\nconst userRoutes = `\nconst Post          = require('../models/post')\nconst Comment       = require('../models/comment')\nconst {ObjectID}    = require('mongodb')\nconst  authenticate = require('../middleware/auth')\n\nrouter.post('/posts',authenticate, async (req,res) => {\n    const post =  new Post({\n        ...req.body,\n        author: req.user._id\n    })\n    try {\n        await post.save()\n        res.status(201).send(post)\n    } catch (error) {\n        res.status(400).send(error)\n    }\n})\n\nrouter.get('/posts',async (req,res) => {\n    try {\n        const posts = await Post.find({})\n        res.send(posts)\n    } catch (error) {\n        res.status(500).send()\n    }\n})\n\nrouter.get('/posts/:id',authenticate, async (req,res) => {\n    const _id =  req.params.id\n    if (!ObjectID.isValid(_id)) {\n        return res.status(404).send();\n    }\n    try {\n        const post = await Post.findOne({ _id, author: req.user._id })\n        if(!post){\n            return res.status(404).send()\n        }\n        res.send(post);\n    } catch (error) {\n        res.status(500).send()\n    }\n})\n\nrouter.post('/posts/:id/comment',authenticate, async (req,res) => {   \n    const _id = req.params.id\n    const userid = req.user._id\n\n    if (!ObjectID.isValid(_id)) {\n        return res.status(404).send();\n    }\n\n    if (!ObjectID.isValid(userid)) {\n        return res.status(404).send();\n    }\n\n    const comment = new Comment({\n        ...req.body,\n        author: userid,\n        postId: _id\n    })\n\n    try {\n        await comment.save()\n        res.status(201).send(comment)\n    } catch (error) {\n        res.status(400).send(error)\n    }\n\n})\n\n//get all the comments related to the post\nrouter.get('/posts/:id/comment', async (req,res) => {\n    try {\n        const post = await Post.findOne({_id: req.params.id})\n        await post.populate('comments').execPopulate()\n        res.send(post.comments)\n    } catch (error) {\n        res.status(500).send()\n    }\n})\n\nrouter.patch('/posts/:id',authenticate, async (req, res) => {\n    const _id = req.params.id\n    const updates = Object.keys(req.body);\n    const allowedUpdates = [\"description\", \"title\"]\n    const isValidOperation  = updates.every((update) => allowedUpdates.includes(update))\n    if(!isValidOperation){\n        res.status(400).send({error:'Invalid updates'})\n    }\n    if (!ObjectID.isValid(_id)) {\n        res.status(404).send();\n    }\n    try {\n        const post = await Post.findOne({_id: req.params.id, author:req.user._id})\n        \n       if(!post){\n        res.status(404).send();\n       }\n\n       updates.forEach((update) => post[update] = req.body[update])\n       await post.save()\n\n       res.send(post);\n    } catch (error) {\n        res.status(400).send();\n    }\n})\n\nrouter.delete('/posts/:id', authenticate,async (req,res) => {\n    const _id = req.params.id\n    if (!ObjectID.isValid(_id)) {\n        return res.status(404).send();\n    }\n    try {\n        const deletepost = await Post.findOneAndDelete({_id:_id, author: req.user._id})\n        if (!deletepost) {\n            return res.status(404).send();\n        }\n        res.send(deletepost)\n    } catch (error) {\n        res.status(500).send()\n    }\n})\n\nmodule.exports = router;`.trim();\n\nconst postRoutes = `\nconst User = require('../models/user')\nconst {ObjectID} = require('mongodb')\n\nconst authenticate  = require('../middleware/auth')\n\nrouter.post('/users', async (req,res) => {\n    const user = new User(req.body);\n    try{\n        const token = await user.newAuthToken()\n        res.status(201).send({user, token})\n    }catch(e){\n        res.status(400).send(e)\n    }\n})\n\nrouter.get('/users/me', authenticate ,async (req,res)=> {\n   res.send(req.user)\n})\n\n\nrouter.patch('/users/me',authenticate ,async (req,res) => {\n    const updates  = Object.keys(req.body)\n    const allowedUpdates = [\"name\", \"email\", \"password\", \"age\"]\n    const isValidOperation = updates.every((update) => allowedUpdates.includes(update))\n    const _id =  req.user._id\n\n    if(!isValidOperation){\n        res.status(400).send({error:'Invalid request'})\n    }\n\n    if (!ObjectID.isValid(_id)) {\n        return res.status(404).send();\n    }\n\n    try {        \n        updates.forEach((update) => req.user[update] = req.body[update]) \n        await req.user.save()\n        res.send(req.user);\n    } catch (error) {\n        res.status(400).send()\n    }\n\n})\n\nrouter.delete('/users/me', authenticate, async (req,res) => {\n    if (!ObjectID.isValid(req.user._id)) {\n        return res.status(404).send();\n    }\n\n    try {\n        await req.user.remove()\n        res.send(req.user)\n    } catch (error) {\n        res.status(500).send()\n    }\n})\n\nrouter.post('/users/login', async (req, res) => {\n    try {\n        const user  = await User.checkValidCredentials(req.body.email, req.body.password)\n        const token = await user.newAuthToken()\n        console.log(user,token)\n        res.send({ user, token})\n    } catch (error) {\n        console.log(error);\n        res.status(400).send({error})        \n    }\n})\n\nrouter.post('/users/logout', authenticate, async (req, res) => {\n    try {\n        req.user.tokens = req.user.tokens.filter((token) =>{\n         return token.token !== req.token \n        })\n        await req.user.save()\n        res.send()\n    } catch (error) {\n        res.status(500).send()\n    }\n})\n\n\nrouter.post('/users/logoutall', authenticate, async (req, res) => {\n    try {\n        req.user.tokens = []\n        await req.user.save()\n        res.send()\n    } catch (error) {\n        res.status(500).send()\n    }\n})\n\nmodule.exports = router;`.trim();\n\nconst server = `\nconst dbCon = require('./db/db');\nconst userRoutes = require('./router/user')\nconst PostRoutes = require('./router/post')\n\napp.use(\"/items\",userRoutes)\napp.use(\"/items\",PostRoutes)\n`.trim();\n\nconst postman = `\n{\n\t\"info\": {\n\t\t\"_postman_id\": \"2adff8c6-a833-4fdd-8846-929dea464969\",\n\t\t\"name\": \"NodejsAuth\",\n\t\t\"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n\t},\n\t\"item\": [\n\t\t{\n\t\t\t\"name\": \"Create Users\",\n\t\t\t\"request\": {\n\t\t\t\t\"auth\": {\n\t\t\t\t\t\"type\": \"noauth\"\n\t\t\t\t},\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n\\t\\\"name\\\":\\\"qwerty\\\",\\n\\t\\\"age\\\":40,\\n\\t\\\"email\\\":\\\"dummy1222@gmail.com\\\",\\n\\t\\\"password\\\":\\\"12345678\\\"\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/users\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"users\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Create Post\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n\\t\\\"title\\\":\\\"Nodejs blog12\\\",\\n\\t\\\"description\\\":\\\"this is new blog on nodejs\\\"\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/posts\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"posts\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Read Profile\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/users/me\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"users\",\n\t\t\t\t\t\t\"me\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Read Single Post\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/posts/5ca765dcde6cdb0017d34fd2\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"posts\",\n\t\t\t\t\t\t\"5ca765dcde6cdb0017d34fd2\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Comment on single post\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n\\t\\\"comment\\\":\\\"Nice article\\\"\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/posts/5ca765dcde6cdb0017d34fd2/comment\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"posts\",\n\t\t\t\t\t\t\"5ca765dcde6cdb0017d34fd2\",\n\t\t\t\t\t\t\"comment\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Fecth comment on single post\",\n\t\t\t\"protocolProfileBehavior\": {\n\t\t\t\t\"disableBodyPruning\": true\n\t\t\t},\n\t\t\t\"request\": {\n\t\t\t\t\"auth\": {\n\t\t\t\t\t\"type\": \"noauth\"\n\t\t\t\t},\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n\\t\\\"comment\\\":\\\"Nice article\\\"\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/posts/5ca765dcde6cdb0017d34fd2/comment\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"posts\",\n\t\t\t\t\t\t\"5ca765dcde6cdb0017d34fd2\",\n\t\t\t\t\t\t\"comment\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Read Posts\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/posts\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"posts\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Update user\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"PATCH\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n  \\\"name\\\": \\\"dummy12\\\",\\n  \\\"password\\\":\\\"1234567890\\\"\\n\\t\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/users/me\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"users\",\n\t\t\t\t\t\t\"me\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Update Post\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"PATCH\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n  \\\"title\\\":\\\"dummy blog\\\",\\n  \\\"description\\\":\\\"this is the first post\\\"\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/posts/5ca733287c6a7fe6b373c0d6\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"posts\",\n\t\t\t\t\t\t\"5ca733287c6a7fe6b373c0d6\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Delete User\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"DELETE\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n  \\\"description\\\":\\\"goto  sleep\\\",\\n  \\\"completed\\\":false\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/users/me\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"users\",\n\t\t\t\t\t\t\"me\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Delete Post\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"DELETE\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/posts/5ca733287c6a7fe6b373c0d6\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"posts\",\n\t\t\t\t\t\t\"5ca733287c6a7fe6b373c0d6\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"User Login\",\n\t\t\t\"event\": [\n\t\t\t\t{\n\t\t\t\t\t\"listen\": \"test\",\n\t\t\t\t\t\"script\": {\n\t\t\t\t\t\t\"id\": \"0e178f47-3f34-456f-b738-ca330497c1f3\",\n\t\t\t\t\t\t\"exec\": [\n\t\t\t\t\t\t\t\"if(pm.response.code === 200 ){\",\n\t\t\t\t\t\t\t\"    pm.environment.set('authtoken', pm.response.json().token)\",\n\t\t\t\t\t\t\t\"}\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"type\": \"text/javascript\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"request\": {\n\t\t\t\t\"auth\": {\n\t\t\t\t\t\"type\": \"noauth\"\n\t\t\t\t},\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n \\\"email\\\":\\\"dummy1222@gmail.com\\\",\\n \\\"password\\\":\\\"12345678\\\"\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/users/login\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"users\",\n\t\t\t\t\t\t\"login\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Logout \",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/users/logout\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"users\",\n\t\t\t\t\t\t\"logout\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Logout All\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/users/logout\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"users\",\n\t\t\t\t\t\t\"logout\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t}\n\t],\n\t\"auth\": {\n\t\t\"type\": \"bearer\",\n\t\t\"bearer\": [\n\t\t\t{\n\t\t\t\t\"key\": \"token\",\n\t\t\t\t\"value\": \"{{authtoken}}\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t]\n\t},\n\t\"event\": [\n\t\t{\n\t\t\t\"listen\": \"prerequest\",\n\t\t\t\"script\": {\n\t\t\t\t\"id\": \"9c7ef4d3-64b2-49fe-b1db-65a8c6b26b1a\",\n\t\t\t\t\"type\": \"text/javascript\",\n\t\t\t\t\"exec\": [\n\t\t\t\t\t\"\"\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"listen\": \"test\",\n\t\t\t\"script\": {\n\t\t\t\t\"id\": \"5df7dc9c-9a59-4ceb-befc-6dcef99063dd\",\n\t\t\t\t\"type\": \"text/javascript\",\n\t\t\t\t\"exec\": [\n\t\t\t\t\t\"\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t]\n}`.trim();\n\n\nclass SearchPagination extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Search_Pagination_Sort</h3>\n              <b>middleware/auth.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={middleware}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>models/commets.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={commentsModel}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>models/post.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={postModel}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>models/user.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={userModel}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>router/post.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={userRoutes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>router/user.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={postRoutes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>server.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={server}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>postman</b>\n              <div style={titles}>\n                <PrismCode\n                  code={postman}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(SearchPagination));\n"]},"metadata":{},"sourceType":"module"}