{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var code=\"\".trim();var WeakMaps=\"\\nconst privates = new WeakMap();\\n\\nfunction Public() {\\n  const me = {\\n    // Private data goes here\\n  };\\n  privates.set(this, me);\\n}\\n\\nPublic.prototype.method = function () {\\n  const me = privates.get(this);\\n  // Do stuff with private data in me...\\n};\\n\\nmodule.exports = Public;\".trim();var sets=\"\\nlet mySet = new Set();\\nmySet.add(1);\\nmySet.add('some text');\\nmySet.add('foo');\\n\\nmySet.has(1);                                                                               // true\\nmySet.delete('foo');\\nmySet.size;                                                                                 // 2\\n\\nfor (let item of mySet) \\nconsole.log(item);\".trim();var setsAdv=\"\\nSet.prototype.subSet = function(otherSet) { \\n  if(this.size > otherSet.size) \\n      return false; \\n  else { \\n      for(var elem of this) { \\n          if(!otherSet.has(elem)) \\n              return false; \\n      } \\n      return true; \\n  } \\n} \\n\\nvar setA = new Set([10, 20, 30]); \\nvar setB = new Set([50, 60, 10, 20, 30, 40]); \\nvar setC = new Set([10, 30, 40, 50]); \\n\\nconsole.log(setA.subSet(setB)); \\nconsole.log(setA.subSet(setC)); \\nconsole.log(setC.subSet(setB));\".trim();var converting=\"\\nArray.from(mySet);\\n[...mySet2];\\n\\nmySet2 = new Set([1, 2, 3, 4]);\".trim();var attToSets=\"\\nlet myArray = [11,22,34,65,34,65,34];\\nlet mySet = new Set(myArray);\\n  mySet.add('100');\\n  mySet.add({a: 1, b: 2});\\n  mySet.delete(22);\\n\\nmySet.forEach(function(val){\\n  console.log(val);\\n});\".trim();var SetsToArr=\"\\nlet myArray = ['value1', 'value2', 'value3']\\n\\nlet mySet = new Set(myArray)\\nmySet.has('value1')     \\n\\nconsole.log([...mySet]) \".trim();var weakMap=\"\\nconst requests2 = new WeakSet();\\nclass Request2 {\\n    constructor() {\\n        requests.set(this, {\\n            created: new Date()\\n        });\\n    }\\n    \\n    makeRequest() {\\n        if (requestIsTooOld(this)) {\\n            throw new Error(\\\"Try again?\\\");\\n        }    // Do work...  \\n    }\\n}\".trim();var Stack=\"\\n  function postFixEvaluation(exp) {\\n  var stack = new Stack();\\n    for (var i = 0; i < exp.length; i++) {\\n      var c = exp[i];\\n      if (!isNaN(c))\\n        stack.push(c - '0');\\n        else {\\n          var val1 = stack.pop();\\n          var val2 = stack.pop();\\n      if (val1 == \\\"Underflow\\\" || val2 == \\\"Underflow\\\")\\n        return \\\"Can't perform postfix evaluation\\\";\\n        \\n    switch (c) {\\n        case '+':\\n          stack.push(val2 + val1);\\n        break;\\n        case '-':\\n          stack.push(val2 - val1);\\n        break;\\n        case '/':\\n          stack.push(val2 / val1);\\n        break;\\n        case '*':\\n          stack.push(val2 * val1);\\n        break;\\n      }\\n    }\\n  }\\n  return stack.pop();\\n}\\n\\nconsole.log(postFixEvaluation(\\\"235*+8-\\\"));\\n\\nconsole.log(postFixEvaluation(\\\"23*+\\\"));                       // returns postfix evaluation can't be performed.\\n\".trim();var arrayToClone=\"\\narrayToClone = [1, 2, 3, 4, 5];\\n clone1 = Array.from(arrayToClone); \\n clone2 = Array.of(...arrayToClone); \\n clone3 = [...arrayToClone] \\n  \\n   console.log(arrayToClone)\\n\\n\\n  var array1 = [1, 2]; \\n  var array2 = [3, 4, 5]; \\n  var array3 = [...array1, ...array2]                                             // Concatenating Arrays.\\n\\n  console.log(array3)\\n\\n  \\n//Multiple Arrays\\n   var array1 = [\\\"a\\\", \\\"b\\\"],\\n       array2 = [\\\"c\\\", \\\"d\\\"],    \\n       array3 = [\\\"e\\\", \\\"f\\\"],    \\n       array4 = [\\\"g\\\", \\\"h\\\"];\\n\\n       var arrConc = [...array1, ...array2, ...array3, ...array4]\\n\\n        console.log(arrConc)\\n\\n\\n//Without Copying the First Array\\n\\tvar longArray = [1, 2, 3, 4, 5, 6, 7, 8],    \\n\\t\\tshortArray = [9, 10]; \\n\\n\\t\\tlongArray.push(...shortArray)\\n\\t\\tconsole.log(longArray)\\n\\nshortArray.forEach(function (elem) {\\n    longArray.push(elem); \\n});\\n\\n\\nvar columns = [\\\"Date\\\", \\\"Number\\\", \\\"Size\\\", \\\"Location\\\", \\\"Age\\\"]; \\nvar rows = [\\\"2001\\\", \\\"5\\\", \\\"Big\\\", \\\"Sydney\\\", \\\"25\\\"]; \\nvar result =  rows.reduce(function(result, field, index) {\\n  result[columns[index]] = field;\\n    return result; \\n}, {})\\nconsole.log(result);\\n\\nvar a=[1, 2, 3, 4, 5].filter(value => value > 2);\\nconsole.log(a)\\n\\n\\n//filter\\nfunction startsWithLetterA(str) { \\n   if(str && str[0].toLowerCase() == 'a') {\\n           return true   \\n            }  \\n              return false;\\n               }\\nvar str = 'Since Boolean is a native javascript afunction/constructor that takes';\\nvar strArray = str.split(\\\" \\\");\\nvar wordsStartsWithA = strArray.filter(startsWithLetterA); \\n\\nconsole.log(wordsStartsWithA)\\n\".trim();var circular=\"\\nclass CircularBuffer {\\n  constructor(size) {\\n    this.memory = new Array(size);\\n    this.head = 0;\\n    this.tail = 0;\\n    this.isFull = false;\\n  }\\n  \\n  read() {\\n    if (this.tail === this.head && !this.isFull) {\\n      console.log('Nothing to read.');\\n    } else {\\n      this.tail = this.next(this.tail);\\n      this.isFull = false;\\n      return this.memory[this.tail];\\n    }\\n  }\\n  \\n  write(value) {\\n    if (this.isFull) {\\n      console.error('Buffer full');\\n      return;\\n    } else {\\n      this.head = this.next(this.head);\\n      this.memory[this.head] = value;\\n      if (this.head === this.tail) {\\n        this.isFull = true;\\n      }\\n    }\\n  }\\n  \\n  next(n) {\\n    var nxt = n + 1;\\n    if (nxt === this.memory.length) {\\n      return 0;\\n    } else {\\n      return nxt;\\n    }\\n  }\\n}\\n\\nvar buffer = new CircularBuffer(10);\\n\\ndocument.addEventListener('keydown', event => {\\n  buffer.write(event.key);\\n});\\n\\nvar readKeys = () => {\\n  console.log(buffer.read());\\n  setTimeout(readKeys, 500);\\n}\\n\\nreadKeys();\\n\".trim();var changing=\"\\nfunction reverse(head) {\\n  let node = head,\\n      previous,\\n      tmp;\\n\\n  while (node) {\\n    tmp = node.next;                                            // save next before we overwrite node.next!\\n    node.next = previous;                                       // reverse pointer\\n    previous = node;                                            // step forward in the list.\\n    node = tmp;\\n  }\\n\\n  return previous;\\n}\".trim();var KeyedCollections=/*#__PURE__*/function(_Component){_inherits(KeyedCollections,_Component);function KeyedCollections(){_classCallCheck(this,KeyedCollections);return _possibleConstructorReturn(this,_getPrototypeOf(KeyedCollections).apply(this,arguments));}_createClass(KeyedCollections,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1.Object and Map compared\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Objects have been used to map strings to values. Objects allow you to set keys to values, retrieve those values, delete keys, and detect whether something is stored at a key. Map objects, however, have a few more advantages that make them better maps.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"The keys of an Object are Strings or Symbols, where they can be of any value for a Map.\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"You can get the size of a Map easily, while you have to manually keep track of size for an Object.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"whether to use a Map or an Object:\"),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Use maps over objects when keys are unknown until run time, and when all keys are the same type and all values are the same type.\"),React.createElement(\"li\",null,\"Use maps if there is a need to store primitive values as keys because object treats each key as a string whether it's a number value, boolean value or any other primitive value.\"),React.createElement(\"li\",null,\"Use objects when there is logic that operates on individual elements.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2.WeakMap object\"),\"The WeakMap object is a collection of key/value pairs in which the keys are objects only and the values can be arbitrary values. The object references in the keys are held weakly, means they are a target of garbage collection (GC) if there is no other reference to the object anymore. The WeakMap API is the same as the Map API.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"One difference to Map objects is that WeakMap keys are not enumerable (i.e., there is no method giving you a list of the keys).\"),React.createElement(\"li\",null,\"One use case of WeakMap objects is to store private data for an object, or to hide implementation details. \")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:WeakMaps,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3.Sets\"),\"Set objects are collections of values. You can iterate its elements in insertion order. A value in a Set may only occur once, it is unique in the Set's collection.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Sets Methods:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"add(1)\"),React.createElement(\"li\",null,\"has(1)\"),React.createElement(\"li\",null,\"delete(5)\"),React.createElement(\"li\",null,\"size\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:sets,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:setsAdv,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4.Converting between Array and Set\"),\"You can create an Array from a Set using Array.from or the spread operator. Also, the Set constructor accepts an Array to convert in the other direction.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:converting,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"1. Array To Set\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:attToSets,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"2. Set To Array\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:SetsToArr,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5.WeakMap\"),\"Ability to have weak references used in the form of a WeakSet and WeakMap.\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:weakMap,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6.Array and Set compared\"),\"Traditionally, a set of elements has been stored in arrays in JavaScript in a lot of situations.\",React.createElement(\"br\",null),\"The new Set object, however, has some advantages:\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Deleting Array elements by value (arr.splice(arr.indexOf(val), 1)) is very slow.\"),React.createElement(\"li\",null,\"Set objects let you delete elements by their value. With an array, you would have to splice based on an element's index.\"),React.createElement(\"li\",null,\"The value NaN cannot be found with indexOf in an array.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"WeakSet object\"),\"WeakSet objects are collections of objects. An object in the WeakSet may only occur once. It is unique in the WeakSet's collection, and objects are not enumerable.\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Sets, WeakSets are collections of objects only, and not of arbitrary values of any type.\"),React.createElement(\"li\",null,\"The WeakSet is weak: References to objects in the collection are held weakly. If there is no other reference to an object stored in the WeakSet, they can be garbage collected.\")),React.createElement(\"b\",null,\"Stack\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Stack,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Shallow cloning an array\"),React.createElement(\"br\",null),\"Sometimes, you need to work with an array while ensuring you don't modify the original. Instead of a clone method, arrays have a slice method that lets you perform a shallow copy of any part of an array. This only clones the \\uFB01rst level. This works well with primitive types, like numbers and strings, but not objects.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"If the second array is too long (more than 100,000), we get a stack over\\uFB02ow error (because of how apply works). To be safe, we can iterate instead.\"),React.createElement(\"li\",null,\"When we have two separate array and we want to make key value pair from that two array, we can use array's reduce function like below.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:arrayToClone,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"7.Implement a circular buffer using an array.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:circular,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"8.How do you reverse a linked list?.\"),\"We iterate through the list once, changing the next pointer of each node to the previous node. The order of operations is important: we copy node.next into tmp before setting node.next to previous. Otherwise when we \\u201Cstep forward\\u201D at the end of the list we\\u2019d actually step back to the previous node.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"O(n) time & O(1) space\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:changing,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return KeyedCollections;}(Component);export default withStyles(styles)(KeyedCollections);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/javaScripts/deepJs/keyedCollections.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","code","trim","WeakMaps","sets","setsAdv","converting","attToSets","SetsToArr","weakMap","Stack","arrayToClone","circular","changing","KeyedCollections","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst code = ``.trim();\n\nconst WeakMaps = `\nconst privates = new WeakMap();\n\nfunction Public() {\n  const me = {\n    // Private data goes here\n  };\n  privates.set(this, me);\n}\n\nPublic.prototype.method = function () {\n  const me = privates.get(this);\n  // Do stuff with private data in me...\n};\n\nmodule.exports = Public;`.trim();\n\nconst sets = `\nlet mySet = new Set();\nmySet.add(1);\nmySet.add('some text');\nmySet.add('foo');\n\nmySet.has(1);                                                                               // true\nmySet.delete('foo');\nmySet.size;                                                                                 // 2\n\nfor (let item of mySet) \nconsole.log(item);`.trim();\n\nconst setsAdv = `\nSet.prototype.subSet = function(otherSet) { \n  if(this.size > otherSet.size) \n      return false; \n  else { \n      for(var elem of this) { \n          if(!otherSet.has(elem)) \n              return false; \n      } \n      return true; \n  } \n} \n\nvar setA = new Set([10, 20, 30]); \nvar setB = new Set([50, 60, 10, 20, 30, 40]); \nvar setC = new Set([10, 30, 40, 50]); \n\nconsole.log(setA.subSet(setB)); \nconsole.log(setA.subSet(setC)); \nconsole.log(setC.subSet(setB));`.trim();\n\nconst converting = `\nArray.from(mySet);\n[...mySet2];\n\nmySet2 = new Set([1, 2, 3, 4]);`.trim();\n\nconst attToSets = `\nlet myArray = [11,22,34,65,34,65,34];\nlet mySet = new Set(myArray);\n  mySet.add('100');\n  mySet.add({a: 1, b: 2});\n  mySet.delete(22);\n\nmySet.forEach(function(val){\n  console.log(val);\n});`.trim();\n\nconst SetsToArr = `\nlet myArray = ['value1', 'value2', 'value3']\n\nlet mySet = new Set(myArray)\nmySet.has('value1')     \n\nconsole.log([...mySet]) `.trim();\n\nconst weakMap = `\nconst requests2 = new WeakSet();\nclass Request2 {\n    constructor() {\n        requests.set(this, {\n            created: new Date()\n        });\n    }\n    \n    makeRequest() {\n        if (requestIsTooOld(this)) {\n            throw new Error(\"Try again?\");\n        }    // Do work...  \n    }\n}`.trim();\n\nconst Stack = `\n  function postFixEvaluation(exp) {\n  var stack = new Stack();\n    for (var i = 0; i < exp.length; i++) {\n      var c = exp[i];\n      if (!isNaN(c))\n        stack.push(c - '0');\n        else {\n          var val1 = stack.pop();\n          var val2 = stack.pop();\n      if (val1 == \"Underflow\" || val2 == \"Underflow\")\n        return \"Can't perform postfix evaluation\";\n        \n    switch (c) {\n        case '+':\n          stack.push(val2 + val1);\n        break;\n        case '-':\n          stack.push(val2 - val1);\n        break;\n        case '/':\n          stack.push(val2 / val1);\n        break;\n        case '*':\n          stack.push(val2 * val1);\n        break;\n      }\n    }\n  }\n  return stack.pop();\n}\n\nconsole.log(postFixEvaluation(\"235*+8-\"));\n\nconsole.log(postFixEvaluation(\"23*+\"));                       // returns postfix evaluation can't be performed.\n`.trim();\n\nconst arrayToClone = `\narrayToClone = [1, 2, 3, 4, 5];\n clone1 = Array.from(arrayToClone); \n clone2 = Array.of(...arrayToClone); \n clone3 = [...arrayToClone] \n  \n   console.log(arrayToClone)\n\n\n  var array1 = [1, 2]; \n  var array2 = [3, 4, 5]; \n  var array3 = [...array1, ...array2]                                             // Concatenating Arrays.\n\n  console.log(array3)\n\n  \n//Multiple Arrays\n   var array1 = [\"a\", \"b\"],\n       array2 = [\"c\", \"d\"],    \n       array3 = [\"e\", \"f\"],    \n       array4 = [\"g\", \"h\"];\n\n       var arrConc = [...array1, ...array2, ...array3, ...array4]\n\n        console.log(arrConc)\n\n\n//Without Copying the First Array\n\tvar longArray = [1, 2, 3, 4, 5, 6, 7, 8],    \n\t\tshortArray = [9, 10]; \n\n\t\tlongArray.push(...shortArray)\n\t\tconsole.log(longArray)\n\nshortArray.forEach(function (elem) {\n    longArray.push(elem); \n});\n\n\nvar columns = [\"Date\", \"Number\", \"Size\", \"Location\", \"Age\"]; \nvar rows = [\"2001\", \"5\", \"Big\", \"Sydney\", \"25\"]; \nvar result =  rows.reduce(function(result, field, index) {\n  result[columns[index]] = field;\n    return result; \n}, {})\nconsole.log(result);\n\nvar a=[1, 2, 3, 4, 5].filter(value => value > 2);\nconsole.log(a)\n\n\n//filter\nfunction startsWithLetterA(str) { \n   if(str && str[0].toLowerCase() == 'a') {\n           return true   \n            }  \n              return false;\n               }\nvar str = 'Since Boolean is a native javascript afunction/constructor that takes';\nvar strArray = str.split(\" \");\nvar wordsStartsWithA = strArray.filter(startsWithLetterA); \n\nconsole.log(wordsStartsWithA)\n`.trim();\n\nconst circular = `\nclass CircularBuffer {\n  constructor(size) {\n    this.memory = new Array(size);\n    this.head = 0;\n    this.tail = 0;\n    this.isFull = false;\n  }\n  \n  read() {\n    if (this.tail === this.head && !this.isFull) {\n      console.log('Nothing to read.');\n    } else {\n      this.tail = this.next(this.tail);\n      this.isFull = false;\n      return this.memory[this.tail];\n    }\n  }\n  \n  write(value) {\n    if (this.isFull) {\n      console.error('Buffer full');\n      return;\n    } else {\n      this.head = this.next(this.head);\n      this.memory[this.head] = value;\n      if (this.head === this.tail) {\n        this.isFull = true;\n      }\n    }\n  }\n  \n  next(n) {\n    var nxt = n + 1;\n    if (nxt === this.memory.length) {\n      return 0;\n    } else {\n      return nxt;\n    }\n  }\n}\n\nvar buffer = new CircularBuffer(10);\n\ndocument.addEventListener('keydown', event => {\n  buffer.write(event.key);\n});\n\nvar readKeys = () => {\n  console.log(buffer.read());\n  setTimeout(readKeys, 500);\n}\n\nreadKeys();\n`.trim();\n\nconst changing = `\nfunction reverse(head) {\n  let node = head,\n      previous,\n      tmp;\n\n  while (node) {\n    tmp = node.next;                                            // save next before we overwrite node.next!\n    node.next = previous;                                       // reverse pointer\n    previous = node;                                            // step forward in the list.\n    node = tmp;\n  }\n\n  return previous;\n}`.trim();\n\nclass KeyedCollections extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1.Object and Map compared</h3>\n              <ul>\n                <li>Objects have been used to map strings to values. Objects allow you to set keys to values, retrieve those values,\n                  delete keys, and detect whether something is stored at a key. Map objects, however, have a few more advantages\n                  that make them better maps.</li>\n                <br />\n                <li>The keys of an Object are Strings or Symbols, where they can be of any value for a Map.</li>\n                <br />\n                <li>You can get the size of a Map easily, while you have to manually keep track of size for an Object.</li>\n              </ul>\n              <br />\n              <br />\n\n              <b>whether to use a Map or an Object:</b>\n              <br />\n              <ul>\n                <li>Use maps over objects when keys are unknown until run time, and when all keys are the same\n                  type and all values are the same type.</li>\n                <li>Use maps if there is a need to store primitive values as keys because object treats each\n                  key as a string whether it's a number value, boolean value or any other primitive value.</li>\n                <li>Use objects when there is logic that operates on individual elements.</li>\n              </ul>\n\n              <br />\n              <h3>2.WeakMap object</h3>\n              The WeakMap object is a collection of key/value pairs in which the keys are objects only and the\n              values can be arbitrary values. The object references in the keys are held weakly, means\n              they are a target of garbage collection (GC) if there is no other reference to the object anymore.\n              The WeakMap API is the same as the Map API.\n              <br />\n              <br />\n              <ul>\n                <li>One difference to Map objects is that WeakMap keys are not enumerable (i.e., there is no method giving you a list\n                  of the keys).</li>\n                <li>One use case of WeakMap objects is to store private data for an object, or to hide implementation details. </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={WeakMaps}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3.Sets</h3>\n              Set objects are collections of values. You can iterate its elements in insertion order. A value in a Set may only\n              occur once, it is unique in the Set's collection.\n              <br />\n              <br />\n              <b>Sets Methods:</b>\n              <ul>\n                <li>add(1)</li>\n                <li>has(1)</li>\n                <li>delete(5)</li>\n                <li>size</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={sets}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={setsAdv}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4.Converting between Array and Set</h3>\n              You can create an Array from a Set using Array.from or the spread operator. Also, the Set constructor accepts an\n              Array to convert in the other direction.\n\n              <div style={titles}>\n                <PrismCode\n                  code={converting}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>1. Array To Set</b>\n              <div style={titles}>\n                <PrismCode\n                  code={attToSets}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>2. Set To Array</b>\n              <div style={titles}>\n                <PrismCode\n                  code={SetsToArr}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5.WeakMap</h3>\n              Ability to have weak references used in the form of a WeakSet and WeakMap.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={weakMap}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6.Array and Set compared</h3>\n              Traditionally, a set of elements has been stored in arrays in JavaScript in a lot of situations.\n              <br />\n              The new Set object, however, has some advantages:\n              <br />\n              <br />\n              <ul>\n                <li>Deleting Array elements by value (arr.splice(arr.indexOf(val), 1)) is very slow.</li>\n                <li>Set objects let you delete elements by their value. With an array, you would have to splice\n                  based on an element's index.</li>\n                <li>The value NaN cannot be found with indexOf in an array.</li>\n              </ul>\n              <br />\n              <h3>WeakSet object</h3>\n              WeakSet objects are collections of objects. An object in the WeakSet may only occur once. It is unique in the\n              WeakSet's collection, and objects are not enumerable.\n              <ul>\n                <li>Sets, WeakSets are collections of objects only, and not of arbitrary values of any type.</li>\n                <li>The WeakSet is weak: References to objects in the collection are held weakly. If there is no\n                  other reference to an object stored in the WeakSet, they can be garbage collected.</li>\n              </ul>\n\n              <b>Stack</b>\n              <div style={titles}>\n                <PrismCode\n                  code={Stack}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Shallow cloning an array</b>\n              <br />\n              Sometimes, you need to work with an array while ensuring you don't modify the original. Instead of a clone method,\n              arrays have a slice method that lets you perform a shallow copy of any part of an array. This only\n              clones the ﬁrst level. This works well with primitive types, like numbers and strings, but not objects.\n              <br />\n              <br />\n              <ul>\n                <li>If the second array is too long (more than 100,000), we get a stack overﬂow error (because of how apply\n                  works). To be safe, we can iterate instead.</li>\n                <li>When we have two separate array and we want to make key value pair from that two array, we can use array's reduce\n                  function like below.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={arrayToClone}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7.Implement a circular buffer using an array.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={circular}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>8.How do you reverse a linked list?.</h3>\n              We iterate through the list once, changing the next pointer of each node to the previous node. The order of operations is important: we copy node.next into tmp before setting node.next to previous. Otherwise when we “step forward” at the end of the list we’d actually step back to the previous node.\n              <br />\n              <br />\n              <b>O(n) time & O(1) space</b>\n              <div style={titles}>\n                <PrismCode\n                  code={changing}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(KeyedCollections));\n"]},"metadata":{},"sourceType":"module"}