{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst non_repeating_character = `\n// find sub string\nfunction common(){\n  var str='India is my home';\n  var str2=str.includes('is');\n  \n  console.log(str2);\n}\n\ncommon();\n\n\n//2\nfunction unique() {\n  let i, j, str='apple', result='';\n\n  for (i=0; i<str.length; i++) {\n    let count = 0;\n    for (j=1; j<str.length; j++) {\n      if (str[i] == str[j]) {\n        count += 1;\n      }\n    }\n\n    // if (count>=2) {                                                              //For duplicates elements\n    if (count<2) {\n      result += str[i];\n    }\n  }\n  console.log(result)\n}\n\nunique();\n\n\n//3\nfunction common() {\n  let i, str='onely', str2='ony', result=[];\n\n  for (i=0; i<=str.length; i++) {\n    if (str2.indexOf(str[i]) == -1) {\n      result.push(str[i]);\n    }\n  }\n\n  return console.log(result.join(\"\"));\n}\n\ncommon()\n`.trim();\nconst findVowel = `\n//1\nfunction vowel(){\n  const str='appleou';\n  var str2='';\n  \n  for(let i=0; i<str.length; i++){\n    if(str[i]=='a'||str[i]=='e'||str[i]=='i'||str[i]=='o'||str[i]=='u'){\n      str2 += str[i];\n    }\n  }\n  console.log(str2)\n}\n\nvowel();\n\n\n//2\nfunction getCount() {\n  var str='apple';\n  let vowelList = 'AEIOUaeiou'\n  let vowels = '';\n  \n   for(var i = 0; i < str.length ; i++){\n      if (vowelList.indexOf(str[i]) !== -1){\n        vowels += str[i];\n      }\n    }\n    console.log(vowels);\n  }\n  \n  getCount();\n  \n  \n//3\nfunction getCount() {\n  var str = 'appleo';\n  var matches;\n\n  for (var i = 0; i < str.length; i++) {\n    if (str && (matches = str.match(/[aeiou]/g))) { }\n  }\n  console.log(matches);\n}\n\ngetCount();\n  `.trim();\nconst strStr = `\n  const strStr = function (haystack, needle) {\n    const base = 256\n    const prime = 1439173969\n    if (needle === '') {\n      return 0\n    }\n    let hashNeedle = 0\n    const magic = (base ** (needle.length - 1)) % prime\n    const product = prime * base\n    for (const c of needle) {\n      hashNeedle = (hashNeedle * base + c.charCodeAt(0)) % prime\n    }\n    const isEqual = i => needle === haystack.slice(i, i + needle.length)\n    let hash = 0\n    for (let i = 0; i <= haystack.length - needle.length; i++) {\n      if (i === 0) {\n        for (let j = 0; j < needle.length; j++) {\n          hash = (hash * base + haystack[j].charCodeAt(0)) % prime\n        }\n      } else {\n        hash = (hash - haystack[i - 1].charCodeAt(0) * magic + product) % prime\n        hash = (hash * base + haystack[i + needle.length - 1].charCodeAt(0)) % prime\n      }\n      if (hash === hashNeedle && isEqual(i)) {\n        return i\n      }\n    }\n    return -1\n  }\n  \n  console.log(strStr(haystack = \"hello\", needle = \"ll\"))`.trim();\nconst combinations = `\n  function perm(str){\n    var results = [];\n    var arr = str.split(\"\");\n    var len = Math.pow(arr.length, 2);\n  \n    for( var i = 0; i < len; i++ ){\n      for(var j=i; j>>=1;){\n      for( var k= 0; k < arr.length; k++){\n        arr[k] = ( j & 1 ) ? arr[k].toUpperCase() : arr[k].toLowerCase();\n      }\n    }\n      var combo = arr.join(\"\");\n      results.push(combo);\n    }\n    return results;\n  }\n  \nconsole.log( perm(\"ab\"));`.trim();\nconst maxLength = `\nconst maxLength = function (arr) {\n  let max = 0\n  const isUnique = (s = '') => {\n    const map = {}\n    for (const c of s) {\n      map[c] = (map[c] || 0) + 1\n      if (map[c] >= 2) {\n        return false\n      }\n    }\n    return true\n  }\n  const aux = (index, current = '') => {\n    if (index > arr.length - 1) {\n      max = Math.max(current.length, max)\n      return\n    }\n    if (isUnique(current)) {\n      aux(index + 1, current)\n      if (isUnique(current + arr[index])) {\n        aux(index + 1, current + arr[index])\n      }\n    }\n  }\n  aux(0)\n  return max\n}\n\nconsole.log(maxLength([\"un\",\"iq\",\"ue\"]))`.trim();\nconst isIsomorphic = `\nconst isIsomorphic = (s, t = '') => {\n  const count = str => Array.prototype.reduce.call(str, (map, c, index) => {\n    if (map[c]) {\n      map[c].push(index)\n    }\n    map[c] = [index]\n    return map\n  }, {})\n  const mapS = count(s)\n  const mapT = count(t)\n\n  for (let i = 0; i < s.length; i++) {\n    const charS = s[i]\n    const charT = t[i]\n    for (let j = 0; j < mapS[charS].length; j++) {\n      if (mapS[charS][j] !== mapT[charT][j]) {\n        return false\n      }\n    }\n  }\n  return true\n}\n\n\nconsole.log(isIsomorphic(\"egg\", \"add\"))`.trim();\nconst wordBreak = `\nconst wordBreak = (s, wordDict = []) => {\n  const memo = {}\n  const aux = (current = '') => {\n    if (memo[current] !== undefined) {\n      return memo[current]\n    }\n    if (current === s) {\n      return true\n    }\n    if (s.indexOf(current) === -1) {\n      return false\n    }\n    memo[current] = wordDict.some(word => aux(current + word))\n    return memo[current]\n  }\n  return aux('')\n}\n\nconsole.log(wordBreak(\"leetcode\", wordDict = [\"leet\", \"code\"]))`.trim();\nconst removeDuplicates = `\nconst removeDuplicates = function (S) {\n  const stack = []\n  for (const c of S) {\n    if (c === stack[stack.length - 1]) {\n      while (stack[stack.length - 1] === c) {\n        stack.pop()\n      }\n    } else {\n      stack.push(c)\n    }\n  }\n  return stack.join('')\n}\n\nconsole.log(removeDuplicates(\"abbaca\"))`.trim();\nconst lengthOfLongestSubstring = `\nconst lengthOfLongestSubstring = (s = '') => {\n  const map = {}\n  let max = 0\n  let left = -1\n  for (let i = 0; i < s.length; i++) {\n    if (map[s[i]] !== undefined) {\n      left = Math.max(left, map[s[i]])\n      max = Math.max(i - left, max)\n    } else {\n      max = Math.max(i - left, max)\n    }\n    map[s[i]] = i\n  }\n  return max\n}\n\n\nconsole.log(lengthOfLongestSubstring(\"pwwkew\"))`.trim();\nconst ladderLength = `\nconst ladderLength = function (beginWord, endWord = '', wordList = []) {\n  const distance = (a = '', b = '') => {\n    let count = 0\n    for (let index = 0; index < b.length; index++) {\n      if (a[index] !== b[index]) {\n        count += 1\n      }\n    }\n    return count === 1\n  }\n  let current = [beginWord]\n  const visited = {\n  }\n  let count = 1\n  while (current.length > 0) {\n    const next = []\n    for (const word of current) {\n      if (word === endWord) {\n        return count\n      }\n      if (!visited[word]) {\n        next.push(...wordList.filter(word2 => distance(word, word2) && !visited[word2]))\n      }\n      visited[word] = true\n    }\n    count += 1\n    current = next\n  }\n  return 0\n}\n\nconsole.log(ladderLength(\"hit\", \"cog\", [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]))`.trim();\nconst longestPalindrome = `\nconst longestPalindrome = (s = '') => {\n  const memo = {}\n  const isPalindrome = (left, right) => {\n    if (left === right) {\n      return true\n    }\n    for (let i = left; i <= Math.floor((left + right) / 2); i++) {\n      if (s[i] !== s[right - i + left]) {\n        return false\n      }\n    }\n    return true\n  }\n  const aux = (left, right) => {\n    if (left > right) {\n      return ''\n    }\n    memo[left] = memo[left] || {}\n    if (memo[left][right] !== undefined) {\n      return memo[left][right]\n    }\n    if (isPalindrome(left, right)) {\n      return s.substring(left, right + 1)\n    }\n    memo[left][right] = aux(left + 1, right).length > aux(left, right - 1).length\n      ? aux(left + 1, right)\n      : aux(left, right - 1)\n    return memo[left][right]\n  }\n  return aux(0, s.length - 1)\n}\n\nconsole.log(longestPalindrome(\"babad\"))`.trim();\nconst convert = `\nconst convert = function (s, numRows) {\n  if (numRows === 1) {\n    return s\n  }\n  const arr = new Array(numRows).fill(\"\")\n  let i = 0\n  let down = true\n  for (const c of s) {\n    arr[i] += c\n    if (down) {\n      i += 1\n      if (i === numRows - 1) {\n        down = false\n      }\n    } else {\n      i -= 1\n      if (i === 0) {\n        down = true\n      }\n    }\n  }\n  return arr.join('')\n}\n\n\nconsole.log(convert(\"PAYPALISHIRING\",3))`.trim();\nconst isPalindrome = `\nconst isPalindrome = function (x) {\n  if (x < 0) {\n    return false\n  }\n  let reverse = 0\n  let num = x\n  while (num > 0) {\n    reverse = reverse * 10 + (num % 10)\n    num = Math.floor(num / 10)\n  }\n  return reverse === x\n}\n\n\nconsole.log(isPalindrome(121)) `.trim();\nconst Palindrom = `\nfunction palindrom(){\n  let i, str='madam', str2='';\n  \n  for(i=str.length-1; i>=0; i-- ){\n    str2 += str[i]; \n  }\n  if(str==!str2){\n    console.log('Not Palindrom', str2)\n  }\n  console.log('Palindrom', str2)\n}\n\npalindrom();`.trim();\n\nclass DSLogic extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    }, \"javaScript logicals: https://beizhedenglong.github.io/leetcode-solutions/docs/edit-distance\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }, \"1. Unique Char.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: non_repeating_character,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, \"2. Find vowel\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: findVowel,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }, \"3. Find all the combinations of a string in lowercase and uppercase\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: combinations,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    }, \"4. Maximum Length of a Concatenated String with Unique Characters.\"), \"iven an array of strings arr. String s is a concatenation of a sub-sequence of arr which have unique characters.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }), \"Return the maximum possible length of s.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }), \"Input: arr = [\\\"un\\\",\\\"iq\\\",\\\"ue\\\"]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493\n      },\n      __self: this\n    }), \"Output: 4\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    }), \"Explanation: All possible concatenations are \\\"\\\",\\\"un\\\",\\\"iq\\\",\\\"ue\\\",\\\"uniq\\\" and \\\"ique\\\".\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    }), \"Maximum length is 4.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maxLength,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }, \"2. Implement strStr()\"), \"Implement strStr().\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }), \"Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510\n      },\n      __self: this\n    }), \"Input: haystack = \\\"hello\\\", needle = \\\"ll\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    }), \"Output: 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }), \"Input: haystack = \\\"aaaaa\\\", needle = \\\"bba\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }), \"Output: -1\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: strStr,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    }, \"3. Isomorphic Strings.\"), \"Given two strings s and t, determine if they are isomorphic.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529\n      },\n      __self: this\n    }), \"Two strings are isomorphic if the characters in s can be replaced to get t.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }), \"All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }), \"Input: s = \\\"egg\\\", t = \\\"add\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }), \"Output: true\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    }), \"Input: s = \\\"foo\\\", t = \\\"bar\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    }), \"Output: false\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isIsomorphic,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    }, \"5. Word Ladder.\"), \"Given two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord, such that:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555\n      },\n      __self: this\n    }, \"Only one letter can be changed at a time.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }, \"Each transformed word must exist in the word list.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    }, \"Note: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561\n      },\n      __self: this\n    }, \"Return 0 if there is no such transformation sequence.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562\n      },\n      __self: this\n    }, \"All words have the same length.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563\n      },\n      __self: this\n    }, \"All words contain only lowercase alphabetic characters.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    }, \"You may assume no duplicates in the word list.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565\n      },\n      __self: this\n    }, \"You may assume beginWord and endWord are non-empty and are not the same.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569\n      },\n      __self: this\n    }), \"Input:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570\n      },\n      __self: this\n    }), \"beginWord = \\\"hit\\\",\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }), \"endWord = \\\"cog\\\",\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572\n      },\n      __self: this\n    }), \"wordList = [\\\"hot\\\",\\\"dot\\\",\\\"dog\\\",\\\"lot\\\",\\\"log\\\",\\\"cog\\\"]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573\n      },\n      __self: this\n    }), \"Output: 5\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575\n      },\n      __self: this\n    }), \"Explanation: As one shortest transformation is \\\"hit\\\" - \\\"hot\\\" - \\\"dot\\\" - \\\"dog\\\" - \\\"cog\\\", return its length 5.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: ladderLength,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588\n      },\n      __self: this\n    }, \"7. Word Break.\"), \"Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592\n      },\n      __self: this\n    }, \"Note: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594\n      },\n      __self: this\n    }, \"The same word in the dictionary may be reused multiple times in the segmentation.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595\n      },\n      __self: this\n    }, \"You may assume the dictionary does not contain duplicate words.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    }), \"Input: s = \\\"leetcode\\\", wordDict = [\\\"leet\\\", \\\"code\\\"]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598\n      },\n      __self: this\n    }), \"Output: true\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599\n      },\n      __self: this\n    }), \"Explanation: Return true because \\\"leetcode\\\" can be segmented as \\\"leet code\\\".\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: wordBreak,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610\n      },\n      __self: this\n    }, \"3. Remove All Adjacent Duplicates In String.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611\n      },\n      __self: this\n    }, \"Input: \"), \"\\\"abbaca\\\" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    }, \"Output: \"), \"\\\"ca\\\" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    }, \"Explanation: \"), \"For example, in \\\"abbaca\\\" we could remove \\\"bb\\\" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is \\\"aaca\\\", of which only \\\"aa\\\" is possible, so the final string is \\\"ca\\\".\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: removeDuplicates,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 623\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629\n      },\n      __self: this\n    }, \"4. Longest Substring Without Repeating Characters.\"), \"Given a string s, find the length of the longest substring without repeating characters.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 635\n      },\n      __self: this\n    }), \"Input: s = \\\"abcabcbb\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636\n      },\n      __self: this\n    }), \"Output: 3\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637\n      },\n      __self: this\n    }), \"Explanation: The answer is \\\"abc\\\", with the length of 3.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639\n      },\n      __self: this\n    }), \"Input: s = \\\"bbbbb\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641\n      },\n      __self: this\n    }), \"Output: 1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 642\n      },\n      __self: this\n    }), \"Explanation: The answer is \\\"b\\\", with the length of 1.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: lengthOfLongestSubstring,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 651\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 653\n      },\n      __self: this\n    }, \"6. Longest Palindromic Substring.\"), \"Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    }), \"Input: \\\"babad\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658\n      },\n      __self: this\n    }), \"Output: \\\"bab\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659\n      },\n      __self: this\n    }), \"Note: \\\"aba\\\" is also a valid answer.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661\n      },\n      __self: this\n    }), \"Input: \\\"cbbd\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663\n      },\n      __self: this\n    }), \"Output: \\\"bb\\\"\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: longestPalindrome,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674\n      },\n      __self: this\n    }, \"7. ZigZag Conversion.\"), \"The string \\\"PAYPALISHIRING\\\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676\n      },\n      __self: this\n    }), \"P   A   H   N\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    }), \"A P L S I I G\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678\n      },\n      __self: this\n    }), \"Y   I   R\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679\n      },\n      __self: this\n    }), \"And then read line by line: \\\"PAHNAPLSIIGYIR\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680\n      },\n      __self: this\n    }), \"Write the code that will take a string and make this conversion given a number of rows:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682\n      },\n      __self: this\n    }), \"string convert(string s, int numRows);\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685\n      },\n      __self: this\n    }), \"Input: s = \\\"PAYPALISHIRING\\\", numRows = 3\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687\n      },\n      __self: this\n    }), \"Output: \\\"PAHNAPLSIIGYIR\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689\n      },\n      __self: this\n    }), \"Input: s = \\\"PAYPALISHIRING\\\", numRows = 4\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691\n      },\n      __self: this\n    }), \"Output: \\\"PINALSIGYAHRPI\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692\n      },\n      __self: this\n    }), \"Explanation:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 693\n      },\n      __self: this\n    }), \"P     I    N\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694\n      },\n      __self: this\n    }), \"A   L S  I G\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 695\n      },\n      __self: this\n    }), \"Y A   H R\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 696\n      },\n      __self: this\n    }), \"P     I\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: convert,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 709\n      },\n      __self: this\n    }, \"9. Palindrome Number.\"), \"Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711\n      },\n      __self: this\n    }), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 713\n      },\n      __self: this\n    }), \"Input: 121 \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 714\n      },\n      __self: this\n    }), \"Output: true\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 716\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isPalindrome,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 717\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 723\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725\n      },\n      __self: this\n    }, \"8. Palindrom\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 726\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Palindrom,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 727\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(DSLogic);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","non_repeating_character","trim","findVowel","strStr","combinations","maxLength","isIsomorphic","wordBreak","removeDuplicates","lengthOfLongestSubstring","ladderLength","longestPalindrome","convert","isPalindrome","Palindrom","DSLogic","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst non_repeating_character = `\n// find sub string\nfunction common(){\n  var str='India is my home';\n  var str2=str.includes('is');\n  \n  console.log(str2);\n}\n\ncommon();\n\n\n//2\nfunction unique() {\n  let i, j, str='apple', result='';\n\n  for (i=0; i<str.length; i++) {\n    let count = 0;\n    for (j=1; j<str.length; j++) {\n      if (str[i] == str[j]) {\n        count += 1;\n      }\n    }\n\n    // if (count>=2) {                                                              //For duplicates elements\n    if (count<2) {\n      result += str[i];\n    }\n  }\n  console.log(result)\n}\n\nunique();\n\n\n//3\nfunction common() {\n  let i, str='onely', str2='ony', result=[];\n\n  for (i=0; i<=str.length; i++) {\n    if (str2.indexOf(str[i]) == -1) {\n      result.push(str[i]);\n    }\n  }\n\n  return console.log(result.join(\"\"));\n}\n\ncommon()\n`.trim()\n\nconst findVowel = `\n//1\nfunction vowel(){\n  const str='appleou';\n  var str2='';\n  \n  for(let i=0; i<str.length; i++){\n    if(str[i]=='a'||str[i]=='e'||str[i]=='i'||str[i]=='o'||str[i]=='u'){\n      str2 += str[i];\n    }\n  }\n  console.log(str2)\n}\n\nvowel();\n\n\n//2\nfunction getCount() {\n  var str='apple';\n  let vowelList = 'AEIOUaeiou'\n  let vowels = '';\n  \n   for(var i = 0; i < str.length ; i++){\n      if (vowelList.indexOf(str[i]) !== -1){\n        vowels += str[i];\n      }\n    }\n    console.log(vowels);\n  }\n  \n  getCount();\n  \n  \n//3\nfunction getCount() {\n  var str = 'appleo';\n  var matches;\n\n  for (var i = 0; i < str.length; i++) {\n    if (str && (matches = str.match(/[aeiou]/g))) { }\n  }\n  console.log(matches);\n}\n\ngetCount();\n  `.trim();\n\n\n  const strStr = `\n  const strStr = function (haystack, needle) {\n    const base = 256\n    const prime = 1439173969\n    if (needle === '') {\n      return 0\n    }\n    let hashNeedle = 0\n    const magic = (base ** (needle.length - 1)) % prime\n    const product = prime * base\n    for (const c of needle) {\n      hashNeedle = (hashNeedle * base + c.charCodeAt(0)) % prime\n    }\n    const isEqual = i => needle === haystack.slice(i, i + needle.length)\n    let hash = 0\n    for (let i = 0; i <= haystack.length - needle.length; i++) {\n      if (i === 0) {\n        for (let j = 0; j < needle.length; j++) {\n          hash = (hash * base + haystack[j].charCodeAt(0)) % prime\n        }\n      } else {\n        hash = (hash - haystack[i - 1].charCodeAt(0) * magic + product) % prime\n        hash = (hash * base + haystack[i + needle.length - 1].charCodeAt(0)) % prime\n      }\n      if (hash === hashNeedle && isEqual(i)) {\n        return i\n      }\n    }\n    return -1\n  }\n  \n  console.log(strStr(haystack = \"hello\", needle = \"ll\"))`.trim();\n\n\n\nconst combinations = `\n  function perm(str){\n    var results = [];\n    var arr = str.split(\"\");\n    var len = Math.pow(arr.length, 2);\n  \n    for( var i = 0; i < len; i++ ){\n      for(var j=i; j>>=1;){\n      for( var k= 0; k < arr.length; k++){\n        arr[k] = ( j & 1 ) ? arr[k].toUpperCase() : arr[k].toLowerCase();\n      }\n    }\n      var combo = arr.join(\"\");\n      results.push(combo);\n    }\n    return results;\n  }\n  \nconsole.log( perm(\"ab\"));`.trim();\n\nconst maxLength = `\nconst maxLength = function (arr) {\n  let max = 0\n  const isUnique = (s = '') => {\n    const map = {}\n    for (const c of s) {\n      map[c] = (map[c] || 0) + 1\n      if (map[c] >= 2) {\n        return false\n      }\n    }\n    return true\n  }\n  const aux = (index, current = '') => {\n    if (index > arr.length - 1) {\n      max = Math.max(current.length, max)\n      return\n    }\n    if (isUnique(current)) {\n      aux(index + 1, current)\n      if (isUnique(current + arr[index])) {\n        aux(index + 1, current + arr[index])\n      }\n    }\n  }\n  aux(0)\n  return max\n}\n\nconsole.log(maxLength([\"un\",\"iq\",\"ue\"]))`.trim();\n\n\nconst isIsomorphic = `\nconst isIsomorphic = (s, t = '') => {\n  const count = str => Array.prototype.reduce.call(str, (map, c, index) => {\n    if (map[c]) {\n      map[c].push(index)\n    }\n    map[c] = [index]\n    return map\n  }, {})\n  const mapS = count(s)\n  const mapT = count(t)\n\n  for (let i = 0; i < s.length; i++) {\n    const charS = s[i]\n    const charT = t[i]\n    for (let j = 0; j < mapS[charS].length; j++) {\n      if (mapS[charS][j] !== mapT[charT][j]) {\n        return false\n      }\n    }\n  }\n  return true\n}\n\n\nconsole.log(isIsomorphic(\"egg\", \"add\"))`.trim();\n\nconst wordBreak = `\nconst wordBreak = (s, wordDict = []) => {\n  const memo = {}\n  const aux = (current = '') => {\n    if (memo[current] !== undefined) {\n      return memo[current]\n    }\n    if (current === s) {\n      return true\n    }\n    if (s.indexOf(current) === -1) {\n      return false\n    }\n    memo[current] = wordDict.some(word => aux(current + word))\n    return memo[current]\n  }\n  return aux('')\n}\n\nconsole.log(wordBreak(\"leetcode\", wordDict = [\"leet\", \"code\"]))`.trim();\n\nconst removeDuplicates = `\nconst removeDuplicates = function (S) {\n  const stack = []\n  for (const c of S) {\n    if (c === stack[stack.length - 1]) {\n      while (stack[stack.length - 1] === c) {\n        stack.pop()\n      }\n    } else {\n      stack.push(c)\n    }\n  }\n  return stack.join('')\n}\n\nconsole.log(removeDuplicates(\"abbaca\"))`.trim();\n\nconst lengthOfLongestSubstring = `\nconst lengthOfLongestSubstring = (s = '') => {\n  const map = {}\n  let max = 0\n  let left = -1\n  for (let i = 0; i < s.length; i++) {\n    if (map[s[i]] !== undefined) {\n      left = Math.max(left, map[s[i]])\n      max = Math.max(i - left, max)\n    } else {\n      max = Math.max(i - left, max)\n    }\n    map[s[i]] = i\n  }\n  return max\n}\n\n\nconsole.log(lengthOfLongestSubstring(\"pwwkew\"))`.trim();\n\nconst ladderLength = `\nconst ladderLength = function (beginWord, endWord = '', wordList = []) {\n  const distance = (a = '', b = '') => {\n    let count = 0\n    for (let index = 0; index < b.length; index++) {\n      if (a[index] !== b[index]) {\n        count += 1\n      }\n    }\n    return count === 1\n  }\n  let current = [beginWord]\n  const visited = {\n  }\n  let count = 1\n  while (current.length > 0) {\n    const next = []\n    for (const word of current) {\n      if (word === endWord) {\n        return count\n      }\n      if (!visited[word]) {\n        next.push(...wordList.filter(word2 => distance(word, word2) && !visited[word2]))\n      }\n      visited[word] = true\n    }\n    count += 1\n    current = next\n  }\n  return 0\n}\n\nconsole.log(ladderLength(\"hit\", \"cog\", [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]))`.trim();\n\nconst longestPalindrome = `\nconst longestPalindrome = (s = '') => {\n  const memo = {}\n  const isPalindrome = (left, right) => {\n    if (left === right) {\n      return true\n    }\n    for (let i = left; i <= Math.floor((left + right) / 2); i++) {\n      if (s[i] !== s[right - i + left]) {\n        return false\n      }\n    }\n    return true\n  }\n  const aux = (left, right) => {\n    if (left > right) {\n      return ''\n    }\n    memo[left] = memo[left] || {}\n    if (memo[left][right] !== undefined) {\n      return memo[left][right]\n    }\n    if (isPalindrome(left, right)) {\n      return s.substring(left, right + 1)\n    }\n    memo[left][right] = aux(left + 1, right).length > aux(left, right - 1).length\n      ? aux(left + 1, right)\n      : aux(left, right - 1)\n    return memo[left][right]\n  }\n  return aux(0, s.length - 1)\n}\n\nconsole.log(longestPalindrome(\"babad\"))`.trim();\n\nconst convert = `\nconst convert = function (s, numRows) {\n  if (numRows === 1) {\n    return s\n  }\n  const arr = new Array(numRows).fill(\"\")\n  let i = 0\n  let down = true\n  for (const c of s) {\n    arr[i] += c\n    if (down) {\n      i += 1\n      if (i === numRows - 1) {\n        down = false\n      }\n    } else {\n      i -= 1\n      if (i === 0) {\n        down = true\n      }\n    }\n  }\n  return arr.join('')\n}\n\n\nconsole.log(convert(\"PAYPALISHIRING\",3))`.trim();\n\n\n\nconst isPalindrome = `\nconst isPalindrome = function (x) {\n  if (x < 0) {\n    return false\n  }\n  let reverse = 0\n  let num = x\n  while (num > 0) {\n    reverse = reverse * 10 + (num % 10)\n    num = Math.floor(num / 10)\n  }\n  return reverse === x\n}\n\n\nconsole.log(isPalindrome(121)) `.trim();\n\nconst Palindrom = `\nfunction palindrom(){\n  let i, str='madam', str2='';\n  \n  for(i=str.length-1; i>=0; i-- ){\n    str2 += str[i]; \n  }\n  if(str==!str2){\n    console.log('Not Palindrom', str2)\n  }\n  console.log('Palindrom', str2)\n}\n\npalindrom();`.trim()\n\n\nclass DSLogic extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n            <b>javaScript logicals: https://beizhedenglong.github.io/leetcode-solutions/docs/edit-distance</b>\n            <br/>\n              <h3>1. Unique Char.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={non_repeating_character}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>2. Find vowel</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={findVowel}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Find all the combinations of a string in lowercase and uppercase</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={combinations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n            <h3>4. Maximum Length of a Concatenated String with Unique Characters.</h3>\n        iven an array of strings arr. String s is a concatenation of a sub-sequence of arr which have unique characters.\n        <br/>\n        Return the maximum possible length of s.\n        <br/>\n        <br/>\n\n        Example 1:\n        <br/>\n        Input: arr = [\"un\",\"iq\",\"ue\"]<br/>\n        Output: 4<br/>\n        Explanation: All possible concatenations are \"\",\"un\",\"iq\",\"ue\",\"uniq\" and \"ique\".<br/>\n        Maximum length is 4.\n            <div style={titles}>\n                <PrismCode\n                  code={maxLength}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>2. Implement strStr()</h3>\n              Implement strStr().<br/>\nReturn the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n<br/><br/>\nExample 1:<br/>\n\nInput: haystack = \"hello\", needle = \"ll\"<br/>\nOutput: 2<br/><br/>\nExample 2:<br/>\n\nInput: haystack = \"aaaaa\", needle = \"bba\"<br/>\nOutput: -1\n              <div style={titles}>\n                <PrismCode\n                  code={strStr}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>3. Isomorphic Strings.</h3>\n              Given two strings s and t, determine if they are isomorphic.\n              <br/>\nTwo strings are isomorphic if the characters in s can be replaced to get t.\n<br/>\nAll occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.\n<br/><br/>\nExample 1:<br/>\n\nInput: s = \"egg\", t = \"add\"<br/>\nOutput: true<br/><br/>\nExample 2:<br/>\n\nInput: s = \"foo\", t = \"bar\"<br/>\nOutput: false\n              <div style={titles}>\n                <PrismCode\n                  code={isIsomorphic}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>5. Word Ladder.</h3>\n              Given two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord, such that:\n              <br/><br/>\n              <ul>\n                <li>Only one letter can be changed at a time.</li>\n                <li>Each transformed word must exist in the word list.</li>\n              </ul>\n              <br/>\n<b>Note: </b>\n<ul>\n  <li>Return 0 if there is no such transformation sequence.</li>\n  <li>All words have the same length.</li>\n  <li>All words contain only lowercase alphabetic characters.</li>\n  <li>You may assume no duplicates in the word list.</li>\n  <li>You may assume beginWord and endWord are non-empty and are not the same.</li>\n</ul>\n<br/>\nExample 1:\n<br/>\nInput:<br/>\nbeginWord = \"hit\",<br/>\nendWord = \"cog\",<br/>\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]<br/>\nOutput: 5\n<br/><br/>\n\nExplanation: As one shortest transformation is \"hit\" - \"hot\" - \"dot\" - \"dog\" - \"cog\",\nreturn its length 5.\n              <div style={titles}>\n                <PrismCode\n                  code={ladderLength}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>7. Word Break.</h3>\n              Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.\n              <br/>\n              <br/>\n              <b>Note: </b>\n              <ul>\n                <li>The same word in the dictionary may be reused multiple times in the segmentation.</li>\n                <li>You may assume the dictionary does not contain duplicate words.</li>\n              </ul>\n              <br/>\n              Input: s = \"leetcode\", wordDict = [\"leet\", \"code\"]<br/>\nOutput: true<br/>\nExplanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n              <div style={titles}>\n                <PrismCode\n                  code={wordBreak}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>3. Remove All Adjacent Duplicates In String.</h3>\n              <b>Input: </b>\"abbaca\" <br/>\n              <b>Output: </b>\"ca\" <br/>\n              <b>Explanation: </b>\n              For example, in \"abbaca\" we could remove \"bb\" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is \"aaca\", of which only \"aa\" is possible, so the final string is \"ca\".\n\n              <div style={titles}>\n                <PrismCode\n                  code={removeDuplicates}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              \n\n             \n\n              <h3>4. Longest Substring Without Repeating Characters.</h3>\n              Given a string s, find the length of the longest substring without repeating characters.\n              <br/>\n \n\nExample 1:\n<br/>\nInput: s = \"abcabcbb\"<br/>\nOutput: 3<br/>\nExplanation: The answer is \"abc\", with the length of 3.<br/><br/>\nExample 2:<br/>\n\nInput: s = \"bbbbb\"<br/>\nOutput: 1<br/>\nExplanation: The answer is \"b\", with the length of 1.\n              <div style={titles}>\n                <PrismCode\n                  code={lengthOfLongestSubstring}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>       \n\n              <h3>6. Longest Palindromic Substring.</h3>\n              Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\n              <br/>\nExample 1:\n<br/>\nInput: \"babad\"<br/>\nOutput: \"bab\"<br/>\nNote: \"aba\" is also a valid answer.<br/><br/>\nExample 2:<br/>\n\nInput: \"cbbd\"<br/>\nOutput: \"bb\"\n              <div style={titles}>\n                <PrismCode\n                  code={longestPalindrome}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>7. ZigZag Conversion.</h3>\n              The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n              <br/>\nP   A   H   N<br/>\nA P L S I I G<br/>\nY   I   R<br/>\nAnd then read line by line: \"PAHNAPLSIIGYIR\"<br/>\n\nWrite the code that will take a string and make this conversion given a number of rows:<br/>\n\nstring convert(string s, int numRows);<br/><br/>\nExample 1:<br/>\n\nInput: s = \"PAYPALISHIRING\", numRows = 3<br/>\nOutput: \"PAHNAPLSIIGYIR\"<br/><br/>\nExample 2:<br/>\n\nInput: s = \"PAYPALISHIRING\", numRows = 4<br/>\nOutput: \"PINALSIGYAHRPI\"<br/>\nExplanation:<br/>\nP     I    N<br/>\nA   L S  I G<br/>\nY A   H R<br/>\nP     I\n              <div style={titles}>\n                <PrismCode\n                  code={convert}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              \n\n              <h3>9. Palindrome Number.</h3>\n              Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.\n              <br/> <br/>\nExample 1:\n<br/>\nInput: 121 <br/>\nOutput: true\n              <div style={titles}>\n                <PrismCode\n                  code={isPalindrome}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>8. Palindrom</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Palindrom}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic));\n"]},"metadata":{},"sourceType":"module"}