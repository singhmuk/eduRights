{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/sort.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Sort1 from '../../../assets/sort_1.png';\nimport Sort2 from '../../../assets/sort_2.png';\nimport Insertion from '../../../assets/insertion_sort.png';\nimport Selection from '../../../assets/selection_short.png';\nimport Bubble from '../../../assets/bubble_short.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst SortAlgo = `function quick_Sort(origArray) {\n\tif (origArray.length <= 1) { \n\t\treturn origArray;\n\t} else {\n\n\t\tvar left = [];\n\t\tvar right = [];\n\t\tvar newArray = [];\n\t\tvar pivot = origArray.pop();\n\t\tvar length = origArray.length;\n\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\tif (origArray[i] <= pivot) {\n\t\t\t\tleft.push(origArray[i]);\n\t\t\t} else {\n\t\t\t\tright.push(origArray[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn newArray.concat(quick_Sort(left), pivot, quick_Sort(right));\n\t}\n}\n\nvar myArray = [3, 0, 2, 5, -1, 4, 1 ];\n\nconsole.log(\"Original array: \" + myArray);\nvar sortedArray = quick_Sort(myArray);\nconsole.log(\"Sorted array: \" + sortedArray);`.trim();\nconst mergeSort = `\nfunction merge_sort(left_part,right_part) \n{\n\tvar i = 0;\n\tvar j = 0;\n\tvar results = [];\n\n\twhile (i < left_part.length || j < right_part.length) {\n\t\tif (i === left_part.length) {\n\t\t\tresults.push(right_part[j]);\n\t\t\tj++;\n\t\t} \n      else if (j === right_part.length || left_part[i] <= right_part[j]) {\n\t\t\tresults.push(left_part[i]);\n\t\t\ti++;\n\t\t} else {\n\t\t\tresults.push(right_part[j]);\n\t\t\tj++;\n\t\t}\n\t}\n\treturn results;\n}\n\nconsole.log(merge_sort([1,3,4], [3,7,9]));`.trim();\nconst heapSort = `\nvar array_length;\n/* to create MAX  array */  \nfunction heap_root(input, i) {\n    var left = 2 * i + 1;\n    var right = 2 * i + 2;\n    var max = i;\n\n    if (left < array_length && input[left] > input[max]) {\n        max = left;\n    }\n\n    if (right < array_length && input[right] > input[max])     {\n        max = right;\n    }\n\n    if (max != i) {\n        swap(input, i, max);\n        heap_root(input, max);\n    }\n}\n\nfunction swap(input, index_A, index_B) {\n    var temp = input[index_A];\n\n    input[index_A] = input[index_B];\n    input[index_B] = temp;\n}\n\nfunction heapSort(input) {\n    \n    array_length = input.length;\n\n    for (var i = Math.floor(array_length / 2); i >= 0; i -= 1)      {\n        heap_root(input, i);\n      }\n\n    for (i = input.length - 1; i > 0; i--) {\n        swap(input, 0, i);\n        array_length--;\n      \n      \n        heap_root(input, 0);\n    }\n}\n\nvar arr = [3, 0, 2, 5, -1, 4, 1];\nheapSort(arr);\nconsole.log(arr);`.trim();\nconst insertion = `\nconst insertion_Sort = (nums) => {\n  for (let i = 1; i < nums.length; i++) {\n    let j = i - 1\n    let temp = nums[i]\n    while (j >= 0 && nums[j] > temp) {\n      nums[j + 1] = nums[j]\n      j--\n    }\n    nums[j+1] = temp\n  }\n  return nums\n}\nconsole.log(insertion_Sort([3, 0, 2, 5, -1, 4, 1]));\nconsole.log(insertion_Sort([2,6,5,12,-1,3,8,7,1,-4,0,23,1,-55,20,37,54,210,-23]));`.trim();\nconst selectionSort = `\nfunction Selection_Sort(arr, compare_Function) {\n\n  function compare(a, b) {\n   return a - b;\n   } \n  var min = 0;\n  var index = 0;\n  var temp = 0;\n\n //{Function} compare_Function Compare function\n  compare_Function = compare_Function || compare;\n\n  for (var i = 0; i < arr.length; i += 1) {\n    index = i;\n    min = arr[i];\n\n    for (var j = i + 1; j < arr.length; j += 1) {\n      if (compare_Function(min, arr[j]) > 0) {\n        min = arr[j];\n        index = j;\n      }\n    }\n\n    temp = arr[i];\n    arr[i] = min;\n    arr[index] = temp;\n  }\n\n  //return sorted arr\n  return arr;\n}\n\nconsole.log(Selection_Sort([3, 0, 2, 5, -1, 4, 1], function(a, b) { return a - b; })); \nconsole.log(Selection_Sort([3, 0, 2, 5, -1, 4, 1], function(a, b) { return b - a; }));`.trim();\nconst bubbleSort = `\nfunction swap(arr, first_Index, second_Index){\n  var temp = arr[first_Index];\n  arr[first_Index] = arr[second_Index];\n  arr[second_Index] = temp;\n}\n\nfunction bubble_Sort(arr){\n\n  var len = arr.length,\n      i, j, stop;\n\n  for (i=0; i < len; i++){\n      for (j=0, stop=len-i; j < stop; j++){\n          if (arr[j] > arr[j+1]){\n              swap(arr, j, j+1);\n          }\n      }\n  }\n\n  return arr;\n}\nconsole.log(bubble_Sort([3, 0, 2, 5, -1, 4, 1]));`.trim();\n\nclass Sort extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, \"Write a JavaScript program to sort a list of elements using Quick sort.\"), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, \"Quick sort is a comparison sort, meaning that it can sort items of any type for which a \\\"less-than\\\" relation is defined.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: Sort1,\n      alt: \"\",\n      className: \"responsive\",\n      style: redesign,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: Sort2,\n      alt: \"\",\n      className: \"responsive\",\n      style: redesign,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: SortAlgo,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, \"Write a JavaScript program to sort a list of elements using Merge sort.\"), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, \"Merge sort is an O (n log n) comparison-based sorting algorithm.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }), \"Divide the unsorted list into n sublists, each containing 1 element.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }), \"Repeatedly merge sublists to produce new sorted sublists until there is only 1 sublist remaining. This will be the sorted list\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: mergeSort,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, \"Write a JavaScript program to sort a list of elements using Heap sort.\"), \"Worst-case O(n log n) runtime\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: heapSort,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, \"Write a JavaScript program to sort a list of elements using Insertion sort.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: Insertion,\n      alt: \"\",\n      className: \"responsive\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }), React.createElement(PrismCode, {\n      code: insertion,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, \"Write a JavaScript program to sort a list of elements using the Selection sort.\"), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, \"The selection sort improves on the bubble sort by making only one exchange for every pass through the list\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: Selection,\n      alt: \"\",\n      className: \"responsive\",\n      style: redesign,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }), React.createElement(PrismCode, {\n      code: selectionSort,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, \"Write a JavaScript program to sort a list of elements using Bubble sort.\"), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, \"It is a simple sorting algorithm that repeatedly steps through the list to be sorted, compares each pair of adjacent items and swaps them if they are in the wrong order\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: Bubble,\n      alt: \"\",\n      className: \"responsive\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }), React.createElement(PrismCode, {\n      code: bubbleSort,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Sort);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/sort.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Sort1","Sort2","Insertion","Selection","Bubble","titles","backgroundColor","padding","fontSize","redesign","height","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","SortAlgo","trim","mergeSort","heapSort","insertion","selectionSort","bubbleSort","Sort","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Sort1 from '../../../assets/sort_1.png';\nimport Sort2 from '../../../assets/sort_2.png';\nimport Insertion from '../../../assets/insertion_sort.png';\nimport Selection from '../../../assets/selection_short.png';\nimport Bubble from '../../../assets/bubble_short.png';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 500,\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst SortAlgo = `function quick_Sort(origArray) {\n\tif (origArray.length <= 1) { \n\t\treturn origArray;\n\t} else {\n\n\t\tvar left = [];\n\t\tvar right = [];\n\t\tvar newArray = [];\n\t\tvar pivot = origArray.pop();\n\t\tvar length = origArray.length;\n\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\tif (origArray[i] <= pivot) {\n\t\t\t\tleft.push(origArray[i]);\n\t\t\t} else {\n\t\t\t\tright.push(origArray[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn newArray.concat(quick_Sort(left), pivot, quick_Sort(right));\n\t}\n}\n\nvar myArray = [3, 0, 2, 5, -1, 4, 1 ];\n\nconsole.log(\"Original array: \" + myArray);\nvar sortedArray = quick_Sort(myArray);\nconsole.log(\"Sorted array: \" + sortedArray);`.trim()\n\nconst mergeSort = `\nfunction merge_sort(left_part,right_part) \n{\n\tvar i = 0;\n\tvar j = 0;\n\tvar results = [];\n\n\twhile (i < left_part.length || j < right_part.length) {\n\t\tif (i === left_part.length) {\n\t\t\tresults.push(right_part[j]);\n\t\t\tj++;\n\t\t} \n      else if (j === right_part.length || left_part[i] <= right_part[j]) {\n\t\t\tresults.push(left_part[i]);\n\t\t\ti++;\n\t\t} else {\n\t\t\tresults.push(right_part[j]);\n\t\t\tj++;\n\t\t}\n\t}\n\treturn results;\n}\n\nconsole.log(merge_sort([1,3,4], [3,7,9]));`.trim()\n\nconst heapSort = `\nvar array_length;\n/* to create MAX  array */  \nfunction heap_root(input, i) {\n    var left = 2 * i + 1;\n    var right = 2 * i + 2;\n    var max = i;\n\n    if (left < array_length && input[left] > input[max]) {\n        max = left;\n    }\n\n    if (right < array_length && input[right] > input[max])     {\n        max = right;\n    }\n\n    if (max != i) {\n        swap(input, i, max);\n        heap_root(input, max);\n    }\n}\n\nfunction swap(input, index_A, index_B) {\n    var temp = input[index_A];\n\n    input[index_A] = input[index_B];\n    input[index_B] = temp;\n}\n\nfunction heapSort(input) {\n    \n    array_length = input.length;\n\n    for (var i = Math.floor(array_length / 2); i >= 0; i -= 1)      {\n        heap_root(input, i);\n      }\n\n    for (i = input.length - 1; i > 0; i--) {\n        swap(input, 0, i);\n        array_length--;\n      \n      \n        heap_root(input, 0);\n    }\n}\n\nvar arr = [3, 0, 2, 5, -1, 4, 1];\nheapSort(arr);\nconsole.log(arr);`.trim()\n\nconst insertion = `\nconst insertion_Sort = (nums) => {\n  for (let i = 1; i < nums.length; i++) {\n    let j = i - 1\n    let temp = nums[i]\n    while (j >= 0 && nums[j] > temp) {\n      nums[j + 1] = nums[j]\n      j--\n    }\n    nums[j+1] = temp\n  }\n  return nums\n}\nconsole.log(insertion_Sort([3, 0, 2, 5, -1, 4, 1]));\nconsole.log(insertion_Sort([2,6,5,12,-1,3,8,7,1,-4,0,23,1,-55,20,37,54,210,-23]));`.trim()\n\nconst selectionSort = `\nfunction Selection_Sort(arr, compare_Function) {\n\n  function compare(a, b) {\n   return a - b;\n   } \n  var min = 0;\n  var index = 0;\n  var temp = 0;\n\n //{Function} compare_Function Compare function\n  compare_Function = compare_Function || compare;\n\n  for (var i = 0; i < arr.length; i += 1) {\n    index = i;\n    min = arr[i];\n\n    for (var j = i + 1; j < arr.length; j += 1) {\n      if (compare_Function(min, arr[j]) > 0) {\n        min = arr[j];\n        index = j;\n      }\n    }\n\n    temp = arr[i];\n    arr[i] = min;\n    arr[index] = temp;\n  }\n\n  //return sorted arr\n  return arr;\n}\n\nconsole.log(Selection_Sort([3, 0, 2, 5, -1, 4, 1], function(a, b) { return a - b; })); \nconsole.log(Selection_Sort([3, 0, 2, 5, -1, 4, 1], function(a, b) { return b - a; }));`.trim()\n\nconst bubbleSort = `\nfunction swap(arr, first_Index, second_Index){\n  var temp = arr[first_Index];\n  arr[first_Index] = arr[second_Index];\n  arr[second_Index] = temp;\n}\n\nfunction bubble_Sort(arr){\n\n  var len = arr.length,\n      i, j, stop;\n\n  for (i=0; i < len; i++){\n      for (j=0, stop=len-i; j < stop; j++){\n          if (arr[j] > arr[j+1]){\n              swap(arr, j, j+1);\n          }\n      }\n  }\n\n  return arr;\n}\nconsole.log(bubble_Sort([3, 0, 2, 5, -1, 4, 1]));`.trim()\n\n\n\nclass Sort extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Write a JavaScript program to sort a list of elements using Quick sort.</h3>\n              <i>Quick sort is a comparison sort, meaning that it can sort items of any type for\n                which a \"less-than\" relation is defined.</i>\n              <br />\n              <img src={Sort1} alt=\"\" className=\"responsive\" style={redesign} />\n              <img src={Sort2} alt=\"\" className=\"responsive\" style={redesign} />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={SortAlgo}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h2>Write a JavaScript program to sort a list of elements using Merge sort.</h2>\n              <i>Merge sort is an O (n log n) comparison-based sorting algorithm.\n                <br />\n                Divide the unsorted list into n sublists, each containing 1 element.\n                <br />\n                Repeatedly merge sublists to produce new sorted sublists until there is only 1 sublist\n                remaining. This will be the sorted list\n              </i>\n              <div style={titles}>\n                <PrismCode\n                  code={mergeSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>Write a JavaScript program to sort a list of elements using Heap sort.</h3>\n              Worst-case O(n log n) runtime\n              <div style={titles}>\n                <PrismCode\n                  code={heapSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>Write a JavaScript program to sort a list of elements using Insertion sort.</h3>\n              <div style={titles}>\n                <img src={Insertion} alt=\"\" className=\"responsive\" />\n                <PrismCode\n                  code={insertion}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>Write a JavaScript program to sort a list of elements using the Selection sort.</h3>\n              <i>The selection sort improves on the bubble sort by making only one exchange for\n                every pass through the list</i>\n              <div style={titles}>\n                <img src={Selection} alt=\"\" className=\"responsive\" style={redesign} />\n                <PrismCode\n                  code={selectionSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>Write a JavaScript program to sort a list of elements using Bubble sort.</h3>\n              <i>It is a simple sorting algorithm that repeatedly steps through the list to be sorted,\n                compares each pair of adjacent items and swaps them if they are in the wrong order</i>\n              <div style={titles}>\n                <img src={Bubble} alt=\"\" className=\"responsive\" />\n                <PrismCode\n                  code={bubbleSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Sort));\n"]},"metadata":{},"sourceType":"module"}