{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/loader.js\";\nimport React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\nconst titles = {\n  backgroundColor: \"#F0F8FF\",\n  padding: \"1px\",\n  fontSize: \"16px\"\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst dynamically = `\nimport { FormGroup, FormBuilder, Validators, FormArray } from '@angular/forms'\n\n@Component({\n  selector: 'app-root',\n  template: '\n  < div[formGroup]=\"addForm\" >\n    <input type=\"checkbox\" formControlName=\"items\">\n        {{addForm.value.items_value}}\n\t\t\n\t\t\t\t<button (click)=\"onAddRow()\" *ngIf=\"addForm.get('rows')\">add row</button>\n\t\t\t\t<div * ngFor=\"let row of addForm.get('rows')?.controls;let index = index;\" >\n  <button (click) = \"onRemoveRow(index)\" > Remove</button >\n\t\t\t\t</div >\n\t</div >\n\n  <pre>{{ rows.value | json }}</pre>\n  '})\nexport class AppComponent {\n addForm: FormGroup;\n  rows: FormArray;\n\n  constructor(private fb: FormBuilder) {\n\n    this.addForm = this.fb.group({\n      items: [null, Validators.required],\n      items_value: ['no', Validators.required]\n    });\n\n    this.rows = this.fb.array([]);\n  }\n\n  ngOnInit() {\n    this.addForm.get(\"items\").valueChanges.subscribe(val => {\n      if (val === true) {\n        this.addForm.get(\"items_value\").setValue(\"yes\");\n\n        this.addForm.addControl('rows', this.rows);\n      }\n      if (val === false) {\n        this.addForm.get(\"items_value\").setValue(\"no\");\n        this.addForm.removeControl('rows');\n      }\n    });\n  }\n\n  createItemFormGroup(): FormGroup {\n    return this.fb.group({\n      name: null,\n      description: null,\n      qty: null\n    });\n  }\n\n  onAddRow() {\n    this.rows.push(this.createItemFormGroup());\n  }\n\n  onRemoveRow(rowIndex:number){\n    this.rows.removeAt(rowIndex);\n  }\n}`.trim();\nconst progress = `\n@Component({\n  selector: 'app-root',\n  template: '\n{{progress}}\n<button (click) = \"stop($event)\" > Stop</button>\n  '})\nexport class AppComponent {\n  progress = 0;\n  isStop = false;\n\n  ngOnInit(){\n    setInterval(()=>{\n      if(!this.isStop && this.progress <99){\n      this.progress = this.progress + 10\n    }\n    else{\n      if(this.progress==100){\n        this.progress=0\n      }\n\n      this.progress = this.progress\n    }\n    },1000)\n  }\n\n  stop(){\n    this.isStop = !this.isStop\n  }\n}`.trim();\nconst pureImpure = `\n// import Pure, Impure component in app.module.ts\n\n@Pipe({name: 'purePipe'})\nexport class Pure   {\n  transform(item){\n    return item.value  * 2;\n  }\n}\n\n@Pipe({\n  name: 'impurePipe',\n  pure: false\n  })\nexport class Impure   {\n  transform(item){\n    return item.value   * 2;\n  }\n}\n\n@Component({\n  selector: 'app-root',\n  template: '\n  <h1> pure: {{Object | purePipe}}</h1>\n     <h1>impure: {{Object | impurePipe}}</h1>\n     <button (click) = 'fun()'> change data</button>\n      '})\n\nexport class AppComponent  {\nObject = {value: 1};\n  fun() { this.Object.value++; }\n}\n`.trim();\n\nclass Loader extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"3. Progress Bar\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: progress,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"4. Pure-Impure Pipe\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: pureImpure,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Loader);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/loader.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","dynamically","trim","progress","pureImpure","Loader","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst dynamically = `\nimport { FormGroup, FormBuilder, Validators, FormArray } from '@angular/forms'\n\n@Component({\n  selector: 'app-root',\n  template: '\n  < div[formGroup]=\"addForm\" >\n    <input type=\"checkbox\" formControlName=\"items\">\n        {{addForm.value.items_value}}\n\t\t\n\t\t\t\t<button (click)=\"onAddRow()\" *ngIf=\"addForm.get('rows')\">add row</button>\n\t\t\t\t<div * ngFor=\"let row of addForm.get('rows')?.controls;let index = index;\" >\n  <button (click) = \"onRemoveRow(index)\" > Remove</button >\n\t\t\t\t</div >\n\t</div >\n\n  <pre>{{ rows.value | json }}</pre>\n  '})\nexport class AppComponent {\n addForm: FormGroup;\n  rows: FormArray;\n\n  constructor(private fb: FormBuilder) {\n\n    this.addForm = this.fb.group({\n      items: [null, Validators.required],\n      items_value: ['no', Validators.required]\n    });\n\n    this.rows = this.fb.array([]);\n  }\n\n  ngOnInit() {\n    this.addForm.get(\"items\").valueChanges.subscribe(val => {\n      if (val === true) {\n        this.addForm.get(\"items_value\").setValue(\"yes\");\n\n        this.addForm.addControl('rows', this.rows);\n      }\n      if (val === false) {\n        this.addForm.get(\"items_value\").setValue(\"no\");\n        this.addForm.removeControl('rows');\n      }\n    });\n  }\n\n  createItemFormGroup(): FormGroup {\n    return this.fb.group({\n      name: null,\n      description: null,\n      qty: null\n    });\n  }\n\n  onAddRow() {\n    this.rows.push(this.createItemFormGroup());\n  }\n\n  onRemoveRow(rowIndex:number){\n    this.rows.removeAt(rowIndex);\n  }\n}`.trim();\n\nconst progress = `\n@Component({\n  selector: 'app-root',\n  template: '\n{{progress}}\n<button (click) = \"stop($event)\" > Stop</button>\n  '})\nexport class AppComponent {\n  progress = 0;\n  isStop = false;\n\n  ngOnInit(){\n    setInterval(()=>{\n      if(!this.isStop && this.progress <99){\n      this.progress = this.progress + 10\n    }\n    else{\n      if(this.progress==100){\n        this.progress=0\n      }\n\n      this.progress = this.progress\n    }\n    },1000)\n  }\n\n  stop(){\n    this.isStop = !this.isStop\n  }\n}`.trim();\n\nconst pureImpure = `\n// import Pure, Impure component in app.module.ts\n\n@Pipe({name: 'purePipe'})\nexport class Pure   {\n  transform(item){\n    return item.value  * 2;\n  }\n}\n\n@Pipe({\n  name: 'impurePipe',\n  pure: false\n  })\nexport class Impure   {\n  transform(item){\n    return item.value   * 2;\n  }\n}\n\n@Component({\n  selector: 'app-root',\n  template: '\n  <h1> pure: {{Object | purePipe}}</h1>\n     <h1>impure: {{Object | impurePipe}}</h1>\n     <button (click) = 'fun()'> change data</button>\n      '})\n\nexport class AppComponent  {\nObject = {value: 1};\n  fun() { this.Object.value++; }\n}\n`.trim();\n\nclass Loader extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n             \n\n              <h3>3. Progress Bar</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={progress}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Pure-Impure Pipe</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={pureImpure}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(Loader);\n"]},"metadata":{},"sourceType":"module"}