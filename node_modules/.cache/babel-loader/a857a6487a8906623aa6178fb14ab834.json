{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/javaScripts/deepJs/hackerRank6.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst processData = `\n//index.html\n<html>\n<head>\n  <script src=\"index.js\"></script>\n</head>\n<body>\n  <body>\n    <button id=\"btn\" type=\"button\">0</button>\n    <script src=\"js/button.js\" type=\"text/javascript\"></script>\n</body>\n</body>\n\n\n//index.js\ndocument.addEventListener('DOMContentLoaded', () => {\n  const button = document.getElementById('btn');\n  \n  button.addEventListener('click', (e) => {\n        const count = Number(e.currentTarget.innerText) + 1;\n      \n        e.currentTarget.innerText = count;\n   });\n});\n`.trim();\nconst calculator = `\n//index.html\n<div id=\"res\"></div>\n    <div id=\"btns\">\n      <button id=\"btn0\">0</button> <button id=\"btn1\">1</button>\n      <button id=\"btnClr\">C</button> <button id=\"btnEql\">=</button>\n      <button id=\"btnSum\">+</button> <button id=\"btnSub\">-</button>\n      <button id=\"btnMul\">*</button> <button id=\"btnDiv\">/</button>\n    </div> \n    \n    \n    \n//index.js\nwindow.onload = () => {\n  let inputs = [];\n  let operator = '';\n\n  const displayRes = () => {\n    const res = document.getElementById('res');\n\n    let val1 = inputs[0];\n    let val2 = inputs[1] === undefined ? '' : inputs[1];\n\n    res.innerText = '$'{val1}'$'{operator}'$'{val2};\n  };\n\n  const setOperator = op => {\n    if (inputs[1] === undefined) {\n      operator = op;\n    }\n\n    displayRes();\n  };\n\n  const setValues = num => {\n    if (inputs.length === 0) {\n      inputs[0] = num;\n    } else if (inputs.length === 1 && operator.length === 0) {\n      inputs[0] += num;\n    } else if (inputs.length === 1 && operator.length > 0) {\n      inputs[1] = num;\n    } else if (inputs.length === 2 && operator.length > 0) {\n      inputs[1] += num;\n    }\n\n    displayRes();\n  };\n\n  const btn0 = document.getElementById('btn0');\n  btn0.addEventListener('click', () => {\n    setValues('0');\n  });\n\n  const btn1 = document.getElementById('btn1');\n  btn1.addEventListener('click', () => {\n    setValues('1');\n  });\n\n  const btnSum = document.getElementById('btnSum');\n  btnSum.addEventListener('click', () => {\n    setOperator('+');\n  });\n\n  const btnSub = document.getElementById('btnSub');\n  btnSub.addEventListener('click', () => {\n    setOperator('-');\n  });\n\n  const btnMul = document.getElementById('btnMul');\n  btnMul.addEventListener('click', () => {\n    setOperator('*');\n  });\n\n  const btnDiv = document.getElementById('btnDiv');\n  btnDiv.addEventListener('click', () => {\n    setOperator('/');\n  });\n\n  const btnClr = document.getElementById('btnClr');\n  btnClr.addEventListener('click', () => {\n    inputs = [''];\n    operator = '';\n    displayRes();\n  });\n\n  const btnEql = document.getElementById('btnEql');\n  btnEql.addEventListener('click', () => {\n    if (inputs.length === 2 && operator.length > 0) {\n      let a = parseInt(inputs[0], 2);\n      let b = parseInt(inputs[1], 2);\n\n      switch (operator) {\n        case '+':\n          inputs = [(a + b).toString(2)];\n          break;\n        case '-':\n          inputs = [(a - b).toString(2)];\n          break;\n        case '*':\n          inputs = [parseInt(a * b, 0).toString(2)];\n          break;\n        case '/':\n          inputs = [parseInt(a / b, 0).toString(2)];\n          break;\n      }\n\n      operator = '';\n\n      displayRes();\n    }\n  });\n};\n`.trim();\n\nclass HackerRank6 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"Create a Button and Buttons Container\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"Create an html button with an id of btn btn must have the styling of: width 96px, height 48px, font-size 24px The default innerHTML of button is set to 0 Create the interaction where when the button is clicked its internal value displayed is incremented.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: processData,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"Binary Calculator\"), \"Implement a simple calculator that performs the following operations on binary numbers: addition, subtraction, multiplication, and division. Note that division operation must be integer division only; for example, 1001 / 100 = 10, 1110 / 101 = 10, and 101 / 1 = 101.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: calculator,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default withStyles(styles)(HackerRank6);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/javaScripts/deepJs/hackerRank6.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","processData","trim","calculator","HackerRank6","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = {backgroundColor:'#F0F8FF', padding:'1px', fontSize:'16px'}\n\nconst styles = theme => ({\n  paper: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1)\n  },\n  smMargin: {\n      margin: theme.spacing(1)\n  },\n  actionDiv: {\n      textAlign: \"center\"\n  }\n})\n\nconst processData = `\n//index.html\n<html>\n<head>\n  <script src=\"index.js\"></script>\n</head>\n<body>\n  <body>\n    <button id=\"btn\" type=\"button\">0</button>\n    <script src=\"js/button.js\" type=\"text/javascript\"></script>\n</body>\n</body>\n\n\n//index.js\ndocument.addEventListener('DOMContentLoaded', () => {\n  const button = document.getElementById('btn');\n  \n  button.addEventListener('click', (e) => {\n        const count = Number(e.currentTarget.innerText) + 1;\n      \n        e.currentTarget.innerText = count;\n   });\n});\n`.trim();\n\nconst calculator = `\n//index.html\n<div id=\"res\"></div>\n    <div id=\"btns\">\n      <button id=\"btn0\">0</button> <button id=\"btn1\">1</button>\n      <button id=\"btnClr\">C</button> <button id=\"btnEql\">=</button>\n      <button id=\"btnSum\">+</button> <button id=\"btnSub\">-</button>\n      <button id=\"btnMul\">*</button> <button id=\"btnDiv\">/</button>\n    </div> \n    \n    \n    \n//index.js\nwindow.onload = () => {\n  let inputs = [];\n  let operator = '';\n\n  const displayRes = () => {\n    const res = document.getElementById('res');\n\n    let val1 = inputs[0];\n    let val2 = inputs[1] === undefined ? '' : inputs[1];\n\n    res.innerText = '$'{val1}'$'{operator}'$'{val2};\n  };\n\n  const setOperator = op => {\n    if (inputs[1] === undefined) {\n      operator = op;\n    }\n\n    displayRes();\n  };\n\n  const setValues = num => {\n    if (inputs.length === 0) {\n      inputs[0] = num;\n    } else if (inputs.length === 1 && operator.length === 0) {\n      inputs[0] += num;\n    } else if (inputs.length === 1 && operator.length > 0) {\n      inputs[1] = num;\n    } else if (inputs.length === 2 && operator.length > 0) {\n      inputs[1] += num;\n    }\n\n    displayRes();\n  };\n\n  const btn0 = document.getElementById('btn0');\n  btn0.addEventListener('click', () => {\n    setValues('0');\n  });\n\n  const btn1 = document.getElementById('btn1');\n  btn1.addEventListener('click', () => {\n    setValues('1');\n  });\n\n  const btnSum = document.getElementById('btnSum');\n  btnSum.addEventListener('click', () => {\n    setOperator('+');\n  });\n\n  const btnSub = document.getElementById('btnSub');\n  btnSub.addEventListener('click', () => {\n    setOperator('-');\n  });\n\n  const btnMul = document.getElementById('btnMul');\n  btnMul.addEventListener('click', () => {\n    setOperator('*');\n  });\n\n  const btnDiv = document.getElementById('btnDiv');\n  btnDiv.addEventListener('click', () => {\n    setOperator('/');\n  });\n\n  const btnClr = document.getElementById('btnClr');\n  btnClr.addEventListener('click', () => {\n    inputs = [''];\n    operator = '';\n    displayRes();\n  });\n\n  const btnEql = document.getElementById('btnEql');\n  btnEql.addEventListener('click', () => {\n    if (inputs.length === 2 && operator.length > 0) {\n      let a = parseInt(inputs[0], 2);\n      let b = parseInt(inputs[1], 2);\n\n      switch (operator) {\n        case '+':\n          inputs = [(a + b).toString(2)];\n          break;\n        case '-':\n          inputs = [(a - b).toString(2)];\n          break;\n        case '*':\n          inputs = [parseInt(a * b, 0).toString(2)];\n          break;\n        case '/':\n          inputs = [parseInt(a / b, 0).toString(2)];\n          break;\n      }\n\n      operator = '';\n\n      displayRes();\n    }\n  });\n};\n`.trim();\n\n\nclass HackerRank6 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n            <Grid item xs={2}>\n                <Paper className={classes.paper}>\n                    <h4><Sidebar /></h4>\n                </Paper>\n            </Grid>\n            <Grid item xs={10}>\n            <Paper className={classes.paper}>\n            <List>\n              <p>Create a Button and Buttons Container</p>\n              <p>\n              Create an html button with an id of btn\nbtn must have the styling of: width 96px, height 48px, font-size 24px\nThe default innerHTML of button is set to 0\nCreate the interaction where when the button is clicked its internal value displayed is \nincremented.\n              </p>\n              <div style={titles}>\n                <PrismCode\n                  code={processData}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <p>Binary Calculator</p>\n              Implement a simple calculator that performs the following operations on binary numbers: \naddition, subtraction, multiplication, and division. Note that division operation must be \ninteger division only; for example, 1001 / 100 = 10, 1110 / 101 = 10, and 101 / 1 = 101.\n              <br/>\n              <div style={titles}>\n                <PrismCode\n                  code={calculator}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(HackerRank6));\n"]},"metadata":{},"sourceType":"module"}