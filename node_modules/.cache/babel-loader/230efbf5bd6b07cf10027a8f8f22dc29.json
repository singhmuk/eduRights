{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var processData=\"\\n//index.html\\n<html>\\n<head>\\n  <script src=\\\"index.js\\\"></script>\\n</head>\\n<body>\\n  <body>\\n    <button id=\\\"btn\\\" type=\\\"button\\\">0</button>\\n    <script src=\\\"js/button.js\\\" type=\\\"text/javascript\\\"></script>\\n</body>\\n</body>\\n\\n\\n//index.js\\ndocument.addEventListener('DOMContentLoaded', () => {\\n  const button = document.getElementById('btn');\\n  \\n  button.addEventListener('click', (e) => {\\n        const count = Number(e.currentTarget.innerText) + 1;\\n      \\n        e.currentTarget.innerText = count;\\n   });\\n});\\n\".trim();var calculator=\"\\n//index.html\\n<div id=\\\"res\\\"></div>\\n    <div id=\\\"btns\\\">\\n      <button id=\\\"btn0\\\">0</button> <button id=\\\"btn1\\\">1</button>\\n      <button id=\\\"btnClr\\\">C</button> <button id=\\\"btnEql\\\">=</button>\\n      <button id=\\\"btnSum\\\">+</button> <button id=\\\"btnSub\\\">-</button>\\n      <button id=\\\"btnMul\\\">*</button> <button id=\\\"btnDiv\\\">/</button>\\n    </div> \\n    \\n    \\n    \\n//index.js\\nwindow.onload = () => {\\n  let inputs = [];\\n  let operator = '';\\n\\n  const displayRes = () => {\\n    const res = document.getElementById('res');\\n\\n    let val1 = inputs[0];\\n    let val2 = inputs[1] === undefined ? '' : inputs[1];\\n\\n    res.innerText = '$'{val1}'$'{operator}'$'{val2};\\n  };\\n\\n  const setOperator = op => {\\n    if (inputs[1] === undefined) {\\n      operator = op;\\n    }\\n\\n    displayRes();\\n  };\\n\\n  const setValues = num => {\\n    if (inputs.length === 0) {\\n      inputs[0] = num;\\n    } else if (inputs.length === 1 && operator.length === 0) {\\n      inputs[0] += num;\\n    } else if (inputs.length === 1 && operator.length > 0) {\\n      inputs[1] = num;\\n    } else if (inputs.length === 2 && operator.length > 0) {\\n      inputs[1] += num;\\n    }\\n\\n    displayRes();\\n  };\\n\\n  const btn0 = document.getElementById('btn0');\\n  btn0.addEventListener('click', () => {\\n    setValues('0');\\n  });\\n\\n  const btn1 = document.getElementById('btn1');\\n  btn1.addEventListener('click', () => {\\n    setValues('1');\\n  });\\n\\n  const btnSum = document.getElementById('btnSum');\\n  btnSum.addEventListener('click', () => {\\n    setOperator('+');\\n  });\\n\\n  const btnSub = document.getElementById('btnSub');\\n  btnSub.addEventListener('click', () => {\\n    setOperator('-');\\n  });\\n\\n  const btnMul = document.getElementById('btnMul');\\n  btnMul.addEventListener('click', () => {\\n    setOperator('*');\\n  });\\n\\n  const btnDiv = document.getElementById('btnDiv');\\n  btnDiv.addEventListener('click', () => {\\n    setOperator('/');\\n  });\\n\\n  const btnClr = document.getElementById('btnClr');\\n  btnClr.addEventListener('click', () => {\\n    inputs = [''];\\n    operator = '';\\n    displayRes();\\n  });\\n\\n  const btnEql = document.getElementById('btnEql');\\n  btnEql.addEventListener('click', () => {\\n    if (inputs.length === 2 && operator.length > 0) {\\n      let a = parseInt(inputs[0], 2);\\n      let b = parseInt(inputs[1], 2);\\n\\n      switch (operator) {\\n        case '+':\\n          inputs = [(a + b).toString(2)];\\n          break;\\n        case '-':\\n          inputs = [(a - b).toString(2)];\\n          break;\\n        case '*':\\n          inputs = [parseInt(a * b, 0).toString(2)];\\n          break;\\n        case '/':\\n          inputs = [parseInt(a / b, 0).toString(2)];\\n          break;\\n      }\\n\\n      operator = '';\\n\\n      displayRes();\\n    }\\n  });\\n};\\n\".trim();var HackerRank6=/*#__PURE__*/function(_Component){_inherits(HackerRank6,_Component);function HackerRank6(){_classCallCheck(this,HackerRank6);return _possibleConstructorReturn(this,_getPrototypeOf(HackerRank6).apply(this,arguments));}_createClass(HackerRank6,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"p\",null,\"Create a Button and Buttons Container\"),React.createElement(\"p\",null,\"Create an html button with an id of btn btn must have the styling of: width 96px, height 48px, font-size 24px The default innerHTML of button is set to 0 Create the interaction where when the button is clicked its internal value displayed is incremented.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:processData,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"p\",null,\"Binary Calculator\"),\"Implement a simple calculator that performs the following operations on binary numbers: addition, subtraction, multiplication, and division. Note that division operation must be integer division only; for example, 1001 / 100 = 10, 1110 / 101 = 10, and 101 / 1 = 101.\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:calculator,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null)))));}}]);return HackerRank6;}(Component);export default withStyles(styles)(HackerRank6);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/javaScripts/deepJs/hackerRank6.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","processData","trim","calculator","HackerRank6","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,0BAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CAGA,GAAMC,CAAAA,MAAM,CAAG,CAACC,eAAe,CAAC,SAAjB,CAA4BC,OAAO,CAAC,KAApC,CAA2CC,QAAQ,CAAC,MAApD,CAAf,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,KAAK,CAAE,CACHC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADL,CAEHN,OAAO,CAAEG,KAAK,CAACG,OAAN,CAAc,CAAd,CAFN,CADgB,CAKvBC,QAAQ,CAAE,CACNF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADF,CALa,CAQvBE,SAAS,CAAE,CACPC,SAAS,CAAE,QADJ,CARY,CAAL,EAApB,CAaA,GAAMC,CAAAA,WAAW,CAAG,uhBAwBlBC,IAxBkB,EAApB,CA0BA,GAAMC,CAAAA,UAAU,CAAG,mvFAgHjBD,IAhHiB,EAAnB,C,GAmHME,CAAAA,W,+SACgB,CAClBC,UAAU,CAAC,iBAAMvB,CAAAA,KAAK,CAACwB,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACM,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACI,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAACZ,KAA1B,EACI,8BAAI,oBAAC,OAAD,MAAJ,CADJ,CADJ,CADN,CAMM,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACA,oBAAC,KAAD,EAAO,SAAS,CAAEY,OAAO,CAACZ,KAA1B,EACA,oBAAC,IAAD,MACE,qEADF,CAEE,8RAFF,CASE,2BAAK,KAAK,CAAEN,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEY,WADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CATF,CAgBE,8BAhBF,CAiBE,iDAjBF,8QAqBE,8BArBF,CAsBE,2BAAK,KAAK,CAAEZ,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEc,UADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAtBF,CA6BE,8BA7BF,CA8BE,8BA9BF,CADA,CADA,CANN,CADF,CA6CD,C,yBAnDuBtB,S,EAsD1B,cAAgBI,CAAAA,UAAU,CAACQ,MAAD,CAAV,CAAmBW,WAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = {backgroundColor:'#F0F8FF', padding:'1px', fontSize:'16px'}\n\nconst styles = theme => ({\n  paper: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1)\n  },\n  smMargin: {\n      margin: theme.spacing(1)\n  },\n  actionDiv: {\n      textAlign: \"center\"\n  }\n})\n\nconst processData = `\n//index.html\n<html>\n<head>\n  <script src=\"index.js\"></script>\n</head>\n<body>\n  <body>\n    <button id=\"btn\" type=\"button\">0</button>\n    <script src=\"js/button.js\" type=\"text/javascript\"></script>\n</body>\n</body>\n\n\n//index.js\ndocument.addEventListener('DOMContentLoaded', () => {\n  const button = document.getElementById('btn');\n  \n  button.addEventListener('click', (e) => {\n        const count = Number(e.currentTarget.innerText) + 1;\n      \n        e.currentTarget.innerText = count;\n   });\n});\n`.trim();\n\nconst calculator = `\n//index.html\n<div id=\"res\"></div>\n    <div id=\"btns\">\n      <button id=\"btn0\">0</button> <button id=\"btn1\">1</button>\n      <button id=\"btnClr\">C</button> <button id=\"btnEql\">=</button>\n      <button id=\"btnSum\">+</button> <button id=\"btnSub\">-</button>\n      <button id=\"btnMul\">*</button> <button id=\"btnDiv\">/</button>\n    </div> \n    \n    \n    \n//index.js\nwindow.onload = () => {\n  let inputs = [];\n  let operator = '';\n\n  const displayRes = () => {\n    const res = document.getElementById('res');\n\n    let val1 = inputs[0];\n    let val2 = inputs[1] === undefined ? '' : inputs[1];\n\n    res.innerText = '$'{val1}'$'{operator}'$'{val2};\n  };\n\n  const setOperator = op => {\n    if (inputs[1] === undefined) {\n      operator = op;\n    }\n\n    displayRes();\n  };\n\n  const setValues = num => {\n    if (inputs.length === 0) {\n      inputs[0] = num;\n    } else if (inputs.length === 1 && operator.length === 0) {\n      inputs[0] += num;\n    } else if (inputs.length === 1 && operator.length > 0) {\n      inputs[1] = num;\n    } else if (inputs.length === 2 && operator.length > 0) {\n      inputs[1] += num;\n    }\n\n    displayRes();\n  };\n\n  const btn0 = document.getElementById('btn0');\n  btn0.addEventListener('click', () => {\n    setValues('0');\n  });\n\n  const btn1 = document.getElementById('btn1');\n  btn1.addEventListener('click', () => {\n    setValues('1');\n  });\n\n  const btnSum = document.getElementById('btnSum');\n  btnSum.addEventListener('click', () => {\n    setOperator('+');\n  });\n\n  const btnSub = document.getElementById('btnSub');\n  btnSub.addEventListener('click', () => {\n    setOperator('-');\n  });\n\n  const btnMul = document.getElementById('btnMul');\n  btnMul.addEventListener('click', () => {\n    setOperator('*');\n  });\n\n  const btnDiv = document.getElementById('btnDiv');\n  btnDiv.addEventListener('click', () => {\n    setOperator('/');\n  });\n\n  const btnClr = document.getElementById('btnClr');\n  btnClr.addEventListener('click', () => {\n    inputs = [''];\n    operator = '';\n    displayRes();\n  });\n\n  const btnEql = document.getElementById('btnEql');\n  btnEql.addEventListener('click', () => {\n    if (inputs.length === 2 && operator.length > 0) {\n      let a = parseInt(inputs[0], 2);\n      let b = parseInt(inputs[1], 2);\n\n      switch (operator) {\n        case '+':\n          inputs = [(a + b).toString(2)];\n          break;\n        case '-':\n          inputs = [(a - b).toString(2)];\n          break;\n        case '*':\n          inputs = [parseInt(a * b, 0).toString(2)];\n          break;\n        case '/':\n          inputs = [parseInt(a / b, 0).toString(2)];\n          break;\n      }\n\n      operator = '';\n\n      displayRes();\n    }\n  });\n};\n`.trim();\n\n\nclass HackerRank6 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n            <Grid item xs={2}>\n                <Paper className={classes.paper}>\n                    <h4><Sidebar /></h4>\n                </Paper>\n            </Grid>\n            <Grid item xs={10}>\n            <Paper className={classes.paper}>\n            <List>\n              <p>Create a Button and Buttons Container</p>\n              <p>\n              Create an html button with an id of btn\nbtn must have the styling of: width 96px, height 48px, font-size 24px\nThe default innerHTML of button is set to 0\nCreate the interaction where when the button is clicked its internal value displayed is \nincremented.\n              </p>\n              <div style={titles}>\n                <PrismCode\n                  code={processData}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <p>Binary Calculator</p>\n              Implement a simple calculator that performs the following operations on binary numbers: \naddition, subtraction, multiplication, and division. Note that division operation must be \ninteger division only; for example, 1001 / 100 = 10, 1110 / 101 = 10, and 101 / 1 = 101.\n              <br/>\n              <div style={titles}>\n                <PrismCode\n                  code={calculator}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(HackerRank6));\n"]},"metadata":{},"sourceType":"module"}