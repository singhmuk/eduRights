{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/stringAlgo.js\";\nimport React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\nimport Stcksval from \"../../../assets/stcks.png\";\nconst titles = {\n  backgroundColor: \"#F0F8FF\",\n  padding: \"1px\",\n  fontSize: \"16px\"\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst uniqueStr = `\nfunction fun(){\n  const arr='apple'.split('')\n  let result=[]\n\n  for(let i=0;i<arr.length;i++){\n   if(result.includes(arr[i])){\n      result.pop()\n   }else{\n    result.push(arr[i])\n   }\n  }\n  console.log(result.join(''))\n}\n\nfun()                           // O(n^2)\n\n//2\nfunction unique(){\n  let str=\"Java is great Grails is also great\";\n  let uniqueStr = str.split(' ');\n  \n  let result=new Set(uniqueStr);\n  console.log(result);\n  console.log(result.size);\n}\n\nunique();\n\n//3\nfunction fun(){\n  let str=\"Reverse Words in a String Reverse Words in\".split(' ');\n  let hash={};\n\n  for(let i=0; i<str.length; i++){\n    if(hash[str[i]]){\n      hash[str[i]]++;\n    }else{\n      hash[str[i]]=1\n    }\n  }\n\n  for (let word in hash) {\n    if (hash[word] === 1) {\n      console.log(word);\n    }\n  }\n}\n\nfun()\n\n\n// Linked list\nfunction linkedList() {\n  let head = null;\n\n  function add(data) {\n    const newNode = { data, next: null };\n\n    if (!head) {\n      head = newNode;\n    } else {\n      let current = head;\n      while (current.next) {\n        current = current.next;\n      }\n      current.next = newNode;\n    }\n  }\n\n  function removeDuplicates() {\n    let current = head;\n    while (current) {\n      let currentChar = current;\n      while (currentChar.next) {\n        if (currentChar.next.data === current.data) {\n          currentChar.next = currentChar.next.next;\n        } else {\n          currentChar = currentChar.next;\n        }\n      }\n      current = current.next;\n    }\n  }\n\n  function toString() {\n    let result = '';\n    let current = head;\n    while (current) {\n      result += current.data;\n      current = current.next;\n    }\n    return result;\n  }\n\n  return { add, toString, removeDuplicates };\n}\n\nfunction fun() {\n  const str = 'apple';\n  const obj = linkedList();\n\n  for (const char of str) {\n    obj.add(char);\n  }\n\n  obj.removeDuplicates();\n  console.log(obj.toString());\n}\n\nfun();\n`.trim();\nconst duplicates = `\nfunction fun(){\n  const arr='apple'.split('')\n  let result=[]\n\n  for(let i=0;i<arr.length;i++){\n    let count=0;\n   for(let j=i+1;j<arr.length;j++){\n    if(arr[i]==arr[j]){\n      count +=1;\n    }\n   }\n   if(count >=1){\n    result.push(arr[i])\n   }\n  }\n  console.log(result.join(''))\n}\n\nfun()\n\n\n// Linked list\nfunction createLinkedList() {\n  let head = null;\n\n  function add(data) {\n    const newNode = { data, next: null };\n\n    if (!head) {\n      head = newNode;\n    } else {\n      let current = head;\n      while (current.next) {\n        current = current.next;\n      }\n      current.next = newNode;\n    }\n  }\n\n  function findDuplicates() {\n    const result = createLinkedList();\n    let current = head;\n    while (current) {\n      let isDuplicate = false;\n      let temp = current.next;\n      while (temp) {\n        if (current.data === temp.data) {\n          isDuplicate = true;\n          break;\n        }\n        temp = temp.next;\n      }\n      if (isDuplicate) {\n        result.add(current.data);\n      }\n      current = current.next;\n    }\n    return result;\n  }\n\n  function toArray() {\n    const result = [];\n    let current = head;\n    while (current) {\n      result.push(current.data);\n      current = current.next;\n    }\n    return result;\n  }\n\n  return { add, toArray, findDuplicates };\n}\n\nfunction fun() {\n  const arr = 'apple'.split('');\n  const linkedList = createLinkedList();\n\n  arr.forEach((char) => linkedList.add(char));\n\n  const duplicates = linkedList.findDuplicates();\n  const result = duplicates.toArray();\n\n  console.log(result.join(''));\n}\n\nfun();\n\n`.trim();\nconst non_repeating_character = `\nfunction unique(){\n  let str=\"Java is great Grails is also great Grails is also great\";\n  let newStr = str.split(' ');\n  const result = [];\n  \n  for(let i=0; i<newStr.length; i++){\n    if(!result.includes(newStr[i])){\n      result.push(newStr[i])\n    }\n  }\n  console.log(result);\n}\n\nunique();\n`.trim();\nconst findVowel = `\nfunction fun(){\n  const str='apple';\n  const vowel='aeiou';\n  let result='';\n\n  for(let i=0;i<str.length;i++){\n    if(vowel.includes(str.charAt(i))){\n      result += str.charAt(i)\n    }\n  }\n  console.log(result)\n}\n\nfun()`.trim();\nconst isIsomorphic = `\nfunction fun() {\n  const str1 = 'egg';\n  const str2 = 'add';\n\n  for (let i = 0; i < str1.length; i++) {\n    const a = str1.indexOf(str1[i]);\n    const b = str2.indexOf(str2[i]);\n    if (str2[a] !== str2[b] || str1[b] !== str1[a]) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n\nconsole.log(fun());\n`.trim();\nconst wordBreak = `\nfunction fun() {\n  let str=\"leetcode\"\n  let wordDict = [\"leet\", \"code\"];\n  let result=[]\n\n  for (let i = 1; i <= str.length; i++) {\n    for (let j = 0; j < i; j++) {\n      if (wordDict.includes(str.substring(j, i))) {\n        result.push(str.substring(j, i))\n        break;\n      }\n    }\n  }\n\n  return console.log(result);\n}\n\nfun()\n`.trim();\nconst removeDuplicates = `\nfunction removeDup() {\n  const str = \"wwelcom\";\n  let stack = [];\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === stack[stack.length - 1]) {\n      stack.pop();\n    } else {\n      stack.push(str[i]);\n    }\n  }\n  return console.log(stack.join(\"\"));\n}\n\nremoveDup();\n`.trim();\nconst lonStr = `\nfunction lonStr(){\n  const str = 'second itemlonger is longer than the third one';\n  const arr=str.split(' ');\n  let result='';\n  \n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].length > result.length) {\n      result = arr[i]\n    }\n  }\n  \n  console.log(result);\n}\n\nlonStr();\n`.trim();\nconst pairs = `\nfunction fun(){\n  let str='abccd'\n  let newstr=[];\n\n  for(let i=0; i<str.length;i++){\n    if(!newstr.includes(str.charAt(i))){\n      newstr.push(str.charAt(i))\n    }else{\n      newstr.pop()\n    }\n  }\n  console.log(newstr.join(''))\n}\n\nfun()`.trim();\nconst lengthOfLongestSubstring = `\nfunction longStr() {\n  const str = 'applaaops';\n  let currentStr = '';\n\n  for (let i = 0; i < str.length; i++) {\n    if (currentStr.includes(str.charAt(i))) {\n      // Remove characters from the beginning of currentStr until the repeated character\n      currentStr = currentStr.slice(currentStr.indexOf(str.charAt(i)) + 1) + str.charAt(i);\n    } else {\n      currentStr += str.charAt(i);\n    }\n  }\n\n  console.log(currentStr);\n}\n\nlongStr();\n\n`.trim();\nconst ladderLength = `\nfunction ladderLength(beginWord, endWord = '', wordList = []){\n  function distance(a = '', b = ''){\n    let count = 0\n    for (let index = 0; index < b.length; index++) {\n      if (a[index] !== b[index]) {\n        count += 1\n      }\n    }\n    return count === 1\n  }\n\n  let current = [beginWord]\n  const visited = {\n  }\n  \n  let count = 1\n  while (current.length > 0) {\n    const next = []\n    for (const word of current) {\n      if (word === endWord) {\n        return count\n      }\n      if (!visited[word]) {\n        next.push(...wordList.filter(word2 => distance(word, word2) && !visited[word2]))\n      }\n      visited[word] = true\n    }\n    count += 1\n    current = next\n  }\n  return 0\n}\n\nconsole.log(ladderLength(\"hit\", \"cog\", [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]))\n`.trim();\nconst longestPalindrome = `\nfunction longestPalindrome(s = ''){\n  const memo = {}\n\n  function isPalindrome(left, right){\n    if (left === right) return true;\n\n    for (let i = left; i <= Math.floor((left + right) / 2); i++) {\n      if (s[i] !== s[right - i + left]) {\n        return false\n      }\n    }\n    return true\n  }\n\n  function aux(left, right){\n    if (left > right) return '';\n\n    memo[left] = memo[left] || {}\n    if (memo[left][right] !== undefined) {\n      return memo[left][right]\n    }\n    if (isPalindrome(left, right)) {\n      return s.substring(left, right + 1)\n    }\n    memo[left][right] = aux(left + 1, right).length > aux(left, right - 1).length\n      ? aux(left + 1, right) : aux(left, right - 1)\n    return memo[left][right]\n  }\n  return aux(0, s.length - 1)\n}\n\nconsole.log(longestPalindrome(\"babad\"))`.trim();\nconst isPalindromes = `\nfunction palindromNum(){\n  let num=121, result=0;\n  let temp=num;\n\n  while(temp>0){\n    result = result*10 + temp%10;\n    temp=Math.floor(temp/10);\n  }\n  if(result==num) console.log('Palindrom', result)\n      else{console.log('Not a Palindrom', result)}\n}\n\npalindromNum();\n`.trim();\nconst partition = `\nfunction partition(s = ''){\n  function isPalindrome(left, right){\n    if (left === right) return true;\n\n    for (let i = left; i <= right; i++) {\n      if (s[i] !== s[right - i + left]) {\n        return false\n      }\n    }\n    return true\n  }\n  \n  const result = []\n  function aux(index = 0, current = []){\n    if (index === s.length) {\n      result.push(current)\n    }\n    for (let i = index; i < s.length; i++) {\n      if (isPalindrome(index, i)) {\n        aux(i + 1, [...current, s.substring(index, i + 1)])\n      }\n    }\n  }\n  aux()\n  return result\n}\n\nconsole.log(partition(\"aab\"))\n`.trim();\nconst reverseWords = `\nconst str = \"the sky is blue\";\nconst reverseWords = str.split(\"\").reverse().join(\"\");\n\nconsole.log(reverseWords)\n`.trim();\n\nclass DSLogic extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    }, \"javaScript logicals: https://beizhedenglong.github.io/leetcode-solutions/docs/edit-distance\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529\n      },\n      __self: this\n    }, \"1. Reverse Words in a String.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }, \"Note: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }, \"A word is defined as a sequence of non-space characters.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, \"Input string may contain leading or trailing spaces. However, your reversed string should not contain leading or trailing spaces.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    }, \"You need to reduce multiple spaces between two words to a single space in the reversed string.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }, \"Time complexity: \"), \"O(n), where n is the length of the string str. This is because the split() method iterates over the string str once, and the reverse() method iterates over the array of characters once.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548\n      },\n      __self: this\n    }, \"Space complexity: \"), \"O(n), where n is the length of the string str. This is because the split() method creates a new array of characters, and the reverse() method stores the reversed array of characters.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }, \"In simple words, the code takes a linear amount of time to run, and it uses a linear amount of space.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: reverseWords,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    }, \"2. Words that appear only once in the string.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561\n      },\n      __self: this\n    }, \"Time complexity: \"), \"O(n), where n is the length of the string str. This is because the split() method iterates over the string str once, and the new Set() method iterates over the array of words once.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562\n      },\n      __self: this\n    }, \"Space complexity: \"), \"O(n), where n is the length of the string str. This is because the new Set() method creates a new set that can store up to n elements.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563\n      },\n      __self: this\n    }, \"In simple words, the unique() function takes a linear amount of time to run, and it uses a linear amount of space.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    }, \"Set(): \"), \"Reduce time complexity of O(n).\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: uniqueStr,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575\n      },\n      __self: this\n    }, \"Duplicate Character\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: duplicates,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584\n      },\n      __self: this\n    }, \"3. Unique Char.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    }, \"Time: \"), \"O(n), where n is the length of the string str. This is because the split() method iterates over the string str once, and the for loop iterates over the array newStr once.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587\n      },\n      __self: this\n    }, \"Space: \"), \"O(n), where n is the length of the string str. This is because the result array can store up to n elements.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588\n      },\n      __self: this\n    }, \"In simple words, the unique() function takes a linear amount of time to run, and it uses a linear amount of space.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591\n      },\n      __self: this\n    }, \"2:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593\n      },\n      __self: this\n    }, \"Time: \"), \"O(n^2), where n is the length of the string str. This is because the for loop iterates over the string str twice, and each iteration of the inner for loop takes constant time.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594\n      },\n      __self: this\n    }, \"Space: \"), \"O(n), where n is the length of the string str. This is because the result variable can store up to n characters.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595\n      },\n      __self: this\n    }, \"In simple words, the unique() function takes a quadratic amount of time to run, and it uses a linear amount of space.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: non_repeating_character,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 605\n      },\n      __self: this\n    }, \"4. Find vowel\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607\n      },\n      __self: this\n    }, \"Time: \"), \"O(n), where n is the length of the string str. This is because the for loop iterates over the string str once, and the indexOf() method takes constant time.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608\n      },\n      __self: this\n    }, \"Space: \"), \"O(1), where n is the length of the string str. This is because the vowelList variable is a constant, and the vowels variable can store up to 5 characters.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609\n      },\n      __self: this\n    }, \"In simple words, the vowel() function takes a linear amount of time to run, and it uses a constant amount of space.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: findVowel,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620\n      },\n      __self: this\n    }, \"6. Palindrome Number.\"), \"Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 623\n      },\n      __self: this\n    }), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 623\n      },\n      __self: this\n    }), \"Input: 121\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isPalindromes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 634\n      },\n      __self: this\n    }, \"8. Word Break.\"), \"Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640\n      },\n      __self: this\n    }, \"Note: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 642\n      },\n      __self: this\n    }, \"The same word in the dictionary may be reused multiple times in the segmentation.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646\n      },\n      __self: this\n    }, \"You may assume the dictionary does not contain duplicate words.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 651\n      },\n      __self: this\n    }), \"Input: s = \\\"leetcode\\\", wordDict = [\\\"leet\\\", \\\"code\\\"]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 653\n      },\n      __self: this\n    }), \"Output: true\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }), \"Explanation: Return true because \\\"leetcode\\\" can be segmented as \\\"leet code\\\".\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: wordBreak,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666\n      },\n      __self: this\n    }, \"9. Remove All Adjacent Duplicates In String.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667\n      },\n      __self: this\n    }, \"Input: \"), \"\\\"abbaca\\\" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668\n      },\n      __self: this\n    }, \"Output: \"), \"\\\"ca\\\" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669\n      },\n      __self: this\n    }, \"Explanation: \"), \"For example, in \\\"abbaca\\\" we could remove \\\"bb\\\" since the letters are adjacent and equal, and this is the only possible move. The result of this move is that the string is \\\"aaca\\\", of which only \\\"aa\\\" is possible, so the final string is \\\"ca\\\".\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: removeDuplicates,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682\n      },\n      __self: this\n    }, \"Time: \"), \"O(n), where n is the length of the string str. This is because the for loop iterates over the string str once, and the stack.push() and stack.pop() methods take constant time.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683\n      },\n      __self: this\n    }, \"Space: \"), \"complexity: O(n), where n is the length of the string str. This is because the stack variable can store up to n characters.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684\n      },\n      __self: this\n    }, \"In simple words, the removeDup() function takes a linear amount of time to run, and it uses a linear amount of space.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 686\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688\n      },\n      __self: this\n    }, \"10. Destroy Those Pairs.\"), \"\\\"Destroy Those Pairs\\\" is a problem where you need to find and remove pairs of elements from an array such that each pair consists of two identical elements. The task is to count how many such pairs can be formed and removed from the array.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: pairs,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 693\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701\n      },\n      __self: this\n    }, \"10. Longest Substring from a String.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 702\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: lonStr,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 709\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711\n      },\n      __self: this\n    }, \"11. Longest Substring Without Repeating Characters.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: lengthOfLongestSubstring,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 713\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 719\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 721\n      },\n      __self: this\n    }, \"12. Isomorphic Strings.\"), \"Given two strings s and t, determine if they are isomorphic.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 723\n      },\n      __self: this\n    }), \"Two strings are isomorphic if the characters in s can be replaced to get t.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 726\n      },\n      __self: this\n    }), \"All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732\n      },\n      __self: this\n    }), \"Input: s = \\\"egg\\\", t = \\\"add\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734\n      },\n      __self: this\n    }), \"Output: true\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 736\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 737\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 738\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isIsomorphic,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 739\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 745\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746\n      },\n      __self: this\n    }, \"Break\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 747\n      },\n      __self: this\n    }, \"13. Word Ladder.\"), \"Given two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord, such that:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 751\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 752\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754\n      },\n      __self: this\n    }, \"Only one letter can be changed at a time.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 755\n      },\n      __self: this\n    }, \"Each transformed word must exist in the word list.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 757\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 758\n      },\n      __self: this\n    }, \"Note: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 759\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 760\n      },\n      __self: this\n    }, \"Return 0 if there is no such transformation sequence.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 761\n      },\n      __self: this\n    }, \"All words have the same length.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 762\n      },\n      __self: this\n    }, \"All words contain only lowercase alphabetic characters.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 763\n      },\n      __self: this\n    }, \"You may assume no duplicates in the word list.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 764\n      },\n      __self: this\n    }, \"You may assume beginWord and endWord are non-empty and are not the same.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 769\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 771\n      },\n      __self: this\n    }), \"Input:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 773\n      },\n      __self: this\n    }), \"beginWord = \\\"hit\\\",\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 775\n      },\n      __self: this\n    }), \"endWord = \\\"cog\\\",\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 777\n      },\n      __self: this\n    }), \"wordList = [\\\"hot\\\",\\\"dot\\\",\\\"dog\\\",\\\"lot\\\",\\\"log\\\",\\\"cog\\\"]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 779\n      },\n      __self: this\n    }), \"Output: 5\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 781\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 782\n      },\n      __self: this\n    }), \"Explanation: As one shortest transformation is \\\"hit\\\" - \\\"hot\\\" - \\\"dot\\\" - \\\"dog\\\" - \\\"cog\\\", return its length 5.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 785\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: ladderLength,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 786\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 792\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 793\n      },\n      __self: this\n    }, \"14. Palindrome Partitioning.\"), \"Input: \\\"aab\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 795\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 796\n      },\n      __self: this\n    }), \"Output: [\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 797\n      },\n      __self: this\n    }), \"[\\\"aa\\\",\\\"b\\\"],\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 799\n      },\n      __self: this\n    }), \"[\\\"a\\\",\\\"a\\\",\\\"b\\\"] ]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 801\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: partition,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 802\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 808\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 809\n      },\n      __self: this\n    }, \"15. Longest Palindromic Substring.\"), \"Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 812\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 814\n      },\n      __self: this\n    }), \"Input: \\\"babad\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 816\n      },\n      __self: this\n    }), \"Output: \\\"bab\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 818\n      },\n      __self: this\n    }), \"Note: \\\"aba\\\" is also a valid answer.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 820\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 821\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 823\n      },\n      __self: this\n    }), \"Input: \\\"cbbd\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 825\n      },\n      __self: this\n    }), \"Output: \\\"bb\\\"\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 827\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: longestPalindrome,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 828\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(DSLogic);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/stringAlgo.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","uniqueStr","trim","duplicates","non_repeating_character","findVowel","isIsomorphic","wordBreak","removeDuplicates","lonStr","pairs","lengthOfLongestSubstring","ladderLength","longestPalindrome","isPalindromes","partition","reverseWords","DSLogic","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nimport Stcksval from \"../../../assets/stcks.png\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst redesign = {\n  height: 200,\n  width: 500,\n};\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst uniqueStr = `\nfunction fun(){\n  const arr='apple'.split('')\n  let result=[]\n\n  for(let i=0;i<arr.length;i++){\n   if(result.includes(arr[i])){\n      result.pop()\n   }else{\n    result.push(arr[i])\n   }\n  }\n  console.log(result.join(''))\n}\n\nfun()                           // O(n^2)\n\n//2\nfunction unique(){\n  let str=\"Java is great Grails is also great\";\n  let uniqueStr = str.split(' ');\n  \n  let result=new Set(uniqueStr);\n  console.log(result);\n  console.log(result.size);\n}\n\nunique();\n\n//3\nfunction fun(){\n  let str=\"Reverse Words in a String Reverse Words in\".split(' ');\n  let hash={};\n\n  for(let i=0; i<str.length; i++){\n    if(hash[str[i]]){\n      hash[str[i]]++;\n    }else{\n      hash[str[i]]=1\n    }\n  }\n\n  for (let word in hash) {\n    if (hash[word] === 1) {\n      console.log(word);\n    }\n  }\n}\n\nfun()\n\n\n// Linked list\nfunction linkedList() {\n  let head = null;\n\n  function add(data) {\n    const newNode = { data, next: null };\n\n    if (!head) {\n      head = newNode;\n    } else {\n      let current = head;\n      while (current.next) {\n        current = current.next;\n      }\n      current.next = newNode;\n    }\n  }\n\n  function removeDuplicates() {\n    let current = head;\n    while (current) {\n      let currentChar = current;\n      while (currentChar.next) {\n        if (currentChar.next.data === current.data) {\n          currentChar.next = currentChar.next.next;\n        } else {\n          currentChar = currentChar.next;\n        }\n      }\n      current = current.next;\n    }\n  }\n\n  function toString() {\n    let result = '';\n    let current = head;\n    while (current) {\n      result += current.data;\n      current = current.next;\n    }\n    return result;\n  }\n\n  return { add, toString, removeDuplicates };\n}\n\nfunction fun() {\n  const str = 'apple';\n  const obj = linkedList();\n\n  for (const char of str) {\n    obj.add(char);\n  }\n\n  obj.removeDuplicates();\n  console.log(obj.toString());\n}\n\nfun();\n`.trim();\n\nconst duplicates = `\nfunction fun(){\n  const arr='apple'.split('')\n  let result=[]\n\n  for(let i=0;i<arr.length;i++){\n    let count=0;\n   for(let j=i+1;j<arr.length;j++){\n    if(arr[i]==arr[j]){\n      count +=1;\n    }\n   }\n   if(count >=1){\n    result.push(arr[i])\n   }\n  }\n  console.log(result.join(''))\n}\n\nfun()\n\n\n// Linked list\nfunction createLinkedList() {\n  let head = null;\n\n  function add(data) {\n    const newNode = { data, next: null };\n\n    if (!head) {\n      head = newNode;\n    } else {\n      let current = head;\n      while (current.next) {\n        current = current.next;\n      }\n      current.next = newNode;\n    }\n  }\n\n  function findDuplicates() {\n    const result = createLinkedList();\n    let current = head;\n    while (current) {\n      let isDuplicate = false;\n      let temp = current.next;\n      while (temp) {\n        if (current.data === temp.data) {\n          isDuplicate = true;\n          break;\n        }\n        temp = temp.next;\n      }\n      if (isDuplicate) {\n        result.add(current.data);\n      }\n      current = current.next;\n    }\n    return result;\n  }\n\n  function toArray() {\n    const result = [];\n    let current = head;\n    while (current) {\n      result.push(current.data);\n      current = current.next;\n    }\n    return result;\n  }\n\n  return { add, toArray, findDuplicates };\n}\n\nfunction fun() {\n  const arr = 'apple'.split('');\n  const linkedList = createLinkedList();\n\n  arr.forEach((char) => linkedList.add(char));\n\n  const duplicates = linkedList.findDuplicates();\n  const result = duplicates.toArray();\n\n  console.log(result.join(''));\n}\n\nfun();\n\n`.trim();\n\nconst non_repeating_character = `\nfunction unique(){\n  let str=\"Java is great Grails is also great Grails is also great\";\n  let newStr = str.split(' ');\n  const result = [];\n  \n  for(let i=0; i<newStr.length; i++){\n    if(!result.includes(newStr[i])){\n      result.push(newStr[i])\n    }\n  }\n  console.log(result);\n}\n\nunique();\n`.trim();\n\nconst findVowel = `\nfunction fun(){\n  const str='apple';\n  const vowel='aeiou';\n  let result='';\n\n  for(let i=0;i<str.length;i++){\n    if(vowel.includes(str.charAt(i))){\n      result += str.charAt(i)\n    }\n  }\n  console.log(result)\n}\n\nfun()`.trim();\n\nconst isIsomorphic = `\nfunction fun() {\n  const str1 = 'egg';\n  const str2 = 'add';\n\n  for (let i = 0; i < str1.length; i++) {\n    const a = str1.indexOf(str1[i]);\n    const b = str2.indexOf(str2[i]);\n    if (str2[a] !== str2[b] || str1[b] !== str1[a]) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n\nconsole.log(fun());\n`.trim();\n\nconst wordBreak = `\nfunction fun() {\n  let str=\"leetcode\"\n  let wordDict = [\"leet\", \"code\"];\n  let result=[]\n\n  for (let i = 1; i <= str.length; i++) {\n    for (let j = 0; j < i; j++) {\n      if (wordDict.includes(str.substring(j, i))) {\n        result.push(str.substring(j, i))\n        break;\n      }\n    }\n  }\n\n  return console.log(result);\n}\n\nfun()\n`.trim();\n\nconst removeDuplicates = `\nfunction removeDup() {\n  const str = \"wwelcom\";\n  let stack = [];\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === stack[stack.length - 1]) {\n      stack.pop();\n    } else {\n      stack.push(str[i]);\n    }\n  }\n  return console.log(stack.join(\"\"));\n}\n\nremoveDup();\n`.trim();\n\nconst lonStr = `\nfunction lonStr(){\n  const str = 'second itemlonger is longer than the third one';\n  const arr=str.split(' ');\n  let result='';\n  \n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].length > result.length) {\n      result = arr[i]\n    }\n  }\n  \n  console.log(result);\n}\n\nlonStr();\n`.trim();\n\nconst pairs = `\nfunction fun(){\n  let str='abccd'\n  let newstr=[];\n\n  for(let i=0; i<str.length;i++){\n    if(!newstr.includes(str.charAt(i))){\n      newstr.push(str.charAt(i))\n    }else{\n      newstr.pop()\n    }\n  }\n  console.log(newstr.join(''))\n}\n\nfun()`.trim();\n\nconst lengthOfLongestSubstring = `\nfunction longStr() {\n  const str = 'applaaops';\n  let currentStr = '';\n\n  for (let i = 0; i < str.length; i++) {\n    if (currentStr.includes(str.charAt(i))) {\n      // Remove characters from the beginning of currentStr until the repeated character\n      currentStr = currentStr.slice(currentStr.indexOf(str.charAt(i)) + 1) + str.charAt(i);\n    } else {\n      currentStr += str.charAt(i);\n    }\n  }\n\n  console.log(currentStr);\n}\n\nlongStr();\n\n`.trim();\n\nconst ladderLength = `\nfunction ladderLength(beginWord, endWord = '', wordList = []){\n  function distance(a = '', b = ''){\n    let count = 0\n    for (let index = 0; index < b.length; index++) {\n      if (a[index] !== b[index]) {\n        count += 1\n      }\n    }\n    return count === 1\n  }\n\n  let current = [beginWord]\n  const visited = {\n  }\n  \n  let count = 1\n  while (current.length > 0) {\n    const next = []\n    for (const word of current) {\n      if (word === endWord) {\n        return count\n      }\n      if (!visited[word]) {\n        next.push(...wordList.filter(word2 => distance(word, word2) && !visited[word2]))\n      }\n      visited[word] = true\n    }\n    count += 1\n    current = next\n  }\n  return 0\n}\n\nconsole.log(ladderLength(\"hit\", \"cog\", [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]))\n`.trim();\n\nconst longestPalindrome = `\nfunction longestPalindrome(s = ''){\n  const memo = {}\n\n  function isPalindrome(left, right){\n    if (left === right) return true;\n\n    for (let i = left; i <= Math.floor((left + right) / 2); i++) {\n      if (s[i] !== s[right - i + left]) {\n        return false\n      }\n    }\n    return true\n  }\n\n  function aux(left, right){\n    if (left > right) return '';\n\n    memo[left] = memo[left] || {}\n    if (memo[left][right] !== undefined) {\n      return memo[left][right]\n    }\n    if (isPalindrome(left, right)) {\n      return s.substring(left, right + 1)\n    }\n    memo[left][right] = aux(left + 1, right).length > aux(left, right - 1).length\n      ? aux(left + 1, right) : aux(left, right - 1)\n    return memo[left][right]\n  }\n  return aux(0, s.length - 1)\n}\n\nconsole.log(longestPalindrome(\"babad\"))`.trim();\n\nconst isPalindromes = `\nfunction palindromNum(){\n  let num=121, result=0;\n  let temp=num;\n\n  while(temp>0){\n    result = result*10 + temp%10;\n    temp=Math.floor(temp/10);\n  }\n  if(result==num) console.log('Palindrom', result)\n      else{console.log('Not a Palindrom', result)}\n}\n\npalindromNum();\n`.trim();\n\nconst partition = `\nfunction partition(s = ''){\n  function isPalindrome(left, right){\n    if (left === right) return true;\n\n    for (let i = left; i <= right; i++) {\n      if (s[i] !== s[right - i + left]) {\n        return false\n      }\n    }\n    return true\n  }\n  \n  const result = []\n  function aux(index = 0, current = []){\n    if (index === s.length) {\n      result.push(current)\n    }\n    for (let i = index; i < s.length; i++) {\n      if (isPalindrome(index, i)) {\n        aux(i + 1, [...current, s.substring(index, i + 1)])\n      }\n    }\n  }\n  aux()\n  return result\n}\n\nconsole.log(partition(\"aab\"))\n`.trim();\n\nconst reverseWords = `\nconst str = \"the sky is blue\";\nconst reverseWords = str.split(\"\").reverse().join(\"\");\n\nconsole.log(reverseWords)\n`.trim();\n\nclass DSLogic extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <b>\n                javaScript logicals:\n                https://beizhedenglong.github.io/leetcode-solutions/docs/edit-distance\n              </b>\n              <br />\n              <h3>1. Reverse Words in a String.</h3>\n              <b>Note: </b>\n              <ul>\n                <li>\n                  A word is defined as a sequence of non-space characters.\n                </li>\n                <li>\n                  Input string may contain leading or trailing spaces. However,\n                  your reversed string should not contain leading or trailing\n                  spaces.\n                </li>\n                <li>\n                  You need to reduce multiple spaces between two words to a\n                  single space in the reversed string.\n                </li>\n              </ul>\n              <br/>\n              <ul>\n                <li><b>Time complexity: </b>O(n), where n is the length of the string str. This is because the split() method iterates over the string str once, and the reverse() method iterates over the array of characters once.</li><br/>\n                <li><b>Space complexity: </b>O(n), where n is the length of the string str. This is because the split() method creates a new array of characters, and the reverse() method stores the reversed array of characters.</li><br/>\n                <li>In simple words, the code takes a linear amount of time to run, and it uses a linear amount of space.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={reverseWords}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>2. Words that appear only once in the string.</h3>\n              <ul>\n                <li><b>Time complexity: </b>O(n), where n is the length of the string str. This is because the split() method iterates over the string str once, and the new Set() method iterates over the array of words once.</li><br/>\n                <li><b>Space complexity: </b>O(n), where n is the length of the string str. This is because the new Set() method creates a new set that can store up to n elements.</li><br/>\n                <li>In simple words, the unique() function takes a linear amount of time to run, and it uses a linear amount of space.</li>\n              </ul>\n              <br/>\n              <b>Set(): </b>Reduce time complexity of O(n).\n              <div style={titles}>\n                <PrismCode\n                  code={uniqueStr}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Duplicate Character</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={duplicates}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>3. Unique Char.</h3>\n              <ul>\n                <li><b>Time: </b>O(n), where n is the length of the string str. This is because the split() method iterates over the string str once, and the for loop iterates over the array newStr once.</li><br/>\n                <li><b>Space: </b>O(n), where n is the length of the string str. This is because the result array can store up to n elements.</li><br/>\n                <li>In simple words, the unique() function takes a linear amount of time to run, and it uses a linear amount of space.</li>\n              </ul>\n              <br/>\n              <b>2:</b>\n              <ul>\n                <li><b>Time: </b>O(n^2), where n is the length of the string str. This is because the for loop iterates over the string str twice, and each iteration of the inner for loop takes constant time.</li><br/>\n                <li><b>Space: </b>O(n), where n is the length of the string str. This is because the result variable can store up to n characters.</li><br/>\n                <li>In simple words, the unique() function takes a quadratic amount of time to run, and it uses a linear amount of space.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={non_repeating_character}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>4. Find vowel</h3>\n              <ul>\n                <li><b>Time: </b>O(n), where n is the length of the string str. This is because the for loop iterates over the string str once, and the indexOf() method takes constant time.</li><br/>\n                <li><b>Space: </b>O(1), where n is the length of the string str. This is because the vowelList variable is a constant, and the vowels variable can store up to 5 characters.</li><br/>\n                <li>In simple words, the vowel() function takes a linear amount of time to run, and it uses a constant amount of space.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={findVowel}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              \n              <h3>6. Palindrome Number.</h3>\n              Determine whether an integer is a palindrome. An integer is a\n              palindrome when it reads the same backward as forward.\n              <br /> <br />\n              Input: 121\n              <div style={titles}>\n                <PrismCode\n                  code={isPalindromes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              \n              <h3>8. Word Break.</h3>\n              Given a non-empty string s and a dictionary wordDict containing a\n              list of non-empty words, determine if s can be segmented into a\n              space-separated sequence of one or more dictionary words.\n              <br />\n              <br />\n              <b>Note: </b>\n              <ul>\n                <li>\n                  The same word in the dictionary may be reused multiple times\n                  in the segmentation.\n                </li>\n                <li>\n                  You may assume the dictionary does not contain duplicate\n                  words.\n                </li>\n              </ul>\n              <br />\n              Input: s = \"leetcode\", wordDict = [\"leet\", \"code\"]\n              <br />\n              Output: true\n              <br />\n              Explanation: Return true because \"leetcode\" can be segmented as\n              \"leet code\".\n              <div style={titles}>\n                <PrismCode\n                  code={wordBreak}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>9. Remove All Adjacent Duplicates In String.</h3>\n              <b>Input: </b>\"abbaca\" <br />\n              <b>Output: </b>\"ca\" <br />\n              <b>Explanation: </b>\n              For example, in \"abbaca\" we could remove \"bb\" since the letters\n              are adjacent and equal, and this is the only possible move. The\n              result of this move is that the string is \"aaca\", of which only\n              \"aa\" is possible, so the final string is \"ca\".\n              <div style={titles}>\n                <PrismCode\n                  code={removeDuplicates}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <ul>\n                <li><b>Time: </b>O(n), where n is the length of the string str. This is because the for loop iterates over the string str once, and the stack.push() and stack.pop() methods take constant time.</li><br/>\n                <li><b>Space: </b>complexity: O(n), where n is the length of the string str. This is because the stack variable can store up to n characters.</li><br/>\n                <li>In simple words, the removeDup() function takes a linear amount of time to run, and it uses a linear amount of space.</li>\n              </ul>\n              <br />\n\n              <h3>10. Destroy Those Pairs.</h3>\n              \"Destroy Those Pairs\" is a problem where you need to find and remove pairs of elements from an array \n              such that each pair consists of two identical elements. The task is to count how many such pairs can \n              be formed and removed from the array. \n              <div style={titles}>\n                <PrismCode\n                  code={pairs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>10. Longest Substring from a String.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={lonStr}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>11. Longest Substring Without Repeating Characters.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={lengthOfLongestSubstring}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>12. Isomorphic Strings.</h3>\n              Given two strings s and t, determine if they are isomorphic.\n              <br />\n              Two strings are isomorphic if the characters in s can be replaced\n              to get t.\n              <br />\n              All occurrences of a character must be replaced with another\n              character while preserving the order of characters. No two\n              characters may map to the same character but a character may map\n              to itself.\n              <br />\n              <br />\n              Input: s = \"egg\", t = \"add\"\n              <br />\n              Output: true\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={isIsomorphic}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>Break</b>\n              <h3>13. Word Ladder.</h3>\n              Given two words (beginWord and endWord), and a dictionary's word\n              list, find the length of shortest transformation sequence from\n              beginWord to endWord, such that:\n              <br />\n              <br />\n              <ul>\n                <li>Only one letter can be changed at a time.</li>\n                <li>Each transformed word must exist in the word list.</li>\n              </ul>\n              <br />\n              <b>Note: </b>\n              <ul>\n                <li>Return 0 if there is no such transformation sequence.</li>\n                <li>All words have the same length.</li>\n                <li>All words contain only lowercase alphabetic characters.</li>\n                <li>You may assume no duplicates in the word list.</li>\n                <li>\n                  You may assume beginWord and endWord are non-empty and are not\n                  the same.\n                </li>\n              </ul>\n              <br />\n              Example 1:\n              <br />\n              Input:\n              <br />\n              beginWord = \"hit\",\n              <br />\n              endWord = \"cog\",\n              <br />\n              wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n              <br />\n              Output: 5\n              <br />\n              <br />\n              Explanation: As one shortest transformation is \"hit\" - \"hot\" -\n              \"dot\" - \"dog\" - \"cog\", return its length 5.\n              <div style={titles}>\n                <PrismCode\n                  code={ladderLength}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>14. Palindrome Partitioning.</h3>\n              Input: \"aab\"\n              <br />\n              <br />\n              Output: [<br />\n              [\"aa\",\"b\"],\n              <br />\n              [\"a\",\"a\",\"b\"] ]\n              <div style={titles}>\n                <PrismCode\n                  code={partition}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>15. Longest Palindromic Substring.</h3>\n              Given a string s, find the longest palindromic substring in s. You\n              may assume that the maximum length of s is 1000.\n              <br />\n              Example 1:\n              <br />\n              Input: \"babad\"\n              <br />\n              Output: \"bab\"\n              <br />\n              Note: \"aba\" is also a valid answer.\n              <br />\n              <br />\n              Example 2:\n              <br />\n              Input: \"cbbd\"\n              <br />\n              Output: \"bb\"\n              <div style={titles}>\n                <PrismCode\n                  code={longestPalindrome}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(DSLogic);\n"]},"metadata":{},"sourceType":"module"}