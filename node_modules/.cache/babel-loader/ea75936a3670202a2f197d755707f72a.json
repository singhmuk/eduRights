{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/ml/deepMl/logisticRegrations.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst sklearn = `\nfrom sklearn.datasets import load_iris\n\niris = load_iris()\nX = iris.data\ny = iris.target\n\nfeature_names = iris.feature_names\ntarget_names = iris.target_names\n\nprint(\"Feature names:\", feature_names)\nprint(\"Target names:\", target_names)\nprint(\"First 10 rows of X\", X[:10])\n`.trim();\nconst accuracy = `\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 1)\n\nX_train.shape\nX_test.shape\n\ny_train.shape\ny_test.shape\n`.trim();\nconst trains = `\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import metrics\n\nclassifier_knn = KNeighborsClassifier(n_neighbors = 3)\nclassifier_knn.fit(X_train, y_train)\ny_pred = classifier_knn.predict(X_test)\n\n# Finding accuracy by comparing actual response values(y_test)with predicted response value(y_pred)\nprint(\"Accuracy:\", metrics.accuracy_score(y_test, y_pred))\n\n# Providing sample data and the model will make prediction out of that data\nsample = [[5, 5, 3, 2], [2, 4, 3, 5]]\npreds = classifier_knn.predict(sample)\n`.trim();\nconst stack = `\nfrom sklearn import linear_model\nreg = linear_model.LinearRegression()  \n\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train, Y_train)                       \n\nfrom sklearn.preprocessing import StandardScaler  \nsc_X = StandardScaler()\n\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\n\nfrom sklearn.svm import SVC\nsvm = SVC(gamma='auto') \n\nfrom sklearn.svm import SVC\nmodel = SVC()\nmodel.fit(X_train, y_train)\n\nfrom sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators=40)                                                      \n\nfrom sklearn.model_selection import KFold\nkf = KFold(n_splits=3)\n\nfrom sklearn.neighbors import KNeighborsClassifier \nknn = KNeighborsClassifier(n_neighbors=10)\n\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscaler.fit(df[['Income($)']])\n\nfrom sklearn.pipeline import Pipeline\nclf = Pipeline([('vectorizer', CountVectorizer()),('nb', MultinomialNB())])\nclf.fit(X_train, y_train)\n\nfrom sklearn.preprocessing import LabelEncoder\nle_company = LabelEncoder()\n\nfrom sklearn import tree\nmodel = tree.DecisionTreeClassifier()\nmodel.fit(inputs_n, target)\n\nfrom sklearn.decomposition import PCA\npca = PCA(0.95)\nX_pca = pca.fit_transform(X)\n\nfrom sklearn import preprocessing\nencoder = preprocessing.LabelEncoder()\nencoder.fit(input_labels)\n\nfrom sklearn.linear_model import Ridge                                                  \nridge_reg= Ridge(alpha=50, max_iter=100, tol=0.1) \nridge_reg.fit(train_X, train_y)\n\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.tree import DecisionTreeClassifier\nscores = cross_val_score(DecisionTreeClassifier(), X, y, cv=5)\n\nfrom sklearn.model_selection import GridSearchCV\nclf = GridSearchCV(svm.SVC(gamma='auto'), {'C': [1,10,20], 'kernel': ['rbf','linear']}, cv=5, return_train_score=False)\nclf.fit(iris.data, iris.target)\n\nfrom sklearn.model_selection import RandomizedSearchCV\nrs = RandomizedSearchCV(svm.SVC(gamma='auto'), {'C': [1,10,20],'kernel': ['rbf','linear']}, \n    cv=5, return_train_score=False, n_iter=2)\nrs.fit(iris.data, iris.target)\n\nfrom sklearn.ensemble import BaggingClassifier\n\nbag_model = BaggingClassifier(\n    base_estimator=DecisionTreeClassifier(), \n    n_estimators=100, \n    max_samples=0.8, \n    oob_score=True,\n    random_state=0\n)\nbag_model.fit(X_train, y_train)\n`.trim(); // const stack = ``.trim();\n\nclass LogisticReg extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"Scikit Learn (common algoritham) - Modelling Process\"), \"Rather than focusing on loading, manipulating and summarising data, Scikit-learn library is focused on modeling the data. Some of the most popular groups of models provided by Sklearn are as follows \\u2212\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }), \"We can do following with scikit Learn.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"Classification: \"), \"SVM, nearest neighbors, random forest, logistic regression, etc.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"Regression: \"), \"Lasso, ridge regression, etc.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"Clustering: \"), \"k-means, spectral clustering, etc.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"Dimensionality reduction: \"), \"PCA, feature selection, matrix factorization, etc.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"Model selection: \"), \"Grid search, cross-validation, metrics.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"Preprocessing: \"), \".Feature extraction, normalization\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"Dataset Loading:\"), \"A collection of data is called dataset. It is having the following two components.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), \"Dataset having the following two components.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"Features: \"), \"The variables of data are called its features.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"Feature matrix: \"), \"It is the collection of features, in case there are more than one.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"Feature Names: \"), \"It is the list of all the names of the features.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, \"Response: \"), \"It is the output variable that basically depends upon the feature variables.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"Response Vector: \"), \"It is used to represent response column. Generally, we have just one response column.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"Target Names: \"), \"It represent the possible values taken by a response vector.\"))), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: sklearn,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, \"Some popular groups of models provided by scikit-learn include:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, \"Clustering: \"), \"For grouping unlabeled data such as KMeans.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Cross Validation: \"), \"For estimating the performance of supervised models on unseen data.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, \"Datasets: \"), \"For test datasets and for generating datasets with specific properties for investigating model behavior.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, \"Dimensionality Reduction: \"), \"For reducing the number of attributes in data for summarization, visualization and feature selection such as Principal component analysis.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, \"Ensemble methods: \"), \"For combining the predictions of multiple supervised models.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, \"Feature extraction: \"), \"For defining attributes in image and text data.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"Feature selection: \"), \"For identifying meaningful attributes from which to create supervised models.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, \"Parameter Tuning: \"), \"For getting the most out of supervised models.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, \"Manifold Learning: \"), \"For summarizing and depicting complex multi-dimensional data.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, \"Splitting the dataset\"), \"To check the accuracy of our model, we can split the dataset into two pieces-a training set and a testing set.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: accuracy,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, \"Train the Model\"), \"Next, we can use our dataset to train some prediction-model. ML algorithms have a consistent interface for fitting, predicting accuracy, recall etc.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: trains,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, \"sklearn Models\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: stack,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(LogisticReg);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/ml/deepMl/logisticRegrations.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","sklearn","trim","accuracy","trains","stack","LogisticReg","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst sklearn = `\nfrom sklearn.datasets import load_iris\n\niris = load_iris()\nX = iris.data\ny = iris.target\n\nfeature_names = iris.feature_names\ntarget_names = iris.target_names\n\nprint(\"Feature names:\", feature_names)\nprint(\"Target names:\", target_names)\nprint(\"First 10 rows of X\", X[:10])\n`.trim();\n\nconst accuracy = `\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 1)\n\nX_train.shape\nX_test.shape\n\ny_train.shape\ny_test.shape\n`.trim();\n\nconst trains = `\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import metrics\n\nclassifier_knn = KNeighborsClassifier(n_neighbors = 3)\nclassifier_knn.fit(X_train, y_train)\ny_pred = classifier_knn.predict(X_test)\n\n# Finding accuracy by comparing actual response values(y_test)with predicted response value(y_pred)\nprint(\"Accuracy:\", metrics.accuracy_score(y_test, y_pred))\n\n# Providing sample data and the model will make prediction out of that data\nsample = [[5, 5, 3, 2], [2, 4, 3, 5]]\npreds = classifier_knn.predict(sample)\n`.trim();\n\nconst stack = `\nfrom sklearn import linear_model\nreg = linear_model.LinearRegression()  \n\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train, Y_train)                       \n\nfrom sklearn.preprocessing import StandardScaler  \nsc_X = StandardScaler()\n\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\n\nfrom sklearn.svm import SVC\nsvm = SVC(gamma='auto') \n\nfrom sklearn.svm import SVC\nmodel = SVC()\nmodel.fit(X_train, y_train)\n\nfrom sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators=40)                                                      \n\nfrom sklearn.model_selection import KFold\nkf = KFold(n_splits=3)\n\nfrom sklearn.neighbors import KNeighborsClassifier \nknn = KNeighborsClassifier(n_neighbors=10)\n\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscaler.fit(df[['Income($)']])\n\nfrom sklearn.pipeline import Pipeline\nclf = Pipeline([('vectorizer', CountVectorizer()),('nb', MultinomialNB())])\nclf.fit(X_train, y_train)\n\nfrom sklearn.preprocessing import LabelEncoder\nle_company = LabelEncoder()\n\nfrom sklearn import tree\nmodel = tree.DecisionTreeClassifier()\nmodel.fit(inputs_n, target)\n\nfrom sklearn.decomposition import PCA\npca = PCA(0.95)\nX_pca = pca.fit_transform(X)\n\nfrom sklearn import preprocessing\nencoder = preprocessing.LabelEncoder()\nencoder.fit(input_labels)\n\nfrom sklearn.linear_model import Ridge                                                  \nridge_reg= Ridge(alpha=50, max_iter=100, tol=0.1) \nridge_reg.fit(train_X, train_y)\n\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.tree import DecisionTreeClassifier\nscores = cross_val_score(DecisionTreeClassifier(), X, y, cv=5)\n\nfrom sklearn.model_selection import GridSearchCV\nclf = GridSearchCV(svm.SVC(gamma='auto'), {'C': [1,10,20], 'kernel': ['rbf','linear']}, cv=5, return_train_score=False)\nclf.fit(iris.data, iris.target)\n\nfrom sklearn.model_selection import RandomizedSearchCV\nrs = RandomizedSearchCV(svm.SVC(gamma='auto'), {'C': [1,10,20],'kernel': ['rbf','linear']}, \n    cv=5, return_train_score=False, n_iter=2)\nrs.fit(iris.data, iris.target)\n\nfrom sklearn.ensemble import BaggingClassifier\n\nbag_model = BaggingClassifier(\n    base_estimator=DecisionTreeClassifier(), \n    n_estimators=100, \n    max_samples=0.8, \n    oob_score=True,\n    random_state=0\n)\nbag_model.fit(X_train, y_train)\n`.trim();\n\n// const stack = ``.trim();\n\n\n\nclass LogisticReg extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Scikit Learn (common algoritham) - Modelling Process</h3>\n              Rather than focusing on loading, manipulating and summarising data, Scikit-learn library is focused on modeling the data. Some of the most popular groups of models provided by Sklearn are as follows −\n              <br />\n              <br />\n              We can do following with scikit Learn.\n              <ul>\n                <li><b>Classification: </b>SVM, nearest neighbors, random forest, logistic regression, etc.</li>\n                <li><b>Regression: </b>Lasso, ridge regression, etc.</li>\n                <li><b>Clustering: </b>k-means, spectral clustering, etc.</li>\n                <li><b>Dimensionality reduction: </b>PCA, feature selection, matrix factorization, etc.</li>\n                <li><b>Model selection: </b>Grid search, cross-validation, metrics.</li>\n                <li><b>Preprocessing: </b>.Feature extraction, normalization</li>\n              </ul>\n              <br />\n              <b>Dataset Loading:</b>A collection of data is called dataset. It is having the following two components.\n              <br />\n              Dataset having the following two components.\n              <ul>\n                <li><b>Features: </b>The variables of data are called its features.</li>\n                <ul>\n                  <li><b>Feature matrix: </b>It is the collection of features, in case there are more than one.</li>\n                  <li><b>Feature Names: </b>It is the list of all the names of the features.</li>\n                </ul>\n                <br />\n                <li><b>Response: </b>It is the output variable that basically depends upon the feature variables.</li>\n                <ul>\n                  <li><b>Response Vector: </b>It is used to represent response column. Generally, we have just one response column.</li>\n                  <li><b>Target Names: </b>It represent the possible values taken by a response vector.</li>\n                </ul>\n              </ul>\n\n              <div style={titles}>\n                <PrismCode\n                  code={sklearn}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Some popular groups of models provided by scikit-learn include:</b>\n              <ul>\n                <li><b>Clustering: </b>For grouping unlabeled data such as KMeans.</li>\n                <li><b>Cross Validation: </b>For estimating the performance of supervised models on unseen data.</li>\n                <li><b>Datasets: </b>For test datasets and for generating datasets with specific properties for\n                  investigating model behavior.</li>\n                <li><b>Dimensionality Reduction: </b>For reducing the number of attributes in data for summarization,\n                  visualization and feature selection such as Principal component analysis.</li>\n                <li><b>Ensemble methods: </b>For combining the predictions of multiple supervised models.</li>\n                <li><b>Feature extraction: </b>For defining attributes in image and text data.</li>\n                <li><b>Feature selection: </b>For identifying meaningful attributes from which to create supervised models.</li>\n                <li><b>Parameter Tuning: </b>For getting the most out of supervised models.</li>\n                <li><b>Manifold Learning: </b>For summarizing and depicting complex multi-dimensional data.</li>\n              </ul>\n              <br />\n\n              <h3>Splitting the dataset</h3>\n              To check the accuracy of our model, we can split the dataset into two pieces-a training set and a testing set.\n              <div style={titles}>\n                <PrismCode\n                  code={accuracy}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Train the Model</h3>\n              Next, we can use our dataset to train some prediction-model. ML algorithms have a consistent interface for fitting, predicting\n              accuracy, recall etc.\n              <div style={titles}>\n                <PrismCode\n                  code={trains}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>sklearn Models</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={stack}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(LogisticReg));\n"]},"metadata":{},"sourceType":"module"}