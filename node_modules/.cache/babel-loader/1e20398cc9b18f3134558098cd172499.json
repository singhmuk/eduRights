{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/nodeJs/nodeDeep/2fa_speakearst.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst myDataBase = `\n{\"user\":{\"19aff1ae-35b2-407e-87bc-1b76b2ca54f7\":{\n  \"id\":\"19aff1ae-35b2-407e-87bc-1b76b2ca54f7\",\n  \"temp_secret\":{\"ascii\":\"[&JnaKh]&Wt9>6Z}Cc1]X$ZMDtIVMH2I\",\n    \"hex\":\"5b264a6e614b685d265774393e365a7d4363315d58245a4d447449564d483249\",\n    \"base32\":\"LMTEU3TBJNUF2JSXOQ4T4NS2PVBWGMK5LASFUTKEOREVMTKIGJEQ\",\n    \"otpauth_url\":\"otpauth://totp/SecretKey?secret=LMTEU3TBJNUF2JSXOQ4T4NS2PVBWGMK5LASFUTKEOREVMTKIGJEQ\"}},\n    \"96ae4a35-98a2-48ed-84dd-829c8e882117\":{\"id\":\"96ae4a35-98a2-48ed-84dd-829c8e882117\",\n\"temp_secret\":{\"ascii\":\"7(Jv}W/1i9}J6at0ci)y}m{*I9Xd5I{%\",\n  \"hex\":\"37284a767d572f3169397d4a36617430636929797d6d7b2a4939586435497b25\",\n  \"base32\":\"G4UEU5T5K4XTC2JZPVFDMYLUGBRWSKLZPVWXWKSJHFMGINKJPMSQ\",\n  \"otpauth_url\":\"otpauth://totp/SecretKey?secret=G4UEU5T5K4XTC2JZPVFDMYLUGBRWSKLZPVWXWKSJHFMGINKJPMSQ\"}},\n  \"93c92864-8297-40b6-8550-4e7d4666742d\":{\"id\":\"93c92864-8297-40b6-8550-4e7d4666742d\",\n    \"temp_secret\":{\"ascii\":\"OPCeDKax((p;q2Sm[Gny1p!nAChR86HE\",\n      \"hex\":\"4f504365444b61782828703b7132536d5b476e793170216e4143685238364845\",\n      \"base32\":\"J5IEGZKEJNQXQKBIOA5XCMSTNVNUO3TZGFYCC3SBINUFEOBWJBCQ\",\n      \"otpauth_url\":\"otpauth://totp/SecretKey?secret=J5IEGZKEJNQXQKBIOA5XCMSTNVNUO3TZGFYCC3SBINUFEOBWJBCQ\"}},\n      \"fa6f9da6-f9db-4caf-8e47-2f9309a11e6d\":{\"id\":\"fa6f9da6-f9db-4caf-8e47-2f9309a11e6d\",\n        \"temp_secret\":{\"ascii\":\"qhRSFJy.;}MM&csaA$5PcaFg}X)LNuoQ\",\n          \"hex\":\"71685253464a792e3b7d4d4d2663736141243550636146677d58294c4e756f51\",\n          \"base32\":\"OFUFEU2GJJ4S4O35JVGSMY3TMFASINKQMNQUMZ35LAUUYTTVN5IQ\",\n          \"otpauth_url\":\"otpauth://totp/SecretKey?secret=OFUFEU2GJJ4S4O35JVGSMY3TMFASINKQMNQUMZ35LAUUYTTVN5IQ\"}\n          }\n        }\n      }`.trim();\nconst server = `\n\nconst express = require(\"express\");\nconst bodyParser = require('body-parser');\nconst JsonDB = require('node-json-db').JsonDB;\nconst Config = require('node-json-db/dist/lib/JsonDBConfig').Config;\nconst uuid = require(\"uuid\");\nconst speakeasy = require(\"speakeasy\");\nconst app = express();\n\n\nvar db = new JsonDB(new Config(\"myDataBase\", true, false, '/'));\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post(\"/api/register\", (req, res) => {\n  const id = uuid.v4();\n  try {\n    const path = '/user/'$'{id}';\n    const temp_secret = speakeasy.generateSecret();     // Create temporary secret until it verified\n    \n    db.push(path, { id, temp_secret });                 // Create user in the database\n    res.json({ id, secret: temp_secret.base32 })        // Send user id and base32 key to user\n  } catch(e) {\n    console.log(e);\n    res.status(500).json({ message: 'Error generating secret key'})\n  }\n})\n\napp.post(\"/api/verify\", (req,res) => {\n  const { userId, token } = req.body;\n  try {\n    const path = '/user/'$'{userId}';                       // Retrieve user from database\n    const user = db.getData(path);\n    console.log({ user })\n    const { base32: secret } = user.temp_secret;\n    const verified = speakeasy.totp.verify({\n      secret,\n      encoding: 'base32',\n      token\n    });\n    if (verified) {\n      db.push(path, { id: userId, secret: user.temp_secret });      // Update user data\n      res.json({ verified: true })\n    } else {\n      res.json({ verified: false})\n    }\n  } catch(error) {\n    console.error(error);\n    res.status(500).json({ message: 'Error retrieving user'})\n  };\n})\n\napp.post(\"/api/validate\", (req,res) => {\n  const { userId, token } = req.body;\n  try {\n    const path = '/user/'$'{userId}';                 // Retrieve user from database\n    const user = db.getData(path);\n    console.log({ user })\n    const { base32: secret } = user.secret;\n    const tokenValidates = speakeasy.totp.verify({  // Returns true if the token matches\n      secret,\n      encoding: 'base32',\n      token,\n      window: 1\n    });\n    if (tokenValidates) {\n      res.json({ validated: true })\n    } else {\n      res.json({ validated: false})\n    }\n  } catch(error) {\n    console.error(error);\n    res.status(500).json({ message: 'Error retrieving user'})\n  };\n})\n\nconst port = 5000;\n\napp.listen(port, () => console.log('App is running on PORT.'));`.trim();\nconst awaitPat = `\nGET: localhost:5000/api\nPOST: localhost:5000/api/register\n\nPOST: localhost:5000/api/verify\n      {\n        \"userid\":\"fa6f9da6-f9db-4caf-8e47-2f9309a11e6d\",\n         \"token\":\"132276\"\n      }`.trim();\n\nclass TwoFA extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"2fa-speakeasy-example-master\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"myDataBase.json\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: myDataBase,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, \"server.js\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }), \"The second argument is used to tell the DB to save after each push If you put false, you'll have to call the save() method.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), \"The third argument is to ask JsonDB to save the database in an human readable format. (default false) The last argument is the separator. By default it's slash (/).\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: server,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"notes\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: awaitPat,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(TwoFA);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/nodeJs/nodeDeep/2fa_speakearst.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","myDataBase","trim","server","awaitPat","TwoFA","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst myDataBase = `\n{\"user\":{\"19aff1ae-35b2-407e-87bc-1b76b2ca54f7\":{\n  \"id\":\"19aff1ae-35b2-407e-87bc-1b76b2ca54f7\",\n  \"temp_secret\":{\"ascii\":\"[&JnaKh]&Wt9>6Z}Cc1]X$ZMDtIVMH2I\",\n    \"hex\":\"5b264a6e614b685d265774393e365a7d4363315d58245a4d447449564d483249\",\n    \"base32\":\"LMTEU3TBJNUF2JSXOQ4T4NS2PVBWGMK5LASFUTKEOREVMTKIGJEQ\",\n    \"otpauth_url\":\"otpauth://totp/SecretKey?secret=LMTEU3TBJNUF2JSXOQ4T4NS2PVBWGMK5LASFUTKEOREVMTKIGJEQ\"}},\n    \"96ae4a35-98a2-48ed-84dd-829c8e882117\":{\"id\":\"96ae4a35-98a2-48ed-84dd-829c8e882117\",\n\"temp_secret\":{\"ascii\":\"7(Jv}W/1i9}J6at0ci)y}m{*I9Xd5I{%\",\n  \"hex\":\"37284a767d572f3169397d4a36617430636929797d6d7b2a4939586435497b25\",\n  \"base32\":\"G4UEU5T5K4XTC2JZPVFDMYLUGBRWSKLZPVWXWKSJHFMGINKJPMSQ\",\n  \"otpauth_url\":\"otpauth://totp/SecretKey?secret=G4UEU5T5K4XTC2JZPVFDMYLUGBRWSKLZPVWXWKSJHFMGINKJPMSQ\"}},\n  \"93c92864-8297-40b6-8550-4e7d4666742d\":{\"id\":\"93c92864-8297-40b6-8550-4e7d4666742d\",\n    \"temp_secret\":{\"ascii\":\"OPCeDKax((p;q2Sm[Gny1p!nAChR86HE\",\n      \"hex\":\"4f504365444b61782828703b7132536d5b476e793170216e4143685238364845\",\n      \"base32\":\"J5IEGZKEJNQXQKBIOA5XCMSTNVNUO3TZGFYCC3SBINUFEOBWJBCQ\",\n      \"otpauth_url\":\"otpauth://totp/SecretKey?secret=J5IEGZKEJNQXQKBIOA5XCMSTNVNUO3TZGFYCC3SBINUFEOBWJBCQ\"}},\n      \"fa6f9da6-f9db-4caf-8e47-2f9309a11e6d\":{\"id\":\"fa6f9da6-f9db-4caf-8e47-2f9309a11e6d\",\n        \"temp_secret\":{\"ascii\":\"qhRSFJy.;}MM&csaA$5PcaFg}X)LNuoQ\",\n          \"hex\":\"71685253464a792e3b7d4d4d2663736141243550636146677d58294c4e756f51\",\n          \"base32\":\"OFUFEU2GJJ4S4O35JVGSMY3TMFASINKQMNQUMZ35LAUUYTTVN5IQ\",\n          \"otpauth_url\":\"otpauth://totp/SecretKey?secret=OFUFEU2GJJ4S4O35JVGSMY3TMFASINKQMNQUMZ35LAUUYTTVN5IQ\"}\n          }\n        }\n      }`.trim();\n\nconst server = `\n\nconst express = require(\"express\");\nconst bodyParser = require('body-parser');\nconst JsonDB = require('node-json-db').JsonDB;\nconst Config = require('node-json-db/dist/lib/JsonDBConfig').Config;\nconst uuid = require(\"uuid\");\nconst speakeasy = require(\"speakeasy\");\nconst app = express();\n\n\nvar db = new JsonDB(new Config(\"myDataBase\", true, false, '/'));\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post(\"/api/register\", (req, res) => {\n  const id = uuid.v4();\n  try {\n    const path = '/user/'$'{id}';\n    const temp_secret = speakeasy.generateSecret();     // Create temporary secret until it verified\n    \n    db.push(path, { id, temp_secret });                 // Create user in the database\n    res.json({ id, secret: temp_secret.base32 })        // Send user id and base32 key to user\n  } catch(e) {\n    console.log(e);\n    res.status(500).json({ message: 'Error generating secret key'})\n  }\n})\n\napp.post(\"/api/verify\", (req,res) => {\n  const { userId, token } = req.body;\n  try {\n    const path = '/user/'$'{userId}';                       // Retrieve user from database\n    const user = db.getData(path);\n    console.log({ user })\n    const { base32: secret } = user.temp_secret;\n    const verified = speakeasy.totp.verify({\n      secret,\n      encoding: 'base32',\n      token\n    });\n    if (verified) {\n      db.push(path, { id: userId, secret: user.temp_secret });      // Update user data\n      res.json({ verified: true })\n    } else {\n      res.json({ verified: false})\n    }\n  } catch(error) {\n    console.error(error);\n    res.status(500).json({ message: 'Error retrieving user'})\n  };\n})\n\napp.post(\"/api/validate\", (req,res) => {\n  const { userId, token } = req.body;\n  try {\n    const path = '/user/'$'{userId}';                 // Retrieve user from database\n    const user = db.getData(path);\n    console.log({ user })\n    const { base32: secret } = user.secret;\n    const tokenValidates = speakeasy.totp.verify({  // Returns true if the token matches\n      secret,\n      encoding: 'base32',\n      token,\n      window: 1\n    });\n    if (tokenValidates) {\n      res.json({ validated: true })\n    } else {\n      res.json({ validated: false})\n    }\n  } catch(error) {\n    console.error(error);\n    res.status(500).json({ message: 'Error retrieving user'})\n  };\n})\n\nconst port = 5000;\n\napp.listen(port, () => console.log('App is running on PORT.'));`.trim();\n\nconst awaitPat = `\nGET: localhost:5000/api\nPOST: localhost:5000/api/register\n\nPOST: localhost:5000/api/verify\n      {\n        \"userid\":\"fa6f9da6-f9db-4caf-8e47-2f9309a11e6d\",\n         \"token\":\"132276\"\n      }`.trim();\n\n\nclass TwoFA extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>2fa-speakeasy-example-master</h3>\n              <b>myDataBase.json</b>\n              <div style={titles}>\n                <PrismCode\n                  code={myDataBase}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>server.js</b><br/>\n              The second argument is used to tell the DB to save after each push\n              If you put false, you'll have to call the save() method.<br/>\n              The third argument is to ask JsonDB to save the database in an human readable format. (default false)\n              The last argument is the separator. By default it's slash (/).\n              <div style={titles}>\n                <PrismCode\n                  code={server}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>notes</b>\n              <div style={titles}>\n                <PrismCode\n                  code={awaitPat}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(TwoFA));\n"]},"metadata":{},"sourceType":"module"}