{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/mongoDB/deepMongodb/gridFs.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst mongofiles = `mongofiles.exe -d gridfs put song.mp3`.trim();\nconst chunks = `> db.fs.chunks.find({files_id:ObjectId(\"5ef6621233e86dcb54461e54\")})\n> db.fs.chunks.find({},{_id:0,data:0})`.trim();\nconst customers = `db.customers([{\n      name:'Max',\n      age:29,\n      address:{\n      city:'Munich'\n    },\n    hobbies:[\n      {Name:'Cooking'},\n      {name:'Sports'}\n    ]\n   }\n ]);\n `.trim();\n\nclass GridFs extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \".MongoDB - GridFS\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), \"GridFS is the MongoDB specification for storing and retrieving large files such as images, audio files, video files, etc. It is kind of a file system to store files but its data is stored within MongoDB collections. GridFS has the capability to store files even greater than its document size limit of 16MB.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), \"GridFS divides a file into chunks and stores each chunk of data in a separate document, each of maximum size 255k.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), \"GridFS by default uses two collections fs.files and fs.chunks to store the file's metadata and the chunks. Each chunk is identified by its unique _id ObjectId field. The fs.files serves as a parent document. The files_id field in the fs.chunks document links the chunk to its parent. Adding Files to GridFS :\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), \"Open your command prompt, navigate to the mongofiles.exe in the bin folder of MongoDB installation folder and type the following code (after put song.mp3 in same place) \\u2212\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: mongofiles,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"gridfs is collection name and song.mp3 is file name. To see the file's document in database, you can use find query\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), \"db.fs.files.find()\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), \"We can also see all the chunks present in fs.chunks collection related to the stored file with the following code, using the document id returned in the previous query\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: chunks,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Data is stored in json like syntax\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), \"BSON(Binary JSON) Data Formate:\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: customers,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(GridFs);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/mongoDB/deepMongodb/gridFs.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","mongofiles","trim","chunks","customers","GridFs","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = {backgroundColor:'#F0F8FF', padding:'1px', fontSize:'16px'}\n\nconst styles = theme => ({\n  paper: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1)\n  },\n  smMargin: {\n      margin: theme.spacing(1)\n  },\n  actionDiv: {\n      textAlign: \"center\"\n  }\n})\n\nconst mongofiles = `mongofiles.exe -d gridfs put song.mp3`.trim()\n\nconst chunks = `> db.fs.chunks.find({files_id:ObjectId(\"5ef6621233e86dcb54461e54\")})\n> db.fs.chunks.find({},{_id:0,data:0})`.trim()\n\nconst customers = `db.customers([{\n      name:'Max',\n      age:29,\n      address:{\n      city:'Munich'\n    },\n    hobbies:[\n      {Name:'Cooking'},\n      {name:'Sports'}\n    ]\n   }\n ]);\n `.trim()\n\n\nclass GridFs extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n            <Grid item xs={2}>\n                <Paper className={classes.paper}>\n                    <h4><Sidebar /></h4>\n                </Paper>\n            </Grid>\n<Grid item xs={10}>\n<Paper className={classes.paper}>\n<List>\n      <b>.MongoDB - GridFS</b>\n      <br/>\n      GridFS is the MongoDB specification for storing and retrieving large files such as images, audio\nfiles, video files, etc. It is kind of a file system to store files but its data is stored\nwithin MongoDB collections. GridFS has the capability to store files even greater than its\ndocument size limit of 16MB.<br/>\n<br/>\nGridFS divides a file into chunks and stores each chunk of data in a separate document, each of\nmaximum size 255k.<br/>\n<br/>\nGridFS by default uses two collections fs.files and fs.chunks to store the file's metadata and\nthe chunks. Each chunk is identified by its unique _id ObjectId field. The fs.files serves as a\nparent document. The files_id field in the fs.chunks document links the chunk to its parent.\nAdding Files to GridFS :<br/>\n<br/>\nOpen your command prompt, navigate to the mongofiles.exe in the bin folder of MongoDB\ninstallation folder and type the following code (after put song.mp3 in same place) −\n<br/>\n      <div style={titles}>\n      <PrismCode\n        code={mongofiles}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <i>gridfs is collection name and song.mp3 is file name. To see the file's document in database, you can use find query<br/>\ndb.fs.files.find()<br/>\nWe can also see all the chunks present in fs.chunks collection related to the stored file with the\nfollowing code, using the document id returned in the previous query</i>\n<br/>\n      <div style={titles}>\n      <PrismCode\n        code={chunks}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <br/>\n      <b>Data is stored in json like syntax</b>\n      <br/>\n      BSON(Binary JSON) Data Formate:\n      <div style={titles}>\n      <PrismCode\n        code={customers}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      </List>\n      </Paper>\n      </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(GridFs));\n"]},"metadata":{},"sourceType":"module"}