{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var code=\"\\n\\ndb.students.bulkWrite(\\n  [\\n     { insertOne :{\\n           \\\"document\\\" :{ name: \\\"Andrew\\\", major: \\\"Architecture\\\", gpa: 3.2 }\\n        }},\\n     { insertOne :{\\n           \\\"document\\\" :{ name: \\\"Terry\\\", major: \\\"Math\\\", gpa: 3.8 }\\n        }},\\n     { updateOne :{\\n           filter : { name : \\\"Terry\\\" },\\n           update : { $set : { gpa : 4.0 } }\\n        }},\\n     { deleteOne :{ filter : { name : \\\"Kate\\\"} }\\n        },\\n     { replaceOne :{\\n           filter : { name : \\\"Claire\\\" },\\n           replacement : { name: \\\"Genny\\\", major: \\\"Counsling\\\", gpa: 2.4 }\\n        }}\\n],\\n{ordered: false}\\n);\\n\".trim();var indexing=\"\\ndb.stores.insertMany(\\n  [\\n    { _id: 1, name: \\\"Java Hut\\\", description: \\\"Coffee and cakes\\\" },\\n    { _id: 2, name: \\\"Burger Buns\\\", description: \\\"Gourmet hamburgers\\\" },\\n    { _id: 3, name: \\\"Coffee Shop\\\", description: \\\"Just coffee\\\" },\\n    { _id: 4, name: \\\"Clothes Clothes Clothes\\\", description: \\\"Discount clothing\\\" },\\n    { _id: 5, name: \\\"Java Shopping\\\", description: \\\"Indonesian goods\\\" }\\n  ]\\n)\\n\\ndb.stores.createIndex( { name: \\\"text\\\", description: \\\"text\\\" } )\\n\\ndb.stores.find({ $text: {$search: \\\"Coffee\\\" } })\\n\\ndb.stores.find({ $text: {$search: \\\"Java Hut Coffee\\\" } })\\n\\ndb.stores.find(\\n  { $text: { $search: \\\"java hut coffee\\\" } },\\n  { score: { $meta: \\\"textScore\\\" } }\\n).sort( { score: { $meta: \\\"textScore\\\" } } )\".trim();var aggregation=\"\\ndb.purchase_orders.insertMany(\\n  [\\n       {product: \\\"toothbrush\\\", total: 4.75, customer: \\\"Mike\\\"},\\n       {product: \\\"guitar\\\", total: 199.99, customer: \\\"Tom\\\"},\\n       {product: \\\"milk\\\", total: 11.33, customer: \\\"Mike\\\"},\\n       {product: \\\"pizza\\\", total: 8.50, customer: \\\"Karen\\\"},\\n       {product: \\\"toothbrush\\\", total: 4.75, customer: \\\"Karen\\\"},\\n       {product: \\\"pizza\\\", total: 4.75, customer: \\\"Dave\\\"}\\n       {product: \\\"toothbrush\\\", total: 4.75, customer: \\\"Mike\\\"},\\n  ]\\n)\\n\\n// find out how many toothbrushes were sold\\ndb.purchase_orders.count({product: \\\"toothbrush\\\"})\\n\\n// Find list of all products sold\\ndb.purchase_orders.distinct(\\\"product\\\")\\n\\n// Find the total amount of money spent by each customer\\ndb.purchase_orders.aggregate([\\n       {$match: {} },\\n       {$group: {_id: \\\"$customer\\\", total: { $sum: \\\"$total\\\"} } }\\n  ])\\n\\n// Find how much has been spent on each product and sort it by price\\ndb.purchase_orders.aggregate([\\n       {$match: {} },\\n       {$group: {_id: \\\"$product\\\", total: { $sum: \\\"$total\\\"} } },\\n       {$sort: {total: -1}}\\n  ])\\n\\n// Find how much money each customer has spent on toothbrushes and pizza\\ndb.purchase_orders.aggregate([\\n       {$match: {product: {$in: [\\\"toothbrush\\\", \\\"pizza\\\"]} } },\\n       {$group: {_id: \\\"$product\\\", total: { $sum: \\\"$total\\\"} } },\\n  ])\".trim();var search=\"\\n  //Creating Text Index\\n  db.posts.insert({\\n    \\\"post_text\\\": \\\"enjoy the mongodb articles on tutorialspoint\\\",\\n    \\\"tags\\\": [\\\"mongodb\\\", \\\"tutorialspoint\\\"]\\n }\\n {\\n   \\\"post_text\\\" : \\\"writing tutorials on mongodb\\\",\\n   \\\"tags\\\" : [ \\\"mongodb\\\", \\\"tutorial\\\" ]\\n })\\n \\n \\n //We will create a text index on post_text field so that we can search inside our posts' text \\u2212\\n db.posts.createIndex({post_text:\\\"text\\\"})\\n{\\n\\t\\\"createdCollectionAutomatically\\\" : true,\\n\\t\\\"numIndexesBefore\\\" : 1,\\n\\t\\\"numIndexesAfter\\\" : 2,\\n\\t\\\"ok\\\" : 1\\n}\\n\\n\\n//Using Text Index\\nNow that we have created the text index on post_text field, we will search for all the posts having the word \\ntutorialspoint in their text.\\ndb.posts.find({$text:{$search:\\\"tutorialspoint\\\"}}).pretty()\\n{\\n\\t\\\"_id\\\" : ObjectId(\\\"5dd7ce28f1dd4583e7103fe0\\\"),\\n\\t\\\"post_text\\\" : \\\"enjoy the mongodb articles on tutorialspoint\\\",\\n\\t\\\"tags\\\" : [\\n\\t\\t\\\"mongodb\\\",\\n\\t\\t\\\"tutorialspoint\\\"\\n\\t]\\n}\\n  \".trim();var deleting=\"\\n  db.posts.getIndexes()[\\n\\t{\\\"v\\\" : 2,\\t\\\"key\\\" : {\\\"_id\\\" : 1}, \\\"name\\\" : \\\"_id_\\\",\\t\\\"ns\\\" : \\\"mydb.posts\\\"},\\n\\t{\\\"v\\\" : 2,\\t\\\"key\\\" : { \\\"fts\\\" : \\\"text\\\", \\\"ftsx\\\" : 1},\\t\\\"name\\\" : \\\"post_text_text\\\",\\\"ns\\\" : \\\"mydb.posts\\\",\\n\\t\\t\\\"weights\\\" : {\\\"post_text\\\" : 1},\\n\\t\\t\\\"default_language\\\" : \\\"english\\\",\\n\\t\\t\\\"language_override\\\" : \\\"language\\\",\\n\\t\\t\\\"textIndexVersion\\\" : 3\\n  }\\n]\\n\\n\\n//After getting the name of your index from above query, run the following command. Here, post_text_text is the name \\nof the index.\\ndb.posts.dropIndex(\\\"post_text_text\\\")\\n\".trim();var BulkWright=/*#__PURE__*/function(_Component){_inherits(BulkWright,_Component);function BulkWright(){_classCallCheck(this,BulkWright);return _possibleConstructorReturn(this,_getPrototypeOf(BulkWright).apply(this,arguments));}_createClass(BulkWright,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"b\",null,\"Bulk Write Operations\"),React.createElement(\"br\",null),React.createElement(\"br\",null),\"The \",React.createElement(\"b\",null,\"db.collection.bulkWrite()\"),\" method provides the ability to perform bulk insert, update, and remove operations. MongoDB also supports bulk insert through the \",React.createElement(\"b\",null,\"db.collection.insertMany().\"),React.createElement(\"br\",null),React.createElement(\"br\",null),\"Since ordered is true by default, only the first operation completes successfully. The rest are not executed. Running the bulkWrite() with ordered : false would allow the remaining operations to complete despite the error.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:code,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Aggregation\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:aggregation,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Text Indexing\"),\"MongoDB provides text indexes to support text search queries on string content. text indexes can include any field whose value is a string or an array of string elements.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:indexing,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Text Search\"),\"The Text Search uses stemming techniques to look for specified words in the string fields by dropping stemming stop words like a, an, the, etc.\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:search,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Deleting Text Index\"),\"To delete an existing text index, first find the name of index using the following query \\u2212\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:deleting,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return BulkWright;}(Component);export default withStyles(styles)(BulkWright);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/mongoDB/deepMongodb/bulkRight.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","code","trim","indexing","aggregation","search","deleting","BulkWright","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = {backgroundColor:'#F0F8FF', padding:'1px', fontSize:'16px'}\n\nconst styles = theme => ({\n  paper: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1)\n  },\n  smMargin: {\n      margin: theme.spacing(1)\n  },\n  actionDiv: {\n      textAlign: \"center\"\n  }\n})\n\nconst code = `\n\ndb.students.bulkWrite(\n  [\n     { insertOne :{\n           \"document\" :{ name: \"Andrew\", major: \"Architecture\", gpa: 3.2 }\n        }},\n     { insertOne :{\n           \"document\" :{ name: \"Terry\", major: \"Math\", gpa: 3.8 }\n        }},\n     { updateOne :{\n           filter : { name : \"Terry\" },\n           update : { $set : { gpa : 4.0 } }\n        }},\n     { deleteOne :{ filter : { name : \"Kate\"} }\n        },\n     { replaceOne :{\n           filter : { name : \"Claire\" },\n           replacement : { name: \"Genny\", major: \"Counsling\", gpa: 2.4 }\n        }}\n],\n{ordered: false}\n);\n`.trim();\n\n\nconst indexing = `\ndb.stores.insertMany(\n  [\n    { _id: 1, name: \"Java Hut\", description: \"Coffee and cakes\" },\n    { _id: 2, name: \"Burger Buns\", description: \"Gourmet hamburgers\" },\n    { _id: 3, name: \"Coffee Shop\", description: \"Just coffee\" },\n    { _id: 4, name: \"Clothes Clothes Clothes\", description: \"Discount clothing\" },\n    { _id: 5, name: \"Java Shopping\", description: \"Indonesian goods\" }\n  ]\n)\n\ndb.stores.createIndex( { name: \"text\", description: \"text\" } )\n\ndb.stores.find({ $text: {$search: \"Coffee\" } })\n\ndb.stores.find({ $text: {$search: \"Java Hut Coffee\" } })\n\ndb.stores.find(\n  { $text: { $search: \"java hut coffee\" } },\n  { score: { $meta: \"textScore\" } }\n).sort( { score: { $meta: \"textScore\" } } )`.trim();\n\n\nconst aggregation = `\ndb.purchase_orders.insertMany(\n  [\n       {product: \"toothbrush\", total: 4.75, customer: \"Mike\"},\n       {product: \"guitar\", total: 199.99, customer: \"Tom\"},\n       {product: \"milk\", total: 11.33, customer: \"Mike\"},\n       {product: \"pizza\", total: 8.50, customer: \"Karen\"},\n       {product: \"toothbrush\", total: 4.75, customer: \"Karen\"},\n       {product: \"pizza\", total: 4.75, customer: \"Dave\"}\n       {product: \"toothbrush\", total: 4.75, customer: \"Mike\"},\n  ]\n)\n\n// find out how many toothbrushes were sold\ndb.purchase_orders.count({product: \"toothbrush\"})\n\n// Find list of all products sold\ndb.purchase_orders.distinct(\"product\")\n\n// Find the total amount of money spent by each customer\ndb.purchase_orders.aggregate([\n       {$match: {} },\n       {$group: {_id: \"$customer\", total: { $sum: \"$total\"} } }\n  ])\n\n// Find how much has been spent on each product and sort it by price\ndb.purchase_orders.aggregate([\n       {$match: {} },\n       {$group: {_id: \"$product\", total: { $sum: \"$total\"} } },\n       {$sort: {total: -1}}\n  ])\n\n// Find how much money each customer has spent on toothbrushes and pizza\ndb.purchase_orders.aggregate([\n       {$match: {product: {$in: [\"toothbrush\", \"pizza\"]} } },\n       {$group: {_id: \"$product\", total: { $sum: \"$total\"} } },\n  ])`.trim();\n  \n  \n  const search = `\n  //Creating Text Index\n  db.posts.insert({\n    \"post_text\": \"enjoy the mongodb articles on tutorialspoint\",\n    \"tags\": [\"mongodb\", \"tutorialspoint\"]\n }\n {\n   \"post_text\" : \"writing tutorials on mongodb\",\n   \"tags\" : [ \"mongodb\", \"tutorial\" ]\n })\n \n \n //We will create a text index on post_text field so that we can search inside our posts' text −\n db.posts.createIndex({post_text:\"text\"})\n{\n\t\"createdCollectionAutomatically\" : true,\n\t\"numIndexesBefore\" : 1,\n\t\"numIndexesAfter\" : 2,\n\t\"ok\" : 1\n}\n\n\n//Using Text Index\nNow that we have created the text index on post_text field, we will search for all the posts having the word \ntutorialspoint in their text.\ndb.posts.find({$text:{$search:\"tutorialspoint\"}}).pretty()\n{\n\t\"_id\" : ObjectId(\"5dd7ce28f1dd4583e7103fe0\"),\n\t\"post_text\" : \"enjoy the mongodb articles on tutorialspoint\",\n\t\"tags\" : [\n\t\t\"mongodb\",\n\t\t\"tutorialspoint\"\n\t]\n}\n  `.trim();\n  \n  \n  const deleting = `\n  db.posts.getIndexes()[\n\t{\"v\" : 2,\t\"key\" : {\"_id\" : 1}, \"name\" : \"_id_\",\t\"ns\" : \"mydb.posts\"},\n\t{\"v\" : 2,\t\"key\" : { \"fts\" : \"text\", \"ftsx\" : 1},\t\"name\" : \"post_text_text\",\"ns\" : \"mydb.posts\",\n\t\t\"weights\" : {\"post_text\" : 1},\n\t\t\"default_language\" : \"english\",\n\t\t\"language_override\" : \"language\",\n\t\t\"textIndexVersion\" : 3\n  }\n]\n\n\n//After getting the name of your index from above query, run the following command. Here, post_text_text is the name \nof the index.\ndb.posts.dropIndex(\"post_text_text\")\n`.trim();\n\n\nclass BulkWright extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n            <Grid item xs={2}>\n                <Paper className={classes.paper}>\n                    <h4><Sidebar /></h4>\n                </Paper>\n            </Grid>\n            <Grid item xs={10}>\n              <Paper className={classes.paper}>\n                <List>\n                 <b>Bulk Write Operations</b>\n                 <br/>\n                 <br/>\n                 The <b>db.collection.bulkWrite()</b> method provides the ability to perform bulk insert, update, and remove operations. MongoDB also supports bulk insert through the <b>db.collection.insertMany().</b>\n                 <br/><br/>\n                 Since ordered is true by default, only the first operation completes successfully. The rest are not executed. Running the bulkWrite() with ordered : false would allow the remaining operations to complete despite the error.\n                   <div style={titles}>\n                      <PrismCode\n                        code={code}\n                        language=\"js\"\n                        plugins={[\"line-numbers\"]}\n                      />\n                    </div>\n                    <br/>\n                    <h3>Aggregation</h3>\n                    <div style={titles}>\n                      <PrismCode\n                        code={aggregation}\n                        language=\"js\"\n                        plugins={[\"line-numbers\"]}\n                      />\n                    </div>\n                    <br/>\n                    <h3>Text Indexing</h3>\n                    MongoDB provides text indexes to support text search queries on string content. text indexes can include any field whose value is a string or an array of string elements.\n                    <div style={titles}>\n                      <PrismCode\n                        code={indexing}\n                        language=\"js\"\n                        plugins={[\"line-numbers\"]}\n                      />\n                    </div>\n                    <br/>\n                    <h3>Text Search</h3>\n                    The Text Search uses stemming techniques to look for specified words in the string fields by dropping stemming stop words like a, an, the, etc.\n                    <br/>\n                    <div style={titles}>\n                      <PrismCode\n                        code={search}\n                        language=\"js\"\n                        plugins={[\"line-numbers\"]}\n                      />\n                    </div>\n                    <br/>\n                    <h3>Deleting Text Index</h3>\n                    To delete an existing text index, first find the name of index using the following query −\n                    <div style={titles}>\n                      <PrismCode\n                        code={deleting}\n                        language=\"js\"\n                        plugins={[\"line-numbers\"]}\n                      />\n                    </div>\n                    </List>\n                </Paper>\n              </Grid>\n            </Grid>\n          )\n        }\n      }\n\nexport default (withStyles(styles)(BulkWright));\n"]},"metadata":{},"sourceType":"module"}