{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/angularjsd/deepAngularjs/introAngularjs.js\";\nimport React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\nimport Graphs from \"../../../assets/dinjection.png\";\nconst titles = {\n  backgroundColor: \"#F0F8FF\",\n  padding: \"1px\",\n  fontSize: \"16px\"\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst redesign = {\n  height: 200,\n  width: 500\n};\nconst NgClass = `\n@Component({\n  selector: 'app-root',\n  template: '\n  <p [ngStyle] = \"{backgroundColor: getColor()}\" [ngClass] = \"{Online: serverStatus === 'Online'}\"> \n    Server  with ID {{serverID}} is {{serverStatus}}. \n  </p >,\n  styles: ['.Online{ color: yellow; }']'})\n\nexport class AppComponent {\n  serverID: number = 10;\n  serverStatus: string = 'Offline';\n\n  constructor () {\n  this.serverStatus = Math.random() > 0.5 ? 'Online' : 'Offline';\n  }\n\n  getServerStatus() {\n    return this.serverStatus;\n  }\n  getColor() {\n    return this.serverStatus === 'Online' ? 'green' : 'red';\n  }\n}`.trim();\nconst databinding = `\nDOM               Component\n<----{{value}}-----\n<-[propery]=\"value\" --\n--(event)=\"handler\" -->\n<-[(NgModule)]=\"propery\" --`.trim();\nconst property = `\nsyntax: [property]='expression\n\n//\n@Component({\n  selector: 'app-root',\n  template: '\n    <button (click)=\"toggleSecret()\">Toggle Secret</button>\n    <h3 [hidden]=\"secretTextHidden\">Property Binding</h3>\n  ',\n})\nexport class AppComponent {\n  secretTextHidden = false;\n\n  toggleSecret() {\n    this.secretTextHidden = !this.secretTextHidden;\n  }\n}\n`.trim();\nconst evtBinding = `\n@Component({\n  selector: 'app-root',\n  template: '\n    {{ name }}\n    <button (click)=\"nameChange()\">evt</button>\n  ',\n})\nexport class AppComponent {\n  name = 'Pikachu';\n\n  nameChange() {\n    this.name = 'Raichu';\n  }\n}`.trim();\nconst NgStyles = `\n//1\n<div [ngStyle]=\"{'color':green}\"></div>\nngStyle become much more useful when the value is dynamic.\n<div [ngStyle]=\"{'color': person.country==='UK' ? 'green' : 'red'}\"></div>\n\n\n//2\n@Component({\n  selector: 'app-root',\n  template: '\n  <p[ngStyle]=\"{backgroundColor: 'green'}\"> Server with ID {{serverID}} is {{serverStatus}}.</p>\n  '})\nexport class AppComponent {\n  serverID: number = 10;\n  serverStatus: string = 'Offline';\n\n  constructor () {\n  this.serverStatus = Math.random() > 0.5 ? 'Online' : 'Offline';\n  }\n}`.trim();\nconst customDir = `\n//html\n<p appCustomdir>Custom directive</p>\n\n\n//ts\nimport { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[appCustomdir]'\n})\nexport class CustomdirDirective {\n\n  constructor(private el:ElementRef) { \n    el.nativeElement.style.color=\"green\"\n  }\n}\n`.trim();\nconst templateExpree = `\n<h3>{{username}}, welcome to Angular</h3>\n\n\n//The below javascript expressions are prohibited in template expression\n1. assignments (=, +=, -=, ...)\n2. new\n3. chaining expressions with ; or ,\n4. increment and decrement operators (++ and --)\n`.trim();\nconst templateState = `\n//template statements appear in quotes to the right of the = symbol like (event)=\"statement\".\n<button (click)=\"statement()\">Edit Profile</button>\n`.trim();\nconst twoWay = `\n@Component({\n  selector: 'app-root',\n  template: '\n    <input type=\"text\" [(ngModel)]=\"name\" placeholder=\"type here\" />\n    <h3>{{ name }}</h3>\n  ',\n})\nexport class AppComponent {\n  name = 'Angular 5';\n}\n`.trim();\nconst hostBinding = `\nimport { Component, ElementRef, HostBinding, HostListener} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '\n      <p>@HostBinding() & @HostListener()</p>\n  ',\n  providers:[]\n})\n\nexport class AppComponent{\n  constructor(private el:ElementRef){\n\n  }\n\n  @HostBinding('style.color') textColor: any;\n  ngOnInit(){\n    this.textColor=\"green\";\n  }\n\n  @HostListener('click') onClick(){\n    // alert('HostListener')\n    this.textColor = \"red\";\n  }\n\n  @HostListener('mouseover') onMouseHover(){\n    this.textColor = \"blue\";\n  }\n\n  @HostListener('mouseout') onMouseOut(){\n    this.textColor = \"pink\";\n  }\n}`.trim();\nconst parameters = `\n//myservice.ts\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class myService {\n  name = 'Mukesh';\n  constructor() {}\n}\n\n\n//app.component.ts\nimport { Component, Inject } from '@angular/core';\nimport { myService } from './myservice';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  constructor(@Inject(myService) myService: any) {\n    console.log(myService);\n  }\n}\n`.trim();\nconst makeServices = `\n//myService.ts\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class myService {\n  name = 'Mukesh';\n  sayHello() {\n    console.log(this.name);\n  }\n}\n\n\n//app.component.ts\nimport { myService } from './myservice';\n\n@Component({\n  selector: 'app-root',\n  template: '',\n})\nexport class AppComponent {\n  constructor(private myServices: myService) {\n    this.myServices.sayHello();\n  }\n}\n\n\n//app.module.ts\n@NgModule({\n  declarations: [AppComponent, Child],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    StoreModule.forRoot({}),\n  ],\n  providers: [myService],\n  bootstrap: [AppComponent],\n})\n`.trim();\nconst postals = `\n  class Number{\n    constructor(){}\n  }\n\n  class Address{\n    constructor(){}\n  }\n\n  class PostalDetails{\n    Number;\n    Address;\n    \n    constructor(){\n      this.Number = new Number();\n      this.Address = new Address();\n    }\n  }\n`.trim();\nconst postalsparams = `\nclass Number{\n  constructor(par){}\n}\n\nclass Address{\n  constructor(par){}\n}\n\nclass PostalDetails{\n  Number;\n  Address;\n  \n  constructor(){\n    this.Number = new Number();     //Error\n    this.Address = new Address();   //Error\n  }\n}\n`.trim();\nconst impdi = `\nclass PostalDetails{\n  number;\n  address;\n  \n  constructor(number, address){\n    this.number = number();    \n    this.address = address();  \n  }\n}\n`.trim();\nconst httpClients = `\nimport { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\ninterface Kafein {\n  name: string;\n  address: string;\n}\n\n@Component({\n  selector: 'app-root',\n  template: ' <tr *ngFor=\"let datas of httpData\">\n    <td>{{ datas.title }}</td>\n  </tr>',\n})\nexport class AppComponent {\n  url = 'https://jsonplaceholder.typicode.com/todos';\n  httpData: any;\n\n  constructor(private http: HttpClient) {}\n\n  ngOnInit() {\n    this.callApi();\n  }\n\n  callApi() {\n    this.http.get<Kafein[]>(this.url).subscribe((data) => {\n      this.httpData = data;\n    });\n  }\n}\n`.trim();\nconst reactiveforms = `\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-root',\n  template: '\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"form-group\">\n        <input type=\"text\" [ngClass]=\"{ 'is-invalid': submitted }\" />\n        <div *ngIf=\"submitted\">Enter text</div>\n      </div>\n\n      <button type=\"submit\">Register</button>\n    </form>\n  '',\n})\nexport class AppComponent implements OnInit {\n  form: any = FormGroup;\n  submitted = false;\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group({\n      name: ['', Validators.required],\n    });\n  }\n\n  onSubmit(): void {\n    this.submitted = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n  }\n}\n`.trim();\nconst formbuildes = `\n//FormGroup\nimport { FormGroup, FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-root',\n  template: '\n    <div [formGroup]=\"frmGroup\">\n      <input type=\"text\" formControlName=\"firstName\" /><br />\n      <input type=\"text\" formControlName=\"lastName\" />\n    </div>\n    <p>Is FormGroup Valid: {{ frmGroup.valid }}</p>\n  ',\n})\nexport class AppComponent {\n  name = 'Angular';\n  frmGroup = new FormGroup({\n    firstName: new FormControl('', []),\n    lastName: new FormControl('', []),\n  });\n\n  constructor() {\n    this.frmGroup.valueChanges.subscribe((val) => {\n      console.log(val.firstName);\n    });\n  }\n}\n\n\n//FormBuilder\nimport { FormGroup, FormBuilder } from '@angular/forms';\n\n@Component({\n  selector: 'app-root',\n  template: '\n    <form (ngSubmit)=\"save()\" [formGroup]=\"myGroup\">\n      FIRST NAME <input formControlName=\"firstName\" /> <br />\n      MIDDLE NAME <input formControlName=\"middleName\" /> <br />\n      LAST NAME<input formControlName=\"lastName\" />\n    </form>\n  ',\n})\nexport class AppComponent {\n  myGroup: any = FormGroup;\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.myGroup = this.fb.group({\n      firstName: 'Chethana',\n      middleName: [{ value: 'Dibbahalli', disabled: true }],\n      lastName: { value: 'DC', disabled: true },\n    });\n  }\n\n  save() {\n    console.log('Inside save' + this.myGroup.value);\n  }\n}\n\n`.trim();\n\nclass IntroAngulard extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    }, \"1. Please explain the various features of Angular.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }, \"Components: \"), \"Angular is a component-based framework, which means that applications are built by assembling components that represent different parts of the application's user interface. Components are reusable, self-contained, and can be easily combined to create complex user interfaces.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    }, \"Templates: \"), \" Angular uses templates to define the user interface of a component. Templates are written in HTML and contain Angular-specific syntax that allows for data binding and other features.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    }, \"Directives: \"), \"Angular provides a number of built-in directives that allow you to manipulate the DOM, add or remove elements, and apply conditional logic to your templates. You can also create custom directives to extend the functionality of Angular.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502\n      },\n      __self: this\n    }, \"Services: \"), \"Services are used to provide functionality that can be shared across different components of an application. Services can be used for things like fetching data from a server, performing complex calculations, or managing state.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510\n      },\n      __self: this\n    }, \"Dependency Injection: \"), \"Angular's dependency injection system allows you to easily manage dependencies between different components and services. Dependencies are injected into components and services through their constructors.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }, \"Routing: \"), \"Angular's routing system allows you to define routes for different parts of your application and navigate between them using URLs.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }, \"Forms: \"), \"Angular provides powerful support for building forms, including both template-driven and reactive forms. This includes features like form validation, form submission, and handling user input.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }, \"Observables: \"), \"Angular uses observables to handle asynchronous operations such as HTTP requests. Observables provide a way to work with asynchronous data streams in a more efficient and predictable way.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }, \"Testing: \"), \"Angular provides a number of tools and utilities for testing your application, including both unit tests and end-to-end tests. This includes features like the Angular testing library and the Protractor testing framework.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    }, \"Mobile Support: \"), \"Angular provides support for building mobile applications using technologies like Ionic and NativeScript.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    }, \"2. What is difference between package.json and package-lock.json.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    }, \"package.json: \"), \"This file is used to define the dependencies and other metadata of an application. It contains information about the application, such as its name, version, author, and dependencies required for the application to run. When you install a package using npm or yarn, the dependencies are listed in package.json.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    }, \"package.lock.json: \"), \"This file is used to keep track of the exact version of every package and its dependencies that are installed in an application. It is automatically generated by npm or yarn when a new package is installed or updated. The package-lock.json file ensures that the exact same version of a package and its dependencies are installed on all machines running the application. This helps to avoid dependency conflicts and ensures that the application runs consistently across different environments.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    }), \"In summary, package.json defines the metadata and dependencies required for the application to run, while package-lock.json is used to lock the dependencies to specific versions to ensure consistency across different machines.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584\n      },\n      __self: this\n    }, \"4. What is metadata\"), \"Metadata, Annotation and Decorator is same thing.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588\n      },\n      __self: this\n    }, \"metadata is information that is used to describe and configure a component, directive, pipe, or service. It is defined using decorators, which are functions that modify the behavior of a class or its members.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595\n      },\n      __self: this\n    }, \"The most common decorator used for defining metadata in Angular is the @Component decorator, which is used to define the metadata for a component. The metadata defined by this decorator includes information such as the component's selector, template, styles, and inputs and outputs.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603\n      },\n      __self: this\n    }, \"Decorator accept object. decorator are simply functions that return functions. decorator are invoke at runtime. decorator allows you to excuite functions.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609\n      },\n      __self: this\n    }), \"Metadata is used to decorate a class so that it can configure the expected behavior of the class. There are four main types of decorators:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615\n      },\n      __self: this\n    }, \"Class decorators: \"), \", @Component, @Directive, @NgModule, @Injectable, and @Pipes.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619\n      },\n      __self: this\n    }, \"Property decorators: \"), \"These decorators are used to modify the behavior of a class property. \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620\n      },\n      __self: this\n    }, \"Ex \"), \"@Input, @Output, @HostBinding, @ContentChild, @ContentChildren, @ViewChild, @ViewChildren.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    }, \"Method decorators: \"), \"These decorators are used to modify the behavior of a class method. \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626\n      },\n      __self: this\n    }, \"Ex \"), \"@HostListener.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630\n      },\n      __self: this\n    }, \"Parameter decorators for parameters inside class constructors\"), \"@Inject.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641\n      },\n      __self: this\n    }, \"@HostBinding: \"), \"Decorator is used to bind a property of a directive to a property of its host element. This allows the directive to set properties on the host element based on its own state or configuration.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648\n      },\n      __self: this\n    }, \"@HostListener: \"), \"Decorator is used to subscribe to events that occur on the host element of a directive. The host element is the element that the directive is attached to, and the @HostListener decorator is used to specify which events the directive should listen to.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: hostBinding,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665\n      },\n      __self: this\n    }, \"ii. Parameter decorators: \"), \"Used for parameters inside class constructors, e.g. @Inject, Optional.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668\n      },\n      __self: this\n    }), \"Inject() function provide another way to inject our services as dependency in various part of angular application.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671\n      },\n      __self: this\n    }), \"It introduced in angular 14.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: parameters,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681\n      },\n      __self: this\n    }, \"5. Explain Components, Modules and Services in Angular.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682\n      },\n      __self: this\n    }, \"Components: \"), \"a component is a building block for building user interfaces. A component is a type of directive that has its own view, data, and behavior. Components are the most basic building blocks of an Angular application, and they can be reused throughout the application to create a consistent user interface.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690\n      },\n      __self: this\n    }, \"key features: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 693\n      },\n      __self: this\n    }, \"Selector: \"), \"Components are identified by a selector, which is a CSS selector that identifies the HTML element that the component represents. The selector is used to tell Angular where to insert the component in the DOM.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700\n      },\n      __self: this\n    }, \"Template: \"), \"A component has its own template, which is the HTML code that defines the structure and layout of the component. The template can include data binding syntax, which allows the component to display dynamic data.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 706\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 707\n      },\n      __self: this\n    }, \"Decorator: \"), \"The @Component decorator is used to define the metadata for a component, including the selector, template, and other configuration options.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 713\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 714\n      },\n      __self: this\n    }, \"i. Modules \"), \"a module is a mechanism for organizing code into separate, reusable, and encapsulated units. A module can contain components, services, directives, and other types of Angular constructs that are needed for a particular feature or functionality in an application.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 720\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 721\n      },\n      __self: this\n    }), \"To define a module, we use the NgModule.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 723\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724\n      },\n      __self: this\n    }, \"Default module is app.module.ts.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725\n      },\n      __self: this\n    }, \"We can includes a module inside another module.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 726\n      },\n      __self: this\n    }, \"A module have at least one component. components declared inside \\\"declarations\\\" in module. while module inside \\\"imports\\\" in app.module.ts.\", \" \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731\n      },\n      __self: this\n    }, \"We can import a module and use inside another module. For injecting a module we use, exports:[ComponentName].\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735\n      },\n      __self: this\n    }, \"Every module is defined with a \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 736\n      },\n      __self: this\n    }, \"@NgModule\"), \" decorator.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 738\n      },\n      __self: this\n    }, \"Angular apps are modular and Angular has its own modularity system called NgModules.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 742\n      },\n      __self: this\n    }, \"A component cannot be import in two diffrent modules. If do than show runtime error. this is features module.\")), \"By default, modules are of two types:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 748\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 749\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 750\n      },\n      __self: this\n    }, \"Root Module: \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 752\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753\n      },\n      __self: this\n    }, \"Feature Module: \"), \"Every application can have only one root module whereas, it can have one or more feature modules.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 755\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 756\n      },\n      __self: this\n    }, \"A root module imports\\xA0BrowserModule,\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 757\n      },\n      __self: this\n    }, \"whereas a feature module imports\\xA0CommonModule.\")))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 761\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 762\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 763\n      },\n      __self: this\n    }, \"iii. Services \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 764\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 765\n      },\n      __self: this\n    }, \"Are a greate way to share information among classes that don't know each other.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 769\n      },\n      __self: this\n    }, \"Are basically a classes which may have some data, property or some functions. And we can use these data,property and functions in multiple files.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 774\n      },\n      __self: this\n    }, \"Services are objects which get instantiated only once during the lifetime of an application.\", \" \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 778\n      },\n      __self: this\n    }, \"Services can depend on other services.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 780\n      },\n      __self: this\n    }), \"A service is defined using a\\xA0\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 780\n      },\n      __self: this\n    }, \"@Injectable\"), \"\\xA0decorator. A function defined inside a service can be invoked from any component or directive.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 783\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 784\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 785\n      },\n      __self: this\n    }, \"providedIn: \"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 786\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: makeServices,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 787\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 793\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 794\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 795\n      },\n      __self: this\n    }, \"6. What are directives: @directive\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 796\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 797\n      },\n      __self: this\n    }, \"Directives are used to extend the power of the HTML attributes and to change the appearance or behavior of a DOM element.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 802\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 803\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 804\n      },\n      __self: this\n    }, \"Elements which change the appearence/ behavior of the DOM element. 3 types of Directives.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 808\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 809\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 810\n      },\n      __self: this\n    }, \"Component Directives:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 811\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 812\n      },\n      __self: this\n    }, \"Components is the special kind of directives, Becouse we have the template varriables.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 816\n      },\n      __self: this\n    }, \"Directives with own Template.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 817\n      },\n      __self: this\n    }, \"with the help of selector, @Component which is a decorator function is used to create a component directive.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 823\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 824\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 825\n      },\n      __self: this\n    }, \"Structural Directives:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 826\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 827\n      },\n      __self: this\n    }, \"Do manipulation in DOM.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 828\n      },\n      __self: this\n    }, \"Structural directive modifies or manipulates the structure of DOM by adding or removing DOM elements. it works on the structure of a DOM.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 833\n      },\n      __self: this\n    }, \"Structural directives which have a * sign before the directive. *ngIf and *ngFor.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 839\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 840\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 841\n      },\n      __self: this\n    }, \"Attribute Directives/ Behavioral Directives:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 842\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 843\n      },\n      __self: this\n    }, \"Do css related things.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 844\n      },\n      __self: this\n    }, \" Change appearence/ behavior of the DOM.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 845\n      },\n      __self: this\n    }, \"Attribute directives deal with the changing of look and behavior of the DOM element, component or another directive. Ex. NgStyle\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 852\n      },\n      __self: this\n    }), \"By default, angular provide two attribute directives\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 854\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 855\n      },\n      __self: this\n    }, \"1. NgClass: \"), \"dynamically, add or remove CSS class on the basis of the certain conditions.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 857\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 858\n      },\n      __self: this\n    }), \"Allows us to set the CSS class dynamically for a DOM element. we can use ngClass with string, array, object or component method.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 861\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 862\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 863\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: NgClass,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 864\n      },\n      __self: this\n    }))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 871\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 872\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 873\n      },\n      __self: this\n    }, \"2. NgStyle: \"), \"dynamically, add or remove styles on the basis of the certain conditions.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 875\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 876\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: NgStyles,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 877\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 883\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 884\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 885\n      },\n      __self: this\n    }, \"Custom directive ex. are with *ngIf, *ngFor...\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 886\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 887\n      },\n      __self: this\n    }, \"ng g directive mydirective\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 888\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: customDir,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 889\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 895\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 896\n      },\n      __self: this\n    }, \"7. What is difference between attribute and structural directives?\"), \"Attribute directives modify the appearance or behavior of DOM elements. Structural directives add or remove elements from the DOM.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 903\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 904\n      },\n      __self: this\n    }, \"8. What are template expressions\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 905\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 906\n      },\n      __self: this\n    }, \"Template expressions are computations/ assignments done in the template inside the interpolation curly braces.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 910\n      },\n      __self: this\n    }, \"In interpolation syntax, the template expression is surrounded by double curly braces.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 915\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 916\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: templateExpree,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 917\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 923\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 924\n      },\n      __self: this\n    }, \"9. What are template statements\"), \"A template is an HTML snippet that tells Angular how to render the component in angular application.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 927\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: templateState,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 928\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 933\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 934\n      },\n      __self: this\n    }, \"N: \"), \"Component send data to Template by using Promises binding or Interpolation.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 937\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 938\n      },\n      __self: this\n    }, \"10. What is Data Binding? How many ways it can be done?\"), \"In order to connect application data with the DOM, data binding is used. It happens between the template and component. There are 3 ways to achieve data binding:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 942\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 943\n      },\n      __self: this\n    }, \"Interpolation / String Interpolation (one-way data binding)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 946\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 947\n      },\n      __self: this\n    }, \"Event Binding: \"), \"one-way data binding.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 949\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 950\n      },\n      __self: this\n    }, \"Property Binding: \"), \"one-way data binding.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 952\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 953\n      },\n      __self: this\n    }, \"Two-way Binding: \"), \"Changes made in the application state gets automatically reflected in the view and vice-versa. The ngModel directive is used for achieving this type of data binding.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 959\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 960\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 961\n      },\n      __self: this\n    }, \"Data binding Forms:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 962\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 963\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: databinding,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 964\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 970\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 971\n      },\n      __self: this\n    }, \"Component to view\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 972\n      },\n      __self: this\n    }, \"View to component\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 973\n      },\n      __self: this\n    }, \"Two way sequence: view to component to view\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 975\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 976\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 977\n      },\n      __self: this\n    }, \"Property binding: \"), \"Means passing data from the component and to the template. Use square bracket.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 979\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 980\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 981\n      },\n      __self: this\n    }, \"We can also use string and non-string data in property binding.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 986\n      },\n      __self: this\n    }, \"Interpolation use only string data.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 987\n      },\n      __self: this\n    }, \"in property binding can't use string concatnation.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 988\n      },\n      __self: this\n    }, \"It set a property to view element.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 990\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 991\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: property,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 992\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 998\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 999\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1000\n      },\n      __self: this\n    }, \"Event Binding: \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1001\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1002\n      },\n      __self: this\n    }, \"String interpolation: \"), \"Refer to the special type of syntax that makes use of template expressions to display component data. Such variables are enclised within doubly curly braces.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1005\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1006\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: evtBinding,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1007\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1013\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1014\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1015\n      },\n      __self: this\n    }, \"Two-way data binding:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1016\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1017\n      },\n      __self: this\n    }, \"It's a process that gives component a way to share data between the component class and its template. If the data is changed in one place it will automatically change the data at other end.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1023\n      },\n      __self: this\n    }, \"Two-way binding commonly used to listen for events and updates values between parent and child component.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1027\n      },\n      __self: this\n    }, \"mainly used in the input field or form.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1028\n      },\n      __self: this\n    }, \"it's combination of both property binding and event binding.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1031\n      },\n      __self: this\n    }, \"binding using [(ngModel)] Directive. \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1032\n      },\n      __self: this\n    }, \"ngModel Directive which combines the square bracket of property binding with parentheses of event binding in a single notation.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1038\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1039\n      },\n      __self: this\n    }, \"To use ngModel Directive we should import FormsModule in app.module.ts file.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1043\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1044\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: twoWay,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1045\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1051\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1052\n      },\n      __self: this\n    }, \"12. What are the differences between Component and Directive\"), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1055\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1056\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1057\n      },\n      __self: this\n    }, \"Component\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1058\n      },\n      __self: this\n    }, \"Directive\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1060\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1061\n      },\n      __self: this\n    }, \"To register a component we use @Component meta-data annotation\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1065\n      },\n      __self: this\n    }, \"To register directives we use @Directive meta-data annotation\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1070\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1071\n      },\n      __self: this\n    }, \"Components are typically used to create UI widgets\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1072\n      },\n      __self: this\n    }, \"Directive is used to add behavior to an existing DOM element\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1076\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1077\n      },\n      __self: this\n    }, \"Component is used to break up the application into smaller components\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1081\n      },\n      __self: this\n    }, \"Directive is use to design re-usable components\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1083\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1084\n      },\n      __self: this\n    }, \"Only one component can be present per DOM element\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1085\n      },\n      __self: this\n    }, \"Many directives can be used per DOM element\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1088\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1089\n      },\n      __self: this\n    }, \"13. Dependency Injection\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1090\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1091\n      },\n      __self: this\n    }, \"is a technique where one object supplies the dependencies of another object. A dependency is an object that can be used service.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1096\n      },\n      __self: this\n    }, \"it's a codding pattern in which classes recive their dependencies from external sources rather than creating them itself.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1102\n      },\n      __self: this\n    }), \"Consider two classes, A and B. Let\\u2019s assume that class A uses the objects of class B. Normally, in OOPS, an instance of class B is created so that class A can access the objects. Using DI, we move the creation and binding of the dependent objects outside of the class that depend on them.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1108\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1109\n      },\n      __self: this\n    }), \"Typically, there are three types of classes, they are:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1111\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1112\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1113\n      },\n      __self: this\n    }, \"Client Class: \"), \"This is the dependent class, which depends on the service class.\", \" \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1116\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1117\n      },\n      __self: this\n    }, \"Service Class: \"), \"Class that provides the service to the client class.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1120\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1121\n      },\n      __self: this\n    }, \"Injector Class: \"), \"njects the service class object into the client class.\", \" \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1125\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: Graphs,\n      alt: \"DeadLock\",\n      className: \"responsive\",\n      style: redesign,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1126\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1132\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1133\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1134\n      },\n      __self: this\n    }, \"There are three types of Dependency Injections in Angular \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1135\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1136\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1137\n      },\n      __self: this\n    }, \"Constructor injection: \"), \"It provides the dependencies through a class constructor.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1140\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1141\n      },\n      __self: this\n    }, \"Setter injection: \"), \"The client uses a setter method into which the injector injects the dependency.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1144\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1145\n      },\n      __self: this\n    }, \"Interface injection: \"), \"The dependency provides an injector method that will inject the dependency into any client passed to it. On the other hand, the clients must implement an interface that exposes a setter method that accepts the dependency.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1152\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1153\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1154\n      },\n      __self: this\n    }, \"Advantages \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1155\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1156\n      },\n      __self: this\n    }, \"Dependency Injection helps in Unit testing.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1157\n      },\n      __self: this\n    }, \"Extending the application becomes more manageable.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1158\n      },\n      __self: this\n    }, \"It helps to enable loose coupling, which is essential in application programming.\", \" \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1163\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1164\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1165\n      },\n      __self: this\n    }, \"The Drawbacks of not using Dependency Injection \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1166\n      },\n      __self: this\n    }), \"Consider a Postal details class that is dependent on the Number and the Address class.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1169\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1170\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: postals,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1171\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1177\n      },\n      __self: this\n    }), \"In the PostalDetails class, the constructor creates copies of the Number and address. So when you instantiate a new PostalDetails class, the constructor instantiates a unique number and address.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1181\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1182\n      },\n      __self: this\n    }), \"Although this looks simple, there\\u2019s a problem with this code. Let\\u2019s assume that the Number and Address classes\\u2019 constructors now accept parameters.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1186\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: postalsparams,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1187\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1193\n      },\n      __self: this\n    }), \"When we change the Number class, the PostalDetails class is broken. To overcome this, we need to pass in a parameter to the Number constructor. This applies to the Address class as well.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1197\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1198\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1199\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1200\n      },\n      __self: this\n    }, \"The first drawback is that the code is not flexible. Any time the dependencies change, the PostalDetails class needs to be changed as well.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1205\n      },\n      __self: this\n    }, \"The second drawback is that this code is not suitable for testing. Anytime you instantiate a new PostalDetails class, you get the same Number and Address. Even if you change the Number and Address classes, what if these classes, in turn, have dependencies?\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1213\n      },\n      __self: this\n    }), \"As a result, we are not in control of the code, and here\\u2019s where Dependency Injection comes into the picture.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1216\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1217\n      },\n      __self: this\n    }), \"DI is a coding pattern where a class receives its dependencies from an external source rather than creating them itself.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1220\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1221\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: impdi,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1222\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1228\n      },\n      __self: this\n    }), \"In the above example, we have moved the definition of the dependencies from inside the constructor to the constructor\\u2019s parameters. So the PostalDetails class doesn\\u2019t create the dependencies anymore. It just consumes them. The creation of those dependencies is external to this class, and by doing so, we now solve both the drawbacks.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1235\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1236\n      },\n      __self: this\n    }, \"16. What is the use of httpInterceptor Class?\"), \"The Angular Interceptor helps us to modify the HTTP Request by intercepting it before the Request is sent to the back end. It can also modify the incoming Response from the back end. The Interceptor globally catches every outgoing and in coming request at a single place.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1242\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1243\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1244\n      },\n      __self: this\n    }, \"17. HttpClient\"), \"and import HttpClientModule as imports: [BrowserModule, HttpClientModule] in app.module.ts file.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1247\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1248\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: httpClients,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1249\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1255\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1256\n      },\n      __self: this\n    }, \"17. What is the difference between template driven form and reactive based approach?\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1260\n      },\n      __self: this\n    }, \"import FormsModule and Reactiveforms Module in Angular to use [(ngModel)] and reactive forms respectively.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1264\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1265\n      },\n      __self: this\n    }, \"Template-driven forms are asynchronous in nature, whereas Reactive forms are mostly synchronous.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1269\n      },\n      __self: this\n    }, \"In a template-driven approach, most of the logic is driven from the template, whereas in reactive-driven approach, the logic resides mainly in the component or typescript code.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1275\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1276\n      },\n      __self: this\n    }, \"49. Two ways to collect and validate data from users\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1277\n      },\n      __self: this\n    }, \"1. Template-driven forms:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1278\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1279\n      },\n      __self: this\n    }, \"Everythings which we are going to use in an application is defined into the template that are defining\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1283\n      },\n      __self: this\n    }, \"Along with a component.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1284\n      },\n      __self: this\n    }, \"To use it we need to import FormsModule in application.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1286\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1287\n      },\n      __self: this\n    }, \"2. Model-driven forms (Reactive forms)\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1288\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1289\n      },\n      __self: this\n    }, \"The model which is created in .ts file is responsible for handling all the user interactions/ validations. For this first need to create the model using Angular unbuilt classes like formGroup and formControl and then, we need to bind the model to HTML form.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1296\n      },\n      __self: this\n    }, \"As we create the form controls directly in the component, it makes easier to push data between the data models and UI elements.\", \" \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1302\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1303\n      },\n      __self: this\n    }, \"import 'ReactiveFormsModule' in app.module.ts file\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1304\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: reactiveforms,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1305\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1311\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1312\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1313\n      },\n      __self: this\n    }, \"statusChanges():\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1314\n      },\n      __self: this\n    }), \"is a property of AbstractControl that emits an event every time when the validations status of the control is recalculated.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1317\n      },\n      __self: this\n    }), \"statusChanges property is available in formControl, FormArray and formGroup classes because they inherit AbstractControl class.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1320\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1321\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1322\n      },\n      __self: this\n    }, \"3. What is the difference between FormBuilder and FormControl?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1325\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1326\n      },\n      __self: this\n    }, \"A reactive form is a FormGroup that is made up of FormControls.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1330\n      },\n      __self: this\n    }, \"FormBuilder is the class that is used to create both FormGroups and FormControls.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1335\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1336\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1337\n      },\n      __self: this\n    }, \"The FormBuilder class has 3 methods: \"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1338\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1339\n      },\n      __self: this\n    }, \"control()\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1340\n      },\n      __self: this\n    }, \"group()\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1341\n      },\n      __self: this\n    }, \"array()\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1343\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1344\n      },\n      __self: this\n    }, \"FormBuilder avoids using new FormControl in FormGroup.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1345\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: formbuildes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1346\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1352\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1353\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default withStyles(styles)(IntroAngulard);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/deepAngularjs/introAngularjs.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Graphs","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","redesign","height","width","NgClass","trim","databinding","property","evtBinding","NgStyles","customDir","templateExpree","templateState","twoWay","hostBinding","parameters","makeServices","postals","postalsparams","impdi","httpClients","reactiveforms","formbuildes","IntroAngulard","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\nimport Graphs from \"../../../assets/dinjection.png\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst redesign = {\n  height: 200,\n  width: 500,\n};\n\nconst NgClass = `\n@Component({\n  selector: 'app-root',\n  template: '\n  <p [ngStyle] = \"{backgroundColor: getColor()}\" [ngClass] = \"{Online: serverStatus === 'Online'}\"> \n    Server  with ID {{serverID}} is {{serverStatus}}. \n  </p >,\n  styles: ['.Online{ color: yellow; }']'})\n\nexport class AppComponent {\n  serverID: number = 10;\n  serverStatus: string = 'Offline';\n\n  constructor () {\n  this.serverStatus = Math.random() > 0.5 ? 'Online' : 'Offline';\n  }\n\n  getServerStatus() {\n    return this.serverStatus;\n  }\n  getColor() {\n    return this.serverStatus === 'Online' ? 'green' : 'red';\n  }\n}`.trim();\n\nconst databinding = `\nDOM               Component\n<----{{value}}-----\n<-[propery]=\"value\" --\n--(event)=\"handler\" -->\n<-[(NgModule)]=\"propery\" --`.trim();\n\nconst property = `\nsyntax: [property]='expression\n\n//\n@Component({\n  selector: 'app-root',\n  template: '\n    <button (click)=\"toggleSecret()\">Toggle Secret</button>\n    <h3 [hidden]=\"secretTextHidden\">Property Binding</h3>\n  ',\n})\nexport class AppComponent {\n  secretTextHidden = false;\n\n  toggleSecret() {\n    this.secretTextHidden = !this.secretTextHidden;\n  }\n}\n`.trim();\n\nconst evtBinding = `\n@Component({\n  selector: 'app-root',\n  template: '\n    {{ name }}\n    <button (click)=\"nameChange()\">evt</button>\n  ',\n})\nexport class AppComponent {\n  name = 'Pikachu';\n\n  nameChange() {\n    this.name = 'Raichu';\n  }\n}`.trim();\n\nconst NgStyles = `\n//1\n<div [ngStyle]=\"{'color':green}\"></div>\nngStyle become much more useful when the value is dynamic.\n<div [ngStyle]=\"{'color': person.country==='UK' ? 'green' : 'red'}\"></div>\n\n\n//2\n@Component({\n  selector: 'app-root',\n  template: '\n  <p[ngStyle]=\"{backgroundColor: 'green'}\"> Server with ID {{serverID}} is {{serverStatus}}.</p>\n  '})\nexport class AppComponent {\n  serverID: number = 10;\n  serverStatus: string = 'Offline';\n\n  constructor () {\n  this.serverStatus = Math.random() > 0.5 ? 'Online' : 'Offline';\n  }\n}`.trim();\n\nconst customDir = `\n//html\n<p appCustomdir>Custom directive</p>\n\n\n//ts\nimport { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[appCustomdir]'\n})\nexport class CustomdirDirective {\n\n  constructor(private el:ElementRef) { \n    el.nativeElement.style.color=\"green\"\n  }\n}\n`.trim();\nconst templateExpree = `\n<h3>{{username}}, welcome to Angular</h3>\n\n\n//The below javascript expressions are prohibited in template expression\n1. assignments (=, +=, -=, ...)\n2. new\n3. chaining expressions with ; or ,\n4. increment and decrement operators (++ and --)\n`.trim();\n\nconst templateState = `\n//template statements appear in quotes to the right of the = symbol like (event)=\"statement\".\n<button (click)=\"statement()\">Edit Profile</button>\n`.trim();\n\nconst twoWay = `\n@Component({\n  selector: 'app-root',\n  template: '\n    <input type=\"text\" [(ngModel)]=\"name\" placeholder=\"type here\" />\n    <h3>{{ name }}</h3>\n  ',\n})\nexport class AppComponent {\n  name = 'Angular 5';\n}\n`.trim();\n\nconst hostBinding = `\nimport { Component, ElementRef, HostBinding, HostListener} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '\n      <p>@HostBinding() & @HostListener()</p>\n  ',\n  providers:[]\n})\n\nexport class AppComponent{\n  constructor(private el:ElementRef){\n\n  }\n\n  @HostBinding('style.color') textColor: any;\n  ngOnInit(){\n    this.textColor=\"green\";\n  }\n\n  @HostListener('click') onClick(){\n    // alert('HostListener')\n    this.textColor = \"red\";\n  }\n\n  @HostListener('mouseover') onMouseHover(){\n    this.textColor = \"blue\";\n  }\n\n  @HostListener('mouseout') onMouseOut(){\n    this.textColor = \"pink\";\n  }\n}`.trim();\n\nconst parameters = `\n//myservice.ts\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class myService {\n  name = 'Mukesh';\n  constructor() {}\n}\n\n\n//app.component.ts\nimport { Component, Inject } from '@angular/core';\nimport { myService } from './myservice';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  constructor(@Inject(myService) myService: any) {\n    console.log(myService);\n  }\n}\n`.trim();\n\nconst makeServices = `\n//myService.ts\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class myService {\n  name = 'Mukesh';\n  sayHello() {\n    console.log(this.name);\n  }\n}\n\n\n//app.component.ts\nimport { myService } from './myservice';\n\n@Component({\n  selector: 'app-root',\n  template: '',\n})\nexport class AppComponent {\n  constructor(private myServices: myService) {\n    this.myServices.sayHello();\n  }\n}\n\n\n//app.module.ts\n@NgModule({\n  declarations: [AppComponent, Child],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    StoreModule.forRoot({}),\n  ],\n  providers: [myService],\n  bootstrap: [AppComponent],\n})\n`.trim();\n\nconst postals = `\n  class Number{\n    constructor(){}\n  }\n\n  class Address{\n    constructor(){}\n  }\n\n  class PostalDetails{\n    Number;\n    Address;\n    \n    constructor(){\n      this.Number = new Number();\n      this.Address = new Address();\n    }\n  }\n`.trim();\n\nconst postalsparams = `\nclass Number{\n  constructor(par){}\n}\n\nclass Address{\n  constructor(par){}\n}\n\nclass PostalDetails{\n  Number;\n  Address;\n  \n  constructor(){\n    this.Number = new Number();     //Error\n    this.Address = new Address();   //Error\n  }\n}\n`.trim();\n\nconst impdi = `\nclass PostalDetails{\n  number;\n  address;\n  \n  constructor(number, address){\n    this.number = number();    \n    this.address = address();  \n  }\n}\n`.trim();\n\nconst httpClients = `\nimport { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\ninterface Kafein {\n  name: string;\n  address: string;\n}\n\n@Component({\n  selector: 'app-root',\n  template: ' <tr *ngFor=\"let datas of httpData\">\n    <td>{{ datas.title }}</td>\n  </tr>',\n})\nexport class AppComponent {\n  url = 'https://jsonplaceholder.typicode.com/todos';\n  httpData: any;\n\n  constructor(private http: HttpClient) {}\n\n  ngOnInit() {\n    this.callApi();\n  }\n\n  callApi() {\n    this.http.get<Kafein[]>(this.url).subscribe((data) => {\n      this.httpData = data;\n    });\n  }\n}\n`.trim();\n\nconst reactiveforms = `\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-root',\n  template: '\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"form-group\">\n        <input type=\"text\" [ngClass]=\"{ 'is-invalid': submitted }\" />\n        <div *ngIf=\"submitted\">Enter text</div>\n      </div>\n\n      <button type=\"submit\">Register</button>\n    </form>\n  '',\n})\nexport class AppComponent implements OnInit {\n  form: any = FormGroup;\n  submitted = false;\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group({\n      name: ['', Validators.required],\n    });\n  }\n\n  onSubmit(): void {\n    this.submitted = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n  }\n}\n`.trim();\n\nconst formbuildes = `\n//FormGroup\nimport { FormGroup, FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-root',\n  template: '\n    <div [formGroup]=\"frmGroup\">\n      <input type=\"text\" formControlName=\"firstName\" /><br />\n      <input type=\"text\" formControlName=\"lastName\" />\n    </div>\n    <p>Is FormGroup Valid: {{ frmGroup.valid }}</p>\n  ',\n})\nexport class AppComponent {\n  name = 'Angular';\n  frmGroup = new FormGroup({\n    firstName: new FormControl('', []),\n    lastName: new FormControl('', []),\n  });\n\n  constructor() {\n    this.frmGroup.valueChanges.subscribe((val) => {\n      console.log(val.firstName);\n    });\n  }\n}\n\n\n//FormBuilder\nimport { FormGroup, FormBuilder } from '@angular/forms';\n\n@Component({\n  selector: 'app-root',\n  template: '\n    <form (ngSubmit)=\"save()\" [formGroup]=\"myGroup\">\n      FIRST NAME <input formControlName=\"firstName\" /> <br />\n      MIDDLE NAME <input formControlName=\"middleName\" /> <br />\n      LAST NAME<input formControlName=\"lastName\" />\n    </form>\n  ',\n})\nexport class AppComponent {\n  myGroup: any = FormGroup;\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.myGroup = this.fb.group({\n      firstName: 'Chethana',\n      middleName: [{ value: 'Dibbahalli', disabled: true }],\n      lastName: { value: 'DC', disabled: true },\n    });\n  }\n\n  save() {\n    console.log('Inside save' + this.myGroup.value);\n  }\n}\n\n`.trim();\n\nclass IntroAngulard extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Please explain the various features of Angular.</h3>\n              <ul>\n                <li>\n                  <b>Components: </b>Angular is a component-based framework,\n                  which means that applications are built by assembling\n                  components that represent different parts of the application's\n                  user interface. Components are reusable, self-contained, and\n                  can be easily combined to create complex user interfaces.\n                </li>\n                <br />\n                <li>\n                  <b>Templates: </b> Angular uses templates to define the user\n                  interface of a component. Templates are written in HTML and\n                  contain Angular-specific syntax that allows for data binding\n                  and other features.\n                </li>\n                <br />\n                <li>\n                  <b>Directives: </b>Angular provides a number of built-in\n                  directives that allow you to manipulate the DOM, add or remove\n                  elements, and apply conditional logic to your templates. You\n                  can also create custom directives to extend the functionality\n                  of Angular.\n                </li>\n                <br />\n                <li>\n                  <b>Services: </b>Services are used to provide functionality\n                  that can be shared across different components of an\n                  application. Services can be used for things like fetching\n                  data from a server, performing complex calculations, or\n                  managing state.\n                </li>\n                <br />\n                <li>\n                  <b>Dependency Injection: </b>Angular's dependency injection\n                  system allows you to easily manage dependencies between\n                  different components and services. Dependencies are injected\n                  into components and services through their constructors.\n                </li>\n                <br />\n                <li>\n                  <b>Routing: </b>Angular's routing system allows you to define\n                  routes for different parts of your application and navigate\n                  between them using URLs.\n                </li>\n                <br />\n                <li>\n                  <b>Forms: </b>Angular provides powerful support for building\n                  forms, including both template-driven and reactive forms. This\n                  includes features like form validation, form submission, and\n                  handling user input.\n                </li>\n                <br />\n                <li>\n                  <b>Observables: </b>Angular uses observables to handle\n                  asynchronous operations such as HTTP requests. Observables\n                  provide a way to work with asynchronous data streams in a more\n                  efficient and predictable way.\n                </li>\n                <br />\n                <li>\n                  <b>Testing: </b>Angular provides a number of tools and\n                  utilities for testing your application, including both unit\n                  tests and end-to-end tests. This includes features like the\n                  Angular testing library and the Protractor testing framework.\n                </li>\n                <br />\n                <li>\n                  <b>Mobile Support: </b>Angular provides support for building\n                  mobile applications using technologies like Ionic and\n                  NativeScript.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>\n                2. What is difference between package.json and\n                package-lock.json.\n              </h3>\n              <ul>\n                <li>\n                  <b>package.json: </b>This file is used to define the\n                  dependencies and other metadata of an application. It contains\n                  information about the application, such as its name, version,\n                  author, and dependencies required for the application to run.\n                  When you install a package using npm or yarn, the dependencies\n                  are listed in package.json.\n                </li>\n                <br />\n                <li>\n                  <b>package.lock.json: </b>This file is used to keep track of\n                  the exact version of every package and its dependencies that\n                  are installed in an application. It is automatically generated\n                  by npm or yarn when a new package is installed or updated. The\n                  package-lock.json file ensures that the exact same version of\n                  a package and its dependencies are installed on all machines\n                  running the application. This helps to avoid dependency\n                  conflicts and ensures that the application runs consistently\n                  across different environments.\n                </li>\n              </ul>\n              <br />\n              In summary, package.json defines the metadata and dependencies\n              required for the application to run, while package-lock.json is\n              used to lock the dependencies to specific versions to ensure\n              consistency across different machines.\n              <br />\n              <br />\n              <h3>4. What is metadata</h3>\n              Metadata, Annotation and Decorator is same thing.\n              <br />\n              <ul>\n                <li>\n                  metadata is information that is used to describe and configure\n                  a component, directive, pipe, or service. It is defined using\n                  decorators, which are functions that modify the behavior of a\n                  class or its members.\n                </li>\n                <br />\n                <li>\n                  The most common decorator used for defining metadata in\n                  Angular is the @Component decorator, which is used to define\n                  the metadata for a component. The metadata defined by this\n                  decorator includes information such as the component's\n                  selector, template, styles, and inputs and outputs.\n                </li>\n                <br />\n                <li>\n                  Decorator accept object. decorator are simply functions that\n                  return functions. decorator are invoke at runtime. decorator\n                  allows you to excuite functions.\n                </li>\n              </ul>\n              <br />\n              Metadata is used to decorate a class so that it can configure the\n              expected behavior of the class. There are four main types of\n              decorators:\n              <ul>\n                <li>\n                  <b>Class decorators: </b>, @Component, @Directive, @NgModule,\n                  @Injectable, and @Pipes.\n                </li>\n                <li>\n                  <b>Property decorators: </b>These decorators are used to\n                  modify the behavior of a class property. <b>Ex </b>\n                  @Input, @Output, @HostBinding, @ContentChild,\n                  @ContentChildren, @ViewChild, @ViewChildren.\n                </li>\n                <li>\n                  <b>Method decorators: </b>These decorators are used to modify\n                  the behavior of a class method. <b>Ex </b>\n                  @HostListener.\n                </li>\n                <li>\n                  <b>\n                    Parameter decorators for parameters inside class\n                    constructors\n                  </b>\n                  @Inject.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <ul>\n                <li>\n                  <b>@HostBinding: </b>Decorator is used to bind a property of a\n                  directive to a property of its host element. This allows the\n                  directive to set properties on the host element based on its\n                  own state or configuration.\n                </li>\n                <br />\n                <li>\n                  <b>@HostListener: </b>Decorator is used to subscribe to events\n                  that occur on the host element of a directive. The host\n                  element is the element that the directive is attached to, and\n                  the @HostListener decorator is used to specify which events\n                  the directive should listen to.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={hostBinding}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <br />\n              <b>ii. Parameter decorators: </b>Used for parameters inside class\n              constructors, e.g. @Inject, Optional.\n              <br />\n              <br />\n              Inject() function provide another way to inject our services as\n              dependency in various part of angular application.\n              <br />\n              It introduced in angular 14.\n              <div style={titles}>\n                <PrismCode\n                  code={parameters}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>5. Explain Components, Modules and Services in Angular.</h3>\n              <b>Components: </b>\n              a component is a building block for building user interfaces. A\n              component is a type of directive that has its own view, data, and\n              behavior. Components are the most basic building blocks of an\n              Angular application, and they can be reused throughout the\n              application to create a consistent user interface.\n              <br />\n              <br />\n              <b>key features: </b>\n              <ul>\n                <li>\n                  <b>Selector: </b>Components are identified by a selector,\n                  which is a CSS selector that identifies the HTML element that\n                  the component represents. The selector is used to tell Angular\n                  where to insert the component in the DOM.\n                </li>\n                <br />\n                <li>\n                  <b>Template: </b>A component has its own template, which is\n                  the HTML code that defines the structure and layout of the\n                  component. The template can include data binding syntax, which\n                  allows the component to display dynamic data.\n                </li>\n                <br />\n                <li>\n                  <b>Decorator: </b>The @Component decorator is used to define\n                  the metadata for a component, including the selector,\n                  template, and other configuration options.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <b>i. Modules </b>\n              a module is a mechanism for organizing code into separate,\n              reusable, and encapsulated units. A module can contain components,\n              services, directives, and other types of Angular constructs that\n              are needed for a particular feature or functionality in an\n              application.\n              <br />\n              <br />\n              To define a module, we use the NgModule.\n              <ul>\n                <li>Default module is app.module.ts.</li>\n                <li>We can includes a module inside another module.</li>\n                <li>\n                  A module have at least one component. components declared\n                  inside \"declarations\" in module. while module inside \"imports\"\n                  in app.module.ts.{\" \"}\n                </li>\n                <li>\n                  We can import a module and use inside another module. For\n                  injecting a module we use, exports:[ComponentName].\n                </li>\n                <li>\n                  Every module is defined with a <b>@NgModule</b> decorator.\n                </li>\n                <li>\n                  Angular apps are modular and Angular has its own modularity\n                  system called NgModules.\n                </li>\n                <li>\n                  A component cannot be import in two diffrent modules. If do\n                  than show runtime error. this is features module.\n                </li>\n              </ul>\n              By default, modules are of two types:\n              <ul>\n                <li>\n                  <b>Root Module: </b>\n                </li>\n                <li>\n                  <b>Feature Module: </b>Every application can have only one\n                  root module whereas, it can have one or more feature modules.\n                  <ol>\n                    <li>A root module imports BrowserModule,</li>\n                    <li>whereas a feature module imports CommonModule.</li>\n                  </ol>\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>iii. Services </h3>\n              <ul>\n                <li>\n                  Are a greate way to share information among classes that don't\n                  know each other.\n                </li>\n                <li>\n                  Are basically a classes which may have some data, property or\n                  some functions. And we can use these data,property and\n                  functions in multiple files.\n                </li>\n                <li>\n                  Services are objects which get instantiated only once during\n                  the lifetime of an application.{\" \"}\n                </li>\n                <li>Services can depend on other services.</li>\n              </ul>\n              <br />A service is defined using a <b>@Injectable</b> decorator. A\n              function defined inside a service can be invoked from any\n              component or directive.\n              <br />\n              <br />\n              <b>providedIn: </b>\n              <div style={titles}>\n                <PrismCode\n                  code={makeServices}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>6. What are directives: @directive</h3>\n              <ul>\n                <li>\n                  Directives are used to extend the power of the HTML attributes\n                  and to change the appearance or behavior of a DOM element.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <b>\n                Elements which change the appearence/ behavior of the DOM\n                element. 3 types of Directives.\n              </b>\n              <ul>\n                <li>\n                  <b>Component Directives:</b>\n                  <ul>\n                    <li>\n                      Components is the special kind of directives, Becouse we\n                      have the template varriables.\n                    </li>\n                    <li>Directives with own Template.</li>\n                    <li>\n                      with the help of selector, @Component which is a decorator\n                      function is used to create a component directive.\n                    </li>\n                  </ul>\n                </li>\n                <br />\n                <li>\n                  <b>Structural Directives:</b>\n                  <ul>\n                    <li>Do manipulation in DOM.</li>\n                    <li>\n                      Structural directive modifies or manipulates the structure\n                      of DOM by adding or removing DOM elements. it works on the\n                      structure of a DOM.\n                    </li>\n                    <li>\n                      Structural directives which have a * sign before the\n                      directive. *ngIf and *ngFor.\n                    </li>\n                  </ul>\n                </li>\n                <br />\n                <li>\n                  <b>Attribute Directives/ Behavioral Directives:</b>\n                  <ul>\n                    <li>Do css related things.</li>\n                    <li> Change appearence/ behavior of the DOM.</li>\n                    <li>\n                      Attribute directives deal with the changing of look and\n                      behavior of the DOM element, component or another\n                      directive. Ex. NgStyle\n                    </li>\n                  </ul>\n                </li>\n                <br />\n                By default, angular provide two attribute directives\n                <br />\n                <b>1. NgClass: </b>dynamically, add or remove CSS class on the\n                basis of the certain conditions.\n                <br />\n                <br />\n                Allows us to set the CSS class dynamically for a DOM element. we\n                can use ngClass with string, array, object or component method.\n                <br />\n                <br />\n                <div style={titles}>\n                  <PrismCode\n                    code={NgClass}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n              </ul>\n              <br />\n              <br />\n              <b>2. NgStyle: </b>dynamically, add or remove styles on the basis\n              of the certain conditions.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={NgStyles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Custom directive ex. are with *ngIf, *ngFor...</b>\n              <br />\n              <i>ng g directive mydirective</i>\n              <div style={titles}>\n                <PrismCode\n                  code={customDir}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                7. What is difference between attribute and structural\n                directives?\n              </h3>\n              Attribute directives modify the appearance or behavior of DOM\n              elements. Structural directives add or remove elements from the\n              DOM.\n              <br />\n              <h3>8. What are template expressions</h3>\n              <ul>\n                <li>\n                  Template expressions are computations/ assignments done in the\n                  template inside the interpolation curly braces.\n                </li>\n                <li>\n                  In interpolation syntax, the template expression is surrounded\n                  by double curly braces.\n                </li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={templateExpree}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>9. What are template statements</h3>A template is an HTML\n              snippet that tells Angular how to render the component in angular\n              application.\n              <div style={titles}>\n                <PrismCode\n                  code={templateState}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n                <br />\n                <b>N: </b>Component send data to Template by using Promises\n                binding or Interpolation.\n              </div>\n              <br />\n              <h3>10. What is Data Binding? How many ways it can be done?</h3>\n              In order to connect application data with the DOM, data binding is\n              used. It happens between the template and component. There are 3\n              ways to achieve data binding:\n              <ul>\n                <li>\n                  Interpolation / String Interpolation (one-way data binding)\n                </li>\n                <li>\n                  <b>Event Binding: </b>one-way data binding.\n                </li>\n                <li>\n                  <b>Property Binding: </b>one-way data binding.\n                </li>\n                <li>\n                  <b>Two-way Binding: </b>Changes made in the application state\n                  gets automatically reflected in the view and vice-versa. The\n                  ngModel directive is used for achieving this type of data\n                  binding.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <b>Data binding Forms:</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={databinding}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <ul>\n                <li>Component to view</li>\n                <li>View to component</li>\n                <li>Two way sequence: view to component to view</li>\n              </ul>\n              <br />\n              <br />\n              <b>Property binding: </b>Means passing data from the component and\n              to the template. Use square bracket.\n              <br />\n              <ul>\n                <li>\n                  We can also use string and non-string data in property\n                  binding.\n                </li>\n\n                <li>Interpolation use only string data.</li>\n                <li>in property binding can't use string concatnation.</li>\n                <li>It set a property to view element.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={property}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Event Binding: </b>\n              <br />\n              <b>String interpolation: </b>Refer to the special type of syntax\n              that makes use of template expressions to display component data.\n              Such variables are enclised within doubly curly braces.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={evtBinding}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Two-way data binding:</b>\n              <ul>\n                <li>\n                  It's a process that gives component a way to share data\n                  between the component class and its template. If the data is\n                  changed in one place it will automatically change the data at\n                  other end.\n                </li>\n                <li>\n                  Two-way binding commonly used to listen for events and updates\n                  values between parent and child component.\n                </li>\n                <li>mainly used in the input field or form.</li>\n                <li>\n                  it's combination of both property binding and event binding.\n                </li>\n                <li>binding using [(ngModel)] Directive. </li>\n                <li>\n                  ngModel Directive which combines the square bracket of\n                  property binding with parentheses of event binding in a single\n                  notation.\n                </li>\n              </ul>\n              <br />\n              <b>\n                To use ngModel Directive we should import FormsModule in\n                app.module.ts file.\n              </b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={twoWay}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                12. What are the differences between Component and Directive\n              </h3>\n              <table>\n                <tr>\n                  <th>Component</th>\n                  <th>Directive</th>\n                </tr>\n                <tr>\n                  <td>\n                    To register a component we use @Component meta-data\n                    annotation\n                  </td>\n                  <td>\n                    To register directives we use @Directive meta-data\n                    annotation\n                  </td>\n                </tr>\n                <tr>\n                  <td>Components are typically used to create UI widgets</td>\n                  <td>\n                    Directive is used to add behavior to an existing DOM element\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    Component is used to break up the application into smaller\n                    components\n                  </td>\n                  <td>Directive is use to design re-usable components</td>\n                </tr>\n                <tr>\n                  <td>Only one component can be present per DOM element</td>\n                  <td>Many directives can be used per DOM element</td>\n                </tr>\n              </table>\n              <br />\n              <h3>13. Dependency Injection</h3>\n              <ul>\n                <li>\n                  is a technique where one object supplies the dependencies of\n                  another object. A dependency is an object that can be used\n                  service.\n                </li>\n                <li>\n                  it's a codding pattern in which classes recive their\n                  dependencies from external sources rather than creating them\n                  itself.\n                </li>\n              </ul>\n              <br />\n              Consider two classes, A and B. Let’s assume that class A uses the\n              objects of class B. Normally, in OOPS, an instance of class B is\n              created so that class A can access the objects. Using DI, we move\n              the creation and binding of the dependent objects outside of the\n              class that depend on them.\n              <br />\n              <br />\n              Typically, there are three types of classes, they are:\n              <ul>\n                <li>\n                  <b>Client Class: </b>This is the dependent class, which\n                  depends on the service class.{\" \"}\n                </li>\n                <li>\n                  <b>Service Class: </b>Class that provides the service to the\n                  client class.\n                </li>\n                <li>\n                  <b>Injector Class: </b>njects the service class object into\n                  the client class.{\" \"}\n                </li>\n              </ul>\n              <br />\n              <img\n                src={Graphs}\n                alt=\"DeadLock\"\n                className=\"responsive\"\n                style={redesign}\n              />\n              <br />\n              <br />\n              <b>There are three types of Dependency Injections in Angular </b>\n              <ul>\n                <li>\n                  <b>Constructor injection: </b>It provides the dependencies\n                  through a class constructor.\n                </li>\n                <li>\n                  <b>Setter injection: </b>The client uses a setter method into\n                  which the injector injects the dependency.\n                </li>\n                <li>\n                  <b>Interface injection: </b>The dependency provides an\n                  injector method that will inject the dependency into any\n                  client passed to it. On the other hand, the clients must\n                  implement an interface that exposes a setter method that\n                  accepts the dependency.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <b>Advantages </b>\n              <ul>\n                <li>Dependency Injection helps in Unit testing.</li>\n                <li>Extending the application becomes more manageable.</li>\n                <li>\n                  It helps to enable loose coupling, which is essential in\n                  application programming.{\" \"}\n                </li>\n              </ul>\n              <br />\n              <br />\n              <b>The Drawbacks of not using Dependency Injection </b>\n              <br />\n              Consider a Postal details class that is dependent on the Number\n              and the Address class.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={postals}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              In the PostalDetails class, the constructor creates copies of the\n              Number and address. So when you instantiate a new PostalDetails\n              class, the constructor instantiates a unique number and address.\n              <br />\n              <br />\n              Although this looks simple, there’s a problem with this code.\n              Let’s assume that the Number and Address classes’ constructors now\n              accept parameters.\n              <div style={titles}>\n                <PrismCode\n                  code={postalsparams}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              When we change the Number class, the PostalDetails class is\n              broken. To overcome this, we need to pass in a parameter to the\n              Number constructor. This applies to the Address class as well.\n              <br />\n              <br />\n              <ul>\n                <li>\n                  The first drawback is that the code is not flexible. Any time\n                  the dependencies change, the PostalDetails class needs to be\n                  changed as well.\n                </li>\n                <li>\n                  The second drawback is that this code is not suitable for\n                  testing. Anytime you instantiate a new PostalDetails class,\n                  you get the same Number and Address. Even if you change the\n                  Number and Address classes, what if these classes, in turn,\n                  have dependencies?\n                </li>\n              </ul>\n              <br />\n              As a result, we are not in control of the code, and here’s where\n              Dependency Injection comes into the picture.\n              <br />\n              <br />\n              DI is a coding pattern where a class receives its dependencies\n              from an external source rather than creating them itself.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={impdi}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              In the above example, we have moved the definition of the\n              dependencies from inside the constructor to the constructor’s\n              parameters. So the PostalDetails class doesn’t create the\n              dependencies anymore. It just consumes them. The creation of those\n              dependencies is external to this class, and by doing so, we now\n              solve both the drawbacks.\n              <br />\n              <h3>16. What is the use of httpInterceptor Class?</h3>\n              The Angular Interceptor helps us to modify the HTTP Request by\n              intercepting it before the Request is sent to the back end. It can\n              also modify the incoming Response from the back end. The\n              Interceptor globally catches every outgoing and in coming request\n              at a single place.\n              <br />\n              <br />\n              <h3>17. HttpClient</h3>\n              and import HttpClientModule as imports: [BrowserModule,\n              HttpClientModule] in app.module.ts file.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={httpClients}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                17. What is the difference between template driven form and\n                reactive based approach?\n              </h3>\n              <b>\n                import FormsModule and Reactiveforms Module in Angular to use\n                [(ngModel)] and reactive forms respectively.\n              </b>\n              <ul>\n                <li>\n                  Template-driven forms are asynchronous in nature, whereas\n                  Reactive forms are mostly synchronous.\n                </li>\n                <li>\n                  In a template-driven approach, most of the logic is driven\n                  from the template, whereas in reactive-driven approach, the\n                  logic resides mainly in the component or typescript code.\n                </li>\n              </ul>\n              <br />\n              <h3>49. Two ways to collect and validate data from users</h3>\n              <b>1. Template-driven forms:</b>\n              <ul>\n                <li>\n                  Everythings which we are going to use in an application is\n                  defined into the template that are defining\n                </li>\n                <li>Along with a component.</li>\n                <li>To use it we need to import FormsModule in application.</li>\n              </ul>\n              <br />\n              <b>2. Model-driven forms (Reactive forms)</b>\n              <ul>\n                <li>\n                  The model which is created in .ts file is responsible for\n                  handling all the user interactions/ validations. For this\n                  first need to create the model using Angular unbuilt classes\n                  like formGroup and formControl and then, we need to bind the\n                  model to HTML form.\n                </li>\n                <li>\n                  As we create the form controls directly in the component, it\n                  makes easier to push data between the data models and UI\n                  elements.{\" \"}\n                </li>\n              </ul>\n              <br />\n              <b>import 'ReactiveFormsModule' in app.module.ts file</b>\n              <div style={titles}>\n                <PrismCode\n                  code={reactiveforms}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>statusChanges():</b>\n              <br />\n              is a property of AbstractControl that emits an event every time\n              when the validations status of the control is recalculated.\n              <br />\n              statusChanges property is available in formControl, FormArray and\n              formGroup classes because they inherit AbstractControl class.\n              <br />\n              <br />\n              <h3>\n                3. What is the difference between FormBuilder and FormControl?\n              </h3>\n              <ul>\n                <li>\n                  A reactive form is a FormGroup that is made up of\n                  FormControls.\n                </li>\n                <li>\n                  FormBuilder is the class that is used to create both\n                  FormGroups and FormControls.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <b>The FormBuilder class has 3 methods: </b>\n              <ol>\n                <li>control()</li>\n                <li>group()</li>\n                <li>array()</li>\n              </ol>\n              <br />\n              <b>FormBuilder avoids using new FormControl in FormGroup.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={formbuildes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(IntroAngulard);\n"]},"metadata":{},"sourceType":"module"}