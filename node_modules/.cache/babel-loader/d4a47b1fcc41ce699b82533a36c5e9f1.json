{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/nodeJs/nodeDeep/tut_1.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst weakMap = `\nlet owners = new WeakMap();\nlet task = { title: \"Big Project\" };\nowners.set(task, 'John');\n\nfunction owner(task) {\n    if (owners.has(task)) {\n        return console.log(owners.get(task));\n    }\n    console.log(\"No owner for this task.\");\n}\nowner(task);                                                            // \"John\" \nowner({});                                                              // \"No owner for this task\".\n`.trim();\nconst async = `\nconst add = (a, b) => {\n  return new Promise((resolve, reject) => {\n      setTimeout(() => {\n          if (a < 0 || b < 0) {\n              return reject('Numbers must be non-negative')\n          }\n\n          resolve(a + b)\n      }, 2000)\n  })\n}\n\nconst doWork = async () => {\n  const sum = await add(1, -99)\n  const sum2 = await add(sum, 50)\n  const sum3 = await add(sum2, -3)\n  return sum3\n}\n\ndoWork().then((result) => {\n  console.log('result', result)\n}).catch((e) => {\n  console.log('e', e)\n})`.trim();\nconst addNum = `\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get(\"/\", (req, res) => {\n  res.sendFile(__dirname + \"/index.html\");\n});\n\napp.post(\"/\", (req, res) => {\n  var num = Number(req.body.num);\n  var num2 = Number(req.body.num2);\n\n  var result = num + num2;\n\n  res.send(\"Sum is\" + result);\n});\n\napp.listen(4000, () => console.log('server running on port 4000'));\n\n\n//index.html\n<head>\n    <body>\n      <form action=\"/\" method=\"post\">\n        <input type=\"text\" name=\"num\" placeholder=\"num\">\n        <input type=\"text\" name=\"num2\" placeholder=\"num2\">\n        <button type=\"submit\" name=\"submit\">sum</button>\n      </form>\n    </body>\n  </head>\n`.trim();\nconst promises = `\nconst p1 = new Promise((res, rej) => {\n  setTimeout(() => {\n    res(\"Promise 1\")\n  }, 2000)\n})\n\nconst p2 = new Promise((res, rej) => {\n  setTimeout(() => {\n    res(\"Promise 2\")\n  }, 2000)\n})\n\nconst p3 = new Promise((res, rej) => {\n  setTimeout(() => {\n    res(\"Promise 3\")\n  }, 2000)\n})\n\nPromise.all([p1, p2, p3]).then((prMSG) => {\n  console.log(prMSG)\n}).catch((err) => {\n  console.log(err)\n})\n\nPromise.allSettled([p1, p2, p3]).then((prMSG) => {\n  console.log(prMSG)\n}).catch((err) => {\n  console.log(err)\n})\n\nPromise.race([p1, p2, p3]).then((prMSG) => {\n  console.log(prMSG)\n}).catch((err) => {\n  console.log(err)\n})\n`.trim();\n\nclass Tur1 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"1. Async-Await\"), \"server.js\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: async,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"promise.all(): \"), \"When we have multiple promises as i/p it should return a single promise after all promises are resolved, then use the all() method.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"all() is settled with only resolve promises, so if any promise returns error then it won't work.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"allSettled(): \"), \"Waits for all promises regardless of their state & returns promises at the end.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"race(): \"), \"Return a promise as soon as  any of the promise returns the state from the iterable list.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: promises,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"2. Add two numbers\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: addNum,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, \"3. WeakMap\"), \"ES6's weakMap allows the use of non-strings as keys in a HashMap:\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: weakMap,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Tur1);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/nodeJs/nodeDeep/tut_1.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","weakMap","trim","async","addNum","promises","Tur1","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst weakMap = `\nlet owners = new WeakMap();\nlet task = { title: \"Big Project\" };\nowners.set(task, 'John');\n\nfunction owner(task) {\n    if (owners.has(task)) {\n        return console.log(owners.get(task));\n    }\n    console.log(\"No owner for this task.\");\n}\nowner(task);                                                            // \"John\" \nowner({});                                                              // \"No owner for this task\".\n`.trim();\n\nconst async = `\nconst add = (a, b) => {\n  return new Promise((resolve, reject) => {\n      setTimeout(() => {\n          if (a < 0 || b < 0) {\n              return reject('Numbers must be non-negative')\n          }\n\n          resolve(a + b)\n      }, 2000)\n  })\n}\n\nconst doWork = async () => {\n  const sum = await add(1, -99)\n  const sum2 = await add(sum, 50)\n  const sum3 = await add(sum2, -3)\n  return sum3\n}\n\ndoWork().then((result) => {\n  console.log('result', result)\n}).catch((e) => {\n  console.log('e', e)\n})`.trim();\n\n\nconst addNum = `\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get(\"/\", (req, res) => {\n  res.sendFile(__dirname + \"/index.html\");\n});\n\napp.post(\"/\", (req, res) => {\n  var num = Number(req.body.num);\n  var num2 = Number(req.body.num2);\n\n  var result = num + num2;\n\n  res.send(\"Sum is\" + result);\n});\n\napp.listen(4000, () => console.log('server running on port 4000'));\n\n\n//index.html\n<head>\n    <body>\n      <form action=\"/\" method=\"post\">\n        <input type=\"text\" name=\"num\" placeholder=\"num\">\n        <input type=\"text\" name=\"num2\" placeholder=\"num2\">\n        <button type=\"submit\" name=\"submit\">sum</button>\n      </form>\n    </body>\n  </head>\n`.trim();\n\nconst promises = `\nconst p1 = new Promise((res, rej) => {\n  setTimeout(() => {\n    res(\"Promise 1\")\n  }, 2000)\n})\n\nconst p2 = new Promise((res, rej) => {\n  setTimeout(() => {\n    res(\"Promise 2\")\n  }, 2000)\n})\n\nconst p3 = new Promise((res, rej) => {\n  setTimeout(() => {\n    res(\"Promise 3\")\n  }, 2000)\n})\n\nPromise.all([p1, p2, p3]).then((prMSG) => {\n  console.log(prMSG)\n}).catch((err) => {\n  console.log(err)\n})\n\nPromise.allSettled([p1, p2, p3]).then((prMSG) => {\n  console.log(prMSG)\n}).catch((err) => {\n  console.log(err)\n})\n\nPromise.race([p1, p2, p3]).then((prMSG) => {\n  console.log(prMSG)\n}).catch((err) => {\n  console.log(err)\n})\n`.trim();\n\n\n\nclass Tur1 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Async-Await</h3>\n              \n              server.js\n              <div style={titles}>\n                <PrismCode\n                  code={async}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <ul>\n                <li><b>promise.all(): </b>When we have multiple promises as i/p it should return a single promise after all promises are resolved,\n                  then use the all() method.</li>\n                <li>all() is settled with only resolve promises, so if any promise returns error then it won't work.</li>\n                <br />\n                <li><b>allSettled(): </b>Waits for all promises regardless of their state & returns promises at the end.</li>\n                <li><b>race(): </b>Return a promise as soon as  any of the promise returns the state from the iterable list.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={promises}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Add two numbers</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={addNum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>3. WeakMap</h3>\n              ES6's weakMap allows the use of non-strings as keys in a HashMap:\n              <div style={titles}>\n                <PrismCode\n                  code={weakMap}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Tur1));\n"]},"metadata":{},"sourceType":"module"}