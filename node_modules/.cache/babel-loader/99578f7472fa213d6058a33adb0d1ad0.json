{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/ReactJs/reactJs_hooks/customHooks.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst useDocumentTitle = `\n//Count\nconst App = () => {\n  const [count, setCount]=useState(0);\n  const [toggle, setIsPouse]=useState(false);\n\n  const handlePouse=()=>{\n    setIsPouse(!toggle)\n    console.log(toggle,\"toggle\")\n  }\n\n  const handleCount=()=>{\n    if(toggle==true){\n      setCount(count+1)\n    }\n    else{\n      setCount(count-1)\n    }\n  }\n\n  const reset=()=>{\n    setCount(0)\n  }\n\n  return(\n    <div>\n      {count}<br/>\n      <button onClick={handleCount}>count</button>\n      <button onClick={handlePouse}>Pouse</button>\n      <button onClick={reset}>Reset</button>\n    </div>\n  )\n}\n\n\n//Progress\nconst App =() => {\n  const [count, setCount]=useState(0)\n  const [text,setText]=useState('Reach Maximum')\n\n  const handleProgress = () => {\n    if(count<100){\n      setCount(count+10)\n    }\n    else{\n      setText(text)\n    }\n  }\n\n  return(\n    <div>\n      {count<100 ? count: text}<br/>\n      <button onClick={handleProgress}>Progress</button>\n    </div>\n  )\n}\n`.trim();\nconst DocTitleOne = `\n//Counter.js\nimport React, { useState, useMemo } from 'react'\n\nfunction Counter() {\n    const [counterOne, setCounterOne] = useState(0)\n    const [counterTwo, setCounterTwo] = useState(0)\n\n    const incrementOne = () => {\n        setCounterOne(counterOne + 1)\n        }\n\n    const incrementTwo = () => {\n        setCounterTwo(counterTwo + 1)\n        }\n\n    const isEven = useMemo(() => {\n      let i = 0\n      while (i < 2000000000) i++\n          return counterOne % 2 === 0\n        }, [counterOne])\n\n    return (\n      <div>\n        <div>\n          <button onClick={incrementOne}>Count One - {counterOne}</button>\n            <span>{isEven ? 'Even' : 'Odd'}</span>\n            </div>\n            <div>\n          <button onClick={incrementTwo}>Count Two - {counterTwo}</button>\n        </div>\n      </div>\n    )\n}\n\nexport default Counter;\n`.trim();\nconst customs = `\nfunction useFetch(url) {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetch(url)\n      .then(response => response.json())\n      .then(data => setData(data));\n  }, []);\n\n  return data;\n}\n\n// import useFetch from \"./useFetch\";\nfunction App(props) {\n  const data = useFetch(\"https://jsonplaceholder.typicode.com/posts\");\n  return (\n    <div>\n      <ul>\n        {data.map(el => (\n          <li key={el.id}>{el.title}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}`.trim();\n\nclass CustomHooks extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Custom Hooks\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: useDocumentTitle,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"Explain why and when would you use useMemo()?\"), \"In the lifecycle of a component, React re-renders the component when an update is made. When React checks for any changes in a component, it may detect an unintended or unexpected change due to how JavaScript handles equality and shallow comparisons. This change in the React application will cause it to re-render unnecessarily.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), \"useMemo takes in a function and an array of dependencies. The dependency\\u2019s list are the elements useMemo watches: if there are no changes, the function result will stay the same. Otherwise, it will re-run the function. If they don\\u2019t change, it doesn\\u2019t matter if our entire component re-renders, the function won\\u2019t re-run but instead return the stored result.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: DocTitleOne,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"Custom Hooks\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"Instead of HOCs and render props, we can encapsulate our logic in a React hook and then import that hook whenever we feel the need. In our example we can create a custom hooks for fetching data. A custom hook is a JavaScript function whose name starts with \\\"use\\\".\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: customs,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(CustomHooks);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/ReactJs/reactJs_hooks/customHooks.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","useDocumentTitle","trim","DocTitleOne","customs","CustomHooks","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst useDocumentTitle = `\n//Count\nconst App = () => {\n  const [count, setCount]=useState(0);\n  const [toggle, setIsPouse]=useState(false);\n\n  const handlePouse=()=>{\n    setIsPouse(!toggle)\n    console.log(toggle,\"toggle\")\n  }\n\n  const handleCount=()=>{\n    if(toggle==true){\n      setCount(count+1)\n    }\n    else{\n      setCount(count-1)\n    }\n  }\n\n  const reset=()=>{\n    setCount(0)\n  }\n\n  return(\n    <div>\n      {count}<br/>\n      <button onClick={handleCount}>count</button>\n      <button onClick={handlePouse}>Pouse</button>\n      <button onClick={reset}>Reset</button>\n    </div>\n  )\n}\n\n\n//Progress\nconst App =() => {\n  const [count, setCount]=useState(0)\n  const [text,setText]=useState('Reach Maximum')\n\n  const handleProgress = () => {\n    if(count<100){\n      setCount(count+10)\n    }\n    else{\n      setText(text)\n    }\n  }\n\n  return(\n    <div>\n      {count<100 ? count: text}<br/>\n      <button onClick={handleProgress}>Progress</button>\n    </div>\n  )\n}\n`.trim()\n\nconst DocTitleOne = `\n//Counter.js\nimport React, { useState, useMemo } from 'react'\n\nfunction Counter() {\n    const [counterOne, setCounterOne] = useState(0)\n    const [counterTwo, setCounterTwo] = useState(0)\n\n    const incrementOne = () => {\n        setCounterOne(counterOne + 1)\n        }\n\n    const incrementTwo = () => {\n        setCounterTwo(counterTwo + 1)\n        }\n\n    const isEven = useMemo(() => {\n      let i = 0\n      while (i < 2000000000) i++\n          return counterOne % 2 === 0\n        }, [counterOne])\n\n    return (\n      <div>\n        <div>\n          <button onClick={incrementOne}>Count One - {counterOne}</button>\n            <span>{isEven ? 'Even' : 'Odd'}</span>\n            </div>\n            <div>\n          <button onClick={incrementTwo}>Count Two - {counterTwo}</button>\n        </div>\n      </div>\n    )\n}\n\nexport default Counter;\n`.trim();\n\nconst customs = `\nfunction useFetch(url) {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetch(url)\n      .then(response => response.json())\n      .then(data => setData(data));\n  }, []);\n\n  return data;\n}\n\n// import useFetch from \"./useFetch\";\nfunction App(props) {\n  const data = useFetch(\"https://jsonplaceholder.typicode.com/posts\");\n  return (\n    <div>\n      <ul>\n        {data.map(el => (\n          <li key={el.id}>{el.title}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}`.trim();\n\n\n\nclass CustomHooks extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Custom Hooks</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={useDocumentTitle}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Explain why and when would you use useMemo()?</h3>\n              In the lifecycle of a component, React re-renders the component when an update is made. When React checks for any \n              changes in a component, it may detect an unintended or unexpected change due to how JavaScript handles equality \n              and shallow comparisons. This change in the React application will cause it to re-render unnecessarily.\n              <br/>\n              <br/>\n              useMemo takes in a function and an array of dependencies. The dependency’s list are the elements useMemo watches: if there are no changes, the function result will stay the same. Otherwise, it will re-run the function. If they don’t change, it doesn’t matter if our entire component re-renders, the function won’t re-run but instead return the stored result.\n              <div style={titles}>\n                <PrismCode\n                  code={DocTitleOne}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Custom Hooks</h3>\n              <p>\n                Instead of HOCs and render props, we can encapsulate our logic in a React hook and then import that hook whenever\n                we feel the need. In our example we can create a custom hooks for fetching data.\n                A custom hook is a JavaScript function whose name starts with \"use\".\n                     </p>\n              <div style={titles}>\n                <PrismCode\n                  code={customs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(CustomHooks));\n"]},"metadata":{},"sourceType":"module"}