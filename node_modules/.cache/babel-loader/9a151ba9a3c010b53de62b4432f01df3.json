{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var commentsModel=\"\\nconst CommentSchema  = new Schems({\\n  comment:{ type:String, trim: true },\\n  author:{ type: mongoose.Schema.Types.ObjectId, required:true, ref:'User' },\\n  postId:{ type: mongoose.Schema.Types.ObjectId, required:true, ref:'Post' },\\n  createdAt:{ type: Date, default: Date.now }\\n});\\n\\nconst Comment = mongoose.model('Comment', CommentSchema);\\nmodule.exports = Comment;\\n\".trim();var postModel=\"\\nconst PostSchema  = new Schems({\\n  title:{ type:String, unique:true, required: true, trim: true },\\n  description:{ type: String, required:true, trim: true },\\n  author:{ type: mongoose.Schema.Types.ObjectId, required:true, ref:'User' },\\n  createdAt:{ type: Date, default: Date.now }\\n});\\n\\nPostSchema.virtual('comments', {\\n  ref: 'Comment',\\n  localField: '_id',\\n  foreignField: 'postId'\\n})\\n\\nconst Post = mongoose.model('Post', PostSchema);\\nmodule.exports = Post;\\n\".trim();var userModel=\"\\nconst validator = require('validator')\\nconst bcrypt    = require('bcryptjs')\\nconst jwt       = require('jsonwebtoken')\\nconst Post      = require('./post')\\n\\nconst UserSchema  = Schems({\\n    name:{ type: String, required: true, trim: true },\\n    age:{ type: Number, default: 0,\\n        validate(value){\\n            if(value < 0){\\n                throw new Error('Age must be a positive number')\\n            }\\n        }\\n    },\\n    email:{ type: String, required: true, unique:true, trim: true,\\n        validate(value){\\n            if(!validator.isEmail(value)){\\n                throw new Error('Email is invalid!')\\n            }\\n        }\\n    },\\n    password:{ type:String, required:true, trim:true, minlength: 7,\\n        validate(value){\\n            if(validator.isEmpty(value)){\\n                throw new Error('Please enter your password!')\\n            }else if(validator.equals(value.toLowerCase(),\\\"password\\\")){\\n                throw new Error('Password is invalid!')\\n            }else if(validator.contains(value.toLowerCase(), \\\"password\\\")){\\n                throw new Error('Password should not contain password!')\\n            }\\n        }\\n    },\\n    tokens:[{\\n        token:{ type:String, required: true }\\n    }],\\n    createdAt:{ type: Date, default: Date.now }\\n});\\n\\nUserSchema.virtual('posts', {\\n    ref: 'Post',\\n    localField: '_id',\\n    foreignField: 'author'\\n})\\n\\n\\n\\n\\nUserSchema.statics.checkValidCredentials = async (email, password) => {\\n    const user = await User.findOne({email})\\n\\n    if(!user){\\n        throw new Error('Unable to login 2')\\n    }\\n    const isMatch = await bcrypt.compare(password,user.password)\\n\\n    if(!isMatch){\\n        throw new Error('Unable to login 2')\\n    }\\n\\n    return user\\n}\\n\\nUserSchema.methods.newAuthToken = async function(){\\n    const user  = this\\n    const token =  jwt.sign({ _id: user.id.toString()}, \\\"thisiskey\\\")\\n    user.tokens = user.tokens.concat({ token })\\n    await user.save()\\n    return token\\n}\\n\\nUserSchema.methods.toJSON = function(){\\n    const user = this\\n    const userObj = user.toObject()\\n\\n    delete userObj.password\\n    delete userObj.tokens\\n\\n    return userObj\\n}\\n\\n//hash the plain text password before saving\\nUserSchema.pre('save', async function(next){\\n    const user = this\\n    if(user.isModified('password')){\\n        user.password = await bcrypt.hash(user.password, 8)\\n    }\\n    next()\\n})\\n\\nUserSchema.pre('remove', async function(next){\\n    const user = this\\n    await Post.deleteMany({author: user._id})\\n    next()\\n})\\n\\nconst User = mongoose.model('User', UserSchema);\\nmodule.exports = User;\".trim();var middleware=\"\\nconst jwt  = require('jsonwebtoken')\\nconst User = require('../models/user')\\n\\nconst auth = async (req,res,next) => {\\n    try {\\n        const token = req.header('Authorization').replace('Bearer', '').trim()\\n        const decoded  =  jwt.verify(token, \\\"thisiskey\\\")\\n        const user  = await User.findOne({ _id:decoded._id, 'tokens.token': token})\\n\\n        if(!user){\\n            throw new Error()\\n        }\\n        req.token = token\\n        req.user = user\\n        next()\\n    } catch (error) {\\n        console.log(error)\\n        res.status(401).send({error:'Please authenticate!'})\\n    }\\n}\\n\\nmodule.exports = auth;\\n\".trim();var userRoutes=\"\\nconst Post          = require('../models/post')\\nconst Comment       = require('../models/comment')\\nconst {ObjectID}    = require('mongodb')\\nconst  authenticate = require('../middleware/auth')\\n\\nrouter.post('/posts',authenticate, async (req,res) => {\\n    const post =  new Post({\\n        ...req.body,\\n        author: req.user._id\\n    })\\n    try {\\n        await post.save()\\n        res.status(201).send(post)\\n    } catch (error) {\\n        res.status(400).send(error)\\n    }\\n})\\n\\nrouter.get('/posts',async (req,res) => {\\n    try {\\n        const posts = await Post.find({})\\n        res.send(posts)\\n    } catch (error) {\\n        res.status(500).send()\\n    }\\n})\\n\\nrouter.get('/posts/:id',authenticate, async (req,res) => {\\n    const _id =  req.params.id\\n    if (!ObjectID.isValid(_id)) {\\n        return res.status(404).send();\\n    }\\n    try {\\n        const post = await Post.findOne({ _id, author: req.user._id })\\n        if(!post){\\n            return res.status(404).send()\\n        }\\n        res.send(post);\\n    } catch (error) {\\n        res.status(500).send()\\n    }\\n})\\n\\nrouter.post('/posts/:id/comment',authenticate, async (req,res) => {   \\n    const _id = req.params.id\\n    const userid = req.user._id\\n\\n    if (!ObjectID.isValid(_id)) {\\n        return res.status(404).send();\\n    }\\n\\n    if (!ObjectID.isValid(userid)) {\\n        return res.status(404).send();\\n    }\\n\\n    const comment = new Comment({\\n        ...req.body,\\n        author: userid,\\n        postId: _id\\n    })\\n\\n    try {\\n        await comment.save()\\n        res.status(201).send(comment)\\n    } catch (error) {\\n        res.status(400).send(error)\\n    }\\n\\n})\\n\\n//get all the comments related to the post\\nrouter.get('/posts/:id/comment', async (req,res) => {\\n    try {\\n        const post = await Post.findOne({_id: req.params.id})\\n        await post.populate('comments').execPopulate()\\n        res.send(post.comments)\\n    } catch (error) {\\n        res.status(500).send()\\n    }\\n})\\n\\nrouter.patch('/posts/:id',authenticate, async (req, res) => {\\n    const _id = req.params.id\\n    const updates = Object.keys(req.body);\\n    const allowedUpdates = [\\\"description\\\", \\\"title\\\"]\\n    const isValidOperation  = updates.every((update) => allowedUpdates.includes(update))\\n    if(!isValidOperation){\\n        res.status(400).send({error:'Invalid updates'})\\n    }\\n    if (!ObjectID.isValid(_id)) {\\n        res.status(404).send();\\n    }\\n    try {\\n        const post = await Post.findOne({_id: req.params.id, author:req.user._id})\\n        \\n       if(!post){\\n        res.status(404).send();\\n       }\\n\\n       updates.forEach((update) => post[update] = req.body[update])\\n       await post.save()\\n\\n       res.send(post);\\n    } catch (error) {\\n        res.status(400).send();\\n    }\\n})\\n\\nrouter.delete('/posts/:id', authenticate,async (req,res) => {\\n    const _id = req.params.id\\n    if (!ObjectID.isValid(_id)) {\\n        return res.status(404).send();\\n    }\\n    try {\\n        const deletepost = await Post.findOneAndDelete({_id:_id, author: req.user._id})\\n        if (!deletepost) {\\n            return res.status(404).send();\\n        }\\n        res.send(deletepost)\\n    } catch (error) {\\n        res.status(500).send()\\n    }\\n})\\n\\nmodule.exports = router;\".trim();var postRoutes=\"\\nconst User = require('../models/user')\\nconst {ObjectID} = require('mongodb')\\n\\nconst authenticate  = require('../middleware/auth')\\n\\nrouter.post('/users', async (req,res) => {\\n    const user = new User(req.body);\\n    try{\\n        const token = await user.newAuthToken()\\n        res.status(201).send({user, token})\\n    }catch(e){\\n        res.status(400).send(e)\\n    }\\n})\\n\\nrouter.get('/users/me', authenticate ,async (req,res)=> {\\n   res.send(req.user)\\n})\\n\\n\\nrouter.patch('/users/me',authenticate ,async (req,res) => {\\n    const updates  = Object.keys(req.body)\\n    const allowedUpdates = [\\\"name\\\", \\\"email\\\", \\\"password\\\", \\\"age\\\"]\\n    const isValidOperation = updates.every((update) => allowedUpdates.includes(update))\\n    const _id =  req.user._id\\n\\n    if(!isValidOperation){\\n        res.status(400).send({error:'Invalid request'})\\n    }\\n\\n    if (!ObjectID.isValid(_id)) {\\n        return res.status(404).send();\\n    }\\n\\n    try {        \\n        updates.forEach((update) => req.user[update] = req.body[update]) \\n        await req.user.save()\\n        res.send(req.user);\\n    } catch (error) {\\n        res.status(400).send()\\n    }\\n\\n})\\n\\nrouter.delete('/users/me', authenticate, async (req,res) => {\\n    if (!ObjectID.isValid(req.user._id)) {\\n        return res.status(404).send();\\n    }\\n\\n    try {\\n        await req.user.remove()\\n        res.send(req.user)\\n    } catch (error) {\\n        res.status(500).send()\\n    }\\n})\\n\\nrouter.post('/users/login', async (req, res) => {\\n    try {\\n        const user  = await User.checkValidCredentials(req.body.email, req.body.password)\\n        const token = await user.newAuthToken()\\n        console.log(user,token)\\n        res.send({ user, token})\\n    } catch (error) {\\n        console.log(error);\\n        res.status(400).send({error})        \\n    }\\n})\\n\\nrouter.post('/users/logout', authenticate, async (req, res) => {\\n    try {\\n        req.user.tokens = req.user.tokens.filter((token) =>{\\n         return token.token !== req.token \\n        })\\n        await req.user.save()\\n        res.send()\\n    } catch (error) {\\n        res.status(500).send()\\n    }\\n})\\n\\n\\nrouter.post('/users/logoutall', authenticate, async (req, res) => {\\n    try {\\n        req.user.tokens = []\\n        await req.user.save()\\n        res.send()\\n    } catch (error) {\\n        res.status(500).send()\\n    }\\n})\\n\\nmodule.exports = router;\".trim();var server=\"\\nconst dbCon = require('./db/db');\\nconst userRoutes = require('./router/user')\\nconst PostRoutes = require('./router/post')\\n\\napp.use(\\\"/items\\\",userRoutes)\\napp.use(\\\"/items\\\",PostRoutes)\\n\".trim();var postman=\"\\n{\\n\\\"info\\\": {\\n\\t\\\"_postman_id\\\": \\\"2adff8c6-a833-4fdd-8846-929dea464969\\\",\\n\\t\\\"name\\\": \\\"NodejsAuth\\\",\\n\\t\\\"schema\\\": \\\"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\\\"\\n},\\n\\t\\\"item\\\": [\\n\\t\\t{\\n\\t\\t\\t\\\"name\\\": \\\"Create Users\\\",\\n\\t\\t\\t\\\"request\\\": {\\n\\t\\t\\t\\t\\\"auth\\\": {\\n\\t\\t\\t\\t\\t\\\"type\\\": \\\"noauth\\\"\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"method\\\": \\\"POST\\\",\\n\\t\\t\\t\\t\\\"header\\\": [\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\\"key\\\": \\\"Content-Type\\\",\\n\\t\\t\\t\\t\\t\\t\\\"value\\\": \\\"application/json\\\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\\"body\\\": {\\n\\t\\t\\t\\t\\t\\\"mode\\\": \\\"raw\\\",\\n\\t\\t\\t\\t\\t\\\"raw\\\": \\\"{\\n\\t\\\"name\\\":\\\"qwerty\\\",\\n\\t\\\"age\\\":40,\\n\\t\\\"email\\\":\\\"dummy1222@gmail.com\\\",\\n\\t\\\"password\\\":\\\"12345678\\\"\\n}\\\"\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"url\\\": {\\n\\t\\t\\t\\t\\t\\\"raw\\\": \\\"{{nodeurl}}/users\\\",\\n\\t\\t\\t\\t\\t\\\"host\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"{{nodeurl}}\\\"\\n\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\\"path\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"users\\\"\\n\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\t\\\"response\\\": []\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\t\\\"name\\\": \\\"Create Post\\\",\\n\\t\\t\\t\\\"request\\\": {\\n\\t\\t\\t\\t\\\"method\\\": \\\"POST\\\",\\n\\t\\t\\t\\t\\\"header\\\": [\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\\"key\\\": \\\"Content-Type\\\",\\n\\t\\t\\t\\t\\t\\t\\\"value\\\": \\\"application/json\\\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\\"body\\\": {\\n\\t\\t\\t\\t\\t\\\"mode\\\": \\\"raw\\\",\\n\\t\\t\\t\\t\\t\\\"raw\\\": \\\"{\\n\\t\\\"title\\\":\\\"Nodejs blog12\\\",\\n\\t\\\"description\\\":\\\"this is new blog on nodejs\\\"\\n}\\\"\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"url\\\": {\\n\\t\\t\\t\\t\\t\\\"raw\\\": \\\"{{nodeurl}}/posts\\\",\\n\\t\\t\\t\\t\\t\\\"host\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"{{nodeurl}}\\\"\\n\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\\"path\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"posts\\\"\\n\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\t\\\"response\\\": []\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\t\\\"name\\\": \\\"Read Profile\\\",\\n\\t\\t\\t\\\"request\\\": {\\n\\t\\t\\t\\t\\\"method\\\": \\\"GET\\\",\\n\\t\\t\\t\\t\\\"header\\\": [\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\\"key\\\": \\\"Content-Type\\\",\\n\\t\\t\\t\\t\\t\\t\\\"value\\\": \\\"application/json\\\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\\"body\\\": {\\n\\t\\t\\t\\t\\t\\\"mode\\\": \\\"raw\\\",\\n\\t\\t\\t\\t\\t\\\"raw\\\": \\\"\\\"\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"url\\\": {\\n\\t\\t\\t\\t\\t\\\"raw\\\": \\\"{{nodeurl}}/users/me\\\",\\n\\t\\t\\t\\t\\t\\\"host\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"{{nodeurl}}\\\"\\n\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\\"path\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"users\\\",\\n\\t\\t\\t\\t\\t\\t\\\"me\\\"\\n\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\t\\\"response\\\": []\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\t\\\"name\\\": \\\"Read Single Post\\\",\\n\\t\\t\\t\\\"request\\\": {\\n\\t\\t\\t\\t\\\"method\\\": \\\"GET\\\",\\n\\t\\t\\t\\t\\\"header\\\": [\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\\"key\\\": \\\"Content-Type\\\",\\n\\t\\t\\t\\t\\t\\t\\\"value\\\": \\\"application/json\\\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\\"body\\\": {\\n\\t\\t\\t\\t\\t\\\"mode\\\": \\\"raw\\\",\\n\\t\\t\\t\\t\\t\\\"raw\\\": \\\"\\\"\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"url\\\": {\\n\\t\\t\\t\\t\\t\\\"raw\\\": \\\"{{nodeurl}}/posts/5ca765dcde6cdb0017d34fd2\\\",\\n\\t\\t\\t\\t\\t\\\"host\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"{{nodeurl}}\\\"\\n\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\\"path\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"posts\\\",\\n\\t\\t\\t\\t\\t\\t\\\"5ca765dcde6cdb0017d34fd2\\\"\\n\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\t\\\"response\\\": []\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\t\\\"name\\\": \\\"Comment on single post\\\",\\n\\t\\t\\t\\\"request\\\": {\\n\\t\\t\\t\\t\\\"method\\\": \\\"POST\\\",\\n\\t\\t\\t\\t\\\"header\\\": [\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\\"key\\\": \\\"Content-Type\\\",\\n\\t\\t\\t\\t\\t\\t\\\"value\\\": \\\"application/json\\\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\\"body\\\": {\\n\\t\\t\\t\\t\\t\\\"mode\\\": \\\"raw\\\",\\n\\t\\t\\t\\t\\t\\\"raw\\\": \\\"{\\n\\t\\\"comment\\\":\\\"Nice article\\\"\\n}\\\"\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"url\\\": {\\n\\t\\t\\t\\t\\t\\\"raw\\\": \\\"{{nodeurl}}/posts/5ca765dcde6cdb0017d34fd2/comment\\\",\\n\\t\\t\\t\\t\\t\\\"host\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"{{nodeurl}}\\\"\\n\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\\"path\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"posts\\\",\\n\\t\\t\\t\\t\\t\\t\\\"5ca765dcde6cdb0017d34fd2\\\",\\n\\t\\t\\t\\t\\t\\t\\\"comment\\\"\\n\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\t\\\"response\\\": []\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\t\\\"name\\\": \\\"Fecth comment on single post\\\",\\n\\t\\t\\t\\\"protocolProfileBehavior\\\": {\\n\\t\\t\\t\\t\\\"disableBodyPruning\\\": true\\n\\t\\t\\t},\\n\\t\\t\\t\\\"request\\\": {\\n\\t\\t\\t\\t\\\"auth\\\": {\\n\\t\\t\\t\\t\\t\\\"type\\\": \\\"noauth\\\"\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"method\\\": \\\"GET\\\",\\n\\t\\t\\t\\t\\\"header\\\": [\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\\"key\\\": \\\"Content-Type\\\",\\n\\t\\t\\t\\t\\t\\t\\\"value\\\": \\\"application/json\\\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\\"body\\\": {\\n\\t\\t\\t\\t\\t\\\"mode\\\": \\\"raw\\\",\\n\\t\\t\\t\\t\\t\\\"raw\\\": \\\"{\\n\\t\\\"comment\\\":\\\"Nice article\\\"\\n}\\\"\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"url\\\": {\\n\\t\\t\\t\\t\\t\\\"raw\\\": \\\"{{nodeurl}}/posts/5ca765dcde6cdb0017d34fd2/comment\\\",\\n\\t\\t\\t\\t\\t\\\"host\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"{{nodeurl}}\\\"\\n\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\\"path\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"posts\\\",\\n\\t\\t\\t\\t\\t\\t\\\"5ca765dcde6cdb0017d34fd2\\\",\\n\\t\\t\\t\\t\\t\\t\\\"comment\\\"\\n\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\t\\\"response\\\": []\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\t\\\"name\\\": \\\"Read Posts\\\",\\n\\t\\t\\t\\\"request\\\": {\\n\\t\\t\\t\\t\\\"method\\\": \\\"GET\\\",\\n\\t\\t\\t\\t\\\"header\\\": [\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\\"key\\\": \\\"Content-Type\\\",\\n\\t\\t\\t\\t\\t\\t\\\"value\\\": \\\"application/json\\\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\\"body\\\": {\\n\\t\\t\\t\\t\\t\\\"mode\\\": \\\"raw\\\",\\n\\t\\t\\t\\t\\t\\\"raw\\\": \\\"\\\"\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"url\\\": {\\n\\t\\t\\t\\t\\t\\\"raw\\\": \\\"{{nodeurl}}/posts\\\",\\n\\t\\t\\t\\t\\t\\\"host\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"{{nodeurl}}\\\"\\n\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\\"path\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"posts\\\"\\n\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\t\\\"response\\\": []\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\t\\\"name\\\": \\\"Update user\\\",\\n\\t\\t\\t\\\"request\\\": {\\n\\t\\t\\t\\t\\\"method\\\": \\\"PATCH\\\",\\n\\t\\t\\t\\t\\\"header\\\": [\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\\"key\\\": \\\"Content-Type\\\",\\n\\t\\t\\t\\t\\t\\t\\\"value\\\": \\\"application/json\\\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\\"body\\\": {\\n\\t\\t\\t\\t\\t\\\"mode\\\": \\\"raw\\\",\\n\\t\\t\\t\\t\\t\\\"raw\\\": \\\"{\\n  \\\"name\\\": \\\"dummy12\\\",\\n  \\\"password\\\":\\\"1234567890\\\"\\n\\t\\n}\\\"\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"url\\\": {\\n\\t\\t\\t\\t\\t\\\"raw\\\": \\\"{{nodeurl}}/users/me\\\",\\n\\t\\t\\t\\t\\t\\\"host\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"{{nodeurl}}\\\"\\n\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\\"path\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"users\\\",\\n\\t\\t\\t\\t\\t\\t\\\"me\\\"\\n\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\t\\\"response\\\": []\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\t\\\"name\\\": \\\"Update Post\\\",\\n\\t\\t\\t\\\"request\\\": {\\n\\t\\t\\t\\t\\\"method\\\": \\\"PATCH\\\",\\n\\t\\t\\t\\t\\\"header\\\": [\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\\"key\\\": \\\"Content-Type\\\",\\n\\t\\t\\t\\t\\t\\t\\\"value\\\": \\\"application/json\\\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\\"body\\\": {\\n\\t\\t\\t\\t\\t\\\"mode\\\": \\\"raw\\\",\\n\\t\\t\\t\\t\\t\\\"raw\\\": \\\"{\\n  \\\"title\\\":\\\"dummy blog\\\",\\n  \\\"description\\\":\\\"this is the first post\\\"\\n}\\\"\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"url\\\": {\\n\\t\\t\\t\\t\\t\\\"raw\\\": \\\"{{nodeurl}}/posts/5ca733287c6a7fe6b373c0d6\\\",\\n\\t\\t\\t\\t\\t\\\"host\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"{{nodeurl}}\\\"\\n\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\\"path\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"posts\\\",\\n\\t\\t\\t\\t\\t\\t\\\"5ca733287c6a7fe6b373c0d6\\\"\\n\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\t\\\"response\\\": []\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\t\\\"name\\\": \\\"Delete User\\\",\\n\\t\\t\\t\\\"request\\\": {\\n\\t\\t\\t\\t\\\"method\\\": \\\"DELETE\\\",\\n\\t\\t\\t\\t\\\"header\\\": [\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\\"key\\\": \\\"Content-Type\\\",\\n\\t\\t\\t\\t\\t\\t\\\"value\\\": \\\"application/json\\\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\\"body\\\": {\\n\\t\\t\\t\\t\\t\\\"mode\\\": \\\"raw\\\",\\n\\t\\t\\t\\t\\t\\\"raw\\\": \\\"{\\n  \\\"description\\\":\\\"goto  sleep\\\",\\n  \\\"completed\\\":false\\n}\\\"\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"url\\\": {\\n\\t\\t\\t\\t\\t\\\"raw\\\": \\\"{{nodeurl}}/users/me\\\",\\n\\t\\t\\t\\t\\t\\\"host\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"{{nodeurl}}\\\"\\n\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\\"path\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"users\\\",\\n\\t\\t\\t\\t\\t\\t\\\"me\\\"\\n\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\t\\\"response\\\": []\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\t\\\"name\\\": \\\"Delete Post\\\",\\n\\t\\t\\t\\\"request\\\": {\\n\\t\\t\\t\\t\\\"method\\\": \\\"DELETE\\\",\\n\\t\\t\\t\\t\\\"header\\\": [\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\\"key\\\": \\\"Content-Type\\\",\\n\\t\\t\\t\\t\\t\\t\\\"value\\\": \\\"application/json\\\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\\"body\\\": {\\n\\t\\t\\t\\t\\t\\\"mode\\\": \\\"raw\\\",\\n\\t\\t\\t\\t\\t\\\"raw\\\": \\\"\\\"\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"url\\\": {\\n\\t\\t\\t\\t\\t\\\"raw\\\": \\\"{{nodeurl}}/posts/5ca733287c6a7fe6b373c0d6\\\",\\n\\t\\t\\t\\t\\t\\\"host\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"{{nodeurl}}\\\"\\n\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\\"path\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"posts\\\",\\n\\t\\t\\t\\t\\t\\t\\\"5ca733287c6a7fe6b373c0d6\\\"\\n\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\t\\\"response\\\": []\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\t\\\"name\\\": \\\"User Login\\\",\\n\\t\\t\\t\\\"event\\\": [\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\\"listen\\\": \\\"test\\\",\\n\\t\\t\\t\\t\\t\\\"script\\\": {\\n\\t\\t\\t\\t\\t\\t\\\"id\\\": \\\"0e178f47-3f34-456f-b738-ca330497c1f3\\\",\\n\\t\\t\\t\\t\\t\\t\\\"exec\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"if(pm.response.code === 200 ){\\\",\\n\\t\\t\\t\\t\\t\\t\\\"pm.environment.set('authtoken', pm.response.json().token)\\\",\\n\\t\\t\\t\\t\\t\\t\\\"}\\\"\\n\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\\"type\\\": \\\"text/javascript\\\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t],\\n\\t\\t\\t\\\"request\\\": {\\n\\t\\t\\t\\t\\\"auth\\\": {\\n\\t\\t\\t\\t\\t\\\"type\\\": \\\"noauth\\\"\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"method\\\": \\\"POST\\\",\\n\\t\\t\\t\\t\\\"header\\\": [\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\\"key\\\": \\\"Content-Type\\\",\\n\\t\\t\\t\\t\\t\\t\\\"value\\\": \\\"application/json\\\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\\"body\\\": {\\n\\t\\t\\t\\t\\t\\\"mode\\\": \\\"raw\\\",\\n\\t\\t\\t\\t\\t\\\"raw\\\": \\\"{\\n \\\"email\\\":\\\"dummy1222@gmail.com\\\",\\n \\\"password\\\":\\\"12345678\\\"\\n}\\\"\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"url\\\": {\\n\\t\\t\\t\\t\\t\\\"raw\\\": \\\"{{nodeurl}}/users/login\\\",\\n\\t\\t\\t\\t\\t\\\"host\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"{{nodeurl}}\\\"\\n\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\\"path\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"users\\\",\\n\\t\\t\\t\\t\\t\\t\\\"login\\\"\\n\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\t\\\"response\\\": []\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\t\\\"name\\\": \\\"Logout \\\",\\n\\t\\t\\t\\\"request\\\": {\\n\\t\\t\\t\\t\\\"method\\\": \\\"POST\\\",\\n\\t\\t\\t\\t\\\"header\\\": [\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\\"key\\\": \\\"Content-Type\\\",\\n\\t\\t\\t\\t\\t\\t\\\"value\\\": \\\"application/json\\\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\\"body\\\": {\\n\\t\\t\\t\\t\\t\\\"mode\\\": \\\"raw\\\",\\n\\t\\t\\t\\t\\t\\\"raw\\\": \\\"\\\"\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"url\\\": {\\n\\t\\t\\t\\t\\t\\\"raw\\\": \\\"{{nodeurl}}/users/logout\\\",\\n\\t\\t\\t\\t\\t\\\"host\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"{{nodeurl}}\\\"\\n\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\\"path\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"users\\\",\\n\\t\\t\\t\\t\\t\\t\\\"logout\\\"\\n\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\t\\\"response\\\": []\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\t\\\"name\\\": \\\"Logout All\\\",\\n\\t\\t\\t\\\"request\\\": {\\n\\t\\t\\t\\t\\\"method\\\": \\\"POST\\\",\\n\\t\\t\\t\\t\\\"header\\\": [\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\\"key\\\": \\\"Content-Type\\\",\\n\\t\\t\\t\\t\\t\\t\\\"value\\\": \\\"application/json\\\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\\"body\\\": {\\n\\t\\t\\t\\t\\t\\\"mode\\\": \\\"raw\\\",\\n\\t\\t\\t\\t\\t\\\"raw\\\": \\\"\\\"\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"url\\\": {\\n\\t\\t\\t\\t\\t\\\"raw\\\": \\\"{{nodeurl}}/users/logout\\\",\\n\\t\\t\\t\\t\\t\\\"host\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"{{nodeurl}}\\\"\\n\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\\"path\\\": [\\n\\t\\t\\t\\t\\t\\t\\\"users\\\",\\n\\t\\t\\t\\t\\t\\t\\\"logout\\\"\\n\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\t\\\"response\\\": []\\n\\t\\t}\\n\\t],\\n\\t\\\"auth\\\": {\\n\\t\\t\\\"type\\\": \\\"bearer\\\",\\n\\t\\t\\\"bearer\\\": [\\n\\t\\t\\t{\\n\\t\\t\\t\\t\\\"key\\\": \\\"token\\\",\\n\\t\\t\\t\\t\\\"value\\\": \\\"{{authtoken}}\\\",\\n\\t\\t\\t\\t\\\"type\\\": \\\"string\\\"\\n\\t\\t\\t}\\n\\t\\t]\\n\\t},\\n\\t\\\"event\\\": [\\n\\t\\t{\\n\\t\\t\\t\\\"listen\\\": \\\"prerequest\\\",\\n\\t\\t\\t\\\"script\\\": {\\n\\t\\t\\t\\t\\\"id\\\": \\\"9c7ef4d3-64b2-49fe-b1db-65a8c6b26b1a\\\",\\n\\t\\t\\t\\t\\\"type\\\": \\\"text/javascript\\\",\\n\\t\\t\\t\\t\\\"exec\\\": [\\n\\t\\t\\t\\t\\t\\\"\\\"\\n\\t\\t\\t\\t]\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\t\\\"listen\\\": \\\"test\\\",\\n\\t\\t\\t\\\"script\\\": {\\n\\t\\t\\t\\t\\\"id\\\": \\\"5df7dc9c-9a59-4ceb-befc-6dcef99063dd\\\",\\n\\t\\t\\t\\t\\\"type\\\": \\\"text/javascript\\\",\\n\\t\\t\\t\\t\\\"exec\\\": [\\n\\t\\t\\t\\t\\t\\\"\\\"\\n\\t\\t\\t\\t]\\n\\t\\t\\t}\\n\\t\\t}\\n\\t]\\n}\".trim();var SearchPagination=/*#__PURE__*/function(_Component){_inherits(SearchPagination,_Component);function SearchPagination(){_classCallCheck(this,SearchPagination);return _possibleConstructorReturn(this,_getPrototypeOf(SearchPagination).apply(this,arguments));}_createClass(SearchPagination,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Search_Pagination_Sort\"),React.createElement(\"b\",null,\"middleware/auth.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:middleware,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"models/commets.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:commentsModel,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"models/post.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:postModel,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"models/user.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:userModel,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"router/post.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:userRoutes,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"router/user.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:postRoutes,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"server.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:server,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"postman\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:postman,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return SearchPagination;}(Component);export default withStyles(styles)(SearchPagination);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/nodeJs/nodeDeep/search_pagination.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","commentsModel","trim","postModel","userModel","middleware","userRoutes","postRoutes","server","postman","SearchPagination","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst commentsModel = `\nconst CommentSchema  = new Schems({\n  comment:{ type:String, trim: true },\n  author:{ type: mongoose.Schema.Types.ObjectId, required:true, ref:'User' },\n  postId:{ type: mongoose.Schema.Types.ObjectId, required:true, ref:'Post' },\n  createdAt:{ type: Date, default: Date.now }\n});\n\nconst Comment = mongoose.model('Comment', CommentSchema);\nmodule.exports = Comment;\n`.trim();\n\nconst postModel = `\nconst PostSchema  = new Schems({\n  title:{ type:String, unique:true, required: true, trim: true },\n  description:{ type: String, required:true, trim: true },\n  author:{ type: mongoose.Schema.Types.ObjectId, required:true, ref:'User' },\n  createdAt:{ type: Date, default: Date.now }\n});\n\nPostSchema.virtual('comments', {\n  ref: 'Comment',\n  localField: '_id',\n  foreignField: 'postId'\n})\n\nconst Post = mongoose.model('Post', PostSchema);\nmodule.exports = Post;\n`.trim();\n\nconst userModel = `\nconst validator = require('validator')\nconst bcrypt    = require('bcryptjs')\nconst jwt       = require('jsonwebtoken')\nconst Post      = require('./post')\n\nconst UserSchema  = Schems({\n    name:{ type: String, required: true, trim: true },\n    age:{ type: Number, default: 0,\n        validate(value){\n            if(value < 0){\n                throw new Error('Age must be a positive number')\n            }\n        }\n    },\n    email:{ type: String, required: true, unique:true, trim: true,\n        validate(value){\n            if(!validator.isEmail(value)){\n                throw new Error('Email is invalid!')\n            }\n        }\n    },\n    password:{ type:String, required:true, trim:true, minlength: 7,\n        validate(value){\n            if(validator.isEmpty(value)){\n                throw new Error('Please enter your password!')\n            }else if(validator.equals(value.toLowerCase(),\"password\")){\n                throw new Error('Password is invalid!')\n            }else if(validator.contains(value.toLowerCase(), \"password\")){\n                throw new Error('Password should not contain password!')\n            }\n        }\n    },\n    tokens:[{\n        token:{ type:String, required: true }\n    }],\n    createdAt:{ type: Date, default: Date.now }\n});\n\nUserSchema.virtual('posts', {\n    ref: 'Post',\n    localField: '_id',\n    foreignField: 'author'\n})\n\n\n\n\nUserSchema.statics.checkValidCredentials = async (email, password) => {\n    const user = await User.findOne({email})\n\n    if(!user){\n        throw new Error('Unable to login 2')\n    }\n    const isMatch = await bcrypt.compare(password,user.password)\n\n    if(!isMatch){\n        throw new Error('Unable to login 2')\n    }\n\n    return user\n}\n\nUserSchema.methods.newAuthToken = async function(){\n    const user  = this\n    const token =  jwt.sign({ _id: user.id.toString()}, \"thisiskey\")\n    user.tokens = user.tokens.concat({ token })\n    await user.save()\n    return token\n}\n\nUserSchema.methods.toJSON = function(){\n    const user = this\n    const userObj = user.toObject()\n\n    delete userObj.password\n    delete userObj.tokens\n\n    return userObj\n}\n\n//hash the plain text password before saving\nUserSchema.pre('save', async function(next){\n    const user = this\n    if(user.isModified('password')){\n        user.password = await bcrypt.hash(user.password, 8)\n    }\n    next()\n})\n\nUserSchema.pre('remove', async function(next){\n    const user = this\n    await Post.deleteMany({author: user._id})\n    next()\n})\n\nconst User = mongoose.model('User', UserSchema);\nmodule.exports = User;`.trim();\n\nconst middleware = `\nconst jwt  = require('jsonwebtoken')\nconst User = require('../models/user')\n\nconst auth = async (req,res,next) => {\n    try {\n        const token = req.header('Authorization').replace('Bearer', '').trim()\n        const decoded  =  jwt.verify(token, \"thisiskey\")\n        const user  = await User.findOne({ _id:decoded._id, 'tokens.token': token})\n\n        if(!user){\n            throw new Error()\n        }\n        req.token = token\n        req.user = user\n        next()\n    } catch (error) {\n        console.log(error)\n        res.status(401).send({error:'Please authenticate!'})\n    }\n}\n\nmodule.exports = auth;\n`.trim();\n\nconst userRoutes = `\nconst Post          = require('../models/post')\nconst Comment       = require('../models/comment')\nconst {ObjectID}    = require('mongodb')\nconst  authenticate = require('../middleware/auth')\n\nrouter.post('/posts',authenticate, async (req,res) => {\n    const post =  new Post({\n        ...req.body,\n        author: req.user._id\n    })\n    try {\n        await post.save()\n        res.status(201).send(post)\n    } catch (error) {\n        res.status(400).send(error)\n    }\n})\n\nrouter.get('/posts',async (req,res) => {\n    try {\n        const posts = await Post.find({})\n        res.send(posts)\n    } catch (error) {\n        res.status(500).send()\n    }\n})\n\nrouter.get('/posts/:id',authenticate, async (req,res) => {\n    const _id =  req.params.id\n    if (!ObjectID.isValid(_id)) {\n        return res.status(404).send();\n    }\n    try {\n        const post = await Post.findOne({ _id, author: req.user._id })\n        if(!post){\n            return res.status(404).send()\n        }\n        res.send(post);\n    } catch (error) {\n        res.status(500).send()\n    }\n})\n\nrouter.post('/posts/:id/comment',authenticate, async (req,res) => {   \n    const _id = req.params.id\n    const userid = req.user._id\n\n    if (!ObjectID.isValid(_id)) {\n        return res.status(404).send();\n    }\n\n    if (!ObjectID.isValid(userid)) {\n        return res.status(404).send();\n    }\n\n    const comment = new Comment({\n        ...req.body,\n        author: userid,\n        postId: _id\n    })\n\n    try {\n        await comment.save()\n        res.status(201).send(comment)\n    } catch (error) {\n        res.status(400).send(error)\n    }\n\n})\n\n//get all the comments related to the post\nrouter.get('/posts/:id/comment', async (req,res) => {\n    try {\n        const post = await Post.findOne({_id: req.params.id})\n        await post.populate('comments').execPopulate()\n        res.send(post.comments)\n    } catch (error) {\n        res.status(500).send()\n    }\n})\n\nrouter.patch('/posts/:id',authenticate, async (req, res) => {\n    const _id = req.params.id\n    const updates = Object.keys(req.body);\n    const allowedUpdates = [\"description\", \"title\"]\n    const isValidOperation  = updates.every((update) => allowedUpdates.includes(update))\n    if(!isValidOperation){\n        res.status(400).send({error:'Invalid updates'})\n    }\n    if (!ObjectID.isValid(_id)) {\n        res.status(404).send();\n    }\n    try {\n        const post = await Post.findOne({_id: req.params.id, author:req.user._id})\n        \n       if(!post){\n        res.status(404).send();\n       }\n\n       updates.forEach((update) => post[update] = req.body[update])\n       await post.save()\n\n       res.send(post);\n    } catch (error) {\n        res.status(400).send();\n    }\n})\n\nrouter.delete('/posts/:id', authenticate,async (req,res) => {\n    const _id = req.params.id\n    if (!ObjectID.isValid(_id)) {\n        return res.status(404).send();\n    }\n    try {\n        const deletepost = await Post.findOneAndDelete({_id:_id, author: req.user._id})\n        if (!deletepost) {\n            return res.status(404).send();\n        }\n        res.send(deletepost)\n    } catch (error) {\n        res.status(500).send()\n    }\n})\n\nmodule.exports = router;`.trim();\n\nconst postRoutes = `\nconst User = require('../models/user')\nconst {ObjectID} = require('mongodb')\n\nconst authenticate  = require('../middleware/auth')\n\nrouter.post('/users', async (req,res) => {\n    const user = new User(req.body);\n    try{\n        const token = await user.newAuthToken()\n        res.status(201).send({user, token})\n    }catch(e){\n        res.status(400).send(e)\n    }\n})\n\nrouter.get('/users/me', authenticate ,async (req,res)=> {\n   res.send(req.user)\n})\n\n\nrouter.patch('/users/me',authenticate ,async (req,res) => {\n    const updates  = Object.keys(req.body)\n    const allowedUpdates = [\"name\", \"email\", \"password\", \"age\"]\n    const isValidOperation = updates.every((update) => allowedUpdates.includes(update))\n    const _id =  req.user._id\n\n    if(!isValidOperation){\n        res.status(400).send({error:'Invalid request'})\n    }\n\n    if (!ObjectID.isValid(_id)) {\n        return res.status(404).send();\n    }\n\n    try {        \n        updates.forEach((update) => req.user[update] = req.body[update]) \n        await req.user.save()\n        res.send(req.user);\n    } catch (error) {\n        res.status(400).send()\n    }\n\n})\n\nrouter.delete('/users/me', authenticate, async (req,res) => {\n    if (!ObjectID.isValid(req.user._id)) {\n        return res.status(404).send();\n    }\n\n    try {\n        await req.user.remove()\n        res.send(req.user)\n    } catch (error) {\n        res.status(500).send()\n    }\n})\n\nrouter.post('/users/login', async (req, res) => {\n    try {\n        const user  = await User.checkValidCredentials(req.body.email, req.body.password)\n        const token = await user.newAuthToken()\n        console.log(user,token)\n        res.send({ user, token})\n    } catch (error) {\n        console.log(error);\n        res.status(400).send({error})        \n    }\n})\n\nrouter.post('/users/logout', authenticate, async (req, res) => {\n    try {\n        req.user.tokens = req.user.tokens.filter((token) =>{\n         return token.token !== req.token \n        })\n        await req.user.save()\n        res.send()\n    } catch (error) {\n        res.status(500).send()\n    }\n})\n\n\nrouter.post('/users/logoutall', authenticate, async (req, res) => {\n    try {\n        req.user.tokens = []\n        await req.user.save()\n        res.send()\n    } catch (error) {\n        res.status(500).send()\n    }\n})\n\nmodule.exports = router;`.trim();\n\nconst server = `\nconst dbCon = require('./db/db');\nconst userRoutes = require('./router/user')\nconst PostRoutes = require('./router/post')\n\napp.use(\"/items\",userRoutes)\napp.use(\"/items\",PostRoutes)\n`.trim();\n\nconst postman = `\n{\n\"info\": {\n\t\"_postman_id\": \"2adff8c6-a833-4fdd-8846-929dea464969\",\n\t\"name\": \"NodejsAuth\",\n\t\"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n},\n\t\"item\": [\n\t\t{\n\t\t\t\"name\": \"Create Users\",\n\t\t\t\"request\": {\n\t\t\t\t\"auth\": {\n\t\t\t\t\t\"type\": \"noauth\"\n\t\t\t\t},\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n\\t\\\"name\\\":\\\"qwerty\\\",\\n\\t\\\"age\\\":40,\\n\\t\\\"email\\\":\\\"dummy1222@gmail.com\\\",\\n\\t\\\"password\\\":\\\"12345678\\\"\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/users\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"users\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Create Post\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n\\t\\\"title\\\":\\\"Nodejs blog12\\\",\\n\\t\\\"description\\\":\\\"this is new blog on nodejs\\\"\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/posts\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"posts\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Read Profile\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/users/me\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"users\",\n\t\t\t\t\t\t\"me\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Read Single Post\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/posts/5ca765dcde6cdb0017d34fd2\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"posts\",\n\t\t\t\t\t\t\"5ca765dcde6cdb0017d34fd2\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Comment on single post\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n\\t\\\"comment\\\":\\\"Nice article\\\"\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/posts/5ca765dcde6cdb0017d34fd2/comment\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"posts\",\n\t\t\t\t\t\t\"5ca765dcde6cdb0017d34fd2\",\n\t\t\t\t\t\t\"comment\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Fecth comment on single post\",\n\t\t\t\"protocolProfileBehavior\": {\n\t\t\t\t\"disableBodyPruning\": true\n\t\t\t},\n\t\t\t\"request\": {\n\t\t\t\t\"auth\": {\n\t\t\t\t\t\"type\": \"noauth\"\n\t\t\t\t},\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n\\t\\\"comment\\\":\\\"Nice article\\\"\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/posts/5ca765dcde6cdb0017d34fd2/comment\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"posts\",\n\t\t\t\t\t\t\"5ca765dcde6cdb0017d34fd2\",\n\t\t\t\t\t\t\"comment\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Read Posts\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/posts\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"posts\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Update user\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"PATCH\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n  \\\"name\\\": \\\"dummy12\\\",\\n  \\\"password\\\":\\\"1234567890\\\"\\n\\t\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/users/me\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"users\",\n\t\t\t\t\t\t\"me\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Update Post\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"PATCH\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n  \\\"title\\\":\\\"dummy blog\\\",\\n  \\\"description\\\":\\\"this is the first post\\\"\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/posts/5ca733287c6a7fe6b373c0d6\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"posts\",\n\t\t\t\t\t\t\"5ca733287c6a7fe6b373c0d6\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Delete User\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"DELETE\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n  \\\"description\\\":\\\"goto  sleep\\\",\\n  \\\"completed\\\":false\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/users/me\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"users\",\n\t\t\t\t\t\t\"me\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Delete Post\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"DELETE\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/posts/5ca733287c6a7fe6b373c0d6\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"posts\",\n\t\t\t\t\t\t\"5ca733287c6a7fe6b373c0d6\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"User Login\",\n\t\t\t\"event\": [\n\t\t\t\t{\n\t\t\t\t\t\"listen\": \"test\",\n\t\t\t\t\t\"script\": {\n\t\t\t\t\t\t\"id\": \"0e178f47-3f34-456f-b738-ca330497c1f3\",\n\t\t\t\t\t\t\"exec\": [\n\t\t\t\t\t\t\"if(pm.response.code === 200 ){\",\n\t\t\t\t\t\t\"pm.environment.set('authtoken', pm.response.json().token)\",\n\t\t\t\t\t\t\"}\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"type\": \"text/javascript\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"request\": {\n\t\t\t\t\"auth\": {\n\t\t\t\t\t\"type\": \"noauth\"\n\t\t\t\t},\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n \\\"email\\\":\\\"dummy1222@gmail.com\\\",\\n \\\"password\\\":\\\"12345678\\\"\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/users/login\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"users\",\n\t\t\t\t\t\t\"login\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Logout \",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/users/logout\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"users\",\n\t\t\t\t\t\t\"logout\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Logout All\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/users/logout\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"users\",\n\t\t\t\t\t\t\"logout\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t}\n\t],\n\t\"auth\": {\n\t\t\"type\": \"bearer\",\n\t\t\"bearer\": [\n\t\t\t{\n\t\t\t\t\"key\": \"token\",\n\t\t\t\t\"value\": \"{{authtoken}}\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t]\n\t},\n\t\"event\": [\n\t\t{\n\t\t\t\"listen\": \"prerequest\",\n\t\t\t\"script\": {\n\t\t\t\t\"id\": \"9c7ef4d3-64b2-49fe-b1db-65a8c6b26b1a\",\n\t\t\t\t\"type\": \"text/javascript\",\n\t\t\t\t\"exec\": [\n\t\t\t\t\t\"\"\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"listen\": \"test\",\n\t\t\t\"script\": {\n\t\t\t\t\"id\": \"5df7dc9c-9a59-4ceb-befc-6dcef99063dd\",\n\t\t\t\t\"type\": \"text/javascript\",\n\t\t\t\t\"exec\": [\n\t\t\t\t\t\"\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t]\n}`.trim();\n\n\nclass SearchPagination extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Search_Pagination_Sort</h3>\n              <b>middleware/auth.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={middleware}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>models/commets.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={commentsModel}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>models/post.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={postModel}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>models/user.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={userModel}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>router/post.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={userRoutes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>router/user.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={postRoutes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>server.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={server}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>postman</b>\n              <div style={titles}>\n                <PrismCode\n                  code={postman}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(SearchPagination));\n"]},"metadata":{},"sourceType":"module"}