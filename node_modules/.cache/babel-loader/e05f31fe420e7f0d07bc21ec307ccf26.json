{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var message=\"\\nconst generateMessage = (username, text) => {\\n  return {\\n      username,\\n      text,\\n      createdAt: new Date().getTime()\\n  }\\n}\\n\\nconst generateLocationMessage = (username, url) => {\\n  return {\\n      username,\\n      url,\\n      createdAt: new Date().getTime()\\n  }\\n}\\n\\nmodule.exports = {\\n  generateMessage,\\n  generateLocationMessage\\n}\".trim();var users=\"\\nconst users = []\\n\\nconst addUser = ({ id, username, room }) => {\\n    // Clean the data\\n    username = username.trim().toLowerCase()\\n    room = room.trim().toLowerCase()\\n\\n    // Validate the data\\n    if (!username || !room) {\\n        return {\\n            error: 'Username and room are required!'\\n        }\\n    }\\n\\n    // Check for existing user\\n    const existingUser = users.find((user) => {\\n        return user.room === room && user.username === username\\n    })\\n\\n    // Validate username\\n    if (existingUser) {\\n        return {\\n            error: 'Username is in use!'\\n        }\\n    }\\n\\n    // Store user\\n    const user = { id, username, room }\\n    users.push(user)\\n    return { user }\\n}\\n\\nconst removeUser = (id) => {\\n    const index = users.findIndex((user) => user.id === id)\\n\\n    if (index !== -1) {\\n        return users.splice(index, 1)[0]\\n    }\\n}\\n\\nconst getUser = (id) => {\\n    return users.find((user) => user.id === id)\\n}\\n\\nconst getUsersInRoom = (room) => {\\n    room = room.trim().toLowerCase()\\n    return users.filter((user) => user.room === room)\\n}\\n\\nmodule.exports = {\\n    addUser,\\n    removeUser,\\n    getUser,\\n    getUsersInRoom\\n}\".trim();var server=\"\\nconst path = require('path')\\nconst http = require('http')\\nconst express = require('express')\\nconst socketio = require('socket.io')\\nconst Filter = require('bad-words')\\nconst { generateMessage, generateLocationMessage } = require('./utils/messages')\\nconst { addUser, removeUser, getUser, getUsersInRoom } = require('./utils/users')\\n\\nconst app = express()\\nconst server = http.createServer(app)\\nconst io = socketio(server)\\n\\nconst port = process.env.PORT || 3000\\nconst publicDirectoryPath = path.join(__dirname, '../public')\\n\\napp.use(express.static(publicDirectoryPath))\\n\\nio.on('connection', (socket) => {\\n    console.log('New WebSocket connection')\\n\\n    socket.on('join', (options, callback) => {\\n        const { error, user } = addUser({ id: socket.id, ...options })\\n\\n        if (error) {\\n            return callback(error)\\n        }\\n\\n        socket.join(user.room)\\n\\n        socket.emit('message', generateMessage('Admin', 'Welcome!'))\\n        socket.broadcast.to(user.room).emit('message', generateMessage('Admin', '$'{user.username} has joined!'))\\n        io.to(user.room).emit('roomData', {\\n            room: user.room,\\n            users: getUsersInRoom(user.room)\\n        })\\n\\n        callback()\\n    })\\n\\n    socket.on('sendMessage', (message, callback) => {\\n        const user = getUser(socket.id)\\n        const filter = new Filter()\\n\\n        if (filter.isProfane(message)) {\\n            return callback('Profanity is not allowed!')\\n        }\\n\\n        io.to(user.room).emit('message', generateMessage(user.username, message))\\n        callback()\\n    })\\n\\n    socket.on('sendLocation', (coords, callback) => {\\n        const user = getUser(socket.id)\\n        io.to(user.room).emit('locationMessage', generateLocationMessage(user.username, \\n                            'https://google.com/maps?q='$'{coords.latitude},'$'{coords.longitude}'))\\n        callback()\\n    })\\n\\n    socket.on('disconnect', () => {\\n        const user = removeUser(socket.id)\\n\\n        if (user) {\\n            io.to(user.room).emit('message', generateMessage('Admin', '$'{user.username} has left!'))\\n            io.to(user.room).emit('roomData', {\\n                room: user.room,\\n                users: getUsersInRoom(user.room)\\n            })\\n        }\\n    })\\n})\\n\\nserver.listen(port, () => {\\n    console.log(Server is up on port '$'{port}!)\\n})\".trim();var Tur6=/*#__PURE__*/function(_Component){_inherits(Tur6,_Component);function Tur6(){_classCallCheck(this,Tur6);return _possibleConstructorReturn(this,_getPrototypeOf(Tur6).apply(this,arguments));}_createClass(Tur6,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Chat\"),\"message.js\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:message,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),\"users.js\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:users,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),\"server.js\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:server,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return Tur6;}(Component);export default withStyles(styles)(Tur6);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/nodeJs/nodeDeep/tut_6.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","message","trim","users","server","Tur6","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,0BAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CAGA,GAAMC,CAAAA,MAAM,CAAG,CAACC,eAAe,CAAC,SAAjB,CAA4BC,OAAO,CAAC,KAApC,CAA2CC,QAAQ,CAAC,MAApD,CAAf,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,KAAK,CAAE,CACHC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADL,CAEHN,OAAO,CAAEG,KAAK,CAACG,OAAN,CAAc,CAAd,CAFN,CADgB,CAKvBC,QAAQ,CAAE,CACNF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADF,CALa,CAQvBE,SAAS,CAAE,CACPC,SAAS,CAAE,QADJ,CARY,CAAL,EAApB,CAcA,GAAMC,CAAAA,OAAO,CAAG,mWAoBbC,IApBa,EAAhB,CAsBA,GAAMC,CAAAA,KAAK,CAAG,8qCAuDXD,IAvDW,EAAd,CAyDA,GAAME,CAAAA,MAAM,CAAG,q1EA0EXF,IA1EW,EAAf,C,GA8EMG,CAAAA,I,4QACgB,CAClBC,UAAU,CAAC,iBAAMxB,CAAAA,KAAK,CAACyB,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACM,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACI,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAACb,KAA1B,EACI,8BAAI,oBAAC,OAAD,MAAJ,CADJ,CADJ,CADN,CAMN,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACA,oBAAC,KAAD,EAAO,SAAS,CAAEa,OAAO,CAACb,KAA1B,EACA,oBAAC,IAAD,MACM,8BADN,CAEM,qCAFN,cAIM,2BAAK,KAAK,CAAEN,MAAZ,EACA,oBAAC,SAAD,EACE,IAAI,CAAEY,OADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADA,CAJN,CAWM,8BAXN,YAaM,2BAAK,KAAK,CAAEZ,MAAZ,EACA,oBAAC,SAAD,EACE,IAAI,CAAEc,KADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADA,CAbN,CAoBM,8BApBN,aAsBM,2BAAK,KAAK,CAAEd,MAAZ,EACA,oBAAC,SAAD,EACE,IAAI,CAAEe,MADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADA,CAtBN,CADA,CADA,CANM,CADF,CA2CD,C,kBAjDgBvB,S,EAoDnB,cAAgBI,CAAAA,UAAU,CAACQ,MAAD,CAAV,CAAmBY,IAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = {backgroundColor:'#F0F8FF', padding:'1px', fontSize:'16px'}\n\nconst styles = theme => ({\n  paper: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1)\n  },\n  smMargin: {\n      margin: theme.spacing(1)\n  },\n  actionDiv: {\n      textAlign: \"center\"\n  }\n})\n\n\nconst message = `\nconst generateMessage = (username, text) => {\n  return {\n      username,\n      text,\n      createdAt: new Date().getTime()\n  }\n}\n\nconst generateLocationMessage = (username, url) => {\n  return {\n      username,\n      url,\n      createdAt: new Date().getTime()\n  }\n}\n\nmodule.exports = {\n  generateMessage,\n  generateLocationMessage\n}`.trim()\n\nconst users = `\nconst users = []\n\nconst addUser = ({ id, username, room }) => {\n    // Clean the data\n    username = username.trim().toLowerCase()\n    room = room.trim().toLowerCase()\n\n    // Validate the data\n    if (!username || !room) {\n        return {\n            error: 'Username and room are required!'\n        }\n    }\n\n    // Check for existing user\n    const existingUser = users.find((user) => {\n        return user.room === room && user.username === username\n    })\n\n    // Validate username\n    if (existingUser) {\n        return {\n            error: 'Username is in use!'\n        }\n    }\n\n    // Store user\n    const user = { id, username, room }\n    users.push(user)\n    return { user }\n}\n\nconst removeUser = (id) => {\n    const index = users.findIndex((user) => user.id === id)\n\n    if (index !== -1) {\n        return users.splice(index, 1)[0]\n    }\n}\n\nconst getUser = (id) => {\n    return users.find((user) => user.id === id)\n}\n\nconst getUsersInRoom = (room) => {\n    room = room.trim().toLowerCase()\n    return users.filter((user) => user.room === room)\n}\n\nmodule.exports = {\n    addUser,\n    removeUser,\n    getUser,\n    getUsersInRoom\n}`.trim()\n\nconst server = `\nconst path = require('path')\nconst http = require('http')\nconst express = require('express')\nconst socketio = require('socket.io')\nconst Filter = require('bad-words')\nconst { generateMessage, generateLocationMessage } = require('./utils/messages')\nconst { addUser, removeUser, getUser, getUsersInRoom } = require('./utils/users')\n\nconst app = express()\nconst server = http.createServer(app)\nconst io = socketio(server)\n\nconst port = process.env.PORT || 3000\nconst publicDirectoryPath = path.join(__dirname, '../public')\n\napp.use(express.static(publicDirectoryPath))\n\nio.on('connection', (socket) => {\n    console.log('New WebSocket connection')\n\n    socket.on('join', (options, callback) => {\n        const { error, user } = addUser({ id: socket.id, ...options })\n\n        if (error) {\n            return callback(error)\n        }\n\n        socket.join(user.room)\n\n        socket.emit('message', generateMessage('Admin', 'Welcome!'))\n        socket.broadcast.to(user.room).emit('message', generateMessage('Admin', '$'{user.username} has joined!'))\n        io.to(user.room).emit('roomData', {\n            room: user.room,\n            users: getUsersInRoom(user.room)\n        })\n\n        callback()\n    })\n\n    socket.on('sendMessage', (message, callback) => {\n        const user = getUser(socket.id)\n        const filter = new Filter()\n\n        if (filter.isProfane(message)) {\n            return callback('Profanity is not allowed!')\n        }\n\n        io.to(user.room).emit('message', generateMessage(user.username, message))\n        callback()\n    })\n\n    socket.on('sendLocation', (coords, callback) => {\n        const user = getUser(socket.id)\n        io.to(user.room).emit('locationMessage', generateLocationMessage(user.username, \n                            'https://google.com/maps?q='$'{coords.latitude},'$'{coords.longitude}'))\n        callback()\n    })\n\n    socket.on('disconnect', () => {\n        const user = removeUser(socket.id)\n\n        if (user) {\n            io.to(user.room).emit('message', generateMessage('Admin', '$'{user.username} has left!'))\n            io.to(user.room).emit('roomData', {\n                room: user.room,\n                users: getUsersInRoom(user.room)\n            })\n        }\n    })\n})\n\nserver.listen(port, () => {\n    console.log(Server is up on port '$'{port}!)\n})`.trim()\n\n\n\nclass Tur6 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n            <Grid item xs={2}>\n                <Paper className={classes.paper}>\n                    <h4><Sidebar /></h4>\n                </Paper>\n            </Grid>\n<Grid item xs={10}>\n<Paper className={classes.paper}>\n<List>\n      <br/>\n      <h3>Chat</h3>\n      message.js\n      <div style={titles}>\n      <PrismCode\n        code={message}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      users.js\n      <div style={titles}>\n      <PrismCode\n        code={users}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      server.js\n      <div style={titles}>\n      <PrismCode\n        code={server}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      </List>\n      </Paper>\n      </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Tur6));\n"]},"metadata":{},"sourceType":"module"}