{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/javaScripts/deepJs/logic.js\";\nimport React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\nconst titles = {\n  backgroundColor: \"#F0F8FF\",\n  padding: \"1px\",\n  fontSize: \"16px\"\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst starSig = `\nnewLine = \\n\n\n// *\n// **\n// ***\nfunction star(){\n  var start=\"\";\n  for(let i=0; i<3; i++){\n    for(let j=1; j<=(i+1); j++){\n      start += \"*\"\n    }\n    start +=\"newLine\";\n  }\n  console.log(start);\n}\nstar();\n\n//   *\n//  **\n// ***\nfunction star(){\n  let n = 3;\n  let str = \"\";\n  for (let i = 1; i <= n; i++){\n    for (let j=0; j<(n-i); j++){\n      str += \" \";\n    }\n    for (let k=0; k<i; k++){\n      str += \"*\";\n    }\n    str += \"newLine\";\n  }\nconsole.log(str);\n}\nstar();\n\n// ***\n// **\n// *\nfunction star(){\n  var start=\"\";\n  for(let i=3; i>0; i--){\n    for(let j=(i+1); j>1; j--){\n      start += \"*\"\n    }\n    start +=\"newLine\";\n  }\n  console.log(start);\n}\nstar();\n\n// ***\n//  **\n//   *\nfunction star(){\n  let n = 3;\n  let str = \"\";\n  for (let i = n; i >= 1; i--){\n    for (let j=0; j<(n-i); j++){\n      str += \" \";\n    }\n    for (let k=0; k<i; k++){\n      str += \"*\";\n    }\n    str += \"newLine\";\n  }\nconsole.log(str);\n}\nstar();\n`.trim();\nconst Pyramid = ` \n// Upside pyramid.\nfunction pyraminds() {\n  let i, j, k, str = \"\";\n\n  for (i=0; i<5; i++) {\n    for (j=1; j<(5 - i); j++) {\n      str += \" \";\n    }\n    for (k=1; k<=(2 * i +1); k++) {\n      str += \"*\";\n    }\n\n    str += 'newLine';\n  }\n  console.log(str)\n}\n\npyraminds();\n\n\n// downside pyramid.\nfor (i=1; i<5; i++) {\n  for (j=0; j<i; j++) {\n    str += \" \";\n  }\n  for (k=(5 - i)*2; k>1; k--) {\n    str += \"*\";\n  }\n\n  str += 'newLine';\n}\nconsole.log(str)\n `.trim();\nconst insersonSort = `\nconst arr = [3, 5, 1, 9, 6, 2, 1];\narr.sort();\nconsole.log(arr);\n\n\n//2\nfunction minCoin() {\n  const arr = [3, 5, 1, 9, 6, 2, 1, -1];\n  const result = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n      }\n    }\n    result.push(arr[i]);\n  }\n  console.log(result);\n}\n\nminCoin();\n`.trim();\nconst mergSort = `\nfunction mergeSort(arr){\n    if(arr.length < 2) return arr;\n    var middle = Math.floor(arr.length/2);\n    var left = arr.slice(0, middle);\n    var right = arr.slice(middle, arr.length);\n    return merge(mergeSort(left), mergeSort(right));\n }\n \n function merge(left, right){\n  var result = [];\n    while(left.length && right.length){\n      if(left[0] == right[0]){\n        result.push(left.shift());\n      }\n  else{\n    result.push(right.shift());}\n  }\n  \n  while(left.length) result.push(left.shift());\n  while(right.length) result.push(right.shift());\n  console.log(result)\n  return result;\n }\n mergeSort([3,2,1])`.trim();\nconst quicksort = `\nfunction QuickSort(arr){\n    if(arr.length <= 1) return arr;\n        var pivot = arr[arr.length -1];\n        var left = [];\n        var right = [];\n        for(var i=0;i<arr.length-1;i++){\n        if(arr[i] < pivot){\n        left.push(arr[i])\n      }\n    else right.push(arr[i])\n    }\n    return [...QuickSort(left), pivot, ...QuickSort(right)]\n }\n console.log(QuickSort([5,4,2,7,9]))\n `.trim();\nconst selectionSort = `function selectionSort(arr){\n  var minIdx, temp,\n  len = arr.length;\n    for(var i = 0; i < len; i++){\n    minIdx = i;\n      for(var j = i+1; j<len; j++){\n        if(arr[j]<arr[minIdx]){\n        minIdx = j;\n      }\n    }\n    \n    temp = arr[i];\n    arr[i] = arr[minIdx];\n    arr[minIdx] = temp;\n   }\n \n console.log(arr)\n return arr;\n }\n \n selectionSort([7,5,2,4,3,9]);`.trim();\nconst Permutations = `\nTime complexity:\tO(n^3)\nSpace complexity:\tO(n^2)\n\nfunction arm(str){\n  let currentChar = [];\n  let remaingChar = [];\n  let result = [];\n\n  if(str.length === 0) return \"\";\n  if(str.length === 1) return str;\n\n  for(let i=0; i<str.length; i++){\n    currentChar = str[i];\n    remaingChar = str.slice(0,i) + str.slice(i+1);\n    for(let j=0; j<remaingChar.length; j++){\n      result.push(currentChar + arm(remaingChar)[j]);\n    }\n  }\n  return result;\n}\n\nconsole.log(arm('abc'));\n  `.trim();\nconst Pattern = `\nlet i,j, str=\"\";                                                                    //Square pattern.\nfor(i=1; i<=5; i++){\n  for(j=0; j<5; j++){\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nconsole.log(str);\n\n\nlet i, j, str = \"\";                                                               //Right pascal star pattern.\nfor (i=1; i<=5; i++) {\n  for (j=0; j<i; j++) {\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nfor (i=1; i<=(5-1); i++) {\n  for (j=0; j<(5-i); j++) {\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nconsole.log(str);\n`.trim();\nconst amount = `\nTime complexity:O(ks)\nSpace complexity:\tO(s)\n\nfunction minCoin(amount, coins) {\n  let count = 0;\n  for (let i = 0; i < coins.length; i++) {\n    while (coins[i] <= amount) {\n      amount -= coins[i];\n      count++;\n    }\n  }\n  return console.log(count);\n}\n\nminCoin(87, [25, 10, 5, 1]);`.trim();\nconst armstrong = `\n  function arm() {\n    const num = prompt('Enter a three-digit positive integer: ');\n    let sum=0,  remainder=0;\n    let temp=num;\n  \n    while(temp>0){\n      remainder = temp%10;\n      sum += remainder*remainder*remainder;\n      temp = parseInt(temp/10)\n    }\n  \n    if(sum == num){\n      console.log('Armstrong', num);\n    }\n    else{\n      console.log('Not an Armstrong', num);\n    }\n  }\n  \n  arm()`.trim();\nconst satisfy = `\nfunction isEven(num) {\n  return num % 2 === 0;\n}\n\nfunction isPrime(num) {\n  if (num < 2) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Function to loop through an array and check if n elements satisfy the condition function\nfunction some(array, n, isCheck) {\n  let count = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (isCheck(array[i])) {\n      count++;\n    }\n    if (count === n) {\n      return true;\n    }\n  }\n  return false;\n}\n\nconsole.log(some([2, 4, 6], 3, isEven)); // true\nconsole.log(some([2, 3, 4], 3, isEven)); // false\nconsole.log(some([2, 3, 11], 4, isPrime)); // false\nconsole.log(some([2, 3, 5, 9], 3, isPrime)); // true`.trim();\nconst generates = `\nfunction fibbo() {\n  let a = 0;\n  let b = 1;\n\n  return function() {\n    const result = a;\n    const next = a + b;\n    a = b;\n    b = next;\n    return result;\n  };\n}\n\nlet obj = fibbo();\nconsole.log(obj()); // 0\nconsole.log(obj()); // 1\nconsole.log(obj()); // 1\nconsole.log(obj()); // 2\nconsole.log(obj()); // 3\nconsole.log(obj()); // 5\nconsole.log(obj()); // 8\n`.trim();\n\nclass Logic extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, \"1. Star\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, \"Time Complexity: \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, \"The inner loop runs 1 time for the first iteration of the outer loop, 2 times for the second iteration, and 3 times for the third iteration.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, \"The number of iterations in the inner loop is 1 + 2 + 3 = 6.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, \"Therefore, the total number of iterations in the nested loops is 3 (outer loop) * 6 (inner loop) = 18.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, \"The function would be O(n^2) if the inner for loop iterated n+1 times, and the outer for loop iterated n times. In this case, the total number of iterations would be n * (n+1) = n^2 + n. This is also a quadratic time complexity.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, \"So, the function is similar to O(n^2), but it is not strictly O(n^2). The difference is that the function's runtime is dependent on the constant 3, instead of the input size n. However, for most practical purposes, the difference is negligible.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }, \"Space Complexity: \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }, \"The number of characters stored in the start variable is equal to the number of stars and newlines produced by the nested loops.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, \"For each iteration of the inner loop, we add one star character to the start variable.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, \"For each iteration of the outer loop, we add a newline character to the start variable.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }, \"Therefore, the space complexity is directly proportional to the number of stars and newlines produced, which is 3 lines with 1, 2, and 3 stars, respectively. So the space complexity of the star() function can be considered as O(1) or constant space complexity.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: starSig,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }, \"2. Pyramind\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Pyramid,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }, \"3. Pattern\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Pattern,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }, \"4. Armstrong Number\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }, \"The time complexity of the arm() function is O(n), where n is the number of digits in the input number. This is because the while loop iterates n times, and each iteration takes constant time.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }, \"The space complexity of the arm() function is O(1), because it only uses a constant amount of memory to store the variables num, sum, remainder, and temp.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }, \"In simple words, the arm() function takes a linear amount of time to run, and it uses a constant amount of space.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }, \"The time complexity is O(n) because the while loop iterates n times. This is the worst-case scenario, where the input number is a three-digit number with all the digits equal to 9.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: armstrong,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    }, \"5. Permutations\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    }, \"The time complexity of the arm() function is O(n^3), where n is the length of the input string. This is because the for loop iterates n times, and the arm() function is called recursively n times. The recursive call of the arm() function takes O(n^2) time, so the total time complexity is O(n^3).\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }, \"The space complexity of the arm() function is O(n^2), because the result array can contain up to n^2 elements.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }, \"In simple words, the arm() function takes a cubic amount of time to run, and it uses a quadratic amount of space.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }, \"The space complexity is O(n^2) because the result array can contain up to n^2 elements. However, the actual space complexity is likely to be lower, because the result array will only contain unique strings.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }, \"The function could be made more efficient by using a memoization technique to store the results of the recursive calls. This would reduce the time complexity to O(n^2).\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: Permutations,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469\n      },\n      __self: this\n    }, \"6. Given an amount of money, return the minimum number of coins needed to make that change.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }, \"The time complexity of the minCoin() function is O(ks), where k is the amount of money and s is the number of coins. This is because the while loop iterates at most k times, and each iteration takes constant time.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }, \"The space complexity of the minCoin() function is O(s), because it only uses a constant amount of memory to store the variables amount, coins, and count.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    }, \"In simple words, the minCoin() function takes a linear amount of time to run, and it uses a constant amount of space.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: amount,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    }, \"7. Sort an Array\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: insersonSort,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }, \"8. Merg Sort\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: mergSort,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }, \"9. Quick Sort\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: quicksort,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }, \"10. Selection Sort\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: selectionSort,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }, \"11. Write a function which loops through an array and checks if n of the elements of the array satisfy the condition function that is passed\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }, \"Write the some function and isEven and isPrime functions\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }, \"console.log(some([2,4,6], 3, isEven)) // should print true\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, \"console.log(some([2,3,4], 3, isEven)) // should print false\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }, \"console.log(some([2,3,11], 4, isPrime)) // should print false\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }, \"console.log(some([2,3,5,9], 3, isPrime)) // should print true\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: satisfy,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }, \"12. Write a function whch returns a function that generates fibonacci numbers. Don't use generators.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: generates,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Logic);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/javaScripts/deepJs/logic.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","starSig","trim","Pyramid","insersonSort","mergSort","quicksort","selectionSort","Permutations","Pattern","amount","armstrong","satisfy","generates","Logic","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst starSig = `\nnewLine = \\n\n\n// *\n// **\n// ***\nfunction star(){\n  var start=\"\";\n  for(let i=0; i<3; i++){\n    for(let j=1; j<=(i+1); j++){\n      start += \"*\"\n    }\n    start +=\"newLine\";\n  }\n  console.log(start);\n}\nstar();\n\n//   *\n//  **\n// ***\nfunction star(){\n  let n = 3;\n  let str = \"\";\n  for (let i = 1; i <= n; i++){\n    for (let j=0; j<(n-i); j++){\n      str += \" \";\n    }\n    for (let k=0; k<i; k++){\n      str += \"*\";\n    }\n    str += \"newLine\";\n  }\nconsole.log(str);\n}\nstar();\n\n// ***\n// **\n// *\nfunction star(){\n  var start=\"\";\n  for(let i=3; i>0; i--){\n    for(let j=(i+1); j>1; j--){\n      start += \"*\"\n    }\n    start +=\"newLine\";\n  }\n  console.log(start);\n}\nstar();\n\n// ***\n//  **\n//   *\nfunction star(){\n  let n = 3;\n  let str = \"\";\n  for (let i = n; i >= 1; i--){\n    for (let j=0; j<(n-i); j++){\n      str += \" \";\n    }\n    for (let k=0; k<i; k++){\n      str += \"*\";\n    }\n    str += \"newLine\";\n  }\nconsole.log(str);\n}\nstar();\n`.trim();\n\nconst Pyramid = ` \n// Upside pyramid.\nfunction pyraminds() {\n  let i, j, k, str = \"\";\n\n  for (i=0; i<5; i++) {\n    for (j=1; j<(5 - i); j++) {\n      str += \" \";\n    }\n    for (k=1; k<=(2 * i +1); k++) {\n      str += \"*\";\n    }\n\n    str += 'newLine';\n  }\n  console.log(str)\n}\n\npyraminds();\n\n\n// downside pyramid.\nfor (i=1; i<5; i++) {\n  for (j=0; j<i; j++) {\n    str += \" \";\n  }\n  for (k=(5 - i)*2; k>1; k--) {\n    str += \"*\";\n  }\n\n  str += 'newLine';\n}\nconsole.log(str)\n `.trim();\n\nconst insersonSort = `\nconst arr = [3, 5, 1, 9, 6, 2, 1];\narr.sort();\nconsole.log(arr);\n\n\n//2\nfunction minCoin() {\n  const arr = [3, 5, 1, 9, 6, 2, 1, -1];\n  const result = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n      }\n    }\n    result.push(arr[i]);\n  }\n  console.log(result);\n}\n\nminCoin();\n`.trim();\n\nconst mergSort = `\nfunction mergeSort(arr){\n    if(arr.length < 2) return arr;\n    var middle = Math.floor(arr.length/2);\n    var left = arr.slice(0, middle);\n    var right = arr.slice(middle, arr.length);\n    return merge(mergeSort(left), mergeSort(right));\n }\n \n function merge(left, right){\n  var result = [];\n    while(left.length && right.length){\n      if(left[0] == right[0]){\n        result.push(left.shift());\n      }\n  else{\n    result.push(right.shift());}\n  }\n  \n  while(left.length) result.push(left.shift());\n  while(right.length) result.push(right.shift());\n  console.log(result)\n  return result;\n }\n mergeSort([3,2,1])`.trim();\n\nconst quicksort = `\nfunction QuickSort(arr){\n    if(arr.length <= 1) return arr;\n        var pivot = arr[arr.length -1];\n        var left = [];\n        var right = [];\n        for(var i=0;i<arr.length-1;i++){\n        if(arr[i] < pivot){\n        left.push(arr[i])\n      }\n    else right.push(arr[i])\n    }\n    return [...QuickSort(left), pivot, ...QuickSort(right)]\n }\n console.log(QuickSort([5,4,2,7,9]))\n `.trim();\n\nconst selectionSort = `function selectionSort(arr){\n  var minIdx, temp,\n  len = arr.length;\n    for(var i = 0; i < len; i++){\n    minIdx = i;\n      for(var j = i+1; j<len; j++){\n        if(arr[j]<arr[minIdx]){\n        minIdx = j;\n      }\n    }\n    \n    temp = arr[i];\n    arr[i] = arr[minIdx];\n    arr[minIdx] = temp;\n   }\n \n console.log(arr)\n return arr;\n }\n \n selectionSort([7,5,2,4,3,9]);`.trim();\n\nconst Permutations = `\nTime complexity:\tO(n^3)\nSpace complexity:\tO(n^2)\n\nfunction arm(str){\n  let currentChar = [];\n  let remaingChar = [];\n  let result = [];\n\n  if(str.length === 0) return \"\";\n  if(str.length === 1) return str;\n\n  for(let i=0; i<str.length; i++){\n    currentChar = str[i];\n    remaingChar = str.slice(0,i) + str.slice(i+1);\n    for(let j=0; j<remaingChar.length; j++){\n      result.push(currentChar + arm(remaingChar)[j]);\n    }\n  }\n  return result;\n}\n\nconsole.log(arm('abc'));\n  `.trim();\n\nconst Pattern = `\nlet i,j, str=\"\";                                                                    //Square pattern.\nfor(i=1; i<=5; i++){\n  for(j=0; j<5; j++){\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nconsole.log(str);\n\n\nlet i, j, str = \"\";                                                               //Right pascal star pattern.\nfor (i=1; i<=5; i++) {\n  for (j=0; j<i; j++) {\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nfor (i=1; i<=(5-1); i++) {\n  for (j=0; j<(5-i); j++) {\n    str += \"*\";\n  }\n  str += \"newLine\";\n}\n\nconsole.log(str);\n`.trim();\n\nconst amount = `\nTime complexity:O(ks)\nSpace complexity:\tO(s)\n\nfunction minCoin(amount, coins) {\n  let count = 0;\n  for (let i = 0; i < coins.length; i++) {\n    while (coins[i] <= amount) {\n      amount -= coins[i];\n      count++;\n    }\n  }\n  return console.log(count);\n}\n\nminCoin(87, [25, 10, 5, 1]);`.trim();\n\nconst armstrong = `\n  function arm() {\n    const num = prompt('Enter a three-digit positive integer: ');\n    let sum=0,  remainder=0;\n    let temp=num;\n  \n    while(temp>0){\n      remainder = temp%10;\n      sum += remainder*remainder*remainder;\n      temp = parseInt(temp/10)\n    }\n  \n    if(sum == num){\n      console.log('Armstrong', num);\n    }\n    else{\n      console.log('Not an Armstrong', num);\n    }\n  }\n  \n  arm()`.trim(); \n\nconst satisfy = `\nfunction isEven(num) {\n  return num % 2 === 0;\n}\n\nfunction isPrime(num) {\n  if (num < 2) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Function to loop through an array and check if n elements satisfy the condition function\nfunction some(array, n, isCheck) {\n  let count = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (isCheck(array[i])) {\n      count++;\n    }\n    if (count === n) {\n      return true;\n    }\n  }\n  return false;\n}\n\nconsole.log(some([2, 4, 6], 3, isEven)); // true\nconsole.log(some([2, 3, 4], 3, isEven)); // false\nconsole.log(some([2, 3, 11], 4, isPrime)); // false\nconsole.log(some([2, 3, 5, 9], 3, isPrime)); // true`.trim();\n\nconst generates = `\nfunction fibbo() {\n  let a = 0;\n  let b = 1;\n\n  return function() {\n    const result = a;\n    const next = a + b;\n    a = b;\n    b = next;\n    return result;\n  };\n}\n\nlet obj = fibbo();\nconsole.log(obj()); // 0\nconsole.log(obj()); // 1\nconsole.log(obj()); // 1\nconsole.log(obj()); // 2\nconsole.log(obj()); // 3\nconsole.log(obj()); // 5\nconsole.log(obj()); // 8\n`.trim();\n\nclass Logic extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Star</h3>\n              <b>Time Complexity: </b><br/>\n              <ul>\n                <li>The inner loop runs 1 time for the first iteration of the outer loop, 2 times for the second iteration, and 3 times for the third iteration.</li><br/>\n                <li>The number of iterations in the inner loop is 1 + 2 + 3 = 6.</li><br/>\n                <li>Therefore, the total number of iterations in the nested loops is 3 (outer loop) * 6 (inner loop) = 18.</li><br/>\n                <li>The function would be O(n^2) if the inner for loop iterated n+1 times, and the outer for loop iterated n times. In this case, the total number of iterations would be n * (n+1) = n^2 + n. This is also a quadratic time complexity.</li><br/>\n                <li>So, the function is similar to O(n^2), but it is not strictly O(n^2). The difference is that the function's runtime is dependent on the constant 3, instead of the input size n. However, for most practical purposes, the difference is negligible.</li><br/>\n              </ul>\n              <br/>\n              <b>Space Complexity: </b><br/>\n              <ul>\n                <li>The number of characters stored in the start variable is equal to the number of stars and newlines produced by the nested loops.</li><br/>\n                <li>For each iteration of the inner loop, we add one star character to the start variable.</li><br/>\n                <li>For each iteration of the outer loop, we add a newline character to the start variable.</li><br/>\n                <li>Therefore, the space complexity is directly proportional to the number of stars and newlines produced, which is 3 lines with 1, 2, and 3 stars, respectively. So the space complexity of the star() function can be considered as O(1) or constant space complexity.</li><br/>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={starSig}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>2. Pyramind</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Pyramid}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>3. Pattern</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Pattern}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>4. Armstrong Number</h3>\n              <ul>\n                <li>The time complexity of the arm() function is O(n), where n is the number of digits in the input number. This is because the while loop iterates n times, and each iteration takes constant time.</li><br/>\n                <li>The space complexity of the arm() function is O(1), because it only uses a constant amount of memory to store the variables num, sum, remainder, and temp.</li><br/>\n                <li>In simple words, the arm() function takes a linear amount of time to run, and it uses a constant amount of space.</li><br/>\n                <li>The time complexity is O(n) because the while loop iterates n times. This is the worst-case scenario, where the input number is a three-digit number with all the digits equal to 9.</li><br/>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={armstrong}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>5. Permutations</h3>\n              <ul>\n                <li>The time complexity of the arm() function is O(n^3), where n is the length of the input string. This is because the for loop iterates n times, and the arm() function is called recursively n times. The recursive call of the arm() function takes O(n^2) time, so the total time complexity is O(n^3).</li><br/>\n                <li>The space complexity of the arm() function is O(n^2), because the result array can contain up to n^2 elements.</li><br/>\n                <li>In simple words, the arm() function takes a cubic amount of time to run, and it uses a quadratic amount of space.</li><br/>\n                <li>The space complexity is O(n^2) because the result array can contain up to n^2 elements. However, the actual space complexity is likely to be lower, because the result array will only contain unique strings.</li><br/>\n                <li>The function could be made more efficient by using a memoization technique to store the results of the recursive calls. This would reduce the time complexity to O(n^2).</li><br/>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={Permutations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>\n                6. Given an amount of money, return the minimum number of coins\n                needed to make that change.\n              </b><br/>\n              <ul>\n                <li>The time complexity of the minCoin() function is O(ks), where k is the amount of money and s is the number of coins. This is because the while loop iterates at most k times, and each iteration takes constant time.</li><br/>\n                <li>The space complexity of the minCoin() function is O(s), because it only uses a constant amount of memory to store the variables amount, coins, and count.\n\n</li><br/>\n                <li>In simple words, the minCoin() function takes a linear amount of time to run, and it uses a constant amount of space.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={amount}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>7. Sort an Array</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={insersonSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>8. Merg Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={mergSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>9. Quick Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={quicksort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>10. Selection Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={selectionSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br/>\n\n              <b>11. Write a function which loops through an array and checks if n of the elements\n                of the array satisfy the condition function that is passed</b>\n                <br/>\n                <br/>\n                <i>Write the some function and isEven and isPrime functions</i>\n                <br/>\n                <br/>\n                <ul>\n                  <li>console.log(some([2,4,6], 3, isEven)) // should print true</li>\n                  <li>console.log(some([2,3,4], 3, isEven)) // should print false</li>\n                  <li>console.log(some([2,3,11], 4, isPrime)) // should print false</li>\n                  <li>console.log(some([2,3,5,9], 3, isPrime)) // should print true</li>\n                </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={satisfy}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>12. Write a function whch returns a function that generates fibonacci numbers.\nDon't use generators.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={generates}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(Logic);\n"]},"metadata":{},"sourceType":"module"}