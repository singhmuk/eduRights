{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/topTech.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst evalRPN = `\nconst evalRPN = function (tokens) {\n  const stack = []\n  const isOperator = token => token === '+' || token === '-' || token === '*' || token === '/'\n  for (const token of tokens) {\n    if (isOperator(token)) {\n      const b = stack.pop()\n      const a = stack.pop()\n      let result = 0\n      switch (token) {\n        case '+':\n          result = a + b\n          break\n        case '-':\n          result = a - b\n          break\n        case '/':\n          result = a / b\n          result = result < 0 ? Math.ceil(result) : Math.floor(a / b) // 注意负数向上取整\n          break\n        default:\n          result = a * b\n      }\n      stack.push(result)\n    } else {\n      stack.push(parseInt(token, 10))\n    }\n  }\n  return stack[0]\n}\nconsole.log(evalRPN([\"4\", \"13\", \"5\", \"/\", \"+\"]))`.trim();\nconst stack = `\n`.trim();\nconst convertToTitle = `\nvar convertToTitle = function(n) {\n  var A = \"A\".charCodeAt(0);\n  var str = \"\";\n  while(n > 0) {\n      n--;\n      str = String.fromCharCode(A+n%26) + str;\n      n =parseInt(n/26);\n  }\n  \n  return str;\n};\n\nconsole.log(convertToTitle(701))`.trim();\nconst largestNumber = `\nconst largestNumber = function (nums = []) {\n  nums.sort((a, b) => {\n    const digitsA = a.toString(10) + b.toString(10)\n    const digitsB = b.toString(10) + a.toString(10)\n    for (let i = 0; i < digitsA.length; i++) {\n      const digitB = parseInt(digitsB[i], 10)\n      const digitA = parseInt(digitsA[i], 10)\n      if (digitB > digitA || digitB < digitA) {\n        return digitB - digitA\n      }\n    }\n    return 0\n  })\n  const result = nums.join('')\n  return result[0] === '0' ? '0' : result\n}\n\nconsole.log(largestNumber([10,2]))`.trim();\nconst combinationSum3 = `\nconst combinationSum3 = function (k, n) {\n  const result = []\n  const aux = (start, current, sum) => {\n    if (current.length > k) {\n      return\n    }\n    if (current.length === k) {\n      if (sum === n) {\n        result.push([...current])\n        return\n      }\n      return\n    }\n\n    for (let i = start; i <= 9; i++) {\n      current.push(i)\n      aux(i + 1, current, sum + i)\n      current.pop(i)\n    }\n  }\n  for (let i = 1; i <= 9; i++) {\n    aux(i + 1, [i], i)\n  }\n  return result\n}\n\nconsole.log(combinationSum3(3,7))`.trim();\nconst containsDuplicate = `\nconst containsDuplicate = (nums) => {\n  const map = {}\n  for (num of nums) {\n    if (map[num]) {\n      return true\n    }\n    map[num] = 1\n  }\n  return false\n}\n\nconsole.log(containsDuplicate([1,2,3,1]))`.trim();\nconst computeArea = `\nconst computeArea = function (A, B, C, D, E, F, G, H) {\n  const area = (pointA, pointB) => (pointB[0] - pointA[0]) * (pointB[1] - pointA[1])\n  const totalArea = area([A, B], [C, D]) + area([E, F], [G, H])\n  if (E >= C || G <= A || F >= D || H <= B) {\n    return totalArea\n  }\n  const pointA = [Math.max(A, E), Math.max(B, F)]\n  const pointB = [Math.min(C, G), Math.min(D, H)]\n  const overlapping = (pointB[0] - pointA[0]) * (pointB[1] - pointA[1])\n  return totalArea - overlapping\n}\n\nconsole.log(computeArea(-3, 0, 3, 4, 0, -1, 9, 2))`.trim();\nconst summaryRanges = `\nconst summaryRanges = function (nums) {\n  let start = null\n  const result = []\n  for (let i = 0; i < nums.length; i++) {\n    if (start === null) {\n      start = nums[i]\n    }\n    if (nums[i] === nums[i + 1] - 1) {\n      continue\n    }\n    if (nums[i] === start) {\n      result.push(nums[i].toString())\n      start = null\n    } else {\n      result.push('$'{start}->'$'{nums[i]}')\n      start = null\n    }\n  }\n  return result\n}\n\n\nconsole.log(summaryRanges([1,2,3,4,6,7,9]))`.trim();\nconst isPowerOfTwo = `\nconst isPowerOfTwo = (x) => {\n  if (x <= 0) {\n    return false\n  }\n  return (x & (x - 1)) === 0\n}\n\nconsole.log(isPowerOfTwo(16))`.trim();\nconst countDigitOne = `\nconst countDigitOne = function (n) {\n  const memo = {}\n  const aux = (number) => {\n    if (memo[number] !== undefined) {\n      return memo[number]\n    }\n    if (number <= 0) {\n      return 0\n    }\n    const str = number.toString()\n    const first = parseInt(str[0], 10)\n    const base = Math.pow(10, str.length - 1)\n    const reminder = number - first * base\n    if (first === 1) {\n      memo[number] = aux(base - 1) + reminder + 1 + aux(reminder)\n    } else {\n      memo[number] = first * aux(base - 1) + base + aux(reminder)\n    }\n    return memo[number]\n  }\n  return aux(n)\n}\n\nconsole.log(countDigitOne(16))`.trim();\nconst productExceptSelf = `\nconst productExceptSelf = (nums = []) => {\n  if(!nums.length) {\n      return nums\n  }\n  const product = [nums[0]]\n  for(let i = 1; i < nums.length; i++) {\n      product[i] = nums[i] * product[i-1]\n  }\n  let suffixProduct = 1\n  for(let i = nums.length -1; i >= 1; i--) {\n      product[i] = product[i-1] * suffixProduct\n      suffixProduct *= nums[i]\n  }\n  product[0] = suffixProduct\n  return product\n}\n\nconsole.log(productExceptSelf([1,2,3,4]))`.trim();\nconst maxSlidingWindow = `\nconst maxSlidingWindow = (nums = [], k) => {\n  if (!nums.length) {\n    return []\n  }\n  const result = []\n  const queue = []\n  for (let i = 0; i < k; i++) {\n    while (nums[i] > nums[queue[queue.length - 1]]) {\n      queue.pop()\n    }\n    queue.push(i)\n  }\n  result.push(nums[queue[0]])\n  for (let i = 1; i < nums.length - k + 1; i++) {\n    if (queue[0] < i) {\n      queue.shift()\n    }\n    while (nums[i + k - 1] > nums[queue[queue.length - 1]]) {\n      queue.pop()\n    }\n    queue.push(i + k - 1)\n    result.push(nums[queue[0]])\n  }\n  return result\n}\n\nconsole.log(maxSlidingWindow([1,3,-1,-3,5,3,6,7], 3))`.trim();\nconst getFactors = `\nconst getFactors = function (n) {\n  const result = []\n  const aux = (remain, start = 2, current = []) => {\n    if (remain === 1) {\n      if (current.length > 1) {\n        result.push([...current])\n      }\n      return\n    }\n    for (let i = start; i <= remain; i++) {\n      if (remain % i === 0) {\n        current.push(i)\n        aux(remain / i, i, current)\n        current.pop()\n      }\n    }\n  }\n  aux(n)\n  return result\n}\n\nconsole.log(getFactors(345))`.trim();\nconst addDigits = `\nvar addDigits = function(num) {\n  function cal(num){\n      var s = num.toString();\n      var digits = s.split(\"\").map(Number);\n      if(digits.length === 1){\n          return digits[0];\n      }\n      num = digits.reduce(function(pre, cur){\n          return pre + cur;\n      });\n      return cal(num);\n  }\n  \n  return cal(num);\n};\n\nconsole.log(addDigits(38))`.trim();\nconst isUgly = `\nconst isUgly = (num) => {\n  const memo = []\n  const aux = (n) => {\n    if (memo[n] !== undefined) {\n      return memo[n]\n    }\n    if (n === 1 || n === 2 || n === 3 || n === 5 || n === 4) {\n      return true\n    }\n    if (n < 5) {\n      return false\n    }\n    memo[n] = aux(n / 2) || aux(n / 3) || aux(n / 5)\n    return memo[n]\n  }\n  return aux(num)\n}\n\n\nconsole.log(isUgly(15))`.trim();\nconst numSquares = `\nconst numSquares = (n) => {\n  const maxLength = Math.ceil(Math.sqrt(n))\n  const squareLengths = new Array(maxLength).fill(0).map((v, index) => (index + 1) ** 2)\n  const memo = {}\n  const aux = (index, sum) => {\n    memo[index] = memo[index] || {}\n    if (memo[index][sum] !== undefined) {\n      return memo[index][sum]\n    }\n    if (sum === n) {\n      return 0\n    }\n    if (sum > n || index > squareLengths.length - 1) {\n      return Infinity\n    }\n    memo[index][sum] = Math.min(\n      aux(index, sum + squareLengths[index]) + 1,\n      aux(index + 1, sum),\n    )\n    return memo[index][sum]\n  }\n  return aux(0, 0)\n}\n\nconsole.log(numSquares(13))`.trim();\nconst getHint = `\nvar getHint = function(secret, guess) {\n  const secretMap = {}\n  for(let c of secret) {\n      secretMap[c] = secretMap[c] || 0\n      secretMap[c] += 1\n  }\n  let bulls = 0\n  let cows = 0\n  let used = {}\n  for(let i = 0; i< guess.length; i++) {\n      if(guess[i] === secret[i] && secretMap[guess[i]] > 0) {\n          bulls += 1\n          secretMap[guess[i]]--\n      }  \n      \n  }\n  for(let i = 0; i< guess.length; i++) { \n      \n      if(guess[i] !== secret[i] && secretMap[guess[i]] > 0) {\n          cows += 1\n          secretMap[guess[i]]--\n      }\n  }\n  return bulls + \"A\" + cows + \"B\"\n};\n\nconsole.log(getHint(\"1123\", \"0111\"))`.trim();\nconst countSmaller = `\nconst countSmaller = function (nums) {\n  const result = nums.map(() => 0)\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[j] < nums[i]) {\n        result[i] += 1\n      }\n    }\n  }\n  return result\n}\n\nconsole.log(countSmaller([5,2,6,1]))`.trim();\nconst coinChange = `\nconst coinChange = (coins = [], amount) => {\n  const memo = {}\n  const aux = (remainAmount, coinIndex) => {\n    if (\n      memo[remainAmount] !== undefined\n      && memo[remainAmount][coinIndex] !== undefined\n    ) {\n      return memo[remainAmount][coinIndex]\n    }\n    if (remainAmount < 0) {\n      return Infinity\n    }\n    if (remainAmount === 0) {\n      return 0\n    }\n    if (coinIndex < 0 && remainAmount > 0) {\n      return Infinity\n    }\n    memo[remainAmount] = memo[remainAmount] || {}\n    memo[remainAmount][coinIndex] = Math.min(\n      aux(remainAmount - coins[coinIndex], coinIndex) + 1,\n      aux(remainAmount, coinIndex - 1),\n    )\n    return memo[remainAmount][coinIndex]\n  }\n  const result = aux(amount, coins.length - 1)\n  return result === Infinity ? -1 : result\n}\n\n\nconsole.log(coinChange([1, 2, 5], 11))`.trim();\nconst getSum = `\nconst getSum = function (a, b) {\n  let carry = 0\n  while (b !== 0) {\n    carry = a & b\n    a ^= b\n    b = carry << 1\n  }\n  return a\n}\n\nconsole.log(getSum(5, 1))`.trim();\n\nclass TopTech extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }, \"1. Evaluate Reverse Polish Notation\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, \"Input: \"), \"[\\\"2\\\", \\\"1\\\", \\\"+\\\", \\\"3\\\", \\\"*\\\"]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }, \"Output: \"), \"9\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }, \"Explanation: \"), \"((2 + 1) * 3) = 9\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: evalRPN,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    }, \"2. Reverse Words in a String.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }, \"Note: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }, \"A word is defined as a sequence of non-space characters.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480\n      },\n      __self: this\n    }, \"Input string may contain leading or trailing spaces. However, your reversed string should not contain leading or trailing spaces.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    }, \"You need to reduce multiple spaces between two words to a single space in the reversed string.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: reverseWords,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }, \"3. Excel Sheet Column Title.\"), \"Given a positive integer, return its corresponding column title as appear in an Excel sheet.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: convertToTitle,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }, \"4. Largest Number.\"), \"Given a list of non negative integers, arrange them such that they form the largest number.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: largestNumber,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }, \"5. Combination Sum.\"), \"Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }, \"Note: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }, \"All numbers will be positive integers.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }, \"The solution set must not contain duplicate combinations.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: combinationSum3,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }, \"6. Contains Duplicate.\"), \"Given an array of integers, find if the array contains any duplicates.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }), \"Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: containsDuplicate,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }, \"7. Rectangle Area.\"), \"Find the total area covered by two rectilinear rectangles in a 2D plane.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }), \"Each rectangle is defined by its bottom left corner and top right corner.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: computeArea,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558\n      },\n      __self: this\n    }, \"8. Summary Ranges.\"), \"Given a sorted integer array without duplicates, return the summary of its ranges.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: summaryRanges,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569\n      },\n      __self: this\n    }, \"9. Power of Two.\"), \"Given an integer, write a function to determine if it is a power of two.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isPowerOfTwo,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580\n      },\n      __self: this\n    }, \"10. Number of Digit One.\"), \"Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: countDigitOne,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591\n      },\n      __self: this\n    }, \"11. Product of Array Except Self.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: productExceptSelf,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602\n      },\n      __self: this\n    }, \"12. Sliding Window Maximum.\"), \"Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 605\n      },\n      __self: this\n    }), \"Could you solve it in linear time?\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maxSlidingWindow,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616\n      },\n      __self: this\n    }, \"13. Factor Combinations.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: getFactors,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627\n      },\n      __self: this\n    }, \"14. Add Digits.\"), \"Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631\n      },\n      __self: this\n    }, \"Input: \"), \"38\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632\n      },\n      __self: this\n    }, \"Output: \"), \"2 \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 633\n      },\n      __self: this\n    }, \"Explanation: \"), \"The process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 635\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: addDigits,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 642\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644\n      },\n      __self: this\n    }, \"15. Ugly Number.\"), \"Write a program to check whether a given number is an ugly number.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646\n      },\n      __self: this\n    }), \"Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isUgly,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 649\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    }, \"16. Perfect Squares.\"), \"Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: numSquares,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668\n      },\n      __self: this\n    }, \"17. Bulls and Cows.\"), \"You are playing the following Bulls and Cows game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called \\\"bulls\\\") and how many digits match the secret number but locate in the wrong position (called \\\"cows\\\"). Your friend will use successive guesses and hints to eventually derive the secret number.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670\n      },\n      __self: this\n    }), \"Write a function to return a hint according to the secret number and friend's guess, use A to indicate the bulls and B to indicate the cows.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672\n      },\n      __self: this\n    }), \"Please note that both secret number and friend's guess may contain duplicate digits.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676\n      },\n      __self: this\n    }, \"nput: \"), \"Isecret = \\\"1807\\\", guess = \\\"7810\\\" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    }, \"Output: \"), \"I\\\"1A3B\\\" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678\n      },\n      __self: this\n    }, \"Explanation: \"), \"I1 bull and 3 cows. The bull is 8, the cows are 0, 1 and 7.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: getHint,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 686\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688\n      },\n      __self: this\n    }, \"18. Count of Smaller Numbers After Self.\"), \"You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [5,2,6,1]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692\n      },\n      __self: this\n    }, \"Output: \"), \"[2,1,1,0]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 693\n      },\n      __self: this\n    }, \"Explanation: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 695\n      },\n      __self: this\n    }, \"To the right of 5 there are 2 smaller elements (2 and 1).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 696\n      },\n      __self: this\n    }, \"To the right of 2 there is only 1 smaller element (1).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 697\n      },\n      __self: this\n    }, \"To the right of 6 there is 1 smaller element (1).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698\n      },\n      __self: this\n    }, \"To the right of 1 there is 0 smaller element.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: countSmaller,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 707\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 709\n      },\n      __self: this\n    }, \"19. Coin Change.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710\n      },\n      __self: this\n    }, \"Input: \"), \"coins = [1, 2, 5], amount = 11\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711\n      },\n      __self: this\n    }, \"Output: \"), \"3 \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712\n      },\n      __self: this\n    }, \"Explanation: \"), \"11 = 5 + 5 + 1\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 713\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: coinChange,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 714\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 720\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 722\n      },\n      __self: this\n    }, \"20. Sum of Two Integers.\"), \"Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: getSum,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 733\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default withStyles(styles)(TopTech);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/topTech.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","evalRPN","trim","stack","convertToTitle","largestNumber","combinationSum3","containsDuplicate","computeArea","summaryRanges","isPowerOfTwo","countDigitOne","productExceptSelf","maxSlidingWindow","getFactors","addDigits","isUgly","numSquares","getHint","countSmaller","coinChange","getSum","TopTech","componentDidMount","setTimeout","highlightAll","render","classes","props","reverseWords"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = {backgroundColor:'#F0F8FF', padding:'1px', fontSize:'16px'}\n\nconst styles = theme => ({\n  paper: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1)\n  },\n  smMargin: {\n      margin: theme.spacing(1)\n  },\n  actionDiv: {\n      textAlign: \"center\"\n  }\n})\n\n\nconst evalRPN = `\nconst evalRPN = function (tokens) {\n  const stack = []\n  const isOperator = token => token === '+' || token === '-' || token === '*' || token === '/'\n  for (const token of tokens) {\n    if (isOperator(token)) {\n      const b = stack.pop()\n      const a = stack.pop()\n      let result = 0\n      switch (token) {\n        case '+':\n          result = a + b\n          break\n        case '-':\n          result = a - b\n          break\n        case '/':\n          result = a / b\n          result = result < 0 ? Math.ceil(result) : Math.floor(a / b) // 注意负数向上取整\n          break\n        default:\n          result = a * b\n      }\n      stack.push(result)\n    } else {\n      stack.push(parseInt(token, 10))\n    }\n  }\n  return stack[0]\n}\nconsole.log(evalRPN([\"4\", \"13\", \"5\", \"/\", \"+\"]))`.trim();\n\nconst stack = `\n`.trim();\n\nconst convertToTitle = `\nvar convertToTitle = function(n) {\n  var A = \"A\".charCodeAt(0);\n  var str = \"\";\n  while(n > 0) {\n      n--;\n      str = String.fromCharCode(A+n%26) + str;\n      n =parseInt(n/26);\n  }\n  \n  return str;\n};\n\nconsole.log(convertToTitle(701))`.trim();\n\nconst largestNumber = `\nconst largestNumber = function (nums = []) {\n  nums.sort((a, b) => {\n    const digitsA = a.toString(10) + b.toString(10)\n    const digitsB = b.toString(10) + a.toString(10)\n    for (let i = 0; i < digitsA.length; i++) {\n      const digitB = parseInt(digitsB[i], 10)\n      const digitA = parseInt(digitsA[i], 10)\n      if (digitB > digitA || digitB < digitA) {\n        return digitB - digitA\n      }\n    }\n    return 0\n  })\n  const result = nums.join('')\n  return result[0] === '0' ? '0' : result\n}\n\nconsole.log(largestNumber([10,2]))`.trim();\n\nconst combinationSum3 = `\nconst combinationSum3 = function (k, n) {\n  const result = []\n  const aux = (start, current, sum) => {\n    if (current.length > k) {\n      return\n    }\n    if (current.length === k) {\n      if (sum === n) {\n        result.push([...current])\n        return\n      }\n      return\n    }\n\n    for (let i = start; i <= 9; i++) {\n      current.push(i)\n      aux(i + 1, current, sum + i)\n      current.pop(i)\n    }\n  }\n  for (let i = 1; i <= 9; i++) {\n    aux(i + 1, [i], i)\n  }\n  return result\n}\n\nconsole.log(combinationSum3(3,7))`.trim();\n\nconst containsDuplicate = `\nconst containsDuplicate = (nums) => {\n  const map = {}\n  for (num of nums) {\n    if (map[num]) {\n      return true\n    }\n    map[num] = 1\n  }\n  return false\n}\n\nconsole.log(containsDuplicate([1,2,3,1]))`.trim();\n\nconst computeArea = `\nconst computeArea = function (A, B, C, D, E, F, G, H) {\n  const area = (pointA, pointB) => (pointB[0] - pointA[0]) * (pointB[1] - pointA[1])\n  const totalArea = area([A, B], [C, D]) + area([E, F], [G, H])\n  if (E >= C || G <= A || F >= D || H <= B) {\n    return totalArea\n  }\n  const pointA = [Math.max(A, E), Math.max(B, F)]\n  const pointB = [Math.min(C, G), Math.min(D, H)]\n  const overlapping = (pointB[0] - pointA[0]) * (pointB[1] - pointA[1])\n  return totalArea - overlapping\n}\n\nconsole.log(computeArea(-3, 0, 3, 4, 0, -1, 9, 2))`.trim();\n\nconst summaryRanges = `\nconst summaryRanges = function (nums) {\n  let start = null\n  const result = []\n  for (let i = 0; i < nums.length; i++) {\n    if (start === null) {\n      start = nums[i]\n    }\n    if (nums[i] === nums[i + 1] - 1) {\n      continue\n    }\n    if (nums[i] === start) {\n      result.push(nums[i].toString())\n      start = null\n    } else {\n      result.push('$'{start}->'$'{nums[i]}')\n      start = null\n    }\n  }\n  return result\n}\n\n\nconsole.log(summaryRanges([1,2,3,4,6,7,9]))`.trim();\n\nconst isPowerOfTwo = `\nconst isPowerOfTwo = (x) => {\n  if (x <= 0) {\n    return false\n  }\n  return (x & (x - 1)) === 0\n}\n\nconsole.log(isPowerOfTwo(16))`.trim();\n\nconst countDigitOne = `\nconst countDigitOne = function (n) {\n  const memo = {}\n  const aux = (number) => {\n    if (memo[number] !== undefined) {\n      return memo[number]\n    }\n    if (number <= 0) {\n      return 0\n    }\n    const str = number.toString()\n    const first = parseInt(str[0], 10)\n    const base = Math.pow(10, str.length - 1)\n    const reminder = number - first * base\n    if (first === 1) {\n      memo[number] = aux(base - 1) + reminder + 1 + aux(reminder)\n    } else {\n      memo[number] = first * aux(base - 1) + base + aux(reminder)\n    }\n    return memo[number]\n  }\n  return aux(n)\n}\n\nconsole.log(countDigitOne(16))`.trim();\n\nconst productExceptSelf = `\nconst productExceptSelf = (nums = []) => {\n  if(!nums.length) {\n      return nums\n  }\n  const product = [nums[0]]\n  for(let i = 1; i < nums.length; i++) {\n      product[i] = nums[i] * product[i-1]\n  }\n  let suffixProduct = 1\n  for(let i = nums.length -1; i >= 1; i--) {\n      product[i] = product[i-1] * suffixProduct\n      suffixProduct *= nums[i]\n  }\n  product[0] = suffixProduct\n  return product\n}\n\nconsole.log(productExceptSelf([1,2,3,4]))`.trim();\n\nconst maxSlidingWindow = `\nconst maxSlidingWindow = (nums = [], k) => {\n  if (!nums.length) {\n    return []\n  }\n  const result = []\n  const queue = []\n  for (let i = 0; i < k; i++) {\n    while (nums[i] > nums[queue[queue.length - 1]]) {\n      queue.pop()\n    }\n    queue.push(i)\n  }\n  result.push(nums[queue[0]])\n  for (let i = 1; i < nums.length - k + 1; i++) {\n    if (queue[0] < i) {\n      queue.shift()\n    }\n    while (nums[i + k - 1] > nums[queue[queue.length - 1]]) {\n      queue.pop()\n    }\n    queue.push(i + k - 1)\n    result.push(nums[queue[0]])\n  }\n  return result\n}\n\nconsole.log(maxSlidingWindow([1,3,-1,-3,5,3,6,7], 3))`.trim();\n\nconst getFactors = `\nconst getFactors = function (n) {\n  const result = []\n  const aux = (remain, start = 2, current = []) => {\n    if (remain === 1) {\n      if (current.length > 1) {\n        result.push([...current])\n      }\n      return\n    }\n    for (let i = start; i <= remain; i++) {\n      if (remain % i === 0) {\n        current.push(i)\n        aux(remain / i, i, current)\n        current.pop()\n      }\n    }\n  }\n  aux(n)\n  return result\n}\n\nconsole.log(getFactors(345))`.trim();\n\nconst addDigits = `\nvar addDigits = function(num) {\n  function cal(num){\n      var s = num.toString();\n      var digits = s.split(\"\").map(Number);\n      if(digits.length === 1){\n          return digits[0];\n      }\n      num = digits.reduce(function(pre, cur){\n          return pre + cur;\n      });\n      return cal(num);\n  }\n  \n  return cal(num);\n};\n\nconsole.log(addDigits(38))`.trim();\n\nconst isUgly = `\nconst isUgly = (num) => {\n  const memo = []\n  const aux = (n) => {\n    if (memo[n] !== undefined) {\n      return memo[n]\n    }\n    if (n === 1 || n === 2 || n === 3 || n === 5 || n === 4) {\n      return true\n    }\n    if (n < 5) {\n      return false\n    }\n    memo[n] = aux(n / 2) || aux(n / 3) || aux(n / 5)\n    return memo[n]\n  }\n  return aux(num)\n}\n\n\nconsole.log(isUgly(15))`.trim();\n\nconst numSquares = `\nconst numSquares = (n) => {\n  const maxLength = Math.ceil(Math.sqrt(n))\n  const squareLengths = new Array(maxLength).fill(0).map((v, index) => (index + 1) ** 2)\n  const memo = {}\n  const aux = (index, sum) => {\n    memo[index] = memo[index] || {}\n    if (memo[index][sum] !== undefined) {\n      return memo[index][sum]\n    }\n    if (sum === n) {\n      return 0\n    }\n    if (sum > n || index > squareLengths.length - 1) {\n      return Infinity\n    }\n    memo[index][sum] = Math.min(\n      aux(index, sum + squareLengths[index]) + 1,\n      aux(index + 1, sum),\n    )\n    return memo[index][sum]\n  }\n  return aux(0, 0)\n}\n\nconsole.log(numSquares(13))`.trim();\n\nconst getHint = `\nvar getHint = function(secret, guess) {\n  const secretMap = {}\n  for(let c of secret) {\n      secretMap[c] = secretMap[c] || 0\n      secretMap[c] += 1\n  }\n  let bulls = 0\n  let cows = 0\n  let used = {}\n  for(let i = 0; i< guess.length; i++) {\n      if(guess[i] === secret[i] && secretMap[guess[i]] > 0) {\n          bulls += 1\n          secretMap[guess[i]]--\n      }  \n      \n  }\n  for(let i = 0; i< guess.length; i++) { \n      \n      if(guess[i] !== secret[i] && secretMap[guess[i]] > 0) {\n          cows += 1\n          secretMap[guess[i]]--\n      }\n  }\n  return bulls + \"A\" + cows + \"B\"\n};\n\nconsole.log(getHint(\"1123\", \"0111\"))`.trim();\n\nconst countSmaller = `\nconst countSmaller = function (nums) {\n  const result = nums.map(() => 0)\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[j] < nums[i]) {\n        result[i] += 1\n      }\n    }\n  }\n  return result\n}\n\nconsole.log(countSmaller([5,2,6,1]))`.trim();\n\nconst coinChange = `\nconst coinChange = (coins = [], amount) => {\n  const memo = {}\n  const aux = (remainAmount, coinIndex) => {\n    if (\n      memo[remainAmount] !== undefined\n      && memo[remainAmount][coinIndex] !== undefined\n    ) {\n      return memo[remainAmount][coinIndex]\n    }\n    if (remainAmount < 0) {\n      return Infinity\n    }\n    if (remainAmount === 0) {\n      return 0\n    }\n    if (coinIndex < 0 && remainAmount > 0) {\n      return Infinity\n    }\n    memo[remainAmount] = memo[remainAmount] || {}\n    memo[remainAmount][coinIndex] = Math.min(\n      aux(remainAmount - coins[coinIndex], coinIndex) + 1,\n      aux(remainAmount, coinIndex - 1),\n    )\n    return memo[remainAmount][coinIndex]\n  }\n  const result = aux(amount, coins.length - 1)\n  return result === Infinity ? -1 : result\n}\n\n\nconsole.log(coinChange([1, 2, 5], 11))`.trim();\n\nconst getSum = `\nconst getSum = function (a, b) {\n  let carry = 0\n  while (b !== 0) {\n    carry = a & b\n    a ^= b\n    b = carry << 1\n  }\n  return a\n}\n\nconsole.log(getSum(5, 1))`.trim();\n\n\nclass TopTech extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n            <Grid item xs={2}>\n                <Paper className={classes.paper}>\n                    <h4><Sidebar /></h4>\n                </Paper>\n            </Grid>\n            <Grid item xs={10}>\n            <Paper className={classes.paper}>\n            <List>\n              <h3>1. Evaluate Reverse Polish Notation</h3>\n              <b>Input: </b>[\"2\", \"1\", \"+\", \"3\", \"*\"]<br/>\n              <b>Output: </b>9<br/>\n              <b>Explanation: </b>((2 + 1) * 3) = 9\n              <div style={titles}>\n                <PrismCode\n                  code={evalRPN}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              \n              <h3>2. Reverse Words in a String.</h3>\n              <b>Note: </b>\n              <ul>\n                <li>A word is defined as a sequence of non-space characters.</li>\n                <li>Input string may contain leading or trailing spaces. However, your reversed string should not contain leading or trailing spaces.</li>\n                <li>You need to reduce multiple spaces between two words to a single space in the reversed string.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={reverseWords}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              \n              <br/>\n              <h3>3. Excel Sheet Column Title.</h3>\n              Given a positive integer, return its corresponding column title as appear in an Excel sheet.\n              <div style={titles}>\n                <PrismCode\n                  code={convertToTitle}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>4. Largest Number.</h3>\n              Given a list of non negative integers, arrange them such that they form the largest number.\n              <div style={titles}>\n                <PrismCode\n                  code={largestNumber}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n             \n              <h3>5. Combination Sum.</h3>\n              Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.\n              <br/>\n\n              <b>Note: </b>\n              <ul>\n                <li>All numbers will be positive integers.</li>\n                <li>The solution set must not contain duplicate combinations.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={combinationSum3}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              \n              <h3>6. Contains Duplicate.</h3>\n              Given an array of integers, find if the array contains any duplicates.\n              <br/>\n              Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.\n              <div style={titles}>\n                <PrismCode\n                  code={containsDuplicate}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n             \n              <h3>7. Rectangle Area.</h3>\n              Find the total area covered by two rectilinear rectangles in a 2D plane.\n              <br/>\n              Each rectangle is defined by its bottom left corner and top right corner.\n              <div style={titles}>\n                <PrismCode\n                  code={computeArea}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n             \n              <h3>8. Summary Ranges.</h3>\n              Given a sorted integer array without duplicates, return the summary of its ranges.\n              <div style={titles}>\n                <PrismCode\n                  code={summaryRanges}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              \n              <h3>9. Power of Two.</h3>\n              Given an integer, write a function to determine if it is a power of two.\n              <div style={titles}>\n                <PrismCode\n                  code={isPowerOfTwo}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              \n              <h3>10. Number of Digit One.</h3>\n              Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.\n              <div style={titles}>\n                <PrismCode\n                  code={countDigitOne}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n          \n              <h3>11. Product of Array Except Self.</h3>\n              \n              <div style={titles}>\n                <PrismCode\n                  code={productExceptSelf}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n           \n              <h3>12. Sliding Window Maximum.</h3>\n              Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.\n              <br/>\n              <br/>\n              Could you solve it in linear time?\n              <div style={titles}>\n                <PrismCode\n                  code={maxSlidingWindow}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n          \n              <h3>13. Factor Combinations.</h3>\n              \n              <div style={titles}>\n                <PrismCode\n                  code={getFactors}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n            \n              <h3>14. Add Digits.</h3>\n              Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.\n              <br/>\n              <br/>\n              <b>Input: </b>38<br/>\n              <b>Output: </b>2 <br/>\n              <b>Explanation: </b>The process is like: 3 + 8 = 11, 1 + 1 = 2. \n                          Since 2 has only one digit, return it.\n              <div style={titles}>\n                <PrismCode\n                  code={addDigits}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n            \n              <h3>15. Ugly Number.</h3>\n              Write a program to check whether a given number is an ugly number.\n              <br/>\n              Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\n              <div style={titles}>\n                <PrismCode\n                  code={isUgly}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n          \n              <h3>16. Perfect Squares.</h3>\n              Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.\n              <div style={titles}>\n                <PrismCode\n                  code={numSquares}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n          \n              <h3>17. Bulls and Cows.</h3>\n              You are playing the following Bulls and Cows game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called \"bulls\") and how many digits match the secret number but locate in the wrong position (called \"cows\"). Your friend will use successive guesses and hints to eventually derive the secret number.\n              <br/>\n              Write a function to return a hint according to the secret number and friend's guess, use A to indicate the bulls and B to indicate the cows. \n              <br/>\n              Please note that both secret number and friend's guess may contain duplicate digits.\n              <br/>\n\n              <b>nput: </b>Isecret = \"1807\", guess = \"7810\" <br/>\n              <b>Output: </b>I\"1A3B\" <br/>\n              <b>Explanation: </b>I1 bull and 3 cows. The bull is 8, the cows are 0, 1 and 7.\n              <div style={titles}>\n                <PrismCode\n                  code={getHint}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n        \n              <h3>18. Count of Smaller Numbers After Self.</h3>\n              You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].\n              <br/>\n              <b>Input: </b>nums = [5,2,6,1]<br/>\n              <b>Output: </b>[2,1,1,0]<br/>\n              <b>Explanation: </b>\n              <ul>\n                <li>To the right of 5 there are 2 smaller elements (2 and 1).</li>\n                <li>To the right of 2 there is only 1 smaller element (1).</li>\n                <li>To the right of 6 there is 1 smaller element (1).</li>\n                <li>To the right of 1 there is 0 smaller element.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={countSmaller}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n         \n              <h3>19. Coin Change.</h3>\n              <b>Input: </b>coins = [1, 2, 5], amount = 11<br/>\n              <b>Output: </b>3 <br/>\n              <b>Explanation: </b>11 = 5 + 5 + 1\n              <div style={titles}>\n                <PrismCode\n                  code={coinChange}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n        \n              <h3>20. Sum of Two Integers.</h3>\n              Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.\n              <div style={titles}>\n                <PrismCode\n                  code={getSum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n              <h3></h3>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(TopTech));\n"]},"metadata":{},"sourceType":"module"}