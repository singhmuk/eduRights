{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/ReactJs/reactJs_hooks/contextMethods.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst inputs = ``.trim();\nconst curd2 = `const url = 'https://jsonplaceholder.typicode.com/posts';\n\nclass App extends Component{\n    state = {\n      posts: []\n    };\n\n   async componentDidMount(){\n      const { data: posts } = await axios.get(url)\n      this.setState({posts})\n    }\n\n    handleAdd = async () => {\n      const obj = {title:'title', body: 'body'}\n      const {data: post} = await axios.post(url, obj)\n      const posts = [post, ...this.state.posts]\n      this.setState({posts})\n    }\n\n    handleUpdate = async post => {\n      post.title = \"update\"\n      await axios.put('$'{ url }/'$'{post.id}', post)\n\nconst posts = [...this.state.posts]\nconst index = posts.indexOf(post)\nposts[index] = { ...post }\nthis.setState({ posts })\n    }\n\nhandleDelete = async post => {\n  await axios.delete('$'{url}/'$'{post.id}')\n\n  const posts = this.state.posts.filter(p => p.id !== post.id)\n  this.setState({ posts })\n}\n\nrender(){\n  return (\n    <div>\n      <button onClick={this.handleAdd}>Add</button>\n      <ul>\n        <li>Title</li>\n        <li>Update</li>\n        <li>Delete</li>\n      </ul>\n      {this.state.posts.map(post => (\n        <li>\n          {post.title}\n          <button onClick={() => this.handleUpdate(post)}>Update</button>\n          <button onClick={() => this.handleDelete(post)}>Delete</button>\n        </li>\n      ))}\n    </div>\n  )\n}\n}`.trim();\nconst states = `\n//components/myContext.js\nimport React from 'react';\n\nconst MyContext = React.createContext();\n\nexport default MyContext;\n\n\n//components/compA.js\nimport Comp2 from './compB';\n\nconst Comp = () => {\n  return(\n    <div>\n      <Comp2 />\n    </div>\n  )\n}\n\nexport default Comp;\n\n\n//components/compB.js\nimport MyContext from './myContext';\n\nconst Comp2 = () => {\n    return(\n    <MyContext.Consumer>\n      {(data)=>(\n        <li>{data.name}</li>\n      )}\n    </MyContext.Consumer>\n    )\n  }\n\nexport default Comp2;\n\n\n//App.js\nimport React, { useState } from 'react';\nimport MyContext from './components/myContext';\nimport CompA from './components/compA';\n\nconst App = () => {\n  const [ name ] = useState('Mukesh')\n  \n    return(\n      <div>\n        <MyContext.Provider\n          value={{name:name}}>\n          <CompA />\n        </MyContext.Provider>\n      </div>\n    )\n  }\n\nexport default App;\n`.trim();\nconst expensAction = `\n//forms/AddUserForm.js\nconst AddUserForm = props => {\n  const initialFormState = { id: null, name: \"\", username: \"\" };\n  const [user, setUser] = useState(initialFormState);\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setUser({ ...user, [name]: value });\n  };\n\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault();\n        if (!user.name || !user.username) return;\n        props.addUser(user);\n        setUser(initialFormState);\n      }}\n    >\n      <label>Name</label>\n      <input type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange} />\n      <label>Username</label>\n      <input type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\n      <button>Add new user</button>\n    </form>\n  );\n};\n\n\n//forms/EditUserForm.js\nconst EditUserForm = props => {\n  const [user, setUser] = useState(props.currentUser);\n\n  useEffect(() => { setUser(props.currentUser) },\n    [props]\n  );\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setUser({ ...user, [name]: value });\n  };\n\n  return (\n    <form onSubmit={e => { e.preventDefault(); props.updateUser(user.id, user) }} >\n      <label>Name</label>\n      <input type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange} />\n      <label>Username</label>\n      <input type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\n      <button>Update user</button>\n      <button onClick={() => props.setEditing(false)}>Cancel</button>\n    </form>\n  );\n};\n\n\n//tables/UserTable.js\nconst UserTable = props => (\n  <table>\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Username</th>\n        <th>Actions</th>\n      </tr>\n    </thead>\n    <tbody>\n      {props.users.length > 0 ? (\n        props.users.map(user => (\n          <tr key={user.id}>\n            <td>{user.name}</td>\n            <td>{user.username}</td>\n            <td>\n              <button onClick={() => props.editRow(user)}>Edit</button>\n              <button onClick={() => props.deleteUser(user.id)}>Delete</button>\n            </td>\n          </tr>\n        ))\n      ) : (\n        <tr>\n          <td colSpan={3}>No users</td>\n        </tr>\n      )}\n    </tbody>\n  </table>\n);\n\n\n//App.js\nimport UserTable from \"./tables/UserTable\";\nimport AddUserForm from \"./forms/AddUserForm\";\nimport EditUserForm from \"./forms/EditUserForm\";\n\nconst App = () => {\n  const usersData = [\n    { id: 1, name: \"AAA\", username: \"aiueo\" },\n    { id: 2, name: \"BBB\", username: \"kakikukeko\" },\n    { id: 3, name: \"CCC\", username: \"sasisuseso\" }\n  ];\n\n  const [users, setUsers] = useState(usersData);\n\n  const addUser = user => {\n    user.id = users.length + 1;\n    setUsers([...users, user]);\n  };\n\n  const deleteUser = id => {\n    setUsers(users.filter(user => user.id !== id));\n  };\n\n  const [editing, setEditing] = useState(false);\n  const initialFormState = { id: null, name: \"\", username: \"\" };\n  const [currentUser, setCurrentUser] = useState(initialFormState);\n\n  const editRow = user => {\n    setEditing(true);\n    setCurrentUser({ id: user.id, name: user.name, username: user.username });\n  };\n\n  const updateUser = (id, updateUser) => {\n    setEditing(false);\n    setUsers(users.map(user => (user.id === id ? updateUser : user)));\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>CRUD App with Hooks</h1>\n      <div className=\"flex-row\">\n        <div className=\"flex-large\">\n          {editing ? (\n            <div>\n              <h2>Eidt User</h2>\n              <EditUserForm\n                editing={editing}\n                setEditing={setEditing}\n                currentUser={currentUser}\n                updateUser={updateUser}\n              />\n            </div>\n          ) : (\n            <div>\n              <h2>Add User</h2>\n              <AddUserForm addUser={addUser} />\n            </div>\n          )}\n        </div>\n        <div className=\"flex-large\">\n          <h2>View users</h2>\n          <UserTable users={users} deleteUser={deleteUser} editRow={editRow} />\n        </div>\n      </div>\n    </div>\n  );\n};`.trim();\nconst curd = `\nclass App extends Component {\n  state = {\n    mockData: [],\n    text: \"\",\n    id: Math.random(1,100),\n    editItem: false\n  };\n  \n  handleChange = e => {\n    this.setState({text: e.target.value});\n  };\n  \n  handleAdd = e => {\n    e.preventDefault();\n    if (this.state.text.length === 0) return;\n\n    const newItem = {\n      id: this.state.id,\n      title: this.state.text\n    };\n    \n    const updatedItems = [...this.state.mockData].concat(newItem);\n\n    this.setState({\n      mockData: updatedItems,\n      text: \"\",\n      id: Math.random(1,100),\n      editItem: false\n    });\n  };\n  \n  clearList = () => {\n    this.setState({ mockData: [] });\n    };\n    \n  handleDelete = (id) => {\n      this.setState({ mockData: this.state.mockData.filter(item => item.id !== id) });\n    };\n    \n  handleEdit = id => {\n    const filteredItems = this.state.mockData.filter(item => item.id !== id);\n    const selectedItem = this.state.mockData.find(item => item.id === id);\n\n    this.setState({\n      mockData: filteredItems,\n      text: selectedItem.title,\n      editItem: true,\n      id: id\n    });\n  };\n  \n  render() {\n    return (\n      <div>\n         <form onSubmit={this.handleAdd}>\n          <div>\n            <input type=\"text\" value={this.state.text} onChange={this.handleChange} />\n          </div>\n          <button>{this.state.editItem ? \"edit item\" : \"add item\"}</button>\n        </form>\n            \n        <ul>\n        {this.state.mockData.map(item => {\n          return (\n            <div>\n              <h1>{item.title}</h1>\n            \n              <button onClick={() => this.handleEdit(item.id)}>edit</button>\n              <button onClick={() => this.handleDelete(item.id)}>delete</button>\n            </div>\n          );\n        })}\n\n        <button onClick={this.clearList}>clear list</button>\n        </ul>\n      </div>\n    );\n  }\n}`.trim();\n\nclass ContextMeth extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, \"1. Input\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: curd2,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }, \"2. Curd\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: curd2,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }, \"3. ReactCurd JsonPlaceholder\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: expensAction,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }, \"4. Curd\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: curd,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }, \"5. Context API State\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: states,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(ContextMeth);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/ReactJs/reactJs_hooks/contextMethods.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","inputs","trim","curd2","states","expensAction","curd","ContextMeth","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,UAAtB,EAAkCC,IAAlC,QAA8C,mBAA9C;AAEA,OAAO,0BAAP;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AAGA,MAAMC,MAAM,GAAG;AAAEC,EAAAA,eAAe,EAAE,SAAnB;AAA8BC,EAAAA,OAAO,EAAE,KAAvC;AAA8CC,EAAAA,QAAQ,EAAE;AAAxD,CAAf;;AAEA,MAAMC,MAAM,GAAGC,KAAK,KAAK;AACvBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH;AAELN,IAAAA,OAAO,EAAEG,KAAK,CAACG,OAAN,CAAc,CAAd;AAFJ,GADgB;AAKvBC,EAAAA,QAAQ,EAAE;AACRF,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd;AADA,GALa;AAQvBE,EAAAA,SAAS,EAAE;AACTC,IAAAA,SAAS,EAAE;AADF;AARY,CAAL,CAApB;;AAaA,MAAMC,MAAM,GAAI,EAAD,CAAGC,IAAH,EAAf;AAEA,MAAMC,KAAK,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAD,CAuDXD,IAvDW,EAAd;AAyDA,MAAME,MAAM,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAD,CA0DbF,IA1Da,EAAf;AA6DA,MAAMG,YAAY,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAD,CA0JjBH,IA1JiB,EAArB;AA6JA,MAAMI,IAAI,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAD,CA+EVJ,IA/EU,EAAb;;AAkFA,MAAMK,WAAN,SAA0B1B,SAA1B,CAAoC;AAClC2B,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,UAAU,CAAC,MAAM3B,KAAK,CAAC4B,YAAN,EAAP,EAA6B,CAA7B,CAAV;AACD;;AACDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB;AACA,WACE,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAED,OAAO,CAACjB,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAJ,CADF,CADF,CADF,EAME,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAEiB,OAAO,CAACjB,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,EAEE;AAAK,MAAA,KAAK,EAAEN,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEc,KADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAFF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAXF,EAYE;AAAK,MAAA,KAAK,EAAEd,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEc,KADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAZF,EAmBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnBF,EAqBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCArBF,EAsBE;AAAK,MAAA,KAAK,EAAEd,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEgB,YADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAtBF,EA6BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7BF,EA+BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBA/BF,EAgCE;AAAK,MAAA,KAAK,EAAEhB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEiB,IADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAhCF,EAuCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvCF,EAyCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAzCF,EA0CE;AAAK,MAAA,KAAK,EAAEjB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEe,MADR;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,OAAO,EAAE,CAAC,cAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA1CF,CADF,CADF,CANF,CADF;AA+DD;;AArEiC;;AAwEpC,eAAgBnB,UAAU,CAACQ,MAAD,CAAV,CAAmBc,WAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst inputs = ``.trim();\n\nconst curd2 = `const url = 'https://jsonplaceholder.typicode.com/posts';\n\nclass App extends Component{\n    state = {\n      posts: []\n    };\n\n   async componentDidMount(){\n      const { data: posts } = await axios.get(url)\n      this.setState({posts})\n    }\n\n    handleAdd = async () => {\n      const obj = {title:'title', body: 'body'}\n      const {data: post} = await axios.post(url, obj)\n      const posts = [post, ...this.state.posts]\n      this.setState({posts})\n    }\n\n    handleUpdate = async post => {\n      post.title = \"update\"\n      await axios.put('$'{ url }/'$'{post.id}', post)\n\nconst posts = [...this.state.posts]\nconst index = posts.indexOf(post)\nposts[index] = { ...post }\nthis.setState({ posts })\n    }\n\nhandleDelete = async post => {\n  await axios.delete('$'{url}/'$'{post.id}')\n\n  const posts = this.state.posts.filter(p => p.id !== post.id)\n  this.setState({ posts })\n}\n\nrender(){\n  return (\n    <div>\n      <button onClick={this.handleAdd}>Add</button>\n      <ul>\n        <li>Title</li>\n        <li>Update</li>\n        <li>Delete</li>\n      </ul>\n      {this.state.posts.map(post => (\n        <li>\n          {post.title}\n          <button onClick={() => this.handleUpdate(post)}>Update</button>\n          <button onClick={() => this.handleDelete(post)}>Delete</button>\n        </li>\n      ))}\n    </div>\n  )\n}\n}`.trim();\n\nconst states = `\n//components/myContext.js\nimport React from 'react';\n\nconst MyContext = React.createContext();\n\nexport default MyContext;\n\n\n//components/compA.js\nimport Comp2 from './compB';\n\nconst Comp = () => {\n  return(\n    <div>\n      <Comp2 />\n    </div>\n  )\n}\n\nexport default Comp;\n\n\n//components/compB.js\nimport MyContext from './myContext';\n\nconst Comp2 = () => {\n    return(\n    <MyContext.Consumer>\n      {(data)=>(\n        <li>{data.name}</li>\n      )}\n    </MyContext.Consumer>\n    )\n  }\n\nexport default Comp2;\n\n\n//App.js\nimport React, { useState } from 'react';\nimport MyContext from './components/myContext';\nimport CompA from './components/compA';\n\nconst App = () => {\n  const [ name ] = useState('Mukesh')\n  \n    return(\n      <div>\n        <MyContext.Provider\n          value={{name:name}}>\n          <CompA />\n        </MyContext.Provider>\n      </div>\n    )\n  }\n\nexport default App;\n`.trim();\n\n\nconst expensAction = `\n//forms/AddUserForm.js\nconst AddUserForm = props => {\n  const initialFormState = { id: null, name: \"\", username: \"\" };\n  const [user, setUser] = useState(initialFormState);\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setUser({ ...user, [name]: value });\n  };\n\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault();\n        if (!user.name || !user.username) return;\n        props.addUser(user);\n        setUser(initialFormState);\n      }}\n    >\n      <label>Name</label>\n      <input type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange} />\n      <label>Username</label>\n      <input type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\n      <button>Add new user</button>\n    </form>\n  );\n};\n\n\n//forms/EditUserForm.js\nconst EditUserForm = props => {\n  const [user, setUser] = useState(props.currentUser);\n\n  useEffect(() => { setUser(props.currentUser) },\n    [props]\n  );\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setUser({ ...user, [name]: value });\n  };\n\n  return (\n    <form onSubmit={e => { e.preventDefault(); props.updateUser(user.id, user) }} >\n      <label>Name</label>\n      <input type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange} />\n      <label>Username</label>\n      <input type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\n      <button>Update user</button>\n      <button onClick={() => props.setEditing(false)}>Cancel</button>\n    </form>\n  );\n};\n\n\n//tables/UserTable.js\nconst UserTable = props => (\n  <table>\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Username</th>\n        <th>Actions</th>\n      </tr>\n    </thead>\n    <tbody>\n      {props.users.length > 0 ? (\n        props.users.map(user => (\n          <tr key={user.id}>\n            <td>{user.name}</td>\n            <td>{user.username}</td>\n            <td>\n              <button onClick={() => props.editRow(user)}>Edit</button>\n              <button onClick={() => props.deleteUser(user.id)}>Delete</button>\n            </td>\n          </tr>\n        ))\n      ) : (\n        <tr>\n          <td colSpan={3}>No users</td>\n        </tr>\n      )}\n    </tbody>\n  </table>\n);\n\n\n//App.js\nimport UserTable from \"./tables/UserTable\";\nimport AddUserForm from \"./forms/AddUserForm\";\nimport EditUserForm from \"./forms/EditUserForm\";\n\nconst App = () => {\n  const usersData = [\n    { id: 1, name: \"AAA\", username: \"aiueo\" },\n    { id: 2, name: \"BBB\", username: \"kakikukeko\" },\n    { id: 3, name: \"CCC\", username: \"sasisuseso\" }\n  ];\n\n  const [users, setUsers] = useState(usersData);\n\n  const addUser = user => {\n    user.id = users.length + 1;\n    setUsers([...users, user]);\n  };\n\n  const deleteUser = id => {\n    setUsers(users.filter(user => user.id !== id));\n  };\n\n  const [editing, setEditing] = useState(false);\n  const initialFormState = { id: null, name: \"\", username: \"\" };\n  const [currentUser, setCurrentUser] = useState(initialFormState);\n\n  const editRow = user => {\n    setEditing(true);\n    setCurrentUser({ id: user.id, name: user.name, username: user.username });\n  };\n\n  const updateUser = (id, updateUser) => {\n    setEditing(false);\n    setUsers(users.map(user => (user.id === id ? updateUser : user)));\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>CRUD App with Hooks</h1>\n      <div className=\"flex-row\">\n        <div className=\"flex-large\">\n          {editing ? (\n            <div>\n              <h2>Eidt User</h2>\n              <EditUserForm\n                editing={editing}\n                setEditing={setEditing}\n                currentUser={currentUser}\n                updateUser={updateUser}\n              />\n            </div>\n          ) : (\n            <div>\n              <h2>Add User</h2>\n              <AddUserForm addUser={addUser} />\n            </div>\n          )}\n        </div>\n        <div className=\"flex-large\">\n          <h2>View users</h2>\n          <UserTable users={users} deleteUser={deleteUser} editRow={editRow} />\n        </div>\n      </div>\n    </div>\n  );\n};`.trim();\n\n\nconst curd = `\nclass App extends Component {\n  state = {\n    mockData: [],\n    text: \"\",\n    id: Math.random(1,100),\n    editItem: false\n  };\n  \n  handleChange = e => {\n    this.setState({text: e.target.value});\n  };\n  \n  handleAdd = e => {\n    e.preventDefault();\n    if (this.state.text.length === 0) return;\n\n    const newItem = {\n      id: this.state.id,\n      title: this.state.text\n    };\n    \n    const updatedItems = [...this.state.mockData].concat(newItem);\n\n    this.setState({\n      mockData: updatedItems,\n      text: \"\",\n      id: Math.random(1,100),\n      editItem: false\n    });\n  };\n  \n  clearList = () => {\n    this.setState({ mockData: [] });\n    };\n    \n  handleDelete = (id) => {\n      this.setState({ mockData: this.state.mockData.filter(item => item.id !== id) });\n    };\n    \n  handleEdit = id => {\n    const filteredItems = this.state.mockData.filter(item => item.id !== id);\n    const selectedItem = this.state.mockData.find(item => item.id === id);\n\n    this.setState({\n      mockData: filteredItems,\n      text: selectedItem.title,\n      editItem: true,\n      id: id\n    });\n  };\n  \n  render() {\n    return (\n      <div>\n         <form onSubmit={this.handleAdd}>\n          <div>\n            <input type=\"text\" value={this.state.text} onChange={this.handleChange} />\n          </div>\n          <button>{this.state.editItem ? \"edit item\" : \"add item\"}</button>\n        </form>\n            \n        <ul>\n        {this.state.mockData.map(item => {\n          return (\n            <div>\n              <h1>{item.title}</h1>\n            \n              <button onClick={() => this.handleEdit(item.id)}>edit</button>\n              <button onClick={() => this.handleDelete(item.id)}>delete</button>\n            </div>\n          );\n        })}\n\n        <button onClick={this.clearList}>clear list</button>\n        </ul>\n      </div>\n    );\n  }\n}`.trim();\n\n\nclass ContextMeth extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n            <h3>1. Input</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={curd2}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Curd</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={curd2}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. ReactCurd JsonPlaceholder</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={expensAction}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Curd</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={curd}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. Context API State</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={states}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(ContextMeth));\n"]},"metadata":{},"sourceType":"module"}