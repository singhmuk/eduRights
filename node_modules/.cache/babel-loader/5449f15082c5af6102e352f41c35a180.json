{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/textEditors.js\";\nimport React, { Component } from 'react';\nimport PrismCode from '../prismCode';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../styles.css';\nimport Sidebar from '../sidebar';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst code = `\nclass App extends Component {\n  state = {\n      input: '',\n      output: []\n    };\n\n  handleChange = (e) => { this.setState({ input: e.target.value }) }\n\n  appendInput = () => {\n    let output = this.state.output.concat(this.state.input);\n    this.setState({output})\n  }\n  \n  removeInput = () => {\n    let output = this.state.output.filter(items=>items.id !== items.id);\n    this.setState({output});\n  }\n\n  render() {\n    return ( \n      <>\n        <div>\n          <input type=\"text\" onChange={this.handleChange} value={this.state.input}/>\n          \n          <button onClick={this.appendInput} disabled={!this.state.input}>Append</button>\n          <button onClick={this.removeInput} disabled={this.state.output.length === 0}>Undo</button>\n        </div>\n        <div>   \n          {this.state.output.map((values) =>  (\n                 <text>{values} </text>\n             ))\n          }\n        </div>\n      </>\n    );\n  }\n}`.trim();\nconst codes = `\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(10);\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      setLoading(true);\n      const res = await axios.get('https://jsonplaceholder.typicode.com/posts');\n      setPosts(res.data);\n      setLoading(false);\n    };\n\n    fetchPosts();\n  }, []);\n\n  // Get current posts\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\n\n  // Change page\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return (\n    <div className='container mt-5'>\n      <h1 className='text-primary mb-3'>My Blog</h1>\n      <Posts posts={currentPosts} loading={loading} />\n      <Pagination\n        postsPerPage={postsPerPage}\n        totalPosts={posts.length}\n        paginate={paginate}\n      />\n    </div>\n  );\n};\n\nexport default App;\n\n\n//Posts.js\nconst Posts = ({ posts, loading }) => {\n  if (loading) {\n    return <h2>Loading...</h2>;\n  }\n\n  return (\n    <ul className='list-group mb-4'>\n      {posts.map(post => (\n        <li key={post.id} className='list-group-item'>\n          {post.title}\n        </li>\n      ))}\n    </ul>\n  );\n};\n\n\n//Pagination.js\nconst Pagination = ({ postsPerPage, totalPosts, paginate }) => {\n  const pageNumbers = [];\n\n  for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  return (\n    <nav>\n      <ul className='pagination'>\n        {pageNumbers.map(number => (\n          <li key={number} className='page-item'>\n            <a onClick={() => paginate(number)} href='!#' className='page-link'>\n              {number}\n            </a>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n`.trim();\nconst translations = `\nclass App extends Component {\n  state = {\n      input: '',\n      output: ''\n    };\n\n  handleChange = (e) => {\n    let userInput = e.target.value;\n    this.setState({ input: userInput });\n    \n    for (let names of this.props.translations.keys()) {\n      if(userInput === names) {\n        this.setState({ output: this.props.translations.get(userInput) });     \n      }\n    }\n    this.state.output = '';\n  }\n\n  render() {\n    return (\n      <>\n        <div>\n          <span>input:</span>\n          <input type=\"text\" onChange={this.handleChange} value={this.state.input}/>\n              \n          <span>output:</span>\n          <input type=\"text\" readOnly value={this.state.output}/>\n        </div>\n      </>\n    );\n  }\n}`.trim();\nconst indexs = `\nconst TRANSLATIONS = new Map([\n  ['ball', 'pelota'],\n  ['house', 'casa'],\n  ['dog', 'perro'],\n  ['dogs', 'perros'],\n  ['milk', 'leche'],\n  ['orange', 'naranja'],\n]);\n\nReactDOM.render(<App translations={TRANSLATIONS} />, document.getElementById('root'));`.trim();\nconst sortItems = `\nclass Filter extends Component {\n  handleChange = (e) => {\n      return (e) => {\n          e.preventDefault();\n          const { sorter } = this.props;\n          sorter(e.target.value);\n      };\n  }\n\n  render() {\n      const { sortedBy } = this.props;\n      const nameChecked = (sortedBy === \"name\");\n      return (\n          <div>\n              <input type=\"checkbox\" checked={nameChecked} onClick={this.handleChange('name')} value=\"name\" />\n              <label>Name</label>\n              <input type=\"checkbox\" checked={!nameChecked} onClick={this.handleChange('age')} value=\"age\" />\n              <label>Email</label>\n          </div>\n      );\n  }\n}\n\nclass RecordTable extends Component {\n      state={\n        people:[]\n      }\n\n      handleFetch = () => {\n        axios.get('https://jsonplaceholder.typicode.com/users')\n              .then(res => {\n                const people = res.data;\n                this.setState({ people })\n              })\n          }\n      \n      componentDidMount(){\n        this.handleFetch();\n      }\n      \n  render() {\n    console.log(this.state.people)\n      const { sortedBy } = this.props;\n      if (sortedBy === \"name\") {\n          this.state.people.sort(function (a, b) {\n              let personA = a.name.toLowerCase();\n              let personB = b.name.toLowerCase();\n              return (personA < personB) ? -1 : (personA > personB) ? 1 : 0;\n          });\n      } else {\n          this.state.people.sort(function (a, b) {\n              return new Date(b.dob) - new Date(a.dob);\n          });\n          this.state.people.reverse();\n      }\n\n  return (\n          <table>\n              <tr>\n                  <th>Name</th>\n                  <th>Email</th>\n              </tr>\n              \n              {this.state.people.map(person => (\n                  <div key={person.id}>\n                    <tr>\n                      <td>{person.name}</td> ---\n                      <td>{person.email}</td>\n                    </tr>\n                  </div>\n              ))}\n          </table>\n      );\n  }\n}\n\n\nclass App extends Component {\n  state = {\n      sortedBy: \"name\",\n  }\n\n  sort = (filter) => {\n    if (filter === \"name\") {\n      this.setState({ sortedBy: \"name\" });\n    } else {\n      this.setState({ sortedBy: \"age\" });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <center><h1>Birthday Records</h1></center>\n        <Filter sorter={this.sort} sortedBy={this.state.sortedBy}></Filter>\n        <RecordTable sortedBy={this.state.sortedBy}></RecordTable>\n      </div>\n    );\n  }\n}\n\n\nexport default App;`.trim();\n\nclass TextEditors extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, \"1. Text Editor\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: code,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, \"2. Pagination \"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: codes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, \"3. Translator.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: translations,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, \"index.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: indexs,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default withStyles(styles)(TextEditors);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/textEditors.js"],"names":["React","Component","PrismCode","Prism","Grid","Paper","withStyles","List","Sidebar","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","code","trim","codes","translations","indexs","sortItems","TextEditors","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PrismCode from '../prismCode';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../styles.css'\nimport Sidebar from '../sidebar';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst code = `\nclass App extends Component {\n  state = {\n      input: '',\n      output: []\n    };\n\n  handleChange = (e) => { this.setState({ input: e.target.value }) }\n\n  appendInput = () => {\n    let output = this.state.output.concat(this.state.input);\n    this.setState({output})\n  }\n  \n  removeInput = () => {\n    let output = this.state.output.filter(items=>items.id !== items.id);\n    this.setState({output});\n  }\n\n  render() {\n    return ( \n      <>\n        <div>\n          <input type=\"text\" onChange={this.handleChange} value={this.state.input}/>\n          \n          <button onClick={this.appendInput} disabled={!this.state.input}>Append</button>\n          <button onClick={this.removeInput} disabled={this.state.output.length === 0}>Undo</button>\n        </div>\n        <div>   \n          {this.state.output.map((values) =>  (\n                 <text>{values} </text>\n             ))\n          }\n        </div>\n      </>\n    );\n  }\n}`.trim();\n\nconst codes = `\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(10);\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      setLoading(true);\n      const res = await axios.get('https://jsonplaceholder.typicode.com/posts');\n      setPosts(res.data);\n      setLoading(false);\n    };\n\n    fetchPosts();\n  }, []);\n\n  // Get current posts\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\n\n  // Change page\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return (\n    <div className='container mt-5'>\n      <h1 className='text-primary mb-3'>My Blog</h1>\n      <Posts posts={currentPosts} loading={loading} />\n      <Pagination\n        postsPerPage={postsPerPage}\n        totalPosts={posts.length}\n        paginate={paginate}\n      />\n    </div>\n  );\n};\n\nexport default App;\n\n\n//Posts.js\nconst Posts = ({ posts, loading }) => {\n  if (loading) {\n    return <h2>Loading...</h2>;\n  }\n\n  return (\n    <ul className='list-group mb-4'>\n      {posts.map(post => (\n        <li key={post.id} className='list-group-item'>\n          {post.title}\n        </li>\n      ))}\n    </ul>\n  );\n};\n\n\n//Pagination.js\nconst Pagination = ({ postsPerPage, totalPosts, paginate }) => {\n  const pageNumbers = [];\n\n  for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  return (\n    <nav>\n      <ul className='pagination'>\n        {pageNumbers.map(number => (\n          <li key={number} className='page-item'>\n            <a onClick={() => paginate(number)} href='!#' className='page-link'>\n              {number}\n            </a>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n`.trim();\n\n\nconst translations = `\nclass App extends Component {\n  state = {\n      input: '',\n      output: ''\n    };\n\n  handleChange = (e) => {\n    let userInput = e.target.value;\n    this.setState({ input: userInput });\n    \n    for (let names of this.props.translations.keys()) {\n      if(userInput === names) {\n        this.setState({ output: this.props.translations.get(userInput) });     \n      }\n    }\n    this.state.output = '';\n  }\n\n  render() {\n    return (\n      <>\n        <div>\n          <span>input:</span>\n          <input type=\"text\" onChange={this.handleChange} value={this.state.input}/>\n              \n          <span>output:</span>\n          <input type=\"text\" readOnly value={this.state.output}/>\n        </div>\n      </>\n    );\n  }\n}`.trim();\n\n\nconst indexs = `\nconst TRANSLATIONS = new Map([\n  ['ball', 'pelota'],\n  ['house', 'casa'],\n  ['dog', 'perro'],\n  ['dogs', 'perros'],\n  ['milk', 'leche'],\n  ['orange', 'naranja'],\n]);\n\nReactDOM.render(<App translations={TRANSLATIONS} />, document.getElementById('root'));`.trim();\n\n\nconst sortItems = `\nclass Filter extends Component {\n  handleChange = (e) => {\n      return (e) => {\n          e.preventDefault();\n          const { sorter } = this.props;\n          sorter(e.target.value);\n      };\n  }\n\n  render() {\n      const { sortedBy } = this.props;\n      const nameChecked = (sortedBy === \"name\");\n      return (\n          <div>\n              <input type=\"checkbox\" checked={nameChecked} onClick={this.handleChange('name')} value=\"name\" />\n              <label>Name</label>\n              <input type=\"checkbox\" checked={!nameChecked} onClick={this.handleChange('age')} value=\"age\" />\n              <label>Email</label>\n          </div>\n      );\n  }\n}\n\nclass RecordTable extends Component {\n      state={\n        people:[]\n      }\n\n      handleFetch = () => {\n        axios.get('https://jsonplaceholder.typicode.com/users')\n              .then(res => {\n                const people = res.data;\n                this.setState({ people })\n              })\n          }\n      \n      componentDidMount(){\n        this.handleFetch();\n      }\n      \n  render() {\n    console.log(this.state.people)\n      const { sortedBy } = this.props;\n      if (sortedBy === \"name\") {\n          this.state.people.sort(function (a, b) {\n              let personA = a.name.toLowerCase();\n              let personB = b.name.toLowerCase();\n              return (personA < personB) ? -1 : (personA > personB) ? 1 : 0;\n          });\n      } else {\n          this.state.people.sort(function (a, b) {\n              return new Date(b.dob) - new Date(a.dob);\n          });\n          this.state.people.reverse();\n      }\n\n  return (\n          <table>\n              <tr>\n                  <th>Name</th>\n                  <th>Email</th>\n              </tr>\n              \n              {this.state.people.map(person => (\n                  <div key={person.id}>\n                    <tr>\n                      <td>{person.name}</td> ---\n                      <td>{person.email}</td>\n                    </tr>\n                  </div>\n              ))}\n          </table>\n      );\n  }\n}\n\n\nclass App extends Component {\n  state = {\n      sortedBy: \"name\",\n  }\n\n  sort = (filter) => {\n    if (filter === \"name\") {\n      this.setState({ sortedBy: \"name\" });\n    } else {\n      this.setState({ sortedBy: \"age\" });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <center><h1>Birthday Records</h1></center>\n        <Filter sorter={this.sort} sortedBy={this.state.sortedBy}></Filter>\n        <RecordTable sortedBy={this.state.sortedBy}></RecordTable>\n      </div>\n    );\n  }\n}\n\n\nexport default App;`.trim();\n\nclass TextEditors extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Text Editor</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={code}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Pagination </h3>\n              <div style={titles}>\n                <PrismCode\n                  code={codes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>3. Translator.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={translations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>index.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={indexs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              \n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(TextEditors));"]},"metadata":{},"sourceType":"module"}