{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/css/cssbasics.js\";\nimport React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport \"../ReactJs/styles.css\";\nimport Sidebar from \"./sidebar\";\nimport PrismCode from \"../ReactJs/prismCode\";\nimport Browser from \"../../assets/css1.PNG\";\nimport boxModels from \"../../assets/boxings.png\";\nconst titles = {\n  backgroundColor: \"#F0F8FF\",\n  padding: \"1px\",\n  fontSize: \"16px\"\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst flextFloat = `\n.container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 200px;\n}\n\n.item {\n  background-color: #eee;\n  padding: 20px;\n  text-align: center;\n  font-size: 30px;\n  margin: 10px;\n}\n\n\n//app.html\n<div class=\"container\">\n  <div class=\"item\">1</div>\n  <div class=\"item\">2</div>\n  <div class=\"item\">3</div>\n</div>\n`.trim();\nconst floatele = `\n* {\n  padding: 0;\n  margin: 0/ auto;\n  bottom: 0;\n  right: 0;\n}\n\n.img1, .img2, .img3, .img4{\n  width:30%;\n  max-width: 500px;\n  height:100px;\n  border: 2px solid red;\n  opacity: 0.5;\n}\n\n\ndiv{\n  outline: 2px solid red;\n  float:left/ none/ inherit;\n  clear: left / both;\n  display: flex/ grid/ block/ inline/ table;\n  flex-grow: 3;                                              \n  flex-shrink: 2;\n  flex-direction: row/ column/ row-reverse/ column-reverse; \n  flex-wrap: wrap/ rap-reverse;\n  flex-flow:row-reverse wrap;\n  justify-content: center/ space-between/ space-evenly/ space-around;\n  align-items: center/ flex-end/ stretch;\n  grid-template-columns: 2fr 5fr 2fr 1fr;                               \n  grid-template-rows: 1fr 3fr;\n  grid-auto-flow: 2fr 5fr;\n  grid-gap: 1rem;\n  grid-column: 1 / span 2;\n  grid-row: 2 / span 3;\n  background-color: blue;\n  position: static/ relative/ absolute/ inline/ fixed / sticky;\n  \n}\n`.trim();\nconst psudoele = `\n.link::before {\n  content: \"\\f067\";\n  font-family: FontAwesome;\n  margin-right: 5px;\n}\n\n//app.html\n<a href=\"#\" class=\"link\">Click me!</a>\n`.trim();\nconst pseudoclas = `\na:link {\n  color: red;\n \n}\n\n//visited link \na:visited {\n  color: green;\n}\n\n//mouse over link \na:hover {\n  color: hotpink;\n}\n\n//selected link \na:active {\n  color: blue;\n}\n`.trim();\nconst table_layout = `table-layout: auto|fixed|initial|inherit;`.trim();\nconst elements = `\ndiv, p - Selects all <div> elements and all <p> elements\ndiv p - Selects all <p> elements that are anywhere inside a <div> element\ndiv > p - Selects all <p> elements where the immediate parent is a <div> element\ndiv + p - Selects all <p> elements that are placed immediately after a <div> element\ndiv ~ p - Selects all <p> elements that are anywhere preceded by a <div> element\n\n.div, p{\n  outline:2px solid pink;\n  padding: 10px;\n  word-spacing: 20px;\n}\n`.trim();\nconst meaning = `\ncm - centimeters\nem - elements (i.e., relative to the font-size of the element; e.g., 2 em means 2 times the current font size)\nin - inches\nmm - millimeters\npc - picas (1 pc = 12 pt = 1/6th of an inch)\npt - points (1 pt = 1/72nd of an inch)\npx - pixels (1 px = 1/96th of an inch)\n\n.vh{\n  width: 20vw; \n  height: 30vh;\n  font-size: 100px;\n  font-size: 100pt;\n  font-size: 2.5em;\n  font-size: 100%;\n  font-size: 2pc;\n  font-size: 2cm;\n  font-size: 2mm; \n  font-size: 2in;\n}\n`.trim();\nconst inlinestyles = `\n//  display: block/ inline/ inline-block; \n\n.container {\n  text-align: center;\n}\n\n.box {\n  display: inline-block;\n  width: 100px;\n  margin: 10px;\n  background-color: #f2f2f2;\n}\n\n\n//app.html\n<div class=\"container\">\n  <div class=\"box\"></div>\n  <div class=\"box\"></div>\n  <div class=\"box\"></div>\n</div>\n  \n`.trim();\nconst relativestyles = `\n.static {\n  position: static/ relative/ fixed/ absolute/ sticky;\n}\n`.trim();\nconst backgroundImg = `\nbackground-image: url(\"bgdesert.jpg\");\nbackground-repeat: repeat-x/ no-repeat;\nbackground-position: right top;\nbackground-attachment: fixed / scroll;\nbackground: #ffffff url(\"img_tree.png\") no-repeat right top;\n\nborder-style: solid;\nborder-bottom-style: dotted;\nmax-width: 500px;\noutline-style: dotted;\noutline-width: thin;\noutline-color: red;\noutline-offset: 15px;\n`.trim();\nconst hiddenStyles = `\nh1.hidden {\n  display: none;\n  visibility: hidden;\n}\n`.trim();\nconst boxModel = `\npadding: 25px  50px   75px   100px;                                  //top   right  bottom left. \npadding: 25px 50px;                            //top/bottom padding 25px; right/left padding 50px.\n\ncolor: blue;\ntext-align: center / left / right / justify;\nvertical-align: baseline / text-top / text-bottom / sub / super;\ntext-decoration: none / overline / line-through / underline;\ntext-transform: uppercase / lowercase / capitalize;\ntext-indent: 50px;\nletter-spacing: 5px;\nline-height: 0.8;\nword-spacing: 10px;\nwhite-space: nowrap;\n\ntext-shadow: 2px 2px;\nfont-family: 'Montserrat';\nfont-style: normal;\nfont-weight: bold/ 900;\nfont-variant: small-caps;\nfont-size: 1.875em;\n\nz-index: -1 / 1 / 3;\n\noverflow: visible / hidden / scroll / auto;\noverflow-y: scroll; \n`.trim();\nconst supports = `\n@supports (display: grid) {\n\tdiv {\n\t\tdisplay: grid;\n\t}\n}\n`.trim();\nconst counters = `\nh1 {\n  counter-increment: category;\n}\n\nh1::before {\n  content: counter(category) \". \";\n}\n\n\n//app.html\n<body>\n  <h1>Header1</h1>\n  <h1>Header1</h1>\n  <h1>Header12</h1>\n  <h1>Header12</h1>\n</body>\n\n`.trim();\nconst nthchild = `\nul li:nth-child(2) {\n  color: red;                                   //Item 3\n}\n\n//nth-of-type()\nul li:nth-of-type(2) {\n  color: green;                                 //Not show color\n}\n\n//app.css\n<ul>\n  <li>Item 1</li>\n  <p>Item 2</p>\n  <li>Item 3</li>\n  <li>Item 4</li>\n</ul>\n`.trim();\nconst tweening = `\np {\n  animation-duration: 2s;\n  animation-name: slidethrough;\n}\n\n@keyframes slidethrough {\n  from {\n    margin-left: 100%;\n    width: 300%; \n  }\n\n  to {\n    margin-left: 0%;\n    width: 100%;\n  }\n}\n`.trim();\nconst sprites = `\n.sprites {\n  width: 200px;\n  background-image: url(\"abc.png\");\n  background-position: 0px -200px;  //second image start after 200px. initials 200px occupied by first image\n}\n`.trim();\nconst gridspace = `\n//display\n.container { display: grid | inline-grid; }\n\n      \n//grid-template-rows:\n.container {\n  grid-template-columns: 40px 50px auto;\n  grid-template-rows: 25% 100px auto ;\n}\n\n\n.container {\n  display: grid;\n  grid-template-columns: 50px 50px 50px 50px;\n  grid-template-rows: auto;\n  grid-template-areas:\n    \"header header header header\"\n    \"main main . sidebar\"\n    \"footer footer footer footer\";\n}\n`.trim();\nconst judtifyItems = `\n.container {\n  align-items: start | end | center | stretch;\n}\n`.trim();\nconst justifycontain = `\n.container {\n  justify-content: start | end | center | stretch | space-around | space-between | space-evenly;    \n}\n\n\n//\n.container {\n  grid-auto-flow: row | column | row dense | column dense;\n}\n`.trim();\nconst propertieschilds = `\n.item-a {\n  grid-column-start: 2;\n  grid-column-end: five;\n  grid-row-start: row1-start;\n  grid-row-end: 3;\n}\n\n//justify-self\n.item {\n  justify-self: start | end | center | stretch;\n}\n\n//align-self\n.item {\n  align-self: start | end | center | stretch;\n}\n`.trim();\nconst selectors = `\nChild selectors: ul > li\n\ntargets all list items that are direct children of unordered lists\n`.trim();\nconst horizontallycss = `\n<div class=\"container\">\n    <div class=\"element\">Center me!</div>\n</div>\n\n\n//css\n.container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n}\n\n.element {\n  width: 200px;\n  height: 200px;\n  background-color: red;\n  color: white;\n  text-align: center;\n  line-height: 200px;\n}\n`.trim();\nconst horizontallycss2 = `\n<div class=\"container\">\n    <div class=\"element\">Center me!</div>\n</div>\n\n\n//css\n.container {\n  position: relative;\n  height: 100vh;\n}\n\n.element {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 200px;\n  height: 200px;\n  background-color: red;\n  text-align: center;\n  line-height: 200px;\n}\n`.trim();\nconst horizontallycss3 = `\n<div class=\"container\">\n    <div class=\"element\">Center me!</div>\n</div>\n\n\n//css\n.container {\n  display: grid;\n  place-items: center;\n  height: 100vh;\n}\n\n.element {\n  width: 200px;\n  height: 200px;\n  background-color: red;\n  text-align: center;\n  line-height: 200px;\n}\n\n`.trim();\nconst mediaQres = `\n@media screen and (min-width: 768px) and (max-width: 1024px) {\n\n}\n`.trim();\nconst animations = `\n@keyframes my-animation {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n\n.element {\n  animation: my-animation 2s infinite;\n}`.trim();\nconst animations2 = `\n.element {\n  transition: background-color 1s ease-in-out;\n}\n\n.element:hover {\n  background-color: red;\n}`.trim();\nconst flexboxcss = `display: flex;`.trim();\nconst flexboxcss2 = `\ndisplay: flex;\nflex-direction: row; /* or column */`.trim();\nconst flexboxcss3 = `\n.item {\n  flex: 1;\n}`.trim();\nconst flexboxcss4 = `\ndisplay: flex;\njustify-content: center; /* or flex-start, flex-end, space-between, space-around */`.trim();\nconst flexboxcss5 = `\ndisplay: flex;\nalign-items: center; /* or flex-start, flex-end, baseline, stretch */`.trim();\nconst flexboxcss6 = `\nalign-self: flex-end; /* or flex-start, center, baseline, stretch */\n`.trim();\nconst responsivecss = `\n<img src=\"example-image.jpg\" alt=\"Example Image\" style=\"max-width: 100%; height: auto;\">\n`.trim();\nconst responsivecss2 = `\n<img srcset=\"example-image-480w.jpg 480w,\n             example-image-768w.jpg 768w,\n             example-image-1024w.jpg 1024w\"\n     sizes=\"(max-width: 768px) 100vw,\n            768px\"\n     src=\"example-image-768w.jpg\" alt=\"Example Image\">\n`.trim();\nconst boxShadow = `\n.box {\n  width: 200px;\n  height: 200px;\n  background-color: #eee;\n  box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.5);\n}\n`.trim();\n\nclass CssBasics extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }, \"1. How does CSS actually work (under the hood of browser)?\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    }, \"CSS is a style sheet language used for describing the presentation of web pages. It is used to style and layout HTML elements on a web page.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }, \"When a web page is loaded in a browser, the browser parses the HTML and CSS code to create the Document Object Model and the CSS Object Model (CSSOM) respectively. The DOM represents the structure of the web page, while the CSSOM represents the styles applied to the elements on the web page.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    }, \"After the DOM and CSSOM are created, the browser uses them to calculate the layout of the web page, a process known as the render tree. The render tree is a visual representation of the web page, showing how each element is positioned and styled relative to other elements.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572\n      },\n      __self: this\n    }, \"During the rendering process, the browser applies the CSS styles to the corresponding elements in the render tree. It does this by computing the computed style of each element, which is the final style that will be applied to the element. The computed style takes into account the styles specified in the style sheet, as well as any styles inherited from parent elements, and any styles applied by user-agent stylesheets\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    }, \"Once the computed styles have been determined, the browser uses them to render the web page on the user's screen. This involves drawing each element in its correct position and with the correct styles applied.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589\n      },\n      __self: this\n    }, \"Overall, the process of rendering a web page with CSS involves parsing the CSS code, computing the computed styles of each element, and using these styles to lay out and render the web page.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598\n      },\n      __self: this\n    }, \"2. There are a number of benefits of CSS, including\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601\n      },\n      __self: this\n    }, \"Faster Page Speed: \"), \"More code means slower page speed. And CSS enables us to use less code. CSS allows to use one CSS rule and apply it to all occurrences of a certain tag within an HTML document.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608\n      },\n      __self: this\n    }, \"Better User Experience: \"), \"It allows for user-friendly formatting. When buttons and text are in logical places and well organized, user experience improves.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614\n      },\n      __self: this\n    }, \"Responsive Design: \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618\n      },\n      __self: this\n    }, \"Improved Performance: \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622\n      },\n      __self: this\n    }, \"Easy Formatting Changes: \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626\n      },\n      __self: this\n    }, \"Compatibility Across Devices: \"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631\n      },\n      __self: this\n    }, \"3. Explain the basic rules of CSS Specificity\"), \"Specificity determines which rules will take precedence.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 633\n      },\n      __self: this\n    }), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 634\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 635\n      },\n      __self: this\n    }, \"CSS style applied by referencing external stylesheet has lowest precedence and is overridden by Internal and inline CSS.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640\n      },\n      __self: this\n    }, \"Internal CSS is overridden by inline CSS.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641\n      },\n      __self: this\n    }, \"Inline CSS has highest priority and overrides all other selectors.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645\n      },\n      __self: this\n    }, \"ID selectors have a higher specificity than attribute selectors.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 649\n      },\n      __self: this\n    }, \"A class selector beats any number of element selectors.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 650\n      },\n      __self: this\n    }, \"Universal selector (*) has no specificity.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 653\n      },\n      __self: this\n    }, \"4. How do you specify units in the CSS?. What are the different ways to do it?\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    }, \"What is VH/VW (viewport height/ viewport width) in CSS?\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659\n      },\n      __self: this\n    }, \"It\\u2019s a CSS unit used to measure the height and width in percentage w.r.t viewport. It is used mainly in responsive design techniques.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663\n      },\n      __self: this\n    }), \" VH = 1/100 of the height of the viewport.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665\n      },\n      __self: this\n    }, \"If the height of the browser is 1000px, 1vh = 10px. Similarly, if the width is 1000px, then 1vw = 10px.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: meaning,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680\n      },\n      __self: this\n    }, \"5. What is the difference between the font-size and line-height properties in CSS?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 686\n      },\n      __self: this\n    }, \"font-size : \"), \" Property sets the size of the font used to display text.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691\n      },\n      __self: this\n    }, \"line-height: \"), \"Property sets the height of a line of text. It determines the vertical space between two lines of text.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 696\n      },\n      __self: this\n    }), \"The difference between these two properties is that font-size affects the size of the text itself, while line-height affects the spacing between lines of text.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 702\n      },\n      __self: this\n    }, \"6. What are the different types of Selectors in CSS? or\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704\n      },\n      __self: this\n    }), \" How do you use CSS selectors to target specific elements in a web page?\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 707\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 708\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 709\n      },\n      __self: this\n    }, \"Universal Selector: \"), \"Selecting all elements on a page.\", \" \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 713\n      },\n      __self: this\n    }, \"Type selectors: \"), \"These selectors target elements based on their tag name. For example, p targets all paragraph elements on a page.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 717\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 718\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 719\n      },\n      __self: this\n    }, \"Class selectors: \"), \"These selectors target elements based on their class attribute.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 722\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 723\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724\n      },\n      __self: this\n    }, \"ID selectors: \"), \"These selectors target elements based on their ID attribute.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 727\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 728\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 729\n      },\n      __self: this\n    }, \"Attribute selectors: \"), \"These selectors target elements based on their attribute values. For example, [href] targets all elements with an href attribute.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 733\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735\n      },\n      __self: this\n    }, \"Descendant selectors: \"), \"These selectors target elements that are descendants of another element. For example, ul li targets all list items that are descendants of unordered lists.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 740\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 741\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 742\n      },\n      __self: this\n    }, \"Child selectors: \"), \"These selectors target elements that are direct children of another element.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 745\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 747\n      },\n      __self: this\n    }, \"Adjacent sibling selectors: \"), \"These selectors target elements that come immediately after another element. For example, h2 + p targets the first paragraph that comes immediately after an h2 element.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 752\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754\n      },\n      __self: this\n    }, \"General sibling selectors: \"), \"These selectors target elements that come after another element. For example, h2 ~ p targets all paragraphs that come after an h2 element.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 759\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: selectors,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 760\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 766\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 767\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 768\n      },\n      __self: this\n    }, \"7. What is the difference between ID and class selectors in CSS.\"), \"Both ID and class selectors are used to target specific elements on a web page, but they have some differences:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 773\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 774\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 775\n      },\n      __self: this\n    }, \"ID selectors start with the \\\"#\\\" symbol, followed by the ID name, while class selectors start with the \\\".\\\" symbol, followed by the class name.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 780\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 781\n      },\n      __self: this\n    }, \"An ID should be unique and used only once per page, while a class can be used multiple times on a page.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 785\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 786\n      },\n      __self: this\n    }, \"ID selectors have a higher specificity than class selectors.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 789\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 790\n      },\n      __self: this\n    }, \"ID selectors are best suited for targeting specific, unique elements on a page, while class selectors are more appropriate for targeting groups of elements with common styling.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 796\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 797\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 798\n      },\n      __self: this\n    }, \"8. Explain what elements will match each of the following CSS selectors\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 802\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: elements,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 803\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 809\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 810\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 811\n      },\n      __self: this\n    }, \"9. What are media queries, and how are they used in CSS.\"), \"Media queries are a feature in CSS that allow you to apply different styles to a web page depending on the size and capabilities of the device it is being viewed on. They allow web developers to create responsive designs that can adapt to different screen sizes and orientations.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 817\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 818\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: mediaQres,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 819\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 825\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 826\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 827\n      },\n      __self: this\n    }, \"10. What are the best practices for optimizing CSS performance?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 830\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 831\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 832\n      },\n      __self: this\n    }, \"Minimize HTTP requests: \"), \"Reduce the number of requests your web page makes by combining multiple CSS files into one.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 835\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 836\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 837\n      },\n      __self: this\n    }, \"Use external stylesheets: \"), \"Move your CSS to external files instead of using inline styles. This will make it easier to cache and reduce the file size of your HTML documents.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 841\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 842\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 843\n      },\n      __self: this\n    }, \"Use a CSS preprocessor: \"), \"Use a CSS preprocessor like Sass or Less to streamline your CSS and make it more maintainable.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 847\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 848\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 849\n      },\n      __self: this\n    }, \"Use CSS resets: \"), \"CSS resets can help ensure that your styles are consistent across different browsers.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 852\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 853\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 854\n      },\n      __self: this\n    }, \"Avoid using !important: \"), \" Using !important in your CSS can make it harder to maintain and override styles later on.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 857\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 858\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 859\n      },\n      __self: this\n    }, \"Minimize the use of floats: \"), \"Overuse of floats can cause performance issues, so try to use them sparingly.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 862\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 863\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 864\n      },\n      __self: this\n    }, \"Use media queries to optimize for different devices: \"), \"Use media queries to optimize your styles for different screen sizes and devices.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 868\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 870\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 871\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 872\n      },\n      __self: this\n    }, \"11. How do you use CSS to create animations and transitions\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 875\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 876\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 877\n      },\n      __self: this\n    }, \"Animations: \"), \"Animations in CSS can be created using the @keyframes rule, which defines the keyframes of the animation. This is followed by the animation property, which is used to apply the animation to an element.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 882\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: animations,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 883\n      },\n      __self: this\n    })), \"The @keyframes rule defines a rotation animation, which rotates an element 360 degrees.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 891\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 892\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 893\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 894\n      },\n      __self: this\n    }, \"Transitions: \"), \"Transitions in CSS can be created using the transition property. This property allows you to specify a transition effect for a property over a specified duration.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 898\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: animations2,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 899\n      },\n      __self: this\n    })), \"The transition property is used to apply a transition effect to the background-color property of an element with the class element. When the element is hovered over, the background-color property changes to red over a duration of 1 second.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 910\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 911\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 912\n      },\n      __self: this\n    }, \"12. What are the limitations of CSS?\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 913\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 914\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 915\n      },\n      __self: this\n    }, \"Browser Compatibility: \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 917\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 918\n      },\n      __self: this\n    }, \"Cross Browser issue: \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 920\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 921\n      },\n      __self: this\n    }, \"There is no parent selector: \"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 924\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 925\n      },\n      __self: this\n    }, \"13. How do you use CSS to create responsive designs.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 926\n      },\n      __self: this\n    }, \"CSS can be used to create responsive designs in several ways.\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 929\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 930\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 931\n      },\n      __self: this\n    }, \"Media queries: \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 933\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 934\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 935\n      },\n      __self: this\n    }, \"Fluid layouts: \"), \"A fluid layout is one that adjusts to the size of the viewport, instead of using fixed widths. This is achieved by using percentage-based widths instead of pixel-based widths\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 940\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 941\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 942\n      },\n      __self: this\n    }, \"Flexbox: \"), \"Flexbox is a CSS layout model that allows you to easily create flexible and responsive layouts. With flexbox, you can easily align elements, distribute space between them, and reorder them based on the viewport size.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 947\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 948\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 949\n      },\n      __self: this\n    }, \"Grid: \"), \"Allows you to create complex, responsive layouts with ease. With CSS grid, you can create rows and columns, and place elements in specific cells.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 954\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 955\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 956\n      },\n      __self: this\n    }, \"14. What are the differences between adaptive design and responsive design?\"), \"Both responsive and adaptive design attempt to optimize the user experience across different devices, adjusting for different viewport sizes, resolutions, usage contexts, control mechanisms, and so on.\", React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 964\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 965\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 966\n      },\n      __self: this\n    }, \"Property\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 967\n      },\n      __self: this\n    }, \"Adaptive Design\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 968\n      },\n      __self: this\n    }, \"Responsive Design\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 970\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 971\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 972\n      },\n      __self: this\n    }, \"Flexible vs. fixed layouts: \")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 974\n      },\n      __self: this\n    }, \"Uses fixed layouts that are designed for specific screen sizes and device types.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 978\n      },\n      __self: this\n    }, \"Responsive design uses fluid grids and flexible images to create a layout that adapts to different screen sizes.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 983\n      },\n      __self: this\n    }), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 984\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 985\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 986\n      },\n      __self: this\n    }, \"Breakpoints: \")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 988\n      },\n      __self: this\n    }, \"Adaptive design uses predefined layouts for specific screen sizes, and switches between them based on the device type.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 992\n      },\n      __self: this\n    }, \"Responsive design uses breakpoints to determine when the layout should change, based on the width of the screen.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 997\n      },\n      __self: this\n    }), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 998\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 999\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1000\n      },\n      __self: this\n    }, \"Complexity: \")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1002\n      },\n      __self: this\n    }, \"Adaptive design is often simpler to implement, as it involves designing specific layouts for specific devices.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1006\n      },\n      __self: this\n    }, \"Responsive design can be more complex than adaptive design, as it requires careful planning and testing to ensure that the layout works well across a range of devices.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1012\n      },\n      __self: this\n    }), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1013\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1014\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1015\n      },\n      __self: this\n    }, \"Speed: \")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1017\n      },\n      __self: this\n    }, \"Adaptive design can be faster than responsive design, as it only needs to load the layout that is designed for the specific device being used.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1022\n      },\n      __self: this\n    }, \"Responsive design may require more code and resources to load, as it has to handle a wider range of screen sizes and device types.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1029\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1030\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1031\n      },\n      __self: this\n    }, \"In summary, responsive design uses flexible layouts and adapts to different screen sizes using breakpoints, while adaptive design uses fixed layouts designed for specific screen sizes and device types. Responsive design can be more complex but provides more flexibility, while adaptive design can be simpler and faster, but provides less flexibility.\", \" \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1039\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1040\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1041\n      },\n      __self: this\n    }, \"15. How to determine if the browser supports a certain feature?\"), \"The \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1044\n      },\n      __self: this\n    }, \"@support\"), \" in CSS use to scan if the current browser has support for a certain feature.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1046\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: supports,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1047\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1053\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1054\n      },\n      __self: this\n    }, \"16. What is progressive rendering? How do you implement progressive rendering in the website?. What are the advantages of it?\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1059\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1060\n      },\n      __self: this\n    }, \"Techniques used to improve the performance of a webpage to render content for display as quickly as possible.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1064\n      },\n      __self: this\n    }, \"We can implement the progressive rendering of the page by loading the lazy loading of the images. We can use Intersection Observer API to lazy load the image. The API makes it simple to detect when an element the viewport and take an action when it does. Once the image enters the viewport, we will start loading the images.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1073\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1074\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1075\n      },\n      __self: this\n    }, \"The advantages of progressive rendering are: \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1076\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1077\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1078\n      },\n      __self: this\n    }, \"Improved perceived performance\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1079\n      },\n      __self: this\n    }, \"Better user experience\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1080\n      },\n      __self: this\n    }, \"Optimized for slower connections\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1082\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1083\n      },\n      __self: this\n    }, \"Overall, progressive rendering is a powerful technique for improving website performance and user experience, especially in situations where slow loading times are a concern.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1088\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1089\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1090\n      },\n      __self: this\n    }, \"17. What is the difference between inline, inline-block, and block?\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1094\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1095\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1096\n      },\n      __self: this\n    }, \"Block Element: \"), \"Always start on a new line. They will also take space for an entire row/ width.\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1098\n      },\n      __self: this\n    }, \" Ex. \"), \"div, p.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1100\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1101\n      },\n      __self: this\n    }, \"Inline Elements: \"), \"Don't start on a new line, they appear on the same line as the content and tags beside them.\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1103\n      },\n      __self: this\n    }, \"Ex. \"), \" span , strong, and img tags.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1105\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1106\n      },\n      __self: this\n    }, \"Inline Block Elements: \"), \"Inline block elements are elements that behave like inline elements in terms of how they flow within a line of text, but can also have a fixed width and height like block elements.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1112\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: inlinestyles,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1113\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1119\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1120\n      },\n      __self: this\n    }, \"By using inline block elements, you can create flexible, responsive layouts that flow like text but also have a fixed size and shape.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1125\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1126\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1127\n      },\n      __self: this\n    }, \"18. What's the difference between a relative, fixed, absolute and statically positioned element?\"), \"A positioned element is an element whose computed position property is either relative, absolute, fixed or static.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1133\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1134\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1135\n      },\n      __self: this\n    }, \"Static positioning -\"), \" It default position. the element will flow into the page as it normally would. The top, right, bottom, left and z-index properties do not apply.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1139\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1140\n      },\n      __self: this\n    }, \"Relative positioning -\"), \" The element's position is adjusted relative to itself, without changing layout.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1142\n      },\n      __self: this\n    }), \"The top, right, bottom, and left properties can be used to adjust the position of the element.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1146\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1147\n      },\n      __self: this\n    }, \"Absolute positioning -\"), \" The element is removed from the flow of the page and positioned at a specified position relative to its closest positioned ancestor if any, or otherwise relative to the initial containing block. Absolutely positioned boxes can have margins, and they do not collapse with any other margins. These elements do not affect the position of other elements.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1155\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1156\n      },\n      __self: this\n    }, \"Fixed positioning -\"), \" The element is removed from the flow of the page and positioned at a specified position relative to the viewport and doesn't move when scrolled.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1161\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: relativestyles,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1162\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1168\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1169\n      },\n      __self: this\n    }, \"19. How do you use CSS to create responsive images that adapt to different screen sizes\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1173\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1174\n      },\n      __self: this\n    }, \"To create responsive images that adapt to different screen sizes, you can use the CSS max-width property on the img tag.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1178\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: responsivecss,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1179\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1185\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1186\n      },\n      __self: this\n    }, \"Use the srcset attribute, which allows you to specify multiple versions of an image at different sizes and resolutions. The browser can then choose the appropriate image to download based on the device's pixel density and screen size.\", \" \"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1192\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: responsivecss2,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1193\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1199\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1201\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: backgroundImg,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1202\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1208\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1209\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1210\n      },\n      __self: this\n    }, \"20. What are the different ways to hide the element using CSS?\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1213\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1214\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1215\n      },\n      __self: this\n    }, \"display: none: \"), \"It\\u2019s not available for screen readers. The element will not exist in the DOM if \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1216\n      },\n      __self: this\n    }, \"display: none\"), \" \", \"is used.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1219\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1220\n      },\n      __self: this\n    }, \"visibility: hidden: \"), \"Will take up the space of the element. It will be available to screen reader users. The element will actually be present in the DOM, but not shown on the screen.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1225\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1226\n      },\n      __self: this\n    }, \"position: absolute: \"), \"Make it available outside the screen.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1230\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: hiddenStyles,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1231\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1237\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1238\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1239\n      },\n      __self: this\n    }, \"21. When does DOM reflow occur?\"), \"DOM reflow, also known as layout or re-rendering, occurs when there is a change to the structure or layout of a web page. Whenever there is a change to the DOM of a web page, the browser must recalculate the positions and sizes of all elements in the page to update the layout accordingly.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1245\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1246\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1247\n      },\n      __self: this\n    }, \"Reflow occurs when:\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1248\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1249\n      },\n      __self: this\n    }, \"Insert, remove or update an element in the DOM.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1250\n      },\n      __self: this\n    }, \"Modify content on the page, e.g. the text in an input box.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1253\n      },\n      __self: this\n    }, \"Changing the font size or style of text on the page.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1254\n      },\n      __self: this\n    }, \"Resizing the browser window.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1256\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1257\n      },\n      __self: this\n    }, \"22. Is there any reason you'd want to use translate() instead of absolute positioning.\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1261\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1262\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1263\n      },\n      __self: this\n    }, \"Performance: \"), \"translate() is a CSS transform that can be hardware accelerated by the browser, which means it can be faster and smoother than using absolute positioning for certain types of animations or transitions.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1268\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1269\n      },\n      __self: this\n    }, \"Maintain layout: \"), \" When you use absolute positioning, the element is removed from the normal document flow, which means other elements on the page may shift around to fill the space left by the positioned element. Using translate() allows the element to remain in its original position in the document flow, which can help maintain the layout of the page.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1276\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1277\n      },\n      __self: this\n    }, \"Responsive design: \"), \"translate() can be more responsive than absolute positioning when it comes to adapting to different screen sizes or device orientations. When you use translate(), the element's position is relative to its original position, which means it can adjust more easily to changes in screen size or orientation.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1285\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1286\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1287\n      },\n      __self: this\n    }, \"23. What do you have to do to automatically number the heading values of sections and categories?\"), \"To automatically number the heading values of sections and categories in a web page, you can use CSS counters.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1293\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1294\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: counters,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1295\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1301\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1302\n      },\n      __self: this\n    }, \"24. How is the nth-child() different from nth of type selectors?\"), \"Both are pseudo-classes. Both used to select elements based on their position within a parent element. However, they differ in the way they count the child elements and the type of element they select.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1309\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1310\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1311\n      },\n      __self: this\n    }, \"nth-child(): \"), \"This selector selects the nth child element of a parent, regardless of its type. It counts all child elements, including text nodes and other non-element nodes.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1316\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1317\n      },\n      __self: this\n    }, \"nth-of-type(): \"), \"This selector selects the nth child element of a parent, based on its element type. It counts only elements of the same type, ignoring any text nodes or other non-element nodes.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1323\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: nthchild,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1324\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1330\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1331\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1332\n      },\n      __self: this\n    }, \"25. What is the box model in CSS, and how does it work.\"), \"The box model is a core concept in CSS that describes how elements are laid out on a web page. Every HTML element on a page is represented as a rectangular box, which consists of four parts:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1336\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1337\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1338\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1339\n      },\n      __self: this\n    }, \"Content: \"), \"This is the actual content of the element, such as text or images.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1342\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1343\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1344\n      },\n      __self: this\n    }, \"Padding: \"), \"This is the space between the content and the edge of the element. Padding can be added to any or all of the four sides of the content box.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1348\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1349\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1350\n      },\n      __self: this\n    }, \"Border: \"), \"This is a line that surrounds the padding and the content of the element. Borders can be styled with different colors, widths, and styles.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1354\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1355\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1356\n      },\n      __self: this\n    }, \"Margin: \"), \"This is the space between the border of the element and the next element on the page. Margins can be added to any or all of the four sides of the border box.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1360\n      },\n      __self: this\n    })), React.createElement(\"img\", {\n      src: boxModels,\n      alt: \"\",\n      className: \"responsive\",\n      style: {\n        width: \"400px\",\n        height: \"200px\",\n        float: \"right\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1362\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1368\n      },\n      __self: this\n    }), \"The CSS box model is a rectangular layout paradigm for HTML elements that consists of the following:\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1371\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1372\n      },\n      __self: this\n    }, \"The box model determines the size and position of each element on the page by adding up the width and height of the content, padding, and border, and then adding the margin to the outside of the box. The total size of the element is known as the \\\"outer box\\\" or \\\"box dimensions\\\".\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1380\n      },\n      __self: this\n    }), \"The border is the layer of the CSS box model that sits between margin and padding. By default, the border does not have any width.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1384\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1385\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: boxModel,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1386\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1392\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1393\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1394\n      },\n      __self: this\n    }, \"26. What is the box-shadow property in CSS, and how can it be used to create visual effects on elements?\"), \"The box-shadow property in CSS allows you to add a shadow effect to an element's box, creating a visual depth and separation from the rest of the page. It takes several values, including:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1401\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1402\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1403\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1404\n      },\n      __self: this\n    }, \"h-shadow: \"), \"The horizontal offset of the shadow from the element\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1407\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1408\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1409\n      },\n      __self: this\n    }, \"v-shadow: \"), \"The vertical offset of the shadow from the element\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1412\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1413\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1414\n      },\n      __self: this\n    }, \"blur: \"), \"The amount of blurring to apply to the shadow\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1417\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1418\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1419\n      },\n      __self: this\n    }, \"spread: \"), \"The amount of the shadow to spread outside of the element\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1422\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1423\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1424\n      },\n      __self: this\n    }, \"color: \"), \"The color of the shadow\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1426\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1428\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: boxShadow,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1429\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1435\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1436\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1437\n      },\n      __self: this\n    }, \"27. How do you center an element horizontally and vertically in CSS?\"), \"There are multiple ways to center an element horizontally and vertically in CSS, depending on the layout and requirements of your page.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1444\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1445\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1446\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1447\n      },\n      __self: this\n    }, \"Using Flexbox: \"), \"To center an element horizontally and vertically using Flexbox, set the parent container to display: flex, and use the align-items and justify-content properties to center the child element.\", \" \"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1453\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: horizontallycss,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1454\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1460\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1461\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1462\n      },\n      __self: this\n    }, \"Using absolute positioning: \"), \"To center an element using absolute positioning, set the parent container to position: relative, and the child element to position: absolute. Then, use the top, bottom, left, and right properties to center the child element.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1468\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: horizontallycss2,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1469\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1475\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1477\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1478\n      },\n      __self: this\n    }, \"Using grid: \"), \"Set the parent container to display: grid, and use the justify-items and align-items properties to center the child element.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1482\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: horizontallycss3,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1483\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1489\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1491\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1492\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1493\n      },\n      __self: this\n    }, \"28. CSS Flexbox or Grid specs?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1494\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1495\n      },\n      __self: this\n    }, \"Flexbox is a way to align items into container.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1496\n      },\n      __self: this\n    }, \"Flexbox layout model designed to provide a more efficient and flexible way to arrange items within a container.\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1500\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1501\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1502\n      },\n      __self: this\n    }, \"main-axis: \"), \"Horrizontal\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1504\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1505\n      },\n      __self: this\n    }, \"cross-axis: \"), \"Vertical\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1508\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1509\n      },\n      __self: this\n    }, \"Flexbox is a 1-D layouts while Grid is 2-D layouts.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1511\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1512\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1513\n      },\n      __self: this\n    }, \"29. Grid\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1514\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1515\n      },\n      __self: this\n    }, \"CSS Grid is a powerful layout system that allows for the creation of complex and flexible grid-based layouts on the web. It is a two-dimensional layout system, meaning it works in both rows and columns.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1522\n      },\n      __self: this\n    }), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1523\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1524\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1525\n      },\n      __self: this\n    }, \"Properties for the Parent (Grid Container):\")), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1527\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1528\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1529\n      },\n      __self: this\n    }, \"Display: \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1531\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1532\n      },\n      __self: this\n    }, \"Grid-template-rows: \"), \"Defines the columns and rows of the grid with a space-separated list of values.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1535\n      },\n      __self: this\n    }, \"Grid lines are automatically assigned positive numbers from these assignments.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1539\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1540\n      },\n      __self: this\n    }, \"grid-template-areas: \")))), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1544\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: gridspace,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1545\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1551\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1552\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1553\n      },\n      __self: this\n    }, \"30. Justify-items\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1554\n      },\n      __self: this\n    }, \"align-items: \"), \"Aligns grid items along the column. This value applies to all grid items inside the container.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1556\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1557\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1558\n      },\n      __self: this\n    }, \"stretch: \"), \"fills the whole height of the cell (this is the default).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1562\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1563\n      },\n      __self: this\n    }, \"baseline: \"), \"align items along text baseline.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1566\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: judtifyItems,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1567\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1573\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1574\n      },\n      __self: this\n    }, \"31. Justify-content\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1575\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: justifycontain,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1576\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1582\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1583\n      },\n      __self: this\n    }, \"32. Properties for the Children (Grid Items)\"), \"Determines a grid item\\u2019s location within the grid by referring to specific grid lines. grid-column-start/grid-row-start is the line where the item begins, and grid-column-end/grid-row-end is the line where the item ends.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1588\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1589\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1590\n      },\n      __self: this\n    }, \"justify-self: \"), \"Aligns a grid item inside a cell along the inline (row) axis (as opposed to align-self which aligns along the block (column) axis). This value applies to a grid item inside a single cell.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1594\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1595\n      },\n      __self: this\n    }, \"align-self: \"), \"Aligns a grid item inside a cell along the block (column) axis (as opposed to justify-self which aligns along the inline (row) axis). This value applies to the content inside a single grid item.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1599\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: propertieschilds,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1600\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1606\n      },\n      __self: this\n    }, \"33. How do you use flexbox to create flexible layouts in CSS?\"), \"Flexbox is a powerful layout tool in CSS that allows you to create flexible and responsive layouts.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1611\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1612\n      },\n      __self: this\n    }, \"Set the parent element's display property to \\\"flex\\\"\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1613\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: flexboxcss,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1614\n      },\n      __self: this\n    })), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1620\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1621\n      },\n      __self: this\n    }, \"Set the flex direction to row or column:\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1622\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: flexboxcss2,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1623\n      },\n      __self: this\n    })), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1629\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1630\n      },\n      __self: this\n    }, \"Use the flex property to set the size of each item:\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1631\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: flexboxcss3,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1632\n      },\n      __self: this\n    })), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1638\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1639\n      },\n      __self: this\n    }, \"Use the justify-content property to align the items horizontally:\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1643\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: flexboxcss4,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1644\n      },\n      __self: this\n    })), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1650\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1651\n      },\n      __self: this\n    }, \"Use the align-items property to align the items vertically:\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1654\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: flexboxcss5,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1655\n      },\n      __self: this\n    })), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1661\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1662\n      },\n      __self: this\n    }, \"Use the align-self property to align a single item within the container:\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1666\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: flexboxcss6,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1667\n      },\n      __self: this\n    }))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1674\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1675\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1676\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: flextFloat,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1677\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1683\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1684\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1685\n      },\n      __self: this\n    }, \"34. Describe floats and how they work\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1686\n      },\n      __self: this\n    }, React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1687\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1688\n      },\n      __self: this\n    }, \"Float is a CSS property that allows elements to be positioned to the left or right of their containing block, allowing text and inline elements to flow around it. Float is commonly used for creating multi-column layouts or positioning images and other media on a webpage.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1696\n      },\n      __self: this\n    }, \"float has 3 properties: \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1697\n      },\n      __self: this\n    }, \"Left, Right, None\"), \".\"))), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1701\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1702\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1703\n      },\n      __self: this\n    }, \"flex-direction: \"), \"By default flex-direction is row.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1705\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1706\n      },\n      __self: this\n    }, \"space-between: \"), \"Not apply on start and end.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1708\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1709\n      },\n      __self: this\n    }, \"space-evenly: \"), \"Apply on start and end also.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1711\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1712\n      },\n      __self: this\n    }, \"space-around: \"), \"Like padding on box.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1714\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1715\n      },\n      __self: this\n    }, \"flex-grow: \"), \"Adjeced box on the base of screen\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1717\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1718\n      },\n      __self: this\n    }, \"fraction (fr): \"), \"Divide on the basis of screen-size\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1721\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1722\n      },\n      __self: this\n    }, \"How to Use Float in CSS\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1723\n      },\n      __self: this\n    }), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1724\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1725\n      },\n      __self: this\n    }, \"float: left/ none/ inherit;\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1727\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: floatele,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1728\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1734\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1735\n      },\n      __self: this\n    }, \"35. Purpose of clearing floats in CSS\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1736\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1737\n      },\n      __self: this\n    }, \"Clearing floats is a technique used in CSS to prevent elements from wrapping around floated elements. When an element is floated, it is taken out of the normal document flow, which can cause issues with layout and positioning if other elements on the page are affected by the float.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1744\n      },\n      __self: this\n    }, \"To prevent this from happening, we can use the clear property to specify that an element should not be allowed to float next to a floated element. The clear property can be set to left, right, both, or none, depending on which side of the floated element you want to clear.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1752\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1753\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1754\n      },\n      __self: this\n    }, \"36. Explain the usage of \\\"table-layout\\\" property\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1755\n      },\n      __self: this\n    }, \"The table-layout property defines the algorithm used to layout table cells, rows, and columns.\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1759\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1760\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1761\n      },\n      __self: this\n    }, \"auto -\"), \" Browsers use an automatic table layout algorithm. The column width is set by the widest unbreakable content in the cells.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1765\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1766\n      },\n      __self: this\n    }, \"fixed -\"), \"Fixed layout based on the first row. And the rest of the table follows. If no widths are present on the first row, the column widths are divided equally across the table.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1771\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1772\n      },\n      __self: this\n    }, \"initial -\"), \" Sets this property to its default value.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1774\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1775\n      },\n      __self: this\n    }, \"inherit -\"), \" Property from its parent element.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1778\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: table_layout,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1779\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1785\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1786\n      },\n      __self: this\n    }, \"37. Describe pseudo-elements and discuss what they are used for.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1789\n      },\n      __self: this\n    }, \"In CSS, pseudo-elements are used to style a specific part of an element, such as the first letter, the first line, or the content before or after the element. Pseudo-elements are preceded by a double colon (::).\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1795\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1796\n      },\n      __self: this\n    }, \"Here are some commonly used pseudo-elements:\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1797\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1798\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1799\n      },\n      __self: this\n    }, \"::before :\"), \" Allows you to insert content before the content of an element.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1802\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1803\n      },\n      __self: this\n    }, \"::after :\"), \"Allows you to insert content after the content of an element.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1806\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1807\n      },\n      __self: this\n    }, \"::first-letter :\"), \"Targets the first letter of text content within an element.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1810\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1811\n      },\n      __self: this\n    }, \"::first-line :\"), \"Targets the first line of text content within an element.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1814\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1815\n      },\n      __self: this\n    }, \"::selection :\"), \"Targets the portion of an element's content that has been selected by the user.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1819\n      },\n      __self: this\n    }), \"Pseudo-elements are useful for adding decorative elements to your design, such as icons or borders, without adding extra markup to your HTML. They can also be used to style specific parts of text, such as the first letter or line of a paragraph\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1824\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1825\n      },\n      __self: this\n    }, \"example of how to use the ::before pseudo-element to add an icon before a link.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1829\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: psudoele,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1830\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1836\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1837\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1838\n      },\n      __self: this\n    }, \"There are currently seven pseudo-elements in CSS. They are:\", \" \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1841\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1842\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1843\n      },\n      __self: this\n    }, \"::after\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1844\n      },\n      __self: this\n    }, \"::before\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1845\n      },\n      __self: this\n    }, \"::first-letter\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1846\n      },\n      __self: this\n    }, \"::first-line\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1847\n      },\n      __self: this\n    }, \"::marker\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1848\n      },\n      __self: this\n    }, \"::placeholder\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1849\n      },\n      __self: this\n    }, \"::selection\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1851\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1852\n      },\n      __self: this\n    }, \"Pseudo-classes: \"), \"A pseudo-class is used to define a special state of an element.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1854\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1855\n      },\n      __self: this\n    }, \"Style an element when a user mouses over it.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1856\n      },\n      __self: this\n    }, \"Style visited and unvisited links differently.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1857\n      },\n      __self: this\n    }, \"Style an element when it gets focus.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1859\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1860\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: pseudoclas,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1861\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1867\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1868\n      },\n      __self: this\n    }, \"38.LESS: (Leaner Stylesheets)\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1869\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1870\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1871\n      },\n      __self: this\n    }, \"Variables: \"), \"Preprocessors allow the use of variables in CSS, which can make it easier to maintain and update the code. For example, you can define a color variable, and then use that variable throughout your CSS instead of having to repeat the color code each time.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1877\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1878\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1879\n      },\n      __self: this\n    }, \"Nesting: \"), \"Preprocessors allow you to nest CSS selectors, which can make your code easier to read and understand. This can be especially useful when dealing with complex selectors, such as those for nested menus or forms.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1884\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1885\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1886\n      },\n      __self: this\n    }, \"Mixins: \"), \"Preprocessors allow the creation of reusable code snippets called mixins. This can make it easier to write and maintain code, as you can define a mixin once and then reuse it throughout your project.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1891\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1892\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1893\n      },\n      __self: this\n    }, \"Functions: \"), \"Preprocessors allow the use of functions in CSS, which can be used to perform calculations or manipulate values.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1897\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1898\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1899\n      },\n      __self: this\n    }, \"Modularization: \"), \"Preprocessors allow you to split your CSS into modular files, making it easier to organize and maintain your code.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1904\n      },\n      __self: this\n    }), \"Overall, using a CSS preprocessor can save time, improve code organization and maintainability, and make it easier to create complex stylesheets.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1908\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1909\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1910\n      },\n      __self: this\n    }, \"39. What is the importance of CSS Sprites?\"), \"CSS sprites are used for combining multiple images in a single larger image. They are commonly used for representing icons that are used in the user interfaces. The main advantages of using sprites are:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1915\n      },\n      __self: this\n    }), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1916\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1917\n      },\n      __self: this\n    }, \"It reduces the number of HTTP requests to get data of multiple images.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1921\n      },\n      __self: this\n    }, \"It helps in downloading assets in advance that help display icons/ images upon hover/ other pseudo-states.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1925\n      },\n      __self: this\n    }, \"It use as a background image only.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1927\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1928\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: sprites,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1929\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1935\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1936\n      },\n      __self: this\n    }, \"40. What do you understand by tweening in CSS?\"), \"Tweening is the process of filling the gaps between the key sequences, i.e between the keyframes that are already created. Keyframes are those frames that represent start and end point of animation action.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1941\n      },\n      __self: this\n    }), \" we use properties like transforms - matrix, translate, scale, rotate etc.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1943\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1944\n      },\n      __self: this\n    }), \"In the below example, we are generating intermediate frames of paragraph elements to slide through from the start to the right edge of the browser.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1948\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1949\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1950\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: tweening,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1951\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(CssBasics);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/css/cssbasics.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Browser","boxModels","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","flextFloat","trim","floatele","psudoele","pseudoclas","table_layout","elements","meaning","inlinestyles","relativestyles","backgroundImg","hiddenStyles","boxModel","supports","counters","nthchild","tweening","sprites","gridspace","judtifyItems","justifycontain","propertieschilds","selectors","horizontallycss","horizontallycss2","horizontallycss3","mediaQres","animations","animations2","flexboxcss","flexboxcss2","flexboxcss3","flexboxcss4","flexboxcss5","flexboxcss6","responsivecss","responsivecss2","boxShadow","CssBasics","componentDidMount","setTimeout","highlightAll","render","classes","props","width","height","float"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../ReactJs/styles.css\";\nimport Sidebar from \"./sidebar\";\nimport PrismCode from \"../ReactJs/prismCode\";\n\nimport Browser from \"../../assets/css1.PNG\";\nimport boxModels from \"../../assets/boxings.png\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst flextFloat = `\n.container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 200px;\n}\n\n.item {\n  background-color: #eee;\n  padding: 20px;\n  text-align: center;\n  font-size: 30px;\n  margin: 10px;\n}\n\n\n//app.html\n<div class=\"container\">\n  <div class=\"item\">1</div>\n  <div class=\"item\">2</div>\n  <div class=\"item\">3</div>\n</div>\n`.trim();\n\nconst floatele = `\n* {\n  padding: 0;\n  margin: 0/ auto;\n  bottom: 0;\n  right: 0;\n}\n\n.img1, .img2, .img3, .img4{\n  width:30%;\n  max-width: 500px;\n  height:100px;\n  border: 2px solid red;\n  opacity: 0.5;\n}\n\n\ndiv{\n  outline: 2px solid red;\n  float:left/ none/ inherit;\n  clear: left / both;\n  display: flex/ grid/ block/ inline/ table;\n  flex-grow: 3;                                              \n  flex-shrink: 2;\n  flex-direction: row/ column/ row-reverse/ column-reverse; \n  flex-wrap: wrap/ rap-reverse;\n  flex-flow:row-reverse wrap;\n  justify-content: center/ space-between/ space-evenly/ space-around;\n  align-items: center/ flex-end/ stretch;\n  grid-template-columns: 2fr 5fr 2fr 1fr;                               \n  grid-template-rows: 1fr 3fr;\n  grid-auto-flow: 2fr 5fr;\n  grid-gap: 1rem;\n  grid-column: 1 / span 2;\n  grid-row: 2 / span 3;\n  background-color: blue;\n  position: static/ relative/ absolute/ inline/ fixed / sticky;\n  \n}\n`.trim();\n\nconst psudoele = `\n.link::before {\n  content: \"\\f067\";\n  font-family: FontAwesome;\n  margin-right: 5px;\n}\n\n//app.html\n<a href=\"#\" class=\"link\">Click me!</a>\n`.trim();\n\nconst pseudoclas = `\na:link {\n  color: red;\n \n}\n\n//visited link \na:visited {\n  color: green;\n}\n\n//mouse over link \na:hover {\n  color: hotpink;\n}\n\n//selected link \na:active {\n  color: blue;\n}\n`.trim();\n\nconst table_layout = `table-layout: auto|fixed|initial|inherit;`.trim();\n\nconst elements = `\ndiv, p - Selects all <div> elements and all <p> elements\ndiv p - Selects all <p> elements that are anywhere inside a <div> element\ndiv > p - Selects all <p> elements where the immediate parent is a <div> element\ndiv + p - Selects all <p> elements that are placed immediately after a <div> element\ndiv ~ p - Selects all <p> elements that are anywhere preceded by a <div> element\n\n.div, p{\n  outline:2px solid pink;\n  padding: 10px;\n  word-spacing: 20px;\n}\n`.trim();\n\nconst meaning = `\ncm - centimeters\nem - elements (i.e., relative to the font-size of the element; e.g., 2 em means 2 times the current font size)\nin - inches\nmm - millimeters\npc - picas (1 pc = 12 pt = 1/6th of an inch)\npt - points (1 pt = 1/72nd of an inch)\npx - pixels (1 px = 1/96th of an inch)\n\n.vh{\n  width: 20vw; \n  height: 30vh;\n  font-size: 100px;\n  font-size: 100pt;\n  font-size: 2.5em;\n  font-size: 100%;\n  font-size: 2pc;\n  font-size: 2cm;\n  font-size: 2mm; \n  font-size: 2in;\n}\n`.trim();\n\nconst inlinestyles = `\n//  display: block/ inline/ inline-block; \n\n.container {\n  text-align: center;\n}\n\n.box {\n  display: inline-block;\n  width: 100px;\n  margin: 10px;\n  background-color: #f2f2f2;\n}\n\n\n//app.html\n<div class=\"container\">\n  <div class=\"box\"></div>\n  <div class=\"box\"></div>\n  <div class=\"box\"></div>\n</div>\n  \n`.trim();\n\nconst relativestyles = `\n.static {\n  position: static/ relative/ fixed/ absolute/ sticky;\n}\n`.trim();\n\nconst backgroundImg = `\nbackground-image: url(\"bgdesert.jpg\");\nbackground-repeat: repeat-x/ no-repeat;\nbackground-position: right top;\nbackground-attachment: fixed / scroll;\nbackground: #ffffff url(\"img_tree.png\") no-repeat right top;\n\nborder-style: solid;\nborder-bottom-style: dotted;\nmax-width: 500px;\noutline-style: dotted;\noutline-width: thin;\noutline-color: red;\noutline-offset: 15px;\n`.trim();\n\nconst hiddenStyles = `\nh1.hidden {\n  display: none;\n  visibility: hidden;\n}\n`.trim();\n\nconst boxModel = `\npadding: 25px  50px   75px   100px;                                  //top   right  bottom left. \npadding: 25px 50px;                            //top/bottom padding 25px; right/left padding 50px.\n\ncolor: blue;\ntext-align: center / left / right / justify;\nvertical-align: baseline / text-top / text-bottom / sub / super;\ntext-decoration: none / overline / line-through / underline;\ntext-transform: uppercase / lowercase / capitalize;\ntext-indent: 50px;\nletter-spacing: 5px;\nline-height: 0.8;\nword-spacing: 10px;\nwhite-space: nowrap;\n\ntext-shadow: 2px 2px;\nfont-family: 'Montserrat';\nfont-style: normal;\nfont-weight: bold/ 900;\nfont-variant: small-caps;\nfont-size: 1.875em;\n\nz-index: -1 / 1 / 3;\n\noverflow: visible / hidden / scroll / auto;\noverflow-y: scroll; \n`.trim();\n\nconst supports = `\n@supports (display: grid) {\n\tdiv {\n\t\tdisplay: grid;\n\t}\n}\n`.trim();\n\nconst counters = `\nh1 {\n  counter-increment: category;\n}\n\nh1::before {\n  content: counter(category) \". \";\n}\n\n\n//app.html\n<body>\n  <h1>Header1</h1>\n  <h1>Header1</h1>\n  <h1>Header12</h1>\n  <h1>Header12</h1>\n</body>\n\n`.trim();\n\nconst nthchild = `\nul li:nth-child(2) {\n  color: red;                                   //Item 3\n}\n\n//nth-of-type()\nul li:nth-of-type(2) {\n  color: green;                                 //Not show color\n}\n\n//app.css\n<ul>\n  <li>Item 1</li>\n  <p>Item 2</p>\n  <li>Item 3</li>\n  <li>Item 4</li>\n</ul>\n`.trim();\n\nconst tweening = `\np {\n  animation-duration: 2s;\n  animation-name: slidethrough;\n}\n\n@keyframes slidethrough {\n  from {\n    margin-left: 100%;\n    width: 300%; \n  }\n\n  to {\n    margin-left: 0%;\n    width: 100%;\n  }\n}\n`.trim();\n\nconst sprites = `\n.sprites {\n  width: 200px;\n  background-image: url(\"abc.png\");\n  background-position: 0px -200px;  //second image start after 200px. initials 200px occupied by first image\n}\n`.trim();\n\nconst gridspace = `\n//display\n.container { display: grid | inline-grid; }\n\n      \n//grid-template-rows:\n.container {\n  grid-template-columns: 40px 50px auto;\n  grid-template-rows: 25% 100px auto ;\n}\n\n\n.container {\n  display: grid;\n  grid-template-columns: 50px 50px 50px 50px;\n  grid-template-rows: auto;\n  grid-template-areas:\n    \"header header header header\"\n    \"main main . sidebar\"\n    \"footer footer footer footer\";\n}\n`.trim();\n\nconst judtifyItems = `\n.container {\n  align-items: start | end | center | stretch;\n}\n`.trim();\n\nconst justifycontain = `\n.container {\n  justify-content: start | end | center | stretch | space-around | space-between | space-evenly;    \n}\n\n\n//\n.container {\n  grid-auto-flow: row | column | row dense | column dense;\n}\n`.trim();\n\nconst propertieschilds = `\n.item-a {\n  grid-column-start: 2;\n  grid-column-end: five;\n  grid-row-start: row1-start;\n  grid-row-end: 3;\n}\n\n//justify-self\n.item {\n  justify-self: start | end | center | stretch;\n}\n\n//align-self\n.item {\n  align-self: start | end | center | stretch;\n}\n`.trim();\n\nconst selectors = `\nChild selectors: ul > li\n\ntargets all list items that are direct children of unordered lists\n`.trim();\n\nconst horizontallycss = `\n<div class=\"container\">\n    <div class=\"element\">Center me!</div>\n</div>\n\n\n//css\n.container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n}\n\n.element {\n  width: 200px;\n  height: 200px;\n  background-color: red;\n  color: white;\n  text-align: center;\n  line-height: 200px;\n}\n`.trim();\n\nconst horizontallycss2 = `\n<div class=\"container\">\n    <div class=\"element\">Center me!</div>\n</div>\n\n\n//css\n.container {\n  position: relative;\n  height: 100vh;\n}\n\n.element {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 200px;\n  height: 200px;\n  background-color: red;\n  text-align: center;\n  line-height: 200px;\n}\n`.trim();\n\nconst horizontallycss3 = `\n<div class=\"container\">\n    <div class=\"element\">Center me!</div>\n</div>\n\n\n//css\n.container {\n  display: grid;\n  place-items: center;\n  height: 100vh;\n}\n\n.element {\n  width: 200px;\n  height: 200px;\n  background-color: red;\n  text-align: center;\n  line-height: 200px;\n}\n\n`.trim();\n\nconst mediaQres = `\n@media screen and (min-width: 768px) and (max-width: 1024px) {\n\n}\n`.trim();\n\nconst animations = `\n@keyframes my-animation {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n\n.element {\n  animation: my-animation 2s infinite;\n}`.trim();\n\nconst animations2 = `\n.element {\n  transition: background-color 1s ease-in-out;\n}\n\n.element:hover {\n  background-color: red;\n}`.trim();\n\nconst flexboxcss = `display: flex;`.trim();\n\nconst flexboxcss2 = `\ndisplay: flex;\nflex-direction: row; /* or column */`.trim();\n\nconst flexboxcss3 = `\n.item {\n  flex: 1;\n}`.trim();\n\nconst flexboxcss4 = `\ndisplay: flex;\njustify-content: center; /* or flex-start, flex-end, space-between, space-around */`.trim();\n\nconst flexboxcss5 = `\ndisplay: flex;\nalign-items: center; /* or flex-start, flex-end, baseline, stretch */`.trim();\n\nconst flexboxcss6 = `\nalign-self: flex-end; /* or flex-start, center, baseline, stretch */\n`.trim();\n\nconst responsivecss = `\n<img src=\"example-image.jpg\" alt=\"Example Image\" style=\"max-width: 100%; height: auto;\">\n`.trim();\n\nconst responsivecss2 = `\n<img srcset=\"example-image-480w.jpg 480w,\n             example-image-768w.jpg 768w,\n             example-image-1024w.jpg 1024w\"\n     sizes=\"(max-width: 768px) 100vw,\n            768px\"\n     src=\"example-image-768w.jpg\" alt=\"Example Image\">\n`.trim();\n\nconst boxShadow = `\n.box {\n  width: 200px;\n  height: 200px;\n  background-color: #eee;\n  box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.5);\n}\n`.trim();\n\nclass CssBasics extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>\n                1. How does CSS actually work (under the hood of browser)?\n              </h3>\n              <ol>\n                <li>\n                  CSS is a style sheet language used for describing the\n                  presentation of web pages. It is used to style and layout HTML\n                  elements on a web page.\n                </li>\n                <br />\n                <li>\n                  When a web page is loaded in a browser, the browser parses the\n                  HTML and CSS code to create the Document Object Model and the\n                  CSS Object Model (CSSOM) respectively. The DOM represents the\n                  structure of the web page, while the CSSOM represents the\n                  styles applied to the elements on the web page.\n                </li>\n                <br />\n                <li>\n                  After the DOM and CSSOM are created, the browser uses them to\n                  calculate the layout of the web page, a process known as the\n                  render tree. The render tree is a visual representation of the\n                  web page, showing how each element is positioned and styled\n                  relative to other elements.\n                </li>\n                <br />\n                <li>\n                  During the rendering process, the browser applies the CSS\n                  styles to the corresponding elements in the render tree. It\n                  does this by computing the computed style of each element,\n                  which is the final style that will be applied to the element.\n                  The computed style takes into account the styles specified in\n                  the style sheet, as well as any styles inherited from parent\n                  elements, and any styles applied by user-agent stylesheets\n                </li>\n                <br />\n                <li>\n                  Once the computed styles have been determined, the browser\n                  uses them to render the web page on the user's screen. This\n                  involves drawing each element in its correct position and with\n                  the correct styles applied.\n                </li>\n                <br />\n                <li>\n                  Overall, the process of rendering a web page with CSS involves\n                  parsing the CSS code, computing the computed styles of each\n                  element, and using these styles to lay out and render the web\n                  page.\n                </li>\n              </ol>\n              <br />\n              <br />\n              <h3>2. There are a number of benefits of CSS, including</h3>\n              <ol>\n                <li>\n                  <b>Faster Page Speed: </b>More code means slower page speed.\n                  And CSS enables us to use less code. CSS allows to use one CSS\n                  rule and apply it to all occurrences of a certain tag within\n                  an HTML document.\n                </li>\n                <br />\n                <li>\n                  <b>Better User Experience: </b>It allows for user-friendly\n                  formatting. When buttons and text are in logical places and\n                  well organized, user experience improves.\n                </li>\n                <br />\n                <li>\n                  <b>Responsive Design: </b>\n                </li>\n                <br />\n                <li>\n                  <b>Improved Performance: </b>\n                </li>\n                <br />\n                <li>\n                  <b>Easy Formatting Changes: </b>\n                </li>\n                <br />\n                <li>\n                  <b>Compatibility Across Devices: </b>\n                </li>\n              </ol>\n              <br />\n              <br />\n              <h3>3. Explain the basic rules of CSS Specificity</h3>\n              Specificity determines which rules will take precedence.\n              <br />\n              <ol>\n                <li>\n                  CSS style applied by referencing external stylesheet has\n                  lowest precedence and is overridden by Internal and inline\n                  CSS.\n                </li>\n                <li>Internal CSS is overridden by inline CSS.</li>\n                <li>\n                  Inline CSS has highest priority and overrides all other\n                  selectors.\n                </li>\n                <li>\n                  ID selectors have a higher specificity than attribute\n                  selectors.\n                </li>\n                <li>A class selector beats any number of element selectors.</li>\n                <li>Universal selector (*) has no specificity.</li>\n              </ol>\n              <br />\n              <h3>\n                4. How do you specify units in the CSS?. What are the different\n                ways to do it?\n              </h3>\n              <b>What is VH/VW (viewport height/ viewport width) in CSS?</b>\n              <ol>\n                <li>\n                  It’s a CSS unit used to measure the height and width in\n                  percentage w.r.t viewport. It is used mainly in responsive\n                  design techniques.\n                  <br /> VH = 1/100 of the height of the viewport.\n                </li>\n                <li>\n                  If the height of the browser is 1000px, 1vh = 10px. Similarly,\n                  if the width is 1000px, then 1vw = 10px.\n                </li>\n              </ol>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={meaning}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>\n                5. What is the difference between the font-size and line-height\n                properties in CSS?\n              </h3>\n              <ul>\n                <li>\n                  <b>font-size : </b> Property sets the size of the font used to\n                  display text.\n                </li>\n                <br />\n                <li>\n                  <b>line-height: </b>Property sets the height of a line of\n                  text. It determines the vertical space between two lines of\n                  text.\n                </li>\n              </ul>\n              <br />\n              The difference between these two properties is that font-size\n              affects the size of the text itself, while line-height affects the\n              spacing between lines of text.\n              <br />\n              <br />\n              <h3>\n                6. What are the different types of Selectors in CSS? or\n                <br /> How do you use CSS selectors to target specific elements\n                in a web page?\n              </h3>\n              <ol>\n                <li>\n                  <b>Universal Selector: </b>Selecting all elements on a page.{\" \"}\n                </li>\n                <br />\n                <li>\n                  <b>Type selectors: </b>These selectors target elements based\n                  on their tag name. For example, p targets all paragraph\n                  elements on a page.\n                </li>\n                <br />\n                <li>\n                  <b>Class selectors: </b>These selectors target elements based\n                  on their class attribute.\n                </li>\n                <br />\n                <li>\n                  <b>ID selectors: </b>These selectors target elements based on\n                  their ID attribute.\n                </li>\n                <br />\n                <li>\n                  <b>Attribute selectors: </b>These selectors target elements\n                  based on their attribute values. For example, [href] targets\n                  all elements with an href attribute.\n                </li>\n                <br />\n                <li>\n                  <b>Descendant selectors: </b>These selectors target elements\n                  that are descendants of another element. For example, ul li\n                  targets all list items that are descendants of unordered\n                  lists.\n                </li>\n                <br />\n                <li>\n                  <b>Child selectors: </b>These selectors target elements that\n                  are direct children of another element.\n                </li>\n                <br />\n                <li>\n                  <b>Adjacent sibling selectors: </b>These selectors target\n                  elements that come immediately after another element. For\n                  example, h2 + p targets the first paragraph that comes\n                  immediately after an h2 element.\n                </li>\n                <br />\n                <li>\n                  <b>General sibling selectors: </b>These selectors target\n                  elements that come after another element. For example, h2 ~ p\n                  targets all paragraphs that come after an h2 element.\n                </li>\n              </ol>\n              <div style={titles}>\n                <PrismCode\n                  code={selectors}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>\n                7. What is the difference between ID and class selectors in CSS.\n              </h3>\n              Both ID and class selectors are used to target specific elements\n              on a web page, but they have some differences:\n              <br />\n              <ul>\n                <li>\n                  ID selectors start with the \"#\" symbol, followed by the ID\n                  name, while class selectors start with the \".\" symbol,\n                  followed by the class name.\n                </li>\n                <br />\n                <li>\n                  An ID should be unique and used only once per page, while a\n                  class can be used multiple times on a page.\n                </li>\n                <br />\n                <li>\n                  ID selectors have a higher specificity than class selectors.\n                </li>\n                <br />\n                <li>\n                  ID selectors are best suited for targeting specific, unique\n                  elements on a page, while class selectors are more appropriate\n                  for targeting groups of elements with common styling.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>\n                8. Explain what elements will match each of the following CSS\n                selectors\n              </h3>\n              <div style={titles}>\n                <PrismCode\n                  code={elements}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>9. What are media queries, and how are they used in CSS.</h3>\n              Media queries are a feature in CSS that allow you to apply\n              different styles to a web page depending on the size and\n              capabilities of the device it is being viewed on. They allow web\n              developers to create responsive designs that can adapt to\n              different screen sizes and orientations.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={mediaQres}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>\n                10. What are the best practices for optimizing CSS performance?\n              </h3>\n              <ul>\n                <li>\n                  <b>Minimize HTTP requests: </b>Reduce the number of requests\n                  your web page makes by combining multiple CSS files into one.\n                </li>\n                <br />\n                <li>\n                  <b>Use external stylesheets: </b>Move your CSS to external\n                  files instead of using inline styles. This will make it easier\n                  to cache and reduce the file size of your HTML documents.\n                </li>\n                <br />\n                <li>\n                  <b>Use a CSS preprocessor: </b>Use a CSS preprocessor like\n                  Sass or Less to streamline your CSS and make it more\n                  maintainable.\n                </li>\n                <br />\n                <li>\n                  <b>Use CSS resets: </b>CSS resets can help ensure that your\n                  styles are consistent across different browsers.\n                </li>\n                <br />\n                <li>\n                  <b>Avoid using !important: </b> Using !important in your CSS\n                  can make it harder to maintain and override styles later on.\n                </li>\n                <br />\n                <li>\n                  <b>Minimize the use of floats: </b>Overuse of floats can cause\n                  performance issues, so try to use them sparingly.\n                </li>\n                <br />\n                <li>\n                  <b>Use media queries to optimize for different devices: </b>\n                  Use media queries to optimize your styles for different screen\n                  sizes and devices.\n                </li>\n                <br />\n              </ul>\n              <br />\n              <br />\n              <h3>\n                11. How do you use CSS to create animations and transitions\n              </h3>\n              <ul>\n                <li>\n                  <b>Animations: </b>Animations in CSS can be created using the\n                  @keyframes rule, which defines the keyframes of the animation.\n                  This is followed by the animation property, which is used to\n                  apply the animation to an element.\n                </li>\n                <div style={titles}>\n                  <PrismCode\n                    code={animations}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n                The @keyframes rule defines a rotation animation, which rotates\n                an element 360 degrees.\n                <br />\n                <br />\n                <li>\n                  <b>Transitions: </b>Transitions in CSS can be created using\n                  the transition property. This property allows you to specify a\n                  transition effect for a property over a specified duration.\n                </li>\n                <div style={titles}>\n                  <PrismCode\n                    code={animations2}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n                The transition property is used to apply a transition effect to\n                the background-color property of an element with the class\n                element. When the element is hovered over, the background-color\n                property changes to red over a duration of 1 second.\n              </ul>\n              <br />\n              <br />\n              <h3>12. What are the limitations of CSS?</h3>\n              <ol>\n                <li>\n                  <b>Browser Compatibility: </b>\n                </li>\n                <li>\n                  <b>Cross Browser issue: </b>\n                </li>\n                <li>\n                  <b>There is no parent selector: </b>\n                </li>\n              </ol>\n              <br />\n              <h3>13. How do you use CSS to create responsive designs.</h3>\n              <p>\n                CSS can be used to create responsive designs in several ways.\n              </p>\n              <ol>\n                <li>\n                  <b>Media queries: </b>\n                </li>\n                <br />\n                <li>\n                  <b>Fluid layouts: </b>A fluid layout is one that adjusts to\n                  the size of the viewport, instead of using fixed widths. This\n                  is achieved by using percentage-based widths instead of\n                  pixel-based widths\n                </li>\n                <br />\n                <li>\n                  <b>Flexbox: </b>Flexbox is a CSS layout model that allows you\n                  to easily create flexible and responsive layouts. With\n                  flexbox, you can easily align elements, distribute space\n                  between them, and reorder them based on the viewport size.\n                </li>\n                <br />\n                <li>\n                  <b>Grid: </b>Allows you to create complex, responsive layouts\n                  with ease. With CSS grid, you can create rows and columns, and\n                  place elements in specific cells.\n                </li>\n              </ol>\n              <br />\n              <br />\n              <h3>\n                14. What are the differences between adaptive design and\n                responsive design?\n              </h3>\n              Both responsive and adaptive design attempt to optimize the user\n              experience across different devices, adjusting for different\n              viewport sizes, resolutions, usage contexts, control mechanisms,\n              and so on.\n              <table>\n                <tr>\n                  <th>Property</th>\n                  <th>Adaptive Design</th>\n                  <th>Responsive Design</th>\n                </tr>\n                <tr>\n                  <td>\n                    <b>Flexible vs. fixed layouts: </b>\n                  </td>\n                  <td>\n                    Uses fixed layouts that are designed for specific screen\n                    sizes and device types.\n                  </td>\n                  <td>\n                    Responsive design uses fluid grids and flexible images to\n                    create a layout that adapts to different screen sizes.\n                  </td>\n                </tr>\n                <br />\n                <tr>\n                  <td>\n                    <b>Breakpoints: </b>\n                  </td>\n                  <td>\n                    Adaptive design uses predefined layouts for specific screen\n                    sizes, and switches between them based on the device type.\n                  </td>\n                  <td>\n                    Responsive design uses breakpoints to determine when the\n                    layout should change, based on the width of the screen.\n                  </td>\n                </tr>\n                <br />\n                <tr>\n                  <td>\n                    <b>Complexity: </b>\n                  </td>\n                  <td>\n                    Adaptive design is often simpler to implement, as it\n                    involves designing specific layouts for specific devices.\n                  </td>\n                  <td>\n                    Responsive design can be more complex than adaptive design,\n                    as it requires careful planning and testing to ensure that\n                    the layout works well across a range of devices.\n                  </td>\n                </tr>\n                <br />\n                <tr>\n                  <td>\n                    <b>Speed: </b>\n                  </td>\n                  <td>\n                    Adaptive design can be faster than responsive design, as it\n                    only needs to load the layout that is designed for the\n                    specific device being used.\n                  </td>\n                  <td>\n                    Responsive design may require more code and resources to\n                    load, as it has to handle a wider range of screen sizes and\n                    device types.\n                  </td>\n                </tr>\n              </table>\n              <br />\n              <br />\n              <i>\n                In summary, responsive design uses flexible layouts and adapts\n                to different screen sizes using breakpoints, while adaptive\n                design uses fixed layouts designed for specific screen sizes and\n                device types. Responsive design can be more complex but provides\n                more flexibility, while adaptive design can be simpler and\n                faster, but provides less flexibility.{\" \"}\n              </i>\n              <br />\n              <br />\n              <h3>\n                15. How to determine if the browser supports a certain feature?\n              </h3>\n              The <b>@support</b> in CSS use to scan if the current browser has\n              support for a certain feature.\n              <div style={titles}>\n                <PrismCode\n                  code={supports}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                16. What is progressive rendering? How do you implement\n                progressive rendering in the website?. What are the advantages\n                of it?\n              </h3>\n              <ol>\n                <li>\n                  Techniques used to improve the performance of a webpage to\n                  render content for display as quickly as possible.\n                </li>\n                <li>\n                  We can implement the progressive rendering of the page by\n                  loading the lazy loading of the images. We can use\n                  Intersection Observer API to lazy load the image. The API\n                  makes it simple to detect when an element the viewport and\n                  take an action when it does. Once the image enters the\n                  viewport, we will start loading the images.\n                </li>\n              </ol>\n              <br />\n              <br />\n              <b>The advantages of progressive rendering are: </b>\n              <br />\n              <ul>\n                <li>Improved perceived performance</li>\n                <li>Better user experience</li>\n                <li>Optimized for slower connections</li>\n              </ul>\n              <br />\n              <i>\n                Overall, progressive rendering is a powerful technique for\n                improving website performance and user experience, especially in\n                situations where slow loading times are a concern.\n              </i>\n              <br />\n              <br />\n              <h3>\n                17. What is the difference between inline, inline-block, and\n                block?\n              </h3>\n              <ol>\n                <li>\n                  <b>Block Element: </b>Always start on a new line. They will\n                  also take space for an entire row/ width.\n                  <b> Ex. </b>div, p.\n                </li>\n                <li>\n                  <b>Inline Elements: </b>Don't start on a new line, they appear\n                  on the same line as the content and tags beside them.{\" \"}\n                  <b>Ex. </b> span , strong, and img tags.\n                </li>\n                <li>\n                  <b>Inline Block Elements: </b>Inline block elements are\n                  elements that behave like inline elements in terms of how they\n                  flow within a line of text, but can also have a fixed width\n                  and height like block elements.\n                </li>\n              </ol>\n              <div style={titles}>\n                <PrismCode\n                  code={inlinestyles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>\n                By using inline block elements, you can create flexible,\n                responsive layouts that flow like text but also have a fixed\n                size and shape.\n              </i>\n              <br />\n              <br />\n              <h3>\n                18. What's the difference between a relative, fixed, absolute\n                and statically positioned element?\n              </h3>\n              A positioned element is an element whose computed position\n              property is either relative, absolute, fixed or static.\n              <ol>\n                <li>\n                  <b>Static positioning -</b> It default position. the element\n                  will flow into the page as it normally would. The top, right,\n                  bottom, left and z-index properties do not apply.\n                </li>\n                <li>\n                  <b>Relative positioning -</b> The element's position is\n                  adjusted relative to itself, without changing layout.\n                  <br />\n                  The top, right, bottom, and left properties can be used to\n                  adjust the position of the element.\n                </li>\n                <li>\n                  <b>Absolute positioning -</b> The element is removed from the\n                  flow of the page and positioned at a specified position\n                  relative to its closest positioned ancestor if any, or\n                  otherwise relative to the initial containing block. Absolutely\n                  positioned boxes can have margins, and they do not collapse\n                  with any other margins. These elements do not affect the\n                  position of other elements.\n                </li>\n                <li>\n                  <b>Fixed positioning -</b> The element is removed from the\n                  flow of the page and positioned at a specified position\n                  relative to the viewport and doesn't move when scrolled.\n                </li>\n              </ol>\n              <div style={titles}>\n                <PrismCode\n                  code={relativestyles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                19. How do you use CSS to create responsive images that adapt to\n                different screen sizes\n              </h3>\n              <ul>\n                <li>\n                  To create responsive images that adapt to different screen\n                  sizes, you can use the CSS max-width property on the img tag.\n                </li>\n                <div style={titles}>\n                  <PrismCode\n                    code={responsivecss}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n                <br />\n                <li>\n                  Use the srcset attribute, which allows you to specify multiple\n                  versions of an image at different sizes and resolutions. The\n                  browser can then choose the appropriate image to download\n                  based on the device's pixel density and screen size.{\" \"}\n                </li>\n                <div style={titles}>\n                  <PrismCode\n                    code={responsivecss2}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n                <br />\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={backgroundImg}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>\n                20. What are the different ways to hide the element using CSS?\n              </h3>\n              <ol>\n                <li>\n                  <b>display: none: </b>It’s not available for screen readers.\n                  The element will not exist in the DOM if <b>display: none</b>{\" \"}\n                  is used.\n                </li>\n                <li>\n                  <b>visibility: hidden: </b>Will take up the space of the\n                  element. It will be available to screen reader users. The\n                  element will actually be present in the DOM, but not shown on\n                  the screen.\n                </li>\n                <li>\n                  <b>position: absolute: </b>Make it available outside the\n                  screen.\n                </li>\n              </ol>\n              <div style={titles}>\n                <PrismCode\n                  code={hiddenStyles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>21. When does DOM reflow occur?</h3>\n              DOM reflow, also known as layout or re-rendering, occurs when\n              there is a change to the structure or layout of a web page.\n              Whenever there is a change to the DOM of a web page, the browser\n              must recalculate the positions and sizes of all elements in the\n              page to update the layout accordingly.\n              <br />\n              <br />\n              <b>Reflow occurs when:</b>\n              <ol>\n                <li>Insert, remove or update an element in the DOM.</li>\n                <li>\n                  Modify content on the page, e.g. the text in an input box.\n                </li>\n                <li>Changing the font size or style of text on the page.</li>\n                <li>Resizing the browser window.</li>\n              </ol>\n              <br />\n              <h3>\n                22. Is there any reason you'd want to use translate() instead of\n                absolute positioning.\n              </h3>\n              <ol>\n                <li>\n                  <b>Performance: </b>translate() is a CSS transform that can be\n                  hardware accelerated by the browser, which means it can be\n                  faster and smoother than using absolute positioning for\n                  certain types of animations or transitions.\n                </li>\n                <li>\n                  <b>Maintain layout: </b> When you use absolute positioning,\n                  the element is removed from the normal document flow, which\n                  means other elements on the page may shift around to fill the\n                  space left by the positioned element. Using translate() allows\n                  the element to remain in its original position in the document\n                  flow, which can help maintain the layout of the page.\n                </li>\n                <li>\n                  <b>Responsive design: </b>translate() can be more responsive\n                  than absolute positioning when it comes to adapting to\n                  different screen sizes or device orientations. When you use\n                  translate(), the element's position is relative to its\n                  original position, which means it can adjust more easily to\n                  changes in screen size or orientation.\n                </li>\n              </ol>\n              <br />\n              <br />\n              <h3>\n                23. What do you have to do to automatically number the heading\n                values of sections and categories?\n              </h3>\n              To automatically number the heading values of sections and\n              categories in a web page, you can use CSS counters.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={counters}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                24. How is the nth-child() different from nth of type selectors?\n              </h3>\n              Both are pseudo-classes. Both used to select elements based on\n              their position within a parent element. However, they differ in\n              the way they count the child elements and the type of element they\n              select.\n              <ol>\n                <li>\n                  <b>nth-child(): </b>\n                  This selector selects the nth child element of a parent,\n                  regardless of its type. It counts all child elements,\n                  including text nodes and other non-element nodes.\n                </li>\n                <li>\n                  <b>nth-of-type(): </b>\n                  This selector selects the nth child element of a parent, based\n                  on its element type. It counts only elements of the same type,\n                  ignoring any text nodes or other non-element nodes.\n                </li>\n              </ol>\n              <div style={titles}>\n                <PrismCode\n                  code={nthchild}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>25. What is the box model in CSS, and how does it work.</h3>\n              The box model is a core concept in CSS that describes how elements\n              are laid out on a web page. Every HTML element on a page is\n              represented as a rectangular box, which consists of four parts:\n              <br />\n              <ul>\n                <li>\n                  <b>Content: </b>This is the actual content of the element,\n                  such as text or images.\n                </li>\n                <br />\n                <li>\n                  <b>Padding: </b>This is the space between the content and the\n                  edge of the element. Padding can be added to any or all of the\n                  four sides of the content box.\n                </li>\n                <br />\n                <li>\n                  <b>Border: </b>This is a line that surrounds the padding and\n                  the content of the element. Borders can be styled with\n                  different colors, widths, and styles.\n                </li>\n                <br />\n                <li>\n                  <b>Margin: </b>This is the space between the border of the\n                  element and the next element on the page. Margins can be added\n                  to any or all of the four sides of the border box.\n                </li>\n                <br />\n              </ul>\n              <img\n                src={boxModels}\n                alt=\"\"\n                className=\"responsive\"\n                style={{ width: \"400px\", height: \"200px\", float: \"right\" }}\n              />\n              <br />\n              The CSS box model is a rectangular layout paradigm for HTML\n              elements that consists of the following:\n              <ol>\n                <li>\n                  The box model determines the size and position of each element\n                  on the page by adding up the width and height of the content,\n                  padding, and border, and then adding the margin to the outside\n                  of the box. The total size of the element is known as the\n                  \"outer box\" or \"box dimensions\".\n                </li>\n              </ol>\n              <br />\n              The border is the layer of the CSS box model that sits between\n              margin and padding. By default, the border does not have any\n              width.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={boxModel}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>\n                26. What is the box-shadow property in CSS, and how can it be\n                used to create visual effects on elements?\n              </h3>\n              The box-shadow property in CSS allows you to add a shadow effect\n              to an element's box, creating a visual depth and separation from\n              the rest of the page. It takes several values, including:\n              <br />\n              <ul>\n                <li>\n                  <b>h-shadow: </b>The horizontal offset of the shadow from the\n                  element\n                </li>\n                <br />\n                <li>\n                  <b>v-shadow: </b>The vertical offset of the shadow from the\n                  element\n                </li>\n                <br />\n                <li>\n                  <b>blur: </b>The amount of blurring to apply to the shadow\n                </li>\n\n                <br />\n                <li>\n                  <b>spread: </b>The amount of the shadow to spread outside of\n                  the element\n                </li>\n                <br />\n                <li>\n                  <b>color: </b>The color of the shadow\n                </li>\n                <br />\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={boxShadow}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>\n                27. How do you center an element horizontally and vertically in\n                CSS?\n              </h3>\n              There are multiple ways to center an element horizontally and\n              vertically in CSS, depending on the layout and requirements of\n              your page.\n              <br />\n              <ul>\n                <li>\n                  <b>Using Flexbox: </b>To center an element horizontally and\n                  vertically using Flexbox, set the parent container to display:\n                  flex, and use the align-items and justify-content properties\n                  to center the child element.{\" \"}\n                </li>\n\n                <div style={titles}>\n                  <PrismCode\n                    code={horizontallycss}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n                <br />\n                <li>\n                  <b>Using absolute positioning: </b>To center an element using\n                  absolute positioning, set the parent container to position:\n                  relative, and the child element to position: absolute. Then,\n                  use the top, bottom, left, and right properties to center the\n                  child element.\n                </li>\n                <div style={titles}>\n                  <PrismCode\n                    code={horizontallycss2}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n                <br />\n\n                <li>\n                  <b>Using grid: </b>Set the parent container to display: grid,\n                  and use the justify-items and align-items properties to center\n                  the child element.\n                </li>\n                <div style={titles}>\n                  <PrismCode\n                    code={horizontallycss3}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n                <br />\n              </ul>\n              <br />\n              <br />\n              <h3>28. CSS Flexbox or Grid specs?</h3>\n              <ul>\n                <li>Flexbox is a way to align items into container.</li>\n                <li>\n                  Flexbox layout model designed to provide a more efficient and\n                  flexible way to arrange items within a container.\n                </li>\n                <ol>\n                  <li>\n                    <b>main-axis: </b>Horrizontal\n                  </li>\n                  <li>\n                    <b>cross-axis: </b>Vertical\n                  </li>\n                </ol>\n                <br />\n                <li>Flexbox is a 1-D layouts while Grid is 2-D layouts.</li>\n              </ul>\n              <br />\n              <br />\n              <h3>29. Grid</h3>\n              <ul>\n                <li>\n                  CSS Grid is a powerful layout system that allows for the\n                  creation of complex and flexible grid-based layouts on the\n                  web. It is a two-dimensional layout system, meaning it works\n                  in both rows and columns.\n                </li>\n              </ul>\n              <br />\n              <ol>\n                <li>\n                  <b>Properties for the Parent (Grid Container):</b>\n                </li>\n                <ul>\n                  <li>\n                    <b>Display: </b>\n                  </li>\n                  <li>\n                    <b>Grid-template-rows: </b>Defines the columns and rows of\n                    the grid with a space-separated list of values.\n                  </li>\n                  <li>\n                    Grid lines are automatically assigned positive numbers from\n                    these assignments.\n                  </li>\n                  <li>\n                    <b>grid-template-areas: </b>\n                  </li>\n                </ul>\n              </ol>\n              <div style={titles}>\n                <PrismCode\n                  code={gridspace}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>30. Justify-items</h3>\n              <b>align-items: </b>Aligns grid items along the column. This value\n              applies to all grid items inside the container.\n              <ol>\n                <li>\n                  <b>stretch: </b>fills the whole height of the cell (this is\n                  the default).\n                </li>\n\n                <li>\n                  <b>baseline: </b>align items along text baseline.\n                </li>\n              </ol>\n              <div style={titles}>\n                <PrismCode\n                  code={judtifyItems}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>31. Justify-content</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={justifycontain}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>32. Properties for the Children (Grid Items)</h3>\n              Determines a grid item’s location within the grid by referring to\n              specific grid lines. grid-column-start/grid-row-start is the line\n              where the item begins, and grid-column-end/grid-row-end is the\n              line where the item ends.\n              <br />\n              <br />\n              <b>justify-self: </b>Aligns a grid item inside a cell along the\n              inline (row) axis (as opposed to align-self which aligns along the\n              block (column) axis). This value applies to a grid item inside a\n              single cell.\n              <br />\n              <b>align-self: </b>Aligns a grid item inside a cell along the\n              block (column) axis (as opposed to justify-self which aligns along\n              the inline (row) axis). This value applies to the content inside a\n              single grid item.\n              <div style={titles}>\n                <PrismCode\n                  code={propertieschilds}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <h3>\n                33. How do you use flexbox to create flexible layouts in CSS?\n              </h3>\n              Flexbox is a powerful layout tool in CSS that allows you to create\n              flexible and responsive layouts.\n              <ol>\n                <li>Set the parent element's display property to \"flex\"</li>\n                <div style={titles}>\n                  <PrismCode\n                    code={flexboxcss}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>{\" \"}\n                <br />\n                <li>Set the flex direction to row or column:</li>\n                <div style={titles}>\n                  <PrismCode\n                    code={flexboxcss2}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>{\" \"}\n                <br />\n                <li>Use the flex property to set the size of each item:</li>\n                <div style={titles}>\n                  <PrismCode\n                    code={flexboxcss3}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>{\" \"}\n                <br />\n                <li>\n                  Use the justify-content property to align the items\n                  horizontally:\n                </li>\n                <div style={titles}>\n                  <PrismCode\n                    code={flexboxcss4}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>{\" \"}\n                <br />\n                <li>\n                  Use the align-items property to align the items vertically:\n                </li>\n                <div style={titles}>\n                  <PrismCode\n                    code={flexboxcss5}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>{\" \"}\n                <br />\n                <li>\n                  Use the align-self property to align a single item within the\n                  container:\n                </li>\n                <div style={titles}>\n                  <PrismCode\n                    code={flexboxcss6}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n              </ol>\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={flextFloat}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>34. Describe floats and how they work</h3>\n              <p>\n                <ol>\n                  <li>\n                    Float is a CSS property that allows elements to be\n                    positioned to the left or right of their containing block,\n                    allowing text and inline elements to flow around it. Float\n                    is commonly used for creating multi-column layouts or\n                    positioning images and other media on a webpage.\n                  </li>\n\n                  <li>\n                    float has 3 properties: <b>Left, Right, None</b>.\n                  </li>\n                </ol>\n              </p>\n              <ul>\n                <li>\n                  <b>flex-direction: </b>By default flex-direction is row.\n                </li>\n                <li>\n                  <b>space-between: </b>Not apply on start and end.\n                </li>\n                <li>\n                  <b>space-evenly: </b>Apply on start and end also.\n                </li>\n                <li>\n                  <b>space-around: </b>Like padding on box.\n                </li>\n                <li>\n                  <b>flex-grow: </b>Adjeced box on the base of screen\n                </li>\n                <li>\n                  <b>fraction (fr): </b>Divide on the basis of screen-size\n                </li>\n              </ul>\n              <br />\n              <b>How to Use Float in CSS</b>\n              <br />\n              <ol>\n                <li>float: left/ none/ inherit;</li>\n              </ol>\n              <div style={titles}>\n                <PrismCode\n                  code={floatele}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>35. Purpose of clearing floats in CSS</h3>\n              <ol>\n                <li>\n                  Clearing floats is a technique used in CSS to prevent elements\n                  from wrapping around floated elements. When an element is\n                  floated, it is taken out of the normal document flow, which\n                  can cause issues with layout and positioning if other elements\n                  on the page are affected by the float.\n                </li>\n                <li>\n                  To prevent this from happening, we can use the clear property\n                  to specify that an element should not be allowed to float next\n                  to a floated element. The clear property can be set to left,\n                  right, both, or none, depending on which side of the floated\n                  element you want to clear.\n                </li>\n              </ol>\n              <br />\n              <br />\n              <h3>36. Explain the usage of \"table-layout\" property</h3>\n              <p>\n                The table-layout property defines the algorithm used to layout\n                table cells, rows, and columns.\n              </p>\n              <ol>\n                <li>\n                  <b>auto -</b> Browsers use an automatic table layout\n                  algorithm. The column width is set by the widest unbreakable\n                  content in the cells.\n                </li>\n                <li>\n                  <b>fixed -</b>Fixed layout based on the first row. And the\n                  rest of the table follows. If no widths are present on the\n                  first row, the column widths are divided equally across the\n                  table.\n                </li>\n                <li>\n                  <b>initial -</b> Sets this property to its default value.\n                </li>\n                <li>\n                  <b>inherit -</b> Property from its parent element.\n                </li>\n              </ol>\n              <div style={titles}>\n                <PrismCode\n                  code={table_layout}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                37. Describe pseudo-elements and discuss what they are used for.\n              </h3>\n              <p>\n                In CSS, pseudo-elements are used to style a specific part of an\n                element, such as the first letter, the first line, or the\n                content before or after the element. Pseudo-elements are\n                preceded by a double colon (::).\n              </p>\n              <br />\n              <b>Here are some commonly used pseudo-elements:</b>\n              <ol>\n                <li>\n                  <b>::before :</b> Allows you to insert content before the\n                  content of an element.\n                </li>\n                <li>\n                  <b>::after :</b>Allows you to insert content after the content\n                  of an element.\n                </li>\n                <li>\n                  <b>::first-letter :</b>Targets the first letter of text\n                  content within an element.\n                </li>\n                <li>\n                  <b>::first-line :</b>Targets the first line of text content\n                  within an element.\n                </li>\n                <li>\n                  <b>::selection :</b>Targets the portion of an element's\n                  content that has been selected by the user.\n                </li>\n              </ol>\n              <br />\n              Pseudo-elements are useful for adding decorative elements to your\n              design, such as icons or borders, without adding extra markup to\n              your HTML. They can also be used to style specific parts of text,\n              such as the first letter or line of a paragraph\n              <br />\n              <b>\n                example of how to use the ::before pseudo-element to add an icon\n                before a link.\n              </b>\n              <div style={titles}>\n                <PrismCode\n                  code={psudoele}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>\n                There are currently seven pseudo-elements in CSS. They are:{\" \"}\n              </b>\n              <br />\n              <ul>\n                <li>::after</li>\n                <li>::before</li>\n                <li>::first-letter</li>\n                <li>::first-line</li>\n                <li>::marker</li>\n                <li>::placeholder</li>\n                <li>::selection</li>\n              </ul>\n              <br />\n              <b>Pseudo-classes: </b>A pseudo-class is used to define a special\n              state of an element.\n              <ol>\n                <li>Style an element when a user mouses over it.</li>\n                <li>Style visited and unvisited links differently.</li>\n                <li>Style an element when it gets focus.</li>\n              </ol>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={pseudoclas}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>38.LESS: (Leaner Stylesheets)</b>\n              <ul>\n                <li>\n                  <b>Variables: </b>Preprocessors allow the use of variables in\n                  CSS, which can make it easier to maintain and update the code.\n                  For example, you can define a color variable, and then use\n                  that variable throughout your CSS instead of having to repeat\n                  the color code each time.\n                </li>\n                <br />\n                <li>\n                  <b>Nesting: </b>Preprocessors allow you to nest CSS selectors,\n                  which can make your code easier to read and understand. This\n                  can be especially useful when dealing with complex selectors,\n                  such as those for nested menus or forms.\n                </li>\n                <br />\n                <li>\n                  <b>Mixins: </b>Preprocessors allow the creation of reusable\n                  code snippets called mixins. This can make it easier to write\n                  and maintain code, as you can define a mixin once and then\n                  reuse it throughout your project.\n                </li>\n                <br />\n                <li>\n                  <b>Functions: </b>Preprocessors allow the use of functions in\n                  CSS, which can be used to perform calculations or manipulate\n                  values.\n                </li>\n                <br />\n                <li>\n                  <b>Modularization: </b>Preprocessors allow you to split your\n                  CSS into modular files, making it easier to organize and\n                  maintain your code.\n                </li>\n              </ul>\n              <br />\n              Overall, using a CSS preprocessor can save time, improve code\n              organization and maintainability, and make it easier to create\n              complex stylesheets.\n              <br />\n              <br />\n              <h3>39. What is the importance of CSS Sprites?</h3>\n              CSS sprites are used for combining multiple images in a single\n              larger image. They are commonly used for representing icons that\n              are used in the user interfaces. The main advantages of using\n              sprites are:\n              <br />\n              <ol>\n                <li>\n                  It reduces the number of HTTP requests to get data of multiple\n                  images.\n                </li>\n                <li>\n                  It helps in downloading assets in advance that help display\n                  icons/ images upon hover/ other pseudo-states.\n                </li>\n                <li>It use as a background image only.</li>\n              </ol>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={sprites}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>40. What do you understand by tweening in CSS?</h3>\n              Tweening is the process of filling the gaps between the key\n              sequences, i.e between the keyframes that are already created.\n              Keyframes are those frames that represent start and end point of\n              animation action.\n              <br /> we use properties like transforms - matrix, translate,\n              scale, rotate etc.\n              <br />\n              <br />\n              In the below example, we are generating intermediate frames of\n              paragraph elements to slide through from the start to the right\n              edge of the browser.\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={tweening}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(CssBasics);\n"]},"metadata":{},"sourceType":"module"}