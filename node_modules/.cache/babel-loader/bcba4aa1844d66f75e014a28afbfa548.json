{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/mongoDB/deepMongodb/mysqlCurd.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst envs = `\nNODE_ENV = development\nPORT = 5000\nMYSQLDB = 'curdapplication'\nJWT_SECRET = 'abc123'`.trim();\nconst config = `\nconst mysql = require(\"mysql\");\n\nconst dbConn = mysql.createConnection({\n    host: 'localhost',\n    user: 'root',\n    password: '',\n    database: 'curdapplication'\n});\n\ndbConn.connect(function (error) {\n    if (error) throw error;\n    console.log('Database Connected Successfully!!!');\n})\n\nmodule.exports = dbConn;\n`.trim();\nconst models = `\nvar dbConn = require('../config/db.config');\n\nvar Employee = function (employee) {\n    this.first_name = employee.first_name;\n    this.last_name = employee.last_name;\n    this.email = employee.email;\n    this.phone = employee.phone;\n    this.organization = employee.organization;\n    this.designation = employee.designation;\n    this.salary = employee.salary;\n    this.status = employee.status ? employee.status : 1;\n    this.created_at = new Date();\n    this.updated_at = new Date();\n}\n\nEmployee.getAllEmployees = (result) => {\n    dbConn.query('SELECT * FROM employees WHERE is_deleted=0', (err, res) => {\n        if (err) {\n            console.log('Error while fetching employess', err);\n            result(null, err);\n        } else {\n            console.log('Employees fetched successfully');\n            result(null, res);\n        }\n    })\n}\n\n// get employee by ID from DB\nEmployee.getEmployeeByID = (id, result) => {\n    dbConn.query('SELECT * FROM employees WHERE id=?', id, (err, res) => {\n        if (err) {\n            console.log('Error while fetching employee by id', err);\n            result(null, err);\n        } else {\n            result(null, res);\n        }\n    })\n}\n\n// create new employee\nEmployee.createEmployee = (employeeReqData, result) => {\n    dbConn.query('INSERT INTO employees SET ? ', employeeReqData, (err, res) => {\n        if (err) {\n            console.log('Error while inserting data');\n            result(null, err);\n        } else {\n            console.log('Employee created successfully');\n            result(null, res)\n        }\n    })\n}\n\n// update employee\nEmployee.updateEmployee = (id, employeeReqData, result) => {\n    dbConn.query(\"UPDATE employees SET first_name=?,last_name=?,email=?,phone=?,organization=?,designation=?,salary=? \n      WHERE id = ?\", [employeeReqData.first_name, employeeReqData.last_name, employeeReqData.email, \n      employeeReqData.phone, employeeReqData.organization, employeeReqData.designation, employeeReqData.salary, id], \n      \n      (err, res) => {\n        if (err) {\n            console.log('Error while updating the employee');\n            result(null, err);\n        } else {\n            console.log(\"Employee updated successfully\");\n            result(null, res);\n        }\n    });\n}\n\n// delete employee\nEmployee.deleteEmployee = (id, result) => {\n    // dbConn.query('DELETE FROM employees WHERE id=?', [id], (err, res)=>{\n    //     if(err){\n    //         console.log('Error while deleting the employee');\n    //         result(null, err);\n    //     }else{\n    //         result(null, res);\n    //     }\n    // })\n    dbConn.query(\"UPDATE employees SET is_deleted=? WHERE id = ?\", [1, id], (err, res) => {\n        if (err) {\n            console.log('Error while deleting the employee');\n            result(null, err);\n        } else {\n            console.log(\"Employee deleted successfully\");\n            result(null, res);\n        }\n    });\n}\n\nmodule.exports = Employee;`.trim();\nconst controller = `\nconst express = require('express');\nconst router = express.Router();\nconst EmployeeModel = require('../models/employee.model');\n\n// get all employee list\nrouter.getEmployeeList = (req, res) => {\n    EmployeeModel.getAllEmployees((err, employees) => {\n        console.log('We are here');\n        if (err)\n            res.send(err);\n        console.log('Employees', employees);\n        res.send(employees)\n    })\n}\n\n// get employee by ID\nrouter.getEmployeeByID = (req, res) => {\n    EmployeeModel.getEmployeeByID(req.params.id, (err, employee) => {\n        if (err)\n            res.send(err);\n        console.log('single employee data', employee);\n        res.send(employee);\n    })\n}\n\n// create new employee\nrouter.createNewEmployee = (req, res) => {\n    const employeeReqData = new EmployeeModel(req.body);\n    console.log('employeeReqData', employeeReqData);\n    // check null\n    if (req.body.constructor === Object && Object.keys(req.body).length === 0) {\n        res.send(400).send({ success: false, message: 'Please fill all fields' });\n    } else {\n        EmployeeModel.createEmployee(employeeReqData, (err, employee) => {\n            if (err)\n                res.send(err);\n            res.json({ status: true, message: 'Employee Created Successfully', data: employee.insertId })\n        })\n    }\n}\n\n// update employee\nrouter.updateEmployee = (req, res) => {\n    const employeeReqData = new EmployeeModel(req.body);\n    console.log('employeeReqData update', employeeReqData);\n    // check null\n    if (req.body.constructor === Object && Object.keys(req.body).length === 0) {\n        res.send(400).send({ success: false, message: 'Please fill all fields' });\n    } else {\n        EmployeeModel.updateEmployee(req.params.id, employeeReqData, (err, employee) => {\n            if (err)\n                res.send(err);\n            res.json({ status: true, message: 'Employee updated Successfully' })\n        })\n    }\n}\n\n// delete employee\nrouter.deleteEmployee = (req, res) => {\n    EmployeeModel.deleteEmployee(req.params.id, (err, employee) => {\n        if (err)\n            res.send(err);\n        res.json({ success: true, message: 'Employee deleted successully!' });\n    })\n}\n\n\nmodule.exports = router;`.trim();\nconst routes = `\nconst express = require('express');\nconst router = express.Router();\nconst employeeController = require('../controllers/employee.controller');\n\n\nrouter.get('/', employeeController.getEmployeeList);\n\nrouter.get('/:id', employeeController.getEmployeeByID);\n\nrouter.post('/', employeeController.createNewEmployee);\n\nrouter.put('/:id', employeeController.updateEmployee);\n\nrouter.delete('/:id', employeeController.deleteEmployee);\n\nmodule.exports = router;`.trim();\nconst server = `\nconst express = require('express');\nconst cors = require('cors')\nrequire(\"dotenv\").config();\nconst app = express()\n\n// parse request data content type application/x-www-form-rulencoded\napp.use(express.urlencoded({ extended: true }));\n\n// parse request data content type application/json\napp.use(cors())\n\napp.get('/', (req, res) => {\n  res.send('Hello World');\n});\n\napp.use('/employee', require('./routes/employee.route'));\n\nconst port = process.env.PORT;\n\napp.listen(port, () => {\n  console.log('Express is running at port 5000');\n});`.trim();\n\nclass MysqlCurd extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, \"MySqlCurd\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, \".env\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: envs,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, \"config/db.config.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: config,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, \"models/employee.model.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: models,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, \"controllers/employee.controller.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: controller,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, \"routes/employee.route.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: routes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, \"server.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: server,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(MysqlCurd);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/mongoDB/deepMongodb/mysqlCurd.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","envs","trim","config","models","controller","routes","server","MysqlCurd","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst envs = `\nNODE_ENV = development\nPORT = 5000\nMYSQLDB = 'curdapplication'\nJWT_SECRET = 'abc123'`.trim();\n\nconst config = `\nconst mysql = require(\"mysql\");\n\nconst dbConn = mysql.createConnection({\n    host: 'localhost',\n    user: 'root',\n    password: '',\n    database: 'curdapplication'\n});\n\ndbConn.connect(function (error) {\n    if (error) throw error;\n    console.log('Database Connected Successfully!!!');\n})\n\nmodule.exports = dbConn;\n`.trim();\n\nconst models = `\nvar dbConn = require('../config/db.config');\n\nvar Employee = function (employee) {\n    this.first_name = employee.first_name;\n    this.last_name = employee.last_name;\n    this.email = employee.email;\n    this.phone = employee.phone;\n    this.organization = employee.organization;\n    this.designation = employee.designation;\n    this.salary = employee.salary;\n    this.status = employee.status ? employee.status : 1;\n    this.created_at = new Date();\n    this.updated_at = new Date();\n}\n\nEmployee.getAllEmployees = (result) => {\n    dbConn.query('SELECT * FROM employees WHERE is_deleted=0', (err, res) => {\n        if (err) {\n            console.log('Error while fetching employess', err);\n            result(null, err);\n        } else {\n            console.log('Employees fetched successfully');\n            result(null, res);\n        }\n    })\n}\n\n// get employee by ID from DB\nEmployee.getEmployeeByID = (id, result) => {\n    dbConn.query('SELECT * FROM employees WHERE id=?', id, (err, res) => {\n        if (err) {\n            console.log('Error while fetching employee by id', err);\n            result(null, err);\n        } else {\n            result(null, res);\n        }\n    })\n}\n\n// create new employee\nEmployee.createEmployee = (employeeReqData, result) => {\n    dbConn.query('INSERT INTO employees SET ? ', employeeReqData, (err, res) => {\n        if (err) {\n            console.log('Error while inserting data');\n            result(null, err);\n        } else {\n            console.log('Employee created successfully');\n            result(null, res)\n        }\n    })\n}\n\n// update employee\nEmployee.updateEmployee = (id, employeeReqData, result) => {\n    dbConn.query(\"UPDATE employees SET first_name=?,last_name=?,email=?,phone=?,organization=?,designation=?,salary=? \n      WHERE id = ?\", [employeeReqData.first_name, employeeReqData.last_name, employeeReqData.email, \n      employeeReqData.phone, employeeReqData.organization, employeeReqData.designation, employeeReqData.salary, id], \n      \n      (err, res) => {\n        if (err) {\n            console.log('Error while updating the employee');\n            result(null, err);\n        } else {\n            console.log(\"Employee updated successfully\");\n            result(null, res);\n        }\n    });\n}\n\n// delete employee\nEmployee.deleteEmployee = (id, result) => {\n    // dbConn.query('DELETE FROM employees WHERE id=?', [id], (err, res)=>{\n    //     if(err){\n    //         console.log('Error while deleting the employee');\n    //         result(null, err);\n    //     }else{\n    //         result(null, res);\n    //     }\n    // })\n    dbConn.query(\"UPDATE employees SET is_deleted=? WHERE id = ?\", [1, id], (err, res) => {\n        if (err) {\n            console.log('Error while deleting the employee');\n            result(null, err);\n        } else {\n            console.log(\"Employee deleted successfully\");\n            result(null, res);\n        }\n    });\n}\n\nmodule.exports = Employee;`.trim();\n\nconst controller = `\nconst express = require('express');\nconst router = express.Router();\nconst EmployeeModel = require('../models/employee.model');\n\n// get all employee list\nrouter.getEmployeeList = (req, res) => {\n    EmployeeModel.getAllEmployees((err, employees) => {\n        console.log('We are here');\n        if (err)\n            res.send(err);\n        console.log('Employees', employees);\n        res.send(employees)\n    })\n}\n\n// get employee by ID\nrouter.getEmployeeByID = (req, res) => {\n    EmployeeModel.getEmployeeByID(req.params.id, (err, employee) => {\n        if (err)\n            res.send(err);\n        console.log('single employee data', employee);\n        res.send(employee);\n    })\n}\n\n// create new employee\nrouter.createNewEmployee = (req, res) => {\n    const employeeReqData = new EmployeeModel(req.body);\n    console.log('employeeReqData', employeeReqData);\n    // check null\n    if (req.body.constructor === Object && Object.keys(req.body).length === 0) {\n        res.send(400).send({ success: false, message: 'Please fill all fields' });\n    } else {\n        EmployeeModel.createEmployee(employeeReqData, (err, employee) => {\n            if (err)\n                res.send(err);\n            res.json({ status: true, message: 'Employee Created Successfully', data: employee.insertId })\n        })\n    }\n}\n\n// update employee\nrouter.updateEmployee = (req, res) => {\n    const employeeReqData = new EmployeeModel(req.body);\n    console.log('employeeReqData update', employeeReqData);\n    // check null\n    if (req.body.constructor === Object && Object.keys(req.body).length === 0) {\n        res.send(400).send({ success: false, message: 'Please fill all fields' });\n    } else {\n        EmployeeModel.updateEmployee(req.params.id, employeeReqData, (err, employee) => {\n            if (err)\n                res.send(err);\n            res.json({ status: true, message: 'Employee updated Successfully' })\n        })\n    }\n}\n\n// delete employee\nrouter.deleteEmployee = (req, res) => {\n    EmployeeModel.deleteEmployee(req.params.id, (err, employee) => {\n        if (err)\n            res.send(err);\n        res.json({ success: true, message: 'Employee deleted successully!' });\n    })\n}\n\n\nmodule.exports = router;`.trim();\n\nconst routes = `\nconst express = require('express');\nconst router = express.Router();\nconst employeeController = require('../controllers/employee.controller');\n\n\nrouter.get('/', employeeController.getEmployeeList);\n\nrouter.get('/:id', employeeController.getEmployeeByID);\n\nrouter.post('/', employeeController.createNewEmployee);\n\nrouter.put('/:id', employeeController.updateEmployee);\n\nrouter.delete('/:id', employeeController.deleteEmployee);\n\nmodule.exports = router;`.trim();\n\nconst server = `\nconst express = require('express');\nconst cors = require('cors')\nrequire(\"dotenv\").config();\nconst app = express()\n\n// parse request data content type application/x-www-form-rulencoded\napp.use(express.urlencoded({ extended: true }));\n\n// parse request data content type application/json\napp.use(cors())\n\napp.get('/', (req, res) => {\n  res.send('Hello World');\n});\n\napp.use('/employee', require('./routes/employee.route'));\n\nconst port = process.env.PORT;\n\napp.listen(port, () => {\n  console.log('Express is running at port 5000');\n});`.trim();\n\n\nclass MysqlCurd extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>MySqlCurd</h3>\n              <b>.env</b>\n              <div style={titles}>\n                <PrismCode\n                  code={envs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>config/db.config.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={config}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>models/employee.model.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={models}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>controllers/employee.controller.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={controller}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>routes/employee.route.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={routes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>server.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={server}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(MysqlCurd));\n"]},"metadata":{},"sourceType":"module"}