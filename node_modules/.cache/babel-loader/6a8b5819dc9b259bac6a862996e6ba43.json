{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/dslogic8.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst isValid = `\nfunction isValid(s){\n  const stack = [];\n  const pair = {\n    '[': ']',\n    '{': '}',\n    '(': ')',\n  };\n  const isPaired = (a, b) => pair[a] === b;\n\n  for (c of s) {\n    if (isPaired(stack[stack.length - 1], c)) {\n      stack.pop();\n    } else {\n      stack.push(c);\n    }\n  }\n  return stack.length === 0;\n}\n\nconsole.log(isValid(\"()\"))\n`.trim();\nconst largestPerimeter = `\nfunction largestPerimeter(A = []) {\n  A.sort((a, b) => b - a);\n  for (let i = 0; i < A.length - 2; i++) {\n    if (A[i] < A[i + 1] + A[i + 2]) {\n      return A[i] + A[i + 1] + A[i + 2];\n    }\n  }\n  return 0;\n}\n\nconsole.log(largestPerimeter([2,1,2]))\n`.trim();\nconst generate = `\nfunction generate(numRows){\n  const result = [];\n\n  for (let i = 0; i < numRows; i++) {\n    const current = [];\n    for (let j = 0; j <= i; j++) {\n      if (result[i - 1] && result[i - 1][j] && result[i - 1][j - 1]) {\n        current.push(result[i - 1][j] + result[i - 1][j - 1]);\n      } else {\n        current.push(1);\n      }\n    }\n    result.push(current);\n  }\n  return result;\n}\n\nconsole.log(generate(5))\n`.trim();\nconst computeArea = `\nfunction computeArea(A, B, C, D, E, F, G, H){\n  const area = (pointA, pointB) => (pointB[0] - pointA[0]) * (pointB[1] - pointA[1]);\n  const totalArea = area([A, B], [C, D]) + area([E, F], [G, H]);\n\n  if (E >= C || G <= A || F >= D || H <= B) return totalArea;\n\n  const pointA = [Math.max(A, E), Math.max(B, F)];\n  const pointB = [Math.min(C, G), Math.min(D, H)];\n  const overlapping = (pointB[0] - pointA[0]) * (pointB[1] - pointA[1]);\n\n  return totalArea - overlapping;\n}\n\nconsole.log(computeArea(-3, 0, 3, 4, 0, -1, 9, 2))\n`.trim();\n\nclass DSLogic8 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"3. Largest Perimeter Triangle.\"), \"Given an array A of positive lengths, return the largest perimeter of a triangle with non-zero area, formed from 3 of these lengths.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), \"If it is impossible to form any triangle of non-zero area, return 0.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: largestPerimeter,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"4. Pascal's Triangle\"), \"Given a non-negative integer numRows, generate the first numRows of Pascal's triangle.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), \"In Pascal's triangle, each number is the sum of the two numbers directly above it.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: generate,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"5. Rectangle Area.\"), \"Find the total area covered by two rectilinear rectangles in a 2D plane.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), \"Each rectangle is defined by its bottom left corner and top right corner.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: computeArea,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"break\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"1. Valid Parentheses\"), \"Given a string s containing just the characters '(', ')', '\", ', ', \"', '[' and ']', determine if the input string is valid.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), \"An input string is valid if:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"Open brackets must be closed by the same type of brackets.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"Open brackets must be closed in the correct order.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"Example 1: \"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, \"Input: \"), \"s = \\\"()\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"Output: \"), \"true\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Example 2: \"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"Input: \"), \"s = \\\"()[]\", \"\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"Output: \"), \"true\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"Example 3: \"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"Input: \"), \"s = \\\"(]\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"Output: \"), \"false\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isValid,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(DSLogic8);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/dslogic8.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","isValid","trim","largestPerimeter","generate","computeArea","DSLogic8","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst isValid = `\nfunction isValid(s){\n  const stack = [];\n  const pair = {\n    '[': ']',\n    '{': '}',\n    '(': ')',\n  };\n  const isPaired = (a, b) => pair[a] === b;\n\n  for (c of s) {\n    if (isPaired(stack[stack.length - 1], c)) {\n      stack.pop();\n    } else {\n      stack.push(c);\n    }\n  }\n  return stack.length === 0;\n}\n\nconsole.log(isValid(\"()\"))\n`.trim();\n\nconst largestPerimeter = `\nfunction largestPerimeter(A = []) {\n  A.sort((a, b) => b - a);\n  for (let i = 0; i < A.length - 2; i++) {\n    if (A[i] < A[i + 1] + A[i + 2]) {\n      return A[i] + A[i + 1] + A[i + 2];\n    }\n  }\n  return 0;\n}\n\nconsole.log(largestPerimeter([2,1,2]))\n`.trim();\n\nconst generate = `\nfunction generate(numRows){\n  const result = [];\n\n  for (let i = 0; i < numRows; i++) {\n    const current = [];\n    for (let j = 0; j <= i; j++) {\n      if (result[i - 1] && result[i - 1][j] && result[i - 1][j - 1]) {\n        current.push(result[i - 1][j] + result[i - 1][j - 1]);\n      } else {\n        current.push(1);\n      }\n    }\n    result.push(current);\n  }\n  return result;\n}\n\nconsole.log(generate(5))\n`.trim();\n\nconst computeArea = `\nfunction computeArea(A, B, C, D, E, F, G, H){\n  const area = (pointA, pointB) => (pointB[0] - pointA[0]) * (pointB[1] - pointA[1]);\n  const totalArea = area([A, B], [C, D]) + area([E, F], [G, H]);\n\n  if (E >= C || G <= A || F >= D || H <= B) return totalArea;\n\n  const pointA = [Math.max(A, E), Math.max(B, F)];\n  const pointB = [Math.min(C, G), Math.min(D, H)];\n  const overlapping = (pointB[0] - pointA[0]) * (pointB[1] - pointA[1]);\n\n  return totalArea - overlapping;\n}\n\nconsole.log(computeArea(-3, 0, 3, 4, 0, -1, 9, 2))\n`.trim();\n\n\nclass DSLogic8 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n            <h3>3. Largest Perimeter Triangle.</h3>\n              Given an array A of positive lengths, return the largest perimeter of a triangle with non-zero area, formed from 3 of these lengths.\n              <br/>\n              If it is impossible to form any triangle of non-zero area, return 0.\n              <div style={titles}>\n                <PrismCode\n                  code={largestPerimeter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>4. Pascal's Triangle</h3>\n              Given a non-negative integer numRows, generate the first numRows of Pascal's triangle.\n              <br/>\n              In Pascal's triangle, each number is the sum of the two numbers directly above it.\n              <div style={titles}>\n                <PrismCode\n                  code={generate}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>5. Rectangle Area.</h3>\n              Find the total area covered by two rectilinear rectangles in a 2D plane.\n              <br/>\n              Each rectangle is defined by its bottom left corner and top right corner.\n              <div style={titles}>\n                <PrismCode\n                  code={computeArea}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n            <b>break</b>\n            <h3>1. Valid Parentheses</h3>\n              Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n              <br/>\n              An input string is valid if:<br/>\n              <ul>\n                <li>Open brackets must be closed by the same type of brackets.</li>\n                <li>Open brackets must be closed in the correct order.</li>\n              </ul>\n              <br/>\n\n              <b>Example 1: </b>\n\n              <b>Input: </b>s = \"()\"<br/>\n              <b>Output: </b>true<br/><br/>\n              <b>Example 2: </b>\n\n              <b>Input: </b>s = \"()[]{}\"<br/>\n              <b>Output: </b>true<br/><br/>\n              <b>Example 3: </b>\n\n              <b>Input: </b>s = \"(]\"<br/>\n              <b>Output: </b>false\n              <div style={titles}>\n                <PrismCode\n                  code={isValid}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic8));\n"]},"metadata":{},"sourceType":"module"}