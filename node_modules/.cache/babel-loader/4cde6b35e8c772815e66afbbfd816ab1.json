{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';import Stcksval from'../../../assets/stcks.png';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var redesign={height:200,width:500};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var forNum=\"\\nconst PrintNumbers = (start, end)=> {\\n  console.log(start);\\n  if (start < end) {\\n      PrintNumbers((start + 1), end);\\n  }\\n}\\n\\nPrintNumbers(1, 10);\\n\".trim();var factorial=\"\\nfunction factorial(n){\\n  if(n === 1) return 1;\\n  return n * factorial(n-1)\\n }\\n \\nconsole.log(factorial(4));\\n \".trim();var prime=\"\\nfunction primes(){\\n  const num=100;\\n  const result=[];\\n  let i,j;\\n\\n  for(i=0; i<num; i++){\\n      let count=0;\\n      for(j=2; j<i; j++){\\n          if(i%j==0) count +=1;\\n      }\\n   \\n      if(count==0){\\n          result.push(i);\\n      }\\n  }\\n  console.log(result);\\n}\\n\\nprimes()\\n\".trim();var magicNumber=\"\\n function magicNum(){\\n   const random = Math.random(0,1)\\n   return random;\\n }\\n \\n function main(){\\n   const result = Math.random(0, magicNum);\\n   console.log(result);\\n }\\n \\n main();\\n \".trim();var possible=\"\\nfunction isInt(value) {\\n  var x;\\n  if (isNaN(value)) {\\n    return false;\\n  }\\n  x = parseFloat(value);\\n  return (x | 0) === x;\\n}\\n\\nconsole.log(isInt(0));\".trim();var common_divisor=\"\\nfunction numbers(x, y) {\\n    if ((typeof x !== 'number') || (typeof y !== 'number'))\\n      return false;\\n      x = Math.abs(x);\\n      y = Math.abs(y);\\n        while(y) {\\n          var i = y;\\n          y = x % y;\\n          x = i;\\n        }\\n  return x;\\n  }\\n \\n  console.log(numbers(12, 4));\\n  console.log(numbers(9, 3));\".trim();var reverse=\"\\nfunction reverse(num){\\n  let result='';\\n  const target = num.toString();\\n  \\n  for(let i=target.length; i>=0; i--){\\n      result += target.charAt(i);\\n  }\\n  \\n  result = Number(result)\\n  console.log(result);\\n}\\n\\nreverse(123)\\n\".trim();var isPowerOfTwo=\"\\nfunction fun() {\\n  let num = 16;\\n\\n  for (let i = 0; i < num; i++) {\\n    if (2 ** i === num) {\\n      console.log('True');\\n      break;\\n    } else if (2 ** i > num) {\\n      console.log('False');\\n      break;\\n    }\\n  }\\n}\\n\\nfun(); \\n\".trim();var addDigits=\"\\nfunction fun(){\\n  let num = 2568;\\n  let sum=0;\\n\\n  let newnum=num.toString().split('');\\n  for(let i=0;i<newnum.length;i++){\\n    sum += parseInt(newnum[i])\\n  }\\n  console.log(sum)\\n}\\n\\nfun();\\n\\n//2\\nfunction addDigits(){\\n  const num = 2568;\\n  let numArr=0;\\n  let sum=0;\\n\\n    numArr = num.toString().split('').map(Number)\\n    sum=numArr.reduce((a,b)=>a+b);\\n  \\n  console.log(sum);\\n};\\n\\naddDigits()\\n\".trim();var isUgly=\"\\nfunction isUgly(){\\n  const num=15;\\n  const memo = [];\\n\\n  function aux(n){\\n    if (memo[n] !== undefined) return memo[n];\\n    if (n===1 || n===2 || n===3 || n===5 || n===4) return true;\\n    if (n<5) return false;\\n\\n    memo[n] = aux(n/ 2) || aux(n/ 3) || aux(n/ 5);\\n    return memo[n]\\n  }\\n  console.log(aux(num));\\n}\\n\\nisUgly();\\n\".trim();var getSum=\"\\nfunction getSum(a, b) {\\n  let carry = 0;\\n  \\n  while (b !== 0) {\\n    carry = a & b\\n    a ^= b\\n    b = carry << 1\\n  }\\n  return a\\n}\\n\\nconsole.log(getSum(5, 1))\\n\".trim();var numSquares=\"\\nfunction fun() {\\n  var nums=64;\\n  \\n  for (let i=0; i<=nums; i++) {\\n      if(i*i === nums){\\n          nums =i;\\n          break;\\n     }\\n }\\n console.log(nums);\\n}\\n\\nfun();\\n\".trim();var brokenCalc=\"\\nfunction brokenCalc(){\\n  let X=5, Y=8;\\n  let result = 0;\\n\\n  while(Y>X){\\n    if(Y%2 === 0) {\\n      Y /=2\\n    } \\n    else {\\n      Y +=1\\n    }\\n    result +=1\\n  }\\n  console.log(result + X - Y);\\n}\\n\\nbrokenCalc()\\n\".trim();var addStrings=\"\\nfunction multiply() {\\n  let num=\\\"2\\\";\\n  let num2=\\\"3\\\";\\n  let product =0;\\n\\n  num=Number(num)\\n  num2=Number(num2)\\n  \\n  product = num*num2;\\n  console.log(product)\\n}\\n\\nmultiply();\\n\\n\\n//\\nfunction multiply() {\\n  const num=\\\"2\\\";\\n  const num2=\\\"3\\\";\\n  const product = Array(num.length + num2.length).fill(0);\\n\\n  for (let i = num.length; i--;) {\\n      let carry = 0;\\n      for (let j = num2.length; j--;) {\\n          product[1+i+j] += carry + num[i]*num2[j];\\n          carry = Math.floor(product[1+i+j] / 10);\\n          product[1+i+j] = product[1+i+j] % 10;\\n      }\\n      product[i] += carry;\\n  }\\n  console.log(product.join(\\\"\\\").replace(/^0*(d)/, \\\"$1\\\"));\\n}\\n\\nmultiply();\\n\".trim();var myPow=\"\\nfunction myPow(x, n){\\n  if (n === 0) return 1;\\n\\n  const temp = myPow(x, Math.floor(Math.abs(n /2)))\\n  const result = n%2 ===0 ?temp *temp :x *temp *temp;\\n  return n<0 ? 1/ result :result;\\n}\\n\\nconsole.log(myPow(2.00000, 10))\\n\".trim();var letterCombinations=\"\\nfunction letterCombinations(digits = ''){\\n  const map = {\\n    2: ['a', 'b', 'c'],\\n    3: ['d', 'e', 'f'],\\n    4: ['g', 'h', 'i'],\\n    5: ['j', 'k', 'l'],\\n    6: ['m', 'n', 'o'],\\n    7: ['p', 'q', 'r', 's'],\\n    8: ['t', 'u', 'v'],\\n    9: ['w', 'x', 'y', 'z'],\\n  }\\n\\n  if (!digits.length) return [];\\n\\n  let result = [''];\\n  let index = 0;\\n\\n  while (index < digits.length) {\\n    const next = map[digits[index]];\\n    const nextResult = [];\\n\\n    for (let i = 0; i < result.length; i++) {\\n      for (let j = 0; j < next.length; j++) {\\n        nextResult.push(result[i] + next[j])\\n      }\\n    }\\n    result = nextResult;\\n    index++;\\n  }\\n  return result;\\n}\\n\\nconsole.log(letterCombinations(\\\"23\\\"))\\n\".trim();var remString=\"\\nconst greeting = 'Hello Marcus, welcome in 2020';\\nconst withoutNumbers = greeting.replace(/[0-9]/g, '')\\n console.log(withoutNumbers)\\n\\n\\n//\\nfunction removeFive(){\\n  let number = 915765;\\n  const target=5;\\n\\n  let numberStr = number.toString();\\n\\n  let numberArr = number.toString().split('').map(Number);\\n  let index = numberArr.indexOf(target); \\n \\n  const res = numberStr.replace(numberStr[index], '');\\n  console.log(res);\\n}\\n\\nremoveFive();\\n\".trim();var removePart=\"\\nfunction remove(){\\n  let str=1437000;\\n  str=str.toString();\\n  str = str.slice(0, -3);\\n  console.log(str)\\n}\\n\\nremove();\\n\\n\\n//Remove a particular digit from numbers;\\nfunction addNum(){\\n  let number = 789051234;\\n  const target=5;\\n  let indexNum = [];\\n  var result=[];\\n\\n  let arr = number.toString().split(\\\"\\\");\\n  for(let i=0; i<arr.length; i++){\\n    if(arr[i]==target){\\n      indexNum.push(i)\\n    }\\n  }\\n\\n  splitArr = arr.splice(0, indexNum)\\n  splitArr2 = arr.splice(1, arr.length)\\n\\n  result = splitArr + ','+ splitArr2;\\n  // result = parseInt(splitArr.join(splitArr2))                                       //sum\\n\\n  console.log(result)\\n}\\n\\naddNum();\\n\".trim();var DSLogic4=/*#__PURE__*/function(_Component){_inherits(DSLogic4,_Component);function DSLogic4(){_classCallCheck(this,DSLogic4);return _possibleConstructorReturn(this,_getPrototypeOf(DSLogic4).apply(this,arguments));}_createClass(DSLogic4,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Print num without loop.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:forNum,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Factorial\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:factorial,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Prime\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:prime,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. Add Digits.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:addDigits,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. Remove number from number.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:remString,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. Remove last 3 characters of string or number in javascript.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:removePart,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"7. Given a function magicNumber() that returns a random integer 1 or 0, write a new function that will generate a random number that uses this magicNumber() function.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:magicNumber,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"8. Discuss possible ways to write a function isInteger(x) that determines if x is an integer.\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:possible,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"9. Common Divisor\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:common_divisor,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"10. Reverse Integer.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:reverse,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"11. Multiply Strings\"),React.createElement(\"b\",null,\"Input: \"),\"num1 = \\\"2\\\", num2 = \\\"3\\\" \",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"\\\"6\\\"\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:addStrings,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"12. Perfect Squares.\"),\"Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:numSquares,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"13. Power of Two.\"),\"Given an integer, write a function to determine if it is a power of two.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:isPowerOfTwo,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"14. Pow(x, n).\"),React.createElement(\"b\",null,\"Input: \"),\"x = 2.00000, n = 10\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"1024.00000\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:myPow,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"15. Broken Calculator.\"),\"On a broken calculator that has a number showing on its display, we can perform two operations:\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Double: \"),\"Multiply the number on the display by 2, or;\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Decrement: \"),\"Subtract 1 from the number on the display.\")),\"Initially, the calculator is displaying the number X.\",React.createElement(\"br\",null),\"Return the minimum number of operations needed to display the number Y.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:brokenCalc,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"16. Letter Combinations of a Phone Number.\"),\"Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Example: \"),React.createElement(\"b\",null,\"Input: \"),\"\\\"23\\\"\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"Output: \"),\"[\\\"ad\\\", \\\"ae\\\", \\\"af\\\", \\\"bd\\\", \\\"be\\\", \\\"bf\\\", \\\"cd\\\", \\\"ce\\\", \\\"cf\\\"].\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:letterCombinations,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"17. Ugly Number.\"),\"Write a program to check whether a given number is an ugly number.\",React.createElement(\"br\",null),\"Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:isUgly,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"18. Sum of Two Integers.\"),\"Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:getSum,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return DSLogic4;}(Component);export default withStyles(styles)(DSLogic4);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/numbersAlgo.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","forNum","trim","factorial","prime","magicNumber","possible","common_divisor","reverse","isPowerOfTwo","addDigits","isUgly","getSum","numSquares","brokenCalc","addStrings","myPow","letterCombinations","remString","removePart","DSLogic4","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst forNum=`\nconst PrintNumbers = (start, end)=> {\n  console.log(start);\n  if (start < end) {\n      PrintNumbers((start + 1), end);\n  }\n}\n\nPrintNumbers(1, 10);\n`.trim();\n\nconst factorial = `\nfunction factorial(n){\n  if(n === 1) return 1;\n  return n * factorial(n-1)\n }\n \nconsole.log(factorial(4));\n `.trim()\n\nconst prime = `\nfunction primes(){\n  const num=100;\n  const result=[];\n  let i,j;\n\n  for(i=0; i<num; i++){\n      let count=0;\n      for(j=2; j<i; j++){\n          if(i%j==0) count +=1;\n      }\n   \n      if(count==0){\n          result.push(i);\n      }\n  }\n  console.log(result);\n}\n\nprimes()\n`.trim()\n\nconst magicNumber = `\n function magicNum(){\n   const random = Math.random(0,1)\n   return random;\n }\n \n function main(){\n   const result = Math.random(0, magicNum);\n   console.log(result);\n }\n \n main();\n `.trim();\n\nconst possible = `\nfunction isInt(value) {\n  var x;\n  if (isNaN(value)) {\n    return false;\n  }\n  x = parseFloat(value);\n  return (x | 0) === x;\n}\n\nconsole.log(isInt(0));`.trim();\n\nconst common_divisor = `\nfunction numbers(x, y) {\n    if ((typeof x !== 'number') || (typeof y !== 'number'))\n      return false;\n      x = Math.abs(x);\n      y = Math.abs(y);\n        while(y) {\n          var i = y;\n          y = x % y;\n          x = i;\n        }\n  return x;\n  }\n \n  console.log(numbers(12, 4));\n  console.log(numbers(9, 3));`.trim()\n\nconst reverse = `\nfunction reverse(num){\n  let result='';\n  const target = num.toString();\n  \n  for(let i=target.length; i>=0; i--){\n      result += target.charAt(i);\n  }\n  \n  result = Number(result)\n  console.log(result);\n}\n\nreverse(123)\n`.trim();\n\nconst isPowerOfTwo = `\nfunction fun() {\n  let num = 16;\n\n  for (let i = 0; i < num; i++) {\n    if (2 ** i === num) {\n      console.log('True');\n      break;\n    } else if (2 ** i > num) {\n      console.log('False');\n      break;\n    }\n  }\n}\n\nfun(); \n`.trim();\n\nconst addDigits = `\nfunction fun(){\n  let num = 2568;\n  let sum=0;\n\n  let newnum=num.toString().split('');\n  for(let i=0;i<newnum.length;i++){\n    sum += parseInt(newnum[i])\n  }\n  console.log(sum)\n}\n\nfun();\n\n//2\nfunction addDigits(){\n  const num = 2568;\n  let numArr=0;\n  let sum=0;\n\n    numArr = num.toString().split('').map(Number)\n    sum=numArr.reduce((a,b)=>a+b);\n  \n  console.log(sum);\n};\n\naddDigits()\n`.trim();\n\nconst isUgly = `\nfunction isUgly(){\n  const num=15;\n  const memo = [];\n\n  function aux(n){\n    if (memo[n] !== undefined) return memo[n];\n    if (n===1 || n===2 || n===3 || n===5 || n===4) return true;\n    if (n<5) return false;\n\n    memo[n] = aux(n/ 2) || aux(n/ 3) || aux(n/ 5);\n    return memo[n]\n  }\n  console.log(aux(num));\n}\n\nisUgly();\n`.trim();\n\nconst getSum = `\nfunction getSum(a, b) {\n  let carry = 0;\n  \n  while (b !== 0) {\n    carry = a & b\n    a ^= b\n    b = carry << 1\n  }\n  return a\n}\n\nconsole.log(getSum(5, 1))\n`.trim();\n\nconst numSquares = `\nfunction fun() {\n  var nums=64;\n  \n  for (let i=0; i<=nums; i++) {\n      if(i*i === nums){\n          nums =i;\n          break;\n     }\n }\n console.log(nums);\n}\n\nfun();\n`.trim();\n\nconst brokenCalc = `\nfunction brokenCalc(){\n  let X=5, Y=8;\n  let result = 0;\n\n  while(Y>X){\n    if(Y%2 === 0) {\n      Y /=2\n    } \n    else {\n      Y +=1\n    }\n    result +=1\n  }\n  console.log(result + X - Y);\n}\n\nbrokenCalc()\n`.trim();\n\nconst addStrings = `\nfunction multiply() {\n  let num=\"2\";\n  let num2=\"3\";\n  let product =0;\n\n  num=Number(num)\n  num2=Number(num2)\n  \n  product = num*num2;\n  console.log(product)\n}\n\nmultiply();\n\n\n//\nfunction multiply() {\n  const num=\"2\";\n  const num2=\"3\";\n  const product = Array(num.length + num2.length).fill(0);\n\n  for (let i = num.length; i--;) {\n      let carry = 0;\n      for (let j = num2.length; j--;) {\n          product[1+i+j] += carry + num[i]*num2[j];\n          carry = Math.floor(product[1+i+j] / 10);\n          product[1+i+j] = product[1+i+j] % 10;\n      }\n      product[i] += carry;\n  }\n  console.log(product.join(\"\").replace(/^0*(\\d)/, \"$1\"));\n}\n\nmultiply();\n`.trim();\n\nconst myPow = `\nfunction myPow(x, n){\n  if (n === 0) return 1;\n\n  const temp = myPow(x, Math.floor(Math.abs(n /2)))\n  const result = n%2 ===0 ?temp *temp :x *temp *temp;\n  return n<0 ? 1/ result :result;\n}\n\nconsole.log(myPow(2.00000, 10))\n`.trim();\n\nconst letterCombinations = `\nfunction letterCombinations(digits = ''){\n  const map = {\n    2: ['a', 'b', 'c'],\n    3: ['d', 'e', 'f'],\n    4: ['g', 'h', 'i'],\n    5: ['j', 'k', 'l'],\n    6: ['m', 'n', 'o'],\n    7: ['p', 'q', 'r', 's'],\n    8: ['t', 'u', 'v'],\n    9: ['w', 'x', 'y', 'z'],\n  }\n\n  if (!digits.length) return [];\n\n  let result = [''];\n  let index = 0;\n\n  while (index < digits.length) {\n    const next = map[digits[index]];\n    const nextResult = [];\n\n    for (let i = 0; i < result.length; i++) {\n      for (let j = 0; j < next.length; j++) {\n        nextResult.push(result[i] + next[j])\n      }\n    }\n    result = nextResult;\n    index++;\n  }\n  return result;\n}\n\nconsole.log(letterCombinations(\"23\"))\n`.trim();\n\nconst remString = `\nconst greeting = 'Hello Marcus, welcome in 2020';\nconst withoutNumbers = greeting.replace(/[0-9]/g, '')\n console.log(withoutNumbers)\n\n\n//\nfunction removeFive(){\n  let number = 915765;\n  const target=5;\n\n  let numberStr = number.toString();\n\n  let numberArr = number.toString().split('').map(Number);\n  let index = numberArr.indexOf(target); \n \n  const res = numberStr.replace(numberStr[index], '');\n  console.log(res);\n}\n\nremoveFive();\n`.trim();\n\n\nconst removePart = `\nfunction remove(){\n  let str=1437000;\n  str=str.toString();\n  str = str.slice(0, -3);\n  console.log(str)\n}\n\nremove();\n\n\n//Remove a particular digit from numbers;\nfunction addNum(){\n  let number = 789051234;\n  const target=5;\n  let indexNum = [];\n  var result=[];\n\n  let arr = number.toString().split(\"\");\n  for(let i=0; i<arr.length; i++){\n    if(arr[i]==target){\n      indexNum.push(i)\n    }\n  }\n\n  splitArr = arr.splice(0, indexNum)\n  splitArr2 = arr.splice(1, arr.length)\n\n  result = splitArr + ','+ splitArr2;\n  // result = parseInt(splitArr.join(splitArr2))                                       //sum\n\n  console.log(result)\n}\n\naddNum();\n`.trim();\n\n\nclass DSLogic4 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n            <h3>1. Print num without loop.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={forNum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n            <h3>2. Factorial</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={factorial}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Prime</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={prime}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Add Digits.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={addDigits}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>5. Remove number from number.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={remString}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Remove last 3 characters of string or number in javascript.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={removePart}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>7. Given a function magicNumber() that returns a random integer 1 or 0, write a new function that will generate a random number that uses this magicNumber() function.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={magicNumber}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>8. Discuss possible ways to write a function isInteger(x) that determines if x is an integer.</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={possible}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>9. Common Divisor</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={common_divisor}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>10. Reverse Integer.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={reverse}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n\n              <h3>11. Multiply Strings</h3>\n              <b>Input: </b>num1 = \"2\", num2 = \"3\" <br/>\n              <b>Output: </b>\"6\"\n              <div style={titles}>\n                <PrismCode\n                  code={addStrings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/> \n\n              <h3>12. Perfect Squares.</h3>\n              Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.\n              <div style={titles}>\n                <PrismCode\n                  code={numSquares}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>13. Power of Two.</h3>\n              Given an integer, write a function to determine if it is a power of two.\n              <div style={titles}>\n                <PrismCode\n                  code={isPowerOfTwo}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>14. Pow(x, n).</h3>\n              <b>Input: </b>x = 2.00000, n = 10<br/>\n              <b>Output: </b>1024.00000\n              <div style={titles}>\n                <PrismCode\n                  code={myPow}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>15. Broken Calculator.</h3>\n              On a broken calculator that has a number showing on its display, we can perform two operations:\n              <br/>\n              <ul>\n                <li><b>Double: </b>Multiply the number on the display by 2, or;</li>\n                <li><b>Decrement: </b>Subtract 1 from the number on the display.</li>\n              </ul>\n              Initially, the calculator is displaying the number X.\n              <br/>\n              Return the minimum number of operations needed to display the number Y.\n              <div style={titles}>\n                <PrismCode\n                  code={brokenCalc}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              \n              <h3>16. Letter Combinations of a Phone Number.</h3>\n              Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.\n              <br/><br/>\n            A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.<br/><br/>\n            <b>Example: </b>\n\n            <b>Input: </b>\"23\"<br/>\n            <b>Output: </b>[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\n              <div style={titles}>\n                <PrismCode\n                  code={letterCombinations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>17. Ugly Number.</h3>\n              Write a program to check whether a given number is an ugly number.\n              <br/>\n              Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\n              <div style={titles}>\n                <PrismCode\n                  code={isUgly}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>18. Sum of Two Integers.</h3>\n              Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.\n              <div style={titles}>\n                <PrismCode\n                  code={getSum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n             </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic4));\n"]},"metadata":{},"sourceType":"module"}