{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/css/enzyme3.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../ReactJs/styles.css';\nimport Sidebar from './sidebar';\nimport PrismCode from '../ReactJs/prismCode';\nimport Browser from '../../assets/css1.PNG';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst shallowOnly = `\ntest(\"shallow\", () => {\n  class Bar extends React.Component {\n    state = {\n      value: 0\n    };\n\n    componentDidMount() {\n      this.setState({\n        value: 1\n      });\n    }\n\n    render() {\n      return (\n        <div>\n          <div className=\"in-bar\">{this.state.value}</div>\n        </div>\n      );\n    }\n  }\n\n  function Foo() {\n    return (\n      <div>\n        <Bar />\n      </div>\n    );\n  }\n\n  const wrapper = shallow(<Foo />);\n\n  expect(wrapper.find(\".in-bar\")).toHaveLength(0);\n  expect(wrapper.find(Bar)).toHaveLength(1);\n\n  const barWithLifecycle = wrapper.find(Bar).shallow();\n  expect(barWithLifecycle.find(\".in-bar\")).toHaveLength(1);\n  expect(barWithLifecycle.find(\".in-bar\").text()).toBe(\"1\");\n\n  const barWithoutLifecycle = wrapper.find(Bar).shallow({\n    disableLifecycleMethods: true\n  });\n  expect(barWithoutLifecycle.find(\".in-bar\")).toHaveLength(1);\n  expect(barWithoutLifecycle.find(\".in-bar\").text()).toBe(\"0\");\n});\n\ntest(\"dive\", () => {\n  function Bar() {\n    return (\n      <div>\n        <div className=\"in-bar\" />\n      </div>\n    );\n  }\n\n  function Foo() {\n    return (\n      <div>\n        <Bar />\n      </div>\n    );\n  }\n\n  const wrapper = shallow(<Foo />);\n  expect(wrapper.find(\".in-bar\")).toHaveLength(0);\n  expect(wrapper.find(Bar)).toHaveLength(1);\n  expect(\n    wrapper\n      .find(Bar)\n      .dive()\n      .find(\".in-bar\")\n  ).toHaveLength(1);\n});\n`.trim();\nconst fullDomOnly = `\nimport { mount } from \"enzyme\";\nimport PropTypes from \"prop-types\";\n\ntest(\"detach()\", () => {\n  function CustomComponent(props) {\n    return <div>Custom Component</div>;\n  }\n\n  document.body.innerHTML = '<div id=\"root\"></div>';\n  const attachHere = document.getElementById(\"root\");\n\n  const wrapper = mount(<CustomComponent></CustomComponent>, {\n    attachTo: attachHere\n  });\n\n  expect(document.body.innerHTML).toMatchInlineSnapshot(\n    '\"<div id=\\\\\"root\\\\\"><div>Custom Component</div></div>\"'\n  );\n\n  wrapper.detach();\n\n  expect(document.body.innerHTML).toMatchInlineSnapshot(\n    '\"<div id=\\\\\"root\\\\\"></div>\"'\n  );\n});\n\ntest(\"getDOMNode()\", () => {\n  const wrapper = mount(<div className=\"foo\"></div>);\n  const domNode = wrapper.getDOMNode();\n  expect(domNode).toHaveProperty(\"className\");\n});\n\ntest(\"mount() and unmount()\", () => {\n  const willMount = jest.fn();\n  const didMount = jest.fn();\n  const willUnmount = jest.fn();\n\n  class Foo extends React.Component {\n    constructor(props) {\n      super(props);\n      this.componentWillUnmount = willUnmount;\n      this.componentWillMount = willMount;\n      this.componentDidMount = didMount;\n    }\n\n    render() {\n      const { id } = this.props;\n      return <div className={id}>{id}</div>;\n    }\n  }\n\n  Foo.propTypes = {\n    id: PropTypes.string.isRequired\n  };\n\n  const wrapper = mount(<Foo id=\"foo\" />);\n\n  expect(willMount).toHaveBeenCalled();\n  expect(didMount).toHaveBeenCalled();\n  expect(willUnmount).not.toHaveBeenCalled();\n\n  wrapper.unmount();\n  expect(willMount).toHaveBeenCalledTimes(1);\n  expect(didMount).toHaveBeenCalledTimes(1);\n  expect(willUnmount).toHaveBeenCalledTimes(1);\n\n  wrapper.mount();\n  expect(willMount).toHaveBeenCalledTimes(2);\n  expect(didMount).toHaveBeenCalledTimes(2);\n  expect(willUnmount).toHaveBeenCalledTimes(1);\n});\n\ntest(\"ref(refName)\", () => {\n  class Foo extends React.Component {\n    render() {\n      return (\n        <div>\n          <span ref=\"firstRef\">First</span>\n          <span ref=\"secondRef\">Second</span>\n          <span ref=\"thirdRef\">Third</span>\n        </div>\n      );\n    }\n  }\n\n  const wrapper = mount(<Foo />);\n  expect(wrapper.ref(\"secondRef\").innerHTML).toBe(\"Second\");\n});\n`.trim();\n\nclass Enzymes3 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, \"7-shallow-only-methods\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: shallowOnly,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, \"8-full-dom-only-methods\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: fullDomOnly,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Enzymes3);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/css/enzyme3.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Browser","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","shallowOnly","trim","fullDomOnly","Enzymes3","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../ReactJs/styles.css'\nimport Sidebar from './sidebar';\nimport PrismCode from '../ReactJs/prismCode';\n\nimport Browser from '../../assets/css1.PNG';\n\n\nconst titles = {backgroundColor:'#F0F8FF', padding:'1px', fontSize:'16px'}\n\nconst styles = theme => ({\n  paper: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1)\n  },\n  smMargin: {\n      margin: theme.spacing(1)\n  },\n  actionDiv: {\n      textAlign: \"center\"\n  }\n})\n\n\n\nconst shallowOnly = `\ntest(\"shallow\", () => {\n  class Bar extends React.Component {\n    state = {\n      value: 0\n    };\n\n    componentDidMount() {\n      this.setState({\n        value: 1\n      });\n    }\n\n    render() {\n      return (\n        <div>\n          <div className=\"in-bar\">{this.state.value}</div>\n        </div>\n      );\n    }\n  }\n\n  function Foo() {\n    return (\n      <div>\n        <Bar />\n      </div>\n    );\n  }\n\n  const wrapper = shallow(<Foo />);\n\n  expect(wrapper.find(\".in-bar\")).toHaveLength(0);\n  expect(wrapper.find(Bar)).toHaveLength(1);\n\n  const barWithLifecycle = wrapper.find(Bar).shallow();\n  expect(barWithLifecycle.find(\".in-bar\")).toHaveLength(1);\n  expect(barWithLifecycle.find(\".in-bar\").text()).toBe(\"1\");\n\n  const barWithoutLifecycle = wrapper.find(Bar).shallow({\n    disableLifecycleMethods: true\n  });\n  expect(barWithoutLifecycle.find(\".in-bar\")).toHaveLength(1);\n  expect(barWithoutLifecycle.find(\".in-bar\").text()).toBe(\"0\");\n});\n\ntest(\"dive\", () => {\n  function Bar() {\n    return (\n      <div>\n        <div className=\"in-bar\" />\n      </div>\n    );\n  }\n\n  function Foo() {\n    return (\n      <div>\n        <Bar />\n      </div>\n    );\n  }\n\n  const wrapper = shallow(<Foo />);\n  expect(wrapper.find(\".in-bar\")).toHaveLength(0);\n  expect(wrapper.find(Bar)).toHaveLength(1);\n  expect(\n    wrapper\n      .find(Bar)\n      .dive()\n      .find(\".in-bar\")\n  ).toHaveLength(1);\n});\n`.trim();\n\nconst fullDomOnly = `\nimport { mount } from \"enzyme\";\nimport PropTypes from \"prop-types\";\n\ntest(\"detach()\", () => {\n  function CustomComponent(props) {\n    return <div>Custom Component</div>;\n  }\n\n  document.body.innerHTML = '<div id=\"root\"></div>';\n  const attachHere = document.getElementById(\"root\");\n\n  const wrapper = mount(<CustomComponent></CustomComponent>, {\n    attachTo: attachHere\n  });\n\n  expect(document.body.innerHTML).toMatchInlineSnapshot(\n    '\"<div id=\\\\\"root\\\\\"><div>Custom Component</div></div>\"'\n  );\n\n  wrapper.detach();\n\n  expect(document.body.innerHTML).toMatchInlineSnapshot(\n    '\"<div id=\\\\\"root\\\\\"></div>\"'\n  );\n});\n\ntest(\"getDOMNode()\", () => {\n  const wrapper = mount(<div className=\"foo\"></div>);\n  const domNode = wrapper.getDOMNode();\n  expect(domNode).toHaveProperty(\"className\");\n});\n\ntest(\"mount() and unmount()\", () => {\n  const willMount = jest.fn();\n  const didMount = jest.fn();\n  const willUnmount = jest.fn();\n\n  class Foo extends React.Component {\n    constructor(props) {\n      super(props);\n      this.componentWillUnmount = willUnmount;\n      this.componentWillMount = willMount;\n      this.componentDidMount = didMount;\n    }\n\n    render() {\n      const { id } = this.props;\n      return <div className={id}>{id}</div>;\n    }\n  }\n\n  Foo.propTypes = {\n    id: PropTypes.string.isRequired\n  };\n\n  const wrapper = mount(<Foo id=\"foo\" />);\n\n  expect(willMount).toHaveBeenCalled();\n  expect(didMount).toHaveBeenCalled();\n  expect(willUnmount).not.toHaveBeenCalled();\n\n  wrapper.unmount();\n  expect(willMount).toHaveBeenCalledTimes(1);\n  expect(didMount).toHaveBeenCalledTimes(1);\n  expect(willUnmount).toHaveBeenCalledTimes(1);\n\n  wrapper.mount();\n  expect(willMount).toHaveBeenCalledTimes(2);\n  expect(didMount).toHaveBeenCalledTimes(2);\n  expect(willUnmount).toHaveBeenCalledTimes(1);\n});\n\ntest(\"ref(refName)\", () => {\n  class Foo extends React.Component {\n    render() {\n      return (\n        <div>\n          <span ref=\"firstRef\">First</span>\n          <span ref=\"secondRef\">Second</span>\n          <span ref=\"thirdRef\">Third</span>\n        </div>\n      );\n    }\n  }\n\n  const wrapper = mount(<Foo />);\n  expect(wrapper.ref(\"secondRef\").innerHTML).toBe(\"Second\");\n});\n`.trim();\n\n\n\nclass Enzymes3 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n            <Grid item xs={2}>\n                <Paper className={classes.paper}>\n                    <h4><Sidebar /></h4>\n                </Paper>\n            </Grid>\n    <Grid item xs={10}>\n    <Paper className={classes.paper}>\n    <List>\n      <h3>7-shallow-only-methods</h3>\n      <div style={titles}>\n      <PrismCode\n        code={shallowOnly}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      \n      <h3>8-full-dom-only-methods</h3>\n      <div style={titles}>\n      <PrismCode\n        code={fullDomOnly}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      </List>\n      </Paper>\n      </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Enzymes3));\n"]},"metadata":{},"sourceType":"module"}