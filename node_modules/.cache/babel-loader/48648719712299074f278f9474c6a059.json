{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var decBinar=\"\\nbinary_num,base = 0,1\\ndecimal_num = int(input(\\\"Enter a Decimal number:\\\")) #10\\n\\nwhile (decimal_num > 0):\\n    remainder = decimal_num % 2\\n    binary_num = binary_num + remainder * base\\n    decimal_num = decimal_num // 2\\n    base = base * 10\\nprint(binary_num)\\n\".trim();var decimals=\"\\ndecimal_val,base = 0,1\\nbinary_val = 1010\\n\\nwhile (binary_val > 0):\\n    rem = binary_val % 10\\n    decimal_val = decimal_val + rem * base\\n    binary_val = binary_val // 10 \\n    base = base * 2\\nprint(decimal_val)\\n\".trim();var factorials=\"\\nn = 4\\nfact = 1\\nfor i in range(1,n+1):\\n   fact *= i\\nprint(fact)\\n\".trim();var firstNum=\"\\ndef printFun():\\n  num = 10\\n  for i in range(1, num):\\n    print(i, end=\\\",\\\")\\n  \\nprintFun()\\n\".trim();var firstNums=\"\\ndef printFun():\\n  num = 10\\n  result = 0\\n  for i in range(1, num):\\n    result += i\\n  print(result, end=\\\",\\\")\\n  \\nprintFun()\\n\".trim();var multiply=\"\\ndef multiply():\\n    num1 = 3\\n    num2 = 4\\n    product = 0\\n    for i in range(0, num2):\\n        product += num1\\n    print(product)\\n    \\nmultiply()\\n\".trim();var reverseNum=\"\\ndef printFun():\\n  num = 10\\n  for i in range(num, 0, -1):\\n    print(i, end=\\\",\\\")\\n  \\nprintFun()\\n\".trim();var reverseNums=\"\\ndef firstDigit():\\n    n = 123\\n    while (n > 10):\\n        n = n // 10\\n    print(n)\\nfirstDigit()\\n\".trim();var reverseNump=\"\\ndef firstEODigit():\\n    n=10\\n    for i in range(1,n):\\n      if(i%2==0):\\n        print('even',i)\\n      else:\\n        print('Odd',i)\\n    \\nfirstEODigit()\\n\".trim();var armstongs=\"\\nnum = 407\\nsum = 0\\ntemp = num\\n\\nwhile temp > 0:\\n   digit = temp % 10\\n   sum += digit ** 3\\n   temp //= 10\\n\\nif num == sum:\\n   print(num,\\\"is an Armstrong number\\\")\\nelse:\\n   print(num,\\\"is not an Armstrong number\\\")\\n\".trim();var countVowel=\"\\nvowels = 'aeiou'\\nstr = 'Hello, have you tried our tutorial section yet?'\\n\\nstr = str.casefold()\\ncount = {}.fromkeys(vowels,0)\\n\\nfor char in str:\\n   if char in count:\\n       count[char] += 1\\n\\nprint(count)\\n\".trim();var fibnacci=\"\\na, b = 0, 1\\n\\nwhile b < 80:\\n    c=a+b\\n    print(c)\\n    a=b\\n    b=c\".trim();var palindrom=\"\\ndef palindrom():\\n  str='madam'\\n  str2=''\\n  \\n  for i in str:\\n    str2 = i + str2\\n  \\n  if(str==str2):\\n    print('Palindeom',str2)\\n  else:\\n    print('Not Palindrom',str2)\\n    \\npalindrom()\\n\".trim();var printNums=\"\\nfor num in range(0, 10 + 1):\\n     for i in range(2, num):\\n         if (num % i) == 0:\\n             break\\n     else:\\n         print(num)\\n\\n//2\\ndef pyraminds():\\n    num = 100\\n    for i in range(1, num):\\n        count = 0\\n        for j in range(2, i):\\n            if (i % j == 0):\\n                count += 1\\n            else:\\n                count = count\\n        if(count<1):\\n            print(i)\\npyraminds()\\n\\n\".trim();var shuffle=\"\\nimport itertools, random\\n\\ndeck = list(itertools.product(range(1,14),['Spade','Heart','Diamond','Club']))        # make a deck of cards\\nrandom.shuffle(deck)                                                                  # shuffle the cards\\n\\nfor i in range(5):\\n   print(deck[i][0], \\\"of\\\", deck[i][1])\".trim();var star=\"\\nn=3\\nfor i in range (n, 0, -1):\\n   print((n-i) * ' ' + i * '*')\\n\".trim();var double_sided_start=\"\\ndef pattern():\\n n = 10\\n for i in range(1,n+1):\\n     k =i + 1 if(i % 2 != 0) else i\\n\\n     for g in range(k,n):\\n         if g>=k:\\n             print(end=\\\"  \\\")\\n\\n     for j in range(0,k):\\n         if j == k - 1:\\n             print(\\\" * \\\")\\n         else:\\n             print(\\\" * \\\", end = \\\" \\\")\\n   \\npattern()\\n\".trim();var print_G=\"\\n   def Pattern(line):\\n       pat=\\\"\\\"\\n       for i in range(0,line):\\n           for j in range(0,line):\\n               if ((j == 1 and i != 0 and i != line-1) or ((i == 0 or\\n                   i == line-1) and j > 1 and j < line-2) or (i == ((line-1)/2)\\n                   and j > line-5 and j < line-1) or (j == line-2 and\\n                   i != 0 and i != line-1 and i >=((line-1)/2))):\\n                   pat=pat+\\\"*\\\"\\n               else:\\n                   pat=pat+\\\" \\\"\\n           pat=pat+\\\"nL\\\"\\n       return pat\\n   \\nline = 7\\nprint(Pattern(line)) \\n\".trim();var percentiles=\"\\nimport numpy as np\\n\\na = np.array([1,2,3,4,5,6,7])\\np = np.percentile(a, 50)\\nprint(p)\\n\".trim();var int=\"birth_year = input('Birth Year: ')\\nprint(type(birth_year))\\nage = 2019 - int(birth_year)\\nprint(age)\\n\".trim();var Pound=\"weight_lbs = input('Weight(lbs):')\\nweight_kg = int(weight_lbs) * 0.45\\nprint(weight_kg)\\n\".trim();var duplicate=\"numbers = [5,4,3,6,7,3,6]\\nuniques = []\\nfor number in numbers:\\n    if number not in uniques:\\n        uniques.append(number)\\n    print(uniques)\\n\".trim();var maximum=\"numbers = [10,3,6,2]\\nmax = numbers[0]\\nfor number in numbers:\\n    if number > max:\\n        max = number\\nprint(max)\\n\\n\\n//sum of three max number\\ndef maxSum():\\n    num=[2,3,5,6,0,8]\\n    sum=0\\n\\n    num.sort()\\n    sum = num[-1] + num[-2] + num[-3]\\n    print(sum)\\nmaxSum()\\n\\n\".trim();var tuples=\"\\nprint(\\\"Entr element separated by comma for frst tuple\\\")\\nt1=tuple([eval(e) for e in input().split(',')])\\n\\nprint(\\\"Entr element separated by comma for second tuple\\\")\\nt2=tuple([eval(e) for e in input().split(',')])\\n\\nif t1==t2:\\n    print(\\\"Tuples\\\")\\nelse:\\n    print(\\\"Not tuples\\\")\\n\".trim();var duplicates=\"\\ns = 'Enter a string'\\ni = 0\\ns1 = \\\"\\\"\\nfor x in s:\\n    if s.index(x) == i:\\n        s1 += x\\n    i += 1\\nprint(s1)\\n\".trim();var dictionary=\"\\nprint(\\\"Enter three city names\\\")\\na,b,c=input(), input(), input()\\nif a<b<c:\\n    print(a,b,c)\\nelif a<c<b:\\n    print(a,c,b)\\nelif b<a<c:\\n    print(b,a,c)\\nelif b<c<a:\\n    print(b,c,a)\\nelif c<a<b:\\n    print(c,a,b)\\nelse:\\n    print(c,b,a)\\n\".trim();var LogicalsPy=/*#__PURE__*/function(_Component){_inherits(LogicalsPy,_Component);function LogicalsPy(){_classCallCheck(this,LogicalsPy);return _possibleConstructorReturn(this,_getPrototypeOf(LogicalsPy).apply(this,arguments));}_createClass(LogicalsPy,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Decimal-Binary\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:decBinar,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Binary-Decimal\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:decimals,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Factorial\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:factorials,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. First N Numbers\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:firstNum,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. Sum of natural numbers\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:firstNums,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. Multiply N numbers without *\"),\"Insteaded multiply num1 and num2, just add num1 for num2 times.\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:multiply,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"7. Reverse numbers\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:reverseNum,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"8. First digit of number\"),\"Given number is continuously divided by 10, till it becomes lesser than 10 and greater than 0. and the final answer is first digit of given number.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:reverseNums,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"9. Odd or Even Number.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:reverseNump,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"10. Armstrong number\"),\"The number whose sum of each digit powered with the total number of digits is the same as the given number.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:armstongs,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"11. Count number of each vowel\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:countVowel,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"12. Fibonci\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:fibnacci,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"13. Palindome\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:palindrom,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"14. Prime number\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:printNums,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"15. Shuffle deck of cards\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:shuffle,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"16. Star\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:star,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"17. Double sided star\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:double_sided_start,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"18. Print_G\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:print_G,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"19. What is the easiest way to calculate percentiles when using Python?\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:percentiles,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"20. Data conversion: int(), float(), bool()\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:int,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"21. Pound convert into Kilogram\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Pound,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"22. Write a programe to remove duplicate in a list\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:duplicate,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"23. Find maximum number in array\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:maximum,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"24. Compare two tuples whether they contain the same elements in same order or nat.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:tuples,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"25. Remove duplicate character from the string.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:duplicates,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"26. Arrange three words in dictionary order.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:dictionary,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return LogicalsPy;}(Component);export default withStyles(styles)(LogicalsPy);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/pythone/deeppy/logicalspy.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","decBinar","trim","decimals","factorials","firstNum","firstNums","multiply","reverseNum","reverseNums","reverseNump","armstongs","countVowel","fibnacci","palindrom","printNums","shuffle","star","double_sided_start","print_G","percentiles","int","Pound","duplicate","maximum","tuples","duplicates","dictionary","LogicalsPy","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst decBinar = `\nbinary_num,base = 0,1\ndecimal_num = int(input(\"Enter a Decimal number:\")) #10\n\nwhile (decimal_num > 0):\n    remainder = decimal_num % 2\n    binary_num = binary_num + remainder * base\n    decimal_num = decimal_num // 2\n    base = base * 10\nprint(binary_num)\n`.trim();\n\nconst decimals = `\ndecimal_val,base = 0,1\nbinary_val = 1010\n\nwhile (binary_val > 0):\n    rem = binary_val % 10\n    decimal_val = decimal_val + rem * base\n    binary_val = binary_val // 10 \n    base = base * 2\nprint(decimal_val)\n`.trim();\n\nconst factorials = `\nn = 4\nfact = 1\nfor i in range(1,n+1):\n   fact *= i\nprint(fact)\n`.trim();\n\nconst firstNum = `\ndef printFun():\n  num = 10\n  for i in range(1, num):\n    print(i, end=\",\")\n  \nprintFun()\n`.trim();\n\nconst firstNums = `\ndef printFun():\n  num = 10\n  result = 0\n  for i in range(1, num):\n    result += i\n  print(result, end=\",\")\n  \nprintFun()\n`.trim();\n\nconst multiply = `\ndef multiply():\n    num1 = 3\n    num2 = 4\n    product = 0\n    for i in range(0, num2):\n        product += num1\n    print(product)\n    \nmultiply()\n`.trim();\n\nconst reverseNum = `\ndef printFun():\n  num = 10\n  for i in range(num, 0, -1):\n    print(i, end=\",\")\n  \nprintFun()\n`.trim();\n\nconst reverseNums = `\ndef firstDigit():\n    n = 123\n    while (n > 10):\n        n = n // 10\n    print(n)\nfirstDigit()\n`.trim();\n\nconst reverseNump = `\ndef firstEODigit():\n    n=10\n    for i in range(1,n):\n      if(i%2==0):\n        print('even',i)\n      else:\n        print('Odd',i)\n    \nfirstEODigit()\n`.trim();\n\nconst armstongs = `\nnum = 407\nsum = 0\ntemp = num\n\nwhile temp > 0:\n   digit = temp % 10\n   sum += digit ** 3\n   temp //= 10\n\nif num == sum:\n   print(num,\"is an Armstrong number\")\nelse:\n   print(num,\"is not an Armstrong number\")\n`.trim();\n\nconst countVowel = `\nvowels = 'aeiou'\nstr = 'Hello, have you tried our tutorial section yet?'\n\nstr = str.casefold()\ncount = {}.fromkeys(vowels,0)\n\nfor char in str:\n   if char in count:\n       count[char] += 1\n\nprint(count)\n`.trim();\n\nconst fibnacci = `\na, b = 0, 1\n\nwhile b < 80:\n    c=a+b\n    print(c)\n    a=b\n    b=c`.trim();\n\nconst palindrom = `\ndef palindrom():\n  str='madam'\n  str2=''\n  \n  for i in str:\n    str2 = i + str2\n  \n  if(str==str2):\n    print('Palindeom',str2)\n  else:\n    print('Not Palindrom',str2)\n    \npalindrom()\n`.trim();\n\nconst printNums = `\nfor num in range(0, 10 + 1):\n     for i in range(2, num):\n         if (num % i) == 0:\n             break\n     else:\n         print(num)\n\n//2\ndef pyraminds():\n    num = 100\n    for i in range(1, num):\n        count = 0\n        for j in range(2, i):\n            if (i % j == 0):\n                count += 1\n            else:\n                count = count\n        if(count<1):\n            print(i)\npyraminds()\n\n`.trim();\n\nconst shuffle = `\nimport itertools, random\n\ndeck = list(itertools.product(range(1,14),['Spade','Heart','Diamond','Club']))        # make a deck of cards\nrandom.shuffle(deck)                                                                  # shuffle the cards\n\nfor i in range(5):\n   print(deck[i][0], \"of\", deck[i][1])`.trim();\n\nconst star = `\nn=3\nfor i in range (n, 0, -1):\n   print((n-i) * ' ' + i * '*')\n`.trim();\n\nconst double_sided_start = `\ndef pattern():\n n = 10\n for i in range(1,n+1):\n     k =i + 1 if(i % 2 != 0) else i\n\n     for g in range(k,n):\n         if g>=k:\n             print(end=\"  \")\n\n     for j in range(0,k):\n         if j == k - 1:\n             print(\" * \")\n         else:\n             print(\" * \", end = \" \")\n   \npattern()\n`.trim();\n\nconst print_G = `\n   def Pattern(line):\n       pat=\"\"\n       for i in range(0,line):\n           for j in range(0,line):\n               if ((j == 1 and i != 0 and i != line-1) or ((i == 0 or\n                   i == line-1) and j > 1 and j < line-2) or (i == ((line-1)/2)\n                   and j > line-5 and j < line-1) or (j == line-2 and\n                   i != 0 and i != line-1 and i >=((line-1)/2))):\n                   pat=pat+\"*\"\n               else:\n                   pat=pat+\" \"\n           pat=pat+\"nL\"\n       return pat\n   \nline = 7\nprint(Pattern(line)) \n`.trim();\n\nconst percentiles = `\nimport numpy as np\n\na = np.array([1,2,3,4,5,6,7])\np = np.percentile(a, 50)\nprint(p)\n`.trim()\n\nconst int = `birth_year = input('Birth Year: ')\nprint(type(birth_year))\nage = 2019 - int(birth_year)\nprint(age)\n`.trim()\n\nconst Pound = `weight_lbs = input('Weight(lbs):')\nweight_kg = int(weight_lbs) * 0.45\nprint(weight_kg)\n`.trim()\n\nconst duplicate = `numbers = [5,4,3,6,7,3,6]\nuniques = []\nfor number in numbers:\n    if number not in uniques:\n        uniques.append(number)\n    print(uniques)\n`.trim()\n\nconst maximum = `numbers = [10,3,6,2]\nmax = numbers[0]\nfor number in numbers:\n    if number > max:\n        max = number\nprint(max)\n\n\n//sum of three max number\ndef maxSum():\n    num=[2,3,5,6,0,8]\n    sum=0\n\n    num.sort()\n    sum = num[-1] + num[-2] + num[-3]\n    print(sum)\nmaxSum()\n\n`.trim()\n\nconst tuples = `\nprint(\"Entr element separated by comma for frst tuple\")\nt1=tuple([eval(e) for e in input().split(',')])\n\nprint(\"Entr element separated by comma for second tuple\")\nt2=tuple([eval(e) for e in input().split(',')])\n\nif t1==t2:\n    print(\"Tuples\")\nelse:\n    print(\"Not tuples\")\n`.trim();\n\nconst duplicates = `\ns = 'Enter a string'\ni = 0\ns1 = \"\"\nfor x in s:\n    if s.index(x) == i:\n        s1 += x\n    i += 1\nprint(s1)\n`.trim();\n\nconst dictionary = `\nprint(\"Enter three city names\")\na,b,c=input(), input(), input()\nif a<b<c:\n    print(a,b,c)\nelif a<c<b:\n    print(a,c,b)\nelif b<a<c:\n    print(b,a,c)\nelif b<c<a:\n    print(b,c,a)\nelif c<a<b:\n    print(c,a,b)\nelse:\n    print(c,b,a)\n`.trim();\n\n\nclass LogicalsPy extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Decimal-Binary</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={decBinar}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Binary-Decimal</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={decimals}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Factorial</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={factorials}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. First N Numbers</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={firstNum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. Sum of natural numbers</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={firstNums}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Multiply N numbers without *</h3>\n              Insteaded multiply num1 and num2, just add num1 for num2 times.\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={multiply}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7. Reverse numbers</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={reverseNum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>8. First digit of number</h3>\n              Given number is continuously divided by 10, till it becomes lesser than 10 and greater than 0.\n              and the final answer is first digit of given number.\n              <div style={titles}>\n                <PrismCode\n                  code={reverseNums}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>9. Odd or Even Number.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={reverseNump}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>10. Armstrong number</h3>\n              The number whose sum of each digit powered with the total number of digits is the same as the given number.\n              <div style={titles}>\n                <PrismCode\n                  code={armstongs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>11. Count number of each vowel</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={countVowel}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>12. Fibonci</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={fibnacci}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>13. Palindome</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={palindrom}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>14. Prime number</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={printNums}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>15. Shuffle deck of cards</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={shuffle}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>16. Star</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={star}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>17. Double sided star</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={double_sided_start}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>18. Print_G</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={print_G}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>19. What is the easiest way to calculate percentiles when using Python?</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={percentiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>20. Data conversion: int(), float(), bool()</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={int}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>21. Pound convert into Kilogram</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Pound}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>22. Write a programe to remove duplicate in a list</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={duplicate}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>23. Find maximum number in array</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={maximum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>24. Compare two tuples whether they contain the same elements in same order or nat.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={tuples}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>25. Remove duplicate character from the string.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={duplicates}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>26. Arrange three words in dictionary order.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={dictionary}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(LogicalsPy));\n"]},"metadata":{},"sourceType":"module"}