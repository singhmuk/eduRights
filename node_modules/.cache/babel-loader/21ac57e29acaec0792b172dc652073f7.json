{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../styles.css';import Sidebar from'../sidebar';import PrismCode from'../prismCode';import Pure from'../../../assets/pure.png';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var redesign={height:350,width:600};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var childData=\"\\nconst App = () => {\\n  const [users, setUsers] = useState(\\\"\\\");\\n\\n  const handleText = (myData) => {\\n    setUsers(myData);\\n  };\\n\\n  return (\\n    <div>\\n      {users}\\n      <Child refer={handleText} />\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\\nconst Child = (props) => {\\n  const data = useState(\\\"first\\\");\\n\\n  const changeText = () => {\\n    props.refer(data);\\n  };\\n\\n  return (\\n    <div>\\n      <button onClick={changeText}>Click</button>\\n    </div>\\n  );\\n};\".trim();var pureComps=\"\\nconst quotes = [\\\"quote1\\\", \\\"quote2\\\", \\\"quote3\\\", \\\"quote4\\\", \\\"quote5\\\"];\\n\\nconst NotFound = () => {\\n  let randomQuote = quotes[Math.floor(Math.random() * quotes.length)];\\n  return (\\n    <h1>\\n      Quote: <strong>{randomQuote}</strong>\\n    </h1>\\n  );\\n};\\n\\nexport default class Controll extends Component {\\n  state = { username: \\\"foo\\\" };\\n\\n  componentDidMount() {\\n    setTimeout(() => this.setState({ username: \\\"bar\\\" }), 2000); // Simulate async ajax call\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        Welcome: {this.state.username}\\n        <NotFound />\\n      </div>\\n    );\\n  }\\n}\\n\".trim();var pureComps2=\"\\nconst quotes = [\\\"quote1\\\", \\\"quote2\\\", \\\"quote3\\\", \\\"quote4\\\", \\\"quote5\\\"];\\n\\nclass NotFound extends React.PureComponent {\\n  render() {\\n    let randomQuote = quotes[Math.floor(Math.random() * quotes.length)];\\n    return (\\n      <h1>\\n        Quote: <strong>{randomQuote}</strong>\\n      </h1>\\n    );\\n  }\\n}\\n\\nexport default class Controll extends Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = { username: \\\"foo\\\" };\\n  }\\n\\n  componentDidMount() {\\n    setTimeout(() => this.setState({ username: \\\"bar\\\" }), 2000);\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        Welcome: {this.state.username}\\n        <NotFound />\\n      </div>\\n    );\\n  }\\n}\\n\".trim();var PureComponents=\"\\n//App.js\\nimport Task from '../comp';\\n\\nclass App extends PureComponent {\\nstate = {\\n     taskList: [\\n        { title: 'excercise'},\\n        { title: 'cooking'},\\n        { title: 'Reacting'},\\n     ]\\n  };\\n\\n  componentDidMount() {\\n  setInterval(() => {\\n     this.setState({taskList: this.state.taskList});\\n  }, 1000);\\n}\\n\\nrender() {\\n  return (\\n      <div>\\n         {this.state.taskList.map((task, i) => {\\n            return (<Task\\n               key={i}\\n               title={task.title}\\n            />);\\n         })}\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\\n\\n//text.js\\nclass Task extends React.Component {\\n  render() {\\n     console.log('task added');\\n     return (\\n          <div>\\n            {this.props.title}\\n          </div>);\\n  }\\n}\\n\\nexport default Task;\\n\".trim();var PureComponents5=\"\\nconst App = () => {\\n  const [message, setMessage] = useState('Hello');\\n  const [count, setCount] = useState(0);\\n\\n  const handleButtonClick = () => {\\n    setMessage('Updated Message');\\n  };\\n\\n  const handleCount = () => {\\n    setCount((prevCount) => prevCount + 1);\\n  }\\n\\n  console.log('ParentComponent re-rendered.');\\n\\n  return (\\n    <div>\\n      <MessageComponent message={message} count={count} />\\n      <button onClick={handleButtonClick}>Message</button>\\n      <button onClick={handleCount}>Counts</button>\\n    </div>\\n  );\\n};\\n\\n\\n//\\nconst MessageComponent = React.memo(({ message, count }) => {\\n  console.log('MessageComponent re-rendered.');\\n\\n  return(\\n    <div>\\n      {message} - {count}\\n    </div>\\n  );\\n});\\n\".trim();var shibling=\"\\nconst useErrorBoundary = () => {\\n  const [hasError, setHasError] = useState(false);\\n\\n  return { hasError, setHasError };\\n}\\n\\n\\nconst ErrorBoundary = ({ children }) => {\\n  const { hasError, setHasError } = useErrorBoundary();\\n\\n  if (hasError) {\\n    return <div>Something went wrong. Please try again.</div>;\\n  }\\n\\n  return children;\\n}\\n\\nconst App = () => {\\n  const [count, setCount] = useState(0);\\n  const { hasError, setHasError } = useErrorBoundary();\\n\\n  const handleButtonClick = () => {\\n    try {\\n      setCount((prevCount) => prevCount + 1);\\n      if (count === 3) {\\n        throw new Error('Error in event handler');\\n      }\\n    } catch (error) {\\n      console.error(error);\\n      setHasError(true);\\n    }\\n  };\\n\\n  return (\\n    <div>\\n      {count}\\n      <ErrorBoundary>\\n        <button onClick={handleButtonClick}>Click Me</button>\\n        {hasError && <div>Something went wrong. Please try again.</div>}\\n      </ErrorBoundary>\\n    </div>\\n  );\\n}\".trim();var body=\"\\nconst AppHoc = (OriginalComponent) => {\\n  const NewComponent = () => {\\n    const [count, setCount] = useState(0);\\n\\n    const incrementCount = () => {\\n      setCount(count+1);\\n    };\\n\\n    return (\\n      <OriginalComponent count={count} incrementCount={incrementCount} />\\n    );\\n  };\\n\\n  return NewComponent;\\n};\\n\\nconst ClickCounter = ({ count, incrementCount }) => {\\n  return (\\n    <div>\\n      <button onClick={incrementCount}>Click {count} times</button>\\n    </div>\\n  );\\n};\\n\\nconst HoverCounter = ({ count, incrementCount }) => {\\n  return (\\n    <div>\\n      <button onMouseOver={incrementCount}>Hover {count} times</button>\\n    </div>\\n  );\\n};\\n\\nconst ClickCounters = AppHoc(ClickCounter);\\nconst HoverCounters = AppHoc(HoverCounter);\\n\\nfunction App() {\\n  return (\\n    <div>\\n      <ClickCounters />\\n      <HoverCounters />\\n    </div>\\n  );\\n}\".trim();var ssr=\"\\n  1. ReactDOM.render(<App />, document.getElementById('root'));\\n  \\n   replace with \\n   \\n  ReactDOM.hydrate(<App />, document.getElementById('root'));\\n  \\n  \\n  2. npm install express\\n     npm install @babel/register @babel/preset-env @babel/preset-react ignore-styles\\n    \\n  3. Let\\u2019s create an entry point in server/index.js:\\n  require('ignore-styles')\\n  \\n  require('@babel/register')({\\n   ignore: [/(node_modules)/],\\n   presets: ['@babel/preset-env', '@babel/preset-react']\\n  })\\n  \\n  require('./server')\\n     \\n  4. Make Build and run with node\\n      npm run build\\n      node server/index.js\\n   \\n      \\n  //App.js\\n  function App() {\\n    return (\\n      <div>\\n        <h1>Server Side Rendering.</h1>\\n      </div>\\n    );\\n  }\\n  \\n  \\n  //server/server.js\\n  import path from 'path'\\n  import fs from 'fs'\\n  \\n  import express from 'express'\\n  import React from 'react'\\n  import ReactDOMServer from 'react-dom/server'\\n  // import { StaticRouter } from 'react-router-dom';\\n  \\n  import App from '../src/App'\\n  \\n  const PORT = 8080\\n  const app = express()\\n  \\n  const router = express.Router()\\n  \\n  \\n  app.get('/*', (req, res) => {\\n      const context = {};\\n      const app = ReactDOMServer.renderToString(\\n        // <StaticRouter location={req.url} context={context}>\\n          <App />\\n        // </StaticRouter>\\n      );\\n    \\n      const indexFile = path.resolve('./build/index.html');\\n      fs.readFile(indexFile, 'utf8', (err, data) => {\\n        if (err) {\\n          console.error('Something went wrong:', err);\\n          return res.status(500).send('Oops, better luck next time!');\\n        }\\n    \\n        return res.send(\\n          data.replace('<div id=\\\"root\\\"></div>', '<div id=\\\"root\\\">'$'{app}</div>')\\n        );\\n      });\\n    });\\n  \\n  \\n    \\n  router.use(\\n    express.static(path.resolve(__dirname, '..', 'build'), { maxAge: '30d' })\\n  )\\n  \\n  // tell the app to use the above rules\\n  app.use(router)\\n  \\n  app.use(express.static('./build'))\\n  app.listen(PORT, () => {\\n    console.log(SSR running on port '$'{PORT})\\n  })\\n  \\n  \\n  //index.js\\n  require('ignore-styles')\\n  \\n  require('@babel/register')({\\n    ignore: [/(node_modules)/],\\n    presets: ['@babel/preset-env', '@babel/preset-react']\\n  })\\n  \\n  require('./server')\\n  \".trim();var PureComp=/*#__PURE__*/function(_Component){_inherits(PureComp,_Component);function PureComp(){_classCallCheck(this,PureComp);return _possibleConstructorReturn(this,_getPrototypeOf(PureComp).apply(this,arguments));}_createClass(PureComp,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Call Child Data\"),\"Snario in which we call state from child to parrent component.\",React.createElement(\"br\",null),React.createElement(\"i\",null,\"Here App.js is parent class, and child component (First.js) have state data that we call in App component.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:childData,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Component\"),React.createElement(\"img\",{src:Pure,alt:\"Pure\",className:\"responsive\",style:redesign}),React.createElement(\"br\",null),React.createElement(\"p\",null,\"we show a random quote from a list of quotes. The quote component will be a child of another stateful component.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:pureComps,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"i\",null,\"If you run it you will see that as soon as the component is rendered it displays a random quote, but after username state changes, it displays another random quote! A functional stateless component will re render every time the state ofthe parent component changes. Due to the limitations of a functional component you cannot implement life cycle hooks like shouldComponentUpdateto make explicit checks for renders.\"),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Pure Component\"),React.createElement(\"b\",null,\"Pure component solves this issue. Pure Component implements shouldComponentUpdate, out of the box.\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:pureComps2,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"i\",null,\"Will notice that even though the state of the parent changes, the quote displayed, doesn\\u2019t change. Pure component also gives a more stable UI because it will only re render when a prop on which it depends will change.It is recommended by React team that you use PureComponent instead of manually implementing shouldComponentUpdate, because PureComponent performs a shallow comparison of props and state, and reduces the chance that you\\u2019ll skip a necessary update.\"),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. How would you prevent a component from rendering\"),\"Three Ways\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Pure Components: \"),\"Shallowly compares the old state & props with the new state & props.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"React.memo: \")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Should Component Update: \"))),React.createElement(\"br\",null),\"Most likely Pure Components will be sufficient enough. However in cases of props or state structures with deeply nested objects, values won\\u2019t be compared. using the shouldComponentUpdate life-cycle method which is invoked on state or prop changes before render is called.\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:PureComponents5,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. Error Boundries\"),React.createElement(\"p\",null,\"The componentDidCatch lifecycle method is not available in React, Achieve \",React.createElement(\"b\",null,\"componetDidCatch\"),\"error handling behavior using the useEffect and useState hooks.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:shibling,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. Higher Order Component\"),React.createElement(\"i\",null,\"HOCs are the coined term for a custom Component that accepts dynamically provided children.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:body,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. SSR\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:ssr,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return PureComp;}(Component);export default withStyles(styles)(PureComp);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/pureComp.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Pure","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","childData","trim","pureComps","pureComps2","PureComponents","PureComponents5","shibling","body","ssr","PureComp","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,eAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,cAAtB,CACA,MAAOC,CAAAA,IAAP,KAAiB,0BAAjB,CAGA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,eAAe,CAAE,SAAnB,CAA8BC,OAAO,CAAE,KAAvC,CAA8CC,QAAQ,CAAE,MAAxD,CAAf,CAEA,GAAMC,CAAAA,QAAQ,CAAG,CACfC,MAAM,CAAE,GADO,CAEfC,KAAK,CAAE,GAFQ,CAAjB,CAKA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,KAAK,CAAE,CACLC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH,CAELT,OAAO,CAAEM,KAAK,CAACG,OAAN,CAAc,CAAd,CAFJ,CADgB,CAKvBC,QAAQ,CAAE,CACRF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA,CALa,CAQvBE,SAAS,CAAE,CACTC,SAAS,CAAE,QADF,CARY,CAAL,EAApB,CAaA,GAAMC,CAAAA,SAAS,CAAG,oeA8BdC,IA9Bc,EAAlB,CAgCA,GAAMC,CAAAA,SAAS,CAAG,4mBA4BhBD,IA5BgB,EAAlB,CA8BA,GAAME,CAAAA,UAAU,CAAG,yrBAiCjBF,IAjCiB,EAAnB,CAmCA,GAAMG,CAAAA,cAAc,CAAG,6yBAgDrBH,IAhDqB,EAAvB,CAkDA,GAAMI,CAAAA,eAAe,CAAG,4uBAmCtBJ,IAnCsB,EAAxB,CAqCA,GAAMK,CAAAA,QAAQ,CAAG,g+BA2CdL,IA3Cc,EAAjB,CA6CA,GAAMM,CAAAA,IAAI,CAAG,+2BA2CVN,IA3CU,EAAb,CA6CE,GAAMO,CAAAA,GAAG,CAAG,mxEAkGVP,IAlGU,EAAZ,C,GAoGIQ,CAAAA,Q,gSACgB,CAClBC,UAAU,CAAC,iBAAMjC,CAAAA,KAAK,CAACkC,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAAClB,KAA1B,EACE,8BAAI,oBAAC,OAAD,MAAJ,CADF,CADF,CADF,CAOE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEkB,OAAO,CAAClB,KAA1B,EACE,oBAAC,IAAD,MACA,mDADA,kEAEgE,8BAFhE,CAGE,0IAHF,CAIE,2BAAK,KAAK,CAAET,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEe,SADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAJF,CAWE,8BAXF,CAaE,6CAbF,CAcE,2BAAK,GAAG,CAAEhB,IAAV,CAAgB,GAAG,CAAC,MAApB,CAA2B,SAAS,CAAC,YAArC,CAAkD,KAAK,CAAEK,QAAzD,EAdF,CAeE,8BAfF,CAgBE,gJAhBF,CAmBE,2BAAK,KAAK,CAAEJ,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEiB,SADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAnBF,CA0BE,8BA1BF,CA2BE,+bA3BF,CA8BE,8BA9BF,CAgCE,kDAhCF,CAiCE,kIAjCF,CAkCE,8BAlCF,CAmCE,2BAAK,KAAK,CAAEjB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEkB,UADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAnCF,CA0CE,8BA1CF,CA2CE,yfA3CF,CA8CE,8BA9CF,CAgDE,oFAhDF,cAkDE,8BAlDF,CAmDE,8BACE,8BAAI,iDAAJ,wEADF,CAEE,8BAAI,4CAAJ,CAFF,CAGE,8BAAI,yDAAJ,CAHF,CAnDF,CAwDE,8BAxDF,wRA2DE,8BA3DF,CA4DE,2BAAK,KAAK,CAAElB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEoB,eADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CA5DF,CAmEE,8BAnEF,CAqEE,mDArEF,CAsEE,0GAA6E,gDAA7E,mEAtEF,CAwEE,2BAAK,KAAK,CAAEpB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEqB,QADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAxEF,CA+EE,8BA/EF,CAiFE,0DAjFF,CAkFE,2HAlFF,CAmFE,2BAAK,KAAK,CAAErB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEsB,IADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAnFF,CA0FE,8BA1FF,CA4FE,uCA5FF,CA6FE,2BAAK,KAAK,CAAEtB,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEuB,GADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CA7FF,CADF,CADF,CAPF,CADF,CAmHD,C,sBAzHoBhC,S,EA4HvB,cAAgBI,CAAAA,UAAU,CAACY,MAAD,CAAV,CAAmBiB,QAAnB,CAAhB","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../prismCode';\nimport Pure from '../../../assets/pure.png';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 350,\n  width: 600\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst childData = `\nconst App = () => {\n  const [users, setUsers] = useState(\"\");\n\n  const handleText = (myData) => {\n    setUsers(myData);\n  };\n\n  return (\n    <div>\n      {users}\n      <Child refer={handleText} />\n    </div>\n  );\n};\n\nexport default App;\n\nconst Child = (props) => {\n  const data = useState(\"first\");\n\n  const changeText = () => {\n    props.refer(data);\n  };\n\n  return (\n    <div>\n      <button onClick={changeText}>Click</button>\n    </div>\n  );\n};`.trim();\n\nconst pureComps = `\nconst quotes = [\"quote1\", \"quote2\", \"quote3\", \"quote4\", \"quote5\"];\n\nconst NotFound = () => {\n  let randomQuote = quotes[Math.floor(Math.random() * quotes.length)];\n  return (\n    <h1>\n      Quote: <strong>{randomQuote}</strong>\n    </h1>\n  );\n};\n\nexport default class Controll extends Component {\n  state = { username: \"foo\" };\n\n  componentDidMount() {\n    setTimeout(() => this.setState({ username: \"bar\" }), 2000); // Simulate async ajax call\n  }\n\n  render() {\n    return (\n      <div>\n        Welcome: {this.state.username}\n        <NotFound />\n      </div>\n    );\n  }\n}\n`.trim();\n\nconst pureComps2 = `\nconst quotes = [\"quote1\", \"quote2\", \"quote3\", \"quote4\", \"quote5\"];\n\nclass NotFound extends React.PureComponent {\n  render() {\n    let randomQuote = quotes[Math.floor(Math.random() * quotes.length)];\n    return (\n      <h1>\n        Quote: <strong>{randomQuote}</strong>\n      </h1>\n    );\n  }\n}\n\nexport default class Controll extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { username: \"foo\" };\n  }\n\n  componentDidMount() {\n    setTimeout(() => this.setState({ username: \"bar\" }), 2000);\n  }\n\n  render() {\n    return (\n      <div>\n        Welcome: {this.state.username}\n        <NotFound />\n      </div>\n    );\n  }\n}\n`.trim();\n\nconst PureComponents = `\n//App.js\nimport Task from '../comp';\n\nclass App extends PureComponent {\nstate = {\n     taskList: [\n        { title: 'excercise'},\n        { title: 'cooking'},\n        { title: 'Reacting'},\n     ]\n  };\n\n  componentDidMount() {\n  setInterval(() => {\n     this.setState({taskList: this.state.taskList});\n  }, 1000);\n}\n\nrender() {\n  return (\n      <div>\n         {this.state.taskList.map((task, i) => {\n            return (<Task\n               key={i}\n               title={task.title}\n            />);\n         })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n//text.js\nclass Task extends React.Component {\n  render() {\n     console.log('task added');\n     return (\n          <div>\n            {this.props.title}\n          </div>);\n  }\n}\n\nexport default Task;\n`.trim();\n\nconst PureComponents5 = `\nconst App = () => {\n  const [message, setMessage] = useState('Hello');\n  const [count, setCount] = useState(0);\n\n  const handleButtonClick = () => {\n    setMessage('Updated Message');\n  };\n\n  const handleCount = () => {\n    setCount((prevCount) => prevCount + 1);\n  }\n\n  console.log('ParentComponent re-rendered.');\n\n  return (\n    <div>\n      <MessageComponent message={message} count={count} />\n      <button onClick={handleButtonClick}>Message</button>\n      <button onClick={handleCount}>Counts</button>\n    </div>\n  );\n};\n\n\n//\nconst MessageComponent = React.memo(({ message, count }) => {\n  console.log('MessageComponent re-rendered.');\n\n  return(\n    <div>\n      {message} - {count}\n    </div>\n  );\n});\n`.trim();\n\nconst shibling = `\nconst useErrorBoundary = () => {\n  const [hasError, setHasError] = useState(false);\n\n  return { hasError, setHasError };\n}\n\n\nconst ErrorBoundary = ({ children }) => {\n  const { hasError, setHasError } = useErrorBoundary();\n\n  if (hasError) {\n    return <div>Something went wrong. Please try again.</div>;\n  }\n\n  return children;\n}\n\nconst App = () => {\n  const [count, setCount] = useState(0);\n  const { hasError, setHasError } = useErrorBoundary();\n\n  const handleButtonClick = () => {\n    try {\n      setCount((prevCount) => prevCount + 1);\n      if (count === 3) {\n        throw new Error('Error in event handler');\n      }\n    } catch (error) {\n      console.error(error);\n      setHasError(true);\n    }\n  };\n\n  return (\n    <div>\n      {count}\n      <ErrorBoundary>\n        <button onClick={handleButtonClick}>Click Me</button>\n        {hasError && <div>Something went wrong. Please try again.</div>}\n      </ErrorBoundary>\n    </div>\n  );\n}`.trim();\n\nconst body = `\nconst AppHoc = (OriginalComponent) => {\n  const NewComponent = () => {\n    const [count, setCount] = useState(0);\n\n    const incrementCount = () => {\n      setCount(count+1);\n    };\n\n    return (\n      <OriginalComponent count={count} incrementCount={incrementCount} />\n    );\n  };\n\n  return NewComponent;\n};\n\nconst ClickCounter = ({ count, incrementCount }) => {\n  return (\n    <div>\n      <button onClick={incrementCount}>Click {count} times</button>\n    </div>\n  );\n};\n\nconst HoverCounter = ({ count, incrementCount }) => {\n  return (\n    <div>\n      <button onMouseOver={incrementCount}>Hover {count} times</button>\n    </div>\n  );\n};\n\nconst ClickCounters = AppHoc(ClickCounter);\nconst HoverCounters = AppHoc(HoverCounter);\n\nfunction App() {\n  return (\n    <div>\n      <ClickCounters />\n      <HoverCounters />\n    </div>\n  );\n}`.trim()\n\n  const ssr = `\n  1. ReactDOM.render(<App />, document.getElementById('root'));\n  \n   replace with \n   \n  ReactDOM.hydrate(<App />, document.getElementById('root'));\n  \n  \n  2. npm install express\n     npm install @babel/register @babel/preset-env @babel/preset-react ignore-styles\n    \n  3. Let’s create an entry point in server/index.js:\n  require('ignore-styles')\n  \n  require('@babel/register')({\n   ignore: [/(node_modules)/],\n   presets: ['@babel/preset-env', '@babel/preset-react']\n  })\n  \n  require('./server')\n     \n  4. Make Build and run with node\n      npm run build\n      node server/index.js\n   \n      \n  //App.js\n  function App() {\n    return (\n      <div>\n        <h1>Server Side Rendering.</h1>\n      </div>\n    );\n  }\n  \n  \n  //server/server.js\n  import path from 'path'\n  import fs from 'fs'\n  \n  import express from 'express'\n  import React from 'react'\n  import ReactDOMServer from 'react-dom/server'\n  // import { StaticRouter } from 'react-router-dom';\n  \n  import App from '../src/App'\n  \n  const PORT = 8080\n  const app = express()\n  \n  const router = express.Router()\n  \n  \n  app.get('/*', (req, res) => {\n      const context = {};\n      const app = ReactDOMServer.renderToString(\n        // <StaticRouter location={req.url} context={context}>\n          <App />\n        // </StaticRouter>\n      );\n    \n      const indexFile = path.resolve('./build/index.html');\n      fs.readFile(indexFile, 'utf8', (err, data) => {\n        if (err) {\n          console.error('Something went wrong:', err);\n          return res.status(500).send('Oops, better luck next time!');\n        }\n    \n        return res.send(\n          data.replace('<div id=\"root\"></div>', '<div id=\"root\">'$'{app}</div>')\n        );\n      });\n    });\n  \n  \n    \n  router.use(\n    express.static(path.resolve(__dirname, '..', 'build'), { maxAge: '30d' })\n  )\n  \n  // tell the app to use the above rules\n  app.use(router)\n  \n  app.use(express.static('./build'))\n  app.listen(PORT, () => {\n    console.log(SSR running on port '$'{PORT})\n  })\n  \n  \n  //index.js\n  require('ignore-styles')\n  \n  require('@babel/register')({\n    ignore: [/(node_modules)/],\n    presets: ['@babel/preset-env', '@babel/preset-react']\n  })\n  \n  require('./server')\n  `.trim();\n\nclass PureComp extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n            <h3>1. Call Child Data</h3>\n              Snario in which we call state from child to parrent component.<br />\n              <i>Here App.js is parent class, and child component (First.js) have state data that we call in App component.</i>\n              <div style={titles}>\n                <PrismCode\n                  code={childData}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Component</h3>\n              <img src={Pure} alt=\"Pure\" className=\"responsive\" style={redesign} />\n              <br />\n              <p>\n                we show a random quote from a list of quotes. The quote component will be a child of another stateful component.\n              </p>\n              <div style={titles}>\n                <PrismCode\n                  code={pureComps}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>\n                If you run it you will see that as soon as the component is rendered it displays a random quote, but after username state changes, it displays another random quote! A functional stateless component will re render every time the state ofthe parent component changes. Due to the limitations of a functional component you cannot implement life cycle hooks like shouldComponentUpdateto make explicit checks for renders.\n              </i>\n              <br />\n           \n              <h3>3. Pure Component</h3>\n              <b>Pure component solves this issue. Pure Component implements shouldComponentUpdate, out of the box.</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={pureComps2}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>\n                Will notice that even though the state of the parent changes, the quote displayed, doesn’t change. Pure component also gives a more stable UI because it will only re render when a prop on which it depends will change.It is recommended by React team that you use PureComponent instead of manually implementing shouldComponentUpdate, because PureComponent performs a shallow comparison of props and state, and reduces the chance that you’ll skip a necessary update.\n              </i>\n              <br />\n\n              <h3>4. How would you prevent a component from rendering</h3>\n              Three Ways\n              <br />\n              <ul>\n                <li><b>Pure Components: </b>Shallowly compares the old state & props with the new state & props.</li>\n                <li><b>React.memo: </b></li>\n                <li><b>Should Component Update: </b></li>\n              </ul>\n              <br />\n              Most likely Pure Components will be sufficient enough. However in cases of props or state structures with deeply nested objects, values won’t be compared.\n              using the shouldComponentUpdate life-cycle method which is invoked on state or prop changes before render is called.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={PureComponents5}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              \n              <h3>5. Error Boundries</h3>\n              <p>The componentDidCatch lifecycle method is not available in React, Achieve <b>componetDidCatch</b>\n               error handling behavior using the useEffect and useState hooks.</p>\n              <div style={titles}>\n                <PrismCode\n                  code={shibling}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Higher Order Component</h3>\n              <i>HOCs are the coined term for a custom Component that accepts dynamically provided children.</i>\n              <div style={titles}>\n                <PrismCode\n                  code={body}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. SSR</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={ssr}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(PureComp));\n"]},"metadata":{},"sourceType":"module"}