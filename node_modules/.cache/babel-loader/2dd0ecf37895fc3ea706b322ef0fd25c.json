{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/jsonPlaceholder.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst mainApp = `\nimport React, { useState, useEffect } from \"react\";\n\nimport { User } from \"./components/User\";\nimport { AddUser } from \"./components/AddUser\";\n\nfunction App() {\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    await fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json())\n      .then((data) => setUsers(data))\n      .catch((error) => console.log(error));\n  };\n\n  const onAdd = async (name, email) => {\n    await fetch(\"https://jsonplaceholder.typicode.com/users\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        name: name,\n        email: email,\n      }),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\",\n      },\n    })\n      .then((res) => {\n        if (res.status !== 201) {\n          return;\n        } else {\n          return res.json();\n        }\n      })\n      .then((data) => {\n        setUsers((users) => [...users, data]);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  const onEdit = async (id, name, email) => {\n    await fetch('https://jsonplaceholder.typicode.com/users/'$'{id}', {\n      method: \"PUT\",\n      body: JSON.stringify({\n        name: name,\n        email: email,\n      }),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\",\n      },\n    })\n      .then((res) => {\n        if (res.status !== 200) {\n          return;\n        } else {\n          return res.json();\n        }\n      })\n      .then((data) => {\n        const updatedUsers = users.map((user) => {\n          if (user.id === id) {\n            user.name = name;\n            user.email = email;\n          }\n\n          return user;\n        });\n\n        setUsers((users) => updatedUsers);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  const onDelete = async (id) => {\n    await fetch('https://jsonplaceholder.typicode.com/users/'$'{id}', {\n      method: \"DELETE\",\n    })\n      .then((res) => {\n        if (res.status !== 200) {\n          return;\n        } else {\n          setUsers(\n            users.filter((user) => {\n              return user.id !== id;\n            })\n          );\n        }\n      })\n      .catch((error) => console.log(error));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Users</h1>\n      <AddUser onAdd={onAdd} />\n      {users.map((user) => (\n        <User\n          id={user.id}\n          key={user.id}\n          name={user.name}\n          email={user.email}\n          onEdit={onEdit}\n          onDelete={onDelete}\n        />\n      ))}\n    </div>\n  );\n}`.trim();\nconst compos = `\n//components/AddUser.js\nexport const AddUser = ({ onAdd }) => {\n  const handleOnSubmit = (e) => {\n    e.preventDefault();\n    onAdd(e.target.name.value, e.target.email.value);\n    e.target.name.value = \"\";\n    e.target.email.value = \"\";\n  };\n\n  return (\n    <form onSubmit={handleOnSubmit}>\n      <h3>Add User</h3>\n      <input placeholder=\"Name\" name=\"name\" />\n      <input placeholder=\"Email\" name=\"email\" />\n      <button onSubmit={handleOnSubmit}>Add</button>\n      <hr />\n    </form>\n  );\n};\n\n\n//components/User.js\nexport const User = ({ name, email, id, onEdit, onDelete }) => {\n  const [isEdit, setIsEdit] = useState(false);\n\n  const handleEdit = () => {\n    setIsEdit(!isEdit);\n  };\n\n  const handleDelete = () => {\n    onDelete(id);\n  };\n\n  const handleOnEditSubmit = (e) => {\n    e.preventDefault();\n    onEdit(id, e.target.name.value, e.target.email.value);\n    setIsEdit(!isEdit);\n  };\n\n  return (\n    <div>\n      {isEdit ? (\n        <form onSubmit={handleOnEditSubmit}>\n          <input placeholder=\"Name\" name=\"name\" defaultValue={name} />\n          <input placeholder=\"Email\" name=\"email\" defaultValue={email} />\n          <button onSubmit={handleOnEditSubmit}>Save</button>\n        </form>\n      ) : (\n        <div className=\"user\">\n          <span className=\"user-name\">{name}</span>\n          <span className=\"user-email\">{email}</span>\n          <div>\n            <button onClick={handleEdit}>Edit</button>\n            <button onClick={handleDelete}>Delete</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n`.trim();\nconst edits = `\n//editLists.js\nconst EditLists = (props) => {\n  const [document, setDocument] = useState(props.currentLists);\n  useEffect(() => {\n    setDocument(props.currentLists);\n  }, [props]);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n\n    setDocument({ ...document, [name]: value });\n  };\n\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        if (!document.docTitle || !document.description || !document.publisher)\n          return;\n\n        props.updateLists(document.id, document);\n      }}\n    >\n      <input\n        type=\"text\"\n        name=\"docTitle\"\n        placeholder=\"Enter Title\"\n        value={document.docTitle}\n        onChange={handleInputChange}\n      />\n      <input\n        type=\"text\"\n        name=\"description\"\n        placeholder=\"Enter Description\"\n        value={document.description}\n        onChange={handleInputChange}\n      />\n      <input\n        type=\"text\"\n        name=\"publisher\"\n        placeholder=\"Enter Publisher\"\n        value={document.publisher}\n        onChange={handleInputChange}\n      />\n      <button>Edit Document</button>\n      <button onClick={() => props.setEditing(false)}>Cancel</button>\n    </form>\n  );\n};\n\n\n\n//App.js\nimport EditLists from \"./editLists\";\n\nconst initialState = [\n  {\n    id: 1,\n    docTitle: \"document1\",\n    description: \"desc1\",\n    publisher: \"publisher1\",\n  },\n];\n\nconst App = () => {\n  const initialFormState = {\n    id: null,\n    docTitle: \"\",\n    description: \"\",\n    publisher: \"\",\n  };\n\n  const [lists, setLists] = useState(initialState);\n  const [editing, setEditing] = useState(false);\n  const [currentLists, setCurrentLists] = useState(initialFormState);\n\n  const [data, setData] = useState(initialFormState);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setData({ ...data, [name]: value });\n  };\n\n  const handleAdd = (data) => {\n    data.id = lists.length + 1;\n    setLists([...lists, data]);\n  };\n\n  const handleEdit = (data) => {\n    setEditing(true);\n    setCurrentLists({\n      id: data.id,\n      docTitle: data.docTitle,\n      description: data.description,\n      publisher: data.publisher,\n    });\n  };\n  const updateLists = (id, updatedDocument) => {\n    setEditing(false);\n    setLists(lists.map((item) => (item.id === id ? updatedDocument : item)));\n  };\n\n  return (\n    <>\n      <div className=\"row\">\n        {editing ? (\n          <EditLists\n            editing={editing}\n            setEditing={setEditing}\n            currentLists={currentLists}\n            updateLists={updateLists}\n          />\n        ) : (\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n\n              handleAdd(data);\n              setData(initialFormState);\n            }}\n          >\n            <input\n              type=\"text\"\n              name=\"docTitle\"\n              placeholder=\"Enter Title\"\n              value={data.docTitle}\n              onChange={handleInputChange}\n            />\n            <input\n              type=\"text\"\n              name=\"description\"\n              placeholder=\"Enter Description\"\n              value={data.description}\n              onChange={handleInputChange}\n            />\n            <input\n              type=\"text\"\n              name=\"publisher\"\n              placeholder=\"Enter Publisher\"\n              value={data.name}\n              onChange={handleInputChange}\n            />\n            <button>Add Document</button>\n          </form>\n        )}\n      </div>\n      <table>\n        <thead>\n          <tr>\n            <th>Title</th>\n            <th>Description</th>\n            <th>Publisher</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {lists.length > 0\n            ? lists.map((item) => (\n                <tr key={item.id}>\n                  <td>{item.docTitle}</td>\n                  <td>{item.description}</td>\n                  <td>{item.publisher}</td>\n                  <td>\n                    <button\n                      onClick={() => {\n                        handleEdit(item);\n                      }}\n                    >\n                      Edit\n                    </button>\n                  </td>\n                </tr>\n              ))\n            : null}\n        </tbody>\n      </table>\n    </>\n  );\n};\n`.trim();\nconst localStorage = `\nimport React, { useState, useEffect } from \"react\";\n\nconst App = () => {\n  const [todos, setTodos] = useState([]);\n  const [todo, setTodo] = useState(\"\");\n  const [todoEditing, setTodoEditing] = useState(null);\n  const [editingText, setEditingText] = useState(\"\");\n\n  useEffect(() => {\n    const json = localStorage.getItem(\"todos\");\n    const loadedTodos = JSON.parse(json);\n    if (loadedTodos) {\n      setTodos(loadedTodos);\n    }\n  }, []);\n\n  useEffect(() => {\n    const json = JSON.stringify(todos);\n    localStorage.setItem(\"todos\", json);\n  }, [todos]);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    const newTodo = {\n      id: new Date().getTime(),\n      text: todo,\n      completed: false,\n    };\n    setTodos([...todos].concat(newTodo));\n    setTodo(\"\");\n  }\n\n  function deleteTodo(id) {\n    let updatedTodos = [...todos].filter((todo) => todo.id !== id);\n    setTodos(updatedTodos);\n  }\n\n  function toggleComplete(id) {\n    let updatedTodos = [...todos].map((todo) => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  }\n\n  function submitEdits(id) {\n    const updatedTodos = [...todos].map((todo) => {\n      if (todo.id === id) {\n        todo.text = editingText;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n    setTodoEditing(null);\n  }\n\n  return (\n    <div id=\"todo-list\">\n      <h1>Todo List</h1>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          onChange={(e) => setTodo(e.target.value)}\n          value={todo}\n        />\n        <button type=\"submit\">Add Todo</button>\n      </form>\n      {todos.map((todo) => (\n        <div key={todo.id} className=\"todo\">\n          <div className=\"todo-text\">\n            <input\n              type=\"checkbox\"\n              id=\"completed\"\n              checked={todo.completed}\n              onChange={() => toggleComplete(todo.id)}\n            />\n            {todo.id === todoEditing ? (\n              <input\n                type=\"text\"\n                onChange={(e) => setEditingText(e.target.value)}\n              />\n            ) : (\n              <div>{todo.text}</div>\n            )}\n          </div>\n          <div className=\"todo-actions\">\n            {todo.id === todoEditing ? (\n              <button onClick={() => submitEdits(todo.id)}>Submit Edits</button>\n            ) : (\n              <button onClick={() => setTodoEditing(todo.id)}>Edit</button>\n            )}\n\n            <button onClick={() => deleteTodo(todo.id)}>Delete</button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n`.trim();\n\nclass JsonPlaceholder extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }, \"JsonPlaceholder(Curd)\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    }, \"App.js\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: mainApp,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }, \"components/\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: compos,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529\n      },\n      __self: this\n    }, \"Edit\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: edits,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }, \"Local Storage\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: localStorage,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(JsonPlaceholder);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/jsonPlaceholder.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","mainApp","trim","compos","edits","localStorage","JsonPlaceholder","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst mainApp = `\nimport React, { useState, useEffect } from \"react\";\n\nimport { User } from \"./components/User\";\nimport { AddUser } from \"./components/AddUser\";\n\nfunction App() {\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    await fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json())\n      .then((data) => setUsers(data))\n      .catch((error) => console.log(error));\n  };\n\n  const onAdd = async (name, email) => {\n    await fetch(\"https://jsonplaceholder.typicode.com/users\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        name: name,\n        email: email,\n      }),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\",\n      },\n    })\n      .then((res) => {\n        if (res.status !== 201) {\n          return;\n        } else {\n          return res.json();\n        }\n      })\n      .then((data) => {\n        setUsers((users) => [...users, data]);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  const onEdit = async (id, name, email) => {\n    await fetch('https://jsonplaceholder.typicode.com/users/'$'{id}', {\n      method: \"PUT\",\n      body: JSON.stringify({\n        name: name,\n        email: email,\n      }),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\",\n      },\n    })\n      .then((res) => {\n        if (res.status !== 200) {\n          return;\n        } else {\n          return res.json();\n        }\n      })\n      .then((data) => {\n        const updatedUsers = users.map((user) => {\n          if (user.id === id) {\n            user.name = name;\n            user.email = email;\n          }\n\n          return user;\n        });\n\n        setUsers((users) => updatedUsers);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  const onDelete = async (id) => {\n    await fetch('https://jsonplaceholder.typicode.com/users/'$'{id}', {\n      method: \"DELETE\",\n    })\n      .then((res) => {\n        if (res.status !== 200) {\n          return;\n        } else {\n          setUsers(\n            users.filter((user) => {\n              return user.id !== id;\n            })\n          );\n        }\n      })\n      .catch((error) => console.log(error));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Users</h1>\n      <AddUser onAdd={onAdd} />\n      {users.map((user) => (\n        <User\n          id={user.id}\n          key={user.id}\n          name={user.name}\n          email={user.email}\n          onEdit={onEdit}\n          onDelete={onDelete}\n        />\n      ))}\n    </div>\n  );\n}`.trim();\n\nconst compos = `\n//components/AddUser.js\nexport const AddUser = ({ onAdd }) => {\n  const handleOnSubmit = (e) => {\n    e.preventDefault();\n    onAdd(e.target.name.value, e.target.email.value);\n    e.target.name.value = \"\";\n    e.target.email.value = \"\";\n  };\n\n  return (\n    <form onSubmit={handleOnSubmit}>\n      <h3>Add User</h3>\n      <input placeholder=\"Name\" name=\"name\" />\n      <input placeholder=\"Email\" name=\"email\" />\n      <button onSubmit={handleOnSubmit}>Add</button>\n      <hr />\n    </form>\n  );\n};\n\n\n//components/User.js\nexport const User = ({ name, email, id, onEdit, onDelete }) => {\n  const [isEdit, setIsEdit] = useState(false);\n\n  const handleEdit = () => {\n    setIsEdit(!isEdit);\n  };\n\n  const handleDelete = () => {\n    onDelete(id);\n  };\n\n  const handleOnEditSubmit = (e) => {\n    e.preventDefault();\n    onEdit(id, e.target.name.value, e.target.email.value);\n    setIsEdit(!isEdit);\n  };\n\n  return (\n    <div>\n      {isEdit ? (\n        <form onSubmit={handleOnEditSubmit}>\n          <input placeholder=\"Name\" name=\"name\" defaultValue={name} />\n          <input placeholder=\"Email\" name=\"email\" defaultValue={email} />\n          <button onSubmit={handleOnEditSubmit}>Save</button>\n        </form>\n      ) : (\n        <div className=\"user\">\n          <span className=\"user-name\">{name}</span>\n          <span className=\"user-email\">{email}</span>\n          <div>\n            <button onClick={handleEdit}>Edit</button>\n            <button onClick={handleDelete}>Delete</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n`.trim();\n\nconst edits = `\n//editLists.js\nconst EditLists = (props) => {\n  const [document, setDocument] = useState(props.currentLists);\n  useEffect(() => {\n    setDocument(props.currentLists);\n  }, [props]);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n\n    setDocument({ ...document, [name]: value });\n  };\n\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        if (!document.docTitle || !document.description || !document.publisher)\n          return;\n\n        props.updateLists(document.id, document);\n      }}\n    >\n      <input\n        type=\"text\"\n        name=\"docTitle\"\n        placeholder=\"Enter Title\"\n        value={document.docTitle}\n        onChange={handleInputChange}\n      />\n      <input\n        type=\"text\"\n        name=\"description\"\n        placeholder=\"Enter Description\"\n        value={document.description}\n        onChange={handleInputChange}\n      />\n      <input\n        type=\"text\"\n        name=\"publisher\"\n        placeholder=\"Enter Publisher\"\n        value={document.publisher}\n        onChange={handleInputChange}\n      />\n      <button>Edit Document</button>\n      <button onClick={() => props.setEditing(false)}>Cancel</button>\n    </form>\n  );\n};\n\n\n\n//App.js\nimport EditLists from \"./editLists\";\n\nconst initialState = [\n  {\n    id: 1,\n    docTitle: \"document1\",\n    description: \"desc1\",\n    publisher: \"publisher1\",\n  },\n];\n\nconst App = () => {\n  const initialFormState = {\n    id: null,\n    docTitle: \"\",\n    description: \"\",\n    publisher: \"\",\n  };\n\n  const [lists, setLists] = useState(initialState);\n  const [editing, setEditing] = useState(false);\n  const [currentLists, setCurrentLists] = useState(initialFormState);\n\n  const [data, setData] = useState(initialFormState);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setData({ ...data, [name]: value });\n  };\n\n  const handleAdd = (data) => {\n    data.id = lists.length + 1;\n    setLists([...lists, data]);\n  };\n\n  const handleEdit = (data) => {\n    setEditing(true);\n    setCurrentLists({\n      id: data.id,\n      docTitle: data.docTitle,\n      description: data.description,\n      publisher: data.publisher,\n    });\n  };\n  const updateLists = (id, updatedDocument) => {\n    setEditing(false);\n    setLists(lists.map((item) => (item.id === id ? updatedDocument : item)));\n  };\n\n  return (\n    <>\n      <div className=\"row\">\n        {editing ? (\n          <EditLists\n            editing={editing}\n            setEditing={setEditing}\n            currentLists={currentLists}\n            updateLists={updateLists}\n          />\n        ) : (\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n\n              handleAdd(data);\n              setData(initialFormState);\n            }}\n          >\n            <input\n              type=\"text\"\n              name=\"docTitle\"\n              placeholder=\"Enter Title\"\n              value={data.docTitle}\n              onChange={handleInputChange}\n            />\n            <input\n              type=\"text\"\n              name=\"description\"\n              placeholder=\"Enter Description\"\n              value={data.description}\n              onChange={handleInputChange}\n            />\n            <input\n              type=\"text\"\n              name=\"publisher\"\n              placeholder=\"Enter Publisher\"\n              value={data.name}\n              onChange={handleInputChange}\n            />\n            <button>Add Document</button>\n          </form>\n        )}\n      </div>\n      <table>\n        <thead>\n          <tr>\n            <th>Title</th>\n            <th>Description</th>\n            <th>Publisher</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {lists.length > 0\n            ? lists.map((item) => (\n                <tr key={item.id}>\n                  <td>{item.docTitle}</td>\n                  <td>{item.description}</td>\n                  <td>{item.publisher}</td>\n                  <td>\n                    <button\n                      onClick={() => {\n                        handleEdit(item);\n                      }}\n                    >\n                      Edit\n                    </button>\n                  </td>\n                </tr>\n              ))\n            : null}\n        </tbody>\n      </table>\n    </>\n  );\n};\n`.trim();\n\nconst localStorage = `\nimport React, { useState, useEffect } from \"react\";\n\nconst App = () => {\n  const [todos, setTodos] = useState([]);\n  const [todo, setTodo] = useState(\"\");\n  const [todoEditing, setTodoEditing] = useState(null);\n  const [editingText, setEditingText] = useState(\"\");\n\n  useEffect(() => {\n    const json = localStorage.getItem(\"todos\");\n    const loadedTodos = JSON.parse(json);\n    if (loadedTodos) {\n      setTodos(loadedTodos);\n    }\n  }, []);\n\n  useEffect(() => {\n    const json = JSON.stringify(todos);\n    localStorage.setItem(\"todos\", json);\n  }, [todos]);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    const newTodo = {\n      id: new Date().getTime(),\n      text: todo,\n      completed: false,\n    };\n    setTodos([...todos].concat(newTodo));\n    setTodo(\"\");\n  }\n\n  function deleteTodo(id) {\n    let updatedTodos = [...todos].filter((todo) => todo.id !== id);\n    setTodos(updatedTodos);\n  }\n\n  function toggleComplete(id) {\n    let updatedTodos = [...todos].map((todo) => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  }\n\n  function submitEdits(id) {\n    const updatedTodos = [...todos].map((todo) => {\n      if (todo.id === id) {\n        todo.text = editingText;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n    setTodoEditing(null);\n  }\n\n  return (\n    <div id=\"todo-list\">\n      <h1>Todo List</h1>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          onChange={(e) => setTodo(e.target.value)}\n          value={todo}\n        />\n        <button type=\"submit\">Add Todo</button>\n      </form>\n      {todos.map((todo) => (\n        <div key={todo.id} className=\"todo\">\n          <div className=\"todo-text\">\n            <input\n              type=\"checkbox\"\n              id=\"completed\"\n              checked={todo.completed}\n              onChange={() => toggleComplete(todo.id)}\n            />\n            {todo.id === todoEditing ? (\n              <input\n                type=\"text\"\n                onChange={(e) => setEditingText(e.target.value)}\n              />\n            ) : (\n              <div>{todo.text}</div>\n            )}\n          </div>\n          <div className=\"todo-actions\">\n            {todo.id === todoEditing ? (\n              <button onClick={() => submitEdits(todo.id)}>Submit Edits</button>\n            ) : (\n              <button onClick={() => setTodoEditing(todo.id)}>Edit</button>\n            )}\n\n            <button onClick={() => deleteTodo(todo.id)}>Delete</button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n`.trim();\n\nclass JsonPlaceholder extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>JsonPlaceholder(Curd)</h3>\n              <b>App.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={mainApp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>components/</b>\n              <div style={titles}>\n                <PrismCode\n                  code={compos}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Edit</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={edits}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Local Storage</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={localStorage}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(JsonPlaceholder));\n"]},"metadata":{},"sourceType":"module"}