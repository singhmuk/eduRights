{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import PrismCode from\"../prismCode\";import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import\"../styles.css\";import Sidebar from\"../sidebar\";var titles={backgroundColor:\"#F0F8FF\",padding:\"1px\",fontSize:\"16px\"};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var code=\"\\nconst App = () => {\\n  const [input, setInput] = useState(\\\"\\\");\\n  const [output, setOuput] = useState([]);\\n\\n  const appendInput = () => {\\n    setOuput(output.concat(input));\\n  };\\n\\n  const removeInput = () => {\\n    setOuput(output.filter((items) => items.id !== items.id));\\n  };\\n\\n  return (\\n    <>\\n      <div>\\n        <input type=\\\"text\\\" onChange={(e) => setInput(e.target.value)} value={input} />\\n\\n        <button onClick={appendInput} disabled={!input}>Append</button>\\n        <button onClick={removeInput} disabled={output.length === 0}>Undo</button>\\n      </div>\\n      <div>\\n        {output.map((values) => (\\n          <text>{values} </text>\\n        ))}\\n      </div>\\n    </>\\n  );\\n};\\n\".trim();var codes=\"\\nconst App = () => {\\n  const [posts, setPosts] = useState([]);\\n  const [loading, setLoading] = useState(false);\\n  const [currentPage, setCurrentPage] = useState(1);\\n  const [postsPerPage] = useState(10);\\n\\n  useEffect(() => {\\n    const fetchPosts = async () => {\\n      setLoading(true);\\n      const res = await axios.get('https://jsonplaceholder.typicode.com/posts');\\n      setPosts(res.data);\\n      setLoading(false);\\n    };\\n\\n    fetchPosts();\\n  }, []);\\n\\n  // Get current posts\\n  const indexOfLastPost = currentPage * postsPerPage;\\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\\n\\n  // Change page\\n  const paginate = pageNumber => setCurrentPage(pageNumber);\\n\\n  return (\\n    <div className='container mt-5'>\\n      <h1 className='text-primary mb-3'>My Blog</h1>\\n      <Posts posts={currentPosts} loading={loading} />\\n      <Pagination\\n        postsPerPage={postsPerPage}\\n        totalPosts={posts.length}\\n        paginate={paginate}\\n      />\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\\n\\n//Posts.js\\nconst Posts = ({ posts, loading }) => {\\n  if (loading) {\\n    return <h2>Loading...</h2>;\\n  }\\n\\n  return (\\n    <ul className='list-group mb-4'>\\n      {posts.map(post => (\\n        <li key={post.id} className='list-group-item'>\\n          {post.title}\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n};\\n\\n\\n//Pagination.js\\nconst Pagination = ({ postsPerPage, totalPosts, paginate }) => {\\n  const pageNumbers = [];\\n\\n  for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\\n    pageNumbers.push(i);\\n  }\\n\\n  return (\\n    <nav>\\n      <ul className='pagination'>\\n        {pageNumbers.map(number => (\\n          <li key={number} className='page-item'>\\n            <a onClick={() => paginate(number)} href='!#' className='page-link'>\\n              {number}\\n            </a>\\n          </li>\\n        ))}\\n      </ul>\\n    </nav>\\n  );\\n};\\n\".trim();var translations=\"\\nclass App extends Component {\\n  state = {\\n      input: '',\\n      output: ''\\n    };\\n\\n  handleChange = (e) => {\\n    let userInput = e.target.value;\\n    this.setState({ input: userInput });\\n    \\n    for (let names of this.props.translations.keys()) {\\n      if(userInput === names) {\\n        this.setState({ output: this.props.translations.get(userInput) });     \\n      }\\n    }\\n    this.state.output = '';\\n  }\\n\\n  render() {\\n    return (\\n      <>\\n        <div>\\n          <span>input:</span>\\n          <input type=\\\"text\\\" onChange={this.handleChange} value={this.state.input}/>\\n              \\n          <span>output:</span>\\n          <input type=\\\"text\\\" readOnly value={this.state.output}/>\\n        </div>\\n      </>\\n    );\\n  }\\n}\".trim();var indexs=\"\\nconst TRANSLATIONS = new Map([\\n  ['ball', 'pelota'],\\n  ['house', 'casa'],\\n  ['dog', 'perro'],\\n  ['dogs', 'perros'],\\n  ['milk', 'leche'],\\n  ['orange', 'naranja'],\\n]);\\n\\nReactDOM.render(<App translations={TRANSLATIONS} />, document.getElementById('root'));\".trim();var TextEditors=/*#__PURE__*/function(_Component){_inherits(TextEditors,_Component);function TextEditors(){_classCallCheck(this,TextEditors);return _possibleConstructorReturn(this,_getPrototypeOf(TextEditors).apply(this,arguments));}_createClass(TextEditors,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Text Editor\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:code,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Pagination \"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:codes,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"3. Translator.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:translations,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"index.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:indexs,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null)))));}}]);return TextEditors;}(Component);export default withStyles(styles)(TextEditors);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/textEditors.js"],"names":["React","Component","PrismCode","Prism","Grid","Paper","withStyles","List","Sidebar","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","code","trim","codes","translations","indexs","TextEditors","setTimeout","highlightAll","classes","props"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,SAAP,KAAsB,cAAtB,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,UAAtB,CAAkCC,IAAlC,KAA8C,mBAA9C,CAEA,MAAO,eAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CAEA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,eAAe,CAAE,SAAnB,CAA8BC,OAAO,CAAE,KAAvC,CAA8CC,QAAQ,CAAE,MAAxD,CAAf,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,KAAD,QAAY,CACzBC,KAAK,CAAE,CACLC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH,CAELN,OAAO,CAAEG,KAAK,CAACG,OAAN,CAAc,CAAd,CAFJ,CADkB,CAKzBC,QAAQ,CAAE,CACRF,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA,CALe,CAQzBE,SAAS,CAAE,CACTC,SAAS,CAAE,QADF,CARc,CAAZ,EAAf,CAaA,GAAMC,CAAAA,IAAI,CAAG,gtBA6BXC,IA7BW,EAAb,CA+BA,GAAMC,CAAAA,KAAK,CAAG,47DAkFZD,IAlFY,EAAd,CAoFA,GAAME,CAAAA,YAAY,CAAG,wvBAgClBF,IAhCkB,EAArB,CAkCA,GAAMG,CAAAA,MAAM,CAAG,2QAUyEH,IAVzE,EAAf,C,GAYMI,CAAAA,W,+SACgB,CAClBC,UAAU,CAAC,iBAAMxB,CAAAA,KAAK,CAACyB,YAAN,EAAN,EAAD,CAA6B,CAA7B,CAAV,CACD,C,uCACQ,IACCC,CAAAA,OADD,CACa,KAAKC,KADlB,CACCD,OADD,CAEP,MACE,qBAAC,IAAD,EAAM,SAAS,KAAf,EACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEA,OAAO,CAACd,KAA1B,EACE,8BACE,oBAAC,OAAD,MADF,CADF,CADF,CADF,CAQE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,EACE,oBAAC,KAAD,EAAO,SAAS,CAAEc,OAAO,CAACd,KAA1B,EACE,oBAAC,IAAD,MACE,+CADF,CAEE,2BAAK,KAAK,CAAEN,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEY,IADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAFF,CASE,8BATF,CAWE,+CAXF,CAYE,2BAAK,KAAK,CAAEZ,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEc,KADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAZF,CAmBE,8BAnBF,CAoBE,8BApBF,CAqBE,gDArBF,CAsBE,2BAAK,KAAK,CAAEd,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEe,YADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAtBF,CA6BE,8BA7BF,CA8BE,8BA9BF,CAgCE,wCAhCF,CAiCE,2BAAK,KAAK,CAAEf,MAAZ,EACE,oBAAC,SAAD,EACE,IAAI,CAAEgB,MADR,CAEE,QAAQ,CAAC,IAFX,CAGE,OAAO,CAAE,CAAC,cAAD,CAHX,EADF,CAjCF,CAwCE,8BAxCF,CADF,CADF,CARF,CADF,CAyDD,C,yBA/DuBxB,S,EAkE1B,cAAeK,CAAAA,UAAU,CAACO,MAAD,CAAV,CAAmBa,WAAnB,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport PrismCode from \"../prismCode\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../styles.css\";\nimport Sidebar from \"../sidebar\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst code = `\nconst App = () => {\n  const [input, setInput] = useState(\"\");\n  const [output, setOuput] = useState([]);\n\n  const appendInput = () => {\n    setOuput(output.concat(input));\n  };\n\n  const removeInput = () => {\n    setOuput(output.filter((items) => items.id !== items.id));\n  };\n\n  return (\n    <>\n      <div>\n        <input type=\"text\" onChange={(e) => setInput(e.target.value)} value={input} />\n\n        <button onClick={appendInput} disabled={!input}>Append</button>\n        <button onClick={removeInput} disabled={output.length === 0}>Undo</button>\n      </div>\n      <div>\n        {output.map((values) => (\n          <text>{values} </text>\n        ))}\n      </div>\n    </>\n  );\n};\n`.trim();\n\nconst codes = `\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(10);\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      setLoading(true);\n      const res = await axios.get('https://jsonplaceholder.typicode.com/posts');\n      setPosts(res.data);\n      setLoading(false);\n    };\n\n    fetchPosts();\n  }, []);\n\n  // Get current posts\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\n\n  // Change page\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return (\n    <div className='container mt-5'>\n      <h1 className='text-primary mb-3'>My Blog</h1>\n      <Posts posts={currentPosts} loading={loading} />\n      <Pagination\n        postsPerPage={postsPerPage}\n        totalPosts={posts.length}\n        paginate={paginate}\n      />\n    </div>\n  );\n};\n\nexport default App;\n\n\n//Posts.js\nconst Posts = ({ posts, loading }) => {\n  if (loading) {\n    return <h2>Loading...</h2>;\n  }\n\n  return (\n    <ul className='list-group mb-4'>\n      {posts.map(post => (\n        <li key={post.id} className='list-group-item'>\n          {post.title}\n        </li>\n      ))}\n    </ul>\n  );\n};\n\n\n//Pagination.js\nconst Pagination = ({ postsPerPage, totalPosts, paginate }) => {\n  const pageNumbers = [];\n\n  for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  return (\n    <nav>\n      <ul className='pagination'>\n        {pageNumbers.map(number => (\n          <li key={number} className='page-item'>\n            <a onClick={() => paginate(number)} href='!#' className='page-link'>\n              {number}\n            </a>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n`.trim();\n\nconst translations = `\nclass App extends Component {\n  state = {\n      input: '',\n      output: ''\n    };\n\n  handleChange = (e) => {\n    let userInput = e.target.value;\n    this.setState({ input: userInput });\n    \n    for (let names of this.props.translations.keys()) {\n      if(userInput === names) {\n        this.setState({ output: this.props.translations.get(userInput) });     \n      }\n    }\n    this.state.output = '';\n  }\n\n  render() {\n    return (\n      <>\n        <div>\n          <span>input:</span>\n          <input type=\"text\" onChange={this.handleChange} value={this.state.input}/>\n              \n          <span>output:</span>\n          <input type=\"text\" readOnly value={this.state.output}/>\n        </div>\n      </>\n    );\n  }\n}`.trim();\n\nconst indexs = `\nconst TRANSLATIONS = new Map([\n  ['ball', 'pelota'],\n  ['house', 'casa'],\n  ['dog', 'perro'],\n  ['dogs', 'perros'],\n  ['milk', 'leche'],\n  ['orange', 'naranja'],\n]);\n\nReactDOM.render(<App translations={TRANSLATIONS} />, document.getElementById('root'));`.trim();\n\nclass TextEditors extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Text Editor</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={code}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Pagination </h3>\n              <div style={titles}>\n                <PrismCode\n                  code={codes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>3. Translator.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={translations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>index.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={indexs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(TextEditors);\n"]},"metadata":{},"sourceType":"module"}