{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/numberFormats.js\";\nimport React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../prismCode\";\nconst titles = {\n  backgroundColor: \"#F0F8FF\",\n  padding: \"1px\",\n  fontSize: \"16px\"\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst randoms = `\nconst App = () => {\n  const [number, setNumber] = useState(null);\n\n  const handleNum = () => {\n    const random = Math.floor(Math.random() * 10) + 1;\n    setNumber(random);\n  };\n\n  return (\n    <div>\n      <p>\n        <p>The random number is: {number}</p>\n      </p>\n      <button onClick={handleNum}>Generate Random Number</button>\n    </div>\n  );\n};\n`.trim();\nconst numberLib = ``.trim();\nconst numberFor = ``.trim();\nconst converts = `\n\n      return;\n    }\n    if (decimalValue !== '') {\n      setDecimal(decimalValue);\n      setBinary(toBinary(decimalValue));\n    } else {\n      setDecimal('');\n      setBinary('');\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setDecimal(toDecimal(binary));\n  };\n\n  let binaryErrorMessage = 'Enter only Binary value (either 0 or 1)';\n  let numberErrorMessage = 'Enter only Numbers';\n\n  return (\n    <div className=\"converter\">\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Binary\"\n          onChange={handleBinaryChange}\n          value={binary}\n        />\n        {/* <input type=\"submit\" value=\"Convert\" disabled={binaryError} /> */}\n        <input type=\"text\" placeholder=\"Decimal\" onChange={handleDecimalChange} value={binaryError ? '' : decimal}\n          disabled={binaryError}\n        />\n        <span className={error-msg '$'{binaryError || numberError ? 'fadeIn' : ''} }>\n          {binaryError && binaryErrorMessage}\n          {numberError && numberErrorMessage}\n        </span>\n      </form>\n    </div>\n  );\n};\n`.trim();\nconst pureComp = `\n//1 form validation\nconst initialState = {\n  name: '',\n  email: '',\n  password: '',\n  nameError: '',\n  emailError: '',\n  passwordError: '',\n}\n\nclass App extends Component{\n  state = initialState;\n  \n  handleChange = (e) => {\n     const isCheched = e.target.type === \"checkText\";\n     this.setState({\n        [e.target.name]: isCheched ? e.target.checked : e.target.value\n     })\n  };\n  \n  validate = () => {\n     let nameError = '';\n     let emailError = '';\n     let passwordError = '';\n     \n     if(!this.state.name){\n        nameError = \"Name Canot be blank\";\n     }\n     \n     if(!this.state.email.includes(\"@\")){\n        emailError = \"Invalid email\";\n     }\n     \n     if(!this.state.password){\n        passwordError = \"Password not be too small\";\n     }\n     \n     if(emailError || nameError || passwordError){\n        this.setState({emailError, nameError, passwordError})\n        return false;\n     }\n     return true;\n  }\n  \n  handleSubmit = (e) => {\n     e.preventDefault();\n     const isValid = this.validate();\n     if(isValid){\n     console.log(this.state);\n     this.setState({initialState});\n     }\n  }\n  \n  render(){\n     return(\n        <>\n           <form onSubmit={this.handleSubmit}>\n              <input name=\"name\" value={this.state.name} onChange={this.handleChange} />\n              <div style={{color:'red'}}>{this.state.nameError}</div>\n              <br/>\n              <input name=\"email\" value={this.state.email} onChange={this.handleChange} />\n              <div style={{color:'red'}}>{this.state.emailError}</div>\n              <br/>\n              <input name=\"password\" value={this.state.password} onChange={this.handleChange} />\n              <div style={{color:'red'}}>{this.state.passwordError}</div>\n              <br/>\n              <br/>\n              <button type=\"submit\">Submit</button>\n           </form>\n        </>\n     );\n  }\n}\n\n\n//2 Verify on input\nimport validateInput from './validateInput';\n\n\nclass Props extends Component {\n  state = {\n      name: \"\",\n      nameError: \"\",\n      email: \"\",\n      emailError: \"\"\n      };\n\n  handleInputChange = e => {\n        let input = e.target;\n        let errors = validateInput(input);\n        this.setState({ ...this.state, [input.name]: input.value, ...errors });\n    };\n\n    onBlur = e => {\n      let input = e.target;\n      this.setState({ ...this.state, [input.name]: input.value });\n\n      setTimeout(() => { \n          if (!input.contains(document.activeElement)) {\n            let errors = validateInput(input); \n            this.setState({ ...this.state, ...errors });\n          }\n      }, 0);\n  };\n\n  handleSubmit = (e) => {\n      e.preventDefault();\n\n      console.log(e.target.name.value);\n      let errors = validateInput(e.target.name, e.target.email); \n      this.setState({ ...this.state, ...errors }); \n\n      let nameError = this.state.nameError;\n      let emailError = this.state.emailError;\n\n      if (nameError !== \"\" || typeof nameError !== 'undefined'  || emailError !== \"\" || typeof emailError !== 'undefined')\n       {}\n  }\n\n  render() {\n      return (\n          <div>\n            <form onSubmit={this.handleSubmit}>\n              <div> \n                <label htmlFor=\"name\">Name</label>\n                <p>{this.state.nameError}</p>\n                <input type=\"text\" value={this.state.name} name=\"name\" onChange={this.handleInputChange} \n                  onBlur={this.onBlur} placeholder=\"bob\" data-validation-type=\"name\" required />\n              </div>\n              <div>\n                <label htmlFor=\"email\">Email</label>\n                <p>{this.state.emailError}</p>\n                <input type=\"email\" value={this.state.email} name=\"email\" onChange={this.handleInputChange} \n                  onBlur={this.onBlur} placeholder=\"bob@bobsplace.com\" data-validation-type=\"email\" required />\n              </div>\n\n                <p>Recieve notifications by (wip)</p>\n\n                <label>\n                    <input onChange={this.handleInputChange} name=\"notificationRadio\" type=\"radio\" value=\"email\" />\n                    Email\n                </label>\n\n                <label>\n                    <input onChange={this.handleInputChange} name=\"notificationRadio\" type=\"radio\" value=\"text\" />\n                    Text\n                </label>\n\n                <button type=\"submit\">Sumbit</button>\n\n                <table>\n                    <tbody>\n                        <tr>\n                            <td colSpan=\"2\"> <b>current state</b> </td>\n                        </tr>\n                        <tr>\n                            <td>name</td>\n                            <td> {this.state.name}</td>\n                        </tr>\n                        <tr>\n                            <td>nameError</td>\n                            <td> {this.state.nameError}</td>\n                        </tr>\n                        <tr>\n                            <td>email</td>\n                            <td> {this.state.email}</td>\n                        </tr>\n                        <tr>\n                            <td>emailError</td>\n                            <td> {this.state.emailError}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </form>\n          </div>\n      );\n  }\n}\n\n\n//validateInput.js\nvar emailRegex = /^S+@S+.S+$/;\nvar nameRegex = /^[a-zA-Z]/;\nvar mobileRegex = /^07[0-9]{9,10}$/;\n\n\nfunction validateInput() {\n    let errors = {};\n    \n    for (var i = 0 ; i < arguments.length ; i += 1) {       \n        let input = arguments[i];\n        let validationType = input.getAttribute(\"data-validation-type\");\n        if (validationType === null) validationType = input.type;\n        let errorName = input.name + \"Error\";\n        console.log(\"input validation attr:\", input.getAttribute(\"data-validation-type\"), \"input.value:\", input.value);\n\n        errors[errorName] = \"\";\n\n        if (input.value === \"\" || input.value.length === 0) {\n            errors[errorName] = \"please fill this in\";\n        } \n        else if (validationType === \"name\") {\n            if (input.value.match(nameRegex) === null || input.value.length < 3) {\n                errors[errorName] = \"Name must be at least 3 characters\";\n            }\n        } \n        else if (validationType === \"email\") {\n            if (input.value.match(emailRegex) === null) {\n                errors[errorName] = \"Email must be a valid email\";\n            }\n        }\n    }\n\n    return errors;\n}`.trim();\n\nclass NumberForm extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, \"1. Random Number\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: randoms,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, \"2. Number format\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: numberLib,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, \"3. Number format without lib\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: numberFor,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, \"4. Convert Binary to Decimal\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: converts,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }, \"5. Form Validation\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: pureComp,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default withStyles(styles)(NumberForm);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/numberFormats.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","randoms","trim","numberLib","numberFor","converts","pureComp","NumberForm","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst randoms = `\nconst App = () => {\n  const [number, setNumber] = useState(null);\n\n  const handleNum = () => {\n    const random = Math.floor(Math.random() * 10) + 1;\n    setNumber(random);\n  };\n\n  return (\n    <div>\n      <p>\n        <p>The random number is: {number}</p>\n      </p>\n      <button onClick={handleNum}>Generate Random Number</button>\n    </div>\n  );\n};\n`.trim();\n\nconst numberLib = ``.trim();\n\nconst numberFor = ``.trim();\n\nconst converts = `\n\n      return;\n    }\n    if (decimalValue !== '') {\n      setDecimal(decimalValue);\n      setBinary(toBinary(decimalValue));\n    } else {\n      setDecimal('');\n      setBinary('');\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setDecimal(toDecimal(binary));\n  };\n\n  let binaryErrorMessage = 'Enter only Binary value (either 0 or 1)';\n  let numberErrorMessage = 'Enter only Numbers';\n\n  return (\n    <div className=\"converter\">\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Binary\"\n          onChange={handleBinaryChange}\n          value={binary}\n        />\n        {/* <input type=\"submit\" value=\"Convert\" disabled={binaryError} /> */}\n        <input type=\"text\" placeholder=\"Decimal\" onChange={handleDecimalChange} value={binaryError ? '' : decimal}\n          disabled={binaryError}\n        />\n        <span className={error-msg '$'{binaryError || numberError ? 'fadeIn' : ''} }>\n          {binaryError && binaryErrorMessage}\n          {numberError && numberErrorMessage}\n        </span>\n      </form>\n    </div>\n  );\n};\n`.trim();\n\nconst pureComp = `\n//1 form validation\nconst initialState = {\n  name: '',\n  email: '',\n  password: '',\n  nameError: '',\n  emailError: '',\n  passwordError: '',\n}\n\nclass App extends Component{\n  state = initialState;\n  \n  handleChange = (e) => {\n     const isCheched = e.target.type === \"checkText\";\n     this.setState({\n        [e.target.name]: isCheched ? e.target.checked : e.target.value\n     })\n  };\n  \n  validate = () => {\n     let nameError = '';\n     let emailError = '';\n     let passwordError = '';\n     \n     if(!this.state.name){\n        nameError = \"Name Canot be blank\";\n     }\n     \n     if(!this.state.email.includes(\"@\")){\n        emailError = \"Invalid email\";\n     }\n     \n     if(!this.state.password){\n        passwordError = \"Password not be too small\";\n     }\n     \n     if(emailError || nameError || passwordError){\n        this.setState({emailError, nameError, passwordError})\n        return false;\n     }\n     return true;\n  }\n  \n  handleSubmit = (e) => {\n     e.preventDefault();\n     const isValid = this.validate();\n     if(isValid){\n     console.log(this.state);\n     this.setState({initialState});\n     }\n  }\n  \n  render(){\n     return(\n        <>\n           <form onSubmit={this.handleSubmit}>\n              <input name=\"name\" value={this.state.name} onChange={this.handleChange} />\n              <div style={{color:'red'}}>{this.state.nameError}</div>\n              <br/>\n              <input name=\"email\" value={this.state.email} onChange={this.handleChange} />\n              <div style={{color:'red'}}>{this.state.emailError}</div>\n              <br/>\n              <input name=\"password\" value={this.state.password} onChange={this.handleChange} />\n              <div style={{color:'red'}}>{this.state.passwordError}</div>\n              <br/>\n              <br/>\n              <button type=\"submit\">Submit</button>\n           </form>\n        </>\n     );\n  }\n}\n\n\n//2 Verify on input\nimport validateInput from './validateInput';\n\n\nclass Props extends Component {\n  state = {\n      name: \"\",\n      nameError: \"\",\n      email: \"\",\n      emailError: \"\"\n      };\n\n  handleInputChange = e => {\n        let input = e.target;\n        let errors = validateInput(input);\n        this.setState({ ...this.state, [input.name]: input.value, ...errors });\n    };\n\n    onBlur = e => {\n      let input = e.target;\n      this.setState({ ...this.state, [input.name]: input.value });\n\n      setTimeout(() => { \n          if (!input.contains(document.activeElement)) {\n            let errors = validateInput(input); \n            this.setState({ ...this.state, ...errors });\n          }\n      }, 0);\n  };\n\n  handleSubmit = (e) => {\n      e.preventDefault();\n\n      console.log(e.target.name.value);\n      let errors = validateInput(e.target.name, e.target.email); \n      this.setState({ ...this.state, ...errors }); \n\n      let nameError = this.state.nameError;\n      let emailError = this.state.emailError;\n\n      if (nameError !== \"\" || typeof nameError !== 'undefined'  || emailError !== \"\" || typeof emailError !== 'undefined')\n       {}\n  }\n\n  render() {\n      return (\n          <div>\n            <form onSubmit={this.handleSubmit}>\n              <div> \n                <label htmlFor=\"name\">Name</label>\n                <p>{this.state.nameError}</p>\n                <input type=\"text\" value={this.state.name} name=\"name\" onChange={this.handleInputChange} \n                  onBlur={this.onBlur} placeholder=\"bob\" data-validation-type=\"name\" required />\n              </div>\n              <div>\n                <label htmlFor=\"email\">Email</label>\n                <p>{this.state.emailError}</p>\n                <input type=\"email\" value={this.state.email} name=\"email\" onChange={this.handleInputChange} \n                  onBlur={this.onBlur} placeholder=\"bob@bobsplace.com\" data-validation-type=\"email\" required />\n              </div>\n\n                <p>Recieve notifications by (wip)</p>\n\n                <label>\n                    <input onChange={this.handleInputChange} name=\"notificationRadio\" type=\"radio\" value=\"email\" />\n                    Email\n                </label>\n\n                <label>\n                    <input onChange={this.handleInputChange} name=\"notificationRadio\" type=\"radio\" value=\"text\" />\n                    Text\n                </label>\n\n                <button type=\"submit\">Sumbit</button>\n\n                <table>\n                    <tbody>\n                        <tr>\n                            <td colSpan=\"2\"> <b>current state</b> </td>\n                        </tr>\n                        <tr>\n                            <td>name</td>\n                            <td> {this.state.name}</td>\n                        </tr>\n                        <tr>\n                            <td>nameError</td>\n                            <td> {this.state.nameError}</td>\n                        </tr>\n                        <tr>\n                            <td>email</td>\n                            <td> {this.state.email}</td>\n                        </tr>\n                        <tr>\n                            <td>emailError</td>\n                            <td> {this.state.emailError}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </form>\n          </div>\n      );\n  }\n}\n\n\n//validateInput.js\nvar emailRegex = /^S+@S+.S+$/;\nvar nameRegex = /^[a-zA-Z]/;\nvar mobileRegex = /^07[0-9]{9,10}$/;\n\n\nfunction validateInput() {\n    let errors = {};\n    \n    for (var i = 0 ; i < arguments.length ; i += 1) {       \n        let input = arguments[i];\n        let validationType = input.getAttribute(\"data-validation-type\");\n        if (validationType === null) validationType = input.type;\n        let errorName = input.name + \"Error\";\n        console.log(\"input validation attr:\", input.getAttribute(\"data-validation-type\"), \"input.value:\", input.value);\n\n        errors[errorName] = \"\";\n\n        if (input.value === \"\" || input.value.length === 0) {\n            errors[errorName] = \"please fill this in\";\n        } \n        else if (validationType === \"name\") {\n            if (input.value.match(nameRegex) === null || input.value.length < 3) {\n                errors[errorName] = \"Name must be at least 3 characters\";\n            }\n        } \n        else if (validationType === \"email\") {\n            if (input.value.match(emailRegex) === null) {\n                errors[errorName] = \"Email must be a valid email\";\n            }\n        }\n    }\n\n    return errors;\n}`.trim();\n\nclass NumberForm extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Random Number</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={randoms}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>2. Number format</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={numberLib}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>3. Number format without lib</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={numberFor}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>4. Convert Binary to Decimal</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={converts}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. Form Validation</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={pureComp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(NumberForm);\n"]},"metadata":{},"sourceType":"module"}