{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var serverComp=\"\\nconst express = require(\\\"express\\\");\\nconst app = express();\\nconst mongoose = require(\\\"mongoose\\\");\\nconst cors = require(\\\"cors\\\");\\n\\nmongoose.connect(\\\"mongodb://localhost/pagination\\\", {\\n  useUnifiedTopology: true,\\n  useNewUrlParser: true,\\n});\\n\\nconst postSchema = new mongoose.Schema({\\n  text: String,\\n  title: String,\\n});\\n\\nconst Post = mongoose.model(\\\"Post\\\", postSchema);\\n\\napp.use(cors());\\napp.use(express.json());\\n\\napp.get(\\\"/posts\\\", async (req, res) => {\\n  const PAGE_SIZE = 3;\\n  const page = parseInt(req.query.page || \\\"0\\\");\\n  const total = await Post.countDocuments({});\\n  const posts = await Post.find({})\\n    .limit(PAGE_SIZE)\\n    .skip(PAGE_SIZE * page);\\n  res.json({\\n    totalPages: Math.ceil(total / PAGE_SIZE),\\n    posts,\\n  });\\n});\\n\\nconst db = mongoose.connection;\\n\\ndb.once(\\\"open\\\", () => {\\n  app.listen(4000);\\n});\\n\".trim();var appComponents=\"\\nimport \\\"./App.css\\\";\\nimport { useEffect, useState } from \\\"react\\\";\\n\\nfunction App() {\\n  const [pageNumber, setPageNumber] = useState(0);\\n  const [numberOfPages, setNumberOfPages] = useState(0);\\n  const [posts, setPosts] = useState([]);\\n\\n  const pages = new Array(numberOfPages).fill(null).map((v, i) => i);\\n\\n  useEffect(() => {\\n    fetch('http://localhost:4000/posts?page='$'{pageNumber}')\\n      .then((response) => response.json())\\n      .then(({ totalPages, posts }) => {\\n        setPosts(posts);\\n        setNumberOfPages(totalPages);\\n      });\\n  }, [pageNumber]);\\n\\n  const gotoPrevious = () => {\\n    setPageNumber(Math.max(0, pageNumber - 1));\\n  };\\n\\n  const gotoNext = () => {\\n    setPageNumber(Math.min(numberOfPages - 1, pageNumber + 1));\\n  };\\n\\n  return (\\n    <div className=\\\"App\\\">\\n      <h3>Page of {pageNumber + 1}</h3>\\n\\n      {posts.map((post) => (\\n        <div key={post._id} className=\\\"post\\\">\\n          <h4>{post.title}</h4>\\n          <p>{post.text}</p>\\n        </div>\\n      ))}\\n\\n      <button onClick={gotoPrevious}>Previous</button>\\n      {pages.map((pageIndex) => (\\n        <button key={pageIndex} onClick={() => setPageNumber(pageIndex)}>\\n          {pageIndex + 1}\\n        </button>\\n      ))}\\n      <button onClick={gotoNext}>Next</button>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\".trim();var serverPush=\"\\nconst express = require(\\\"express\\\");\\nconst webpush = require(\\\"web-push\\\");\\nconst bodyParser = require(\\\"body-parser\\\");\\nconst path = require(\\\"path\\\");\\n\\nconst app = express();\\n\\napp.use(express.static(path.join(__dirname, \\\"client\\\")));\\n\\napp.use(bodyParser.json());\\n\\nconst publicVapidKey =\\n  \\\"BJthRQ5myDgc7OSXzPCMftGw-n16F7zQBEN7EUD6XxcfTTvrLGWSIG7y_JxiWtVlCFua0S8MTB5rPziBqNx1qIo\\\";\\nconst privateVapidKey = \\\"3KzvKasA2SoCxsp0iIG_o9B0Ozvl1XDwI63JRKNIWBM\\\";\\n\\nwebpush.setVapidDetails(\\n  \\\"mailto:test@test.com\\\",\\n  publicVapidKey,\\n  privateVapidKey\\n);\\n\\napp.post(\\\"/subscribe\\\", (req, res) => {\\n  const subscription = req.body;\\n\\n  res.status(201).json({});\\n\\n  const payload = JSON.stringify({ title: \\\"Push Test\\\" });\\n\\n  // Pass object into sendNotification\\n  webpush\\n    .sendNotification(subscription, payload)\\n    .catch(err => console.error(err));\\n});\\n\\nconst port = 5000;\\n\\napp.listen(port, () => console.log(Server started on port '$'{port}));\\n\".trim();var worker=\"\\nconsole.log(\\\"Service Worker Loaded...\\\");\\n\\nself.addEventListener(\\\"push\\\", e => {\\n  const data = e.data.json();\\n  console.log(\\\"Push Recieved...\\\");\\n  self.registration.showNotification(data.title, {\\n    body: \\\"Notified by Traversy Media!\\\",\\n    icon: \\\"http://image.ibb.co/frYOFd/tmlogo.png\\\"\\n  });\\n});\\n\".trim();var clientApp=\"\\nconst publicVapidKey =\\n  \\\"BJthRQ5myDgc7OSXzPCMftGw-n16F7zQBEN7EUD6XxcfTTvrLGWSIG7y_JxiWtVlCFua0S8MTB5rPziBqNx1qIo\\\";\\n\\n// Check for service worker\\nif (\\\"serviceWorker\\\" in navigator) {\\n  send().catch(err => console.error(err));\\n}\\n\\nasync function send() {\\n  // Register Service Worker\\n  console.log(\\\"Registering service worker...\\\");\\n  const register = await navigator.serviceWorker.register(\\\"/worker.js\\\", {\\n    scope: \\\"/\\\"\\n  });\\n\\n  \\n  const subscription = await register.pushManager.subscribe({\\n    userVisibleOnly: true,\\n    applicationServerKey: urlBase64ToUint8Array(publicVapidKey)\\n  });\\n\\n  \\n  await fetch(\\\"/subscribe\\\", {\\n    method: \\\"POST\\\",\\n    body: JSON.stringify(subscription),\\n    headers: {\\n      \\\"content-type\\\": \\\"application/json\\\"\\n    }\\n  });\\n}\\n\\nfunction urlBase64ToUint8Array(base64String) {\\n  const padding = \\\"=\\\".repeat((4 - base64String.length % 4) % 4);\\n  const base64 = (base64String + padding)\\n    .replace(/-/g, \\\"+\\\")\\n    .replace(/_/g, \\\"/\\\");\\n\\n  const rawData = window.atob(base64);\\n  const outputArray = new Uint8Array(rawData.length);\\n\\n  for (let i = 0; i < rawData.length; ++i) {\\n    outputArray[i] = rawData.charCodeAt(i);\\n  }\\n  return outputArray;\\n}\\n\".trim();var indexApp=\"\\n<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\">\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n  <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"ie=edge\\\">\\n  <title>Push Notifications Using Node</title>\\n</head>\\n\\n<body>\\n  <h1>Push Notifications Using Node</h1>\\n  <script src=\\\"client.js\\\"></script>\\n</body>\\n\\n</html>\".trim();var PaginationsMerns=/*#__PURE__*/function(_Component){_inherits(PaginationsMerns,_Component);function PaginationsMerns(){_classCallCheck(this,PaginationsMerns);return _possibleConstructorReturn(this,_getPrototypeOf(PaginationsMerns).apply(this,arguments));}_createClass(PaginationsMerns,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Pagination\"),React.createElement(\"b\",null,\"server/server.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:serverComp,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"client/App.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:appComponents,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2.node_push_notifications\"),React.createElement(\"b\",null,\"server/server.js\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:serverPush,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Client\"),React.createElement(\"b\",null,\"client/worker.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:worker,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"client/client.js\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:clientApp,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"client/index.html\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:indexApp,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return PaginationsMerns;}(Component);export default withStyles(styles)(PaginationsMerns);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/mern/projects/paginationsMern.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","serverComp","trim","appComponents","serverPush","worker","clientApp","indexApp","PaginationsMerns","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst serverComp = `\nconst express = require(\"express\");\nconst app = express();\nconst mongoose = require(\"mongoose\");\nconst cors = require(\"cors\");\n\nmongoose.connect(\"mongodb://localhost/pagination\", {\n  useUnifiedTopology: true,\n  useNewUrlParser: true,\n});\n\nconst postSchema = new mongoose.Schema({\n  text: String,\n  title: String,\n});\n\nconst Post = mongoose.model(\"Post\", postSchema);\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/posts\", async (req, res) => {\n  const PAGE_SIZE = 3;\n  const page = parseInt(req.query.page || \"0\");\n  const total = await Post.countDocuments({});\n  const posts = await Post.find({})\n    .limit(PAGE_SIZE)\n    .skip(PAGE_SIZE * page);\n  res.json({\n    totalPages: Math.ceil(total / PAGE_SIZE),\n    posts,\n  });\n});\n\nconst db = mongoose.connection;\n\ndb.once(\"open\", () => {\n  app.listen(4000);\n});\n`.trim();\n\nconst appComponents = `\nimport \"./App.css\";\nimport { useEffect, useState } from \"react\";\n\nfunction App() {\n  const [pageNumber, setPageNumber] = useState(0);\n  const [numberOfPages, setNumberOfPages] = useState(0);\n  const [posts, setPosts] = useState([]);\n\n  const pages = new Array(numberOfPages).fill(null).map((v, i) => i);\n\n  useEffect(() => {\n    fetch('http://localhost:4000/posts?page='$'{pageNumber}')\n      .then((response) => response.json())\n      .then(({ totalPages, posts }) => {\n        setPosts(posts);\n        setNumberOfPages(totalPages);\n      });\n  }, [pageNumber]);\n\n  const gotoPrevious = () => {\n    setPageNumber(Math.max(0, pageNumber - 1));\n  };\n\n  const gotoNext = () => {\n    setPageNumber(Math.min(numberOfPages - 1, pageNumber + 1));\n  };\n\n  return (\n    <div className=\"App\">\n      <h3>Page of {pageNumber + 1}</h3>\n\n      {posts.map((post) => (\n        <div key={post._id} className=\"post\">\n          <h4>{post.title}</h4>\n          <p>{post.text}</p>\n        </div>\n      ))}\n\n      <button onClick={gotoPrevious}>Previous</button>\n      {pages.map((pageIndex) => (\n        <button key={pageIndex} onClick={() => setPageNumber(pageIndex)}>\n          {pageIndex + 1}\n        </button>\n      ))}\n      <button onClick={gotoNext}>Next</button>\n    </div>\n  );\n}\n\nexport default App;\n`.trim();\n\nconst serverPush = `\nconst express = require(\"express\");\nconst webpush = require(\"web-push\");\nconst bodyParser = require(\"body-parser\");\nconst path = require(\"path\");\n\nconst app = express();\n\napp.use(express.static(path.join(__dirname, \"client\")));\n\napp.use(bodyParser.json());\n\nconst publicVapidKey =\n  \"BJthRQ5myDgc7OSXzPCMftGw-n16F7zQBEN7EUD6XxcfTTvrLGWSIG7y_JxiWtVlCFua0S8MTB5rPziBqNx1qIo\";\nconst privateVapidKey = \"3KzvKasA2SoCxsp0iIG_o9B0Ozvl1XDwI63JRKNIWBM\";\n\nwebpush.setVapidDetails(\n  \"mailto:test@test.com\",\n  publicVapidKey,\n  privateVapidKey\n);\n\napp.post(\"/subscribe\", (req, res) => {\n  const subscription = req.body;\n\n  res.status(201).json({});\n\n  const payload = JSON.stringify({ title: \"Push Test\" });\n\n  // Pass object into sendNotification\n  webpush\n    .sendNotification(subscription, payload)\n    .catch(err => console.error(err));\n});\n\nconst port = 5000;\n\napp.listen(port, () => console.log(Server started on port '$'{port}));\n`.trim();\n\nconst worker = `\nconsole.log(\"Service Worker Loaded...\");\n\nself.addEventListener(\"push\", e => {\n  const data = e.data.json();\n  console.log(\"Push Recieved...\");\n  self.registration.showNotification(data.title, {\n    body: \"Notified by Traversy Media!\",\n    icon: \"http://image.ibb.co/frYOFd/tmlogo.png\"\n  });\n});\n`.trim();\n\nconst clientApp = `\nconst publicVapidKey =\n  \"BJthRQ5myDgc7OSXzPCMftGw-n16F7zQBEN7EUD6XxcfTTvrLGWSIG7y_JxiWtVlCFua0S8MTB5rPziBqNx1qIo\";\n\n// Check for service worker\nif (\"serviceWorker\" in navigator) {\n  send().catch(err => console.error(err));\n}\n\nasync function send() {\n  // Register Service Worker\n  console.log(\"Registering service worker...\");\n  const register = await navigator.serviceWorker.register(\"/worker.js\", {\n    scope: \"/\"\n  });\n\n  \n  const subscription = await register.pushManager.subscribe({\n    userVisibleOnly: true,\n    applicationServerKey: urlBase64ToUint8Array(publicVapidKey)\n  });\n\n  \n  await fetch(\"/subscribe\", {\n    method: \"POST\",\n    body: JSON.stringify(subscription),\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  });\n}\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = \"=\".repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, \"+\")\n    .replace(/_/g, \"/\");\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n`.trim();\n\nconst indexApp = `\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Push Notifications Using Node</title>\n</head>\n\n<body>\n  <h1>Push Notifications Using Node</h1>\n  <script src=\"client.js\"></script>\n</body>\n\n</html>`.trim();\n\n\nclass PaginationsMerns extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Pagination</h3>\n              <b>server/server.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={serverComp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>client/App.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={appComponents}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>2.node_push_notifications</h3>\n              <b>server/server.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={serverPush}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Client</h3>\n              <b>client/worker.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={worker}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>client/client.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={clientApp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>client/index.html</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={indexApp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(PaginationsMerns));\n"]},"metadata":{},"sourceType":"module"}