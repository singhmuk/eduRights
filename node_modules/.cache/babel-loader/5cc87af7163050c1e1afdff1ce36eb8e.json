{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/mongoDB/deepMongodb/mongoQueries.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst arraysSchema = `\nconst arraysSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: Number,          //count number of messages\n  nameHistory: [String],      //every time name chage\n  testScore: [Number]\n})\n\nmodule.exports = mongoose.model('arraysOp', arraysSchema);\n\n\n//controllers\nconst Users = require('../models/arrayOp');\n\nrouter.all = async (req, res) => {\n    Users.find()\n      .sort({ date: -1 })\n      .then(main => res.json(main));\n}\n\nrouter.search = async (req, res) => {\n    Users.find({\n      testScore: { $all: [10, 20, 30] }\n    })\n      .then(main => res.json(main))\n}\n\nrouter.size = async (req, res) => {\n    Users.find({\n      testScore: { $size: 3 }\n    })\n      .then(main => res.json(main))\n}\n\nrouter.elementMatch = async (req, res) => {\n    Users.find({\n      testScore: { $elemMatch: { $gt: 20 } }\n    })\n      .then(main => res.json(main))\n}\n\nrouter.creates = async = (req, res) => {\n    const newUsers = new Users({\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n      testScore: req.body.testScore,\n    })\n\n    newUsers.save().then(item => res.json(item));\n}\n`.trim();\nconst conditional = `\nconst reqString = { type: String, required: true }\n\nconst messageSchema = new Schema({\n  userId: reqString,\n  text: reqString\n})\n\nconst userSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  level: Number,\n  messages: [messageSchema],\n  nameHistory: [String]\n}, {\n  timeStamps: true\n})\n\nmodule.exports = mongoose.model('conditional', userSchema);\n\n\n//controllers\nconst Items = require('../models/conditional');\n\nrouter.findLevel = async (req, res) => {\n    //Search an user level > 10\n    Items.find({\n      level: {\n        $exists: true,                    //check value exixt or not\n        // $gte: 10, $lt: 15               //gte = greater than or equal to\n      }\n    })\n      .then(main => res.json(main));\n}\n\nrouter.messages = async (req, res) => {\n    Items.findOne({\n      'messages.text': 'Text'\n    })\n      .then(main => res.json(main));\n}\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Items({\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n      level: req.body.level,\n    })\n\n    newItems.save().then(item => res.json(item));\n}\n`.trim();\nconst increase = `\nconst reqString = { type: String, required: true }\n\nconst userSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: Number,          //count number of messages\n})\n\nmodule.exports = mongoose.model('users', userSchema);\n\n\n//controllers\nconst Items = require('../models/conditional');\n\nrouter.findLevel = async (req, res) => {\n    //Search an user level > 10\n    Items.find({\n      level: {\n        $exists: true,                    //check value exixt or not\n        // $gte: 10, $lt: 15               //gte = greater than or equal to\n      }\n    })\n      .then(main => res.json(main));\n}\n\nrouter.messages = async (req, res) => {\n    Items.findOne({\n      'messages.text': 'Text'\n    })\n      .then(main => res.json(main));\n}\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Items({\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n      level: req.body.level,\n    })\n\n    newItems.save().then(item => res.json(item));\n}\n`.trim();\nconst insertMany = `\nconst reqString = { type: String, required: true }\n\nconst plurizedSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: {\n    type: Number, default: 5, min: 0, max: 10\n  },\n  nameHistory: [String]\n}, {\n  timeStamps: true\n})\n\nmodule.exports = mongoose.model('manyQry', plurizedSchema);\n\n\n//controllers\nconst Items = require('../models/insertMany');\n\nrouter.all = async (req, res) => {\n    Items.find()\n      .sort({ date: -1 })\n      .then(main => res.json(main));\n}\n\nrouter.inserts = async = (req, res) => {\n    Items.insertMany([{\n      \"email\": \"valid@gmail.com\", \"username\": \"min\", \"password\": \"password\"\n    },\n    {\n      \"email\": \"valid2@gmail.com\", \"username\": \"min2\", \"password\": \"password2\"\n    },\n    {\n      \"email\": \"valid3@gmail.com\", \"username\": \"min3\", \"password\": \"password3\"\n    }]).then(function () {\n      console.log(\"Data inserted\")  // Success\n    })\n}\n\nrouter.remove = async = (req, res) => {\n    Items.deleteMany({\n      username: ['min', 'min2']\n    }).then(function () {\n      console.log(\"Data inserted\")  // Success\n    })\n}\n`.trim();\nconst itemsModels = `\nconst MainSchema = new Schema({\n  title: { type: String, required: true },\n  age: { type: Number, required: true },\n  list: { type: Array, required: true },\n  status: { type: String, required: false },\n  qty: { type: Number },\n});\n\nmodule.exports = mains = mongoose.model('mains', MainSchema);\n\n\n//controllers\nconst Items = require('../models/items');\n\nrouter.all = async (req, res) => {\n    Items.find()\n      .sort({ date: -1 })\n      .then(main => res.json(main));\n}\n\nrouter.getOne = async (req, res) => {\n    Items.findById(req.params.id)\n      .then(main => res.json(main))\n}\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Items({\n      title: req.body.title,\n      age: req.body.age,\n      list: req.body.list,\n      status: req.body.status,\n      qty: req.body.qty,\n    })\n\n    newItems.save().then(item => res.json(item));\n}\n\nrouter.updates = async = (req, res) => {\n    Items.findByIdAndUpdate(req.params.id, {\n      title: req.body.title,\n      age: req.body.age,\n      list: req.body.list,\n      status: req.body.status,\n      qty: req.body.qty,\n      size: {\n        h: req.body.h,\n        w: req.body.w,\n        uom: req.body.uom,\n      }\n    }, { new: true }).then(data => { res.json(data) })\n}\n\nrouter.remove = async (req, res) => {\n    Items.findByIdAndRemove(req.params.id)\n      .then(main => main.remove().then(() => res.json({ success: true })))\n}\n`.trim();\nconst nested = `\nconst reqString = { type: String, required: true }\n\nconst messageSchema = new Schema({\n  userId: reqString,\n  text: reqString\n})\n\nconst userSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: [messageSchema],\n  nameHistory: [String]\n}, {\n  timeStamps: true\n})\n\nmodule.exports = mongoose.model('nested', userSchema);\n\n\n//controllers\nconst Items = require('../models/nested');\n\nrouter.all = async (req, res) => {\n    Items.find()\n      .sort({ date: -1 })\n      .then(main => res.json(main));\n}\n\nrouter.messages = async (req, res) => {\n    Items.findOne({\n      'messages.text': 'Text'\n    })\n      .then(main => res.json(main));\n}\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Items({\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n      messages: [\n        {\n          userId: req.body.email,\n          text: 'Text'\n        },\n      ]\n    })\n\n    newItems.save().then(item => res.json(item));\n}\n`.trim();\nconst PluralizedCollectioName = `\nconst reqString = { type: String, required: true }\n\nconst plurizedSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: {\n    type: Number, default: 5, min: 0, max: 10\n  },\n  nameHistory: [String]       //every time name chage\n}, {\n  timeStamps: true          //created and updated time automatically manage\n})\n\nmodule.exports = mongoose.model('plurized', plurizedSchema);\n/*\ncollection name=plurized\ncollection name is default create plural, if want singular collection name than follow as\nmodule.exports = mongoose.model('plurized', plurizedSchema,'plurized');\n*/\n\n\n//controllers\nconst Items = require('../models/PluralizedCollectioName');\n\nrouter.all = async (req, res) => {\n    Items.find()\n      .sort({ date: -1 })\n      .then(main => res.json(main));\n}\n\nrouter.getOne = async (req, res) => {\n    Items.findById(req.params.id)\n      .then(main => res.json(main))\n}\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Items({\n      title: req.body.title,\n      age: req.body.age,\n      list: req.body.list,\n      status: req.body.status,\n      qty: req.body.qty,\n    })\n\n    newItems.save().then(item => res.json(item));\n}\n`.trim();\nconst primaryUniqeId = `\nconst reqString = { type: String, required: true }\n\nconst arraysSchema = new Schema({\n  _id: reqString,            //to use own id\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: Number,          //count number of messages\n  nameHistory: [String],      //every time name chage\n  testScore: [Number]\n})\n\nmodule.exports = mongoose.model('keysIds', arraysSchema);\n\n\n//controllers\nconst Users = require('../models/primaryUniqeId');\n\nrouter.all = async (req, res) => {\n    Users.find()\n      .then(main => res.json(main));\n}\n\nrouter.creates = async = (req, res) => {\n    const newUsers = new Users({\n      _id: req.body._id,\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n    })\n\n    newUsers.save().then(item => res.json(item));\n}\n`.trim();\nconst renameDoc = `\nconst reqString = { type: String, required: true }\n\nconst messageSchema = new Schema({\n  userId: reqString,\n  text: reqString\n})\n\nconst userSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  level: Number,\n  messages: [messageSchema],\n  nameHistory: [String]\n}, \n{ timeStamps: true })\n\nmodule.exports = mongoose.model('renameRemoveDocs', userSchema);\n\n\n//controllers\nconst Items = require('../models/renameDoc.js');\n\nrouter.all = async (req, res) => {\n    Items.find()\n      .then(main => res.json(main));\n}\n\nrouter.updates = async = (req, res) => {\n    const newItems = Items.updateMany({}, {\n      // $rename: { password: req.body.password },   // rename password to pass\n      $unst: { pass: '' },                           // remove field\n    })\n      .then(main => res.json(main));\n\n    newItems.save().then(item => res.json(item));\n}\n`.trim();\nconst timeStamps = `\nconst reqString = { type: String, required: true }\n\nconst timeSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: {\n    type: Number, default: 5, min: 0, max: 10\n  },\n  nameHistory: [String]       //every time name chage\n},\n{ timeStamps: true          //created and updated time automatically manage\n})\n\nmodule.exports = mongoose.model('timeStamps', timeSchema);\n\n\n//controllers\nconst Users = require('../models/timeStamps');\n\nrouter.all = async (req, res) => {\n    Users.find()\n      .then(main => res.json(main))\n}\n\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Users({\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n      messages: req.body.messages,\n    })\n\n    // const valid = new Promise((res) => {\n    //   newItems.validate((err) => {\n    //     if (err) {\n    //       res(false)\n    //     } else {\n    //       res(true)\n    //     }\n    //   })\n    // })\n\n    // if (valid) {\n    //   newItems.save()\n    // }\n    newItems.save().then(item => res.json(item));\n}\n`.trim();\n\nclass MongoCurd extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    }, \"arrayOp.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: arraysSchema,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    }, \"conditional.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: conditional,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562\n      },\n      __self: this\n    }, \"increase.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: increase,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573\n      },\n      __self: this\n    }, \"insertMany.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: insertMany,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584\n      },\n      __self: this\n    }, \"items.js\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: itemsModels,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595\n      },\n      __self: this\n    }, \"nested.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: nested,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606\n      },\n      __self: this\n    }, \"PluralizedCollectioName.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: PluralizedCollectioName,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617\n      },\n      __self: this\n    }, \"primaryUniqeId.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: primaryUniqeId,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628\n      },\n      __self: this\n    }, \"renameDoc.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: renameDoc,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639\n      },\n      __self: this\n    }, \"timeStamps.js\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: timeStamps,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default withStyles(styles)(MongoCurd);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/mongoDB/deepMongodb/mongoQueries.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","arraysSchema","trim","conditional","increase","insertMany","itemsModels","nested","PluralizedCollectioName","primaryUniqeId","renameDoc","timeStamps","MongoCurd","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst arraysSchema = `\nconst arraysSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: Number,          //count number of messages\n  nameHistory: [String],      //every time name chage\n  testScore: [Number]\n})\n\nmodule.exports = mongoose.model('arraysOp', arraysSchema);\n\n\n//controllers\nconst Users = require('../models/arrayOp');\n\nrouter.all = async (req, res) => {\n    Users.find()\n      .sort({ date: -1 })\n      .then(main => res.json(main));\n}\n\nrouter.search = async (req, res) => {\n    Users.find({\n      testScore: { $all: [10, 20, 30] }\n    })\n      .then(main => res.json(main))\n}\n\nrouter.size = async (req, res) => {\n    Users.find({\n      testScore: { $size: 3 }\n    })\n      .then(main => res.json(main))\n}\n\nrouter.elementMatch = async (req, res) => {\n    Users.find({\n      testScore: { $elemMatch: { $gt: 20 } }\n    })\n      .then(main => res.json(main))\n}\n\nrouter.creates = async = (req, res) => {\n    const newUsers = new Users({\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n      testScore: req.body.testScore,\n    })\n\n    newUsers.save().then(item => res.json(item));\n}\n`.trim();\n\nconst conditional = `\nconst reqString = { type: String, required: true }\n\nconst messageSchema = new Schema({\n  userId: reqString,\n  text: reqString\n})\n\nconst userSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  level: Number,\n  messages: [messageSchema],\n  nameHistory: [String]\n}, {\n  timeStamps: true\n})\n\nmodule.exports = mongoose.model('conditional', userSchema);\n\n\n//controllers\nconst Items = require('../models/conditional');\n\nrouter.findLevel = async (req, res) => {\n    //Search an user level > 10\n    Items.find({\n      level: {\n        $exists: true,                    //check value exixt or not\n        // $gte: 10, $lt: 15               //gte = greater than or equal to\n      }\n    })\n      .then(main => res.json(main));\n}\n\nrouter.messages = async (req, res) => {\n    Items.findOne({\n      'messages.text': 'Text'\n    })\n      .then(main => res.json(main));\n}\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Items({\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n      level: req.body.level,\n    })\n\n    newItems.save().then(item => res.json(item));\n}\n`.trim();\n\nconst increase = `\nconst reqString = { type: String, required: true }\n\nconst userSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: Number,          //count number of messages\n})\n\nmodule.exports = mongoose.model('users', userSchema);\n\n\n//controllers\nconst Items = require('../models/conditional');\n\nrouter.findLevel = async (req, res) => {\n    //Search an user level > 10\n    Items.find({\n      level: {\n        $exists: true,                    //check value exixt or not\n        // $gte: 10, $lt: 15               //gte = greater than or equal to\n      }\n    })\n      .then(main => res.json(main));\n}\n\nrouter.messages = async (req, res) => {\n    Items.findOne({\n      'messages.text': 'Text'\n    })\n      .then(main => res.json(main));\n}\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Items({\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n      level: req.body.level,\n    })\n\n    newItems.save().then(item => res.json(item));\n}\n`.trim();\n\nconst insertMany = `\nconst reqString = { type: String, required: true }\n\nconst plurizedSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: {\n    type: Number, default: 5, min: 0, max: 10\n  },\n  nameHistory: [String]\n}, {\n  timeStamps: true\n})\n\nmodule.exports = mongoose.model('manyQry', plurizedSchema);\n\n\n//controllers\nconst Items = require('../models/insertMany');\n\nrouter.all = async (req, res) => {\n    Items.find()\n      .sort({ date: -1 })\n      .then(main => res.json(main));\n}\n\nrouter.inserts = async = (req, res) => {\n    Items.insertMany([{\n      \"email\": \"valid@gmail.com\", \"username\": \"min\", \"password\": \"password\"\n    },\n    {\n      \"email\": \"valid2@gmail.com\", \"username\": \"min2\", \"password\": \"password2\"\n    },\n    {\n      \"email\": \"valid3@gmail.com\", \"username\": \"min3\", \"password\": \"password3\"\n    }]).then(function () {\n      console.log(\"Data inserted\")  // Success\n    })\n}\n\nrouter.remove = async = (req, res) => {\n    Items.deleteMany({\n      username: ['min', 'min2']\n    }).then(function () {\n      console.log(\"Data inserted\")  // Success\n    })\n}\n`.trim();\n\nconst itemsModels = `\nconst MainSchema = new Schema({\n  title: { type: String, required: true },\n  age: { type: Number, required: true },\n  list: { type: Array, required: true },\n  status: { type: String, required: false },\n  qty: { type: Number },\n});\n\nmodule.exports = mains = mongoose.model('mains', MainSchema);\n\n\n//controllers\nconst Items = require('../models/items');\n\nrouter.all = async (req, res) => {\n    Items.find()\n      .sort({ date: -1 })\n      .then(main => res.json(main));\n}\n\nrouter.getOne = async (req, res) => {\n    Items.findById(req.params.id)\n      .then(main => res.json(main))\n}\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Items({\n      title: req.body.title,\n      age: req.body.age,\n      list: req.body.list,\n      status: req.body.status,\n      qty: req.body.qty,\n    })\n\n    newItems.save().then(item => res.json(item));\n}\n\nrouter.updates = async = (req, res) => {\n    Items.findByIdAndUpdate(req.params.id, {\n      title: req.body.title,\n      age: req.body.age,\n      list: req.body.list,\n      status: req.body.status,\n      qty: req.body.qty,\n      size: {\n        h: req.body.h,\n        w: req.body.w,\n        uom: req.body.uom,\n      }\n    }, { new: true }).then(data => { res.json(data) })\n}\n\nrouter.remove = async (req, res) => {\n    Items.findByIdAndRemove(req.params.id)\n      .then(main => main.remove().then(() => res.json({ success: true })))\n}\n`.trim();\n\nconst nested = `\nconst reqString = { type: String, required: true }\n\nconst messageSchema = new Schema({\n  userId: reqString,\n  text: reqString\n})\n\nconst userSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: [messageSchema],\n  nameHistory: [String]\n}, {\n  timeStamps: true\n})\n\nmodule.exports = mongoose.model('nested', userSchema);\n\n\n//controllers\nconst Items = require('../models/nested');\n\nrouter.all = async (req, res) => {\n    Items.find()\n      .sort({ date: -1 })\n      .then(main => res.json(main));\n}\n\nrouter.messages = async (req, res) => {\n    Items.findOne({\n      'messages.text': 'Text'\n    })\n      .then(main => res.json(main));\n}\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Items({\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n      messages: [\n        {\n          userId: req.body.email,\n          text: 'Text'\n        },\n      ]\n    })\n\n    newItems.save().then(item => res.json(item));\n}\n`.trim();\n\nconst PluralizedCollectioName = `\nconst reqString = { type: String, required: true }\n\nconst plurizedSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: {\n    type: Number, default: 5, min: 0, max: 10\n  },\n  nameHistory: [String]       //every time name chage\n}, {\n  timeStamps: true          //created and updated time automatically manage\n})\n\nmodule.exports = mongoose.model('plurized', plurizedSchema);\n/*\ncollection name=plurized\ncollection name is default create plural, if want singular collection name than follow as\nmodule.exports = mongoose.model('plurized', plurizedSchema,'plurized');\n*/\n\n\n//controllers\nconst Items = require('../models/PluralizedCollectioName');\n\nrouter.all = async (req, res) => {\n    Items.find()\n      .sort({ date: -1 })\n      .then(main => res.json(main));\n}\n\nrouter.getOne = async (req, res) => {\n    Items.findById(req.params.id)\n      .then(main => res.json(main))\n}\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Items({\n      title: req.body.title,\n      age: req.body.age,\n      list: req.body.list,\n      status: req.body.status,\n      qty: req.body.qty,\n    })\n\n    newItems.save().then(item => res.json(item));\n}\n`.trim();\n\nconst primaryUniqeId = `\nconst reqString = { type: String, required: true }\n\nconst arraysSchema = new Schema({\n  _id: reqString,            //to use own id\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: Number,          //count number of messages\n  nameHistory: [String],      //every time name chage\n  testScore: [Number]\n})\n\nmodule.exports = mongoose.model('keysIds', arraysSchema);\n\n\n//controllers\nconst Users = require('../models/primaryUniqeId');\n\nrouter.all = async (req, res) => {\n    Users.find()\n      .then(main => res.json(main));\n}\n\nrouter.creates = async = (req, res) => {\n    const newUsers = new Users({\n      _id: req.body._id,\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n    })\n\n    newUsers.save().then(item => res.json(item));\n}\n`.trim();\n\nconst renameDoc = `\nconst reqString = { type: String, required: true }\n\nconst messageSchema = new Schema({\n  userId: reqString,\n  text: reqString\n})\n\nconst userSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  level: Number,\n  messages: [messageSchema],\n  nameHistory: [String]\n}, \n{ timeStamps: true })\n\nmodule.exports = mongoose.model('renameRemoveDocs', userSchema);\n\n\n//controllers\nconst Items = require('../models/renameDoc.js');\n\nrouter.all = async (req, res) => {\n    Items.find()\n      .then(main => res.json(main));\n}\n\nrouter.updates = async = (req, res) => {\n    const newItems = Items.updateMany({}, {\n      // $rename: { password: req.body.password },   // rename password to pass\n      $unst: { pass: '' },                           // remove field\n    })\n      .then(main => res.json(main));\n\n    newItems.save().then(item => res.json(item));\n}\n`.trim();\n\nconst timeStamps = `\nconst reqString = { type: String, required: true }\n\nconst timeSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: {\n    type: Number, default: 5, min: 0, max: 10\n  },\n  nameHistory: [String]       //every time name chage\n},\n{ timeStamps: true          //created and updated time automatically manage\n})\n\nmodule.exports = mongoose.model('timeStamps', timeSchema);\n\n\n//controllers\nconst Users = require('../models/timeStamps');\n\nrouter.all = async (req, res) => {\n    Users.find()\n      .then(main => res.json(main))\n}\n\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Users({\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n      messages: req.body.messages,\n    })\n\n    // const valid = new Promise((res) => {\n    //   newItems.validate((err) => {\n    //     if (err) {\n    //       res(false)\n    //     } else {\n    //       res(true)\n    //     }\n    //   })\n    // })\n\n    // if (valid) {\n    //   newItems.save()\n    // }\n    newItems.save().then(item => res.json(item));\n}\n`.trim();\n\n\nclass MongoCurd extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <b>arrayOp.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={arraysSchema}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>conditional.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={conditional}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>increase.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={increase}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>insertMany.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={insertMany}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>items.js</b><br/>\n              <div style={titles}>\n                <PrismCode\n                  code={itemsModels}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>nested.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={nested}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>PluralizedCollectioName.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={PluralizedCollectioName}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>primaryUniqeId.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={primaryUniqeId}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>renameDoc.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={renameDoc}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>timeStamps.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={timeStamps}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n             <br/>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(MongoCurd));\n"]},"metadata":{},"sourceType":"module"}