{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst non_repeating_character = `\n// find sub string\nfunction common(){\n  var str='India is my home';\n  var str2=str.includes('is');\n  \n  console.log(str2);\n}\n\ncommon();\n\n\n//2\nfunction unique() {\n  let i, j, str='apple', result='';\n\n  for (i=0; i<str.length; i++) {\n    let count = 0;\n    for (j=1; j<str.length; j++) {\n      if (str[i] == str[j]) {\n        count += 1;\n      }\n    }\n\n    // if (count>=2) {                                                              //For duplicates elements\n    if (count<2) {\n      result += str[i];\n    }\n  }\n  console.log(result)\n}\n\nunique();\n\n\n//3\nfunction common() {\n  let i, str='onely', str2='ony', result=[];\n\n  for (i=0; i<=str.length; i++) {\n    if (str2.indexOf(str[i]) == -1) {\n      result.push(str[i]);\n    }\n  }\n\n  return console.log(result.join(\"\"));\n}\n\ncommon()\n`.trim();\nconst findVowel = `\n//1\nfunction vowel(){\n  const str='appleou';\n  var str2='';\n  \n  for(let i=0; i<str.length; i++){\n    if(str[i]=='a'||str[i]=='e'||str[i]=='i'||str[i]=='o'||str[i]=='u'){\n      str2 += str[i];\n    }\n  }\n  console.log(str2)\n}\n\nvowel();\n\n\n//2\nfunction getCount() {\n  var str='apple';\n  let vowelList = 'AEIOUaeiou'\n  let vowels = '';\n  \n   for(var i = 0; i < str.length ; i++){\n      if (vowelList.indexOf(str[i]) !== -1){\n        vowels += str[i];\n      }\n    }\n    console.log(vowels);\n  }\n  \n  getCount();\n  \n  \n//3\nfunction getCount() {\n  var str = 'appleo';\n  var matches;\n\n  for (var i = 0; i < str.length; i++) {\n    if (str && (matches = str.match(/[aeiou]/g))) { }\n  }\n  console.log(matches);\n}\n\ngetCount();\n  `.trim();\nconst maxLength = `\nconst maxLength = function (arr) {\n  let max = 0\n  const isUnique = (s = '') => {\n    const map = {}\n    for (const c of s) {\n      map[c] = (map[c] || 0) + 1\n      if (map[c] >= 2) {\n        return false\n      }\n    }\n    return true\n  }\n  const aux = (index, current = '') => {\n    if (index > arr.length - 1) {\n      max = Math.max(current.length, max)\n      return\n    }\n    if (isUnique(current)) {\n      aux(index + 1, current)\n      if (isUnique(current + arr[index])) {\n        aux(index + 1, current + arr[index])\n      }\n    }\n  }\n  aux(0)\n  return max\n}\n\nconsole.log(maxLength([\"un\",\"iq\",\"ue\"]))`.trim();\nconst twoSum = `\nconst twoSum = (nums, target) => {\n  const memo = {}\n  const aux = (index) => {\n    if (memo[nums[index]] !== undefined) {\n      return [memo[nums[index]], index]\n    }\n    memo[target - nums[index]] = index\n    return aux(index + 1)\n  }\n  return aux(0, nums.length - 1)\n}\n\nconsole.log(twoSum([2,7,11,15],18))`.trim();\nconst addTwoNumbers = `\nfunction ListNode(val) {\n  this.val = val\n  this.next = null\n}\n\nconst addTwoNumbers = (l1, l2) => {\n  let h1 = l1\n  let h2 = l2\n  let digit = 0\n  let head = null\n  let current = null\n  while (h1 || h2) {\n    const num1 = h1 ? h1.val : 0\n    const num2 = h2 ? h2.val : 0\n    let value = num1 + num2 + digit\n    if (value >= 10) {\n      value -= 10\n      digit = 1\n    } else {\n      digit = 0\n    }\n    h1 = h1 ? h1.next : null\n    h2 = h2 ? h2.next : null\n    const node = new ListNode(value)\n    if (!head) {\n      head = node\n      current = node\n    } else {\n      current.next = node\n      current = node\n    }\n  }\n  if (digit === 1) {\n    current.next = new ListNode(1)\n  }\n  return head\n}\n\n\nconsole.log(addTwoNumbers())`.trim();\nconst lengthOfLongestSubstring = `\nconst lengthOfLongestSubstring = (s = '') => {\n  const map = {}\n  let max = 0\n  let left = -1\n  for (let i = 0; i < s.length; i++) {\n    if (map[s[i]] !== undefined) {\n      left = Math.max(left, map[s[i]])\n      max = Math.max(i - left, max)\n    } else {\n      max = Math.max(i - left, max)\n    }\n    map[s[i]] = i\n  }\n  return max\n}\n\n\nconsole.log(lengthOfLongestSubstring(\"pwwkew\"))`.trim();\nconst findMedianSortedArrays = `\nconst findMedianSortedArrays = (nums1, nums2) => {\n  const merge = (xs1, xs2) => {\n    if (!xs1 || !xs1.length) {\n      return xs2\n    }\n    if (!xs2 || !xs2.length) {\n      return xs1\n    }\n    const [hd1, ...rest1] = xs1\n    const [hd2, ...rest2] = xs2\n    return hd1 <= hd2 ? [hd1, ...merge(rest1, xs2)] : [hd2, ...merge(xs1, rest2)]\n  }\n  const nums = merge(nums1, nums2)\n  const middle = Math.floor((nums.length-1) / 2)\n\n  return (middle * 2 === (nums.length-1)) ?  nums[middle] : ((nums[middle] + nums[middle + 1]) / 2) \n}\n\n\nconsole.log(findMedianSortedArrays([1,2],[3,4]))`.trim();\nconst longestPalindrome = `\nconst longestPalindrome = (s = '') => {\n  const memo = {}\n  const isPalindrome = (left, right) => {\n    if (left === right) {\n      return true\n    }\n    for (let i = left; i <= Math.floor((left + right) / 2); i++) {\n      if (s[i] !== s[right - i + left]) {\n        return false\n      }\n    }\n    return true\n  }\n  const aux = (left, right) => {\n    if (left > right) {\n      return ''\n    }\n    memo[left] = memo[left] || {}\n    if (memo[left][right] !== undefined) {\n      return memo[left][right]\n    }\n    if (isPalindrome(left, right)) {\n      return s.substring(left, right + 1)\n    }\n    memo[left][right] = aux(left + 1, right).length > aux(left, right - 1).length\n      ? aux(left + 1, right)\n      : aux(left, right - 1)\n    return memo[left][right]\n  }\n  return aux(0, s.length - 1)\n}\n\nconsole.log(longestPalindrome(\"babad\"))`.trim();\nconst convert = `\nconst convert = function (s, numRows) {\n  if (numRows === 1) {\n    return s\n  }\n  const arr = new Array(numRows).fill(\"\")\n  let i = 0\n  let down = true\n  for (const c of s) {\n    arr[i] += c\n    if (down) {\n      i += 1\n      if (i === numRows - 1) {\n        down = false\n      }\n    } else {\n      i -= 1\n      if (i === 0) {\n        down = true\n      }\n    }\n  }\n  return arr.join('')\n}\n\n\nconsole.log(convert(\"PAYPALISHIRING\",3))`.trim();\nconst reverse = `\nconst reverse = function (x) {\n  let max = (2 ** 31) - 1\n  let min = - (2 ** 31)\n  \n  const isMinus = x < 0\n  const str = String(Math.abs(x)).split('').reverse().join('')\n  const result =  isMinus ? Number('-'$'{str}') : Number(str)\n  if (result > max || result < min) {\n    return 0\n  }\n  return result\n}\n\n\nconsole.log(reverse(123))`.trim();\nconst isPalindrome = `\nconst isPalindrome = function (x) {\n  if (x < 0) {\n    return false\n  }\n  let reverse = 0\n  let num = x\n  while (num > 0) {\n    reverse = reverse * 10 + (num % 10)\n    num = Math.floor(num / 10)\n  }\n  return reverse === x\n}\n\n\nconsole.log(isPalindrome(121)) `.trim();\nconst maxArea = `\nconst maxArea = (height = []) => {\n  let max = 0\n  let left = 0\n  let right = height.length - 1\n  while (left < right) {\n    max = Math.max(max, Math.min(height[left], height[right]) * (right - left))\n    if (height[left] <= height[right]) {\n      left += 1\n    } else {\n      right -= 1\n    }\n  }\n  return max\n}\n\nconsole.log(maxArea([1,8,6,2,5,4,8,3,7]))`.trim();\n\nclass DSLogic extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, \"Unique Char.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: non_repeating_character,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }, \"11. Find vowel\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: findVowel,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }, \"15. Find all the combinations of a string in lowercase and uppercase\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: combinations,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }, \"javaScript logicals: https://beizhedenglong.github.io/leetcode-solutions/docs/edit-distance\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, \"1. Maximum Length of a Concatenated String with Unique Characters.\"), \"iven an array of strings arr. String s is a concatenation of a sub-sequence of arr which have unique characters.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }), \"Return the maximum possible length of s.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }), \"Input: arr = [\\\"un\\\",\\\"iq\\\",\\\"ue\\\"]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    }), \"Output: 4\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }), \"Explanation: All possible concatenations are \\\"\\\",\\\"un\\\",\\\"iq\\\",\\\"ue\\\",\\\"uniq\\\" and \\\"ique\\\".\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }), \"Maximum length is 4.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maxLength,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }, \"2. Two Sum.\"), \"Description\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }), \"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }), \"You may assume that each input would have exactly one solution, and you may not use the same element twice.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    }), \"You can return the answer in any order.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }), \"Input: nums = [2,7,11,15], target = 9\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }), \"Output: [0,1]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }), \"Output: Because nums[0] + nums[1] == 9, we return [0, 1].\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: twoSum,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }, \"3. Add Two Numbers.\"), \"You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    }), \"You may assume the two numbers do not contain any leading zero, except the number 0 itself.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }), \"Example:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }), \"Input: (2  4  3) + (5  6  4)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    }), \"Output: 7  0  8\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }), \"Explanation: 342 + 465 = 807.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: addTwoNumbers,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    }, \"4. Longest Substring Without Repeating Characters.\"), \"Given a string s, find the length of the longest substring without repeating characters.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496\n      },\n      __self: this\n    }), \"Input: s = \\\"abcabcbb\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }), \"Output: 3\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    }), \"Explanation: The answer is \\\"abc\\\", with the length of 3.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500\n      },\n      __self: this\n    }), \"Input: s = \\\"bbbbb\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502\n      },\n      __self: this\n    }), \"Output: 1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }), \"Explanation: The answer is \\\"b\\\", with the length of 1.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: lengthOfLongestSubstring,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }, \"5. Median of Two Sorted Arrays.\"), \"Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }), \"Follow up: The overall run time complexity should be O(log (m+n)).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }), \"Input: nums1 = [1,3], nums2 = [2]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }), \"Output: 2.00000\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    }), \"Explanation: merged array = [1,2,3] and median is 2.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }), \"Input: nums1 = [1,2], nums2 = [3,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    }), \"Output: 2.50000\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529\n      },\n      __self: this\n    }), \"Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: findMedianSortedArrays,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    }, \"6. Longest Palindromic Substring.\"), \"Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    }), \"Input: \\\"babad\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }), \"Output: \\\"bab\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }), \"Note: \\\"aba\\\" is also a valid answer.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548\n      },\n      __self: this\n    }), \"Input: \\\"cbbd\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    }), \"Output: \\\"bb\\\"\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: longestPalindrome,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561\n      },\n      __self: this\n    }, \"7. ZigZag Conversion.\"), \"The string \\\"PAYPALISHIRING\\\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563\n      },\n      __self: this\n    }), \"P   A   H   N\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    }), \"A P L S I I G\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565\n      },\n      __self: this\n    }), \"Y   I   R\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    }), \"And then read line by line: \\\"PAHNAPLSIIGYIR\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567\n      },\n      __self: this\n    }), \"Write the code that will take a string and make this conversion given a number of rows:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569\n      },\n      __self: this\n    }), \"string convert(string s, int numRows);\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572\n      },\n      __self: this\n    }), \"Input: s = \\\"PAYPALISHIRING\\\", numRows = 3\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574\n      },\n      __self: this\n    }), \"Output: \\\"PAHNAPLSIIGYIR\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576\n      },\n      __self: this\n    }), \"Input: s = \\\"PAYPALISHIRING\\\", numRows = 4\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578\n      },\n      __self: this\n    }), \"Output: \\\"PINALSIGYAHRPI\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579\n      },\n      __self: this\n    }), \"Explanation:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580\n      },\n      __self: this\n    }), \"P     I    N\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581\n      },\n      __self: this\n    }), \"A   L S  I G\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    }), \"Y A   H R\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583\n      },\n      __self: this\n    }), \"P     I\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: convert,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594\n      },\n      __self: this\n    }, \"8. Reverse Integer.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: reverse,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 605\n      },\n      __self: this\n    }, \"9. Palindrome Number.\"), \"Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607\n      },\n      __self: this\n    }), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609\n      },\n      __self: this\n    }), \"Input: 121 \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610\n      },\n      __self: this\n    }), \"Output: true\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isPalindrome,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621\n      },\n      __self: this\n    }, \"10. Container With Most Water\"), \"Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 623\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 623\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624\n      },\n      __self: this\n    }, \"Note: \"), \"You may not slant the container and n is at least 2.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    }), \"Example:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626\n      },\n      __self: this\n    }), \"Input: [1,8,6,2,5,4,8,3,7]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628\n      },\n      __self: this\n    }), \"Output: 49\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maxArea,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(DSLogic);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","non_repeating_character","trim","findVowel","maxLength","twoSum","addTwoNumbers","lengthOfLongestSubstring","findMedianSortedArrays","longestPalindrome","convert","reverse","isPalindrome","maxArea","DSLogic","componentDidMount","setTimeout","highlightAll","render","classes","props","combinations"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst non_repeating_character = `\n// find sub string\nfunction common(){\n  var str='India is my home';\n  var str2=str.includes('is');\n  \n  console.log(str2);\n}\n\ncommon();\n\n\n//2\nfunction unique() {\n  let i, j, str='apple', result='';\n\n  for (i=0; i<str.length; i++) {\n    let count = 0;\n    for (j=1; j<str.length; j++) {\n      if (str[i] == str[j]) {\n        count += 1;\n      }\n    }\n\n    // if (count>=2) {                                                              //For duplicates elements\n    if (count<2) {\n      result += str[i];\n    }\n  }\n  console.log(result)\n}\n\nunique();\n\n\n//3\nfunction common() {\n  let i, str='onely', str2='ony', result=[];\n\n  for (i=0; i<=str.length; i++) {\n    if (str2.indexOf(str[i]) == -1) {\n      result.push(str[i]);\n    }\n  }\n\n  return console.log(result.join(\"\"));\n}\n\ncommon()\n`.trim()\n\nconst findVowel = `\n//1\nfunction vowel(){\n  const str='appleou';\n  var str2='';\n  \n  for(let i=0; i<str.length; i++){\n    if(str[i]=='a'||str[i]=='e'||str[i]=='i'||str[i]=='o'||str[i]=='u'){\n      str2 += str[i];\n    }\n  }\n  console.log(str2)\n}\n\nvowel();\n\n\n//2\nfunction getCount() {\n  var str='apple';\n  let vowelList = 'AEIOUaeiou'\n  let vowels = '';\n  \n   for(var i = 0; i < str.length ; i++){\n      if (vowelList.indexOf(str[i]) !== -1){\n        vowels += str[i];\n      }\n    }\n    console.log(vowels);\n  }\n  \n  getCount();\n  \n  \n//3\nfunction getCount() {\n  var str = 'appleo';\n  var matches;\n\n  for (var i = 0; i < str.length; i++) {\n    if (str && (matches = str.match(/[aeiou]/g))) { }\n  }\n  console.log(matches);\n}\n\ngetCount();\n  `.trim();\n\nconst maxLength = `\nconst maxLength = function (arr) {\n  let max = 0\n  const isUnique = (s = '') => {\n    const map = {}\n    for (const c of s) {\n      map[c] = (map[c] || 0) + 1\n      if (map[c] >= 2) {\n        return false\n      }\n    }\n    return true\n  }\n  const aux = (index, current = '') => {\n    if (index > arr.length - 1) {\n      max = Math.max(current.length, max)\n      return\n    }\n    if (isUnique(current)) {\n      aux(index + 1, current)\n      if (isUnique(current + arr[index])) {\n        aux(index + 1, current + arr[index])\n      }\n    }\n  }\n  aux(0)\n  return max\n}\n\nconsole.log(maxLength([\"un\",\"iq\",\"ue\"]))`.trim();\n\nconst twoSum = `\nconst twoSum = (nums, target) => {\n  const memo = {}\n  const aux = (index) => {\n    if (memo[nums[index]] !== undefined) {\n      return [memo[nums[index]], index]\n    }\n    memo[target - nums[index]] = index\n    return aux(index + 1)\n  }\n  return aux(0, nums.length - 1)\n}\n\nconsole.log(twoSum([2,7,11,15],18))`.trim();\n\nconst addTwoNumbers = `\nfunction ListNode(val) {\n  this.val = val\n  this.next = null\n}\n\nconst addTwoNumbers = (l1, l2) => {\n  let h1 = l1\n  let h2 = l2\n  let digit = 0\n  let head = null\n  let current = null\n  while (h1 || h2) {\n    const num1 = h1 ? h1.val : 0\n    const num2 = h2 ? h2.val : 0\n    let value = num1 + num2 + digit\n    if (value >= 10) {\n      value -= 10\n      digit = 1\n    } else {\n      digit = 0\n    }\n    h1 = h1 ? h1.next : null\n    h2 = h2 ? h2.next : null\n    const node = new ListNode(value)\n    if (!head) {\n      head = node\n      current = node\n    } else {\n      current.next = node\n      current = node\n    }\n  }\n  if (digit === 1) {\n    current.next = new ListNode(1)\n  }\n  return head\n}\n\n\nconsole.log(addTwoNumbers())`.trim();\n\nconst lengthOfLongestSubstring = `\nconst lengthOfLongestSubstring = (s = '') => {\n  const map = {}\n  let max = 0\n  let left = -1\n  for (let i = 0; i < s.length; i++) {\n    if (map[s[i]] !== undefined) {\n      left = Math.max(left, map[s[i]])\n      max = Math.max(i - left, max)\n    } else {\n      max = Math.max(i - left, max)\n    }\n    map[s[i]] = i\n  }\n  return max\n}\n\n\nconsole.log(lengthOfLongestSubstring(\"pwwkew\"))`.trim();\n\nconst findMedianSortedArrays = `\nconst findMedianSortedArrays = (nums1, nums2) => {\n  const merge = (xs1, xs2) => {\n    if (!xs1 || !xs1.length) {\n      return xs2\n    }\n    if (!xs2 || !xs2.length) {\n      return xs1\n    }\n    const [hd1, ...rest1] = xs1\n    const [hd2, ...rest2] = xs2\n    return hd1 <= hd2 ? [hd1, ...merge(rest1, xs2)] : [hd2, ...merge(xs1, rest2)]\n  }\n  const nums = merge(nums1, nums2)\n  const middle = Math.floor((nums.length-1) / 2)\n\n  return (middle * 2 === (nums.length-1)) ?  nums[middle] : ((nums[middle] + nums[middle + 1]) / 2) \n}\n\n\nconsole.log(findMedianSortedArrays([1,2],[3,4]))`.trim();\n\nconst longestPalindrome = `\nconst longestPalindrome = (s = '') => {\n  const memo = {}\n  const isPalindrome = (left, right) => {\n    if (left === right) {\n      return true\n    }\n    for (let i = left; i <= Math.floor((left + right) / 2); i++) {\n      if (s[i] !== s[right - i + left]) {\n        return false\n      }\n    }\n    return true\n  }\n  const aux = (left, right) => {\n    if (left > right) {\n      return ''\n    }\n    memo[left] = memo[left] || {}\n    if (memo[left][right] !== undefined) {\n      return memo[left][right]\n    }\n    if (isPalindrome(left, right)) {\n      return s.substring(left, right + 1)\n    }\n    memo[left][right] = aux(left + 1, right).length > aux(left, right - 1).length\n      ? aux(left + 1, right)\n      : aux(left, right - 1)\n    return memo[left][right]\n  }\n  return aux(0, s.length - 1)\n}\n\nconsole.log(longestPalindrome(\"babad\"))`.trim();\n\nconst convert = `\nconst convert = function (s, numRows) {\n  if (numRows === 1) {\n    return s\n  }\n  const arr = new Array(numRows).fill(\"\")\n  let i = 0\n  let down = true\n  for (const c of s) {\n    arr[i] += c\n    if (down) {\n      i += 1\n      if (i === numRows - 1) {\n        down = false\n      }\n    } else {\n      i -= 1\n      if (i === 0) {\n        down = true\n      }\n    }\n  }\n  return arr.join('')\n}\n\n\nconsole.log(convert(\"PAYPALISHIRING\",3))`.trim();\n\nconst reverse = `\nconst reverse = function (x) {\n  let max = (2 ** 31) - 1\n  let min = - (2 ** 31)\n  \n  const isMinus = x < 0\n  const str = String(Math.abs(x)).split('').reverse().join('')\n  const result =  isMinus ? Number('-'$'{str}') : Number(str)\n  if (result > max || result < min) {\n    return 0\n  }\n  return result\n}\n\n\nconsole.log(reverse(123))`.trim();\n\nconst isPalindrome = `\nconst isPalindrome = function (x) {\n  if (x < 0) {\n    return false\n  }\n  let reverse = 0\n  let num = x\n  while (num > 0) {\n    reverse = reverse * 10 + (num % 10)\n    num = Math.floor(num / 10)\n  }\n  return reverse === x\n}\n\n\nconsole.log(isPalindrome(121)) `.trim();\n\nconst maxArea = `\nconst maxArea = (height = []) => {\n  let max = 0\n  let left = 0\n  let right = height.length - 1\n  while (left < right) {\n    max = Math.max(max, Math.min(height[left], height[right]) * (right - left))\n    if (height[left] <= height[right]) {\n      left += 1\n    } else {\n      right -= 1\n    }\n  }\n  return max\n}\n\nconsole.log(maxArea([1,8,6,2,5,4,8,3,7]))`.trim();\n\n\nclass DSLogic extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Unique Char.</h3>\n\n              <div style={titles}>\n                <PrismCode\n                  code={non_repeating_character}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>11. Find vowel</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={findVowel}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>15. Find all the combinations of a string in lowercase and uppercase</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={combinations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>javaScript logicals: https://beizhedenglong.github.io/leetcode-solutions/docs/edit-distance</b>\n            <h3>1. Maximum Length of a Concatenated String with Unique Characters.</h3>\n        iven an array of strings arr. String s is a concatenation of a sub-sequence of arr which have unique characters.\n        <br/>\n        Return the maximum possible length of s.\n        <br/>\n        <br/>\n\n        Example 1:\n        <br/>\n        Input: arr = [\"un\",\"iq\",\"ue\"]<br/>\n        Output: 4<br/>\n        Explanation: All possible concatenations are \"\",\"un\",\"iq\",\"ue\",\"uniq\" and \"ique\".<br/>\n        Maximum length is 4.\n            <div style={titles}>\n                <PrismCode\n                  code={maxLength}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>2. Two Sum.</h3>\n              Description<br/>\nGiven an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n<br/>\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n<br/>\nYou can return the answer in any order.\n<br/>\n \n\nExample 1:\n<br/>\nInput: nums = [2,7,11,15], target = 9<br/>\nOutput: [0,1]<br/>\nOutput: Because nums[0] + nums[1] == 9, we return [0, 1].\n              <div style={titles}>\n                <PrismCode\n                  code={twoSum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>3. Add Two Numbers.</h3>\n              You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\n              <br/>\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n<br/>\nExample:\n<br/>\nInput: (2  4  3) + (5  6  4)<br/>\nOutput: 7  0  8<br/>\nExplanation: 342 + 465 = 807.\n              <div style={titles}>\n                <PrismCode\n                  code={addTwoNumbers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>4. Longest Substring Without Repeating Characters.</h3>\n              Given a string s, find the length of the longest substring without repeating characters.\n              <br/>\n \n\nExample 1:\n<br/>\nInput: s = \"abcabcbb\"<br/>\nOutput: 3<br/>\nExplanation: The answer is \"abc\", with the length of 3.<br/><br/>\nExample 2:<br/>\n\nInput: s = \"bbbbb\"<br/>\nOutput: 1<br/>\nExplanation: The answer is \"b\", with the length of 1.\n              <div style={titles}>\n                <PrismCode\n                  code={lengthOfLongestSubstring}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>5. Median of Two Sorted Arrays.</h3>\n              Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\n              <br/>\nFollow up: The overall run time complexity should be O(log (m+n)).\n<br/>\n \n\nExample 1:\n<br/>\nInput: nums1 = [1,3], nums2 = [2]<br/>\nOutput: 2.00000<br/>\nExplanation: merged array = [1,2,3] and median is 2.<br/><br/>\nExample 2:<br/>\n\nInput: nums1 = [1,2], nums2 = [3,4]<br/>\nOutput: 2.50000<br/>\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n              <div style={titles}>\n                <PrismCode\n                  code={findMedianSortedArrays}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>6. Longest Palindromic Substring.</h3>\n              Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\n              <br/>\nExample 1:\n<br/>\nInput: \"babad\"<br/>\nOutput: \"bab\"<br/>\nNote: \"aba\" is also a valid answer.<br/><br/>\nExample 2:<br/>\n\nInput: \"cbbd\"<br/>\nOutput: \"bb\"\n              <div style={titles}>\n                <PrismCode\n                  code={longestPalindrome}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>7. ZigZag Conversion.</h3>\n              The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n              <br/>\nP   A   H   N<br/>\nA P L S I I G<br/>\nY   I   R<br/>\nAnd then read line by line: \"PAHNAPLSIIGYIR\"<br/>\n\nWrite the code that will take a string and make this conversion given a number of rows:<br/>\n\nstring convert(string s, int numRows);<br/><br/>\nExample 1:<br/>\n\nInput: s = \"PAYPALISHIRING\", numRows = 3<br/>\nOutput: \"PAHNAPLSIIGYIR\"<br/><br/>\nExample 2:<br/>\n\nInput: s = \"PAYPALISHIRING\", numRows = 4<br/>\nOutput: \"PINALSIGYAHRPI\"<br/>\nExplanation:<br/>\nP     I    N<br/>\nA   L S  I G<br/>\nY A   H R<br/>\nP     I\n              <div style={titles}>\n                <PrismCode\n                  code={convert}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>8. Reverse Integer.</h3>\n\n              <div style={titles}>\n                <PrismCode\n                  code={reverse}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>9. Palindrome Number.</h3>\n              Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.\n              <br/> <br/>\nExample 1:\n<br/>\nInput: 121 <br/>\nOutput: true\n              <div style={titles}>\n                <PrismCode\n                  code={isPalindrome}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>10. Container With Most Water</h3>\n              Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\n              <br/><br/>\n<b>Note: </b>You may not slant the container and n is at least 2.\n<br/><br/>\nExample:<br/>\n\nInput: [1,8,6,2,5,4,8,3,7]<br/>\nOutput: 49\n              <div style={titles}>\n                <PrismCode\n                  code={maxArea}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic));\n"]},"metadata":{},"sourceType":"module"}