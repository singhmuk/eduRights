{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var docstring=\"def power(a, b):\\n\\\"\\\"\\\"Returns arg1 raised to power arg2.\\\"\\\"\\\"\\nreturn a ** b\\n\\nprint(power.__doc__)\\n\".trim();var determine=\"class Test:\\ndef __init__(self, name):\\n    self.cards = []\\n    self.name = name\\n\\ndef __str__(self):\\n    return '{} holds ...'.format(self.name)\\n\\n\\nobj = Test('obj')\\nprint(obj)\\n\".trim();var complexs=\"\\nnum=2+3j\\nprint(num.real)\\nprint(num.imag)\\n\".trim();var nonlocal=\"\\ndef make_counter():\\n    count = 0\\n    def counter():\\n        nonlocal count\\n        count += 1\\n        return count\\n    return counter\".trim();var firstClass=\"\\ndef shout(text):\\n    return text.upper()\\nprint (shout('Hello'))\\n    \\n    \\n    \\n#2\\ndef shout(text):\\n  return text.upper()\\n\\ndef whisper(text):\\n  return text.lower()\\n\\ndef greet(func):\\n  greeting = func(\\\"\\\"\\\"Hi, I am created by a function.\\\"\\\"\\\")\\n  print (greeting)\\n\\ngreet(shout)\\ngreet(whisper)\\n    \\n    \\n#3\\ndef create_adder(x):\\n  def adder(y):\\n    return x+y\\n  return adder\\n\\nadd_15 = create_adder(15)\\nprint (add_15(10))\\n\".trim();var docstrings=\"\\ndef myFun(x):\\n      x[0] = 20\\n      lst = [10, 11, 12, 13, 14, 15]\\n      myFun(lst)\\n      print(lst)\\n    \\ndef myFun(x, y=50):                                                             # Default arguments.\\n  print(\\\"x: \\\", x)\\n  print(\\\"y: \\\", y)\\n\\nmyFun(10)                                                            \\n\".trim();var closure=\"\\n    def oF(text):\\n      text = text\\n      def iF():\\n        print(text)\\n      return iF                                                           # returning function WITHOUT parenthesis\\n    \\n    if __name__ == '__main__':\\n      myFunction = oF('Hey!')\\n      myFunction()\\n    \".trim();var logging=\"\\nimport logging\\nlogging.basicConfig(filename='example.log', level=logging.INFO)\\n\\ndef logger(func):\\n    def log_func(*args):\\n        logging.info('Running \\\"{}\\\" with arguments {}'.format(func.__name__,args))\\n        print(func(*args))\\n\\n    return log_func\\n\\ndef add(x, y):\\n    return x + y\\n\\ndef sub(x, y):\\n    return x - y\\n\\nadd_logger = logger(add)\\nsub_logger = logger(sub)\\n\\nadd_logger(3, 3)\\nadd_logger(4, 5)\\n\".trim();var kwargs=\"\\ndef student(firstname, lastname):\\n  print(firstname, lastname)\\n\\nstudent(lastname='Practice', firstname='Geeks')                      # Keyword arguments\\n    \\n    \\n#2 Variable-length arguments:\\ndef myFun(*argv):\\n  for arg in argv:\\n    print(arg)\\n\\nmyFun('Hello', 'Welcome', 'to', 'GeeksforGeeks')\\n    \\n    \\n# 3\\ndef myFun(**kwargs):\\n  for key, value in kwargs.items():\\n    print(\\\"%s == %s\\\" % (key, value))\\n\\nmyFun(first='Geeks', mid='for', last='Geeks')\\n    \\n    \\n    \\n#4 with one extra argument.\\ndef myFun(arg1, **kwargs):\\n    for key, value in kwargs.items():\\n        print(\\\"%s == %s\\\" % (key, value))\\n\\nmyFun(\\\"Hi\\\", first='Geeks', mid='for', last='Geeks')\\n    \\n    \\n    \\n#5 To call a function\\ndef myFun(arg1, arg2, arg3):\\n    print(\\\"arg1:\\\", arg1)\\n    print(\\\"arg2:\\\", arg2)\\n    print(\\\"arg3:\\\", arg3)\\n\\nargs = (\\\"Geeks\\\", \\\"for\\\", \\\"Geeks\\\")\\nmyFun(*args)\\n\\nkwargs = {\\\"arg1\\\": \\\"Geeks\\\", \\\"arg2\\\": \\\"for\\\", \\\"arg3\\\": \\\"Geeks\\\"}\\nmyFun(**kwargs)\\n\".trim();var variables=\"\\n    #1\\n    def f():\\n      s = \\\"Me too.\\\"\\n      print(s)\\n    \\n    s = \\\"I love Geeksforgeeks\\\"\\n    f()\\n    \\n    \\n    #2\\n    a=10\\n    def something():\\n      global a\\n      a=15\\n      print('in function ',a)\\n    \\n    something()\\n    print('outside', a)\\n    \\n    \\n    #3\\n    a = 10\\n    print(id(a))\\n    \\n    def something():\\n        a = 20\\n        x = globals()['a']\\n        print(id(x))\\n        print('in function ', a)\\n    \\n        globals()['a'] = 15\\n    \\n    something()\\n    print('outside', a)\".trim();var parameters=\"\\ndef print_name(name):                                                     # name is the parameter\\n    print(name)\\n\\nprint_name('Alex')                                                        # 'Alex' is the argument\\n\".trim();var rearrange=\"\\n#positional argument\\ndef f1(a,b):\\n    print(\\\"a=\\\",a,\\\"b=\\\",b)\\nf1(1,2)\\n\\n\\n#keyword argument\\ndef f1(a,b):\\n    print(\\\"a=\\\",a,\\\"b=\\\",b)\\nf1(b=1,a=2)\\n    \\n    \\n    \\n#3\\ndef foo(a, b, c):\\n    print(a, b, c)\\n    \\nfoo(1, 2, 3)                                                        # positional arguments\\nfoo(a=1, b=2, c=3)                                                  # keyword arguments\\nfoo(c=3, b=2, a=1)                                                  # Order is not important\\nfoo(1, b=2, c=3)                                                    \\n\\n# This is not allowed:\\nfoo(1, b=2, 3)                                                      # positional argument after keyword argument\\nfoo(1, b=2, a=3)                                                    # multiple values for argument 'a'\".trim();var defaultargs=\"\\ndef foo(a, b, c, d=4):                                                  # default arguments\\n    print(a, b, c, d)\\n\\nfoo(1, 2, 3)\\nfoo(1, b=2, c=3, d=100)\\n\\ndef foo(a, b=2, c, d=4):                                                # default arguments must be at the end\\n    print(a, b, c, d)\\n\".trim();var forced=\"\\ndef foo(a, b, *, c, d):\\n    print(a, b, c, d)\\n\\nfoo(1, 2, c=3, d=4)\\n# foo(1, 2, 3, 4)                                                               # not allowed:\\n\\n                                                \\ndef foo(*args, last):\\n    for arg in args:\\n        print(arg)\\n    print(last)\\n\\nfoo(8, 9, 10, last=50)\\n\".trim();var unpacking=\"\\ndef foo(a, b, c):\\n    print(a, b, c)\\n\\nmy_list = [4, 5, 6] # or tuple\\nfoo(*my_list)                                                     # list/tuple unpacking, length must match\\n\\nmy_dict = {'a': 1, 'b': 2, 'c': 3}                                # dict unpacking, keys and length must match\\nfoo(**my_dict)\\n\\n# my_dict = {'a': 1, 'b': 2, 'd': 3}                              # not possible since wrong keyword\\n\".trim();var passing=\"\\n# immutable objects \\ndef foo(x):\\n    x = 5                                 # x += 5 also no effect since x is immutable and a new variable must be created\\n\\nvar = 10\\nprint('var before foo():', var)\\nfoo(var)\\nprint('var after foo():', var)\\n\\n\\n#2 mutable objects \\ndef foo(a_list):\\n    a_list.append(4)\\n    \\nmy_list = [1, 2, 3]\\nprint('my_list before foo', my_list)\\nfoo(my_list)\\nprint('my_list after foo', my_list)\\n    \\n    \\n#3 immutable objects within a mutable object \\na_list[0] = -100\\na_list[2] = \\\"Paul\\\"\\n\\nmy_list = [1, 2, \\\"Max\\\"]\\nprint('my_list before foo', my_list)\\nfoo(my_list)\\nprint('my_list after foo', my_list)\\n\\n\\n#4 Rebind a mutable reference \\ndef foo(a_list):\\n    a_list = [50, 60, 70]                                   # a_list is now a new local variable within the function\\n    a_list.append(50)\\n    \\nmy_list = [1, 2, 3]\\nprint('my_list before', my_list)\\nfoo(my_list)\\nprint('my_list after', my_list)\\n\".trim();var operators=\"\\nval = input(\\\"Enter your value: \\\")\\nprint(val)\\n\\n\\n#2. Ternary\\na, b = 10, 20\\nmin = a if a < b else b      \\n\\nprint(min)\\nprint(\\\"Both equal\\\" if a == b else \\\"a > b\\\" if a > b else \\\"b > a\\\")                   # Ternary operator as nested if-else\\n\\n\\n#3. Direct Method by using tuples, Dictionary and lambda Python.\\nprint((b, a)[a < b])                                                               # Use tuple for selecting an item\\nprint({True: a, False: b}[a < b])                                                  # Use Dictionary for selecting an item\\n\\n\\n#4. Only one expression will be evaluated unlike in tuple and Dictionary.\\nprint((lambda: b, lambda: a)[a < b]())\\n\".trim();var overloadings=\"\\nclass A:\\n    def __init__(self, a):\\n        self.a = a\\n\\n    def __add__(self, o):\\n        return self.a + o.a                                                             // adding two objects\\n\\n\\nob1 = A(1)\\nob2 = A(2)\\nob3 = A(\\\"Geeks\\\")\\nob4 = A(\\\"For\\\")\\n\\nprint(ob1 + ob2)\\nprint(ob3 + ob4)\\n\\n\\n// 2\\nclass complex:\\n    def __init__(self, a, b):\\n        self.a = a\\n        self.b = b\\n\\n    def __add__(self, other):\\n        return self.a + other.a, self.b + other.b\\n\\nOb1 = complex(1, 2)\\nOb2 = complex(2, 3)\\nprint(Ob1 + Ob2)\\n\\n\\n// 3\\nclass A:\\n    def __init__(self, a):\\n        self.a = a\\n\\n    def __gt__(self, other):\\n        if (self.a > other.a):\\n            return True\\n        else:\\n            return False\\n\\nob1 = A(2)\\nob2 = A(3)\\nif (ob1 > ob2):\\n    print(\\\"ob1 is greater than ob2\\\")\\nelse:\\n    print(\\\"ob2 is greater than ob1\\\")\\n\".trim();var divisions=\"\\nprint (5//2)\\n\\nprint (-5.0/2)\\n\".trim();var anyAll=\"\\nboolean_list = ['True', 'True', 'True']\\nresult = all(boolean_list)\\nresult = any(boolean_list)\\n\\nprint(result)\\n\\n\".trim();var assignment=\"\\nimport operator\\n\\na = 3\\nb = 3\\nc = 4\\n\\nx = operator.add(a, b)\\nx = operator.sub(a, b)\\nx = operator.mul(a, b)\\nx = operator.truediv(a, b)\\nx = operator.floordiv(a, b)\\nx = operator.pow(a, b)\\nx = operator.mod(a, b)\\n\\nprint(x)                                         \\n\\n\\n\\nif (operator.lt(a, b)):                                         # using lt() to check if a is less than b\\n    print(a)\\nelse:\\n    print(\\\"a !< b\\\")\\n\\n\\nif (operator.le(a, b)):                                         # using le() to check if a is less than or equal to b\\n    print(\\\"a<=b\\\")\\nelse:\\n    print(b)\\n\\n\\nif (operator.eq(a, b)):                                         # using eq() to check if a is equal to b\\n    print(\\\"a==b\\\")\\nelse:\\n    print(c)\\n    \\n    \\n\\nif (operator.gt(a, b)):                                         # using gt() to check if a is greater than b\\n    print(\\\"a>b\\\")\\nelse:\\n    print(b)\\n\\n\\nif (operator.ge(a, b)):                                         # using ge() to check if a is greater than or equal to b\\n    print(\\\"a=>b\\\")\\nelse:\\n    print(a)\\n\\n\\nif (operator.ne(a, b)):                                         # using ne() to check if a is not equal to b\\n    print(\\\"a!==b\\\")\\nelse:\\n    print(b)\\n\\n\\n    \\n//5\\nli = [1, 5, 6, 7, 8]\\n\\nfor i in range(0,len(li)):\\n\\tprint (li[i],end=\\\" \\\")\\n\\noperator.setitem(li,3,3)                                      # using setitem() to assign 3 at 4th position\\n\\nfor i in range(0,len(li)):                                    # printing modified list after setitem()\\n\\tprint (li[i],end=\\\" \\\")\\n\\noperator.delitem(li,1)                                        # using delitem() to delete value at 2nd index\\n\\nfor i in range(0,len(li)):\\n\\tprint (li[i],end=\\\" \\\")\\n\\nprint (operator.getitem(li,3))                                # using getitem() to access 4th element\\n\\n\\n//6\\nli = [1, 5, 6, 7, 8]\\n\\nfor i in range(0,len(li)):\\n\\tprint (li[i],end=\\\" \\\")\\n\\noperator.setitem(li,slice(1,4),[2,3,4])                      # using setitem() to assign 2,3,4 at 2nd,3rd and 4th index\\n\\nfor i in range(0,len(li)):\\n\\tprint (li[i],end=\\\" \\\")\\n\\noperator.delitem(li,slice(2,4))                              # using delitem() to delete value at 3rd and 4th index\\n\\nfor i in range(0,len(li)):\\n\\tprint (li[i],end=\\\" \\\")\\n\\nprint (operator.getitem(li,slice(0,2)))                     # using getitem() to access 1st and 2nd element\\n\\n\\n//7\\ns1 = \\\"geeksfor\\\"\\ns2 = \\\"geeks\\\"\\nprint (operator.concat(s1,s2))\\n\\nif (operator.contains(s1,s2)):                              # contains() to check if s1 contains s2                         \\n\\tprint (\\\"geeksfor\\\")\\nelse : print (\\\"not contain geeks\\\")\\n\\n\\n\\n//8 Python code to demonstrate working of and_(), or_(), xor(), invert()\\n\\nprint (operator.and_(a,b))                                  # using and_() to display bitwise and operation\\nprint (operator.or_(a,b))                                   # using or_() to display bitwise or operation\\nprint (operator.xor(a,b))                                   # using xor() to display bitwise exclusive or operation\\noperator.invert(a)                                          # using invert() to invert value of a\\nprint (operator.invert(a))\\n\".trim();var iss=\"\\nlist1 = []\\nlist2 = []\\nlist3=list1\\n\\nif (list1 == list2):\\n\\tprint(\\\"True\\\")\\nelse:\\n\\tprint(\\\"False\\\")\\n\\nif (list1 is list2):\\n\\tprint(\\\"True\\\")\\nelse:\\n\\tprint(\\\"False\\\")\\n\\n\\nprint(id(list1))\\nprint(id(list2))\".trim();var validate=\"\\n# The \\u2018in\\u2019 operator is used to check if a value exists in a sequence or not.\\nlist1=[1,2,3,4,5]\\nlist2=[6,7,8,9]\\nfor item in list1:\\n\\tif item in list2:\\n\\t\\tprint(\\\"overlapping\\\")\\nelse:\\n\\tprint(\\\"not overlapping\\\")\\n\\n\\n#2 Identity operators\\nx = 5\\nif (type(x) is int):\\n\\tprint(\\\"true\\\")\\nelse:\\n\\tprint(\\\"false\\\")\\n\\n\\n#3 \\u2018is not\\u2019 operator\\nx = 5.2\\nif (type(x) is not int):\\n    print(\\\"true\\\")\\nelse:\\n    print(\\\"false\\\")\".trim();var conditions=\"\\n    print(\\\"Welcome to the rollercoaster\\\")\\n    height = int(input(\\\"What is your height in cm? \\\"))\\n    \\n    if height >= 120:\\n        print(\\\"You can ride\\\")\\n        age = int(input(\\\"What is your age:\\\"))\\n        if age <= 12:\\n          print(\\\"Please pay $5\\\")\\n        elif age <= 18:\\n          print(\\\"Please pay $7\\\")\\n        else:\\n          print((\\\"Plese pay $10\\\"))\\n    else:\\n        print(\\\"Sorry\\\")\\n    \\n    \\n    \\n#2 Leap year or Not\\n    year = int(input(\\\"Which year you want to check? \\\"))\\n    \\n    if year % 4 == 0:\\n      if year % 100 == 0:\\n        if year % 400 == 0:\\n          print(f\\\"Year {year} is leap\\\")\\n        else:\\n          print(f\\\"Not Leap Year is {year}\\\")\\n      else:\\n        print(f\\\"Year {year} is leap\\\")\\n    else:\\n      print(f\\\"Not Leap Year is {year}\\\")\\n      \\n      \\n    \\n#3 if-elif-else ladder\\n    i = 20\\n    if (i == 10):\\n      print (\\\"i is 10\\\")\\n    elif (i == 15):\\n      print (\\\"i is 15\\\")\\n    elif (i == 20):\\n      print (\\\"i is 20\\\")\\n    else:\\n      print (\\\"i is not present\\\")\\n    \".trim();var whileLoop=\"\\nfor key, value in enumerate(['The', 'Big', 'Bang', 'Theory']):\\n  print(key, value)\\n\\n\\n#2\\nquestions = ['name', 'colour', 'shape']\\nanswers = ['apple', 'red', 'a circle']\\n\\nfor question, answer in zip(questions, answers):                                      \\n  print('What is your {0}? I am {1}.'.format(question, answer))\\n    \\n    \\n#3\\nking = {'Akbar': 'The Great', 'Chandragupta': 'The Maurya', 'Modi' : 'The Changer'}\\n\\nfor key, value in king.items():                                        \\n  print(key, value)\\n\\n\\n#4 Using reversed()\\nlis = [ 1 , 3, 5, 6, 2, 1, 3 ]\\n\\nfor i in reversed(lis):\\n  print (i,end=\\\" \\\")\\n\".trim();var containers=\"\\nkeys=['fruite', 'mobile', 'count']\\nvalues=['Apple', 'Sony', '1']\\n\\nnewDict=dict(zip(keys, values))\\nprint(newDict)\\n\".trim();var address=\"\\ndef arguments(num);                                                       #Formal arguments\\n  print(id(num))\\narguments(10)                                                             #Actual arguments\\n\".trim();var bits=\"\\n<< (Zero fill left shift) = Shift left by pushing zeros in from the right and let the leftmost bits fall off\\n  print(10 << 2)\\n\\n>> (Signed right shift) = Shift right by pushing copies of the leftmost bit in from the left, and rightmost bits fall off\\n  print(10 >> 2)\\n\".trim();var specifies=\"\\nfor x in range(6):\\n  print(x)\\nelse:\\n  print(\\\"Finally finished!\\\")\\n\".trim();var decorators=\"\\n# defining a decorator\\ndef hello_decorator(func):\\n                                                      # inner1 is a Wrapper function in which the argument is called\\ndef inner1():                                         # inner function can access outer local functions \\\"func\\\"\\nprint(\\\"Hello, this is before function execution\\\")\\nfunc()                                                        # calling the actual function inside the wrapper function.\\n\\nprint(\\\"This is after function execution\\\")\\n\\t\\nreturn inner1\\n\\ndef function_to_be_used():                                    # defining a function, to be called inside wrapper\\nprint(\\\"This is inside the function !!\\\")\\n\\n\\n# passing 'function_to_be_used' inside the decorator to control its behaviour\\nfunction_to_be_used = hello_decorator(function_to_be_used)\\nfunction_to_be_used()\\n\".trim();var IntroPython=/*#__PURE__*/function(_Component){_inherits(IntroPython,_Component);function IntroPython(){_classCallCheck(this,IntroPython);return _possibleConstructorReturn(this,_getPrototypeOf(IntroPython).apply(this,arguments));}_createClass(IntroPython,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. What is Python?\"),React.createElement(\"p\",null,\"Python is a high-level, interpreted, interactive, dynamically typed object-oriented scripting language.\"),React.createElement(\"b\",null,\"key features: \"),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"It doesn\\u2019t need to be compiled before execution.\"),React.createElement(\"li\",null,\"Python allows programming in OOS and Procedural paradigms.\"),React.createElement(\"li\",null,\"Python is a cross-platform language, i.e., a Python program written on a Windows system will also run on a Linux system with little or no modifications.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. purpose of PYTHONPATH environment variable\"),React.createElement(\"p\",null,\"PYTHONPATH variable tells Python Interpreter where to locate the module files imported into a program. It should include Python source library directory and the directories containing Python source code.\"),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Which data types are supported in Python\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Numeric Types: \"),\"int, float, complex(1j)\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Sequence Types: \"),\"List, Tuple, Strings\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Set:\"),\" Set, Frozenset\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Dictionary: \")),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Boollean: \"))),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"What are type annotations? What are generic type annotations?\"),React.createElement(\"br\",null),\"While Python is a dynamically typed language, there is a way to annotate types for clarity purposes.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"These are the built-in types:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"int\"),React.createElement(\"li\",null,\"float\"),React.createElement(\"li\",null,\"bool\"),React.createElement(\"li\",null,\"str\"),React.createElement(\"li\",null,\"bytes\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Complex types from the typing module:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"List\"),React.createElement(\"li\",null,\"Set\"),React.createElement(\"li\",null,\"Dict\"),React.createElement(\"li\",null,\"Tuple\"),React.createElement(\"li\",null,\"Optional\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. How is memory managed in Python?\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Memory in Python is managed by Python private heap space. All Python objects and data structures are located in a private heap. This private heap manage by Python Interpreter, and a programmer doesn\\u2019t have access to this private heap.\"),React.createElement(\"li\",null,\"Python memory manager takes care of the allocation of Python private heap space.\"),React.createElement(\"li\",null,\"Memory for Python private heap space is made available by Python\\u2019s in-built garbage collector, which recycles and frees up all the unused memory.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"What are loop interruption statements in Python?\"),React.createElement(\"p\",null,React.createElement(\"ul\",null,React.createElement(\"li\",null,\"break\"),React.createElement(\"li\",null,\"continue\"))),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Benefits of using Python over the other scripting languages such as Javascript.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Application development is faster and easy. \"),React.createElement(\"li\",null,\"Extensive support of modules for any kind of application development including data analytics/ ML / math-intensive applications. \")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. What is docstring in Python?\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Docstring used to describe the functionality of the function.\"),React.createElement(\"li\",null,\"Python include a description (quick notes) for their methods using docstrings. Docstrings not completely ignored by the Python Interpreter, Python documentation strings can actually be accessed at the run time using the dot operator when docstring is the first statement in a method/ function.\"),React.createElement(\"li\",null,\"docstring in functions is optional.\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:docstring,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. Can you write code to determine the name of an object in Python?\"),\"No objects in Python have any associated names. So there is no way of getting the one for an object. The assignment is only the means of binding a name to the value. The name then can only refer to access the value. The most we can do is to find the reference name of the object.\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:determine,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"complex\"),React.createElement(\"br\",null),\"Comples numbers are especially used in electronics, optics and quantum theory for describing waves and periodic phenomena.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"Uses:\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Fouries transform uses complex numbers.\"),React.createElement(\"li\",null,\"Audio signal processing in ML.\"),React.createElement(\"li\",null,\"Speech recognition system.\")),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"A complex number has real and imaginary part components (a + bj).\"),React.createElement(\"br\",null),React.createElement(\"li\",null,\"Used to convert number or string to complex number. \"),React.createElement(\"b\",null,\"Syntex: complex(real, imaginary)\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:complexs,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"7. Define Pass statement in Python?\"),\"A Pass statement used when we cannot decide what to do in our code, but we must type something for making syntactically correct.\",React.createElement(\"br\",null),React.createElement(\"h3\",null,\"8. What does the Python nonlocal statement do\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"nonlocal statement causes the listed identifiers to refer to previously bound variables in the nearest enclosing scope excluding globals.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:nonlocal,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"9. Function is First Class\"),\"A function in Python is an aggregation of related statements designed to perform a computational, logical, or evaluative task.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Properties of first class functions:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"A function is an instance of the Object type.\"),React.createElement(\"li\",null,\"store them in data structures such as hash tables, lists, \\u2026\"),React.createElement(\"li\",null,\"Functions can be passed as arguments to other functions.\"),React.createElement(\"li\",null,\"Functions can return another function.\"),React.createElement(\"li\",null,\"store the function in a variable.\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:firstClass,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"10. Pass by Reference or pass by value\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:docstrings,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Memoize_factorial main purpose is to store the intermediate results in the variable called memory.\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"11. Closure\"),\"A Closure is a function object that remembers values if they are not present in memory.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:closure,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"When and why to use Closures:\"),React.createElement(\"br\",null),\"As closures are used as callback functions.\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"For data hiding\"),React.createElement(\"li\",null,\"Reduce the use of global variables\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"12. Logging\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:logging,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"13. Kwargs\"),\"We can pass a variable number of arguments to a function using two special symbols:\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"1.)*args (Non-Keyword Arguments)\"),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"*args allows take more arguments than the number of formal arguments that previously defined.\"),React.createElement(\"li\",null,\"Using *, the variable that associate with * becomes an iterable.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Ex. \"),\" To make a multiply function that takes any number of arguments and able to multiply them all together. It can be done using *args.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"2.)**kwargs (Keyword Arguments)\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Used to pass a keyworded, variable-length argument list.\"),React.createElement(\"li\",null,\"A keyword argument is where we provide a name to the variable as pass it into the function.\"),React.createElement(\"li\",null,\"One can think of the kwargs as being a dictionary that maps each keyword to the value that we pass alongside it. That is why when we iterate over the kwargs there doesn\\u2019t seem to be any order in which they were printed out.\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"N: \"),\"\\u201CWe use the \",React.createElement(\"b\",null,\"*args OR **kwargs\"),\" \\u2013 when we have doubts about the number of  arguments pass in a function.\\u201D\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:kwargs,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"14. Forced keyword arguments\"),\"keyword-only arguments can enforce with:\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"If write '*,' in our function parameter list, all parameters after that must be passed as keyword arguments.\"),React.createElement(\"li\",null,\"Arguments after variable-length arguments must be keyword arguments.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:forced,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"15. Variables\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Global variables are defined and declared outside a function and we use them inside a function.\"),React.createElement(\"li\",null,\"Global keyword is used inside a function only when we want to do assignments or when we want to change a variable. Global is not needed for printing and accessing.\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Rules of global keyword:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"If a variable is assigned a value anywhere within the function\\u2019s body, it\\u2019s assumed to be a local unless explicitly declared as global.\"),React.createElement(\"li\",null,\"Variables that are only referenced inside a function are implicitly global.\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:variables,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"16. Function Arguments and parameters\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:parameters,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"17. Positional and keyword arguments\"),\"Benefits of keyword arguments can be:\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Call arguments by their names to make it more clear what they represent.\"),React.createElement(\"li\",null,\"Most readable.\"),React.createElement(\"li\",null,\"assign keyword If not able to assign positional argument.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:rearrange,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"18. Default arguments\"),\"Default arguments with a predefined value, must be defined as the last parameters in a function.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:defaultargs,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Unpacking into agruments\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Lists/ tuples can be unpacked into arguments with (*) if the length of the container matches the number of function parameters.\"),React.createElement(\"li\",null,\"Dictionaries can be unpacked into arguments with (**) if the length and keys match the function parameters.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:unpacking,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"19. Parameter passing\"),\"Parameter passing can be done by \",React.createElement(\"b\",null,\"Call-by-Object or Call-by-Object-Reference\"),\".\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Parameter passed in is actually a reference to an object (but the reference is passed by value).\"),React.createElement(\"li\",null,\"Difference between mutable and immutable data types.\")),\"This means that:\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Mutable objects (lists,dict) can be changed within a method. But if you rebind the reference in the method, the outer reference will still point at the original object.\"),React.createElement(\"li\",null,\"Immutable objects (int, string) cannot be changed within a method.\"),\"But immutable object CONTAINED WITHIN a mutable object can be re-assigned within a method.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:passing,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"20. Operators\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:operators,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Operator Overloading\"),React.createElement(\"ul\",null,React.createElement(\"i\",null,\"Python magic methods or special functions for operator overloading.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"+ :\"),\"__add__(self, other)\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"\\u2013 :\"),\"__sub__(self, other)\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"* :\"),\"__mul__(self, other)\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"/ :\"),\"__truediv__(self, other)\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"// :\"),\"__floordiv__(self, other)\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"% :\"),\"__mod__(self, other)\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"** :\"),\"__pow__(self, other)\"),React.createElement(\"br\",null)),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:overloadings,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Divisions\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:divisions,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"21. Any and All\"),\"Any and All are used for And/Or.\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Any: \"),\"Returns True if any of the elements of a given iterable (List, Dictionary, Tuple, set, etc) are True else False. \"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"All: \"),\"Returns True if all elements in the given iterable are True. else False.\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:anyAll,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"22. Assignment\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:assignment,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"23. ISS (Difference between == and is)\"),\"List1 and list2 refers to different objects.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:iss,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"24. Membership and Identity Operators\"),\"Membership operators are operators used to validate the membership of a value. It test for membership in a sequence, such as strings, lists, or tuples.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Identity operators:\"),React.createElement(\"br\",null),\"Determine whether a value is of a certain class or type. They are usually used to determine the type of data a certain variable contains.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"\\u2018is\\u2019 operator \\u2013 Evaluates to True if the variables on either side of the operator point to the same object otherwise False.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:validate,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"25. Conditions\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:conditions,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"26. While\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Using iteritem(): \"),\"iteritems() is used to loop through the dictionary printing the dictionary key-value pair sequentially.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"Using items(): \"),\"items() performs the similar task on dictionary as iteritems() but have certain disadvantages when compared with iteritems().\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"It is very time-consuming. Calling it on large dictionaries consumes quite a lot of time.\"),React.createElement(\"li\",null,\"Takes lot of memory. Sometimes takes double the memory when called on a dictionary.\"))),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"enumerate(): \"),\"is used to loop through the containers printing the index number along with the value present in that particular index.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"zip(): \"),\"is used to combine 2 similar containers(list-list or dict-dict) printing the values sequentially. The loop exists only till the smaller container ends.\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"items: \"),\"using items to print the dictionary key-value pair.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:whileLoop,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"zip()\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Takes iterable/ containers and returns a single iterator object, having mapped values from all the containers.\"),React.createElement(\"li\",null,\"It is used to map the similar index of multiple containers so that they can be used just using a single entity.\"),React.createElement(\"li\",null,\"If passed iterators have different lengths, the iterator with the least items decides the length of the new iterator.\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:containers,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Get address of the varriable\"),\"Don't Create constant varriable in Python.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:address,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"BitWise Operators\"),React.createElement(\"table\",null,React.createElement(\"tr\",null,React.createElement(\"th\",null,\"Operators\"),React.createElement(\"th\",null,\"Name\"),React.createElement(\"th\",null,\"Explains\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"&\"),React.createElement(\"td\",null,\"AND\"),React.createElement(\"td\",null,\"print(12 & 13)\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"|\"),React.createElement(\"td\",null,\"OR\"),React.createElement(\"td\",null,\"print(12 | 13)\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"^\"),React.createElement(\"td\",null,\"XOR\"),React.createElement(\"td\",null,\"Sets each bit to 1 if only one of two bits is 1. print(12 ^ 13)\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,\"~\"),React.createElement(\"td\",null,\"NOT\"),React.createElement(\"td\",null,\"Inverts all the bits. print(~12)\"))),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:bits,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"For Else\"),\"The else keyword in a for loop specifies a block of code to be executed when the loop is finished.\",React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:specifies,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Decorators\"),\"It allows programmers to modify the behaviour of function or class. Decorators allow us to wrap another function in order to extend the behaviour of the wrapped function, without permanently modifying it.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:decorators,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return IntroPython;}(Component);export default withStyles(styles)(IntroPython);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/pythone/deeppy/introPython.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","docstring","trim","determine","complexs","nonlocal","firstClass","docstrings","closure","logging","kwargs","variables","parameters","rearrange","defaultargs","forced","unpacking","passing","operators","overloadings","divisions","anyAll","assignment","iss","validate","conditions","whileLoop","containers","address","bits","specifies","decorators","IntroPython","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst docstring = `def power(a, b):\n\"\"\"Returns arg1 raised to power arg2.\"\"\"\nreturn a ** b\n\nprint(power.__doc__)\n`.trim()\n\nconst determine = `class Test:\ndef __init__(self, name):\n    self.cards = []\n    self.name = name\n\ndef __str__(self):\n    return '{} holds ...'.format(self.name)\n\n\nobj = Test('obj')\nprint(obj)\n`.trim()\n\nconst complexs = `\nnum=2+3j\nprint(num.real)\nprint(num.imag)\n`.trim();\n\nconst nonlocal = `\ndef make_counter():\n    count = 0\n    def counter():\n        nonlocal count\n        count += 1\n        return count\n    return counter`.trim();\n\nconst firstClass = `\ndef shout(text):\n    return text.upper()\nprint (shout('Hello'))\n    \n    \n    \n#2\ndef shout(text):\n  return text.upper()\n\ndef whisper(text):\n  return text.lower()\n\ndef greet(func):\n  greeting = func(\"\"\"Hi, I am created by a function.\"\"\")\n  print (greeting)\n\ngreet(shout)\ngreet(whisper)\n    \n    \n#3\ndef create_adder(x):\n  def adder(y):\n    return x+y\n  return adder\n\nadd_15 = create_adder(15)\nprint (add_15(10))\n`.trim();\n\nconst docstrings = `\ndef myFun(x):\n      x[0] = 20\n      lst = [10, 11, 12, 13, 14, 15]\n      myFun(lst)\n      print(lst)\n    \ndef myFun(x, y=50):                                                             # Default arguments.\n  print(\"x: \", x)\n  print(\"y: \", y)\n\nmyFun(10)                                                            \n`.trim();\n\nconst closure = `\n    def oF(text):\n      text = text\n      def iF():\n        print(text)\n      return iF                                                           # returning function WITHOUT parenthesis\n    \n    if __name__ == '__main__':\n      myFunction = oF('Hey!')\n      myFunction()\n    `.trim();\n\nconst logging = `\nimport logging\nlogging.basicConfig(filename='example.log', level=logging.INFO)\n\ndef logger(func):\n    def log_func(*args):\n        logging.info('Running \"{}\" with arguments {}'.format(func.__name__,args))\n        print(func(*args))\n\n    return log_func\n\ndef add(x, y):\n    return x + y\n\ndef sub(x, y):\n    return x - y\n\nadd_logger = logger(add)\nsub_logger = logger(sub)\n\nadd_logger(3, 3)\nadd_logger(4, 5)\n`.trim();\n\nconst kwargs = `\ndef student(firstname, lastname):\n  print(firstname, lastname)\n\nstudent(lastname='Practice', firstname='Geeks')                      # Keyword arguments\n    \n    \n#2 Variable-length arguments:\ndef myFun(*argv):\n  for arg in argv:\n    print(arg)\n\nmyFun('Hello', 'Welcome', 'to', 'GeeksforGeeks')\n    \n    \n# 3\ndef myFun(**kwargs):\n  for key, value in kwargs.items():\n    print(\"%s == %s\" % (key, value))\n\nmyFun(first='Geeks', mid='for', last='Geeks')\n    \n    \n    \n#4 with one extra argument.\ndef myFun(arg1, **kwargs):\n    for key, value in kwargs.items():\n        print(\"%s == %s\" % (key, value))\n\nmyFun(\"Hi\", first='Geeks', mid='for', last='Geeks')\n    \n    \n    \n#5 To call a function\ndef myFun(arg1, arg2, arg3):\n    print(\"arg1:\", arg1)\n    print(\"arg2:\", arg2)\n    print(\"arg3:\", arg3)\n\nargs = (\"Geeks\", \"for\", \"Geeks\")\nmyFun(*args)\n\nkwargs = {\"arg1\": \"Geeks\", \"arg2\": \"for\", \"arg3\": \"Geeks\"}\nmyFun(**kwargs)\n`.trim();\n\nconst variables = `\n    #1\n    def f():\n      s = \"Me too.\"\n      print(s)\n    \n    s = \"I love Geeksforgeeks\"\n    f()\n    \n    \n    #2\n    a=10\n    def something():\n      global a\n      a=15\n      print('in function ',a)\n    \n    something()\n    print('outside', a)\n    \n    \n    #3\n    a = 10\n    print(id(a))\n    \n    def something():\n        a = 20\n        x = globals()['a']\n        print(id(x))\n        print('in function ', a)\n    \n        globals()['a'] = 15\n    \n    something()\n    print('outside', a)`.trim();\n\nconst parameters = `\ndef print_name(name):                                                     # name is the parameter\n    print(name)\n\nprint_name('Alex')                                                        # 'Alex' is the argument\n`.trim();\n\nconst rearrange = `\n#positional argument\ndef f1(a,b):\n    print(\"a=\",a,\"b=\",b)\nf1(1,2)\n\n\n#keyword argument\ndef f1(a,b):\n    print(\"a=\",a,\"b=\",b)\nf1(b=1,a=2)\n    \n    \n    \n#3\ndef foo(a, b, c):\n    print(a, b, c)\n    \nfoo(1, 2, 3)                                                        # positional arguments\nfoo(a=1, b=2, c=3)                                                  # keyword arguments\nfoo(c=3, b=2, a=1)                                                  # Order is not important\nfoo(1, b=2, c=3)                                                    \n\n# This is not allowed:\nfoo(1, b=2, 3)                                                      # positional argument after keyword argument\nfoo(1, b=2, a=3)                                                    # multiple values for argument 'a'`\n  .trim();\n\nconst defaultargs = `\ndef foo(a, b, c, d=4):                                                  # default arguments\n    print(a, b, c, d)\n\nfoo(1, 2, 3)\nfoo(1, b=2, c=3, d=100)\n\ndef foo(a, b=2, c, d=4):                                                # default arguments must be at the end\n    print(a, b, c, d)\n`.trim();\n\nconst forced = `\ndef foo(a, b, *, c, d):\n    print(a, b, c, d)\n\nfoo(1, 2, c=3, d=4)\n# foo(1, 2, 3, 4)                                                               # not allowed:\n\n                                                \ndef foo(*args, last):\n    for arg in args:\n        print(arg)\n    print(last)\n\nfoo(8, 9, 10, last=50)\n`.trim();\n\nconst unpacking = `\ndef foo(a, b, c):\n    print(a, b, c)\n\nmy_list = [4, 5, 6] # or tuple\nfoo(*my_list)                                                     # list/tuple unpacking, length must match\n\nmy_dict = {'a': 1, 'b': 2, 'c': 3}                                # dict unpacking, keys and length must match\nfoo(**my_dict)\n\n# my_dict = {'a': 1, 'b': 2, 'd': 3}                              # not possible since wrong keyword\n`.trim();\n\nconst passing = `\n# immutable objects \ndef foo(x):\n    x = 5                                 # x += 5 also no effect since x is immutable and a new variable must be created\n\nvar = 10\nprint('var before foo():', var)\nfoo(var)\nprint('var after foo():', var)\n\n\n#2 mutable objects \ndef foo(a_list):\n    a_list.append(4)\n    \nmy_list = [1, 2, 3]\nprint('my_list before foo', my_list)\nfoo(my_list)\nprint('my_list after foo', my_list)\n    \n    \n#3 immutable objects within a mutable object \na_list[0] = -100\na_list[2] = \"Paul\"\n\nmy_list = [1, 2, \"Max\"]\nprint('my_list before foo', my_list)\nfoo(my_list)\nprint('my_list after foo', my_list)\n\n\n#4 Rebind a mutable reference \ndef foo(a_list):\n    a_list = [50, 60, 70]                                   # a_list is now a new local variable within the function\n    a_list.append(50)\n    \nmy_list = [1, 2, 3]\nprint('my_list before', my_list)\nfoo(my_list)\nprint('my_list after', my_list)\n`.trim();\n\nconst operators = `\nval = input(\"Enter your value: \")\nprint(val)\n\n\n#2. Ternary\na, b = 10, 20\nmin = a if a < b else b      \n\nprint(min)\nprint(\"Both equal\" if a == b else \"a > b\" if a > b else \"b > a\")                   # Ternary operator as nested if-else\n\n\n#3. Direct Method by using tuples, Dictionary and lambda Python.\nprint((b, a)[a < b])                                                               # Use tuple for selecting an item\nprint({True: a, False: b}[a < b])                                                  # Use Dictionary for selecting an item\n\n\n#4. Only one expression will be evaluated unlike in tuple and Dictionary.\nprint((lambda: b, lambda: a)[a < b]())\n`.trim();\n\nconst overloadings = `\nclass A:\n    def __init__(self, a):\n        self.a = a\n\n    def __add__(self, o):\n        return self.a + o.a                                                             // adding two objects\n\n\nob1 = A(1)\nob2 = A(2)\nob3 = A(\"Geeks\")\nob4 = A(\"For\")\n\nprint(ob1 + ob2)\nprint(ob3 + ob4)\n\n\n// 2\nclass complex:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\n    def __add__(self, other):\n        return self.a + other.a, self.b + other.b\n\nOb1 = complex(1, 2)\nOb2 = complex(2, 3)\nprint(Ob1 + Ob2)\n\n\n// 3\nclass A:\n    def __init__(self, a):\n        self.a = a\n\n    def __gt__(self, other):\n        if (self.a > other.a):\n            return True\n        else:\n            return False\n\nob1 = A(2)\nob2 = A(3)\nif (ob1 > ob2):\n    print(\"ob1 is greater than ob2\")\nelse:\n    print(\"ob2 is greater than ob1\")\n`.trim();\n\nconst divisions = `\nprint (5//2)\n\nprint (-5.0/2)\n`.trim();\n\nconst anyAll = `\nboolean_list = ['True', 'True', 'True']\nresult = all(boolean_list)\nresult = any(boolean_list)\n\nprint(result)\n\n`.trim();\n\nconst assignment = `\nimport operator\n\na = 3\nb = 3\nc = 4\n\nx = operator.add(a, b)\nx = operator.sub(a, b)\nx = operator.mul(a, b)\nx = operator.truediv(a, b)\nx = operator.floordiv(a, b)\nx = operator.pow(a, b)\nx = operator.mod(a, b)\n\nprint(x)                                         \n\n\n\nif (operator.lt(a, b)):                                         # using lt() to check if a is less than b\n    print(a)\nelse:\n    print(\"a !< b\")\n\n\nif (operator.le(a, b)):                                         # using le() to check if a is less than or equal to b\n    print(\"a<=b\")\nelse:\n    print(b)\n\n\nif (operator.eq(a, b)):                                         # using eq() to check if a is equal to b\n    print(\"a==b\")\nelse:\n    print(c)\n    \n    \n\nif (operator.gt(a, b)):                                         # using gt() to check if a is greater than b\n    print(\"a>b\")\nelse:\n    print(b)\n\n\nif (operator.ge(a, b)):                                         # using ge() to check if a is greater than or equal to b\n    print(\"a=>b\")\nelse:\n    print(a)\n\n\nif (operator.ne(a, b)):                                         # using ne() to check if a is not equal to b\n    print(\"a!==b\")\nelse:\n    print(b)\n\n\n    \n//5\nli = [1, 5, 6, 7, 8]\n\nfor i in range(0,len(li)):\n\tprint (li[i],end=\" \")\n\noperator.setitem(li,3,3)                                      # using setitem() to assign 3 at 4th position\n\nfor i in range(0,len(li)):                                    # printing modified list after setitem()\n\tprint (li[i],end=\" \")\n\noperator.delitem(li,1)                                        # using delitem() to delete value at 2nd index\n\nfor i in range(0,len(li)):\n\tprint (li[i],end=\" \")\n\nprint (operator.getitem(li,3))                                # using getitem() to access 4th element\n\n\n//6\nli = [1, 5, 6, 7, 8]\n\nfor i in range(0,len(li)):\n\tprint (li[i],end=\" \")\n\noperator.setitem(li,slice(1,4),[2,3,4])                      # using setitem() to assign 2,3,4 at 2nd,3rd and 4th index\n\nfor i in range(0,len(li)):\n\tprint (li[i],end=\" \")\n\noperator.delitem(li,slice(2,4))                              # using delitem() to delete value at 3rd and 4th index\n\nfor i in range(0,len(li)):\n\tprint (li[i],end=\" \")\n\nprint (operator.getitem(li,slice(0,2)))                     # using getitem() to access 1st and 2nd element\n\n\n//7\ns1 = \"geeksfor\"\ns2 = \"geeks\"\nprint (operator.concat(s1,s2))\n\nif (operator.contains(s1,s2)):                              # contains() to check if s1 contains s2                         \n\tprint (\"geeksfor\")\nelse : print (\"not contain geeks\")\n\n\n\n//8 Python code to demonstrate working of and_(), or_(), xor(), invert()\n\nprint (operator.and_(a,b))                                  # using and_() to display bitwise and operation\nprint (operator.or_(a,b))                                   # using or_() to display bitwise or operation\nprint (operator.xor(a,b))                                   # using xor() to display bitwise exclusive or operation\noperator.invert(a)                                          # using invert() to invert value of a\nprint (operator.invert(a))\n`.trim();\n\nconst iss = `\nlist1 = []\nlist2 = []\nlist3=list1\n\nif (list1 == list2):\n\tprint(\"True\")\nelse:\n\tprint(\"False\")\n\nif (list1 is list2):\n\tprint(\"True\")\nelse:\n\tprint(\"False\")\n\n\nprint(id(list1))\nprint(id(list2))`.trim();\n\nconst validate = `\n# The ‘in’ operator is used to check if a value exists in a sequence or not.\nlist1=[1,2,3,4,5]\nlist2=[6,7,8,9]\nfor item in list1:\n\tif item in list2:\n\t\tprint(\"overlapping\")\nelse:\n\tprint(\"not overlapping\")\n\n\n#2 Identity operators\nx = 5\nif (type(x) is int):\n\tprint(\"true\")\nelse:\n\tprint(\"false\")\n\n\n#3 ‘is not’ operator\nx = 5.2\nif (type(x) is not int):\n    print(\"true\")\nelse:\n    print(\"false\")`.trim();\n\nconst conditions = `\n    print(\"Welcome to the rollercoaster\")\n    height = int(input(\"What is your height in cm? \"))\n    \n    if height >= 120:\n        print(\"You can ride\")\n        age = int(input(\"What is your age:\"))\n        if age <= 12:\n          print(\"Please pay $5\")\n        elif age <= 18:\n          print(\"Please pay $7\")\n        else:\n          print((\"Plese pay $10\"))\n    else:\n        print(\"Sorry\")\n    \n    \n    \n#2 Leap year or Not\n    year = int(input(\"Which year you want to check? \"))\n    \n    if year % 4 == 0:\n      if year % 100 == 0:\n        if year % 400 == 0:\n          print(f\"Year {year} is leap\")\n        else:\n          print(f\"Not Leap Year is {year}\")\n      else:\n        print(f\"Year {year} is leap\")\n    else:\n      print(f\"Not Leap Year is {year}\")\n      \n      \n    \n#3 if-elif-else ladder\n    i = 20\n    if (i == 10):\n      print (\"i is 10\")\n    elif (i == 15):\n      print (\"i is 15\")\n    elif (i == 20):\n      print (\"i is 20\")\n    else:\n      print (\"i is not present\")\n    `.trim();\n\nconst whileLoop = `\nfor key, value in enumerate(['The', 'Big', 'Bang', 'Theory']):\n  print(key, value)\n\n\n#2\nquestions = ['name', 'colour', 'shape']\nanswers = ['apple', 'red', 'a circle']\n\nfor question, answer in zip(questions, answers):                                      \n  print('What is your {0}? I am {1}.'.format(question, answer))\n    \n    \n#3\nking = {'Akbar': 'The Great', 'Chandragupta': 'The Maurya', 'Modi' : 'The Changer'}\n\nfor key, value in king.items():                                        \n  print(key, value)\n\n\n#4 Using reversed()\nlis = [ 1 , 3, 5, 6, 2, 1, 3 ]\n\nfor i in reversed(lis):\n  print (i,end=\" \")\n`.trim();\n\nconst containers = `\nkeys=['fruite', 'mobile', 'count']\nvalues=['Apple', 'Sony', '1']\n\nnewDict=dict(zip(keys, values))\nprint(newDict)\n`.trim();\n\nconst address = `\ndef arguments(num);                                                       #Formal arguments\n  print(id(num))\narguments(10)                                                             #Actual arguments\n`.trim();\n\nconst bits = `\n<< (Zero fill left shift) = Shift left by pushing zeros in from the right and let the leftmost bits fall off\n  print(10 << 2)\n\n>> (Signed right shift) = Shift right by pushing copies of the leftmost bit in from the left, and rightmost bits fall off\n  print(10 >> 2)\n`.trim();\n\nconst specifies = `\nfor x in range(6):\n  print(x)\nelse:\n  print(\"Finally finished!\")\n`.trim();\n\nconst decorators = `\n# defining a decorator\ndef hello_decorator(func):\n                                                      # inner1 is a Wrapper function in which the argument is called\ndef inner1():                                         # inner function can access outer local functions \"func\"\nprint(\"Hello, this is before function execution\")\nfunc()                                                        # calling the actual function inside the wrapper function.\n\nprint(\"This is after function execution\")\n\t\nreturn inner1\n\ndef function_to_be_used():                                    # defining a function, to be called inside wrapper\nprint(\"This is inside the function !!\")\n\n\n# passing 'function_to_be_used' inside the decorator to control its behaviour\nfunction_to_be_used = hello_decorator(function_to_be_used)\nfunction_to_be_used()\n`.trim();\n\n\nclass IntroPython extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. What is Python?</h3>\n              <p>\n                Python is a high-level, interpreted, interactive, dynamically typed object-oriented scripting language.\n              </p>\n              <b>key features: </b>\n              <br />\n              <ul>\n                <li>It doesn’t need to be compiled before execution.</li>\n                <li>Python allows programming in OOS and Procedural paradigms.</li>\n                <li>Python is a cross-platform language, i.e.,\n                  a Python program written on a Windows system will also run on a Linux system with little or no modifications.</li>\n              </ul>\n              <br />\n\n              <h3>2. purpose of PYTHONPATH environment variable</h3>\n              <p>\n                PYTHONPATH variable tells Python Interpreter where to locate the module files\n                imported into a program. It should include Python source library directory and the directories containing Python source code.\n              </p>\n              <br />\n\n              <h3>3. Which data types are supported in Python</h3>\n              <ul>\n                <li><b>Numeric Types: </b>int, float, complex(1j)</li>\n                <li><b>Sequence Types:\t</b>List, Tuple, Strings</li>\n                <li><b>Set:</b> Set, Frozenset</li>\n                <li><b>Dictionary: </b></li>\n                <li><b>Boollean:\t</b></li>\n              </ul>\n              <br />\n              <br />\n\n              <b>What are type annotations? What are generic type annotations?</b>\n              <br />\n              While Python is a dynamically typed language, there is a way to annotate types for clarity purposes.\n              <br />\n              <br />\n              <b>These are the built-in types:</b>\n              <ul>\n                <li>int</li>\n                <li>float</li>\n                <li>bool</li>\n                <li>str</li>\n                <li>bytes</li>\n              </ul>\n              <br />\n\n              <b>Complex types from the typing module:</b>\n              <ul>\n                <li>List</li>\n                <li>Set</li>\n                <li>Dict</li>\n                <li>Tuple</li>\n                <li>Optional</li>\n              </ul>\n              <br />\n\n              <h3>4. How is memory managed in Python?</h3>\n              <ul>\n                <li>Memory in Python is managed by Python private heap space. All Python objects and data structures are located in a\n                  private heap. This private heap manage by Python Interpreter, and a programmer doesn’t have access\n                  to this private heap.</li>\n                <li>Python memory manager takes care of the allocation of Python private heap space.</li>\n                <li>Memory for Python private heap space is made available by Python’s in-built garbage collector, which recycles and\n                  frees up all the unused memory.</li>\n              </ul>\n              <br />\n              <br />\n\n              <b>What are loop interruption statements in Python?</b>\n              <p>\n                <ul>\n                  <li>break</li>\n                  <li>continue</li>\n                </ul>\n              </p>\n              <br />\n              <br />\n\n              <b>Benefits of using Python over the other scripting languages such as Javascript.</b>\n              <ul>\n                <li>Application development is faster and easy. </li>\n                <li>Extensive support of modules for any kind of application development including data analytics/ ML\n                  / math-intensive applications. </li>\n              </ul>\n              <br />\n\n              <h3>5. What is docstring in Python?</h3>\n              <ul>\n                <li>Docstring used to describe the functionality of the function.</li>\n                <li>Python include a description (quick notes) for their methods using\n                  docstrings. Docstrings not completely ignored by the Python Interpreter, Python\n                  documentation strings can actually be accessed at the run\n                  time using the dot operator when docstring is the first statement in a method/ function.</li>\n                <li>docstring in functions is optional.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={docstring}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Can you write code to determine the name of an object in Python?</h3>\n              No objects in Python have any associated names. So there is no way of getting the one for an object. The assignment is only the means of\n              binding a name to the value. The name then can only refer to access the value. The most we can do is to find the reference name of the object.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={determine}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>complex</b>\n              <br />\n              Comples numbers are especially used in electronics, optics and quantum theory for describing waves and periodic phenomena.\n              <br />\n              <br />\n              Uses:\n              <ul>\n                <li>Fouries transform uses complex numbers.</li>\n                <li>Audio signal processing in ML.</li>\n                <li>Speech recognition system.</li>\n              </ul>\n              <br />\n              <ul>\n                <li>A complex number has real and imaginary part components (a + bj).</li>\n                <br />\n                <li>Used to convert number or string to complex number. </li>\n                <b>Syntex: complex(real, imaginary)</b>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={complexs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7. Define Pass statement in Python?</h3>\n              A Pass statement used when we cannot decide what to do in our code, but we must type something for making syntactically correct.\n              <br />\n\n              <h3>8. What does the Python nonlocal statement do</h3>\n              <ul>\n                <li>nonlocal statement causes the listed identifiers to refer to previously bound variables in the nearest enclosing scope excluding globals.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={nonlocal}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>9. Function is First Class</h3>\n              A function in Python is an aggregation of related statements designed to perform a computational, logical, or evaluative task.\n              <br />\n              <br />\n              <b>Properties of first class functions:</b>\n              <ul>\n                <li>A function is an instance of the Object type.</li>\n                <li>store them in data structures such as hash tables, lists, …</li>\n                <li>Functions can be passed as arguments to other functions.</li>\n                <li>Functions can return another function.</li>\n                <li>store the function in a variable.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={firstClass}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>10. Pass by Reference or pass by value</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={docstrings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <ul>\n                <li>Memoize_factorial main purpose is to store the intermediate results in the variable called memory.</li>\n              </ul>\n              <br />\n\n              <h3>11. Closure</h3>\n              A Closure is a function object that remembers values if they are not present in memory.\n              <div style={titles}>\n                <PrismCode\n                  code={closure}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>When and why to use Closures:</b>\n              <br />\n              As closures are used as callback functions.\n              <ul>\n                <li>For data hiding</li>\n                <li>Reduce the use of global variables</li>\n              </ul>\n              <br />\n\n              <h3>12. Logging</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={logging}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>13. Kwargs</h3>\n              We can pass a variable number of arguments to a function using two special symbols:\n              <br />\n              <br />\n              <b>1.)*args (Non-Keyword Arguments)</b>\n              <br />\n              <ul>\n                <li>*args allows take more arguments than the number of formal arguments that\n                  previously defined.</li>\n                <li>Using *, the variable that associate with * becomes an iterable.</li>\n                <li><b>Ex. </b> To make a multiply function that takes any number of arguments and able to multiply them all together. It can be done using *args.</li>\n              </ul>\n              <br />\n              <br />\n              <b>2.)**kwargs (Keyword Arguments)</b>\n              <ul>\n                <li>Used to pass a keyworded, variable-length argument list.</li>\n                <li>A keyword argument is where we provide a name to the variable as pass it into the function.</li>\n                <li>One can think of the kwargs as being a dictionary that maps each keyword to the value that we pass alongside it. That is why when we iterate over the kwargs there doesn’t seem to be any order in which they were printed out.</li>\n              </ul>\n              <br />\n              <b>N: </b>“We use the <b>*args OR **kwargs</b> – when we have doubts about the number of  arguments pass in a function.”\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={kwargs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>14. Forced keyword arguments</h3>\n              keyword-only arguments can enforce with:\n              <ul>\n                <li>If write '*,' in our function parameter list, all parameters after that must be passed as keyword arguments.</li>\n                <li>Arguments after variable-length arguments must be keyword arguments.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={forced}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>15. Variables</h3>\n              <ul>\n                <li>Global variables are defined and declared outside a function and we use them inside a function.</li>\n                <li>Global keyword is used inside a function only when we want to do assignments or when we want to change a variable. Global is not needed for printing and accessing.</li>\n              </ul>\n              <br />\n\n              <b>Rules of global keyword:</b>\n              <ul>\n                <li>If a variable is assigned a value anywhere within the function’s body, it’s assumed to be a local unless explicitly declared as global.</li>\n                <li>Variables that are only referenced inside a function are implicitly global.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={variables}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>16. Function Arguments and parameters</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={parameters}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>17. Positional and keyword arguments</h3>\n              Benefits of keyword arguments can be:\n              <ul>\n                <li>Call arguments by their names to make it more clear what they represent.</li>\n                <li>Most readable.</li>\n                <li>assign keyword If not able to assign positional argument.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={rearrange}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>18. Default arguments</h3>\n              Default arguments with a predefined value, must be defined as the last parameters in a function.\n              <div style={titles}>\n                <PrismCode\n                  code={defaultargs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Unpacking into agruments</h3>\n              <ul>\n                <li>Lists/ tuples can be unpacked into arguments with (*) if the length of the container matches the number of function parameters.</li>\n                <li>Dictionaries can be unpacked into arguments with (**) if the length and keys match the function parameters.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={unpacking}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>19. Parameter passing</h3>\n              Parameter passing can be done by <b>Call-by-Object or Call-by-Object-Reference</b>.\n              <ul>\n                <li>Parameter passed in is actually a reference to an object (but the reference is passed by value).</li>\n                <li>Difference between mutable and immutable data types.</li>\n              </ul>\n              This means that:\n              <br />\n              <ul>\n                <li>Mutable objects (lists,dict) can be changed within a method. But if you rebind the reference in the method, the outer reference\n                  will still point at the original object.</li>\n                <li>Immutable objects (int, string) cannot be changed within a method.</li>\n                But immutable object CONTAINED WITHIN a mutable object can be re-assigned within a method.\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={passing}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>20. Operators</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={operators}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Operator Overloading</b>\n              <ul>\n                <i>Python magic methods or special functions for operator overloading.</i>\n                <li><b>+ :</b>__add__(self, other)</li>\n                <li><b>– :</b>__sub__(self, other)</li>\n                <li><b>* :</b>__mul__(self, other)</li>\n                <li><b>/ :</b>__truediv__(self, other)</li>\n                <li><b>// :</b>__floordiv__(self, other)</li>\n                <li><b>% :</b>__mod__(self, other)</li>\n                <li><b>** :</b>__pow__(self, other)</li>\n                <br />\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={overloadings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Divisions</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={divisions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>21. Any and All</h3>\n              Any and All are used for And/Or.\n              <br />\n              <ul>\n                <li><b>Any: </b>Returns True if any of the elements of a given iterable (List, Dictionary, Tuple, set, etc) are True else False. </li>\n                <li><b>All: </b>Returns True if all elements in the given iterable are True. else False.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={anyAll}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>22. Assignment</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={assignment}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>23. ISS (Difference between == and is)</h3>\n              List1 and list2 refers to different objects.\n              <div style={titles}>\n                <PrismCode\n                  code={iss}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>24. Membership and Identity Operators</h3>\n              Membership operators are operators used to validate the membership of a value. It test for\n              membership in a sequence, such as strings, lists, or tuples.\n              <br />\n              <br />\n              <b>Identity operators:</b>\n              <br />\n              Determine whether a value is of a certain class or type. They are usually used to\n              determine the type of data a certain variable contains.\n              <br />\n              <br />\n              ‘is’ operator – Evaluates to True if the variables on either side of the operator point to the same object otherwise False.\n              <div style={titles}>\n                <PrismCode\n                  code={validate}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>25. Conditions</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={conditions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>26. While</h3>\n              <ul>\n                <li><b>Using iteritem(): </b>iteritems() is used to loop through the dictionary printing the dictionary key-value pair sequentially.</li>\n                <li><b>Using items(): </b>items() performs the similar task on dictionary as iteritems() but have certain disadvantages when compared with iteritems().</li>\n                <ul>\n                  <li>It is very time-consuming. Calling it on large dictionaries consumes quite a lot of time.</li>\n                  <li>Takes lot of memory. Sometimes takes double the memory when called on a dictionary.</li>\n                </ul>\n              </ul>\n              <br />\n\n              <ul>\n                <li><b>enumerate(): </b>is used to loop through the containers printing the index number along with the value present in that\n                  particular index.</li>\n                <li><b>zip(): </b>is used to combine 2 similar containers(list-list or dict-dict) printing the values\n                  sequentially. The loop exists only till the smaller container ends.</li>\n                <li><b>items: </b>using items to print the dictionary key-value pair.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={whileLoop}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>zip()</h3>\n              <ul>\n                <li>Takes iterable/ containers and returns a single iterator object, having mapped values from all the containers.</li>\n                <li>It is used to map the similar index of multiple containers so that they can be used just using a single entity.</li>\n                <li>If passed iterators have different lengths, the iterator with the least items decides the length of the new iterator.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={containers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Get address of the varriable</h3>\n              Don't Create constant varriable in Python.\n              <div style={titles}>\n                <PrismCode\n                  code={address}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>BitWise Operators</h3>\n              <table>\n                <tr>\n                  <th>Operators</th>\n                  <th>Name</th>\n                  <th>Explains</th>\n                </tr>\n                <tr>\n                  <td>&</td>\n                  <td>AND</td>\n                  <td>print(12 & 13)</td>\n                </tr>\n                <tr>\n                  <td>|</td>\n                  <td>OR</td>\n                  <td>print(12 | 13)</td>\n                </tr>\n                <tr>\n                  <td>^</td>\n                  <td>XOR</td>\n                  <td>Sets each bit to 1 if only one of two bits is 1. print(12 ^ 13)</td>\n                </tr>\n                <tr>\n                  <td>~</td>\n                  <td>NOT</td>\n                  <td>Inverts all the bits. print(~12)</td>\n                </tr>\n              </table>\n              <div style={titles}>\n                <PrismCode\n                  code={bits}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>For Else</h3>\n              The else keyword in a for loop specifies a block of code to be executed when the loop is finished.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={specifies}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Decorators</h3>\n              It allows programmers to modify the behaviour of function or class. Decorators allow us to wrap another function in order to extend the behaviour of the wrapped function, without permanently modifying it.\n              <div style={titles}>\n                <PrismCode\n                  code={decorators}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(IntroPython));\n"]},"metadata":{},"sourceType":"module"}