{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../styles.css';import Sidebar from'../sidebar';import PrismCode from'../prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var operators=\"\\nfunction solve(meal_cost, tip_percent, tax_percent) {\\n\\n  let total_cost;\\n  total_cost =  meal_cost + meal_cost * tip_percent/100 + meal_cost * tax_percent/100;\\n  console.log(Math.round(total_cost));\\n}\\n\\nfunction main() {\\n  const meal_cost = parseFloat(10.20);\\n\\n  const tip_percent = parseInt(10, 10);\\n\\n  const tax_percent = parseInt(10, 10);\\n\\n  solve(meal_cost, tip_percent, tax_percent);\\n}\\nmain();\".trim();var Review=\"\\nfunction processData(input) {\\n  var myArray = input.split(\\\"\\n\\\");                                    //Splitting string between each newline into myArray values.\\n                                                                      //input is: \\\"2\\nHacker\\nRank\\\". myArray = [[2], [\\\"Hacker\\\"], [\\\"Rank\\\"]], [[0], [1], [2]]\\n  var evenChar = \\\"\\\";\\n  var oddChar = \\\"\\\";\\n\\n  for (var i = 1; i= myArray; i++){                                   //Starting from 1 (Hacker) to length of array.\\n      for (var j = 0; j -myArray[i]; j++) {\\n          if (j%2 == 0) {\\n              evenChar += myArray[i][j];                              //Therefore, add value to evenChar string.\\n          } else {\\n              oddChar += myArray[i][j];                               //If odd, add value to oddChar string.\\n          }\\n      }\\n      console.log(evenChar + \\\" \\\" + oddChar);\\n      evenChar = \\\"\\\";\\n      oddChar = \\\"\\\";\\n  }\\n}\\n\\nprocessData('Hacker Rank')\".trim();var arrays=\"\\nfunction main() {\\n  const n = parseInt(readLine(), 10);\\n\\n  const arr = readLine().split(' ').map(arrTemp => parseInt(arrTemp, 10));\\n\\n  console.log(arr.reverse().join(' '));\\n}\\n\\nmain();\\n\\n\\n//2\\nfunction main2() {\\n  const n = parseInt(readLine(), 10);\\n\\n  const arr = readLine().split(' ').map(arrTemp => parseInt(arrTemp, 10));\\n\\n  const reverseArray = (array) => {\\n      let temp = null;\\n      const length = array.length;\\n      \\n      for (let i = 0; i < length / 2; i++){\\n          temp = array[i];\\n          array[i] = array[length - 1 - i];\\n          array[length - 1 - i] = temp;\\n      }\\n\\n      return array;\\n  }\\n  console.log(reverseArray(arr).join(' '));\\n}\\n\\n\\nmain2();\".trim();var Dictionaries=\"\\nfunction main() {\\n  var n = parseInt(10);\\n\\n  pbookname = [];\\n  pbooknums = [];\\n  query = [];\\n  \\n  for (i=0; i<n; i++) {\\n       pbook = [];\\n       pbook = 'readLine'.split(' ');\\n       pbookname.push(pbook[0])\\n       pbooknums.push(pbook[1]);  \\n  }\\n  \\n  for (j=i; j<n*2; j++) {\\n      if ('readLine' != \\\"\\\") {\\n          query = 'readLine'; \\n          pos = pbookname.indexOf(query);\\n          if (pos < 0) {\\n              console.log(\\\"Not found\\\");\\n          } else {\\n              console.log(query +\\\"=\\\"+ pbooknums[pos]);\\n          }\\n      } else {\\n          break;\\n      }\\n  }\\n  \\n  /*\\n  console.log(\\\"Names \\\" + pbookname);\\n  console.log(\\\"Numbers \\\" + pbooknums);\\n  console.log(\\\"Queries \\\" + query);\\n  */\\n}\\nmain();\".trim();var Recursions=\"\\nfunction factorial(n) {\\n  return (!+n) ? 1 : n * factorial(n - 1);\\n}\\n\\nfactorial(4);\\n\\n\\n//2\\nlet memoization = [0, 1];\\n\\nconst factorial2 = (n) => {\\n  (typeof memoization[n] !== 'number') && (\\n      memoization[n] = (n - 1) > 0 ? n * factorial(n - 1) : 1 \\n  );\\n\\n  return memoization[n];\\n}\\n\\n\\nfactorial2(4);\".trim();var Binary=\"\\nfunction main() {\\n  let n = parseInt(10, 10);\\n  let values = [];\\n\\n  while (+n != 0) {\\n      values.push(n % 2);\\n\\n      n = Math.floor(n / 2);\\n  }\\n\\n  let { result } = values.reduce((target, item, index) => {\\n      item\\n          ? target['accumulator']++\\n          : (target['accumulator'] = 0);\\n\\n      target['accumulator'] > target['result'] && (target['result'] = target['accumulator']);\\n\\n      return target;\\n  }, { accumulator: 0, result: 0 });\\n\\n  console.log(result);\\n}\\n\\nmain();\\n\\n\\n//2\\nfunction main2() {\\n  const n = parseInt(10, 10);\\n  let result = 0;\\n\\n  const temp = n.toString(2).split('').reduce((target, num) => {\\n      let value = Number(num) > 0 ? Number(target) + Number(num) : (\\n          result = target > result ? target : result,\\n          0\\n      );\\n\\n      return value;\\n\\n  }, 0);\\n\\n  console.log(result - temp > 0 ? result : temp)\\n}\\n\\nmain2();\\n\\n\\n//3\\nfunction main3() {\\n  const n = parseInt(10, 10);\\n  const array = n.toString(2).split('');\\n  let max = 0;\\n  let cur = 0;\\n\\n  for (let i = 0, itotal = array.length; i < itotal; i++) {\\n      if (array[i] == 1) {\\n          cur++;\\n      } else if (array[i] == 0) {\\n          if (cur > max) {\\n              max = cur;\\n          }\\n          cur = 0;\\n      }\\n  }\\n\\n  if (cur > max) {\\n      max = cur;\\n  }\\n  \\n  console.log(max);\\n}\\n\\nmain3();\".trim();var tdArrays=\"\\nfunction main() {\\n  let arr = Array(6);\\n\\n  for (let i = 0; i < 6; i++) {\\n    arr[i] = 'readLine'\\n      .split(\\\" \\\")\\n      .map((arrTemp) => parseInt(arrTemp, 10));\\n  }\\n\\n  let sumArr = [];\\n  for (let i = 0; i < arr.length - 2; i++) {\\n    for (let j = 0; j < arr[i].length - 2; j++) {\\n      let sum = 0;\\n      sum = arr[i][j] + arr[i][j + 1] + arr[i][j + 2] \\n            + arr[i + 1][j + 1] \\n            + arr[i + 2][j] + arr[i + 2][j + 1] + arr[i + 2][j + 2];\\n      sumArr.push(sum);\\n    }\\n  }\\n  console.log(Math.max(...sumArr));\\n  return;\\n}\\n\\nmain();\\n\\n\\n//2\\nfunction main2() {\\n  let arr = [];\\n  for(arr_i = 0; arr_i < 6; arr_i++){\\n     arr[arr_i] = 'readLine'.split(' ');\\n     arr[arr_i] = arr[arr_i].map(Number);\\n  }\\n\\n  //totalSum initializes at -63 because that is lowest possible outcome for any hourglass.\\n  //-9 -9 -9\\n  //   -9\\n  //-9 -9 -9 = -63    \\n  let totalSum = -63;\\n  for (let i=0; i < arr.length-2; i++) {\\n      for (let j=0, curSum = 0; j < arr[i].length-2; j++) {\\n          //                  //i=0; j=0     i=0; j=1    i=0; j=2    i=0; j=3\\n          curSum = arr[i][j] +     //arr[0][0]    arr[0][1]   arr[0][2]   arr[0][3]\\n                   arr[i][j+1] +   //arr[0][1]    arr[0][2]   arr[0][3]   arr[0][4]\\n                   arr[i][j+2] +   //arr[0][2]    arr[0][3]   arr[0][4]   arr[0][5]\\n                   arr[i+1][j+1] + //arr[1][1]    arr[1][2]   arr[1][3]   arr[1][4]\\n                   arr[i+2][j] +   //arr[2][0]    arr[2][1]   arr[2][2]   arr[2][3]\\n                   arr[i+2][j+1] + //arr[2][1]    arr[2][2]   arr[2][3]   arr[2][4]\\n                   arr[i+2][j+2];  //arr[2][2]    arr[2][3]   arr[2][4]   arr[2][5]\\n          if (curSum > totalSum) { //We're checking for MAX hourglass value, so if curSum is greater, set that one.\\n              totalSum = curSum;\\n          }\\n      }\\n  }\\n  console.log(totalSum);\\n}\\n\\nmain2();\".trim();var Inheritance=\"\\nconsole.clear();\\nclass Person{\\n  constructor(firstName, lastName, id) {\\n    this.firstName = firstName;\\n\\t\\tthis.lastName = lastName;\\n\\t\\tthis.id = id;\\n  }\\n\\tprintPerson() {\\n    console.log('Name: '$'{this.firstName} '$'{this.lastName}, ID: '$'{this.id}');\\n  }\\n}\\n\\nclass Student extends Person{\\n  constructor(firstName, lastName, id, scores){\\n    super(firstName, lastName, id);\\n    this.grade = this.calcGrade(scores)\\n  }\\n  printPerson() {\\n    super.printPerson();\\n    console.log('Grade: '$'{this.grade}');\\n  }\\n  calcGrade(scores) {\\n    let avg = scores.reduce((prev, curr, i, arr)=>{\\n      return ( (prev + curr) /arr.length )\\n    }, 0);\\n    if(avg>=40 &&  avg<55) return 'D';\\n    else if(avg>=55 &&  avg<70) return 'P';\\n    else if(avg>=70 &&  avg<80) return 'A';\\n    else if(avg>=80 &&  avg<90) return 'E';\\n    else if(avg>=90 &&  avg<=100) return 'O';\\n  }\\n}\\n\\nlet ivan = new Student('Ivan', 'Ivanov', '222', [80, 90, 100]);\\nivan.printPerson();\".trim();var Abstract=\"\\n// class Book{\\n//     constructor(title, author, price) {\\n//       this.title = title;\\n//           this.author = author;\\n//           this.price = price;\\n//     }\\n//     display() {\\n//       console.log('Name: '$'{this.title} '$'{this.author}, ID: '$'{this.price}');\\n//     }\\n//   }\\n\\nclass MyBook extends Book {\\n    constructor(title, author, price) {\\n        super(title, author);\\n\\n        this.price = price;\\n    }\\n\\n    display() {\\n        console.log('Title: '$'{this.title}\\nAuthor: '$'{this.author}\\nPrice: '$'{this.price}');\\n    }\\n}\\n\".trim();var Scope=\"\\nlet input = \\\"3\\n1 2 5\\\";\\nconst difference = () => {\\n  const result = input.split('\\n')[1].split(' ').reduce(\\n    (target, el) => {\\n      let { min, max } = target;\\n\\n      target[\\\"min\\\"] = el > min ? el : min;\\n      target[\\\"max\\\"] = el < max ? el : max;\\n\\n      return target;\\n    },\\n    { min: -999, max: 999 }\\n  );\\n\\n  console.log(Math.abs(result[\\\"max\\\"] - result[\\\"min\\\"]));\\n};\\n\\ndifference();\\n\\n\\n//2\\nlet input = \\\"3\\n1 2 5\\\";\\n\\nfunction difference2(input) {\\n  const split = input.split(\\\"\\n\\\");\\n  const length = +split[0];\\n  const array = split[1].split(\\\" \\\");\\n  console.log(array, length);\\n  let maximum = 0;\\n  let result = 0;\\n  \\n  array.forEach(value1 => {\\n    array.forEach(value2 =>{\\n      result = Math.abs(value1-value2);\\n      if(result > maximum) {\\n        maximum = result;\\n      }\\n    })\\n  });\\n  console.log(maximum);\\n}\\n\\nconsole.log(input);\\n\\ndifference2(input);\".trim();var Linked=\"\\nfunction LinkedList() {\\n  this.head = null;\\n  this.tail = null;\\n}\\n\\nfunction Node(value, next, prev) {\\n  this.value = value;\\n  this.next = next;\\n  this.prev = prev;\\n}\\n\\n\\n\\nLinkedList.prototype.addToHead = function(value) {\\n  var newNode = new Node(value, this.head, null);\\n  \\n  if (this.head) this.head.prev = newNode;\\n  else this.tail = newNode;\\n\\n  this.head = newNode;\\n};\\n\\nLinkedList.prototype.addToTail = function(value) {\\n  var newNode = new Node(value, null, this.tail);\\n  \\n  if (this.tail) this.tail.next = newNode;\\n  else this.head = newNode;\\n  \\n  this.tail = newNode;\\n};\\n\\nLinkedList.prototype.removeFromHead = function() {\\n  if (!this.head) return null;                                                    // empty list, return null\\n\\n  var value = this.head.value;\\n  this.head = this.head.next;                                                     // update head pointer to new head\\n  \\n  if (this.head) this.head.prev = null;\\n  else this.tail = null;                                                          // linked list is empty\\n\\n  return value;\\n};\\n\\nLinkedList.prototype.removeFromTail = function() {\\n  if (!this.tail) return null;\\n  \\n  var value = this.tail.value;\\n  \\n  this.tail = this.tail.prev;\\n  \\n  if (this.tail) this.tail.next = null;\\n  else this.head = null;\\n  \\n  return value;\\n}\\n\\nLinkedList.prototype.search = function(searchValue) {\\n  var currentNode = this.head;\\n  \\n  while (currentNode) {\\n    if (currentNode.value === searchValue) return currentNode;\\n    currentNode = currentNode.next;\\n  }\\n  return null;\\n}\\n\\nLinkedList.prototype.indexOf = function(searchValue) {\\n  var currentNode = this.head;\\n  var currentIndex = 0;\\n  var indexes = [];\\n  \\n  while (currentNode) {\\n    if (currentNode.value === searchValue) indexes.push(currentIndex);\\n    currentNode = currentNode.next;\\n    currentIndex++;\\n  }\\n  return indexes;\\n}\\n\\n\\nvar ll = new LinkedList();\\n\\nll.addToHead(10);\\nll.addToTail(15);\\nll.addToTail(99);\\nll.addToTail(105);\\nll.addToTail(40);\\nll.addToTail(20);\\nll.removeFromTail();\\n\\nconsole.log('LOG: linked list object');\\nconsole.log(ll);                                                              // should show head 10 and tail as node 40\\nconsole.log('LOG: search for node with 99');\\nconsole.log(ll.search(99));                                                   // should show node object with value 99\\nconsole.log('LOG: find indexOf node with 99');\\nconsole.log(ll.indexOf(99));                                                  // should log [2]\\n\".trim();var Interfaces=\"\\nclass AdvancedArithmetic {\\n  divisor(n) {\\n    return n || 0;\\n  };\\n}\\n\\nclass Calculator extends AdvancedArithmetic {\\n  constructor(props) {\\n    super(props);\\n\\n    this.divisor = this.divisorSum.bind(this);\\n  }\\n\\n  divisorSum(n) {\\n    return Array(n).fill(0).reduce((target, item, index) => {\\n      !(n % (index + 1)) && (target += (index + 1)) ;\\n\\n      return target;\\n    }, 0);\\n  }\\n}\\n\\nfunction Solution () {\\n  const n = 6;\\n\\n  const myCalculator = new Calculator();\\n\\n  let sum = myCalculator.divisor(n);\\n\\n  console.log(\\\"I implemented: AdvancedArithmetic\\n\\\" + sum); \\n}\\n\\nSolution();\".trim();var Generics=\"\".trim();var HackeRank=/*#__PURE__*/function(_Component){_inherits(HackeRank,_Component);function HackeRank(){_classCallCheck(this,HackeRank);return _possibleConstructorReturn(this,_getPrototypeOf(HackeRank).apply(this,arguments));}_createClass(HackeRank,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Operators\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:operators,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Let's Review\"),\"Ie: \\\"Hacker\\\" and  \\\"Rank\\\" becomes:\",React.createElement(\"br\",null),\"\\\"Hce akr\\\" even values - odd values [H, a, c, k, e, r] equals [0, 1, 2, 3, 4, 5]\",React.createElement(\"br\",null),\"\\\"Rn ak\\\" even values - odd values [R, a, n, k] equals [0, 1, 2, 3]\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Review,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Arrays\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:arrays,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. Dictionaries and Maps\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Dictionaries,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. Recursion\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Recursions,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. Binary Numbers\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Binary,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"7. 2D Arrays\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:tdArrays,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"8. Inheritance\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Inheritance,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"9. Abstract Classes\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Abstract,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"10. Scope\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Scope,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"11. Linked List\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Linked,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"12. Interfaces\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Interfaces,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"13. Generics\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:Generics,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return HackeRank;}(Component);export default withStyles(styles)(HackeRank);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/ReactJs/reactJs_hooks/hackeRank.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","operators","trim","Review","arrays","Dictionaries","Recursions","Binary","tdArrays","Inheritance","Abstract","Scope","Linked","Interfaces","Generics","HackeRank","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst operators = `\nfunction solve(meal_cost, tip_percent, tax_percent) {\n\n  let total_cost;\n  total_cost =  meal_cost + meal_cost * tip_percent/100 + meal_cost * tax_percent/100;\n  console.log(Math.round(total_cost));\n}\n\nfunction main() {\n  const meal_cost = parseFloat(10.20);\n\n  const tip_percent = parseInt(10, 10);\n\n  const tax_percent = parseInt(10, 10);\n\n  solve(meal_cost, tip_percent, tax_percent);\n}\nmain();`.trim();\n\nconst Review = `\nfunction processData(input) {\n  var myArray = input.split(\"\\n\");                                    //Splitting string between each newline into myArray values.\n                                                                      //input is: \"2\\nHacker\\nRank\". myArray = [[2], [\"Hacker\"], [\"Rank\"]], [[0], [1], [2]]\n  var evenChar = \"\";\n  var oddChar = \"\";\n\n  for (var i = 1; i= myArray; i++){                                   //Starting from 1 (Hacker) to length of array.\n      for (var j = 0; j -myArray[i]; j++) {\n          if (j%2 == 0) {\n              evenChar += myArray[i][j];                              //Therefore, add value to evenChar string.\n          } else {\n              oddChar += myArray[i][j];                               //If odd, add value to oddChar string.\n          }\n      }\n      console.log(evenChar + \" \" + oddChar);\n      evenChar = \"\";\n      oddChar = \"\";\n  }\n}\n\nprocessData('Hacker Rank')`.trim();\n\nconst arrays = `\nfunction main() {\n  const n = parseInt(readLine(), 10);\n\n  const arr = readLine().split(' ').map(arrTemp => parseInt(arrTemp, 10));\n\n  console.log(arr.reverse().join(' '));\n}\n\nmain();\n\n\n//2\nfunction main2() {\n  const n = parseInt(readLine(), 10);\n\n  const arr = readLine().split(' ').map(arrTemp => parseInt(arrTemp, 10));\n\n  const reverseArray = (array) => {\n      let temp = null;\n      const length = array.length;\n      \n      for (let i = 0; i < length / 2; i++){\n          temp = array[i];\n          array[i] = array[length - 1 - i];\n          array[length - 1 - i] = temp;\n      }\n\n      return array;\n  }\n  console.log(reverseArray(arr).join(' '));\n}\n\n\nmain2();`.trim();\n\nconst Dictionaries = `\nfunction main() {\n  var n = parseInt(10);\n\n  pbookname = [];\n  pbooknums = [];\n  query = [];\n  \n  for (i=0; i<n; i++) {\n       pbook = [];\n       pbook = 'readLine'.split(' ');\n       pbookname.push(pbook[0])\n       pbooknums.push(pbook[1]);  \n  }\n  \n  for (j=i; j<n*2; j++) {\n      if ('readLine' != \"\") {\n          query = 'readLine'; \n          pos = pbookname.indexOf(query);\n          if (pos < 0) {\n              console.log(\"Not found\");\n          } else {\n              console.log(query +\"=\"+ pbooknums[pos]);\n          }\n      } else {\n          break;\n      }\n  }\n  \n  /*\n  console.log(\"Names \" + pbookname);\n  console.log(\"Numbers \" + pbooknums);\n  console.log(\"Queries \" + query);\n  */\n}\nmain();`.trim();\n\nconst Recursions = `\nfunction factorial(n) {\n  return (!+n) ? 1 : n * factorial(n - 1);\n}\n\nfactorial(4);\n\n\n//2\nlet memoization = [0, 1];\n\nconst factorial2 = (n) => {\n  (typeof memoization[n] !== 'number') && (\n      memoization[n] = (n - 1) > 0 ? n * factorial(n - 1) : 1 \n  );\n\n  return memoization[n];\n}\n\n\nfactorial2(4);`.trim();\n\nconst Binary = `\nfunction main() {\n  let n = parseInt(10, 10);\n  let values = [];\n\n  while (+n != 0) {\n      values.push(n % 2);\n\n      n = Math.floor(n / 2);\n  }\n\n  let { result } = values.reduce((target, item, index) => {\n      item\n          ? target['accumulator']++\n          : (target['accumulator'] = 0);\n\n      target['accumulator'] > target['result'] && (target['result'] = target['accumulator']);\n\n      return target;\n  }, { accumulator: 0, result: 0 });\n\n  console.log(result);\n}\n\nmain();\n\n\n//2\nfunction main2() {\n  const n = parseInt(10, 10);\n  let result = 0;\n\n  const temp = n.toString(2).split('').reduce((target, num) => {\n      let value = Number(num) > 0 ? Number(target) + Number(num) : (\n          result = target > result ? target : result,\n          0\n      );\n\n      return value;\n\n  }, 0);\n\n  console.log(result - temp > 0 ? result : temp)\n}\n\nmain2();\n\n\n//3\nfunction main3() {\n  const n = parseInt(10, 10);\n  const array = n.toString(2).split('');\n  let max = 0;\n  let cur = 0;\n\n  for (let i = 0, itotal = array.length; i < itotal; i++) {\n      if (array[i] == 1) {\n          cur++;\n      } else if (array[i] == 0) {\n          if (cur > max) {\n              max = cur;\n          }\n          cur = 0;\n      }\n  }\n\n  if (cur > max) {\n      max = cur;\n  }\n  \n  console.log(max);\n}\n\nmain3();`.trim();\n\nconst tdArrays = `\nfunction main() {\n  let arr = Array(6);\n\n  for (let i = 0; i < 6; i++) {\n    arr[i] = 'readLine'\n      .split(\" \")\n      .map((arrTemp) => parseInt(arrTemp, 10));\n  }\n\n  let sumArr = [];\n  for (let i = 0; i < arr.length - 2; i++) {\n    for (let j = 0; j < arr[i].length - 2; j++) {\n      let sum = 0;\n      sum = arr[i][j] + arr[i][j + 1] + arr[i][j + 2] \n            + arr[i + 1][j + 1] \n            + arr[i + 2][j] + arr[i + 2][j + 1] + arr[i + 2][j + 2];\n      sumArr.push(sum);\n    }\n  }\n  console.log(Math.max(...sumArr));\n  return;\n}\n\nmain();\n\n\n//2\nfunction main2() {\n  let arr = [];\n  for(arr_i = 0; arr_i < 6; arr_i++){\n     arr[arr_i] = 'readLine'.split(' ');\n     arr[arr_i] = arr[arr_i].map(Number);\n  }\n\n  //totalSum initializes at -63 because that is lowest possible outcome for any hourglass.\n  //-9 -9 -9\n  //   -9\n  //-9 -9 -9 = -63    \n  let totalSum = -63;\n  for (let i=0; i < arr.length-2; i++) {\n      for (let j=0, curSum = 0; j < arr[i].length-2; j++) {\n          //                  //i=0; j=0     i=0; j=1    i=0; j=2    i=0; j=3\n          curSum = arr[i][j] +     //arr[0][0]    arr[0][1]   arr[0][2]   arr[0][3]\n                   arr[i][j+1] +   //arr[0][1]    arr[0][2]   arr[0][3]   arr[0][4]\n                   arr[i][j+2] +   //arr[0][2]    arr[0][3]   arr[0][4]   arr[0][5]\n                   arr[i+1][j+1] + //arr[1][1]    arr[1][2]   arr[1][3]   arr[1][4]\n                   arr[i+2][j] +   //arr[2][0]    arr[2][1]   arr[2][2]   arr[2][3]\n                   arr[i+2][j+1] + //arr[2][1]    arr[2][2]   arr[2][3]   arr[2][4]\n                   arr[i+2][j+2];  //arr[2][2]    arr[2][3]   arr[2][4]   arr[2][5]\n          if (curSum > totalSum) { //We're checking for MAX hourglass value, so if curSum is greater, set that one.\n              totalSum = curSum;\n          }\n      }\n  }\n  console.log(totalSum);\n}\n\nmain2();`.trim();\n\nconst Inheritance = `\nconsole.clear();\nclass Person{\n  constructor(firstName, lastName, id) {\n    this.firstName = firstName;\n\t\tthis.lastName = lastName;\n\t\tthis.id = id;\n  }\n\tprintPerson() {\n    console.log('Name: '$'{this.firstName} '$'{this.lastName}, ID: '$'{this.id}');\n  }\n}\n\nclass Student extends Person{\n  constructor(firstName, lastName, id, scores){\n    super(firstName, lastName, id);\n    this.grade = this.calcGrade(scores)\n  }\n  printPerson() {\n    super.printPerson();\n    console.log('Grade: '$'{this.grade}');\n  }\n  calcGrade(scores) {\n    let avg = scores.reduce((prev, curr, i, arr)=>{\n      return ( (prev + curr) /arr.length )\n    }, 0);\n    if(avg>=40 &&  avg<55) return 'D';\n    else if(avg>=55 &&  avg<70) return 'P';\n    else if(avg>=70 &&  avg<80) return 'A';\n    else if(avg>=80 &&  avg<90) return 'E';\n    else if(avg>=90 &&  avg<=100) return 'O';\n  }\n}\n\nlet ivan = new Student('Ivan', 'Ivanov', '222', [80, 90, 100]);\nivan.printPerson();`.trim();\n\nconst Abstract = `\n// class Book{\n//     constructor(title, author, price) {\n//       this.title = title;\n//           this.author = author;\n//           this.price = price;\n//     }\n//     display() {\n//       console.log('Name: '$'{this.title} '$'{this.author}, ID: '$'{this.price}');\n//     }\n//   }\n\nclass MyBook extends Book {\n    constructor(title, author, price) {\n        super(title, author);\n\n        this.price = price;\n    }\n\n    display() {\n        console.log('Title: '$'{this.title}\\nAuthor: '$'{this.author}\\nPrice: '$'{this.price}');\n    }\n}\n`.trim();\n\nconst Scope = `\nlet input = \"3\\n1 2 5\";\nconst difference = () => {\n  const result = input.split('\\n')[1].split(' ').reduce(\n    (target, el) => {\n      let { min, max } = target;\n\n      target[\"min\"] = el > min ? el : min;\n      target[\"max\"] = el < max ? el : max;\n\n      return target;\n    },\n    { min: -999, max: 999 }\n  );\n\n  console.log(Math.abs(result[\"max\"] - result[\"min\"]));\n};\n\ndifference();\n\n\n//2\nlet input = \"3\\n1 2 5\";\n\nfunction difference2(input) {\n  const split = input.split(\"\\n\");\n  const length = +split[0];\n  const array = split[1].split(\" \");\n  console.log(array, length);\n  let maximum = 0;\n  let result = 0;\n  \n  array.forEach(value1 => {\n    array.forEach(value2 =>{\n      result = Math.abs(value1-value2);\n      if(result > maximum) {\n        maximum = result;\n      }\n    })\n  });\n  console.log(maximum);\n}\n\nconsole.log(input);\n\ndifference2(input);`.trim();\n\nconst Linked = `\nfunction LinkedList() {\n  this.head = null;\n  this.tail = null;\n}\n\nfunction Node(value, next, prev) {\n  this.value = value;\n  this.next = next;\n  this.prev = prev;\n}\n\n\n\nLinkedList.prototype.addToHead = function(value) {\n  var newNode = new Node(value, this.head, null);\n  \n  if (this.head) this.head.prev = newNode;\n  else this.tail = newNode;\n\n  this.head = newNode;\n};\n\nLinkedList.prototype.addToTail = function(value) {\n  var newNode = new Node(value, null, this.tail);\n  \n  if (this.tail) this.tail.next = newNode;\n  else this.head = newNode;\n  \n  this.tail = newNode;\n};\n\nLinkedList.prototype.removeFromHead = function() {\n  if (!this.head) return null;                                                    // empty list, return null\n\n  var value = this.head.value;\n  this.head = this.head.next;                                                     // update head pointer to new head\n  \n  if (this.head) this.head.prev = null;\n  else this.tail = null;                                                          // linked list is empty\n\n  return value;\n};\n\nLinkedList.prototype.removeFromTail = function() {\n  if (!this.tail) return null;\n  \n  var value = this.tail.value;\n  \n  this.tail = this.tail.prev;\n  \n  if (this.tail) this.tail.next = null;\n  else this.head = null;\n  \n  return value;\n}\n\nLinkedList.prototype.search = function(searchValue) {\n  var currentNode = this.head;\n  \n  while (currentNode) {\n    if (currentNode.value === searchValue) return currentNode;\n    currentNode = currentNode.next;\n  }\n  return null;\n}\n\nLinkedList.prototype.indexOf = function(searchValue) {\n  var currentNode = this.head;\n  var currentIndex = 0;\n  var indexes = [];\n  \n  while (currentNode) {\n    if (currentNode.value === searchValue) indexes.push(currentIndex);\n    currentNode = currentNode.next;\n    currentIndex++;\n  }\n  return indexes;\n}\n\n\nvar ll = new LinkedList();\n\nll.addToHead(10);\nll.addToTail(15);\nll.addToTail(99);\nll.addToTail(105);\nll.addToTail(40);\nll.addToTail(20);\nll.removeFromTail();\n\nconsole.log('LOG: linked list object');\nconsole.log(ll);                                                              // should show head 10 and tail as node 40\nconsole.log('LOG: search for node with 99');\nconsole.log(ll.search(99));                                                   // should show node object with value 99\nconsole.log('LOG: find indexOf node with 99');\nconsole.log(ll.indexOf(99));                                                  // should log [2]\n`.trim();\n\nconst Interfaces = `\nclass AdvancedArithmetic {\n  divisor(n) {\n    return n || 0;\n  };\n}\n\nclass Calculator extends AdvancedArithmetic {\n  constructor(props) {\n    super(props);\n\n    this.divisor = this.divisorSum.bind(this);\n  }\n\n  divisorSum(n) {\n    return Array(n).fill(0).reduce((target, item, index) => {\n      !(n % (index + 1)) && (target += (index + 1)) ;\n\n      return target;\n    }, 0);\n  }\n}\n\nfunction Solution () {\n  const n = 6;\n\n  const myCalculator = new Calculator();\n\n  let sum = myCalculator.divisor(n);\n\n  console.log(\"I implemented: AdvancedArithmetic\\n\" + sum); \n}\n\nSolution();`.trim();\n\nconst Generics = ``.trim();\n\n\n\nclass HackeRank extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Operators</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={operators}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Let's Review</h3>\n              Ie: \"Hacker\" and  \"Rank\" becomes:<br />\n              \"Hce akr\" even values - odd values [H, a, c, k, e, r] equals [0, 1, 2, 3, 4, 5]<br />\n              \"Rn ak\" even values - odd values [R, a, n, k] equals [0, 1, 2, 3]<br /><br />\n              <div style={titles}>\n                <PrismCode\n                  code={Review}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Arrays</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={arrays}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Dictionaries and Maps</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Dictionaries}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. Recursion</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Recursions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Binary Numbers</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Binary}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7. 2D Arrays</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={tdArrays}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>8. Inheritance</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Inheritance}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>9. Abstract Classes</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Abstract}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>10. Scope</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Scope}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>11. Linked List</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Linked}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>12. Interfaces</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Interfaces}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>13. Generics</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Generics}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(HackeRank));\n"]},"metadata":{},"sourceType":"module"}