{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/angularjsd/deepAngularjs/introAngularjs.js\";\nimport React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\nimport Graphs from \"../../../assets/dinjection.png\";\nimport formroot from \"../../../assets/HhQY9.png\";\nconst titles = {\n  backgroundColor: \"#F0F8FF\",\n  padding: \"1px\",\n  fontSize: \"16px\"\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst redesign = {\n  height: 200,\n  width: 500\n};\nconst NgClass = `\n@Component({\n  selector: 'app-root',\n  template: '\n  <p [ngStyle] = \"{backgroundColor: getColor()}\" [ngClass] = \"{Online: serverStatus === 'Online'}\"> \n    Server  with ID {{serverID}} is {{serverStatus}}. \n  </p >,\n  styles: ['.Online{ color: yellow; }']'})\n\nexport class AppComponent {\n  serverID: number = 10;\n  serverStatus: string = 'Offline';\n\n  constructor () {\n  this.serverStatus = Math.random() > 0.5 ? 'Online' : 'Offline';\n  }\n\n  getServerStatus() {\n    return this.serverStatus;\n  }\n  getColor() {\n    return this.serverStatus === 'Online' ? 'green' : 'red';\n  }\n}`.trim();\nconst databinding = `\nDOM               Component\n<----{{value}}-----\n<-[propery]=\"value\" --\n--(event)=\"handler\" -->\n<-[(NgModule)]=\"propery\" --`.trim();\nconst property = `\nsyntax: [property]='expression\n\n//\n@Component({\n  selector: 'app-root',\n  template: '\n    <button (click)=\"toggleSecret()\">Toggle Secret</button>\n    <h3 [hidden]=\"secretTextHidden\">Property Binding</h3>\n  ',\n})\nexport class AppComponent {\n  secretTextHidden = false;\n\n  toggleSecret() {\n    this.secretTextHidden = !this.secretTextHidden;\n  }\n}\n`.trim();\nconst evtBinding = `\n@Component({\n  selector: 'app-root',\n  template: '\n    {{ name }}\n    <button (click)=\"nameChange()\">evt</button>\n  ',\n})\nexport class AppComponent {\n  name = 'Pikachu';\n\n  nameChange() {\n    this.name = 'Raichu';\n  }\n}`.trim();\nconst NgStyles = `\n//1\n<div [ngStyle]=\"{'color':green}\"></div>\nngStyle become much more useful when the value is dynamic.\n<div [ngStyle]=\"{'color': person.country==='UK' ? 'green' : 'red'}\"></div>\n\n\n//2\n@Component({\n  selector: 'app-root',\n  template: '\n  <p[ngStyle]=\"{backgroundColor: 'green'}\"> Server with ID {{serverID}} is {{serverStatus}}.</p>\n  '})\nexport class AppComponent {\n  serverID: number = 10;\n  serverStatus: string = 'Offline';\n\n  constructor () {\n  this.serverStatus = Math.random() > 0.5 ? 'Online' : 'Offline';\n  }\n}`.trim();\nconst customDir = `\n//html\n<p appCustomdir>Custom directive</p>\n\n\n//ts\nimport { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[appCustomdir]'\n})\nexport class CustomdirDirective {\n\n  constructor(private el:ElementRef) { \n    el.nativeElement.style.color=\"green\"\n  }\n}\n`.trim();\nconst templateExpree = `\n<h3>{{username}}, welcome to Angular</h3>\n\n\n//The below javascript expressions are prohibited in template expression\n1. assignments (=, +=, -=, ...)\n2. new\n3. chaining expressions with ; or ,\n4. increment and decrement operators (++ and --)\n`.trim();\nconst templateState = `\n//template statements appear in quotes to the right of the = symbol like (event)=\"statement\".\n<button (click)=\"statement()\">Edit Profile</button>\n`.trim();\nconst twoWay = `\n@Component({\n  selector: 'app-root',\n  template: '\n    <input type=\"text\" [(ngModel)]=\"name\" placeholder=\"type here\" />\n    <h3>{{ name }}</h3>\n  ',\n})\nexport class AppComponent {\n  name = 'Angular 5';\n}\n`.trim();\nconst hostBinding = `\nimport { Component, ElementRef, HostBinding, HostListener} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '\n      <p>@HostBinding() & @HostListener()</p>\n  ',\n  providers:[]\n})\n\nexport class AppComponent{\n  constructor(private el:ElementRef){\n\n  }\n\n  @HostBinding('style.color') textColor: any;\n  ngOnInit(){\n    this.textColor=\"green\";\n  }\n\n  @HostListener('click') onClick(){\n    // alert('HostListener')\n    this.textColor = \"red\";\n  }\n\n  @HostListener('mouseover') onMouseHover(){\n    this.textColor = \"blue\";\n  }\n\n  @HostListener('mouseout') onMouseOut(){\n    this.textColor = \"pink\";\n  }\n}`.trim();\nconst hostListener = `\nmport { Component, HostListener } from '@angular/core';\n\n@Component({\n    selector: 'my-component',\n    template: '<div>Method decorator</div>'\n})\nexport class MyComponent {\n    @HostListener('click', ['$event'])\n    onHostClick(event: Event) {\n        // clicked, 'event' available\n    }\n}`.trim();\nconst parameters = `\n//myservice.ts\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class myService {\n  name = 'Mukesh';\n  constructor() {}\n}\n\n\n//app.component.ts\nimport { Component, Inject } from '@angular/core';\nimport { myService } from './myservice';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  constructor(@Inject(myService) myService: any) {\n    console.log(myService);\n  }\n}\n`.trim();\nconst makeServices = `\n//myService.ts\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class myService {\n  name = 'Mukesh';\n  sayHello() {\n    console.log(this.name);\n  }\n}\n\n\n//app.component.ts\nimport { myService } from './myservice';\n\n@Component({\n  selector: 'app-root',\n  template: '',\n})\nexport class AppComponent {\n  constructor(private myServices: myService) {\n    this.myServices.sayHello();\n  }\n}\n\n\n//app.module.ts\n@NgModule({\n  declarations: [AppComponent, Child],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    StoreModule.forRoot({}),\n  ],\n  providers: [myService],\n  bootstrap: [AppComponent],\n})\n`.trim();\nconst postals = `\n  class Number{\n    constructor(){}\n  }\n\n  class Address{\n    constructor(){}\n  }\n\n  class PostalDetails{\n    Number;\n    Address;\n    \n    constructor(){\n      this.Number = new Number();\n      this.Address = new Address();\n    }\n  }\n`.trim();\nconst postalsparams = `\nclass Number{\n  constructor(par){}\n}\n\nclass Address{\n  constructor(par){}\n}\n\nclass PostalDetails{\n  Number;\n  Address;\n  \n  constructor(){\n    this.Number = new Number();     //Error\n    this.Address = new Address();   //Error\n  }\n}\n`.trim();\nconst impdi = `\nclass PostalDetails{\n  number;\n  address;\n  \n  constructor(number, address){\n    this.number = number();    \n    this.address = address();  \n  }\n}\n`.trim();\nconst httpClients = `\nimport { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\ninterface Kafein {\n  name: string;\n  address: string;\n}\n\n@Component({\n  selector: 'app-root',\n  template: ' <tr *ngFor=\"let datas of httpData\">\n    <td>{{ datas.title }}</td>\n  </tr>',\n})\nexport class AppComponent {\n  url = 'https://jsonplaceholder.typicode.com/todos';\n  httpData: any;\n\n  constructor(private http: HttpClient) {}\n\n  ngOnInit() {\n    this.callApi();\n  }\n\n  callApi() {\n    this.http.get<Kafein[]>(this.url).subscribe((data) => {\n      this.httpData = data;\n    });\n  }\n}\n`.trim();\nconst stateFun = `\nstate('open', style({\n  height: '300px',\n  opacity: 0.5,\n  backgroundColor: 'blue'\n})),`.trim();\nconst transition = `\ntransition('open => closed', [\n  animate('500ms')\n]),`.trim();\nconst pipeFor = `\n@Component({\n  selector: 'app-birthday',\n  template: '<p> Birthday is {{birthday | date}}</p>'\n})\nexport class BirthdayComponent {\n  birthday = new Date(1987, 6, 18); \n}`.trim();\nconst paraPipes = `\n@Component({\n      selector: 'app-birthday',\n      template: '<p> Birthday is {{birthday | date: 'dd/MM/yyyy'}}</p>' // 18/06/1987\n    })\n    export class BirthdayComponent {\n      birthday = new Date(1987, 6, 18);\n    }`.trim();\nconst chainPipe = `\n@Component({\n          selector: 'app-birthday',\n          template: '<p> Birthday is {{birthday | date: 'fullDate' | uppercase}} </p>' // THURSDAY, JUNE 18, 1987\n        })\n        export class BirthdayComponent {\n          birthday = new Date(1987, 6, 18);\n        }`.trim();\nconst purpose = `\n@Component({\n  selector: 'async-observable-pipe',\n  template: '<div> <code>observable|async</code>:\n  Time: {{time | async}}</div >'\n})\nexport class AsyncObservablePipeComponent {\n  time = new Observable(observer =>\n    setInterval(() => observer.next(new Date().toString()), 2000)\n  );\n}`.trim();\nconst ViewContainerRef = `let componentRef = viewContainerRef.createComponent(componentFactory);`.trim();\nconst template = `\n<p>Hip!</p>\n<ng-template>\n  <p>Hip!</p>\n</ng-template>\n<p>Hooray!</p>\n\n//<ng-container>\n@Component({\n  selector: 'app-root',\n  template: '\n      <ng-template #loading>\n        ng-template rendering\n      </ng-template>\n\n      <p>ng-container</p>\n      <ng-container *ngIf=\"display else loading\">\n        ng-container rendering\n        \n      </ng-container>\n      <ul>\n          <li *ngFor=\"let emp of employees; let i=index\">\n            <ng-container *ngIf=\"emp.salery>10000\">\n              {{i+1}} - {{emp.name}}\n            </ng-container>\n          </li>\n        </ul>\n  '',\n  providers:[]\n})\n\nexport class AppComponent {\n  display=false;\n\n  employees = [\n    {\"name\":\"Mukesh\", \"salery\":10000},\n    {\"name\":\"Rakesh\", \"salery\":12000},\n    {\"name\":\"Nitesh\", \"salery\":15000},\n  ]\n}\n`.trim();\nconst typeFunc = `\ntemplate:\n  '{{ $any(user).contacts.email }}'\n  \n  \n//The $any() cast function also works with this to allow access to undeclared members of the component.\n   template:\n   '{{ $any(this).contacts.email }}'`.trim();\nconst assertionOpp = `@Component({\n  selector: 'my-component',\n  template: '<span *ngIf=\"user\"> {{user.name}} contacted through {{contact!.email}} </span>'\n})\nclass MyComponent {\n  user?: User;\n  contact?: Contact;\n\n  setData(user: User, contact: Contact) {\n    this.user = user;\n    this.contact = contact;\n  }\n}`.trim();\nconst narrowing = `\n@Component({\n  selector: 'my-component',\n  template: '<span *ngIf=\"user\"> {{user.contact.email}} </span>'\n})\nclass MyComponent {\n  user?: User;\n}`.trim();\nconst dslSyntax = `\n(): Used for Output and DOM events.\n[]: Used for Input and specific DOM element attributes.\n*: Structural directives(*ngFor or *ngIf) will affect/change the DOM structure.`.trim();\nconst multicasting = `\nvar source = Rx.Observable.from([1, 2, 3]);\nvar subject = new Rx.Subject();\nvar multicasted = source.multicast(subject);\n\n// These are, under the hood, 'subject.subscribe({ ...})':\nmulticasted.subscribe({\n  next: (v) => console.log('observerA: ' + v)\n});\nmulticasted.subscribe({\n  next: (v) => console.log('observerB: ' + v)\n});`.trim();\nconst changeDetector = `\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '\n  <button (click)='updateName()'>Update</button>\n  Welcome {{userValue.firstName}} - {{userValue.lastName}}\n  <div *ngFor=\"let str of myStrArr\">{{str}}</div>\n  <br/>\n  <p>onPush Stretgy</p>\n  <button (click)='onClick()'>onPush</button>\n  ',\n\n  changeDetection:ChangeDetectionStrategy.OnPush\n})\nexport class AppComponent {\n  title = '3_change_detection';\n  userValue:any;\n  myStrArr:any[]=[];\n\n  ngOnInit():void{\n    this.userValue = {\n      firstName:'Mukesh',\n      lastName:'Singh'\n    };\n  }\n\n  updateName(){\n    this.userValue.firstName='Rakesh';\n    console.log('default Stretgy')\n  }\n\n  onClick(){\n    this.myStrArr.push('onPush Stretgy')\n    console.log('onPush')\n  }\n}\n`.trim();\nconst viewChilds = `\n//salery.ts\n@Component({\n  selector: 'salery',\n  template: '{{msg}}:{{empSalery}}',\n  providers: [],\n})\nexport class Salery {\n  empSalery = 0;\n  msg = '';\n\n  saleryIncre() {\n    this.empSalery += 500;\n    this.msg = 'Incremented Salery';\n  }\n\n  saleryDecre() {\n    this.empSalery -= 500;\n    this.msg = 'Decremented Salery';\n  }\n}\n\n\n//app.component.ts\nimport { Component, ViewChild } from '@angular/core';\nimport { Salery } from './salery';\n\n@Component({\n  selector: 'app-root',\n  template: '\n    <button (click)=\"empIncreaseSalery()\">Inc</button>\n    <button (click)=\"empDecreSalery()\">Din</button>\n    <salery></salery>\n  ',\n})\nexport class AppComponent {\n  @ViewChild(Salery)\n  Salery!: Salery;\n\n  empIncreaseSalery() {\n    this.Salery.saleryIncre();\n  }\n\n  empDecreSalery() {\n    this.Salery.saleryDecre();\n  }\n}\n`.trim();\nconst viewChildsDir = `\n//salery.ts\n@Component({\n  selector: 'app-salery',\n  template: '<p>{{msg}}: {{empSalery}}</p>'',\n})\nexport class SaleryComponent {\n  empSalery=0;\n  msg='';\n  static saleryIncrement: any;\n\n  saleryIncrement(){\n      this.empSalery = this.empSalery + 500;\n      this.msg = \"Incremented Salery\"\n      console.log('Incremented');\n  }\n\n  saleryDec(){\n    this.empSalery = this.empSalery - 500;\n    this.msg = \"Decremented Salery\"\n  }\n}\n\n\n//employees.ts\nimport { Component, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\nimport { SaleryComponent } from '../salery/salery.component';\n\n@Component({\n  selector: 'app-employees',\n  template: '\n    <p appEmpdirective>ViewChild using Directive Employees</p>\n    <input type=\"text\" name=\"username\" #usernameRef /><br/>\n    <input type=\"text\" name=\"email\" #usernameRef />'\n  })\nexport class EmployeesComponent implements AfterViewInit {\n  \n  @ViewChild('usernameRef') usernameRef!: ElementRef;\n\n  ngAfterViewInit(): void {\n    this.usernameRef.nativeElement.focus();\n  }\n\n  incremented(){\n    // console.log('Incremented');\n  }\n\n  decremented(){\n    console.log('Decremented');\n  }\n}\n\n\n//empdirective.directive.ts\nimport { Directive, ElementRef, AfterViewInit } from '@angular/core';\n\n@Directive({\n  selector: '[appEmpdirective]'\n})\nexport class EmpdirectiveDirective implements AfterViewInit{\n\n  constructor(private eleRef:ElementRef) { }\n\n  ngAfterViewInit(): void {\n    this.eleRef.nativeElement.style.color=\"green\";\n  }\n}\n\n//app.ts\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '\n      <p>ViewChild using Directive</p>\n      <app-employees></app-employees>',\n  providers:[]\n})\n\nexport class AppComponent {\n  display=false;\n\n  employees = [\n    {\"name\":\"Mukesh\", \"salery\":10000},\n    {\"name\":\"Rakesh\", \"salery\":12000},\n    {\"name\":\"Nitesh\", \"salery\":15000},\n  ]\n}\n`.trim();\nconst viewChildsTemp = `\n//salery.ts\n@Component({\n  selector: 'app-salery',\n  template: '<p>{{msg}}: {{empSalery}}</p>'',\n})\nexport class SaleryComponent {\n  empSalery=0;\n  msg='';\n  static saleryIncrement: any;\n\n  saleryIncrement(){\n      this.empSalery = this.empSalery + 500;\n      this.msg = \"Incremented Salery\"\n  }\n\n  saleryDec(){\n    this.empSalery = this.empSalery - 500;\n    this.msg = \"Decremented Salery\"\n  }\n}\n\n\n//employees.ts\nimport { Component, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\n\n@Component({\n  selector: 'app-employees',\n  template: '\n    <p #customTitle>ViewChild using Directive Employees</p>\n    <input type=\"text\" name=\"uname\" #username><br/>\n    <input type=\"text\" name=\"email\" #uemail>/\n})\nexport class EmployeesComponent implements AfterViewInit {\n  @ViewChild('customTitle') customTitle!: ElementRef;\n  @ViewChild('username') username!: ElementRef;\n  @ViewChild('uemail') uemail!: ElementRef;\n\n  ngAfterViewInit(): void {\n      this.customTitle.nativeElement.style.color=\"blue\";\n      this.username .nativeElement.style.backgroundColor=\"pink\";\n      this.uemail.nativeElement.style.color=\"green\";\n  }\n}\n\n\n//empdirective.directive.ts\nimport { Directive, ElementRef, AfterViewInit } from '@angular/core';\n\n@Directive({\n  selector: '[appEmpdirective]'\n})\nexport class EmpdirectiveDirective implements AfterViewInit{\n\n  constructor(private eleRef:ElementRef) { }\n\n  ngAfterViewInit(): void {\n    this.eleRef.nativeElement.style.color=\"green\";\n  }\n}\n\n\n//app.ts\n@Component({\n  selector: 'app-root',\n  template: '\n      <p>ViewChild using Directive</p>\n      <app-employees></app-employees>',\n  providers:[]\n})\n\nexport class AppComponent {\n  display=false;\n\n  employees = [\n    {\"name\":\"Mukesh\", \"salery\":10000},\n    {\"name\":\"Rakesh\", \"salery\":12000},\n    {\"name\":\"Nitesh\", \"salery\":15000},\n  ]\n}\n`.trim();\nconst viewProviders = `\n//child.ts\nimport { EmpsaleryService } from '../empsalery.service';\n\n@Component({\n  selector: 'app-child',\n  providers:[EmpsaleryService],\n  viewProviders:[],\n  template: '\n    <p>Child Component</p>\n    <p>Child: {{randomSalery}}</p>\n  ',\n})\nexport class ChildComponent {\n  randomSalery:any;\n  constructor(private objSalery:EmpsaleryService){\n    this.randomSalery = objSalery.getRandomSalery();\n  }\n}\n\n\n//parent.ts\nimport { EmpsaleryService } from '../empsalery.service';\n\n@Component({\n  selector: 'app-parent',\n  providers:[],\n  viewProviders:[EmpsaleryService],\n  template: '\n    <p>Parent Component</p>\n    <p>Parent: {{randomSalery}}</p>\n    <app-child></app-child>\n  ',\n})\nexport class ParentComponent {\n  randomSalery:any;\n  constructor(private objSalery:EmpsaleryService){\n    this.randomSalery = objSalery.getRandomSalery();\n  }\n}\n\n\n//empsalery.service.ts\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmpsaleryService {\n  private randomSalery:any;\n  constructor(){\n    this.randomSalery=Math.floor(Math.random()*500);\n  }\n\n  getRandomSalery(){\n    return this.randomSalery;\n  }\n}\n\n\n//app.ts\nimport { Component } from '@angular/core';\nimport { EmpsaleryService } from './empsalery.service';\n\n@Component({\n  selector: 'app-root',\n  template: '\n      <p>viewProviders</p>\n      <p>randomSalery: {{randomSalery}}</p>\n      <app-parent></app-parent>\n      <br/>\n      <p>Child</p>\n      <app-parent>\n        <app-child></app-child>\n      </app-parent>\n  '',\n  providers:[]\n})\n\nexport class AppComponent {\n  randomSalery:any;\n  constructor(private objSalery:EmpsaleryService){\n    this.randomSalery = objSalery.getRandomSalery();\n  }\n}\n`.trim();\nconst reactiveforms = `\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-root',\n  template: '\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"form-group\">\n        <input type=\"text\" [ngClass]=\"{ 'is-invalid': submitted }\" />\n        <div *ngIf=\"submitted\">Enter text</div>\n      </div>\n\n      <button type=\"submit\">Register</button>\n    </form>\n  '',\n})\nexport class AppComponent implements OnInit {\n  form: any = FormGroup;\n  submitted = false;\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group({\n      name: ['', Validators.required],\n    });\n  }\n\n  onSubmit(): void {\n    this.submitted = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n  }\n}\n`.trim();\nconst formbuildes = `\n//FormGroup\nimport { FormGroup, FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-root',\n  template: '\n    <div [formGroup]=\"frmGroup\">\n      <input type=\"text\" formControlName=\"firstName\" /><br />\n      <input type=\"text\" formControlName=\"lastName\" />\n    </div>\n    <p>Is FormGroup Valid: {{ frmGroup.valid }}</p>\n  ',\n})\nexport class AppComponent {\n  name = 'Angular';\n  frmGroup = new FormGroup({\n    firstName: new FormControl('', []),\n    lastName: new FormControl('', []),\n  });\n\n  constructor() {\n    this.frmGroup.valueChanges.subscribe((val) => {\n      console.log(val.firstName);\n    });\n  }\n}\n\n\n//FormBuilder\nimport { FormGroup, FormBuilder } from '@angular/forms';\n\n@Component({\n  selector: 'app-root',\n  template: '\n    <form (ngSubmit)=\"save()\" [formGroup]=\"myGroup\">\n      FIRST NAME <input formControlName=\"firstName\" /> <br />\n      MIDDLE NAME <input formControlName=\"middleName\" /> <br />\n      LAST NAME<input formControlName=\"lastName\" />\n    </form>\n  ',\n})\nexport class AppComponent {\n  myGroup: any = FormGroup;\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.myGroup = this.fb.group({\n      firstName: 'Chethana',\n      middleName: [{ value: 'Dibbahalli', disabled: true }],\n      lastName: { value: 'DC', disabled: true },\n    });\n  }\n\n  save() {\n    console.log('Inside save' + this.myGroup.value);\n  }\n}\n\n`.trim();\n\nclass IntroAngulard extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 974\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 975\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 976\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 977\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 978\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 982\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 983\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 984\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 985\n      },\n      __self: this\n    }, \"1. Please explain the various features of Angular.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 986\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 987\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 988\n      },\n      __self: this\n    }, \"Components: \"), \"Angular is a component-based framework, which means that applications are built by assembling components that represent different parts of the application's user interface. Components are reusable, self-contained, and can be easily combined to create complex user interfaces.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 994\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 995\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 996\n      },\n      __self: this\n    }, \"Templates: \"), \" Angular uses templates to define the user interface of a component. Templates are written in HTML and contain Angular-specific syntax that allows for data binding and other features.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1001\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1002\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1003\n      },\n      __self: this\n    }, \"Directives: \"), \"Angular provides a number of built-in directives that allow you to manipulate the DOM, add or remove elements, and apply conditional logic to your templates. You can also create custom directives to extend the functionality of Angular.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1009\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1010\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1011\n      },\n      __self: this\n    }, \"Services: \"), \"Services are used to provide functionality that can be shared across different components of an application. Services can be used for things like fetching data from a server, performing complex calculations, or managing state.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1017\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1018\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1019\n      },\n      __self: this\n    }, \"Dependency Injection: \"), \"Angular's dependency injection system allows you to easily manage dependencies between different components and services. Dependencies are injected into components and services through their constructors.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1024\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1025\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1026\n      },\n      __self: this\n    }, \"Routing: \"), \"Angular's routing system allows you to define routes for different parts of your application and navigate between them using URLs.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1030\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1031\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1032\n      },\n      __self: this\n    }, \"Forms: \"), \"Angular provides powerful support for building forms, including both template-driven and reactive forms. This includes features like form validation, form submission, and handling user input.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1037\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1038\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1039\n      },\n      __self: this\n    }, \"Observables: \"), \"Angular uses observables to handle asynchronous operations such as HTTP requests. Observables provide a way to work with asynchronous data streams in a more efficient and predictable way.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1044\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1045\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1046\n      },\n      __self: this\n    }, \"Testing: \"), \"Angular provides a number of tools and utilities for testing your application, including both unit tests and end-to-end tests. This includes features like the Angular testing library and the Protractor testing framework.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1051\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1052\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1053\n      },\n      __self: this\n    }, \"Mobile Support: \"), \"Angular provides support for building mobile applications using technologies like Ionic and NativeScript.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1058\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1059\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1060\n      },\n      __self: this\n    }, \"2. What is difference between package.json and package-lock.json.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1064\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1065\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1066\n      },\n      __self: this\n    }, \"package.json: \"), \"This file is used to define the dependencies and other metadata of an application. It contains information about the application, such as its name, version, author, and dependencies required for the application to run. When you install a package using npm or yarn, the dependencies are listed in package.json.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1068\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1069\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1070\n      },\n      __self: this\n    }, \"package.lock.json: \"), \"This file is used to keep track of the exact version of every package and its dependencies that are installed in an application. It is automatically generated by npm or yarn when a new package is installed or updated. The package-lock.json file ensures that the exact same version of a package and its dependencies are installed on all machines running the application. This helps to avoid dependency conflicts and ensures that the application runs consistently across different environments.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1075\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1076\n      },\n      __self: this\n    }, \"3. What are the building blocks of Angular?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1077\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1078\n      },\n      __self: this\n    }, \"Components\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1079\n      },\n      __self: this\n    }, \"Data Binding\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1080\n      },\n      __self: this\n    }, \"Dependency Injection (DI)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1081\n      },\n      __self: this\n    }, \"Directives\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1082\n      },\n      __self: this\n    }, \"Metadata(decorators are used)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1083\n      },\n      __self: this\n    }, \"Modules\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1084\n      },\n      __self: this\n    }, \"Routing\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1085\n      },\n      __self: this\n    }, \"Services\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1086\n      },\n      __self: this\n    }, \"Template\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1088\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1089\n      },\n      __self: this\n    }, \"4. What is metadata\"), \"Metadata, Annotation and Decorator is same thing.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1091\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1092\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1093\n      },\n      __self: this\n    }, \"Decorator accept object. decorator are simply functions that return functions. decorator are invoke at runtime. decorator allows you to excuite functions.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1099\n      },\n      __self: this\n    }), \"Metadata is used to decorate a class so that it can configure the expected behavior of the class. There are four main types of decorators:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1103\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1104\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1105\n      },\n      __self: this\n    }, \"Class decorators\"), \", @Component, @NgModule, @Injectable, @Directive, @Pipes.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1108\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1109\n      },\n      __self: this\n    }, \"Property decorators for properties inside classes\"), \", @Input, @Output, @HostBinding, @ContentChild, @ContentChildren, @ViewChild, @ViewChildren.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1113\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1114\n      },\n      __self: this\n    }, \"Method decorators for methods inside classes\"), \", @HostListener.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1117\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1118\n      },\n      __self: this\n    }, \"Parameter decorators for parameters inside class constructors\"), \", @Inject, @Self, @SkipSelf, @Optional.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1125\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1126\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1127\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1128\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1129\n      },\n      __self: this\n    }, \"@HostBinding: \"), \"Set the properties on the element/ component that hosts the directive.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1132\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1133\n      },\n      __self: this\n    }, \"@HostListener: \"), \"This is a function decorator that accepts an event name as a argument. When that event gets fired on the host element it calls the associate function.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1138\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: hostBinding,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1139\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1145\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1146\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1147\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1148\n      },\n      __self: this\n    }, \"i. Method decorators: \"), \"Used for methods inside classes, e.g. @HostListener\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1150\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1151\n      },\n      __self: this\n    }, \"Function decorator allows us to handle event of the host element in the directive class.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1155\n      },\n      __self: this\n    }, \"It lets us to listen for event on host element/ component.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1159\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: hostListener,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1160\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1166\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1167\n      },\n      __self: this\n    }, \"ii. Parameter decorators: \"), \"Used for parameters inside class constructors, e.g. @Inject, Optional.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1169\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1170\n      },\n      __self: this\n    }), \"Inject() function provide another way to inject our services as dependency in various part of angular application.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1173\n      },\n      __self: this\n    }), \"It introduced in angular 14.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1175\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: parameters,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1176\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1182\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1183\n      },\n      __self: this\n    }, \"5. Explain Components, Modules and Services in Angular.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1184\n      },\n      __self: this\n    }, \"i. Modules \"), \"Is logical grouping of components, directives, pipes or services. To define a module, we use the NgModule.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1187\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1188\n      },\n      __self: this\n    }, \"Default module is app.module.ts.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1189\n      },\n      __self: this\n    }, \"We can includes a module inside another module.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1190\n      },\n      __self: this\n    }, \"A module have at least one component. components declared inside \\\"declarations\\\" in module. while module inside \\\"imports\\\" in app.module.ts.\", \" \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1195\n      },\n      __self: this\n    }, \"We can import a module and use inside another module. For injecting a module we use, exports:[ComponentName].\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1199\n      },\n      __self: this\n    }, \"Every module is defined with a \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1200\n      },\n      __self: this\n    }, \"@NgModule\"), \" decorator.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1202\n      },\n      __self: this\n    }, \"Angular apps are modular and Angular has its own modularity system called NgModules.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1206\n      },\n      __self: this\n    }, \"A component cannot be import in two diffrent modules. If do than show runtime error. this is features module.\")), \"By default, modules are of two types:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1212\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1213\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1214\n      },\n      __self: this\n    }, \"Root Module: \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1216\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1217\n      },\n      __self: this\n    }, \"Feature Module: \"), \"Every application can have only one root module whereas, it can have one or more feature modules.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1219\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1220\n      },\n      __self: this\n    }, \"A root module imports\\xA0BrowserModule,\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1221\n      },\n      __self: this\n    }, \"whereas a feature module imports\\xA0CommonModule.\")))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1225\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1226\n      },\n      __self: this\n    }, \"Frequently Used NgModule:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1227\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1228\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1229\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1230\n      },\n      __self: this\n    }, \"BrowserModule :\"), \"When run your app in a browser.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1232\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1233\n      },\n      __self: this\n    }, \"CommonModule :\"), \"When use NgIf, NgFor.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1235\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1236\n      },\n      __self: this\n    }, \"FormsModule :\"), \"When build template driven forms (includes NgModel).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1239\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1240\n      },\n      __self: this\n    }, \"ReactiveFormsModule :\"), \"When build reactive forms.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1242\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1243\n      },\n      __self: this\n    }, \"RouterModule :\"), \"When use RouterLink, .forRoot(), .forChild().\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1246\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1247\n      },\n      __self: this\n    }, \"HttpClientModule :\"), \"When talk to a server.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1250\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1251\n      },\n      __self: this\n    }, \"iii. Services \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1252\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1253\n      },\n      __self: this\n    }, \"Are a greate way to share information among classes that don't know each other.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1257\n      },\n      __self: this\n    }, \"Are basically a classes which may have some data, property or some functions. And we can use these data,property and functions in multiple files.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1262\n      },\n      __self: this\n    }, \"Services are objects which get instantiated only once during the lifetime of an application.\", \" \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1266\n      },\n      __self: this\n    }, \"Services can depend on other services.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1268\n      },\n      __self: this\n    }), \"A service is defined using a\\xA0\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1268\n      },\n      __self: this\n    }, \"@Injectable\"), \"\\xA0decorator. A function defined inside a service can be invoked from any component or directive.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1271\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1272\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1273\n      },\n      __self: this\n    }, \"providedIn: \"), \"Property is used to declare the provider scope of a service and is a shortcut for specifying the service in the providers.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1276\n      },\n      __self: this\n    }), \"It provides a more concise way of specifying the scope of a service in Angular, making it easier to manage the services in your application.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1280\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: makeServices,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1281\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1287\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1288\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1289\n      },\n      __self: this\n    }, \"6. What are directives: @directive\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1290\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1291\n      },\n      __self: this\n    }, \"Directives are used to extend the power of the HTML attributes and to change the appearance or behavior of a DOM element.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1296\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1297\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1298\n      },\n      __self: this\n    }, \"Elements which change the appearence/ behavior of the DOM element. 3 types of Directives.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1302\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1303\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1304\n      },\n      __self: this\n    }, \"Component Directives:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1305\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1306\n      },\n      __self: this\n    }, \"Components is the special kind of directives, Becouse we have the template varriables.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1310\n      },\n      __self: this\n    }, \"Directives with own Template.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1311\n      },\n      __self: this\n    }, \"with the help of selector, @Component which is a decorator function is used to create a component directive.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1317\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1318\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1319\n      },\n      __self: this\n    }, \"Structural Directives:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1320\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1321\n      },\n      __self: this\n    }, \"Do manipulation in DOM.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1322\n      },\n      __self: this\n    }, \"Structural directive modifies or manipulates the structure of DOM by adding or removing DOM elements. it works on the structure of a DOM.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1327\n      },\n      __self: this\n    }, \"Structural directives which have a * sign before the directive. *ngIf and *ngFor.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1333\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1334\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1335\n      },\n      __self: this\n    }, \"Attribute Directives/ Behavioral Directives:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1336\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1337\n      },\n      __self: this\n    }, \"Do css related things.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1338\n      },\n      __self: this\n    }, \" Change appearence/ behavior of the DOM.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1339\n      },\n      __self: this\n    }, \"Attribute directives deal with the changing of look and behavior of the DOM element, component or another directive. Ex. NgStyle\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1346\n      },\n      __self: this\n    }), \"By default, angular provide two attribute directives\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1348\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1349\n      },\n      __self: this\n    }, \"1. NgClass: \"), \"dynamically, add or remove CSS class on the basis of the certain conditions.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1351\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1352\n      },\n      __self: this\n    }), \"Allows us to set the CSS class dynamically for a DOM element. we can use ngClass with string, array, object or component method.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1355\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1356\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1357\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: NgClass,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1358\n      },\n      __self: this\n    }))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1365\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1366\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1367\n      },\n      __self: this\n    }, \"2. NgStyle: \"), \"dynamically, add or remove styles on the basis of the certain conditions.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1369\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1370\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: NgStyles,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1371\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1377\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1378\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1379\n      },\n      __self: this\n    }, \"Custom directive ex. are with *ngIf, *ngFor...\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1380\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1381\n      },\n      __self: this\n    }, \"ng g directive mydirective\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1382\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: customDir,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1383\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1389\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1390\n      },\n      __self: this\n    }, \"7. What is difference between attribute and structural directives?\"), \"Attribute directives modify the appearance or behavior of DOM elements. Structural directives add or remove elements from the DOM.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1397\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1398\n      },\n      __self: this\n    }, \"8. What are template expressions\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1399\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1400\n      },\n      __self: this\n    }, \"Template expressions are computations/ assignments done in the template inside the interpolation curly braces.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1404\n      },\n      __self: this\n    }, \"In interpolation syntax, the template expression is surrounded by double curly braces.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1409\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1410\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: templateExpree,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1411\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1417\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1418\n      },\n      __self: this\n    }, \"9. What are template statements\"), \"A template is an HTML snippet that tells Angular how to render the component in angular application.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1421\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: templateState,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1422\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1427\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1428\n      },\n      __self: this\n    }, \"N: \"), \"Component send data to Template by using Promises binding or Interpolation.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1431\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1432\n      },\n      __self: this\n    }, \"10. What is Data Binding? How many ways it can be done?\"), \"In order to connect application data with the DOM, data binding is used. It happens between the template and component. There are 3 ways to achieve data binding:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1436\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1437\n      },\n      __self: this\n    }, \"Interpolation / String Interpolation (one-way data binding)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1440\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1441\n      },\n      __self: this\n    }, \"Event Binding: \"), \"one-way data binding.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1443\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1444\n      },\n      __self: this\n    }, \"Property Binding: \"), \"one-way data binding.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1446\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1447\n      },\n      __self: this\n    }, \"Two-way Binding: \"), \"Changes made in the application state gets automatically reflected in the view and vice-versa. The ngModel directive is used for achieving this type of data binding.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1453\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1454\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1455\n      },\n      __self: this\n    }, \"Data binding Forms:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1456\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1457\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: databinding,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1458\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1464\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1465\n      },\n      __self: this\n    }, \"Component to view\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1466\n      },\n      __self: this\n    }, \"View to component\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1467\n      },\n      __self: this\n    }, \"Two way sequence: view to component to view\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1469\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1470\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1471\n      },\n      __self: this\n    }, \"Property binding: \"), \"Means passing data from the component and to the template. Use square bracket.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1473\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1474\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1475\n      },\n      __self: this\n    }, \"We can also use string and non-string data in property binding.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1480\n      },\n      __self: this\n    }, \"Interpolation use only string data.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1481\n      },\n      __self: this\n    }, \"in property binding can't use string concatnation.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1482\n      },\n      __self: this\n    }, \"It set a property to view element.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1484\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1485\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: property,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1486\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1492\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1493\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1494\n      },\n      __self: this\n    }, \"Event Binding: \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1495\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1496\n      },\n      __self: this\n    }, \"String interpolation: \"), \"Refer to the special type of syntax that makes use of template expressions to display component data. Such variables are enclised within doubly curly braces.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1499\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1500\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: evtBinding,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1501\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1507\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1508\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1509\n      },\n      __self: this\n    }, \"Two-way data binding:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1510\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1511\n      },\n      __self: this\n    }, \"It's a process that gives component a way to share data between the component class and its template. If the data is changed in one place it will automatically change the data at other end.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1517\n      },\n      __self: this\n    }, \"Two-way binding commonly used to listen for events and updates values between parent and child component.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1521\n      },\n      __self: this\n    }, \"mainly used in the input field or form.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1522\n      },\n      __self: this\n    }, \"it's combination of both property binding and event binding.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1525\n      },\n      __self: this\n    }, \"binding using [(ngModel)] Directive. \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1526\n      },\n      __self: this\n    }, \"ngModel Directive which combines the square bracket of property binding with parentheses of event binding in a single notation.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1532\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1533\n      },\n      __self: this\n    }, \"To use ngModel Directive we should import FormsModule in app.module.ts file.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1537\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1538\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: twoWay,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1539\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1545\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1546\n      },\n      __self: this\n    }, \"12. What are the differences between Component and Directive\"), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1549\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1550\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1551\n      },\n      __self: this\n    }, \"Component\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1552\n      },\n      __self: this\n    }, \"Directive\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1554\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1555\n      },\n      __self: this\n    }, \"To register a component we use @Component meta-data annotation\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1559\n      },\n      __self: this\n    }, \"To register directives we use @Directive meta-data annotation\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1564\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1565\n      },\n      __self: this\n    }, \"Components are typically used to create UI widgets\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1566\n      },\n      __self: this\n    }, \"Directive is used to add behavior to an existing DOM element\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1570\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1571\n      },\n      __self: this\n    }, \"Component is used to break up the application into smaller components\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1575\n      },\n      __self: this\n    }, \"Directive is use to design re-usable components\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1577\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1578\n      },\n      __self: this\n    }, \"Only one component can be present per DOM element\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1579\n      },\n      __self: this\n    }, \"Many directives can be used per DOM element\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1582\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1583\n      },\n      __self: this\n    }, \"13. Dependency Injection\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1584\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1585\n      },\n      __self: this\n    }, \"is a technique where one object supplies the dependencies of another object. A dependency is an object that can be used service.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1590\n      },\n      __self: this\n    }, \"it's a codding pattern in which classes recive their dependencies from external sources rather than creating them itself.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1596\n      },\n      __self: this\n    }), \"Consider two classes, A and B. Let\\u2019s assume that class A uses the objects of class B. Normally, in OOPS, an instance of class B is created so that class A can access the objects. Using DI, we move the creation and binding of the dependent objects outside of the class that depend on them.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1602\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1603\n      },\n      __self: this\n    }), \"Typically, there are three types of classes, they are:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1605\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1606\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1607\n      },\n      __self: this\n    }, \"Client Class: \"), \"This is the dependent class, which depends on the service class.\", \" \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1610\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1611\n      },\n      __self: this\n    }, \"Service Class: \"), \"Class that provides the service to the client class.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1614\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1615\n      },\n      __self: this\n    }, \"Injector Class: \"), \"njects the service class object into the client class.\", \" \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1619\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: Graphs,\n      alt: \"DeadLock\",\n      className: \"responsive\",\n      style: redesign,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1620\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1626\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1627\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1628\n      },\n      __self: this\n    }, \"There are three types of Dependency Injections in Angular \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1629\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1630\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1631\n      },\n      __self: this\n    }, \"Constructor injection: \"), \"It provides the dependencies through a class constructor.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1634\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1635\n      },\n      __self: this\n    }, \"Setter injection: \"), \"The client uses a setter method into which the injector injects the dependency.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1638\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1639\n      },\n      __self: this\n    }, \"Interface injection: \"), \"The dependency provides an injector method that will inject the dependency into any client passed to it. On the other hand, the clients must implement an interface that exposes a setter method that accepts the dependency.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1646\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1647\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1648\n      },\n      __self: this\n    }, \"Advantages \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1649\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1650\n      },\n      __self: this\n    }, \"Dependency Injection helps in Unit testing.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1651\n      },\n      __self: this\n    }, \"Extending the application becomes more manageable.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1652\n      },\n      __self: this\n    }, \"It helps to enable loose coupling, which is essential in application programming.\", \" \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1657\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1658\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1659\n      },\n      __self: this\n    }, \"The Drawbacks of not using Dependency Injection \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1660\n      },\n      __self: this\n    }), \"Consider a Postal details class that is dependent on the Number and the Address class.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1663\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1664\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: postals,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1665\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1671\n      },\n      __self: this\n    }), \"In the PostalDetails class, the constructor creates copies of the Number and address. So when you instantiate a new PostalDetails class, the constructor instantiates a unique number and address.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1675\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1676\n      },\n      __self: this\n    }), \"Although this looks simple, there\\u2019s a problem with this code. Let\\u2019s assume that the Number and Address classes\\u2019 constructors now accept parameters.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1680\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: postalsparams,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1681\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1687\n      },\n      __self: this\n    }), \"When we change the Number class, the PostalDetails class is broken. To overcome this, we need to pass in a parameter to the Number constructor. This applies to the Address class as well.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1691\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1692\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1693\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1694\n      },\n      __self: this\n    }, \"The first drawback is that the code is not flexible. Any time the dependencies change, the PostalDetails class needs to be changed as well.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1699\n      },\n      __self: this\n    }, \"The second drawback is that this code is not suitable for testing. Anytime you instantiate a new PostalDetails class, you get the same Number and Address. Even if you change the Number and Address classes, what if these classes, in turn, have dependencies?\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1707\n      },\n      __self: this\n    }), \"As a result, we are not in control of the code, and here\\u2019s where Dependency Injection comes into the picture.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1710\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1711\n      },\n      __self: this\n    }), \"DI is a coding pattern where a class receives its dependencies from an external source rather than creating them itself.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1714\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1715\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: impdi,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1716\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1722\n      },\n      __self: this\n    }), \"In the above example, we have moved the definition of the dependencies from inside the constructor to the constructor\\u2019s parameters. So the PostalDetails class doesn\\u2019t create the dependencies anymore. It just consumes them. The creation of those dependencies is external to this class, and by doing so, we now solve both the drawbacks.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1729\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1730\n      },\n      __self: this\n    }, \"16. What is the use of httpInterceptor Class?\"), \"The Angular Interceptor helps us to modify the HTTP Request by intercepting it before the Request is sent to the back end. It can also modify the incoming Response from the back end. The Interceptor globally catches every outgoing and in coming request at a single place.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1736\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1737\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1738\n      },\n      __self: this\n    }, \"17. HttpClient\"), \"and import HttpClientModule as imports: [BrowserModule, HttpClientModule] in app.module.ts file.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1741\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1742\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: httpClients,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1743\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1749\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1750\n      },\n      __self: this\n    }, \"17. What is the difference between template driven form and reactive based approach?\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1754\n      },\n      __self: this\n    }, \"import FormsModule and Reactiveforms Module in Angular to use [(ngModel)] and reactive forms respectively.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1758\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1759\n      },\n      __self: this\n    }, \"Template-driven forms are asynchronous in nature, whereas Reactive forms are mostly synchronous.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1763\n      },\n      __self: this\n    }, \"In a template-driven approach, most of the logic is driven from the template, whereas in reactive-driven approach, the logic resides mainly in the component or typescript code.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1769\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1770\n      },\n      __self: this\n    }, \"49. Two ways to collect and validate data from users\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1771\n      },\n      __self: this\n    }, \"1. Template-driven forms:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1772\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1773\n      },\n      __self: this\n    }, \"Everythings which we are going to use in an application is defined into the template that are defining\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1777\n      },\n      __self: this\n    }, \"Along with a component.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1778\n      },\n      __self: this\n    }, \"To use it we need to import FormsModule in application.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1780\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1781\n      },\n      __self: this\n    }, \"2. Model-driven forms (Reactive forms)\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1782\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1783\n      },\n      __self: this\n    }, \"The model which is created in .ts file is responsible for handling all the user interactions/ validations. For this first need to create the model using Angular unbuilt classes like formGroup and formControl and then, we need to bind the model to HTML form.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1790\n      },\n      __self: this\n    }, \"As we create the form controls directly in the component, it makes easier to push data between the data models and UI elements.\", \" \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1796\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1797\n      },\n      __self: this\n    }, \"import 'ReactiveFormsModule' in app.module.ts file\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1798\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: reactiveforms,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1799\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1805\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1806\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1807\n      },\n      __self: this\n    }, \"statusChanges():\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1808\n      },\n      __self: this\n    }), \"is a property of AbstractControl that emits an event every time when the validations status of the control is recalculated.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1811\n      },\n      __self: this\n    }), \"statusChanges property is available in formControl, FormArray and formGroup classes because they inherit AbstractControl class.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1814\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1815\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1816\n      },\n      __self: this\n    }, \"3. What is the difference between FormBuilder and FormControl?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1819\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1820\n      },\n      __self: this\n    }, \"A reactive form is a FormGroup that is made up of FormControls.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1824\n      },\n      __self: this\n    }, \"FormBuilder is the class that is used to create both FormGroups and FormControls.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1829\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1830\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1831\n      },\n      __self: this\n    }, \"The FormBuilder class has 3 methods: \"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1832\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1833\n      },\n      __self: this\n    }, \"control()\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1834\n      },\n      __self: this\n    }, \"group()\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1835\n      },\n      __self: this\n    }, \"array()\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1837\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1838\n      },\n      __self: this\n    }, \"FormBuilder avoids using new FormControl in FormGroup.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1839\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: formbuildes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1840\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1846\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1847\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1848\n      },\n      __self: this\n    }, \"18. What is the difference between forChild and forRoot? \"), \"In Angular, forRoot and forChild are two methods provided by the RouterModule to configure and register routes for the application.\", React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1851\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1852\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1853\n      },\n      __self: this\n    }, \"forRoot\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1854\n      },\n      __self: this\n    }, \"forChild\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1856\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1857\n      },\n      __self: this\n    }, \"Used in the root module of the application (i.e., AppModule).\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1861\n      },\n      __self: this\n    }, \"Used in child modules that are imported by the root module.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1865\n      },\n      __self: this\n    }), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1866\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1867\n      },\n      __self: this\n    }, \"Used to create and configure the router service in the root module of the application. It should only be called once, in the AppModule.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1872\n      },\n      __self: this\n    }, \"Used to create and configure the router service in child modules that are imported by the AppModule. It can be called multiple times.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1878\n      },\n      __self: this\n    }), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1879\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1880\n      },\n      __self: this\n    }, \"Provides the primary router configuration for the application, including the main router outlet, the base href, and any primary routes.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1885\n      },\n      __self: this\n    }, \"Adds additional routes and configuration to an existing router configuration.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1890\n      },\n      __self: this\n    }), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1891\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1892\n      },\n      __self: this\n    }, \"Registers the router service as a singleton instance in the application's root injector, making it available throughout the application.\", \" \"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1897\n      },\n      __self: this\n    }, \"Registers the router service as a provider in the child module's injector, making it available only to that module and its children.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1904\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1905\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: formroot,\n      alt: \"DeadLock\",\n      className: \"responsive\",\n      style: redesign,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1906\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1912\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1913\n      },\n      __self: this\n    }, \"19. What is Interceptor.\"), \"Is a medium connecting the backend and front-end applications. Whenever a request is made, the interceptors handle it in between. They can also identify the response by performing Rxjs operators. The interceptors do not initiate the handle method and handle the requests at their level.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1919\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1920\n      },\n      __self: this\n    }, \"20. Can you explain the concept of scope hierarchy in Angular?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1923\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1924\n      },\n      __self: this\n    }, \"Angular organizes the $scope objects into a hierarchy that is typically used by views. It has a root scope that can further contain one or several scopes called child scopes.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1929\n      },\n      __self: this\n    }, \"In a scope hierarchy, each view has its own $scope.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1930\n      },\n      __self: this\n    }, \"The scope in Angular binds the HTML and the JavaScript. It as expected is an object with the available methods and properties. The scope is available for both the view and the controller.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1937\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1938\n      },\n      __self: this\n    }, \"21. What is zone\"), \"Zone. js is a api or set of programs which is used by angular to update the application view when any change occurred.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1941\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1942\n      },\n      __self: this\n    }, \"Ex.: \"), \"Events, XMLHttpRequests and Timers(setTimeout(), setInterval()) etc.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1944\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1945\n      },\n      __self: this\n    }, \"22. What is ViewEncapsulation and how many ways are there to do it in Angular?\"), \"ViewEncapsulation determines whether the styles defined in a particular component will affect the entire application or not. Angular supports 3 types of ViewEncapsulation:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1952\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1953\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1954\n      },\n      __self: this\n    }, \"Emulated: \"), \"Styles used in other HTML spread to the component\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1957\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1958\n      },\n      __self: this\n    }, \"Native: \"), \"Styles used in other HTML doesn\\u2019t spread to the component\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1961\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1962\n      },\n      __self: this\n    }, \"None: \"), \"Styles defined in a component are visible to all components of the application\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1966\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1967\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1968\n      },\n      __self: this\n    }, \"24. What is the use of Bazel in Angular 8.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1969\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1970\n      },\n      __self: this\n    }, \"It provides a platform to make back-end and front-end services with the same tool.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1974\n      },\n      __self: this\n    }, \"It allows us to build CLI applications quickly and easily.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1977\n      },\n      __self: this\n    }, \"The entirety of the Angular framework is built on Bazel and it allows us to divide an application into various build units which are defined at the NgModule level.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1982\n      },\n      __self: this\n    }, \"It supports customization and also facilitates us to draw graphs. We can use these graphs to easily identify the essential information.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1988\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1989\n      },\n      __self: this\n    }, \"25. Why we should use Bazel for Angular builds\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1990\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1991\n      },\n      __self: this\n    }, \"The initial build time with Bazel will be comparable to the traditional JavaScript tooling. the difference is that the time will not grow exponentially when our application\\u2019s size increases. With Bazel most of the time the build time will stay constant.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1998\n      },\n      __self: this\n    }, \"Bazel rebuilds only the packages which have changed and nothing else.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2003\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2004\n      },\n      __self: this\n    }, \"26. Interface Vs. Model Class\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2005\n      },\n      __self: this\n    }, \"Interface\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2006\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2007\n      },\n      __self: this\n    }, \"An interface is a named shape/structure of related properties & methods that describe an object, but neither provides implementation nor initialisation for them.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2012\n      },\n      __self: this\n    }, \"Interfaces are compile time to check strongly-typed data.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2015\n      },\n      __self: this\n    }, \"An Interface exists only for developers convenience and are not used by angular at run time, They get removed when transpiling down to JS, so they take up no space.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2021\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2022\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2023\n      },\n      __self: this\n    }, \"Model Class\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2024\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2025\n      },\n      __self: this\n    }, \"A model class is a blueprint that contains properties & method and also can provide implementation of something and instantiated using new keyword, unlike just a named shape.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2030\n      },\n      __self: this\n    }, \"Classes are compile time, additional, can be used during runtime as well.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2034\n      },\n      __self: this\n    }, \"A Class transpiled into its ES5-compatible function form and corresponding It generates JS code which persists in final JavaScript output, hence this take up space in memory.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2040\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2041\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2042\n      },\n      __self: this\n    }, \"28. What is State function\"), \"Angular's state() function is used to define different states to call at the end of each transition. This function takes two arguments:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2046\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2047\n      },\n      __self: this\n    }, \"A unique name like open or closed.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2048\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2049\n      },\n      __self: this\n    }, \"A style() function: \"), \"The style function is used to define a set of styles to associate with a given state name. You need to use it along with state() function to set CSS style attributes.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2055\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: stateFun,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2056\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2062\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2063\n      },\n      __self: this\n    }, \"29. What is transition function\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2064\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2065\n      },\n      __self: this\n    }, \"The animation transition function is used to specify the changes that occur between one state and another over a period of time. It accepts two arguments:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2070\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2071\n      },\n      __self: this\n    }, \"First argument accepts an expression that defines the direction between two transition states.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2075\n      },\n      __self: this\n    }, \"Second argument accepts an animate() function.\"))), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2078\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: transition,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2079\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2085\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2086\n      },\n      __self: this\n    }, \"30. Pipes\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2087\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2088\n      },\n      __self: this\n    }, \"A pipe takes in data as input and transforms it to a desired output.\", \" \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2092\n      },\n      __self: this\n    }, \"Using pipe operator (|), we can apply the pipe's features to any of property in app.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2096\n      },\n      __self: this\n    }, \"Pipes used to transform the data before displaying it in a browser. Even we can create custom pipes.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2100\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2101\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2102\n      },\n      __self: this\n    }, \"Parameterize Pipes:\"), \" we can pass any number of Parameters to the pipe using colon (:).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2105\n      },\n      __self: this\n    }, \"Mutiple Pipes\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2106\n      },\n      __self: this\n    }, \"Pipes with string\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2108\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2109\n      },\n      __self: this\n    }, \"Ex. \"), \"DatePipe, UpperCasePipe, LowerCasePipe, CurrencyPipe, and PercentPipe.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2111\n      },\n      __self: this\n    }), \"Let us take a pipe to transform a component's birthday property into a human-friendly date using date pipe.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2114\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2115\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: pipeFor,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2116\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2122\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2123\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2124\n      },\n      __self: this\n    }, \"Steps to create custom pipe: \"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2125\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2126\n      },\n      __self: this\n    }, \"Creates a TypeScript class.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2127\n      },\n      __self: this\n    }, \"Decorate the class with \\\"@Pipe\\\" decorator.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2128\n      },\n      __self: this\n    }, \"Implements PipeTransform interface in TypeScript class.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2129\n      },\n      __self: this\n    }, \"Override the transform() method.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2130\n      },\n      __self: this\n    }, \"Configure the class with @NgModule.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2132\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2133\n      },\n      __self: this\n    }, \"31. What is a parameterized pipe\"), \"The parameterized pipe can be created by declaring the pipe name with a colon ( : ) and then the parameter value.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2136\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2137\n      },\n      __self: this\n    }, \"Ex. \"), \"Let's take a birthday example with a particular format(dd/MM/yyyy):\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2139\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: paraPipes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2140\n      },\n      __self: this\n    })), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2146\n      },\n      __self: this\n    }, \"N: The parameter value can be any valid template expression, such as a string literal or a component property.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2150\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2151\n      },\n      __self: this\n    }, \"32. How do you chain pipes\"), \"Let's take a birthday property which uses date pipe(along with parameter) and uppercase pipes as below.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2154\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: chainPipe,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2155\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2161\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2162\n      },\n      __self: this\n    }, \"33. Pure and Impure Pipes\"), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2163\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2164\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2165\n      },\n      __self: this\n    }, \"Pure Pipe\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2166\n      },\n      __self: this\n    }, \"Impure Pipe\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2168\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2169\n      },\n      __self: this\n    }, \"Based on the i/p state the o/p state can be determine.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2172\n      },\n      __self: this\n    }, \"If the o/p can't be determined from i/p state or has an internal/ external state involved.\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2177\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2178\n      },\n      __self: this\n    }, \"i/p params determine the o/p.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2179\n      },\n      __self: this\n    }, \"i/p params can't determine o/p.\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2181\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2182\n      },\n      __self: this\n    }, \"Angular calls the pipe transform function only if i/p parameters are change.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2186\n      },\n      __self: this\n    }, \"Angular call the transform function, even if i/p parameters are not changed.\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2191\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2192\n      },\n      __self: this\n    }, \"Deterministic\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2193\n      },\n      __self: this\n    }, \"Non-Deterministic\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2195\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2196\n      },\n      __self: this\n    }, \"If i/p not change than o/p is same in that case, Does not run on every change detection cycle.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2200\n      },\n      __self: this\n    }, \"Runs on every change detection cycle.\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2202\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2203\n      },\n      __self: this\n    }, \"Does not perform on any side-effect, and hold immutability.\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2206\n      },\n      __self: this\n    }, \"Perform on side-effect\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2209\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2210\n      },\n      __self: this\n    }, \"34. What is the purpose of async pipe\"), \"The AsyncPipe subscribes to an observable or promise and returns the latest value it has emitted. When a new value is emitted, the pipe marks the component to be checked for changes.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2214\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2215\n      },\n      __self: this\n    }), \"Let's take a time observable which continuously updates the view for every 2 seconds with the current time.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2218\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: purpose,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2219\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2225\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2226\n      },\n      __self: this\n    }, \"35. Change Detection:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2227\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2228\n      },\n      __self: this\n    }, \"Means updating the DOM every time the data is changed.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2229\n      },\n      __self: this\n    }, \"When modifying any of the models, Angular detects the changes and updates the views immediately. The purpose of this mechanism is to ensure that the underlying views are always synchronized with their corresponding models.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2236\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2237\n      },\n      __self: this\n    }, \"Angular provides two strategies for Change Detection:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2238\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2239\n      },\n      __self: this\n    }, \"1. default strategy:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2240\n      },\n      __self: this\n    }), \"Every time you put or edit any data, Angular will run the change detector to update the DOM.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2243\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2244\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2245\n      },\n      __self: this\n    }, \"2. onPush strategy:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2246\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2247\n      },\n      __self: this\n    }, \"Angular will only run change detector when new reference is passed to \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2249\n      },\n      __self: this\n    }, \"@Input\"), \" data.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2251\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2252\n      },\n      __self: this\n    }, \"With onPush, the component depends only on its inputs and covers immutability, the change detection strategy will be activated when:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2256\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2257\n      },\n      __self: this\n    }, \"The input reference changes;\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2258\n      },\n      __self: this\n    }, \"An event originating from the member or one of his children;\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2262\n      },\n      __self: this\n    }, \"Execute change detection explicitly\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2264\n      },\n      __self: this\n    }, \"(componentRef.markForCheck ());\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2266\n      },\n      __self: this\n    }, \"Use the async pipe in the view.\")))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2270\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2271\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: changeDetector,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2272\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2278\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2279\n      },\n      __self: this\n    }, \"In the onPush strategy, Angular only performs the change detector when a new reference to the data of @Input() is passed.\")), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2285\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2286\n      },\n      __self: this\n    }, \"Change Detection Mechanism-moves only forward and never looks back, starting from the root component to the last. Each component points to a child, but the child does not point to a parent. One-way flow eliminates the need for a\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2291\n      },\n      __self: this\n    }, \"$digest loop\"), \".\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2294\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2295\n      },\n      __self: this\n    }, \"48. How many Change Detectors can there be in the whole application?\"), \"Each component has its own ChangeDetector. All Change Detectors are inherited from AbstractChangeDetector.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2301\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2302\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2303\n      },\n      __self: this\n    }, \"36. ViewProvider\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2304\n      },\n      __self: this\n    }, \"viewProviders property allows us to make providers available only for the component\\u2019s view. When we want to use a class in our component that is defined outside the @Component () decorator function, then, first of all, we need to inject this class into our component, and we can achieve this with the help of the \\\"viewProvider\\\" property of a component.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2312\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: viewProviders,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2313\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2319\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2320\n      },\n      __self: this\n    }, \"37. ViewChild\"), \"ViewChild is a decorator for Angular component variables, which allow to bind child component data and method.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2323\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2324\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2325\n      },\n      __self: this\n    }, \"There may be situation where we want to access a directive, child component or a DOM element from a parent component class. @ViewChild decorator returns the first element that matches a give directive, component or template.\")), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2332\n      },\n      __self: this\n    }, \"ViewChild using Component\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2333\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: viewChilds,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2334\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2340\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2341\n      },\n      __self: this\n    }, \"ViewChild using Directive\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2342\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: viewChildsDir,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2343\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2349\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2350\n      },\n      __self: this\n    }, \"ViewChild using Template\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2351\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: viewChildsTemp,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2352\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2358\n      },\n      __self: this\n    }), \"Use @ViewChild with ElementRef or TemplateRef.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2360\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2361\n      },\n      __self: this\n    }, \"Dynamically Load Component\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2362\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2363\n      },\n      __self: this\n    }, \"Dynamic components are the components in which components location in the application is not defined at build time.i.e, They are not used in any angular template. But the component is instantiated and placed in the application at runtime.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2369\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2370\n      },\n      __self: this\n    }, \"Mainly, in the component template, a component is loaded using the component selector at angular compile time. The component can also be loaded dynamically at runtime with the help of\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2374\n      },\n      __self: this\n    }, \"ComponentFactory, ComponentFactoryResolver\"), \", and\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2375\n      },\n      __self: this\n    }, \"ViewContainerRef\"), \".\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2377\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2378\n      },\n      __self: this\n    }, \"Those components which need to be loaded dynamically must also be configured in \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2380\n      },\n      __self: this\n    }, \"entryComponents\"), \"metadata of @NgModule decorator. To load a dynamic component in a template we required an insert location and to get it we need \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2383\n      },\n      __self: this\n    }, \"ViewContainerRef\"), \" of a decorator or a component.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2385\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2386\n      },\n      __self: this\n    }, \"ComponentFactory is used to create an instance of components where ComponentFactoryResolver resolves a ComponentFactory for a particular component. It is used as follows.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2391\n      },\n      __self: this\n    }, \"let componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2396\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2397\n      },\n      __self: this\n    }, \"38. ViewContainerRef\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2398\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2399\n      },\n      __self: this\n    }, \"ViewContainerRef represents a container where we can attach one or more views to a component and also show an API to create components. Some important methods of ViewContainerRef are:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2404\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2405\n      },\n      __self: this\n    }, \"createEmbeddedView()\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2406\n      },\n      __self: this\n    }, \"clear()\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2407\n      },\n      __self: this\n    }, \"get()\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2408\n      },\n      __self: this\n    }, \"insert()\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2409\n      },\n      __self: this\n    }, \"move()\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2410\n      },\n      __self: this\n    }, \"createComponent()\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2413\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2415\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2416\n      },\n      __self: this\n    }, \"CreateEmbeddedView()\"), \" instantiates an embedded view and inserts it into container.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2419\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2420\n      },\n      __self: this\n    }, \"createComponent()\"), \" instantiates a single component and inserts its host view into the container at a specified index.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2424\n      },\n      __self: this\n    }), \"In dynamic component loader, load component using createComponent() of ViewContainerRef.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2427\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2428\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: ViewContainerRef,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2429\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2435\n      },\n      __self: this\n    }), \"clear() method of ViewContainerRef destroys all existing views in the container.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2438\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2439\n      },\n      __self: this\n    }, \"39. What is ng-template in Angular?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2440\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2441\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2442\n      },\n      __self: this\n    }, \"ng-template:\"), \" Is an Angular element that is used for rendering HTML in a template. However, it is not rendered directly on DOM. If you include an ng-template tag to a template, the tag and the content inside it will be replaced by comment upon render.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2448\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2449\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2450\n      },\n      __self: this\n    }, \"ng-container: \"), \"Allows us to create a section in a template without introducing a new HTML element. The ng-container does not render in the DOM, but content inside it is rendered. ng-container is not a directive, component, class or interface, it just a syntax element.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2457\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: template,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2458\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2464\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2465\n      },\n      __self: this\n    }, \"40. What is the purpose of any type cast function\"), \"You can disable binding expression type checking using $any() type cast function.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2468\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: typeFunc,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2469\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2475\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2476\n      },\n      __self: this\n    }, \"41. What is Non null type assertion operator\"), \"You can use the non-null type assertion operator to suppress the Object is possibly 'undefined' error.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2479\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2480\n      },\n      __self: this\n    }), \"In the following example, the user and contact properties are always set together, implying that contact is always non-null if user is non-null. The error is suppressed in the example by using contact!.email.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2485\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: assertionOpp,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2486\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2492\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2493\n      },\n      __self: this\n    }, \"42. What is type narrowing\"), \"Dynamic checks and predicates gives us information about values at run-time. type narrowing is the process of reflecting this information in the type-checker at compile time.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2497\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: narrowing,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2498\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2504\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2505\n      },\n      __self: this\n    }, \"43. What is the purpose of common module\"), \"The commonly-needed services, pipes, and directives provided by @angular/common module.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2508\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2509\n      },\n      __self: this\n    }, \"44. What is angular animation\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2510\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2511\n      },\n      __self: this\n    }, \"Angular animations are based on CSS web transition functionality, so anything that can be styled or transformed in CSS can be animated the same way in Angular.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2516\n      },\n      __self: this\n    }, \"Angular animations allow you to: Set animation timings, styles, keyframes, and transitions.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2521\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2522\n      },\n      __self: this\n    }, \"45. What is Angular DSL (Domain-specific language)\"), \"A DSL is a computer language specialized to a particular application domain. Angulard DSL allows us to write Angular specific html-like syntax on top of normal html. It has its own compiler that compiles this syntax to html that the browser can understand. This DSL is defined in NgModules such as animations, forms, routing and navigation.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2529\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2530\n      },\n      __self: this\n    }), \"Basically you will see 3 main syntax in Angular DSL.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2532\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: dslSyntax,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2533\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2539\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2540\n      },\n      __self: this\n    }, \"46. What is multicasting\"), \"Multi-casting is the process of broadcasting to a list of multiple subscribers in a single execution.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2543\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: multicasting,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2544\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2550\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2551\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2552\n      },\n      __self: this\n    }, \"Angular Module Loading: A module can be loaded eagerly, lazily, preloaded.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2556\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2557\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2558\n      },\n      __self: this\n    }, \"1. Eager loading:\"), \" All of the modules and functions are loaded on application startup. the root module is always eagerly loaded.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2562\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2563\n      },\n      __self: this\n    }, \"2. Lazy loading:\"), \" is loading modules on demand.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2565\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2566\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2567\n      },\n      __self: this\n    }, \"3. Preloading:\"), \" is loading modules in background just after app starts.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2570\n      },\n      __self: this\n    }, \"To configure Preloading features modules, first we configure them for lazy loading then, using angular in-built PreloadAllModules strategy, we enable to load all lazy loading into Preloading modules.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2576\n      },\n      __self: this\n    }, \"Using PreloadAllModules strategy, all modules configured by loadChildren property will be preloaded. The modules configured by loadChildren property will be either lazily loaded or preloaded but not both. To preload only selective modules, we need to use custom preloading strategy.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2583\n      },\n      __self: this\n    }, \"We can create custom preloading strategy. For this we need to create a service by implementing Angular PreloadingStrategy interface and override its preload method and then configure this service with PreloadingStrategy property in routing module. To select a module for custom preloading we need to use dataproperty in route configuration, configured as data 'preload: true' for selective feature module preloading.\"))))));\n  }\n\n}\n\nexport default withStyles(styles)(IntroAngulard);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/deepAngularjs/introAngularjs.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Graphs","formroot","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","redesign","height","width","NgClass","trim","databinding","property","evtBinding","NgStyles","customDir","templateExpree","templateState","twoWay","hostBinding","hostListener","parameters","makeServices","postals","postalsparams","impdi","httpClients","stateFun","transition","pipeFor","paraPipes","chainPipe","purpose","ViewContainerRef","template","typeFunc","assertionOpp","narrowing","dslSyntax","multicasting","changeDetector","viewChilds","viewChildsDir","viewChildsTemp","viewProviders","reactiveforms","formbuildes","IntroAngulard","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\nimport Graphs from \"../../../assets/dinjection.png\";\nimport formroot from \"../../../assets/HhQY9.png\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst redesign = {\n  height: 200,\n  width: 500,\n};\n\nconst NgClass = `\n@Component({\n  selector: 'app-root',\n  template: '\n  <p [ngStyle] = \"{backgroundColor: getColor()}\" [ngClass] = \"{Online: serverStatus === 'Online'}\"> \n    Server  with ID {{serverID}} is {{serverStatus}}. \n  </p >,\n  styles: ['.Online{ color: yellow; }']'})\n\nexport class AppComponent {\n  serverID: number = 10;\n  serverStatus: string = 'Offline';\n\n  constructor () {\n  this.serverStatus = Math.random() > 0.5 ? 'Online' : 'Offline';\n  }\n\n  getServerStatus() {\n    return this.serverStatus;\n  }\n  getColor() {\n    return this.serverStatus === 'Online' ? 'green' : 'red';\n  }\n}`.trim();\n\nconst databinding = `\nDOM               Component\n<----{{value}}-----\n<-[propery]=\"value\" --\n--(event)=\"handler\" -->\n<-[(NgModule)]=\"propery\" --`.trim();\n\nconst property = `\nsyntax: [property]='expression\n\n//\n@Component({\n  selector: 'app-root',\n  template: '\n    <button (click)=\"toggleSecret()\">Toggle Secret</button>\n    <h3 [hidden]=\"secretTextHidden\">Property Binding</h3>\n  ',\n})\nexport class AppComponent {\n  secretTextHidden = false;\n\n  toggleSecret() {\n    this.secretTextHidden = !this.secretTextHidden;\n  }\n}\n`.trim();\n\nconst evtBinding = `\n@Component({\n  selector: 'app-root',\n  template: '\n    {{ name }}\n    <button (click)=\"nameChange()\">evt</button>\n  ',\n})\nexport class AppComponent {\n  name = 'Pikachu';\n\n  nameChange() {\n    this.name = 'Raichu';\n  }\n}`.trim();\n\nconst NgStyles = `\n//1\n<div [ngStyle]=\"{'color':green}\"></div>\nngStyle become much more useful when the value is dynamic.\n<div [ngStyle]=\"{'color': person.country==='UK' ? 'green' : 'red'}\"></div>\n\n\n//2\n@Component({\n  selector: 'app-root',\n  template: '\n  <p[ngStyle]=\"{backgroundColor: 'green'}\"> Server with ID {{serverID}} is {{serverStatus}}.</p>\n  '})\nexport class AppComponent {\n  serverID: number = 10;\n  serverStatus: string = 'Offline';\n\n  constructor () {\n  this.serverStatus = Math.random() > 0.5 ? 'Online' : 'Offline';\n  }\n}`.trim();\n\nconst customDir = `\n//html\n<p appCustomdir>Custom directive</p>\n\n\n//ts\nimport { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[appCustomdir]'\n})\nexport class CustomdirDirective {\n\n  constructor(private el:ElementRef) { \n    el.nativeElement.style.color=\"green\"\n  }\n}\n`.trim();\nconst templateExpree = `\n<h3>{{username}}, welcome to Angular</h3>\n\n\n//The below javascript expressions are prohibited in template expression\n1. assignments (=, +=, -=, ...)\n2. new\n3. chaining expressions with ; or ,\n4. increment and decrement operators (++ and --)\n`.trim();\n\nconst templateState = `\n//template statements appear in quotes to the right of the = symbol like (event)=\"statement\".\n<button (click)=\"statement()\">Edit Profile</button>\n`.trim();\n\nconst twoWay = `\n@Component({\n  selector: 'app-root',\n  template: '\n    <input type=\"text\" [(ngModel)]=\"name\" placeholder=\"type here\" />\n    <h3>{{ name }}</h3>\n  ',\n})\nexport class AppComponent {\n  name = 'Angular 5';\n}\n`.trim();\n\nconst hostBinding = `\nimport { Component, ElementRef, HostBinding, HostListener} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '\n      <p>@HostBinding() & @HostListener()</p>\n  ',\n  providers:[]\n})\n\nexport class AppComponent{\n  constructor(private el:ElementRef){\n\n  }\n\n  @HostBinding('style.color') textColor: any;\n  ngOnInit(){\n    this.textColor=\"green\";\n  }\n\n  @HostListener('click') onClick(){\n    // alert('HostListener')\n    this.textColor = \"red\";\n  }\n\n  @HostListener('mouseover') onMouseHover(){\n    this.textColor = \"blue\";\n  }\n\n  @HostListener('mouseout') onMouseOut(){\n    this.textColor = \"pink\";\n  }\n}`.trim();\n\nconst hostListener = `\nmport { Component, HostListener } from '@angular/core';\n\n@Component({\n    selector: 'my-component',\n    template: '<div>Method decorator</div>'\n})\nexport class MyComponent {\n    @HostListener('click', ['$event'])\n    onHostClick(event: Event) {\n        // clicked, 'event' available\n    }\n}`.trim();\n\nconst parameters = `\n//myservice.ts\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class myService {\n  name = 'Mukesh';\n  constructor() {}\n}\n\n\n//app.component.ts\nimport { Component, Inject } from '@angular/core';\nimport { myService } from './myservice';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  constructor(@Inject(myService) myService: any) {\n    console.log(myService);\n  }\n}\n`.trim();\n\nconst makeServices = `\n//myService.ts\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class myService {\n  name = 'Mukesh';\n  sayHello() {\n    console.log(this.name);\n  }\n}\n\n\n//app.component.ts\nimport { myService } from './myservice';\n\n@Component({\n  selector: 'app-root',\n  template: '',\n})\nexport class AppComponent {\n  constructor(private myServices: myService) {\n    this.myServices.sayHello();\n  }\n}\n\n\n//app.module.ts\n@NgModule({\n  declarations: [AppComponent, Child],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    StoreModule.forRoot({}),\n  ],\n  providers: [myService],\n  bootstrap: [AppComponent],\n})\n`.trim();\n\nconst postals = `\n  class Number{\n    constructor(){}\n  }\n\n  class Address{\n    constructor(){}\n  }\n\n  class PostalDetails{\n    Number;\n    Address;\n    \n    constructor(){\n      this.Number = new Number();\n      this.Address = new Address();\n    }\n  }\n`.trim();\n\nconst postalsparams = `\nclass Number{\n  constructor(par){}\n}\n\nclass Address{\n  constructor(par){}\n}\n\nclass PostalDetails{\n  Number;\n  Address;\n  \n  constructor(){\n    this.Number = new Number();     //Error\n    this.Address = new Address();   //Error\n  }\n}\n`.trim();\n\nconst impdi = `\nclass PostalDetails{\n  number;\n  address;\n  \n  constructor(number, address){\n    this.number = number();    \n    this.address = address();  \n  }\n}\n`.trim();\n\nconst httpClients = `\nimport { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\ninterface Kafein {\n  name: string;\n  address: string;\n}\n\n@Component({\n  selector: 'app-root',\n  template: ' <tr *ngFor=\"let datas of httpData\">\n    <td>{{ datas.title }}</td>\n  </tr>',\n})\nexport class AppComponent {\n  url = 'https://jsonplaceholder.typicode.com/todos';\n  httpData: any;\n\n  constructor(private http: HttpClient) {}\n\n  ngOnInit() {\n    this.callApi();\n  }\n\n  callApi() {\n    this.http.get<Kafein[]>(this.url).subscribe((data) => {\n      this.httpData = data;\n    });\n  }\n}\n`.trim();\n\nconst stateFun = `\nstate('open', style({\n  height: '300px',\n  opacity: 0.5,\n  backgroundColor: 'blue'\n})),`.trim();\n\nconst transition = `\ntransition('open => closed', [\n  animate('500ms')\n]),`.trim();\n\nconst pipeFor = `\n@Component({\n  selector: 'app-birthday',\n  template: '<p> Birthday is {{birthday | date}}</p>'\n})\nexport class BirthdayComponent {\n  birthday = new Date(1987, 6, 18); \n}`.trim();\n\nconst paraPipes = `\n@Component({\n      selector: 'app-birthday',\n      template: '<p> Birthday is {{birthday | date: 'dd/MM/yyyy'}}</p>' // 18/06/1987\n    })\n    export class BirthdayComponent {\n      birthday = new Date(1987, 6, 18);\n    }`.trim();\n\nconst chainPipe = `\n@Component({\n          selector: 'app-birthday',\n          template: '<p> Birthday is {{birthday | date: 'fullDate' | uppercase}} </p>' // THURSDAY, JUNE 18, 1987\n        })\n        export class BirthdayComponent {\n          birthday = new Date(1987, 6, 18);\n        }`.trim();\n\nconst purpose = `\n@Component({\n  selector: 'async-observable-pipe',\n  template: '<div> <code>observable|async</code>:\n  Time: {{time | async}}</div >'\n})\nexport class AsyncObservablePipeComponent {\n  time = new Observable(observer =>\n    setInterval(() => observer.next(new Date().toString()), 2000)\n  );\n}`.trim();\n\nconst ViewContainerRef =\n  `let componentRef = viewContainerRef.createComponent(componentFactory);`.trim();\n\nconst template = `\n<p>Hip!</p>\n<ng-template>\n  <p>Hip!</p>\n</ng-template>\n<p>Hooray!</p>\n\n//<ng-container>\n@Component({\n  selector: 'app-root',\n  template: '\n      <ng-template #loading>\n        ng-template rendering\n      </ng-template>\n\n      <p>ng-container</p>\n      <ng-container *ngIf=\"display else loading\">\n        ng-container rendering\n        \n      </ng-container>\n      <ul>\n          <li *ngFor=\"let emp of employees; let i=index\">\n            <ng-container *ngIf=\"emp.salery>10000\">\n              {{i+1}} - {{emp.name}}\n            </ng-container>\n          </li>\n        </ul>\n  '',\n  providers:[]\n})\n\nexport class AppComponent {\n  display=false;\n\n  employees = [\n    {\"name\":\"Mukesh\", \"salery\":10000},\n    {\"name\":\"Rakesh\", \"salery\":12000},\n    {\"name\":\"Nitesh\", \"salery\":15000},\n  ]\n}\n`.trim();\n\nconst typeFunc = `\ntemplate:\n  '{{ $any(user).contacts.email }}'\n  \n  \n//The $any() cast function also works with this to allow access to undeclared members of the component.\n   template:\n   '{{ $any(this).contacts.email }}'`.trim();\n\nconst assertionOpp = `@Component({\n  selector: 'my-component',\n  template: '<span *ngIf=\"user\"> {{user.name}} contacted through {{contact!.email}} </span>'\n})\nclass MyComponent {\n  user?: User;\n  contact?: Contact;\n\n  setData(user: User, contact: Contact) {\n    this.user = user;\n    this.contact = contact;\n  }\n}`.trim();\n\nconst narrowing = `\n@Component({\n  selector: 'my-component',\n  template: '<span *ngIf=\"user\"> {{user.contact.email}} </span>'\n})\nclass MyComponent {\n  user?: User;\n}`.trim();\n\nconst dslSyntax = `\n(): Used for Output and DOM events.\n[]: Used for Input and specific DOM element attributes.\n*: Structural directives(*ngFor or *ngIf) will affect/change the DOM structure.`.trim();\n\nconst multicasting = `\nvar source = Rx.Observable.from([1, 2, 3]);\nvar subject = new Rx.Subject();\nvar multicasted = source.multicast(subject);\n\n// These are, under the hood, 'subject.subscribe({ ...})':\nmulticasted.subscribe({\n  next: (v) => console.log('observerA: ' + v)\n});\nmulticasted.subscribe({\n  next: (v) => console.log('observerB: ' + v)\n});`.trim();\n\nconst changeDetector = `\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '\n  <button (click)='updateName()'>Update</button>\n  Welcome {{userValue.firstName}} - {{userValue.lastName}}\n  <div *ngFor=\"let str of myStrArr\">{{str}}</div>\n  <br/>\n  <p>onPush Stretgy</p>\n  <button (click)='onClick()'>onPush</button>\n  ',\n\n  changeDetection:ChangeDetectionStrategy.OnPush\n})\nexport class AppComponent {\n  title = '3_change_detection';\n  userValue:any;\n  myStrArr:any[]=[];\n\n  ngOnInit():void{\n    this.userValue = {\n      firstName:'Mukesh',\n      lastName:'Singh'\n    };\n  }\n\n  updateName(){\n    this.userValue.firstName='Rakesh';\n    console.log('default Stretgy')\n  }\n\n  onClick(){\n    this.myStrArr.push('onPush Stretgy')\n    console.log('onPush')\n  }\n}\n`.trim();\n\nconst viewChilds = `\n//salery.ts\n@Component({\n  selector: 'salery',\n  template: '{{msg}}:{{empSalery}}',\n  providers: [],\n})\nexport class Salery {\n  empSalery = 0;\n  msg = '';\n\n  saleryIncre() {\n    this.empSalery += 500;\n    this.msg = 'Incremented Salery';\n  }\n\n  saleryDecre() {\n    this.empSalery -= 500;\n    this.msg = 'Decremented Salery';\n  }\n}\n\n\n//app.component.ts\nimport { Component, ViewChild } from '@angular/core';\nimport { Salery } from './salery';\n\n@Component({\n  selector: 'app-root',\n  template: '\n    <button (click)=\"empIncreaseSalery()\">Inc</button>\n    <button (click)=\"empDecreSalery()\">Din</button>\n    <salery></salery>\n  ',\n})\nexport class AppComponent {\n  @ViewChild(Salery)\n  Salery!: Salery;\n\n  empIncreaseSalery() {\n    this.Salery.saleryIncre();\n  }\n\n  empDecreSalery() {\n    this.Salery.saleryDecre();\n  }\n}\n`.trim();\n\nconst viewChildsDir = `\n//salery.ts\n@Component({\n  selector: 'app-salery',\n  template: '<p>{{msg}}: {{empSalery}}</p>'',\n})\nexport class SaleryComponent {\n  empSalery=0;\n  msg='';\n  static saleryIncrement: any;\n\n  saleryIncrement(){\n      this.empSalery = this.empSalery + 500;\n      this.msg = \"Incremented Salery\"\n      console.log('Incremented');\n  }\n\n  saleryDec(){\n    this.empSalery = this.empSalery - 500;\n    this.msg = \"Decremented Salery\"\n  }\n}\n\n\n//employees.ts\nimport { Component, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\nimport { SaleryComponent } from '../salery/salery.component';\n\n@Component({\n  selector: 'app-employees',\n  template: '\n    <p appEmpdirective>ViewChild using Directive Employees</p>\n    <input type=\"text\" name=\"username\" #usernameRef /><br/>\n    <input type=\"text\" name=\"email\" #usernameRef />'\n  })\nexport class EmployeesComponent implements AfterViewInit {\n  \n  @ViewChild('usernameRef') usernameRef!: ElementRef;\n\n  ngAfterViewInit(): void {\n    this.usernameRef.nativeElement.focus();\n  }\n\n  incremented(){\n    // console.log('Incremented');\n  }\n\n  decremented(){\n    console.log('Decremented');\n  }\n}\n\n\n//empdirective.directive.ts\nimport { Directive, ElementRef, AfterViewInit } from '@angular/core';\n\n@Directive({\n  selector: '[appEmpdirective]'\n})\nexport class EmpdirectiveDirective implements AfterViewInit{\n\n  constructor(private eleRef:ElementRef) { }\n\n  ngAfterViewInit(): void {\n    this.eleRef.nativeElement.style.color=\"green\";\n  }\n}\n\n//app.ts\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '\n      <p>ViewChild using Directive</p>\n      <app-employees></app-employees>',\n  providers:[]\n})\n\nexport class AppComponent {\n  display=false;\n\n  employees = [\n    {\"name\":\"Mukesh\", \"salery\":10000},\n    {\"name\":\"Rakesh\", \"salery\":12000},\n    {\"name\":\"Nitesh\", \"salery\":15000},\n  ]\n}\n`.trim();\n\nconst viewChildsTemp = `\n//salery.ts\n@Component({\n  selector: 'app-salery',\n  template: '<p>{{msg}}: {{empSalery}}</p>'',\n})\nexport class SaleryComponent {\n  empSalery=0;\n  msg='';\n  static saleryIncrement: any;\n\n  saleryIncrement(){\n      this.empSalery = this.empSalery + 500;\n      this.msg = \"Incremented Salery\"\n  }\n\n  saleryDec(){\n    this.empSalery = this.empSalery - 500;\n    this.msg = \"Decremented Salery\"\n  }\n}\n\n\n//employees.ts\nimport { Component, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\n\n@Component({\n  selector: 'app-employees',\n  template: '\n    <p #customTitle>ViewChild using Directive Employees</p>\n    <input type=\"text\" name=\"uname\" #username><br/>\n    <input type=\"text\" name=\"email\" #uemail>/\n})\nexport class EmployeesComponent implements AfterViewInit {\n  @ViewChild('customTitle') customTitle!: ElementRef;\n  @ViewChild('username') username!: ElementRef;\n  @ViewChild('uemail') uemail!: ElementRef;\n\n  ngAfterViewInit(): void {\n      this.customTitle.nativeElement.style.color=\"blue\";\n      this.username .nativeElement.style.backgroundColor=\"pink\";\n      this.uemail.nativeElement.style.color=\"green\";\n  }\n}\n\n\n//empdirective.directive.ts\nimport { Directive, ElementRef, AfterViewInit } from '@angular/core';\n\n@Directive({\n  selector: '[appEmpdirective]'\n})\nexport class EmpdirectiveDirective implements AfterViewInit{\n\n  constructor(private eleRef:ElementRef) { }\n\n  ngAfterViewInit(): void {\n    this.eleRef.nativeElement.style.color=\"green\";\n  }\n}\n\n\n//app.ts\n@Component({\n  selector: 'app-root',\n  template: '\n      <p>ViewChild using Directive</p>\n      <app-employees></app-employees>',\n  providers:[]\n})\n\nexport class AppComponent {\n  display=false;\n\n  employees = [\n    {\"name\":\"Mukesh\", \"salery\":10000},\n    {\"name\":\"Rakesh\", \"salery\":12000},\n    {\"name\":\"Nitesh\", \"salery\":15000},\n  ]\n}\n`.trim();\n\nconst viewProviders = `\n//child.ts\nimport { EmpsaleryService } from '../empsalery.service';\n\n@Component({\n  selector: 'app-child',\n  providers:[EmpsaleryService],\n  viewProviders:[],\n  template: '\n    <p>Child Component</p>\n    <p>Child: {{randomSalery}}</p>\n  ',\n})\nexport class ChildComponent {\n  randomSalery:any;\n  constructor(private objSalery:EmpsaleryService){\n    this.randomSalery = objSalery.getRandomSalery();\n  }\n}\n\n\n//parent.ts\nimport { EmpsaleryService } from '../empsalery.service';\n\n@Component({\n  selector: 'app-parent',\n  providers:[],\n  viewProviders:[EmpsaleryService],\n  template: '\n    <p>Parent Component</p>\n    <p>Parent: {{randomSalery}}</p>\n    <app-child></app-child>\n  ',\n})\nexport class ParentComponent {\n  randomSalery:any;\n  constructor(private objSalery:EmpsaleryService){\n    this.randomSalery = objSalery.getRandomSalery();\n  }\n}\n\n\n//empsalery.service.ts\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmpsaleryService {\n  private randomSalery:any;\n  constructor(){\n    this.randomSalery=Math.floor(Math.random()*500);\n  }\n\n  getRandomSalery(){\n    return this.randomSalery;\n  }\n}\n\n\n//app.ts\nimport { Component } from '@angular/core';\nimport { EmpsaleryService } from './empsalery.service';\n\n@Component({\n  selector: 'app-root',\n  template: '\n      <p>viewProviders</p>\n      <p>randomSalery: {{randomSalery}}</p>\n      <app-parent></app-parent>\n      <br/>\n      <p>Child</p>\n      <app-parent>\n        <app-child></app-child>\n      </app-parent>\n  '',\n  providers:[]\n})\n\nexport class AppComponent {\n  randomSalery:any;\n  constructor(private objSalery:EmpsaleryService){\n    this.randomSalery = objSalery.getRandomSalery();\n  }\n}\n`.trim();\n\nconst reactiveforms = `\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-root',\n  template: '\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"form-group\">\n        <input type=\"text\" [ngClass]=\"{ 'is-invalid': submitted }\" />\n        <div *ngIf=\"submitted\">Enter text</div>\n      </div>\n\n      <button type=\"submit\">Register</button>\n    </form>\n  '',\n})\nexport class AppComponent implements OnInit {\n  form: any = FormGroup;\n  submitted = false;\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group({\n      name: ['', Validators.required],\n    });\n  }\n\n  onSubmit(): void {\n    this.submitted = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n  }\n}\n`.trim();\n\nconst formbuildes = `\n//FormGroup\nimport { FormGroup, FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-root',\n  template: '\n    <div [formGroup]=\"frmGroup\">\n      <input type=\"text\" formControlName=\"firstName\" /><br />\n      <input type=\"text\" formControlName=\"lastName\" />\n    </div>\n    <p>Is FormGroup Valid: {{ frmGroup.valid }}</p>\n  ',\n})\nexport class AppComponent {\n  name = 'Angular';\n  frmGroup = new FormGroup({\n    firstName: new FormControl('', []),\n    lastName: new FormControl('', []),\n  });\n\n  constructor() {\n    this.frmGroup.valueChanges.subscribe((val) => {\n      console.log(val.firstName);\n    });\n  }\n}\n\n\n//FormBuilder\nimport { FormGroup, FormBuilder } from '@angular/forms';\n\n@Component({\n  selector: 'app-root',\n  template: '\n    <form (ngSubmit)=\"save()\" [formGroup]=\"myGroup\">\n      FIRST NAME <input formControlName=\"firstName\" /> <br />\n      MIDDLE NAME <input formControlName=\"middleName\" /> <br />\n      LAST NAME<input formControlName=\"lastName\" />\n    </form>\n  ',\n})\nexport class AppComponent {\n  myGroup: any = FormGroup;\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.myGroup = this.fb.group({\n      firstName: 'Chethana',\n      middleName: [{ value: 'Dibbahalli', disabled: true }],\n      lastName: { value: 'DC', disabled: true },\n    });\n  }\n\n  save() {\n    console.log('Inside save' + this.myGroup.value);\n  }\n}\n\n`.trim();\n\nclass IntroAngulard extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Please explain the various features of Angular.</h3>\n              <ul>\n                <li>\n                  <b>Components: </b>Angular is a component-based framework,\n                  which means that applications are built by assembling\n                  components that represent different parts of the application's\n                  user interface. Components are reusable, self-contained, and\n                  can be easily combined to create complex user interfaces.\n                </li>\n                <br />\n                <li>\n                  <b>Templates: </b> Angular uses templates to define the user\n                  interface of a component. Templates are written in HTML and\n                  contain Angular-specific syntax that allows for data binding\n                  and other features.\n                </li>\n                <br />\n                <li>\n                  <b>Directives: </b>Angular provides a number of built-in\n                  directives that allow you to manipulate the DOM, add or remove\n                  elements, and apply conditional logic to your templates. You\n                  can also create custom directives to extend the functionality\n                  of Angular.\n                </li>\n                <br />\n                <li>\n                  <b>Services: </b>Services are used to provide functionality\n                  that can be shared across different components of an\n                  application. Services can be used for things like fetching\n                  data from a server, performing complex calculations, or\n                  managing state.\n                </li>\n                <br />\n                <li>\n                  <b>Dependency Injection: </b>Angular's dependency injection\n                  system allows you to easily manage dependencies between\n                  different components and services. Dependencies are injected\n                  into components and services through their constructors.\n                </li>\n                <br />\n                <li>\n                  <b>Routing: </b>Angular's routing system allows you to define\n                  routes for different parts of your application and navigate\n                  between them using URLs.\n                </li>\n                <br />\n                <li>\n                  <b>Forms: </b>Angular provides powerful support for building\n                  forms, including both template-driven and reactive forms. This\n                  includes features like form validation, form submission, and\n                  handling user input.\n                </li>\n                <br />\n                <li>\n                  <b>Observables: </b>Angular uses observables to handle\n                  asynchronous operations such as HTTP requests. Observables\n                  provide a way to work with asynchronous data streams in a more\n                  efficient and predictable way.\n                </li>\n                <br />\n                <li>\n                  <b>Testing: </b>Angular provides a number of tools and\n                  utilities for testing your application, including both unit\n                  tests and end-to-end tests. This includes features like the\n                  Angular testing library and the Protractor testing framework.\n                </li>\n                <br />\n                <li>\n                  <b>Mobile Support: </b>Angular provides support for building\n                  mobile applications using technologies like Ionic and\n                  NativeScript.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>\n                2. What is difference between package.json and\n                package-lock.json.\n              </h3>\n              <ul>\n                <li>\n                  <b>package.json: </b>This file is used to define the dependencies and other metadata of an application. It contains information about the application, such as its name, version, author, and dependencies required for the application to run. When you install a package using npm or yarn, the dependencies are listed in package.json.\n                </li>\n                <br/>\n                <li>\n                  <b>package.lock.json: </b>This file is used to keep track of the exact version of every package and its dependencies that are installed in an application. It is automatically generated by npm or yarn when a new package is installed or updated. The package-lock.json file ensures that the exact same version of a package and its dependencies are installed on all machines running the application. This helps to avoid dependency conflicts and ensures that the application runs consistently across different environments.\n\n\n                </li>\n              </ul>\n              <br />\n              <h3>3. What are the building blocks of Angular?</h3>\n              <ul>\n                <li>Components</li>\n                <li>Data Binding</li>\n                <li>Dependency Injection (DI)</li>\n                <li>Directives</li>\n                <li>Metadata(decorators are used)</li>\n                <li>Modules</li>\n                <li>Routing</li>\n                <li>Services</li>\n                <li>Template</li>\n              </ul>\n              <br />\n              <h3>4. What is metadata</h3>\n              Metadata, Annotation and Decorator is same thing.\n              <br />\n              <ul>\n                <li>\n                  Decorator accept object. decorator are simply functions that\n                  return functions. decorator are invoke at runtime. decorator\n                  allows you to excuite functions.\n                </li>\n              </ul>\n              <br />\n              Metadata is used to decorate a class so that it can configure the\n              expected behavior of the class. There are four main types of\n              decorators:\n              <ul>\n                <li>\n                  <b>Class decorators</b>, @Component, @NgModule, @Injectable,\n                  @Directive, @Pipes.\n                </li>\n                <li>\n                  <b>Property decorators for properties inside classes</b>,\n                  @Input, @Output, @HostBinding, @ContentChild,\n                  @ContentChildren, @ViewChild, @ViewChildren.\n                </li>\n                <li>\n                  <b>Method decorators for methods inside classes</b>,\n                  @HostListener.\n                </li>\n                <li>\n                  <b>\n                    Parameter decorators for parameters inside class\n                    constructors\n                  </b>\n                  , @Inject, @Self, @SkipSelf, @Optional.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <ul>\n                <li>\n                  <b>@HostBinding: </b>Set the properties on the element/\n                  component that hosts the directive.\n                </li>\n                <li>\n                  <b>@HostListener: </b>This is a function decorator that\n                  accepts an event name as a argument. When that event gets\n                  fired on the host element it calls the associate function.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={hostBinding}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <br />\n              <b>i. Method decorators: </b>Used for methods inside classes, e.g.\n              @HostListener\n              <ul>\n                <li>\n                  Function decorator allows us to handle event of the host\n                  element in the directive class.\n                </li>\n                <li>\n                  It lets us to listen for event on host element/ component.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={hostListener}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>ii. Parameter decorators: </b>Used for parameters inside class\n              constructors, e.g. @Inject, Optional.\n              <br />\n              <br />\n              Inject() function provide another way to inject our services as\n              dependency in various part of angular application.\n              <br />\n              It introduced in angular 14.\n              <div style={titles}>\n                <PrismCode\n                  code={parameters}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>5. Explain Components, Modules and Services in Angular.</h3>\n              <b>i. Modules </b>\n              Is logical grouping of components, directives, pipes or services.\n              To define a module, we use the NgModule.\n              <ul>\n                <li>Default module is app.module.ts.</li>\n                <li>We can includes a module inside another module.</li>\n                <li>\n                  A module have at least one component. components declared\n                  inside \"declarations\" in module. while module inside \"imports\"\n                  in app.module.ts.{\" \"}\n                </li>\n                <li>\n                  We can import a module and use inside another module. For\n                  injecting a module we use, exports:[ComponentName].\n                </li>\n                <li>\n                  Every module is defined with a <b>@NgModule</b> decorator.\n                </li>\n                <li>\n                  Angular apps are modular and Angular has its own modularity\n                  system called NgModules.\n                </li>\n                <li>\n                  A component cannot be import in two diffrent modules. If do\n                  than show runtime error. this is features module.\n                </li>\n              </ul>\n              By default, modules are of two types:\n              <ul>\n                <li>\n                  <b>Root Module: </b>\n                </li>\n                <li>\n                  <b>Feature Module: </b>Every application can have only one\n                  root module whereas, it can have one or more feature modules.\n                  <ol>\n                    <li>A root module imports BrowserModule,</li>\n                    <li>whereas a feature module imports CommonModule.</li>\n                  </ol>\n                </li>\n              </ul>\n              <br />\n              <b>Frequently Used NgModule:</b>\n              <br />\n              <ul>\n                <li>\n                  <b>BrowserModule :</b>When run your app in a browser.\n                </li>\n                <li>\n                  <b>CommonModule :</b>When use NgIf, NgFor.\n                </li>\n                <li>\n                  <b>FormsModule :</b>When build template driven forms (includes\n                  NgModel).\n                </li>\n                <li>\n                  <b>ReactiveFormsModule :</b>When build reactive forms.\n                </li>\n                <li>\n                  <b>RouterModule :</b>When use RouterLink, .forRoot(),\n                  .forChild().\n                </li>\n                <li>\n                  <b>HttpClientModule :</b>When talk to a server.\n                </li>\n              </ul>\n              <br />\n              <h3>iii. Services </h3>\n              <ul>\n                <li>\n                  Are a greate way to share information among classes that don't\n                  know each other.\n                </li>\n                <li>\n                  Are basically a classes which may have some data, property or\n                  some functions. And we can use these data,property and\n                  functions in multiple files.\n                </li>\n                <li>\n                  Services are objects which get instantiated only once during\n                  the lifetime of an application.{\" \"}\n                </li>\n                <li>Services can depend on other services.</li>\n              </ul>\n              <br />A service is defined using a <b>@Injectable</b> decorator. A\n              function defined inside a service can be invoked from any\n              component or directive.\n              <br />\n              <br />\n              <b>providedIn: </b>Property is used to declare the provider scope\n              of a service and is a shortcut for specifying the service in the\n              providers.\n              <br />\n              It provides a more concise way of specifying the scope of a\n              service in Angular, making it easier to manage the services in\n              your application.\n              <div style={titles}>\n                <PrismCode\n                  code={makeServices}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>6. What are directives: @directive</h3>\n              <ul>\n                <li>\n                  Directives are used to extend the power of the HTML attributes\n                  and to change the appearance or behavior of a DOM element.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <b>\n                Elements which change the appearence/ behavior of the DOM\n                element. 3 types of Directives.\n              </b>\n              <ul>\n                <li>\n                  <b>Component Directives:</b>\n                  <ul>\n                    <li>\n                      Components is the special kind of directives, Becouse we\n                      have the template varriables.\n                    </li>\n                    <li>Directives with own Template.</li>\n                    <li>\n                      with the help of selector, @Component which is a decorator\n                      function is used to create a component directive.\n                    </li>\n                  </ul>\n                </li>\n                <br />\n                <li>\n                  <b>Structural Directives:</b>\n                  <ul>\n                    <li>Do manipulation in DOM.</li>\n                    <li>\n                      Structural directive modifies or manipulates the structure\n                      of DOM by adding or removing DOM elements. it works on the\n                      structure of a DOM.\n                    </li>\n                    <li>\n                      Structural directives which have a * sign before the\n                      directive. *ngIf and *ngFor.\n                    </li>\n                  </ul>\n                </li>\n                <br />\n                <li>\n                  <b>Attribute Directives/ Behavioral Directives:</b>\n                  <ul>\n                    <li>Do css related things.</li>\n                    <li> Change appearence/ behavior of the DOM.</li>\n                    <li>\n                      Attribute directives deal with the changing of look and\n                      behavior of the DOM element, component or another\n                      directive. Ex. NgStyle\n                    </li>\n                  </ul>\n                </li>\n                <br />\n                By default, angular provide two attribute directives\n                <br />\n                <b>1. NgClass: </b>dynamically, add or remove CSS class on the\n                basis of the certain conditions.\n                <br />\n                <br />\n                Allows us to set the CSS class dynamically for a DOM element. we\n                can use ngClass with string, array, object or component method.\n                <br />\n                <br />\n                <div style={titles}>\n                  <PrismCode\n                    code={NgClass}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n              </ul>\n              <br />\n              <br />\n              <b>2. NgStyle: </b>dynamically, add or remove styles on the basis\n              of the certain conditions.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={NgStyles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Custom directive ex. are with *ngIf, *ngFor...</b>\n              <br />\n              <i>ng g directive mydirective</i>\n              <div style={titles}>\n                <PrismCode\n                  code={customDir}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                7. What is difference between attribute and structural\n                directives?\n              </h3>\n              Attribute directives modify the appearance or behavior of DOM\n              elements. Structural directives add or remove elements from the\n              DOM.\n              <br />\n              <h3>8. What are template expressions</h3>\n              <ul>\n                <li>\n                  Template expressions are computations/ assignments done in the\n                  template inside the interpolation curly braces.\n                </li>\n                <li>\n                  In interpolation syntax, the template expression is surrounded\n                  by double curly braces.\n                </li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={templateExpree}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>9. What are template statements</h3>A template is an HTML\n              snippet that tells Angular how to render the component in angular\n              application.\n              <div style={titles}>\n                <PrismCode\n                  code={templateState}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n                <br />\n                <b>N: </b>Component send data to Template by using Promises\n                binding or Interpolation.\n              </div>\n              <br />\n              <h3>10. What is Data Binding? How many ways it can be done?</h3>\n              In order to connect application data with the DOM, data binding is\n              used. It happens between the template and component. There are 3\n              ways to achieve data binding:\n              <ul>\n                <li>\n                  Interpolation / String Interpolation (one-way data binding)\n                </li>\n                <li>\n                  <b>Event Binding: </b>one-way data binding.\n                </li>\n                <li>\n                  <b>Property Binding: </b>one-way data binding.\n                </li>\n                <li>\n                  <b>Two-way Binding: </b>Changes made in the application state\n                  gets automatically reflected in the view and vice-versa. The\n                  ngModel directive is used for achieving this type of data\n                  binding.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <b>Data binding Forms:</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={databinding}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <ul>\n                <li>Component to view</li>\n                <li>View to component</li>\n                <li>Two way sequence: view to component to view</li>\n              </ul>\n              <br />\n              <br />\n              <b>Property binding: </b>Means passing data from the component and\n              to the template. Use square bracket.\n              <br />\n              <ul>\n                <li>\n                  We can also use string and non-string data in property\n                  binding.\n                </li>\n\n                <li>Interpolation use only string data.</li>\n                <li>in property binding can't use string concatnation.</li>\n                <li>It set a property to view element.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={property}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Event Binding: </b>\n              <br />\n              <b>String interpolation: </b>Refer to the special type of syntax\n              that makes use of template expressions to display component data.\n              Such variables are enclised within doubly curly braces.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={evtBinding}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Two-way data binding:</b>\n              <ul>\n                <li>\n                  It's a process that gives component a way to share data\n                  between the component class and its template. If the data is\n                  changed in one place it will automatically change the data at\n                  other end.\n                </li>\n                <li>\n                  Two-way binding commonly used to listen for events and updates\n                  values between parent and child component.\n                </li>\n                <li>mainly used in the input field or form.</li>\n                <li>\n                  it's combination of both property binding and event binding.\n                </li>\n                <li>binding using [(ngModel)] Directive. </li>\n                <li>\n                  ngModel Directive which combines the square bracket of\n                  property binding with parentheses of event binding in a single\n                  notation.\n                </li>\n              </ul>\n              <br />\n              <b>\n                To use ngModel Directive we should import FormsModule in\n                app.module.ts file.\n              </b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={twoWay}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                12. What are the differences between Component and Directive\n              </h3>\n              <table>\n                <tr>\n                  <th>Component</th>\n                  <th>Directive</th>\n                </tr>\n                <tr>\n                  <td>\n                    To register a component we use @Component meta-data\n                    annotation\n                  </td>\n                  <td>\n                    To register directives we use @Directive meta-data\n                    annotation\n                  </td>\n                </tr>\n                <tr>\n                  <td>Components are typically used to create UI widgets</td>\n                  <td>\n                    Directive is used to add behavior to an existing DOM element\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    Component is used to break up the application into smaller\n                    components\n                  </td>\n                  <td>Directive is use to design re-usable components</td>\n                </tr>\n                <tr>\n                  <td>Only one component can be present per DOM element</td>\n                  <td>Many directives can be used per DOM element</td>\n                </tr>\n              </table>\n              <br />\n              <h3>13. Dependency Injection</h3>\n              <ul>\n                <li>\n                  is a technique where one object supplies the dependencies of\n                  another object. A dependency is an object that can be used\n                  service.\n                </li>\n                <li>\n                  it's a codding pattern in which classes recive their\n                  dependencies from external sources rather than creating them\n                  itself.\n                </li>\n              </ul>\n              <br />\n              Consider two classes, A and B. Let’s assume that class A uses the\n              objects of class B. Normally, in OOPS, an instance of class B is\n              created so that class A can access the objects. Using DI, we move\n              the creation and binding of the dependent objects outside of the\n              class that depend on them.\n              <br />\n              <br />\n              Typically, there are three types of classes, they are:\n              <ul>\n                <li>\n                  <b>Client Class: </b>This is the dependent class, which\n                  depends on the service class.{\" \"}\n                </li>\n                <li>\n                  <b>Service Class: </b>Class that provides the service to the\n                  client class.\n                </li>\n                <li>\n                  <b>Injector Class: </b>njects the service class object into\n                  the client class.{\" \"}\n                </li>\n              </ul>\n              <br />\n              <img\n                src={Graphs}\n                alt=\"DeadLock\"\n                className=\"responsive\"\n                style={redesign}\n              />\n              <br />\n              <br />\n              <b>There are three types of Dependency Injections in Angular </b>\n              <ul>\n                <li>\n                  <b>Constructor injection: </b>It provides the dependencies\n                  through a class constructor.\n                </li>\n                <li>\n                  <b>Setter injection: </b>The client uses a setter method into\n                  which the injector injects the dependency.\n                </li>\n                <li>\n                  <b>Interface injection: </b>The dependency provides an\n                  injector method that will inject the dependency into any\n                  client passed to it. On the other hand, the clients must\n                  implement an interface that exposes a setter method that\n                  accepts the dependency.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <b>Advantages </b>\n              <ul>\n                <li>Dependency Injection helps in Unit testing.</li>\n                <li>Extending the application becomes more manageable.</li>\n                <li>\n                  It helps to enable loose coupling, which is essential in\n                  application programming.{\" \"}\n                </li>\n              </ul>\n              <br />\n              <br />\n              <b>The Drawbacks of not using Dependency Injection </b>\n              <br />\n              Consider a Postal details class that is dependent on the Number\n              and the Address class.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={postals}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              In the PostalDetails class, the constructor creates copies of the\n              Number and address. So when you instantiate a new PostalDetails\n              class, the constructor instantiates a unique number and address.\n              <br />\n              <br />\n              Although this looks simple, there’s a problem with this code.\n              Let’s assume that the Number and Address classes’ constructors now\n              accept parameters.\n              <div style={titles}>\n                <PrismCode\n                  code={postalsparams}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              When we change the Number class, the PostalDetails class is\n              broken. To overcome this, we need to pass in a parameter to the\n              Number constructor. This applies to the Address class as well.\n              <br />\n              <br />\n              <ul>\n                <li>\n                  The first drawback is that the code is not flexible. Any time\n                  the dependencies change, the PostalDetails class needs to be\n                  changed as well.\n                </li>\n                <li>\n                  The second drawback is that this code is not suitable for\n                  testing. Anytime you instantiate a new PostalDetails class,\n                  you get the same Number and Address. Even if you change the\n                  Number and Address classes, what if these classes, in turn,\n                  have dependencies?\n                </li>\n              </ul>\n              <br />\n              As a result, we are not in control of the code, and here’s where\n              Dependency Injection comes into the picture.\n              <br />\n              <br />\n              DI is a coding pattern where a class receives its dependencies\n              from an external source rather than creating them itself.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={impdi}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              In the above example, we have moved the definition of the\n              dependencies from inside the constructor to the constructor’s\n              parameters. So the PostalDetails class doesn’t create the\n              dependencies anymore. It just consumes them. The creation of those\n              dependencies is external to this class, and by doing so, we now\n              solve both the drawbacks.\n              <br />\n              <h3>16. What is the use of httpInterceptor Class?</h3>\n              The Angular Interceptor helps us to modify the HTTP Request by\n              intercepting it before the Request is sent to the back end. It can\n              also modify the incoming Response from the back end. The\n              Interceptor globally catches every outgoing and in coming request\n              at a single place.\n              <br />\n              <br />\n              <h3>17. HttpClient</h3>\n              and import HttpClientModule as imports: [BrowserModule,\n              HttpClientModule] in app.module.ts file.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={httpClients}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>\n                17. What is the difference between template driven form and\n                reactive based approach?\n              </h3>\n              <b>\n                import FormsModule and Reactiveforms Module in Angular to use\n                [(ngModel)] and reactive forms respectively.\n              </b>\n              <ul>\n                <li>\n                  Template-driven forms are asynchronous in nature, whereas\n                  Reactive forms are mostly synchronous.\n                </li>\n                <li>\n                  In a template-driven approach, most of the logic is driven\n                  from the template, whereas in reactive-driven approach, the\n                  logic resides mainly in the component or typescript code.\n                </li>\n              </ul>\n              <br />\n              <h3>49. Two ways to collect and validate data from users</h3>\n              <b>1. Template-driven forms:</b>\n              <ul>\n                <li>\n                  Everythings which we are going to use in an application is\n                  defined into the template that are defining\n                </li>\n                <li>Along with a component.</li>\n                <li>To use it we need to import FormsModule in application.</li>\n              </ul>\n              <br />\n              <b>2. Model-driven forms (Reactive forms)</b>\n              <ul>\n                <li>\n                  The model which is created in .ts file is responsible for\n                  handling all the user interactions/ validations. For this\n                  first need to create the model using Angular unbuilt classes\n                  like formGroup and formControl and then, we need to bind the\n                  model to HTML form.\n                </li>\n                <li>\n                  As we create the form controls directly in the component, it\n                  makes easier to push data between the data models and UI\n                  elements.{\" \"}\n                </li>\n              </ul>\n              <br />\n              <b>import 'ReactiveFormsModule' in app.module.ts file</b>\n              <div style={titles}>\n                <PrismCode\n                  code={reactiveforms}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>statusChanges():</b>\n              <br />\n              is a property of AbstractControl that emits an event every time\n              when the validations status of the control is recalculated.\n              <br />\n              statusChanges property is available in formControl, FormArray and\n              formGroup classes because they inherit AbstractControl class.\n              <br />\n              <br />\n              <h3>\n                3. What is the difference between FormBuilder and FormControl?\n              </h3>\n              <ul>\n                <li>\n                  A reactive form is a FormGroup that is made up of\n                  FormControls.\n                </li>\n                <li>\n                  FormBuilder is the class that is used to create both\n                  FormGroups and FormControls.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <b>The FormBuilder class has 3 methods: </b>\n              <ol>\n                <li>control()</li>\n                <li>group()</li>\n                <li>array()</li>\n              </ol>\n              <br />\n              <b>FormBuilder avoids using new FormControl in FormGroup.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={formbuildes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>18. What is the difference between forChild and forRoot? </h3>\n              In Angular, forRoot and forChild are two methods provided by the\n              RouterModule to configure and register routes for the application.\n              <table>\n                <tr>\n                  <th>forRoot</th>\n                  <th>forChild</th>\n                </tr>\n                <tr>\n                  <td>\n                    Used in the root module of the application (i.e.,\n                    AppModule).\n                  </td>\n                  <td>\n                    Used in child modules that are imported by the root module.\n                  </td>\n                </tr>\n                <br />\n                <tr>\n                  <td>\n                    Used to create and configure the router service in the root\n                    module of the application. It should only be called once, in\n                    the AppModule.\n                  </td>\n                  <td>\n                    Used to create and configure the router service in child\n                    modules that are imported by the AppModule. It can be called\n                    multiple times.\n                  </td>\n                </tr>\n                <br />\n                <tr>\n                  <td>\n                    Provides the primary router configuration for the\n                    application, including the main router outlet, the base\n                    href, and any primary routes.\n                  </td>\n                  <td>\n                    Adds additional routes and configuration to an existing\n                    router configuration.\n                  </td>\n                </tr>\n                <br />\n                <tr>\n                  <td>\n                    Registers the router service as a singleton instance in the\n                    application's root injector, making it available throughout\n                    the application.{\" \"}\n                  </td>\n                  <td>\n                    Registers the router service as a provider in the child\n                    module's injector, making it available only to that module\n                    and its children.\n                  </td>\n                </tr>\n              </table>\n              <br />\n              <br />\n              <img\n                src={formroot}\n                alt=\"DeadLock\"\n                className=\"responsive\"\n                style={redesign}\n              />\n              <br />\n              <h3>19. What is Interceptor.</h3>\n              Is a medium connecting the backend and front-end applications.\n              Whenever a request is made, the interceptors handle it in between.\n              They can also identify the response by performing Rxjs operators.\n              The interceptors do not initiate the handle method and handle the\n              requests at their level.\n              <br />\n              <h3>\n                20. Can you explain the concept of scope hierarchy in Angular?\n              </h3>\n              <ul>\n                <li>\n                  Angular organizes the $scope objects into a hierarchy that is\n                  typically used by views. It has a root scope that can further\n                  contain one or several scopes called child scopes.\n                </li>\n                <li>In a scope hierarchy, each view has its own $scope.</li>\n                <li>\n                  The scope in Angular binds the HTML and the JavaScript. It as\n                  expected is an object with the available methods and\n                  properties. The scope is available for both the view and the\n                  controller.\n                </li>\n              </ul>\n              <br />\n              <h3>21. What is zone</h3>\n              Zone. js is a api or set of programs which is used by angular to\n              update the application view when any change occurred.\n              <br />\n              <b>Ex.: </b>Events, XMLHttpRequests and Timers(setTimeout(),\n              setInterval()) etc.\n              <br />\n              <h3>\n                22. What is ViewEncapsulation and how many ways are there to do\n                it in Angular?\n              </h3>\n              ViewEncapsulation determines whether the styles defined in a\n              particular component will affect the entire application or not.\n              Angular supports 3 types of ViewEncapsulation:\n              <ul>\n                <li>\n                  <b>Emulated: </b>Styles used in other HTML spread to the\n                  component\n                </li>\n                <li>\n                  <b>Native: </b>Styles used in other HTML doesn’t spread to the\n                  component\n                </li>\n                <li>\n                  <b>None: </b>Styles defined in a component are visible to all\n                  components of the application\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>24. What is the use of Bazel in Angular 8.</h3>\n              <ul>\n                <li>\n                  It provides a platform to make back-end and front-end services\n                  with the same tool.\n                </li>\n                <li>\n                  It allows us to build CLI applications quickly and easily.\n                </li>\n                <li>\n                  The entirety of the Angular framework is built on Bazel and it\n                  allows us to divide an application into various build units\n                  which are defined at the NgModule level.\n                </li>\n                <li>\n                  It supports customization and also facilitates us to draw\n                  graphs. We can use these graphs to easily identify the\n                  essential information.\n                </li>\n              </ul>\n              <br />\n              <h3>25. Why we should use Bazel for Angular builds</h3>\n              <ul>\n                <li>\n                  The initial build time with Bazel will be comparable to the\n                  traditional JavaScript tooling. the difference is that the\n                  time will not grow exponentially when our application’s size\n                  increases. With Bazel most of the time the build time will\n                  stay constant.\n                </li>\n                <li>\n                  Bazel rebuilds only the packages which have changed and\n                  nothing else.\n                </li>\n              </ul>\n              <br />\n              <h3>26. Interface Vs. Model Class</h3>\n              <b>Interface</b>\n              <ul>\n                <li>\n                  An interface is a named shape/structure of related properties\n                  & methods that describe an object, but neither provides\n                  implementation nor initialisation for them.\n                </li>\n                <li>\n                  Interfaces are compile time to check strongly-typed data.\n                </li>\n                <li>\n                  An Interface exists only for developers convenience and are\n                  not used by angular at run time, They get removed when\n                  transpiling down to JS, so they take up no space.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <b>Model Class</b>\n              <ul>\n                <li>\n                  A model class is a blueprint that contains properties & method\n                  and also can provide implementation of something and\n                  instantiated using new keyword, unlike just a named shape.\n                </li>\n                <li>\n                  Classes are compile time, additional, can be used during\n                  runtime as well.\n                </li>\n                <li>\n                  A Class transpiled into its ES5-compatible function form and\n                  corresponding It generates JS code which persists in final\n                  JavaScript output, hence this take up space in memory.\n                </li>\n              </ul>\n              <br />\n              <br />\n              <h3>28. What is State function</h3>\n              Angular's state() function is used to define different states to\n              call at the end of each transition. This function takes two\n              arguments:\n              <ul>\n                <li>A unique name like open or closed.</li>\n                <li>\n                  <b>A style() function: </b>The style function is used to\n                  define a set of styles to associate with a given state name.\n                  You need to use it along with state() function to set CSS\n                  style attributes.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={stateFun}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>29. What is transition function</h3>\n              <ul>\n                <li>\n                  The animation transition function is used to specify the\n                  changes that occur between one state and another over a period\n                  of time. It accepts two arguments:\n                </li>\n                <ul>\n                  <li>\n                    First argument accepts an expression that defines the\n                    direction between two transition states.\n                  </li>\n                  <li>Second argument accepts an animate() function.</li>\n                </ul>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={transition}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>30. Pipes</h3>\n              <ul>\n                <li>\n                  A pipe takes in data as input and transforms it to a desired\n                  output.{\" \"}\n                </li>\n                <li>\n                  Using pipe operator (|), we can apply the pipe's features to\n                  any of property in app.\n                </li>\n                <li>\n                  Pipes used to transform the data before displaying it in a\n                  browser. Even we can create custom pipes.\n                </li>\n                <br />\n                <li>\n                  <b>Parameterize Pipes:</b> we can pass any number of\n                  Parameters to the pipe using colon (:).\n                </li>\n                <li>Mutiple Pipes</li>\n                <li>Pipes with string</li>\n              </ul>\n              <br />\n              <b>Ex. </b>DatePipe, UpperCasePipe, LowerCasePipe, CurrencyPipe,\n              and PercentPipe.\n              <br />\n              Let us take a pipe to transform a component's birthday property\n              into a human-friendly date using date pipe.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={pipeFor}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Steps to create custom pipe: </b>\n              <ol>\n                <li>Creates a TypeScript class.</li>\n                <li>Decorate the class with \"@Pipe\" decorator.</li>\n                <li>Implements PipeTransform interface in TypeScript class.</li>\n                <li>Override the transform() method.</li>\n                <li>Configure the class with @NgModule.</li>\n              </ol>\n              <br />\n              <h3>31. What is a parameterized pipe</h3>\n              The parameterized pipe can be created by declaring the pipe name\n              with a colon ( : ) and then the parameter value.\n              <br />\n              <b>Ex. </b>Let's take a birthday example with a particular\n              format(dd/MM/yyyy):\n              <div style={titles}>\n                <PrismCode\n                  code={paraPipes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <b>\n                N: The parameter value can be any valid template expression,\n                such as a string literal or a component property.\n              </b>\n              <br />\n              <h3>32. How do you chain pipes</h3>\n              Let's take a birthday property which uses date pipe(along with\n              parameter) and uppercase pipes as below.\n              <div style={titles}>\n                <PrismCode\n                  code={chainPipe}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>33. Pure and Impure Pipes</h3>\n              <table>\n                <tr>\n                  <th>Pure Pipe</th>\n                  <th>Impure Pipe</th>\n                </tr>\n                <tr>\n                  <td>\n                    Based on the i/p state the o/p state can be determine.\n                  </td>\n                  <td>\n                    If the o/p can't be determined from i/p state or has an\n                    internal/ external state involved.\n                  </td>\n                </tr>\n                <tr>\n                  <td>i/p params determine the o/p.</td>\n                  <td>i/p params can't determine o/p.</td>\n                </tr>\n                <tr>\n                  <td>\n                    Angular calls the pipe transform function only if i/p\n                    parameters are change.\n                  </td>\n                  <td>\n                    Angular call the transform function, even if i/p parameters\n                    are not changed.\n                  </td>\n                </tr>\n                <tr>\n                  <td>Deterministic</td>\n                  <td>Non-Deterministic</td>\n                </tr>\n                <tr>\n                  <td>\n                    If i/p not change than o/p is same in that case, Does not\n                    run on every change detection cycle.\n                  </td>\n                  <td>Runs on every change detection cycle.</td>\n                </tr>\n                <tr>\n                  <td>\n                    Does not perform on any side-effect, and hold immutability.\n                  </td>\n                  <td>Perform on side-effect</td>\n                </tr>\n              </table>\n              <br />\n              <h3>34. What is the purpose of async pipe</h3>\n              The AsyncPipe subscribes to an observable or promise and returns\n              the latest value it has emitted. When a new value is emitted, the\n              pipe marks the component to be checked for changes.\n              <br />\n              <br />\n              Let's take a time observable which continuously updates the view\n              for every 2 seconds with the current time.\n              <div style={titles}>\n                <PrismCode\n                  code={purpose}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>35. Change Detection:</h3>\n              <ul>\n                <li>Means updating the DOM every time the data is changed.</li>\n                <li>\n                  When modifying any of the models, Angular detects the changes\n                  and updates the views immediately. The purpose of this\n                  mechanism is to ensure that the underlying views are always\n                  synchronized with their corresponding models.\n                </li>\n              </ul>\n              <br />\n              <b>Angular provides two strategies for Change Detection:</b>\n              <br />\n              <b>1. default strategy:</b>\n              <br />\n              Every time you put or edit any data, Angular will run the change\n              detector to update the DOM.\n              <br />\n              <br />\n              <b>2. onPush strategy:</b>\n              <ul>\n                <li>\n                  Angular will only run change detector when new reference is\n                  passed to <b>@Input</b> data.\n                </li>\n                <br />\n                <li>\n                  With onPush, the component depends only on its inputs and\n                  covers immutability, the change detection strategy will be\n                  activated when:\n                  <ul>\n                    <li>The input reference changes;</li>\n                    <li>\n                      An event originating from the member or one of his\n                      children;\n                    </li>\n                    <li>\n                      Execute change detection explicitly{\" \"}\n                      <b>(componentRef.markForCheck ());</b>\n                    </li>\n                    <li>Use the async pipe in the view.</li>\n                  </ul>\n                </li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={changeDetector}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <ul>\n                <li>\n                  In the onPush strategy, Angular only performs the change\n                  detector when a new reference to the data of @Input() is\n                  passed.\n                </li>\n              </ul>\n              <ul>\n                <li>\n                  Change Detection Mechanism-moves only forward and never looks\n                  back, starting from the root component to the last. Each\n                  component points to a child, but the child does not point to a\n                  parent. One-way flow eliminates the need for a{\" \"}\n                  <b>$digest loop</b>.\n                </li>\n              </ul>\n              <br />\n              <h3>\n                48. How many Change Detectors can there be in the whole\n                application?\n              </h3>\n              Each component has its own ChangeDetector. All Change Detectors\n              are inherited from AbstractChangeDetector.\n              <br />\n              <br />\n              <h3>36. ViewProvider</h3>\n              <p>\n                viewProviders property allows us to make providers available\n                only for the component’s view. When we want to use a class in\n                our component that is defined outside the @Component ()\n                decorator function, then, first of all, we need to inject this\n                class into our component, and we can achieve this with the help\n                of the \"viewProvider\" property of a component.\n              </p>\n              <div style={titles}>\n                <PrismCode\n                  code={viewProviders}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>37. ViewChild</h3>\n              ViewChild is a decorator for Angular component variables, which\n              allow to bind child component data and method.\n              <br />\n              <ul>\n                <li>\n                  There may be situation where we want to access a directive,\n                  child component or a DOM element from a parent component\n                  class. @ViewChild decorator returns the first element that\n                  matches a give directive, component or template.\n                </li>\n              </ul>\n              <b>ViewChild using Component</b>\n              <div style={titles}>\n                <PrismCode\n                  code={viewChilds}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>ViewChild using Directive</b>\n              <div style={titles}>\n                <PrismCode\n                  code={viewChildsDir}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>ViewChild using Template</b>\n              <div style={titles}>\n                <PrismCode\n                  code={viewChildsTemp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              Use @ViewChild with ElementRef or TemplateRef.\n              <br />\n              <h3>Dynamically Load Component</h3>\n              <ul>\n                <li>\n                  Dynamic components are the components in which components\n                  location in the application is not defined at build time.i.e,\n                  They are not used in any angular template. But the component\n                  is instantiated and placed in the application at runtime.\n                </li>\n                <br />\n                <li>\n                  Mainly, in the component template, a component is loaded using\n                  the component selector at angular compile time. The component\n                  can also be loaded dynamically at runtime with the help of\n                  <b>ComponentFactory, ComponentFactoryResolver</b>, and{\" \"}\n                  <b>ViewContainerRef</b>.\n                </li>\n                <br />\n                <li>\n                  Those components which need to be loaded dynamically must also\n                  be configured in <b>entryComponents</b>\n                  metadata of @NgModule decorator. To load a dynamic component\n                  in a template we required an insert location and to get it we\n                  need <b>ViewContainerRef</b> of a decorator or a component.\n                </li>\n                <br />\n                <li>\n                  ComponentFactory is used to create an instance of components\n                  where ComponentFactoryResolver resolves a ComponentFactory for\n                  a particular component. It is used as follows.\n                </li>\n                <b>\n                  let componentFactory =\n                  this.componentFactoryResolver.resolveComponentFactory(component);\n                </b>\n              </ul>\n              <br />\n              <h3>38. ViewContainerRef</h3>\n              <ul>\n                <li>\n                  ViewContainerRef represents a container where we can attach\n                  one or more views to a component and also show an API to\n                  create components. Some important methods of ViewContainerRef\n                  are:\n                  <ul>\n                    <li>createEmbeddedView()</li>\n                    <li>clear()</li>\n                    <li>get()</li>\n                    <li>insert()</li>\n                    <li>move()</li>\n                    <li>createComponent()</li>\n                  </ul>\n                </li>\n                <br />\n\n                <li>\n                  <b>CreateEmbeddedView()</b> instantiates an embedded view and\n                  inserts it into container.\n                </li>\n                <li>\n                  <b>createComponent()</b> instantiates a single component and\n                  inserts its host view into the container at a specified index.\n                </li>\n              </ul>\n              <br />\n              In dynamic component loader, load component using\n              createComponent() of ViewContainerRef.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={ViewContainerRef}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              clear() method of ViewContainerRef destroys all existing views in\n              the container.\n              <br />\n              <h3>39. What is ng-template in Angular?</h3>\n              <ul>\n                <li>\n                  <b>ng-template:</b> Is an Angular element that is used for\n                  rendering HTML in a template. However, it is not rendered\n                  directly on DOM. If you include an ng-template tag to a\n                  template, the tag and the content inside it will be replaced\n                  by comment upon render.\n                </li>\n                <br />\n                <li>\n                  <b>ng-container: </b>Allows us to create a section in a\n                  template without introducing a new HTML element. The\n                  ng-container does not render in the DOM, but content inside it\n                  is rendered. ng-container is not a directive, component, class\n                  or interface, it just a syntax element.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={template}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>40. What is the purpose of any type cast function</h3>\n              You can disable binding expression type checking using $any() type\n              cast function.\n              <div style={titles}>\n                <PrismCode\n                  code={typeFunc}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>41. What is Non null type assertion operator</h3>\n              You can use the non-null type assertion operator to suppress the\n              Object is possibly 'undefined' error.\n              <br />\n              <br />\n              In the following example, the user and contact properties are\n              always set together, implying that contact is always non-null if\n              user is non-null. The error is suppressed in the example by using\n              contact!.email.\n              <div style={titles}>\n                <PrismCode\n                  code={assertionOpp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>42. What is type narrowing</h3>\n              Dynamic checks and predicates gives us information about values at\n              run-time. type narrowing is the process of reflecting this\n              information in the type-checker at compile time.\n              <div style={titles}>\n                <PrismCode\n                  code={narrowing}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>43. What is the purpose of common module</h3>\n              The commonly-needed services, pipes, and directives provided by\n              @angular/common module.\n              <br />\n              <h3>44. What is angular animation</h3>\n              <ul>\n                <li>\n                  Angular animations are based on CSS web transition\n                  functionality, so anything that can be styled or transformed\n                  in CSS can be animated the same way in Angular.\n                </li>\n                <li>\n                  Angular animations allow you to: Set animation timings,\n                  styles, keyframes, and transitions.\n                </li>\n              </ul>\n              <br />\n              <h3>45. What is Angular DSL (Domain-specific language)</h3>\n              A DSL is a computer language specialized to a particular\n              application domain. Angulard DSL allows us to write Angular\n              specific html-like syntax on top of normal html. It has its own\n              compiler that compiles this syntax to html that the browser can\n              understand. This DSL is defined in NgModules such as animations,\n              forms, routing and navigation.\n              <br />\n              <br />\n              Basically you will see 3 main syntax in Angular DSL.\n              <div style={titles}>\n                <PrismCode\n                  code={dslSyntax}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>46. What is multicasting</h3>\n              Multi-casting is the process of broadcasting to a list of multiple\n              subscribers in a single execution.\n              <div style={titles}>\n                <PrismCode\n                  code={multicasting}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>\n                Angular Module Loading: A module can be loaded eagerly, lazily,\n                preloaded.\n              </h3>\n              <ul>\n                <li>\n                  <b>1. Eager loading:</b> All of the modules and functions are\n                  loaded on application startup. the root module is always\n                  eagerly loaded.\n                </li>\n                <li>\n                  <b>2. Lazy loading:</b> is loading modules on demand.\n                </li>\n                <br />\n                <li>\n                  <b>3. Preloading:</b> is loading modules in background just\n                  after app starts.\n                </li>\n                <li>\n                  To configure Preloading features modules, first we configure\n                  them for lazy loading then, using angular in-built\n                  PreloadAllModules strategy, we enable to load all lazy loading\n                  into Preloading modules.\n                </li>\n                <li>\n                  Using PreloadAllModules strategy, all modules configured by\n                  loadChildren property will be preloaded. The modules\n                  configured by loadChildren property will be either lazily\n                  loaded or preloaded but not both. To preload only selective\n                  modules, we need to use custom preloading strategy.\n                </li>\n                <li>\n                  We can create custom preloading strategy. For this we need to\n                  create a service by implementing Angular PreloadingStrategy\n                  interface and override its preload method and then configure\n                  this service with PreloadingStrategy property in routing\n                  module. To select a module for custom preloading we need to\n                  use dataproperty in route configuration, configured as data\n                  'preload: true' for selective feature module preloading.\n                </li>\n              </ul>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(IntroAngulard);\n"]},"metadata":{},"sourceType":"module"}