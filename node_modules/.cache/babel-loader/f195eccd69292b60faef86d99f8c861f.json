{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/linkedList.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst appending = ``.trim();\nconst prepend = `\nclass LinkedList {\n  constructor(){\n    this.head = null;\n    this.tail = null;\n  }\n  \n  append(value){\n    const newNode = {value: value, next: null};\n    \n    if(this.tail){\n      this.tail.next = newNode;\n    }\n    this.tail = newNode;\n    if(!this.head){\n      this.head = newNode;\n    }\n  }\n  \n  prepend(value){\n    const newNode = { value: value, next: this.head};\n    \n    this.head = newNode;\n    if(!this.tail){\n      this.tail = newNode;\n    }\n  }\n  \n  toArray(){\n    const element = [];\n    let curNode = this.head;\n    while(curNode){\n      element.push(curNode);\n      curNode = curNode.next;\n    }\n    \n    return element;\n  }\n}\n\nconst LinkedList1 = new LinkedList();\nLinkedList1.append(1);\nLinkedList1.append('Hi');\nLinkedList1.append('Max');\nLinkedList1.append(true);\nLinkedList1.append(18.51);\n\nLinkedList1.prepend('First Value');\n\nconsole.log(LinkedList1.toArray());\n`.trim();\nconst deleting = `\nclass LinkedList {\n  constructor(){\n    this.head = null;\n    this.tail = null;\n  }\n  \n  append(value){\n    const newNode = {value: value, next: null};\n    \n    if(this.tail){\n      this.tail.next = newNode;\n    }\n    this.tail = newNode;\n    if(!this.head){\n      this.head = newNode;\n    }\n  }\n  \n  prepend(value){\n    const newNode = { value: value, next: this.head};\n    \n    this.head = newNode;\n    if(!this.tail){\n      this.tail = newNode;\n    }\n  }\n  \n  delete(value){\n    if(!this.head){\n      return;\n    }\n    \n    while(this.head && this.head.value === value){\n      this.head = this.head.next;\n    }\n    \n    let curNode = this.head;\n    while(curNode.next){\n      if(curNode.next.value === value){\n        curNode.next = curNode.next.next;\n      }\n      else{\n        curNode = curNode.next;\n      }\n    }\n    \n    if(this.tail.value === value){\n      this.tail = curNode;\n    }\n  }\n  \n  toArray(){\n    const element = [];\n    let curNode = this.head;\n    while(curNode){\n      element.push(curNode);\n      curNode = curNode.next;\n    }\n    \n    return element;\n  }\n}\n\nconst LinkedList1 = new LinkedList();\nLinkedList1.append(1);\nLinkedList1.append('Hi');\nLinkedList1.append('Max');\nLinkedList1.append('Max');\nLinkedList1.append(true);\nLinkedList1.append(18.51);\n\nLinkedList1.prepend('First Value');\n\nconsole.log(LinkedList1.toArray());\n\nLinkedList1.delete('Max');\nLinkedList1.delete('First Value');\nLinkedList1.delete(18.51);\n\nconsole.log(LinkedList1.toArray());`.trim();\nconst finding = `\nclass LinkedList {\n  constructor(){\n    this.head = null;\n    this.tail = null;\n  }\n  \n  append(value){\n    const newNode = {value: value, next: null};\n    \n    if(this.tail){\n      this.tail.next = newNode;\n    }\n    this.tail = newNode;\n    if(!this.head){\n      this.head = newNode;\n    }\n  }\n  \n  prepend(value){\n    const newNode = { value: value, next: this.head};\n    \n    this.head = newNode;\n    if(!this.tail){\n      this.tail = newNode;\n    }\n  }\n  \n  delete(value){\n    if(!this.head){\n      return;\n    }\n    \n    while(this.head && this.head.value === value){\n      this.head = this.head.next;\n    }\n    \n    let curNode = this.head;\n    while(curNode.next){\n      if(curNode.next.value === value){\n        curNode.next = curNode.next.next;\n      }\n      else{\n        curNode = curNode.next;\n      }\n    }\n    \n    if(this.tail.value === value){\n      this.tail = curNode;\n    }\n  }\n  \n  find(value){\n    if(!this.head){\n      return;\n    }\n    let curNode = this.head;\n    \n    while(curNode){\n      if(curNode.value === value){\n        return curNode;\n      }\n      curNode = curNode.next;\n    }\n    \n    return null;\n  }\n  \n  toArray(){\n    const element = [];\n    let curNode = this.head;\n    while(curNode){\n      element.push(curNode);\n      curNode = curNode.next;\n    }\n    \n    return element;\n  }\n}\n\nconst LinkedList1 = new LinkedList();\nLinkedList1.append(1);\nLinkedList1.append('Hi');\nLinkedList1.append('Max');\nLinkedList1.append('Max');\nLinkedList1.append(true);\nLinkedList1.append(18.51);\n\nLinkedList1.prepend('First Value');\n\nconsole.log(LinkedList1.toArray());\n\nLinkedList1.delete('Max');\nLinkedList1.delete('First Value');\nLinkedList1.delete(18.51);\n\nconsole.log(LinkedList1.toArray());\n\nconsole.log(LinkedList1.find('Max'));\nconsole.log(LinkedList1.find('Hi'));`.trim();\nconst insertAfter = `\nclass LinkedList {\n  constructor(){\n    this.head = null;\n    this.tail = null;\n  }\n  \n  append(value){\n    const newNode = {value: value, next: null};\n    \n    if(this.tail){\n      this.tail.next = newNode;\n    }\n    this.tail = newNode;\n    if(!this.head){\n      this.head = newNode;\n    }\n  }\n  \n  prepend(value){\n    const newNode = { value: value, next: this.head};\n    \n    this.head = newNode;\n    if(!this.tail){\n      this.tail = newNode;\n    }\n  }\n  \n  delete(value){\n    if(!this.head){\n      return;\n    }\n    \n    while(this.head && this.head.value === value){\n      this.head = this.head.next;\n    }\n    \n    let curNode = this.head;\n    while(curNode.next){\n      if(curNode.next.value === value){\n        curNode.next = curNode.next.next;\n      }\n      else{\n        curNode = curNode.next;\n      }\n    }\n    \n    if(this.tail.value === value){\n      this.tail = curNode;\n    }\n  }\n  \n  find(value){\n    if(!this.head){\n      return;\n    }\n    let curNode = this.head;\n    \n    while(curNode){\n      if(curNode.value === value){\n        return curNode;\n      }\n      curNode = curNode.next;\n    }\n    \n    return null;\n  }\n  \n  insertAfter(value, afterValue){\n    const existingNode = this.find(afterValue);\n    \n    if(existingNode){\n      const newNode = { value: value, next: existingNode.next };\n      existingNode.next = newNode;\n    }\n  }\n  \n  toArray(){\n    const element = [];\n    let curNode = this.head;\n    while(curNode){\n      element.push(curNode);\n      curNode = curNode.next;\n    }\n    \n    return element;\n  }\n}\n\nconst LinkedList1 = new LinkedList();\nLinkedList1.append(1);\nLinkedList1.append('Hi');\nLinkedList1.append('Max');\nLinkedList1.append('Max');\nLinkedList1.append(true);\nLinkedList1.append(18.51);\n\nLinkedList1.prepend('First Value');\n\nconsole.log(LinkedList1.toArray());\n\nLinkedList1.delete('Max');\nLinkedList1.delete('First Value');\nLinkedList1.delete(18.51);\n\nconsole.log(LinkedList1.toArray());\n\nconsole.log(LinkedList1.find('Max'));\nconsole.log(LinkedList1.find('Hi'));\n\nLinkedList1.insertAfter('new value 1', 1);\nLinkedList1.insertAfter('new value 2', 'Hi');\n\nconsole.log(LinkedList1.toArray());`.trim();\n\nclass LinkedList extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, \"Linked List\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, \"Like arrays, Linked Lists store data elements in sequential order. Instead of keeping indexes, linked lists hold pointers to other elements. The first node is called the head while the last node is called the tail.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }, \"Linked lists have constant-time insertions and deletions because we can just change the pointers. To do the same operations in arrays requires linear time because subsequent items need to be shifted over.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }, \"Like arrays, linked lists can operate as stacks. It\\u2019s as simple as having the head be the only place for insertion and removal.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }), \"Linked lists can also operate as queues with the help of doubly-linked list, where insertion occurs at the tail and removal occurs at the head.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    }, \"Linked lists are useful on both the client and server.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, \"On the client, state management libraries like Redux structure its middleware logic in a linked-list fashion. When actions are dispatched, they are piped from one middleware to the next until all is visited before reaching the reducers.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }, \"On the server, web frameworks like Express also structure its middleware logic in a similar fashion. When a request is received, it is piped from one middleware to the next until a response is issued.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }, \"Links in a linked list do not have indexes.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }, \"A linked list grows and shrinks as it is edited. Do not need to predetermine it's size.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }, \"Functions -\"), \" add, remove, indexOf, elementAt, addAt, removeAt, view.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }, \"Append\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: appending,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }, \"Prepend\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: prepend,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }, \"Delete\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: deleting,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }, \"Find\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: finding,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }, \"Insert After\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: insertAfter,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(LinkedList);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/linkedList.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","appending","trim","prepend","deleting","finding","insertAfter","LinkedList","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst appending = ``.trim();\n\nconst prepend = `\nclass LinkedList {\n  constructor(){\n    this.head = null;\n    this.tail = null;\n  }\n  \n  append(value){\n    const newNode = {value: value, next: null};\n    \n    if(this.tail){\n      this.tail.next = newNode;\n    }\n    this.tail = newNode;\n    if(!this.head){\n      this.head = newNode;\n    }\n  }\n  \n  prepend(value){\n    const newNode = { value: value, next: this.head};\n    \n    this.head = newNode;\n    if(!this.tail){\n      this.tail = newNode;\n    }\n  }\n  \n  toArray(){\n    const element = [];\n    let curNode = this.head;\n    while(curNode){\n      element.push(curNode);\n      curNode = curNode.next;\n    }\n    \n    return element;\n  }\n}\n\nconst LinkedList1 = new LinkedList();\nLinkedList1.append(1);\nLinkedList1.append('Hi');\nLinkedList1.append('Max');\nLinkedList1.append(true);\nLinkedList1.append(18.51);\n\nLinkedList1.prepend('First Value');\n\nconsole.log(LinkedList1.toArray());\n`.trim();\n\nconst deleting = `\nclass LinkedList {\n  constructor(){\n    this.head = null;\n    this.tail = null;\n  }\n  \n  append(value){\n    const newNode = {value: value, next: null};\n    \n    if(this.tail){\n      this.tail.next = newNode;\n    }\n    this.tail = newNode;\n    if(!this.head){\n      this.head = newNode;\n    }\n  }\n  \n  prepend(value){\n    const newNode = { value: value, next: this.head};\n    \n    this.head = newNode;\n    if(!this.tail){\n      this.tail = newNode;\n    }\n  }\n  \n  delete(value){\n    if(!this.head){\n      return;\n    }\n    \n    while(this.head && this.head.value === value){\n      this.head = this.head.next;\n    }\n    \n    let curNode = this.head;\n    while(curNode.next){\n      if(curNode.next.value === value){\n        curNode.next = curNode.next.next;\n      }\n      else{\n        curNode = curNode.next;\n      }\n    }\n    \n    if(this.tail.value === value){\n      this.tail = curNode;\n    }\n  }\n  \n  toArray(){\n    const element = [];\n    let curNode = this.head;\n    while(curNode){\n      element.push(curNode);\n      curNode = curNode.next;\n    }\n    \n    return element;\n  }\n}\n\nconst LinkedList1 = new LinkedList();\nLinkedList1.append(1);\nLinkedList1.append('Hi');\nLinkedList1.append('Max');\nLinkedList1.append('Max');\nLinkedList1.append(true);\nLinkedList1.append(18.51);\n\nLinkedList1.prepend('First Value');\n\nconsole.log(LinkedList1.toArray());\n\nLinkedList1.delete('Max');\nLinkedList1.delete('First Value');\nLinkedList1.delete(18.51);\n\nconsole.log(LinkedList1.toArray());`.trim();\n\nconst finding = `\nclass LinkedList {\n  constructor(){\n    this.head = null;\n    this.tail = null;\n  }\n  \n  append(value){\n    const newNode = {value: value, next: null};\n    \n    if(this.tail){\n      this.tail.next = newNode;\n    }\n    this.tail = newNode;\n    if(!this.head){\n      this.head = newNode;\n    }\n  }\n  \n  prepend(value){\n    const newNode = { value: value, next: this.head};\n    \n    this.head = newNode;\n    if(!this.tail){\n      this.tail = newNode;\n    }\n  }\n  \n  delete(value){\n    if(!this.head){\n      return;\n    }\n    \n    while(this.head && this.head.value === value){\n      this.head = this.head.next;\n    }\n    \n    let curNode = this.head;\n    while(curNode.next){\n      if(curNode.next.value === value){\n        curNode.next = curNode.next.next;\n      }\n      else{\n        curNode = curNode.next;\n      }\n    }\n    \n    if(this.tail.value === value){\n      this.tail = curNode;\n    }\n  }\n  \n  find(value){\n    if(!this.head){\n      return;\n    }\n    let curNode = this.head;\n    \n    while(curNode){\n      if(curNode.value === value){\n        return curNode;\n      }\n      curNode = curNode.next;\n    }\n    \n    return null;\n  }\n  \n  toArray(){\n    const element = [];\n    let curNode = this.head;\n    while(curNode){\n      element.push(curNode);\n      curNode = curNode.next;\n    }\n    \n    return element;\n  }\n}\n\nconst LinkedList1 = new LinkedList();\nLinkedList1.append(1);\nLinkedList1.append('Hi');\nLinkedList1.append('Max');\nLinkedList1.append('Max');\nLinkedList1.append(true);\nLinkedList1.append(18.51);\n\nLinkedList1.prepend('First Value');\n\nconsole.log(LinkedList1.toArray());\n\nLinkedList1.delete('Max');\nLinkedList1.delete('First Value');\nLinkedList1.delete(18.51);\n\nconsole.log(LinkedList1.toArray());\n\nconsole.log(LinkedList1.find('Max'));\nconsole.log(LinkedList1.find('Hi'));`.trim();\n\nconst insertAfter = `\nclass LinkedList {\n  constructor(){\n    this.head = null;\n    this.tail = null;\n  }\n  \n  append(value){\n    const newNode = {value: value, next: null};\n    \n    if(this.tail){\n      this.tail.next = newNode;\n    }\n    this.tail = newNode;\n    if(!this.head){\n      this.head = newNode;\n    }\n  }\n  \n  prepend(value){\n    const newNode = { value: value, next: this.head};\n    \n    this.head = newNode;\n    if(!this.tail){\n      this.tail = newNode;\n    }\n  }\n  \n  delete(value){\n    if(!this.head){\n      return;\n    }\n    \n    while(this.head && this.head.value === value){\n      this.head = this.head.next;\n    }\n    \n    let curNode = this.head;\n    while(curNode.next){\n      if(curNode.next.value === value){\n        curNode.next = curNode.next.next;\n      }\n      else{\n        curNode = curNode.next;\n      }\n    }\n    \n    if(this.tail.value === value){\n      this.tail = curNode;\n    }\n  }\n  \n  find(value){\n    if(!this.head){\n      return;\n    }\n    let curNode = this.head;\n    \n    while(curNode){\n      if(curNode.value === value){\n        return curNode;\n      }\n      curNode = curNode.next;\n    }\n    \n    return null;\n  }\n  \n  insertAfter(value, afterValue){\n    const existingNode = this.find(afterValue);\n    \n    if(existingNode){\n      const newNode = { value: value, next: existingNode.next };\n      existingNode.next = newNode;\n    }\n  }\n  \n  toArray(){\n    const element = [];\n    let curNode = this.head;\n    while(curNode){\n      element.push(curNode);\n      curNode = curNode.next;\n    }\n    \n    return element;\n  }\n}\n\nconst LinkedList1 = new LinkedList();\nLinkedList1.append(1);\nLinkedList1.append('Hi');\nLinkedList1.append('Max');\nLinkedList1.append('Max');\nLinkedList1.append(true);\nLinkedList1.append(18.51);\n\nLinkedList1.prepend('First Value');\n\nconsole.log(LinkedList1.toArray());\n\nLinkedList1.delete('Max');\nLinkedList1.delete('First Value');\nLinkedList1.delete(18.51);\n\nconsole.log(LinkedList1.toArray());\n\nconsole.log(LinkedList1.find('Max'));\nconsole.log(LinkedList1.find('Hi'));\n\nLinkedList1.insertAfter('new value 1', 1);\nLinkedList1.insertAfter('new value 2', 'Hi');\n\nconsole.log(LinkedList1.toArray());`.trim();\n\n\n\nclass LinkedList extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Linked List</h3>\n              <ol>\n                <li>\n                  Like arrays, Linked Lists store data elements in sequential order. Instead of keeping\n                  indexes, linked lists hold pointers to other elements. The first node is called the\n                  head while the last node is called the tail.\n                </li>\n                <br />\n\n                <li>\n                  Linked lists have constant-time insertions and deletions because we can just change the\n                  pointers. To do the same operations in arrays requires linear time because subsequent\n                  items need to be shifted over.\n                </li>\n                <br />\n\n                <li>\n                  Like arrays, linked lists can operate as stacks. It’s as simple as having the head be the\n                  only place for insertion and removal.\n                  <br />\n\n                  Linked lists can also operate as queues with the help of doubly-linked list, where insertion occurs at the tail and removal\n                  occurs at the head.\n                </li>\n                <br />\n\n                <li>\n                  Linked lists are useful on both the client and server.</li>\n                <ul>\n                  <li>On the client, state management libraries like Redux structure its middleware logic in a linked-list fashion. When\n                    actions are dispatched, they are piped from one middleware to the next until all is visited before reaching the reducers.</li>\n                  <li>On the server, web frameworks like Express also structure its middleware logic in a similar fashion. When a request is received,\n                    it is piped from one middleware to the next until a response is issued.</li>\n                </ul>\n                <br />\n\n                <li>Links in a linked list do not have indexes.</li>\n                <li>A linked list grows and shrinks as it is edited. Do not need to predetermine it's size.</li>\n              </ol>\n              <br />\n\n              <b>Functions -</b> add, remove, indexOf, elementAt, addAt, removeAt, view.\n              <br />\n              <h3>Append</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={appending}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Prepend</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={prepend}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Delete</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={deleting}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Find</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={finding}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Insert After</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={insertAfter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(LinkedList));\n"]},"metadata":{},"sourceType":"module"}