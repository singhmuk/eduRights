{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var paramsd=\"\\nfunction Person(fname, lname, city, year){\\n    lname === undefined ? lname = 'Singh' : city = city;\\n    city === undefined? city = 'Delhi' : city = city;\\n\\n\\n    this.fname = fname;\\n    this.lname = lname;\\n    this.city = city;\\n    this.year = year\\n}\\n\\nvar obj = new Person('mukesh',2003);\\nconsole.log(obj);\".trim();var modyPro=\"\\nfunction Person(first, last, age, gender, interests) {\\n\\n  this.name = {\\n    'first': first,\\n    'last' : last\\n  };\\n  this.age = age;\\n  this.gender = gender;\\n}\\n\\nconst person1 = new Person('Bob', 'Smith', 32, 'male', ['music', 'skiing']);\\nconsole.log(person1);\".trim();var inheritingMethos=\"\\nvar obj = {\\n  num: 2,\\n  main: function() {\\n    return this.num + 1;\\n  }\\n};\\n\\nconsole.log(obj.main()); \\n\\nvar newObj = Object.create(obj);\\nnewObj.num = 4; \\n\\nconsole.log(newObj.main());\".trim();var proto=\"\\nlet obj = {\\n  name: \\\"Mukesh\\\",\\n  city: \\\"Ranchi\\\",\\n  getInfo: function(){\\n    console.log(this.name ,\\\"from\\\", this.city)\\n  }\\n}\\n\\nlet obj2 = {\\n  name: \\\"Ritesh\\\"\\n}\\n\\n//Never use it\\nobj2.__proto__=obj;\\n\\nconsole.log(obj2.name);\\nconsole.log(obj.getInfo());\\nconsole.log(obj2.getInfo());\".trim();var polyfill=\"\\n//1\\nFunction.prototype.mybind = function(){\\n  console.log('dddddd')\\n}\\n\\nfunction fun(){}\\n\\n\\n//2\\nlet names = {\\n  fname: 'Mukesh',\\n  hometown: 'Ranchi'\\n}\\n\\nlet getInfo = function(){\\n  return console.log(this.fname,\\\"---\\\",this.hometown);\\n}\\n\\ngetInfo();\\n\\n\\nlet getMyInfo = getInfo.bind(names);        //create own polyfill by bind method (Traditional way).\\ngetMyInfo();  \\n\\n\\n\\nFunction.prototype.mybind = function(...args) {                      // User defind way\\n  let obj = this\\n  return function() {\\n    obj.call(args[0]);\\n  }\\n}\\n\\nlet getMyInfo2 = getInfo.mybind(names);\\ngetMyInfo();\".trim();var polyfillAdv=\"\\nlet names = {\\n  fname: 'Mukesh',\\n  hometown: 'Ranchi'\\n}\\n\\nlet getInfo = function(state, state2, state3){\\n  return console.log(this.fname,\\\"---\\\",this.hometown,\\\"State\\\",state, state2, state3);\\n}\\n\\n\\nlet getMyInfo = getInfo.bind(names, \\\"state\\\");\\ngetMyInfo(\\\"state\\\", \\\"state2\\\");  \\n\\n\\nFunction.prototype.mybind = function(...args) {\\n  let obj = this,\\n  params = args.slice(1);\\n  return function(args2) {\\n    obj.apply(args[0], [...params, ...args2]);\\n  }\\n}\\n\\nlet getMyInfo2 = getInfo.mybind(names, \\\"state\\\");\\ngetMyInfo(\\\"state\\\", \\\"state2\\\");\\n\".trim();var code=\"\\nconst pureFun = (num) => Math.pow(num, 1/2);                                   // Pure function.\\nconsole.log(pureFun(64));\\n\\n\\nconst inPureFun = (max, min) => {\\n  return parseInt(Math.random() * (max - min) + min);                          // Impure function.\\n}  \\n\\nconsole.log(inPureFun(10, 2));\\n\".trim();var anonymousFun=\"\\nlet show = function () {\\n  console.log('Anonymous function');\\n};\\n\\nshow();\\n\\n\\n//Using anonymous functions as arguments of other functions\\nsetTimeout(function () {\\n  console.log('Execute later after 1 second')\\n}, 1000);\".trim();var firstFun=\"\\nfunction interview(job){\\n  if(job === 'designer'){\\n    return function(name){\\n      console.log('designer', name);\\n    }\\n  }\\n  else if(job === 'teacher'){\\n    return function(name){\\n      console.log('teacher,name', name);\\n    }\\n  }\\n  else {\\n    return function(name){\\n        console.log('default', name);\\n      }\\n    }\\n  }\\n\\n  var obj = interview('teacher');\\n  interview('muke')\\n\\n\\n//Partial Function Application\\n  function applicator(fn, val) {\\n    return function() {\\n      fn(val);\\n    };\\n  }\\n\\nfunction speak(string) {\\n  console.log(string);\\n}\\n\\nvar sayHello = applicator(speak, \\\"Hello\\\");\\nsayHello();   \".trim();var combinators=\"\\nconst add = (x, y) => x + y;\\nconst multiple = (x, y) => x + y;\\nconst sum = (...nums) => nums.reduce((x, y) => x + y);\\nconst product = (...nums) => nums.reduce((x, y) => x * y);\\n\\n\\n//\\nfunction myFunc() {\\n  let name=\\\"Radha\\\";\\n  let bool=true;\\n\\n  console.log('And', name && bool);\\n  console.log('Or', name || bool);\\n}\\n\\nmyFunc();\\n\".trim();var unsafe=\"const person = {\\n  name: 'Bobo',\\n  address: { \\n    street: 'Main Street', \\n    number: 123\\n   }\\n };\\n \\n const shallowPersonClone = { ...person };\\n shallowPersonClone.address.number = 456;\\n console.log({ person, shallowPersonClone });\".trim();var safe=\"const person = {\\n  name: 'Bobo',\\n  address: { \\n    street: 'Main Street', \\n    number: 123\\n   }\\n };\\n \\n const deepPersonClone = JSON.parse(JSON.stringify(person));\\n deepPersonClone.address.number = 456;\\n console.log({ person, deepPersonClone });\".trim();var hoc=\"\\nfunction hocfun(a,b) {\\n  let c=a+b;\\n  console.log(c);\\n  return function(name) { \\n      return [console.log(a), console.log(b), console.log(name)]\\n  };\\n}\\n\\nconst myFunc = hocfun(2,5);\\nmyFunc('Krishana');\\n \".trim();var dynamicScope=\"\\n function foo(){\\n     console.log(a);\\n  }\\n  \\n  function bar(){\\n     var a = 3;\\n     console.log(a);\\n     foo();\\n  }\\n  \\n  var a = 2;\\n  bar();\".trim();var METADATA=\"let METADATA = Symbol('metadata');\\n class Car {\\n      constructor(make, model) {\\n      this.make = make;\\n      this.model = model;\\n    }\\n    \\n  [METADATA]() {\\n        return {\\n        make: this.make,\\n        model: this.model\\n      };\\n    }\\n    [\\\"add\\\"](a, b) {\\n    return a + b;\\n    }\\n    \\n    [1 + 2]() {\\n      return \\\"three\\\";\\n      }\\n    }\\n    \\n let MazdaMPV = new Car(\\\"Mazda\\\", \\\"MPV\\\");\\n   MazdaMPV.add(4, 5);\\n   MazdaMPV[3]();\\n   console.log(MazdaMPV[METADATA]())\\n  \".trim();var statics=\"\\n   //1\\n   static display() {\\n     return \\\"static method is invoked\\\"\\n   }\\n   \\n   static display() {\\n     return \\\"static method is invoked again\\\"\\n   }\\n   }\\n   \\n   console.log(Test.display());\\n   \\n   \\n   //2\\n   class Student {\\n     constructor(name)  {    \\n       this.name = name; \\n        }\\n     static findName(student)  {\\n         return student.name;  \\n     } \\n   }\\n   var s = new Student(\\\"Eden\\\"); \\n   var name = Student.findName(s);\\n   console.log(name);\".trim();var supers=\"\\n   var obj1 = {  \\n     print(){    \\n     console.log(\\\"Hello\\\");  \\n   } \\n }\\n \\n var obj2 = {  \\n     print(){\\n     super.print();  \\n   } \\n }\\n \\n \\n Object.setPrototypeOf(obj2, obj1); \\n obj2.print();\".trim();var access=\"\\n   class A {\\n     foo() { return 'foo in A'; }\\n   }\\n   \\n class B extends A {\\n     foo() { return 'foo in B'; }\\n   }\\n   \\n class C {\\n     foo() { return 'foo in C'; }\\n   }\\n   \\n class D extends C {\\n     foo() { return super.foo(); }\\n   }\\n   \\n \\n b = new B;\\n console.log(b.foo());\\n \\n B.prototype.foo = D.prototype.foo\\n console.log(b.foo());\\n console.log(b instanceof C); // false\".trim();var password=\"\\n let userEmail='LOC1234'\\n let password='1234LOC1234'\\n \\n //console.log(userEmail.toLowerCase())\\n \\n let userCheck = function(myString){\\n   if((myString.includes(123)) && (myString.length>=7)){\\n     return true\\n   }\\n     return false\\n }\\n \\n let passCheck = function(myPass){\\n   if((myPass.includes('123')) && (myPass.length>5)){\\n     return true\\n   }\\n }\\n \\n console.log(userCheck(userEmail))\\n console.log(passCheck(password))\\n \".trim();var Prototypes=/*#__PURE__*/function(_Component){_inherits(Prototypes,_Component);function Prototypes(){_classCallCheck(this,Prototypes);return _possibleConstructorReturn(this,_getPrototypeOf(Prototypes).apply(this,arguments));}_createClass(Prototypes,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"1. Object prototypes\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Prototypes are the mechanism by which \",React.createElement(\"b\",null,\"JavaScript objects inherit features\"),\" from one another.\"),React.createElement(\"li\",null,\"Each object has a private property which holds a link to another object called its prototype. That prototype object has a prototype of its own, and so on until an object is reached with null as its prototype.\"),React.createElement(\"li\",null,\"By definition, null has no prototype, and acts as the final link in this prototype chain.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Modifying prototypes\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:modyPro,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"If type \",React.createElement(\"b\",null,\"person1\"),\". into our JavaScript console, See the browser try to auto-complete this with the member names available on this object.\"),React.createElement(\"li\",null,\"Will see the members defined on person1's constructor \\u2014 Person() \\u2014 name, age, gender, interests, bio, and greeting. Also see some other members \\u2014 toString, valueOf, etc \\u2014 these are defined on person1's prototype object's, which is Object.prototype.\")),React.createElement(\"br\",null),React.createElement(\"b\",null,\"What happens if you call a method on person1, which is actually defined on Object.prototype\"),React.createElement(\"br\",null),\"person1.valueOf()\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"valueOf() returns the value of the object it is called on.\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"The browser initially checks to see if the person1 object has a valueOf() method available on it, as defined on its constructor, Person(), and it doesn't.\"),React.createElement(\"li\",null,\"So the browser checks to see if the person1's prototype object has a valueOf() method available on it. It doesn't, then the browser checks person1's prototype object's prototype object, and it has. So the method is called.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Default Parameters\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:paramsd,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"2. Inheriting Methods\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:inheritingMethos,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Prototype and Protopal Inheritance\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:proto,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"3. Polyfill\"),\"A polyfill is a browser fallback, made in JavaScript, that allows functionality expect to work in modern browsers also work in older browsers.\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"It \\u201Cfills in\\u201D the gap and adds missing implementations in old browser.\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:polyfill,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Polyfill 2\"),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:polyfillAdv,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"4. What is Functional Programming?\"),\"Functional programming is the process of building software by composing pure functions, avoiding shared state, mutable data, and side-effects. Functional programming is declarative rather than imperative, and application state flows through pure functions.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"functional programming:\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Pure functions\"),React.createElement(\"li\",null,\"Function composition\"),React.createElement(\"li\",null,\"Avoid shared state\"),React.createElement(\"li\",null,\"Avoid mutating state\"),React.createElement(\"li\",null,\"Avoid side effects\")),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"Function composition: \"),\"is the process of combining two/ more functions in order to produce a new function or perform some computation.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"A pure function has following properties:\"),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"The function always returns the same result if the same arguments are passed in. It does not depend on any state, or data, change during a program's execution. It must only depend on its input arguments.\"),React.createElement(\"li\",null,\"The function does not produce any observable side effects such as network requests, input and output devices, or data mutation.\"),React.createElement(\"li\",null,\"The same arguments must always lead to the same outcome.\"),React.createElement(\"li\",null,\"A pure function cannot depend on any variable declared outside its scope.\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:code,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"5. First Class Function\"),\"functions are treated like any other first-class object \\u2014 they can be stored in variables, passed around, returned from other functions, and even hold their own properties.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"first-class objects can:\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Be stored in a variable.\"),React.createElement(\"li\",null,\"Be passed as arguments to functions.\"),React.createElement(\"li\",null,\"Be returned by functions.\"),React.createElement(\"li\",null,\"Be stored in some data structure and\"),React.createElement(\"li\",null,\"Hold their own properties and methods.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Uses of a First-Class Function:\"),React.createElement(\"br\",null),\"First-class functions give us a wide variety of flexible and powerful design patterns. These patterns let us write more readable, more dynamic, and more concise code.\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Higher-Order Functions\"),React.createElement(\"li\",null,\"Partial Function Application\"),React.createElement(\"li\",null,\"Asynchronous Functions\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:firstFun,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"JavaScript anonymous functions\"),React.createElement(\"br\",null),React.createElement(\"i\",null,\"An anonymous function is a function without a name. An anonymous function is often not accessible after its initial creation.\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:anonymousFun,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"6. Combinators\"),\"Combinators are similar to pure functions. A combinator has the same requirements as a pure function, plus one more.\",React.createElement(\"br\",null),React.createElement(\"i\",null,\"A combinator contains no free variables.\"),React.createElement(\"br\",null),React.createElement(\"br\",null),\"A free variable is any variable whose values cannot be accessed independently. Every variable in a combinator must be passed through parameters.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:combinators,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Shared State\"),React.createElement(\"br\",null),\"Shared state is any variable, object, or memory space that exists in a shared scope, or as the property of an object being passed between scopes. A shared scope can include global scope or closure scopes. \",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Unsafe Example\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:unsafe,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Safe Example\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:safe,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"7. Hoc:\"),\"A higher order function is a function either:\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"1. Accept a function as an argument.\"),React.createElement(\"li\",null,\"2.Return a function.\")),React.createElement(\"br\",null),\"HOF are:\",React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"forEach\"),React.createElement(\"li\",null,\"map\"),React.createElement(\"li\",null,\"filter\"),React.createElement(\"li\",null,\"sort\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:hoc,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"8. dynamic_scope:\"),\"Lexical scope is the set of rules about how the Engine can look-up a variable and where it will find it. Dynamic scope can be determined dynamically at runtime, rather than statically at authoretime.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:dynamicScope,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"9. Dynamic Methods:\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:METADATA,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"10. JavaScript static Method:\"),\"The JavaScript provides static methods that belong to the class instead of an instance of that class. So, an instance is not required to call the static method. These methods are called directly on the class itself.\",React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"static keyword is used to declare a static method.\"),React.createElement(\"li\",null,\"A class can contain more than one static method.\"),React.createElement(\"li\",null,\"If we declare more than one static method with a similar name, the JavaScript always invokes the last one.\"),React.createElement(\"li\",null,\"static method can be used to create utility functions.\"),React.createElement(\"li\",null,\"We can use this keyword to call a static method within another static method.\"),React.createElement(\"li\",null,\"We cannot use this keyword directly to call a static method within the non-static method. In such case, we can call the static method either using the class name or as the property of the constructor.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:statics,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"h3\",null,\"11. Super\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:supers,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Superclass Property Access\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:access,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"12. Password Enter\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:password,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return Prototypes;}(Component);export default withStyles(styles)(Prototypes);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/javaScripts/deepJs/prototypes.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","paramsd","trim","modyPro","inheritingMethos","proto","polyfill","polyfillAdv","code","anonymousFun","firstFun","combinators","unsafe","safe","hoc","dynamicScope","METADATA","statics","supers","access","password","Prototypes","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst paramsd = `\nfunction Person(fname, lname, city, year){\n    lname === undefined ? lname = 'Singh' : city = city;\n    city === undefined? city = 'Delhi' : city = city;\n\n\n    this.fname = fname;\n    this.lname = lname;\n    this.city = city;\n    this.year = year\n}\n\nvar obj = new Person('mukesh',2003);\nconsole.log(obj);`.trim();\n\nconst modyPro = `\nfunction Person(first, last, age, gender, interests) {\n\n  this.name = {\n    'first': first,\n    'last' : last\n  };\n  this.age = age;\n  this.gender = gender;\n}\n\nconst person1 = new Person('Bob', 'Smith', 32, 'male', ['music', 'skiing']);\nconsole.log(person1);`.trim();\n\n\n\nconst inheritingMethos = `\nvar obj = {\n  num: 2,\n  main: function() {\n    return this.num + 1;\n  }\n};\n\nconsole.log(obj.main()); \n\nvar newObj = Object.create(obj);\nnewObj.num = 4; \n\nconsole.log(newObj.main());`.trim();\n\n\nconst proto = `\nlet obj = {\n  name: \"Mukesh\",\n  city: \"Ranchi\",\n  getInfo: function(){\n    console.log(this.name ,\"from\", this.city)\n  }\n}\n\nlet obj2 = {\n  name: \"Ritesh\"\n}\n\n//Never use it\nobj2.__proto__=obj;\n\nconsole.log(obj2.name);\nconsole.log(obj.getInfo());\nconsole.log(obj2.getInfo());`.trim();\n\n\nconst polyfill = `\n//1\nFunction.prototype.mybind = function(){\n  console.log('dddddd')\n}\n\nfunction fun(){}\n\n\n//2\nlet names = {\n  fname: 'Mukesh',\n  hometown: 'Ranchi'\n}\n\nlet getInfo = function(){\n  return console.log(this.fname,\"---\",this.hometown);\n}\n\ngetInfo();\n\n\nlet getMyInfo = getInfo.bind(names);        //create own polyfill by bind method (Traditional way).\ngetMyInfo();  \n\n\n\nFunction.prototype.mybind = function(...args) {                      // User defind way\n  let obj = this\n  return function() {\n    obj.call(args[0]);\n  }\n}\n\nlet getMyInfo2 = getInfo.mybind(names);\ngetMyInfo();`.trim();\n\n\nconst polyfillAdv = `\nlet names = {\n  fname: 'Mukesh',\n  hometown: 'Ranchi'\n}\n\nlet getInfo = function(state, state2, state3){\n  return console.log(this.fname,\"---\",this.hometown,\"State\",state, state2, state3);\n}\n\n\nlet getMyInfo = getInfo.bind(names, \"state\");\ngetMyInfo(\"state\", \"state2\");  \n\n\nFunction.prototype.mybind = function(...args) {\n  let obj = this,\n  params = args.slice(1);\n  return function(args2) {\n    obj.apply(args[0], [...params, ...args2]);\n  }\n}\n\nlet getMyInfo2 = getInfo.mybind(names, \"state\");\ngetMyInfo(\"state\", \"state2\");\n`.trim();\n\nconst code = `\nconst pureFun = (num) => Math.pow(num, 1/2);                                   // Pure function.\nconsole.log(pureFun(64));\n\n\nconst inPureFun = (max, min) => {\n  return parseInt(Math.random() * (max - min) + min);                          // Impure function.\n}  \n\nconsole.log(inPureFun(10, 2));\n`.trim()\n\nconst anonymousFun = `\nlet show = function () {\n  console.log('Anonymous function');\n};\n\nshow();\n\n\n//Using anonymous functions as arguments of other functions\nsetTimeout(function () {\n  console.log('Execute later after 1 second')\n}, 1000);`.trim();\n\nconst firstFun = `\nfunction interview(job){\n  if(job === 'designer'){\n    return function(name){\n      console.log('designer', name);\n    }\n  }\n  else if(job === 'teacher'){\n    return function(name){\n      console.log('teacher,name', name);\n    }\n  }\n  else {\n    return function(name){\n        console.log('default', name);\n      }\n    }\n  }\n\n  var obj = interview('teacher');\n  interview('muke')\n\n\n//Partial Function Application\n  function applicator(fn, val) {\n    return function() {\n      fn(val);\n    };\n  }\n\nfunction speak(string) {\n  console.log(string);\n}\n\nvar sayHello = applicator(speak, \"Hello\");\nsayHello();   `.trim();\n\nconst combinators = `\nconst add = (x, y) => x + y;\nconst multiple = (x, y) => x + y;\nconst sum = (...nums) => nums.reduce((x, y) => x + y);\nconst product = (...nums) => nums.reduce((x, y) => x * y);\n\n\n//\nfunction myFunc() {\n  let name=\"Radha\";\n  let bool=true;\n\n  console.log('And', name && bool);\n  console.log('Or', name || bool);\n}\n\nmyFunc();\n`.trim();\n\nconst unsafe = `const person = {\n  name: 'Bobo',\n  address: { \n    street: 'Main Street', \n    number: 123\n   }\n };\n \n const shallowPersonClone = { ...person };\n shallowPersonClone.address.number = 456;\n console.log({ person, shallowPersonClone });`.trim()\n\nconst safe = `const person = {\n  name: 'Bobo',\n  address: { \n    street: 'Main Street', \n    number: 123\n   }\n };\n \n const deepPersonClone = JSON.parse(JSON.stringify(person));\n deepPersonClone.address.number = 456;\n console.log({ person, deepPersonClone });`.trim()\n\nconst hoc = `\nfunction hocfun(a,b) {\n  let c=a+b;\n  console.log(c);\n  return function(name) { \n      return [console.log(a), console.log(b), console.log(name)]\n  };\n}\n\nconst myFunc = hocfun(2,5);\nmyFunc('Krishana');\n `.trim()\n\nconst dynamicScope = `\n function foo(){\n     console.log(a);\n  }\n  \n  function bar(){\n     var a = 3;\n     console.log(a);\n     foo();\n  }\n  \n  var a = 2;\n  bar();`.trim()\n\nconst METADATA = `let METADATA = Symbol('metadata');\n class Car {\n      constructor(make, model) {\n      this.make = make;\n      this.model = model;\n    }\n    \n  [METADATA]() {\n        return {\n        make: this.make,\n        model: this.model\n      };\n    }\n    [\"add\"](a, b) {\n    return a + b;\n    }\n    \n    [1 + 2]() {\n      return \"three\";\n      }\n    }\n    \n let MazdaMPV = new Car(\"Mazda\", \"MPV\");\n   MazdaMPV.add(4, 5);\n   MazdaMPV[3]();\n   console.log(MazdaMPV[METADATA]())\n  `.trim()\n\n\n\n\nconst statics = `\n   //1\n   static display() {\n     return \"static method is invoked\"\n   }\n   \n   static display() {\n     return \"static method is invoked again\"\n   }\n   }\n   \n   console.log(Test.display());\n   \n   \n   //2\n   class Student {\n     constructor(name)  {    \n       this.name = name; \n        }\n     static findName(student)  {\n         return student.name;  \n     } \n   }\n   var s = new Student(\"Eden\"); \n   var name = Student.findName(s);\n   console.log(name);`.trim();\n\n\nconst supers = `\n   var obj1 = {  \n     print(){    \n     console.log(\"Hello\");  \n   } \n }\n \n var obj2 = {  \n     print(){\n     super.print();  \n   } \n }\n \n \n Object.setPrototypeOf(obj2, obj1); \n obj2.print();`.trim();\n\n\nconst access = `\n   class A {\n     foo() { return 'foo in A'; }\n   }\n   \n class B extends A {\n     foo() { return 'foo in B'; }\n   }\n   \n class C {\n     foo() { return 'foo in C'; }\n   }\n   \n class D extends C {\n     foo() { return super.foo(); }\n   }\n   \n \n b = new B;\n console.log(b.foo());\n \n B.prototype.foo = D.prototype.foo\n console.log(b.foo());\n console.log(b instanceof C); // false`.trim();\n\n\nconst password = `\n let userEmail='LOC1234'\n let password='1234LOC1234'\n \n //console.log(userEmail.toLowerCase())\n \n let userCheck = function(myString){\n   if((myString.includes(123)) && (myString.length>=7)){\n     return true\n   }\n     return false\n }\n \n let passCheck = function(myPass){\n   if((myPass.includes('123')) && (myPass.length>5)){\n     return true\n   }\n }\n \n console.log(userCheck(userEmail))\n console.log(passCheck(password))\n `.trim();\n\n\nclass Prototypes extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Object prototypes</h3>\n              <ul>\n                <li>Prototypes are the mechanism by which <b>JavaScript objects inherit features</b> from one another.</li>\n                <li>Each object has a private property which holds a link to another object called its prototype. That\n                  prototype object has a prototype of its own, and so on until an object is reached with null as its\n                  prototype.</li>\n                <li>By definition, null has no prototype, and acts as the final link in this prototype chain.</li>\n              </ul>\n              <br />\n              <br />\n\n              <b>Modifying prototypes</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={modyPro}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <ul>\n                <li>\n                  If type <b>person1</b>. into our JavaScript console, See the browser try to auto-complete this with the member names available on this object.</li>\n                <li>Will see the members defined on person1's constructor — Person() — name, age, gender, interests, bio, and greeting. Also see some other members — toString, valueOf, etc — these are defined on person1's prototype object's, which is Object.prototype.</li>\n              </ul>\n              <br />\n              <b>What happens if you call a method on person1, which is actually defined on Object.prototype</b>\n              <br />\n              person1.valueOf()\n              <br />\n              <br />\n              valueOf() returns the value of the object it is called on.\n              <br />\n              <ul>\n                <li>The browser initially checks to see if the person1 object has a valueOf() method available on it, as defined on its constructor, Person(), and it doesn't.</li>\n                <li>So the browser checks to see if the person1's prototype object has a valueOf() method available on it. It doesn't, then the browser checks person1's prototype object's prototype object, and it has. So the method is called.</li>\n              </ul>\n              <br />\n              <br />\n\n              <b>Default Parameters</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={paramsd}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Inheriting Methods</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={inheritingMethos}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Prototype and Protopal Inheritance</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={proto}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Polyfill</h3>\n              A polyfill is a browser fallback, made in JavaScript, that allows functionality expect to work in modern browsers also work in\n              older browsers.\n              <br />\n              <ul>\n                <li>It “fills in” the gap and adds missing implementations in old browser.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={polyfill}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Polyfill 2</b>\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={polyfillAdv}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. What is Functional Programming?</h3>\n              Functional programming is the process of building software by composing pure\n              functions, avoiding shared state, mutable data, and side-effects. Functional\n              programming is declarative rather than imperative, and application state flows\n              through pure functions.<br />\n              <br />\n              functional programming:<br />\n              <ul>\n                <li>Pure functions</li>\n                <li>Function composition</li>\n                <li>Avoid shared state</li>\n                <li>Avoid mutating state</li>\n                <li>Avoid side effects</li>\n              </ul>\n              <br />\n\n              <ul>\n                <li><b>Function composition: </b>is the process of combining two/ more functions in order to produce a new function or perform\n                  some computation.</li>\n              </ul>\n              <br />\n              <br />\n\n              <b>A pure function has following properties:</b>\n              <br />\n              <ul>\n                <li>The function always returns the same result if the same arguments are passed\n                  in. It does not depend on any state, or data, change during a program's\n                  execution. It must only depend on its input arguments.</li>\n                <li>The function does not produce any observable side effects such as network\n                  requests, input and output devices, or data mutation.</li>\n                <li>The same arguments must always lead to the same outcome.</li>\n                <li>A pure function cannot depend on any variable declared outside its scope.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={code}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <h3>5. First Class Function</h3>\n              functions are treated like any other first-class object — they can be stored in variables, passed around, returned\n              from other functions, and even hold their own properties.\n              <br />\n              <br />\n              <b>first-class objects can:</b>\n              <ul>\n                <li>Be stored in a variable.</li>\n                <li>Be passed as arguments to functions.</li>\n                <li>Be returned by functions.</li>\n                <li>Be stored in some data structure and</li>\n                <li>Hold their own properties and methods.</li>\n              </ul>\n              <br />\n              <br />\n\n              <b>Uses of a First-Class Function:</b>\n              <br />\n              First-class functions give us a wide variety of flexible and powerful design patterns. These\n              patterns let us write more readable, more dynamic, and more concise code.\n              <br />\n              <ul>\n                <li>Higher-Order Functions</li>\n                <li>Partial Function Application</li>\n                <li>Asynchronous Functions</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={firstFun}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>JavaScript anonymous functions</b>\n              <br />\n              <i>\n                An anonymous function is a function without a name. An anonymous function is often not accessible\n                after its initial creation.\n              </i>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={anonymousFun}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>6. Combinators</h3>\n              Combinators are similar to pure functions. A combinator has the same requirements as a pure function, plus one more.\n              <br />\n              <i>A combinator contains no free variables.</i>\n              <br />\n              <br />\n              A free variable is any variable whose values cannot be accessed independently. Every\n              variable in a combinator must be passed through parameters.\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={combinators}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>Shared State</b>\n              <br />\n              Shared state is any variable, object, or memory space that exists in a shared\n              scope, or as the property of an object being passed between scopes. A shared\n              scope can include global scope or closure scopes. <br />\n              <br />\n              <b>Unsafe Example</b>\n              <div style={titles}>\n                <PrismCode\n                  code={unsafe}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>Safe Example</b>\n              <div style={titles}>\n                <PrismCode\n                  code={safe}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>7. Hoc:</h3>\n              A higher order function is a function either:<br />\n              <ul>\n                <li>1. Accept a function as an argument.</li>\n                <li>2.Return a function.</li>\n              </ul>\n              <br />\n\n              HOF are:<br />\n              <ul>\n                <li>forEach</li>\n                <li>map</li>\n                <li>filter</li>\n                <li>sort</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={hoc}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>8. dynamic_scope:</h3>\n              Lexical scope is the set of rules about how the Engine can look-up a variable and where it will\n              find it. Dynamic scope can be determined dynamically at runtime, rather than statically at authoretime.\n\n              <div style={titles}>\n                <PrismCode\n                  code={dynamicScope}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>9. Dynamic Methods:</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={METADATA}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>10. JavaScript static Method:</h3>\n              The JavaScript provides static methods that belong to the class instead of an instance of that class. So, an instance is not required to call the static method. These methods are called directly on the class itself.\n              <br />\n              <br />\n              <ul>\n                <li>static keyword is used to declare a static method.</li>\n                <li>A class can contain more than one static method.</li>\n                <li>If we declare more than one static method with a similar name, the JavaScript always invokes the last one.</li>\n                <li>static method can be used to create utility functions.</li>\n                <li>We can use this keyword to call a static method within another static method.</li>\n                <li>We cannot use this keyword directly to call a static method within the non-static method. In such case, we can call the static\n                  method either using the class name or as the property of the constructor.</li>\n              </ul>\n\n              <div style={titles}>\n                <PrismCode\n                  code={statics}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <h3>11. Super</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={supers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Superclass Property Access</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={access}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>12. Password Enter</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={password}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Prototypes));\n"]},"metadata":{},"sourceType":"module"}