{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/arrayNumAlgo.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst threeSumClosest = `\nfunction threeSumClosest(nums, target) {\n  let diff = Infinity;\n  let result = 0;\n  nums.sort((a, b) => a - b);\n\n  for (let i = 0; i < nums.length; i++) {\n    let left = i + 1;\n    let right = nums.length - 1;\n    while (left < right) {\n      const sum = nums[i] + nums[left] + nums[right];\n      const currentDiff = sum - target;\n\n      if (currentDiff > 0) {\n        right -= 1;\n      } else {\n        left += 1;\n      }\n      if (Math.abs(currentDiff) < diff) {\n        result = sum;\n      }\n      diff = Math.min(Math.abs(currentDiff), diff);\n    }\n  }\n  return result;\n}\n\nconsole.log(threeSumClosest([-1,2,1,-4]))\n`.trim();\nconst firstMissingPositive = `\nfunction firstMissingPositive(nums = []){\n  function swap(a, b){\n    const temp = nums[a]\n    nums[a] = nums[b]\n    nums[b] = temp\n  }\n\n  let index = 0\n  while (index < nums.length) {\n    if (nums[index] !== nums[nums[index] - 1] && nums[index] > 0 && nums[index] <= nums.length){\n          swap(index, nums[index] - 1)\n      } else {\n          index += 1\n      }\n   }\n\n  for (let i=0; i<nums.length; i++) {\n    if (nums[i] !== i + 1) return i + 1;\n  }\n  return nums.length + 1\n}\n\nconsole.log(firstMissingPositive([3,4,-1,1]))\n`.trim();\nconst largestNumber = `\nfunction largestNumber(nums = []) {\n  nums.sort((a, b) => {\n    const digitsA = a.toString(10) + b.toString(10);\n    const digitsB = b.toString(10) + a.toString(10);\n\n    for (let i = 0; i < digitsA.length; i++) {\n      const digitB = parseInt(digitsB[i], 10);\n      const digitA = parseInt(digitsA[i], 10);\n\n      if (digitB > digitA || digitB < digitA) return digitB - digitA;\n    }\n    return 0\n  })\n  \n  const result = nums.join('')\n  return result[0] === '0' ? '0' : result\n}\n\nconsole.log(largestNumber([10,2]))\n`.trim();\nconst maxSubArray = `\nfunction maxSubArray(nums){\n  let max = -Infinity;\n  let currentMax = -Infinity;\n\n  for (let i=0; i<nums.length; i++) {\n    currentMax = Math.max(\n      currentMax + nums[i],\n      nums[i],\n    )\n    max = Math.max(max, currentMax)\n  }\n  return max\n}\n\nconsole.log(maxSubArray([-2,1,-3,4,-1,2,1,-5,4]))\n`.trim();\nconst searchInsert = `\nfunction searchInsert(nums, target){\n  function aux(low, high){\n    if (low > high) return low;\n\n    const middle = Math.floor((low + high) / 2)\n    \n    if (target === nums[middle]) {\n      return middle\n    } if (target > nums[middle]) {\n      return aux(middle + 1, high)\n    }\n    return aux(low, middle - 1)\n  }\n  return aux(0, nums.length - 1)\n}\n\nconsole.log(searchInsert([1,3,5,6], 5))\n`.trim();\nconst maximumGap = `\nfunction maximumGap(nums = []) {\n  const maxValue = Math.max(...nums)\n\n  function countingSort(place){\n    const count = []\n    nums.forEach((num) => {\n      const index = Math.floor(num / place) % 10\n      count[index] = count[index] || []\n      count[index].push(num)\n    })\n    return count.reduce((acc, v) => {\n      if (v !== undefined) {\n        acc = acc.concat(v)\n      }\n      return acc\n    }, [])\n  }\n\n  let place = 1\n  while (Math.floor(maxValue / place) > 0) {\n    nums = countingSort(place)\n    place *= 10\n  }\n  let max = 0\n  for (let i = 1; i < nums.length; i++) {\n    max = Math.max(max, nums[i] - nums[i - 1])\n  }\n  return max\n}\n\nconsole.log(maximumGap([3,6,9,1]))\n`.trim();\nconst getFactors = `\nfunction getFactors(n){\n  const result = [];\n\n  function aux(remain, start = 2, current = []){\n    if (remain === 1) {\n      if (current.length > 1) {\n        result.push([...current])\n      }\n      return\n    }\n    \n    for (let i = start; i <= remain; i++) {\n      if (remain % i === 0) {\n        current.push(i)\n        aux(remain / i, i, current)\n        current.pop()\n      }\n    }\n  }\n  aux(n)\n  return result\n}\n\nconsole.log(getFactors(345))\n`.trim();\n\nclass DSLogic7 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, \"4. 3 Sum Closest\"), \"Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, \"Ex. \"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [-1,2,1,-4], target = 1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, \"Output: \"), \"2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, \"Explanation: \"), \"The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: threeSumClosest,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, \"18. First Missing Positive.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, \"Input: \"), \"[3,4,-1,1]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, \"Output: \"), \"2\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: firstMissingPositive,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, \"21. Largest Number.\"), \"Given a list of non negative integers, arrange them such that they form the largest number.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: largestNumber,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, \"22. Maximum Subarray.\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, \"Input: \"), \"nums = [-2,1,-3,4,-1,2,1,-5,4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, \"Output: \"), \"6\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, \"Explanation: \"), \"[4,-1,2,1] has the largest sum = 6.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maxSubArray,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, \"23. Search Insert Position.\"), \"Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, \"Input: \"), \"[1,3,5,6], 5\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, \"Output: \"), \"2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, \"Example 2:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, \"Input: \"), \"[1,3,5,6], 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, \"Output: \"), \"1\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: searchInsert,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, \"25. Maximum Gap.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maximumGap,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, \"17. Factor Combinations.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: getFactors,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default withStyles(styles)(DSLogic7);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/arrayNumAlgo.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","threeSumClosest","trim","firstMissingPositive","largestNumber","maxSubArray","searchInsert","maximumGap","getFactors","DSLogic7","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\n\n\nconst threeSumClosest = `\nfunction threeSumClosest(nums, target) {\n  let diff = Infinity;\n  let result = 0;\n  nums.sort((a, b) => a - b);\n\n  for (let i = 0; i < nums.length; i++) {\n    let left = i + 1;\n    let right = nums.length - 1;\n    while (left < right) {\n      const sum = nums[i] + nums[left] + nums[right];\n      const currentDiff = sum - target;\n\n      if (currentDiff > 0) {\n        right -= 1;\n      } else {\n        left += 1;\n      }\n      if (Math.abs(currentDiff) < diff) {\n        result = sum;\n      }\n      diff = Math.min(Math.abs(currentDiff), diff);\n    }\n  }\n  return result;\n}\n\nconsole.log(threeSumClosest([-1,2,1,-4]))\n`.trim();\n\nconst firstMissingPositive = `\nfunction firstMissingPositive(nums = []){\n  function swap(a, b){\n    const temp = nums[a]\n    nums[a] = nums[b]\n    nums[b] = temp\n  }\n\n  let index = 0\n  while (index < nums.length) {\n    if (nums[index] !== nums[nums[index] - 1] && nums[index] > 0 && nums[index] <= nums.length){\n          swap(index, nums[index] - 1)\n      } else {\n          index += 1\n      }\n   }\n\n  for (let i=0; i<nums.length; i++) {\n    if (nums[i] !== i + 1) return i + 1;\n  }\n  return nums.length + 1\n}\n\nconsole.log(firstMissingPositive([3,4,-1,1]))\n`.trim();\n\nconst largestNumber = `\nfunction largestNumber(nums = []) {\n  nums.sort((a, b) => {\n    const digitsA = a.toString(10) + b.toString(10);\n    const digitsB = b.toString(10) + a.toString(10);\n\n    for (let i = 0; i < digitsA.length; i++) {\n      const digitB = parseInt(digitsB[i], 10);\n      const digitA = parseInt(digitsA[i], 10);\n\n      if (digitB > digitA || digitB < digitA) return digitB - digitA;\n    }\n    return 0\n  })\n  \n  const result = nums.join('')\n  return result[0] === '0' ? '0' : result\n}\n\nconsole.log(largestNumber([10,2]))\n`.trim();\n\nconst maxSubArray = `\nfunction maxSubArray(nums){\n  let max = -Infinity;\n  let currentMax = -Infinity;\n\n  for (let i=0; i<nums.length; i++) {\n    currentMax = Math.max(\n      currentMax + nums[i],\n      nums[i],\n    )\n    max = Math.max(max, currentMax)\n  }\n  return max\n}\n\nconsole.log(maxSubArray([-2,1,-3,4,-1,2,1,-5,4]))\n`.trim();\n\nconst searchInsert = `\nfunction searchInsert(nums, target){\n  function aux(low, high){\n    if (low > high) return low;\n\n    const middle = Math.floor((low + high) / 2)\n    \n    if (target === nums[middle]) {\n      return middle\n    } if (target > nums[middle]) {\n      return aux(middle + 1, high)\n    }\n    return aux(low, middle - 1)\n  }\n  return aux(0, nums.length - 1)\n}\n\nconsole.log(searchInsert([1,3,5,6], 5))\n`.trim();\n\nconst maximumGap = `\nfunction maximumGap(nums = []) {\n  const maxValue = Math.max(...nums)\n\n  function countingSort(place){\n    const count = []\n    nums.forEach((num) => {\n      const index = Math.floor(num / place) % 10\n      count[index] = count[index] || []\n      count[index].push(num)\n    })\n    return count.reduce((acc, v) => {\n      if (v !== undefined) {\n        acc = acc.concat(v)\n      }\n      return acc\n    }, [])\n  }\n\n  let place = 1\n  while (Math.floor(maxValue / place) > 0) {\n    nums = countingSort(place)\n    place *= 10\n  }\n  let max = 0\n  for (let i = 1; i < nums.length; i++) {\n    max = Math.max(max, nums[i] - nums[i - 1])\n  }\n  return max\n}\n\nconsole.log(maximumGap([3,6,9,1]))\n`.trim();\n\nconst getFactors = `\nfunction getFactors(n){\n  const result = [];\n\n  function aux(remain, start = 2, current = []){\n    if (remain === 1) {\n      if (current.length > 1) {\n        result.push([...current])\n      }\n      return\n    }\n    \n    for (let i = start; i <= remain; i++) {\n      if (remain % i === 0) {\n        current.push(i)\n        aux(remain / i, i, current)\n        current.pop()\n      }\n    }\n  }\n  aux(n)\n  return result\n}\n\nconsole.log(getFactors(345))\n`.trim();\n\n\n\n\nclass DSLogic7 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n             \n\n              <h3>4. 3 Sum Closest</h3>\n              Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.\n              <br/>\n              <br/>\n              <b>Ex. </b>\n              <b>Input: </b>nums = [-1,2,1,-4], target = 1<br/>\n              <b>Output: </b>2<br/>\n              <b>Explanation: </b>The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n              <div style={titles}>\n                <PrismCode\n                  code={threeSumClosest}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>18. First Missing Positive.</h3>\n              <b>Input: </b>[3,4,-1,1]<br/>\n              <b>Output: </b>2\n              <div style={titles}>\n                <PrismCode\n                  code={firstMissingPositive}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>21. Largest Number.</h3>\n              Given a list of non negative integers, arrange them such that they form the largest number.\n              <div style={titles}>\n                <PrismCode\n                  code={largestNumber}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>22. Maximum Subarray.</h3>\n              <b>Input: </b>nums = [-2,1,-3,4,-1,2,1,-5,4]<br/>\n              <b>Output: </b>6<br/>\n              <b>Explanation: </b>[4,-1,2,1] has the largest sum = 6.\n              <div style={titles}>\n                <PrismCode\n                  code={maxSubArray}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>23. Search Insert Position.</h3>\n              Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n              <br/>\n              <b>Input: </b>[1,3,5,6], 5<br/>\n              <b>Output: </b>2<br/><br/>\n              <b>Example 2:</b><br/>\n\n              <b>Input: </b>[1,3,5,6], 2<br/>\n              <b>Output: </b>1\n              <div style={titles}>\n                <PrismCode\n                  code={searchInsert}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>25. Maximum Gap.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={maximumGap}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n\n              <h3>17. Factor Combinations.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={getFactors}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic7));\n"]},"metadata":{},"sourceType":"module"}