{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var fsdir=\"\\nfs.stat('filename.js', (err, stats) => {\\n  if (err) {\\n    return console.log(err)\\n  }\\n  console.log(stats)\\n  console.log(stats.isFile())\\n  console.log(stats.isDirectory())\\n  console.log(stats.size)\\n})\\n\\nfs.opendir('filename.js', (err, dir) => {\\n  if (err) {\\n    return console.log(err)\\n  }\\n  console.log(dir.path)\\n})\\n\".trim();var read=\"\\nconst fs = require(\\\"fs\\\"); \\n\\nfs.readFile('input.txt', (err, data) => {                                         // Asynchronous read \\n   if (err) { \\n      return console.error(err); \\n   } \\n   console.log(\\\"Asynchronous read: \\\" + data.toString()); \\n});\\n\\n\\nconst data = fs.readFileSync('input.txt');                                        // Synchronous read \\nconsole.log(\\\"Synchronous read: \\\" + data.toString()); \\n\".trim();var opens=\"\\nconst fs = require(\\\"fs\\\"); \\n  \\nconsole.log(\\\"opening file!\\\"); \\nfs.open('input.txt', 'r+', function(err, fd) { \\n   if (err) { \\n      return console.error(err); \\n   } \\n   console.log(\\\"File open successfully\\\");      \\n}); \\n\\n\\n//2\\nvar fs = require(\\\"fs\\\"); \\nvar buf = new Buffer(1024); \\n  \\nconsole.log(\\\"opening an existing file\\\"); \\nfs.open('input.txt', 'r+', (err, fd) => { \\n   if (err) { \\n      return console.error(err); \\n   } \\n   console.log(\\\"File opened successfully!\\\"); \\n   console.log(\\\"reading the file\\\"); \\n     \\n   fs.read(fd, buf, 0, buf.length, 0, (err, bytes) => { \\n      if (err){ \\n         console.log(err); \\n      } \\n      console.log(bytes + \\\" bytes read\\\"); \\n      \\n      if(bytes > 0){                                                        // Print only read bytes to avoid junk. \\n         console.log(buf.slice(0, bytes).toString()); \\n      } \\n   }); \\n}); \".trim();var writeFiles=\"\\nvar fs = require(\\\"fs\\\"); \\n\\nconsole.log(\\\"writing into existing file\\\"); \\nfs.writeFile('input.txt', 'Geeks For Geeks', (err) => { \\nif (err) { \\n\\treturn console.error(err); \\n} \\n\\t\\nconsole.log(\\\"Data written successfully!\\\"); \\nconsole.log(\\\"Let's read newly written data\\\"); \\n\\t\\nfs.readFile('input.txt', (err, data) => { \\n\\tif (err) { \\n\\t\\treturn console.error(err); \\n\\t} \\n\\tconsole.log(\\\"Asynchronous read: \\\" + data.toString()); \\n}); \\n}); \\n\".trim();var appendFiles=\"\\nvar fs = require('fs'); \\n\\nvar data = \\\"\\nLearn Node.js\\\"; \\n\\n// Append data to file \\nfs.appendFile('input.txt', data, 'utf8', \\n\\n\\t// Callback function \\n\\tfunction(err) { \\n\\t\\tif (err) throw err; \\n\\t\\tconsole.log(\\\"Data is appended to file successfully.\\\") \\n}); \".trim();var rename=\"\\nvar fs = require('fs');\\n\\nfs.rename('input.txt', 'myrenamedfile.txt',  (err) => {\\n  if (err) throw err;\\n  console.log('File Renamed!');\\n});\".trim();var delFiles=\"\\nvar fs = require(\\\"fs\\\"); \\n\\nconsole.log(\\\"deleting an existing file\\\"); \\nfs.unlink('input.txt', (err) => { \\nif (err) { \\n\\treturn console.error(err); \\n} \\nconsole.log(\\\"File deleted successfully!\\\"); \\n}); \\n\".trim();var watch=\"\\nvar fs = require('fs');\\nfs.watch(__filename, { persistent: false }, (event, filename) => {\\n    console.log(event);\\n    console.log(filename);\\n})\\n\\nsetImmediate(function() {\\n    fs.rename(__filename, __filename + '.new', () => {});\\n});\".trim();var CreateFiles=\"\\nvar fs = require('fs');\\n\\nfs.appendFile('demo.txt', 'Hello content!', (err) => {\\n    if (err) throw err;\\n    console.log('Saved!');\\n});\".trim();var ReadFiles=\"\\n//index.html\\n<html>\\n<body>\\n<h1>My Header</h1>\\n<p>My paragraph.</p>\\n</body>\\n</html>\\n\\n\\n//index.js\\nvar http = require('http');\\nvar fs = require('fs');\\nhttp.createServer(function(req, res) {\\n    fs.readFile('index.html', function(err, data) {\\n        res.writeHead(200, { 'Content-Type': 'text/html' });\\n        res.write(data);\\n        res.end();\\n    });\\n}).listen(4000);\".trim();var RenameFiles=\"\\nvar fs = require('fs');\\n\\nfs.rename('demo.txt', 'text.txt', (err) => {\\n    if (err) throw err;\\n    console.log('File Renamed!');\\n});\".trim();var OpenFiles=\"\\nvar fs = require('fs');\\n\\nfs.open('read.txt', 'w', (err, file) => {\\n    if (err) throw err;\\n    console.log('Saved!');\\n});\".trim();var deleteFiles=\"\\nvar fs = require('fs');\\n\\nfs.unlink('will_delete.txt', function (err) {\\n  if (err) throw err;\\n  console.log('File deleted!');\\n});\".trim();var writeFile=\"\\nvar fs = require('fs');\\n\\nfs.writeFile('write.html', 'Hello content!', function (err) {\\n  if (err) throw err;\\n  console.log('Saved!');\\n});\".trim();var UpdateFiles=\"\\n//append.txt\\nThis is my text.\\n\\n\\n//append_file.js\\nvar fs = require('fs');\\n\\nfs.appendFile('append.txt', ' This is my text.', function (err) {\\n  if (err) throw err;\\n  console.log('Updated!');\\n});\".trim();var FileSys=/*#__PURE__*/function(_Component){_inherits(FileSys,_Component);function FileSys(){_classCallCheck(this,FileSys);return _possibleConstructorReturn(this,_getPrototypeOf(FileSys).apply(this,arguments));}_createClass(FileSys,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"What is a control flow function? What are the steps does it execute?\"),React.createElement(\"p\",null,\"Control flow function runs in between several asynchronous function calls.\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Control the order of execution. \"),React.createElement(\"li\",null,\"Collect data.\"),React.createElement(\"li\",null,\"Limit concurrency. \"),React.createElement(\"li\",null,\"Call the next step in the program.\"))),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Explain the working mechanism of control flow function?\"),React.createElement(\"i\",null,\"Control flow function is the sequence in which statements or functions are executed. Since I/O operations are non-blocking in Node.js, control flow cannot be linear. Therefore, it registers a callback to the event loop and passes the control back to the node, so that the next lines of code can run without interruption. Ex:Read File\"),React.createElement(\"br\",null),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"fs.state(): \"),\"It helps to get various statistic of a file.\"),React.createElement(\"br\",null),\"To deal with directories here are 2 methods.\",React.createElement(\"li\",null,React.createElement(\"b\",null,\"opendir(): \"),\"readfile()/ writefile()\"),React.createElement(\"li\",null,React.createElement(\"b\",null,\"opendirSync(): \"),\"readfileSync()/ writefileSync()\")),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:fsdir,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Read File\"),React.createElement(\"p\",null,\"fs method read the entire file into buffer.\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:read,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Open File\"),React.createElement(\"p\",null,\"The fs.open() method is used to create, read, or write a file. \"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:opens,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Write\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:writeFiles,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"p\",null,React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"fs.appendFile(): \"),\"method appends specified content to a file. If the file does not exist, the file will be created.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"fs.appendFile(filepath, data, options, callback);\"))),React.createElement(\"br\",null),React.createElement(\"li\",null,React.createElement(\"b\",null,\"fs.appendFile(): \"),\"method is used to synchronously append/Update the data to the file or Create a file.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"fs.appendFileSync(filepath, data, options);\"))))),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:appendFiles,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Rename File\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:rename,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Delete File\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:delFiles,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Watch File\"),React.createElement(\"p\",null,React.createElement(\"ul\",null,React.createElement(\"li\",null,\"This will set up a watcher on itself, change its own filename, and exit.\"),React.createElement(\"li\",null,\"Watcher channels can be closed at any time using the following code snippet.\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"b\",null,\"const w = fs.watch('file', function()\",\") w.close();\"))))),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:watch,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"File System2\"),React.createElement(\"b\",null,\"Create Files\"),React.createElement(\"br\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:CreateFiles,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Write File\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:writeFile,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Open File\"),\"A text.txt file create in same the folter.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:OpenFiles,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Read Files\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:ReadFiles,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Rename Files\"),\"A text.txt file create without any data in same the folter.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:RenameFiles,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Delete Files\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:deleteFiles,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"Update Files\"),React.createElement(\"b\",null),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:UpdateFiles,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return FileSys;}(Component);export default withStyles(styles)(FileSys);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/nodeJs/nodeDeep/filSystems.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","fsdir","trim","read","opens","writeFiles","appendFiles","rename","delFiles","watch","CreateFiles","ReadFiles","RenameFiles","OpenFiles","deleteFiles","writeFile","UpdateFiles","FileSys","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst fsdir = `\nfs.stat('filename.js', (err, stats) => {\n  if (err) {\n    return console.log(err)\n  }\n  console.log(stats)\n  console.log(stats.isFile())\n  console.log(stats.isDirectory())\n  console.log(stats.size)\n})\n\nfs.opendir('filename.js', (err, dir) => {\n  if (err) {\n    return console.log(err)\n  }\n  console.log(dir.path)\n})\n`.trim();\n\nconst read = `\nconst fs = require(\"fs\"); \n\nfs.readFile('input.txt', (err, data) => {                                         // Asynchronous read \n   if (err) { \n      return console.error(err); \n   } \n   console.log(\"Asynchronous read: \" + data.toString()); \n});\n\n\nconst data = fs.readFileSync('input.txt');                                        // Synchronous read \nconsole.log(\"Synchronous read: \" + data.toString()); \n`.trim();\n\nconst opens = `\nconst fs = require(\"fs\"); \n  \nconsole.log(\"opening file!\"); \nfs.open('input.txt', 'r+', function(err, fd) { \n   if (err) { \n      return console.error(err); \n   } \n   console.log(\"File open successfully\");      \n}); \n\n\n//2\nvar fs = require(\"fs\"); \nvar buf = new Buffer(1024); \n  \nconsole.log(\"opening an existing file\"); \nfs.open('input.txt', 'r+', (err, fd) => { \n   if (err) { \n      return console.error(err); \n   } \n   console.log(\"File opened successfully!\"); \n   console.log(\"reading the file\"); \n     \n   fs.read(fd, buf, 0, buf.length, 0, (err, bytes) => { \n      if (err){ \n         console.log(err); \n      } \n      console.log(bytes + \" bytes read\"); \n      \n      if(bytes > 0){                                                        // Print only read bytes to avoid junk. \n         console.log(buf.slice(0, bytes).toString()); \n      } \n   }); \n}); `.trim();\n\nconst writeFiles = `\nvar fs = require(\"fs\"); \n\nconsole.log(\"writing into existing file\"); \nfs.writeFile('input.txt', 'Geeks For Geeks', (err) => { \nif (err) { \n\treturn console.error(err); \n} \n\t\nconsole.log(\"Data written successfully!\"); \nconsole.log(\"Let's read newly written data\"); \n\t\nfs.readFile('input.txt', (err, data) => { \n\tif (err) { \n\t\treturn console.error(err); \n\t} \n\tconsole.log(\"Asynchronous read: \" + data.toString()); \n}); \n}); \n`.trim();\n\nconst appendFiles = `\nvar fs = require('fs'); \n\nvar data = \"\\nLearn Node.js\"; \n\n// Append data to file \nfs.appendFile('input.txt', data, 'utf8', \n\n\t// Callback function \n\tfunction(err) { \n\t\tif (err) throw err; \n\t\tconsole.log(\"Data is appended to file successfully.\") \n}); `.trim();\n\nconst rename = `\nvar fs = require('fs');\n\nfs.rename('input.txt', 'myrenamedfile.txt',  (err) => {\n  if (err) throw err;\n  console.log('File Renamed!');\n});`.trim();\n\nconst delFiles = `\nvar fs = require(\"fs\"); \n\nconsole.log(\"deleting an existing file\"); \nfs.unlink('input.txt', (err) => { \nif (err) { \n\treturn console.error(err); \n} \nconsole.log(\"File deleted successfully!\"); \n}); \n`.trim();\n\nconst watch = `\nvar fs = require('fs');\nfs.watch(__filename, { persistent: false }, (event, filename) => {\n    console.log(event);\n    console.log(filename);\n})\n\nsetImmediate(function() {\n    fs.rename(__filename, __filename + '.new', () => {});\n});`.trim();\n\nconst CreateFiles = `\nvar fs = require('fs');\n\nfs.appendFile('demo.txt', 'Hello content!', (err) => {\n    if (err) throw err;\n    console.log('Saved!');\n});`.trim();\n\nconst ReadFiles = `\n//index.html\n<html>\n<body>\n<h1>My Header</h1>\n<p>My paragraph.</p>\n</body>\n</html>\n\n\n//index.js\nvar http = require('http');\nvar fs = require('fs');\nhttp.createServer(function(req, res) {\n    fs.readFile('index.html', function(err, data) {\n        res.writeHead(200, { 'Content-Type': 'text/html' });\n        res.write(data);\n        res.end();\n    });\n}).listen(4000);`.trim();\n\nconst RenameFiles = `\nvar fs = require('fs');\n\nfs.rename('demo.txt', 'text.txt', (err) => {\n    if (err) throw err;\n    console.log('File Renamed!');\n});`.trim();\n\nconst OpenFiles = `\nvar fs = require('fs');\n\nfs.open('read.txt', 'w', (err, file) => {\n    if (err) throw err;\n    console.log('Saved!');\n});`.trim();\n\nconst deleteFiles = `\nvar fs = require('fs');\n\nfs.unlink('will_delete.txt', function (err) {\n  if (err) throw err;\n  console.log('File deleted!');\n});`.trim();\n\nconst writeFile = `\nvar fs = require('fs');\n\nfs.writeFile('write.html', 'Hello content!', function (err) {\n  if (err) throw err;\n  console.log('Saved!');\n});`.trim();\n\nconst UpdateFiles = `\n//append.txt\nThis is my text.\n\n\n//append_file.js\nvar fs = require('fs');\n\nfs.appendFile('append.txt', ' This is my text.', function (err) {\n  if (err) throw err;\n  console.log('Updated!');\n});`.trim();\n\n\nclass FileSys extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>What is a control flow function? What are the steps does it execute?</h3>\n              <p>\n                Control flow function runs in between several asynchronous function calls.\n                <ul>\n                  <li>Control the order of execution. </li>\n                  <li>Collect data.</li>\n                  <li>Limit concurrency. </li>\n                  <li>Call the next step in the program.</li>\n                </ul>\n              </p>\n              <br />\n\n              <h3>Explain the working mechanism of control flow function?</h3>\n              <i>\n                Control flow function is the sequence in which statements or functions are executed. Since I/O operations are non-blocking in Node.js, control flow cannot be linear. Therefore, it registers a callback to the event loop and passes the control back to the node, so that the next lines of code can run without interruption. Ex:Read File\n              </i>\n              <br />\n              <ul>\n                <li><b>fs.state(): </b>It helps to get various statistic of a file.</li>\n                <br />\n                To deal with directories here are 2 methods.\n                <li><b>opendir(): </b>readfile()/ writefile()</li>\n                <li><b>opendirSync(): </b>readfileSync()/ writefileSync()</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={fsdir}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Read File</b>\n              <p>fs method read the entire file into buffer.</p>\n              <div style={titles}>\n                <PrismCode\n                  code={read}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Open File</b>\n              <p>The fs.open() method is used to create, read, or write a file. </p>\n              <div style={titles}>\n                <PrismCode\n                  code={opens}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Write</b>\n              <div style={titles}>\n                <PrismCode\n                  code={writeFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <p>\n                <ul>\n                  <li><b>fs.appendFile(): </b>method appends specified content to a file. If the file does not exist, the file will be created.</li>\n                  <ul><li><b>fs.appendFile(filepath, data, options, callback);</b></li></ul>\n                  <br />\n                  <li><b>fs.appendFile(): </b>method is used to synchronously append/Update the data to the file or Create a file.</li>\n                  <ul><li><b>fs.appendFileSync(filepath, data, options);</b></li></ul>\n                </ul>\n              </p>\n              <div style={titles}>\n                <PrismCode\n                  code={appendFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Rename File</b>\n              <div style={titles}>\n                <PrismCode\n                  code={rename}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Delete File</b>\n              <div style={titles}>\n                <PrismCode\n                  code={delFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Watch File</b>\n              <p>\n                <ul>\n                  <li>This will set up a watcher on itself, change its own filename, and exit.</li>\n                  <li>Watcher channels can be closed at any time using the following code snippet.</li>\n                  <ul><li><b>const w = fs.watch('file', function(){ }) w.close();</b></li></ul>\n                </ul>\n              </p>\n              <div style={titles}>\n                <PrismCode\n                  code={watch}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>File System2</h3>\n              <b>Create Files</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={CreateFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Write File</b>\n              <div style={titles}>\n                <PrismCode\n                  code={writeFile}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Open File</b>\n              A text.txt file create in same the folter.\n              <div style={titles}>\n                <PrismCode\n                  code={OpenFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Read Files</b>\n              <div style={titles}>\n                <PrismCode\n                  code={ReadFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Rename Files</b>\n              A text.txt file create without any data in same the folter.\n              <div style={titles}>\n                <PrismCode\n                  code={RenameFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Delete Files</b>\n              <div style={titles}>\n                <PrismCode\n                  code={deleteFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Update Files</b>\n              <b></b>\n              <div style={titles}>\n                <PrismCode\n                  code={UpdateFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(FileSys));\n"]},"metadata":{},"sourceType":"module"}