{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic4.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nimport Stcksval from '../../../assets/stcks.png';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\nconst redesign = {\n  height: 200,\n  width: 500\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst factorial = `\nvar factorial = function(n){\n  if(n === 1) return 1\n  return n * factorial(n-1)\n }\n \n console.log(factorial(4));\n `.trim();\nconst prime = `\n function prime(){\n   let i, j, result=[];\n   for(i=0; i<100; i++){\n     var count=0\n     for(j=2; j<i; j++){\n       if(i%j == 0){\n         count += 1;\n       }\n     }\n     if(count==0){\n       result.push(i);\n     }\n   }\n   \n   console.log(result);\n }\n \n prime();\n `.trim();\nconst countPrimes = `\n const countPrimes = (n) => {\n   const map = []\n   for (let i = 2; i < n; i++) {\n     map[i] = true\n   }\n   for (let i = 2; i * i < n; i++) {\n     if (map[i]) {\n       for (let j = i * i; j < n; j += i) {\n         map[j] = false\n       }\n     }\n   }\n   return map.filter(num => num === true).length\n }\n \n console.log(countPrimes(10))`.trim();\nconst magicNumber = `\n function magicNum(){\n   const random = Math.random(0,1)\n   return random;\n }\n \n function main(){\n   const result = Math.random(0, magicNum);\n   console.log(result);\n }\n \n main();\n `.trim();\nconst possible = `\nfunction isInt(value) {\n  var x;\n  if (isNaN(value)) {\n    return false;\n  }\n  x = parseFloat(value);\n  return (x | 0) === x;\n}\n\nconsole.log(isInt(0));`.trim();\nconst common_divisor = `\nfunction numbers(x, y) {\n    if ((typeof x !== 'number') || (typeof y !== 'number'))\n      return false;\n      x = Math.abs(x);\n      y = Math.abs(y);\n        while(y) {\n          var i = y;\n          y = x % y;\n          x = i;\n        }\n  return x;\n  }\n \n  console.log(numbers(12, 4));\n  console.log(numbers(9, 3));`.trim();\nconst addTwoNumbers = `\nfunction ListNode(val) {\n  this.val = val\n  this.next = null\n}\n\nconst addTwoNumbers = (l1, l2) => {\n  let h1 = l1\n  let h2 = l2\n  let digit = 0\n  let head = null\n  let current = null\n  while (h1 || h2) {\n    const num1 = h1 ? h1.val : 0\n    const num2 = h2 ? h2.val : 0\n    let value = num1 + num2 + digit\n    if (value >= 10) {\n      value -= 10\n      digit = 1\n    } else {\n      digit = 0\n    }\n    h1 = h1 ? h1.next : null\n    h2 = h2 ? h2.next : null\n    const node = new ListNode(value)\n    if (!head) {\n      head = node\n      current = node\n    } else {\n      current.next = node\n      current = node\n    }\n  }\n  if (digit === 1) {\n    current.next = new ListNode(1)\n  }\n  return head\n}\n\nconsole.log(addTwoNumbers())`.trim();\nconst reverse = `\nconst reverse = function (x) {\n  let max = (2 ** 31) - 1\n  let min = - (2 ** 31)\n  \n  const isMinus = x < 0\n  const str = String(Math.abs(x)).split('').reverse().join('')\n  const result =  isMinus ? Number('-'$'{str}') : Number(str)\n  if (result > max || result < min) {\n    return 0\n  }\n  return result\n}\n\nconsole.log(reverse(123))`.trim();\nconst brokenCalc = `\nconst brokenCalc = function (X, Y) {\n  let result = 0\n  while (Y > X) {\n    if (Y % 2 === 0) {\n      Y /= 2\n    } else {\n      Y += 1\n    }\n    result += 1\n  }\n  return result + X - Y\n}\n\nconsole.log(brokenCalc(5, 8))`.trim();\nconst addStrings = `\nconst addStrings = (num1, num2) => {\n  const reversedNum1 = num1.split('').reverse()\n  const reversedNum2 = num2.split('').reverse()\n  const { shorter, longer } = reversedNum1.length < reversedNum2.length\n    ? { shorter: reversedNum1, longer: reversedNum2 }\n    : { shorter: reversedNum2, longer: reversedNum1 }\n\n  let rem = 0\n  let result = longer.reduce((acc, digit1, index) => {\n    const total = parseInt(digit1, 10) + (parseInt(shorter[index], 10) || 0) + rem\n    if (total >= 10) {\n      rem = 1\n    } else {\n      rem = 0\n    }\n    return [\n      ...acc,\n      total >= 10 ? total - 10 : total,\n    ]\n  }, [])\n  result = rem === 1 ? [...result, rem] : result\n  return result.reverse().join('')\n}\n\nconst zero = (count) => {\n  let result = ''\n  while (count >= 1) {\n    result += '0'\n    count -= 1\n  }\n  return result\n}\nconst multiply = (num1 = '', num2 = '') => {\n  let result = 0\n  for (let i = num2.length - 1; i >= 0; i--) {\n    let current = ''\n    let base = 0\n    for (let j = num1.length - 1; j >= 0; j--) {\n      let currentResult = parseInt(num1[j], 10) * parseInt(num2[i], 10) + base\n      if (currentResult >= 10) {\n        base = Math.floor(currentResult / 10)\n        currentResult -= base * 10\n      } else {\n        base = 0\n      }\n      current = '$'{currentResult + current}'\n    }\n    if (base > 0) {\n      current = base + current\n    }\n    // 偷懒\n    result = addStrings(result || '0', current + zero(num2.length - 1 - i))\n  }\n  if (result.length > 0 && result[0] === '0') {\n    return '0'\n  }\n  return result\n}\n\nconsole.log(addStrings(\"2\",\"3\"))`.trim();\nconst mySqrt = `\nconst mySqrt = (x) => {\n  let r = x\n  while (r * r > x) {\n    r = Math.floor((r + x / r) / 2)\n  }\n\n  return r\n}\n\nconsole.log(mySqrt(4))`.trim();\nconst myPow = `\nconst myPow = (x, n) => {\n  if (n === 0) {\n    return 1\n  }\n  const temp = myPow(x, Math.floor(Math.abs(n / 2)))\n  const result = n % 2 === 0 ? temp * temp : x * temp * temp\n  return n < 0 ? 1 / result : result\n}\n\nconsole.log(myPow(2.00000, 10))`.trim();\nconst letterCombinations = `\nconst letterCombinations = (digits = '') => {\n  const map = {\n    2: ['a', 'b', 'c'],\n    3: ['d', 'e', 'f'],\n    4: ['g', 'h', 'i'],\n    5: ['j', 'k', 'l'],\n    6: ['m', 'n', 'o'],\n    7: ['p', 'q', 'r', 's'],\n    8: ['t', 'u', 'v'],\n    9: ['w', 'x', 'y', 'z'],\n  }\n  if (!digits.length) {\n    return []\n  }\n  let result = ['']\n  let index = 0\n  while (index < digits.length) {\n    const next = map[digits[index]]\n    const nextResult = []\n    for (let i = 0; i < result.length; i++) {\n      for (let j = 0; j < next.length; j++) {\n        nextResult.push(result[i] + next[j])\n      }\n    }\n    result = nextResult\n    index++\n  }\n  return result\n}\n\nconsole.log(letterCombinations(\"23\"))`.trim();\nconst isValid = `\nconst isValid = function (s) {\n  const stack = []\n  const pair = {\n    '[': ']',\n    '{': '}',\n    '(': ')',\n  }\n  const isPaired = (a, b) => pair[a] === b\n\n  for (c of s) {\n    if (isPaired(stack[stack.length - 1], c)) {\n      stack.pop()\n    } else {\n      stack.push(c)\n    }\n  }\n  return stack.length === 0\n}\n\nconsole.log(isValid(\"()\"))`.trim();\nconst generateParenthesis = `\nconst generateParenthesis = function (n) {\n  const result = []\n  const aux = (current, left, right) => {\n    if (left === n && right === n) {\n      result.push(current)\n      return\n    }\n    if (left < right || left > n || right > n) {\n      return\n    }\n    aux('$'{current}(', left + 1, right)\n    aux('$'{current})', left, right + 1)\n  }\n  aux('', 0, 0)\n  return result\n}\n`.trim();\nconst swap = `const swap = (a, b, arr) => { \n  if (a !== b) {\n    const temp = arr[a]\n    arr[a] = arr[b] \n    arr[b] = temp \n  }\n}\n\nconst Heap = compareFn => (arr = []) => {\n  const left = index => 2 * index + 1\n  const right = index => 2 * index + 2\n  const parent = index => Math.floor((index - 1) / 2)\n  const size = () => arr.length\n\n  // log(n)\n  const heapify = (index) => {\n    const l = left(index)\n    const r = right(index)\n    let current = index\n    if ((l < size()) && compareFn(arr[current], arr[l]) > 0) {\n      current = l\n    }\n    if ((r < size()) && compareFn(arr[current], arr[r]) > 0) {\n      current = r\n    }\n    if (current !== index) {\n      swap(current, index, arr)\n      heapify(current)\n    }\n  }\n  // log(n)\n  const heapifyUp = (index) => {\n    const p = parent(index)\n    if (p >= 0 && compareFn(arr[p], arr[index]) > 0) {\n      swap(p, index, arr)\n      heapifyUp(p)\n    }\n  }\n  // O(n)\n  const buildHeap = () => {\n    for (let i = Math.floor(arr.length / 2); i >= 0; i--) {\n      heapify(i)\n    }\n  }\n  const extract = () => {\n    swap(0, arr.length - 1, arr)\n    const top = arr.pop()\n    heapify(0)\n    return top\n  }\n  const remove = (item) => {\n    const index = arr.findIndex(x => compareFn(x, item) === 0)\n    if (index === -1) {\n      return\n    }\n    arr[index] = arr.pop() // eslint-disable-line\n    const p = parent(index)\n    if (p < 0 || compareFn(p, arr[index]) < 0) {\n      heapify(index)\n    } else {\n      heapifyUp(index)\n    }\n  }\n  buildHeap()\n  return {\n    getHeap: () => arr,\n    peek: () => {\n      if (arr.length === 0) {\n        return null\n      }\n      return arr[0]\n    },\n    add: (item) => {\n      arr.push(item)\n      heapifyUp(arr.length - 1)\n    },\n    extract,\n    remove,\n    size,\n  }\n}\n\nconst mergeKLists = (lists = []) => {\n  const minHeap = Heap((a, b) => a.val - b.val)([])\n  lists.forEach((node) => {\n    if (node) {\n      minHeap.add(node)\n    }\n  })\n  const head = minHeap.extract() || null\n  let current = head\n  while (minHeap.size() > 0) {\n      console.log(minHeap.size())\n    if (current.next) {\n      minHeap.add(current.next)\n    }\n    current.next = minHeap.extract()\n    current = current.next\n  }\n  return head\n}\n\n\nconsole.log(swap([[1,4,5],[1,3,4],[2,6]]))`.trim();\n\nclass DSLogic4 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    }, \"9. Factorial\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: factorial,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }, \"10. Prime\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: prime,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }, \"2. Count Primes.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: countPrimes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }, \"17.Given a function magicNumber() that returns a random integer 1 or 0, write a new function that will generate a random number that uses this magicNumber() function.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: magicNumber,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    }, \"18.Discuss possible ways to write a function isInteger(x) that determines if x is an integer.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: possible,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541\n      },\n      __self: this\n    }, \"5. Common Divisor\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: common_divisor,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    }, \"9. Sqrt(x).\"), \"Input: 4\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552\n      },\n      __self: this\n    }), \"Output: 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554\n      },\n      __self: this\n    }), \"Input: 8\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }), \"Output: 2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    }), \"Explanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: mySqrt,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570\n      },\n      __self: this\n    }, \"3. Pow(x, n).\"), \"Input: x = 2.00000, n = 10\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }), \"Output: 1024.00000\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: myPow,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    }, \"3. Add Two Numbers.\"), \"You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584\n      },\n      __self: this\n    }), \"You may assume the two numbers do not contain any leading zero, except the number 0 itself.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    }), \"Example:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588\n      },\n      __self: this\n    }), \"Input: (2  4  3) + (5  6  4)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589\n      },\n      __self: this\n    }), \"Output: 7  0  8\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590\n      },\n      __self: this\n    }), \"Explanation: 342 + 465 = 807.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: addTwoNumbers,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601\n      },\n      __self: this\n    }, \"8. Reverse Integer.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: reverse,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611\n      },\n      __self: this\n    }, \"2. Broken Calculator.\"), \"On a broken calculator that has a number showing on its display, we can perform two operations:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615\n      },\n      __self: this\n    }, \"Double: \"), \"Multiply the number on the display by 2, or;\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616\n      },\n      __self: this\n    }, \"Decrement: \"), \"Subtract 1 from the number on the display.\")), \"Initially, the calculator is displaying the number X.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619\n      },\n      __self: this\n    }), \"Return the minimum number of operations needed to display the number Y.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: brokenCalc,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630\n      },\n      __self: this\n    }, \"8. Multiply Strings\"), \"Input: num1 = \\\"2\\\", num2 = \\\"3\\\" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631\n      },\n      __self: this\n    }), \"Output: \\\"6\\\"\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 633\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: addStrings,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 634\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646\n      },\n      __self: this\n    }, \"3. Letter Combinations of a Phone Number.\"), \"Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648\n      },\n      __self: this\n    }), \"A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 649\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 649\n      },\n      __self: this\n    }), \"Example:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 650\n      },\n      __self: this\n    }), \"Input: \\\"23\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652\n      },\n      __self: this\n    }), \"Output: [\\\"ad\\\", \\\"ae\\\", \\\"af\\\", \\\"bd\\\", \\\"be\\\", \\\"bf\\\", \\\"cd\\\", \\\"ce\\\", \\\"cf\\\"].\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: letterCombinations,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665\n      },\n      __self: this\n    }, \"5. Valid Parentheses\"), \"Given a string s containing just the characters '(', ')', '\", ', ', \"', '[' and ']', determine if the input string is valid.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667\n      },\n      __self: this\n    }), \"An input string is valid if:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668\n      },\n      __self: this\n    }), \"Open brackets must be closed by the same type of brackets.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670\n      },\n      __self: this\n    }), \"Open brackets must be closed in the correct order.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671\n      },\n      __self: this\n    }), \"Example 1:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673\n      },\n      __self: this\n    }), \"Input: s = \\\"()\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675\n      },\n      __self: this\n    }), \"Output: true\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676\n      },\n      __self: this\n    }), \"Example 2:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    }), \"Input: s = \\\"()[]\", \"\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679\n      },\n      __self: this\n    }), \"Output: true\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680\n      },\n      __self: this\n    }), \"Example 3:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681\n      },\n      __self: this\n    }), \"Input: s = \\\"(]\\\"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683\n      },\n      __self: this\n    }), \"Output: false\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: isValid,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 686\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 696\n      },\n      __self: this\n    }, \"7. Generate Parentheses.\"), \"Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698\n      },\n      __self: this\n    }), \"For example, given n = 3, a solution set is: \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699\n      },\n      __self: this\n    }), \"[ \\\"((()))\\\", \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 702\n      },\n      __self: this\n    }), \"\\\"(()())\\\", \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703\n      },\n      __self: this\n    }), \"\\\"(())()\\\", \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704\n      },\n      __self: this\n    }), \"\\\"()(())\\\", \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705\n      },\n      __self: this\n    }), \"\\\"()()()\\\" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 706\n      },\n      __self: this\n    }), \"]\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 708\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: generateParenthesis,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 709\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default withStyles(styles)(DSLogic4);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/client/src/components/algorithams/deepAlgorithams/dslogic4.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","Stcksval","titles","backgroundColor","padding","fontSize","redesign","height","width","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","factorial","trim","prime","countPrimes","magicNumber","possible","common_divisor","addTwoNumbers","reverse","brokenCalc","addStrings","mySqrt","myPow","letterCombinations","isValid","generateParenthesis","swap","DSLogic4","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst factorial = `\nvar factorial = function(n){\n  if(n === 1) return 1\n  return n * factorial(n-1)\n }\n \n console.log(factorial(4));\n `.trim()\n\nconst prime = `\n function prime(){\n   let i, j, result=[];\n   for(i=0; i<100; i++){\n     var count=0\n     for(j=2; j<i; j++){\n       if(i%j == 0){\n         count += 1;\n       }\n     }\n     if(count==0){\n       result.push(i);\n     }\n   }\n   \n   console.log(result);\n }\n \n prime();\n `.trim()\n\nconst countPrimes = `\n const countPrimes = (n) => {\n   const map = []\n   for (let i = 2; i < n; i++) {\n     map[i] = true\n   }\n   for (let i = 2; i * i < n; i++) {\n     if (map[i]) {\n       for (let j = i * i; j < n; j += i) {\n         map[j] = false\n       }\n     }\n   }\n   return map.filter(num => num === true).length\n }\n \n console.log(countPrimes(10))`.trim();\n\nconst magicNumber = `\n function magicNum(){\n   const random = Math.random(0,1)\n   return random;\n }\n \n function main(){\n   const result = Math.random(0, magicNum);\n   console.log(result);\n }\n \n main();\n `.trim();\n\nconst possible = `\nfunction isInt(value) {\n  var x;\n  if (isNaN(value)) {\n    return false;\n  }\n  x = parseFloat(value);\n  return (x | 0) === x;\n}\n\nconsole.log(isInt(0));`.trim();\n\n\n\nconst common_divisor = `\nfunction numbers(x, y) {\n    if ((typeof x !== 'number') || (typeof y !== 'number'))\n      return false;\n      x = Math.abs(x);\n      y = Math.abs(y);\n        while(y) {\n          var i = y;\n          y = x % y;\n          x = i;\n        }\n  return x;\n  }\n \n  console.log(numbers(12, 4));\n  console.log(numbers(9, 3));`.trim()\n\nconst addTwoNumbers = `\nfunction ListNode(val) {\n  this.val = val\n  this.next = null\n}\n\nconst addTwoNumbers = (l1, l2) => {\n  let h1 = l1\n  let h2 = l2\n  let digit = 0\n  let head = null\n  let current = null\n  while (h1 || h2) {\n    const num1 = h1 ? h1.val : 0\n    const num2 = h2 ? h2.val : 0\n    let value = num1 + num2 + digit\n    if (value >= 10) {\n      value -= 10\n      digit = 1\n    } else {\n      digit = 0\n    }\n    h1 = h1 ? h1.next : null\n    h2 = h2 ? h2.next : null\n    const node = new ListNode(value)\n    if (!head) {\n      head = node\n      current = node\n    } else {\n      current.next = node\n      current = node\n    }\n  }\n  if (digit === 1) {\n    current.next = new ListNode(1)\n  }\n  return head\n}\n\nconsole.log(addTwoNumbers())`.trim();\n\nconst reverse = `\nconst reverse = function (x) {\n  let max = (2 ** 31) - 1\n  let min = - (2 ** 31)\n  \n  const isMinus = x < 0\n  const str = String(Math.abs(x)).split('').reverse().join('')\n  const result =  isMinus ? Number('-'$'{str}') : Number(str)\n  if (result > max || result < min) {\n    return 0\n  }\n  return result\n}\n\nconsole.log(reverse(123))`.trim();\n\nconst brokenCalc = `\nconst brokenCalc = function (X, Y) {\n  let result = 0\n  while (Y > X) {\n    if (Y % 2 === 0) {\n      Y /= 2\n    } else {\n      Y += 1\n    }\n    result += 1\n  }\n  return result + X - Y\n}\n\nconsole.log(brokenCalc(5, 8))`.trim();\n\nconst addStrings = `\nconst addStrings = (num1, num2) => {\n  const reversedNum1 = num1.split('').reverse()\n  const reversedNum2 = num2.split('').reverse()\n  const { shorter, longer } = reversedNum1.length < reversedNum2.length\n    ? { shorter: reversedNum1, longer: reversedNum2 }\n    : { shorter: reversedNum2, longer: reversedNum1 }\n\n  let rem = 0\n  let result = longer.reduce((acc, digit1, index) => {\n    const total = parseInt(digit1, 10) + (parseInt(shorter[index], 10) || 0) + rem\n    if (total >= 10) {\n      rem = 1\n    } else {\n      rem = 0\n    }\n    return [\n      ...acc,\n      total >= 10 ? total - 10 : total,\n    ]\n  }, [])\n  result = rem === 1 ? [...result, rem] : result\n  return result.reverse().join('')\n}\n\nconst zero = (count) => {\n  let result = ''\n  while (count >= 1) {\n    result += '0'\n    count -= 1\n  }\n  return result\n}\nconst multiply = (num1 = '', num2 = '') => {\n  let result = 0\n  for (let i = num2.length - 1; i >= 0; i--) {\n    let current = ''\n    let base = 0\n    for (let j = num1.length - 1; j >= 0; j--) {\n      let currentResult = parseInt(num1[j], 10) * parseInt(num2[i], 10) + base\n      if (currentResult >= 10) {\n        base = Math.floor(currentResult / 10)\n        currentResult -= base * 10\n      } else {\n        base = 0\n      }\n      current = '$'{currentResult + current}'\n    }\n    if (base > 0) {\n      current = base + current\n    }\n    // 偷懒\n    result = addStrings(result || '0', current + zero(num2.length - 1 - i))\n  }\n  if (result.length > 0 && result[0] === '0') {\n    return '0'\n  }\n  return result\n}\n\nconsole.log(addStrings(\"2\",\"3\"))`.trim();\n\n\n\n\nconst mySqrt = `\nconst mySqrt = (x) => {\n  let r = x\n  while (r * r > x) {\n    r = Math.floor((r + x / r) / 2)\n  }\n\n  return r\n}\n\nconsole.log(mySqrt(4))`.trim();\n\nconst myPow = `\nconst myPow = (x, n) => {\n  if (n === 0) {\n    return 1\n  }\n  const temp = myPow(x, Math.floor(Math.abs(n / 2)))\n  const result = n % 2 === 0 ? temp * temp : x * temp * temp\n  return n < 0 ? 1 / result : result\n}\n\nconsole.log(myPow(2.00000, 10))`.trim();\n\nconst letterCombinations = `\nconst letterCombinations = (digits = '') => {\n  const map = {\n    2: ['a', 'b', 'c'],\n    3: ['d', 'e', 'f'],\n    4: ['g', 'h', 'i'],\n    5: ['j', 'k', 'l'],\n    6: ['m', 'n', 'o'],\n    7: ['p', 'q', 'r', 's'],\n    8: ['t', 'u', 'v'],\n    9: ['w', 'x', 'y', 'z'],\n  }\n  if (!digits.length) {\n    return []\n  }\n  let result = ['']\n  let index = 0\n  while (index < digits.length) {\n    const next = map[digits[index]]\n    const nextResult = []\n    for (let i = 0; i < result.length; i++) {\n      for (let j = 0; j < next.length; j++) {\n        nextResult.push(result[i] + next[j])\n      }\n    }\n    result = nextResult\n    index++\n  }\n  return result\n}\n\nconsole.log(letterCombinations(\"23\"))`.trim();\n\n\n\nconst isValid = `\nconst isValid = function (s) {\n  const stack = []\n  const pair = {\n    '[': ']',\n    '{': '}',\n    '(': ')',\n  }\n  const isPaired = (a, b) => pair[a] === b\n\n  for (c of s) {\n    if (isPaired(stack[stack.length - 1], c)) {\n      stack.pop()\n    } else {\n      stack.push(c)\n    }\n  }\n  return stack.length === 0\n}\n\nconsole.log(isValid(\"()\"))`.trim();\n\n\n\nconst generateParenthesis = `\nconst generateParenthesis = function (n) {\n  const result = []\n  const aux = (current, left, right) => {\n    if (left === n && right === n) {\n      result.push(current)\n      return\n    }\n    if (left < right || left > n || right > n) {\n      return\n    }\n    aux('$'{current}(', left + 1, right)\n    aux('$'{current})', left, right + 1)\n  }\n  aux('', 0, 0)\n  return result\n}\n`.trim();\n\nconst swap = `const swap = (a, b, arr) => { \n  if (a !== b) {\n    const temp = arr[a]\n    arr[a] = arr[b] \n    arr[b] = temp \n  }\n}\n\nconst Heap = compareFn => (arr = []) => {\n  const left = index => 2 * index + 1\n  const right = index => 2 * index + 2\n  const parent = index => Math.floor((index - 1) / 2)\n  const size = () => arr.length\n\n  // log(n)\n  const heapify = (index) => {\n    const l = left(index)\n    const r = right(index)\n    let current = index\n    if ((l < size()) && compareFn(arr[current], arr[l]) > 0) {\n      current = l\n    }\n    if ((r < size()) && compareFn(arr[current], arr[r]) > 0) {\n      current = r\n    }\n    if (current !== index) {\n      swap(current, index, arr)\n      heapify(current)\n    }\n  }\n  // log(n)\n  const heapifyUp = (index) => {\n    const p = parent(index)\n    if (p >= 0 && compareFn(arr[p], arr[index]) > 0) {\n      swap(p, index, arr)\n      heapifyUp(p)\n    }\n  }\n  // O(n)\n  const buildHeap = () => {\n    for (let i = Math.floor(arr.length / 2); i >= 0; i--) {\n      heapify(i)\n    }\n  }\n  const extract = () => {\n    swap(0, arr.length - 1, arr)\n    const top = arr.pop()\n    heapify(0)\n    return top\n  }\n  const remove = (item) => {\n    const index = arr.findIndex(x => compareFn(x, item) === 0)\n    if (index === -1) {\n      return\n    }\n    arr[index] = arr.pop() // eslint-disable-line\n    const p = parent(index)\n    if (p < 0 || compareFn(p, arr[index]) < 0) {\n      heapify(index)\n    } else {\n      heapifyUp(index)\n    }\n  }\n  buildHeap()\n  return {\n    getHeap: () => arr,\n    peek: () => {\n      if (arr.length === 0) {\n        return null\n      }\n      return arr[0]\n    },\n    add: (item) => {\n      arr.push(item)\n      heapifyUp(arr.length - 1)\n    },\n    extract,\n    remove,\n    size,\n  }\n}\n\nconst mergeKLists = (lists = []) => {\n  const minHeap = Heap((a, b) => a.val - b.val)([])\n  lists.forEach((node) => {\n    if (node) {\n      minHeap.add(node)\n    }\n  })\n  const head = minHeap.extract() || null\n  let current = head\n  while (minHeap.size() > 0) {\n      console.log(minHeap.size())\n    if (current.next) {\n      minHeap.add(current.next)\n    }\n    current.next = minHeap.extract()\n    current = current.next\n  }\n  return head\n}\n\n\nconsole.log(swap([[1,4,5],[1,3,4],[2,6]]))`.trim();\n\n\nclass DSLogic4 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n            <h3>9. Factorial</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={factorial}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>10. Prime</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={prime}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Count Primes.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={countPrimes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <b>17.Given a function magicNumber() that returns a random integer 1 or 0, write a new function that will generate a random number that uses this magicNumber() function.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={magicNumber}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>18.Discuss possible ways to write a function isInteger(x) that determines if x is an integer.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={possible}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              \n\n              <h3>5. Common Divisor</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={common_divisor}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>9. Sqrt(x).</h3>\n              Input: 4<br/>\nOutput: 2<br/><br/>\nExample 2:<br/>\n\nInput: 8<br/>\nOutput: 2<br/>\nExplanation: The square root of 8 is 2.82842..., and since \n             the decimal part is truncated, 2 is returned.\n\n              <div style={titles}>\n                <PrismCode\n                  code={mySqrt}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>3. Pow(x, n).</h3>\n              Input: x = 2.00000, n = 10<br/>\nOutput: 1024.00000\n              <div style={titles}>\n                <PrismCode\n                  code={myPow}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>3. Add Two Numbers.</h3>\n              You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\n              <br/>\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n<br/>\nExample:\n<br/>\nInput: (2  4  3) + (5  6  4)<br/>\nOutput: 7  0  8<br/>\nExplanation: 342 + 465 = 807.\n              <div style={titles}>\n                <PrismCode\n                  code={addTwoNumbers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>8. Reverse Integer.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={reverse}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>2. Broken Calculator.</h3>\n              On a broken calculator that has a number showing on its display, we can perform two operations:\n              <br/>\n              <ul>\n                <li><b>Double: </b>Multiply the number on the display by 2, or;</li>\n                <li><b>Decrement: </b>Subtract 1 from the number on the display.</li>\n              </ul>\n              Initially, the calculator is displaying the number X.\n              <br/>\n              Return the minimum number of operations needed to display the number Y.\n              <div style={titles}>\n                <PrismCode\n                  code={brokenCalc}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>8. Multiply Strings</h3>\n              Input: num1 = \"2\", num2 = \"3\" <br/>\nOutput: \"6\"\n              <div style={titles}>\n                <PrismCode\n                  code={addStrings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/> \n\n              \n\n              \n\n              <h3>3. Letter Combinations of a Phone Number.</h3>\n              Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.\n              <br/><br/>\nA mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.<br/><br/>\nExample:<br/>\n\nInput: \"23\"<br/>\nOutput: [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\n              <div style={titles}>\n                <PrismCode\n                  code={letterCombinations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              \n\n              <h3>5. Valid Parentheses</h3>\n              Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n              <br/>\nAn input string is valid if:<br/>\n\nOpen brackets must be closed by the same type of brackets.<br/>\nOpen brackets must be closed in the correct order.<br/><br/>\n\nExample 1:<br/>\n\nInput: s = \"()\"<br/>\nOutput: true<br/><br/>\nExample 2:<br/>\n\nInput: s = \"()[]{}\"<br/>\nOutput: true<br/><br/>\nExample 3:<br/>\n\nInput: s = \"(]\"<br/>\nOutput: false\n              <div style={titles}>\n                <PrismCode\n                  code={isValid}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              \n\n              <h3>7. Generate Parentheses.</h3>\n              Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n              <br/>\nFor example, given n = 3, a solution set is: <br/>\n\n[\n  \"((()))\", <br/>\n  \"(()())\", <br/>\n  \"(())()\", <br/>\n  \"()(())\", <br/>\n  \"()()()\" <br/>\n]\n              <div style={titles}>\n                <PrismCode\n                  code={generateParenthesis}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              \n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic4));\n"]},"metadata":{},"sourceType":"module"}