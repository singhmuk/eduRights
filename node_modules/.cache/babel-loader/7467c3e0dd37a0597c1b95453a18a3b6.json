{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var geocode=\"\\nconst request = require('request')\\n\\nconst url = 'https://api.darksky.net/forecast/5d82708dedf7f790ac891b3ce2a9c50a/37.8267,-122.4233'\\n\\nrequest({ url: url, json: true }, (error, response) => {\\n    // console.log(response.body.daily.data[0].summary + ' It is currently ' + response.body.currently.temperature + \\n        ' degress out. There is a ' + response.body.currently.precipProbability + '% chance of rain.')\\n    console.log(response.body.daily)\\n})\\n\\n// Geocoding\\n// Address -> Lat/Long -> Weather\\n\\nconst geocodeURL = 'https://api.mapbox.com/geocoding/v5/mapbox.places/Los%20Angeles.json?access_token=pk.\\n      eyJ1IjoiYW5kcmV3bWVhZDEiLCJhIjoiY2pvOG8ybW90MDFhazNxcnJ4OTYydzJlOSJ9.njY7HvaalLEVhEOIghPTlw&limit=1'\\n\\nrequest({ url: geocodeURL, json: true }, (error, response) => {\\n    const latitude = response.body.features[0].center[0]\\n    const longitude = response.body.features[0].center[1]\\n    console.log(latitude, longitude)\\n})\".trim();var errors=\"\\nconst request = require('request')\\n\\n\\nconst geocodeURL = 'https://api.mapbox.com/geocoding/v5/mapbox.places/philadelphia.json?access_token=pk.\\n          eyJ1IjoiYW5kcmV3bWVhZDEiLCJhIjoiY2pvOG8ybW90MDFhazNxcnJ4OTYydzJlOSJ9.njY7HvaalLEVhEOIghPTlw&limit=1'\\n\\nrequest({ url: geocodeURL, json: true }, (error, response) => {\\n    if (error) {\\n        console.log('Unable to connect to location services!')\\n    } else if (response.body.features.length === 0) {\\n        console.log('Unable to find location. Try another search.')\\n    } else {\\n        const latitude = response.body.features[0].center[0]\\n        const longitude = response.body.features[0].center[1]\\n        console.log(latitude, longitude)\\n    }\\n})\".trim();var geocode_2=\"const request = require('request')\\n\\nconst geocode = (address, callback) => {\\n    const url = 'https://api.mapbox.com/geocoding/v5/mapbox.places/' + address + '.json?access_token=pk.\\n              eyJ1IjoiYW5kcmV3bWVhZDEiLCJhIjoiY2pvOG8ybW90MDFhazNxcnJ4OTYydzJlOSJ9.njY7HvaalLEVhEOIghPTlw&limit=1'\\n\\n    request({ url: url, json: true }, (error, response) => {\\n        if (error) {\\n            callback('Unable to connect to location services!', undefined)\\n        } else if (response.body.features.length === 0) {\\n            callback('Unable to find location. Try another search.', undefined)\\n        } else {\\n            callback(undefined, {\\n                latitude: response.body.features[0].center[0],\\n                longitude: response.body.features[0].center[1],\\n                location: response.body.features[0].place_name\\n            })\\n        }\\n    })\\n}\\n\\nmodule.exports = geocode\".trim();var callBackAbs=\"\\nconst request = require('request')\\nconst geocode = require('./utils/geocode')\\n\\n\\ngeocode('Boston', (error, data) => {\\n    console.log('Error', error)\\n    console.log('Data', data)\\n})\".trim();var forecast=\"\\nconst request = require('request')\\n\\nconst forecast = (latitude, longitude, callback) => {\\n    const url = 'https://api.darksky.net/forecast/9d1465c6f3bb7a6c71944bdd8548d026/' + latitude + ',' + longitude\\n\\n    request({ url: url, json: true }, (error, response) => {\\n        if (error) {\\n            callback('Unable to connect to weather service!', undefined)\\n        } else if (response.body.error) {\\n            callback('Unable to find location', undefined)\\n        } else {\\n            callback(undefined, response.body.daily.data[0].summary + ' It is currently ' + response.body.currently.\\n            temperature + ' degress out. There is a ' + response.body.currently.precipProbability + '% chance of rain.')\\n        }\\n    })\\n}\\n\\nmodule.exports = forecast\".trim();var callBacksAbs_2=\"\\nconst geocode = require('./utils/geocode')\\nconst forecast = require('./utils/forecast')\\n\\ngeocode('Boston', (error, data) => {\\n    console.log('Error', error)\\n    console.log('Data', data)\\n})\\n\\nforecast(-75.7088, 44.1545, (error, data) => {\\n    console.log('Error', error)\\n    console.log('Data', data)\\n})\".trim();var chainingCall=\"\\nconst geocode = require('./utils/geocode')\\nconst forecast = require('./utils/forecast')\\n\\nconst address = process.argv[2]\\n\\nif (!address) {\\n    console.log('Please provide an address')\\n} else {\\n    geocode(address, (error, data) => {\\n        if (error) {\\n            return console.log(error)\\n        }\\n\\n        forecast(data.latitude, data.longitude, (error, forecastData) => {\\n            if (error) {\\n                return console.log(error)\\n            }\\n\\n            console.log(data.location)\\n            console.log(forecastData)\\n        })\\n    })\\n}\\n\".trim();var npmPackages=\"\\nvar http = require('http');\\nvar uc = require('upper-case');\\nhttp.createServer(function (req, res) {\\n  res.writeHead(200, {'Content-Type': 'text/html'});\\n  res.write(uc(\\\"Text convert to upper case\\\"));\\n  res.end();\\n}).listen(4000);\".trim();var UploadFilesServer=\"\\nvar http = require('http');\\nvar formidable = require('formidable');\\nvar fs = require('fs');\\n\\nhttp.createServer(function (req, res) {\\n  if (req.url == '/fileupload') {\\n    var form = new formidable.IncomingForm();\\n    form.parse(req, function (err, fields, files) {\\n      var oldpath = files.filetoupload.path;\\n      var newpath = 'C:/Users/Your Name/' + files.filetoupload.name;\\n      fs.rename(oldpath, newpath, function (err) {\\n        if (err) throw err;\\n        res.write('File uploaded and moved!');\\n        res.end();\\n      });\\n });\\n  } else {\\n    res.writeHead(200, {'Content-Type': 'text/html'});\\n    res.write('<form action=\\\"fileupload\\\" method=\\\"post\\\" enctype=\\\"multipart/form-data\\\">');\\n    res.write('<input type=\\\"file\\\" name=\\\"filetoupload\\\"><br>');\\n    res.write('<input type=\\\"submit\\\">');\\n    res.write('</form>');\\n    return res.end();\\n  }\\n}).listen(8080);\".trim();var Tut2=/*#__PURE__*/function(_Component){_inherits(Tut2,_Component);function Tut2(){_classCallCheck(this,Tut2);return _possibleConstructorReturn(this,_getPrototypeOf(Tut2).apply(this,arguments));}_createClass(Tut2,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Geocode\"),\"Server.js\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:geocode,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Errors\"),\"Server.js\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:errors,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"CallBack Abstraction\"),\"geocode_2.js\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:geocode_2,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),\"Server.js\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:callBackAbs,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"CallBack Abstraction_2\"),\"forecast.js\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:forecast,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),\"Server.js\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:callBacksAbs_2,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Chaining Callback\"),\"Server.js\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:chainingCall,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"NPM Packages\"),\"Server.js\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:npmPackages,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Upload Files On Server\"),React.createElement(\"hl\",null,React.createElement(\"li\",null,\"When a file is successfully uploaded to the server, it is placed on a temporary folder.\"),React.createElement(\"li\",null,\"The path to this directory can be found in the \\\"files\\\" object, passed as the third argument in the parse() method's callback function.\"),React.createElement(\"li\",null,\"To move the file to the folder of your choice, use the File System module, and rename the file:\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:UploadFilesServer,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return Tut2;}(Component);export default withStyles(styles)(Tut2);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/nodeJs/nodeDeep/tut_2.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","geocode","trim","errors","geocode_2","callBackAbs","forecast","callBacksAbs_2","chainingCall","npmPackages","UploadFilesServer","Tut2","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst geocode = `\nconst request = require('request')\n\nconst url = 'https://api.darksky.net/forecast/5d82708dedf7f790ac891b3ce2a9c50a/37.8267,-122.4233'\n\nrequest({ url: url, json: true }, (error, response) => {\n    // console.log(response.body.daily.data[0].summary + ' It is currently ' + response.body.currently.temperature + \n        ' degress out. There is a ' + response.body.currently.precipProbability + '% chance of rain.')\n    console.log(response.body.daily)\n})\n\n// Geocoding\n// Address -> Lat/Long -> Weather\n\nconst geocodeURL = 'https://api.mapbox.com/geocoding/v5/mapbox.places/Los%20Angeles.json?access_token=pk.\n      eyJ1IjoiYW5kcmV3bWVhZDEiLCJhIjoiY2pvOG8ybW90MDFhazNxcnJ4OTYydzJlOSJ9.njY7HvaalLEVhEOIghPTlw&limit=1'\n\nrequest({ url: geocodeURL, json: true }, (error, response) => {\n    const latitude = response.body.features[0].center[0]\n    const longitude = response.body.features[0].center[1]\n    console.log(latitude, longitude)\n})`.trim()\n\nconst errors = `\nconst request = require('request')\n\n\nconst geocodeURL = 'https://api.mapbox.com/geocoding/v5/mapbox.places/philadelphia.json?access_token=pk.\n          eyJ1IjoiYW5kcmV3bWVhZDEiLCJhIjoiY2pvOG8ybW90MDFhazNxcnJ4OTYydzJlOSJ9.njY7HvaalLEVhEOIghPTlw&limit=1'\n\nrequest({ url: geocodeURL, json: true }, (error, response) => {\n    if (error) {\n        console.log('Unable to connect to location services!')\n    } else if (response.body.features.length === 0) {\n        console.log('Unable to find location. Try another search.')\n    } else {\n        const latitude = response.body.features[0].center[0]\n        const longitude = response.body.features[0].center[1]\n        console.log(latitude, longitude)\n    }\n})`.trim()\n\nconst geocode_2 = `const request = require('request')\n\nconst geocode = (address, callback) => {\n    const url = 'https://api.mapbox.com/geocoding/v5/mapbox.places/' + address + '.json?access_token=pk.\n              eyJ1IjoiYW5kcmV3bWVhZDEiLCJhIjoiY2pvOG8ybW90MDFhazNxcnJ4OTYydzJlOSJ9.njY7HvaalLEVhEOIghPTlw&limit=1'\n\n    request({ url: url, json: true }, (error, response) => {\n        if (error) {\n            callback('Unable to connect to location services!', undefined)\n        } else if (response.body.features.length === 0) {\n            callback('Unable to find location. Try another search.', undefined)\n        } else {\n            callback(undefined, {\n                latitude: response.body.features[0].center[0],\n                longitude: response.body.features[0].center[1],\n                location: response.body.features[0].place_name\n            })\n        }\n    })\n}\n\nmodule.exports = geocode`.trim()\n\nconst callBackAbs = `\nconst request = require('request')\nconst geocode = require('./utils/geocode')\n\n\ngeocode('Boston', (error, data) => {\n    console.log('Error', error)\n    console.log('Data', data)\n})`.trim()\n\nconst forecast = `\nconst request = require('request')\n\nconst forecast = (latitude, longitude, callback) => {\n    const url = 'https://api.darksky.net/forecast/9d1465c6f3bb7a6c71944bdd8548d026/' + latitude + ',' + longitude\n\n    request({ url: url, json: true }, (error, response) => {\n        if (error) {\n            callback('Unable to connect to weather service!', undefined)\n        } else if (response.body.error) {\n            callback('Unable to find location', undefined)\n        } else {\n            callback(undefined, response.body.daily.data[0].summary + ' It is currently ' + response.body.currently.\n            temperature + ' degress out. There is a ' + response.body.currently.precipProbability + '% chance of rain.')\n        }\n    })\n}\n\nmodule.exports = forecast`.trim()\n\nconst callBacksAbs_2 = `\nconst geocode = require('./utils/geocode')\nconst forecast = require('./utils/forecast')\n\ngeocode('Boston', (error, data) => {\n    console.log('Error', error)\n    console.log('Data', data)\n})\n\nforecast(-75.7088, 44.1545, (error, data) => {\n    console.log('Error', error)\n    console.log('Data', data)\n})`.trim()\n\nconst chainingCall = `\nconst geocode = require('./utils/geocode')\nconst forecast = require('./utils/forecast')\n\nconst address = process.argv[2]\n\nif (!address) {\n    console.log('Please provide an address')\n} else {\n    geocode(address, (error, data) => {\n        if (error) {\n            return console.log(error)\n        }\n\n        forecast(data.latitude, data.longitude, (error, forecastData) => {\n            if (error) {\n                return console.log(error)\n            }\n\n            console.log(data.location)\n            console.log(forecastData)\n        })\n    })\n}\n`.trim();\n\nconst npmPackages = `\nvar http = require('http');\nvar uc = require('upper-case');\nhttp.createServer(function (req, res) {\n  res.writeHead(200, {'Content-Type': 'text/html'});\n  res.write(uc(\"Text convert to upper case\"));\n  res.end();\n}).listen(4000);`.trim();\n\nconst UploadFilesServer = `\nvar http = require('http');\nvar formidable = require('formidable');\nvar fs = require('fs');\n\nhttp.createServer(function (req, res) {\n  if (req.url == '/fileupload') {\n    var form = new formidable.IncomingForm();\n    form.parse(req, function (err, fields, files) {\n      var oldpath = files.filetoupload.path;\n      var newpath = 'C:/Users/Your Name/' + files.filetoupload.name;\n      fs.rename(oldpath, newpath, function (err) {\n        if (err) throw err;\n        res.write('File uploaded and moved!');\n        res.end();\n      });\n });\n  } else {\n    res.writeHead(200, {'Content-Type': 'text/html'});\n    res.write('<form action=\"fileupload\" method=\"post\" enctype=\"multipart/form-data\">');\n    res.write('<input type=\"file\" name=\"filetoupload\"><br>');\n    res.write('<input type=\"submit\">');\n    res.write('</form>');\n    return res.end();\n  }\n}).listen(8080);`.trim();\n\n\nclass Tut2 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Geocode</h3>\n      Server.js\n      <div style={titles}>\n                <PrismCode\n                  code={geocode}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Errors</h3>\n      Server.js\n      <div style={titles}>\n                <PrismCode\n                  code={errors}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>CallBack Abstraction</h3>\n      geocode_2.js\n      <div style={titles}>\n                <PrismCode\n                  code={geocode_2}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n      Server.js\n      <div style={titles}>\n                <PrismCode\n                  code={callBackAbs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>CallBack Abstraction_2</h3>\n      forecast.js\n      <div style={titles}>\n                <PrismCode\n                  code={forecast}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n      Server.js\n      <div style={titles}>\n                <PrismCode\n                  code={callBacksAbs_2}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Chaining Callback</h3>\n      Server.js\n      <div style={titles}>\n                <PrismCode\n                  code={chainingCall}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>NPM Packages</h3>\n      Server.js\n      <div style={titles}>\n                <PrismCode\n                  code={npmPackages}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Upload Files On Server</h3>\n              <hl>\n                <li>When a file is successfully uploaded to the server, it is placed on a temporary folder.</li>\n                <li>The path to this directory can be found in the \"files\" object, passed as the third argument in the parse() method's callback function.</li>\n                <li>To move the file to the folder of your choice, use the File System module, and rename the file:</li>\n              </hl>\n              <div style={titles}>\n                <PrismCode\n                  code={UploadFilesServer}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Tut2));\n"]},"metadata":{},"sourceType":"module"}