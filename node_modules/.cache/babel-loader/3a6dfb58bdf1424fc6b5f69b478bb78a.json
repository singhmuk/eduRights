{"ast":null,"code":"import _classCallCheck from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/mukeshs/Projects/edurights/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Prism from\"prismjs\";import{Grid,Paper,withStyles,List}from\"@material-ui/core\";import'../../ReactJs/styles.css';import Sidebar from'../sidebar';import PrismCode from'../../ReactJs/prismCode';var titles={backgroundColor:'#F0F8FF',padding:'1px',fontSize:'16px'};var styles=function styles(theme){return{paper:{margin:theme.spacing(1),padding:theme.spacing(1)},smMargin:{margin:theme.spacing(1)},actionDiv:{textAlign:\"center\"}};};var purejs=\"\\n//html\\n<html>\\n  <script src=\\\"https://unpkg.com/@reactivex/rxjs@5.3.0/dist/global/Rx.js\\\"></script>\\n  <body>\\n    <button>Click me</button>\\n    <script src=\\\"app.js\\\"></script>\\n  </body>\\n</html>\\n\\n\\n//js\\ndocument.addEventListener('click', (event) => console.log(event));\\n\\n\\n//2\\nvar button = document.querySelector('button');\\n\\nRx.Observable.fromEvent(button, 'click')\\n  .subscribe(\\n    (value) => console.log(value.clientX)\\n  );\\n\".trim();var observables=\"\\n\\n\".trim();var execs=\"\\nvar button = document.querySelector('button');\\n\\nvar observer = {\\n  next: function (value) {\\n    console.log(value);\\n  },\\n  error: function (error) {\\n    console.log(error);\\n  },\\n  complete: function () {\\n    console.log('Completed');\\n  }\\n};\\n\\n//Rx.Observable.fromEvent(button, 'click')\\nvar subscription = Rx.Observable.create(function (obs) {\\n  //obs.next('A value');\\n  //obs.error('Error');\\n  //setTimeout(function() {\\n  //\\tobs.complete();\\n  //  obs.next('A second value');\\n  //}, 2000);\\n  button.onclick = function (event) {\\n    obs.next(event);\\n  }\\n})\\n  .subscribe(observer);\\n\\nsetTimeout(function () {\\n  subscription.unsubscribe();\\n}, 5000);\\n\".trim();var throttleTime=\"\\nvar observable = Rx.Observable.interval(1000);\\nvar observer = {\\n  next: function (value) {\\n    console.log(value);\\n  }\\n};\\n\\nobservable.map(function (value) {\\n  return 'Number: ' + value;\\n}).throttleTime(1900).subscribe(observer);\\n\".trim();var fixrxjs=\"\\nvar subject = new Rx.Subject();\\n\\nsubject.subscribe({\\n  next: function (value) {\\n    console.log(value);\\n  },\\n  error: function (error) {\\n    console.log(error);\\n  },\\n  complete: function () {\\n    console.log('Complete');\\n  }\\n});\\n\\nsubject.subscribe({\\n  next: function (value) {\\n    console.log(value);\\n  }\\n});\\n\\nsubject.next('A new data piece');\\nsubject.complete();\\nsubject.next('New value');\\n\".trim();var filteringrxjs=\"\\nvar observable = Rx.Observable.interval(1000);\\n\\nobservable\\n  .filter(function (value) {\\n    return value % 2 == 0;\\n  })\\n  .subscribe({\\n    next: function (value) {\\n      console.log(value);\\n    },\\n    error: function (error) {\\n      console.log('Error: ', error);\\n    }\\n  });\\n\".trim();var debounceTime=\"\\n//html\\n<html>\\n  <script src=\\\"https://unpkg.com/@reactivex/rxjs@5.3.0/dist/global/Rx.js\\\"></script>\\n  <body>\\n    <input type=\\\"text\\\">\\n      <script src=\\\"app.js\\\"></script>\\n  </body>\\n</html>\\n\\n\\n//js\\nvar input = document.querySelector('input');\\nvar observable = Rx.Observable.fromEvent(input, 'input');\\n\\nobservable\\n  .subscribe({\\n    next: function (event) {\\n      console.log(event.target.value);\\n    }\\n  });\\n  \\n  \\n  \\n//2\\nvar input = document.querySelector('input');\\nvar observable = Rx.Observable.fromEvent(input, 'input');\\n\\nobservable\\n  .map(event => event.target.value)\\n  .debounceTime(500)\\n  .distinctUntilChanged()\\n  .subscribe({\\n    next: function (value) {\\n      console.log(value);\\n    }\\n  });\\n\".trim();var scan=\"\\nvar input = document.querySelector('input');\\nvar observable = Rx.Observable.of(1, 2, 3, 4, 5);\\n\\nobservable\\n  .subscribe({\\n    next: function (value) {\\n      console.log(value);\\n    }\\n  });\\n\\n\\n\\n//2\\nvar observable = Rx.Observable.of(1, 2, 3, 4, 5);\\n\\nobservable\\n  .scan((total, currentValue) => {\\n    return total + currentValue;\\n  }, 0)\\n  .subscribe({\\n    next: function (value) {\\n      console.log(value);\\n    }\\n  });\\n\".trim();var pluck=\"\\nvar input = document.querySelector('input');\\nvar observable = Rx.Observable.fromEvent(input, 'input');\\n\\nobservable\\n  .subscribe({\\n    next: function (event) {\\n      console.log(event.target.value);\\n    }\\n  });\\n\\n\\n//2\\nvar input = document.querySelector('input');\\nvar observable = Rx.Observable.fromEvent(input, 'input');\\n\\nobservable\\n  .pluck('target', 'value')\\n  .debounceTime(500)\\n  .distinctUntilChanged()\\n  .subscribe({\\n    next: function (value) {\\n      console.log(value);\\n    }\\n  });\\n\".trim();var mergeMap=\"\\n//html\\n<body>\\n    <input type=\\\"text\\\" id=\\\"input1\\\">\\n      <input type=\\\"text\\\" id=\\\"input2\\\">\\n        <p>Combined value: <span></span></p>\\n        <script src=\\\"app.js\\\"></script>\\n      </body>\\n      \\n      \\n//js\\nvar input1 = document.querySelector('#input1');\\nvar input2 = document.querySelector('#input2');\\n\\nvar span = document.querySelector('span');\\n\\nvar obs1 = Rx.Observable.fromEvent(input1, 'input');\\nvar obs2 = Rx.Observable.fromEvent(input2, 'input');\\n\\nobs1.mergeMap(\\nevent1 => {\\nreturn obs2.map(event2 => event1.target.value + ' ' + event2.target.value)\\n      }\\n    ).subscribe(\\n    combinedValue => span.textContent = combinedValue\\n  );\\n\".trim();var switchMaps=\"\\nvar button = document.querySelector('button');\\n\\nvar obs1 = Rx.Observable.fromEvent(button, 'click');\\nvar obs2 = Rx.Observable.interval(1000);\\n\\nobs1.switchMap(\\n  event => {\\n    return obs2\\n  }\\n).subscribe(\\n  (value) => console.log(value)\\n);\\n\".trim();var BehaviorSubject=\"\\nvar clickEmitted = new Rx.Subject();\\nvar button = document.querySelector('button');\\nvar div = document.querySelector('div');\\n\\nbutton.addEventListener('click', () => clickEmitted.next('Clicked!'));\\n\\nclickEmitted.subscribe(\\n  (value) => div.textContent = value\\n);\\n\\n\\n//2\\nvar clickEmitted = new Rx.BehaviorSubject('Not clicked');\\nvar button = document.querySelector('button');\\nvar div = document.querySelector('div');\\n\\nbutton.addEventListener('click', () => clickEmitted.next('Clicked!'));\\n\\nclickEmitted.subscribe(\\n  (value) => div.textContent = value\\n);\\n\".trim();var map=\"\\nimport {Observable, interval} from 'rxjs';\\nimport {map} from \\\"rxjs/operators\\\";\\n\\ninterval(1000).pipe(map(data => data * 2))\\n              .subscribe((data:number) => {\\n                console.log(data)\\n              });\\n\\n\\n\\n//map\\nimport {Observable, interval, Subscriber, pipe} from 'rxjs';\\nimport {map} from \\\"rxjs/operators\\\";\\n\\nfunction fetchUser(){\\n  const newObservable = new Observable((observer:Subscriber<unknown>) => {\\n    const user={\\n      data:{firstName: 'Sam', mob: 2345342290}\\n    }\\n    observer.next(user)\\n  });\\n  return newObservable.pipe(map(user)=>{\\n    return user.data\\n  })\\n}\\n\\n\\nfetchUser().Subscriber((user)=>{\\n  console.log(user)\\n})\".trim();var filter=\"\\nimport {interval} from 'rxjs';\\nimport {filter, map} from \\\"rxjs/operators\\\";\\n\\nconst observable = interval(100).pipe(filter(data=>{\\n  return data<5\\n}));\\n\\nobservable.subscribe(data => {\\n  console.log(data);\\n})\\n\".trim();var switchMap=\"\\nimport {Observable} from 'rxjs';\\nimport {switchMap} from \\\"rxjs/operators\\\";\\n\\nfunction buySugarInBulk(){\\n  return new Observable(observer=>{\\n    observer.next('Suger Perchased');\\n  })\\n}\\n\\nfunction getSuger(quantity){\\n  return new Observable((observer)=>{\\n    return observer.next('Suger ' +quantity+ 'for you' )\\n  })\\n}\\n\\nfunction getSugarFromShop(quantity){\\n  return buySugarInBulk().pipe(switchMap(()=>{\\n    return getSuger(quantity);\\n  }));\\n}\\n\\ngetSugarFromShop('1Kg').subscribe(data=>{\\n  console.log(data);\\n});\".trim();var concatMap=\"\\nimport {timer} from \\\"rxjs\\\";\\nimport {concatMap, map} from \\\"rxjs/operators\\\";\\n\\nconst timer$ = timer(100, 500)\\n                .pipe(map(data => data + 'timer1'));\\n\\nconst timer2$ = timer(100, 500)\\n                .pipe(map(data => data + 'timer2'));\\n\\nconst observables = timer$.pipe(concatMap(timer1Data => {\\n                 return timer2$.pipe(map(data => data + timer1Data));\\n}))\\n\\n\\nobservables.subscribe(data => console.log(data));\".trim();var observableVsPromises=\"\\nfunction isBreadAvailable(){\\n  return true;\\n}\\n\\nfunction isAggAvailable(){\\n  return false;\\n}\\n\\nfunction bringBread(){\\n  return new Promise((res, rej) =>{\\n    if(isBreadAvailable()) {\\n      res('Bread is Available');\\n    }\\n    else if(isAggAvailable){\\n      res('Agg is Available')\\n    }\\n    else{\\n      rej('Bread is bring')\\n    }\\n  })\\n}\\n\\nbringBread().then((data)=>{\\n  console.log(data);\\n})\\n.catch(err => {\\n  console.log(err)\\n})\".trim();var observableV=\"\\nimport {BehaviorSubject, timeout} from 'rxjs';\\n\\nconst data = ['A', 'B', 'C', 'D', 'E'];\\nconst fm = new BehaviorSubject('First Data');\\n\\nfunction changeSongs(){\\n  for(let song of data){\\n    fm.next(song);\\n  }\\n}\\n\\n\\nfm.subscribe((song:string)=>{\\n  console.log(song);\\n});\\n\\nchangeSongs();\\n\\nsetTimeout(()=>{\\n  fm.subscribe((song:string)=>{\\n  console.log(song);\\n});\\n},1000);\".trim();var rxjxLibrary=\"import { Observable, throwError } from 'rxjs';\\nimport { catchError, retry } from 'rxjs/operators';\".trim();var observableFun=\"import { from } from 'rxjs'; // from function\\nconst data = from(fetch('/api/endpoint')); //Created from Promise\\ndata.subscribe({\\n next(response) {console.log(response);},\\n error(err) {console.error('Error: ' + err);},\\n complete() {console.log('Completed');}\\n});\".trim();var observableAJAX=\"\\nimport { ajax } from 'rxjs/ajax'; // ajax function\\nconst apiData = ajax('/api/data'); // Created from AJAX request\\n// Subscribe to create the request\\napiData.subscribe(res => console.log(res.status, res.response));\".trim();var observableCount=\"\\nimport { interval } from 'rxjs'; // interval function\\nconst secondsCounter = interval(1000); // Created from Counter value\\nsecondsCounter.subscribe(n =>\\n  console.log('Counter value: '$'{n}'));\".trim();var observableEvt=\"\\nimport { fromEvent } from 'rxjs';\\nconst el = document.getElementById('custom-element');\\nconst mouseMoves = fromEvent(el, 'mousemove');\\nconst subscription = mouseMoves.subscribe((e: MouseEvent) => {\\n  console.log('Coordnitaes of mouse pointer: '$'{e.clientX} * '$'{e.clientY}');\\n  });\".trim();var placeholders=\"\\n//app.component.ts\\nimport {PlaceholderService} from \\\"./services/placeholder.service\\\"\\n\\n@Component({\\n  selector: 'app-root',\\n  template: '\\n  <button (click)=\\\"getApi()\\\">GET</button>\\n    <div *ngFor=\\\"let items of data\\\">\\n      <p>{{items.id}} - {{items.title}}</p>\\n    </div>\\n  ',\\n})\\n\\nexport class AppComponent implements OnInit{\\n  data:Array<any>;\\n  \\n  constructor( private https:PlaceholderService) { \\n    this.data=new Array<any>()\\n   }\\n\\n  ngOnInit(): void {}\\n  getApi(){\\n    this.https.getData().subscribe((data)=>{\\n      this.data=data\\n    })\\n  }\\n}\\n\\n\\n//services/placeholder.service.ts\\nimport { Injectable } from '@angular/core';\\nimport {HttpClient} from '@angular/common/http';\\nimport { Observable } from 'rxjs';\\n\\n@Injectable({\\n  providedIn: 'root'\\n})\\nexport class PlaceholderService {\\n\\n  constructor(private http:HttpClient) { }\\n\\n  getData(): Observable<any>{\\n    const url=\\\"https://jsonplaceholder.typicode.com/posts\\\";\\n    return this.http.get<any>(url)\\n  }\\n}\\n\".trim();var Rxjs=/*#__PURE__*/function(_Component){_inherits(Rxjs,_Component);function Rxjs(){_classCallCheck(this,Rxjs);return _possibleConstructorReturn(this,_getPrototypeOf(Rxjs).apply(this,arguments));}_createClass(Rxjs,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(function(){return Prism.highlightAll();},0);}},{key:\"render\",value:function render(){var classes=this.props.classes;return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:2},React.createElement(Paper,{className:classes.paper},React.createElement(\"h4\",null,React.createElement(Sidebar,null)))),React.createElement(Grid,{item:true,xs:10},React.createElement(Paper,{className:classes.paper},React.createElement(List,null,React.createElement(\"h3\",null,\"Rxjs With Pure Js (Reactive Extension for JavaScript)\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:purejs,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"RxJS OPERATORS LIKE map() OR throttleTime()\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:throttleTime,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"RxJS SUBJECT (~EventEmitter)\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:fixrxjs,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"filter() OPERATOR\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:filteringrxjs,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"debounceTime & distinctUntilChanged \"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:debounceTime,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"scan() vs reduce()\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:scan,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"pluck()\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:pluck,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"mergeMap()\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:mergeMap,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"switchMap()\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:switchMaps,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"BehaviorSubject\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:BehaviorSubject,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"h3\",null,\"What is RxJS With Angular\"),\"RxJS is a library for composing asynchronous and callback-based code in a functional, reactive style using Observables. Many APIs such as HttpClient produce and consume RxJS Observables and also uses operators for processing observables.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:rxjxLibrary,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"What are the utility functions provided by RxJS\"),\"The RxJS library also provides below utility functions for creating and working with observables.\",React.createElement(\"ul\",null,React.createElement(\"li\",null,\"Converting existing code for async operations into observables\"),React.createElement(\"li\",null,\"Iterating through the values in a stream\"),React.createElement(\"li\",null,\"Mapping values to different types\"),React.createElement(\"li\",null,\"Filtering streams\"),React.createElement(\"li\",null,\"Composing multiple streams\")),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"What are observable creation functions\"),\"RxJS provides creation functions for the process of creating observables from things such as promises, events, timers and Ajax requests.\",React.createElement(\"br\",null),React.createElement(\"b\",null,\"1. Create an observable from a promise\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:observableFun,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"2. Create an observable that creates an AJAX request\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:observableAJAX,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"3. Create an observable from a counter\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:observableCount,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"b\",null,\"4. Create an observable from an event\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:observableEvt,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"h3\",null,\"Map\"),React.createElement(\"ul\",null,React.createElement(\"li\",null,\"map change observable value.\"),React.createElement(\"li\",null,\"map to transform a collection of items into a collection of different items.\")),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:map,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Filter\"),\"This operator takes values from the source Observable, passes them through a predicate function and only emits those values that get TRUE.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:filter,language:\"js\",plugins:[\"line-numbers\"]}),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"SwitchMap\"),\"switchMap operator is basically a combination of two operators - switchAll and map. The map part lets you map a value from a higher-order source observable to an inner observable stream. When a new value arrives from a source observable, execute a map function that returns an inner observable.\",React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:switchMap,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"concatMap\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:concatMap,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"OservableVsPromises\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:observableVsPromises,language:\"js\",plugins:[\"line-numbers\"]})),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"BehaviorSubject ObservableV:\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:observableV,language:\"js\",plugins:[\"line-numbers\"]}))),React.createElement(\"br\",null),React.createElement(\"h3\",null,\"Placeholders\"),React.createElement(\"div\",{style:titles},React.createElement(PrismCode,{code:placeholders,language:\"js\",plugins:[\"line-numbers\"]}))))));}}]);return Rxjs;}(Component);export default withStyles(styles)(Rxjs);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/angularjsd/angular 12/rxjs.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","purejs","trim","observables","execs","throttleTime","fixrxjs","filteringrxjs","debounceTime","scan","pluck","mergeMap","switchMaps","BehaviorSubject","map","filter","switchMap","concatMap","observableVsPromises","observableV","rxjxLibrary","observableFun","observableAJAX","observableCount","observableEvt","placeholders","Rxjs","setTimeout","highlightAll","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst purejs = `\n//html\n<html>\n  <script src=\"https://unpkg.com/@reactivex/rxjs@5.3.0/dist/global/Rx.js\"></script>\n  <body>\n    <button>Click me</button>\n    <script src=\"app.js\"></script>\n  </body>\n</html>\n\n\n//js\ndocument.addEventListener('click', (event) => console.log(event));\n\n\n//2\nvar button = document.querySelector('button');\n\nRx.Observable.fromEvent(button, 'click')\n  .subscribe(\n    (value) => console.log(value.clientX)\n  );\n`.trim();\n\nconst observables = `\n\n`.trim();\n\nconst execs = `\nvar button = document.querySelector('button');\n\nvar observer = {\n  next: function (value) {\n    console.log(value);\n  },\n  error: function (error) {\n    console.log(error);\n  },\n  complete: function () {\n    console.log('Completed');\n  }\n};\n\n//Rx.Observable.fromEvent(button, 'click')\nvar subscription = Rx.Observable.create(function (obs) {\n  //obs.next('A value');\n  //obs.error('Error');\n  //setTimeout(function() {\n  //\tobs.complete();\n  //  obs.next('A second value');\n  //}, 2000);\n  button.onclick = function (event) {\n    obs.next(event);\n  }\n})\n  .subscribe(observer);\n\nsetTimeout(function () {\n  subscription.unsubscribe();\n}, 5000);\n`.trim();\n\nconst throttleTime = `\nvar observable = Rx.Observable.interval(1000);\nvar observer = {\n  next: function (value) {\n    console.log(value);\n  }\n};\n\nobservable.map(function (value) {\n  return 'Number: ' + value;\n}).throttleTime(1900).subscribe(observer);\n`.trim();\n\nconst fixrxjs = `\nvar subject = new Rx.Subject();\n\nsubject.subscribe({\n  next: function (value) {\n    console.log(value);\n  },\n  error: function (error) {\n    console.log(error);\n  },\n  complete: function () {\n    console.log('Complete');\n  }\n});\n\nsubject.subscribe({\n  next: function (value) {\n    console.log(value);\n  }\n});\n\nsubject.next('A new data piece');\nsubject.complete();\nsubject.next('New value');\n`.trim();\n\nconst filteringrxjs = `\nvar observable = Rx.Observable.interval(1000);\n\nobservable\n  .filter(function (value) {\n    return value % 2 == 0;\n  })\n  .subscribe({\n    next: function (value) {\n      console.log(value);\n    },\n    error: function (error) {\n      console.log('Error: ', error);\n    }\n  });\n`.trim();\n\nconst debounceTime = `\n//html\n<html>\n  <script src=\"https://unpkg.com/@reactivex/rxjs@5.3.0/dist/global/Rx.js\"></script>\n  <body>\n    <input type=\"text\">\n      <script src=\"app.js\"></script>\n  </body>\n</html>\n\n\n//js\nvar input = document.querySelector('input');\nvar observable = Rx.Observable.fromEvent(input, 'input');\n\nobservable\n  .subscribe({\n    next: function (event) {\n      console.log(event.target.value);\n    }\n  });\n  \n  \n  \n//2\nvar input = document.querySelector('input');\nvar observable = Rx.Observable.fromEvent(input, 'input');\n\nobservable\n  .map(event => event.target.value)\n  .debounceTime(500)\n  .distinctUntilChanged()\n  .subscribe({\n    next: function (value) {\n      console.log(value);\n    }\n  });\n`.trim();\n\nconst scan = `\nvar input = document.querySelector('input');\nvar observable = Rx.Observable.of(1, 2, 3, 4, 5);\n\nobservable\n  .subscribe({\n    next: function (value) {\n      console.log(value);\n    }\n  });\n\n\n\n//2\nvar observable = Rx.Observable.of(1, 2, 3, 4, 5);\n\nobservable\n  .scan((total, currentValue) => {\n    return total + currentValue;\n  }, 0)\n  .subscribe({\n    next: function (value) {\n      console.log(value);\n    }\n  });\n`.trim();\n\nconst pluck = `\nvar input = document.querySelector('input');\nvar observable = Rx.Observable.fromEvent(input, 'input');\n\nobservable\n  .subscribe({\n    next: function (event) {\n      console.log(event.target.value);\n    }\n  });\n\n\n//2\nvar input = document.querySelector('input');\nvar observable = Rx.Observable.fromEvent(input, 'input');\n\nobservable\n  .pluck('target', 'value')\n  .debounceTime(500)\n  .distinctUntilChanged()\n  .subscribe({\n    next: function (value) {\n      console.log(value);\n    }\n  });\n`.trim();\n\nconst mergeMap = `\n//html\n<body>\n    <input type=\"text\" id=\"input1\">\n      <input type=\"text\" id=\"input2\">\n        <p>Combined value: <span></span></p>\n        <script src=\"app.js\"></script>\n      </body>\n      \n      \n//js\nvar input1 = document.querySelector('#input1');\nvar input2 = document.querySelector('#input2');\n\nvar span = document.querySelector('span');\n\nvar obs1 = Rx.Observable.fromEvent(input1, 'input');\nvar obs2 = Rx.Observable.fromEvent(input2, 'input');\n\nobs1.mergeMap(\nevent1 => {\nreturn obs2.map(event2 => event1.target.value + ' ' + event2.target.value)\n      }\n    ).subscribe(\n    combinedValue => span.textContent = combinedValue\n  );\n`.trim();\n\nconst switchMaps = `\nvar button = document.querySelector('button');\n\nvar obs1 = Rx.Observable.fromEvent(button, 'click');\nvar obs2 = Rx.Observable.interval(1000);\n\nobs1.switchMap(\n  event => {\n    return obs2\n  }\n).subscribe(\n  (value) => console.log(value)\n);\n`.trim();\n\nconst BehaviorSubject = `\nvar clickEmitted = new Rx.Subject();\nvar button = document.querySelector('button');\nvar div = document.querySelector('div');\n\nbutton.addEventListener('click', () => clickEmitted.next('Clicked!'));\n\nclickEmitted.subscribe(\n  (value) => div.textContent = value\n);\n\n\n//2\nvar clickEmitted = new Rx.BehaviorSubject('Not clicked');\nvar button = document.querySelector('button');\nvar div = document.querySelector('div');\n\nbutton.addEventListener('click', () => clickEmitted.next('Clicked!'));\n\nclickEmitted.subscribe(\n  (value) => div.textContent = value\n);\n`.trim();\n\nconst map = `\nimport {Observable, interval} from 'rxjs';\nimport {map} from \"rxjs/operators\";\n\ninterval(1000).pipe(map(data => data * 2))\n              .subscribe((data:number) => {\n                console.log(data)\n              });\n\n\n\n//map\nimport {Observable, interval, Subscriber, pipe} from 'rxjs';\nimport {map} from \"rxjs/operators\";\n\nfunction fetchUser(){\n  const newObservable = new Observable((observer:Subscriber<unknown>) => {\n    const user={\n      data:{firstName: 'Sam', mob: 2345342290}\n    }\n    observer.next(user)\n  });\n  return newObservable.pipe(map(user)=>{\n    return user.data\n  })\n}\n\n\nfetchUser().Subscriber((user)=>{\n  console.log(user)\n})`.trim();\n\nconst filter = `\nimport {interval} from 'rxjs';\nimport {filter, map} from \"rxjs/operators\";\n\nconst observable = interval(100).pipe(filter(data=>{\n  return data<5\n}));\n\nobservable.subscribe(data => {\n  console.log(data);\n})\n`.trim();\n\nconst switchMap = `\nimport {Observable} from 'rxjs';\nimport {switchMap} from \"rxjs/operators\";\n\nfunction buySugarInBulk(){\n  return new Observable(observer=>{\n    observer.next('Suger Perchased');\n  })\n}\n\nfunction getSuger(quantity){\n  return new Observable((observer)=>{\n    return observer.next('Suger ' +quantity+ 'for you' )\n  })\n}\n\nfunction getSugarFromShop(quantity){\n  return buySugarInBulk().pipe(switchMap(()=>{\n    return getSuger(quantity);\n  }));\n}\n\ngetSugarFromShop('1Kg').subscribe(data=>{\n  console.log(data);\n});`.trim();\n\nconst concatMap = `\nimport {timer} from \"rxjs\";\nimport {concatMap, map} from \"rxjs/operators\";\n\nconst timer$ = timer(100, 500)\n                .pipe(map(data => data + 'timer1'));\n\nconst timer2$ = timer(100, 500)\n                .pipe(map(data => data + 'timer2'));\n\nconst observables = timer$.pipe(concatMap(timer1Data => {\n                 return timer2$.pipe(map(data => data + timer1Data));\n}))\n\n\nobservables.subscribe(data => console.log(data));`.trim();\n\nconst observableVsPromises = `\nfunction isBreadAvailable(){\n  return true;\n}\n\nfunction isAggAvailable(){\n  return false;\n}\n\nfunction bringBread(){\n  return new Promise((res, rej) =>{\n    if(isBreadAvailable()) {\n      res('Bread is Available');\n    }\n    else if(isAggAvailable){\n      res('Agg is Available')\n    }\n    else{\n      rej('Bread is bring')\n    }\n  })\n}\n\nbringBread().then((data)=>{\n  console.log(data);\n})\n.catch(err => {\n  console.log(err)\n})`.trim();\n\nconst observableV = `\nimport {BehaviorSubject, timeout} from 'rxjs';\n\nconst data = ['A', 'B', 'C', 'D', 'E'];\nconst fm = new BehaviorSubject('First Data');\n\nfunction changeSongs(){\n  for(let song of data){\n    fm.next(song);\n  }\n}\n\n\nfm.subscribe((song:string)=>{\n  console.log(song);\n});\n\nchangeSongs();\n\nsetTimeout(()=>{\n  fm.subscribe((song:string)=>{\n  console.log(song);\n});\n},1000);`.trim();\n\nconst rxjxLibrary = `import { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';`.trim();\n\nconst observableFun = `import { from } from 'rxjs'; // from function\nconst data = from(fetch('/api/endpoint')); //Created from Promise\ndata.subscribe({\n next(response) {console.log(response);},\n error(err) {console.error('Error: ' + err);},\n complete() {console.log('Completed');}\n});`.trim();\n\nconst observableAJAX = `\nimport { ajax } from 'rxjs/ajax'; // ajax function\nconst apiData = ajax('/api/data'); // Created from AJAX request\n// Subscribe to create the request\napiData.subscribe(res => console.log(res.status, res.response));`.trim();\n\nconst observableCount = `\nimport { interval } from 'rxjs'; // interval function\nconst secondsCounter = interval(1000); // Created from Counter value\nsecondsCounter.subscribe(n =>\n  console.log('Counter value: '$'{n}'));`.trim();\n\nconst observableEvt = `\nimport { fromEvent } from 'rxjs';\nconst el = document.getElementById('custom-element');\nconst mouseMoves = fromEvent(el, 'mousemove');\nconst subscription = mouseMoves.subscribe((e: MouseEvent) => {\n  console.log('Coordnitaes of mouse pointer: '$'{e.clientX} * '$'{e.clientY}');\n  });`.trim();\n\nconst placeholders = `\n//app.component.ts\nimport {PlaceholderService} from \"./services/placeholder.service\"\n\n@Component({\n  selector: 'app-root',\n  template: '\n  <button (click)=\"getApi()\">GET</button>\n    <div *ngFor=\"let items of data\">\n      <p>{{items.id}} - {{items.title}}</p>\n    </div>\n  ',\n})\n\nexport class AppComponent implements OnInit{\n  data:Array<any>;\n  \n  constructor( private https:PlaceholderService) { \n    this.data=new Array<any>()\n   }\n\n  ngOnInit(): void {}\n  getApi(){\n    this.https.getData().subscribe((data)=>{\n      this.data=data\n    })\n  }\n}\n\n\n//services/placeholder.service.ts\nimport { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlaceholderService {\n\n  constructor(private http:HttpClient) { }\n\n  getData(): Observable<any>{\n    const url=\"https://jsonplaceholder.typicode.com/posts\";\n    return this.http.get<any>(url)\n  }\n}\n`.trim();\n\n\nclass Rxjs extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Rxjs With Pure Js (Reactive Extension for JavaScript)</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={purejs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>RxJS OPERATORS LIKE map() OR throttleTime()</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={throttleTime}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>RxJS SUBJECT (~EventEmitter)</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={fixrxjs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>filter() OPERATOR</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={filteringrxjs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>debounceTime & distinctUntilChanged </h3>\n              <div style={titles}>\n                <PrismCode\n                  code={debounceTime}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>scan() vs reduce()</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={scan}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>pluck()</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={pluck}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>mergeMap()</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={mergeMap}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>switchMap()</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={switchMaps}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>BehaviorSubject</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={BehaviorSubject}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <h3>What is RxJS With Angular</h3>\n              RxJS is a library for composing asynchronous and callback-based code in a functional, reactive style using Observables. Many APIs such as HttpClient produce and consume RxJS Observables and also uses operators for processing observables.\n              <div style={titles}>\n                <PrismCode\n                  code={rxjxLibrary}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>What are the utility functions provided by RxJS</h3>\n              The RxJS library also provides below utility functions for creating and working with observables.\n              <ul>\n                <li>Converting existing code for async operations into observables</li>\n                <li>Iterating through the values in a stream</li>\n                <li>Mapping values to different types</li>\n                <li>Filtering streams</li>\n                <li>Composing multiple streams</li>\n              </ul>\n              <br />\n\n              <h3>What are observable creation functions</h3>\n              RxJS provides creation functions for the process of creating observables from things such as promises, events, timers and Ajax requests.\n              <br />\n              <b>1. Create an observable from a promise</b>\n              <div style={titles}>\n                <PrismCode\n                  code={observableFun}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>2. Create an observable that creates an AJAX request</b>\n              <div style={titles}>\n                <PrismCode\n                  code={observableAJAX}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>3. Create an observable from a counter</b>\n              <div style={titles}>\n                <PrismCode\n                  code={observableCount}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>4. Create an observable from an event</b>\n              <div style={titles}>\n                <PrismCode\n                  code={observableEvt}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <h3>Map</h3>\n              <ul>\n                <li>map change observable value.</li>\n                <li>map to transform a collection of items into a collection of different items.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={map}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Filter</h3>\n              This operator takes values from the source Observable, passes them through a predicate function and only emits those values that get TRUE.\n              <div style={titles}>\n                <PrismCode\n                  code={filter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n                <br />\n\n                <h3>SwitchMap</h3>\n                switchMap operator is basically a combination of two operators - switchAll and map. The map part lets you map a value from a higher-order source observable to an inner observable stream. When a new value arrives from a source observable, execute a map function that returns an inner observable.\n                <div style={titles}>\n                  <PrismCode\n                    code={switchMap}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n                <br />\n\n                <h3>concatMap</h3>\n\n                <div style={titles}>\n                  <PrismCode\n                    code={concatMap}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n                <br />\n\n                <h3>OservableVsPromises</h3>\n\n                <div style={titles}>\n                  <PrismCode\n                    code={observableVsPromises}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n                <br />\n\n                <h3>BehaviorSubject ObservableV:</h3>\n                <div style={titles}>\n                  <PrismCode\n                    code={observableV}\n                    language=\"js\"\n                    plugins={[\"line-numbers\"]}\n                  />\n                </div>\n              </div>\n              <br />\n\n              <h3>Placeholders</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={placeholders}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Rxjs));\n"]},"metadata":{},"sourceType":"module"}