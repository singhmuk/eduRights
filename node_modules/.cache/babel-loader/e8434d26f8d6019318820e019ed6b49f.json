{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/javaScripts/deepJs/array.js\";\nimport React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport '../../ReactJs/styles.css';\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\nconst titles = {\n  backgroundColor: '#F0F8FF',\n  padding: '1px',\n  fontSize: '16px'\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst nonInteger = `\nlet arr = []\narr[3.4] = 'Oranges'\n\narr.length                                                      // 0\narr.hasOwnProperty(3.4)                                         // true\n\narr.property = \"value\";                                         //Using arrays to store other properties\nconsole.log(arr);    \n`.trim();\nconst copyWithin = `\nfunction copyWith(){\n  var arr = [];\n  fetch('https://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then(mockdata => {\n        mockdata.map(val => {\n          arr.push(val.name);\n      })\n      \n    console.log('copyArr',copyArr(arr))\n    });\n  }\n    \n  const copyArr = (arr) => {\n    var result=arr.copyWithin(0,1,3);\n    return result;\n  }\n  \n  copyWith();`.trim();\nconst iters = `\narr.filter(val => 3 > val)\n\narr.find(val => 3 > val)\n\narr.findIndex(val => 3 > val)\n\narr.reduce((a, b) => a + b)\n\narr.some((a) => a > 4)\n\narr.toLocaleString('en', { timeZone: \"UTC\" })\n`.trim();\nconst entries = `\nconst entriesArr = (arr) => {\n  var itr = arr.entries();\n  for (var e of itr) {\n    console.log(e);\n  }\n}\n\nentriesArr(['a', 'b', 'c']);`.trim();\nconst multiArray = `\n//1\nlet a = new Array(4)\nfor (var i = 0; i < 4; i++) {\n  a[i] = new Array(4)\n  for (var j = 0; j < 4; j++) {\n    a[i][j] = [ + i + ', ' + j ];\n    console.log(a[i][j]);\n  }\n}\n\n\n//2\nlet myNestedArray = [\n  ['unshift', false, 1, 2, 3, 'complex', 'nested'],\n  [['loop'], ['deep'], ['shift', 6, 7, 1000, 'method']],\n  [[['concat'], ['deeper'], [false, true, 'spread', 'array']],\n  [[['mutate', 1327.98], ['deepest', 'splice', 'slice', 'push']]\n  ]]\n];\n\nconsole.log(myNestedArray)`.trim();\nconst combined = `\nfunction spreadOut() {\n  let fragment = ['to', 'code'];\n  let sentence = ['learning', ...fragment, 'is', 'fun']; \n  return sentence;\n}\n\nconsole.log(spreadOut());`.trim();\nconst spreadOp = `\nfunction copyMachine(arr, num) {\n  let newArr = [];\n  while (num >= 1) {\n    newArr = [[...arr], ...newArr];\n    num--;\n  }\n  return newArr;\n}\n\nconsole.log(copyMachine([true, false, true], 2));`.trim();\nconst modifyArr = `\nlet user = {\n  name: 'Kenneth',\n  age: 28,\n  data: {\n    username:'kennethCodesAllDay',\n    joinDate:'March 26, 2016',\n    organization:'freeCodeCamp',\n    friends: ['Sam', 'Kira', 'Tomo'],\n    location: {\n      city: 'San Francisco',\n      state: 'CA',\n      country: 'USA'\n    }\n  }\n};\n\nfunction addFriend(userObj, friend) {\n  userObj.data.friends.push(friend);\n  return userObj;\n};\n\nconsole.log(addFriend(user, 'Pete'));\n`.trim();\nconst jsNum = `\nex. (123).toString()\n\nx = Number(true)                                     //1\nx = Number(false)                                    //0\nx = Number(new Date())                               //1615382431900\nx = Number(\"999\")                                    //999\nx = Number(\"999 888\")                                //NaN\n\n\n// parseFloat\nx = parseFloat(\"10\")                                 //10\nx = parseFloat(\"10.00\")                              //10\nx = parseFloat(\"10.33\")                              //10.33\nx = parseFloat(\"34 45 66\")                           //34\nx = parseFloat(\"   60   \")                           //60\nx = parseFloat(\"40 years\")                           //40\nx = parseFloat(\"He was 40\")                          //NaN\n\n\n//isFinite\nx = isFinite(123)                                    //true\nx = isFinite(-1.23)                                  //true\nx = isFinite(\"123\")                                  //true\nx = isFinite(\"Hello\")                                //false\nx = isFinite(\"2005/12/12\")                           //false\n\n\n//isNaN\nx = isNaN(123)                                       //false\nx = isNaN(-1.23)                                     //false\nx = isNaN(\"123\")                                     //false\nx = isNaN(\"Hello\")                                   //true\nx = isNaN(\" \")                                       //false\nx = isNaN(true)                                      //false\nx = isNaN(undefined)                                 //true\nx = isNaN(NaN)                                       //true\nx = isNaN(0 / 0)                                     //true\nx = isNaN(null)                                      //false\n\nconsole.log(x)\n`.trim();\nconst dataTypes = `\nvar x = Math.abs(-7.25)                                             //7.25\nvar x = Math.abs(7.25)                                              //7.25\n\n\nvar x = Math.ceil(-7.25)                                            //-7\nvar x = Math.ceil(7.25)                                             //8\n\n\nvar x = Math.floor(-7.25)                                           //-8\nvar x = Math.floor(7.25)                                            //7\n\n\nvar x = Math.fround(-7.25)                                          //-7.25\nvar x = Math.fround(7.25)                                           //7.25\nvar x = Math.fround(2.60)                                           //2.5999999046325684\nvar x = Math.fround(2.50)                                           //2.5\n\nMath.max(-7.25, 7.25)                                               //7.25\nMath.min(-7.25, 7.25)                                               //-7.25\n//Sign\nvar x = Math.sign(7.25)                                                                //1\nvar x = Math.sign(-7.25)                                                               //-1\nvar x = Math.sign(0)                                                                   //0\nvar x = Math.sqrt(-7.25)                                                               //NaN\nvar x = Math.sqrt(9) \n\nconsole.log(x)\n\n\n//Math.PI\nconsole.log(Math.PI);                                               //3.14\n`.trim();\nconst decimal = `\nvar num = 123.4567\nvar mockData = [1, 6, 7, 8, 9, 0, 8, 2, 3, 4, 5]\n\nvar x = num.toFixed(2)\nx = num.toPrecision(6)\nx = mockData.sort()\nx = mockData[0] = \"cars\"\nx = delete mockData[0];\nx = mockData.splice(2, 0, \"Lemon\", \"Kiwi\");\nx = mockData.slice(1);\n\nconsole.log(x)\n`.trim();\nconst random = `\nfunction getRndInteger(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n }\n \n getRndInteger(2,7)\n \n\n\n//2 Random Function\nfunction randomObj() {\n  let a, b, c, d, e, f, g, h, i, j\n     a = Math.floor(Math.random() * 10);                           //returns a random integer from 0 to 9.\n     b = Math.floor(Math.random() * 10) + 1;  \n     \n     return [a,\"-\", b]\n}\n\nrandomObj()\n`.trim();\nconst decimalToBinary = `function decimalToBinary(num) {\n  var bin = [];\n  while (num > 0) {\n    bin.unshift(num % 2);\n    num >>= 1;\n  }\n  console.log(bin.join(''));\n }\n \n decimalToBinary(2);\n`.trim();\nconst DecimalToOctal = `function decimalToOctal(num) {\n  var oct = 0,c=0;\n  while (num > 0) {\n    var r=num%8;\n    oct=oct+(r*Math.pow(10,c++));\n    num =Math.floor(num/ 8);                                   //basically /= 8 without remainder if any.\n  }\n  console.log(oct);\n }\n \n decimalToOctal(2);\n `.trim();\nconst DecimalToHex = `\n function intToHex(num){\n   switch(num){\n         case 10: return \"A\";\n         case 11: return \"B\";\n         case 12: return \"C\";\n         case 13: return \"D\";\n         case 14: return \"E\";\n         case 15: return \"F\";\n       }\n     return num;\n  }\n  \n  function decimalToHex(num){\n     let hex_out = [];\n     while(num > 15) {\n       hex_out.push(intToHex(num/16))\n   }\n   \n return intToHex(num) + hex_out.join(\"\");\n }\n \n console.log(decimalToHex(999098) === \"F3EBA\");\n console.log(decimalToHex(123) === \"7B\");\n `.trim();\nconst stringFun = `\n var a = new Date();                                  //Wed Mar 10 2021 19:18:41 GMT+0530 (India Standard Time)\n var b = \"12345\";                                                //12345\n var c = 12345;                                                  //12345\n `.trim();\nconst trim = `\n var str = 'Centralized empowering task-force';\n var str2 = '';\n var str3 = '';\n \n str = str.charAt(3)\n str2 = str.concat(str3)\n str3 = str2.charCodeAt(3)                                                         //116\n str4 = str.indexOf('t')                                                           //-1\n str5 = str2.search('empowering')                                                  //12\n str6 = str2.match('ing')\n str7 = str2.replace('empowering', 'women')                                 //Centralized women task-force\n str8 = str2.substr(2, 7)                                                          //ntraliz\n str9 = str2.substring(2, 7)                                                       //ntral            \n str10 = str2.valueOf()                                                     //Centralized empowering task-force\n str11 = \"   empowering\"\n str12 = str11.slice(2, 5)                                                         //em\n str13 = str11.toUpperCase()                                                       //EMPOWERING\n \n console.log('toUpperCase', str13)\n   `.trim();\nconst interpolation = `\n let firstName = \"John\";\n let lastName = \"Doe\";\n \n let text = 'Welcome '$'{firstName}, '$'{lastName}!';\n console.log(text)\n `.trim();\n\nclass Arrays extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }, \"Indexed collections: \"), \"An array is an ordered list of values that refer with a name and an index.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }, \"1.Creating an array\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }, \"let arr = new Array(0, 1, ..., N);\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }, \"let arr = Array(0, 1, ..., N);\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, \"let arr = [0, 1, ..., N];\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }), \"If supply a non-integer value to the array operator, a property will be created in the object representing the array, instead of an array element.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: nonInteger,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, \"Array Methods\"), \"const arr = [\\\"Saab\\\", \\\"Volvo\\\", \\\"BMW\\\", 1, 2, 3, 4, 5, new Date('08 Jan 1997 17:12:00 UTC')];\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }), \"Also create an array, and then provide the elements:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }), \"const cars = [];\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }), \"cars[0]= \\\"Saab\\\";\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }, \"Using new keyword: \"), \"const arr2 = new Array(\\\"Aulto\\\", \\\"Zipsi\\\", \\\"Bokati\\\");\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, \"Accessing array elements: \"), \"arr[0]\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, \"Changing an array element: \"), \"arr[0] = \\\"Opel\\\"\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }, \"arr.length: \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }, \"arr.sort(): \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }, \"arr.push(\\\"Lemon\\\"): \"), \"Adds one or more elements to the end of an array.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }, \"arr.pop(): \"), \"Removes and returns the last element of an array.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }, \"shift():\"), \"It removes and returns the first element of an array.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }, \"unshift(): \"), \"Adds one or more elements in the beginning of the given array.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }, \"Array.isArray(arr): \"), \"Tests if the passed value ia an array.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }, \"toString(): \"), \"arr.toString()\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }, \"It converts the elements of a specified array into string form, without affecting the original array.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }, \"arr.flat(): \"), \"Creates a new array carrying sub-array elements concatenated recursively till the specified depth.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }, \"arr.fill(\\\"Bootstrap\\\"): \"), \"Fills elements into an array with static values.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, \"Array.from(arr): \"), \"Creates a new array carrying the exact copy of another array element.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, \"arr.includes(\\\"Saab\\\"): \"), \"Checks whether the given array contains the specified element.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }, \"arr.indexOf(\\\"Saab\\\"): \"), \"Searches the specified element in the given array and returns the index of the first match.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }, \"arr.join(\\\"-\\\"): \"), \"Joins the elements of an array as a string.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }, \"arr.lastIndexOf(\\\"BMW\\\"): \"), \"Searches the specified element in the given array and returns the index\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }, \"arr.reverse(): \"), \"Reverses the elements of given array.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }, \"arr.slice(1, 2): \"), \"Returns a new array containing the copy of the part of the given array.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }, \"arr.sort(): \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }, \"arr.splice(1, 2): \"), \"Modify original array.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    }, \"concat(): \"), \"Returns a new array object that contains two or more merged arrays.\"), \"forEach(), map(), of(), reduceRight()\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }, \"Iterator Array\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }, \"filter(): \"), \"Returns the new array containing the elements that pass the provided function conditions.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }, \"find(): \"), \"Returns the value of the first element in the given array that satisfies the specified condition.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }, \"findIndex(): \"), \"Returns the index value of the first element in the given array that satisfies the specified condition.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }, \"reduce(): \"), \"Executes a provided function for each value from left to right and reduces the array to a single value.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    }, \"some(): \"), \"Determines if any element of the array passes the test of the implemented function.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }, \"toLocaleString(): \"), \"Returns a string containing all the elements of a specified array.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: iters,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }, \"entries(): \"), \"It creates an iterator object and a loop that iterates over each key/value pair.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: entries,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }, \"values():\"), \" It creates a new iterator object carrying values for each index in the array.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }, \"Multi-dimensional arrays: \"), \"Array can contain another array as an element.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    }, \"Ex. \"), \"Creates a two-dimensional array.\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: multiArray,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }, \"2. Combine Arrays with the Spread Operator\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    }, \"Spread operator have ability to combine arrays, or to insert all the elements of one array into another, at any index.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: combined,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: spreadOp,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }, \"Modify an Array Stored in an Object\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: modifyArr,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }, \"3. Create a Set\"), \"const my_set = new Set([\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"a\\\"])\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    }, \"Add items in existing set: \"), \"my_set.add(\\\"ab\\\");\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    }, \"Set Methods: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }, \"my_set.values(): \"), \"returns a new Set containing all the values in a Set.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }, \"my_set.add(\\\"UO\\\"): \"), \"Adds a new element to the Set.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }, \"delete(): \"), \"Removes an element from a Set.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }, \"has(): \"), \"Returns true if a value exists in the Set.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }, \"values: \"), \"Returns an iterator with all the values in a Set.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, \"size: \"), \"Returns the number of elements in a Set.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }, \"4. JsNumbers\"), \"JavaScript Numbers are Always 64-bit Floating Point.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }, \"parseFloat():\"), \" Parses a string and returns a floating point number.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }, \"This function determines if the first character in the specified string is a number. If it is, it parses the string until it reaches the end of the number, and returns the number as a number, not as a string.\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548\n      },\n      __self: this\n    }, \"Only the first number in the string is returned!\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }, \"Leading and trailing spaces are allowed.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    }, \"If the first character cannot be converted to a number, parseFloat() returns NaN.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555\n      },\n      __self: this\n    }, \"isFinite:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    }, \"Determines whether a number is a finite, legal number.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558\n      },\n      __self: this\n    }, \"Returns false if the value is +infinity, -infinity, or NaN, Otherwise it returns true.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562\n      },\n      __self: this\n    }, \"isNan: \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    }, \"Returns true if the argument is not a number otherwise it is false.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569\n      },\n      __self: this\n    }, \"This format stores numbers in 64 bits, where the number (the fraction) is stored in bits 0 to 51, the exponent in bits 52 to 62, and the sign in bit 63.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }, \"Extra large or extra small numbers can be written with scientific (exponent) notation.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572\n      },\n      __self: this\n    }, \"NaN is a JavaScript reserved word indicating that a number is not a legal number. Trying to do arithmetic with a non-numeric string will result in NaN.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575\n      },\n      __self: this\n    }, \"Ex. \"), \"100 / \\\"Apple\\\";\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580\n      },\n      __self: this\n    }, \"toString(): \"), \"Returns a number as a string.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581\n      },\n      __self: this\n    }, \"toFixed(): \"), \"Returns a string, with the number written with a specified number of decimals.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    }, \"toPrecision(): \"), \"Returns a string, with a number written with a specified length.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583\n      },\n      __self: this\n    }, \"parseInt(): \"), \"Parses a string and returns a whole number.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584\n      },\n      __self: this\n    }, \"splice(): \"), \"Method can be used to add new items to an array.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585\n      },\n      __self: this\n    }, \"slice(): \"), \"Method creates a new array. It does not remove any elements from the source array.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: jsNum,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599\n      },\n      __self: this\n    }, \"Sign\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601\n      },\n      __self: this\n    }, \"Math.abs: \"), \"Return the absolute value of a number.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602\n      },\n      __self: this\n    }, \"ceil():: \"), \"Rounds a number UPWARDS to the nearest integer, and returns the result.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603\n      },\n      __self: this\n    }, \"floor(): \"), \"Round a number downward to its nearest integer.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604\n      },\n      __self: this\n    }, \"round(): \"), \"Returns the nearest (32-bit single precision) float representation of a number.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 605\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 605\n      },\n      __self: this\n    }, \"max(): \"), \"Returns the number with the highest value.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606\n      },\n      __self: this\n    }, \"min(): \"), \"Returns the number with the lowest value.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608\n      },\n      __self: this\n    }), \"The sign() method checks whether a number is negative, positive or zero.\", React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610\n      },\n      __self: this\n    }, \"If the number is positive, this method returns 1.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611\n      },\n      __self: this\n    }, \"If the number is negative, it returns -1.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    }, \"If the number is zero, it returns 0.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    }, \"sqrt(): \"), \"Return the square root of a number.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: dataTypes,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 623\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    }, \"5. Numbers formate\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: decimal,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 633\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 635\n      },\n      __self: this\n    }, \"6. Random Number\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: random,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 643\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645\n      },\n      __self: this\n    }, \"7. DecimalToBinary\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: decimalToBinary,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 653\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }, \"8. DecimalToOctal\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: DecimalToOctal,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665\n      },\n      __self: this\n    }, \"9. DecimalToHex\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: DecimalToHex,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675\n      },\n      __self: this\n    }, \"10. String\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    }, \"String() converts the value of an object to a string.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678\n      },\n      __self: this\n    }, \"String() returns the same value as toString() of the individual objects.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: stringFun,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690\n      },\n      __self: this\n    }, \"There are 2 ways to create string in JavaScript\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691\n      },\n      __self: this\n    }), \"1.By string literal\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692\n      },\n      __self: this\n    }), \"var str = \\\"Please locate where 'locate' occurs!\\\";\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 695\n      },\n      __self: this\n    }), \"2.By string object\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 696\n      },\n      __self: this\n    }), \"var str2 = new String(\\\"string literal\\\");\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701\n      },\n      __self: this\n    }, \"charAt:\"), \" It provides the char value present at the specified index.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 702\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 702\n      },\n      __self: this\n    }, \"charCodeAt():\"), \" It provides the Unicode value of a character present at the specified index.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703\n      },\n      __self: this\n    }, \"concat():\"), \" It provides a combination of two or more strings.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704\n      },\n      __self: this\n    }, \"indexOf():\"), \" It provides the position of a char value present in the given string.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 706\n      },\n      __self: this\n    }, \"lastIndexOf():\"), \" It provides the position of a char value present in the given string by searching a character from the last position.\"), \"str.lastIndexOf(\\\"locate\\\", 15)\", React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711\n      },\n      __self: this\n    }, \"search():\"), \" It searches a specified regular expression in a given string and returns its position if a match occurs.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 714\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 717\n      },\n      __self: this\n    }, \"indexOf() and search() accept the same arguments, and return the same value. But they has differences as:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 718\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 719\n      },\n      __self: this\n    }, \"The search() method cannot take a second start position argument.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 720\n      },\n      __self: this\n    }, \"The indexOf() method cannot take regular expressions.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 722\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725\n      },\n      __self: this\n    }, \"match():\"), \" It searches a specified regular expression in a given string and returns that regular expression if a match occurs, as an Array object.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 728\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 729\n      },\n      __self: this\n    }, \"replace():\"), \" It replaces a given string with the specified replacement.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732\n      },\n      __self: this\n    }, \"substr():\"), \" It is used to fetch the part of the given string on the basis of the specified starting position and length.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735\n      },\n      __self: this\n    }, \"substring(): \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 736\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 737\n      },\n      __self: this\n    }, \"substring() is similar to slice(), but substring() cannot accept negative indexes.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 738\n      },\n      __self: this\n    }, \"It is used to fetch the part of the given string on the basis of the specified index.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 741\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 743\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 743\n      },\n      __self: this\n    }, \"valueOf():\"), \" It provides the primitive value of string object.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 744\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 744\n      },\n      __self: this\n    }, \"trim():\"), \" It trims the white space from the left and right side of the string.\"), \"str.trim()\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 747\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 749\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 749\n      },\n      __self: this\n    }, \"str.length: \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 750\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 750\n      },\n      __self: this\n    }, \"str.includes(\\\"Please\\\"): \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 751\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 751\n      },\n      __self: this\n    }, \"str.startsWith(\\\"occurs\\\"): \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 752\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 752\n      },\n      __self: this\n    }, \"str.endsWith(\\\"locate\\\"): \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753\n      },\n      __self: this\n    }, \"str.slice(7, 13): \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754\n      },\n      __self: this\n    }, \"str.toUpperCase(): \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 755\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 755\n      },\n      __self: this\n    }, \"str.toLowerCase(): \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 756\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 756\n      },\n      __self: this\n    }, \"Property Access: \"), \"str[0]\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 757\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 757\n      },\n      __self: this\n    }, \"String can be converted to an array with the split() method: \"), \"str.split(\\\" \\\")\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 759\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 760\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: trim,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 761\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 767\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 769\n      },\n      __self: this\n    }, \"11. String Interpolation\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 770\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 771\n      },\n      __self: this\n    }, \"It allows injecting variables, function calls, arithmetic expressions directly into a string.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 772\n      },\n      __self: this\n    }, \"In JavaScript, the template literals and $ Curly braces expression as placeholders perform the string interpolation.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 775\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: interpolation,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 776\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 782\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 784\n      },\n      __self: this\n    }, \"13. Fetch javaScript\"), \"It copies the part of the given array with its own elements and returns the modified array.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 786\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 787\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: copyWithin,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 788\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(Arrays);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/javaScripts/deepJs/array.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","nonInteger","trim","copyWithin","iters","entries","multiArray","combined","spreadOp","modifyArr","jsNum","dataTypes","decimal","random","decimalToBinary","DecimalToOctal","DecimalToHex","stringFun","interpolation","Arrays","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst nonInteger = `\nlet arr = []\narr[3.4] = 'Oranges'\n\narr.length                                                      // 0\narr.hasOwnProperty(3.4)                                         // true\n\narr.property = \"value\";                                         //Using arrays to store other properties\nconsole.log(arr);    \n`.trim();\n\nconst copyWithin = `\nfunction copyWith(){\n  var arr = [];\n  fetch('https://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then(mockdata => {\n        mockdata.map(val => {\n          arr.push(val.name);\n      })\n      \n    console.log('copyArr',copyArr(arr))\n    });\n  }\n    \n  const copyArr = (arr) => {\n    var result=arr.copyWithin(0,1,3);\n    return result;\n  }\n  \n  copyWith();`.trim()\n\nconst iters = `\narr.filter(val => 3 > val)\n\narr.find(val => 3 > val)\n\narr.findIndex(val => 3 > val)\n\narr.reduce((a, b) => a + b)\n\narr.some((a) => a > 4)\n\narr.toLocaleString('en', { timeZone: \"UTC\" })\n`.trim();\n\nconst entries = `\nconst entriesArr = (arr) => {\n  var itr = arr.entries();\n  for (var e of itr) {\n    console.log(e);\n  }\n}\n\nentriesArr(['a', 'b', 'c']);`.trim()\n\nconst multiArray = `\n//1\nlet a = new Array(4)\nfor (var i = 0; i < 4; i++) {\n  a[i] = new Array(4)\n  for (var j = 0; j < 4; j++) {\n    a[i][j] = [ + i + ', ' + j ];\n    console.log(a[i][j]);\n  }\n}\n\n\n//2\nlet myNestedArray = [\n  ['unshift', false, 1, 2, 3, 'complex', 'nested'],\n  [['loop'], ['deep'], ['shift', 6, 7, 1000, 'method']],\n  [[['concat'], ['deeper'], [false, true, 'spread', 'array']],\n  [[['mutate', 1327.98], ['deepest', 'splice', 'slice', 'push']]\n  ]]\n];\n\nconsole.log(myNestedArray)`.trim();\n\nconst combined = `\nfunction spreadOut() {\n  let fragment = ['to', 'code'];\n  let sentence = ['learning', ...fragment, 'is', 'fun']; \n  return sentence;\n}\n\nconsole.log(spreadOut());`.trim();\n\nconst spreadOp = `\nfunction copyMachine(arr, num) {\n  let newArr = [];\n  while (num >= 1) {\n    newArr = [[...arr], ...newArr];\n    num--;\n  }\n  return newArr;\n}\n\nconsole.log(copyMachine([true, false, true], 2));`.trim();\n\nconst modifyArr = `\nlet user = {\n  name: 'Kenneth',\n  age: 28,\n  data: {\n    username:'kennethCodesAllDay',\n    joinDate:'March 26, 2016',\n    organization:'freeCodeCamp',\n    friends: ['Sam', 'Kira', 'Tomo'],\n    location: {\n      city: 'San Francisco',\n      state: 'CA',\n      country: 'USA'\n    }\n  }\n};\n\nfunction addFriend(userObj, friend) {\n  userObj.data.friends.push(friend);\n  return userObj;\n};\n\nconsole.log(addFriend(user, 'Pete'));\n`.trim();\n\nconst jsNum = `\nex. (123).toString()\n\nx = Number(true)                                     //1\nx = Number(false)                                    //0\nx = Number(new Date())                               //1615382431900\nx = Number(\"999\")                                    //999\nx = Number(\"999 888\")                                //NaN\n\n\n// parseFloat\nx = parseFloat(\"10\")                                 //10\nx = parseFloat(\"10.00\")                              //10\nx = parseFloat(\"10.33\")                              //10.33\nx = parseFloat(\"34 45 66\")                           //34\nx = parseFloat(\"   60   \")                           //60\nx = parseFloat(\"40 years\")                           //40\nx = parseFloat(\"He was 40\")                          //NaN\n\n\n//isFinite\nx = isFinite(123)                                    //true\nx = isFinite(-1.23)                                  //true\nx = isFinite(\"123\")                                  //true\nx = isFinite(\"Hello\")                                //false\nx = isFinite(\"2005/12/12\")                           //false\n\n\n//isNaN\nx = isNaN(123)                                       //false\nx = isNaN(-1.23)                                     //false\nx = isNaN(\"123\")                                     //false\nx = isNaN(\"Hello\")                                   //true\nx = isNaN(\" \")                                       //false\nx = isNaN(true)                                      //false\nx = isNaN(undefined)                                 //true\nx = isNaN(NaN)                                       //true\nx = isNaN(0 / 0)                                     //true\nx = isNaN(null)                                      //false\n\nconsole.log(x)\n`.trim();\n\nconst dataTypes = `\nvar x = Math.abs(-7.25)                                             //7.25\nvar x = Math.abs(7.25)                                              //7.25\n\n\nvar x = Math.ceil(-7.25)                                            //-7\nvar x = Math.ceil(7.25)                                             //8\n\n\nvar x = Math.floor(-7.25)                                           //-8\nvar x = Math.floor(7.25)                                            //7\n\n\nvar x = Math.fround(-7.25)                                          //-7.25\nvar x = Math.fround(7.25)                                           //7.25\nvar x = Math.fround(2.60)                                           //2.5999999046325684\nvar x = Math.fround(2.50)                                           //2.5\n\nMath.max(-7.25, 7.25)                                               //7.25\nMath.min(-7.25, 7.25)                                               //-7.25\n//Sign\nvar x = Math.sign(7.25)                                                                //1\nvar x = Math.sign(-7.25)                                                               //-1\nvar x = Math.sign(0)                                                                   //0\nvar x = Math.sqrt(-7.25)                                                               //NaN\nvar x = Math.sqrt(9) \n\nconsole.log(x)\n\n\n//Math.PI\nconsole.log(Math.PI);                                               //3.14\n`.trim();\n\n\nconst decimal = `\nvar num = 123.4567\nvar mockData = [1, 6, 7, 8, 9, 0, 8, 2, 3, 4, 5]\n\nvar x = num.toFixed(2)\nx = num.toPrecision(6)\nx = mockData.sort()\nx = mockData[0] = \"cars\"\nx = delete mockData[0];\nx = mockData.splice(2, 0, \"Lemon\", \"Kiwi\");\nx = mockData.slice(1);\n\nconsole.log(x)\n`.trim();\n\nconst random = `\nfunction getRndInteger(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n }\n \n getRndInteger(2,7)\n \n\n\n//2 Random Function\nfunction randomObj() {\n  let a, b, c, d, e, f, g, h, i, j\n     a = Math.floor(Math.random() * 10);                           //returns a random integer from 0 to 9.\n     b = Math.floor(Math.random() * 10) + 1;  \n     \n     return [a,\"-\", b]\n}\n\nrandomObj()\n`.trim();\n\n\nconst decimalToBinary = `function decimalToBinary(num) {\n  var bin = [];\n  while (num > 0) {\n    bin.unshift(num % 2);\n    num >>= 1;\n  }\n  console.log(bin.join(''));\n }\n \n decimalToBinary(2);\n`.trim();\n\n\nconst DecimalToOctal = `function decimalToOctal(num) {\n  var oct = 0,c=0;\n  while (num > 0) {\n    var r=num%8;\n    oct=oct+(r*Math.pow(10,c++));\n    num =Math.floor(num/ 8);                                   //basically /= 8 without remainder if any.\n  }\n  console.log(oct);\n }\n \n decimalToOctal(2);\n `.trim();\n\nconst DecimalToHex = `\n function intToHex(num){\n   switch(num){\n         case 10: return \"A\";\n         case 11: return \"B\";\n         case 12: return \"C\";\n         case 13: return \"D\";\n         case 14: return \"E\";\n         case 15: return \"F\";\n       }\n     return num;\n  }\n  \n  function decimalToHex(num){\n     let hex_out = [];\n     while(num > 15) {\n       hex_out.push(intToHex(num/16))\n   }\n   \n return intToHex(num) + hex_out.join(\"\");\n }\n \n console.log(decimalToHex(999098) === \"F3EBA\");\n console.log(decimalToHex(123) === \"7B\");\n `.trim();\n\nconst stringFun = `\n var a = new Date();                                  //Wed Mar 10 2021 19:18:41 GMT+0530 (India Standard Time)\n var b = \"12345\";                                                //12345\n var c = 12345;                                                  //12345\n `.trim();\n\nconst trim = `\n var str = 'Centralized empowering task-force';\n var str2 = '';\n var str3 = '';\n \n str = str.charAt(3)\n str2 = str.concat(str3)\n str3 = str2.charCodeAt(3)                                                         //116\n str4 = str.indexOf('t')                                                           //-1\n str5 = str2.search('empowering')                                                  //12\n str6 = str2.match('ing')\n str7 = str2.replace('empowering', 'women')                                 //Centralized women task-force\n str8 = str2.substr(2, 7)                                                          //ntraliz\n str9 = str2.substring(2, 7)                                                       //ntral            \n str10 = str2.valueOf()                                                     //Centralized empowering task-force\n str11 = \"   empowering\"\n str12 = str11.slice(2, 5)                                                         //em\n str13 = str11.toUpperCase()                                                       //EMPOWERING\n \n console.log('toUpperCase', str13)\n   `.trim();\n\n\nconst interpolation = `\n let firstName = \"John\";\n let lastName = \"Doe\";\n \n let text = 'Welcome '$'{firstName}, '$'{lastName}!';\n console.log(text)\n `.trim();\n\n\nclass Arrays extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <b>Indexed collections: </b>\n              An array is an ordered list of values that refer with a name and an index.\n              <br />\n              <h3>1.Creating an array</h3>\n              <ul>\n                <li>let arr = new Array(0, 1, ..., N);</li>\n                <li>let arr = Array(0, 1, ..., N);</li>\n                <li>let arr = [0, 1, ..., N];</li>\n              </ul>\n              <br />\n              If supply a non-integer value to the array operator, a property will be created in the\n              object representing the array, instead of an array element.\n              <div style={titles}>\n                <PrismCode\n                  code={nonInteger}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Array Methods</h3>\n              const arr = [\"Saab\", \"Volvo\", \"BMW\", 1, 2, 3, 4, 5, new Date('08 Jan 1997 17:12:00 UTC')];\n              <br />\n              <br />\n\n              Also create an array, and then provide the elements:\n              <br />\n              const cars = [];<br />\n              cars[0]= \"Saab\";\n\n              <br />\n              <br />\n              <b>Using new keyword: </b>\n              const arr2 = new Array(\"Aulto\", \"Zipsi\", \"Bokati\");\n              <br />\n              <ul>\n                <li><b>Accessing array elements: </b>arr[0]</li>\n                <li><b>Changing an array element: </b>arr[0] = \"Opel\"</li>\n                <li><b>arr.length: </b></li>\n                <li><b>arr.sort(): </b></li>\n                <li><b>arr.push(\"Lemon\"): </b>Adds one or more elements to the end of an array.</li>\n                <li><b>arr.pop(): </b>Removes and returns the last element of an array.</li>\n                <li><b>shift():</b>It removes and returns the first element of an array.</li>\n                <li><b>unshift(): </b>Adds one or more elements in the beginning of the given array.</li>\n                <li><b>Array.isArray(arr): </b>Tests if the passed value ia an array.</li>\n                <li><b>toString(): </b>arr.toString()</li>\n                <ul>\n                  <li>It converts the elements of a specified array into string form, without affecting the original array.</li>\n                </ul>\n                <br />\n\n                <li><b>arr.flat(): </b>Creates a new array carrying sub-array elements concatenated recursively till the specified depth.</li>\n                <li><b>arr.fill(\"Bootstrap\"): </b>Fills elements into an array with static values.</li>\n                <li><b>Array.from(arr): </b>Creates a new array carrying the exact copy of another array element.</li>\n                <li><b>arr.includes(\"Saab\"): </b>Checks whether the given array contains the specified element.</li>\n                <li><b>arr.indexOf(\"Saab\"): </b>Searches the specified element in the given array and returns the index of the first match.</li>\n                <li><b>arr.join(\"-\"): </b>Joins the elements of an array as a string.</li>\n                <li><b>arr.lastIndexOf(\"BMW\"): </b>Searches the specified element in the given array and returns the index</li>\n                <li><b>arr.reverse(): </b>Reverses the elements of given array.</li>\n                <li><b>arr.slice(1, 2): </b>Returns a new array containing the copy of the part of the given array.</li>\n                <li><b>arr.sort(): </b></li>\n                <li><b>arr.splice(1, 2): </b>Modify original array.</li>\n                <li><b>concat(): </b>Returns a new array object that contains two or more merged arrays.</li>\n                forEach(), map(), of(), reduceRight()\n              </ul>\n              <br />\n\n              <h3>Iterator Array</h3>\n              <ul>\n                <li><b>filter(): </b>Returns the new array containing the elements that pass the provided function conditions.</li>\n                <li><b>find(): </b>Returns the value of the first element in the given array that satisfies the specified condition.</li>\n                <li><b>findIndex(): </b>Returns the index value of the first element in the given array that satisfies the specified condition.</li>\n                <li><b>reduce(): </b>Executes a provided function for each value from left to right and reduces the array to a single value.</li>\n                <li><b>some(): </b>Determines if any element of the array passes the test of the implemented function.</li>\n                <li><b>toLocaleString(): </b>Returns a string containing all the elements of a specified array.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={iters}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>entries(): </b>It creates an iterator object and a loop that iterates over each key/value pair.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={entries}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>values():</b> It creates a new iterator object carrying values for each index in the array.\n              <br />\n              <br />\n\n              <b>Multi-dimensional arrays: </b>Array can contain another array as an element.\n              <br />\n              <b>Ex. </b>Creates a two-dimensional array.\n              <div style={titles}>\n                <PrismCode\n                  code={multiArray}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Combine Arrays with the Spread Operator</h3>\n              <p>\n                Spread operator have ability to combine arrays, or to insert all the elements of one array into another, at any index.\n              </p>\n              <div style={titles}>\n                <PrismCode\n                  code={combined}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              \n              <div style={titles}>\n                <PrismCode\n                  code={spreadOp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Modify an Array Stored in an Object</b>\n              <div style={titles}>\n                <PrismCode\n                  code={modifyArr}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Create a Set</h3>\n              const my_set = new Set([\"a\", \"b\", \"c\", \"a\"])\n              <br />\n              <br />\n              <b>Add items in existing set: </b>my_set.add(\"ab\");\n              <br />\n\n              <b>Set Methods: </b>\n              <ul>\n                <li><b>my_set.values(): </b>returns a new Set containing all the values in a Set.</li>\n                <li><b>my_set.add(\"UO\"): </b>Adds a new element to the Set.</li>\n                <li><b>delete(): </b>Removes an element from a Set.</li>\n                <li><b>has(): </b>Returns true if a value exists in the Set.</li>\n                <li><b>values: </b>Returns an iterator with all the values in a Set.</li>\n                <li><b>size: </b>Returns the number of elements in a Set.</li>\n              </ul>\n              <br />\n\n              <h3>4. JsNumbers</h3>\n              JavaScript Numbers are Always 64-bit Floating Point.\n              <br />\n              <p><b>parseFloat():</b> Parses a string and returns a floating point number.</p>\n              <p>\n                This function determines if the first character in the specified string is a number. If it is, it parses the string until it reaches\n                the end of the number, and returns the number as a number, not as a string.\n              </p>\n              <ul>\n                <li>Only the first number in the string is returned!</li>\n                <li>Leading and trailing spaces are allowed.</li>\n                <li>If the first character cannot be converted to a number, parseFloat() returns NaN.</li>\n              </ul>\n              <br />\n              <br />\n\n              <b>isFinite:</b>\n              <ul>\n                <li>Determines whether a number is a finite, legal number.</li>\n                <li>Returns false if the value is +infinity, -infinity, or NaN, Otherwise it returns true.</li>\n              </ul>\n              <br />\n\n              <b>isNan: </b>\n              <ul>\n                <li>Returns true if the argument is not a number otherwise it is false.</li>\n              </ul>\n              <br />\n\n              <ul>\n                <li>This format stores numbers in 64 bits, where the number (the fraction) is stored in bits 0 to 51, the exponent in\n                  bits 52 to 62, and the sign in bit 63.</li>\n                <li>Extra large or extra small numbers can be written with scientific (exponent) notation.</li>\n                <li>NaN is a JavaScript reserved word indicating that a number is not a legal number.\n                  Trying to do arithmetic with a non-numeric string will result in NaN.\n                  <br />\n                  <b>Ex. </b>100 / \"Apple\";</li>\n              </ul>\n              <br />\n\n              <ul>\n                <li><b>toString(): </b>Returns a number as a string.</li>\n                <li><b>toFixed(): </b>Returns a string, with the number written with a specified number of decimals.</li>\n                <li><b>toPrecision(): </b>Returns a string, with a number written with a specified length.</li>\n                <li><b>parseInt(): </b>Parses a string and returns a whole number.</li>\n                <li><b>splice(): </b>Method can be used to add new items to an array.</li>\n                <li><b>slice(): </b>Method creates a new array. It does not remove any elements from the source array.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={jsNum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Sign</b>\n              <ul>\n                <li><b>Math.abs: </b>Return the absolute value of a number.</li>\n                <li><b>ceil():: </b>Rounds a number UPWARDS to the nearest integer, and returns the result.</li>\n                <li><b>floor(): </b>Round a number downward to its nearest integer.</li>\n                <li><b>round(): </b>Returns the nearest (32-bit single precision) float representation of a number.</li>\n                <li><b>max(): </b>Returns the number with the highest value.</li>\n                <li><b>min(): </b>Returns the number with the lowest value.</li>\n                <br />\n                <br />\n                The sign() method checks whether a number is negative, positive or zero.\n                <li>If the number is positive, this method returns 1.</li>\n                <li>If the number is negative, it returns -1.</li>\n                <li>If the number is zero, it returns 0.</li>\n                <li><b>sqrt(): </b>Return the square root of a number.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={dataTypes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. Numbers formate</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={decimal}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Random Number</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={random}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7. DecimalToBinary</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={decimalToBinary}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>8. DecimalToOctal</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={DecimalToOctal}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>9. DecimalToHex</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={DecimalToHex}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>10. String</h3>\n              <ul>\n                <li>String() converts the value of an object to a string.</li>\n                <li>String() returns the same value as toString() of the individual objects.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={stringFun}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>There are 2 ways to create string in JavaScript</b>\n              <br />\n              1.By string literal<br />\n              var str = \"Please locate where 'locate' occurs!\";\n              <br />\n              <br />\n              2.By string object<br />\n              var str2 = new String(\"string literal\");\n              <br />\n              <br />\n              <ul>\n                <li><b>charAt:</b> It provides the char value present at the specified index.</li>\n                <li><b>charCodeAt():</b> It provides the Unicode value of a character present at the specified index.</li>\n                <li><b>concat():</b> It provides a combination of two or more strings.</li>\n                <li><b>indexOf():</b> It provides the position of a char value present in the given string.</li>\n                <li>\n                  <b>lastIndexOf():</b> It provides the position of a char value present in the given string by searching a character from\n                  the last position.\n                </li>\n                str.lastIndexOf(\"locate\", 15)\n                <li>\n                  <b>search():</b> It searches a specified regular expression in a given string and returns its position if a match\n                  occurs.\n                </li>\n                <br />\n                <br />\n\n                <b>indexOf() and search() accept the same arguments, and return the same value. But they has differences as:</b>\n                <ul>\n                  <li>The search() method cannot take a second start position argument.</li>\n                  <li>The indexOf() method cannot take regular expressions.</li>\n                </ul>\n                <br />\n\n                <li>\n                  <b>match():</b> It searches a specified regular expression in a given string and returns that regular expression if\n                  a match occurs, as an Array object.\n                </li>\n                <li>\n                  <b>replace():</b> It replaces a given string with the specified replacement.\n                </li>\n                <li>\n                  <b>substr():</b> It is used to fetch the part of the given string on the basis of the specified starting position and\n                  length.\n                </li>\n                <li><b>substring(): </b>\n                  <ul>\n                    <li>substring() is similar to slice(), but substring() cannot accept negative indexes.</li>\n                    <li>It is used to fetch the part of the given string on the basis of the specified index.</li>\n                  </ul>\n                </li>\n                <br />\n\n                <li><b>valueOf():</b> It provides the primitive value of string object.</li>\n                <li><b>trim():</b> It trims the white space from the left and right side of the string.</li>\n                str.trim()\n                <br />\n                <br />\n\n                <li><b>str.length: </b></li>\n                <li><b>str.includes(\"Please\"): </b></li>\n                <li><b>str.startsWith(\"occurs\"): </b></li>\n                <li><b>str.endsWith(\"locate\"): </b></li>\n                <li><b>str.slice(7, 13): </b></li>\n                <li><b>str.toUpperCase(): </b></li>\n                <li><b>str.toLowerCase(): </b></li>\n                <li><b>Property Access: </b>str[0]</li>\n                <li><b>String can be converted to an array with the split() method: </b>str.split(\" \")</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={trim}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>11. String Interpolation</h3>\n              <ul>\n                <li>It allows injecting variables, function calls, arithmetic expressions directly into a string.</li>\n                <li>In JavaScript, the template literals and $ Curly braces expression as placeholders perform the string interpolation.</li>\n              </ul>\n\n              <div style={titles}>\n                <PrismCode\n                  code={interpolation}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>13. Fetch javaScript</h3>\n              It copies the part of the given array with its own elements and returns the modified array.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={copyWithin}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Arrays));\n"]},"metadata":{},"sourceType":"module"}