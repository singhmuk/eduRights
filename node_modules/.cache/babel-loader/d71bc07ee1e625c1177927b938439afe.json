{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/topTech.js\";\nimport React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\nconst titles = {\n  backgroundColor: \"#F0F8FF\",\n  padding: \"1px\",\n  fontSize: \"16px\"\n};\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst evalRPN = `\nfunction policeNotation(tokens) {\n  const stack = [];\n  for (const tok of tokens) {\n    if (!isNaN(tok)) {\n      stack.push(parseInt(tok));\n    } else {\n      const b = stack.pop();\n      const a = stack.pop();\n      switch (tok) {\n        case \"+\":\n          stack.push(a + b);\n          break;\n        case \"*\":\n          stack.push(a * b);\n          break;\n        case \"-\":\n          stack.push(a - b);\n          break;\n        case \"/\":\n          stack.push(a / b);\n          break;\n      }\n    }\n  }\n  return stack.pop();\n}\n\nconsole.log(policeNotation([\"2\", \"1\", \"+\", \"3\", \"*\"]));\n`.trim();\nconst convertToTitle = `\nfunction fun(arr) {\n  if(!arr || arr.length === 0) return \"\";\n  let prefix=arr[0];\n\n  for(let i=0;i<arr.length;i++){\n    while(arr[i].indexOf(prefix) !==0){\n      prefix = prefix.substring(0,prefix.length-1);\n    }\n  }\n  return console.log(prefix);\n}\n\n\nfun([\"flower\",\"flow\",\"flight\"])\n`.trim();\nconst combinationSum3 = `\nfunction fun() {\n  const arr=[-1,2,1,-4];\n  let sum=0;\n\n  for(let i=0;i<arr.length;i++){\n    if(arr.includes(1)){\n      sum = arr.reduce((a,b) => a+b, 0);\n    }\n  }\nconsole.log(sum)\n}\n\nfun()\n`.trim();\nconst closed3 = `\nfunction fun() {\n  const nums = [-1, 2, 10, 1, -4];\n  const target = 1;\n  let closed = nums[0] + nums[1] + nums[2];\n\n  for (let i = 0; i < nums.length - 2; i++) {\n    for (let j = i + 1; j < nums.length - 1; j++) {\n      for (let k = j + 1; k < nums.length; k++) {\n        const sum = nums[i]+nums[j]+nums[k];\n        if (Math.abs(sum - target) < Math.abs(closed - target)) {\n          closed = sum;\n        }\n      }\n    }\n  }\n\n  console.log(closed);\n}\n\nfun();\n`.trim();\nconst countDigitOne = `\nfunction countOnes(n) {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    count += i.toString().split(\"1\").length - 1;\n  }\n  return console.log(count);\n}\n\ncountOnes(16);\n\n`.trim();\nconst maxSlidingWindow = `\nfunction maxSlidingWindow (nums = [], k){\n  if (!nums.length) return [];\n\n  const result = []\n  const queue = []\n\n  for (let i = 0; i < k; i++) {\n    while (nums[i] > nums[queue[queue.length - 1]]) {\n      queue.pop()\n    }\n    queue.push(i)\n  }\n  result.push(nums[queue[0]])\n\n  for (let i = 1; i < nums.length - k + 1; i++) {\n    if (queue[0] < i) {\n      queue.shift()\n    }\n    while (nums[i + k - 1] > nums[queue[queue.length - 1]]) {\n      queue.pop()\n    }\n    queue.push(i + k - 1)\n    result.push(nums[queue[0]])\n  }\n  return result\n}\n\nconsole.log(maxSlidingWindow([1,3,-1,-3,5,3,6,7], 3))\n`.trim();\n\nclass TopTech extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, \"1. Find the longest common prefix string amongst an array of strings.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: convertToTitle,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"2. Evaluate Reverse Polish Notation\"), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"Input: \"), \"[\\\"2\\\", \\\"1\\\", \\\"+\\\", \\\"3\\\", \\\"*\\\"]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"Output: \"), \"9\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"Explanation: \"), \"((2 + 1) * 3) = 9\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: evalRPN,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"3. Find Sum of an array.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: combinationSum3,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, \"3. Close 3 sum.\"), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: closed3,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, \"4. Number of Digit One.\"), \"Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, \"Time complexity: \"), \"O(n), where n is the input number. This is because the countOnes() function iterates over the numbers from 0 to n, and each iteration takes constant time.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, \"Space complexity: \"), \"O(1), where n is the input number. This is because the countOnes() function only uses a constant amount of memory to store the variables count, i, and str.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, \"In simple words, the countOnes() function takes a linear amount of time to run, and it uses a constant amount of space.\")), React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: countDigitOne,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, \"5. Sliding Window Maximum.\"), \"Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }), \"Could you solve it in linear time?\", React.createElement(\"div\", {\n      style: titles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(PrismCode, {\n      code: maxSlidingWindow,\n      language: \"js\",\n      plugins: [\"line-numbers\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withStyles(styles)(TopTech);","map":{"version":3,"sources":["/home/mukeshs/Projects/edurights/src/components/algorithams/deepAlgorithams/topTech.js"],"names":["React","Component","Prism","Grid","Paper","withStyles","List","Sidebar","PrismCode","titles","backgroundColor","padding","fontSize","styles","theme","paper","margin","spacing","smMargin","actionDiv","textAlign","evalRPN","trim","convertToTitle","combinationSum3","closed3","countDigitOne","maxSlidingWindow","TopTech","componentDidMount","setTimeout","highlightAll","render","classes","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Prism from \"prismjs\";\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport \"../../ReactJs/styles.css\";\nimport Sidebar from \"../sidebar\";\nimport PrismCode from \"../../ReactJs/prismCode\";\n\nconst titles = { backgroundColor: \"#F0F8FF\", padding: \"1px\", fontSize: \"16px\" };\n\nconst styles = (theme) => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: \"center\",\n  },\n});\n\nconst evalRPN = `\nfunction policeNotation(tokens) {\n  const stack = [];\n  for (const tok of tokens) {\n    if (!isNaN(tok)) {\n      stack.push(parseInt(tok));\n    } else {\n      const b = stack.pop();\n      const a = stack.pop();\n      switch (tok) {\n        case \"+\":\n          stack.push(a + b);\n          break;\n        case \"*\":\n          stack.push(a * b);\n          break;\n        case \"-\":\n          stack.push(a - b);\n          break;\n        case \"/\":\n          stack.push(a / b);\n          break;\n      }\n    }\n  }\n  return stack.pop();\n}\n\nconsole.log(policeNotation([\"2\", \"1\", \"+\", \"3\", \"*\"]));\n`.trim();\n\nconst convertToTitle = `\nfunction fun(arr) {\n  if(!arr || arr.length === 0) return \"\";\n  let prefix=arr[0];\n\n  for(let i=0;i<arr.length;i++){\n    while(arr[i].indexOf(prefix) !==0){\n      prefix = prefix.substring(0,prefix.length-1);\n    }\n  }\n  return console.log(prefix);\n}\n\n\nfun([\"flower\",\"flow\",\"flight\"])\n`.trim();\n\nconst combinationSum3 = `\nfunction fun() {\n  const arr=[-1,2,1,-4];\n  let sum=0;\n\n  for(let i=0;i<arr.length;i++){\n    if(arr.includes(1)){\n      sum = arr.reduce((a,b) => a+b, 0);\n    }\n  }\nconsole.log(sum)\n}\n\nfun()\n`.trim();\n\nconst closed3 = `\nfunction fun() {\n  const nums = [-1, 2, 10, 1, -4];\n  const target = 1;\n  let closed = nums[0] + nums[1] + nums[2];\n\n  for (let i = 0; i < nums.length - 2; i++) {\n    for (let j = i + 1; j < nums.length - 1; j++) {\n      for (let k = j + 1; k < nums.length; k++) {\n        const sum = nums[i]+nums[j]+nums[k];\n        if (Math.abs(sum - target) < Math.abs(closed - target)) {\n          closed = sum;\n        }\n      }\n    }\n  }\n\n  console.log(closed);\n}\n\nfun();\n`.trim();\n\nconst countDigitOne = `\nfunction countOnes(n) {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    count += i.toString().split(\"1\").length - 1;\n  }\n  return console.log(count);\n}\n\ncountOnes(16);\n\n`.trim();\n\nconst maxSlidingWindow = `\nfunction maxSlidingWindow (nums = [], k){\n  if (!nums.length) return [];\n\n  const result = []\n  const queue = []\n\n  for (let i = 0; i < k; i++) {\n    while (nums[i] > nums[queue[queue.length - 1]]) {\n      queue.pop()\n    }\n    queue.push(i)\n  }\n  result.push(nums[queue[0]])\n\n  for (let i = 1; i < nums.length - k + 1; i++) {\n    if (queue[0] < i) {\n      queue.shift()\n    }\n    while (nums[i + k - 1] > nums[queue[queue.length - 1]]) {\n      queue.pop()\n    }\n    queue.push(i + k - 1)\n    result.push(nums[queue[0]])\n  }\n  return result\n}\n\nconsole.log(maxSlidingWindow([1,3,-1,-3,5,3,6,7], 3))\n`.trim();\n\nclass TopTech extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0);\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4>\n              <Sidebar />\n            </h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Find the longest common prefix string amongst an array of strings.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={convertToTitle}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>2. Evaluate Reverse Polish Notation</h3>\n              <b>Input: </b>[\"2\", \"1\", \"+\", \"3\", \"*\"]\n              <br />\n              <b>Output: </b>9<br />\n              <b>Explanation: </b>((2 + 1) * 3) = 9\n              <div style={titles}>\n                <PrismCode\n                  code={evalRPN}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>3. Find Sum of an array.</h3>\n              \n              <div style={titles}>\n                <PrismCode\n                  code={combinationSum3}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <br />\n              <h3>3. Close 3 sum.</h3>\n              \n              <div style={titles}>\n                <PrismCode\n                  code={closed3}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <h3>4. Number of Digit One.</h3>\n              Given an integer n, count the total number of digit 1 appearing in\n              all non-negative integers less than or equal to n.\n              <br/>\n              <ul>\n                <li><b>Time complexity: </b>O(n), where n is the input number. This is because the countOnes() function iterates over the numbers from 0 to n, and each iteration takes constant time.</li><br/>\n                <li><b>Space complexity: </b>O(1), where n is the input number. This is because the countOnes() function only uses a constant amount of memory to store the variables count, i, and str.</li><br/>\n                <li>In simple words, the countOnes() function takes a linear amount of time to run, and it uses a constant amount of space.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={countDigitOne}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>5. Sliding Window Maximum.</h3>\n              Given an array nums, there is a sliding window of size k which is\n              moving from the very left of the array to the very right. You can\n              only see the k numbers in the window. Each time the sliding window\n              moves right by one position. Return the max sliding window.\n              <br />\n              <br />\n              Could you solve it in linear time?\n              <div style={titles}>\n                <PrismCode\n                  code={maxSlidingWindow}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(TopTech);\n"]},"metadata":{},"sourceType":"module"}