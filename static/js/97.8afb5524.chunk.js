(this["webpackJsonpmern-stack-client"]=this["webpackJsonpmern-stack-client"]||[]).push([[97],{140:function(e,n,t){"use strict";t.d(n,"a",(function(){return b}));var a=t(45),l=t(28),r=t(136),i=t(137),u=t(139),s=t(0),c=t.n(s),o=t(138),m=t.n(o),b=(t(59),function(e){function n(e){var t;return Object(a.a)(this,n),(t=Object(r.a)(this,Object(i.a)(n).call(this,e))).highlight=function(){t.ref&&t.ref.current&&m.a.highlightElement(t.ref.current)},t.ref=c.a.createRef(),t}return Object(u.a)(n,e),Object(l.a)(n,[{key:"componentDidMount",value:function(){this.highlight()}},{key:"componentDidUpdate",value:function(){this.highlight()}},{key:"render",value:function(){var e=this.props,n=e.code,t=(e.plugins,e.language);return c.a.createElement("pre",{className:"code-prism"},c.a.createElement("code",{ref:this.ref,className:"language-".concat(t)},n.trim()))}}]),n}(c.a.Component))},141:function(e,n,t){},152:function(e,n,t){"use strict";t.d(n,"a",(function(){return o}));var a=t(0),l=t.n(a),r=t(26),i=t(297),u=t(295),s=t(114),c=Object(s.a)((function(e){return{root:{display:"flex"},paper:{marginRight:e.spacing(2)},line:{textDecoration:"none"}}}));function o(){var e=c();return l.a.createElement("div",{className:e.root},l.a.createElement(u.a,null,l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/introAlgo",className:e.line},"Deadlock")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/Stack",className:e.line},"Stack")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/Queue",className:e.line},"Queue")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/linkedList",className:e.line},"LinkedList")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/heap",className:e.line},"Heap")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/trees",className:e.line},"Tree")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/graph",className:e.line},"Graph")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/sort",className:e.line},"QuickSort")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/searchAlgo",className:e.line},"Search")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/topTech",className:e.line},"TopTech")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/stringAlgo",className:e.line},"String")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/arrayAlgo",className:e.line},"Array")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/nestingArrAlgo",className:e.line},"Nesting Array")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/numbersAlgo",className:e.line},"Numbers")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/gameAlgo",className:e.line},"Game")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/arrayStrAlgo",className:e.line},"ArrayStr")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/arrayNumAlgo",className:e.line},"ArrayNum")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/dslogic8",className:e.line},"Logic8"))),l.a.createElement("div",null))}},438:function(e,n,t){"use strict";t.r(n);var a=t(45),l=t(28),r=t(136),i=t(137),u=t(139),s=t(0),c=t.n(s),o=t(138),m=t.n(o),b=t(120),g=t(57),h=t(296),p=t(5),E=(t(141),t(152)),f=t(140),d={backgroundColor:"#F0F8FF",padding:"1px",fontSize:"16px"},k="\nfunction evalRPN(tokens) {\n  const stack = []\n  const isOperator = token => token === '+' || token === '-' || token === '*' || token === '/';\n\n  for (const token of tokens) {\n    if (isOperator(token)) {\n          const b = stack.pop()\n          const a = stack.pop()\n      let result = 0\n      \n      switch (token) {\n        case '+':\n          result = a + b\n          break\n        case '-':\n          result = a - b\n          break\n        case '/':\n          result = a / b\n          result = result < 0 ? Math.ceil(result) : Math.floor(a / b) \n          break\n        default:\n          result = a * b\n      }\n      stack.push(result)\n    } else {\n      stack.push(parseInt(token, 10))\n    }\n  }\n  return stack[0]\n}\nconsole.log(evalRPN([\"4\", \"13\", \"5\", \"/\", \"+\"]))\n".trim(),v='\nfunction convertToTitle(n) {\n  var A = "A".charCodeAt(0);\n  var str = "";\n  \n  while(n > 0) {\n      n--;\n      str = String.fromCharCode(A+n%26) + str;\n      n =parseInt(n/26);\n  }\n  \n  return str;\n};\n\nconsole.log(convertToTitle(701))\n'.trim(),N="\nfunction combinationSum3(k, n) {\n  const result = []\n\n  const aux = (start, current, sum) => {\n    if (current.length > k) {\n      return\n    }\n    if (current.length === k) {\n      if (sum === n) {\n        result.push([...current])\n        return\n      }\n      return\n    }\n\n    for (let i = start; i <= 9; i++) {\n      current.push(i)\n      aux(i + 1, current, sum + i)\n      current.pop(i)\n    }\n  }\n  for (let i = 1; i <= 9; i++) {\n    aux(i + 1, [i], i)\n  }\n  return result\n}\n\nconsole.log(combinationSum3(3,7))".trim(),y="\nfunction countDigitOne(n) {\n  const memo = {}\n  const aux = (number) => {\n    if (memo[number] !== undefined) {\n      return memo[number]\n    }\n    if (number <= 0) return 0;\n\n    const str = number.toString()\n    const first = parseInt(str[0], 10)\n    const base = Math.pow(10, str.length - 1)\n    const reminder = number - first * base\n\n    if (first === 1) {\n      memo[number] = aux(base - 1) + reminder + 1 + aux(reminder)\n    } \n    else {\n      memo[number] = first * aux(base - 1) + base + aux(reminder)\n    }\n    return memo[number]\n  }\n  return aux(n)\n}\n\nconsole.log(countDigitOne(16))\n".trim(),x="\nfunction maxSlidingWindow (nums = [], k){\n  if (!nums.length) return [];\n\n  const result = []\n  const queue = []\n\n  for (let i = 0; i < k; i++) {\n    while (nums[i] > nums[queue[queue.length - 1]]) {\n      queue.pop()\n    }\n    queue.push(i)\n  }\n  result.push(nums[queue[0]])\n\n  for (let i = 1; i < nums.length - k + 1; i++) {\n    if (queue[0] < i) {\n      queue.shift()\n    }\n    while (nums[i + k - 1] > nums[queue[queue.length - 1]]) {\n      queue.pop()\n    }\n    queue.push(i + k - 1)\n    result.push(nums[queue[0]])\n  }\n  return result\n}\n\nconsole.log(maxSlidingWindow([1,3,-1,-3,5,3,6,7], 3))\n".trim(),A=function(e){function n(){return Object(a.a)(this,n),Object(r.a)(this,Object(i.a)(n).apply(this,arguments))}return Object(u.a)(n,e),Object(l.a)(n,[{key:"componentDidMount",value:function(){setTimeout((function(){return m.a.highlightAll()}),0)}},{key:"render",value:function(){var e=this.props.classes;return c.a.createElement(b.a,{container:!0},c.a.createElement(b.a,{item:!0,xs:2},c.a.createElement(g.a,{className:e.paper},c.a.createElement("h4",null,c.a.createElement(E.a,null)))),c.a.createElement(b.a,{item:!0,xs:10},c.a.createElement(g.a,{className:e.paper},c.a.createElement(h.a,null,c.a.createElement("h3",null,"1. Excel Sheet Column Title."),"Given a positive integer, return its corresponding column title as appear in an Excel sheet.",c.a.createElement("div",{style:d},c.a.createElement(f.a,{code:v,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"2. Evaluate Reverse Polish Notation"),c.a.createElement("b",null,"Input: "),'["2", "1", "+", "3", "*"]',c.a.createElement("br",null),c.a.createElement("b",null,"Output: "),"9",c.a.createElement("br",null),c.a.createElement("b",null,"Explanation: "),"((2 + 1) * 3) = 9",c.a.createElement("div",{style:d},c.a.createElement(f.a,{code:k,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"3. Combination Sum."),"Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.",c.a.createElement("br",null),c.a.createElement("b",null,"Note: "),c.a.createElement("ul",null,c.a.createElement("li",null,"All numbers will be positive integers."),c.a.createElement("li",null,"The solution set must not contain duplicate combinations.")),c.a.createElement("div",{style:d},c.a.createElement(f.a,{code:N,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"4. Number of Digit One."),"Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.",c.a.createElement("div",{style:d},c.a.createElement(f.a,{code:y,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"5. Sliding Window Maximum."),"Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.",c.a.createElement("br",null),c.a.createElement("br",null),"Could you solve it in linear time?",c.a.createElement("div",{style:d},c.a.createElement(f.a,{code:x,language:"js",plugins:["line-numbers"]}))))))}}]),n}(s.Component);n.default=Object(p.a)((function(e){return{paper:{margin:e.spacing(1),padding:e.spacing(1)},smMargin:{margin:e.spacing(1)},actionDiv:{textAlign:"center"}}}))(A)}}]);
//# sourceMappingURL=97.8afb5524.chunk.js.map