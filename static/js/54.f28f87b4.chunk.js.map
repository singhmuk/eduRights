{"version":3,"sources":["components/ReactJs/prismCode.js","components/css/sidebar.js","assets/css1.PNG","components/css/enzyme3.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","module","exports","titles","backgroundColor","padding","fontSize","shallowOnly","fullDomOnly","Enzymes3","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"kPAIqBA,G,kBACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAYRC,UAAY,WACN,EAAKC,KAAO,EAAKA,IAAIC,SACvBC,IAAMC,iBAAiB,EAAKH,IAAIC,UAblC,EAAKD,IAAMI,IAAMC,YAFA,E,iFAMjBC,KAAKP,c,2CAILO,KAAKP,c,+BASG,IAAD,EAC6BO,KAAKR,MAAjCS,EADD,EACCA,KAAeC,GADhB,EACOC,QADP,EACgBD,UACvB,OACE,yBAAKE,UAAU,cACb,0BAAMV,IAAKM,KAAKN,IAAKU,UAAS,mBAAcF,IACzCD,EAAKI,a,GAzBuBP,IAAMQ,a,uDCJ7C,yFAMMC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,QAEXC,MAAO,CACLC,YAAaJ,EAAMK,QAAQ,IAE7BC,KAAM,CACJC,eAAgB,YAIL,SAASC,IACtB,IAAMC,EAAUX,IAEhB,OACE,yBAAKH,UAAWc,EAAQR,MACtB,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMS,GAAG,YAAYf,UAAWc,EAAQH,MAAxC,aACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,aAAaf,UAAWc,EAAQH,MAAzC,QACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,QAAQf,UAAWc,EAAQH,MAApC,SACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,UAAUf,UAAWc,EAAQH,MAAtC,WACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,WAAWf,UAAWc,EAAQH,MAAvC,YACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,QAAQf,UAAWc,EAAQH,MAApC,SACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,YAAYf,UAAWc,EAAQH,MAAxC,aACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,WAAWf,UAAWc,EAAQH,MAAvC,YACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,WAAWf,UAAWc,EAAQH,MAAvC,aACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,WAAWf,UAAWc,EAAQH,MAAvC,cAEZ,iC,oBCnCNK,EAAOC,QAAU,IAA0B,kC,qLCWrCC,G,OAAS,CAACC,gBAAgB,UAAWC,QAAQ,MAAOC,SAAS,SAiB7DC,EAAc,07CAyElBrB,OAEIsB,EAAc,mvEAyFlBtB,OAIIuB,E,4LAEFC,YAAW,kBAAMjC,IAAMkC,iBAAgB,K,+BAE/B,IACAZ,EAAYlB,KAAKR,MAAjB0B,QACR,OACE,kBAAC,IAAD,CAAMa,WAAS,GACT,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GACX,kBAAC,IAAD,CAAO7B,UAAWc,EAAQN,OACtB,4BAAI,kBAAC,IAAD,SAGpB,kBAAC,IAAD,CAAMoB,MAAI,EAACC,GAAI,IACf,kBAAC,IAAD,CAAO7B,UAAWc,EAAQN,OAC1B,kBAAC,IAAD,KACE,sDACA,yBAAKsB,MAAOZ,GACZ,kBAAC,IAAD,CACErB,KAAMyB,EACNxB,SAAS,KACTC,QAAS,CAAC,mBAGZ,6BAEA,uDACA,yBAAK+B,MAAOZ,GACZ,kBAAC,IAAD,CACErB,KAAM0B,EACNzB,SAAS,KACTC,QAAS,CAAC,2B,GA/BKG,aA0CP6B,uBAjOD,SAAA1B,GAAK,MAAK,CACvBG,MAAO,CACHwB,OAAQ3B,EAAMK,QAAQ,GACtBU,QAASf,EAAMK,QAAQ,IAE3BuB,SAAU,CACND,OAAQ3B,EAAMK,QAAQ,IAE1BwB,UAAW,CACPC,UAAW,aAwNDJ,CAAmBP","file":"static/js/54.f28f87b4.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/devtools' className={classes.line}>Devtools</Link></MenuItem>\n        <MenuItem><Link to='/cssbasics' className={classes.line}>CSS</Link></MenuItem>\n        <MenuItem><Link to='/sass' className={classes.line}>SASS</Link></MenuItem>\n        <MenuItem><Link to='/html_1' className={classes.line}>html 1</Link></MenuItem>\n        <MenuItem><Link to='/restApi' className={classes.line}>RestApi</Link></MenuItem>\n        <MenuItem><Link to='/jest' className={classes.line}>Jest</Link></MenuItem>\n        <MenuItem><Link to='/matchers' className={classes.line}>Matchers</Link></MenuItem>\n        <MenuItem><Link to='/enzymes' className={classes.line}>Enzymes</Link></MenuItem>\n        <MenuItem><Link to='/enzyme2' className={classes.line}>Enzymes2</Link></MenuItem>\n        <MenuItem><Link to='/enzyme3' className={classes.line}>Enzymes3</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n\n","module.exports = __webpack_public_path__ + \"static/media/css1.cf9107ca.PNG\";","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../ReactJs/styles.css'\nimport Sidebar from './sidebar';\nimport PrismCode from '../ReactJs/prismCode';\n\nimport Browser from '../../assets/css1.PNG';\n\n\nconst titles = {backgroundColor:'#F0F8FF', padding:'1px', fontSize:'16px'}\n\nconst styles = theme => ({\n  paper: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1)\n  },\n  smMargin: {\n      margin: theme.spacing(1)\n  },\n  actionDiv: {\n      textAlign: \"center\"\n  }\n})\n\n\n\nconst shallowOnly = `\ntest(\"shallow\", () => {\n  class Bar extends React.Component {\n    state = {\n      value: 0\n    };\n\n    componentDidMount() {\n      this.setState({\n        value: 1\n      });\n    }\n\n    render() {\n      return (\n        <div>\n          <div className=\"in-bar\">{this.state.value}</div>\n        </div>\n      );\n    }\n  }\n\n  function Foo() {\n    return (\n      <div>\n        <Bar />\n      </div>\n    );\n  }\n\n  const wrapper = shallow(<Foo />);\n\n  expect(wrapper.find(\".in-bar\")).toHaveLength(0);\n  expect(wrapper.find(Bar)).toHaveLength(1);\n\n  const barWithLifecycle = wrapper.find(Bar).shallow();\n  expect(barWithLifecycle.find(\".in-bar\")).toHaveLength(1);\n  expect(barWithLifecycle.find(\".in-bar\").text()).toBe(\"1\");\n\n  const barWithoutLifecycle = wrapper.find(Bar).shallow({\n    disableLifecycleMethods: true\n  });\n  expect(barWithoutLifecycle.find(\".in-bar\")).toHaveLength(1);\n  expect(barWithoutLifecycle.find(\".in-bar\").text()).toBe(\"0\");\n});\n\ntest(\"dive\", () => {\n  function Bar() {\n    return (\n      <div>\n        <div className=\"in-bar\" />\n      </div>\n    );\n  }\n\n  function Foo() {\n    return (\n      <div>\n        <Bar />\n      </div>\n    );\n  }\n\n  const wrapper = shallow(<Foo />);\n  expect(wrapper.find(\".in-bar\")).toHaveLength(0);\n  expect(wrapper.find(Bar)).toHaveLength(1);\n  expect(\n    wrapper\n      .find(Bar)\n      .dive()\n      .find(\".in-bar\")\n  ).toHaveLength(1);\n});\n`.trim();\n\nconst fullDomOnly = `\nimport { mount } from \"enzyme\";\nimport PropTypes from \"prop-types\";\n\ntest(\"detach()\", () => {\n  function CustomComponent(props) {\n    return <div>Custom Component</div>;\n  }\n\n  document.body.innerHTML = '<div id=\"root\"></div>';\n  const attachHere = document.getElementById(\"root\");\n\n  const wrapper = mount(<CustomComponent></CustomComponent>, {\n    attachTo: attachHere\n  });\n\n  expect(document.body.innerHTML).toMatchInlineSnapshot(\n    '\"<div id=\\\\\"root\\\\\"><div>Custom Component</div></div>\"'\n  );\n\n  wrapper.detach();\n\n  expect(document.body.innerHTML).toMatchInlineSnapshot(\n    '\"<div id=\\\\\"root\\\\\"></div>\"'\n  );\n});\n\ntest(\"getDOMNode()\", () => {\n  const wrapper = mount(<div className=\"foo\"></div>);\n  const domNode = wrapper.getDOMNode();\n  expect(domNode).toHaveProperty(\"className\");\n});\n\ntest(\"mount() and unmount()\", () => {\n  const willMount = jest.fn();\n  const didMount = jest.fn();\n  const willUnmount = jest.fn();\n\n  class Foo extends React.Component {\n    constructor(props) {\n      super(props);\n      this.componentWillUnmount = willUnmount;\n      this.componentWillMount = willMount;\n      this.componentDidMount = didMount;\n    }\n\n    render() {\n      const { id } = this.props;\n      return <div className={id}>{id}</div>;\n    }\n  }\n\n  Foo.propTypes = {\n    id: PropTypes.string.isRequired\n  };\n\n  const wrapper = mount(<Foo id=\"foo\" />);\n\n  expect(willMount).toHaveBeenCalled();\n  expect(didMount).toHaveBeenCalled();\n  expect(willUnmount).not.toHaveBeenCalled();\n\n  wrapper.unmount();\n  expect(willMount).toHaveBeenCalledTimes(1);\n  expect(didMount).toHaveBeenCalledTimes(1);\n  expect(willUnmount).toHaveBeenCalledTimes(1);\n\n  wrapper.mount();\n  expect(willMount).toHaveBeenCalledTimes(2);\n  expect(didMount).toHaveBeenCalledTimes(2);\n  expect(willUnmount).toHaveBeenCalledTimes(1);\n});\n\ntest(\"ref(refName)\", () => {\n  class Foo extends React.Component {\n    render() {\n      return (\n        <div>\n          <span ref=\"firstRef\">First</span>\n          <span ref=\"secondRef\">Second</span>\n          <span ref=\"thirdRef\">Third</span>\n        </div>\n      );\n    }\n  }\n\n  const wrapper = mount(<Foo />);\n  expect(wrapper.ref(\"secondRef\").innerHTML).toBe(\"Second\");\n});\n`.trim();\n\n\n\nclass Enzymes3 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n            <Grid item xs={2}>\n                <Paper className={classes.paper}>\n                    <h4><Sidebar /></h4>\n                </Paper>\n            </Grid>\n    <Grid item xs={10}>\n    <Paper className={classes.paper}>\n    <List>\n      <h3>7-shallow-only-methods</h3>\n      <div style={titles}>\n      <PrismCode\n        code={shallowOnly}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      \n      <h3>8-full-dom-only-methods</h3>\n      <div style={titles}>\n      <PrismCode\n        code={fullDomOnly}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      </List>\n      </Paper>\n      </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Enzymes3));\n"],"sourceRoot":""}