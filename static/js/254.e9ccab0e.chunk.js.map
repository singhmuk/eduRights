{"version":3,"sources":["components/ReactJs/prismCode.js","components/pythone/sidebar.js","components/pythone/deeppy/tuples.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","createTuples","usefuls","unpack","compare","list","copylists","comprehension","format","unions","differences","updatings","subsets","frozenset","create","checkItem","looping","mergrs","possibles","Tuples","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/254.e9ccab0e.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introPython' className={classes.line}>intro Python</Link></MenuItem>\n        <MenuItem><Link to='/tuples' className={classes.line}>Tuples</Link></MenuItem>\n        <MenuItem><Link to='/stringPy' className={classes.line}>Strings</Link></MenuItem>\n        <MenuItem><Link to='/iteratorsPy' className={classes.line}>Iterators</Link></MenuItem>\n        <MenuItem><Link to='/json' className={classes.line}>Json</Link></MenuItem>\n        <MenuItem><Link to='/mathematics' className={classes.line}>Mathematics</Link></MenuItem>\n        <MenuItem><Link to='/oops_' className={classes.line}>Oops</Link></MenuItem>\n        <MenuItem><Link to='/abstract' className={classes.line}>Abstract</Link></MenuItem>\n        <MenuItem><Link to='/exceptionsPy' className={classes.line}>ExceptionsHandling</Link></MenuItem>\n\n        <MenuItem><Link to='/pyIntro' className={classes.line}>Pickle</Link></MenuItem>\n\n        <MenuItem><Link to='/threadings' className={classes.line}>Thread</Link></MenuItem>\n        <MenuItem><Link to='/collections' className={classes.line}>Collections</Link></MenuItem>\n        <MenuItem><Link to='/logging' className={classes.line}>Logging</Link></MenuItem>\n        <MenuItem><Link to='/regex' className={classes.line}>Regex</Link></MenuItem>\n        <MenuItem><Link to='/tkinter' className={classes.line}>TKinter</Link></MenuItem>\n\n        <MenuItem><Link to='/logicalspy' className={classes.line}>Logicals</Link></MenuItem>\n        <MenuItem><Link to='/pyLogic' className={classes.line}>PyLogic</Link></MenuItem>\n        <MenuItem><Link to='/csv' className={classes.line}>CsvPython</Link></MenuItem>\n        <br />\n        Flask\n        <MenuItem><Link to='/conroutes' className={classes.line}>routes</Link></MenuItem>\n        <MenuItem><Link to='/httpsMethods' className={classes.line}>Https</Link></MenuItem>\n        <MenuItem><Link to='/flasksIn' className={classes.line}>Interviews</Link></MenuItem>\n\n        <MenuItem><Link to='/flask_signUp' className={classes.line}>Flask_signUp</Link></MenuItem>\n        <MenuItem><Link to='/get_search' className={classes.line}>Get_Search</Link></MenuItem>\n        <MenuItem><Link to='/load_search' className={classes.line}>Load_Search</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst createTuples = `\nmy_tuple = (\"Max\", 28, \"New York\")\nmy_tuple_2 = \"Linda\", 25, \"Miami\"                                              # Parentheses are optional\nmy_tuple_3 = (25, 1, 2, 3, 4,)\n\nx = my_tuple.count('Max')\nx = my_tuple[-1]\nx = my_tuple.index(28)                                                         # Return index of first item of 28.\nx = len(my_tuple)\nx = max(my_tuple_3)\nx = min(my_tuple_3)\nx = any(my_tuple_3)\nx = all(my_tuple_3)\nx = enumerate(my_tuple_3)\nx = sum(my_tuple_3)\nx = sorted(my_tuple_3)\nx = tuple(my_tuple_3)                                                         # Convert an iterable to a tuple.\n\nname, age, city = my_tuple\n\nprint(x)\nprint(name, age, city)\n\n\n#2\ntuple_4 = tuple([1,2,3])                     # convert an iterable (list, dict, string) with the built-in tuple function\nprint(tuple_4)`.trim();\n\nconst usefuls = `\nmy_tuple = ('a', 'b') * 5                                          \nprint(my_tuple)\n\n\n#2 convert list to a tuple.\nmy_list = ['a', 'b', 'c', 'd']\nlist_to_tuple = tuple(my_list)\nprint(list_to_tuple)\n\ntuple_to_list = list(list_to_tuple)\nprint(tuple_to_list)\n\n\n#3 convert string to tuple.\nstring_to_tuple = tuple('Hello')\nprint(string_to_tuple)`.trim();\n\nconst unpack = `\nmy_tuple = (0, 1, 2, 3, 4, 5)\nfirst, *items_between, last = my_tuple\nprint(first, items_between, last)\n\n\n#2. Nested tuples\na = ((0, 1), ('age', 'height'))\nprint(a[0])\n`.trim();\n\nconst compare = `\n# compare the size\nimport sys\nmy_list = [0, 1, 2, \"hello\", True]\nmy_tuple = (0, 1, 2, \"hello\", True)\nprint(sys.getsizeof(my_list), \"bytes\")\nprint(sys.getsizeof(my_tuple), \"bytes\")\n\n# compare the execution time of a list vs. tuple creation statement\nimport timeit\nprint(timeit.timeit(stmt=\"[0, 1, 2, 3, 4, 5]\", number=1000000))\nprint(timeit.timeit(stmt=\"(0, 1, 2, 3, 4, 5)\", number=1000000))`.trim();\n\nconst list = `\nmy_list = [\"banana\", \"cherry\", \"apple\", 5, True, 0, 1, 1]\nprint(my_list)\n\nlist_2 = list()                                                       # Or create an empty list with the list function\nprint(list_2)\n\nx = my_list.append(\"orange\")                                              \nx = my_list.index(1)                                              \nx = my_list.insert(1, \"blueberry\")                                        \nx = my_list.pop()                                                        \nx = my_list.remove(\"cherry\")                                              \nx = my_list.clear()                                                       \nx = my_list.reverse()                                                    \nx = my_list.sort()  \nx = my_list.count(0)  \nx = sum(my_list)  \nx = max(my_list)  \nx = min(my_list)  \nx = all(my_list)  \nx = any(my_list)  \nx = len(my_list)  \nx = enumerate(my_list)  \n\nprint(x)  \n\n\nlist_with_zeros = [0] * 5                                             # create list with repeated elements\nlist_concat = list_with_zeros + my_list\nstring_to_list = list('Hello')                                        # convert string to list\n`.trim();\n\nconst copylists = `\nlist_org = [\"banana\", \"cherry\", \"apple\"]\nlist_copy = list_org.copy()\nlist_copy.append(True)                                                # modifying the copy not affects the original\n\nprint(list_org)\nprint(list_copy)\n`.trim();\n\n\nconst comprehension = `\na = [1, 2, 3, 4, 5, 6, 7, 8]\nb = [i * i for i in a] \nprint(b)\n\n\n# nested Lists\na = [[1, 2], [3, 4]]\nprint(a)\nprint(a[0])\n`.trim();\n\nconst format = `\nmy_set = {\"apple\", \"banana\", \"cherry\"}\nmy_set_2 = set([\"one\", \"two\", \"three\"])                         # or use the set function and create from an iterable\nmy_set_3 = set(\"aaabbbcccdddeeeeeffff\")\n\nmy_set.add(\"three\") \nmy_set.remove(\"three\") \nmy_set.discard(\"three\")                                         # removes x\nmy_set.pop()                                                    # removes x\nmy_set.clear()  \n\nprint(my_set)\n`.trim();\n\nconst unions = `\nodds = {1, 3, 5, 7, 9}\nevens = {0, 2, 4, 6, 8}\n\nu = odds.union(evens)\ni = odds.intersection(evens)\n\nprint(u)`.trim();\n\nconst differences = `\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nsetB = {1, 2, 3, 10, 11, 12}\n\ndiff_set = setA.difference(setB)\ndiff_set = setB.difference(setA)\ndiff_set = setA.symmetric_difference(setB)\ndiff_set = setB.symmetric_difference(setA)\nprint(diff_set)`.trim();\n\nconst updatings = `\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nsetB = {1, 2, 3, 10, 11, 12}\n\nsetA.update(setB)\n\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nsetA.intersection_update(setB)\n\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nsetA.difference_update(setB)\n\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nsetA.symmetric_difference_update(setB)\n\nsetA.update([1, 2, 3, 4, 5, 6])`.trim();\n\nconst subsets = `\nsetA = {1, 2, 3, 4, 5, 6}\nsetB = {1, 2, 3}\n\nprint(setA.issubset(setB))\nprint(setB.issubset(setA))                                  # issubset(setX): Returns True if setX contains the set\n\n\nprint(setA.issuperset(setB))                                # issuperset(setX): Returns True if the set contains setX\nprint(setB.issuperset(setA))\n\n\nsetC = {7, 8, 9}\nprint(setA.isdisjoint(setB))                                # True if both sets have a null intersection\nprint(setA.isdisjoint(setC))`.trim();\n\nconst frozenset = `\nodds = frozenset({1, 3, 5, 7, 9})\nevens = frozenset({0, 2, 4, 6, 8})\n\nprint(odds.union(evens))\nprint(odds.intersection(evens))\nprint(odds.difference(evens))`.trim();\n\nconst create = `\nmy_dict = {\"name\":\"Max\", \"age\":28, \"city\":\"New York\"}\nmy_dict_2 = dict(name=\"Lisa\", age=27, city=\"Boston\")    \n     \nname_in_dict = my_dict[\"name\"]    \nmy_dict[\"email\"] = \"max@xyz.com\"                                          # add a new key.\nmy_dict[\"email\"] = \"coolmax@xyz.com\"                                      # overwrite the existing key.\ndel my_dict[\"email\"]                                                      # delete a key-value pair.\n\nprint(my_dict)\nprint(\"popped value:\", my_dict.pop(\"age\"))                                # removes the last inserted key-value pair. \nprint(\"popped item:\", my_dict.popitem())\n`.trim();\n\nconst checkItem = `\nmy_dict = {\"name\":\"Max\", \"age\":28, \"city\":\"New York\"}\n\nif \"name\" in my_dict:\n    print(my_dict[\"name\"])\n\ntry:\n    print(my_dict[\"firstname\"])\nexcept KeyError:\n    print(\"No key found\")`.trim();\n\nconst looping = `\nfor key in my_dict:\n    print(key, my_dict[key])\n\n\nfor key in my_dict.keys():\n    print(key)\n\n\nfor value in my_dict.values():                                                    # loop over values\n    print(value)\n\n\nfor key, value in my_dict.items():                                                # loop over keys and values\n    print(key, value)`.trim();\n\nconst mergrs = `\nmy_dict = {\"name\":\"Max\", \"age\":28, \"email\":\"max@xyz.com\"}\nmy_dict_2 = dict(name=\"Lisa\", age=27, city=\"Boston\")\n\nmy_dict.update(my_dict_2)\nprint(my_dict)`.trim();\n\nconst possibles = `\nmy_dict = {3: 9, 6: 36, 9:81}                                   # use numbers as key, but be careful\nprint(my_dict[3], my_dict[6], my_dict[9])\n\nmy_tuple = (8, 7)                                               # use a tuple with immutable elements (e.g. number, string)\nmy_dict = {my_tuple: 15}\n\nprint(my_dict[my_tuple])\nprint(my_dict[8, 7])\n\n\n# my_list = [8, 7]                                              # a list is not possible because it is not immutable\n# my_dict = {my_list: 15}`.trim();\n\nclass Tuples extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3></h3>\n              <ul>\n                <li><b>Tuple: </b>A tuple is a collection of objects which is ordered and immutable. </li>\n                <ul>\n                  <li><b>my_tuple = (\"Max\", 28, \"New York\")</b></li>\n                  <li>Values of a tuple are separated by ‘commas’. Although it is not necessary.</li>\n                  <li>Creation of tuple without the use of parentheses is known as Tuple Packing.</li>\n                  <li>Add/ change items, Not possible and will raise a TypeError.</li>\n                </ul>\n                <br />\n\n                <li><b>List: </b>List is a collection data type which is ordered and mutable.</li>\n                <ul>\n                  <li><b>my_list = [\"banana\", \"cherry\", \"apple\"]</b></li>\n                  <li>Useful for preserving a sequence of data and further iterating over it.</li>\n                </ul>\n\n                <br />\n                <li><b>Set: </b>A Set is an unordered , unindexed, mutable, and has no duplicate elements.</li>\n                <ul>\n                  <li>Use curly braces or the built-in set function to create a set.</li>\n                  <li>An empty set cannot be created with Curly braces, as this is interpreted as dict use set().</li>\n                </ul>\n\n                <br />\n                <li><b>Dictionary: </b>Is an unordered, mutable and indexed. No duplicate members.</li>\n                <ul>\n                  <li>Collection of key-value pairs.</li>\n                  <li>Dictionary keys are case sensitive.</li>\n                  <li>Create a dictionary with braces, or with the built-in dict funtion.</li>\n                </ul>\n              </ul>\n              <br />\n\n              <b>Reasons to use a tuple over a list</b>\n              <ul>\n                <li>Use tuple for heterogeneous (different) datatypes and list for homogeneous datatypes.</li>\n                <li>Since tuple are immutable, iterating through tuple is faster than list.</li>\n                <li>Tuples with their immutable elements can be used as key for a dictionary. This is not possible with lists.</li>\n              </ul>\n              <br />\n\n              <h3>Create a tuple</h3>\n              <b>Special case:</b> A tuple with only one element needs to have a comma at the end,\n              otherwise it is not recognized as tuple\n              <div style={titles}>\n                <PrismCode\n                  code={createTuples}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Tuple Usefule methods</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={usefuls}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Unpack tuple</h3>\n              <ul>\n                <li>Number of variables have to match number of tuple elements.</li>\n                <li>Unpack multiple elements to a list with *.</li>\n                <li><b>Nested tuples: </b>Tuples can contain other tuples (or other container types).</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={unpack}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Compare tuple and list</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={compare}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Creating A List</h3>\n              <ul>\n                <li><b>Extend() :</b>Add all elements of a list to the another list.</li>\n                <li><b>copy() :</b>Returns a copy of the list.</li>\n                <li><b>reduce() :</b>apply a particular function passed in its argument to all of the list elements stores the intermediate result and only returns the final summation value.</li>\n                <li><b>ord() :</b>Returns an integer representing the Unicode code point of the given Unicode character.</li>\n                <li><b>cmp() :</b>This function returns 1, if first list is “greater” than second list.</li>\n                <li><b>enumerate() :</b>Returns enumerate object of list.</li>\n                <li><b>accumulate() :</b>apply a particular function passed in its argument to all of the list elements returns a list containing the intermediate results.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={list}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Copy a list</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={copylists}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>List comprehension</h3>\n              <ul>\n                <li>A elegant and fast way to create a new list from an existing list.</li>\n                <li>List comprehension consists of an expression followed by a for statement inside square brackets.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={comprehension}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Sets</h3>\n              <ul>\n                <li><b>update() :</b>Updates a set with the union of itself and others.</li>\n                <li><b>union() :</b>Returns the union of sets in a new set.</li>\n                <li><b>difference() :</b>Returns the difference of two or more sets as a new set.</li>\n                <li><b>difference_update() :</b>Removes all elements of another set from this set.</li>\n                <li><b>discard() :</b>Removes an element from set if it is a member. (Do nothing if the element is not in set).</li>\n                <li><b>intersection() :</b>Returns the intersection of two sets as a new set.</li>\n                <li><b>intersection_update() :</b>Updates the set with the intersection of itself and another.</li>\n                <li><b>isdisjoint() :</b>Returns True if two sets have a null intersection.</li>\n                <li><b>issubset() :</b>Returns True if another set contains this set.</li>\n                <li><b>issuperset() :</b>Returns True if this set contains another set.</li>\n                <li><b>symmetric_difference() :</b>Returns the symmetric difference of two sets as a new set.</li>\n                <li><b>symmetric_difference_update() :</b>Updates a set with the symmetric difference of itself and another.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={format}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Union and Intersection</h3>\n              <b>union() :</b> combine elements from both sets, no duplication. This does not change the two sets\n              <br />\n              <b>intersection():</b> take elements that are in both sets\n              <div style={titles}>\n                <PrismCode\n                  code={unions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Difference of sets</h3>\n              <b>difference() :</b> returns a set with all the elements from the setA that are not in setB.\n              <br />\n              A.difference(B) is not the same as B.difference(A)\n              <br />\n              <br />\n              <b>symmetric_difference() :</b> returns a set with all the elements that are in setA and setB but not in both\n              <br />\n              A.symmetric_difference(B) = B.symmetric_difference(A)\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={differences}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Updating sets</h3>\n              <b>update() :</b> Update the set by adding elements from another set.\n              <br />\n              <br />\n              <b>intersection_update() :</b> Update the set by keeping only the elements found in both\n              <br />\n              <b>difference_update() :</b> Update the set by removing elements found in another set.\n              <br />\n              <b>symmetric_difference_update() :</b> Update the set by only keeping the elements found in either set, but not in both\n              <br />\n              <br />\n              <b>Note:</b> all update methods also work with other iterables as argument, e.g lists, tuples\n              <div style={titles}>\n                <PrismCode\n                  code={updatings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Subset, Superset, and Disjoint</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={subsets}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Frozenset</h3>\n              Frozen set is just an immutable version of normal set. While elements of a set can be modified at any\n              time, elements of frozen set remains the same after creation.\n              <br />\n              <b>my_frozenset = frozenset(iterable)</b>\n              <div style={titles}>\n                <PrismCode\n                  code={frozenset}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Dictionaries</h3>\n              <ul>\n                <li><b>get() :</b>It is a conventional method to access a value for a key.</li>\n                <li><b>dictionary_name.values() :</b>returns a list of all the values available in a given dictionary.</li>\n                <li><b>str() :</b>Produces a printable string representation of a dictionary.</li>\n                <li><b>update() :</b>Adds dictionary dict2’s key-values pairs to dict.</li>\n                <li><b>setdefault() :</b>Set dict[key]=default if key is not already in dict.</li>\n                <li><b>keys() :</b>Returns list of dictionary dict’s keys.</li>\n                <li><b>items() :</b>Returns a list of dict’s (key, value) tuple pairs.</li>\n                <li><b>has_key() :</b>Returns true if key in dictionary dict, false otherwise.</li>\n                <li><b>fromkeys() :</b>Create a new dictionary with keys from seq and values set to value.</li>\n                <li><b>type() :</b>Returns the type of the passed variable.</li>\n                <li><b>cmp() :</b>Compares elements of both dict.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={create}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Check for keys</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={checkItem}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Looping through dictionary</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={looping}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Merge two dictionaries</h3>\n              Use the update() method to merge 2 dicts\n              existing keys are overwritten, new keys are added\n              <div style={titles}>\n                <PrismCode\n                  code={mergrs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Possible key types</h3>\n              Any immutable type, like strings or numbers can be used as a key. Also, a tuple can be used if it contains only immutable elements.\n              <br />\n              <br />\n              do not mistake the keys as indices of a list, e.g my_dict[0] is not possible here\n              <div style={titles}>\n                <PrismCode\n                  code={possibles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Tuples));\n"],"sourceRoot":""}