{"version":3,"sources":["components/ReactJs/prismCode.js","components/pythone/sidebar.js","components/pythone/deeppy/pyLogic.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","output","palindrome","sum","random","randomize","output_2","blue","For","Nested_loop","matrix","unpacking","words","EMOJ","reusable","random_","spreadsheet","openpyxl","primeMus","homogeneous","greatest","sorted","occurrence","sequence","multiple","ascii","conversion","matrixs","towerOfHanoi","calculator","PyLogic","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/249.6bfd007e.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introPython' className={classes.line}>intro Python</Link></MenuItem>\n        <MenuItem><Link to='/tuples' className={classes.line}>Tuples</Link></MenuItem>\n        <MenuItem><Link to='/stringPy' className={classes.line}>Strings</Link></MenuItem>\n        <MenuItem><Link to='/iteratorsPy' className={classes.line}>Iterators</Link></MenuItem>\n        <MenuItem><Link to='/json' className={classes.line}>Json</Link></MenuItem>\n        <MenuItem><Link to='/mathematics' className={classes.line}>Mathematics</Link></MenuItem>\n        <MenuItem><Link to='/oops_' className={classes.line}>Oops</Link></MenuItem>\n        <MenuItem><Link to='/abstract' className={classes.line}>Abstract</Link></MenuItem>\n        <MenuItem><Link to='/exceptionsPy' className={classes.line}>ExceptionsHandling</Link></MenuItem>\n\n        <MenuItem><Link to='/pyIntro' className={classes.line}>Pickle</Link></MenuItem>\n\n        <MenuItem><Link to='/threadings' className={classes.line}>Thread</Link></MenuItem>\n        <MenuItem><Link to='/collections' className={classes.line}>Collections</Link></MenuItem>\n        <MenuItem><Link to='/logging' className={classes.line}>Logging</Link></MenuItem>\n        <MenuItem><Link to='/regex' className={classes.line}>Regex</Link></MenuItem>\n        <MenuItem><Link to='/tkinter' className={classes.line}>TKinter</Link></MenuItem>\n\n        <MenuItem><Link to='/logicalspy' className={classes.line}>Logicals</Link></MenuItem>\n        <MenuItem><Link to='/pyLogic' className={classes.line}>PyLogic</Link></MenuItem>\n        <MenuItem><Link to='/csv' className={classes.line}>CsvPython</Link></MenuItem>\n        <br />\n        Flask\n        <MenuItem><Link to='/conroutes' className={classes.line}>routes</Link></MenuItem>\n        <MenuItem><Link to='/httpsMethods' className={classes.line}>Https</Link></MenuItem>\n        <MenuItem><Link to='/flasksIn' className={classes.line}>Interviews</Link></MenuItem>\n\n        <MenuItem><Link to='/flask_signUp' className={classes.line}>Flask_signUp</Link></MenuItem>\n        <MenuItem><Link to='/get_search' className={classes.line}>Get_Search</Link></MenuItem>\n        <MenuItem><Link to='/load_search' className={classes.line}>Load_Search</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst output = `\nx = ['ab', 'cd']\nprint(len(list(map(list, x))))\n`.trim()\n\nconst find = `1.\tset([[1,2],[3,4],[4,5]])\n2.\tset([1,2,2,3,4,5])\n3.\t{1,2,3,4}\n4.\tset((1,2,3,4))\n`.trim()\n\nconst palindrome = `s1 = string\ns = string[::-1]\n\nif(s1 == s):\n    return 'true'\nelse:\n    return 'false'\n\nprint(fun('madam'))\n`.trim()\n\nconst sum = `\ndef sum(num):\n    if len(num) == 1:\n        return num[0]\n    else:\n        return num[0] + sum(num[1:])\n\nprint(sum([2, 4, 5, 6, 7]))\n`.trim()\n\nconst random = `import random\n\ndef read_random(fname):\n    lines = open(fname).read().splitlines()\n    return random.choice(lines)\n`.trim()\n\nconst randomize = `\n#random() have <shuffle(<list>)> which can randomize any input sequence.\n\nimport random\n\nlist = [2, 18, 8, 4]\n\nprint(\"Prior Shuffling - 0\", list)\nrandom.shuffle(list)\n\nprint(\"After Shuffling - 1\", list)\nrandom.shuffle(list)\n\nprint(\"After Shuffling - 2\", list)\n`.trim()\n\nconst output_2 = `\ndef fast (items= []):\n    items.append (1)\n    return items\n\nprint (fast ())\nprint (fast ())\n`.trim()\n\nconst blue = `name = input('what is your name? ')\nfavorite_color = input('What is your favorite color')\nprint(name + ' Likes ' + favorite_color)\n`.trim()\n\nconst For = `\nfor item in ['Python', 'javaScrupt', 'NodeJs']:\n    print(item)\n\nfor item in range(10):\n    print(item)\n\nfor item in range(5, 10):\n    print(item)\n\nfor item in range(5, 10, 2):\n    print(item)\n`.trim()\n\nconst Nested_loop = `\nfor x in range(4):\n    for y in range(3):\n        print(f'({x}, {y})')\n\n\nnumbers = [5, 2, 5, 2, 2]\nfor x_count in numbers:\n    output = ''\n    for count in range(x_count):\n            output += 'X'\n            print(output)\n`.trim()\n\nconst matrix = `matrix = [\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n]\n\nfor row in matrix:\n  for item in row:\n      print(item)\n`.trim()\n\nconst unpacking = `coordinates = (1, 2, 3)\nx, y, z = coordinates\nprint(x)\nprint(y)\n\ncoordinates = [1, 2, 3]\nx, y, z = coordinates\nprint(z)\n`.trim()\n\nconst words = `\nphone = input(\"Phone: \")\ndigits_mapping = {\n    \"1\": \"One\",\n    \"2\": \"Two\",\n    \"3\": \"Three\",\n    \"4\": \"Four\"\n  }\n  \noutput = \"\"\nfor ch in phone:\n  output += digits_mapping.get(ch, \"!\") + \" \"\nprint(output)\n  `.trim()\n\nconst EMOJ = `message = input(\">\")\nwords = message.split(' ')\nemojis = {\n    \":)\":\"*\",\n    \":(\":\"%\"\n}\noutput = \"\"\nfor word in words:\n    output += emojis.get(word, word) + \" \"\nprint(output)\n`.trim()\n\nconst reusable = `def emoji_converter(message):\nwords = message.split(\" \")\nemojis = {\n    \":)\": \"*\",\n    \":(\": \"%\"\n}\noutput = \"\"\nfor word in words:\n    output += emojis.get(word, word) + \" \"\nreturn  output\n\n\nmessage = input(\">\")\nprint(emoji_converter(message))\n`.trim()\n\nconst random_ = `import random\n\nfor i in range(3):\n    print(random.randint(10, 20))\nprint(random.randint(10, 20))\n\n\nimport random \n\nclass Dice:\n    def roll(self):\n        first = random.randint(1, 6)\n        second = random.randint(1, 6)\n        return first, second\n\ndice = Dice()\nprint(dice.roll())\n`.trim()\n\nconst spreadsheet = `\nimport openpyxl as xl\n\nwb = xl.load_workbook('transactions.xlsx')\nsheet = wb['Sheet1']\ncell = sheet['a1']\ncell = sheet.cell(1, 1)\nprint(cell.value)\n\nprint(sheet.max_row)\n\nfor row in range(1, sheet.max_row + 1):\n    print(row)\n\nfor row in range(2, sheet.max_row + 1):\n    cell = sheet.cell(row, 3)\n    print(cell.value)\n`.trim()\n\nconst openpyxl = `import openpyxl as xl\n\nwb = xl.load_workbook('transactions.xlsx')\nsheet = wb['Sheet1']\ncell = sheet['a1']\ncell = sheet.cell(1, 1)\n\nfor row in range(2, sheet.max_row + 1):\n    cell = sheet.cell(row, 3)\n    corrected_price = cell.value * 2\n    corrected_price_cell = sheet.cell(row, 4)\n    corrected_price_cell = corrected_price\n\nwb.save('transactions2.xlsx')\n`.trim()\n\nconst primeMus = `\ndef nextPrime(n):\n    while True:\n        n+=1\n        for i in range(2,n):\n\n            if(n%i==0):\n                break\n            else:\n                print(n)\n                return n\n\nnextPrime(13)`.trim();\n\nconst homogeneous = `\nx=(30,4.5,26,3+4j,'abc', True, 5.6,2-1j)\nt1,t2,t3,t4,t5=[], [], [], [], []\n\nfor e in x:\n    if type(e) == int:\n        t1.append(e)\n    elif type(e) == float:\n        t2.append(e)\n    elif type(e) == complex:\n        t3.append(e)\n    elif type(e) == str:\n        t4.append(e)\n    elif type(e) == bool:\n        t5.append(e)\n\nt1=tuple(t1)\nt2=tuple(t2)\nt3=tuple(t3)\nt4=tuple(t4)\nt5=tuple(t5)\n\nprint(t1, t2, t3, t4, t5, sep='nL')\n`.trim();\n\nconst greatest = `\nprint('Enter number')\nt1 = tuple([int(e) for e in input().split(',')])\nprint('Enter Greatest number', max(t1))`.trim();\n\nconst sorted = `\nt1=(10,20,30,40)\nt2=(5,9,12,18,22,25)\nt3=[]\ni,j,k=0,0,0\n\nwhile i<len(t1) and j<len(t2):\n    if t1[i]<t2[j]:\n        t3.append(t1[i])\n        i+=1\n        k+=1\n    else:\n        t3.append(t2[j])\n        j+=1\n        k+=1\n        \nif i==len(t1):\n    while j<len(t2):\n        t3.append(t2[j])\n        j+=1\n        k+=1\n        \nelif j==len(t2):\n    while i<len(t1):\n        t3.append(t1[i])\n        i+=1\n        k+=1\n        \nt3=tuple(t3)\nprint(t3)`.trim();\n\nconst occurrence = `\nl=[eval(x) for x in input(\"Enter list elements\").split(',')]\nelement=eval(input(\"Enter element value\"))\nindex=0\nwhile index<len(l):\n    if l[index]==element:\n        print(index, end='')\n    index+=1`.trim();\n\nconst sequence = `\ndef sum(n):\n    if n==1:\n        return 1\n    return n**2+sum(n-1)\n\nsum(4)`.trim();\n\nconst multiple = `\ndef fun():\n    return 1,2,3\n\nx=fun()\nprint(x)`.trim();\n\nconst ascii = `\nc = input(\"Enter a character: \")\n\nprint(\"The ASCII value of '\" + c + \"' is\",ord(c)) `.trim();\n\nconst conversion = `\ndec = int(input(\"Enter a decimal number: \"))\n\nprint(bin(dec), \"in binary.\")\nprint(oct(dec), \"in octal.\")\nprint(hex(dec), \"in hexadecimal.\" )`.trim();\n\nconst matrixs = `\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\n\nresult = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\n\n\nfor i in range(len(X)):                                                             // iterate through rows of X.\n   for j in range(len(Y[0])):                                                       // iterate through columns of Y.\n       for k in range(len(Y)):                                                      // iterate through rows of Y.\n           result[i][j] += X[i][k] * Y[k][j]\n\nfor r in result:\n   print(r)\n`.trim();\n\nconst towerOfHanoi = `\ndef TowerOfHanoi(n , source, destination, auxilliary):\n    if n==1:\n        print (\"Move disk 1 from source\",source,\"to destination\",destination)\n        return\n    TowerOfHanoi(n-1, source, auxilliary, destination)\n    print (\"Move disk\",n,\"from source\",source,\"to destination\",destination)\n    TowerOfHanoi(n-1, auxilliary, destination, source)\n\nn = 4\nTowerOfHanoi(n,'A','B','C')`.trim();\n\nconst calculator = `\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    return x / y\n\n\nprint(\"Select operation.\")\nprint(\"1.Add\")\nprint(\"2.Subtract\")\nprint(\"3.Multiply\")\nprint(\"4.Divide\")\n\nwhile True:\n    choice = input(\"Enter choice(1/2/3/4): \")\n\n    if choice in ('1', '2', '3', '4'):                                      // Check if choice is one of the four options.\n        num1 = float(input(\"Enter first number: \"))\n        num2 = float(input(\"Enter second number: \"))\n\n        if choice == '1':\n            print(num1, \"+\", num2, \"=\", add(num1, num2))\n\n        elif choice == '2':\n            print(num1, \"-\", num2, \"=\", subtract(num1, num2))\n\n        elif choice == '3':\n            print(num1, \"*\", num2, \"=\", multiply(num1, num2))\n\n        elif choice == '4':\n            print(num1, \"/\", num2, \"=\", divide(num1, num2))\n        break\n    else:\n        print(\"Invalid Input\")\n`.trim();\n\n\nclass PyLogic extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <b>1. What is the output of the following?</b>\n              <div style={titles}>\n                <PrismCode\n                  code={output}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <i>Each element of x is converted into a list.</i>\n              <br />\n              <br />\n\n              <b>2. Write a Python program to check whether a given string is a palindrome or not, without using an iterative method. </b>\n              <div style={titles}>\n                <PrismCode\n                  code={palindrome}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>3. Write a Python program to calculate the sum of a list of numbers.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={sum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>4. How will you read a random line in a file?</b>\n              <div style={titles}>\n                <PrismCode\n                  code={random}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>5. What is the function to randomize the items of a list in-place?</b>\n              <div style={titles}>\n                <PrismCode\n                  code={randomize}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>6. What is the result of the below lines of code?</b>\n              <div style={titles}>\n                <PrismCode\n                  code={output_2}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>The function fast evaluates its arguments only once after the function gets defined. However, since items is a list, so it’ll get modified by appending a 1 to it.</i>\n              <br />\n              <br />\n\n              <b>7. Mukesh likes blue</b>\n              <div style={titles}>\n                <PrismCode\n                  code={blue}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>8. For</b>\n              <div style={titles}>\n                <PrismCode\n                  code={For}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>9. Nested loop</b>\n              <div style={titles}>\n                <PrismCode\n                  code={Nested_loop}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>10. Unpacking</b>\n              <div style={titles}>\n                <PrismCode\n                  code={unpacking}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>11. Enter Digit o/p words</b>\n              <div style={titles}>\n                <PrismCode\n                  code={words}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>12. Print EMOJ</b>\n              <div style={titles}>\n                <PrismCode\n                  code={EMOJ}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>13. Creating a reusable Functions</b>\n              <div style={titles}>\n                <PrismCode\n                  code={reusable}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>14. Generating random Values</b>\n              <div style={titles}>\n                <PrismCode\n                  code={random_}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>15. Excel spreadsheet</b>\n              <div style={titles}>\n                <PrismCode\n                  code={spreadsheet}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>16. Create new colom and new excel sheet</b>\n              <div style={titles}>\n                <PrismCode\n                  code={openpyxl}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>17. Python function to return next Prime number</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={primeMus}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>18. Create tuples with homogeneous elements from a tuple containing homogeneous elements.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={homogeneous}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>19. Fing greatest number from a tuple of ini values.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={greatest}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>20. Merge two sorted tuple.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={sorted}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>21. Print indices of all the occurrence of a given element in a given list.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={occurrence}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>22. Recursive function to calculate sum of sequence of first N natural numbers.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={sequence}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>23. Return multiple values.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={multiple}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>24. Ascii</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={ascii}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>25. Conversion</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={conversion}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>26. Matrix</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={matrix}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Multilpy 2 Matrix</b>\n              <div style={titles}>\n                <PrismCode\n                  code={matrixs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>27. Tower Of Hanoi</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={towerOfHanoi}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>28. Calculator</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={calculator}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(PyLogic));\n"],"sourceRoot":""}