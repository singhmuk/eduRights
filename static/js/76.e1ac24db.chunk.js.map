{"version":3,"sources":["components/ReactJs/prismCode.js","components/ReactJs/sidebar.js","components/ReactJs/reactJs_hooks/mainCompo.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","storeData","shibling","body","form","sliderBox","formMul","eventPass","editForm","increase","MainCompo","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/76.e1ac24db.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introReact' className={classes.line}>Intro-Lazy-Children</Link></MenuItem>\n        <MenuItem><Link to='/reactInter' className={classes.line}>Intro</Link></MenuItem>\n        <MenuItem><Link to='/codingInter' className={classes.line}>CodesPro</Link></MenuItem>\n        <MenuItem><Link to='/mainCompo' className={classes.line}>Event-hoc-form<br />curd-slider</Link></MenuItem>\n        <MenuItem><Link to='/pureComp' className={classes.line}>PureComp-conComp</Link></MenuItem>\n        <MenuItem><Link to='/useStates' className={classes.line}>useMultiState</Link></MenuItem>\n        <MenuItem><Link to='/contextHooks' className={classes.line}>Context Hooks</Link></MenuItem>\n        <MenuItem><Link to='/customHooks' className={classes.line}>CustomHooks-memo</Link></MenuItem>\n        <MenuItem><Link to='/useReducersSta' className={classes.line}>UseReducers</Link></MenuItem>\n        <MenuItem><Link to='/contextMethods' className={classes.line}>Curd Hooks</Link></MenuItem>\n        <MenuItem><Link to='/jsonPlaceholder' className={classes.line}>JsonPlaceholder</Link></MenuItem>\n        <MenuItem><Link to='/async_await' className={classes.line}>Async-await-sideMenu<br />Mouse hover</Link></MenuItem>\n        <MenuItem><Link to='/ticGame' className={classes.line}>Share-maxMinDate<br />moveBtn-slideshow</Link></MenuItem>\n        <MenuItem><Link to='/linkGet' className={classes.line}>LinkGet</Link></MenuItem>\n        <MenuItem><Link to='/numberFormats' className={classes.line}>Random NumFor-biToDe<br /> Validations Step DateTimw</Link></MenuItem>\n        <MenuItem><Link to='/models' className={classes.line}>Models-chidData-csv<br />Icon-router</Link></MenuItem>\n        <MenuItem><Link to='/like' className={classes.line}>Like-checkbox-radio<br />select-scroll</Link></MenuItem>\n        <MenuItem><Link to='/textEditors' className={classes.line}>TextEditors-paginations<br />translator-sortCheck</Link></MenuItem>\n        <MenuItem><Link to='/sortItems' className={classes.line}>IncOnClick-pushBtn-fizzBuzz<br />show-addDocs-ratings</Link></MenuItem>\n        <MenuItem><Link to='/serverSideRend' className={classes.line}>Jwt-multiSel</Link></MenuItem>\n        <MenuItem><Link to='/dropdownSelect' className={classes.line}>SelectFtr-checkFtr-updtCrd</Link></MenuItem>\n        <MenuItem><Link to='/kanban' className={classes.line}>Kanban</Link></MenuItem>\n        <MenuItem><Link to='/hackeRank' className={classes.line}>HackeRank</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst code = `\nclass App extends Component {\n  state = {show: true};\n\n  delHeader = () => {\n    this.setState({show: !this.state.show});\n  }\n  render() {\n    let myheader;\n    if (this.state.show) {\n      myheader = <Child />;\n    };\n    return (\n      <>\n        {myheader}\n        <button type=\"button\" onClick={this.delHeader}>Delete Header</button>\n      </>\n    );\n  }\n}\n\nclass Child extends Component {\n  componentWillUnmount() {\n    alert(\"The component named Header is about to be unmounted.\");\n  }\n  render() {\n    return (\n      <h1>Hello World!</h1>\n    );\n  }\n}`.trim();\n\n\nconst storeData = `\nexport default class App extends Component {\n  state = { user: '', rememberMe: false };\n  \n  componentDidMount() {\n    const rememberMe = localStorage.getItem('rememberMe') === 'true';\n    const user = rememberMe ? localStorage.getItem('user') : '';\n    this.setState({ user, rememberMe });\n  }\n \n  handleChange = (e) => {\n    const input = e.target;\n    const value = input.type === 'checkbox' ? input.checked : input.value;\n \n    this.setState({ [input.name]: value });\n  };\n \n  handleFormSubmit = () => {\n    const { user, rememberMe } = this.state;\n    localStorage.setItem('rememberMe', rememberMe);\n    localStorage.setItem('user', rememberMe ? user : '');\n  };\n \n  render() {\n    return (\n      <form onSubmit={this.handleFormSubmit}>\n        <label>\n          User: <input name=\"user\" value={this.state.user} onChange={this.handleChange}/>\n        </label>\n        <label>\n          <input name=\"rememberMe\" checked={this.state.rememberMe} \n                 onChange={this.handleChange} type=\"checkbox\"/> Remember me\n        </label>\n        <button type=\"submit\">Sign In</button>\n      </form>\n    );\n  }\n}`.trim();\n\nconst shibling = `\nclass ErrorBoundary extends Component {\n  state = { error: null, errorInfo: null };\n  \n  componentDidCatch(error, errorInfo) {\n    this.setState({ error, errorInfo })\n  }\n  \n  render() {\n    if (this.state.errorInfo) {\n      // Error path\n      return (\n        <>\n          <h2>Something went wrong.</h2>\n          <details>\n            {this.state.error && this.state.error.toString()}\n            <br />\n            {this.state.errorInfo.componentStack}\n          </details>\n        </>\n      );\n    }\n    \n    return this.props.children;\n  }  \n}\n\n\n\n//BuggyCounter.js\nconst BuggyCounter = () => {\n  const [ counter, setCounter ] = useState(0)\n\n  const handleClick = () => {\n    setCounter({counter: counter + 1})\n  }\n\n  if (counter === 5) {\n    throw new Error('I crashed!');\n  }\n  return <h1 onClick={handleClick}>{counter}</h1>;\n}\n\n\n\nfunction App() {\n  return (\n    <div>\n      <ErrorBoundary>\n        <BuggyCounter />\n      </ErrorBoundary>\n    </div>\n  );\n}\n\nexport default App;`.trim();\n\nconst body = `\n  const App = OriginalComponent => {\n    class NewComponent extends Component {\n      constructor(props) {\n        super(props)\n        this.state={\n          count:0\n        }\n      }\n      \n      incrementCount = () => {\n        this.setState(prevState => {\n          return { count: prevState.count +1 }\n        })\n      }\n      render(){\n        return(\n           <OriginalComponent \n            count={this.state.count}\n            incrementCount={this.incrementCount}\n         />\n        )\n      }\n    }\n    return NewComponent;\n  }\n  \n  \n  \n  const ClickCounter = (props) => {\n      const { count, incrementCount } = props;\n      return (\n        <div>\n          <button onClick={incrementCount}>\n            Click {count} times\n          </button>\n        </div>\n      )\n    }\n  //export default App(ClickCounter);\n  \n  \n  \n  const HoverCounter = (props) => {\n      const { count, incrementCount } = props;\n      return (\n        <div>\n          <button onMouseOver={incrementCount}>\n            Hover {count} times\n          </button>\n        </div>\n      )\n    }\n  \n  export default App(HoverCounter, ClickCounter);\n  //export default App(HoverCounter)`.trim()\n\nconst form = `\nconst App = () => {\n  const usersData = [\n    { id: 1, name: \"AAA\", username: \"aiueo\" }\n  ];\n\n  const initialFormState = { id: null, name: \"\", username: \"\" };\n  const [mockData, setMockData] = useState(usersData);\n  const [user, setUser] = useState(initialFormState);\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setUser({ ...user, [name]: value });\n  };\n\n  const addUser = user => {\n    user.id = mockData.length + 1;\n    setMockData([...mockData, user]);\n    setUser(initialFormState);\n  };\n\n  const deleteUser = id => {\n    setMockData(mockData.filter(user => user.id !== id));\n  };\n\n  return (\n    <div className=\"container\">\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          addUser(user);\n        }}\n      >\n        <input type=\"text\" name=\"name\" value={user.name} placeholder=\"Name\" onChange={handleInputChange} />\n        <input type=\"text\" name=\"username\" value={user.username} placeholder=\"Username\" onChange={handleInputChange} />\n        <button>Add new user</button>\n      </form>\n      \n          {mockData.map(user => (\n            <li key={user.id}>\n              {user.name}---\n              {user.username}\n              <button onClick={() => deleteUser(user.id)}>Delete</button>\n            </li>\n          ))\n        }\n    </div>\n  );\n};\n`.trim();\n\n\nconst sliderBox = `\n//App.js\nclass App extends Component {\n  state = {\n    selectIndex:0\n  }\n\n  slideIndex = () => {\n    const labels = document.querySelectorAll('#slider label');\n    const nextIndex = this.state.selectIndex === (labels.length - 1) ? 0 : \n                      this.state.selectIndex + 1; \n                      \n    this.setState({selectIndex: nextIndex})\n  }\n\n  render(){\n    return (\n      <div>\n        <div>\n          <div>\n              <button onClick={this.slideIndex}>btn</button>\n          </div>\n          <div>\n            <section id=\"slider\">\n              <input type=\"radio\" id=\"s1\" checked={this.state.selectIndex === 0} />\n              <input type=\"radio\" id=\"s2\" checked={this.state.selectIndex === 1} />\n              <input type=\"radio\" id=\"s3\" checked={this.state.selectIndex === 2} />\n              \n              <label id=\"slide1\">\n                <img src=\"https://picsum.photos/200/200\" height=\"100%\" width=\"100%\"/>\n              </label>\n              <label id=\"slide2\">\n                <img src=\"https://picsum.photos/200/300\" height=\"100%\" width=\"100%\"/>\n              </label>\n              <label id=\"slide3\">\n                <img src=\"https://picsum.photos/300/300\" height=\"100%\" width=\"100%\"/>\n              </label>\n            </section>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}  \n\n\n//App.css\n[type=radio] {\n  display: none;\n}\n\n#slider {\n  height: 30vw;\n  width: 40vw;\n  margin: 0 auto;\n  left: -10%;\n  position: relative;\n  perspective: 1000px;\n  transform-style: preserve-3d;\n}\n\n#slider label {\n  margin: auto;\n  background-color: aliceblue;\n  width: 60%;\n  height: 100%;\n  border-radius: 4px;\n  position: absolute;\n  left: 0; right: 0;\n  cursor: pointer;\n  transition: transform 0.4s ease;\n}\n\n\n#s1:checked ~ #slide3, #s2:checked ~ #slide1,\n#s3:checked ~ #slide2 {\n  box-shadow: 0 6px 10px 0 rgba(0,0,0,.3), 0 2px 2px 0 rgba(0,0,0,.2);\n  transform: translate3d(-50%,0,-100px);\n}\n\n#s1:checked ~ #slide1, #s2:checked ~ #slide2,\n#s3:checked ~ #slide3 {\n  box-shadow: 0 13px 25px 0 rgba(0,0,0,.3), 0 11px 7px 0 rgba(0,0,0,.19);\n  transform: translate3d(0,0,0);\n}\n\n#s1:checked ~ #slide2, #s2:checked ~ #slide3,\n#s3:checked ~ #slide1 {\n  box-shadow: 0 6px 10px 0 rgba(0,0,0,.3), 0 2px 2px 0 rgba(0,0,0,.2);\n  transform: translate3d(50%,0,-100px);\n}\n`.trim();\n\nconst formMul = `\nclass App extends Component {\n  state = {\n    username: '',\n    city: '',\n    country: '',\n    age: null,\n    mockData: []\n  };\n\nhandleChange = (e) => {\n  let name = e.target.name;\n  this.setState({[name]: e.target.value});\n\n  console.log(name)\n}\n\nhandleSubmit = (e) => {\n  e.preventDefault();\n  let age = this.state.age;\n\n  const newItem = {\n    username: this.state.username,\n    city: this.state.city,\n    country: this.state.country,\n    age: this.state.age\n  };\n\n  this.setState(state => ({\n    mockData: state.mockData.concat(newItem),\n      username: '',\n      city: '',\n      country: '',\n      age: '',\n      }));\n\n  if (!Number(age)) {\n    alert(\"Your age must be a number\");\n  }\n}\n\nrender() {\n  return (\n    <div>\n    <form onSubmit={this.handleSubmit}>\n      <input type='text' name='username' onChange={this.handleChange} />\n      <input type='text' name='city' onChange={this.handleChange} />\n      <input type='text' name='city' onChange={this.handleChange} />\n      <input type='text' name='age' onChange={this.handleChange} />\n      \n      <button>Submit</button>\n    </form>\n\n      {this.state.mockData.map(item => (\n        <div>\n          <li>{item.username} --- {item.city} --- {item.city} --- {item.age}</li>\n        </div> \n      ))}\n    </div>\n  );\n}\n}`.trim();\n\nconst eventPass = `\nconst App = () => {\n  const usersData = [\n    { id: 1, name: \"AAA\", username: \"aiueo\" }\n  ];\n\n  const initialFormState = { id: null, name: \"\", username: \"\" };\n  const [mockData, setMockData] = useState(usersData);\n  const [user, setUser] = useState(initialFormState);\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setUser({ ...user, [name]: value });\n  };\n\n  const addUser = user => {\n    user.id = mockData.length + 1;\n    setMockData([...mockData, user]);\n    setUser(initialFormState);\n  };\n\n  return (\n    <div className=\"container\">\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          addUser(user);\n        }}\n      >\n        <input type=\"text\" name=\"name\" value={user.name} placeholder=\"Name\" onChange={handleInputChange} />\n        <input type=\"text\" name=\"username\" value={user.username} placeholder=\"Username\" onChange={handleInputChange} />\n        <button>Add new user</button>\n      </form>\n      \n          {mockData.map(user => (\n            <li key={user.id}>\n              {user.name}---\n              {user.username}\n            </li>\n          ))\n        }\n    </div>\n  );\n};`.trim();\n\nconst editForm = `\nimport EditUserForm from \"./EditUserForm\";\n\nconst App = () => {\n  const usersData = [\n    { id: 1, name: \"AAA\", username: \"aiueo\" }\n  ];\n\n  const initialFormState = { id: null, name: \"\", username: \"\" };\n  const [mockData, setMockData] = useState(usersData);\n  const [user, setUser] = useState(initialFormState);\n\n  const [editing, setEditing] = useState(false);\n  const [currentUser, setCurrentUser] = useState(initialFormState);\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setUser({ ...user, [name]: value });\n  };\n\n  const addUser = user => {\n    user.id = mockData.length + 1;\n    setMockData([...mockData, user]);\n    setUser(initialFormState);\n  };\n\n  const deleteUser = id => {\n    setMockData(mockData.filter(user => user.id !== id));\n  };\n\n  const editRow = user => {\n    setEditing(true);\n    setCurrentUser({ id: user.id, name: user.name, username: user.username });\n  };\n\n  const updateUser = (id, updateUser) => {\n    setEditing(false);\n    setMockData(mockData.map(user => (user.id === id ? updateUser : user)));\n  };\n\n  return (\n    <div className=\"container\">\n      {editing?\n      <EditUserForm\n      editing={editing}\n      setEditing={setEditing}\n      currentUser={currentUser}\n      updateUser={updateUser}\n    />:\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          addUser(user);\n        }}\n      >\n        <input type=\"text\" name=\"name\" value={user.name} placeholder=\"Name\" onChange={handleInputChange} />\n        <input type=\"text\" name=\"username\" value={user.username} placeholder=\"Username\" onChange={handleInputChange} />\n        <button>Add new user</button>\n      </form>\n}\n          {mockData.map(user => (\n            <li key={user.id}>\n              {user.name}---\n              {user.username}\n              <button onClick={() => editRow(user)}>Edit</button>\n              <button onClick={() => deleteUser(user.id)}>Delete</button>\n            </li>\n          ))\n        }\n    </div>\n  );\n};\n\n\n//EditUserForm.js\nconst EditUserForm = props => {\n  const [user, setUser] = useState(props.currentUser);\n\n  useEffect(() => { setUser(props.currentUser) },\n    [props]\n  );\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setUser({ ...user, [name]: value });\n  };\n\n  return (\n    <form onSubmit={e => { e.preventDefault(); props.updateUser(user.id, user) }} >\n      <label>Name</label>\n      <input type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange} />\n      <label>Username</label>\n      <input type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\n      <button>Update user</button>\n      <button onClick={() => props.setEditing(false)}>Cancel</button>\n    </form>\n  );\n};\n`.trim();\n\nconst increase = `\nconst App = () => {\n  const [count, setCount]=useState(0);\n  const [toggle, setIsPouse]=useState(false);\n\n  const handlePouse=()=>{\n    setIsPouse(!toggle)\n    console.log(toggle,\"toggle\")\n  }\n\n  const handleCount=()=>{\n    if(toggle==true){\n      setCount(count+1)\n    }\n    else{\n      setCount(count-1)\n    }\n  }\n\n  const reset=()=>{\n    setCount(0)\n  }\n\n  return(\n    <div>\n      {count}<br/>\n      <button onClick={handleCount}>count</button>\n      <button onClick={handlePouse}>Pouse</button>\n      <button onClick={reset}>Reset</button>\n    </div>\n  )\n}\n`.trim();\n\nclass MainCompo extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Lifecycle of Components</h3>\n              Each component in React has a lifecycle which you can monitor and manipulate during its\n              three main phases.\n              <br />\n              1. Mounting<br />\n              2. Updating and<br />\n              3. Unmounting<br />\n              <br />\n              <b>Mounting: </b>Mounting means putting elements into the DOM.\n              <br />\n              React has four built-in methods that gets called, in this order, when mounting a component:\n              <br />\n              <br />\n              1. constructor()<br />\n              3. <b>render():</b>  required and will always be called, the others are optional and will be called if you define them.<br />\n              4. componentDidMount()<br />\n\n              <br />\n              <br />\n              <b>constructor(): </b>Is called before anything else, when the component is initiated,\n              and it is the natural place to set up the initial state and other initial values.\n              <br />\n              <br />\n              The constructor() method is called with the props, as arguments, and you should always start\n              by calling the super(props) before anything else, this will initiate the parent's constructor\n              method and allows the component to inherit methods from its parent.\n              <br />\n              <br />\n              <b>componentDidMount: </b>Method is called after the component is rendered.\n              <br />\n              This is where you run statements that requires that the component is already placed in the\n              DOM.\n              <br />\n              <br />\n              <b>Updating: </b>\n              A component is updated whenever there is a change in the component's state or props.\n              <br />\n              <ul>\n                <li>shouldComponentUpdate()</li>\n                <li>render()</li>\n                <li>componentDidUpdate()</li>\n              </ul>\n              <br />\n\n              <b>shouldComponentUpdate: </b>\n              In the shouldComponentUpdate() we can return a Boolean value that specifies whether\n              React should continue with the rendering or not.\n              <br />\n              <b>The default value is true.</b>\n              <br />\n              <br />\n\n              <b>render:</b>\n              Method is called when a component gets updated, it has to re-render\n              the HTML to the DOM, with the new changes.\n              <br />\n              <br />\n\n              <b>componentDidUpdate: </b>\n              The componentDidUpdate method is called after the component is updated in the DOM.\n              <br />\n              <br />\n              <b>Unmounting: </b>\n              componentWillUnmount:\n              <br />\n              This method is called when the component is about to be removed from the\n              DOM.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={code}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <p>This method is called when there is an error during rendering, in a lifecycle method, or in the constructor of any\n                child component. </p>\n              <ul>\n                <li>b. componentDidCatch</li>\n              </ul>\n              <br />\n\n              <h3>2. Error Boundries</h3>\n              <p>Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed. Error boundaries catch errors during rendering.\n                A component can become an Error boundary if it contains the definition of the <b>'componentDidCatch'</b>.</p>\n              <div style={titles}>\n                <PrismCode\n                  code={shibling}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Local Storage</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={storeData}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Event</h3>\n              <p>\n                In React, events are the triggered reactions to specific actions like mouse hover, mouse click, key press, etc.\n              </p>\n              <ul>\n                <li>1. Events are passed as functions instead of strings. </li>\n                <li>\n                  2. The event argument contains a set of properties, which are specific to an event. Each event type contains its own\n                  properties and behavior which can be accessed via its event handler only.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={eventPass}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>What are synthetic events in React?</h3>\n              <p>\n                Synthetic events are the objects which act as a cross-browser wrapper around the browser’s native event. They combine\n                the behavior of different browsers into one API. This is done to make sure that the events show consistent properties\n                across different browsers.\n              </p>\n              <b>Ex. </b>preventDefault\n              <br />\n\n              <h3>5. Higher Order Component</h3>\n              <i>HOCs are the coined term for a custom Component that accepts dynamically provided children.</i>\n              <div style={titles}>\n                <PrismCode\n                  code={body}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Form</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={form}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7. Form multi input</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={formMul}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7. Edit Form</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={editForm}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Increase-Decrease</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={increase}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>8. Slider on click</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={sliderBox}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(MainCompo));\n"],"sourceRoot":""}