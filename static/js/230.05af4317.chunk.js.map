{"version":3,"sources":["components/ReactJs/prismCode.js","components/pythone/sidebar.js","components/pythone/deeppy/abstract.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","abstrcts","decorated","consequence","achieve","argumentse","inner","identity","template","repeats","executed","preserve","Abstract","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/230.05af4317.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introPython' className={classes.line}>intro Python</Link></MenuItem>\n        <MenuItem><Link to='/tuples' className={classes.line}>Tuples</Link></MenuItem>\n        <MenuItem><Link to='/stringPy' className={classes.line}>Strings</Link></MenuItem>\n        <MenuItem><Link to='/iteratorsPy' className={classes.line}>Iterators</Link></MenuItem>\n        <MenuItem><Link to='/json' className={classes.line}>Json</Link></MenuItem>\n        <MenuItem><Link to='/mathematics' className={classes.line}>Mathematics</Link></MenuItem>\n        <MenuItem><Link to='/oops_' className={classes.line}>Oops</Link></MenuItem>\n        <MenuItem><Link to='/abstract' className={classes.line}>Abstract</Link></MenuItem>\n        <MenuItem><Link to='/exceptionsPy' className={classes.line}>ExceptionsHandling</Link></MenuItem>\n\n        <MenuItem><Link to='/pyIntro' className={classes.line}>Pickle</Link></MenuItem>\n\n        <MenuItem><Link to='/threadings' className={classes.line}>Thread</Link></MenuItem>\n        <MenuItem><Link to='/collections' className={classes.line}>Collections</Link></MenuItem>\n        <MenuItem><Link to='/logging' className={classes.line}>Logging</Link></MenuItem>\n        <MenuItem><Link to='/regex' className={classes.line}>Regex</Link></MenuItem>\n        <MenuItem><Link to='/tkinter' className={classes.line}>TKinter</Link></MenuItem>\n\n        <MenuItem><Link to='/logicalspy' className={classes.line}>Logicals</Link></MenuItem>\n        <MenuItem><Link to='/pyLogic' className={classes.line}>PyLogic</Link></MenuItem>\n        <MenuItem><Link to='/csv' className={classes.line}>CsvPython</Link></MenuItem>\n        <br />\n        Flask\n        <MenuItem><Link to='/conroutes' className={classes.line}>routes</Link></MenuItem>\n        <MenuItem><Link to='/httpsMethods' className={classes.line}>Https</Link></MenuItem>\n        <MenuItem><Link to='/flasksIn' className={classes.line}>Interviews</Link></MenuItem>\n\n        <MenuItem><Link to='/flask_signUp' className={classes.line}>Flask_signUp</Link></MenuItem>\n        <MenuItem><Link to='/get_search' className={classes.line}>Get_Search</Link></MenuItem>\n        <MenuItem><Link to='/load_search' className={classes.line}>Load_Search</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst abstrcts = `\nfrom abc import ABC, abstractmethod\n\nclass Computer(ABC):\n    @abstractmethod\n    def process(self):\n        pass\n\nclass Laptop(Computer):\n    def process(self):\n        print(\"It's running\")\n\nobj=Laptop()\nobj.process()`.trim();\n\nconst decorator = `\ndef decor_result(result_function):\n    def distinction(marks):\n        for m in marks:\n            if m>=75:\n                print(\"Distinction\")\n        result_function(marks)\n    return distinction\n\n@decor_result\ndef result(marks):\n    for m in marks:\n        if m>=33:\n            pass\n        else:\n            print('FAIL')\n            break\n    else:\n        print('PASS')\nresult([45,67,87,65,78])`.trim();\n\nconst decorated = `\n@my_decorator\ndef my_function():\n    pass`.trim();\n\nconst consequence = `\ndef start_end_decorator(func):\n    \n    def wrapper():\n        print('Start')\n        func()\n        print('End')\n    return wrapper\n\ndef print_name():\n    print('Alex')\n    \nprint_name()\n\nprint()\n\nprint_name = start_end_decorator(print_name)\nprint_name()`.trim();\n\nconst achieve = `\n@start_end_decorator\ndef print_name():\n    print('Alex')\n    \nprint_name()`.trim();\n\nconst argumentse = `\ndef start_end_decorator_2(func):\n    \n    def wrapper(*args, **kwargs):\n        print('Start')\n        func(*args, **kwargs)\n        print('End')\n    return wrapper\n\n@start_end_decorator_2\ndef add_5(x):\n    return x + 5\n\nresult = add_5(10)\nprint(result)`.trim();\n\nconst inner = `\ndef start_end_decorator_3(func):\n    \n    def wrapper(*args, **kwargs):\n        print('Start')\n        result = func(*args, **kwargs)\n        print('End')\n        return result\n    return wrapper\n\n@start_end_decorator_3\ndef add_5(x):\n    return x + 5\n\nresult = add_5(10)\nprint(result)`.trim();\n\nconst identity = `\nprint(add_5.__name__)\nhelp(add_5)`.trim();\n\nconst template = `\nimport functools\n\ndef my_decorator(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        result = func(*args, **kwargs)\n        return result\n    return wrapper`.trim();\n\nconst repeats = `\ndef repeat(num_times):\n    def decorator_repeat(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            for _ in range(num_times):\n                result = func(*args, **kwargs)\n            return result\n        return wrapper\n    return decorator_repeat\n\n@repeat(num_times=3)\ndef greet(name):\n    print(f\"Hello {name}\")\n    \ngreet('Alex')`.trim();\n\nconst executed = `\ndef debug(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        args_repr = [repr(a) for a in args]\n        kwargs_repr = [f\"{k}={v!r}\" for k, v in kwargs.items()]\n        signature = \", \".join(args_repr + kwargs_repr)\n        print(f\"Calling {func.__name__}({signature})\")\n        result = func(*args, **kwargs)\n        print(f\"{func.__name__!r} returned {result!r}\")\n        return result\n    return wrapper\n\n@debug\n@start_end_decorator_4\ndef say_hello(name):\n    greeting = f'Hello {name}'\n    print(greeting)\n    return greeting\n\nsay_hello(name='Alex')`.trim();\n\nconst preserve = `\nimport functools\n\nclass CountCalls:\n                                                          # the init needs to have the func as argument and stores it\n    def __init__(self, func):\n        functools.update_wrapper(self, func)\n        self.func = func\n        self.num_calls = 0\n    \n                                                          # extend functionality, execute function, and return the result\n    def __call__(self, *args, **kwargs):\n        self.num_calls += 1\n        print(f\"Call {self.num_calls} of {self.func.__name__!r}\")\n        return self.func(*args, **kwargs)\n\n@CountCalls\ndef say_hello(num):\n    print(\"Hello!\")\n    \nsay_hello(5)\nsay_hello(5)`.trim();\n\n\nclass Abstract extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Abstract Class</h3>\n              <ul>\n                <li>Python default don't support abstract class. But with abc module can do.</li>\n                <li>Abstract class has at least one abstract method.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={abstrcts}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Decorators</h3>\n              A decorator is a function that takes another function and extends the behavior of this function without explicitly modifying it. It allows to add new functionality to an existing function.\n              <br />\n              <br />\n              There are 2 kinds of decorators:\n              <ul>\n                <li>Function decoratos</li>\n                <li>Class decorators</li>\n              </ul>\n              <br />\n              A function is decorated with the <b>@</b> symbol:\n              <div style={titles}>\n                <PrismCode\n                  code={decorated}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Function decorators</h3>\n              A decorator function takes another function as argument, wraps its behaviour inside an inner function. and returns the wrapped\n              function. The decorated function no has extended functionality.\n              <div style={titles}>\n                <PrismCode\n                  code={consequence}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>The decorator syntax</h3>\n              Instead of wrapping our function and asigning it to itself, Achieve same thing by decorating our function with an @.\n              <div style={titles}>\n                <PrismCode\n                  code={achieve}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>What about function arguments</h3>\n              If our function has input arguments and we try to wrap it with our decorator above, it will raise a TypeError since we have to call our function inside the wrapper with this arguments, too. However, we can fix this by using *args and **kwargs in the inner function:\n              <div style={titles}>\n                <PrismCode\n                  code={argumentse}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Return values</h3>\n              Above, we do not get the result back, now return the value from our inner function:\n              <div style={titles}>\n                <PrismCode\n                  code={inner}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>What about the function identity?</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={identity}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>The final template for own decorators</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={template}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Decorator function arguments</h3>\n              functools.wraps is a decorator that takes an argument for itself. We can think of this as 2 inner functions, so an inner function\n              within inner function.\n              <br />\n              <br />\n              <b>Another example: </b>A repeat decorator that takes a number as input. Within\n              this function, we have the actual decorator function that wraps our function and extends its behaviour within another inner function.\n              In this case, it repeats the input function the given number of times.\n              <div style={titles}>\n                <PrismCode\n                  code={repeats}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Nested Decorators</h3>\n              We can apply several decorators to a function by stacking them on top of each other. The decorators are being executed in the order they are listed.\n              <div style={titles}>\n                <PrismCode\n                  code={executed}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Class decorators</h3>\n              We can also use a class as a decorator. Therefore, we have to implement the __call__() method to make our object callable. Class decorators are typically used to maintain a state, e.g. here we keep track of the number of times our function is executed. The __call__ method does essentially the same thing as the wrapper() method we have seen earlier. It adds some functionality, executes the function, and returns its result. Note that here we use functools.update_wrapper() instead of functools.wraps to preserve the information about our function.\n              <div style={titles}>\n                <PrismCode\n                  code={preserve}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Some typical use cases</h3>\n              <ul>\n                <li>Use a timer decorator to calculate the execution time of a function.</li>\n                <li>Use a debug decorator to print out some more information about the called function and its arguments.</li>\n                <li>Use a check decorator to check if the arguments fulfill some requirements and adapt the bevaviour accordingly.</li>\n                <li>Register functions (plugins).</li>\n                <li>Slow down code with time.sleep() to check network behaviour.</li>\n                <li>Cache the return values for memoization.</li>\n                <li>Add information or update a state.</li>\n              </ul>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Abstract));\n"],"sourceRoot":""}