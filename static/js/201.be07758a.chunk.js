(this["webpackJsonpmern-stack-client"]=this["webpackJsonpmern-stack-client"]||[]).push([[201],{140:function(e,n,r){"use strict";r.d(n,"a",(function(){return d}));var t=r(45),a=r(28),s=r(136),m=r(137),l=r(139),o=r(0),i=r.n(o),c=r(138),u=r.n(c),d=(r(59),function(e){function n(e){var r;return Object(t.a)(this,n),(r=Object(s.a)(this,Object(m.a)(n).call(this,e))).highlight=function(){r.ref&&r.ref.current&&u.a.highlightElement(r.ref.current)},r.ref=i.a.createRef(),r}return Object(l.a)(n,e),Object(a.a)(n,[{key:"componentDidMount",value:function(){this.highlight()}},{key:"componentDidUpdate",value:function(){this.highlight()}},{key:"render",value:function(){var e=this.props,n=e.code,r=(e.plugins,e.language);return i.a.createElement("pre",{className:"code-prism"},i.a.createElement("code",{ref:this.ref,className:"language-".concat(r)},n.trim()))}}]),n}(i.a.Component))},141:function(e,n,r){},155:function(e,n,r){"use strict";r.d(n,"a",(function(){return c}));var t=r(0),a=r.n(t),s=r(26),m=r(297),l=r(295),o=r(114),i=Object(o.a)((function(e){return{root:{display:"flex"},paper:{marginRight:e.spacing(2)},line:{textDecoration:"none"}}}));function c(){var e=i();return a.a.createElement("div",{className:e.root},a.a.createElement(l.a,null,a.a.createElement(m.a,null,a.a.createElement(s.b,{to:"/infoMD",className:e.line},"IntroMD")),a.a.createElement(m.a,null,a.a.createElement(s.b,{to:"/intro",className:e.line},"Queries")),a.a.createElement(m.a,null,a.a.createElement(s.b,{to:"/mongodbMethods",className:e.line},"mongodbMethods")),a.a.createElement(m.a,null,a.a.createElement(s.b,{to:"/mongoCurd",className:e.line},"MongoCurd-Ref")),a.a.createElement(m.a,null,a.a.createElement(s.b,{to:"/mongoQueries",className:e.line},"Mongo Queries")),a.a.createElement(m.a,null,a.a.createElement(s.b,{to:"/searchErrorHandling",className:e.line},"searchErrorHandling")),a.a.createElement(m.a,null,a.a.createElement(s.b,{to:"/bulkRight",className:e.line},"BulkWright")),a.a.createElement(m.a,null,a.a.createElement(s.b,{to:"/mysql",className:e.line},"Mysql")),a.a.createElement(m.a,null,a.a.createElement(s.b,{to:"/mysqlCurd",className:e.line},"MysqlCurd")),a.a.createElement(m.a,null,a.a.createElement(s.b,{to:"/joinOp",className:e.line},"JoinOp")),a.a.createElement(m.a,null,a.a.createElement(s.b,{to:"/sortOp",className:e.line},"Sort")),a.a.createElement(m.a,null,a.a.createElement(s.b,{to:"/curdOp",className:e.line},"CurdOp")),a.a.createElement(m.a,null,a.a.createElement(s.b,{to:"/gridFs",className:e.line},"gridFs")),a.a.createElement(m.a,null,a.a.createElement(s.b,{to:"/postgressql",className:e.line},"PostgreSql"))),a.a.createElement("div",null))}},384:function(e,n,r){"use strict";r.r(n);var t=r(45),a=r(28),s=r(136),m=r(137),l=r(139),o=r(0),i=r.n(o),c=r(138),u=r.n(c),d=r(120),g=r(57),q=r(296),y=r(5),p=(r(141),r(155)),b=r(140),h={backgroundColor:"#F0F8FF",padding:"1px",fontSize:"16px"},S="\nconst arraysSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: Number,          //count number of messages\n  nameHistory: [String],      //every time name chage\n  testScore: [Number]\n})\n\nmodule.exports = mongoose.model('arraysOp', arraysSchema);\n\n\n//controllers\nconst Users = require('../models/arrayOp');\n\nrouter.all = async (req, res) => {\n    Users.find()\n      .sort({ date: -1 })\n      .then(main => res.json(main));\n}\n\nrouter.search = async (req, res) => {\n    Users.find({\n      testScore: { $all: [10, 20, 30] }\n    })\n      .then(main => res.json(main))\n}\n\nrouter.size = async (req, res) => {\n    Users.find({\n      testScore: { $size: 3 }\n    })\n      .then(main => res.json(main))\n}\n\nrouter.elementMatch = async (req, res) => {\n    Users.find({\n      testScore: { $elemMatch: { $gt: 20 } }\n    })\n      .then(main => res.json(main))\n}\n\nrouter.creates = async = (req, res) => {\n    const newUsers = new Users({\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n      testScore: req.body.testScore,\n    })\n\n    newUsers.save().then(item => res.json(item));\n}\n".trim(),E="\nconst reqString = { type: String, required: true }\n\nconst messageSchema = new Schema({\n  userId: reqString,\n  text: reqString\n})\n\nconst userSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  level: Number,\n  messages: [messageSchema],\n  nameHistory: [String]\n}, {\n  timeStamps: true\n})\n\nmodule.exports = mongoose.model('conditional', userSchema);\n\n\n//controllers\nconst Items = require('../models/conditional');\n\nrouter.findLevel = async (req, res) => {\n    //Search an user level > 10\n    Items.find({\n      level: {\n        $exists: true,                    //check value exixt or not\n        // $gte: 10, $lt: 15               //gte = greater than or equal to\n      }\n    })\n      .then(main => res.json(main));\n}\n\nrouter.messages = async (req, res) => {\n    Items.findOne({\n      'messages.text': 'Text'\n    })\n      .then(main => res.json(main));\n}\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Items({\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n      level: req.body.level,\n    })\n\n    newItems.save().then(item => res.json(item));\n}\n".trim(),w="\nconst reqString = { type: String, required: true }\n\nconst userSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: Number,          //count number of messages\n})\n\nmodule.exports = mongoose.model('users', userSchema);\n\n\n//controllers\nconst Items = require('../models/conditional');\n\nrouter.findLevel = async (req, res) => {\n    //Search an user level > 10\n    Items.find({\n      level: {\n        $exists: true,                    //check value exixt or not\n        // $gte: 10, $lt: 15               //gte = greater than or equal to\n      }\n    })\n      .then(main => res.json(main));\n}\n\nrouter.messages = async (req, res) => {\n    Items.findOne({\n      'messages.text': 'Text'\n    })\n      .then(main => res.json(main));\n}\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Items({\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n      level: req.body.level,\n    })\n\n    newItems.save().then(item => res.json(item));\n}\n".trim(),f='\nconst reqString = { type: String, required: true }\n\nconst plurizedSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: {\n    type: Number, default: 5, min: 0, max: 10\n  },\n  nameHistory: [String]\n}, {\n  timeStamps: true\n})\n\nmodule.exports = mongoose.model(\'manyQry\', plurizedSchema);\n\n\n//controllers\nconst Items = require(\'../models/insertMany\');\n\nrouter.all = async (req, res) => {\n    Items.find()\n      .sort({ date: -1 })\n      .then(main => res.json(main));\n}\n\nrouter.inserts = async = (req, res) => {\n    Items.insertMany([{\n      "email": "valid@gmail.com", "username": "min", "password": "password"\n    },\n    {\n      "email": "valid2@gmail.com", "username": "min2", "password": "password2"\n    },\n    {\n      "email": "valid3@gmail.com", "username": "min3", "password": "password3"\n    }]).then(function () {\n      console.log("Data inserted")  // Success\n    })\n}\n\nrouter.remove = async = (req, res) => {\n    Items.deleteMany({\n      username: [\'min\', \'min2\']\n    }).then(function () {\n      console.log("Data inserted")  // Success\n    })\n}\n'.trim(),v="\nconst MainSchema = new Schema({\n  title: { type: String, required: true },\n  age: { type: Number, required: true },\n  list: { type: Array, required: true },\n  status: { type: String, required: false },\n  qty: { type: Number },\n});\n\nmodule.exports = mains = mongoose.model('mains', MainSchema);\n\n\n//controllers\nconst Items = require('../models/items');\n\nrouter.all = async (req, res) => {\n    Items.find()\n      .sort({ date: -1 })\n      .then(main => res.json(main));\n}\n\nrouter.getOne = async (req, res) => {\n    Items.findById(req.params.id)\n      .then(main => res.json(main))\n}\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Items({\n      title: req.body.title,\n      age: req.body.age,\n      list: req.body.list,\n      status: req.body.status,\n      qty: req.body.qty,\n    })\n\n    newItems.save().then(item => res.json(item));\n}\n\nrouter.updates = async = (req, res) => {\n    Items.findByIdAndUpdate(req.params.id, {\n      title: req.body.title,\n      age: req.body.age,\n      list: req.body.list,\n      status: req.body.status,\n      qty: req.body.qty,\n      size: {\n        h: req.body.h,\n        w: req.body.w,\n        uom: req.body.uom,\n      }\n    }, { new: true }).then(data => { res.json(data) })\n}\n\nrouter.remove = async (req, res) => {\n    Items.findByIdAndRemove(req.params.id)\n      .then(main => main.remove().then(() => res.json({ success: true })))\n}\n".trim(),j="\nconst reqString = { type: String, required: true }\n\nconst messageSchema = new Schema({\n  userId: reqString,\n  text: reqString\n})\n\nconst userSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: [messageSchema],\n  nameHistory: [String]\n}, {\n  timeStamps: true\n})\n\nmodule.exports = mongoose.model('nested', userSchema);\n\n\n//controllers\nconst Items = require('../models/nested');\n\nrouter.all = async (req, res) => {\n    Items.find()\n      .sort({ date: -1 })\n      .then(main => res.json(main));\n}\n\nrouter.messages = async (req, res) => {\n    Items.findOne({\n      'messages.text': 'Text'\n    })\n      .then(main => res.json(main));\n}\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Items({\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n      messages: [\n        {\n          userId: req.body.email,\n          text: 'Text'\n        },\n      ]\n    })\n\n    newItems.save().then(item => res.json(item));\n}\n".trim(),I="\nconst reqString = { type: String, required: true }\n\nconst plurizedSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: {\n    type: Number, default: 5, min: 0, max: 10\n  },\n  nameHistory: [String]       //every time name chage\n}, {\n  timeStamps: true          //created and updated time automatically manage\n})\n\nmodule.exports = mongoose.model('plurized', plurizedSchema);\n/*\ncollection name=plurized\ncollection name is default create plural, if want singular collection name than follow as\nmodule.exports = mongoose.model('plurized', plurizedSchema,'plurized');\n*/\n\n\n//controllers\nconst Items = require('../models/PluralizedCollectioName');\n\nrouter.all = async (req, res) => {\n    Items.find()\n      .sort({ date: -1 })\n      .then(main => res.json(main));\n}\n\nrouter.getOne = async (req, res) => {\n    Items.findById(req.params.id)\n      .then(main => res.json(main))\n}\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Items({\n      title: req.body.title,\n      age: req.body.age,\n      list: req.body.list,\n      status: req.body.status,\n      qty: req.body.qty,\n    })\n\n    newItems.save().then(item => res.json(item));\n}\n".trim(),x="\nconst reqString = { type: String, required: true }\n\nconst arraysSchema = new Schema({\n  _id: reqString,            //to use own id\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: Number,          //count number of messages\n  nameHistory: [String],      //every time name chage\n  testScore: [Number]\n})\n\nmodule.exports = mongoose.model('keysIds', arraysSchema);\n\n\n//controllers\nconst Users = require('../models/primaryUniqeId');\n\nrouter.all = async (req, res) => {\n    Users.find()\n      .then(main => res.json(main));\n}\n\nrouter.creates = async = (req, res) => {\n    const newUsers = new Users({\n      _id: req.body._id,\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n    })\n\n    newUsers.save().then(item => res.json(item));\n}\n".trim(),N="\nconst reqString = { type: String, required: true }\n\nconst messageSchema = new Schema({\n  userId: reqString,\n  text: reqString\n})\n\nconst userSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  level: Number,\n  messages: [messageSchema],\n  nameHistory: [String]\n}, \n{ timeStamps: true })\n\nmodule.exports = mongoose.model('renameRemoveDocs', userSchema);\n\n\n//controllers\nconst Items = require('../models/renameDoc.js');\n\nrouter.all = async (req, res) => {\n    Items.find()\n      .then(main => res.json(main));\n}\n\nrouter.updates = async = (req, res) => {\n    const newItems = Items.updateMany({}, {\n      // $rename: { password: req.body.password },   // rename password to pass\n      $unst: { pass: '' },                           // remove field\n    })\n      .then(main => res.json(main));\n\n    newItems.save().then(item => res.json(item));\n}\n".trim(),O="\nconst reqString = { type: String, required: true }\n\nconst timeSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: {\n    type: Number, default: 5, min: 0, max: 10\n  },\n  nameHistory: [String]       //every time name chage\n},\n{ timeStamps: true          //created and updated time automatically manage\n})\n\nmodule.exports = mongoose.model('timeStamps', timeSchema);\n\n\n//controllers\nconst Users = require('../models/timeStamps');\n\nrouter.all = async (req, res) => {\n    Users.find()\n      .then(main => res.json(main))\n}\n\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Users({\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n      messages: req.body.messages,\n    })\n\n    // const valid = new Promise((res) => {\n    //   newItems.validate((err) => {\n    //     if (err) {\n    //       res(false)\n    //     } else {\n    //       res(true)\n    //     }\n    //   })\n    // })\n\n    // if (valid) {\n    //   newItems.save()\n    // }\n    newItems.save().then(item => res.json(item));\n}\n".trim(),M=function(e){function n(){return Object(t.a)(this,n),Object(s.a)(this,Object(m.a)(n).apply(this,arguments))}return Object(l.a)(n,e),Object(a.a)(n,[{key:"componentDidMount",value:function(){setTimeout((function(){return u.a.highlightAll()}),0)}},{key:"render",value:function(){var e=this.props.classes;return i.a.createElement(d.a,{container:!0},i.a.createElement(d.a,{item:!0,xs:2},i.a.createElement(g.a,{className:e.paper},i.a.createElement("h4",null,i.a.createElement(p.a,null)))),i.a.createElement(d.a,{item:!0,xs:10},i.a.createElement(g.a,{className:e.paper},i.a.createElement(q.a,null,i.a.createElement("b",null,"arrayOp.js"),i.a.createElement("div",{style:h},i.a.createElement(b.a,{code:S,language:"js",plugins:["line-numbers"]})),i.a.createElement("br",null),i.a.createElement("br",null),i.a.createElement("b",null,"conditional.js"),i.a.createElement("div",{style:h},i.a.createElement(b.a,{code:E,language:"js",plugins:["line-numbers"]})),i.a.createElement("br",null),i.a.createElement("br",null),i.a.createElement("b",null,"increase.js"),i.a.createElement("div",{style:h},i.a.createElement(b.a,{code:w,language:"js",plugins:["line-numbers"]})),i.a.createElement("br",null),i.a.createElement("br",null),i.a.createElement("b",null,"insertMany.js"),i.a.createElement("div",{style:h},i.a.createElement(b.a,{code:f,language:"js",plugins:["line-numbers"]})),i.a.createElement("br",null),i.a.createElement("br",null),i.a.createElement("b",null,"items.js"),i.a.createElement("br",null),i.a.createElement("div",{style:h},i.a.createElement(b.a,{code:v,language:"js",plugins:["line-numbers"]})),i.a.createElement("br",null),i.a.createElement("br",null),i.a.createElement("b",null,"nested.js"),i.a.createElement("div",{style:h},i.a.createElement(b.a,{code:j,language:"js",plugins:["line-numbers"]})),i.a.createElement("br",null),i.a.createElement("br",null),i.a.createElement("b",null,"PluralizedCollectioName.js"),i.a.createElement("div",{style:h},i.a.createElement(b.a,{code:I,language:"js",plugins:["line-numbers"]})),i.a.createElement("br",null),i.a.createElement("br",null),i.a.createElement("b",null,"primaryUniqeId.js"),i.a.createElement("div",{style:h},i.a.createElement(b.a,{code:x,language:"js",plugins:["line-numbers"]})),i.a.createElement("br",null),i.a.createElement("br",null),i.a.createElement("b",null,"renameDoc.js"),i.a.createElement("div",{style:h},i.a.createElement(b.a,{code:N,language:"js",plugins:["line-numbers"]})),i.a.createElement("br",null),i.a.createElement("br",null),i.a.createElement("b",null,"timeStamps.js"),i.a.createElement("div",{style:h},i.a.createElement(b.a,{code:O,language:"js",plugins:["line-numbers"]})),i.a.createElement("br",null),i.a.createElement("br",null),i.a.createElement("h3",null)))))}}]),n}(o.Component);n.default=Object(y.a)((function(e){return{paper:{margin:e.spacing(1),padding:e.spacing(1)},smMargin:{margin:e.spacing(1)},actionDiv:{textAlign:"center"}}}))(M)}}]);
//# sourceMappingURL=201.be07758a.chunk.js.map