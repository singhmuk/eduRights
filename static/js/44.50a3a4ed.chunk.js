(this["webpackJsonpmern-stack-client"]=this["webpackJsonpmern-stack-client"]||[]).push([[44],{140:function(e,a,t){"use strict";t.d(a,"a",(function(){return p}));var n=t(45),l=t(28),r=t(136),i=t(137),c=t(139),s=t(0),o=t.n(s),m=t(138),u=t.n(m),p=(t(59),function(e){function a(e){var t;return Object(n.a)(this,a),(t=Object(r.a)(this,Object(i.a)(a).call(this,e))).highlight=function(){t.ref&&t.ref.current&&u.a.highlightElement(t.ref.current)},t.ref=o.a.createRef(),t}return Object(c.a)(a,e),Object(l.a)(a,[{key:"componentDidMount",value:function(){this.highlight()}},{key:"componentDidUpdate",value:function(){this.highlight()}},{key:"render",value:function(){var e=this.props,a=e.code,t=(e.plugins,e.language);return o.a.createElement("pre",{className:"code-prism"},o.a.createElement("code",{ref:this.ref,className:"language-".concat(t)},a.trim()))}}]),a}(o.a.Component))},141:function(e,a,t){},150:function(e,a,t){"use strict";t.d(a,"a",(function(){return m}));var n=t(0),l=t.n(n),r=t(26),i=t(297),c=t(295),s=t(114),o=Object(s.a)((function(e){return{root:{display:"flex"},paper:{marginRight:e.spacing(2)},line:{textDecoration:"none"}}}));function m(){var e=o();return l.a.createElement("div",{className:e.root},l.a.createElement(c.a,null,l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/introAngular",className:e.line},"AI")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/tensorflow",className:e.line},"Tensorflow")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/tensors",className:e.line},"Tensorboards")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/angCompiler",className:e.line},"Compiler")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/neural",className:e.line},"NeuralKeras")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/activationFunctions",className:e.line},"activationFuncs")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/loss",className:e.line},"Loss")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/gradientNeural",className:e.line},"GradientNeural")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/stochastic",className:e.line},"Stochastic")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/benchmarking",className:e.line},"Benchmarking")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/customer",className:e.line},"Customer")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/regularizationDeep",className:e.line},"Regularization Deep")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/imbalanced",className:e.line},"Imbalanced")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/imbalanced2",className:e.line},"Imbalanced2")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/convolutionals",className:e.line},"Convolutionals")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/data_augmentation",className:e.line},"data Augmentation")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/transfer",className:e.line},"Transfer")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/word_embedding",className:e.line},"Embedding")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/datatypests",className:e.line},"Datatypes")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/typeScript_2",className:e.line},"TS Function")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/typeScript_4",className:e.line},"Type Assertion"))),l.a.createElement("div",null))}},208:function(e,a,t){e.exports=t.p+"static/media/small_images.98919c56.jpg"},459:function(e,a,t){"use strict";t.r(a);var n=t(45),l=t(28),r=t(136),i=t(137),c=t(139),s=t(0),o=t.n(s),m=t(138),u=t.n(m),p=t(120),d=t(57),g=t(296),E=t(5),_=(t(141),t(150)),h=t(140),f=t(208),b=t.n(f),y={backgroundColor:"#F0F8FF",padding:"1px",fontSize:"16px"},v={height:200,width:500},N="\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\n\ntf.config.experimental.list_physical_devices()\ntf.__version__\ntf.test.is_built_with_cuda()\n".trim(),k="\n(X_train, y_train), (X_test,y_test) = tf.keras.datasets.cifar10.load_data()\n\nX_train.shape\ny_train.shape\n".trim(),w='\ndef plot_sample(index):\n    plt.figure(figsize = (10,1))\n    plt.imshow(X_train[index])\n    \nplot_sample(0)\nplot_sample(1)\n\nclasses = ["airplane","automobile","bird","cat","deer","dog","frog","horse","ship","truck"]\n\nclasses[y_train[3][0]]\n\ny_train[:3]\ny_test.shape\nX_train.shape\n'.trim(),j="\nX_train_scaled = X_train / 255\nX_test_scaled = X_test / 255\n\ny_train_categorical = keras.utils.to_categorical(y_train, num_classes=10, dtype='float32')\ny_test_categorical = keras.utils.to_categorical(y_test, num_classes=10, dtype='float32')\n\ny_train[0:5]\ny_train_categorical[0:5]\n".trim(),D="\nmodel = keras.Sequential([\n  keras.layers.Flatten(input_shape=(32,32,3)),\n  keras.layers.Dense(3000, activation='relu'),\n  keras.layers.Dense(1000, activation='relu'),\n  keras.layers.Dense(10, activation='sigmoid')    \n])\n\nmodel.compile(optimizer='SGD', loss='categorical_crossentropy', metrics=['accuracy'])\n\nmodel.fit(X_train_scaled, y_train_categorical, epochs=1)\n".trim(),U="\nnp.argmax(model.predict(X_test_scaled)[0])\ny_test[0]\n\ndef get_model():\n    model = keras.Sequential([\n            keras.layers.Flatten(input_shape=(32,32,3)),\n            keras.layers.Dense(3000, activation='relu'),\n            keras.layers.Dense(1000, activation='relu'),\n            keras.layers.Dense(10, activation='sigmoid')    \n        ])\n\n    model.compile(optimizer='SGD', loss='categorical_crossentropy', metrics=['accuracy'])\n    return model\n".trim(),X="\n%%timeit -n1 -r1 \nwith tf.device('/CPU:0'):\n    cpu_model = get_model()\n    cpu_model.fit(X_train_scaled, y_train_categorical, epochs=1)\n    \n\n%%timeit -n1 -r1                                                                  //measure training time on a GPU.\nwith tf.device('/GPU:0'):\n    cpu_model = get_model()\n    cpu_model.fit(X_train_scaled, y_train_categorical, epochs=1)\n".trim(),x="\n%%timeit -n1 -r1 \nwith tf.device('/CPU:0'):\n    cpu_model = get_model()\n    cpu_model.fit(X_train_scaled, y_train_categorical, epochs=10)\n    \n\n%%timeit -n1 -r1 \nwith tf.device('/GPU:0'):\n    cpu_model = get_model()\n    cpu_model.fit(X_train_scaled, y_train_categorical, epochs=10)\n    ".trim(),P=function(e){function a(){return Object(n.a)(this,a),Object(r.a)(this,Object(i.a)(a).apply(this,arguments))}return Object(c.a)(a,e),Object(l.a)(a,[{key:"componentDidMount",value:function(){setTimeout((function(){return u.a.highlightAll()}),0)}},{key:"render",value:function(){var e=this.props.classes;return o.a.createElement(p.a,{container:!0},o.a.createElement(p.a,{item:!0,xs:2},o.a.createElement(d.a,{className:e.paper},o.a.createElement("h4",null,o.a.createElement(_.a,null)))),o.a.createElement(p.a,{item:!0,xs:10},o.a.createElement(d.a,{className:e.paper},o.a.createElement(g.a,null,o.a.createElement("h3",null,"Small Image Classification Using Simple Aritifical Neural Network: GPU Benchmarking."),o.a.createElement("ul",null,o.a.createElement("li",null,"This command shows list of physical devices available for tensorflow. If you have NVIDIA GPU you need to install CUDA toolkit and cuDNN. Without proper installation you will not see GPU in list of devices."),o.a.createElement("b",null,"tf.config.experimental.list_physical_devices()")),o.a.createElement("br",null),o.a.createElement("div",{style:y},o.a.createElement(h.a,{code:N,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("br",null),o.a.createElement("img",{src:b.a,alt:"Theata",className:"responsive2",style:v}),o.a.createElement("br",null),o.a.createElement("br",null),o.a.createElement("div",{style:y},o.a.createElement(h.a,{code:k,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"Data Visualization"),o.a.createElement("div",{style:y},o.a.createElement(h.a,{code:w,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"Preprocessing: Scale images"),o.a.createElement("div",{style:y},o.a.createElement(h.a,{code:j,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"Model building and training"),o.a.createElement("div",{style:y},o.a.createElement(h.a,{code:D,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"Let's make some predictions"),o.a.createElement("div",{style:y},o.a.createElement(h.a,{code:U,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"Measure training time on a CPU."),o.a.createElement("div",{style:y},o.a.createElement(h.a,{code:X,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"Lets run same test for 10 epocs."),o.a.createElement("div",{style:y},o.a.createElement(h.a,{code:x,language:"js",plugins:["line-numbers"]})),o.a.createElement("i",null,"You can see that GPU is almost 15 times faster. We ran only one epoch for benchmarking but for actual training we have to run many epochs and also when data volume is big running deep learning without GPU can consume so much time. This is the reason why GPUs are becoming popular in the field of deep learning.")))))}}]),a}(s.Component);a.default=Object(E.a)((function(e){return{paper:{margin:e.spacing(1),padding:e.spacing(1)},smMargin:{margin:e.spacing(1)},actionDiv:{textAlign:"center"}}}))(P)}}]);
//# sourceMappingURL=44.50a3a4ed.chunk.js.map