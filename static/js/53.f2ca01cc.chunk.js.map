{"version":3,"sources":["components/ReactJs/prismCode.js","components/css/sidebar.js","assets/css1.PNG","components/css/enzyme2.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","module","exports","titles","backgroundColor","padding","fontSize","shallowFull","Enzymes2","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"kPAIqBA,G,kBACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAYRC,UAAY,WACN,EAAKC,KAAO,EAAKA,IAAIC,SACvBC,IAAMC,iBAAiB,EAAKH,IAAIC,UAblC,EAAKD,IAAMI,IAAMC,YAFA,E,iFAMjBC,KAAKP,c,2CAILO,KAAKP,c,+BASG,IAAD,EAC6BO,KAAKR,MAAjCS,EADD,EACCA,KAAeC,GADhB,EACOC,QADP,EACgBD,UACvB,OACE,yBAAKE,UAAU,cACb,0BAAMV,IAAKM,KAAKN,IAAKU,UAAS,mBAAcF,IACzCD,EAAKI,a,GAzBuBP,IAAMQ,a,uDCJ7C,yFAMMC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,QAEXC,MAAO,CACLC,YAAaJ,EAAMK,QAAQ,IAE7BC,KAAM,CACJC,eAAgB,YAIL,SAASC,IACtB,IAAMC,EAAUX,IAEhB,OACE,yBAAKH,UAAWc,EAAQR,MACtB,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMS,GAAG,YAAYf,UAAWc,EAAQH,MAAxC,aACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,aAAaf,UAAWc,EAAQH,MAAzC,QACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,QAAQf,UAAWc,EAAQH,MAApC,SACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,UAAUf,UAAWc,EAAQH,MAAtC,WACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,WAAWf,UAAWc,EAAQH,MAAvC,YACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,QAAQf,UAAWc,EAAQH,MAApC,SACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,YAAYf,UAAWc,EAAQH,MAAxC,aACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,WAAWf,UAAWc,EAAQH,MAAvC,YACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,WAAWf,UAAWc,EAAQH,MAAvC,aACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,WAAWf,UAAWc,EAAQH,MAAvC,cAEZ,iC,oBCnCNK,EAAOC,QAAU,IAA0B,kC,qLCWrCC,G,OAAS,CAACC,gBAAgB,UAAWC,QAAQ,MAAOC,SAAS,SAgB7DC,EAAc,w0zBAypClBrB,OAIIsB,E,4LAEFC,YAAW,kBAAMhC,IAAMiC,iBAAgB,K,+BAE/B,IACAX,EAAYlB,KAAKR,MAAjB0B,QACR,OACE,kBAAC,IAAD,CAAMY,WAAS,GACT,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GACX,kBAAC,IAAD,CAAO5B,UAAWc,EAAQN,OACtB,4BAAI,kBAAC,IAAD,SAGpB,kBAAC,IAAD,CAAMmB,MAAI,EAACC,GAAI,IACf,kBAAC,IAAD,CAAO5B,UAAWc,EAAQN,OAC1B,kBAAC,IAAD,KACE,8DACA,yBAAKqB,MAAOX,GACZ,kBAAC,IAAD,CACErB,KAAMyB,EACNxB,SAAS,KACTC,QAAS,CAAC,2B,GArBKG,aAgCP4B,uBA3sCD,SAAAzB,GAAK,MAAK,CACvBG,MAAO,CACHuB,OAAQ1B,EAAMK,QAAQ,GACtBU,QAASf,EAAMK,QAAQ,IAE3BsB,SAAU,CACND,OAAQ1B,EAAMK,QAAQ,IAE1BuB,UAAW,CACPC,UAAW,aAksCDJ,CAAmBP","file":"static/js/53.f2ca01cc.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/devtools' className={classes.line}>Devtools</Link></MenuItem>\n        <MenuItem><Link to='/cssbasics' className={classes.line}>CSS</Link></MenuItem>\n        <MenuItem><Link to='/sass' className={classes.line}>SASS</Link></MenuItem>\n        <MenuItem><Link to='/html_1' className={classes.line}>html 1</Link></MenuItem>\n        <MenuItem><Link to='/restApi' className={classes.line}>RestApi</Link></MenuItem>\n        <MenuItem><Link to='/jest' className={classes.line}>Jest</Link></MenuItem>\n        <MenuItem><Link to='/matchers' className={classes.line}>Matchers</Link></MenuItem>\n        <MenuItem><Link to='/enzymes' className={classes.line}>Enzymes</Link></MenuItem>\n        <MenuItem><Link to='/enzyme2' className={classes.line}>Enzymes2</Link></MenuItem>\n        <MenuItem><Link to='/enzyme3' className={classes.line}>Enzymes3</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n\n","module.exports = __webpack_public_path__ + \"static/media/css1.cf9107ca.PNG\";","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../ReactJs/styles.css'\nimport Sidebar from './sidebar';\nimport PrismCode from '../ReactJs/prismCode';\n\nimport Browser from '../../assets/css1.PNG';\n\n\nconst titles = {backgroundColor:'#F0F8FF', padding:'1px', fontSize:'16px'}\n\nconst styles = theme => ({\n  paper: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1)\n  },\n  smMargin: {\n      margin: theme.spacing(1)\n  },\n  actionDiv: {\n      textAlign: \"center\"\n  }\n})\n\n\nconst shallowFull = `\nimport { mount, shallow } from \"enzyme\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction Foo(props) {\n  return (\n    <div>\n      <button\n        id=\"foo-button\"\n        onClick={() => props.onButtonClick && props.onButtonClick()}\n      />\n    </div>\n  );\n}\n\nfunction MyComponent(props) {\n  return (\n    <div id=\"root\">\n      <div className=\"parent\">\n        <Foo anum={3} abool={false} />\n        <Foo anum=\"3\" abool=\"false\" />\n        <Foo id=\"foo-id\" abool={undefined} />\n        <div className=\"icon-star\"></div>\n        <a href=\"foo\">Foo</a>\n        <div id=\"list\">\n          {[1, 2, 3].map(item => (\n            <div id=\"list-item\" key={item}>\n              {item}\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className=\"parent\">{props.children}</div>\n    </div>\n  );\n}\n\nMyComponent.displayName = \"My Component\";\n\ntest(\"at(index)\", () => {\n  const wrapper = mount(<MyComponent />);\n  expect(wrapper.find(Foo).at(2)).toMatchInlineSnapshot('\n    <Foo\n      id=\"foo-id\"\n    >\n      <div>\n        <button\n          id=\"foo-button\"\n          onClick={[Function]}\n        />\n      </div>\n    </Foo>\n  ');\n});\n\ntest(\"childAt()\", () => {\n  const wrapper = mount(<MyComponent />);\n  expect(\n    wrapper\n      .find(\".parent\")\n      .first()\n      .childAt(2)\n  ).toMatchInlineSnapshot('\n    <Foo\n      id=\"foo-id\"\n    >\n      <div>\n        <button\n          id=\"foo-button\"\n          onClick={[Function]}\n        />\n      </div>\n    </Foo>\n  ');\n});\n\ntest(\"children()\", () => {\n  const wrapper = mount(<MyComponent />);\n  expect(wrapper.find(\"#list\").children()).toHaveLength(3);\n});\n\ntest(\"closest(selector)\", () => {\n  const wrapper = mount(<MyComponent />);\n  expect(\n    wrapper\n      .find(Foo)\n      .first()\n      .closest(\".parent\")\n      .children()\n  ).toHaveLength(6);\n});\n\ntest(\"contains(nodeOrNodes)\", () => {\n  const wrapper = shallow(\n    <div>\n      <span>Hello</span>\n      <div>Goodbye</div>\n      <span>Again</span>\n    </div>\n  );\n\n  expect(wrapper.contains([<span>Hello</span>, <div>Goodbye</div>])).toEqual(\n    true\n  );\n\n  expect(wrapper.contains([<span>Hello</span>, <div>World</div>])).toEqual(\n    false\n  );\n});\n\ntest(\"containsMatchingElement(node)\", () => {\n  const wrapper = shallow(\n    <div>\n      <div data-foo=\"foo\" data-bar=\"bar\">\n        Hello\n      </div>\n    </div>\n  );\n\n  expect(\n    wrapper.containsMatchingElement(\n      <div data-foo=\"foo\" data-bar=\"bar\">\n        Hello\n      </div>\n    )\n  ).toBe(true);\n\n  expect(wrapper.containsMatchingElement(<div data-foo=\"foo\">Hello</div>)).toBe(\n    true\n  );\n\n  expect(\n    wrapper.containsMatchingElement(\n      <div data-foo=\"foo\" data-bar=\"bar\" data-baz=\"baz\">\n        Hello\n      </div>\n    )\n  ).toBe(false);\n\n  expect(\n    wrapper.containsMatchingElement(\n      <div data-foo=\"foo\" data-bar=\"Hello\">\n        Hello\n      </div>\n    )\n  ).toBe(false);\n\n  expect(\n    wrapper.containsMatchingElement(<div data-foo=\"foo\" data-bar=\"bar\" />)\n  ).toBe(false);\n});\n\ntest(\"containsAllMatchingElements(nodes)\", () => {\n  const style = { fontSize: 13 };\n  const wrapper = shallow(\n    <div>\n      <span className=\"foo\">Hello</span>\n      <div style={style}>Goodbye</div>\n      <span>Again</span>\n    </div>\n  );\n\n  expect(\n    wrapper.containsAllMatchingElements([\n      <span>Hello</span>,\n      <div>Goodbye</div>\n    ])\n  ).toBe(true);\n});\n\ntest(\"containsAnyMatchingElements(nodes)\", () => {\n  const style = { fontSize: 13 };\n  const wrapper = shallow(\n    <div>\n      <span className=\"foo\">Hello</span>\n      <div style={style}>Goodbye</div>\n      <span>Again</span>\n    </div>\n  );\n\n  expect(\n    wrapper.containsAnyMatchingElements([\n      <span>Bonjour</span>,\n      <div>Goodbye</div>\n    ])\n  ).toBe(true);\n});\n\ntest.skip(\"context([key])\", () => {\n  const wrapper = shallow(<MyComponent />, { context: { foo: 10 } });\n  expect(wrapper.context().foo).toEqual(10);\n  expect(wrapper.context(\"foo\")).toEqual(10);\n});\n\ntest(\"debug()\", () => {\n  function NumberOfPages(props) {\n    return <div />;\n  }\n\n  function Book({ title, pages }) {\n    return (\n      <div>\n        <h1 className=\"title\">{title}</h1>\n        {pages && <NumberOfPages pages={pages} object={{ a: 1, b: 2 }} />}\n      </div>\n    );\n  }\n\n  let wrapper = shallow(<Book title=\"Huckleberry Finn\" />);\n  console.log(wrapper.debug());\n\n  wrapper = shallow(<Book title=\"Huckleberry Finn\" pages=\"633 pages\" />);\n  console.log(wrapper.debug());\n\n  console.log(wrapper.debug({ ignoreProps: true }));\n\n  console.log(wrapper.debug({ verbose: true }));\n});\n\ntest(\"equals(node)\", () => {\n  const wrapper = mount(<MyComponent />);\n  expect(\n    wrapper\n      .find(Foo)\n      .first()\n      .equals(<Foo anum={3} abool={false} anundefined={undefined} />)\n  ).toBe(true);\n});\n\ntest(\"every(selector)\", () => {\n  const wrapper = shallow(\n    <div>\n      <div className=\"foo qoo\" />\n      <div className=\"foo boo\" />\n      <div className=\"foo hoo\" />\n    </div>\n  );\n  expect(wrapper.find(\".foo\").every(\".foo\")).toBe(true);\n  expect(wrapper.find(\".foo\").every(\".qoo\")).toBe(false);\n  expect(wrapper.find(\".foo\").every(\".bar\")).toBe(false);\n});\n\ntest(\"everyWhere(predicate)\", () => {\n  const wrapper = shallow(\n    <div>\n      <div className=\"foo qoo\" />\n      <div className=\"foo boo\" />\n      <div className=\"foo hoo\" />\n    </div>\n  );\n\n  expect(wrapper.find(\".foo\").everyWhere(n => n.hasClass(\"foo\"))).toBe(true);\n  expect(wrapper.find(\".foo\").everyWhere(n => n.hasClass(\"qoo\"))).toEqual(\n    false\n  );\n  expect(wrapper.find(\".foo\").everyWhere(n => n.hasClass(\"bar\"))).toEqual(\n    false\n  );\n});\n\ntest(\"exists([selector])\", () => {\n  const wrapper = mount(<div className=\"some-class\" />);\n  expect(wrapper.exists(\".some-class\")).toBe(true);\n  expect(wrapper.find(\".other-class\").exists()).toBe(false);\n});\n\ntest(\"filter(selector)\", () => {\n  const wrapper = mount(<MyComponent />);\n  expect(wrapper.find(Foo).filter(\"#foo-id\")).toHaveLength(1);\n});\n\ntest(\"filterWhere(predicate)\", () => {\n  const wrapper = mount(<MyComponent />);\n  expect(wrapper.find(Foo).filterWhere(n => n.is(\"#foo-id\"))).toHaveLength(1);\n});\n\ntest(\"find(selector)\", () => {\n  const wrapper = mount(<MyComponent />);\n  expect(wrapper.find(Foo)).toHaveLength(3);\n});\n\ntest(\"findWhere(predicate)\", () => {\n  const wrapper = mount(<MyComponent />);\n  expect(wrapper.findWhere(n => n.is(Foo))).toHaveLength(3);\n});\n\ntest(\"first()\", () => {\n  const wrapper = mount(<MyComponent />);\n  expect(\n    wrapper\n      .find(Foo)\n      .first()\n      .equals(<Foo anum={3} abool={false} anundefined={undefined} />)\n  ).toBe(true);\n});\n\ntest(\"forEach(fn)\", () => {\n  const wrapper = shallow(\n    <div>\n      <div className=\"foo bax\" />\n      <div className=\"foo bar\" />\n      <div className=\"foo baz\" />\n    </div>\n  );\n\n  wrapper.find(\".foo\").forEach(node => {\n    expect(node.hasClass(\"foo\")).toBe(true);\n  });\n});\n\ntest(\"get(index)\", () => {\n  const wrapper = mount(<MyComponent />);\n  expect(wrapper.find(Foo).get(0).props.anum).toBe(3);\n});\n\ntest(\"getWrappingComponent()\", () => {\n  // Ver src/__tests__/3-full-dom-rendering/2-options.test.js linha 58\n});\n\ntest(\"getElement(index)\", () => {\n  const element = (\n    <div>\n      <span />\n      <span />\n    </div>\n  );\n\n  function MyComponent() {\n    return element;\n  }\n\n  const wrapper = shallow(<MyComponent />);\n  expect(wrapper.getElement()).toEqual(element);\n});\n\ntest(\"getElements(index)\", () => {\n  const one = <span />;\n  const two = <span />;\n\n  function Test() {\n    return (\n      <div>\n        {one}\n        {two}\n      </div>\n    );\n  }\n\n  const wrapper = shallow(<Test />);\n  expect(wrapper.find(\"span\").getElements()).toEqual([one, two]);\n});\n\ntest(\"hasClass(className)\", () => {\n  const wrapper = shallow(<MyComponent />);\n  expect(\n    wrapper\n      .find(\"#root\")\n      .childAt(0)\n      .hasClass(\"parent\")\n  ).toBe(true);\n});\n\ntest(\"hostNodes()\", () => {\n  const wrapper = shallow(\n    <div>\n      <MyComponent className=\"foo\" />\n      <span className=\"foo\" />\n    </div>\n  );\n  const twoNodes = wrapper.find(\".foo\");\n  expect(twoNodes.hostNodes()).toHaveLength(1);\n});\n\ntest(\"html()\", () => {\n  function Foo() {\n    return <div className=\"in-foo\" />;\n  }\n\n  function Bar() {\n    return (\n      <div className=\"in-bar\">\n        <Foo />\n      </div>\n    );\n  }\n\n  let wrapper = shallow(<Bar />);\n  expect(wrapper.html()).toBe(\n    '<div class=\"in-bar\"><div class=\"in-foo\"></div></div>'\n  );\n\n  expect(wrapper.find(Foo).html()).toBe('<div class=\"in-foo\"></div>');\n\n  wrapper = shallow(\n    <div>\n      <b>important</b>\n    </div>\n  );\n\n  expect(wrapper.html()).toBe(\"<div><b>important</b></div>\");\n});\n\ndescribe(\"instance()\", () => {\n  function Stateless() {\n    return <div>Stateless</div>;\n  }\n\n  class Stateful extends React.Component {\n    state = {\n      value: true\n    };\n\n    render() {\n      return <div>Stateful</div>;\n    }\n  }\n\n  test(\"shallow wrapper instance should be null\", () => {\n    const wrapper = shallow(<Stateless />);\n    const instance = wrapper.instance();\n\n    expect(instance).toBe(null);\n  });\n\n  test(\"shallow wrapper instance should not be null\", () => {\n    const wrapper = shallow(<Stateful />);\n    const instance = wrapper.instance();\n\n    expect(instance).toBeInstanceOf(Stateful);\n    expect(instance.state.value).toBe(true);\n  });\n});\n\ntest(\"invoke(propName)\", () => {\n  class Foo extends React.Component {\n    state = {\n      loaded: false\n    };\n\n    loadData() {\n      return new Promise(resolve => {\n        this.setState({ loaded: true });\n        resolve();\n      });\n    }\n\n    render() {\n      return (\n        <div>\n          <button type=\"button\" onClick={() => this.loadData()}>\n            Load more\n          </button>\n        </div>\n      );\n    }\n  }\n\n  const wrapper = shallow(<Foo />);\n\n  expect(wrapper.instance().state.loaded).toBe(false);\n\n  return wrapper\n    .find(\"button\")\n    .invoke(\"onClick\")(null)\n    .then(() => {\n      expect(wrapper.instance().state.loaded).toBe(true);\n    });\n});\n\ntest(\"is(selector)\", () => {\n  const wrapper = shallow(<div className=\"some-class other-class\" />);\n  expect(wrapper.is(\".some-class\")).toBe(true);\n});\n\ntest(\"isEmpty()\", () => {\n  const wrapper = shallow(<div className=\"some-class\" />);\n  expect(wrapper.find(\".other-class\").isEmpty()).toBe(true);\n});\n\ntest(\"isEmptyRender()\", () => {\n  function Foo() {\n    return null;\n  }\n\n  const wrapper = shallow(<Foo />);\n  expect(wrapper.isEmptyRender()).toBe(true);\n});\n\ntest(\"key()\", () => {\n  const wrapper = shallow(\n    <ul>\n      {[\"foo\", \"bar\"].map(s => (\n        <li key={s}>{s}</li>\n      ))}\n    </ul>\n  ).find(\"li\");\n\n  expect(wrapper.at(0).key()).toBe(\"foo\");\n  expect(wrapper.at(1).key()).toBe(\"bar\");\n});\n\ntest(\"last()\", () => {\n  const wrapper = mount(<MyComponent />);\n  expect(\n    wrapper\n      .find(Foo)\n      .last()\n      .equals(<Foo id=\"foo-id\" abool={undefined} />)\n  ).toBe(true);\n});\n\ntest(\"map(fn)\", () => {\n  const wrapper = shallow(\n    <div>\n      <div className=\"foo\">bax</div>\n      <div className=\"foo\">bar</div>\n      <div className=\"foo\">baz</div>\n    </div>\n  );\n\n  const texts = wrapper.find(\".foo\").map(node => node.text());\n  expect(texts).toEqual([\"bax\", \"bar\", \"baz\"]);\n});\n\ntest(\"matchesElement(node)\", () => {\n  class MyComponent extends React.Component {\n    constructor(props) {\n      super(props);\n      this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick() {\n      // ...\n    }\n\n    render() {\n      return (\n        <button type=\"button\" onClick={this.handleClick} className=\"foo bar\">\n          Hello\n        </button>\n      );\n    }\n  }\n\n  const wrapper = shallow(<MyComponent />);\n  expect(wrapper.matchesElement(<button>Hello</button>)).toBe(true);\n  expect(\n    wrapper.matchesElement(<button className=\"foo bar\">Hello</button>)\n  ).toBe(true);\n});\n\ntest(\"name()\", () => {\n  function Foo() {\n    return <div></div>;\n  }\n\n  let wrapper = shallow(<div />);\n  expect(wrapper.name()).toBe(\"div\");\n\n  function SomeWrappingComponent() {\n    return <Foo />;\n  }\n  wrapper = shallow(<SomeWrappingComponent />);\n  expect(wrapper.name()).toBe(\"Foo\");\n\n  Foo.displayName = \"A cool custom name\";\n  function SomeWrappingComponent() {\n    return <Foo />;\n  }\n\n  wrapper = shallow(<SomeWrappingComponent />);\n  expect(wrapper.name()).toBe(\"A cool custom name\");\n});\n\ntest(\"not(selector)\", () => {\n  const wrapper = shallow(<MyComponent />);\n  expect(wrapper.find(Foo).not(\"#foo-id\")).toHaveLength(2);\n});\n\ntest(\"parent()\", () => {\n  const wrapper = shallow(<MyComponent />);\n  expect(\n    wrapper\n      .find(\"Foo\")\n      .first()\n      .parent()\n      .is(\"div\")\n  ).toBe(true);\n});\n\ntest(\"parents()\", () => {\n  const wrapper = shallow(<MyComponent />);\n  const parents = wrapper\n    .find(\"Foo\")\n    .first()\n    .parents();\n  expect(parents.at(0).is(\".parent\")).toBe(true);\n  expect(parents.at(1).is(\"#root\")).toBe(true);\n});\n\ndescribe(\"prop(key)\", () => {\n  let wrapper;\n\n  beforeEach(() => {\n    wrapper = shallow(<MyComponent />);\n  });\n\n  const ValidateNumberInputComponent = props => <div></div>;\n\n  class MyComponent extends React.Component {\n    constructor(...args) {\n      super(...args);\n\n      this.state = {\n        number: 0\n      };\n\n      this.onValidNumberInput = this.onValidNumberInput.bind(this);\n    }\n\n    onValidNumberInput(number) {\n      if (!number || typeof number === \"number\") {\n        this.setState({ number });\n      }\n    }\n\n    render() {\n      const { includedProp } = this.props;\n      const { number } = this.state;\n      return (\n        <div className=\"foo bar\" includedProp={includedProp}>\n          <ValidateNumberInputComponent\n            onChangeHandler={n => this.onValidNumberInput(n)}\n            number={number}\n          />\n        </div>\n      );\n    }\n  }\n  MyComponent.propTypes = {\n    includedProp: PropTypes.string.isRequired\n  };\n\n  test(\"\", () => {\n    const wrapper = shallow(\n      <MyComponent includedProp=\"Success!\" excludedProp=\"I'm not included\" />\n    );\n\n    expect(wrapper.prop(\"includedProp\")).toEqual(\"Success!\");\n\n    console.log(wrapper.prop(\"includedProp\"));\n    // \"Success!\"\n    console.log(wrapper.prop(\"excludedProp\"));\n    // undefined\n    console.log(wrapper.instance().props.excludedProp);\n    // \"I'm not included\"\n  });\n\n  test(\"valid\", () => {\n    const validInput = 1;\n    wrapper.find(\"ValidateNumberInputComponent\").prop(\"onChangeHandler\")(\n      validInput\n    );\n    expect(wrapper.state(\"number\")).toEqual(validInput);\n  });\n\n  test(\"invalid\", () => {\n    const invalidInput = \"invalid input\";\n    wrapper.find(\"ValidateNumberInputComponent\").prop(\"onChangeHandler\")(\n      invalidInput\n    );\n    expect(wrapper.state(\"number\")).toEqual(0);\n  });\n});\n\ntest(\"props()\", () => {\n  function MyComponent(props) {\n    const { includedProp } = props;\n    return (\n      <div className=\"foo bar\" includedProp={includedProp}>\n        Hello\n      </div>\n    );\n  }\n  MyComponent.propTypes = {\n    includedProp: PropTypes.string.isRequired\n  };\n\n  const wrapper = shallow(\n    <MyComponent includedProp=\"Success!\" excludedProp=\"I'm not included\" />\n  );\n\n  // Warning: .props() only returns props that are passed to the root node,\n  // which does not include excludedProp in this example.\n\n  expect(wrapper.props()).toEqual({\n    children: \"Hello\",\n    className: \"foo bar\",\n    includedProp: \"Success!\"\n  });\n});\n\ntest(\"reduce(fn[, initialValue])\", () => {\n  function Bar(props) {\n    return <div>{props.amount}</div>;\n  }\n\n  function Foo() {\n    return (\n      <div>\n        <Bar amount={2} />\n        <Bar amount={4} />\n        <Bar amount={8} />\n      </div>\n    );\n  }\n\n  const wrapper = shallow(<Foo />);\n\n  const total = wrapper\n    .find(Bar)\n    .reduce((amount, n) => amount + n.prop(\"amount\"), 0);\n\n  expect(total).toBe(14);\n});\n\ntest(\"reduceRight(fn[, initialValue])\", () => {\n  function Bar(props) {\n    return <div>{props.amount}</div>;\n  }\n\n  function Foo() {\n    return (\n      <div>\n        <Bar amount={2} />\n        <Bar amount={4} />\n        <Bar amount={8} />\n      </div>\n    );\n  }\n\n  const wrapper = shallow(<Foo />);\n\n  const total = wrapper\n    .find(Bar)\n    .reduce((amount, n) => amount + n.prop(\"amount\"), 0);\n\n  expect(total).toBe(14);\n});\n\ntest(\"render()\", () => {\n  function Foo() {\n    return <div className=\"in-foo\" />;\n  }\n\n  function Bar() {\n    return (\n      <div className=\"in-bar\">\n        <Foo />\n      </div>\n    );\n  }\n\n  const wrapper = shallow(<Bar />);\n  expect(wrapper.find(\".in-foo\")).toHaveLength(0);\n  expect(\n    wrapper\n      .find(Foo)\n      .render()\n      .filter(\".in-foo\")\n  ).toHaveLength(1);\n});\n\ntest(\"renderProp(key)\", () => {\n  class Mouse extends React.Component {\n    constructor() {\n      super();\n      this.state = { x: 0, y: 0 };\n    }\n\n    render() {\n      const { render } = this.props;\n      return (\n        <div\n          style={{ height: \"100%\" }}\n          onMouseMove={event => {\n            this.setState({\n              x: event.clientX,\n              y: event.clientY\n            });\n          }}\n        >\n          {render(this.state)}\n        </div>\n      );\n    }\n  }\n\n  Mouse.propTypes = {\n    render: PropTypes.func.isRequired\n  };\n\n  const App = () => (\n    <div style={{ height: \"100%\" }}>\n      <Mouse\n        render={(x = 0, y = 0) => (\n          <h1>\n            The mouse position is ({x}, {y})\n          </h1>\n        )}\n      />\n    </div>\n  );\n\n  let wrapper = shallow(<App />)\n    .find(Mouse)\n    .renderProp(\"render\")();\n\n  expect(wrapper.equals(<h1>The mouse position is (0, 0)</h1>)).toEqual(true);\n\n  wrapper = shallow(<App />)\n    .find(Mouse)\n    .renderProp(\"render\")(10, 20);\n\n  expect(wrapper).toMatchInlineSnapshot('\n    <h1>\n      The mouse position is (\n      10\n      , \n      20\n      )\n    </h1>\n  ');\n\n  expect(wrapper.equals(<h1>The mouse position is (10, 20)</h1>)).toEqual(true);\n});\n\ntest(\"setContext(context)\", () => {\n  function SimpleComponent(props, context) {\n    const { name } = context;\n    return <div>{name}</div>;\n  }\n\n  SimpleComponent.contextTypes = {\n    name: PropTypes.string\n  };\n\n  const context = { name: \"foo\" };\n  const wrapper = shallow(<SimpleComponent />, { context });\n  expect(wrapper.text()).toBe(\"foo\");\n  wrapper.setContext({ name: \"bar\" });\n  expect(wrapper.text()).toBe(\"bar\");\n  wrapper.setContext({ name: \"baz\" });\n  expect(wrapper.text()).toBe(\"baz\");\n});\n\ntest(\"setProps(nextProps)\", () => {\n  class Foo extends React.Component {\n    componentWillReceiveProps(props) {\n      // ...\n    }\n\n    render() {\n      return <div className={this.props.name} />;\n    }\n  }\n\n  Foo.propTypes = {\n    name: PropTypes.string.isRequired\n  };\n\n  let wrapper = shallow(<Foo name=\"foo\" />);\n  expect(wrapper.find(\".foo\")).toHaveLength(1);\n  expect(wrapper.find(\".bar\")).toHaveLength(0);\n  wrapper.setProps({ name: \"bar\" });\n  expect(wrapper.find(\".foo\")).toHaveLength(0);\n  expect(wrapper.find(\".bar\")).toHaveLength(1);\n\n  wrapper = shallow(<Foo name=\"foo\" />);\n  const spy = jest.spyOn(wrapper.instance(), \"componentWillReceiveProps\");\n  expect(spy).not.toHaveBeenCalled();\n  wrapper.setProps({ name: \"bar\" });\n  expect(spy).toHaveBeenCalled();\n});\n\ntest(\"setState(nextState[, callback])\", () => {\n  class Foo extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = { name: \"foo\" };\n    }\n\n    render() {\n      const { name } = this.state;\n      return <div className={name} />;\n    }\n  }\n\n  const wrapper = shallow(<Foo />);\n  expect(wrapper.find(\".foo\")).toHaveLength(1);\n  expect(wrapper.find(\".bar\")).toHaveLength(0);\n  wrapper.setState({ name: \"bar\" });\n  expect(wrapper.find(\".foo\")).toHaveLength(0);\n  expect(wrapper.find(\".bar\")).toHaveLength(1);\n});\n\ntest(\"simulate(event[, data])\", () => {\n  class Foo extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = { count: 0 };\n    }\n\n    render() {\n      const { count } = this.state;\n      return (\n        <div>\n          <div className={'clicks-'$'{count}'}>{count} clicks</div>\n          <a\n            href=\"url\"\n            onClick={() => {\n              this.setState({ count: count + 1 });\n            }}\n          >\n            Increment\n          </a>\n        </div>\n      );\n    }\n  }\n\n  const wrapper = shallow(<Foo />);\n\n  expect(wrapper.find(\".clicks-0\").length).toBe(1);\n  wrapper.find(\"a\").simulate(\"click\");\n  expect(wrapper.find(\".clicks-1\").length).toBe(1);\n});\n\ntest(\"simulateError(error)\", () => {\n  function Something() {\n    // this is just a placeholder\n    return null;\n  }\n\n  class ErrorBoundary extends React.Component {\n    static getDerivedStateFromError(error) {\n      return {\n        hasError: true\n      };\n    }\n\n    constructor(props) {\n      super(props);\n      this.state = { hasError: false };\n    }\n\n    componentDidCatch(error, info) {\n      const { spy } = this.props;\n      spy(error, info);\n    }\n\n    render() {\n      const { children } = this.props;\n      const { hasError } = this.state;\n      return <React.Fragment>{hasError ? \"Error\" : children}</React.Fragment>;\n    }\n  }\n  ErrorBoundary.propTypes = {\n    children: PropTypes.node.isRequired,\n    spy: PropTypes.func.isRequired\n  };\n\n  const spy = jest.fn();\n  const wrapper = shallow(\n    <ErrorBoundary spy={spy}>\n      <Something />\n    </ErrorBoundary>\n  );\n  const error = new Error(\"hi!\");\n  wrapper.find(Something).simulateError(error);\n\n  expect(wrapper.state()).toHaveProperty(\"hasError\", true);\n  expect(spy).toHaveBeenCalledTimes(1);\n  expect(spy.mock.calls[0]).toEqual([\n    error,\n    {\n      componentStack: '\n    in Something (created by Fragment)\n    in Fragment (created by ErrorBoundary)\n    in ErrorBoundary (created by WrapperComponent)\n    in WrapperComponent'\n    }\n  ]);\n});\n\ntest(\"slice([begin[, end]])\", () => {\n  let wrapper = shallow(\n    <div>\n      <div className=\"foo bax\" />\n      <div className=\"foo bar\" />\n      <div className=\"foo baz\" />\n    </div>\n  );\n\n  expect(wrapper.find(\".foo\").slice(1)).toHaveLength(2);\n\n  expect(\n    wrapper\n      .find(\".foo\")\n      .slice(1)\n      .at(0)\n      .hasClass(\"bar\")\n  ).toBe(true);\n\n  expect(\n    wrapper\n      .find(\".foo\")\n      .slice(1)\n      .at(1)\n      .hasClass(\"baz\")\n  ).toBe(true);\n\n  wrapper = shallow(\n    <div>\n      <div className=\"foo bax\" />\n      <div className=\"foo bar\" />\n      <div className=\"foo baz\" />\n    </div>\n  );\n\n  expect(wrapper.find(\".foo\").slice(1, 2)).toHaveLength(1);\n\n  expect(\n    wrapper\n      .find(\".foo\")\n      .slice(1, 2)\n      .at(0)\n      .hasClass(\"bar\")\n  ).toBe(true);\n});\n\ntest(\"some(selector)\", () => {\n  const wrapper = shallow(\n    <div>\n      <div className=\"foo qoo\" />\n      <div className=\"foo boo\" />\n      <div className=\"foo hoo\" />\n    </div>\n  );\n\n  expect(wrapper.find(\".foo\").some(\".qoo\")).toBe(true);\n  expect(wrapper.find(\".foo\").some(\".foo\")).toBe(true);\n  expect(wrapper.find(\".foo\").some(\".bar\")).toBe(false);\n});\n\ntest(\"someWhere(predicate)\", () => {\n  const wrapper = shallow(\n    <div>\n      <div className=\"foo qoo\" />\n      <div className=\"foo boo\" />\n      <div className=\"foo hoo\" />\n    </div>\n  );\n  expect(wrapper.find(\".foo\").someWhere(n => n.hasClass(\"qoo\"))).toBe(true);\n  expect(wrapper.find(\".foo\").someWhere(n => n.hasClass(\"foo\"))).toBe(true);\n  expect(wrapper.find(\".foo\").someWhere(n => n.hasClass(\"bar\"))).toBe(false);\n});\n\ntest(\"state([key])\", () => {\n  class StatefulComponent extends React.Component {\n    state = {\n      foo: 10\n    };\n\n    render() {\n      return <div>{this.state.foo}</div>;\n    }\n  }\n\n  const wrapper = shallow(<StatefulComponent />);\n  expect(wrapper.state().foo).toBe(10);\n  expect(wrapper.state(\"foo\")).toBe(10);\n});\n\ntest(\"tap(intercepter)\", () => {\n  shallow(\n    <ul>\n      <li>xxx</li>\n      <li>yyy</li>\n      <li>zzz</li>\n    </ul>\n  )\n    .find(\"li\")\n    .tap(n => console.log(n.debug()))\n    .map(n => n.text());\n});\n\ntest(\"text()\", () => {\n  let wrapper = shallow(\n    <div>\n      <b>important</b>\n    </div>\n  );\n  expect(wrapper.text()).toEqual(\"important\");\n\n  wrapper = shallow(\n    <div>\n      <Foo />\n      <b>important</b>\n    </div>\n  );\n  expect(wrapper.text()).toEqual(\"<Foo />important\");\n});\n\ndescribe(\"type()\", () => {\n  test(\"div\", () => {\n    function Foo() {\n      return <div />;\n    }\n\n    const wrapper = shallow(<Foo />);\n    expect(wrapper.type()).toBe(\"div\");\n  });\n\n  test(\"button\", () => {\n    function Foo() {\n      return (\n        <div>\n          <button type=\"button\" className=\"btn\">\n            Button\n          </button>\n        </div>\n      );\n    }\n\n    const wrapper = shallow(<Foo />);\n    expect(wrapper.find(\".btn\").type()).toEqual(\"button\");\n  });\n\n  test(\"Bar\", () => {\n    function Bar() {\n      return <Foo />;\n    }\n\n    const wrapper = shallow(<Bar />);\n    expect(wrapper.type()).toBe(Foo);\n  });\n\n  test(\"Null\", () => {\n    function Null() {\n      return null;\n    }\n\n    const wrapper = shallow(<Null />);\n    expect(wrapper.type()).toBeNull();\n  });\n});\n\ntest.skip(\"update()\", () => {\n  class ImpureRender extends React.Component {\n    constructor(props) {\n      super(props);\n      this.count = 0;\n    }\n\n    render() {\n      this.count += 1;\n      return <div>{this.count}</div>;\n    }\n  }\n\n  const wrapper = mount(<ImpureRender />);\n  expect(wrapper.text()).toBe(\"0\");\n  wrapper.update();\n  expect(wrapper.text()).toBe(\"1\");\n});\n`.trim();\n\n\n\nclass Enzymes2 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n            <Grid item xs={2}>\n                <Paper className={classes.paper}>\n                    <h4><Sidebar /></h4>\n                </Paper>\n            </Grid>\n    <Grid item xs={10}>\n    <Paper className={classes.paper}>\n    <List>\n      <h3>6-shallow-and-full-dom-methods</h3>\n      <div style={titles}>\n      <PrismCode\n        code={shallowFull}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      </List>\n      </Paper>\n      </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Enzymes2));\n"],"sourceRoot":""}