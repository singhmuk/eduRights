(this["webpackJsonpmern-stack-client"]=this["webpackJsonpmern-stack-client"]||[]).push([[254],{140:function(e,t,n){"use strict";n.d(t,"a",(function(){return p}));var l=n(45),a=n(28),r=n(136),i=n(137),s=n(139),m=n(0),c=n.n(m),u=n(138),o=n.n(u),p=(n(59),function(e){function t(e){var n;return Object(l.a)(this,t),(n=Object(r.a)(this,Object(i.a)(t).call(this,e))).highlight=function(){n.ref&&n.ref.current&&o.a.highlightElement(n.ref.current)},n.ref=c.a.createRef(),n}return Object(s.a)(t,e),Object(a.a)(t,[{key:"componentDidMount",value:function(){this.highlight()}},{key:"componentDidUpdate",value:function(){this.highlight()}},{key:"render",value:function(){var e=this.props,t=e.code,n=(e.plugins,e.language);return c.a.createElement("pre",{className:"code-prism"},c.a.createElement("code",{ref:this.ref,className:"language-".concat(n)},t.trim()))}}]),t}(c.a.Component))},141:function(e,t,n){},147:function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var l=n(0),a=n.n(l),r=n(26),i=n(297),s=n(295),m=n(114),c=Object(m.a)((function(e){return{root:{display:"flex"},paper:{marginRight:e.spacing(2)},line:{textDecoration:"none"}}}));function u(){var e=c();return a.a.createElement("div",{className:e.root},a.a.createElement(s.a,null,a.a.createElement(i.a,null,a.a.createElement(r.b,{to:"/introPython",className:e.line},"intro Python")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:"/tuples",className:e.line},"Tuples")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:"/stringPy",className:e.line},"Strings")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:"/iteratorsPy",className:e.line},"Iterators")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:"/json",className:e.line},"Json")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:"/mathematics",className:e.line},"Mathematics")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:"/oops_",className:e.line},"Oops")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:"/abstract",className:e.line},"Abstract")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:"/exceptionsPy",className:e.line},"ExceptionsHandling")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:"/pyIntro",className:e.line},"Pickle")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:"/threadings",className:e.line},"Thread")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:"/collections",className:e.line},"Collections")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:"/logging",className:e.line},"Logging")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:"/regex",className:e.line},"Regex")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:"/tkinter",className:e.line},"TKinter")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:"/logicalspy",className:e.line},"Logicals")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:"/pyLogic",className:e.line},"PyLogic")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:"/csv",className:e.line},"CsvPython")),a.a.createElement("br",null),"Flask",a.a.createElement(i.a,null,a.a.createElement(r.b,{to:"/conroutes",className:e.line},"routes")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:"/httpsMethods",className:e.line},"Https")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:"/flasksIn",className:e.line},"Interviews")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:"/flask_signUp",className:e.line},"Flask_signUp")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:"/get_search",className:e.line},"Get_Search")),a.a.createElement(i.a,null,a.a.createElement(r.b,{to:"/load_search",className:e.line},"Load_Search"))),a.a.createElement("div",null))}},418:function(e,t,n){"use strict";n.r(t);var l=n(45),a=n(28),r=n(136),i=n(137),s=n(139),m=n(0),c=n.n(m),u=n(138),o=n.n(u),p=n(120),d=n(57),E=n(296),y=n(5),b=(n(141),n(147)),h=n(140),f={backgroundColor:"#F0F8FF",padding:"1px",fontSize:"16px"},_='\nmy_tuple = ("Max", 28, "New York")\nmy_tuple_2 = "Linda", 25, "Miami"                                              # Parentheses are optional\nmy_tuple_3 = (25, 1, 2, 3, 4,)\n\nx = my_tuple.count(\'Max\')\nx = my_tuple[-1]\nx = my_tuple.index(28)                                                         # Return index of first item of 28.\nx = len(my_tuple)\nx = max(my_tuple_3)\nx = min(my_tuple_3)\nx = any(my_tuple_3)\nx = all(my_tuple_3)\nx = enumerate(my_tuple_3)\nx = sum(my_tuple_3)\nx = sorted(my_tuple_3)\nx = tuple(my_tuple_3)                                                         # Convert an iterable to a tuple.\n\nname, age, city = my_tuple\n\nprint(x)\nprint(name, age, city)\n\n\n#2\ntuple_4 = tuple([1,2,3])                     # convert an iterable (list, dict, string) with the built-in tuple function\nprint(tuple_4)'.trim(),g="\nmy_tuple = ('a', 'b') * 5                                          \nprint(my_tuple)\n\n\n#2 convert list to a tuple.\nmy_list = ['a', 'b', 'c', 'd']\nlist_to_tuple = tuple(my_list)\nprint(list_to_tuple)\n\ntuple_to_list = list(list_to_tuple)\nprint(tuple_to_list)\n\n\n#3 convert string to tuple.\nstring_to_tuple = tuple('Hello')\nprint(string_to_tuple)".trim(),v="\nmy_tuple = (0, 1, 2, 3, 4, 5)\nfirst, *items_between, last = my_tuple\nprint(first, items_between, last)\n\n\n#2. Nested tuples\na = ((0, 1), ('age', 'height'))\nprint(a[0])\n".trim(),x='\n# compare the size\nimport sys\nmy_list = [0, 1, 2, "hello", True]\nmy_tuple = (0, 1, 2, "hello", True)\nprint(sys.getsizeof(my_list), "bytes")\nprint(sys.getsizeof(my_tuple), "bytes")\n\n# compare the execution time of a list vs. tuple creation statement\nimport timeit\nprint(timeit.timeit(stmt="[0, 1, 2, 3, 4, 5]", number=1000000))\nprint(timeit.timeit(stmt="(0, 1, 2, 3, 4, 5)", number=1000000))'.trim(),k='\nmy_list = ["banana", "cherry", "apple", 5, True, 0, 1, 1]\nprint(my_list)\n\nlist_2 = list()                                                       # Or create an empty list with the list function\nprint(list_2)\n\nx = my_list.append("orange")                                              \nx = my_list.index(1)                                              \nx = my_list.insert(1, "blueberry")                                        \nx = my_list.pop()                                                        \nx = my_list.remove("cherry")                                              \nx = my_list.clear()                                                       \nx = my_list.reverse()                                                    \nx = my_list.sort()  \nx = my_list.count(0)  \nx = sum(my_list)  \nx = max(my_list)  \nx = min(my_list)  \nx = all(my_list)  \nx = any(my_list)  \nx = len(my_list)  \nx = enumerate(my_list)  \n\nprint(x)  \n\n\nlist_with_zeros = [0] * 5                                             # create list with repeated elements\nlist_concat = list_with_zeros + my_list\nstring_to_list = list(\'Hello\')                                        # convert string to list\n'.trim(),w='\nlist_org = ["banana", "cherry", "apple"]\nlist_copy = list_org.copy()\nlist_copy.append(True)                                                # modifying the copy not affects the original\n\nprint(list_org)\nprint(list_copy)\n'.trim(),A="\na = [1, 2, 3, 4, 5, 6, 7, 8]\nb = [i * i for i in a] \nprint(b)\n\n\n# nested Lists\na = [[1, 2], [3, 4]]\nprint(a)\nprint(a[0])\n".trim(),N='\nmy_set = {"apple", "banana", "cherry"}\nmy_set_2 = set(["one", "two", "three"])                         # or use the set function and create from an iterable\nmy_set_3 = set("aaabbbcccdddeeeeeffff")\n\nmy_set.add("three") \nmy_set.remove("three") \nmy_set.discard("three")                                         # removes x\nmy_set.pop()                                                    # removes x\nmy_set.clear()  \n\nprint(my_set)\n'.trim(),j="\nodds = {1, 3, 5, 7, 9}\nevens = {0, 2, 4, 6, 8}\n\nu = odds.union(evens)\ni = odds.intersection(evens)\n\nprint(u)".trim(),B="\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nsetB = {1, 2, 3, 10, 11, 12}\n\ndiff_set = setA.difference(setB)\ndiff_set = setB.difference(setA)\ndiff_set = setA.symmetric_difference(setB)\ndiff_set = setB.symmetric_difference(setA)\nprint(diff_set)".trim(),R="\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nsetB = {1, 2, 3, 10, 11, 12}\n\nsetA.update(setB)\n\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nsetA.intersection_update(setB)\n\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nsetA.difference_update(setB)\n\nsetA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nsetA.symmetric_difference_update(setB)\n\nsetA.update([1, 2, 3, 4, 5, 6])".trim(),T="\nsetA = {1, 2, 3, 4, 5, 6}\nsetB = {1, 2, 3}\n\nprint(setA.issubset(setB))\nprint(setB.issubset(setA))                                  # issubset(setX): Returns True if setX contains the set\n\n\nprint(setA.issuperset(setB))                                # issuperset(setX): Returns True if the set contains setX\nprint(setB.issuperset(setA))\n\n\nsetC = {7, 8, 9}\nprint(setA.isdisjoint(setB))                                # True if both sets have a null intersection\nprint(setA.isdisjoint(setC))".trim(),U="\nodds = frozenset({1, 3, 5, 7, 9})\nevens = frozenset({0, 2, 4, 6, 8})\n\nprint(odds.union(evens))\nprint(odds.intersection(evens))\nprint(odds.difference(evens))".trim(),C='\nmy_dict = {"name":"Max", "age":28, "city":"New York"}\nmy_dict_2 = dict(name="Lisa", age=27, city="Boston")    \n     \nname_in_dict = my_dict["name"]    \nmy_dict["email"] = "max@xyz.com"                                          # add a new key.\nmy_dict["email"] = "coolmax@xyz.com"                                      # overwrite the existing key.\ndel my_dict["email"]                                                      # delete a key-value pair.\n\nprint(my_dict)\nprint("popped value:", my_dict.pop("age"))                                # removes the last inserted key-value pair. \nprint("popped item:", my_dict.popitem())\n'.trim(),z='\nmy_dict = {"name":"Max", "age":28, "city":"New York"}\n\nif "name" in my_dict:\n    print(my_dict["name"])\n\ntry:\n    print(my_dict["firstname"])\nexcept KeyError:\n    print("No key found")'.trim(),L="\nfor key in my_dict:\n    print(key, my_dict[key])\n\n\nfor key in my_dict.keys():\n    print(key)\n\n\nfor value in my_dict.values():                                                    # loop over values\n    print(value)\n\n\nfor key, value in my_dict.items():                                                # loop over keys and values\n    print(key, value)".trim(),O='\nmy_dict = {"name":"Max", "age":28, "email":"max@xyz.com"}\nmy_dict_2 = dict(name="Lisa", age=27, city="Boston")\n\nmy_dict.update(my_dict_2)\nprint(my_dict)'.trim(),M="\nmy_dict = {3: 9, 6: 36, 9:81}                                   # use numbers as key, but be careful\nprint(my_dict[3], my_dict[6], my_dict[9])\n\nmy_tuple = (8, 7)                                               # use a tuple with immutable elements (e.g. number, string)\nmy_dict = {my_tuple: 15}\n\nprint(my_dict[my_tuple])\nprint(my_dict[8, 7])\n\n\n# my_list = [8, 7]                                              # a list is not possible because it is not immutable\n# my_dict = {my_list: 15}".trim(),P=function(e){function t(){return Object(l.a)(this,t),Object(r.a)(this,Object(i.a)(t).apply(this,arguments))}return Object(s.a)(t,e),Object(a.a)(t,[{key:"componentDidMount",value:function(){setTimeout((function(){return o.a.highlightAll()}),0)}},{key:"render",value:function(){var e=this.props.classes;return c.a.createElement(p.a,{container:!0},c.a.createElement(p.a,{item:!0,xs:2},c.a.createElement(d.a,{className:e.paper},c.a.createElement("h4",null,c.a.createElement(b.a,null)))),c.a.createElement(p.a,{item:!0,xs:10},c.a.createElement(d.a,{className:e.paper},c.a.createElement(E.a,null,c.a.createElement("h3",null),c.a.createElement("ul",null,c.a.createElement("li",null,c.a.createElement("b",null,"Tuple: "),"A tuple is a collection of objects which is ordered and immutable. "),c.a.createElement("ul",null,c.a.createElement("li",null,c.a.createElement("b",null,'my_tuple = ("Max", 28, "New York")')),c.a.createElement("li",null,"Values of a tuple are separated by \u2018commas\u2019. Although it is not necessary."),c.a.createElement("li",null,"Creation of tuple without the use of parentheses is known as Tuple Packing."),c.a.createElement("li",null,"Add/ change items, Not possible and will raise a TypeError.")),c.a.createElement("br",null),c.a.createElement("li",null,c.a.createElement("b",null,"List: "),"List is a collection data type which is ordered and mutable."),c.a.createElement("ul",null,c.a.createElement("li",null,c.a.createElement("b",null,'my_list = ["banana", "cherry", "apple"]')),c.a.createElement("li",null,"Useful for preserving a sequence of data and further iterating over it.")),c.a.createElement("br",null),c.a.createElement("li",null,c.a.createElement("b",null,"Set: "),"A Set is an unordered , unindexed, mutable, and has no duplicate elements."),c.a.createElement("ul",null,c.a.createElement("li",null,"Use curly braces or the built-in set function to create a set."),c.a.createElement("li",null,"An empty set cannot be created with Curly braces, as this is interpreted as dict use set().")),c.a.createElement("br",null),c.a.createElement("li",null,c.a.createElement("b",null,"Dictionary: "),"Is an unordered, mutable and indexed. No duplicate members."),c.a.createElement("ul",null,c.a.createElement("li",null,"Collection of key-value pairs."),c.a.createElement("li",null,"Dictionary keys are case sensitive."),c.a.createElement("li",null,"Create a dictionary with braces, or with the built-in dict funtion."))),c.a.createElement("br",null),c.a.createElement("b",null,"Reasons to use a tuple over a list"),c.a.createElement("ul",null,c.a.createElement("li",null,"Use tuple for heterogeneous (different) datatypes and list for homogeneous datatypes."),c.a.createElement("li",null,"Since tuple are immutable, iterating through tuple is faster than list."),c.a.createElement("li",null,"Tuples with their immutable elements can be used as key for a dictionary. This is not possible with lists.")),c.a.createElement("br",null),c.a.createElement("h3",null,"Create a tuple"),c.a.createElement("b",null,"Special case:")," A tuple with only one element needs to have a comma at the end, otherwise it is not recognized as tuple",c.a.createElement("div",{style:f},c.a.createElement(h.a,{code:_,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Tuple Usefule methods"),c.a.createElement("div",{style:f},c.a.createElement(h.a,{code:g,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Unpack tuple"),c.a.createElement("ul",null,c.a.createElement("li",null,"Number of variables have to match number of tuple elements."),c.a.createElement("li",null,"Unpack multiple elements to a list with *."),c.a.createElement("li",null,c.a.createElement("b",null,"Nested tuples: "),"Tuples can contain other tuples (or other container types).")),c.a.createElement("br",null),c.a.createElement("div",{style:f},c.a.createElement(h.a,{code:v,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Compare tuple and list"),c.a.createElement("div",{style:f},c.a.createElement(h.a,{code:x,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Creating A List"),c.a.createElement("ul",null,c.a.createElement("li",null,c.a.createElement("b",null,"Extend() :"),"Add all elements of a list to the another list."),c.a.createElement("li",null,c.a.createElement("b",null,"copy() :"),"Returns a copy of the list."),c.a.createElement("li",null,c.a.createElement("b",null,"reduce() :"),"apply a particular function passed in its argument to all of the list elements stores the intermediate result and only returns the final summation value."),c.a.createElement("li",null,c.a.createElement("b",null,"ord() :"),"Returns an integer representing the Unicode code point of the given Unicode character."),c.a.createElement("li",null,c.a.createElement("b",null,"cmp() :"),"This function returns 1, if first list is \u201cgreater\u201d than second list."),c.a.createElement("li",null,c.a.createElement("b",null,"enumerate() :"),"Returns enumerate object of list."),c.a.createElement("li",null,c.a.createElement("b",null,"accumulate() :"),"apply a particular function passed in its argument to all of the list elements returns a list containing the intermediate results.")),c.a.createElement("br",null),c.a.createElement("div",{style:f},c.a.createElement(h.a,{code:k,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Copy a list"),c.a.createElement("div",{style:f},c.a.createElement(h.a,{code:w,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"List comprehension"),c.a.createElement("ul",null,c.a.createElement("li",null,"A elegant and fast way to create a new list from an existing list."),c.a.createElement("li",null,"List comprehension consists of an expression followed by a for statement inside square brackets.")),c.a.createElement("div",{style:f},c.a.createElement(h.a,{code:A,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Sets"),c.a.createElement("ul",null,c.a.createElement("li",null,c.a.createElement("b",null,"update() :"),"Updates a set with the union of itself and others."),c.a.createElement("li",null,c.a.createElement("b",null,"union() :"),"Returns the union of sets in a new set."),c.a.createElement("li",null,c.a.createElement("b",null,"difference() :"),"Returns the difference of two or more sets as a new set."),c.a.createElement("li",null,c.a.createElement("b",null,"difference_update() :"),"Removes all elements of another set from this set."),c.a.createElement("li",null,c.a.createElement("b",null,"discard() :"),"Removes an element from set if it is a member. (Do nothing if the element is not in set)."),c.a.createElement("li",null,c.a.createElement("b",null,"intersection() :"),"Returns the intersection of two sets as a new set."),c.a.createElement("li",null,c.a.createElement("b",null,"intersection_update() :"),"Updates the set with the intersection of itself and another."),c.a.createElement("li",null,c.a.createElement("b",null,"isdisjoint() :"),"Returns True if two sets have a null intersection."),c.a.createElement("li",null,c.a.createElement("b",null,"issubset() :"),"Returns True if another set contains this set."),c.a.createElement("li",null,c.a.createElement("b",null,"issuperset() :"),"Returns True if this set contains another set."),c.a.createElement("li",null,c.a.createElement("b",null,"symmetric_difference() :"),"Returns the symmetric difference of two sets as a new set."),c.a.createElement("li",null,c.a.createElement("b",null,"symmetric_difference_update() :"),"Updates a set with the symmetric difference of itself and another.")),c.a.createElement("br",null),c.a.createElement("div",{style:f},c.a.createElement(h.a,{code:N,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Union and Intersection"),c.a.createElement("b",null,"union() :")," combine elements from both sets, no duplication. This does not change the two sets",c.a.createElement("br",null),c.a.createElement("b",null,"intersection():")," take elements that are in both sets",c.a.createElement("div",{style:f},c.a.createElement(h.a,{code:j,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Difference of sets"),c.a.createElement("b",null,"difference() :")," returns a set with all the elements from the setA that are not in setB.",c.a.createElement("br",null),"A.difference(B) is not the same as B.difference(A)",c.a.createElement("br",null),c.a.createElement("br",null),c.a.createElement("b",null,"symmetric_difference() :")," returns a set with all the elements that are in setA and setB but not in both",c.a.createElement("br",null),"A.symmetric_difference(B) = B.symmetric_difference(A)",c.a.createElement("br",null),c.a.createElement("div",{style:f},c.a.createElement(h.a,{code:B,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Updating sets"),c.a.createElement("b",null,"update() :")," Update the set by adding elements from another set.",c.a.createElement("br",null),c.a.createElement("br",null),c.a.createElement("b",null,"intersection_update() :")," Update the set by keeping only the elements found in both",c.a.createElement("br",null),c.a.createElement("b",null,"difference_update() :")," Update the set by removing elements found in another set.",c.a.createElement("br",null),c.a.createElement("b",null,"symmetric_difference_update() :")," Update the set by only keeping the elements found in either set, but not in both",c.a.createElement("br",null),c.a.createElement("br",null),c.a.createElement("b",null,"Note:")," all update methods also work with other iterables as argument, e.g lists, tuples",c.a.createElement("div",{style:f},c.a.createElement(h.a,{code:R,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Subset, Superset, and Disjoint"),c.a.createElement("div",{style:f},c.a.createElement(h.a,{code:T,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Frozenset"),"Frozen set is just an immutable version of normal set. While elements of a set can be modified at any time, elements of frozen set remains the same after creation.",c.a.createElement("br",null),c.a.createElement("b",null,"my_frozenset = frozenset(iterable)"),c.a.createElement("div",{style:f},c.a.createElement(h.a,{code:U,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Dictionaries"),c.a.createElement("ul",null,c.a.createElement("li",null,c.a.createElement("b",null,"get() :"),"It is a conventional method to access a value for a key."),c.a.createElement("li",null,c.a.createElement("b",null,"dictionary_name.values() :"),"returns a list of all the values available in a given dictionary."),c.a.createElement("li",null,c.a.createElement("b",null,"str() :"),"Produces a printable string representation of a dictionary."),c.a.createElement("li",null,c.a.createElement("b",null,"update() :"),"Adds dictionary dict2\u2019s key-values pairs to dict."),c.a.createElement("li",null,c.a.createElement("b",null,"setdefault() :"),"Set dict[key]=default if key is not already in dict."),c.a.createElement("li",null,c.a.createElement("b",null,"keys() :"),"Returns list of dictionary dict\u2019s keys."),c.a.createElement("li",null,c.a.createElement("b",null,"items() :"),"Returns a list of dict\u2019s (key, value) tuple pairs."),c.a.createElement("li",null,c.a.createElement("b",null,"has_key() :"),"Returns true if key in dictionary dict, false otherwise."),c.a.createElement("li",null,c.a.createElement("b",null,"fromkeys() :"),"Create a new dictionary with keys from seq and values set to value."),c.a.createElement("li",null,c.a.createElement("b",null,"type() :"),"Returns the type of the passed variable."),c.a.createElement("li",null,c.a.createElement("b",null,"cmp() :"),"Compares elements of both dict.")),c.a.createElement("br",null),c.a.createElement("div",{style:f},c.a.createElement(h.a,{code:C,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Check for keys"),c.a.createElement("div",{style:f},c.a.createElement(h.a,{code:z,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Looping through dictionary"),c.a.createElement("div",{style:f},c.a.createElement(h.a,{code:L,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Merge two dictionaries"),"Use the update() method to merge 2 dicts existing keys are overwritten, new keys are added",c.a.createElement("div",{style:f},c.a.createElement(h.a,{code:O,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Possible key types"),"Any immutable type, like strings or numbers can be used as a key. Also, a tuple can be used if it contains only immutable elements.",c.a.createElement("br",null),c.a.createElement("br",null),"do not mistake the keys as indices of a list, e.g my_dict[0] is not possible here",c.a.createElement("div",{style:f},c.a.createElement(h.a,{code:M,language:"js",plugins:["line-numbers"]}))))))}}]),t}(m.Component);t.default=Object(y.a)((function(e){return{paper:{margin:e.spacing(1),padding:e.spacing(1)},smMargin:{margin:e.spacing(1)},actionDiv:{textAlign:"center"}}}))(P)}}]);
//# sourceMappingURL=254.e9ccab0e.chunk.js.map