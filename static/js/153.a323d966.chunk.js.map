{"version":3,"sources":["components/ReactJs/prismCode.js","components/javaScripts/sidebar.js","components/javaScripts/deepJs/arrayApi.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","parseInts","arrays","arrObj","ArraysApi","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/153.a323d966.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introJs' className={classes.line}>IntroJs-Proxies</Link></MenuItem>\n        <MenuItem><Link to='/prototypes' className={classes.line}>Prototypes-Defa. Param</Link></MenuItem>\n        <MenuItem><Link to='/JsObjects' className={classes.line}>JsObject</Link></MenuItem>\n        <MenuItem><Link to='/array' className={classes.line}>String</Link></MenuItem>\n\n        <MenuItem><Link to='/this' className={classes.line}>This-call(), apply(), bind()</Link></MenuItem>\n        <MenuItem><Link to='/clousers' className={classes.line}>Clousers</Link></MenuItem>\n        <MenuItem><Link to='/oops' className={classes.line}>Oops-GetSet</Link></MenuItem>\n        <MenuItem><Link to='/regular' className={classes.line}>Regular</Link></MenuItem>\n        <MenuItem><Link to='/keyedCollections' className={classes.line}>Keyed Collections</Link></MenuItem>\n\n        <MenuItem><Link to='/arrayApi' className={classes.line}>Indexed colle-Arr Obj</Link></MenuItem>\n        <MenuItem><Link to='/logic' className={classes.line}>Logic</Link></MenuItem>\n        <MenuItem><Link to='/findOutput' className={classes.line}>findOutput</Link></MenuItem>\n        <MenuItem><Link to='/mcqjs' className={classes.line}>McqJs</Link></MenuItem>\n\n        <MenuItem><Link to='/hackerRank' className={classes.line}>HackerRank1</Link></MenuItem>\n        <MenuItem><Link to='/hackerRank6' className={classes.line}>HackerRank2</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst parseInts = `\nconst mockData = [];\nconst mainId = [];\nconst subParameters = [];\nconst city = [];\nconst matchingData = [];\nconst name = 'Clementina DuBuque';\nvar tempObj = [];\nvar sum = 0;\nvar avg = 0;\nvar arrayMet = [];\n\nfetch(\"https://jsonplaceholder.typicode.com/users\")\n.then(res => res.json()) \n.then(mockData => {\n  mockData.map(val => {\n    for(var i = 0; i < mockData.length; i++){\n      // console.log('api data in the loop',mockData[i])\n      if(mainId === mockData[i]._id){\n          // console.log('only match id',mockData[i]._id)\n          mockData.map(val => {\n            if(city.indexOf(val.name)===-1){\n                // console.log('only unique user city',val.address)\n                val.address.map(valCity => {\n                    subParameters.push(valCity.city)\n                    // console.log('Push city name in subParameters',subParameters)\n                    \n                    let newObj={\"id\":val._id, \"name\":val.name,'value':[]}\n                    newObj = newObj.value.push(valCity.city)\n                    // console.log('Push city name in new created object',newObj)\n                    \n                    var index=subParameters.indexOf(valCity._id)\n                    // console.log('index value',index,\":\",valCity._id)\n                    \n                    // subParameters[index].value = subParameters[index].concat(valCity._id)\n                    // console.log('index value',subParameters[index].value)\n                    \n                    if((valCity._id === mainId || valCity._id === mockData._id)){\n                        // console.log('matching hard coded value: ',valCity._id,\"=\",mockData._ids,\":\",mainId);\n                        matchingData=matchingData.concat(valCity._id);\n                        // console.log('matching values: ',matchingData)\n                    }\n                })\n            }\n            \n            else{\n              var index=subParameters.indexOf(val.phone)\n              subParameters[index].value = subParameters[index].value.concat(val.id)\n              // console.log('else values: ',subParameters)\n              }\n          })\n      }\n    }\n})\n\naddData();\npickRecord();\nSumAverage();\nextractKey();\narrayMethod();\n});\n\n\n//Add data in empty array from api values\nconst addData = () => {\nfetch(\"https://jsonplaceholder.typicode.com/users\")\n.then(res => res.json()) \n.then(mockData => {\nmockData.map(add => {\n    mockData.push(add.name)\n    \n    if(add.name === name){\n        // console.log('fields',mockData)\n        for(let i=0; i<=mockData.length; i++){\n            // console.log('Matched name',add.name)\n        }\n    }\n})\n})\n// console.log('after map',mockData);\n}\n\n\n//Pick a record from list\nconst pickRecord = () => {\nfetch(\"https://jsonplaceholder.typicode.com/users\")\n.then(res => res.json()) \n.then(mockData => {\n   mockData.map(pickRec => {\n    if(pickRec._id === mainId){\n        mockData.push(pickRec.email);\n        // console.log('map function',mockData)\n    }\n    \n// apiId = mockData.push(pickRec);\n// console.log('method',name,\";\",pickRec.name)\nif(pickRec.name === name){\n    for(let i=0; i<=mockData[i].length; i++){\n       let obj = [];\n       obj.push(mockData.name)\n        console.log('matching values',obj)\n        }\n    }\n   })\n})\n}\n\n\n//Add sum/avg of number from a list\nconst SumAverage = () => {\nfetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(res => res.json()) \n    .then(mockData => {\n   \n   mockData.map(fields => {\n    tempObj.push(fields._id) \n   })\n   for(let i =0; i<=tempObj.length;i++){\n    sum +=tempObj[i];\n    avg = sum/tempObj.length\n    // console.log('sum',sum)\n    }\n})\n\n//Flattening an array of arrays\nconst nested = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nlet flat = nested.reduce((acc, it) => [...acc, ...it], []);\nlet sumOfArray = flat.reduce((a, b) => a+b)\n// console.log('flat',flat)\n// console.log('Sum ',sumOfArray)\n}\n\n\n//Extract key/value pair from an object\nconst extractKey = () => {\nvar data = \n       [\n        {label:1, quater :'Q1', y:34},\n        {label:2, quater:'Q1', y:20},\n        {label:3, quater:'Q1', y:30},\n \n        {label:1, quater:'Q2', y:77},\n        {label:2, quater:'Q2', y:52},\n        {label:3, quater:'Q2', y:3},\n \n        {label:1, quater:'Q3', y:65},\n        {label:2, quater:'Q3', y:12},\n        {label:3, quater:'Q3', y:9},\n \n        {label:1, quater:'Q4', y:77},\n        {label:2, quater:'Q4', y:34},\n        {label:3, quater:'Q4', y:5}\n       ];\n       \nvar quartersum = {}\ndata.map(function(entry) {\n quartersum[entry.label] = (quartersum[entry.label]||0) + entry.y\n})\n\ndata.map(function(entry) {\n entry.percent = entry.y / quartersum[entry.label] * 100;\n//  console.log(JSON.stringify(entry))\n})\n\n//    console.log('data',quartersum);\n//    console.log('extract object keys',Object.keys(quartersum));\n//    console.log('extract object values',Object.values(quartersum));\n\n  for(let [key, value] of Object.entries(quartersum)){\n    //   console.log('extract object property',key, value);\n  }\n  var percentage = parseInt((sum * 100/quartersum.length));\n  console.log('percentage',percentage);\n}\n\n\nconst arrayMethod = () => {\nfetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(res => res.json()) \n    .then(arrayMeth => {\n   \n   arrayMeth.map(data => {\n    arrayMet.push(data._id)\n    // console.log('method',arrayMet)\n   })\n   \n   let scores = arrayMet.find(element => element > 4);\n   let filterScores = arrayMet.filter(element => element > 4);\n   let joinArr = filterScores.join(\"*\");\n   let spliceArr = filterScores.splice(0,2)\n   let concatArr = filterScores.concat(scores,joinArr,\"100\");\n   \n    //console.log('method',filterScores)\n   \n\n   //The slice() method slices out a piece of an array into a new array.\n   let sliceArr = filterScores.slice(0,2);\n   let toStringArr = arrayMet.toString()\n   let position = filterScores.indexOf(8)\n   \n   \n   //The includes() method determines whether an array contains a specified element.\n   let includeArr = filterScores.includes(10)\n   console.log('find',includeArr)\n})\n}`.trim();\n\n\nconst arrays = `\nconst mockData = [];\n  const mockData2 = [\"Glenna Reicher\", \"Kurtis Weissnat\", \"Ervin Howell\",\"Leanne Graham\"];\n  const commonElements = [];\n  var str = '';\n  var str2 = '';\n  var dict = {};\n  var obj = {};\n  var objKey = [];\n  var arr = [];\n  var personEmail = [];\n\nfetch(\"https://jsonplaceholder.typicode.com/users\")\n.then(res => res.json()) \n.then(person => {\n    person.map(val => {\n      mockData.push(val.name)\n    })\n    // console.log('push respose into mockdata',mockData)\n    var common = mockData.filter(item=>{\n      return mockData2.includes(item)\n  })\n  for(var i=0; i<=common.length; i++){\n    commonElements.push(common[i])\n    }\n    console.log(\"commonElements\",commonElements);\n    \n     commChar();\n     arrToObj();\n     objTOArr();\n     allSum();\n     displayDot();\n     matchName();\n  })\n  \n  \n  //Common element in strings\nconst commChar = () => {\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(res => res.json()) \n      .then(person => {\n     person.map(val => {\n      str=val.name;\n      str2=val.username;\n       })\n       \n       for(var i=0; i < str.length; i++) {\n        dict[str.charAt(i)] = 1;\n      }\n      // console.log('str',dict);\n      \n      var commonChars =[];\n    for(var i=0; i < str2.length; i++) {\n      if( dict[str2.charAt(i)] == 1) {\n        commonChars.push(str2.charAt(i)); // this is optional we can simply print\n      }\n      // console.log('str2',commonChars);  \n\n    }\n    \n    dict = commonChars.join(\"\"); \n    // console.log('commonChars',dict);\n     })\n}\n\n\n//convert an Array to Object\nconst arrToObj = () => {\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(res => res.json()) \n      .then(person => {\n          person.map(val => {\n     \n    //  console.log('arr',person)\n    //  console.log('obj',...person)\n  })\n})\n}\n\n\n//convert an Object to Array\nconst objTOArr = () => {\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(res => res.json()) \n      .then(person => {\n     \n     person.map(val => {\n      obj=val\n     })\n    //  console.log('obj',obj)\n     \n     //Convert the keys to Array using - Object.keys()\n     objKey = Object.keys(obj)\n    //  console.log('objKey',objKey)\n\n     //Converts the Values to Array using - Object.values()\n     const objVal = Object.values(obj)\n    //  console.log('objVal',objVal)\n\n     //Converts both keys and values using - Object.entries()\n     const objAll = Object.entries(obj)\n    //  console.log('objAll',objAll)\n  })\n}\n\n\n//Sum of all elements of a given array\nconst allSum = () => {\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(res => res.json()) \n      .then(person => {\n     \n     person.map(val=>{\n      arr.push(val._id);\n  })\n  var sum = arr.reduce((a, i) => {\n    return a + i;\n  });\nconsole.log('sum',sum)\n  })\n}\n\n\n//Dispay dot value  \nconst displayDot = () => {\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n  .then(res => res.json()) \n  .then(person => {\n     \n     person.map(val=>{\n      personEmail.push(val.email);\n    })\n    // console.log('personEmail',personEmail)\n  })\n}\n\n\n//Last match name\nconst matchName = () => {\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n  .then(res => res.json()) \n  .then(person => {\n     \n     const mockData = [];\n     const names = [];\n     const apiId = '5';\n     person.map(val=>{\n      mockData.push(val.id);\n      \n      if(val._id == apiId){\n        names.push(val.name)\n        for(let i=0; i<=names.length; i++){\n          }\n          console.log('inside loop',names)\n       }\n    })\n    \n    console.log('unique id',mockData)\n  })\n}`.trim();\n\n\nconst arrObj = `\nconst person = {\n  firstName: 'Max',\n  age: 31,\n  hobbies: ['Sport', 'Coocking'],\n  greet(){\n    console.log('Hi, I am', this.firstName);\n  }\n};\n\nconsole.log(person[0]); //undefined\nconsole.log(person['firstName']);\n\nperson.lastName = 'Schwarz'\nconsole.log(person);\ndelete person.age;\n\nperson.greet();`.trim();\n\nclass ArraysApi extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Array method</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={parseInts}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Arrays to Object</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={arrays}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2.Array in Object</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={arrObj}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(ArraysApi));\n"],"sourceRoot":""}