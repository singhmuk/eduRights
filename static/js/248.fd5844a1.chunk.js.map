{"version":3,"sources":["components/ReactJs/prismCode.js","components/pythone/sidebar.js","components/pythone/deeppy/pyIntro.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","pickle","unpickling","monkey_patching","monkey_patchings","generators","format","memory","fibonacci","comprehensions","behind","PyIntro","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/248.fd5844a1.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introPython' className={classes.line}>intro Python</Link></MenuItem>\n        <MenuItem><Link to='/tuples' className={classes.line}>Tuples</Link></MenuItem>\n        <MenuItem><Link to='/stringPy' className={classes.line}>Strings</Link></MenuItem>\n        <MenuItem><Link to='/iteratorsPy' className={classes.line}>Iterators</Link></MenuItem>\n        <MenuItem><Link to='/json' className={classes.line}>Json</Link></MenuItem>\n        <MenuItem><Link to='/mathematics' className={classes.line}>Mathematics</Link></MenuItem>\n        <MenuItem><Link to='/oops_' className={classes.line}>Oops</Link></MenuItem>\n        <MenuItem><Link to='/abstract' className={classes.line}>Abstract</Link></MenuItem>\n        <MenuItem><Link to='/exceptionsPy' className={classes.line}>ExceptionsHandling</Link></MenuItem>\n\n        <MenuItem><Link to='/pyIntro' className={classes.line}>Pickle</Link></MenuItem>\n\n        <MenuItem><Link to='/threadings' className={classes.line}>Thread</Link></MenuItem>\n        <MenuItem><Link to='/collections' className={classes.line}>Collections</Link></MenuItem>\n        <MenuItem><Link to='/logging' className={classes.line}>Logging</Link></MenuItem>\n        <MenuItem><Link to='/regex' className={classes.line}>Regex</Link></MenuItem>\n        <MenuItem><Link to='/tkinter' className={classes.line}>TKinter</Link></MenuItem>\n\n        <MenuItem><Link to='/logicalspy' className={classes.line}>Logicals</Link></MenuItem>\n        <MenuItem><Link to='/pyLogic' className={classes.line}>PyLogic</Link></MenuItem>\n        <MenuItem><Link to='/csv' className={classes.line}>CsvPython</Link></MenuItem>\n        <br />\n        Flask\n        <MenuItem><Link to='/conroutes' className={classes.line}>routes</Link></MenuItem>\n        <MenuItem><Link to='/httpsMethods' className={classes.line}>Https</Link></MenuItem>\n        <MenuItem><Link to='/flasksIn' className={classes.line}>Interviews</Link></MenuItem>\n\n        <MenuItem><Link to='/flask_signUp' className={classes.line}>Flask_signUp</Link></MenuItem>\n        <MenuItem><Link to='/get_search' className={classes.line}>Get_Search</Link></MenuItem>\n        <MenuItem><Link to='/load_search' className={classes.line}>Load_Search</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst pickle = `import pickle\nmylist = ['a', 'b', 'c', 'd']\nwith open('datafile.txt', 'wb') as fh:\n   pickle.dump(mylist, fh)\n   \n   \n#2\nimport pickle\ncars = ['A', 'B', 'C', 'D']\nfile = \"myCar.pkl\"\nfileobj = open(file, 'wb')\npickle.dump(cars, fileobj)\n\nfileobj.close()\n\n# Second Part\n\nfile = \"myCar.pkl\"\nfileobj = open(file,'rb')\nmycar = pickle.load(fileobj)\nprint(mycar)\nprint(type(mycar))\n`.trim()\n\nconst unpickling = `\nimport pickle\npickle_off = open (\"datafile.txt\", \"rb\")\nemp = pickle.load(pickle_off)\nprint(emp)\n\nO/P: ['a', 'b', 'c', 'd']`.trim()\n\n\nconst monkey_patching = `# monkeyy.py \nclass X: \n     def func(self): \n          print \"func() is being called\"\n\n          \nimport monkeyy \ndef monkey_f(self): \n     print \"monkey_f() is being called\"                                # replacing address of “func” with “monkey_f”\n\nmonkeyy.X.func = monkey_f \nobj = monk.X()                                          # calling “func” whose address got replaced with “monkey_f()”\n\nobj.func()\n`.trim()\n\nconst monkey_patchings = `\nclass Test:\n    def __init__(self,x):\n        self.a=x;\n    def get_data(self):\n        print(\"Some code to fetch data from database\")\n    def f1(self):\n        self.get_data()\n    def f2(self):\n        self.get_data()\nt1=Test(5)\n# t1.f1()\n# t1.f2()\n\ndef new_get_data(self):\n    print(\"Some code to fetch data from test data\")\nTest.get_data = new_get_data\nprint(\"After Monkey Patching\")\nt1.f1()\nt1.f2()`.trim();\n\nconst generators = `\ndef my_generator():\n        yield 1\n        yield 2\n        yield 3\n              \n\n#2\ndef evenNumbers(n):\n    i=1\n    while n:                                                      # Return keyword return value with control.\n        yield 2*i                                                 # Yield return value but function paouse not control.\n        i+=1\n        n-=1\n\nit=evenNumbers(10)\neven_list=[]\nwhile True:\n    try:\n        even_list.append(next(it))\n        # even_list += next(it)\n    except StopIteration:\n        break\nprint(even_list)\n`.trim();\n\nconst format = `\ndef countdown(num):\n    print('Starting')\n    while num > 0:\n        yield num\n        num -= 1\n\ncd = countdown(3)                                                         # this will not print 'Starting'\nprint(next(cd))                                                           # this will print 'Starting' and the first value\n\nprint(next(cd))                                                           # will print the next values\nprint(next(cd))\nprint(next(cd))                                                           # this will raise a StopIteration\n`.trim();\n\nconst memory = `\n# without a generator\ndef firstn(n):\n    num, nums = 0, []\n    while num < n:\n        nums.append(num)\n        num += 1\n    return nums\n\nsum_of_first_n = sum(firstn(1000000))\nprint(sum_of_first_n)\nimport sys\nprint(sys.getsizeof(firstn(1000000)), \"bytes\")\n\n\n# with a generator\ndef firstn(n):\n    num = 0\n    while num < n:\n        yield num\n        num += 1\n\nsum_of_first_n = sum(firstn(1000000))\nprint(sum_of_first_n)\nimport sys\nprint(sys.getsizeof(firstn(1000000)), \"bytes\")\n`.trim();\n\nconst fibonacci = `\ndef fibonacci(limit):\n    a, b = 0, 1 \n    while a < limit:\n        yield a\n        a, b = b, a + b\n\nfib = fibonacci(30)\nprint(list(fib))                                                  # generator objects can be converted to a list\n`.trim();\n\nconst comprehensions = `\nmygenerator = (i for i in range(1000) if i % 2 == 0)                # generator expression\nprint(sys.getsizeof(mygenerator))\n\nmylist = [i for i in range(1000) if i % 2 == 0]                     # list comprehension\nprint(sys.getsizeof(mylist))`.trim();\n\nconst behind = `\nclass firstn:\n    def __init__(self, n):\n        self.n = n\n        self.num = 0\n        \n    def __iter__(self):\n        return self\n    \n    def __next__(self):\n        if self.num < self.n:\n            cur = self.num\n            self.num += 1\n            return cur\n        else:\n            raise StopIteration()\n             \nfirstn_object = firstn(1000000)\nprint(sum(firstn_object))\n`.trim();\n\n\n\nclass PyIntro extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Define pickling and unpickling.</h3>\n              Pickling is the process of converting Python objects, such as lists, dicts, etc., into a character stream.\n\n              <div style={titles}>\n                <PrismCode\n                  code={pickle}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              In the above code, list – “mylist” contains four elements (‘a’, ‘b’, ‘c’, ‘d’). We open the file in “wb” mode instead of “w” as all the operations are done using bytes in the current working directory. A new file named “datafile.txt” is created, which converts the mylist data in the byte stream.\n              <br />\n              <i>The process of retrieving the original Python objects from the stored string representation, which is the reverse of the pickling process, is called unpickling.</i>\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={unpickling}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Pickle Exceptions</b>\n              <br />\n              Some of the common exceptions raised while dealing with pickle module:\n              <ul>\n                <li><b>Pickle.PicklingError: </b>If the pickle object doesn’t support pickling, this exception is raised.</li>\n                <li><b>Pickle.UnpicklingError: </b>In case the file contains bad/ corrupted data.</li>\n                <li><b>EOFError: </b>In case the end of file is detected, this exception is raised.</li>\n              </ul>\n              <br />\n\n              <b>Prons:</b><br />\n              <ul>\n                <li>Save complicated data.</li>\n                <li>Easy to use, lighter and doesn’t require several lines of code.</li>\n                <li>The pickled file generated is not easily readable and thus provide some security.</li>\n              </ul>\n              <br />\n\n              <b>Cons:</b><br />\n              <ul>\n                <li>Languages other than python may not able to reconstruct pickled python objects.</li>\n                <li>Risk of unpickling data from malicious sources.</li>\n              </ul>\n              <br />\n\n              <h3>Monkey patching</h3>\n              Change object behavior during run time.\n              <br />\n              <ul>\n                <li>Monkey patching is the process of modifications that are done to a class/ module during the runtime.</li>\n                <li>This is done as Python supports changes in the behavior of the program while ssbeing executed.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={monkey_patching}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={monkey_patchings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Generators</h3>\n              <ul>\n                <li>Generators are functions that can be paused and resumed, returning an object that can be iterated over. </li>\n                <li>They are lazy and thus produce items one at a time and only when asked. Furthermore, we do not\n                  need to wait until all the elements have been generated before we start to use them.</li>\n                <li>They are much more memory efficient when dealing with large datasets.</li>\n                <li>A generator is defined like a normal function but use the yield statement instead of return.</li>\n              </ul>\n              <br />\n\n\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={generators}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Execution of a generator function</h3>\n              Calling the function does not execute it. Instead, the function returns a generator object which is\n              used to control execution.\n              <br />\n              <ul>\n                <li>Generator objects execute when next() is called. When calling next() the\n                  first time, execution begins at the start of the function and continues until the first yield statement.</li>\n                <li>Subsequent calls to next() continue from the yield statement (and loop around) until another yield is reached.</li>\n              </ul>\n              <br />\n              If yield is not called because of a condition or the end is reached, a StopIteration exception is raised.\n              <br />\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={format}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Generators save memory!</h3>\n              <ul>\n                <li>Without a generator, the complete sequence has to be stored in a list.</li>\n                <li>With a generator, no additional sequence is needed to store the numbers.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={memory}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Another example: Fibonacci numbers</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={fibonacci}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Generator expressions</h3>\n              <ul>\n                <li>Like list, generators can be written in the same syntax except with parenthesis instead of square brackets.</li>\n                <li>Generator expressions are slower than list because of the overhead of function calls.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={comprehensions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Concept behind a generator</h3>\n              It has to implement <b>__iter__</b> and <b>__next__</b> to make it iterable, keep, and take care of a StopIteration.\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={behind}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(PyIntro));\n"],"sourceRoot":""}