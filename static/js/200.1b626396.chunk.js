(this["webpackJsonpmern-stack-client"]=this["webpackJsonpmern-stack-client"]||[]).push([[200],{140:function(e,n,t){"use strict";t.d(n,"a",(function(){return d}));var r=t(45),s=t(28),a=t(136),l=t(137),o=t(139),u=t(0),m=t.n(u),c=t(138),i=t.n(c),d=(t(59),function(e){function n(e){var t;return Object(r.a)(this,n),(t=Object(a.a)(this,Object(l.a)(n).call(this,e))).highlight=function(){t.ref&&t.ref.current&&i.a.highlightElement(t.ref.current)},t.ref=m.a.createRef(),t}return Object(o.a)(n,e),Object(s.a)(n,[{key:"componentDidMount",value:function(){this.highlight()}},{key:"componentDidUpdate",value:function(){this.highlight()}},{key:"render",value:function(){var e=this.props,n=e.code,t=(e.plugins,e.language);return m.a.createElement("pre",{className:"code-prism"},m.a.createElement("code",{ref:this.ref,className:"language-".concat(t)},n.trim()))}}]),n}(m.a.Component))},141:function(e,n,t){},155:function(e,n,t){"use strict";t.d(n,"a",(function(){return c}));var r=t(0),s=t.n(r),a=t(26),l=t(297),o=t(295),u=t(114),m=Object(u.a)((function(e){return{root:{display:"flex"},paper:{marginRight:e.spacing(2)},line:{textDecoration:"none"}}}));function c(){var e=m();return s.a.createElement("div",{className:e.root},s.a.createElement(o.a,null,s.a.createElement(l.a,null,s.a.createElement(a.b,{to:"/infoMD",className:e.line},"IntroMD")),s.a.createElement(l.a,null,s.a.createElement(a.b,{to:"/intro",className:e.line},"Queries")),s.a.createElement(l.a,null,s.a.createElement(a.b,{to:"/mongodbMethods",className:e.line},"mongodbMethods")),s.a.createElement(l.a,null,s.a.createElement(a.b,{to:"/mongoCurd",className:e.line},"MongoCurd-Ref")),s.a.createElement(l.a,null,s.a.createElement(a.b,{to:"/mongoQueries",className:e.line},"Mongo Queries")),s.a.createElement(l.a,null,s.a.createElement(a.b,{to:"/searchErrorHandling",className:e.line},"searchErrorHandling")),s.a.createElement(l.a,null,s.a.createElement(a.b,{to:"/bulkRight",className:e.line},"BulkWright")),s.a.createElement(l.a,null,s.a.createElement(a.b,{to:"/mysql",className:e.line},"Mysql")),s.a.createElement(l.a,null,s.a.createElement(a.b,{to:"/mysqlCurd",className:e.line},"MysqlCurd")),s.a.createElement(l.a,null,s.a.createElement(a.b,{to:"/joinOp",className:e.line},"JoinOp")),s.a.createElement(l.a,null,s.a.createElement(a.b,{to:"/sortOp",className:e.line},"Sort")),s.a.createElement(l.a,null,s.a.createElement(a.b,{to:"/curdOp",className:e.line},"CurdOp")),s.a.createElement(l.a,null,s.a.createElement(a.b,{to:"/gridFs",className:e.line},"gridFs")),s.a.createElement(l.a,null,s.a.createElement(a.b,{to:"/postgressql",className:e.line},"PostgreSql"))),s.a.createElement("div",null))}},383:function(e,n,t){"use strict";t.r(n);var r=t(45),s=t(28),a=t(136),l=t(137),o=t(139),u=t(0),m=t.n(u),c=t(138),i=t.n(c),d=t(120),p=t(57),g=t(296),b=t(5),E=(t(141),t(155)),h=t(140),y={backgroundColor:"#F0F8FF",padding:"1px",fontSize:"16px"},f="\nconst mongoose = require('mongoose');\n\nconst dbCon = mongoose.connect(process.env.MONGO_URL, {\n    useNewUrlParser: true,\n    useUnifiedTopology: true\n  }, err =>{\n    if(err) throw err;\n    console.log('Connected to MongoDB')\n  })\n\n\n  module.exports = dbCon;".trim(),q="\nconst mongoose = require('mongoose');\nconst Schems = mongoose.Schema;\n\nconst ItemSchema = new Schems({\n  name: {type:String, required:true, minlength: [3, \"Length aleast 3 characters or longer\"]},\n  rank: {type:Number, required: [true, \"Please provide a name to the bootcamp\"]},\n  counts: [Number],\n  isAdmin: { type: Boolean, required: true, default: false },\n  followers: {type:Array, default:[]},\n  desc: { type: String, max: 500 },\n  img: { type: String },\n  date: {type:Date, default:Date.now}\n  students: [{ type: 'ObjectId', ref: 'Student' }],               //ref name == schemma name\n  type: { type: String, required: true, default:'professional' }, //radio\n},\n{ timestamps: true })\n\nmodule.exports = Item = mongoose.model('item', ItemSchema);".trim(),j="\nconst express = require('express');\nconst router = express.Router();\nconst Item = require('../models/items');\n\n\nrouter.getAll = async (req,res) => {\n    try{\n        Item.find()\n             .sort({date:-1})\n             .then(item=>res.json(item));\n    }catch(err){\n        console.log(err)\n    }\n}\n\nrouter.createItem = async (req,res) => {\n    try{\n        const newItem = new Item({\n            name: req.body.name\n        });\n\n        newItem.save().then(item => res.json(item));\n    }catch(err){\n        console.log(err)\n    }\n}\n\nrouter.getById = async (req,res) => {\n    try{\n        Item.findById(req.params.id)\n            .then(item => res.json(item))\n    }catch(err){\n        console.log(err)\n    }\n}\n\nrouter.remove = async (req, res) => {\n    Item.findByIdAndDelete(req.params.id)\n        .then(item => item.remove()\n        .then(() => res.json({success:true})))\n}\n\nrouter.updates = async (req,res) => {\n    Item.findByIdAndUpdate(req.params.id, {\n        name:req.body.name\n    }, {new:true}).then(data=>res.send(data))\n}\n\n\nmodule.exports = router;".trim(),I='\nconst express = require(\'express\');\nconst router = express.Router();\nconst ItemControllers = require(\'../controllers/items\');\n\nrouter.route("/").get(ItemControllers.getAll);\nrouter.route("/:id").get(ItemControllers.getById);\nrouter.route("/").post(ItemControllers.createItem);\nrouter.route("/:id").delete(ItemControllers.remove);\nrouter.route("/:id").put(ItemControllers.updates);\n\nmodule.exports = router;'.trim(),S="\nconst express=require('express');\nconst app=express();\nrequire('dotenv').config();\nconst dbCon = require('./config/db');\nconst itemsRouter = require('./routes/items')\n\napp.use(express.urlencoded({extended:true}));\napp.use(express.json());\n\ndbCon;\n\napp.use(\"/items\", itemsRouter);\n\nconst port = process.env.PORT;\napp.listen(port,()=> console.log('Server is running on port '$'{port}'))".trim(),v="\nconst classSchema = new Schema({\n  name: { type: String, unique: true },\n  students: [{ type: 'ObjectId', ref: 'Student' }]\n})\n//students is refress like objectId not data in a class can be many students should be ref name == schemma name\n\nmodule.exports = mongoose.model(\"Class\", classSchema);\n\n\n//studentSchema\nconst studentSchema = new Schema({\n  name: { type: String, unique: true },\n  age: Number,\n  subject: String,\n})\n\nmodule.exports = mongoose.model(\"Student\", studentSchema);\n".trim(),O="\nconst Class = require('../models/class');\n\nrouter.all = async (req, res) => {\n    Class.find({}).populate('students').exec((err, docs) => {\n      //populate fields which want to pass\n      if (err) throw (err);\n      res.json(docs)\n    })\n};\n\nrouter.createClass = async (req, res) => {\n    let newClass = new Class();\n    newClass.name = req.body.name;\n    newClass.students = [];\n    newClass.save((err) => {\n      if (err) res.json({ \"error\": err });\n      else res.json(newClass)\n    })\n};\n\nrouter.updateClass = async (req, res) => {\n    Class.findOneAndUpdate({ _id: req.params.id },\n      { $push: { students: req.body.studentsId } }, { new: true }, (err, doc) => {\n        //$push used to push data in students array, we push studentsId\n        if (err) throw (err);\n        else res.json(doc)\n      })\n};".trim(),x="\nconst Student = require('../models/students');\n\nrouter.all = async (req, res) => {\n    Student.find({}).exec((err, docs) => {\n      if (err) throw (err);\n      res.json(docs)\n    })\n};\n\nrouter.createStudent = async (req, res) => {\n    let student = new Student();\n    student.name = req.body.name;\n    student.age = req.body.age;\n    student.subject = req.body.subject;\n    student.save((err) => {\n      if (err) res.json({ \"error\": err });\n      else res.json(student)\n    })\n};\n\nrouter.updateStudent = async (req, res) => {\n    Student.findOneAndUpdate({ _id: req.param.id },\n      { $set: { age: req.body.age } }, { new: true }, (err, doc) => {\n        if (err) throw (err);\n        else res.json(doc)\n      })\n};\n\n// app.put('/students/:id', (req, res) => {\n//   Student.findOneAndUpdate({ _id: req.param.id },\n//     { $set: { age: req.body.age } }, { new: true }, (err, doc) => {\n//       if (err) throw (err);\n//       else res.json(doc)\n//     })\n// })".trim(),C='\nconst classCont = require(\'../controllers/class\');\n\nrouter.route("/").get(classCont.all);\nrouter.route("/").post(classCont.createClass);\nrouter.route("/:id").put(classCont.updateClass);\n\n\n//Students Routes\nconst express = require(\'express\');\nconst router = express.Router();\nconst studentsCont = require(\'../controllers/students\');\n\nrouter.route("/").get(studentsCont.all);\nrouter.route("/").post(studentsCont.createStudent);\nrouter.route("/:id").put(studentsCont.updateStudent);\n'.trim(),R="\nconst classRoutes = require('./routes/classRoutes');\nconst studetsRoutes = require('./routes/studentsRoutes');\n\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\n\ndbCon;\n\napp.use('/class', classRoutes);\napp.use('/students', studetsRoutes);\n\nconst PORT = process.env.PORT;\napp.listen(PORT, () => console.log('Server listening on port.'));".trim(),w="\nconst courseSchema = new mongoose.Schema({\n  _id: Number,\n  name: String,\n  category: String\n});\n\nconst studentSchema = new mongoose.Schema({\n  name: String,\n  enroll: Number,\n  courseId: Number\n});\n\nconst Course = mongoose.model('course', courseSchema);\nconst Student = mongoose.model('student', studentSchema);\n\nmodule.exports = { Student, Course }\n\n\n//ItemsOp\nconst ItemsOp = mongoose.Schema({\n  name: String,\n  date: new Date(),\n  ItemsOps: [{ type: mongoose.Schema.ObjectId, ref: 'itemsOps' }]\n});\n\nmodule.exports = mongoose.model('itemsOp', ItemsOp);\n\n\n//ItemsOps\nconst ItemsOps = mongoose.Schema({\n  name: String,\n  price: Number,\n  ItemsOp: [{ type: mongoose.Schema.ObjectId, ref: 'itemsOp' }]\n});\n\nmodule.exports = mongoose.model('itemsOps', ItemsOps);\n".trim(),N='\nconst { Student, Course } = require(\'../models/finds\');\n\nvar dbcourse = [];\nrouter.all = async (req, res, next) => {\n    Course.find({ category: "database" })\n      .then(data => {\n        console.log("Database Courses:", data)\n\n        data.map((d, k) => {\n          dbcourse.push(d._id);\n        })\n\n    Student.find({ courseId: { $in: dbcourse } })\n      .then(data => {\n        console.log("Students in Database Courses:"+ data +"dbcourse", dbcourse)\n      })\n      .catch(error => {\n        console.log(error);\n      })\n  })\n};'.trim(),M="\nconst Item = require('../models/item');\n\nrouter.all = async (req, res, next) => {\n    Item.find()\n      .populate({\n        path: 'itemsOps',\n        populate: { path: 'itemsOps' }\n      })\n      .sort({ date: -1 })\n      .then(items => res.json(items));\n};\n\nrouter.getOne = async (req, res, next) => {\n    Item.findById(req.params.id)\n      .sort({ date: -1 })\n      .then(items => res.json(items));\n};\n\nrouter.creates = async (req, res, next) => {\n    const newItem = new Item({\n      name: req.body.name\n    });\n\n    newItem.save().then(item => res.json(item));\n};\n\nrouter.update = async (req, res, next) => {\n    Item.findByIdAndUpdate(req.params.id, {\n      name: req.body.name,\n    }, { new: true }).then(data => { res.send(data) })\n};\n\nrouter.remove = async (req, res, next) => {\n    Item.findById(req.params.id)\n      .then(item => item.remove().then(() => res.json({ success: true })))\n};".trim(),k='\nconst Item = require(\'../models/itemsOp\');\n\nrouter.allsorts = async (req, res, next) => {\n    Item.find()\n      .sort({ price: 1 })\n      .then(items => res.json(items));\n};\n\nrouter.creates = async (req, res, next) => {\n    const newItem = new Item({\n      name: req.body.name,\n      price: req.body.price\n    });\n\n    newItem.save().then(item => res.json(item));\n};\n\n//Limit\nrouter.limits = async (req, res, next) => {\n    Item.find()\n      .limit(2)\n      .then(items => res.json(items));\n};\n\n//filter Regx\nrouter.filtersRegx = async (req, res, next) => {\n  var query = { name: /^C/ };\n  \n    Item.find(query)\n      .then(items => res.json(items));\n};\n\n//filter \nrouter.filters = async (req, res, next) => {\n  var query = { name: "Mobile" };\n    Item.find(query)\n      .then(items => res.json(items));\n};\n\n//left join\nrouter.joins = async (req, res, next) => {\n  var query = { name: "Mobile" };\n    Item.find(query)\n      .then(items => res.json(items));\n};'.trim(),D='\nconst itemRoutes = require(\'../controllers/finds\');\nrouter.route("/").get(itemRoutes.all);\n\n\n//itemRoutes\nconst itemRoutes = require(\'../controllers/item\');\n\nrouter.route("/").get(itemRoutes.all);\nrouter.route("/:id").get(itemRoutes.getOne);\nrouter.route("/").post(itemRoutes.creates);\nrouter.route("/:id").patch(itemRoutes.update);\nrouter.route("/:id").delete(itemRoutes.remove);\n\n\n//itemOpRoutes\nconst itemRoutes = require(\'../controllers/itemsOp\');\n\nrouter.route("/").get(itemRoutes.allsorts);\nrouter.route("/").post(itemRoutes.creates);\nrouter.route("/lmt").get(itemRoutes.limits);\nrouter.route("/fltrebx").get(itemRoutes.filtersRegx);\nrouter.route("/flt").get(itemRoutes.filters);\nrouter.route("/ljoins").get(itemRoutes.joins);\n'.trim(),A="\nconst itemsOp = require('./routes/itemsOp');\nconst findsOp = require('./routes/finds');\n\nconst app = express();\n\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\n\ndbCon;\n\napp.use('/itemsOp', itemsOp);\napp.use('/finds', findsOp);\n\nconst port = process.env.PORT;\napp.listen(port, () => console.log('Server listening on port.''));".trim(),B=function(e){function n(){return Object(r.a)(this,n),Object(a.a)(this,Object(l.a)(n).apply(this,arguments))}return Object(o.a)(n,e),Object(s.a)(n,[{key:"componentDidMount",value:function(){setTimeout((function(){return i.a.highlightAll()}),0)}},{key:"render",value:function(){var e=this.props.classes;return m.a.createElement(d.a,{container:!0},m.a.createElement(d.a,{item:!0,xs:2},m.a.createElement(p.a,{className:e.paper},m.a.createElement("h4",null,m.a.createElement(E.a,null)))),m.a.createElement(d.a,{item:!0,xs:10},m.a.createElement(p.a,{className:e.paper},m.a.createElement(g.a,null,m.a.createElement("h3",null,"MongoCurd"),m.a.createElement("b",null,"config/db.js"),m.a.createElement("div",{style:y},m.a.createElement(h.a,{code:f,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("br",null),m.a.createElement("b",null,"models/items.js"),m.a.createElement("div",{style:y},m.a.createElement(h.a,{code:q,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("br",null),m.a.createElement("b",null,"controllers/items.js"),m.a.createElement("div",{style:y},m.a.createElement(h.a,{code:j,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("br",null),m.a.createElement("b",null,"routes/items.js"),m.a.createElement("div",{style:y},m.a.createElement(h.a,{code:I,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("br",null),m.a.createElement("b",null,"server.js"),m.a.createElement("div",{style:y},m.a.createElement(h.a,{code:S,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("br",null),m.a.createElement("h3",null,"Join"),m.a.createElement("b",null,"models/class.js"),m.a.createElement("br",null),m.a.createElement("b",null,"models/students.js"),m.a.createElement("div",{style:y},m.a.createElement(h.a,{code:v,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("br",null),m.a.createElement("b",null,"controllers/class.js"),m.a.createElement("div",{style:y},m.a.createElement(h.a,{code:O,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("br",null),m.a.createElement("b",null,"controllersStudents/students.js"),m.a.createElement("div",{style:y},m.a.createElement(h.a,{code:x,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("br",null),m.a.createElement("b",null,"routes/items.js"),m.a.createElement("div",{style:y},m.a.createElement(h.a,{code:C,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("br",null),m.a.createElement("b",null,"server.js"),m.a.createElement("div",{style:y},m.a.createElement(h.a,{code:R,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("br",null),m.a.createElement("h3",null,"Join_Ref"),m.a.createElement("b",null,"modelsJoin/finds.js"),m.a.createElement("br",null),m.a.createElement("b",null,"modelsJoin/item.js"),m.a.createElement("br",null),m.a.createElement("b",null,"modelsJoin/itemsOp.js"),m.a.createElement("br",null),m.a.createElement("div",{style:y},m.a.createElement(h.a,{code:w,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("br",null),m.a.createElement("b",null,"controllers/finds.js"),m.a.createElement("div",{style:y},m.a.createElement(h.a,{code:N,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("br",null),m.a.createElement("b",null,"controllers/item.js"),m.a.createElement("div",{style:y},m.a.createElement(h.a,{code:M,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("br",null),m.a.createElement("b",null,"controllers/itemsOp.js"),m.a.createElement("div",{style:y},m.a.createElement(h.a,{code:k,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("br",null),m.a.createElement("b",null,"routes/find.js"),m.a.createElement("div",{style:y},m.a.createElement(h.a,{code:D,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("br",null),m.a.createElement("b",null,"server.js"),m.a.createElement("div",{style:y},m.a.createElement(h.a,{code:A,language:"js",plugins:["line-numbers"]}))))))}}]),n}(u.Component);n.default=Object(b.a)((function(e){return{paper:{margin:e.spacing(1),padding:e.spacing(1)},smMargin:{margin:e.spacing(1)},actionDiv:{textAlign:"center"}}}))(B)}}]);
//# sourceMappingURL=200.1b626396.chunk.js.map